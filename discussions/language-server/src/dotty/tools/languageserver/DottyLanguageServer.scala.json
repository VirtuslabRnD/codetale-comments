[
  {
    "id" : "9f4f08a4-8b15-47a9-920d-fe17b3defb50",
    "prId" : 5476,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5476#pullrequestreview-176807216",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53e09896-2230-417a-92fe-e7d46f3b684d",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "While you're extending what we show in completion: CompletionItem has a `deprecated` field we could set now.",
        "createdAt" : "2018-11-20T14:32:54Z",
        "updatedAt" : "2018-11-23T15:30:35Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "368d2bc5-f69d-4f10-8dc5-fc6a5b77c3ca",
        "parentId" : "53e09896-2230-417a-92fe-e7d46f3b684d",
        "authorId" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "body" : "Good idea. That's done, but I can't see a difference in VSCode. The tests show it is actually marked as deprecated, though...",
        "createdAt" : "2018-11-20T14:57:58Z",
        "updatedAt" : "2018-11-23T15:30:35Z",
        "lastEditedBy" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "tags" : [
        ]
      }
    ],
    "commit" : "89f850a750f237086cd69f4bdac07af3a6fd9f37",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +801,805 @@    ParsedComment.docOf(sym).foreach { doc =>\n      item.setDocumentation(markupContent(doc.renderAsMarkdown))\n    }\n    item.setDeprecated(sym.isDeprecated)\n    item.setKind(completionItemKind(sym))"
  },
  {
    "id" : "3ebe39ba-4133-465a-bfcc-80e55a2b86dc",
    "prId" : 5476,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5476#pullrequestreview-177869860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e817f4b-1014-4847-a5f8-17def9ca77b8",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Idea: instead of just showing the full name we could show the kind of the symbol too, e.g. \"class a.b.c.Foo\", \"val x\", ... and in the case where there's more than one symbol with the same name, we could show both at the same time \"class and object a.b.c.Foo\", ... We can reuse the code used in the REPL when printing a declaration.",
        "createdAt" : "2018-11-23T10:20:54Z",
        "updatedAt" : "2018-11-23T15:30:35Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "89f850a750f237086cd69f4bdac07af3a6fd9f37",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +797,801 @@    val label = sym.name.show\n    val item = new lsp4j.CompletionItem(label)\n    val detail = if (sym.isType) sym.showFullName else sym.info.widenTermRefExpr.show\n    item.setDetail(detail)\n    ParsedComment.docOf(sym).foreach { doc =>"
  },
  {
    "id" : "5062b973-b670-4179-b161-3258d194caff",
    "prId" : 5102,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5102#pullrequestreview-160204489",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d78bbd9-f944-4e1c-a1d2-202a74e18d53",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Put thisServer.synchronized around since this isn't thread-safe.",
        "createdAt" : "2018-10-01T08:56:34Z",
        "updatedAt" : "2018-10-09T08:38:24Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a19df7a5c57e491c3ba1b17f59a954495618b2a",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +238,242 @@    /*thisServer.synchronized*/ {}\n\n  override def didSave(params: DidSaveTextDocumentParams): Unit = {\n    /*thisServer.synchronized*/ {}\n  }"
  },
  {
    "id" : "870da569-f96c-4c7e-a3b2-3af3f4d9445a",
    "prId" : 5057,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5057#pullrequestreview-150969225",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c85f19e-13f9-417f-a42f-d8ae24bf08e4",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "This expression is a bit dense. I believe the following would be slightly longer, but more readable:\r\n```scala\r\nval paramSymbol = \r\n  for {\r\n    DefDef(_, _, paramss, _, _) <- tpd.defPath(funSym, classTree).lastOption\r\n    param <- paramss.flatten.find(_.name == name)\r\n  } yield param.symbol\r\nparamSymbol.getOrElse(fn.symbol)\r\n```\r\n    ",
        "createdAt" : "2018-08-30T12:30:03Z",
        "updatedAt" : "2018-08-30T12:31:13Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "5180c93e5d87e7fa11aa5c09ce107e97467320d0",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +263,267 @@          } else {\n            val classTree = funSym.topLevelClass.asClass.tree\n            tpd.defPath(funSym, classTree).lastOption.flatMap {\n              case DefDef(_, _, paramss, _, _) =>\n                paramss.flatten.find(_.name == name).map(_.symbol)"
  },
  {
    "id" : "c7614332-0e41-4b04-a106-8924f838c881",
    "prId" : 4828,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4828#pullrequestreview-139937904",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c40561e0-ff50-432b-b233-54e2f336dccc",
        "parentId" : null,
        "authorId" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "body" : "There used to be a thin line that separated the type info from the comment. It would be nice to re-introduce it, since it makes the hover information easier to read:\r\n\r\n```scala\r\ncase Some(comment) =>\r\n  s\"\"\"```scala\r\n     |$typeInfo\r\n     |```\r\n     |---\r\n     |```scala\r\n     |$comment\r\n     |```\"\"\"\r\n```",
        "createdAt" : "2018-07-24T07:54:06Z",
        "updatedAt" : "2018-07-24T07:54:50Z",
        "lastEditedBy" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "tags" : [
        ]
      },
      {
        "id" : "50979b37-77c7-4295-b731-d5a67ff86358",
        "parentId" : "c40561e0-ff50-432b-b233-54e2f336dccc",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I tried that but that's not equivalent to the thin line we had before: it adds a really thick line which I find distracting",
        "createdAt" : "2018-07-24T11:43:10Z",
        "updatedAt" : "2018-07-24T11:43:11Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "4c611884-eb9f-4610-862f-ee0dffb0df9d",
        "parentId" : "c40561e0-ff50-432b-b233-54e2f336dccc",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "There's an issue for this: https://github.com/Microsoft/language-server-protocol/issues/518",
        "createdAt" : "2018-07-24T15:07:45Z",
        "updatedAt" : "2018-07-24T15:07:45Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa70ed36404acaeb95c44087b11ba1962c1d055d",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +476,480 @@             |$typeInfo\n             |$comment\n             |```\"\"\"\n        case None =>\n          s\"\"\"```scala"
  },
  {
    "id" : "f690fe3f-4a5c-4701-a78a-b731477632c5",
    "prId" : 4635,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4635#pullrequestreview-127368534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5f5e49d-cf5a-4525-a15e-b02546c2c875",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "I've hit on the same issue when doing syntax highlighting. The problem is that `namePos` is nonsensical for some special trees. For example trees named `<init>` or `<error>`. This probably doesn't fix the problem because you still get a position that exists but is wrong. I tried to fix it in #4548, but that's not the correct fix. `namePos` should probably return `NoPosition` for \"synthetic\" names. But I don't think we have such think as \"synthetic\" names.",
        "createdAt" : "2018-06-09T14:31:12Z",
        "updatedAt" : "2018-06-09T14:31:12Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "63cb210eb5bf2e7222d8b47c0ade083b275cfca2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +329,333 @@    else {\n      val refs = Interactive.namedTrees(uriTrees, Include.references | Include.overriding, sym)\n      ( for (ref <- refs if ref.namePos.exists)\n        yield new DocumentHighlight(range(ref.namePos), DocumentHighlightKind.Read)\n      ).asJava"
  },
  {
    "id" : "a983a896-eaed-42f5-81dc-0d38c3d1909f",
    "prId" : 4199,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4199#pullrequestreview-173424234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab8f94e3-346e-49b4-8cd1-70d404ecc70d",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "In what case does .distinct make a difference here ?",
        "createdAt" : "2018-11-08T14:50:12Z",
        "updatedAt" : "2018-11-16T07:02:15Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "7fa58203-02ff-41da-a35d-3569636f31db",
        "parentId" : "ab8f94e3-346e-49b4-8cd1-70d404ecc70d",
        "authorId" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "body" : "In the UI, it makes no difference, but it does when we test. Consider this snippet:\r\n```scala\r\nobject O { def foo = 0; type foo = Int }\r\nimport O.foo\r\n```\r\n\r\nIf you highlight `foo` in `O.foo`, you'll get two symbols to match: `def foo` and `type foo`. When inspecting `import O.foo`, we'll create the two select nodes `O.foo` (term) and `O.foo` (type). Both nodes have the same position and both will match. I don't know how to completely avoid the duplicates in this particular situation and be able to remove the `.distinct`.\r\n\r\nI've improved how we construct those select nodes to make sure that we get fewer duplicates, which should be slightly more performant.\r\n",
        "createdAt" : "2018-11-09T14:08:57Z",
        "updatedAt" : "2018-11-16T07:02:15Z",
        "lastEditedBy" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "tags" : [
        ]
      }
    ],
    "commit" : "f88ad867967c80e8827bef031f6188d620af5edf",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +424,428 @@        nameRange <- range(ref.namePos, positionMapperFor(ref.source))\n      } yield new DocumentHighlight(nameRange, DocumentHighlightKind.Read))\n    }.distinct.asJava\n  }\n"
  },
  {
    "id" : "4cf40ef2-1a21-43f7-9ec6-c46030eb094f",
    "prId" : 4199,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4199#pullrequestreview-173469399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c13808d4-72e4-4c77-95d8-9b9c02d077b5",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "This case and the next one could share code",
        "createdAt" : "2018-11-09T15:56:19Z",
        "updatedAt" : "2018-11-16T07:02:15Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "f88ad867967c80e8827bef031f6188d620af5edf",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +367,371 @@      path match {\n        // Selected a renaming in an import node\n        case Thicket(_ :: (rename: Ident) :: Nil) :: (_: Import) :: rest if rename.pos.contains(pos.pos) =>\n          findRenamedReferences(uriTrees, syms, rename.name)\n"
  },
  {
    "id" : "939b39fa-013d-4d24-8f40-ce2438569976",
    "prId" : 3967,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3967#pullrequestreview-99764536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "803c75e7-7f8d-4b91-baa2-0b98cee4d438",
        "parentId" : null,
        "authorId" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "body" : "Shouldn't `checkMemory()` be called also when doing the other operations? I imagine that `completion` and `references` in particular can require quite some memory.",
        "createdAt" : "2018-02-13T20:32:52Z",
        "updatedAt" : "2018-03-09T13:54:11Z",
        "lastEditedBy" : "e625ae4c-fba4-4c8f-9728-a669f65f1bcb",
        "tags" : [
        ]
      },
      {
        "id" : "0f7f0515-2b5a-47c1-bf32-60beaab65d8a",
        "parentId" : "803c75e7-7f8d-4b91-baa2-0b98cee4d438",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Since they do not involve new runs, I don't think it's a problem.  The leak comes from the memory of previous runs not being completely reclaimed.",
        "createdAt" : "2018-02-27T16:50:36Z",
        "updatedAt" : "2018-03-09T13:54:11Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "659ab0becaa1637fd37b0962d204c4d4f03f9a0c",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +194,198 @@\n  override def didChange(params: DidChangeTextDocumentParams): Unit = thisServer.synchronized {\n    checkMemory()\n    val document = params.getTextDocument\n    val uri = new URI(document.getUri)"
  },
  {
    "id" : "1045152c-757d-4665-9035-efd2e062bb69",
    "prId" : 2532,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2532#pullrequestreview-40461782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e45cdd2b-d1b3-4a82-a79a-939df0bd4532",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "I thought Java was big on the builder pattern  :joy:",
        "createdAt" : "2017-05-26T08:08:35Z",
        "updatedAt" : "2017-05-26T18:00:57Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcdbd8e5e312443c53b751dc489255a8a35b657c",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +129,133 @@    c.setCompletionProvider(new CompletionOptions(\n      /* resolveProvider = */ false,\n      /* triggerCharacters = */ List(\".\").asJava))\n\n    // Do most of the initialization asynchronously so that we can return early"
  },
  {
    "id" : "969180f8-45a2-451a-ad2a-69e704da1a03",
    "prId" : 2532,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2532#pullrequestreview-40509606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4325b728-e102-49f4-8992-9c2eedc91b0a",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "Why is this an assert? Is it to show an incorrectly set up client an error? There isn't something like \"client error\" that can be sent back instead?",
        "createdAt" : "2017-05-26T08:10:43Z",
        "updatedAt" : "2017-05-26T18:00:57Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      },
      {
        "id" : "01f6b184-96b0-4fe1-8601-19336e256ec8",
        "parentId" : "4325b728-e102-49f4-8992-9c2eedc91b0a",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "This should never trigger because in initialize we set `c.setTextDocumentSync(TextDocumentSyncKind.Full)`, meaning we don't support `TextDocumentSyncKind.Incremental`. `didChange` is a notification, not a request, so the client does not expect a response. Note that this assertion will be caught by LSP4J and so won't bring down the entire language server.",
        "createdAt" : "2017-05-26T12:46:43Z",
        "updatedAt" : "2017-05-26T18:00:57Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcdbd8e5e312443c53b751dc489255a8a35b657c",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +157,161 @@\n    val change = params.getContentChanges.get(0)\n    assert(change.getRange == null, \"TextDocumentSyncKind.Incremental support is not implemented\")\n\n    val text = change.getText"
  },
  {
    "id" : "f1be07b1-a18c-42f3-8187-2319562a3282",
    "prId" : 2532,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2532#pullrequestreview-40509606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "388fb985-f637-40f9-b7a4-40d0b234c692",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "Maybe a docstring here?",
        "createdAt" : "2017-05-26T08:11:20Z",
        "updatedAt" : "2017-05-26T18:00:57Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      },
      {
        "id" : "3dc3d775-3c4f-427c-be00-5d86ba39f5f8",
        "parentId" : "388fb985-f637-40f9-b7a4-40d0b234c692",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "A docstring for what? If you're curious what `didChangeConfiguration` is for, see the spec: https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md#didchangeconfiguration-notification\r\nThe commented `synchronized` is so that if we ever implement this method, we don't forget to make it `synchronized`",
        "createdAt" : "2017-05-26T12:48:49Z",
        "updatedAt" : "2017-05-26T18:00:57Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcdbd8e5e312443c53b751dc489255a8a35b657c",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +175,179 @@\n  override def didChangeConfiguration(params: DidChangeConfigurationParams): Unit =\n    /*thisServer.synchronized*/ {}\n\n  override def didChangeWatchedFiles(params: DidChangeWatchedFilesParams): Unit ="
  },
  {
    "id" : "c01a7381-41b5-45fa-8b7e-f4edbc679b2c",
    "prId" : 2532,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2532#pullrequestreview-40461782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c882fbfd-5cec-41ac-9db4-686492ca1ca0",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "?",
        "createdAt" : "2017-05-26T08:11:25Z",
        "updatedAt" : "2017-05-26T18:00:57Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcdbd8e5e312443c53b751dc489255a8a35b657c",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +178,182 @@\n  override def didChangeWatchedFiles(params: DidChangeWatchedFilesParams): Unit =\n    /*thisServer.synchronized*/ {}\n\n  override def didSave(params: DidSaveTextDocumentParams): Unit ="
  },
  {
    "id" : "17ec8511-aa82-47e3-a587-1b31be61c894",
    "prId" : 2532,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/2532#pullrequestreview-40461782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e5d649b-a66e-45e3-a2c5-0b147ef5218e",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "?",
        "createdAt" : "2017-05-26T08:11:29Z",
        "updatedAt" : "2017-05-26T18:00:57Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcdbd8e5e312443c53b751dc489255a8a35b657c",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +181,185 @@\n  override def didSave(params: DidSaveTextDocumentParams): Unit =\n    /*thisServer.synchronized*/ {}\n\n"
  }
]