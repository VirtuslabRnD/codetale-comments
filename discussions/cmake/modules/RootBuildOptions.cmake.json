[
  {
    "id" : "e03ef84c-308d-4a0c-924d-a112fa1ea5d5",
    "prId" : 1167,
    "prUrl" : "https://github.com/root-project/root/pull/1167#pullrequestreview-68415555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c19970e5-8d67-4d0c-8770-92d9c4aae00e",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "This option does not work for me, I'm not sure it's even worth keeping around if the code is broken and unmaintained.",
        "createdAt" : "2017-10-10T12:10:35Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "7cd4ca3e-908c-4e22-8e27-8cf442b8e087",
        "parentId" : "c19970e5-8d67-4d0c-8770-92d9c4aae00e",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Do you mean bonjour OFF or ON?\r\n",
        "createdAt" : "2017-10-10T12:24:06Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "e2f795f9-6101-4467-8031-32deedaaf668",
        "parentId" : "c19970e5-8d67-4d0c-8770-92d9c4aae00e",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Does not work when turned `ON`, so I agree with disabling.",
        "createdAt" : "2017-10-10T12:34:39Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "2b44af52-1655-4780-900a-f0d4267f7d50",
        "parentId" : "c19970e5-8d67-4d0c-8770-92d9c4aae00e",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : ":+1: ",
        "createdAt" : "2017-10-10T12:37:19Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "e1591c48-57e1-41fc-858d-84229b3343c5",
        "parentId" : "c19970e5-8d67-4d0c-8770-92d9c4aae00e",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "> This option does not work for me,\r\n\r\nIt seems to compile on my machine ... (and apparently on the jenkins node too) ....",
        "createdAt" : "2017-10-10T13:59:02Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "173ffb63-c51e-4360-9031-9a08ae561798",
        "parentId" : "c19970e5-8d67-4d0c-8770-92d9c4aae00e",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "> It seems to compile on my machine...\r\n\r\nDid you use fail on missing? It may have been disabled for you.",
        "createdAt" : "2017-10-10T20:13:50Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "a2cac9e2-b756-4118-a9bf-7ff9cc8752de",
        "parentId" : "c19970e5-8d67-4d0c-8770-92d9c4aae00e",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "```\r\nmac-130277:master.debug pcanal$ grep -i bonjour CMakeCache.txt \r\nBonjour_LIB_DEPENDS:STATIC=general;Core;\r\n//Bonjour support, requires libdns_sd and/or Avahi\r\nbonjour:BOOL=ON\r\nmac-130277:master.debug pcanal$ ls -lart lib/libBonjour*\r\n-rw-r--r--  1 pcanal  staff    2634 Oct  9 16:41 lib/libBonjour_rdict.pcm\r\n-rw-r--r--  1 pcanal  staff     237 Oct  9 16:41 lib/libBonjour.rootmap\r\n-rwxr-xr-x  1 pcanal  staff  153448 Oct  9 16:42 lib/libBonjour.so\r\n```",
        "createdAt" : "2017-10-10T20:16:17Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "8c28c4bc-0d4f-4b09-8c38-24d648ad1ff7",
        "parentId" : "c19970e5-8d67-4d0c-8770-92d9c4aae00e",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "it also builds (for me) on High Sierra.",
        "createdAt" : "2017-10-10T20:21:22Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "b7ed571d-3d9a-49ae-8021-7c258713056e",
        "parentId" : "c19970e5-8d67-4d0c-8770-92d9c4aae00e",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Ok, thanks. I wonder if it works on the Linux nodes in Jenkins, or just the macs. I'll check later and post it here.",
        "createdAt" : "2017-10-10T20:29:08Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbc6d83c373485477c66b308f77acfaebf420c96",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +66,70 @@ROOT_BUILD_OPTION(asimage ON \"Image processing support, requires libAfterImage\")\nROOT_BUILD_OPTION(astiff ON \"Include tiff support in image processing\")\nROOT_BUILD_OPTION(bonjour OFF \"Bonjour support, requires libdns_sd and/or Avahi\")\nROOT_BUILD_OPTION(builtin_afterimage ON \"Build included libAfterImage, or use system libAfterImage\")\nROOT_BUILD_OPTION(builtin_cfitsio ON \"Build the FITSIO library internally (downloading tarfile from the Web)\")"
  },
  {
    "id" : "59352eb6-9c34-4d71-9dab-abfff02d4eb5",
    "prId" : 1167,
    "prUrl" : "https://github.com/root-project/root/pull/1167#pullrequestreview-68412438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20b79b8c-4568-4cd9-8e41-c65e0e5c6e43",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "I would love for this to default to `OFF` too, so ROOT can find a system version of libafterimage by default if it's there.",
        "createdAt" : "2017-10-10T12:11:31Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "7405e1e0-a1cc-4709-a583-af63ea4d62d5",
        "parentId" : "20b79b8c-4568-4cd9-8e41-c65e0e5c6e43",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "I have no strong opinion here. I am not sure of the reason why this setting is what it is...",
        "createdAt" : "2017-10-10T12:24:51Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "8070daa5-436d-4597-8ec6-4bd14fcd5227",
        "parentId" : "20b79b8c-4568-4cd9-8e41-c65e0e5c6e43",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Because ROOT's AfterImage has fixes on top of the default one. (IIRC Guilherme was part of the discussion about a year or two ago, with Olivier and Matevz?). I.e. we should prefer the built-in one.",
        "createdAt" : "2017-10-10T12:28:49Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "136a8d23-3fa1-44bb-bad1-144c8be2ef43",
        "parentId" : "20b79b8c-4568-4cd9-8e41-c65e0e5c6e43",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Yeah, the fixes in ROOT are from the system version of libAfterImage in Gentoo, so I would like to prefer the system one. Unless you have a really old distro, in which case it doesn't matter, if you have a system version of libAfterImage, it should be usable with ROOT without problems or needing any extra patches. The fixes were for allowing libAfterImage to compile against newer versions of giflib, so if you already compiled libAfterImage, there's no need to use the builtin one from ROOT.\r\n",
        "createdAt" : "2017-10-10T12:38:34Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "6cbf79de-4e43-4310-9a3a-665f476de6ef",
        "parentId" : "20b79b8c-4568-4cd9-8e41-c65e0e5c6e43",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Gentoo actually has more fixes than ROOT on the system libAfterImage, BTW.",
        "createdAt" : "2017-10-10T12:43:44Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "da4ce597-a50d-4677-851f-7ba7a1bb6f62",
        "parentId" : "20b79b8c-4568-4cd9-8e41-c65e0e5c6e43",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "No that's not all there is, IIRC we have more patches.",
        "createdAt" : "2017-10-10T12:49:05Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "40773061-3674-41a3-9ef4-4b1f4da903e9",
        "parentId" : "20b79b8c-4568-4cd9-8e41-c65e0e5c6e43",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "My change (porting a Gentoo patch) is the last one. The only other useful change seems to be a minor adaptation of the build system for ARM. The change before that is just some typo and gender neutral language fixes in comments...",
        "createdAt" : "2017-10-10T20:18:30Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbc6d83c373485477c66b308f77acfaebf420c96",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +67,71 @@ROOT_BUILD_OPTION(astiff ON \"Include tiff support in image processing\")\nROOT_BUILD_OPTION(bonjour OFF \"Bonjour support, requires libdns_sd and/or Avahi\")\nROOT_BUILD_OPTION(builtin_afterimage ON \"Build included libAfterImage, or use system libAfterImage\")\nROOT_BUILD_OPTION(builtin_cfitsio ON \"Build the FITSIO library internally (downloading tarfile from the Web)\")\nROOT_BUILD_OPTION(builtin_davix OFF \"Build the Davix library internally (downloading tarfile from the Web)\")"
  },
  {
    "id" : "685740ba-38df-44f0-906d-8a440ff75169",
    "prId" : 1167,
    "prUrl" : "https://github.com/root-project/root/pull/1167#pullrequestreview-68412878",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c40cead-80fc-4ccb-a80f-e979ef25e52b",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Can we turn this `OFF` too? It's one of the things that I always have to turn off since I use `-Dfail-on-missing=ON` on my computer.",
        "createdAt" : "2017-10-10T12:12:54Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "7f32e3d1-420f-460e-86f2-b8416b4fcc8b",
        "parentId" : "6c40cead-80fc-4ccb-a80f-e979ef25e52b",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Uhm... I would like to have this since it allows to read files over http with a simple url, which I think it's quite comfortable and widespread.",
        "createdAt" : "2017-10-10T12:25:39Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "bf42bdf1-5d00-4089-8249-e9249822be7a",
        "parentId" : "6c40cead-80fc-4ccb-a80f-e979ef25e52b",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Davix is the 'new'/'recommended' way of accessing http file, why would we disable it?",
        "createdAt" : "2017-10-10T13:59:58Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "fc0f131a-8233-45ba-b2f2-8eaed7451918",
        "parentId" : "6c40cead-80fc-4ccb-a80f-e979ef25e52b",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Ok, I wasn't sure what this was, I just have to disable it because I don't have davix on my system and I use fail on missing.",
        "createdAt" : "2017-10-10T15:07:02Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "1e74cedc-c88e-4c56-8565-59cb2634db48",
        "parentId" : "6c40cead-80fc-4ccb-a80f-e979ef25e52b",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "> Ok, I wasn't sure what this was, I just have to disable it because I don't have davix on my system and I use fail on missing.\r\n\r\nIn **this** case, this is the perfect outcome :).  You ought to be warned that something important (but not required) is missing :)",
        "createdAt" : "2017-10-10T15:10:46Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "65cf2318-68b1-4441-888c-3c7c449284b9",
        "parentId" : "6c40cead-80fc-4ccb-a80f-e979ef25e52b",
        "authorId" : "95d25081-bab5-48a6-a128-d3f77acb4c78",
        "body" : "I agree that this should stay ON, as it is going to be the recommended way to access files over HTTP.\r\nGuillerme, perhaps you can use -Dbuiltin_davix=ON to overcome your problem?",
        "createdAt" : "2017-10-10T15:27:34Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "95d25081-bab5-48a6-a128-d3f77acb4c78",
        "tags" : [
        ]
      },
      {
        "id" : "47b45cf0-a791-45aa-b996-8c217c43c780",
        "parentId" : "6c40cead-80fc-4ccb-a80f-e979ef25e52b",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Perhaps, if not there, we should provide a built-in davix in case none is found?",
        "createdAt" : "2017-10-10T19:21:50Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "3efddbf2-cd5e-41d5-af23-755fb6314819",
        "parentId" : "6c40cead-80fc-4ccb-a80f-e979ef25e52b",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "@amadio, can you take care once the discussion about this PR is finished and the code is in master? It looks to me that this is not a mere change for davix... Maybe we want to trigger the necessary steps (e.g. inclusion of builtin) for all the packages which are ON by default?  Or even for all packages which are ON? Indeed if I want XYZ which needs TUV, it's understood that I'd like ROOT to take care of TUV if it's not on my system, right?\r\n",
        "createdAt" : "2017-10-10T19:30:24Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "3963316b-633d-4665-a710-c649f712dde4",
        "parentId" : "6c40cead-80fc-4ccb-a80f-e979ef25e52b",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "There's no need for change for this option. It is enabled if you don't have it, but I use fail on missing, so I want it to not enable things for me.",
        "createdAt" : "2017-10-10T20:20:04Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbc6d83c373485477c66b308f77acfaebf420c96",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +102,106 @@#ROOT_BUILD_OPTION(cxx17 OFF \"Build using C++17 compatible mode, requires gcc >= 7.1.0 or clang\")\nROOT_BUILD_OPTION(cxxmodules OFF \"Compile with C++ modules enabled.\")\nROOT_BUILD_OPTION(davix ON \"DavIx library for HTTP/WEBDAV access\")\nROOT_BUILD_OPTION(dcache OFF \"dCache support, requires libdcap from DESY\")\nROOT_BUILD_OPTION(exceptions ON \"Turn on compiler exception handling capability\")"
  },
  {
    "id" : "c2f594fe-a3ed-40fa-a379-f38c3f286c2f",
    "prId" : 1167,
    "prUrl" : "https://github.com/root-project/root/pull/1167#pullrequestreview-68505568",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1267edb-911e-4ea1-b67f-9e8b6d9dc20d",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "MySQL could also be `OFF` by default.",
        "createdAt" : "2017-10-10T12:15:50Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "3e83f04a-2245-488b-beb6-5125878e1a37",
        "parentId" : "d1267edb-911e-4ea1-b67f-9e8b6d9dc20d",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Fair enough. It depends if we want to be aggressive. I would not mind removing this. I wonder if the reviewers have an opinion?",
        "createdAt" : "2017-10-10T12:27:20Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "643289ff-1edb-46ed-acf8-f3a8480cbefc",
        "parentId" : "d1267edb-911e-4ea1-b67f-9e8b6d9dc20d",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Why not have support for Database access (if there component are findabe)?",
        "createdAt" : "2017-10-10T14:02:48Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "be755a77-fb00-4122-abdd-2c2d7e4f854f",
        "parentId" : "d1267edb-911e-4ea1-b67f-9e8b6d9dc20d",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Users compiling this on their machines probably don't need these options (and usually have to disable by hand). It makes more sense to enable them when needed, no?",
        "createdAt" : "2017-10-10T15:02:51Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "c55ccdc5-c711-47ed-81db-4e199604623b",
        "parentId" : "d1267edb-911e-4ea1-b67f-9e8b6d9dc20d",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "> and usually have to disable by hand\r\n\r\nWhy do they *have* to disable them by hand?",
        "createdAt" : "2017-10-10T16:13:02Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "3b1802d0-78db-47dc-b19d-b7b61343122d",
        "parentId" : "d1267edb-911e-4ea1-b67f-9e8b6d9dc20d",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Well, just because mysql exists in my system doesn't mean I want ROOT with mysql enabled... The more options enabled by default, the longer it takes for users to compile. If they are not using these things, it's just a waste of time and energy.",
        "createdAt" : "2017-10-10T20:25:20Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "d11c808d-a7a9-44c2-9d10-10371f297ac1",
        "parentId" : "d1267edb-911e-4ea1-b67f-9e8b6d9dc20d",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "This is true.  On the other hand, saving that time/energy can lead to frustration in other cases.\r\nThink of the scenario of the update-rarely user:\r\n* download ROOT source\r\n* struggle to read/guess the install instruction.\r\n* build\r\n* install\r\n* try and be happy.\r\n* delete build directory and source because he needs the space or what not.\r\n* **several months** pass by\r\n* Decide to try something out with MySQL (that she remembers installing before ROOT)\r\n* Frustration sets in because it is surprisingly not working  and she now faced the uncertain prospect of having to restart from scratch the installation ... \r\n",
        "createdAt" : "2017-10-10T20:35:07Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "e80faa09-4119-47df-ac4d-fcdefc7c5780",
        "parentId" : "d1267edb-911e-4ea1-b67f-9e8b6d9dc20d",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Let's not use unrealistic imagined scenarios as argument to prevent the evolution of ROOT. Searching the ROOT forum I can only find 3 posts since Aug/2015 that mention using mysql explicitly. Actually, one [post](https://root-forum.cern.ch/t/building-time-v-6-06-02-in-linux/20893) I found is for someone complaining about build time. Many more people ask questions about RooFit, and it has spinoff projects like GooFit, yet it is still OFF by default. The rationale here should be that if only a small percentage of users are using something, it should be OFF by default, and I feel that this is the case of mysql support. Also, I believe RooFit should be ON by default. The regular user is much more likely to use that than mysql support.",
        "createdAt" : "2017-10-11T06:52:51Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbc6d83c373485477c66b308f77acfaebf420c96",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +132,136 @@ROOT_BUILD_OPTION(minuit2 OFF \"Build the new libMinuit2 minimizer library\")\nROOT_BUILD_OPTION(monalisa OFF \"Monalisa monitoring support, requires libapmoncpp\")\nROOT_BUILD_OPTION(mysql ON \"MySQL support, requires libmysqlclient\")\nROOT_BUILD_OPTION(odbc OFF \"ODBC support, requires libiodbc or libodbc\")\nROOT_BUILD_OPTION(opengl ON \"OpenGL support, requires libGL and libGLU\")"
  },
  {
    "id" : "f4867987-a639-456e-a25e-b83e6fc9080b",
    "prId" : 1167,
    "prUrl" : "https://github.com/root-project/root/pull/1167#pullrequestreview-68260805",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2496d7ed-cf54-407d-8d76-0386c24991f0",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Same for Oracle, let's turn it `OFF` by default if possible.",
        "createdAt" : "2017-10-10T12:16:16Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "b6a530e5-99b2-4603-8be0-97d398b2921c",
        "parentId" : "2496d7ed-cf54-407d-8d76-0386c24991f0",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "For me ok. I'll wait for the other reviewers.",
        "createdAt" : "2017-10-10T12:27:39Z",
        "updatedAt" : "2017-10-15T06:14:07Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbc6d83c373485477c66b308f77acfaebf420c96",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +135,139 @@ROOT_BUILD_OPTION(odbc OFF \"ODBC support, requires libiodbc or libodbc\")\nROOT_BUILD_OPTION(opengl ON \"OpenGL support, requires libGL and libGLU\")\nROOT_BUILD_OPTION(oracle ON \"Oracle support, requires libocci\")\nROOT_BUILD_OPTION(pch ON)\nROOT_BUILD_OPTION(pgsql ON \"PostgreSQL support, requires libpq\")"
  },
  {
    "id" : "4cd8d417-5d3e-4e2e-905b-34f0fa9ad716",
    "prId" : 1976,
    "prUrl" : "https://github.com/root-project/root/pull/1976#pullrequestreview-117651575",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "931ee570-94fc-4c5d-9082-0d267fc5735e",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Do we really need the extra CMake options? We can probably reuse the `cuda` option, and add only `blas` to the list. What do you think?",
        "createdAt" : "2018-05-04T15:32:22Z",
        "updatedAt" : "2018-05-09T08:28:40Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "237480964eade89ae7d6f19b44a05e3748d0a1a7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +169,173 @@ROOT_BUILD_OPTION(tmva ON \"Build TMVA multi variate analysis library\")\nROOT_BUILD_OPTION(tmva-cpu ON \"Build TMVA with CPU support for deep learning. Requires BLAS\")\nROOT_BUILD_OPTION(tmva-gpu ON \"Build TMVA with GPU support for deep learning. Requries CUDA\")\nROOT_BUILD_OPTION(unuran OFF \"UNURAN - package for generating non-uniform random numbers\")\nROOT_BUILD_OPTION(vc OFF \"Vc adds a few new types for portable and intuitive SIMD programming\")"
  },
  {
    "id" : "6d98f9ab-7356-4e4f-a6e4-1971addccfd4",
    "prId" : 3498,
    "prUrl" : "https://github.com/root-project/root/pull/3498#pullrequestreview-210748064",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4730e8c8-7766-4d70-8606-ec04c77be0b5",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "I would avoid creating another build option for ROOT. Since this needs `http=ON` it's probably better to simply consider it as part of `root7` and `http` instead of having an extra option. @Axel-Naumann, what do you think?",
        "createdAt" : "2019-03-05T13:47:04Z",
        "updatedAt" : "2019-03-06T17:09:38Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "1bc30eac-59c7-4e5c-aa15-55cb0e9ce5d0",
        "parentId" : "4730e8c8-7766-4d70-8606-ec04c77be0b5",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "WebUI now automatically builds when c++14 or c++17 is enabled (even when root7 is OFF). I just want to provide possibility disable these modules - there are several of them.\r\n And I also want to have simple indication in cmake if basic WebUI library is build and not trying to check all the time condition `if (ROOT7 and HTTP and C++ > 11)` - which may change in the future",
        "createdAt" : "2019-03-05T15:34:06Z",
        "updatedAt" : "2019-03-06T17:09:38Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "92016fbcd641ea717a74a996d475d0c3c7a1e7d4",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +144,148 @@ROOT_BUILD_OPTION(r OFF \"Enable support for R bindings (requires R, Rcpp, and RInside)\")\nROOT_BUILD_OPTION(roofit ON \"Build RooFit advanced fitting package\")\nROOT_BUILD_OPTION(webui ON \"Build Web-based UI components of ROOT (requires C++14 standard or higher)\")\nROOT_BUILD_OPTION(root7 ON \"Build ROOT 7 components of ROOT (requires C++14 standard or higher)\")\nROOT_BUILD_OPTION(rpath OFF \"Link libraries with built-in RPATH (run-time search path)\")"
  },
  {
    "id" : "26b57d25-0095-493b-8f87-b00e8a0e7f43",
    "prId" : 3557,
    "prUrl" : "https://github.com/root-project/root/pull/3557#pullrequestreview-219400426",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e778ca02-f1b5-4afb-a9b8-cd805a64e6cb",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "I think changing the `CMAKE_CXX_STANDARD` without checking a user-provided value is bad. Probably even with checking a user-provided value. Can we error out saying \"please set -DCMAKE_CXX_STANDARD=14 or higher\"?",
        "createdAt" : "2019-03-26T15:41:42Z",
        "updatedAt" : "2019-03-29T16:04:02Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "9559c178-68b6-414a-9206-51178773c9cb",
        "parentId" : "e778ca02-f1b5-4afb-a9b8-cd805a64e6cb",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : ">  Can we error out saying \"please set -DCMAKE_CXX_STANDARD=14 or higher\"?\r\n\r\nProbably my code is imperfect, but we should handle situation when only `-Droot7=ON` is specified. I guess, it is no problem to force c++14 in such case. Only when `-DCMAKE_CXX_STANDARD=11` configured by user, one should abort with error",
        "createdAt" : "2019-03-26T16:01:51Z",
        "updatedAt" : "2019-03-29T16:04:02Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "fe0c631b-5a14-4a8c-94fd-92d823c05d20",
        "parentId" : "e778ca02-f1b5-4afb-a9b8-cd805a64e6cb",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "That is default value (if any) for `CMAKE_CXX_STANDARD` variable?",
        "createdAt" : "2019-03-26T16:09:13Z",
        "updatedAt" : "2019-03-29T16:04:02Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "150248ae-af65-4045-87d9-91eb1db7d372",
        "parentId" : "e778ca02-f1b5-4afb-a9b8-cd805a64e6cb",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : ">  Only when -DCMAKE_CXX_STANDARD=11 configured by user, one should abort with error\r\n\r\nThat's fine with me. Can you look into what the default value of `CMAKE_CXX_STANDARD` is? (Or whether ROOT's CMake files have set it already when getting to this point?)",
        "createdAt" : "2019-03-27T07:06:57Z",
        "updatedAt" : "2019-03-29T16:04:02Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "d437dd8f-b2c0-44f0-a1b4-c355ebdeb3f0",
        "parentId" : "e778ca02-f1b5-4afb-a9b8-cd805a64e6cb",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "> Can you look into what the default value of CMAKE_CXX_STANDARD is?\r\n\r\nI found very small info about it. This is just default value for `CXX_STANDARD`. In my environment (cmake 3.13.1, OpenSuSE Linux) it is undefined at this place.",
        "createdAt" : "2019-03-27T07:11:31Z",
        "updatedAt" : "2019-03-29T16:04:02Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "02c70d6b-3a89-4426-94e6-c992bc68cf12",
        "parentId" : "e778ca02-f1b5-4afb-a9b8-cd805a64e6cb",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Thanks, then let's just error out if `CMAKE_CXX_STANDARD` is defined, else set it (with a `message`, please). Could you update the PR accordingly?",
        "createdAt" : "2019-03-27T11:22:35Z",
        "updatedAt" : "2019-03-29T16:04:02Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b5c3189c2d244cbc758482a505d32a55942af48",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +305,309 @@if(root7)\n  if(NOT CMAKE_CXX_STANDARD)\n      set(CMAKE_CXX_STANDARD 14 CACHE STRING \"C++14 standard used with root7\")\n      message(STATUS \"Enabling C++14 for compilation of root7 components\")\n  elseif(NOT CMAKE_CXX_STANDARD GREATER 11)"
  }
]