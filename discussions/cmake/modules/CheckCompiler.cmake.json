[
  {
    "id" : "b70b3b57-b472-4901-a0c1-a2498bb5fb9b",
    "prId" : 626,
    "prUrl" : "https://github.com/root-project/root/pull/626#pullrequestreview-45149131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1caf235-f610-4022-bbbb-6a25f192da8f",
        "parentId" : null,
        "authorId" : "23978f5b-48a9-4c55-b221-8dd5c45c1b43",
        "body" : "In think removing `-Wno-noexcept-type` is not needed anymore because it is filtered at the moment we build the PCH.",
        "createdAt" : "2017-06-20T12:27:37Z",
        "updatedAt" : "2017-06-20T12:27:38Z",
        "lastEditedBy" : "23978f5b-48a9-4c55-b221-8dd5c45c1b43",
        "tags" : [
        ]
      },
      {
        "id" : "9729c7e9-8e84-41f5-9097-5fea3580bd87",
        "parentId" : "b1caf235-f610-4022-bbbb-6a25f192da8f",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "This option is inside an `if` that tests for GCC7, but the compiler does not have such option at all, so there is no point in keeping it, unless I've overlooked something.",
        "createdAt" : "2017-06-20T12:39:31Z",
        "updatedAt" : "2017-06-20T12:39:31Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "2a94d075-121f-4f88-8eee-120b46b2b0db",
        "parentId" : "b1caf235-f610-4022-bbbb-6a25f192da8f",
        "authorId" : "23978f5b-48a9-4c55-b221-8dd5c45c1b43",
        "body" : "The compiler that do not have this option is clang (our internal clang that we use to generate the dictionaries). ",
        "createdAt" : "2017-06-20T13:54:48Z",
        "updatedAt" : "2017-06-20T13:54:48Z",
        "lastEditedBy" : "23978f5b-48a9-4c55-b221-8dd5c45c1b43",
        "tags" : [
        ]
      },
      {
        "id" : "5e2ac839-7798-41fe-a1ba-6fed654cc42e",
        "parentId" : "b1caf235-f610-4022-bbbb-6a25f192da8f",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Ah, I think I did overlook the fact that the warning about the unknown flag may be from dictionary generation by cling rather than by the compilation of ROOT with GCC7, is that correct? If yes, I can revert this commit. That said, there are no warnings due to noexcept types, so maybe disabling this warning isn't really necessary anyway.",
        "createdAt" : "2017-06-20T13:57:41Z",
        "updatedAt" : "2017-06-20T13:57:41Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "c5e0fba4-893c-42fe-9494-557ae362ac26",
        "parentId" : "b1caf235-f610-4022-bbbb-6a25f192da8f",
        "authorId" : "23978f5b-48a9-4c55-b221-8dd5c45c1b43",
        "body" : "Yes, if there are not warnings we should remove the disabling of the warning. I think it was @Axel-Naumann that added it.",
        "createdAt" : "2017-06-20T14:00:56Z",
        "updatedAt" : "2017-06-20T14:00:57Z",
        "lastEditedBy" : "23978f5b-48a9-4c55-b221-8dd5c45c1b43",
        "tags" : [
        ]
      },
      {
        "id" : "7e35e752-3bb4-41d5-9f54-314386345566",
        "parentId" : "b1caf235-f610-4022-bbbb-6a25f192da8f",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Ok, I guess that we don't need to revert the commit then, unless Axel wants to disable the warning.",
        "createdAt" : "2017-06-20T14:13:32Z",
        "updatedAt" : "2017-06-20T14:13:32Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a24a38b7d02f5eccd17d225e0d4d3355b7fb355",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +148,152 @@elseif(CMAKE_COMPILER_IS_GNUCXX)\n  if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 7)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-implicit-fallthrough\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-implicit-fallthrough\")\n  endif()"
  },
  {
    "id" : "1960c0a7-3092-4c87-a3d1-fd2f3d463bc5",
    "prId" : 2643,
    "prUrl" : "https://github.com/root-project/root/pull/2643#pullrequestreview-157274019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60ad1865-e4fd-4cff-b1bd-acbaa88bbd03",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Is it really worth it to keep a workaround for such an old version of ccache? Version 3.2 was released in 2014... https://ccache.samba.org/releasenotes.html#_ccache_3_2",
        "createdAt" : "2018-09-19T15:32:10Z",
        "updatedAt" : "2018-09-19T15:32:11Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "e735cb1b-2fec-4083-8a9e-29efe9ecf935",
        "parentId" : "60ad1865-e4fd-4cff-b1bd-acbaa88bbd03",
        "authorId" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "body" : "Maybe in case if people still using old version, otherwise we can put requirement on ccache version..\r\nActually I see EPEL is still shipping cache-3.1.6-2.el6.i686.rpm for Centos 6. It will be very rare case, that a person will use i686 + ccache + clang, but it could happen :)\r\n\r\n\r\n\r\n",
        "createdAt" : "2018-09-19T15:37:25Z",
        "updatedAt" : "2018-09-19T15:37:25Z",
        "lastEditedBy" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "tags" : [
        ]
      },
      {
        "id" : "7bce2f88-b911-4741-9899-763f366a3666",
        "parentId" : "60ad1865-e4fd-4cff-b1bd-acbaa88bbd03",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "2014, just like GCC 4.9, which we also support :-)",
        "createdAt" : "2018-09-20T13:37:07Z",
        "updatedAt" : "2018-09-20T13:37:07Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "98438b719d679f7355d03bddeafb4870eb229b2d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +59,63 @@    # Call to 'ccache clang' is triggering next warning (valid for ccache 3.1.x, fixed in 3.2):\n    # \"clang: warning: argument unused during compilation: '-c\"\n    # Adding -Qunused-arguments provides a workaround for the bug.\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Qunused-arguments\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Qunused-arguments\")"
  },
  {
    "id" : "9bf26769-0c83-4503-96ba-2dedb1758bbf",
    "prId" : 3132,
    "prUrl" : "https://github.com/root-project/root/pull/3132#pullrequestreview-182758372",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47c36c14-c72c-4aac-a6ed-b2287c88e653",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "I would prefer to set `CMAKE_CXX_STANDARD` and let CMake decide what flag to add. Can I do that instead?",
        "createdAt" : "2018-12-07T10:54:56Z",
        "updatedAt" : "2018-12-07T10:54:57Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "65644db1-dd89-44dc-b09c-51a363909f37",
        "parentId" : "47c36c14-c72c-4aac-a6ed-b2287c88e653",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Can we do that right after? I'd not like to change the behavior this fundamentally in ROOT 6.16, and I'd like to start from the 6.16 behavior for your (very, *very* welcome!) `CMAKE_CXX_STANDARD` modification.",
        "createdAt" : "2018-12-07T15:17:13Z",
        "updatedAt" : "2018-12-07T15:17:14Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "3fe8fa50-279f-4237-b00a-db4a8305c9ca",
        "parentId" : "47c36c14-c72c-4aac-a6ed-b2287c88e653",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Ok, no problem. I can do that only on master then after you merge this.",
        "createdAt" : "2018-12-07T16:01:39Z",
        "updatedAt" : "2018-12-07T16:01:39Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "804ee083f7a24ca885bf8ecbe254ead79da70c3b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +123,127 @@endif()\nif(cxx17)\n  CHECK_CXX_COMPILER_FLAG(\"-std=c++17\" HAS_CXX17)\n  if(NOT HAS_CXX17)\n    message(STATUS \"Current compiler does not suppport -std=c++17 option. Switching OFF cxx17 option\")"
  },
  {
    "id" : "0440bf40-f7c8-4bd0-9d0a-8ebf543f80d1",
    "prId" : 3183,
    "prUrl" : "https://github.com/root-project/root/pull/3183#pullrequestreview-186590843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3857d58e-a23b-4543-8d2f-c3aae0f054cb",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "That seems surprising. Doesn't that override a user setting? Can we not simply take the compiler default as our default?",
        "createdAt" : "2018-12-19T14:55:31Z",
        "updatedAt" : "2018-12-19T16:17:45Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "86d9c7c9-a018-4493-b268-5f450abc9f07",
        "parentId" : "3857d58e-a23b-4543-8d2f-c3aae0f054cb",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "No, the command line will override this, since this is setting in the cache. It only overrides if `FORCE` is used.",
        "createdAt" : "2018-12-19T15:10:48Z",
        "updatedAt" : "2018-12-19T16:17:45Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "51ae2a6394d3a9a46ccf9e7aed4db36cb24c70bd",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +100,104 @@#---C++ standard----------------------------------------------------------------------\n\nset(CMAKE_CXX_STANDARD 11 CACHE STRING \"\")\nset(CMAKE_CXX_STANDARD_REQUIRED TRUE)\nset(CMAKE_CXX_EXTENSIONS FALSE CACHE BOOL \"\")"
  },
  {
    "id" : "3ae4e6b6-4f56-4ec4-af7f-f8dcfda650e8",
    "prId" : 3183,
    "prUrl" : "https://github.com/root-project/root/pull/3183#pullrequestreview-186591249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8151f6fc-31e7-45fc-af56-8ec637fd265b",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Is this not overriding the user setting anymore?",
        "createdAt" : "2018-12-19T14:56:05Z",
        "updatedAt" : "2018-12-19T16:17:45Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "a25cfe56-7472-4193-87c0-7c8babd7633e",
        "parentId" : "8151f6fc-31e7-45fc-af56-8ec637fd265b",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Overrides only with `FORCE` at the end. See `cmake --help-command set`.",
        "createdAt" : "2018-12-19T15:11:36Z",
        "updatedAt" : "2018-12-19T16:17:45Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "51ae2a6394d3a9a46ccf9e7aed4db36cb24c70bd",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +102,106 @@set(CMAKE_CXX_STANDARD 11 CACHE STRING \"\")\nset(CMAKE_CXX_STANDARD_REQUIRED TRUE)\nset(CMAKE_CXX_EXTENSIONS FALSE CACHE BOOL \"\")\n\nif(cxx11 OR cxx14 OR cxx17)"
  },
  {
    "id" : "bd9a494e-082b-438e-a5b9-2b5635baa34d",
    "prId" : 4196,
    "prUrl" : "https://github.com/root-project/root/pull/4196#pullrequestreview-274375729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d89c7a5-462f-468b-af0f-b93ef10ee015",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Is `${CMAKE_CXX_FLAGS_${uppercase_CMAKE_BUILD_TYPE}}` really coming before `${CMAKE_CXX_FLAGS}` during the build? I thought it was the reverse...",
        "createdAt" : "2019-08-13T15:14:57Z",
        "updatedAt" : "2019-08-13T15:25:21Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "17efecd6-0aa8-4831-96c7-41639306af43",
        "parentId" : "6d89c7a5-462f-468b-af0f-b93ef10ee015",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "You are right. The wrong order is from the old PR where I wanted to change the order of the compile flags.\r\nWill be fixed soon.",
        "createdAt" : "2019-08-13T15:39:32Z",
        "updatedAt" : "2019-08-13T15:39:32Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      }
    ],
    "commit" : "cfd3ee77746883e2ebf30cc30411aadd6d3c26b7",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +198,202 @@string(TOUPPER ${CMAKE_BUILD_TYPE} uppercase_CMAKE_BUILD_TYPE)\nmessage(STATUS \"Build Type: ${CMAKE_BUILD_TYPE} (flags = '${CMAKE_CXX_FLAGS_${uppercase_CMAKE_BUILD_TYPE}}')\")\nmessage(STATUS \"Compiler Flags: ${CMAKE_CXX_FLAGS_${uppercase_CMAKE_BUILD_TYPE}} ${CMAKE_CXX_FLAGS}\")"
  },
  {
    "id" : "8ebdd918-81c1-4457-bdbb-e1f7ba8730d6",
    "prId" : 5652,
    "prUrl" : "https://github.com/root-project/root/pull/5652#pullrequestreview-416979564",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf2587ab-bd3c-4411-b9d6-b0e6de3721ee",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Should we do the same for clang? (-fcolor-diagnostics)?",
        "createdAt" : "2020-05-19T18:45:45Z",
        "updatedAt" : "2020-05-25T20:16:51Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "3a110c88-fc66-4dec-a194-7254f3bc2b23",
        "parentId" : "bf2587ab-bd3c-4411-b9d6-b0e6de3721ee",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "We did already, this PR is resolving \"should we do the same for GCC as for clang\" :-) See https://github.com/root-project/root/blob/cbd94894e86021288fd68cbbb330a2fb4d64198e/cmake/modules/CheckCompiler.cmake#L54:L60",
        "createdAt" : "2020-05-20T10:43:58Z",
        "updatedAt" : "2020-05-25T20:16:51Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "8bc4f241-5063-4069-8563-360ec0b3e387",
        "parentId" : "bf2587ab-bd3c-4411-b9d6-b0e6de3721ee",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "The commit 'could' be enhanced by saying it is 'just' about gcc (since clang is already done)",
        "createdAt" : "2020-05-22T15:00:28Z",
        "updatedAt" : "2020-05-25T20:16:51Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "afe103d297ddcf8c6cc36154211c062c5acb28db",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +96,100 @@    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fdiagnostics-color=always\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fdiagnostics-color=always\")\n  endif()\nelse()\n  set(GCC_MAJOR 0)"
  },
  {
    "id" : "6aa7e026-1aeb-442d-9d13-dc2a501e58b1",
    "prId" : 6388,
    "prUrl" : "https://github.com/root-project/root/pull/6388#pullrequestreview-492757743",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23a0c558-c2ae-4b21-a411-a636224d4e58",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Does this override a user-provided `CMAKE_CXX_STANDARD`?",
        "createdAt" : "2020-09-21T13:35:09Z",
        "updatedAt" : "2020-09-22T10:09:10Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "49b11bae-3021-4543-ac60-e072feee2f47",
        "parentId" : "23a0c558-c2ae-4b21-a411-a636224d4e58",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "No.",
        "createdAt" : "2020-09-21T15:51:08Z",
        "updatedAt" : "2020-09-22T10:09:10Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "cd58154a-b102-498d-b85a-1de1a204a850",
        "parentId" : "23a0c558-c2ae-4b21-a411-a636224d4e58",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "`CACHE` tells cmake to not overwrite the variable if already set, I believe",
        "createdAt" : "2020-09-21T15:53:55Z",
        "updatedAt" : "2020-09-22T10:09:10Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "014f2b51283d674fdbe16f150872a2bc6e9855fc",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +135,139 @@   set(CXX_STANDARD_STRING 11 CACHE STRING \"\")\nendif()\nset(CMAKE_CXX_STANDARD ${CXX_STANDARD_STRING} CACHE STRING \"\")\nset(CMAKE_CXX_STANDARD_REQUIRED TRUE)\nset(CMAKE_CXX_EXTENSIONS FALSE CACHE BOOL \"\")"
  },
  {
    "id" : "61786b9c-faa4-4670-a3ee-43f635bc8acd",
    "prId" : 6388,
    "prUrl" : "https://github.com/root-project/root/pull/6388#pullrequestreview-492761600",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d01fab78-f964-4ca3-853a-6416636dc41a",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Alternative syntax: `execute_process(COMMAND sh -c \"${CMAKE_CXX_COMPILER} -E -x c++ - <<< __cplusplus | tail -n1\" ...)`",
        "createdAt" : "2020-09-21T15:58:17Z",
        "updatedAt" : "2020-09-22T10:09:10Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "014f2b51283d674fdbe16f150872a2bc6e9855fc",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +115,119 @@   execute_process(COMMAND echo __cplusplus\n                   COMMAND ${CMAKE_CXX_COMPILER} -E -x c++ -\n                   COMMAND tail -n1\n                   OUTPUT_VARIABLE CXX_STANDARD_STRING\n                   OUTPUT_STRIP_TRAILING_WHITESPACE)"
  },
  {
    "id" : "c9195e53-50d0-4564-92b4-43b496cceae9",
    "prId" : 6404,
    "prUrl" : "https://github.com/root-project/root/pull/6404#pullrequestreview-493379289",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b0a6ef5-b21a-498d-9112-33adfb82a2c1",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "```suggestion\r\n  message(WARNING \"Untested compiler: ${CMAKE_CXX_COMPILER_ID}. Setup may be incomplete.\")\r\n```",
        "createdAt" : "2020-09-22T11:21:58Z",
        "updatedAt" : "2020-09-22T11:24:32Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "020344af-4387-462c-95ce-d52d16c0ad52",
        "parentId" : "2b0a6ef5-b21a-498d-9112-33adfb82a2c1",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Yeah, downgrading the message to a warning had this intent. But unsupported is still probably more accurate, because it literally means that we don't have code in the build system to support the compiler, as is the case for GCC, ICC, Clang, and MSVC, so it's not just that the other compilers are untested.",
        "createdAt" : "2020-09-22T11:53:03Z",
        "updatedAt" : "2020-09-22T11:53:03Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "62410e9097aec54896dba67dfba4b1de5b8fdc39",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +10,14 @@\nif(NOT CMAKE_CXX_COMPILER_ID MATCHES \"(Apple|)Clang|GNU|Intel|MSVC\")\n  message(WARNING \"Unsupported compiler: ${CMAKE_CXX_COMPILER_ID}.\")\nendif()\n"
  }
]