[
  {
    "id" : "da515908-975a-4a1b-aaba-0c3e9deee78a",
    "prId" : 761,
    "prUrl" : "https://github.com/root-project/root/pull/761#pullrequestreview-49720539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a07cfece-af3b-429b-b13b-79c6f821cf12",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Could you propagate this change to all other occurrences of `(libGCocoa|libGQuartz)`?",
        "createdAt" : "2017-07-13T09:07:21Z",
        "updatedAt" : "2017-07-13T09:11:16Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "985acf7d-275c-4459-b170-5a47a6301b2c",
        "parentId" : "a07cfece-af3b-429b-b13b-79c6f821cf12",
        "authorId" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "body" : "Done",
        "createdAt" : "2017-07-13T09:11:43Z",
        "updatedAt" : "2017-07-13T09:11:43Z",
        "lastEditedBy" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5e1f910ba0022558e394436eed2b61f41aee6c3",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +496,500 @@  set(modulemap_entry \"module \\\"${library}\\\" {\")\n  # For modules GCocoa and GQuartz we need objc context.\n  if (${library} MATCHES \"(libGCocoa|libGQuartz)\\\\..*\")\n    set (modulemap_entry \"${modulemap_entry}\\n  requires objc\\n\")\n  else()"
  },
  {
    "id" : "f20bfa0d-0929-42ea-a32e-a16e367dc7a9",
    "prId" : 3404,
    "prUrl" : "https://github.com/root-project/root/pull/3404#pullrequestreview-205092271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "151f49f2-16d2-4b77-bb12-008f09535c14",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Instead of this, we could use `CMAKE_INCLUDE_CURRENT_DIR` and `CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE`. These are already used in a couple of places.",
        "createdAt" : "2019-02-15T12:46:31Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "09541055-ecee-4cf7-b333-3276b4ef98cf",
        "parentId" : "151f49f2-16d2-4b77-bb12-008f09535c14",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Thanks, I picked `CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE`",
        "createdAt" : "2019-02-19T06:14:20Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "33879153-33f7-45e3-943e-f7069c07c9e9",
        "parentId" : "151f49f2-16d2-4b77-bb12-008f09535c14",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "If it works with just `CMAKE_INCLUDE_CURRENT_DIR`, it's better. Adding to the interface may add extra directories we don't want into the exported targets. Please check that `ROOTConfig-targets.cmake` has no references to the build directory if you want to keep `CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE`.",
        "createdAt" : "2019-02-19T08:59:34Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed5740c6c0265805eac4a385ef23526b8ad5e5eb",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +225,229 @@  # rootcling invoked on foo.h should find foo.h in the current source dir,\n  # no matter what.\n  list(APPEND incdirs ${CMAKE_CURRENT_SOURCE_DIR})\n\n  #---Get the list of header files-------------------------"
  },
  {
    "id" : "1f96e726-b38f-4f08-9065-97ad10a8b2df",
    "prId" : 3404,
    "prUrl" : "https://github.com/root-project/root/pull/3404#pullrequestreview-205039784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef8e0f81-8a01-4133-a108-f43ccf6bf7a7",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "This might break external projects that rely on this macro.",
        "createdAt" : "2019-02-15T12:52:31Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "6531a006-1a12-4fe8-a6fb-1dc16701b8d4",
        "parentId" : "ef8e0f81-8a01-4133-a108-f43ccf6bf7a7",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Indeed, intentionally so. I now call this out in the release notes update.",
        "createdAt" : "2019-02-19T06:00:18Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed5740c6c0265805eac4a385ef23526b8ad5e5eb",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +246,250 @@      find_file(headerFile ${fp} HINTS ${incdirs} NO_DEFAULT_PATH NO_SYSTEM_ENVIRONMENT_PATH)\n      if(NOT headerFile)\n        message(FATAL_ERROR \"Cannot find header ${fp} to generate dictionary ${dictionary} for. Did you forget to set the INCLUDE_DIRECTORIES property for the current directory?\")\n      endif()\n      list(APPEND headerfiles ${fp})"
  },
  {
    "id" : "7d113407-6308-4da9-9aac-6836c7e3bb6e",
    "prId" : 3404,
    "prUrl" : "https://github.com/root-project/root/pull/3404#pullrequestreview-205086662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b752f438-6cce-44b2-be48-a89028764d67",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "This potentially breaks external projects that may rely on globbing for both the headers and the linkdef file.",
        "createdAt" : "2019-02-15T12:55:01Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "9dab0380-7543-42fd-be53-a1098852220b",
        "parentId" : "b752f438-6cce-44b2-be48-a89028764d67",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "How - isn't this the state where no header was found, not even through wildcards, *and* no linkdef was provided? That's a problem, and should have been already before.",
        "createdAt" : "2019-02-19T05:59:42Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "1001f147-1bbb-4b8a-898b-10f811933a65",
        "parentId" : "b752f438-6cce-44b2-be48-a89028764d67",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "I'm thinking of files like `html/CMakeLists.txt`, where no `HEADERS` or `LINKDEF`arguments  are provided:\r\n```cmake\r\n$ cat html/CMakeLists.txt \r\n############################################################################\r\n# CMakeLists.txt file for building ROOT html package\r\n############################################################################\r\n\r\nROOT_STANDARD_LIBRARY_PACKAGE(Html DEPENDENCIES Graf Thread)\r\n```\r\nI guess if your PR works with `-Dhtml=ON` then it's ok.",
        "createdAt" : "2019-02-19T08:46:57Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed5740c6c0265805eac4a385ef23526b8ad5e5eb",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +259,263 @@\n  if(NOT (headerfiles OR ARG_LINKDEF))\n    message(FATAL_ERROR \"No headers nor LinkDef.h supplied / found for dictionary ${dictionary}!\")\n  endif()\n"
  },
  {
    "id" : "3addf0d8-2164-4aa5-bc72-421c2e49eeff",
    "prId" : 3404,
    "prUrl" : "https://github.com/root-project/root/pull/3404#pullrequestreview-205087601",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cc8aae2-c1f3-4a02-a9bc-7795b244c13c",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Shouldn't this contain also `.hxx`?",
        "createdAt" : "2019-02-15T13:25:48Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "be54be31-085d-4eee-b2e6-01777471f47f",
        "parentId" : "9cc8aae2-c1f3-4a02-a9bc-7795b244c13c",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Possibly, but this is not changed by this PR, and ROOT enumerates headers (esp v7).",
        "createdAt" : "2019-02-19T05:48:30Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "3327311d-6979-484e-9d21-dcf810cd628d",
        "parentId" : "9cc8aae2-c1f3-4a02-a9bc-7795b244c13c",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "If someone adds a header with `.hxx` extension to a directory relying on globbing, it won't work. It's probably something worth fixing independently of this PR.",
        "createdAt" : "2019-02-19T08:49:05Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed5740c6c0265805eac4a385ef23526b8ad5e5eb",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +912,916 @@  # If HEADERS/SOURCES are not parsed, we glob for those files.\n  if (NOT (ARG_HEADERS OR ARG_NO_HEADERS OR ARG_NODEPHEADERS))\n    set(ARG_HEADERS \"*.h\")\n  endif()\n  if (NOT ARG_SOURCES AND NOT ARG_NO_SOURCES)"
  },
  {
    "id" : "7db92140-7c17-4490-9cf2-57ab9ac6e18c",
    "prId" : 3404,
    "prUrl" : "https://github.com/root-project/root/pull/3404#pullrequestreview-205089486",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcfba2c3-dc30-4e21-8fcf-fc16cfff7650",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "I think that even if this doesn't break anything now (i.e. using the `BEFORE` keyword), it has the potential for breaking things, since we may have in our own directories headers with similar names to system headers which might not be able to include their dependencies with `#include_next` anymore. This also goes against the \"modern CMake\" idea of sticking with `target_include_directories()` in order to avoid hidden header dependencies that only work because include directories are there coincidentally. I think it's better to use `target_include_directories()` in both cases above, and only add the `v7/inc` if `root7=ON`. *Note that `CMAKE_INCLUDE_CURRENT_DIR` suffers from the same problem.*",
        "createdAt" : "2019-02-15T13:39:03Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "a16d9b95-a4c7-4880-bf66-06658c420e5e",
        "parentId" : "fcfba2c3-dc30-4e21-8fcf-fc16cfff7650",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "See my comment below on why we need to improve `ROOT_GENERATE_DICTIONARY` first to know which library target to pick up the include dirs from. I.e. this won't happen as part of this PR.",
        "createdAt" : "2019-02-19T05:47:56Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "6e94de24-40c7-4626-89aa-18bb51d887c9",
        "parentId" : "fcfba2c3-dc30-4e21-8fcf-fc16cfff7650",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "It still makes sense to use `target_include_directories()` here on the library, plus add the include with `DICTIONARY_OPTIONS -I${incdir}` so that `rootcling` sees it. That's what I've been doing. See [`sql/mysql/CMakeLists.txt`](https://github.com/root-project/root/blob/master/sql/mysql/CMakeLists.txt) for an example.",
        "createdAt" : "2019-02-19T08:53:22Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed5740c6c0265805eac4a385ef23526b8ad5e5eb",
    "line" : 194,
    "diffHunk" : "@@ -1,1 +940,944 @@    include_directories(BEFORE \"inc\")\n    if(IS_DIRECTORY \"v7/inc\")\n      include_directories(BEFORE \"v7/inc\")\n    endif()\n  endif()"
  },
  {
    "id" : "fd32314c-ca46-4385-8aa7-6e6430b66673",
    "prId" : 3404,
    "prUrl" : "https://github.com/root-project/root/pull/3404#pullrequestreview-205093547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e7bb3a7-64b6-4ea5-ad81-5fd080b986d8",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : ":+1: , however, there is a typo in the comment, \"...**th** generic COMPILE_FLAGS...\". I think the comment is not required, and you probably meant to add `${CMAKE_CURRENT_SOURCE_DIR}/res` and `${CMAKE_CURRENT_SOURCE_DIR}/src`, since this macro is called one directory up. You can also just use `target_include_directories(${libname} PRIVATE res src)`, as in this case `${CMAKE_CURRENT_SOURCE_DIR}` is already implied.",
        "createdAt" : "2019-02-15T13:46:12Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "76adb80c-52a4-400b-945c-68a7baafe953",
        "parentId" : "0e7bb3a7-64b6-4ea5-ad81-5fd080b986d8",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "This is e.g. for tests - I've updated the comment. And the dictionary compilation does not add an implied `-I${CMAKE_CURRENT_SOURCE_DIR}` without the change above, because the dictionary is in the build directory.",
        "createdAt" : "2019-02-18T09:25:39Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "752201f4-ff17-4197-b2fb-f840b34db949",
        "parentId" : "0e7bb3a7-64b6-4ea5-ad81-5fd080b986d8",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "With `CMAKE_INCLUDE_CURRENT_DIR` even `rootcling` will probably have the current directory in the list of includes, which means we can probably remove this.",
        "createdAt" : "2019-02-19T09:02:28Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed5740c6c0265805eac4a385ef23526b8ad5e5eb",
    "line" : 213,
    "diffHunk" : "@@ -1,1 +972,976 @@  # there is no way to set the include directory for a source file (except for\n  # the generic COMPILE_FLAGS), so this needs to be glued to the target.\n  target_include_directories(${libname} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})\n\n  # Install headers if we have any headers and if the user didn't explicitly"
  },
  {
    "id" : "0e5a27d5-f5de-4e5a-b2ce-12d7711f6628",
    "prId" : 3870,
    "prUrl" : "https://github.com/root-project/root/pull/3870#pullrequestreview-244017522",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34069b85-7391-4506-a449-a4c26b055d3e",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Why do they need to go into the `bin` folder? I think the better way is to create variables for them, like `CMAKE_INSTALL_PCMDIR`, `CMAKE_INSTALL_MODULEDIR`, etc, then set each new variable to either `CMAKE_INSTALL_BINDIR` or `CMAKE_INSTALL_LIBDIR` depending on the system.",
        "createdAt" : "2019-05-27T13:27:36Z",
        "updatedAt" : "2019-05-27T13:27:37Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "594d9418-2c68-4172-a4b9-e19aaacc58ec",
        "parentId" : "34069b85-7391-4506-a449-a4c26b055d3e",
        "authorId" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "body" : "On Windows, they have to be next to the DLLs (they are created in the bin directory). This is to solve the issue at install time (and creating variables for each of them is over-complicating it)",
        "createdAt" : "2019-05-27T13:31:06Z",
        "updatedAt" : "2019-05-27T13:35:40Z",
        "lastEditedBy" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "tags" : [
        ]
      },
      {
        "id" : "93669db6-e514-46dd-a31e-fef88f46677e",
        "parentId" : "34069b85-7391-4506-a449-a4c26b055d3e",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Why not just configure on Windows with `-DCMAKE_INSTALL_LIBDIR=bin`?",
        "createdAt" : "2019-05-27T13:39:14Z",
        "updatedAt" : "2019-05-30T20:23:02Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "a5753051-5306-41bc-9227-5eee04b73ab9",
        "parentId" : "34069b85-7391-4506-a449-a4c26b055d3e",
        "authorId" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "body" : "Because the `.lib` and `.exp` files must go (and stay) in the `lib` directory",
        "createdAt" : "2019-05-30T20:38:55Z",
        "updatedAt" : "2019-05-30T21:53:05Z",
        "lastEditedBy" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd751cbba45a72e342405b2c896a0c20ba2f99f8",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +215,219 @@#---ROOT_GET_INSTALL_DIR( result_var )\n# Returns the path to the shared libraries installation directory. On Windows the pcms and rootmap\n# files must go in the $ROOTSYS/bin folder.\nfunction(ROOT_GET_INSTALL_DIR result)\n  set(shared_lib_install_dir)"
  }
]