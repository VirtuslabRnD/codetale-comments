[
  {
    "id" : "eb65b229-3529-4c9a-8813-c995d7fef818",
    "prId" : 497,
    "prUrl" : "https://github.com/root-project/root/pull/497#pullrequestreview-44573285",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b996500-16e2-487f-a32b-9ad66286a242",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "@amadio, it seems that if I configure with `-Dbuiltin_veccore` we don't get `builtin_vc` on, thus `VECCORE_ENABLE_VC` macro doesn't expanded. In turn, this leads in not being able to compile `Math_vectypes.hxx`.\r\n\r\n@xvallspl and I were discussing and we can diagnose this either in the cxx file or here. Alternatively, we should just enable builtin_vc, saving time and efforts :) ",
        "createdAt" : "2017-06-13T14:10:49Z",
        "updatedAt" : "2017-06-13T14:10:49Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "ac424099-4fba-468e-b6ed-93852628c981",
        "parentId" : "7b996500-16e2-487f-a32b-9ad66286a242",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "I made it such that `builtin_veccore` forces `builtin_vc` to be ON if `vc` is ON. However, it should be possible to use VecCore without Vc (that's the whole point of having VecCore), so I'm against forcing Vc and VecCore to be locked to be the same, or we will never be able to change the backend later to be either Scalar or UME::SIMD. The macro `VECCORE_ENABLE_VC` is in `${VecCore_DEFINITIONS}` when the Vc backend is enabled, so targets should rely on that rather than turning it on by hand.",
        "createdAt" : "2017-06-16T14:04:45Z",
        "updatedAt" : "2017-06-16T14:04:45Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "9053138c-52d3-4325-981c-b7ec9d6b7c79",
        "parentId" : "7b996500-16e2-487f-a32b-9ad66286a242",
        "authorId" : "23978f5b-48a9-4c55-b221-8dd5c45c1b43",
        "body" : "Concerning `${VecCore_DEFINITIONS}` I just committed a change to hide this inside `Math_vectypes.h` otherwise is unworkable. It means that enybody including a ROOT Math header will need to define `VECCORE_ENABLE_VC` of ROOT was built with Vc and VecCore enabled. ",
        "createdAt" : "2017-06-16T14:12:14Z",
        "updatedAt" : "2017-06-16T14:12:14Z",
        "lastEditedBy" : "23978f5b-48a9-4c55-b221-8dd5c45c1b43",
        "tags" : [
        ]
      },
      {
        "id" : "b3bd76e1-ece0-443b-a416-8af8d17a8c64",
        "parentId" : "7b996500-16e2-487f-a32b-9ad66286a242",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Hi @peremato, I saw the commit and agree with you that everybody having to define it is not optimal, but the current solution is not great either, because it only works when both VecCore and Vc are enabled. We will need to fix it later to be able to use at least the UME::SIMD backend, which works much better on KNL. At some point, we should require that new developments work with both UME::SIMD and Vc, otherwise there is no point in not just using Vc directly. I think that using `${VecCore_DEFINITIONS}` in combination with `#cmakedefine` to create a configuration header is the way to go in this case.",
        "createdAt" : "2017-06-16T14:22:53Z",
        "updatedAt" : "2017-06-16T14:22:53Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0764ca1312709b742f04890261cf759ef4c45a31",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +1392,1396 @@  endif()\n\n  if (vc OR builtin_vc)\n    set(VecCore_Vc_FOUND True)\n    set(VecCore_Vc_DEFINITIONS -DVECCORE_ENABLE_VC)"
  },
  {
    "id" : "044d1b44-1a38-406f-953a-35b476cba041",
    "prId" : 590,
    "prUrl" : "https://github.com/root-project/root/pull/590#pullrequestreview-40385343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f016f73-af29-4da7-9131-9803d2cbd551",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Can we transform the two similar if-stmts into one if-else?",
        "createdAt" : "2017-05-25T20:24:15Z",
        "updatedAt" : "2017-05-28T02:39:19Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "6e70d935-b834-45c0-9c55-961b952ff561",
        "parentId" : "1f016f73-af29-4da7-9131-9803d2cbd551",
        "authorId" : "f69dad7b-ed29-4b5b-abf6-8cc0eaed5055",
        "body" : "Not easily: the true-branch of the first `if`-statement can affect the outcome of the second conditional.",
        "createdAt" : "2017-05-25T20:33:24Z",
        "updatedAt" : "2017-05-28T02:39:19Z",
        "lastEditedBy" : "f69dad7b-ed29-4b5b-abf6-8cc0eaed5055",
        "tags" : [
        ]
      },
      {
        "id" : "7cf8cfb9-8cc7-4998-80f4-fb46431805d3",
        "parentId" : "1f016f73-af29-4da7-9131-9803d2cbd551",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Ah, I see. That part is tricky to read. Maybe we could add a clarification comment for the casual reader.",
        "createdAt" : "2017-05-25T20:35:45Z",
        "updatedAt" : "2017-05-28T02:39:19Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba6e4549dd332053c446e91ee596c6c3cf2fae14",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +233,237 @@\n#---Check for LZ4--------------------------------------------------------------------\nif(NOT builtin_lz4)\n  message(STATUS \"Looking for LZ4\")\n  find_package(LZ4)"
  }
]