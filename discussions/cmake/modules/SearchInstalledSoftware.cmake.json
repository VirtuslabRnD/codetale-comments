[
  {
    "id" : "eb65b229-3529-4c9a-8813-c995d7fef818",
    "prId" : 497,
    "prUrl" : "https://github.com/root-project/root/pull/497#pullrequestreview-44573285",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b996500-16e2-487f-a32b-9ad66286a242",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "@amadio, it seems that if I configure with `-Dbuiltin_veccore` we don't get `builtin_vc` on, thus `VECCORE_ENABLE_VC` macro doesn't expanded. In turn, this leads in not being able to compile `Math_vectypes.hxx`.\r\n\r\n@xvallspl and I were discussing and we can diagnose this either in the cxx file or here. Alternatively, we should just enable builtin_vc, saving time and efforts :) ",
        "createdAt" : "2017-06-13T14:10:49Z",
        "updatedAt" : "2017-06-13T14:10:49Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "ac424099-4fba-468e-b6ed-93852628c981",
        "parentId" : "7b996500-16e2-487f-a32b-9ad66286a242",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "I made it such that `builtin_veccore` forces `builtin_vc` to be ON if `vc` is ON. However, it should be possible to use VecCore without Vc (that's the whole point of having VecCore), so I'm against forcing Vc and VecCore to be locked to be the same, or we will never be able to change the backend later to be either Scalar or UME::SIMD. The macro `VECCORE_ENABLE_VC` is in `${VecCore_DEFINITIONS}` when the Vc backend is enabled, so targets should rely on that rather than turning it on by hand.",
        "createdAt" : "2017-06-16T14:04:45Z",
        "updatedAt" : "2017-06-16T14:04:45Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "9053138c-52d3-4325-981c-b7ec9d6b7c79",
        "parentId" : "7b996500-16e2-487f-a32b-9ad66286a242",
        "authorId" : "23978f5b-48a9-4c55-b221-8dd5c45c1b43",
        "body" : "Concerning `${VecCore_DEFINITIONS}` I just committed a change to hide this inside `Math_vectypes.h` otherwise is unworkable. It means that enybody including a ROOT Math header will need to define `VECCORE_ENABLE_VC` of ROOT was built with Vc and VecCore enabled. ",
        "createdAt" : "2017-06-16T14:12:14Z",
        "updatedAt" : "2017-06-16T14:12:14Z",
        "lastEditedBy" : "23978f5b-48a9-4c55-b221-8dd5c45c1b43",
        "tags" : [
        ]
      },
      {
        "id" : "b3bd76e1-ece0-443b-a416-8af8d17a8c64",
        "parentId" : "7b996500-16e2-487f-a32b-9ad66286a242",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Hi @peremato, I saw the commit and agree with you that everybody having to define it is not optimal, but the current solution is not great either, because it only works when both VecCore and Vc are enabled. We will need to fix it later to be able to use at least the UME::SIMD backend, which works much better on KNL. At some point, we should require that new developments work with both UME::SIMD and Vc, otherwise there is no point in not just using Vc directly. I think that using `${VecCore_DEFINITIONS}` in combination with `#cmakedefine` to create a configuration header is the way to go in this case.",
        "createdAt" : "2017-06-16T14:22:53Z",
        "updatedAt" : "2017-06-16T14:22:53Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0764ca1312709b742f04890261cf759ef4c45a31",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +1392,1396 @@  endif()\n\n  if (vc OR builtin_vc)\n    set(VecCore_Vc_FOUND True)\n    set(VecCore_Vc_DEFINITIONS -DVECCORE_ENABLE_VC)"
  },
  {
    "id" : "044d1b44-1a38-406f-953a-35b476cba041",
    "prId" : 590,
    "prUrl" : "https://github.com/root-project/root/pull/590#pullrequestreview-40385343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f016f73-af29-4da7-9131-9803d2cbd551",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Can we transform the two similar if-stmts into one if-else?",
        "createdAt" : "2017-05-25T20:24:15Z",
        "updatedAt" : "2017-05-28T02:39:19Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "6e70d935-b834-45c0-9c55-961b952ff561",
        "parentId" : "1f016f73-af29-4da7-9131-9803d2cbd551",
        "authorId" : "f69dad7b-ed29-4b5b-abf6-8cc0eaed5055",
        "body" : "Not easily: the true-branch of the first `if`-statement can affect the outcome of the second conditional.",
        "createdAt" : "2017-05-25T20:33:24Z",
        "updatedAt" : "2017-05-28T02:39:19Z",
        "lastEditedBy" : "f69dad7b-ed29-4b5b-abf6-8cc0eaed5055",
        "tags" : [
        ]
      },
      {
        "id" : "7cf8cfb9-8cc7-4998-80f4-fb46431805d3",
        "parentId" : "1f016f73-af29-4da7-9131-9803d2cbd551",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Ah, I see. That part is tricky to read. Maybe we could add a clarification comment for the casual reader.",
        "createdAt" : "2017-05-25T20:35:45Z",
        "updatedAt" : "2017-05-28T02:39:19Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba6e4549dd332053c446e91ee596c6c3cf2fae14",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +233,237 @@\n#---Check for LZ4--------------------------------------------------------------------\nif(NOT builtin_lz4)\n  message(STATUS \"Looking for LZ4\")\n  find_package(LZ4)"
  },
  {
    "id" : "1af819a5-3216-470b-9fe5-c2799c2bb432",
    "prId" : 766,
    "prUrl" : "https://github.com/root-project/root/pull/766#pullrequestreview-50042684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59ae9e0f-6a05-49ea-ae91-5f482f18df55",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Why hard code the path to the shell here? It looks like the LZ4 external is using CMake, so wouldn't it be better to use `${CMAKE_COMMAND}` or similar? Otherwise the shell may pick up a different CMake.",
        "createdAt" : "2017-07-14T05:28:20Z",
        "updatedAt" : "2017-07-14T05:28:25Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "1df315bb-5e92-4efa-8e63-a17336a27ace",
        "parentId" : "59ae9e0f-6a05-49ea-ae91-5f482f18df55",
        "authorId" : "f69dad7b-ed29-4b5b-abf6-8cc0eaed5055",
        "body" : "Unfortunately, `LZ4` is not using `cmake` -- it is invoking `make`, which is internally invoking `cmake`.\r\n\r\nIf I recall correctly, `sh` had to be invoked directly in order to get the `PREFIX` env var set right.",
        "createdAt" : "2017-07-14T13:17:36Z",
        "updatedAt" : "2017-07-14T13:17:36Z",
        "lastEditedBy" : "f69dad7b-ed29-4b5b-abf6-8cc0eaed5055",
        "tags" : [
        ]
      }
    ],
    "commit" : "728d8697ae192af435a15e43894f19b971032c5b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +257,261 @@    URL_MD5 c9610c5ce97eb431dddddf0073d919b9\n    INSTALL_DIR ${CMAKE_BINARY_DIR}\n    CONFIGURE_COMMAND  /bin/sh -c \"PREFIX=<INSTALL_DIR> CMAKE_PARAMS='-DCMAKE_C_COMPILER=\\\\\\\"${CMAKE_C_COMPILER}\\\\\\\" -DCMAKE_C_FLAGS=\\\\\\\"${CMAKE_C_FLAGS}\\\\\\\" -DCMAKE_OSX_SYSROOT=\\\\\\\"${CMAKE_OSX_SYSROOT}\\\\\\\"' make cmake\"\n    BUILD_COMMAND /bin/sh -c \"PREFIX=<INSTALL_DIR> MOREFLAGS=-fPIC make\"\n    INSTALL_COMMAND /bin/sh -c \"PREFIX=<INSTALL_DIR> make install\""
  },
  {
    "id" : "2f580461-9f6f-419e-8e12-f01234f9a44d",
    "prId" : 1277,
    "prUrl" : "https://github.com/root-project/root/pull/1277#pullrequestreview-74436736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "529e009f-8ba2-4536-92f6-cc882db7bff3",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Won't this overwrite things in a multiconfiguration build?",
        "createdAt" : "2017-11-06T14:04:49Z",
        "updatedAt" : "2017-11-06T14:04:49Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "9214862e-e526-4151-ae43-916bee70a216",
        "parentId" : "529e009f-8ba2-4536-92f6-cc882db7bff3",
        "authorId" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "body" : "The goal is to have a single location for the libraries (i.e. preventing them to go in the 'Debug' or 'Release' sub-directories on Windows)",
        "createdAt" : "2017-11-06T14:25:35Z",
        "updatedAt" : "2017-11-06T14:25:35Z",
        "lastEditedBy" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "tags" : [
        ]
      },
      {
        "id" : "a54e6d9e-a2be-41b1-b763-ecad4d1550f7",
        "parentId" : "529e009f-8ba2-4536-92f6-cc882db7bff3",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Ok, thanks!",
        "createdAt" : "2017-11-06T14:44:02Z",
        "updatedAt" : "2017-11-06T14:44:02Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a53af31e8154fc17df6d04953e183918b05e7b0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1613,1617 @@                  -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}\n                  -DCMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG:PATH=\"\"\n                  -DCMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE:PATH=\"\"\n    # Disable install step\n    INSTALL_COMMAND \"\""
  },
  {
    "id" : "0d40374b-f812-4bae-8108-59f1482f9e0e",
    "prId" : 1398,
    "prUrl" : "https://github.com/root-project/root/pull/1398#pullrequestreview-79810697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32eb31f6-8f9f-4281-bba1-05322d181105",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Why is this needed? Could you please explain? Thanks.",
        "createdAt" : "2017-11-29T11:10:07Z",
        "updatedAt" : "2017-11-29T11:10:07Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "61019cc5-45c4-4f7a-9c9d-24a5df5a8ba2",
        "parentId" : "32eb31f6-8f9f-4281-bba1-05322d181105",
        "authorId" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "body" : "asimage is not installed on Windows, so the include path must be set to its build location (it is only used at build time anyway)",
        "createdAt" : "2017-11-29T11:12:36Z",
        "updatedAt" : "2017-11-29T11:12:36Z",
        "lastEditedBy" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "tags" : [
        ]
      }
    ],
    "commit" : "d69bcd55f3ba1cbd3f0230f7ceb0ee5538aeae09",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +396,400 @@      LOG_DOWNLOAD 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 BUILD_IN_SOURCE 1\n      BUILD_BYPRODUCTS ${AFTERIMAGE_LIBRARIES})\n    set(AFTERIMAGE_INCLUDE_DIR ${CMAKE_BINARY_DIR}/AFTERIMAGE-prefix/src/AFTERIMAGE)\n  else()\n    message(STATUS \"Building AfterImage library included in ROOT itself\")"
  },
  {
    "id" : "d1971470-1740-4e44-9788-dd9d24994fd8",
    "prId" : 1712,
    "prUrl" : "https://github.com/root-project/root/pull/1712#pullrequestreview-103466104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8f98c56-512b-4f70-a42a-8e1b3386fef0",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Why change this from `cling` to `cling and llvm`?",
        "createdAt" : "2018-03-13T15:05:55Z",
        "updatedAt" : "2018-03-28T15:06:33Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4746888eb2d68fd3b84f81903f2b2c82450c4706",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +935,939 @@endif()\n\n#---Check for cling and llvm --------------------------------------------------------\nif(cling)\n  set(CLING_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/interpreter/cling/include)"
  },
  {
    "id" : "ffcfc52f-3396-4d10-a9ce-2953b543a899",
    "prId" : 2056,
    "prUrl" : "https://github.com/root-project/root/pull/2056#pullrequestreview-122242839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c09107b-c446-409b-9e27-66e1f1ef83cc",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Unrelated note:  Should we update this to use 'to root-dev@cern.ch' ?",
        "createdAt" : "2018-05-22T15:14:58Z",
        "updatedAt" : "2018-05-22T15:14:59Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "4274983c-0ace-42ac-bfd8-3e5dbb9f1754",
        "parentId" : "5c09107b-c446-409b-9e27-66e1f1ef83cc",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Good point.",
        "createdAt" : "2018-05-22T16:09:11Z",
        "updatedAt" : "2018-05-22T16:09:11Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef2aadbbc00784673f69f58deccec39c91de8874",
    "line" : 619,
    "diffHunk" : "@@ -1,1 +1608,1612 @@foreach(opt afs glite sapdb srp)\n  if(${opt})\n    message(STATUS \">>> Option '${opt}' not implemented yet! Signal your urgency to pere.mato@cern.ch\")\n    set(${opt} OFF CACHE BOOL \"Disabled because not implemented yet (${${opt}_description})\" FORCE)\n  endif()"
  },
  {
    "id" : "2f8ddc98-ce98-4ff3-8fb2-564bbbd710ae",
    "prId" : 2099,
    "prUrl" : "https://github.com/root-project/root/pull/2099#pullrequestreview-123884065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2af9108-cb82-496c-94e4-a4714c2a61d4",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Hi @dpiparo, this should be enough, but if it's required by something, we need to make sure it's found.\r\nWhat part of ROOT needs to use Numpy other than TMVA?",
        "createdAt" : "2018-05-29T05:45:59Z",
        "updatedAt" : "2018-05-29T05:45:59Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "89b37c3f-2426-43ae-a8db-79db1b9ac9aa",
        "parentId" : "b2af9108-cb82-496c-94e4-a4714c2a61d4",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "We need it for AsMatrix. But this must be optional: no numpy, no AsMatrix.",
        "createdAt" : "2018-05-29T07:59:24Z",
        "updatedAt" : "2018-05-29T07:59:24Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "1a571d7e-22f2-40d5-a4ff-c7c5e63393c0",
        "parentId" : "b2af9108-cb82-496c-94e4-a4714c2a61d4",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Then it's fine as is.",
        "createdAt" : "2018-05-29T08:04:48Z",
        "updatedAt" : "2018-05-29T08:04:48Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a964c38b96b40c55796c426c7b6aa6effa0f2e65",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +453,457 @@    find_package(PythonInterp ${python_version})\n    find_package(PythonLibs ${python_version})\n    find_package(NumPy)\n  endif()\nendif()"
  }
]