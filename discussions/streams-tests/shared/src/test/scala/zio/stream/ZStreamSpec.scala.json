[
  {
    "id" : "72352275-4215-4a9c-81b4-1f160b684ca7",
    "prId" : 4166,
    "prUrl" : "https://github.com/zio/zio/pull/4166#pullrequestreview-478920592",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9010555-62d4-4024-b00f-5a8ae25e26f8",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "ðŸ¤¦ ",
        "createdAt" : "2020-08-31T20:12:05Z",
        "updatedAt" : "2020-09-01T14:34:55Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "e77470d69bc5e60d624d0a83b376352f7a1a60b4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1740,1744 @@                _    <- halt.fail(\"Fail\")\n                result <- ZStream(1)\n                            .interruptWhen(halt)\n                            .runDrain\n                            .either"
  },
  {
    "id" : "227453c5-0e99-4b65-92aa-823bb19565fa",
    "prId" : 4141,
    "prUrl" : "https://github.com/zio/zio/pull/4141#pullrequestreview-478152468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d3a607b-da06-41ff-ba01-80a76bc89f5e",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Can you do a few runs with `nonFlaky(50000)` locally to verify the test is not flaky? Some parts of it (usage of TestClock with no advancing, use of `takeAll` which is not deterministic) make me a bit wary.",
        "createdAt" : "2020-08-29T06:15:08Z",
        "updatedAt" : "2020-08-29T20:13:36Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "748987e2-42ff-4954-8da5-086ea4b3c30f",
        "parentId" : "6d3a607b-da06-41ff-ba01-80a76bc89f5e",
        "authorId" : "02debe6b-f37b-49a5-a03c-ce2417750ed1",
        "body" : "I just ran it locally with `nonFlaky(50000)` ten times. No failures.",
        "createdAt" : "2020-08-29T20:15:01Z",
        "updatedAt" : "2020-08-29T20:15:01Z",
        "lastEditedBy" : "02debe6b-f37b-49a5-a03c-ce2417750ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a8967d5b992d1769851bcf7974b53a7f7f4c556",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +216,220 @@              _     <- queue.shutdown\n            } yield assert(value)(equalTo(List(1, 2, 3, 4, 5)))\n          } @@ zioTag(errors),\n          testM(\"error propagation 1\") {\n            val e = new RuntimeException(\"Boom\")"
  },
  {
    "id" : "9500fcbd-19d9-4a5b-ac22-ec097f0ec6f3",
    "prId" : 3618,
    "prUrl" : "https://github.com/zio/zio/pull/3618#pullrequestreview-413898167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c57b8c34-ef9d-4a84-adf5-66162a6c7b04",
        "parentId" : null,
        "authorId" : "b07fe5ec-3ba6-4df5-b718-27aef96bd2ea",
        "body" : "As far as I can see, this test doesn't check timings despite it uses Clock.\r\nI feel that we can achieve the same coverage with a simpler testcase.\r\nWhat about, e.g.:\r\n1) take an effect that counts down from 100 to 0, but crashes on 51\r\n2) pick a schedule that stops when it sees `50`\r\n3) check that it collected (100..50)\r\n4) optionally the schedule might as well crash on elements below 49",
        "createdAt" : "2020-05-18T19:20:15Z",
        "updatedAt" : "2020-05-18T19:57:23Z",
        "lastEditedBy" : "b07fe5ec-3ba6-4df5-b718-27aef96bd2ea",
        "tags" : [
        ]
      },
      {
        "id" : "be1dcafc-d51f-41e4-a7f4-0560999c4fda",
        "parentId" : "c57b8c34-ef9d-4a84-adf5-66162a6c7b04",
        "authorId" : "02debe6b-f37b-49a5-a03c-ce2417750ed1",
        "body" : "@simpadjo let me give that a try",
        "createdAt" : "2020-05-18T19:44:13Z",
        "updatedAt" : "2020-05-18T19:57:23Z",
        "lastEditedBy" : "02debe6b-f37b-49a5-a03c-ce2417750ed1",
        "tags" : [
        ]
      },
      {
        "id" : "28a995a8-c1b5-4be7-8058-062ecad65416",
        "parentId" : "c57b8c34-ef9d-4a84-adf5-66162a6c7b04",
        "authorId" : "02debe6b-f37b-49a5-a03c-ce2417750ed1",
        "body" : "@simpadjo thanks for the suggestions, done.",
        "createdAt" : "2020-05-18T19:58:06Z",
        "updatedAt" : "2020-05-18T19:58:06Z",
        "lastEditedBy" : "02debe6b-f37b-49a5-a03c-ce2417750ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "04066430df9ee2057afca305f001b4e64a19695b",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +2820,2824 @@          ),\n          testM(\"allow schedule rely on effect value\")(checkNM(10)(Gen.int(1, 100)) { (length: Int) =>\n            for {\n              ref      <- Ref.make(0)\n              effect   = ref.getAndUpdate(_ + 1).filterOrFail(_ <= length + 1)(())"
  },
  {
    "id" : "f83d683a-e098-4a69-98fc-3d2d92e413ee",
    "prId" : 3521,
    "prUrl" : "https://github.com/zio/zio/pull/3521#pullrequestreview-404647624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e762906-b53a-49cc-a5bb-61ca1f300ff7",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "I love this!!",
        "createdAt" : "2020-05-04T05:14:25Z",
        "updatedAt" : "2020-05-04T05:19:38Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "a6a7bc8d-7f67-4b9e-88eb-71587f4b8fff",
        "parentId" : "2e762906-b53a-49cc-a5bb-61ca1f300ff7",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "We can circle back to this when someone actually needs it, but I can see this being useful in some non-test-uses :-)",
        "createdAt" : "2020-05-04T05:18:18Z",
        "updatedAt" : "2020-05-04T05:19:38Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "34eaf96c338aedda435400ed5ca09188ae0dc64d",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +2479,2483 @@    ) @@ TestAspect.timed\n\n  trait ChunkCoordination[A] {\n    def queue: Queue[Take[Nothing, A]]\n    def offer: UIO[Boolean]"
  },
  {
    "id" : "438f9fe2-39d3-4c5a-9522-e275a345dc19",
    "prId" : 3521,
    "prUrl" : "https://github.com/zio/zio/pull/3521#pullrequestreview-404647624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0a92995-4f9b-4fdc-9df9-68f7d03aa2f0",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "If all testing patterns converge to \"fork the stream, offer-advance-next a bunch of times then collect the results\", it may be simpler to initialize the stepper with a `List[Assertion[A]]` that is tested against the incoming chunks.",
        "createdAt" : "2020-05-04T05:16:25Z",
        "updatedAt" : "2020-05-04T05:19:38Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "34eaf96c338aedda435400ed5ca09188ae0dc64d",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +221,225 @@\n              assertM(for {\n                f      <- stream.runCollect.fork\n                _      <- c.offer *> TestClock.advance(2.seconds) *> c.awaitNext\n                _      <- c.offer *> TestClock.advance(2.seconds) *> c.awaitNext"
  },
  {
    "id" : "7b1db68b-7925-43fb-bb67-700e4ee1b3f7",
    "prId" : 3521,
    "prUrl" : "https://github.com/zio/zio/pull/3521#pullrequestreview-404647624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "333e729c-3554-42ae-92d9-bb59fdc94bc7",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "We can extract this bit out into the stepper - have it take a function `ZStream[A] => ZStream[B]` that is applied to `ZStream.fromQueue` and then fed into `.tap(verifyAssertions)`.",
        "createdAt" : "2020-05-04T05:17:40Z",
        "updatedAt" : "2020-05-04T05:19:38Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "34eaf96c338aedda435400ed5ca09188ae0dc64d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +215,219 @@              val stream = ZStream\n                .fromQueue(c.queue)\n                .collectWhileSuccess\n                .flattenChunks\n                .debounce(1.second)"
  }
]