[
  {
    "id" : "22162259-b7f3-41e1-994d-53d34f8765a5",
    "prId" : 3886,
    "prUrl" : "https://github.com/zio/zio/pull/3886#pullrequestreview-441391478",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49f0f8fb-c297-4f1d-b730-0f9309e44b84",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "@svranesevic Last request and then this is good to merge: the implementation is a bit more involved now, so can we add a property check? Just equivalence with `List#grouped` should be sufficient.",
        "createdAt" : "2020-07-02T06:46:15Z",
        "updatedAt" : "2020-07-16T20:16:13Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "100061ad39d09c02ae8106e426fa6ec590a25b15",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +70,74 @@      suite(\"collectAllN\")(\n        testM(\"happy path\") {\n          assertM(run(ZTransducer.collectAllN[Int](3), List(Chunk(1, 2, 3, 4))))(\n            equalTo(Chunk(Chunk(1, 2, 3), Chunk(4)))\n          )"
  },
  {
    "id" : "5e7f98d8-7e6c-4e38-818b-2bde9aa91347",
    "prId" : 3885,
    "prUrl" : "https://github.com/zio/zio/pull/3885#pullrequestreview-438683995",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c9cb80c-fcb1-41b6-aea1-a19ba4d48636",
        "parentId" : null,
        "authorId" : "b07fe5ec-3ba6-4df5-b718-27aef96bd2ea",
        "body" : "The test could be blackboxified: something like\r\n`(ZStream(1,2,3,4) ++ ZStream.fromEffect(ZIO.never)).transduce(t).take(1)` ",
        "createdAt" : "2020-06-26T20:46:35Z",
        "updatedAt" : "2020-06-26T20:58:07Z",
        "lastEditedBy" : "b07fe5ec-3ba6-4df5-b718-27aef96bd2ea",
        "tags" : [
        ]
      },
      {
        "id" : "bba2d1ac-5c01-4202-8010-4bf948b849a7",
        "parentId" : "7c9cb80c-fcb1-41b6-aea1-a19ba4d48636",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Thanks! I actually prefer to test the transducer directly in this case as it is a bit of an edge case.",
        "createdAt" : "2020-06-27T08:53:12Z",
        "updatedAt" : "2020-06-27T08:53:13Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "e533500c1c3962e6c11cdf775054101a3e4afacc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +76,80 @@          assertM(run(ZTransducer.collectAllN[Int](3), List(Chunk(1, 2, 3))))(equalTo(Chunk(List(1, 2, 3))))\n        },\n        testM(\"emits chunks when exactly N elements received\") {\n          ZTransducer.collectAllN[Int](4).push.use { push =>\n            push(Some(Chunk(1, 2, 3, 4))).map(result => assert(result)(equalTo(Chunk(List(1, 2, 3, 4)))))"
  },
  {
    "id" : "dd1ee168-b1f2-4ee2-ba59-1bbdc151a9cc",
    "prId" : 3690,
    "prUrl" : "https://github.com/zio/zio/pull/3690#pullrequestreview-417262182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf2cc1b5-67ba-4be0-bee7-abd0c59f60a7",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "```suggestion\r\n          )(equalTo(List(\"aabb\", \"theguardian\", \"ddbbdabc\", \"abc\")))\r\n```\r\nðŸ¤£ ",
        "createdAt" : "2020-05-23T08:29:28Z",
        "updatedAt" : "2020-05-23T08:29:29Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "e328406d-d0ff-4d4a-91d0-1ad6fb931fe0",
        "parentId" : "cf2cc1b5-67ba-4be0-bee7-abd0c59f60a7",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "ðŸ¤£",
        "createdAt" : "2020-05-23T08:41:38Z",
        "updatedAt" : "2020-05-23T08:41:38Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "34a291a852b3be3e7b3a39dc0d6a88e8b533eb3e",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +369,373 @@              .transduce(ZTransducer.splitLines)\n              .runCollect\n          )(equalTo(List(\"aabb\", \"bbc\", \"ddbbdabc\", \"abc\")))\n        },\n        testM(\"aggregates chunks\") {"
  },
  {
    "id" : "a6fe41a8-5a77-4fe9-a6c5-7e036025ab02",
    "prId" : 3458,
    "prUrl" : "https://github.com/zio/zio/pull/3458#pullrequestreview-400652389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "862743c2-bb98-4919-8f91-8c1016c1151e",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "These are identical",
        "createdAt" : "2020-04-27T06:16:35Z",
        "updatedAt" : "2020-04-27T07:30:53Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "d904e580f56ea1896296db7c7e65579473091375",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +9,13 @@  import ZIOTag._\n\n  val initErrorParser = ZTransducer.fromEffect(IO.fail(\"Ouch\"))\n\n  def run[R, E, I, O](parser: ZTransducer[R, E, I, O], input: List[Chunk[I]]): ZIO[R, E, List[Chunk[O]]] ="
  },
  {
    "id" : "f2b01b4a-4025-4b30-9100-d13a6ce6d1cc",
    "prId" : 3458,
    "prUrl" : "https://github.com/zio/zio/pull/3458#pullrequestreview-400652389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bad7e25-7663-4bde-8c25-668b9d3759ef",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Can we cut down on some of these tests here and below? They're really just exercising `ZIO` at this point. Ideally we'd have property checks but not critical for now.",
        "createdAt" : "2020-04-27T06:17:05Z",
        "updatedAt" : "2020-04-27T07:30:53Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "d904e580f56ea1896296db7c7e65579473091375",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +25,29 @@    suite(\"Combinators\")(\n      suite(\"contramap\")(\n        testM(\"happy path\") {\n          val parser = ZTransducer.identity[Int].contramap[String](_.toInt)\n          assertM(run(parser, List(Chunk(\"1\"))))(equalTo(List(Chunk(1), Chunk.empty)))"
  }
]