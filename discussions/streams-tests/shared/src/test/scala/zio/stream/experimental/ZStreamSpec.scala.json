[
  {
    "id" : "849090f1-0bb2-4090-8f02-ba3e36d980e1",
    "prId" : 3281,
    "prUrl" : "https://github.com/zio/zio/pull/3281#pullrequestreview-387798261",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fea3234d-d0c5-4231-adcb-2b3cc607ea8c",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "The current version of the transducer for this test is:\r\n```\r\nval parser = ZSink.collectAllWhile[Char](_.isDigit).map(_.mkString.toInt) <* ZSink\r\n          .collectAllWhile[Char](_ == ',')\r\n```\r\nNice simplification. (Also, ZTransducers may not form monads after all)",
        "createdAt" : "2020-04-05T09:23:05Z",
        "updatedAt" : "2020-04-10T13:03:06Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c30aa3d640ac1993956ca1e6d5d509c63e9289f7",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +48,52 @@        testM(\"aggregate\") {\n          val s      = ZStream('1', '2', ',', '3', '4')\n          val parser = ZTransducer.collectAllWhile[Char](_.isDigit).map(_.mkString.toInt)\n\n          assertM(s.aggregate(parser).runCollect)(equalTo(List(12, 34)))"
  },
  {
    "id" : "5abac94b-a335-41c1-bd67-c3a452edeccb",
    "prId" : 2743,
    "prUrl" : "https://github.com/zio/zio/pull/2743#pullrequestreview-349370769",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b5d8633-5fe6-4eb6-bdbd-e95b3fac2ac7",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I like these tests, we should try to thoroughly exercise behavior (especially edge cases) now that we have clear semantics for everything.",
        "createdAt" : "2020-01-28T13:27:10Z",
        "updatedAt" : "2020-01-28T13:36:51Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "8339481d-bebb-47d7-b47b-34c33447caf0",
        "parentId" : "8b5d8633-5fe6-4eb6-bdbd-e95b3fac2ac7",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "I had these tests before, check `StreamPullSafetySpec.scala`. :)",
        "createdAt" : "2020-01-28T13:27:44Z",
        "updatedAt" : "2020-01-28T13:36:51Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "9130a3fd337cb34bf8c865e661424ae2a5c67af7",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +37,41 @@      ),\n      suite(\"managed\")(\n        testM(\"success\") {\n          for {\n            ref <- Ref.make(false)"
  }
]