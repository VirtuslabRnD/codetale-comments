[
  {
    "id" : "4e58c932-1093-440e-9787-fd2505f1bd9d",
    "prId" : 2503,
    "prUrl" : "https://github.com/zio/zio/pull/2503#pullrequestreview-335613027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1088142-0db9-4c51-bb7c-bc2f25887841",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Can you please add tests that drop more than one element? As also, one that drops zero element. üôè ",
        "createdAt" : "2019-12-21T16:56:36Z",
        "updatedAt" : "2019-12-22T19:42:34Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad7c01dbf092a135f7ff085057d35ab8a1fdbd0a",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +281,285 @@        },\n        testM(\"extract error\") {\n          val sink = extractErrorSink.drop(1)\n          assertM(sinkIteration(sink, 1).either, isLeft(equalTo(\"Ouch\")))\n        }"
  },
  {
    "id" : "8f9ad7b7-d185-42d2-ba8f-acd592d7b1ee",
    "prId" : 1686,
    "prUrl" : "https://github.com/zio/zio/pull/1686#pullrequestreview-288715548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c4e6848-8093-4482-9463-af9cd028a9af",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Thanks for this test.",
        "createdAt" : "2019-09-16T15:31:14Z",
        "updatedAt" : "2019-09-17T20:06:30Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "7841938a38dd45cbdb1561e60e06713baad09759",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +447,451 @@  }\n\n  private def collectAllSucceed = {\n    val sink = ZSink.succeed[Int, Int](5).collectAll\n    val test = for {"
  },
  {
    "id" : "78fa3261-3dca-4c53-a7e9-224b8a2fb047",
    "prId" : 1686,
    "prUrl" : "https://github.com/zio/zio/pull/1686#pullrequestreview-288715680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f1b628a-38f0-4c3c-8f8a-ee37f6bfb276",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "And this one.",
        "createdAt" : "2019-09-16T15:31:24Z",
        "updatedAt" : "2019-09-17T20:06:30Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "7841938a38dd45cbdb1561e60e06713baad09759",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +461,465 @@  }\n\n  private def collectAllIgnoreWhile = {\n    val sink = ZSink.ignoreWhile[Int](_ < 5).collectAll\n    val test = for {"
  },
  {
    "id" : "9b18bf4c-f458-4307-82f6-8864297c673c",
    "prId" : 1686,
    "prUrl" : "https://github.com/zio/zio/pull/1686#pullrequestreview-288716115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "daeb2257-ed6f-4d05-b70a-a96253a4b378",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Fixed!",
        "createdAt" : "2019-09-16T15:31:59Z",
        "updatedAt" : "2019-09-17T20:06:30Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "7841938a38dd45cbdb1561e60e06713baad09759",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +526,530 @@  }\n\n  private def collectAllWhileFalsePredicate = {\n    val sink = ZSink.identity[Int].collectAllWhile(_ < 0)\n    unsafeRun(sinkIteration(sink, 1).map(_ must_=== (List() -> Chunk.single(1))))"
  },
  {
    "id" : "6c017977-1d1a-4611-a0cf-9a8d6217cfa7",
    "prId" : 1686,
    "prUrl" : "https://github.com/zio/zio/pull/1686#pullrequestreview-288716417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8b9e714-edd4-46ff-84f3-fcd5aa8ec5ae",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Inference win, great to see.",
        "createdAt" : "2019-09-16T15:32:28Z",
        "updatedAt" : "2019-09-17T20:06:30Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "7841938a38dd45cbdb1561e60e06713baad09759",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +606,610 @@  }\n\n  private def dropWhileHappyPath = {\n    val sink = ZSink.identity[Int].dropWhile(_ < 5)\n    unsafeRun(sinkIteration(sink, 1).either.map(_ must_=== Left(())))"
  },
  {
    "id" : "8eb8d9a6-2b18-4ef1-8950-8e471ccb253d",
    "prId" : 1686,
    "prUrl" : "https://github.com/zio/zio/pull/1686#pullrequestreview-288717416",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8925e71-1a64-47db-ac6b-770ca34a594a",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Nice.",
        "createdAt" : "2019-09-16T15:33:56Z",
        "updatedAt" : "2019-09-17T20:06:30Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "7841938a38dd45cbdb1561e60e06713baad09759",
    "line" : 292,
    "diffHunk" : "@@ -1,1 +1066,1070 @@      cont   = sink.cont(step5)\n      result <- sink.extract(step5)\n    } yield (cont must_=== false) and (result must_=== ((List(1, 2, 3, 4), Chunk.single(5))))\n    unsafeRun(test)\n  }"
  },
  {
    "id" : "b28d0616-034c-43db-a7cf-0c173486ffeb",
    "prId" : 1686,
    "prUrl" : "https://github.com/zio/zio/pull/1686#pullrequestreview-288718199",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c84bb43-ba89-495f-aabd-ca78f2cc6dc3",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Awesome test.",
        "createdAt" : "2019-09-16T15:35:02Z",
        "updatedAt" : "2019-09-17T20:06:30Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "7841938a38dd45cbdb1561e60e06713baad09759",
    "line" : 317,
    "diffHunk" : "@@ -1,1 +1100,1104 @@               .flatMap(sink.stepChunk(_, Chunk(2, 2)).map(_._1))\n               .flatMap(sink.extract)\n    } yield (under must_=== (None -> Chunk.empty)) and (over must_=== (Some(List(1, 2, 2)) -> Chunk(2)))\n\n    unsafeRun(test)"
  },
  {
    "id" : "0c68d6c8-aa6c-40bc-a7a6-fa295eadf73f",
    "prId" : 1681,
    "prUrl" : "https://github.com/zio/zio/pull/1681#pullrequestreview-288358819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1afb25b7-d7c0-45bc-a001-dc2486c9442b",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "You know, I think the semantics of `ignoreWhile` should not be \"return ignored elements as leftover\", but rather \"swallow elements that are ignored\". What do you think?",
        "createdAt" : "2019-09-15T11:45:46Z",
        "updatedAt" : "2019-09-15T12:22:38Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "5f33b789-05d8-45ec-bdf1-36c6485168a7",
        "parentId" : "1afb25b7-d7c0-45bc-a001-dc2486c9442b",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Technically, it returns the first non ignored element as leftover.",
        "createdAt" : "2019-09-15T11:47:01Z",
        "updatedAt" : "2019-09-15T12:22:38Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      },
      {
        "id" : "4d31fca2-36f5-4f81-a785-1db60d00592d",
        "parentId" : "1afb25b7-d7c0-45bc-a001-dc2486c9442b",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Oh, sorry, I misread the test. All good then.",
        "createdAt" : "2019-09-15T11:54:55Z",
        "updatedAt" : "2019-09-15T12:22:38Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "de03b0be-2480-430a-97fb-fe5519783761",
        "parentId" : "1afb25b7-d7c0-45bc-a001-dc2486c9442b",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Maybe it would be better as `dropUntil` with a flipped predicate, but it's more or less the same.",
        "createdAt" : "2019-09-15T11:55:16Z",
        "updatedAt" : "2019-09-15T12:22:38Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "de96d9bcaace1fa31cfb567c5f387d56bb8d6c12",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +411,415 @@\n  private def chunkedLeftoverAppend = {\n    val sink = ZSink.ignoreWhile[Int](_ < 0).chunked\n    val test = for {\n      init   <- sink.initial"
  },
  {
    "id" : "af5bc7b2-39e3-4e4b-bdda-edccc7b500f6",
    "prId" : 1681,
    "prUrl" : "https://github.com/zio/zio/pull/1681#pullrequestreview-288360069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5bbb4ef-bf31-46a6-9d0d-fb4ab640d324",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Can you also step another 1/2 elements here and verify they  end up in the leftover?",
        "createdAt" : "2019-09-15T11:56:21Z",
        "updatedAt" : "2019-09-15T12:22:38Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "fc39162d-3fd7-4eb1-ad60-f90ef806b4a5",
        "parentId" : "f5bbb4ef-bf31-46a6-9d0d-fb4ab640d324",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Done.",
        "createdAt" : "2019-09-15T12:23:07Z",
        "updatedAt" : "2019-09-15T12:23:07Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "de96d9bcaace1fa31cfb567c5f387d56bb8d6c12",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +621,625 @@      step1  <- sink.step(init, 1)\n      step2  <- sink.step(step1, 2)\n      step3  <- sink.step(step2, 3)\n      step4  <- sink.step(step3, 4)\n      step5  <- sink.step(step4, 5)"
  },
  {
    "id" : "939993c0-e5bc-4383-b449-684e951539e9",
    "prId" : 1344,
    "prUrl" : "https://github.com/zio/zio/pull/1344#pullrequestreview-271847346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ef5c3ae-fb03-432e-af01-6817585f9c99",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "This is excellent, comprehensive work! Big like :-)",
        "createdAt" : "2019-08-07T09:45:47Z",
        "updatedAt" : "2019-08-07T14:12:34Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "7dd5ae2da4326a564200752fa9638c23c3eced23",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +819,823 @@  }\n\n  private object ZipParLaws {\n    def coherence[A, B: Diffable, C: Diffable](\n      s: Stream[String, A],"
  },
  {
    "id" : "b18e5830-3760-41ab-a554-edefcffd95ee",
    "prId" : 1277,
    "prUrl" : "https://github.com/zio/zio/pull/1277#pullrequestreview-269536735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1a5a384-f79f-4d71-bd54-256c376fab5d",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "`orElse` could probably benefit from some more tests around leftover handling and so forth, if you have the cycles for that here",
        "createdAt" : "2019-08-01T10:50:01Z",
        "updatedAt" : "2019-08-01T12:21:50Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "77b8e5becec6fd539fa897c403c8a5d06ea4f7d5",
    "line" : 614,
    "diffHunk" : "@@ -1,1 +612,616 @@  }\n\n  private def orElseExtractErrorBoth = {\n    val sink = extractErrorSink orElse extractErrorSink\n    unsafeRun(sinkIteration(sink, 1).either.map(_ must_=== Left(\"Ouch\")))"
  },
  {
    "id" : "fe6bcfd9-5b62-49ac-a938-2075417d0209",
    "prId" : 1277,
    "prUrl" : "https://github.com/zio/zio/pull/1277#pullrequestreview-269536735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "788d7fb9-a039-427b-8a6e-3a93da1cc925",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "`raceBoth` too, re testing leftover handling",
        "createdAt" : "2019-08-01T10:51:39Z",
        "updatedAt" : "2019-08-01T12:21:50Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "77b8e5becec6fd539fa897c403c8a5d06ea4f7d5",
    "line" : 619,
    "diffHunk" : "@@ -1,1 +617,621 @@  }\n\n  private def raceBothLeft = {\n    val sink = ZSink.identity[Int] raceBoth ZSink.succeedLazy(\"Hello\")\n    unsafeRun(sinkIteration(sink, 1).map(_ must_=== Left(1)))"
  },
  {
    "id" : "4fcf1741-2c69-437e-bc6a-2b79ab53753c",
    "prId" : 1277,
    "prUrl" : "https://github.com/zio/zio/pull/1277#pullrequestreview-269536735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bc3b025-221d-4664-a397-5be1848613fe",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Leftover handling is also an interesting property of `zip*` to test.",
        "createdAt" : "2019-08-01T10:56:47Z",
        "updatedAt" : "2019-08-01T12:21:50Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "77b8e5becec6fd539fa897c403c8a5d06ea4f7d5",
    "line" : 769,
    "diffHunk" : "@@ -1,1 +767,771 @@  }\n\n  private def zipWithHappyPath = {\n    val sink = ZSink.identity[Int].zipWith(ZSink.succeedLazy(\"Hello\"))((x, y) => x.toString + y.toString)\n    unsafeRun(sinkIteration(sink, 1).map(_ must_=== \"1Hello\"))"
  }
]