[
  {
    "id" : "1c3275a9-2a8e-412e-8508-69a7defcd5bf",
    "prId" : 2425,
    "prUrl" : "https://github.com/zio/zio/pull/2425#pullrequestreview-328103579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "447fd1ed-495f-4765-bdbf-964e03424855",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "not that it matters but you can write as:\r\n```scala\r\nassertM(\r\n  Stream.flatten(Stream(Stream.fromEffect(UIO.succeed(5)))).process.use(nPulls(_, 3)),\r\n  equalTo(List(Right(5), Left(None), Left(None))\r\n)\r\n```",
        "createdAt" : "2019-12-06T09:41:27Z",
        "updatedAt" : "2019-12-06T09:41:27Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "0e4e95ff-c04b-4021-a0e8-424f36c1ca66",
        "parentId" : "447fd1ed-495f-4765-bdbf-964e03424855",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "I'm aware, however your formulation tends to show the warning \"type inferred to be Any\" for the environment, which has since been fixed in upstream scalac. I mainly avoid it for the warning.",
        "createdAt" : "2019-12-06T10:04:24Z",
        "updatedAt" : "2019-12-06T10:04:24Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "35182f98cdf05107b556bd8182c2028fe758e13c",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +70,74 @@          .process\n          .use(nPulls(_, 3))\n          .map(assert(_, equalTo(List(Right(5), Left(None), Left(None)))))\n      },\n      testM(\"is safe to pull again after inner failure\") {"
  }
]