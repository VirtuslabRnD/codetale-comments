[
  {
    "id" : "3cafaa52-4303-4c6e-ade5-227e3d13404c",
    "prId" : 2229,
    "prUrl" : "https://github.com/zio/zio/pull/2229#pullrequestreview-318564725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c93f5cb8-c1f6-4caf-b7f8-6b42eb372f45",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Does this need a ticket?",
        "createdAt" : "2019-11-18T19:09:27Z",
        "updatedAt" : "2019-11-18T19:09:27Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "895a2c63-20d1-45c6-95bc-82dc75bebdd6",
        "parentId" : "c93f5cb8-c1f6-4caf-b7f8-6b42eb372f45",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Opened a ticket for it here: https://github.com/zio/zio/issues/2243.",
        "createdAt" : "2019-11-18T19:12:55Z",
        "updatedAt" : "2019-11-18T19:12:55Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "81158f7f982b9b7b540f0ac3a4c9f8c1c6705374",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +851,855 @@          cancelled <- substreamCancelled.get\n        } yield assert(cancelled, isTrue) && assert(result, isLeft(equalTo(\"Ouch\")))\n      } @@ flaky,\n      testM(\"outer errors interrupt all fibers\") {\n        for {"
  },
  {
    "id" : "212ce576-f4c8-479c-91bd-21e657f2a18d",
    "prId" : 2094,
    "prUrl" : "https://github.com/zio/zio/pull/2094#pullrequestreview-310806697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8220623-beb2-49e4-8474-51d22fb5a398",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Bummer, this doesn't infer without the type parameters?",
        "createdAt" : "2019-11-03T09:24:22Z",
        "updatedAt" : "2019-11-03T09:24:23Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "57caab5cd2267402fc71cc97bd448bad99dfce5f",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +392,396 @@            assertM(\n              Stream(Left(1), Right(2), Left(3))\n                .collectM[Any, Throwable, Int] {\n                  case Right(n) => ZIO(n * 2)\n                }"
  },
  {
    "id" : "c6a6071c-6666-4dd7-bbff-ee833d35719d",
    "prId" : 2049,
    "prUrl" : "https://github.com/zio/zio/pull/2049#pullrequestreview-308578404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "712a01d5-4ddd-4dbe-959c-8326013f28d1",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "‚ù§Ô∏è ",
        "createdAt" : "2019-10-29T14:55:28Z",
        "updatedAt" : "2019-10-30T21:14:08Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "53f26da337c14e906076896b7c9dcf5591b0edcf",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1095,1099 @@            for {\n              l <- s.mapM(f).runCollect\n              r <- IO.foreach(data)(f)\n            } yield assert(l, equalTo(r))\n          }"
  },
  {
    "id" : "9df61f6e-1e19-4e06-82ca-7a608dbc40f0",
    "prId" : 2049,
    "prUrl" : "https://github.com/zio/zio/pull/2049#pullrequestreview-308578539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ec1498c-f415-422e-9f76-8598bf3c158c",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "‚ù§Ô∏è ",
        "createdAt" : "2019-10-29T14:55:38Z",
        "updatedAt" : "2019-10-30T21:14:08Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "53f26da337c14e906076896b7c9dcf5591b0edcf",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1186,1190 @@\n            for {\n              merge <- s1.mergeWith(s2)(_.toString, _.toString).runCollect\n            } yield assert(merge, hasSameElements(List(\"1\", \"2\", \"1\", \"2\")))\n          },"
  },
  {
    "id" : "4893f7f2-0497-4705-8007-35575cac3477",
    "prId" : 1850,
    "prUrl" : "https://github.com/zio/zio/pull/1850#pullrequestreview-294684596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3629e4d3-f107-47cc-9919-6dfc2e6aa2ed",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Great test.",
        "createdAt" : "2019-09-29T13:42:36Z",
        "updatedAt" : "2019-09-29T13:42:49Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0277c22c58aae18e8130d08ca9941f9c9a87876",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +906,910 @@  }\n\n  private def flatMapFinalizerOrdering = {\n    val test =\n      for {"
  },
  {
    "id" : "669c45b4-c84d-4af3-9809-e7f08869df16",
    "prId" : 1767,
    "prUrl" : "https://github.com/zio/zio/pull/1767#pullrequestreview-291496765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33e378b2-fae6-41e8-a84f-4347ae3db0ff",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Hmm why did it change to `2`?",
        "createdAt" : "2019-09-22T08:46:17Z",
        "updatedAt" : "2019-09-22T09:02:18Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "03e9e7cb-fbdd-446b-afc1-d13c891981fa",
        "parentId" : "33e378b2-fae6-41e8-a84f-4347ae3db0ff",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "`Schedule.recurs(2)` will consume three elements, as in the test for `scheduleWith`",
        "createdAt" : "2019-09-22T08:49:50Z",
        "updatedAt" : "2019-09-22T09:02:18Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "942ad688-8d8a-4e96-aa16-5016cf631613",
        "parentId" : "33e378b2-fae6-41e8-a84f-4347ae3db0ff",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Ok let me wrap my head around this for a sec..running your state machine manually ;)",
        "createdAt" : "2019-09-22T08:52:29Z",
        "updatedAt" : "2019-09-22T09:02:18Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3c9ec9a2d4b72deb289ba665d21121258f742d0",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1602,1606 @@    unsafeRun(\n      Stream(\"A\", \"B\", \"C\", \"A\", \"B\", \"C\")\n        .scheduleWith(Schedule.recurs(2) *> Schedule.fromFunction((_) => \"Done\"))(_.toLowerCase, identity)\n        .run(Sink.collectAll[String])\n        .map(_ must_=== List(\"a\", \"b\", \"c\", \"Done\", \"a\", \"b\", \"c\", \"Done\"))"
  },
  {
    "id" : "1be2a7c0-da2f-4dbe-ae14-b9646a2a8d4a",
    "prId" : 1743,
    "prUrl" : "https://github.com/zio/zio/pull/1743#pullrequestreview-291481550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3651896f-a1d1-4738-8071-c629c9a261bb",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Is there a possibility that this test is flaky? Can you take another look @regiskuckaertz ?",
        "createdAt" : "2019-09-21T21:47:53Z",
        "updatedAt" : "2019-09-21T21:47:53Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      },
      {
        "id" : "e049954c-a2c5-479f-b858-cbc266973cc9",
        "parentId" : "3651896f-a1d1-4738-8071-c629c9a261bb",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Nevermind, bad rebase. Sorry.",
        "createdAt" : "2019-09-21T21:51:16Z",
        "updatedAt" : "2019-09-21T21:51:17Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec359a9a8aca43cb1e3ff4277f0dddd7c150d0b4",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +1626,1630 @@    )\n\n  private def repeatedAndSpaced =\n    unsafeRun(\n      Stream(\"A\", \"B\", \"C\")"
  },
  {
    "id" : "8c6118d8-77c6-4fb5-9448-1534afba37bb",
    "prId" : 1686,
    "prUrl" : "https://github.com/zio/zio/pull/1686#pullrequestreview-289671297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74bf0baa-684a-46f4-a4a0-74e13e18b49b",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Arg. This is one of the places where it's a loss.",
        "createdAt" : "2019-09-16T16:31:38Z",
        "updatedAt" : "2019-09-17T20:06:30Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "d0881be3-3f51-4675-b47c-3ae8ddce4721",
        "parentId" : "74bf0baa-684a-46f4-a4a0-74e13e18b49b",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "@jdegoes Oh it's good to have the grandmaster of variance and inference here.\r\n\r\nThere's a really annoying issue that the Stream's  element type parameter  isn't used to infer the Sink's input type parameter - in `run`, `transduce` and others. Any thoughts on that?",
        "createdAt" : "2019-09-16T16:33:14Z",
        "updatedAt" : "2019-09-17T20:06:30Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "137b0193-abcd-4d19-a948-6182f6a97d30",
        "parentId" : "74bf0baa-684a-46f4-a4a0-74e13e18b49b",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Can you paste signatures and I'll make it work (if it's possible üòÜ )? Thank you! üôè ",
        "createdAt" : "2019-09-16T16:36:44Z",
        "updatedAt" : "2019-09-17T20:06:30Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "604e330d-6200-402b-85eb-1ef1ee57aa0d",
        "parentId" : "74bf0baa-684a-46f4-a4a0-74e13e18b49b",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "```scala\r\ntrait ZSink[-R, +E, A, +B]\r\nobject ZSink {\r\n  final def succeed[A, B](b: B): ZSink[Any, Nothing, A, B] = new ZSink[Any, Nothing, A, B] {}\r\n}\r\n\r\ntrait ZStream[-R, +E, +A] {\r\n  def run[R1 <: R, E1 >: E, A1 >: A, B](sink: ZSink[R1, E1, A1, B]): Unit = ()\r\n}\r\n\r\nval stream = new ZStream[Any, Nothing, String] {}\r\nstream.run(ZSink.succeed(\"OK\"))\r\n\r\n// cmd0.sc:11: type mismatch;\r\n// found   : ammonite.$sess.cmd0.ZSink[Any,Nothing,Nothing,String]\r\n// required: ammonite.$sess.cmd0.ZSink[Any,Nothing,String,String]\r\n```",
        "createdAt" : "2019-09-16T16:43:54Z",
        "updatedAt" : "2019-09-17T20:06:31Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "9572a471-ff84-4ef1-a188-18b155db78c2",
        "parentId" : "74bf0baa-684a-46f4-a4a0-74e13e18b49b",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "@jdegoes ^",
        "createdAt" : "2019-09-16T16:44:03Z",
        "updatedAt" : "2019-09-17T20:06:31Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "33cc6611-435b-4de6-9677-32a380ea7fb1",
        "parentId" : "74bf0baa-684a-46f4-a4a0-74e13e18b49b",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Fixed in Dotty, at least",
        "createdAt" : "2019-09-17T18:00:46Z",
        "updatedAt" : "2019-09-17T20:06:31Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "0416cfcb-5357-4f84-8969-4e10bb33f3e9",
        "parentId" : "74bf0baa-684a-46f4-a4a0-74e13e18b49b",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I think this case is beyond help. The covariance on `A` in `ZStream` is interacting with the invariance on `ZSink` to cause the problem, and we certainly don't want to eliminate covariance on `ZStream`",
        "createdAt" : "2019-09-18T05:07:20Z",
        "updatedAt" : "2019-09-18T05:07:20Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "7841938a38dd45cbdb1561e60e06713baad09759",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +1404,1408 @@\n    s1.mergeWith(s2)(_.toString, _.toString)\n      .run(Sink.succeed[String, String](\"done\"))\n      .map(_ must_=== \"done\")\n  }"
  },
  {
    "id" : "24195fa4-585f-464f-af6e-7658b66f5986",
    "prId" : 1482,
    "prUrl" : "https://github.com/zio/zio/pull/1482#pullrequestreview-279348525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0f36dcf-d8c4-48bc-9fcb-35d96db4b4e2",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Oh, could you rewrite this with a latch on one of the streams so it won't be flaky in the CI? Or alternatively with the new MockClock.",
        "createdAt" : "2019-08-25T17:41:31Z",
        "updatedAt" : "2019-08-31T06:22:47Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "2ceca692-92d9-431c-9624-bbd8a7d088cc",
        "parentId" : "d0f36dcf-d8c4-48bc-9fcb-35d96db4b4e2",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Oh yeah, good catch! I'm on it.",
        "createdAt" : "2019-08-25T18:49:34Z",
        "updatedAt" : "2019-08-31T06:22:47Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2db075de3b605a42e9ce334e929e074a3e56a4a7",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +1792,1796 @@  }\n\n  private def zipWithLatest = unsafeRun {\n    val s1 = Stream.iterate(0)(_ + 1).fixed(100.millis)\n    val s2 = Stream.iterate(0)(_ + 1).fixed(70.millis)"
  }
]