[
  {
    "id" : "549da489-8f93-4951-8110-2241fd034798",
    "prId" : 1000,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1000#pullrequestreview-60439001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f68fe96e-9116-4ef5-8df9-9f111eecb9dd",
        "parentId" : null,
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "I suggest you fill in that cache immediately, so that you avoid the branching in `valueOf` altogether.\r\n\r\nSame for the other caches, except of course for `Short`, `Int` and `Long` you still have the branch for whether it's small enough.",
        "createdAt" : "2017-09-04T15:29:02Z",
        "updatedAt" : "2017-09-05T14:50:02Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      }
    ],
    "commit" : "06a264eb99f8de9fdf1bfefda5d32e5b0e0e207c",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +248,252 @@\nprivate[lang] object ByteCache {\n  private[lang] val cache = new Array[java.lang.Byte](256)\n}"
  },
  {
    "id" : "523b5acd-a5b4-49ea-91bd-5cfc857b7872",
    "prId" : 514,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/514#pullrequestreview-22959193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "441a716d-c0b1-4695-b6ab-c8a605703f33",
        "parentId" : null,
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "You forgot `Character`",
        "createdAt" : "2017-02-21T12:59:40Z",
        "updatedAt" : "2017-02-21T12:59:40Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      },
      {
        "id" : "e7a329e3-82dc-42dd-8aec-12f214fe87a9",
        "parentId" : "441a716d-c0b1-4695-b6ab-c8a605703f33",
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "Also, I suggest just writing `_value == other._value` in all the cases. Let the primitive `==` (on primitive operands) do the appropriate conversions in all cases. I think it would be safer.",
        "createdAt" : "2017-02-21T13:00:54Z",
        "updatedAt" : "2017-02-21T13:00:54Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      },
      {
        "id" : "4a52e212-3d8a-4b49-9d5f-6b0f0d90a659",
        "parentId" : "441a716d-c0b1-4695-b6ab-c8a605703f33",
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "~~And you also forgot `ScalaNumber`. If `other` is a `ScalaNumber`, you need to delegate to `other.equals(this)`. This is true in all of `Character`, `Byte`, `Short`, `Integer`, `Long`, `Float` and `Double`.~~\r\n\r\nAh I see you took care of that in `Number.__scala_==`. So that's fine.",
        "createdAt" : "2017-02-21T13:03:10Z",
        "updatedAt" : "2017-02-21T13:07:24Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      },
      {
        "id" : "e8de969d-1843-454f-980e-78766e169719",
        "parentId" : "441a716d-c0b1-4695-b6ab-c8a605703f33",
        "authorId" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "body" : "@densh, why don't you simply reuse implementation from ScalaRuntime? Same with `__scala_##`",
        "createdAt" : "2017-02-21T13:05:19Z",
        "updatedAt" : "2017-02-21T13:05:19Z",
        "lastEditedBy" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "tags" : [
        ]
      },
      {
        "id" : "1f131835-5d2a-442f-8e81-382c19aad50f",
        "parentId" : "441a716d-c0b1-4695-b6ab-c8a605703f33",
        "authorId" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "body" : "https://github.com/scala/scala/commit/5e7e81ab2a39182b8150c0d661cdbc89ca82c5b0#diff-0d6df8c6e82b95e5c0d2f4b2662688f5L168 - here's implementation that you can simply copy.",
        "createdAt" : "2017-02-21T13:08:26Z",
        "updatedAt" : "2017-02-21T13:08:55Z",
        "lastEditedBy" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "tags" : [
        ]
      },
      {
        "id" : "9902f9a2-bfd1-4977-9cf4-86c943a1bc4f",
        "parentId" : "441a716d-c0b1-4695-b6ab-c8a605703f33",
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "@DarkDimius The advantage of this solution is that, when you have `x == y` and both are `Any`s (or generic types), you can always compile this as a dynamic dispatch on `x.__scala_==(y)` (when `x ne null`). You don't need to have a bunch of instance tests first, then only fall back on calling `equals` if `x` is a `Foo`. So this solution speeds up the non-`Number` case so that it is not slower than Java's `equals()`. And for `java.lang.Integer` and friends, you can also fast-path the happy case where the rhs is of the same type as you are. This allows `==` not to have any performance degradation versus `equals` (a well-known issue of `==` and `Map`s in Scala/JVM).",
        "createdAt" : "2017-02-21T13:13:24Z",
        "updatedAt" : "2017-02-21T13:13:24Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      },
      {
        "id" : "94780cea-d087-48f7-8b3a-fe3fb2835688",
        "parentId" : "441a716d-c0b1-4695-b6ab-c8a605703f33",
        "authorId" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "body" : "> This allows == not to have any performance degradation versus equals (a well-known issue of == and Maps in Scala/JVM).\r\n\r\nI don't think it's fare to compare performance degradation across different VMs. But I get your point.",
        "createdAt" : "2017-02-21T13:17:30Z",
        "updatedAt" : "2017-02-21T13:17:31Z",
        "lastEditedBy" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "tags" : [
        ]
      },
      {
        "id" : "e435b84e-4aab-42cc-9a1a-65a7c6443611",
        "parentId" : "441a716d-c0b1-4695-b6ab-c8a605703f33",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "@DarkDimius Mine implementation seems to be way easier to understand. I didn't tune performance yet at all.",
        "createdAt" : "2017-02-21T13:50:59Z",
        "updatedAt" : "2017-02-21T13:51:09Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "e5a2e8a6-c1fd-47ae-816c-3fcfb3b726cb",
        "parentId" : "441a716d-c0b1-4695-b6ab-c8a605703f33",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "@sjrd Agreed on `_value == other._value`",
        "createdAt" : "2017-02-21T13:53:17Z",
        "updatedAt" : "2017-02-21T13:53:17Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "8747091e1bd208b14263d86931b02de60063476a",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +50,54 @@      case other: java.lang.Float   => _value.toFloat == other._value\n      case other: java.lang.Double  => _value.toDouble == other._value\n      case _                        => super.__scala_==(other)\n    }\n"
  }
]