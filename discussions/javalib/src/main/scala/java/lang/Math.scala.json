[
  {
    "id" : "f5807a58-e686-495a-b09a-73c230922eb9",
    "prId" : 203,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae9a23c0-431d-4578-b1f0-e9fe03eb2cab",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "This one I'm not sure if I understood the spec correctly. The javadoc speaks about \"magnitudes\", are those absolute values? \n",
        "createdAt" : "2016-06-26T18:29:15Z",
        "updatedAt" : "2016-06-27T11:41:14Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "83c81941-5f9f-4dcc-9d9c-4b1ae2933594",
        "parentId" : "ae9a23c0-431d-4578-b1f0-e9fe03eb2cab",
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "You should be able to use the same implementation as Scala.js: https://github.com/scala-js/scala-js/blob/v0.6.10/javalanglib/src/main/scala/java/lang/Math.scala#L134 although it is a bit [under-tested](https://github.com/scala-js/scala-js/blob/v0.6.10/test-suite/shared/src/test/scala/org/scalajs/testsuite/javalib/lang/MathTest.scala#L130).\n",
        "createdAt" : "2016-06-26T18:51:13Z",
        "updatedAt" : "2016-06-27T11:41:14Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      },
      {
        "id" : "78cdad93-61fb-456a-a2fe-e43d61c2b807",
        "parentId" : "ae9a23c0-431d-4578-b1f0-e9fe03eb2cab",
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "\"magnitude\" is indeed the absolute value.\n",
        "createdAt" : "2016-06-26T18:52:52Z",
        "updatedAt" : "2016-06-27T11:41:14Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5ac537282a550ff3e73d467af15f492923f0dc",
    "line" : 372,
    "diffHunk" : "@@ -1,1 +174,178 @@    subtractExact(0, a)\n\n  def nextAfter(a: scala.Float, b: scala.Double): scala.Float = {\n    val aabs = abs(a.toDouble)\n    val babs = abs(b)"
  },
  {
    "id" : "ede789d1-205c-4256-b306-dce62665f577",
    "prId" : 203,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "557fa6a0-f0b7-4826-a006-3586a31d36be",
        "parentId" : null,
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "You should probably compute `val aabs = abs(a.toDouble)` and `val babs = abs(b)` once at the beginning of the function. Or even\n\n``` scala\nval aDouble = a.toDouble\nval aabs = abs(aDouble)\nval babs = abs(b)\n```\n",
        "createdAt" : "2016-06-26T18:57:51Z",
        "updatedAt" : "2016-06-27T11:41:14Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5ac537282a550ff3e73d467af15f492923f0dc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +192,196 @@    } else {\n      cmath.nextafterf(a, Float.NEGATIVE_INFINITY)\n    }\n  }\n"
  },
  {
    "id" : "6ad9b650-7b48-456d-83cc-e6bb1d66e241",
    "prId" : 203,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c2491b0-312a-43c4-8d51-d998e342b380",
        "parentId" : null,
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "Doesn't LLVM's `nextafter` do the right thing for the \"specials\" (NaN, Infinities and zeros)?\n",
        "createdAt" : "2016-06-26T19:02:41Z",
        "updatedAt" : "2016-06-27T11:41:14Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5ac537282a550ff3e73d467af15f492923f0dc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +210,214 @@      copySign(Double.POSITIVE_INFINITY, a)\n    } else {\n      cmath.nextafter(a, b)\n    }\n  }"
  }
]