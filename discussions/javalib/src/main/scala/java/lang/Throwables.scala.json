[
  {
    "id" : "b3619688-7140-46d7-93ab-10aa38a9cdc1",
    "prId" : 1688,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1688#pullrequestreview-278139439",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cc4dc56-0530-484c-b0b7-69c124d2c285",
        "parentId" : null,
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "I was thinking of checking the exception throwing paths and the messages.",
        "createdAt" : "2019-08-21T21:39:59Z",
        "updatedAt" : "2020-05-10T01:57:47Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      },
      {
        "id" : "ec7cad98-d2a5-4884-85ee-1a959d0a25ac",
        "parentId" : "3cc4dc56-0530-484c-b0b7-69c124d2c285",
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "Two tests in ThrowablesSuite.scala, below, test the paths which throw exceptions and that\r\nthe cause Throwable has object equality with the cause Throwable given as an argument\r\nto initCause().  If there is no object equality, the messages within the result & expected cause\r\nthrowables are given by the assert().\r\n```\r\ntest(\"initCause(cause) - cases which throw an Exception\")\r\ntest(\"initCause(cause)\")\r\n```   \r\n\r\nDoes this resolve your concern?\r\n\r\nThe test suite code tests that the type of exception thrown is as expected. It does not check that the\r\ntext of the message is as expected.  There is code in other suites which does an exact message match,\r\nbut it is tedious to implement.",
        "createdAt" : "2019-08-21T23:03:09Z",
        "updatedAt" : "2020-05-10T01:57:47Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      },
      {
        "id" : "090d21cf-a5b4-471d-9bd3-37175c846e4f",
        "parentId" : "3cc4dc56-0530-484c-b0b7-69c124d2c285",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "That seems totally fine and would port back to Scala.js as well.",
        "createdAt" : "2019-08-22T00:31:28Z",
        "updatedAt" : "2020-05-10T01:57:47Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      }
    ],
    "commit" : "20d5b073e304a4a23d9d690ae8ecea584dea987d",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +162,166 @@        throw new java.lang.IllegalStateException(\n          s\"Can't overwrite cause with ${msg}\")\n      } else {\n        e = cause\n      }"
  },
  {
    "id" : "97ad9056-3f59-4c8d-bd1b-56a7dc49bcb0",
    "prId" : 1688,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1688#pullrequestreview-408018951",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3250ce2f-ae23-4b02-8ee7-7c110a9be42a",
        "parentId" : null,
        "authorId" : "e74bd39c-42ed-40fa-a3d6-87c47062406a",
        "body" : "check `this.stackTrace ne null`?",
        "createdAt" : "2020-05-07T02:39:17Z",
        "updatedAt" : "2020-05-10T01:57:47Z",
        "lastEditedBy" : "e74bd39c-42ed-40fa-a3d6-87c47062406a",
        "tags" : [
        ]
      },
      {
        "id" : "d6f84c5e-68ee-491e-b1eb-5380f59c36e6",
        "parentId" : "3250ce2f-ae23-4b02-8ee7-7c110a9be42a",
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "@hepin1989 Thank you for the review & suggestion. Always good to have another\r\npair of eyes go over the code. \r\n\r\nI concur that `null.synchronized` and `null.stackTrace` would not be a good thing to happen.\r\n\r\nI believe that if the code in lines 106 & 107 are executing then `this` is an\r\ninstantiated object and can not be null.  Am I missing something?\r\n\r\n",
        "createdAt" : "2020-05-07T15:08:35Z",
        "updatedAt" : "2020-05-10T01:57:47Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      },
      {
        "id" : "870bc26e-ced3-407d-b413-18fc5c457748",
        "parentId" : "3250ce2f-ae23-4b02-8ee7-7c110a9be42a",
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "The code is correct as is.",
        "createdAt" : "2020-05-07T18:16:50Z",
        "updatedAt" : "2020-05-10T01:57:47Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      },
      {
        "id" : "ad5da23d-6b3c-453f-aa3d-d36fcc7d4165",
        "parentId" : "3250ce2f-ae23-4b02-8ee7-7c110a9be42a",
        "authorId" : "e74bd39c-42ed-40fa-a3d6-87c47062406a",
        "body" : "@LeeTibbert \r\n```scala\r\nif(this.stackTrace ne null) this \r\n```\r\nis not needed?",
        "createdAt" : "2020-05-07T22:07:08Z",
        "updatedAt" : "2020-05-10T01:57:47Z",
        "lastEditedBy" : "e74bd39c-42ed-40fa-a3d6-87c47062406a",
        "tags" : [
        ]
      },
      {
        "id" : "040c42c8-ef20-48b2-8261-78cbab7d39dd",
        "parentId" : "3250ce2f-ae23-4b02-8ee7-7c110a9be42a",
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "No, it isn't, and would even go against what the JVM does. If you first call `setStackTrace()` then `fillInStackTrace()`, the latter will overwrite the former.",
        "createdAt" : "2020-05-08T06:12:54Z",
        "updatedAt" : "2020-05-10T01:57:47Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      }
    ],
    "commit" : "20d5b073e304a4a23d9d690ae8ecea584dea987d",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +104,108 @@    // critical section, but does not. So do\n    if (writableStackTrace) this.synchronized {\n      this.stackTrace = StackTrace.currentStackTrace()\n    }\n    this"
  },
  {
    "id" : "e56402c9-f6bc-43d5-8efb-da6675c147c6",
    "prId" : 1688,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1688#pullrequestreview-408675914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a2cb6dc-0fa0-4eee-9508-d074cdf94aa2",
        "parentId" : null,
        "authorId" : "e74bd39c-42ed-40fa-a3d6-87c47062406a",
        "body" : "extract to a consntant?",
        "createdAt" : "2020-05-09T16:35:10Z",
        "updatedAt" : "2020-05-10T01:57:47Z",
        "lastEditedBy" : "e74bd39c-42ed-40fa-a3d6-87c47062406a",
        "tags" : [
        ]
      },
      {
        "id" : "6a6691b7-43bb-4ed5-82d6-7fb05e08e62b",
        "parentId" : "3a2cb6dc-0fa0-4eee-9508-d074cdf94aa2",
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "It is used two places in the same method, none more generally. Original code had two literals. By training, I wanted to make sure both places used the same value.",
        "createdAt" : "2020-05-09T18:56:01Z",
        "updatedAt" : "2020-05-10T01:57:47Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "20d5b073e304a4a23d9d690ae8ecea584dea987d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +11,15 @@  private def makeStackTraceElement(\n      cursor: Ptr[scala.Byte]): StackTraceElement = {\n    val nameMax = 1024\n    val name    = stackalloc[CChar](nameMax)\n    val offset  = stackalloc[scala.Byte](8)"
  },
  {
    "id" : "d8a99449-8dd6-4d05-bbc9-efddaf8d8199",
    "prId" : 1688,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1688#pullrequestreview-408665580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7cde17a-a993-460c-b9d6-a0d42d747e6a",
        "parentId" : null,
        "authorId" : "e74bd39c-42ed-40fa-a3d6-87c47062406a",
        "body" : "private[this] will be dropped in dotty 3.1",
        "createdAt" : "2020-05-09T16:35:41Z",
        "updatedAt" : "2020-05-10T01:57:47Z",
        "lastEditedBy" : "e74bd39c-42ed-40fa-a3d6-87c47062406a",
        "tags" : [
        ]
      },
      {
        "id" : "9deda4fe-420d-4c0d-a509-368180312e6e",
        "parentId" : "e7cde17a-a993-460c-b9d6-a0d42d747e6a",
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "That's OK. We're a long way away from 3.1. In the meantime, `private[this]` produces less junk in the NIR than just `private`.",
        "createdAt" : "2020-05-09T16:40:46Z",
        "updatedAt" : "2020-05-10T01:57:47Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      }
    ],
    "commit" : "20d5b073e304a4a23d9d690ae8ecea584dea987d",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +67,71 @@  def this(e: Throwable) = this(if (e == null) null else e.toString, e)\n\n  private[this] var stackTrace: Array[StackTraceElement] = _\n\n  if (writableStackTrace)"
  },
  {
    "id" : "34c71375-74a5-4525-912b-b203037a113a",
    "prId" : 1688,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1688#pullrequestreview-408665749",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87f42af5-dd2c-47e3-b7d1-4ec2f01e1929",
        "parentId" : null,
        "authorId" : "e74bd39c-42ed-40fa-a3d6-87c47062406a",
        "body" : "when do `setStackTrace` should we take `writableStackTrace` into account? I think it's not.",
        "createdAt" : "2020-05-09T16:43:18Z",
        "updatedAt" : "2020-05-10T01:57:47Z",
        "lastEditedBy" : "e74bd39c-42ed-40fa-a3d6-87c47062406a",
        "tags" : [
        ]
      }
    ],
    "commit" : "20d5b073e304a4a23d9d690ae8ecea584dea987d",
    "line" : 205,
    "diffHunk" : "@@ -1,1 +239,243 @@\n  def setStackTrace(stackTrace: Array[StackTraceElement]): Unit = {\n    if (writableStackTrace) this.synchronized {\n      var i = 0\n      while (i < stackTrace.length) {"
  },
  {
    "id" : "cbc89a09-4222-434f-a105-80791a94a0f8",
    "prId" : 1688,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1688#pullrequestreview-408667329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3219816-ab4a-447d-8474-db949f9889ac",
        "parentId" : null,
        "authorId" : "e74bd39c-42ed-40fa-a3d6-87c47062406a",
        "body" : "any error message?",
        "createdAt" : "2020-05-09T16:44:12Z",
        "updatedAt" : "2020-05-10T01:57:47Z",
        "lastEditedBy" : "e74bd39c-42ed-40fa-a3d6-87c47062406a",
        "tags" : [
        ]
      },
      {
        "id" : "3d6274f9-330a-49f7-bc26-8490d348b31c",
        "parentId" : "c3219816-ab4a-447d-8474-db949f9889ac",
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "Sharp eyes,  I believe that NullPointerException supplies its own message. \r\n\r\nWhen I did the port, I tried to minimize changes the Scala.js original.  I am always\r\nwary of breaking things.   To the best of my memory, that code is preserved from the original. \r\n\r\nAdding custom message text is always a tradeoff: information added vs. the conceptual cost to devos & end users of being non-standard. I usually like to do the best that I\r\ncan to describe where an error happened. Mostly because I am likely to hit that error\r\nmyself and call down bad thoughts on the devo/\r\n\r\n The standard NPE is pretty clear & explicit. The accompanying stack trace gives the location where it happened.  I do not see what a custom message might add, but my\r\nvision may be limited.  ",
        "createdAt" : "2020-05-09T17:03:19Z",
        "updatedAt" : "2020-05-10T01:57:47Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "20d5b073e304a4a23d9d690ae8ecea584dea987d",
    "line" : 209,
    "diffHunk" : "@@ -1,1 +243,247 @@      while (i < stackTrace.length) {\n        if (stackTrace(i) eq null)\n          throw new NullPointerException()\n        i += 1\n      }"
  }
]