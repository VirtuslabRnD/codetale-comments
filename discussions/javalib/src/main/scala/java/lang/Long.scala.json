[
  {
    "id" : "2d7d0724-e9f7-40fe-8d1c-7e62304e52b4",
    "prId" : 2270,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/2270#pullrequestreview-644555953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbdb6afb-b594-45c0-a939-1f7053540872",
        "parentId" : null,
        "authorId" : "f4f243c6-89af-4952-a717-72ea9d628eb2",
        "body" : "Again, this was a bug, if the long was preceded by `+` we were failing",
        "createdAt" : "2021-04-26T11:23:15Z",
        "updatedAt" : "2021-04-28T01:03:45Z",
        "lastEditedBy" : "f4f243c6-89af-4952-a717-72ea9d628eb2",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d9063039f4d7d0e983efef9c043e3a16a5c7c85",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +215,219 @@    val positive   = firstDigit == '+'\n\n    if (negative || positive) {\n      if (length == 1) fail(nm)\n      i += 1"
  },
  {
    "id" : "46939aa2-6fb2-4f84-b201-efb281a302ea",
    "prId" : 2270,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/2270#pullrequestreview-644557727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70ac12cf-6723-4e1e-b589-d796faea2d0e",
        "parentId" : null,
        "authorId" : "f4f243c6-89af-4952-a717-72ea9d628eb2",
        "body" : "This block has not changed apart from failing with the standard `fail` message that includes the `For input string: \"$nm\"`. But it has been taken out of an else (and we fail fast instead)",
        "createdAt" : "2021-04-26T11:25:20Z",
        "updatedAt" : "2021-04-28T01:03:45Z",
        "lastEditedBy" : "f4f243c6-89af-4952-a717-72ea9d628eb2",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d9063039f4d7d0e983efef9c043e3a16a5c7c85",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +242,246 @@    }\n\n    valueOf(parse(nm, i, base, negative))\n  }\n"
  },
  {
    "id" : "c9c79939-e663-4f1c-a472-49adfe7257b5",
    "prId" : 514,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/514#pullrequestreview-22957573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "972977e0-8f6b-46ce-b36f-e917bc533439",
        "parentId" : null,
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "Shouldn't you put `case other: java.lang.Long` first as a fast-path? And similarly for all other variants.",
        "createdAt" : "2017-02-21T13:06:17Z",
        "updatedAt" : "2017-02-21T13:06:17Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      },
      {
        "id" : "75b82a98-b021-4179-8121-3ea077f0e445",
        "parentId" : "972977e0-8f6b-46ce-b36f-e917bc533439",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Good point. ",
        "createdAt" : "2017-02-21T13:46:08Z",
        "updatedAt" : "2017-02-21T13:46:08Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "8747091e1bd208b14263d86931b02de60063476a",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +50,54 @@      case other: java.lang.Float   => _value.toFloat == other._value\n      case other: java.lang.Double  => _value.toDouble == other._value\n      case _                        => super.__scala_==(other)\n    }\n"
  },
  {
    "id" : "20eb2466-2755-473f-8e8e-cb39e0169db9",
    "prId" : 346,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/346#pullrequestreview-5346387",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "283f1e96-7bce-4616-a86c-7dbea96221f4",
        "parentId" : null,
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "The same problem with addition overflow appears here. Test case: `JLong.parseUnsignedLong(\"18446744073709551616\")`\n",
        "createdAt" : "2016-10-22T09:38:28Z",
        "updatedAt" : "2016-10-24T20:17:08Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      }
    ],
    "commit" : "447905ab4bcdb07c44fb14c6049d8537c1120295",
    "line" : null,
    "diffHunk" : "@@ -1,1 +378,382 @@      if (compareUnsigned(digit, result) > 0)\n        throw new NumberFormatException(s)\n    }\n\n    result"
  }
]