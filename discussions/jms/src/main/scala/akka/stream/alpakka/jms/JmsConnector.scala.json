[
  {
    "id" : "e88c0857-cdfa-4ed9-9574-f3eaa8da5a49",
    "prId" : 1227,
    "prUrl" : "https://github.com/akka/alpakka/pull/1227#pullrequestreview-163531684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31dbfe1c-b8e6-4d35-9a79-c92e3b80e8e2",
        "parentId" : null,
        "authorId" : "d15f37f8-2910-4165-af49-f865f0902a09",
        "body" : "here also, I think we must switch back to the graph stage threads with the asyncCallback. This however changed the amount of reconnects in the test.",
        "createdAt" : "2018-09-22T13:16:43Z",
        "updatedAt" : "2018-10-16T14:38:04Z",
        "lastEditedBy" : "d15f37f8-2910-4165-af49-f865f0902a09",
        "tags" : [
        ]
      },
      {
        "id" : "6f6c8d7f-f9bb-4eca-8a3c-6f94f5d4553e",
        "parentId" : "31dbfe1c-b8e6-4d35-9a79-c92e3b80e8e2",
        "authorId" : "0ce149e1-76d5-48b6-baaa-612972fcc400",
        "body" : "Since it is future-based, I'm not to worried about switching back. But this also works. Thanks!",
        "createdAt" : "2018-10-11T02:36:32Z",
        "updatedAt" : "2018-10-16T14:38:04Z",
        "lastEditedBy" : "0ce149e1-76d5-48b6-baaa-612972fcc400",
        "tags" : [
        ]
      }
    ],
    "commit" : "c480a1b30e90d1ae2006515699af31ae97812367",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +161,165 @@        override def onException(ex: jms.JMSException): Unit = {\n          Try(connection.close()) // best effort closing the connection.\n          connectionFailedCB.invoke(ex)\n        }\n      })"
  },
  {
    "id" : "9c74a5ae-91bb-4e74-b884-ee9c8d146de7",
    "prId" : 1227,
    "prUrl" : "https://github.com/akka/alpakka/pull/1227#pullrequestreview-157909757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c238d59-421d-495b-bc37-9945488f14b4",
        "parentId" : null,
        "authorId" : "d15f37f8-2910-4165-af49-f865f0902a09",
        "body" : "Here also, just simplified some code",
        "createdAt" : "2018-09-22T13:20:13Z",
        "updatedAt" : "2018-10-16T14:38:04Z",
        "lastEditedBy" : "d15f37f8-2910-4165-af49-f865f0902a09",
        "tags" : [
        ]
      }
    ],
    "commit" : "c480a1b30e90d1ae2006515699af31ae97812367",
    "line" : 182,
    "diffHunk" : "@@ -1,1 +240,244 @@    val destination = elem.destination match {\n      case Some(messageDestination) => lookup(messageDestination)\n      case None => defaultDestination\n    }\n    jmsProducer.send(destination, message, deliveryMode, priority, timeToLive)"
  },
  {
    "id" : "97299731-0de5-488d-9432-02e2c0192ecb",
    "prId" : 1227,
    "prUrl" : "https://github.com/akka/alpakka/pull/1227#pullrequestreview-157909798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8dc39e1-44c7-4b9b-89e9-4f01b60d232c",
        "parentId" : null,
        "authorId" : "d15f37f8-2910-4165-af49-f865f0902a09",
        "body" : "The epoch is used to track whether the producer is stale; on each disconnect, the epoch is incremented. By remembering the creation epoch, old producers can be discarded once the in-flight message lands.",
        "createdAt" : "2018-09-22T13:22:00Z",
        "updatedAt" : "2018-10-16T14:38:04Z",
        "lastEditedBy" : "d15f37f8-2910-4165-af49-f865f0902a09",
        "tags" : [
        ]
      }
    ],
    "commit" : "c480a1b30e90d1ae2006515699af31ae97812367",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +202,206 @@\nprivate[jms] object JmsMessageProducer {\n  def apply(jmsSession: JmsProducerSession, settings: JmsProducerSettings, epoch: Int): JmsMessageProducer = {\n    val producer = jmsSession.session.createProducer(null)\n    if (settings.timeToLive.nonEmpty) {"
  },
  {
    "id" : "507cd088-7fb1-4301-80fa-d8ebd7b9bbeb",
    "prId" : 1194,
    "prUrl" : "https://github.com/akka/alpakka/pull/1194#pullrequestreview-155717265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e583dd49-c455-425e-9553-f4a39dc98842",
        "parentId" : null,
        "authorId" : "0ce149e1-76d5-48b6-baaa-612972fcc400",
        "body" : "Replaced with Akka library call providing the same functionality.",
        "createdAt" : "2018-09-06T19:45:15Z",
        "updatedAt" : "2018-09-17T05:39:17Z",
        "lastEditedBy" : "0ce149e1-76d5-48b6-baaa-612972fcc400",
        "tags" : [
        ]
      },
      {
        "id" : "38b84b03-0a47-402b-bc4b-265eac1f5fac",
        "parentId" : "e583dd49-c455-425e-9553-f4a39dc98842",
        "authorId" : "d15f37f8-2910-4165-af49-f865f0902a09",
        "body" : "👍 ",
        "createdAt" : "2018-09-15T15:44:52Z",
        "updatedAt" : "2018-09-17T05:39:17Z",
        "lastEditedBy" : "d15f37f8-2910-4165-af49-f865f0902a09",
        "tags" : [
        ]
      }
    ],
    "commit" : "824b234809cdb0cc27f73c4c72392a12a99de65c",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +51,55 @@    }\n\n    ActorMaterializerHelper.downcast(materializer).system.dispatchers.lookup(dispatcher.dispatcher)\n  }\n"
  },
  {
    "id" : "0bb68844-15e0-4a53-bd7a-28ee7f9921a7",
    "prId" : 1194,
    "prUrl" : "https://github.com/akka/alpakka/pull/1194#pullrequestreview-154443119",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f476379-881d-4165-9569-ead16e8862d4",
        "parentId" : null,
        "authorId" : "0ce149e1-76d5-48b6-baaa-612972fcc400",
        "body" : "`withReconnect` is set to `false` for the publisher at this point, until we can be certain reconnects behaving correctly with the publisher. Then even the `if` block below can be taken out.",
        "createdAt" : "2018-09-12T00:04:12Z",
        "updatedAt" : "2018-09-17T05:39:17Z",
        "lastEditedBy" : "0ce149e1-76d5-48b6-baaa-612972fcc400",
        "tags" : [
        ]
      }
    ],
    "commit" : "824b234809cdb0cc27f73c4c72392a12a99de65c",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +61,65 @@  case object TimedOut extends ConnectionStatus\n\n  protected def initSessionAsync(withReconnect: Boolean = true): Unit = {\n\n    def failureHandler(ex: Throwable) ="
  },
  {
    "id" : "df74bb22-d71c-4350-a43f-010a7ad12444",
    "prId" : 1194,
    "prUrl" : "https://github.com/akka/alpakka/pull/1194#pullrequestreview-155720355",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e962dd9d-8384-45fb-b8e4-6d3691dd1bcc",
        "parentId" : null,
        "authorId" : "d15f37f8-2910-4165-af49-f865f0902a09",
        "body" : "why not just\r\n```scala\r\n          val delay = waitTime(nextN).min(maxBackoff)\r\n          after(delay, system.scheduler) {\r\n            openConnectionWithRetry(startConnection, nextN)\r\n          }\r\n```\r\n? :)",
        "createdAt" : "2018-09-15T16:03:02Z",
        "updatedAt" : "2018-09-17T05:39:17Z",
        "lastEditedBy" : "d15f37f8-2910-4165-af49-f865f0902a09",
        "tags" : [
        ]
      },
      {
        "id" : "0b35d798-649c-48b1-aeb3-156d2e27e753",
        "parentId" : "e962dd9d-8384-45fb-b8e4-6d3691dd1bcc",
        "authorId" : "0ce149e1-76d5-48b6-baaa-612972fcc400",
        "body" : "Since `waitTime` is an exponential function, there is a very small chance a very large backoff may overflow, throwing this logic into haywire. That's why I really want to stop calculating the `waitTime` after max is reached.",
        "createdAt" : "2018-09-15T17:42:24Z",
        "updatedAt" : "2018-09-17T05:39:17Z",
        "lastEditedBy" : "0ce149e1-76d5-48b6-baaa-612972fcc400",
        "tags" : [
        ]
      }
    ],
    "commit" : "824b234809cdb0cc27f73c4c72392a12a99de65c",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +138,142 @@        } else {\n          val delay = if (maxed) maxBackoff else waitTime(nextN)\n          if (delay >= maxBackoff) {\n            after(maxBackoff, system.scheduler) {\n              openConnectionWithRetry(startConnection, nextN, maxed = true)"
  },
  {
    "id" : "c74cd973-3084-4417-ae77-f83bd5bdf2c8",
    "prId" : 1181,
    "prUrl" : "https://github.com/akka/alpakka/pull/1181#pullrequestreview-152433492",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fb53c9b-3170-406b-bd4a-2b23f775ddc0",
        "parentId" : null,
        "authorId" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "body" : "Thanks for cleaning these up.",
        "createdAt" : "2018-09-05T10:37:55Z",
        "updatedAt" : "2018-09-09T08:11:58Z",
        "lastEditedBy" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "tags" : [
        ]
      }
    ],
    "commit" : "050b3af33567444a9accba1df3ef75ca75f279ae",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +31,35 @@  protected val fail: AsyncCallback[Throwable] = getAsyncCallback[Throwable](e => failStage(e))\n\n  private val onConnection: AsyncCallback[jms.Connection] = getAsyncCallback[jms.Connection] { c =>\n    jmsConnection = Some(c)\n  }"
  },
  {
    "id" : "5a7d6213-1bf1-4a71-b335-ca2b079e95c9",
    "prId" : 1181,
    "prUrl" : "https://github.com/akka/alpakka/pull/1181#pullrequestreview-152433492",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "524ae915-723b-4d84-8b07-3829bea73628",
        "parentId" : null,
        "authorId" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "body" : "Great to keep the `jms` prefix to distinguish things.",
        "createdAt" : "2018-09-05T10:44:24Z",
        "updatedAt" : "2018-09-09T08:11:58Z",
        "lastEditedBy" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "tags" : [
        ]
      }
    ],
    "commit" : "050b3af33567444a9accba1df3ef75ca75f279ae",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +10,14 @@import akka.stream.stage.{AsyncCallback, GraphStageLogic}\nimport akka.stream.{ActorAttributes, ActorMaterializer, Attributes}\nimport javax.jms\n\nimport scala.concurrent.{ExecutionContext, Future}"
  },
  {
    "id" : "c35bce94-bb12-4344-8569-7c6dfd0e44f8",
    "prId" : 1148,
    "prUrl" : "https://github.com/akka/alpakka/pull/1148#pullrequestreview-149509544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d32fc23-931a-4571-9ba8-90e3d3216800",
        "parentId" : null,
        "authorId" : "bba6cf5b-4bcc-4263-b94e-5d96339f45e7",
        "body" : "If the properties contain a value which is not of any of these types, would it make sense to explicitly throw an exception instead of the default MatchError?",
        "createdAt" : "2018-08-15T18:05:32Z",
        "updatedAt" : "2018-08-30T16:10:14Z",
        "lastEditedBy" : "bba6cf5b-4bcc-4263-b94e-5d96339f45e7",
        "tags" : [
        ]
      },
      {
        "id" : "3f0f2b46-35e9-4135-bf99-edcc86a03d9c",
        "parentId" : "3d32fc23-931a-4571-9ba8-90e3d3216800",
        "authorId" : "d15f37f8-2910-4165-af49-f865f0902a09",
        "body" : "In general, I would say yes.\r\n\r\nHowever, the Jms producer crashes on any exception, and does not distinguish between retriable errors and non-retriable ones - it doesn't perform any retries. So in the end, the behavior would still be very similar if we introduced a custom exception here. It would make much more sense to introduce a custom exception if the Jms producer stage did retries, and would not try to do those retries if the property value type is of an unexpected type.\r\n\r\n(please note:  this is part of the code I moved out of the stage into a separate class - I didn't modify it)",
        "createdAt" : "2018-08-20T14:47:20Z",
        "updatedAt" : "2018-08-30T16:10:14Z",
        "lastEditedBy" : "d15f37f8-2910-4165-af49-f865f0902a09",
        "tags" : [
        ]
      },
      {
        "id" : "0a7f4798-0d9e-4134-afba-4c0490589483",
        "parentId" : "3d32fc23-931a-4571-9ba8-90e3d3216800",
        "authorId" : "d15f37f8-2910-4165-af49-f865f0902a09",
        "body" : "@WellingR after giving it some thought, those exceptions can be handy in supervision logic too, so here is a proposal - what do you think? https://github.com/akka/alpakka/pull/1148/commits/a2805765cdd09868f878f2d514788d1914d984b1",
        "createdAt" : "2018-08-22T05:13:16Z",
        "updatedAt" : "2018-08-30T16:10:14Z",
        "lastEditedBy" : "d15f37f8-2910-4165-af49-f865f0902a09",
        "tags" : [
        ]
      },
      {
        "id" : "74e7edbd-087a-411e-a224-35a118cd9be1",
        "parentId" : "3d32fc23-931a-4571-9ba8-90e3d3216800",
        "authorId" : "bba6cf5b-4bcc-4263-b94e-5d96339f45e7",
        "body" : "Looks better!\r\nI had some comments about the exception traits though.",
        "createdAt" : "2018-08-25T09:01:20Z",
        "updatedAt" : "2018-08-30T16:10:14Z",
        "lastEditedBy" : "bba6cf5b-4bcc-4263-b94e-5d96339f45e7",
        "tags" : [
        ]
      },
      {
        "id" : "9fc66cb1-b0f3-49c7-bcc3-7a4ea4b601a4",
        "parentId" : "3d32fc23-931a-4571-9ba8-90e3d3216800",
        "authorId" : "d15f37f8-2910-4165-af49-f865f0902a09",
        "body" : "👍 I've followed your suggestions :)",
        "createdAt" : "2018-08-25T12:57:32Z",
        "updatedAt" : "2018-08-30T16:10:14Z",
        "lastEditedBy" : "d15f37f8-2910-4165-af49-f865f0902a09",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a990ff9c947bc0cb45f566a81e8332a1356bbb4",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +160,164 @@          case v: Short => message.setShortProperty(key, v)\n          case v: Long => message.setLongProperty(key, v)\n          case v: Double => message.setDoubleProperty(key, v)\n          case null => throw NullMessageProperty(key, jmsMessage)\n          case _ => throw UnsupportedMessagePropertyType(key, v, jmsMessage)"
  },
  {
    "id" : "71170888-89ea-4b9b-8b55-b0e02e8f3f4f",
    "prId" : 80,
    "prUrl" : "https://github.com/akka/alpakka/pull/80#pullrequestreview-10841848",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70dd76df-add2-4dff-aac2-53566e67d52b",
        "parentId" : null,
        "authorId" : "b8cd968d-9321-417f-8dcf-5300bfdd199e",
        "body" : "perhaps use `.onFailure` in case an exception is thrown inside that Future",
        "createdAt" : "2016-11-30T20:39:21Z",
        "updatedAt" : "2016-12-21T17:10:57Z",
        "lastEditedBy" : "b8cd968d-9321-417f-8dcf-5300bfdd199e",
        "tags" : [
        ]
      }
    ],
    "commit" : "643e05ec750a97e40c89d4d52c8e857c86e378a8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +44,48 @@    }.onFailure {\n      case e: Exception => fail.invoke(e)\n    }\n  }\n"
  }
]