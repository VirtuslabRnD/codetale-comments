[
  {
    "id" : "5bae7212-eeb9-4394-be9b-e2977a297c00",
    "prId" : 1824,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46c1f2dc-c162-4a3e-ac88-dcac5e0d1f0d",
        "parentId" : null,
        "authorId" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "body" : "you define type parameter `T` but not used it, and any type parameters in the method won't be inferred.\n",
        "createdAt" : "2014-03-10T19:52:21Z",
        "updatedAt" : "2014-03-11T10:12:56Z",
        "lastEditedBy" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "tags" : [
        ]
      },
      {
        "id" : "f057850a-e8c2-462f-8b85-7eacda29f8e9",
        "parentId" : "46c1f2dc-c162-4a3e-ac88-dcac5e0d1f0d",
        "authorId" : "e857604e-61be-4776-87b2-e4c5d025e03b",
        "body" : "You are absolutely right, I'll fix it.\n",
        "createdAt" : "2014-03-10T19:56:50Z",
        "updatedAt" : "2014-03-11T10:12:56Z",
        "lastEditedBy" : "e857604e-61be-4776-87b2-e4c5d025e03b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dca457aa7193072d75c295e974e53228739756fc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3479,3483 @@\t\t\tobject: T,\n\t\t\tcallback: ObjectIterator<any, any>,\n\t\t\tthisArg?: any): Mapped;\n\n\t\tmapValues<Mapped, T>("
  },
  {
    "id" : "0e7dcf9d-5aa5-4671-8aa7-1c90c3a25178",
    "prId" : 3930,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "715a45ec-8bc2-4607-9743-dfebdb904383",
        "parentId" : null,
        "authorId" : "1ca557cb-9bb4-423a-b1d5-159e2bc35c32",
        "body" : "https://lodash.com/docs#compact\nI think `compact` is not allowed 1st argument to be optional.\n",
        "createdAt" : "2015-03-24T15:18:53Z",
        "updatedAt" : "2015-03-24T15:18:53Z",
        "lastEditedBy" : "1ca557cb-9bb4-423a-b1d5-159e2bc35c32",
        "tags" : [
        ]
      },
      {
        "id" : "3cf256e9-9083-4f7c-ad04-71e709180f75",
        "parentId" : "715a45ec-8bc2-4607-9743-dfebdb904383",
        "authorId" : "dbd78eb1-67cf-43c8-b5e4-1b819c3b9d96",
        "body" : "It might be more of a discussion point than anything else, but my reasoning for introducing this is because `_.compact()` or `_.compact(void(0))` yields `[]`. They might label it as a required argument in the documentation, but in practice, it's not actually required. It's because of this that I can do.\n\n``` ts\nvar foo: string[];\nif (someCondition) {\n  foo = ['bar', 'baz', 'qux'];\n}\nif (someOtherCondition) {\n  foo = ['corge', 'garpley', 'thud'];\n}\nfoo = _.compact(foo);\n```\n\nThere's no reason that shouldn't compile is my point. It's totally valid code and because lodash functions don't throw errors, it fails gracefully and yields an empty array.\n\nWhat are your thoughts on the matter?\n",
        "createdAt" : "2015-03-24T17:24:09Z",
        "updatedAt" : "2015-03-24T17:24:09Z",
        "lastEditedBy" : "dbd78eb1-67cf-43c8-b5e4-1b819c3b9d96",
        "tags" : [
        ]
      },
      {
        "id" : "666c8539-c3fb-4e6c-99d6-115d043e7ece",
        "parentId" : "715a45ec-8bc2-4607-9743-dfebdb904383",
        "authorId" : "dbd78eb1-67cf-43c8-b5e4-1b819c3b9d96",
        "body" : "The way I think of it is that vanilla JavaScript can compile just fine through a compiler, right? Then why not existing code that uses a library such as lodash? I think it's more the job of TypeScript to prevent the following:\n\n``` ts\n_.compact('foo');\n```\n\nWe just need to make sure that argument is the right type (or null/undefined).\n\nBasically, what I'm saying is that an argument shouldn't be marked as truly required unless you're throwing some kind of error in the function. For example:\n\n``` ts\nfunction foo(bar: string, baz?: string) {\n  if (_.isNull(bar) || _.isUndefined(bar)) {\n    throw new Error('bar is null or undefined');\n  }\n  return bar + baz;\n}\n```\n",
        "createdAt" : "2015-03-24T17:32:04Z",
        "updatedAt" : "2015-03-24T17:32:04Z",
        "lastEditedBy" : "dbd78eb1-67cf-43c8-b5e4-1b819c3b9d96",
        "tags" : [
        ]
      },
      {
        "id" : "aa42bd5b-5f72-489b-b00f-3791d294e563",
        "parentId" : "715a45ec-8bc2-4607-9743-dfebdb904383",
        "authorId" : "1ca557cb-9bb4-423a-b1d5-159e2bc35c32",
        "body" : "I think type should lead a code to valid style. and type should not block writing code.\nI'll merge this PR if your code is useful in real world.\n",
        "createdAt" : "2015-03-29T13:21:34Z",
        "updatedAt" : "2015-03-29T13:21:34Z",
        "lastEditedBy" : "1ca557cb-9bb4-423a-b1d5-159e2bc35c32",
        "tags" : [
        ]
      }
    ],
    "commit" : "049e87b386bd01fc8f6197b7e21e2ba512d6f10e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +264,268 @@        * @return (Array) Returns a new array of filtered values.\n        **/\n        compact<T>(array?: Array<T>): T[];\n\n        /**"
  }
]