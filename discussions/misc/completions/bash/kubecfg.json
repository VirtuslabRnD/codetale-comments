[
  {
    "id" : "c472f957-b319-45a3-862c-59954b95597b",
    "prId" : 1246,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3182476b-15f1-44db-92f7-6ac5b4fa6ac6",
        "parentId" : null,
        "authorId" : "fd5eb1fb-f30a-4735-908c-944e87d99845",
        "body" : "You need a `return 1` at the end of this function to indicate it was not found.\n",
        "createdAt" : "2014-09-16T16:05:39Z",
        "updatedAt" : "2014-09-29T21:16:58Z",
        "lastEditedBy" : "fd5eb1fb-f30a-4735-908c-944e87d99845",
        "tags" : [
        ]
      },
      {
        "id" : "90fd59dc-34c2-4499-9bfc-ca803ba76012",
        "parentId" : "3182476b-15f1-44db-92f7-6ac5b4fa6ac6",
        "authorId" : "fd5eb1fb-f30a-4735-908c-944e87d99845",
        "body" : "So if you use __contains_word on a non-empty list of words then the exit status will be the failure of `[[ $w = \"$word\" ]]` which will be 1. However, if you use it on an empty list, then exit status will be 0 and I think it shouldn't...\n\n``` shell\n$ __contains_word x 1 2 3\n$ echo $?\n1\n$ __contains_word x\n$ echo $?\n0\n```\n\nI think the `return 1` is needed here.\n\nI noticed the __contains_word in systemd has this bug, I'll try to send them a patch to correct that there.\n",
        "createdAt" : "2014-09-16T16:11:04Z",
        "updatedAt" : "2014-09-29T21:16:58Z",
        "lastEditedBy" : "fd5eb1fb-f30a-4735-908c-944e87d99845",
        "tags" : [
        ]
      }
    ],
    "commit" : "59e1c5c80a48a520b1ef9a71798f528134ad1fb0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +49,53 @@        shift\n    done\n}\nfi\n"
  },
  {
    "id" : "474dabe3-ed23-4e3c-9630-431af0b0d28f",
    "prId" : 1246,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb591fad-3510-4d39-a99b-98bb5eb26077",
        "parentId" : null,
        "authorId" : "fd5eb1fb-f30a-4735-908c-944e87d99845",
        "body" : "Not sure if you can count on `_get_comp_words_by_ref` having been defined before this call...\n\nI'm looking at `git` completion which uses it and I see they define their own if it's not present yet:\nhttps://github.com/git/git/blob/master/contrib/completion/git-completion.bash#L157\n",
        "createdAt" : "2014-09-16T16:29:15Z",
        "updatedAt" : "2014-09-29T21:16:58Z",
        "lastEditedBy" : "fd5eb1fb-f30a-4735-908c-944e87d99845",
        "tags" : [
        ]
      },
      {
        "id" : "af823e9d-5a55-4fac-ac0e-02995f4f2281",
        "parentId" : "eb591fad-3510-4d39-a99b-98bb5eb26077",
        "authorId" : "766f642e-1622-4803-803b-05ce306fc30e",
        "body" : "Docker is using it without a pre-definition.  Is that a good enough dependency for us that bash-completions will be adequately up2date?\n\nhttps://github.com/docker/docker/blob/master/contrib/completion/bash/docker#L777\n",
        "createdAt" : "2014-09-24T23:49:07Z",
        "updatedAt" : "2014-09-29T21:16:58Z",
        "lastEditedBy" : "766f642e-1622-4803-803b-05ce306fc30e",
        "tags" : [
        ]
      },
      {
        "id" : "e58a45db-7ca7-44b4-96a6-3840c8fa0dec",
        "parentId" : "eb591fad-3510-4d39-a99b-98bb5eb26077",
        "authorId" : "fd5eb1fb-f30a-4735-908c-944e87d99845",
        "body" : "Although I can't think of who would do it, it's conceivable that someone might want to enable completions for kubecfg only and not for all bash-completions. I'd have a slight preference for making this file a closure where everything that's used gets defined here, but I can understand if you really resist duplicating that function here. (But, in that case, why are you OK with duplicating `__contains_word` which is also defined elsewhere?)\n",
        "createdAt" : "2014-09-26T04:41:03Z",
        "updatedAt" : "2014-09-29T21:16:58Z",
        "lastEditedBy" : "fd5eb1fb-f30a-4735-908c-944e87d99845",
        "tags" : [
        ]
      },
      {
        "id" : "3811e932-30fd-4e15-86e7-0fd002ba4ad8",
        "parentId" : "eb591fad-3510-4d39-a99b-98bb5eb26077",
        "authorId" : "766f642e-1622-4803-803b-05ce306fc30e",
        "body" : "I don't see __contains_word in bash_completion   although it does seem like it belongs, since so many things use an equivalent function!  Everyone seems to be redefining it!\n\nI put in a really simple version.  It mostly works.  Not nearly as capable as if you have the real thing, obviously.\n",
        "createdAt" : "2014-09-26T16:00:19Z",
        "updatedAt" : "2014-09-29T21:16:58Z",
        "lastEditedBy" : "766f642e-1622-4803-803b-05ce306fc30e",
        "tags" : [
        ]
      },
      {
        "id" : "a8933bc4-7fa4-4762-938b-ac3d9469bd74",
        "parentId" : "eb591fad-3510-4d39-a99b-98bb5eb26077",
        "authorId" : "fd5eb1fb-f30a-4735-908c-944e87d99845",
        "body" : "Hmmm, I think you really convinced me not to ship that function here... :-(\n\nSorry for the churn.\n",
        "createdAt" : "2014-09-26T22:20:47Z",
        "updatedAt" : "2014-09-29T21:16:58Z",
        "lastEditedBy" : "fd5eb1fb-f30a-4735-908c-944e87d99845",
        "tags" : [
        ]
      }
    ],
    "commit" : "59e1c5c80a48a520b1ef9a71798f528134ad1fb0",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +135,139 @@    local command\n    local cur prev words cword\n    _get_comp_words_by_ref -n : cur prev words cword\n\n    if __contains_word \"$prev\" \"${opts[@]}\"; then"
  }
]