[
  {
    "id" : "2557ac50-a9ba-467e-8938-d0cf67527e9a",
    "prId" : 1984,
    "prUrl" : "https://github.com/typelevel/cats/pull/1984#pullrequestreview-72277284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c1066dc-c9aa-4317-a2cc-f18bebee768d",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "I don't actually know why this shouldn't be in cats-core. What is the problem exactly? `Foldable` is lawless to begin with.",
        "createdAt" : "2017-10-20T21:27:59Z",
        "updatedAt" : "2017-10-23T17:24:31Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "4579f6ea-e37c-4058-9b5a-ac54b6030ecb",
        "parentId" : "8c1066dc-c9aa-4317-a2cc-f18bebee768d",
        "authorId" : "240add12-1fe5-499a-918c-053b1f46b348",
        "body" : "AFAIK `Iterable`'s only method is `iterator` which isn't exactly referentially transparent, no?",
        "createdAt" : "2017-10-23T18:18:55Z",
        "updatedAt" : "2017-10-23T18:18:55Z",
        "lastEditedBy" : "240add12-1fe5-499a-918c-053b1f46b348",
        "tags" : [
        ]
      },
      {
        "id" : "b0677076-778c-4655-a73c-00c814ea6b42",
        "parentId" : "8c1066dc-c9aa-4317-a2cc-f18bebee768d",
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "But that is the only method you need to implement Foldable. And I don’t see why creating a new Iterator is not referentially transparent. It certainly is for all instances of Iterable is the standard library AFAIK.",
        "createdAt" : "2017-10-26T16:55:58Z",
        "updatedAt" : "2017-10-26T16:55:58Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "0b40861f-6d01-4ad0-9fa0-e15e12c0a1b1",
        "parentId" : "8c1066dc-c9aa-4317-a2cc-f18bebee768d",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "I don't know if all `Iterable` are actually `Foldable`, what about `Stream`? ",
        "createdAt" : "2017-10-26T17:00:52Z",
        "updatedAt" : "2017-10-26T17:01:07Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "ecbddcff-94fb-4aee-af0c-4ac1870df3aa",
        "parentId" : "8c1066dc-c9aa-4317-a2cc-f18bebee768d",
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "Doesn’t Stream have a Foldable instance in cats already? What prevents it from being Foldable?",
        "createdAt" : "2017-10-26T17:03:10Z",
        "updatedAt" : "2017-10-26T17:03:10Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "ff02765a-8e82-43d3-9705-1595fbcd23c4",
        "parentId" : "8c1066dc-c9aa-4317-a2cc-f18bebee768d",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "you are right, `Stream` is `Foldable`. Yeah, I don't see why we couldn't move `Foldable` of`Iterable` into core. ",
        "createdAt" : "2017-10-26T17:30:15Z",
        "updatedAt" : "2017-10-26T17:30:15Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6e85dd543cc21cc36323b25371237eab825751e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@  @export(Orphan)\n  implicit val exportIterableFoldable: Foldable[Iterable] =\n    new Foldable[Iterable] {\n      override def foldLeft[A, B](fa: Iterable[A], b: B)(f: (B, A) => B): B = fa.foldLeft(b)(f)\n"
  }
]