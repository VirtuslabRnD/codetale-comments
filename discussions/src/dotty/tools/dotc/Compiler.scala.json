[
  {
    "id" : "c0b8c095-425d-4020-9067-5e3ef9ee84d5",
    "prId" : 331,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f998f83-4bd2-45b0-a861-74561bcb9388",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Is this a proper solution or just a hack until #321 is properly fixed?\n",
        "createdAt" : "2015-01-24T18:07:24Z",
        "updatedAt" : "2015-01-28T18:04:47Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "07f140b1-3e75-4053-b6e8-09b6dd1684ec",
        "parentId" : "5f998f83-4bd2-45b0-a861-74561bcb9388",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Maybe in this particular case it helps, but in minimized case it does not:\n\n```\nclass ListDecorator[T >: Null <: AnyRef] {\n\n  def mapconserve(f: T => Int): Int = {\n    def loop(pending: T): Int = {\n        val head1 = f(pending)\n        loop(pending)\n      }\n    loop(null)\n  }\n}\n\n```\n\nFails even if tailrec is in its own group.\n",
        "createdAt" : "2015-01-26T12:06:25Z",
        "updatedAt" : "2015-01-28T18:04:47Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "70e55d26100199b99502705233786bbdc15c4c6b",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +49,53 @@      List(new TailRec), // TailRec needs to be in its own group for now.\n                         // Otherwise it produces -Ycheck incorrect code for\n                         // file core/Decorators.scala.\n      List(new PatternMatcher,\n           new ExplicitOuter,"
  },
  {
    "id" : "8fdf3281-9740-4404-9d68-3133c3ac244e",
    "prId" : 251,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "562c00a6-bb1c-42ad-8009-1cfd9f9da018",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Did we try to fuse with previous group ending in RestoreScopes?\n",
        "createdAt" : "2014-12-12T17:29:06Z",
        "updatedAt" : "2014-12-16T14:24:02Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c112037290a526c66bbb782a61bcd8a60730b4b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +65,69 @@           new Flatten,\n           new RestoreScopes),\n      List(/*new PrivateToStatic,*/ new CollectEntryPoints, new LabelDefs),\n      List(new GenBCode)\n    )"
  },
  {
    "id" : "ae028581-6d2e-4bcc-b166-5f4aa15f9306",
    "prId" : 122,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f61eb72f-cb51-447d-a1da-61df143c4eee",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "What was a reason to create one more group?\n",
        "createdAt" : "2014-04-14T15:37:59Z",
        "updatedAt" : "2014-04-15T10:49:58Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "77627252-3dca-4692-9f55-8666ead16002",
        "parentId" : "f61eb72f-cb51-447d-a1da-61df143c4eee",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "It's explained in class Nullarify:\n\n```\noverride def runsAfterGroupsOf: Set[String] = Set(\"splitter\")\n  // assumes idents and selects have symbols; interferes with splitter distribution\n  // that's why it's \"after group\".\n```\n",
        "createdAt" : "2014-04-14T15:54:54Z",
        "updatedAt" : "2014-04-15T10:49:58Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3adfd7f40708899aa033ea1e5c56d468ff9495c",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +26,30 @@           new LazyValTranformContext().transformer,\n           new Splitter),\n      List(new Nullarify,\n           new TypeTestsCasts,\n           new InterceptedMethods),"
  }
]