[
  {
    "id" : "16f12133-e0f4-4c97-91d6-b45ea245703c",
    "prId" : 1695,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1695#pullrequestreview-8183377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e869ba9-2a50-4413-9ef6-9dca3ce0ea9e",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I thought `SkolemType` is only used for existential types, but it seems not to be the case. Could you briefly explain a little bit the usage of `SkolemType`, or add a comment to `class SkolemType`?\n\n`RecThis` is also a `SingletonType`, I guess it can be safely ignored here.\n",
        "createdAt" : "2016-11-11T11:34:56Z",
        "updatedAt" : "2016-11-11T11:36:38Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "82e2ac52926846cebc1ec3a5b5aa4037eeecf93a",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +345,349 @@    case tp: ThisType => This(tp.cls)\n    case tp: SkolemType => singleton(tp.narrow)\n    case SuperType(qual, _) => singleton(qual)\n    case ConstantType(value) => Literal(value)\n  }"
  },
  {
    "id" : "2d2b07ad-9293-4e26-a883-e64b5ba1cf28",
    "prId" : 1188,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe4c7549-b74e-4725-930b-bbb119eb570d",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Hum, the signature of this method changes, but I see no call site change in this commit. That's suspicious ;)\n",
        "createdAt" : "2016-03-24T14:06:12Z",
        "updatedAt" : "2016-04-18T13:01:34Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "5399fbed6d33dca132ca27314f2eba414aea4415",
    "line" : null,
    "diffHunk" : "@@ -1,1 +363,367 @@   *  `length` arguments are given.\n   */\n  def newArray(elemTpe: Type, returnTpe: Type, pos: Position, dims: JavaSeqLiteral)(implicit ctx: Context): Tree = {\n    val elemClass = elemTpe.classSymbol\n    def newArr ="
  },
  {
    "id" : "ac794639-966d-47e2-bdc1-86d2be62c41e",
    "prId" : 493,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31c47e06-d670-48a2-8300-13247f37c70c",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Use ref(sym).appliedToNone? (Not a strong opinion on this).\n",
        "createdAt" : "2015-04-28T12:01:29Z",
        "updatedAt" : "2015-04-30T14:34:18Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d23e71a42de6713ceda4b28dfd2f1bb83d051304",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +250,254 @@      MethodType(Nil, defn.UnitType), coord = cond.pos)\n\n    val call = Apply(ref(sym), Nil)\n    val rhs = If(cond, Block(body, call), unitLiteral)\n    Block(List(DefDef(sym, rhs)), call)"
  },
  {
    "id" : "e1f90093-68ff-4d18-b1b8-4119411b8691",
    "prId" : 251,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b76d5985-32ce-4312-9e2c-a322d769eed6",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Good catch.\n",
        "createdAt" : "2014-12-12T17:29:36Z",
        "updatedAt" : "2014-12-16T14:24:02Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c112037290a526c66bbb782a61bcd8a60730b4b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +362,366 @@    val constr = DefDef(constrSym.asTerm, EmptyTree)\n    val clsdef = ClassDef(modcls, constr, body)\n    val valdef = ValDef(sym, New(modcls.typeRef).select(constrSym).appliedToNone)\n    Thicket(valdef, clsdef)\n  }"
  },
  {
    "id" : "aab3695a-5a01-4fbe-a720-8c68441bbc62",
    "prId" : 76,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb1d9a4e-9785-4024-8470-181cd6616424",
        "parentId" : null,
        "authorId" : "1f1241a4-206b-4204-be44-be9e433da151",
        "body" : "Can we make these available for untyped trees, too?\n",
        "createdAt" : "2014-03-16T17:05:54Z",
        "updatedAt" : "2014-03-16T17:05:54Z",
        "lastEditedBy" : "1f1241a4-206b-4204-be44-be9e433da151",
        "tags" : [
        ]
      }
    ],
    "commit" : "c208fe98d47b64b480d64a065861f9c115c9932e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +332,336 @@\n    def find[T](pred: (tpd.Tree) => Boolean): Option[tpd.Tree] =\n      shallowFold[Option[tpd.Tree]](None)((accum, tree) => if (pred(tree)) Some(tree) else accum)\n\n    def subst(from: List[Symbol], to: List[Symbol])(implicit ctx: Context): ThisTree ="
  }
]