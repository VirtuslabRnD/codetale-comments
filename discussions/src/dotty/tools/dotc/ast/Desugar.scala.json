[
  {
    "id" : "923d25ab-5425-496d-b291-6efe39c043ce",
    "prId" : 1536,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1536#pullrequestreview-1449981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5429f1bd-ef43-4979-a1d8-a22e3da4c63c",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "The `pos` for `Thicket` is synthesised via the overloaded `def pos`, this setting will be overridden.\n\nWhat about providing a `withDerivedPos` method for `Thicket`, instead of overriding `def pos`?\n",
        "createdAt" : "2016-09-24T22:49:52Z",
        "updatedAt" : "2016-09-25T10:47:22Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "c00f13fa-dfc3-4167-afe5-9fb4b7f2e849",
        "parentId" : "5429f1bd-ef43-4979-a1d8-a22e3da4c63c",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No, the withPos applies to the classDef here, not the thicket.\n",
        "createdAt" : "2016-09-25T10:36:04Z",
        "updatedAt" : "2016-09-25T10:47:22Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "61815256f4b80fade88b07c69b1dfad9954a024a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +506,510 @@      val cls = TypeDef(clsName, clsTmpl)\n        .withMods(mods.toTypeFlags & RetainedModuleClassFlags | ModuleClassCreationFlags)\n      Thicket(modul, classDef(cls).withPos(mdef.pos))\n    }\n  }"
  },
  {
    "id" : "8bd4a0c3-8cef-4e80-8f7a-8ddfd92dc76d",
    "prId" : 1241,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bbaab1a-7dbb-4287-a11f-526026ffe011",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "The comment above could be updated to note that we also need to have the class itself completed.\n",
        "createdAt" : "2016-04-29T12:42:46Z",
        "updatedAt" : "2016-04-29T12:42:46Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c7c738a148390ffb2072fc97a81646031fb49b2",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +45,49 @@     *  in apply/unapply methods.\n     */\n    override def ensureCompletions(implicit ctx: Context) =\n      if (!(ctx.owner is Package))\n        if (ctx.owner.isClass) {"
  },
  {
    "id" : "9112dd8d-1406-4f33-82fc-9516a76a28e6",
    "prId" : 928,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2efd527-ee7b-4103-9c46-a759bd055622",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "could `defn.ProductNType(n)` be used here?\n",
        "createdAt" : "2015-11-09T15:52:52Z",
        "updatedAt" : "2015-11-09T18:36:54Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "f3fc88de-f23d-401e-a96b-51dd4840378a",
        "parentId" : "e2efd527-ee7b-4103-9c46-a759bd055622",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No, because it would load the class. That's what caused the datarace after all.\n",
        "createdAt" : "2015-11-09T16:00:14Z",
        "updatedAt" : "2015-11-09T18:36:54Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "949c48e0f325afa29ebc70e94de17d525b26386e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +324,328 @@    def anyRef = ref(defn.AnyRefAlias.typeRef)\n    def productConstr(n: Int) = {\n      val tycon = scalaDot((tpnme.Product.toString + n).toTypeName)\n      val targs = constrVparamss.head map (_.tpt)\n      if (targs.isEmpty) tycon else AppliedTypeTree(tycon, targs)"
  },
  {
    "id" : "95e9a64f-3389-4a0f-b97c-e3d4f11cd6ff",
    "prId" : 887,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10f570ec-3fa7-4d86-b1bd-7f274957bdb4",
        "parentId" : null,
        "authorId" : "1f1241a4-206b-4204-be44-be9e433da151",
        "body" : "Probably need to report an error if `n > MaxTupleArity`, which might result from a SAM method type.\n",
        "createdAt" : "2015-10-31T02:52:23Z",
        "updatedAt" : "2015-10-31T02:52:23Z",
        "lastEditedBy" : "1f1241a4-206b-4204-be44-be9e433da151",
        "tags" : [
        ]
      },
      {
        "id" : "f40eb44c-8724-441b-88f9-b640a6b12043",
        "parentId" : "10f570ec-3fa7-4d86-b1bd-7f274957bdb4",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "@retronym We don't intend to keep MaxTupleArity for much longer anyway.\n",
        "createdAt" : "2015-10-31T09:21:53Z",
        "updatedAt" : "2015-10-31T09:21:53Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b80b179d6fbb92c8f6ff3616cec1f3aab5106799",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +569,573 @@  def makeCaseLambda(cases: List[CaseDef], nparams: Int = 1)(implicit ctx: Context) = {\n    val params = (1 to nparams).toList.map(makeSyntheticParameter(_))\n    val selector = makeTuple(params.map(p => Ident(p.name)))\n    Function(params, Match(selector, cases))\n  }"
  },
  {
    "id" : "05579570-52d2-4894-a5f0-0bfca9ab3378",
    "prId" : 834,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4c60d6b-f1e5-483f-bbec-5e7c74d99521",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I think our coding style is `} else if ...` without a line break after the `}`.\n",
        "createdAt" : "2015-10-21T16:43:20Z",
        "updatedAt" : "2015-10-22T10:23:13Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "d25ea516-ee50-4f0f-8bb2-5cbff852c192",
        "parentId" : "a4c60d6b-f1e5-483f-bbec-5e7c74d99521",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No I write newline } quite systematically now. Makes keywords align better.\n\nOn Wed, Oct 21, 2015 at 6:43 PM, Guillaume Martres <notifications@github.com\n\n> wrote:\n> \n> In src/dotty/tools/dotc/ast/Desugar.scala\n> https://github.com/lampepfl/dotty/pull/834#discussion_r42649286:\n> \n> > @@ -380,18 +380,22 @@ object desugar {\n> >      //     synthetic implicit C[Ts](p11: T11, ..., p1N: T1N) ... (pM1: TM1, ..., pMN: TMN): C[Ts] =\n> >      //       new C[Ts](p11, ..., p1N) ... (pM1, ..., pMN) =\n> >      val implicitWrappers =\n> > -      if (mods is Implicit) {\n> > -        if (ctx.owner is Package)\n> > -          ctx.error(\"implicit classes may not be toplevel\", cdef.pos)\n> > -        if (mods is Case)\n> > \n> > ## \\-          ctx.error(\"implicit classes may not case classes\", cdef.pos)\n> > -      if (!mods.is(Implicit))\n> > -        Nil\n> > -      else if (ctx.owner is Package) {\n> > -        ctx.error(\"implicit classes may not be toplevel\", cdef.pos)\n> > -        Nil\n> > -      }\n> > -      else if (mods is Case) {\n> \n> I think our coding style is } else if ... without a line break after the }\n> .\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/lampepfl/dotty/pull/834/files#r42649286.\n\n## \n\nMartin Odersky\nEPFL\n",
        "createdAt" : "2015-10-21T16:54:23Z",
        "updatedAt" : "2015-10-22T10:23:13Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "30e5f322a0fb9c4c43cbeb3231423ac95571a3a7",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +387,391 @@        Nil\n      }\n      else if (mods is Case) {\n        ctx.error(\"implicit classes may not be case classes\", cdef.pos)\n        Nil"
  },
  {
    "id" : "3537e014-09f7-4f31-b0b9-0e92d9fcdc45",
    "prId" : 436,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5f97c4a-57ea-4bbc-b504-a3cbc6ae430c",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Rename to SyntheticAccessor. When you set mods, its not an Or.\n",
        "createdAt" : "2015-03-28T18:42:15Z",
        "updatedAt" : "2015-04-02T14:30:29Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "6f73048e-d93b-49c4-bc70-f503e490e5b2",
        "parentId" : "d5f97c4a-57ea-4bbc-b504-a3cbc6ae430c",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "I'm not setting them, I'm using this value to mask previous mods.\n",
        "createdAt" : "2015-03-28T18:44:57Z",
        "updatedAt" : "2015-04-02T14:30:29Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "633817dc-11fe-4bee-b831-804a7a6ec8e9",
        "parentId" : "d5f97c4a-57ea-4bbc-b504-a3cbc6ae430c",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Ah, I misread. Consider the comment withdrawn.\n",
        "createdAt" : "2015-03-28T20:39:03Z",
        "updatedAt" : "2015-04-02T14:30:29Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5618d29e37ad50bd1b8c591ed50db63a6d7bc79",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +411,415 @@  }\n\n  val AccessOrSynthetic = AccessFlags | Synthetic\n\n  /** Expand"
  },
  {
    "id" : "9a119bb4-daff-48e6-b6e1-f53329823dc9",
    "prId" : 244,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb9e73d3-2d11-4121-9226-bbf8bf3f2a0a",
        "parentId" : null,
        "authorId" : "1f1241a4-206b-4204-be44-be9e433da151",
        "body" : "Was this changed intentionally from `Object` to `Any`? If so, why?\n",
        "createdAt" : "2014-11-26T11:15:32Z",
        "updatedAt" : "2014-11-26T11:15:32Z",
        "lastEditedBy" : "1f1241a4-206b-4204-be44-be9e433da151",
        "tags" : [
        ]
      },
      {
        "id" : "e643b09f-11ca-42ad-9b0e-fc3649fa32c0",
        "parentId" : "cb9e73d3-2d11-4121-9226-bbf8bf3f2a0a",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Yes that was intentional. It seems that Any is the more natural parent type for a purely structural type. \n",
        "createdAt" : "2014-11-26T11:34:29Z",
        "updatedAt" : "2014-11-26T11:34:29Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "9b15d01b-ad32-4012-ba75-1ac707e2acec",
        "parentId" : "cb9e73d3-2d11-4121-9226-bbf8bf3f2a0a",
        "authorId" : "1f1241a4-206b-4204-be44-be9e433da151",
        "body" : "Agreed. I remember this coming up as a rough edge between value classes and structural types:\n\n```\nscala> trait T extends Any { def t }\ndefined trait T\n\nscala> def foo(c: { def t} ) = c.t\nwarning: there was one feature warning; re-run with -feature for details\nfoo: (c: AnyRef{def t: Unit})Unit\n\nscala> def test(t: T) = foo(t)\n<console>:9: error: type mismatch;\n found   : t.type (with underlying type T)\n required: AnyRef{def t: Unit}\n       def test(t: T) = foo(t)\n                            ^\n```\n\nIt would be interesting to experiment with changing this in scalac and  running the community build to find out how compatible it is.\n",
        "createdAt" : "2014-11-26T11:59:22Z",
        "updatedAt" : "2014-11-26T13:29:56Z",
        "lastEditedBy" : "1f1241a4-206b-4204-be44-be9e433da151",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc319b002ff4bc82061250352f1568c612c70d72",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +866,870 @@      case tp: TypeRef if tp.symbol.isClass => tp        // monomorphic class type\n      case tp: TypeProxy => stripToCore(tp.underlying)\n      case _ => defn.AnyType\n    }\n    val parentCore = stripToCore(parent.tpe)"
  }
]