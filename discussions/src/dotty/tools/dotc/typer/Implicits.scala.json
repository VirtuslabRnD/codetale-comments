[
  {
    "id" : "b50fed6e-890f-4237-acaa-9ab9e1a3f8ea",
    "prId" : 1412,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5152109-2d72-4a66-8931-3b9750f87fd0",
        "parentId" : null,
        "authorId" : "7aa36552-f314-4217-a921-109d4a7a544d",
        "body" : "That's an interesting DSL! Does it cover the entire language, or it just contains a few most used utilities?\n",
        "createdAt" : "2016-07-25T18:30:25Z",
        "updatedAt" : "2016-07-25T18:30:25Z",
        "lastEditedBy" : "7aa36552-f314-4217-a921-109d4a7a544d",
        "tags" : [
        ]
      },
      {
        "id" : "a481c2ad-418a-4658-aad3-1db2d69b31d0",
        "parentId" : "c5152109-2d72-4a66-8931-3b9750f87fd0",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "It covers about 30 ops, maybe half of them construct syntax trees. See `ast.tpd#TreeOps` for where it  is defined.\n",
        "createdAt" : "2016-07-25T18:34:43Z",
        "updatedAt" : "2016-07-25T18:34:43Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "15fb8e160210e20ec9bec949f23e08ef045b1545",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +485,489 @@              .select(nme.apply)\n              .appliedToType(tp)\n              .appliedTo(clsOf(erasure(tp)))\n              .withPos(pos)\n        case _ =>"
  },
  {
    "id" : "e2f8d380-3875-4878-b328-7503f8de95c9",
    "prId" : 1246,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2fee555a-41b1-458f-ac26-36b94bbc040e",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "There was one test that failed under new rules: run/t2030.scala. It was moved to pos-scala2.\n",
        "createdAt" : "2016-05-04T11:16:50Z",
        "updatedAt" : "2016-05-23T16:54:36Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f3b895a6e97d10fcc3d44bb2be782db9cc6bc68",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +525,529 @@              case altResult: SearchSuccess =>\n                ctx.migrationWarning(\n                  s\"According to new implicit resolution rules, this will be ambiguous:\\n ${result.explanation}\",\n                  pos)\n                altResult"
  },
  {
    "id" : "0d3ca22c-8139-45be-b4ef-7f7d412aa486",
    "prId" : 1246,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31b5df4f-f4ef-47fe-9dba-96c37d97eea7",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "This greatly reduces the effectiveness of the cache since `seen` is almost never empty. I'm OK with merging this now because I have an old WIP branch where I try to fix this and other implicit issues that I will rebase and finish once I'm done with the incremental compilation stuff: https://github.com/dotty-staging/dotty/commits/fix/implicit-caching\n",
        "createdAt" : "2016-05-06T17:35:02Z",
        "updatedAt" : "2016-05-23T16:54:36Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f3b895a6e97d10fcc3d44bb2be782db9cc6bc68",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +364,368 @@      else implicitScopeCache get tp match {\n        case Some(is) => is\n        case None => computeIScope(cacheResult = seen.isEmpty)\n      }\n    }"
  }
]