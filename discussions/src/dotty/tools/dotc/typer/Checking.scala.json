[
  {
    "id" : "52a33e29-c909-444a-b652-f8489110426a",
    "prId" : 1186,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1547df1c-96e4-4976-bd81-4a1dc81d1993",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Maybe call these parameters `overrideCycleOK` or `cycleOKOverride` to avoid confusion with the class fields\n",
        "createdAt" : "2016-03-19T19:27:34Z",
        "updatedAt" : "2016-03-30T10:18:23Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "e33c40a7-b6a8-4879-9b35-9e30eb4dee15",
        "parentId" : "1547df1c-96e4-4976-bd81-4a1dc81d1993",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I picked the same names intentionally. I think there's also value in making clear they are the same.\n",
        "createdAt" : "2016-03-20T10:11:05Z",
        "updatedAt" : "2016-03-30T10:18:23Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f675ad9507089f8b912357fab86740653c1b8789",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +157,161 @@    }\n\n    private def apply(tp: Type, cycleOK: Boolean, nestedCycleOK: Boolean): Type = {\n      val savedCycleOK = this.cycleOK\n      val savedNestedCycleOK = this.nestedCycleOK"
  },
  {
    "id" : "bc696a77-46f7-49c1-82df-d16d0c9ebc01",
    "prId" : 1066,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "040d4c4f-d456-4bcc-a8e7-80741a291044",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Why not just call `ctx.errorOrMigrationWarning` here?\n",
        "createdAt" : "2016-02-08T19:57:20Z",
        "updatedAt" : "2016-02-19T16:28:39Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "6d60a5c8-330b-4cbf-9c51-c639ade7a387",
        "parentId" : "040d4c4f-d456-4bcc-a8e7-80741a291044",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Because we might end up not issuing the error if a parent is a TypeAlias.\n",
        "createdAt" : "2016-02-08T21:20:55Z",
        "updatedAt" : "2016-02-19T16:28:39Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f382a51a522673de75d154da2632108e7a1016c",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +334,338 @@            if (tp.symbol.is(Private) &&\n               !accessBoundary(sym).isContainedIn(tp.symbol.owner)) {\n              (d\"non-private $sym refers to private ${tp.symbol}\\n in its type signature ${sym.info}\", tree.pos) :: errors\n            } else foldOver(errors, tp)\n          if ((errors1 ne errors) && tp.info.isAlias) {"
  },
  {
    "id" : "9a37c0ce-a73d-4ba4-ad5f-e630ecef1ffb",
    "prId" : 1051,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a563e0d-a546-4959-a443-11a5a2ea6536",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "This documentation needs to be updated.\n",
        "createdAt" : "2016-02-08T20:40:44Z",
        "updatedAt" : "2016-02-09T10:16:41Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "1511cb49b990e14bd085a26bbcaa77cd827f151b",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +50,54 @@    checkBounds(args, poly.paramBounds, _.substParams(poly, _))\n\n  /** Check all AppliedTypeTree nodes in this tree for legal bounds */\n  val typeChecker = new TreeTraverser {\n    def traverse(tree: Tree)(implicit ctx: Context) = {"
  },
  {
    "id" : "2ec22402-9bca-40f4-a690-394402fcb56d",
    "prId" : 1051,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08e11cb8-1e7b-47ec-804a-f970250ea438",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "What about `AndTypeTree`, `OrTypeTree`, `RefinedTypeTree`, etc? Maybe we should add a case like:\n\n``` scala\ncase typ: TypTree =>\n  checkRealizable(typ.tpe, typ.pos)\n```\n\nI think that if we do this, then my proposition at https://github.com/lampepfl/dotty/pull/1051#issuecomment-181572666 becomes safe, because `Foo[T & U]` will be invalid.\n",
        "createdAt" : "2016-02-09T00:23:14Z",
        "updatedAt" : "2016-02-09T10:16:41Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "c5705ea8-1590-4603-986a-86db2d368df6",
        "parentId" : "08e11cb8-1e7b-47ec-804a-f970250ea438",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "That's not how things are done in DOT. We have one scheme to ensure soundness that we know works and a lot of others that we thought worked at some time, but didn't in the end. So we should stick to the one that works. I believe approximating realizability of other types is too strict and is also not necessary. \n",
        "createdAt" : "2016-02-09T08:40:20Z",
        "updatedAt" : "2016-02-09T10:16:41Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1511cb49b990e14bd085a26bbcaa77cd827f151b",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +65,69 @@        case SingletonTypeTree(ref) =>\n          checkRealizable(ref.tpe, ref.pos)\n        case _ =>\n      }\n      traverseChildren(tree)"
  },
  {
    "id" : "e072b19d-ef35-4f48-b0ac-aad59d246e75",
    "prId" : 668,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03ddb61d-270a-4c0a-908f-1e631178cf10",
        "parentId" : null,
        "authorId" : "1f1241a4-206b-4204-be44-be9e433da151",
        "body" : "Am I right in assuming that this is similar to `tp.narrow` in scalac?\n",
        "createdAt" : "2015-06-22T06:54:01Z",
        "updatedAt" : "2015-06-22T06:54:01Z",
        "lastEditedBy" : "1f1241a4-206b-4204-be44-be9e433da151",
        "tags" : [
        ]
      },
      {
        "id" : "868c9789-565e-4a2d-8518-98151094fb98",
        "parentId" : "03ddb61d-270a-4c0a-908f-1e631178cf10",
        "authorId" : "1f1241a4-206b-4204-be44-be9e433da151",
        "body" : "In those terms, this LGTM, although I must admit I wouldn't have been able to come up with this formulation myself.\n\n```\nscala> class LS[T] { self: LS[T] => }\ndefined class LS\n\nscala> val cls = symbolOf[LS[_]]\ncls: $r.intp.global.TypeSymbol = class LS\n\nscala> val tp = typeOf[LS[Any]]\ntp: $r.intp.global.Type = LS[Any]\n\nscala> val stp = tp.narrow\nstp: $r.intp.global.Type = <refinement>.type\n\nscala> val selfType = cls.selfType.asSeenFrom(stp, cls)\nselfType: $r.intp.global.Type = LS[Any]\n\nscala> stp <:< selfType\nres7: Boolean = true\n```\n\nvs\n\n```\nscala> class LS[T] { self: LS[T with String] => }\ndefined class LS\n\nscala> val tp = typeOf[LS[Any]]\ntp: $r.intp.global.Type = LS[Any]\n\nscala> val cls = symbolOf[LS[_]]\ncls: $r.intp.global.TypeSymbol = class LS\n\nscala> val selfType = cls.selfType.asSeenFrom(stp, cls)\nselfType: $r.intp.global.Type = LS[T with String]\n\nscala> stp <:< selfType\nres8: Boolean = false\n```\n",
        "createdAt" : "2015-06-22T07:01:38Z",
        "updatedAt" : "2015-06-22T07:01:47Z",
        "lastEditedBy" : "1f1241a4-206b-4204-be44-be9e433da151",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ec9c927941ab3155d0c5edacfe3a21c8c4b74ca",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +52,56 @@          // Create a synthetic singleton type instance, and check whether\n          // it conforms to the self type of the class as seen from that instance.\n          val stp = SkolemType(tp)\n          val selfType = tref.givenSelfType.asSeenFrom(stp, cls)\n          if (selfType.exists && !(stp <:< selfType))"
  },
  {
    "id" : "75c0724b-61f6-4d90-81b1-f7b7ba819825",
    "prId" : 47,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f1ced1a-b473-4daa-a4b7-342d3cba5a0c",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "does not define conflicting definitions?\n",
        "createdAt" : "2014-03-07T12:02:45Z",
        "updatedAt" : "2014-03-07T12:02:45Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "f05adb96-3567-4c24-a786-5dbfea871c57",
        "parentId" : "1f1ced1a-b473-4daa-a4b7-342d3cba5a0c",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "What do you mean?\n",
        "createdAt" : "2014-03-07T13:13:52Z",
        "updatedAt" : "2014-03-07T13:13:52Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "3eed267b-a2bc-4f1c-b47f-eeb191892953",
        "parentId" : "1f1ced1a-b473-4daa-a4b7-342d3cba5a0c",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "/*\\* Check that class does not define */\n\nIt seems that comment here isn't finished.\n\n/*\\* Check that class does not define conflicting definitions*/\n",
        "createdAt" : "2014-03-07T13:14:58Z",
        "updatedAt" : "2014-03-07T13:15:05Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6aa88d6dfe501a695183761c2b5f4bd201cdf2c0",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +107,111 @@  }\n\n  /** Check that class does not define */\n  override def checkNoDoubleDefs(cls: Symbol)(implicit ctx: Context): Unit = {\n    val seen = new mutable.HashMap[Name, List[Symbol]] {"
  },
  {
    "id" : "1ecd116a-b9dc-41c1-bb33-84ae6d07cfda",
    "prId" : 47,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98ffb98e-5508-48dc-8f86-34b73ea81d7b",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Just to make it clear, we don't want to revise allowing overloaded methods with default arguments?\nhttps://stackoverflow.com/questions/4652095/why-does-the-scala-compiler-disallow-overloaded-methods-with-default-arguments\n",
        "createdAt" : "2014-03-07T12:11:11Z",
        "updatedAt" : "2014-03-07T12:11:11Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "da8d8b95-f276-4de6-a286-3ec097da8194",
        "parentId" : "98ffb98e-5508-48dc-8f86-34b73ea81d7b",
        "authorId" : "7aa36552-f314-4217-a921-109d4a7a544d",
        "body" : "/cc @retronym\n",
        "createdAt" : "2014-03-07T12:16:08Z",
        "updatedAt" : "2014-03-07T12:16:08Z",
        "lastEditedBy" : "7aa36552-f314-4217-a921-109d4a7a544d",
        "tags" : [
        ]
      },
      {
        "id" : "73d3501e-87e2-413f-9c05-ca14fbe9a30b",
        "parentId" : "98ffb98e-5508-48dc-8f86-34b73ea81d7b",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Yes, but that's a separate issue. \n",
        "createdAt" : "2014-03-07T13:13:36Z",
        "updatedAt" : "2014-03-07T13:13:36Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "40a74b57-369b-484b-ac05-3637f782421d",
        "parentId" : "98ffb98e-5508-48dc-8f86-34b73ea81d7b",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "https://github.com/lampepfl/dotty/issues/48\n",
        "createdAt" : "2014-03-07T13:22:42Z",
        "updatedAt" : "2014-03-07T13:22:42Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6aa88d6dfe501a695183761c2b5f4bd201cdf2c0",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +127,131 @@          else doubleDefError(decl, other)\n        }\n        if ((decl is HasDefaultParams) && (other is HasDefaultParams)) {\n          ctx.error(i\"two or more overloaded variants of $decl have default arguments\")\n          decl resetFlag HasDefaultParams"
  }
]