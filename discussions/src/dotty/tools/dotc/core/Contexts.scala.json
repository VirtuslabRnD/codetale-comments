[
  {
    "id" : "02f1ecf0-19c5-4cbe-9b07-aa2664d88c63",
    "prId" : 1270,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed6e49c1-3b19-4f62-936d-fb1a30c70bce",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Does this happen in practice?\n",
        "createdAt" : "2016-05-20T15:25:09Z",
        "updatedAt" : "2016-05-23T13:54:05Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "28a0018c-dd37-4934-93e5-a96a243f749b",
        "parentId" : "ed6e49c1-3b19-4f62-936d-fb1a30c70bce",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Yes, there are tests that break (the tests don't start a full compiler).\n",
        "createdAt" : "2016-05-20T17:07:40Z",
        "updatedAt" : "2016-05-23T13:54:05Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c996e42224eedaf3b097fea0c6175eba7d3cbe63",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +249,253 @@\n    final def withPhaseNoLater(phase: Phase) =\n      if (phase.exists && ctx.phase.id > phase.id) withPhase(phase) else ctx\n\n    /** If -Ydebug is on, the top of the stack trace where this context"
  },
  {
    "id" : "6ad52382-1607-4e2e-970d-1c5771fa83a4",
    "prId" : 1052,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4986ce49-273c-46f1-88aa-17d44bac1e72",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "That's a useful helper method. I think there are several occurrences of `setTyperState(ctx.typerState.withReporter(...))` which would profit from that method. Best to do it now.\n",
        "createdAt" : "2016-02-04T17:36:06Z",
        "updatedAt" : "2016-02-04T23:00:57Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7eba7f7a6778cc0ddfb2ce81dee64dd4fa23490a",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +423,427 @@    def setCompilerCallback(callback: CompilerCallback): this.type = { this.compilerCallback = callback; this }\n    def setTyperState(typerState: TyperState): this.type = { this.typerState = typerState; this }\n    def setReporter(reporter: Reporter): this.type = setTyperState(typerState.withReporter(reporter))\n    def setNewTyperState: this.type = setTyperState(typerState.fresh(isCommittable = true))\n    def setExploreTyperState: this.type = setTyperState(typerState.fresh(isCommittable = false))"
  },
  {
    "id" : "2de6c14e-cb44-4899-be45-70a6e402417f",
    "prId" : 271,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d34cf9ef-6f72-4c49-b834-9f04b5ea1248",
        "parentId" : null,
        "authorId" : "1f1241a4-206b-4204-be44-be9e433da151",
        "body" : "This encaspulates the ability to assign a new map, but leaves the door open for anyone to mutate `GADTMap#bounds`.\n\nI'd prefer to see something like:\n\n``` scala\nclass GADTMap {\n  private var bounds = new SimpleMap\n  def narrowBounds(sym: Symbol, bounds: TypeBounds): Unit = {\n    bounds = bounds.updated(symbol, bounds)\n  }\n  def apply(sym: Symbol): TypeBounds = bounds(sym)\n}\n```\n",
        "createdAt" : "2014-12-16T05:39:05Z",
        "updatedAt" : "2014-12-16T17:03:11Z",
        "lastEditedBy" : "1f1241a4-206b-4204-be44-be9e433da151",
        "tags" : [
        ]
      }
    ],
    "commit" : "009a1e69e7bdc3df1b085d2271042607c83b1e82",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +150,154 @@    private var _gadt: GADTMap = _\n    protected def gadt_=(gadt: GADTMap) = _gadt = gadt\n    def gadt: GADTMap = _gadt\n\n    /** A map in which more contextual properties can be stored */"
  },
  {
    "id" : "006354e7-2f04-46b5-b9c9-98e8b1378375",
    "prId" : 89,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c886a2d7-0b66-4ea9-8d4f-5d41131740ad",
        "parentId" : null,
        "authorId" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "body" : "Why would you want to override this? IIUC the superclass implementation does the same.\n",
        "createdAt" : "2014-03-21T16:05:53Z",
        "updatedAt" : "2014-03-24T16:53:19Z",
        "lastEditedBy" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "tags" : [
        ]
      },
      {
        "id" : "231b2b78-73b0-4c57-bdab-f0c9358de1e3",
        "parentId" : "c886a2d7-0b66-4ea9-8d4f-5d41131740ad",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Good catch. The second withPhase(phase: Phase) in class FreshContext can be deleted.\n",
        "createdAt" : "2014-03-21T17:46:01Z",
        "updatedAt" : "2014-03-24T16:53:19Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "567b91b0-cc43-4b5d-8f4a-524f911f1df8",
        "parentId" : "c886a2d7-0b66-4ea9-8d4f-5d41131740ad",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "This override is required, as otherwise returning type will be Context, and not FreshContext.\n",
        "createdAt" : "2014-03-24T17:18:01Z",
        "updatedAt" : "2014-03-24T17:18:01Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "a5b708de-769b-4d71-bf6a-e1992262b1fd",
        "parentId" : "c886a2d7-0b66-4ea9-8d4f-5d41131740ad",
        "authorId" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "body" : "Indeed. But that means, and I just realize that, that `withPhase` mutates the underlying object depending on its runtime type. @odersky I think this is a very bad idea. The methods should have a different name. (IMHO, the `with` methods of `FreshContext` should rather be called `set`)\n",
        "createdAt" : "2014-03-25T07:15:54Z",
        "updatedAt" : "2014-03-25T07:15:54Z",
        "lastEditedBy" : "f186a0ec-8fc4-4e94-87e9-c629d1b38b60",
        "tags" : [
        ]
      }
    ],
    "commit" : "0393aedcdcdff83f5e158181a295dd1067dcff11",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +331,335 @@\n    override def withPhase(pid: PhaseId): this.type = withPeriod(Period(runId, pid))\n    override def withPhase(phase: Phase): this.type = withPhase(phase.id)\n\n    def withSetting[T](setting: Setting[T], value: T): this.type ="
  }
]