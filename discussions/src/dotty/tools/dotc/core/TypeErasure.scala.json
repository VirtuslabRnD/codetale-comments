[
  {
    "id" : "ea918221-269a-4a21-bea7-a2da8a600bfc",
    "prId" : 1412,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff0065a0-5dc4-4d2f-9302-e536b2f97800",
        "parentId" : null,
        "authorId" : "7aa36552-f314-4217-a921-109d4a7a544d",
        "body" : "Why these newlines?\n",
        "createdAt" : "2016-07-25T18:37:08Z",
        "updatedAt" : "2016-07-25T18:37:08Z",
        "lastEditedBy" : "7aa36552-f314-4217-a921-109d4a7a544d",
        "tags" : [
        ]
      }
    ],
    "commit" : "15fb8e160210e20ec9bec949f23e08ef045b1545",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +511,515 @@  }\n\n\n}"
  },
  {
    "id" : "8ef22caf-4bf9-4831-9d02-6cec3c345e18",
    "prId" : 411,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e603066-92a5-488d-a16a-4f6b228d05d2",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "need to update comment before class to include ErasedValueType\n",
        "createdAt" : "2015-03-28T21:44:26Z",
        "updatedAt" : "2015-05-01T12:04:42Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d012f93635184dc8aa6325b715a133861c74ab08",
    "line" : null,
    "diffHunk" : "@@ -1,1 +37,41 @@   */\n  def isErasedType(tp: Type)(implicit ctx: Context): Boolean = tp match {\n    case _: ErasedValueType =>\n      true\n    case tp: TypeRef =>"
  },
  {
    "id" : "1c31c867-0e33-4926-9c11-7a5aff3934a5",
    "prId" : 411,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "310904b7-e773-4339-847a-3d29d76033ca",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "I'd say it needs documentation. And I'd like it to include why it's a `GroundType`, not a `ProxyType`. \n",
        "createdAt" : "2015-03-28T21:49:45Z",
        "updatedAt" : "2015-05-01T12:04:42Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d012f93635184dc8aa6325b715a133861c74ab08",
    "line" : null,
    "diffHunk" : "@@ -1,1 +72,76 @@   */\n  abstract case class ErasedValueType(cls: ClassSymbol, erasedUnderlying: Type)\n  extends CachedGroundType with ValueType {\n    override def computeHash = doHash(cls, erasedUnderlying)\n  }"
  },
  {
    "id" : "6c2aff62-2d30-4232-a5bf-282bceb4a602",
    "prId" : 411,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4c1b66f-8b4c-480b-85d5-e30f2b5224c5",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "It's better to include more details on the actual difference \n",
        "createdAt" : "2015-03-28T21:51:18Z",
        "updatedAt" : "2015-05-01T12:04:42Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "005d380e-feee-4816-b8ba-a2dba8aab9da",
        "parentId" : "f4c1b66f-8b4c-480b-85d5-e30f2b5224c5",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "This was just moved from the documentation of `erasureFn`, I don't know enough about java erasure to improve this comment myself :).\n",
        "createdAt" : "2015-03-28T22:04:44Z",
        "updatedAt" : "2015-05-01T12:04:42Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "d012f93635184dc8aa6325b715a133861c74ab08",
    "line" : 175,
    "diffHunk" : "@@ -1,1 +253,257 @@\n/**\n *  @param isJava        Arguments should be treated the way Java does it\n *  @param semiEraseVCs  If true, value classes are semi-erased to ErasedValueType\n *                       (they will be fully erased in [[ElimErasedValueType]])."
  },
  {
    "id" : "d1a85f2e-e8c8-42b5-b370-84d9ea248779",
    "prId" : 411,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d71b50a-0123-4bdc-b9f7-cae7b6ca5ba5",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "why are you testing for constructor here?\n",
        "createdAt" : "2015-03-28T21:55:44Z",
        "updatedAt" : "2015-05-01T12:04:42Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "eacf18ef-21f6-4533-8c9d-b1f36bc3f464",
        "parentId" : "0d71b50a-0123-4bdc-b9f7-cae7b6ca5ba5",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "The return type of the constructor of a value class should not be erased: `new Meter(4)` should have type `Meter`. The return type of any other method can be safely erased, Do you think this is worth a comment?\n",
        "createdAt" : "2015-03-28T21:58:35Z",
        "updatedAt" : "2015-05-01T12:04:42Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "10a59f66-1d7b-4fc8-be33-662bae0924cb",
        "parentId" : "0d71b50a-0123-4bdc-b9f7-cae7b6ca5ba5",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Yes, I would say it is worth a comment, that also tells should it be `Meter` or `EVT(Meter)`\n",
        "createdAt" : "2015-03-28T22:36:31Z",
        "updatedAt" : "2015-05-01T12:04:42Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "5104c325-ffc4-40a0-9fe9-1e7d7b1dae2d",
        "parentId" : "0d71b50a-0123-4bdc-b9f7-cae7b6ca5ba5",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "After thinking more about it, I do not see why `new Meter(4)` is special here. There are numerous ways to instantiate a class(eg use `clone` on existing one), and from type system point of view `new` is not different from them. You also say later that you need to leave un-erased `TypeTrees` for other poly-methods, not only `New`.\nCan you elaborate on this?\n",
        "createdAt" : "2015-03-29T13:03:12Z",
        "updatedAt" : "2015-05-01T12:04:42Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "88d0fcf3-3e08-4311-9cb4-eec36596cd80",
        "parentId" : "0d71b50a-0123-4bdc-b9f7-cae7b6ca5ba5",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Value classes are unboxed when there is a type mismatch that can be solved by `adaptToType`: if `new Meter(5)` has type `Meter` but the expected type is `ErasedValueType(Meter, Int)` then `adaptToType` will unbox `new Meter(5)`. This is the correct behavior and will not happen if the type of `new Meter(5)` is `ErasedValueType(Meter, Int)` (which would be wrong because the constructor returns an object of type Meter). `clone()` is not a member of `AnyVal` so I don't need to handle it separately, but let me know if you can think of some other case I'd need to handle.\n",
        "createdAt" : "2015-03-29T13:37:12Z",
        "updatedAt" : "2015-05-01T12:04:42Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "5821e40d-89f7-4692-ac9c-eda68df6bdb1",
        "parentId" : "0d71b50a-0123-4bdc-b9f7-cae7b6ca5ba5",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Ok, resolved. But please include this comment in source code, or a short comment here, and a full one in markdown doc that you were proposing.\n",
        "createdAt" : "2015-03-29T13:42:03Z",
        "updatedAt" : "2015-05-01T12:04:42Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d012f93635184dc8aa6325b715a133861c74ab08",
    "line" : null,
    "diffHunk" : "@@ -1,1 +403,407 @@      // correctly (see SIP-15 and [[Erasure.Boxing.adaptToType]]), so the return type of a\n      // constructor method should not be semi-erased.\n      else if (isConstructor && isDerivedValueClass(sym)) eraseNormalClassRef(tp)\n      else this(tp)\n    case RefinedType(parent, _) if !(parent isRef defn.ArrayClass) =>"
  }
]