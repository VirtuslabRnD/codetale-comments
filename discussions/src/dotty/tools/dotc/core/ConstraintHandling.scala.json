[
  {
    "id" : "6171bfb6-5439-4cf4-8740-0328c95de02c",
    "prId" : 1592,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1592#pullrequestreview-4092618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0342e063-e7ff-4900-ac33-440bb7989e9e",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "This should be moved before the sentence you added\n",
        "createdAt" : "2016-10-13T14:59:57Z",
        "updatedAt" : "2016-10-13T16:39:53Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d531ec78173b9524acd3b58485f89099dbe6991",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +165,169 @@   *  of the parameter in a refinement somewhere in the bound are removed. Also\n   *  wildcard types in bounds are approximated by their upper or lower bounds.\n   *  (Such occurrences can arise for F-bounded types).\n   *  The constraint is left unchanged.\n   *  @return the instantiating type"
  },
  {
    "id" : "2c54d5ec-8950-46f4-b1ed-93f931b7da07",
    "prId" : 1592,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1592#pullrequestreview-4116969",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d376854b-5839-4d32-a68a-1300788f562a",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I think you mean bounds.hi here, or the code is wrong, in any case I'd love to see some tests for all these cases :).\n",
        "createdAt" : "2016-10-13T16:51:15Z",
        "updatedAt" : "2016-10-13T16:51:15Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "35122de6-e3ac-4a7b-a238-d5f92dd2b701",
        "parentId" : "d376854b-5839-4d32-a68a-1300788f562a",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Ah nevermind, I misread the condition.\n",
        "createdAt" : "2016-10-13T16:53:10Z",
        "updatedAt" : "2016-10-13T16:53:10Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d531ec78173b9524acd3b58485f89099dbe6991",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +185,189 @@            //         if variance > 0, pick the minimal safe type: bounds.hi\n            //           (i.e. the whole bounds range is under the type)\n            //         if variance == 0, pick bounds.lo anyway (this is arbitrary but in line with\n            //           the principle that we pick the smaller type when in doubt).\n            //  If fromBelow is false, we maximize the type overall and reverse the bounds"
  },
  {
    "id" : "6eff48b7-37ba-47b5-9c76-e9ead89e5044",
    "prId" : 1058,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae2c974f-c40b-4d6c-ab8c-bb74d580d2f6",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "What about narrowing a bit less by using something like `prune(constraint.nonParamBounds(bound).lo)` instead of `defn.NothingType`?\n",
        "createdAt" : "2016-02-05T16:57:25Z",
        "updatedAt" : "2016-02-08T19:38:12Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "8ab56595-92c6-4c5c-b783-cbbee13fe3fa",
        "parentId" : "ae2c974f-c40b-4d6c-ab8c-bb74d580d2f6",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "That would not add anything. By recording the isLess we get the bounds anyway.\n",
        "createdAt" : "2016-02-05T16:59:28Z",
        "updatedAt" : "2016-02-08T19:38:12Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d3f6d02141bb362c4c1e383cb21a476383b5c60",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +284,288 @@        case bound: PolyParam if constraint contains bound =>\n          if (!addParamBound(bound)) NoType\n          else if (fromBelow) defn.NothingType\n          else defn.AnyType\n        case _ =>"
  },
  {
    "id" : "0953ce19-74a1-451c-bd1e-a5efdffe0cd7",
    "prId" : 331,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f78a266-0519-49d3-ab4e-454a3889c14e",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Could the difference between `Constraint` and `ConstraintHandler` be written down explicitly somewhere? I don't understand why this line and the next are not part of `Constraint#addLess`.\n",
        "createdAt" : "2015-01-25T00:20:50Z",
        "updatedAt" : "2015-01-28T18:04:47Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "3bd21a59-0ac1-4bbd-a043-d2a94f745ecb",
        "parentId" : "0f78a266-0519-49d3-ab4e-454a3889c14e",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Will add a comment to ConstrainHandler.\n",
        "createdAt" : "2015-01-28T15:50:00Z",
        "updatedAt" : "2015-01-28T18:04:47Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "70e55d26100199b99502705233786bbdc15c4c6b",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +81,85 @@        constr.println(i\"adding $description down1 = $down1, up2 = $up2\")\n        constraint = constraint.addLess(p1, p2)\n        down1.forall(addOneBound(_, hi2, isUpper = true)) &&\n        up2.forall(addOneBound(_, lo1, isUpper = false))\n      }"
  }
]