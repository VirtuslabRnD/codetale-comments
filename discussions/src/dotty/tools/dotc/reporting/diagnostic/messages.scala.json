[
  {
    "id" : "ab07145d-bc9c-4daa-893b-33aaa88daef1",
    "prId" : 1667,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1667#pullrequestreview-7355771",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61bec55b-5132-4de3-8e74-24cb997b79cb",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "typo: \"into the several groups\" -> \"into several groups\"\n",
        "createdAt" : "2016-11-06T20:36:33Z",
        "updatedAt" : "2016-11-06T20:36:33Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "ecd572ed-33df-4181-88be-276534ab2bad",
        "parentId" : "61bec55b-5132-4de3-8e74-24cb997b79cb",
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "Fixed in: bffefe96f1c3c550e42d745af879755d1f99bc37\n",
        "createdAt" : "2016-11-06T20:46:40Z",
        "updatedAt" : "2016-11-06T20:46:41Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      },
      {
        "id" : "d69fe600-1038-4dc4-9109-7565dae370cb",
        "parentId" : "61bec55b-5132-4de3-8e74-24cb997b79cb",
        "authorId" : "7f7a09e4-5a78-4329-bc6d-1484f66cf9bb",
        "body" : "Oh, snap! Sorry for this typo guys.\n",
        "createdAt" : "2016-11-07T04:36:19Z",
        "updatedAt" : "2016-11-07T04:36:19Z",
        "lastEditedBy" : "7f7a09e4-5a78-4329-bc6d-1484f66cf9bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4a8f48930f1d890f237487b4ed34045b9043197",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +760,764 @@    val msg = \"illegal literal\"\n    val explanation =\n      hl\"\"\"|Available literals can be divided into the several groups:\n           | - Integer literals: 0, 21, 0xFFFFFFFF, -42L\n           | - Floating Point Literals: 0.0, 1e30f, 3.14159f, 1.0e-100, .1"
  },
  {
    "id" : "551b6fd1-639d-48c1-8e9c-2e908e3973d5",
    "prId" : 1635,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1635#pullrequestreview-6205139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e988ed91-11c1-49ce-82ed-cede7b1fedca",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "This can also happen in:\n\n``` scala\ncase class Foo(i: Int*)\n\n(null: Foo) match {\n  case Foo(i: _) => // ...\n}\n```\n\nAnd providing `func` with arguments could also be done like: `func(1, 2, 3)` right? Basically I think your explanation is good, but try to explain what the `_*` construct does :)\n",
        "createdAt" : "2016-10-28T08:39:48Z",
        "updatedAt" : "2016-11-03T03:38:23Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      }
    ],
    "commit" : "968bee3b189533e5242e4b1a36a499fbb45a97b8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +754,758 @@           |${\"square(ints: _*)          // res1: List[Int] = List(4, 9, 16)\"}\n           |\"\"\".stripMargin\n  }\n}"
  },
  {
    "id" : "72845c14-0f11-4a5e-ac90-b6c81081d372",
    "prId" : 1633,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1633#pullrequestreview-6232739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e40f4916-3dcd-49e1-960f-68687dcf4aa5",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "So I have a couple of comments/questions on this explanation:\n- Does it make sense for all cases?\n- Could you show the user their code and the correct way to rewrite it? E.g: `def foo: int = { ... }` => `def foo = { ... }`\n- There are some weird things when it comes to the language like `\"Because of Scala's stronger type\"` - wat? Have a look through it and I'm sure you'll find places to correct :)\n-  The line breaking is increasing, first line is something like 60 chars, the second 65 and third 90+, try to even it out.\n- The line with \"Here we explicitly\" is too long (84 chars). We want a line to be max 80 chars (the standard terminal width).\n",
        "createdAt" : "2016-10-28T08:23:43Z",
        "updatedAt" : "2016-10-31T12:43:33Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      },
      {
        "id" : "f095a12e-ff74-4547-acb3-01c14fbb32d4",
        "parentId" : "e40f4916-3dcd-49e1-960f-68687dcf4aa5",
        "authorId" : "16d3c138-391b-4afd-bdb4-caf824ac5050",
        "body" : "Hi @felixmulder thanks for your comments. I'm going through your cases and explain to you what I thought right?\n\n1 - Actually, to be honest, the only piece of code I could reproduce this error was this:\n\n```\ndef foo: this = \"bar\"\n```\n\nand it goes to the `Parsers` class.\n\nIs there any other case I could reproduce it, so I can make sure nothing was left behind?\n\n2 - Get the user code, you mean I could use the `Tree` to show the user wrong code and give the correct one? In fact I could pass the `Tree` inside the class and use it. Don't know how to play with `Tree`s but I will figure out.\n\n3 - yeah, that one was difficult to write. I mean, Scala has a strong type system, which is good, everything has a type where it could be inferred by the compiler or not(in case the user provided it).\n\n4 & 5 - No problem :)\n",
        "createdAt" : "2016-10-28T12:28:54Z",
        "updatedAt" : "2016-10-31T12:43:33Z",
        "lastEditedBy" : "16d3c138-391b-4afd-bdb4-caf824ac5050",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c0e48fe8cd0b44bfcfbd3705c4f7fcbe448a5be",
    "line" : null,
    "diffHunk" : "@@ -1,1 +715,719 @@           |\"\"\".stripMargin\n    }\n  }\n}"
  },
  {
    "id" : "7df5f3f4-b2dd-4726-8f20-4379135d8819",
    "prId" : 1623,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1623#pullrequestreview-5566401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c314112-e9e7-4ac8-9508-df8a0ad2efbd",
        "parentId" : null,
        "authorId" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "body" : "Example message for too many type args\n\n```\n-- [E018] Syntax Error: test.scala -------------------------------------------------------------------------------------\n16 |  var bad = List[Int, String]\n   |            ^^^^^^^^^^^^^^^^^\n   |Too many type arguments for ([scala$collection$immutable$List$apply$$A] => (xs: A*)scala.collection.immutable.List[A])(List.apply)\n   |expected: [A]\n   |actual:   [Int, String]\n\nExplanation\n===========\nYou have supplied too many type parameters\n\nFor example List takes a single type parameter (List[A])\n  If you need to hold more types in a list then you need to combine them\n  into another data type that can contain the number of types you need,\n  In this example one solution would be to use a Tuple:\n  val tuple2: Tuple2[Int, String = (1, \"one)\n    List[(Int, String)] = List(tuple2)\n```\n",
        "createdAt" : "2016-10-25T00:42:27Z",
        "updatedAt" : "2016-10-25T21:37:13Z",
        "lastEditedBy" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "tags" : [
        ]
      },
      {
        "id" : "f95a62c0-09b1-4f88-8c36-34a8a6def9e5",
        "parentId" : "1c314112-e9e7-4ac8-9508-df8a0ad2efbd",
        "authorId" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "body" : "Example message for not enough type args\n\n```\n-- [E018] Syntax Error: test.scala -------------------------------------------------------------------------------------\n17 |  var bad2 = Map[(Int, String)]\n   |             ^^^^^^^^^^^^^^^^^^\n   |Not enough type arguments for ([scala$collection$generic$GenMapFactory$apply$$A, scala$collection$generic$GenMapFactory$apply$$B] =>\n   |  (elems: (A, B)*)scala.collection.immutable.Map[A, B]\n   |)(Map.apply)\n   |expected: [A, B]\n   |actual:   [Tuple2[Int, String]]\n\nExplanation\n===========\nYou have not supplied enough type parameters\n  If you specify one type parameter then you need to specify every type parameter.\n```\n",
        "createdAt" : "2016-10-25T00:43:25Z",
        "updatedAt" : "2016-10-25T21:37:13Z",
        "lastEditedBy" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "tags" : [
        ]
      }
    ],
    "commit" : "aaae563d6de83e5f60ef763d384d1b4f76f9c1dd",
    "line" : null,
    "diffHunk" : "@@ -1,1 +678,682 @@           |$fixedVarInAlternative\"\"\".stripMargin\n    }\n  }\n}"
  },
  {
    "id" : "0a06a66f-c84f-4a46-96d0-63e6f69a20bf",
    "prId" : 1623,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1623#pullrequestreview-5634948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "899f9ac2-c88b-4ea2-a37b-79a9ab29e8c9",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "I would wrap this in `NoColor` so that it's not highlighted in the `msg`.\n",
        "createdAt" : "2016-10-25T12:06:14Z",
        "updatedAt" : "2016-10-25T21:37:13Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      }
    ],
    "commit" : "aaae563d6de83e5f60ef763d384d1b4f76f9c1dd",
    "line" : null,
    "diffHunk" : "@@ -1,1 +612,616 @@    val expectedCount = expectedArgs.length\n    val actualCount = actual.length\n    val msgPrefix = if (actualCount > expectedCount) \"Too many\" else \"Not enough\"\n\n    //TODO add def simpleParamName to TypeParamInfo"
  },
  {
    "id" : "24684367-2d2a-48d1-b979-372c6a1ff025",
    "prId" : 1623,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1623#pullrequestreview-5738673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48a8db91-f8d6-4d63-9d15-154c33593dd9",
        "parentId" : null,
        "authorId" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "body" : "I would like to make another PR to add def prettyName (or something like it) to a few types.  I will leave it as a follow up unless you prefer it as part of this PR.\n\nWith these changes\n\n```\nobject Test {\n  var bad = List[Int, String]\n  case class Bar[D, E](baz: D, qux: E)\n  var bad3: Bar[Int] = null\n}\n```\n\nresults in\n\n```\n-- [E019] Syntax Error: test.scala -------------------------------------------------------------------------------------\n16 |  var bad = List[Int, String]\n   |            ^^^^^^^^^^^^^^^^^\n   |            Too many type arguments for scala.collection.immutable.List.apply[A]\n   |            expected: [A]\n   |            actual:   [Int, String]\n\nExplanation\n===========\nYou have supplied too many type parameters\n\nFor example List takes a single type parameter (List[A])\nIf you need to hold more types in a list then you need to combine them\ninto another data type that can contain the number of types you need,\nIn this example one solution would be to use a Tuple:\n\nval tuple2: (Int, String) = (1, \"one\")\nval list: List[(Int, String)] = List(tuple2)\n\n-- [E019] Syntax Error: test.scala -------------------------------------------------------------------------------------\n19 |  var bad3: Bar[Int] = null\n   |            ^^^^^^^^\n   |            Not enough type arguments for Test.Bar[D, E]\n   |            expected: [D, E]\n   |            actual:   [Int]\n\nExplanation\n===========\nYou have not supplied enough type parameters\nIf you specify one type parameter then you need to specify every type parameter.\n```\n",
        "createdAt" : "2016-10-25T20:40:19Z",
        "updatedAt" : "2016-10-25T21:37:13Z",
        "lastEditedBy" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "tags" : [
        ]
      }
    ],
    "commit" : "aaae563d6de83e5f60ef763d384d1b4f76f9c1dd",
    "line" : null,
    "diffHunk" : "@@ -1,1 +622,626 @@      case NoSymbol => fntpe.show\n      case symbol   => symbol.showFullName\n    }\n\n    val msg ="
  },
  {
    "id" : "cbd4f77f-003f-485c-a0e2-bc4794a40579",
    "prId" : 1623,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1623#pullrequestreview-5746855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5267811-2047-4109-82a0-04bd5354d98e",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "This was supposed to have a `//TODO` right?\n",
        "createdAt" : "2016-10-25T21:00:53Z",
        "updatedAt" : "2016-10-25T21:37:13Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      },
      {
        "id" : "b01e093d-0d97-4a3b-8f08-6456282e7394",
        "parentId" : "a5267811-2047-4109-82a0-04bd5354d98e",
        "authorId" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "body" : "I added it now.\n",
        "createdAt" : "2016-10-25T21:23:36Z",
        "updatedAt" : "2016-10-25T21:37:13Z",
        "lastEditedBy" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "tags" : [
        ]
      }
    ],
    "commit" : "aaae563d6de83e5f60ef763d384d1b4f76f9c1dd",
    "line" : null,
    "diffHunk" : "@@ -1,1 +615,619 @@\n    //TODO add def simpleParamName to TypeParamInfo\n    val expectedArgString = fntpe.widen.typeParams.map(_.paramName.unexpandedName.show).mkString(\"[\", \", \", \"]\")\n\n    val actualArgString = actual.map(_.show).mkString(\"[\", \", \", \"]\")"
  },
  {
    "id" : "550d6072-3f4f-4209-be8b-025e1249b28e",
    "prId" : 1621,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1621#pullrequestreview-5645521",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d1a240b-1a4e-4d86-aad9-7f1ff6b2c64a",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "I feel that this explanation still needs some improvement - I feel that it is not clear where you should put the `@usecase` \"thingy\". With the current explanation somebody might mistake it for an annotation - or am I in the wrong here?\n\nAs I mentioned before - `@usecase` is added to the _docstring_ of the method. As such perhaps something roughly like:\n\n``` scala\nval explanation = {\n  val noUsecase =\n    \"def map[B, That](f: A => B)(implicit bf: CanBuildFrom[List[A], B, That]): That\"\n\n  val usecase =\n    \"\"\"|/** Map from List[A] => List[B]\n       |  *\n       |  * @usecase def map[B](f: A => B): List[B]\n       |  */\n       |def map[B, That](f: A => B)(implicit bf: CanBuildFrom[List[A], B, That]): That\"\"\".stripMargin\n\n  hl\"\"\"|Usecases are only supported for ${\"def\"}s. They exist because with Scala's\n       |advanced type-system, we sometimes end up with seemingly scary signatures.\n       |The usage of these methods, however, needs not be - for instance the `map`\n       |function\n       |\n       |${\"List(1, 2, 3).map(2 * _) // res: List(2, 4, 6)\"}\n       |\n       |is easy to understand and use - but has a rather bulky signature:\n       |\n       |$noUsecase\n       |\n       |to mitigate this and ease the usage of such functions we have the ${\"@usecase\"}\n       |annotation for docstrings. Which can be used like this:\n       |\n       |$usecase\n       |\n       |When creating the docs, the signature of the method is substituted by the\n       |usecase and the compiler makes sure that it is valid. Because of this, you're\n       |only allowed to use ${\"def\"}s when defining usecases.\"\"\".stripMargin\n}\n```\n\ncould be the basis for your explanation :)\n",
        "createdAt" : "2016-10-25T12:55:37Z",
        "updatedAt" : "2016-10-25T16:34:37Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      },
      {
        "id" : "e8febef6-6c28-44c8-9564-048da2ed3964",
        "parentId" : "6d1a240b-1a4e-4d86-aad9-7f1ff6b2c64a",
        "authorId" : "16d3c138-391b-4afd-bdb4-caf824ac5050",
        "body" : "Well done again :) Thank you!\n",
        "createdAt" : "2016-10-25T13:13:41Z",
        "updatedAt" : "2016-10-25T16:34:37Z",
        "lastEditedBy" : "16d3c138-391b-4afd-bdb4-caf824ac5050",
        "tags" : [
        ]
      }
    ],
    "commit" : "97b0af746ac3f2eb2fe7078b5aa5d596439fbfb5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +579,583 @@           |\n           |Because of this, you must use ${\"def\"} when defining ${\"@usecase\"}.\"\"\".stripMargin\n    }\n  }\n"
  },
  {
    "id" : "6280bb7e-84d4-4d2c-ba8e-f8b4d0be54bc",
    "prId" : 1618,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1618#pullrequestreview-5287172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2031039-0779-4600-a39d-5b90fa168686",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "Great job generalizing this error!\n\nFor the `explanation` I would inline the values `codeUnboundInBlock`, `codeBoundInBlock`, `codeUnboundVal` and `codeVar`, which would get the error message down from 55 lines to roughly 30.\n",
        "createdAt" : "2016-10-21T07:59:38Z",
        "updatedAt" : "2016-10-22T06:38:21Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      },
      {
        "id" : "0d1c9c54-4311-4b8d-b453-0cac751a2845",
        "parentId" : "c2031039-0779-4600-a39d-5b90fa168686",
        "authorId" : "5b25ce77-32e1-4f84-9065-a5f70ec890f5",
        "body" : "Yes that makes sense, the PR has been updated.\n",
        "createdAt" : "2016-10-21T16:17:05Z",
        "updatedAt" : "2016-10-22T06:38:21Z",
        "lastEditedBy" : "5b25ce77-32e1-4f84-9065-a5f70ec890f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf80147465dd0d7b1de47eb2f980380624b008db",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +482,486 @@        |but an uninitialized var definition\n        \"\"\".stripMargin\n  }\n}"
  },
  {
    "id" : "e7e0fbd6-5ea8-4186-b712-24d6e6d38bd3",
    "prId" : 1616,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1616#pullrequestreview-5213579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6385932e-ec3d-4392-9949-c1fcc4f1f2a1",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "So first off, you're correctly stating that if a trait method does not have a return type it needs to be clarified. But why is this? It's an abstract definition; we need to know what it's type is when we implement it somewhere else.\n\nI also have a different nitpick, so the error messages obey a flag called `-pagewidth X`, where `X` is the max number of columns that should be printed in the terminal. As such, I would suggest that you split line 408 to be no more than 80 characters (i.e. newline after ``area``).\n\nGood job otherwise, and thanks for cleaning up the trailing whitespace :heart:\n",
        "createdAt" : "2016-10-20T07:56:21Z",
        "updatedAt" : "2016-10-23T14:00:43Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      },
      {
        "id" : "b40a6635-5e39-41d8-9638-d43dadc638b0",
        "parentId" : "6385932e-ec3d-4392-9949-c1fcc4f1f2a1",
        "authorId" : "6d82e607-db5c-4831-90e8-3ddbce70eb76",
        "body" : "Thanks for the comments. How does this read?\n\n```\nAn abstract declaration must have a return type. For example:\n        |\n        |trait Shape {\n        |  def area: Double // abstract declaration returning a ${\"Double\"}\n        |}\n```\n",
        "createdAt" : "2016-10-21T00:18:23Z",
        "updatedAt" : "2016-10-23T14:00:43Z",
        "lastEditedBy" : "6d82e607-db5c-4831-90e8-3ddbce70eb76",
        "tags" : [
        ]
      },
      {
        "id" : "59aa469a-073f-4a93-a205-760d21d3b831",
        "parentId" : "6385932e-ec3d-4392-9949-c1fcc4f1f2a1",
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "Yes, that looks fine. Make the change and this is approved for merge :)\n",
        "createdAt" : "2016-10-21T08:01:46Z",
        "updatedAt" : "2016-10-23T14:00:43Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8595caee80d8f2015ec791bb9cc8d6e7e27802b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +511,515 @@        |  def area: Double // abstract declaration returning a ${\"Double\"}\n        |}\"\"\".stripMargin\n  }\n\n}"
  },
  {
    "id" : "5e84f217-20e2-44d7-a056-34b9461b2b71",
    "prId" : 1615,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1615#pullrequestreview-5214741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5668fe62-5819-4422-841a-23542bf5343f",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "@liufengyun has been working on modifiers with positions, and I'm thinking maybe we could enhance this further to say make the following recommendation:\n\n```\nThis happens when you accidentally specify the same modifier twice:\n\nprivate private lazy val x = ...\n\ninstead of:\n\nprivate lazy val x = ...\n```\n\nWhere this would be the user's code without the duplicate modifier. What do you think @liufengyun - can this be done with the new modifier objects?\n",
        "createdAt" : "2016-10-21T08:11:57Z",
        "updatedAt" : "2016-10-21T17:59:55Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac24603b7c04739d2ea2e2441e3b1f76dc2c9281",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +422,426 @@           |$code2\n           |\n           |\"\"\".stripMargin\n  }\n"
  },
  {
    "id" : "75ea9d0a-f0f3-4b30-b42d-81428c1c1045",
    "prId" : 1611,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1611#pullrequestreview-4943796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "984e4fd3-c3d1-4ca2-9994-929a5b18cd51",
        "parentId" : null,
        "authorId" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "body" : "This is duplicated from Desugar.scala.  Is it preferred to duplicate it here to keep the coupling looser or should I instead add more parameters to the case class and pass along explicitely what I need, name, impl, constr0?\n",
        "createdAt" : "2016-10-19T01:58:22Z",
        "updatedAt" : "2016-10-19T19:25:57Z",
        "lastEditedBy" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "tags" : [
        ]
      },
      {
        "id" : "ccdddefb-fd7d-4994-a390-75a76903bb7c",
        "parentId" : "984e4fd3-c3d1-4ca2-9994-929a5b18cd51",
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "Good question, I think there's a risk that more people will need to print the class def and as such perhaps we should factor this out into a method call that takes the `cdef` - a small bit of duplication here is fine in order for it to be easy to use for new contributors IMHO.\n",
        "createdAt" : "2016-10-19T07:42:09Z",
        "updatedAt" : "2016-10-19T19:25:57Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      },
      {
        "id" : "b70497d2-d2e8-4eec-9e72-d5ab1de56272",
        "parentId" : "984e4fd3-c3d1-4ca2-9994-929a5b18cd51",
        "authorId" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "body" : "Now that the explanation body has been simplified there isn't really much here worth extracting.\n",
        "createdAt" : "2016-10-19T19:28:00Z",
        "updatedAt" : "2016-10-19T19:28:00Z",
        "lastEditedBy" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a310ac672e79c0a561e80c33f4616a43d7bd5d9",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +332,336 @@\n    val explanation = {\n      val TypeDef(name, impl @ Template(constr0, parents, self, _)) = cdef\n      val exampleArgs = constr0.vparamss(0).map(_.withMods(Modifiers()).show).mkString(\", \")\n      def defHasBody[T] = impl.body.exists(!_.isEmpty)"
  },
  {
    "id" : "f85a050b-d05c-448a-9408-c0f5f7e231d3",
    "prId" : 1611,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1611#pullrequestreview-4928017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31c98f5a-9ef0-4fb8-9966-37b3a4cdba4a",
        "parentId" : null,
        "authorId" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "body" : "Example output:\n\n```\n-- [E010] Syntax Error: test.scala -------------------------------------------------------------------------------------\n2 |implicit class Foo(n: Int)\n  |^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |An implicit class may not be top-level\n\nExplanation\n===========\nThere may not be any method, member or object in scope with the same name as the\nimplicit class and a case class automatically gets a companion object with the same name\ncreated by the compiler which would cause a naming conflict if it were allowed.\n\nFor a full list of restrictions on implicit classes visit\nhttp://docs.scala-lang.org/overviews/core/implicit-classes.html\n\nTo resolve the conflict declare Foo inside of an object then import the class\nfrom the object at the use site if needed, for example:\n\nobject Implicits {\n  implicit class Foo(val n: Int)\n}\n\nimport Implicits.Foo\n```\n\n```\n-- [E010] Syntax Error: test.scala -------------------------------------------------------------------------------------\n4 |implicit class Foo(bar: Int, baz: String) {\n  |^\n  |An implicit class may not be top-level\n5 |  def baz = bar.toString\n6 |\n7 |  def qux = baz.take(5)\n8 |}\n\nExplanation\n===========\nThere may not be any method, member or object in scope with the same name as the\nimplicit class and a case class automatically gets a companion object with the same name\ncreated by the compiler which would cause a naming conflict if it were allowed.\n\nFor a full list of restrictions on implicit classes visit\nhttp://docs.scala-lang.org/overviews/core/implicit-classes.html\n\nTo resolve the conflict declare Foo inside of an object then import the class\nfrom the object at the use site if needed, for example:\n\nobject Implicits {\n  implicit class Foo(val bar: Int, val baz: String) {\n    def baz = bar.toString\n\n    def qux = baz.take(5)\n  }\n}\n\nimport Implicits.Foo\n```\n",
        "createdAt" : "2016-10-19T02:45:00Z",
        "updatedAt" : "2016-10-19T19:25:57Z",
        "lastEditedBy" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "tags" : [
        ]
      },
      {
        "id" : "0a5b605f-15bd-46b7-8fbc-bb1c95a00ce5",
        "parentId" : "31c98f5a-9ef0-4fb8-9966-37b3a4cdba4a",
        "authorId" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "body" : "Updated error on def with body to prevent overly long error explanation:\n\n```\n-- [E010] Syntax Error: test.scala -------------------------------------------------------------------------------------\n4 |implicit class Foo(bar: Int, baz: String) {\n  |^\n  |An implicit class may not be top-level\n5 |  def baz = bar.toString\n6 |\n7 |  def qux = baz.take(5)\n8 |}\n\nExplanation\n===========\nThere may not be any method, member or object in scope with the same name as the\nimplicit class and a case class automatically gets a companion object with the same name\ncreated by the compiler which would cause a naming conflict if it were allowed.\n\nFor a full list of restrictions on implicit classes visit\n  http://docs.scala-lang.org/overviews/core/implicit-classes.html\n\nTo resolve the conflict declare Foo inside of an object then import the class\nfrom the object at the use site if needed, for example:\n\nobject Implicits {\n  implicit class Foo(val bar: Int, val baz: String){\n ...\n }\n}\n\nimport Implicits.Foo\n```\n",
        "createdAt" : "2016-10-19T18:01:25Z",
        "updatedAt" : "2016-10-19T19:25:57Z",
        "lastEditedBy" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "tags" : [
        ]
      },
      {
        "id" : "6374a39c-7397-41fd-a447-2ee9894dbc69",
        "parentId" : "31c98f5a-9ef0-4fb8-9966-37b3a4cdba4a",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I think it would be nice to make it more explicit that the `import Implicits.Foo` is a at the use site, for example by writing:\n\n``` scala\nobject Implicits {\n  implicit class Foo(val bar: Int, val baz: String){\n ...\n }\n}\n\n...\n\n// At the use site:\nimport Implicits.Foo\n```\n",
        "createdAt" : "2016-10-19T18:04:29Z",
        "updatedAt" : "2016-10-19T19:25:57Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a310ac672e79c0a561e80c33f4616a43d7bd5d9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +352,356 @@           |import Implicits.${cdef.name}\"\"\".stripMargin\n    }\n  }\n\n  case class ImplicitCaseClass(cdef: untpd.TypeDef)(implicit ctx: Context)"
  },
  {
    "id" : "7b339daf-a71a-4853-9ca8-5f94a5678cb9",
    "prId" : 1611,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1611#pullrequestreview-4796307",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "375f3fc9-bf80-4255-b136-18cd86ffe3a5",
        "parentId" : null,
        "authorId" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "body" : "```\n-- [E011] Syntax Error: test.scala -------------------------------------------------------------------------------------\n14 |  implicit case class Foo(bar: Int, baz: String)\n   |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |  A case class may not be defined as implicit\n\nExplanation\n===========\nimplicit classes may not be case classes. Instead use a plain class:\n  example: implicit class Foo...\n\nFor a full list of restrictions on implicit classes visit\nhttp://docs.scala-lang.org/overviews/core/implicit-classes.html\n```\n",
        "createdAt" : "2016-10-19T02:49:33Z",
        "updatedAt" : "2016-10-19T19:25:57Z",
        "lastEditedBy" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a310ac672e79c0a561e80c33f4616a43d7bd5d9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +365,369 @@           |\n           |\"\"\".stripMargin + implicitClassRestrictionsText\n  }\n\n  case class ObjectMayNotHaveSelfType(mdef: untpd.ModuleDef)(implicit ctx: Context)"
  },
  {
    "id" : "e1373132-f0f1-4e1f-a58d-de1a785fa524",
    "prId" : 1611,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1611#pullrequestreview-4796440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f14630a-e302-42c1-bb36-455fe012e033",
        "parentId" : null,
        "authorId" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "body" : "```\n-- [E012] Syntax Error: test.scala -------------------------------------------------------------------------------------\n13 |  self: Foo =>\n   |  ^^^^^^^^^\n   |  objects must not have a self type\n\nExplanation\n===========\nobjects must not have a self type:\n\nConsider these alternative solutions:\n  - Create a trait or a class instead of an object\n  - Let the object extend a trait containing the self type:\n      example: object Test extends Foo\n```\n",
        "createdAt" : "2016-10-19T02:51:28Z",
        "updatedAt" : "2016-10-19T19:25:57Z",
        "lastEditedBy" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a310ac672e79c0a561e80c33f4616a43d7bd5d9",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +383,387 @@           |      example: object $name extends ${selfTpt.show}\"\"\".stripMargin\n    }\n  }\n\n  case class TupleTooLong(ts: List[untpd.Tree])(implicit ctx: Context)"
  },
  {
    "id" : "5ae713b8-0a57-4e00-b4b0-1f649538f21c",
    "prId" : 1611,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1611#pullrequestreview-4796501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b813fcf-84ab-4e42-bc3f-d273a4662647",
        "parentId" : null,
        "authorId" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "body" : "```\n-- [E013] Syntax Error: test.scala -------------------------------------------------------------------------------------\n24 |  val largeTuple = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                   A tuple cannot have more than 22 members\n\nExplanation\n===========\nThis restriction will be removed in the future.\nCurrently it is possible to use nested tuples when more than 22 are needed, for example:\n\n  ((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)(23))\n```\n",
        "createdAt" : "2016-10-19T02:52:29Z",
        "updatedAt" : "2016-10-19T19:25:57Z",
        "lastEditedBy" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a310ac672e79c0a561e80c33f4616a43d7bd5d9",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +400,404 @@           |  ((${nestedRepresentation}))\"\"\".stripMargin\n    }\n  }\n}"
  },
  {
    "id" : "cdb38806-5ea8-4d29-b91a-0be7b8da4d3e",
    "prId" : 1611,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1611#pullrequestreview-4944167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "194a4854-1c90-4bac-b0f4-a306633ed2ca",
        "parentId" : null,
        "authorId" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "body" : "```\n-- [E010] Syntax Error: test.scala -------------------------------------------------------------------------------------\n4 |implicit class Foo(bar: Int, baz: String) {\n  |^\n  |An implicit class may not be top-level\n5 |  def baz = bar.toString\n6 |\n7 |  def qux = baz.take(5)\n8 |}\n\nExplanation\n===========\nThere may not be any method, member or object in scope with the same name as the\nimplicit class and a case class automatically gets a companion object with the same name\ncreated by the compiler which would cause a naming conflict if it were allowed.\n\nFor a full list of restrictions on implicit classes visit\n  http://docs.scala-lang.org/overviews/core/implicit-classes.html\n\nTo resolve the conflict declare Foo inside of an object then import the class\nfrom the object at the use site if needed, for example:\n\nobject Implicits {\n  implicit class Foo(val bar: Int, val baz: String){\n ...\n }\n}\n\n// At the use site:\nimport Implicits.Foo\n```\n",
        "createdAt" : "2016-10-19T19:30:12Z",
        "updatedAt" : "2016-10-19T19:30:12Z",
        "lastEditedBy" : "d5511a84-165f-4bfa-85ce-b7c872b2f880",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a310ac672e79c0a561e80c33f4616a43d7bd5d9",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +351,355 @@           |// At the use site:\n           |import Implicits.${cdef.name}\"\"\".stripMargin\n    }\n  }\n"
  }
]