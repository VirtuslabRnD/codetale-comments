[
  {
    "id" : "92d48368-307d-433d-a4e2-77b34ad34692",
    "prId" : 1244,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7047225-07c9-49d5-957a-f9a722fcee98",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "```\ncase tp: TypeProxy =>\n  traverse(tp.underlying)\n```\n\ninstead of all the following cases?\n",
        "createdAt" : "2016-05-27T09:26:26Z",
        "updatedAt" : "2016-05-28T20:23:52Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "30d20410-7fdd-4ca0-a630-debe01efc26b",
        "parentId" : "c7047225-07c9-49d5-957a-f9a722fcee98",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "No, that would be incorrect. A `TypeBounds` is a `TypeProxy` whose `underlying` is the upper bound, but as the example in the documentation of this object shows, we need to record both the upper and lower bounds, `TypeTraverser#traverseChildren` will do that for us.\n",
        "createdAt" : "2016-05-28T02:08:03Z",
        "updatedAt" : "2016-05-28T20:23:52Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "1e5c6e91-1bda-4720-b7a5-6e9f8d5ec55e",
        "parentId" : "c7047225-07c9-49d5-957a-f9a722fcee98",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "If the intended behaviour is special treatment of `TypeBounds` amoung all the  `TypeProxy` classes than let's make it explicit. At the moment it's implicitly hidden inside default case.\n\n``` scala\n\ncase tp: TypeBounds => \n  traverse(tp.hi); \n  traverse(tp.lo);\ncase tp: TypeProxy =>\n  traverse(tp.underlying)\n```\n",
        "createdAt" : "2016-05-28T07:34:57Z",
        "updatedAt" : "2016-05-28T20:23:52Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "3eb37c21-7e3c-4c20-add1-24eaa334b9c3",
        "parentId" : "c7047225-07c9-49d5-957a-f9a722fcee98",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I also had to redefine `SuperType` and `RefinedType`, I'm not convinced that copy-pasting behavior is better than relying on the default case, but I'll do the change anyway\n",
        "createdAt" : "2016-05-28T19:36:33Z",
        "updatedAt" : "2016-05-28T20:23:52Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "70cbfdaa-20ba-4118-ba88-57014b04fe20",
        "parentId" : "c7047225-07c9-49d5-957a-f9a722fcee98",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I'm reverting that change and going back to the previous version, it turns out that adding a case on all `TypeProxy` is dangerous because a `RefinedThis` is a `TypeProxy` and going to its underlying values results in infinite loops. I could add a special case for that but then we'll have even more special cases than the original version, even though the original version has some behavior which is implicit, it's at least consistent with `NamedPartsAccumulator`\n",
        "createdAt" : "2016-05-28T20:19:19Z",
        "updatedAt" : "2016-05-28T20:26:10Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c865c5664bb699283d8f573f78359ce3b7f74e6",
    "line" : 252,
    "diffHunk" : "@@ -1,1 +250,254 @@            traverse(tp.prefix)\n          }\n        case tp: ThisType =>\n          traverse(tp.underlying)\n        case tp: ConstantType =>"
  },
  {
    "id" : "cea2fe24-1672-4a6a-9173-0489210bde7f",
    "prId" : 1244,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f92c608-d51a-495f-bc1b-448b614b9277",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "this predicate can be checked by inspecting `ctx.phases` in `def run`\n",
        "createdAt" : "2016-05-27T09:28:25Z",
        "updatedAt" : "2016-05-28T20:23:52Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c865c5664bb699283d8f573f78359ce3b7f74e6",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +38,42 @@  override def phaseName: String = \"sbt-deps\"\n\n  // This phase should be run directly after `Frontend`, if it is run after\n  // `PostTyper`, some dependencies will be lost because trees get simplified.\n  // See the scripted test `constants` for an example where this matters."
  }
]