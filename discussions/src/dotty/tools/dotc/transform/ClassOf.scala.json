[
  {
    "id" : "68f56f2c-0b34-44cd-9f57-200281ac6339",
    "prId" : 677,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ce2403f-0d18-4d9f-80e7-b9df948af9ae",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "If you write `Literal(Constant(TypeErasure.erasure(tp, semiEraseVCs = false)))` here, you should be able to remove the special case for value classes above.\n",
        "createdAt" : "2015-06-21T21:34:12Z",
        "updatedAt" : "2015-06-22T11:53:46Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "0c4a5dff-7ebe-4030-8129-b9873c3b6b51",
        "parentId" : "6ce2403f-0d18-4d9f-80e7-b9df948af9ae",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Do we actually currently have a single place that uses `semiEraseVCs = false`? \n\nIf we do not, I'd prefer to leave as is, as this code is simple and easy to comprehend. Instead I'd better remove `semiEraseVCs` flag from erasure, as it makes it more complicated. \n",
        "createdAt" : "2015-06-21T21:55:52Z",
        "updatedAt" : "2015-06-22T11:53:46Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "b6ca8a3a-285b-4187-8901-c2746fc2c318",
        "parentId" : "6ce2403f-0d18-4d9f-80e7-b9df948af9ae",
        "authorId" : "16f853ec-70c8-423e-8111-3cbd675c9428",
        "body" : ":+1: \n",
        "createdAt" : "2015-06-21T21:59:10Z",
        "updatedAt" : "2015-06-22T11:53:46Z",
        "lastEditedBy" : "16f853ec-70c8-423e-8111-3cbd675c9428",
        "tags" : [
        ]
      },
      {
        "id" : "655ca86b-58a1-41aa-bb0a-cbe095241415",
        "parentId" : "6ce2403f-0d18-4d9f-80e7-b9df948af9ae",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Yes, we do: https://github.com/lampepfl/dotty/blob/master/src/dotty/tools/dotc/transform/Erasure.scala#L274\n\nI don't think that `semiEraseVCs` is more confusing than a special case.\n",
        "createdAt" : "2015-06-21T22:00:44Z",
        "updatedAt" : "2015-06-22T11:53:46Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "5e12ffdf-a030-4964-ad97-fdbb972d765f",
        "parentId" : "6ce2403f-0d18-4d9f-80e7-b9df948af9ae",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "(It would probably help if `semiEraseVCs` was documented in `TypeErasure#erasure`, currently it's only documented for the class `TypeErasure`: https://github.com/lampepfl/dotty/blob/master/src/dotty/tools/dotc/core/TypeErasure.scala#L260-L262)\n",
        "createdAt" : "2015-06-21T22:02:41Z",
        "updatedAt" : "2015-06-22T11:53:46Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "83102ce9-ea21-46ed-b078-3237c3eab4b7",
        "parentId" : "6ce2403f-0d18-4d9f-80e7-b9df948af9ae",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "`ErasedValueType` is internal affairs of erasure. It get's eliminated &etc, it is very, very special. Constants created here shouldn't be eliminated\\changed by other phases. And In backend I'll need to generate a bytecode representation of constant of this type. Backend does not know what `Constant(Literal(ErasedValueType))` is. And shouldn't.\n\nI'd better have `ErasedValueType` contained and not leak into other phases without a good reason. Loosely coupled systems are better ones.\n",
        "createdAt" : "2015-06-21T22:10:28Z",
        "updatedAt" : "2015-06-22T11:53:46Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "3d0c23ef-56c3-4810-b342-bfb949ba5a62",
        "parentId" : "6ce2403f-0d18-4d9f-80e7-b9df948af9ae",
        "authorId" : "16f853ec-70c8-423e-8111-3cbd675c9428",
        "body" : "This doesn't work. The output is as follows:\n\n``` scala\nprintln(classOf[Unit]) // class scala.runtime.BoxedUnit instead of void\nprintln(classOf[Boolean]) // class java.lang.Boolean instead of boolean\nprintln(classOf[Byte]) // class java.lang.Byte instead of byte\nprintln(classOf[Short]) // class java.lang.Short instead of short\nprintln(classOf[Char]) // class java.lang.Character instead of char\nprintln(classOf[Int]) // class java.lang.Integer instead of int\nprintln(classOf[Long]) // class java.lang.Long instead of long\nprintln(classOf[Float]) // class java.lang.Float instead of float\nprintln(classOf[Double]) // class java.lang.Double instead of double\n```\n",
        "createdAt" : "2015-06-21T22:11:45Z",
        "updatedAt" : "2015-06-22T11:53:46Z",
        "lastEditedBy" : "16f853ec-70c8-423e-8111-3cbd675c9428",
        "tags" : [
        ]
      },
      {
        "id" : "71a72b31-56d0-4c2e-b447-fff0f4024e11",
        "parentId" : "6ce2403f-0d18-4d9f-80e7-b9df948af9ae",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "@DarkDimius : So what you're saying is that `semiEraseVCs = false` should be the default, I guess we could do that yeah, it just involves adding `semiEraseVCs = true` in a lot of places in `Erasure` and `TypeErasure`, because most of the time when you erase a type you want to semi-erase it.\n",
        "createdAt" : "2015-06-21T22:13:48Z",
        "updatedAt" : "2015-06-22T11:53:46Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "d1f70b88-ffe1-497d-b5a3-7a332946a42c",
        "parentId" : "6ce2403f-0d18-4d9f-80e7-b9df948af9ae",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "@alexander-myltsev : I didn't say that you should remove the special cases for primitive classes, but the special case for value classes: `if (ValueClasses.isDerivedValueClass(claz)) { ...}`\n",
        "createdAt" : "2015-06-21T22:15:02Z",
        "updatedAt" : "2015-06-22T11:53:46Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "c28fd1d9-8ff9-44ba-8cba-aa4e80e9c0c0",
        "parentId" : "6ce2403f-0d18-4d9f-80e7-b9df948af9ae",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "@smarter I am not speaking about erasure. I am speaking about this phase. This phase should for a `classOf[Meter]` generate a tree that is either `Literal(Constant(ClassInfo(Meter))` or `Literal(Constant(TypeRef(Meter))`, but not `Literal(Constant(ErasedValueType(Meter))`. The last one is not expected to reach backend and is not guaranteed to be handled by it in any reasonable manner.\n",
        "createdAt" : "2015-06-21T22:18:38Z",
        "updatedAt" : "2015-06-22T11:53:46Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "6abbac28-b430-4cc3-8131-adda0d97b2de",
        "parentId" : "6ce2403f-0d18-4d9f-80e7-b9df948af9ae",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "@DarkDimius: I agree. But this phase uses `TypeErasure.erasure` where the default is `semiEraseVCs = true`, and what I was saying is that I agree that it makes sense for the default to be `semiEraseVCs = false` so that any phase can use `TypeErasure.erasure` without worrying about semi-erasure.\n",
        "createdAt" : "2015-06-21T22:20:17Z",
        "updatedAt" : "2015-06-22T11:53:46Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "12caa2fd4c6774604704d09d0ba7932f9aca674e",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +47,51 @@          case defn.DoubleClass  => TYPE(defn.BoxedDoubleModule)\n          case defn.UnitClass    => TYPE(defn.BoxedVoidModule)\n          case _                 => Literal(Constant(TypeErasure.erasure(tp)))\n        }\n      }"
  },
  {
    "id" : "c75a7b34-a3df-40d2-a127-b6e95a5f376a",
    "prId" : 677,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "279c3f91-a7cb-4043-9201-b519e176917d",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "This is not really important, but in dotty we usually don't write fully qualified import names, instead we usually write `import core._` then `import Contexts._, Symbols._`, etc. See `ExpandSAMs` or `VCInline` for example.\n",
        "createdAt" : "2015-06-21T21:47:32Z",
        "updatedAt" : "2015-06-22T11:53:46Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "12caa2fd4c6774604704d09d0ba7932f9aca674e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +9,13 @@import core.TypeErasure\nimport TreeTransforms.{MiniPhaseTransform, TransformerInfo, TreeTransform}\n\n/** Performs rewritings as follows for `classOf` calls:\n * classOf[CustomValueClass] ~> CustomValueClass class"
  },
  {
    "id" : "a231fd60-e23a-4dd9-8fb1-4c7e288423c0",
    "prId" : 677,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63138592-2ab8-43bf-9c12-74801bce571d",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "There should be a comment documenting this phase before this line. See other phases like `VCInline` or `Getters` for examples of comments that document phases.\n",
        "createdAt" : "2015-06-21T21:51:15Z",
        "updatedAt" : "2015-06-22T11:53:46Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "12caa2fd4c6774604704d09d0ba7932f9aca674e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +15,19 @@ * classOf[AnyOtherClass]    ~> erasure(AnyOtherClass)\n */\nclass ClassOf extends MiniPhaseTransform {\n  import tpd._\n"
  }
]