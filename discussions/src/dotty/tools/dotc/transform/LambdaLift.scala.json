[
  {
    "id" : "055bf980-9c24-4ca7-a6d7-4b422c447c2d",
    "prId" : 1133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5bec309-13cb-405b-bc50-0775c6abb10c",
        "parentId" : null,
        "authorId" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "body" : "Could we come up with a more descriptive name than `free`? `storedCapturesOf`?\n",
        "createdAt" : "2016-03-04T10:54:26Z",
        "updatedAt" : "2016-03-07T15:13:15Z",
        "lastEditedBy" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "tags" : [
        ]
      },
      {
        "id" : "0b90d7a9-ac3d-41d5-b3d5-8e3dec71476f",
        "parentId" : "c5bec309-13cb-405b-bc50-0775c6abb10c",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Not sure that's better.\n",
        "createdAt" : "2016-03-07T15:07:50Z",
        "updatedAt" : "2016-03-07T15:13:15Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf2fed8138cb399beb7d1249227107b943fe3905",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +122,126 @@      f.getOrElseUpdate(sym, newSymSet)\n\n    def freeVars(sym: Symbol): List[Symbol] = free.getOrElse(sym, Nil).toList\n\n    def proxyOf(sym: Symbol, fv: Symbol) = proxyMap.getOrElse(sym, Map.empty)(fv)"
  },
  {
    "id" : "e1ab3757-3c8b-44ac-9713-782e307891ae",
    "prId" : 1133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c60cfa5e-a2e3-4847-b159-41f1cdcd11f6",
        "parentId" : null,
        "authorId" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "body" : "What's the reasoning behind the call to `narrowTo` here? Before `narrowTo` was only called for non-local symbols, now it's called for all of them.\n",
        "createdAt" : "2016-03-04T11:28:48Z",
        "updatedAt" : "2016-03-07T15:13:15Z",
        "lastEditedBy" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "tags" : [
        ]
      },
      {
        "id" : "325106f0-8c0d-4757-b7bf-fb31ed7d8dd5",
        "parentId" : "c60cfa5e-a2e3-4847-b159-41f1cdcd11f6",
        "authorId" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "body" : "I'm asking because it would be kind of nice to add `if sym.isTerm && isLocal(sym)` as a guard to the Ident case (and `sym.isMethod && isLocal(sym)`) and perhaps treat the narrowing separately.\n",
        "createdAt" : "2016-03-04T11:30:34Z",
        "updatedAt" : "2016-03-07T15:13:15Z",
        "lastEditedBy" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "tags" : [
        ]
      },
      {
        "id" : "62004cee-213a-4ae5-914e-cf5a4241c533",
        "parentId" : "c60cfa5e-a2e3-4847-b159-41f1cdcd11f6",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "If the owner of a symbol is a class, then previously that meant the symbol has to be non-local. Now, it could be local, but then it's either owned by a trait or is a constructor. In both cases we\ndo not want to move the symbol out of the enclosing class.\n",
        "createdAt" : "2016-03-07T15:10:48Z",
        "updatedAt" : "2016-03-07T15:13:15Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf2fed8138cb399beb7d1249227107b943fe3905",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +250,254 @@              else if (sym.isTerm) markFree(sym, enclosure)\n            }\n            if (sym.maybeOwner.isClass) narrowTo(sym.owner.asClass)\n          case tree: Select =>\n            if (sym.is(Method) && isLocal(sym)) markCalled(sym, enclosure)"
  },
  {
    "id" : "c693fb04-dec3-4813-b474-d2eb97946421",
    "prId" : 1133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f91dd76-f7b9-470b-aba6-6c83611506c0",
        "parentId" : null,
        "authorId" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "body" : "collapse with nested if\n",
        "createdAt" : "2016-03-04T11:32:11Z",
        "updatedAt" : "2016-03-07T15:13:15Z",
        "lastEditedBy" : "9eb7e1a2-8927-4525-9474-5b5e4ce6afb0",
        "tags" : [
        ]
      },
      {
        "id" : "6b8e9ca8-7e79-43d3-9717-f2a716ab12fd",
        "parentId" : "9f91dd76-f7b9-470b-aba6-6c83611506c0",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "That's done in a later commit.\n",
        "createdAt" : "2016-03-07T15:12:19Z",
        "updatedAt" : "2016-03-07T15:13:15Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf2fed8138cb399beb7d1249227107b943fe3905",
    "line" : 201,
    "diffHunk" : "@@ -1,1 +263,267 @@                // top-level class. This avoids possible deadlocks when a static method\n                // has to access its enclosing object from the outside.\n            else if (sym.isConstructor) {\n              if (sym.isPrimaryConstructor && isLocal(sym.owner) && !sym.owner.is(Trait))\n                // add a call edge from the constructor of a local non-trait class to"
  },
  {
    "id" : "efa0007b-426e-4056-a85d-49d225e23527",
    "prId" : 486,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d50cb1d-ea51-4c6c-b567-6837464ae943",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "can you either add documentation to `narrowLiftedOwner` method, or add description what happens in both branches of this `if`?\n",
        "createdAt" : "2015-04-17T09:21:17Z",
        "updatedAt" : "2015-04-17T19:32:26Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b4e4cb7e71367752558fac29129f7e182d9206a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +157,161 @@            // of the enclosing class, so skipConstructor is needed here.\n        if (intermediate.exists) {\n          narrowLiftedOwner(enclosure, intermediate)\n          intermediate\n        }"
  }
]