[
  {
    "id" : "4f9aba24-d985-4a12-9c82-558c295c010d",
    "prId" : 1226,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcb60116-f1e9-4308-b7a1-5e0a2f790f76",
        "parentId" : null,
        "authorId" : "998ba0f7-d6a6-448f-a3ba-0d2237ed0cf9",
        "body" : "why do you need the cast?\n",
        "createdAt" : "2016-04-19T09:20:13Z",
        "updatedAt" : "2016-06-07T15:03:05Z",
        "lastEditedBy" : "998ba0f7-d6a6-448f-a3ba-0d2237ed0cf9",
        "tags" : [
        ]
      },
      {
        "id" : "2bc7c461-3385-43e4-bcde-12b89ce0ca54",
        "parentId" : "dcb60116-f1e9-4308-b7a1-5e0a2f790f76",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Static type is `Map[Name, List[Tree]]`.\n",
        "createdAt" : "2016-04-19T09:21:22Z",
        "updatedAt" : "2016-06-07T15:03:05Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "56869bdd-5387-4369-a0a4-2017a9b0e9fd",
        "parentId" : "dcb60116-f1e9-4308-b7a1-5e0a2f790f76",
        "authorId" : "998ba0f7-d6a6-448f-a3ba-0d2237ed0cf9",
        "body" : "oh i see now -- since you don't use `others`, you can write `val classes = trees collect { case td: TypeDef if td.symbol.isClass => td }` and don't need the cast\n",
        "createdAt" : "2016-04-19T09:24:01Z",
        "updatedAt" : "2016-06-07T15:03:05Z",
        "lastEditedBy" : "998ba0f7-d6a6-448f-a3ba-0d2237ed0cf9",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c93c5c48f5222c6ad40267d29d32cf7c597df41",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@    if (ctx.owner.is(Flags.Package)) {\n      val (classes, others) = trees.partition(x => x.isInstanceOf[TypeDef] && x.symbol.isClass)\n      val pairs = classes.groupBy(_.symbol.name.stripModuleClassSuffix).asInstanceOf[Map[Name, List[TypeDef]]]\n\n      def rebuild(orig: TypeDef, newBody: List[Tree]): Tree = {"
  },
  {
    "id" : "a10157e0-eedf-4a1c-8a2b-436b12e602c0",
    "prId" : 1226,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c795d97e-7fcd-4167-842b-78d64e570555",
        "parentId" : null,
        "authorId" : "998ba0f7-d6a6-448f-a3ba-0d2237ed0cf9",
        "body" : "maybe invert the condition and move this case up -- makes it easier to follow\n",
        "createdAt" : "2016-04-19T09:34:07Z",
        "updatedAt" : "2016-06-07T15:03:05Z",
        "lastEditedBy" : "998ba0f7-d6a6-448f-a3ba-0d2237ed0cf9",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c93c5c48f5222c6ad40267d29d32cf7c597df41",
    "line" : null,
    "diffHunk" : "@@ -1,1 +73,77 @@            else move(classes.head, classes.tail.head)\n      Trees.flatten(newPairs.toList.flatten ++ others)\n    } else trees\n  }\n}"
  },
  {
    "id" : "74d35b4b-956a-4ed1-bf9f-5720b92c21d6",
    "prId" : 1226,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42afe3cb-891f-4a97-bc28-14f9e21c0e10",
        "parentId" : null,
        "authorId" : "998ba0f7-d6a6-448f-a3ba-0d2237ed0cf9",
        "body" : "do you need to remove / unlink the symbol from the module's scope?\n",
        "createdAt" : "2016-04-19T09:35:48Z",
        "updatedAt" : "2016-06-07T15:03:05Z",
        "lastEditedBy" : "998ba0f7-d6a6-448f-a3ba-0d2237ed0cf9",
        "tags" : [
        ]
      },
      {
        "id" : "39a1eb6a-5781-4338-aaeb-5866e5dcf8f8",
        "parentId" : "42afe3cb-891f-4a97-bc28-14f9e21c0e10",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "I'm kind of intentionally not doing so. \nTo make sure it can be found in both places. \n",
        "createdAt" : "2016-04-19T09:38:44Z",
        "updatedAt" : "2016-06-07T15:03:05Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "42fc2a71-da77-4167-879d-18a8d4342391",
        "parentId" : "42afe3cb-891f-4a97-bc28-14f9e21c0e10",
        "authorId" : "998ba0f7-d6a6-448f-a3ba-0d2237ed0cf9",
        "body" : "ok, i don't know if that's a good idea (literally - maybe it is..)\n",
        "createdAt" : "2016-04-19T09:41:35Z",
        "updatedAt" : "2016-06-07T15:03:05Z",
        "lastEditedBy" : "998ba0f7-d6a6-448f-a3ba-0d2237ed0cf9",
        "tags" : [
        ]
      },
      {
        "id" : "b1756550-40fd-4e56-8c49-21e4ddce76ee",
        "parentId" : "42afe3cb-891f-4a97-bc28-14f9e21c0e10",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Note here we're already near the backend, so I'm preparing the tree specifically for GenBCode. \nPhases that go in this block are backend-specific and break some assumptions of compiler.\nEg `LabelDefs` reorders `<label> def`s in a _magical_ order that no one should touch.\n",
        "createdAt" : "2016-04-19T09:45:04Z",
        "updatedAt" : "2016-06-07T15:03:05Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "56ee822d-9867-4714-9268-25b901b34900",
        "parentId" : "42afe3cb-891f-4a97-bc28-14f9e21c0e10",
        "authorId" : "998ba0f7-d6a6-448f-a3ba-0d2237ed0cf9",
        "body" : "maybe it's related to exactly that discussion: the current PR creates a static field in both `T` and `T$`\n\n```\nimport annotation.static\nclass T\nobject T {\n  @static val x = 99\n}\n```\n\n```\npublic class T {\n  public static I x\n}\n```\n\n```\npublic final class T$ {\n  public static I x\n}\n```\n\nthe one in the module class is not initialized.\n",
        "createdAt" : "2016-04-19T09:45:37Z",
        "updatedAt" : "2016-06-07T15:03:05Z",
        "lastEditedBy" : "998ba0f7-d6a6-448f-a3ba-0d2237ed0cf9",
        "tags" : [
        ]
      },
      {
        "id" : "613977f5-e63a-4917-b16d-3b5e9bbd257e",
        "parentId" : "42afe3cb-891f-4a97-bc28-14f9e21c0e10",
        "authorId" : "998ba0f7-d6a6-448f-a3ba-0d2237ed0cf9",
        "body" : "> magical\n\nâœ¨  :)\n",
        "createdAt" : "2016-04-19T09:47:47Z",
        "updatedAt" : "2016-06-07T15:03:05Z",
        "lastEditedBy" : "998ba0f7-d6a6-448f-a3ba-0d2237ed0cf9",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c93c5c48f5222c6ad40267d29d32cf7c597df41",
    "line" : null,
    "diffHunk" : "@@ -1,1 +24,28 @@    if (sym.hasAnnotation(defn.ScalaStaticAnnot) && sym.owner.is(Flags.Module) && sym.owner.companionClass.exists) {\n      sym.owner.asClass.delete(sym.symbol)\n      sym.owner.companionClass.asClass.enter(sym.symbol)\n      val flags = if (sym.is(Flags.Method)) sym.flags else sym.flags | Flags.Mutable\n      sym.copySymDenotation(owner = sym.owner.companionClass, initFlags = flags)"
  }
]