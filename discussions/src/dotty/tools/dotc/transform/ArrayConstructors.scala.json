[
  {
    "id" : "6efdb2c5-4fa6-44e7-90ab-1cdf2c42fb82",
    "prId" : 1188,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b138bbb6-872a-4825-9d4a-cef5e5398b6c",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "What happens to the implicit `ClassTag` argument to `ofDim`? Isn't part of `dims`? In that case, `rewrite` would do something bad with it wouldn't it?\n",
        "createdAt" : "2016-03-24T14:13:52Z",
        "updatedAt" : "2016-04-18T13:01:34Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "bddc9fc9-f43e-44c1-b3b2-fec9311ed78c",
        "parentId" : "b138bbb6-872a-4825-9d4a-cef5e5398b6c",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "implicit ClassTag argument to ofDim is the argument of `tree: Apply`, that has a form\n`Apply(Apply(TypeApply(_, targs), dims, classTag)`. \nI'm deconstructing the inner Apply here.\n",
        "createdAt" : "2016-03-24T14:52:41Z",
        "updatedAt" : "2016-04-18T13:01:34Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "a13ae2f5-1071-4274-adce-275be76a9d42",
        "parentId" : "b138bbb6-872a-4825-9d4a-cef5e5398b6c",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Ah, right. OK.\n",
        "createdAt" : "2016-03-24T15:24:50Z",
        "updatedAt" : "2016-04-18T13:01:34Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "5399fbed6d33dca132ca27314f2eba414aea4415",
    "line" : null,
    "diffHunk" : "@@ -1,1 +46,50 @@      tree.fun match {\n        case Apply(TypeApply(t: Ident, targ), dims)  if !TypeErasure.isUnboundedGeneric(targ.head.tpe) =>\n          rewrite(targ.head.tpe, dims)\n        case Apply(TypeApply(t: Select, targ), dims) if !TypeErasure.isUnboundedGeneric(targ.head.tpe) =>\n          Block(t.qualifier :: Nil, rewrite(targ.head.tpe, dims))"
  }
]