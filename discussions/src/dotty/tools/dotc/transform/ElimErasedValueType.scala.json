[
  {
    "id" : "1e1b78f3-6607-4536-abb0-ff9674e57ace",
    "prId" : 411,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc9e169e-e490-428f-af69-f668599511c8",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "you shouldn't need `Block` and `If`, their types should just propagate. Which tests fail when you remove them?\n",
        "createdAt" : "2015-03-28T22:02:20Z",
        "updatedAt" : "2015-05-01T12:04:42Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "07c97342-3677-4883-af81-b0b5bd31a795",
        "parentId" : "cc9e169e-e490-428f-af69-f668599511c8",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "If I just disable `transformBlock` and `transformIf`, then `dotc_core`, `dotc_util` and `dotc_core_pickling` fail whereas they didn't fail before. Here is a minimal example which fails without `transformIf`:\n\n``` scala\nclass Position(val foo: Int) extends AnyVal {\n  def orElse(that: Position) =\n    if (this != null) this else that\n}\n```\n\nBacktrace:\n\n``` scala\nrun -Ycheck:elimerasedvaluetype try/vcif.scala\n[info] Running dotty.tools.dotc.Main -Ycheck:elimerasedvaluetype try/vcif.scala\n[info] checking try/vcif.scala after phase TreeTransform:{elimerasedvaluetype, peepholeoptimize, mixin, memoize, capturedVars, constructors}\n[info] exception while typing final def orElse$extension($this: Int, that: Int): Int = \n[info]   if new Position($this).equals(null).unary_!() then $this else that of class class dotty.tools.dotc.ast.Trees$DefDef # 548\n[info] exception while typing final module class Position$ extends Object { this: Position$ => \n[info]   def <init>(): Position$ = {\n[info]     super()\n[info]     ()\n[info]   }\n[info]   final def orElse$extension($this: Int, that: Int): Int = \n[info]     if new Position($this).equals(null).unary_!() then $this else that\n[info]   override final def hashCode$extension($this: Int): Int = \n[info]     scala.Int.box($this).hashCode()\n[info]   override final def equals$extension($this: Int, x$0: Object): Boolean = {\n[info]     case val selector11: Object = x$0\n[info]     {\n[info]       def case11(): Boolean = {\n[info]         def case21(): Boolean = {\n[info]           def matchFail11(): Boolean = throw new MatchError(selector11)\n[info]           if true then {\n[info]             false\n[info]           } else matchFail11()\n[info]         }\n[info]         if selector11.isInstanceOf[Position] then {\n[info]           val x$0: Int = {\n[info]             val ev$1: Object = selector11\n[info]             if ev$1.eq(null) then scala.Int.unbox(null) else \n[info]               ev$1.asInstanceOf[Position].foo()\n[info]           }\n[info]           {\n[info]             scala.Int.box($this).equals(scala.Int.box(x$0))\n[info]           }\n[info]         } else case21()\n[info]       }\n[info]       case11()\n[info]     }\n[info]   }\n[info] } of class class dotty.tools.dotc.ast.Trees$TypeDef # 588\n[info] exception while typing package <empty> {\n[info]   class Position extends Object { \n[info]     def <init>(foo: Int): Position = {\n[info]       super()\n[info]       this.foo$$local = foo\n[info]       ()\n[info]     }\n[info]     private val foo$$local: Int\n[info]     <accessor> def foo(): Int = this.foo$$local\n[info]     def orElse(that: Int): Int = \n[info]       Position.orElse$extension(Position.this.foo(), that)\n[info]     override def hashCode(): Int = \n[info]       Position.hashCode$extension(Position.this.foo())\n[info]     override def equals(x$0: Object): Boolean = \n[info]       Position.equals$extension(Position.this.foo(), x$0)\n[info]   }\n[info]   final lazy module val Position: Position$ = new Position$()\n[info]   final module class Position$ extends Object { this: Position$ => \n[info]     def <init>(): Position$ = {\n[info]       super()\n[info]       ()\n[info]     }\n[info]     final def orElse$extension($this: Int, that: Int): Int = \n[info]       if new Position($this).equals(null).unary_!() then $this else that\n[info]     override final def hashCode$extension($this: Int): Int = \n[info]       scala.Int.box($this).hashCode()\n[info]     override final def equals$extension($this: Int, x$0: Object): Boolean = {\n[info]       case val selector11: Object = x$0\n[info]       {\n[info]         def case11(): Boolean = {\n[info]           def case21(): Boolean = {\n[info]             def matchFail11(): Boolean = throw new MatchError(selector11)\n[info]             if true then {\n[info]               false\n[info]             } else matchFail11()\n[info]           }\n[info]           if selector11.isInstanceOf[Position] then {\n[info]             val x$0: Int = {\n[info]               val ev$1: Object = selector11\n[info]               if ev$1.eq(null) then scala.Int.unbox(null) else \n[info]                 ev$1.asInstanceOf[Position].foo()\n[info]             }\n[info]             {\n[info]               scala.Int.box($this).equals(scala.Int.box(x$0))\n[info]             }\n[info]           } else case21()\n[info]         }\n[info]         case11()\n[info]       }\n[info]     }\n[info]   }\n[info] } of class class dotty.tools.dotc.ast.Trees$PackageDef # 589\n[info] *** error while checking after phase constructors ***\n[error] Exception in thread \"main\" java.lang.AssertionError: assertion failed: Types differ\n[error] Original type : ErasedValueType(Position, Int)\n[error] After checking: Int\n[error] Original tree : if new Position($this).equals(null).unary_!() then $this else that\n[error] After checking: if new Position($this).equals(null).unary_!() then $this else that\n[error] Why different :\n[error]              Subtype trace:\n[error]   ==> Int <:< ErasedValueType(Position, Int) class dotty.tools.dotc.core.Types$CachedTypeRef class dotty.tools.dotc.core.TypeErasure$CachedErasedValueType\n[error]   <== Int <:< ErasedValueType(Position, Int) class dotty.tools.dotc.core.Types$CachedTypeRef class dotty.tools.dotc.core.TypeErasure$CachedErasedValueType = false\n[error]         at scala.Predef$.assert(Predef.scala:165)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker.typedUnadapted(TreeChecker.scala:179)\n[error]         at dotty.tools.dotc.typer.Typer$$anonfun$typed$2.apply(Typer.scala:1088)\n[error]         at dotty.tools.dotc.typer.Typer$$anonfun$typed$2.apply(Typer.scala:1086)\n[error]         at dotty.tools.dotc.reporting.Reporting$class.traceIndented(Reporter.scala:147)\n[error]         at dotty.tools.dotc.core.Contexts$Context.traceIndented(Contexts.scala:51)\n[error]         at dotty.tools.dotc.typer.Typer.typed(Typer.scala:1086)\n[error]         at dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:1125)\n[error]         at dotty.tools.dotc.typer.Typer$$anonfun$typedDefDef$1.apply(Typer.scala:892)\n[error]         at dotty.tools.dotc.typer.Typer$$anonfun$typedDefDef$1.apply(Typer.scala:885)\n[error]         at dotty.tools.dotc.util.Stats$.track(Stats.scala:35)\n[error]         at dotty.tools.dotc.typer.Typer.typedDefDef(Typer.scala:885)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker.dotty$tools$dotc$transform$TreeChecker$Checker$$super$typedDefDef(TreeChecker.scala:249)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker$$anonfun$typedDefDef$1$$anonfun$apply$3.apply(TreeChecker.scala:249)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker$$anonfun$typedDefDef$1$$anonfun$apply$3.apply(TreeChecker.scala:249)\n[error]         at dotty.tools.dotc.core.Decorators$ListDecorator$.foldRightBN$extension(Decorators.scala:104)\n[error]         at dotty.tools.dotc.core.Decorators$ListDecorator$$anonfun$foldRightBN$extension$1.apply(Decorators.scala:105)\n[error]         at dotty.tools.dotc.core.Decorators$ListDecorator$.foldRightBN$extension(Decorators.scala:104)\n[error]         at dotty.tools.dotc.core.Decorators$ListDecorator$$anonfun$foldRightBN$extension$1.apply(Decorators.scala:105)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker.withDefinedSym(TreeChecker.scala:139)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker$$anonfun$withDefinedSyms$1.apply(TreeChecker.scala:147)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker$$anonfun$withDefinedSyms$1.apply(TreeChecker.scala:147)\n[error]         at dotty.tools.dotc.core.Decorators$ListDecorator$.foldRightBN$extension(Decorators.scala:105)\n[error]         at dotty.tools.dotc.core.Decorators$ListDecorator$$anonfun$foldRightBN$extension$1.apply(Decorators.scala:105)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker.withDefinedSym(TreeChecker.scala:139)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker$$anonfun$withDefinedSyms$1.apply(TreeChecker.scala:147)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker$$anonfun$withDefinedSyms$1.apply(TreeChecker.scala:147)\n[error]         at dotty.tools.dotc.core.Decorators$ListDecorator$.foldRightBN$extension(Decorators.scala:105)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker.withDefinedSyms(TreeChecker.scala:147)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker$$anonfun$withDefinedSymss$1.apply(TreeChecker.scala:150)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker$$anonfun$withDefinedSymss$1.apply(TreeChecker.scala:150)\n[error]         at dotty.tools.dotc.core.Decorators$ListDecorator$.foldRightBN$extension(Decorators.scala:105)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker.withDefinedSymss(TreeChecker.scala:150)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker$$anonfun$typedDefDef$1.apply(TreeChecker.scala:248)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker$$anonfun$typedDefDef$1.apply(TreeChecker.scala:248)\n[error]         at dotty.tools.dotc.core.Decorators$ListDecorator$.foldRightBN$extension(Decorators.scala:104)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker.withDefinedSyms(TreeChecker.scala:147)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker.typedDefDef(TreeChecker.scala:247)\n[error]         at dotty.tools.dotc.typer.Typer.typedNamed$1(Typer.scala:1026)\n[error]         at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:1076)\n[error]         at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:93)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker.typedUnadapted(TreeChecker.scala:166)\n[error]         at dotty.tools.dotc.typer.Typer$$anonfun$typed$2.apply(Typer.scala:1088)\n[error]         at dotty.tools.dotc.typer.Typer$$anonfun$typed$2.apply(Typer.scala:1086)\n[error]         at dotty.tools.dotc.reporting.Reporting$class.traceIndented(Reporter.scala:147)\n[error]         at dotty.tools.dotc.core.Contexts$Context.traceIndented(Contexts.scala:51)\n[error]         at dotty.tools.dotc.typer.Typer.typed(Typer.scala:1086)\n[error]         at dotty.tools.dotc.typer.Typer.traverse$1(Typer.scala:1110)\n[error]         at dotty.tools.dotc.typer.Typer.typedStats(Typer.scala:1121)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker.typedStats(TreeChecker.scala:275)\n[error]         at dotty.tools.dotc.typer.Typer$$anonfun$typedClassDef$1.apply(Typer.scala:922)\n[error]         at dotty.tools.dotc.typer.Typer$$anonfun$typedClassDef$1.apply(Typer.scala:904)\n[error]         at dotty.tools.dotc.util.Stats$.track(Stats.scala:35)\n[error]         at dotty.tools.dotc.typer.Typer.typedClassDef(Typer.scala:904)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker.typedClassDef(TreeChecker.scala:243)\n[error]         at dotty.tools.dotc.typer.Typer.typedNamed$1(Typer.scala:1029)\n[error]         at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:1076)\n[error]         at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:93)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker.typedUnadapted(TreeChecker.scala:166)\n[error]         at dotty.tools.dotc.typer.Typer$$anonfun$typed$2.apply(Typer.scala:1088)\n[error]         at dotty.tools.dotc.typer.Typer$$anonfun$typed$2.apply(Typer.scala:1086)\n[error]         at dotty.tools.dotc.reporting.Reporting$class.traceIndented(Reporter.scala:147)\n[error]         at dotty.tools.dotc.core.Contexts$Context.traceIndented(Contexts.scala:51)\n[error]         at dotty.tools.dotc.typer.Typer.typed(Typer.scala:1086)\n[error]         at dotty.tools.dotc.typer.Typer.traverse$1(Typer.scala:1110)\n[error]         at dotty.tools.dotc.typer.Typer.typedStats(Typer.scala:1121)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker.typedStats(TreeChecker.scala:275)\n[error]         at dotty.tools.dotc.typer.Typer$$anonfun$typedPackageDef$1.apply(Typer.scala:969)\n[error]         at dotty.tools.dotc.typer.Typer$$anonfun$typedPackageDef$1.apply(Typer.scala:960)\n[error]         at dotty.tools.dotc.util.Stats$.track(Stats.scala:35)\n[error]         at dotty.tools.dotc.typer.Typer.typedPackageDef(Typer.scala:960)\n[error]         at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:1066)\n[error]         at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:1078)\n[error]         at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:93)\n[error]         at dotty.tools.dotc.transform.TreeChecker$Checker.typedUnadapted(TreeChecker.scala:166)\n[error]         at dotty.tools.dotc.typer.Typer$$anonfun$typed$2.apply(Typer.scala:1088)\n[error]         at dotty.tools.dotc.typer.Typer$$anonfun$typed$2.apply(Typer.scala:1086)\n[error]         at dotty.tools.dotc.reporting.Reporting$class.traceIndented(Reporter.scala:147)\n[error]         at dotty.tools.dotc.core.Contexts$Context.traceIndented(Contexts.scala:51)\n[error]         at dotty.tools.dotc.typer.Typer.typed(Typer.scala:1086)\n[error]         at dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:1125)\n[error]         at dotty.tools.dotc.transform.TreeChecker.check(TreeChecker.scala:100)\n[error]         at dotty.tools.dotc.transform.TreeChecker.run(TreeChecker.scala:78)\n[error]         at dotty.tools.dotc.core.Phases$Phase$$anonfun$runOn$1.apply(Phases.scala:265)\n[error]         at dotty.tools.dotc.core.Phases$Phase$$anonfun$runOn$1.apply(Phases.scala:263)\n[error]         at scala.collection.immutable.List.map(List.scala:273)\n[error]         at dotty.tools.dotc.core.Phases$Phase$class.runOn(Phases.scala:263)\n[error]         at dotty.tools.dotc.transform.TreeChecker.runOn(TreeChecker.scala:38)\n[error]         at dotty.tools.dotc.Run$$anonfun$compileSources$1$$anonfun$apply$mcV$sp$3.apply(Run.scala:50)\n[error]         at dotty.tools.dotc.Run$$anonfun$compileSources$1$$anonfun$apply$mcV$sp$3.apply(Run.scala:47)\n[error]         at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)\n[error]         at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:186)\n[error]         at dotty.tools.dotc.Run$$anonfun$compileSources$1.apply$mcV$sp(Run.scala:47)\n[error]         at dotty.tools.dotc.Run$$anonfun$compileSources$1.apply(Run.scala:42)\n[error]         at dotty.tools.dotc.Run$$anonfun$compileSources$1.apply(Run.scala:42)\n[error]         at dotty.tools.dotc.util.Stats$.monitorHeartBeat(Stats.scala:68)\n[error]         at dotty.tools.dotc.Run.compileSources(Run.scala:41)\n[error]         at dotty.tools.dotc.Run.compile(Run.scala:32)\n[error]         at dotty.tools.dotc.Driver.doCompile(Driver.scala:20)\n[error]         at dotty.tools.dotc.Main$.doCompile(Main.scala:26)\n[error]         at dotty.tools.dotc.Driver.process(Driver.scala:31)\n[error]         at dotty.tools.dotc.Driver.main(Driver.scala:40)\n[error]         at dotty.tools.dotc.Main.main(Main.scala)\n```\n",
        "createdAt" : "2015-03-28T22:16:15Z",
        "updatedAt" : "2015-05-01T12:04:42Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "18804d43-24a2-4a24-925e-74a65a44ded8",
        "parentId" : "cc9e169e-e490-428f-af69-f668599511c8",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "This happens because in `transformTypeOfTree` you break basic assumption of `TypeAssigner` - you overwrite type of already existing tree. So as in before phase you have reference equality between `tree.expr` and `transform(tree).expr` and  `TypeAssigner` assumes that there is no need to recompute the type, but actually there is.\n",
        "createdAt" : "2015-03-28T22:21:07Z",
        "updatedAt" : "2015-05-01T12:04:42Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "2237f69b-8479-45ca-9513-429c9a6b7062",
        "parentId" : "cc9e169e-e490-428f-af69-f668599511c8",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "disregard last comment. I didn't see that `withType` clones the tree. We need to find why you need `transformBlock`, as you shoundn't need it. Can you have a look why `TypeAssigner` assigns wrong type?\n",
        "createdAt" : "2015-03-28T22:23:39Z",
        "updatedAt" : "2015-05-01T12:04:42Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d012f93635184dc8aa6325b715a133861c74ab08",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +75,79 @@    transformTypeOfTree(tree)\n  override def transformBlock(tree: Block)(implicit ctx: Context, info: TransformerInfo): Tree =\n    transformTypeOfTree(tree)\n  override def transformIf(tree: If)(implicit ctx: Context, info: TransformerInfo): Tree =\n    transformTypeOfTree(tree)"
  }
]