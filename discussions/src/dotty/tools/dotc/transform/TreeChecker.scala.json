[
  {
    "id" : "6f7c7c93-26c4-49fc-b7d2-ef8b037f2d98",
    "prId" : 1283,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92e0ceca-2170-4d13-bf58-74c03b977e14",
        "parentId" : null,
        "authorId" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "body" : "Added `setMode(Mode.ImplicitsEnabled)` here since `Compiler` uses that in its initial context.\n",
        "createdAt" : "2016-05-27T14:05:58Z",
        "updatedAt" : "2016-05-27T14:42:08Z",
        "lastEditedBy" : "2dc29bea-17b2-4800-bf4f-843c62cca7de",
        "tags" : [
        ]
      },
      {
        "id" : "95e25fa3-fbe5-4bbc-9c34-f5eecdb83771",
        "parentId" : "92e0ceca-2170-4d13-bf58-74c03b977e14",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I don't think `TreeChecker` should have to do implicit searches, did you have to enable this to make some tests pass?\n",
        "createdAt" : "2016-05-29T23:11:43Z",
        "updatedAt" : "2016-05-29T23:11:43Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d604a4c9b21eec23cda0c82ab769c48d3d0c47a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +123,127 @@    val checkingCtx = ctx\n        .fresh\n        .setMode(Mode.ImplicitsEnabled)\n        .setReporter(new ThrowingReporter(ctx.reporter))\n"
  },
  {
    "id" : "1750a4d1-11f1-4750-b660-b81a30b3f079",
    "prId" : 1205,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0639076-dfb9-4531-9b5d-d0e038143faf",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Failing tests suggest that you may be missing AnnotatedTypes here.\n",
        "createdAt" : "2016-04-09T12:03:38Z",
        "updatedAt" : "2016-04-15T11:22:37Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "7fd1ae2c-5cd2-4287-9b9f-8d27839e4c78",
        "parentId" : "e0639076-dfb9-4531-9b5d-d0e038143faf",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Thanks @DarkDimius , `AnnotatedType` is indeed missing here. But there's something more related to default parameters.\n\nFollowing generated function for default parameters\n\n```\n    def copy$default$1[a]: a @uncheckedVariance =\n      Some.this.x: a @uncheckedVariance\n```\n\ngets following type:\n\n```\nPolyType(List(a), List(TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,scala)),Nothing), TypeRef(ThisType(TypeRef(NoPrefix,scala)),Any))), AnnotatedType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,<empty>)),Some)),Some$$a),ConcreteAnnotation(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,unchecked)),uncheckedVariance)]),<init>),List()))))\n```\n\nIs it valid for methods of default parameters to take a non-method type?\n",
        "createdAt" : "2016-04-09T12:19:38Z",
        "updatedAt" : "2016-04-15T11:22:37Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "371e8a7bf2db6ba17b5655265fbcde62c32de646",
    "line" : null,
    "diffHunk" : "@@ -1,1 +313,317 @@\n    /** Check that all methods have MethodicType */\n    def isMethodType(pt: Type)(implicit ctx: Context): Boolean = pt match {\n      case at: AnnotatedType => isMethodType(at.tpe)\n      case _: MethodicType => true  // MethodType, ExprType, PolyType"
  },
  {
    "id" : "caaa2469-9c1b-4237-a3dd-feba5264e0e2",
    "prId" : 1201,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8257b95-55ce-41dc-9a18-4049b1d55c37",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I keep the unchecked cases as comments to make it explicit what cases are ignored, in order to facilitate code maintenance. I'm not sure if it's a good style.\n",
        "createdAt" : "2016-04-04T11:40:22Z",
        "updatedAt" : "2016-04-04T12:21:31Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "30b3840efe59537d8ba37d42fe7ec9e976cda7dc",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +195,199 @@      // case tree: untpd.SelectFromTypeTree =>\n      // case tree: untpd.Bind =>\n      case vd : ValDef =>\n        assertIdentNotJavaClass(vd.forceIfLazy)\n      case dd : DefDef =>"
  },
  {
    "id" : "3a2f22d7-7849-4380-ad91-1b3b8459bb61",
    "prId" : 202,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "496755b8-54cf-44f4-948b-e6a2863af552",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Duplicated typo => maybe a sign to refactor these three lines into a re-usable method?\n",
        "createdAt" : "2014-10-31T16:44:53Z",
        "updatedAt" : "2014-10-31T16:44:53Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "5540f1330862de8daeeb9f0b15b0bb0ba6f153c5",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +52,56 @@  def check(phasesToRun: Seq[Phase], ctx: Context) = {\n    val prevPhase = ctx.phase.prev // can be a mini-phase\n    val squahsedPhase = ctx.squashed(prevPhase)\n    println(s\"checking ${ctx.compilationUnit} after phase ${squahsedPhase}\")\n    val checkingCtx = ctx.fresh"
  }
]