[
  {
    "id" : "d64489ea-e879-4470-bb97-a6373b75403e",
    "prId" : 1061,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c869cf83-667d-416e-8550-b100c2723a1f",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Is this the right way to avoid useless `Block`s over single expressions? I did not find any shortcut. Or do you not bother, in general, and just always create a `Block` in similar cases?\n",
        "createdAt" : "2016-02-05T15:21:58Z",
        "updatedAt" : "2016-03-31T13:22:59Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "aacf13a6-4827-4289-8f24-53bcbb8fc95d",
        "parentId" : "c869cf83-667d-416e-8550-b100c2723a1f",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "At the moment we do not bother in most cases.\n",
        "createdAt" : "2016-02-05T15:27:05Z",
        "updatedAt" : "2016-03-31T13:22:59Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "0fe17b98-4c45-483f-9cb9-8ba4a384bc11",
        "parentId" : "c869cf83-667d-416e-8550-b100c2723a1f",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "OK I'll remove the test. I's a bit ugly because most cases don't have any `ValDef`, but let's follow the conventions.\n",
        "createdAt" : "2016-02-05T15:49:55Z",
        "updatedAt" : "2016-03-31T13:22:59Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "e88cd7c7-b8a5-4536-ae1c-90be74f52219",
        "parentId" : "c869cf83-667d-416e-8550-b100c2723a1f",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Feel free to leave it as is.\nWhat I meant is that currently different parts of dotty already create a lot of Blocks with empty stats and there's no assumption that `stats.nonEmpty`.\n",
        "createdAt" : "2016-02-05T15:51:43Z",
        "updatedAt" : "2016-03-31T13:22:59Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "a90d7f48-8a4a-41f2-b000-c3d485fee1b4",
        "parentId" : "c869cf83-667d-416e-8550-b100c2723a1f",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Oh OK.\n",
        "createdAt" : "2016-02-05T15:52:46Z",
        "updatedAt" : "2016-03-31T13:22:59Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "f38921fee213da3d22cf28eaa5cbec935f7d3734",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +388,392 @@          val valDefs = body.rebindings.emitValDefs\n          if (valDefs.isEmpty) body.body\n          else Block(valDefs, body.body)\n        }\n"
  },
  {
    "id" : "36338596-ff59-4b2d-a3ec-383c1461c353",
    "prId" : 1061,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb855be0-55dd-4f67-bf7c-58aa19c9f60d",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "```\n(1: Int) match {case x @ 1 => x}\n```\n\nseems not covered by those cases\n",
        "createdAt" : "2016-02-05T15:23:48Z",
        "updatedAt" : "2016-03-31T13:22:59Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "36232f1e-464b-427c-b23a-24a04abd5485",
        "parentId" : "bb855be0-55dd-4f67-bf7c-58aa19c9f60d",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "It is not, indeed. I have actually deliberately omitted it, at the moment. It looked useless, as even as a human it would be obvious that `x` should be 1. I would have implemented it anyway, but for the fact that the sequence of `treeMakers` was `SubstOnly`, `EqualityTest`, `Body`; and it seemed \"dangerous\" to move the `SubstOnly` after the `EqualityTest`.\n\nI can reconsider this.\n",
        "createdAt" : "2016-02-05T15:27:55Z",
        "updatedAt" : "2016-03-31T13:22:59Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "9acd5056-c546-4e92-b445-290b34395e22",
        "parentId" : "bb855be0-55dd-4f67-bf7c-58aa19c9f60d",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Done. It now also support `case x @ (5 | 6) =>`, which can actually be useful.\n",
        "createdAt" : "2016-02-08T13:27:54Z",
        "updatedAt" : "2016-03-31T13:22:59Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "f38921fee213da3d22cf28eaa5cbec935f7d3734",
    "line" : null,
    "diffHunk" : "@@ -1,1 +349,353 @@          isSwitchCase(rest)\n\n        case _ =>\n          false\n      }"
  },
  {
    "id" : "ec789332-818b-4086-9090-32ae1bc3ac63",
    "prId" : 1061,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb90d430-4f22-4a00-8702-b6c59db0c835",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "``` scala\n|| (ValueClasses.isDerivedValueClass(tpe.classSymbol) && \n     isSwitchableType(ValueClasses.underlyingOfValueClass(tpe.classSymbol)))\n\n```\n",
        "createdAt" : "2016-02-05T15:43:13Z",
        "updatedAt" : "2016-03-31T13:22:59Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "dbb94fb3-5497-4ef3-952a-46e591605cc4",
        "parentId" : "eb90d430-4f22-4a00-8702-b6c59db0c835",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Although I agree it would be nice, this won't happen in practice, because you cannot express a _constant_ value of a user-defined value class in the `case`s.\n",
        "createdAt" : "2016-02-05T15:48:32Z",
        "updatedAt" : "2016-03-31T13:22:59Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "f1e064d8-1620-407a-9068-17c344c705da",
        "parentId" : "eb90d430-4f22-4a00-8702-b6c59db0c835",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "After a bit of discussion: let's leave this possibility for future as it's not clear what is a constant for a value class.\n",
        "createdAt" : "2016-02-05T15:48:45Z",
        "updatedAt" : "2016-03-31T13:22:59Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f38921fee213da3d22cf28eaa5cbec935f7d3734",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +311,315 @@        (tpe isRef defn.ByteClass) ||\n        (tpe isRef defn.ShortClass) ||\n        (tpe isRef defn.CharClass)\n      }\n"
  },
  {
    "id" : "ba99f0c3-9340-4e97-b0a4-83be6adb4363",
    "prId" : 1061,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcbde193-85f4-42b4-b861-bc26f84e6708",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "This line causes a bootstrapping test (I think) to fail with\n\n```\n[error] java.lang.AssertionError: assertion failed: error at /home/jenkins/workspace/dotty-master-validate-partest/tests/partest-generated/pos/transform/PatternMatcher.scala:340\n[error] type mismatch:\n[error]  found   : $this.EqualityTestTreeMaker\n[error]  required: TreeMakers.this.EqualityTestTreeMaker\n[error] tree = TypeApply(Select(Ident(p38),asInstanceOf),List(TypeTree[TypeRef(TermRef(NoPrefix,$this),EqualityTestTreeMaker)]))\n[error]     at scala.Predef$.assert(Predef.scala:165)\n[error]     at dotty.tools.dotc.transform.TreeChecker$Checker.adapt(TreeChecker.scala:333)\n[error]     at dotty.tools.dotc.typer.ProtoTypes$FunProto.typedArg(ProtoTypes.scala:205)\n```\n\nIt seems to be a Ycheck error. Apparently it cannot relate the synthetic `$this` thing (a capture?) to the enclosing `TreeMakers.this`.\n\nNot sure what to make of this, atm.\n",
        "createdAt" : "2016-02-10T17:05:20Z",
        "updatedAt" : "2016-03-31T13:22:59Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "7a551a37-b611-4857-8a49-be30838217bc",
        "parentId" : "dcbde193-85f4-42b4-b861-bc26f84e6708",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "AFAIK only two transformations introduce `$this`: `ExtensionMethods` and `TailRec`, and `extractSwitchCases` looks tail-recursive. So my guess is that this method makes pattern-matching and tail-recursiveness interact in an interesting way we haven't tested before (probably because `IntEqualityTestTreeMaker` is a local class). It'd be great if you could try to reduce this to a simple test case.\n",
        "createdAt" : "2016-02-10T17:29:25Z",
        "updatedAt" : "2016-03-31T13:22:59Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "2d96be05-879c-4f24-a0c9-5bc1119c17a4",
        "parentId" : "dcbde193-85f4-42b4-b861-bc26f84e6708",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "I'll to minimize it, yes.\n",
        "createdAt" : "2016-02-10T22:30:26Z",
        "updatedAt" : "2016-03-31T13:22:59Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "f38921fee213da3d22cf28eaa5cbec935f7d3734",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +364,368 @@        case List(AlternativesTreeMaker(_, alts, _), body: BodyTreeMaker) =>\n          val intValues = alts.map {\n            case List(IntEqualityTestTreeMaker(intValue)) => intValue\n          }\n          (intValues, body)"
  },
  {
    "id" : "419abbf6-311c-4869-85ba-ba0658c50277",
    "prId" : 669,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7e21016-6475-4546-be0b-95f2da6aa954",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Redundant parens around the expression.\n",
        "createdAt" : "2015-06-19T16:04:15Z",
        "updatedAt" : "2015-06-19T16:04:15Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "e69b30b7-db3b-4356-9548-60c0798486f3",
        "parentId" : "d7e21016-6475-4546-be0b-95f2da6aa954",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Sorry, I was myopic here. All's good.\n",
        "createdAt" : "2015-06-19T16:44:38Z",
        "updatedAt" : "2015-06-19T16:44:38Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3819ce631310baab00c44a0d1845b267d60bcdd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +137,141 @@        def callRuntime  = ref(defn.traversableDropMethod).appliedTo(tgt, Literal(Constant(n)))\n\n        def needsRuntime = !(tgt.tpe derivesFrom defn.SeqClass) /*typeOfMemberNamedDrop(tgt.tpe) == NoType*/\n\n        if (needsRuntime) callRuntime else callDirect"
  }
]