[
  {
    "id" : "faf8ba84-1702-4092-a9de-565960fb96f1",
    "prId" : 33766,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33766#pullrequestreview-296505000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed4bdd60-131e-4076-8621-769ffa871fd8",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Anyone have a less kludgy idea for how to test this? I looked into the server fourslash tests, but it would ultimately require the same kind of hard-coded hack, just buried deeper in the infrastructure.",
        "createdAt" : "2019-10-02T20:27:06Z",
        "updatedAt" : "2019-10-17T18:08:36Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4e32785ea85a9ff2550eaf036c55459e341d0b3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +222,226 @@\n        getGlobalTypingsCacheLocation() {\n            return \"/Library/Caches/typescript\";\n        }\n"
  },
  {
    "id" : "da1024c0-411d-43d5-8950-00aa4097674e",
    "prId" : 16307,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16307#pullrequestreview-42471920",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c2fc036-bb15-4198-9d29-a072475efbdf",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Perhaps \"getRefactorEdits\" or \"getRefactorEditInfo\"?",
        "createdAt" : "2017-06-06T22:24:38Z",
        "updatedAt" : "2017-06-07T00:43:39Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "41e3c47f-49f7-42a3-a38d-e7c98bbba12f",
        "parentId" : "2c2fc036-bb15-4198-9d29-a072475efbdf",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "@mhegazy opinions?",
        "createdAt" : "2017-06-06T23:10:13Z",
        "updatedAt" : "2017-06-07T00:43:39Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "f725d7de5f1709352ee712494b25ca5ec071ff41",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +493,497 @@            throw new Error(\"Not supported on the shim.\");\n        }\n        getEditsForRefactor(): ts.RefactorEditInfo {\n            throw new Error(\"Not supported on the shim.\");\n        }"
  },
  {
    "id" : "2bfbadad-1ea1-4814-a274-b430a8ff43ab",
    "prId" : 8670,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31ad051b-950e-422a-b824-5ea07616d041",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can you add the handling in shims.ts as well.\n",
        "createdAt" : "2016-05-24T17:35:01Z",
        "updatedAt" : "2016-05-24T18:31:18Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "1569c3e9-2051-4a2f-b764-0a4a318c357f",
        "parentId" : "31ad051b-950e-422a-b824-5ea07616d041",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : ":heavy_check_mark: \n",
        "createdAt" : "2016-05-24T18:12:07Z",
        "updatedAt" : "2016-05-24T18:31:18Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b133489a1c118296e5b3fe356bef4ef926c3356",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +603,607 @@        }\n\n        getDirectories(path: string): string[] {\n            return [];\n        }"
  },
  {
    "id" : "ab3e3c77-4b66-4128-b4bf-e90cb8a16324",
    "prId" : 2981,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80e9c8f3-6df7-4b8e-a259-3d2cbf8d428a",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why is this not implemented?\n",
        "createdAt" : "2015-05-01T18:00:59Z",
        "updatedAt" : "2015-05-01T18:00:59Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c7600b4f5faac0504415dc1944b174c24f740c1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +237,241 @@        }\n        getEncodedLexicalClassifications(text: string, lexState: ts.EndOfLineState, classifyKeywordsInGenerics?: boolean): ts.Classifications {\n            throw new Error(\"NYI\");\n        }\n        getClassificationsForLine(text: string, lexState: ts.EndOfLineState, classifyKeywordsInGenerics?: boolean): ts.ClassificationResult {"
  },
  {
    "id" : "64217595-b006-49e7-a174-b7fd35fc5e16",
    "prId" : 2966,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69b0f470-315d-4cd1-b54d-77b1e86f9b55",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "What is the difference between getDefinitionAtPositoin and getTypeDefinitionAtPosition?\n",
        "createdAt" : "2015-04-30T20:09:12Z",
        "updatedAt" : "2015-05-04T17:02:51Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "e8c683fa-0e73-4f27-a6b8-730eeab76b90",
        "parentId" : "69b0f470-315d-4cd1-b54d-77b1e86f9b55",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "One gets you the place where the \"symbol\" is defined, where the other takes you to the definition location of the \"type\".\n\nit is a very useful feature when you want to know what is the shape of `value.property`, hovering gives you a type name, but to know the shape of the type you need to first jump to the declaration of `property`, then jump to the declaration of its type. it gets even harder with inferred types, cause you need to go to the definition of the function, or variable that produces the contextual type then go to the type from there.\n\neditors like Eclipse and monaco have had this feature for long time. also @basarat has added support for it recently on the atom plugin if i am not mistaken.\n",
        "createdAt" : "2015-04-30T20:17:05Z",
        "updatedAt" : "2015-05-04T17:02:51Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "b69db20d-ee74-4f3d-a6f8-e2c24f22eb72",
        "parentId" : "69b0f470-315d-4cd1-b54d-77b1e86f9b55",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "That makes sense.  We shoudl drive this through on the Roslyn side as well though.  Definitely open up a bug on them to support this.  That way we can get a command in for VB/C#/TS for this scenario, and the experience can be consistent between all three languages.\n",
        "createdAt" : "2015-05-02T01:11:03Z",
        "updatedAt" : "2015-05-04T17:02:51Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fc6142def80554c9be15757a9fd29234cbfc778",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +343,347 @@            return unwrapJSONCallResult(this.shim.getDefinitionAtPosition(fileName, position));\n        }\n        getTypeDefinitionAtPosition(fileName: string, position: number): ts.DefinitionInfo[]{\n            return unwrapJSONCallResult(this.shim.getTypeDefinitionAtPosition(fileName, position));\n        }"
  },
  {
    "id" : "4f205227-2441-471c-8133-e3eac020588c",
    "prId" : 2682,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fc3c5e1-4521-45e7-ae0b-5e44c67b6731",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I'm following the name of Roslyn here.  This is a general mechanism for highlighting, it doesn't have to be for references.\n",
        "createdAt" : "2015-04-09T21:38:42Z",
        "updatedAt" : "2015-04-09T22:11:31Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "094e05c5-f927-434a-8cf3-7fd99e4075ec",
        "parentId" : "5fc3c5e1-4521-45e7-ae0b-5e44c67b6731",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I deleted the comment because we discussed it offline. To make you look less insane, I was asking why it wasn't called `getReferenceHighlights`.\n",
        "createdAt" : "2015-04-09T21:50:24Z",
        "updatedAt" : "2015-04-09T22:11:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc512b284bf5f4104aa2b90a433115502e8eaeea",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +337,341 @@            return unwrapJSONCallResult(this.shim.getOccurrencesAtPosition(fileName, position));\n        }\n        getDocumentHighlights(fileName: string, position: number, filesToSearch: string[]): ts.DocumentHighlights[] {\n            return unwrapJSONCallResult(this.shim.getDocumentHighlights(fileName, position, JSON.stringify(filesToSearch)));\n        }"
  },
  {
    "id" : "9289d6ac-6d07-4a54-9b90-8617ab97d33c",
    "prId" : 2258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8ff0956-30a4-4302-bd32-7b0fe928331d",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Unnecessary newline.\n",
        "createdAt" : "2015-03-09T07:51:27Z",
        "updatedAt" : "2015-03-09T18:58:53Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "37c6f69f015c3da3c709e2bae0786aa55a10a045",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +470,474 @@        }\n\n\n        readFile(fileName: string): string {\n            if (fileName.indexOf(Harness.Compiler.defaultLibFileName) >= 0) { "
  },
  {
    "id" : "9476f161-31c4-48c9-ba8d-c1caa993b782",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcf68dc6-0afa-4506-8c42-fdf1ce35e823",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "fields should be private.\n",
        "createdAt" : "2015-02-16T22:14:03Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +469,473 @@\n    class SessionServerHost implements ts.server.ServerHost, ts.server.Logger { \n        args: string[] = [];\n        newLine: string;\n        useCaseSensitiveFileNames: boolean = false;"
  },
  {
    "id" : "6fd24b36-29c0-4814-89fe-214777b8df44",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "411a07cd-2ff8-4aaf-8080-8ce484662c63",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I'd really like to see all classes documented to explain what purpose they serve.  \n",
        "createdAt" : "2015-02-16T22:14:41Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +468,472 @@    }\n\n    class SessionServerHost implements ts.server.ServerHost, ts.server.Logger { \n        args: string[] = [];\n        newLine: string;"
  },
  {
    "id" : "a076bada-d0a9-4f38-afc1-8f09754997b0",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10992e87-e19c-4054-8d56-89059c9f23c3",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "We need to stop doing `end`.\n",
        "createdAt" : "2015-02-17T02:20:07Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +25,29 @@        }\n\n        public editContent(start: number, end: number, newText: string): void {\n            // Apply edits\n            var prefix = this.content.substring(0, start);"
  },
  {
    "id" : "e4ebab57-79a4-4441-8d89-944368b40ea6",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea5ea884-307e-4d3d-ae00-7c7354cb782e",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Should this not also throw?\n",
        "createdAt" : "2015-02-17T02:26:53Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +516,520 @@        }\n\n        exit(exitCode: number): void {\n        }\n"
  },
  {
    "id" : "8cd3ee60-9dc1-4fb9-aae8-d9d4071c0eac",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7208f70c-1343-4e87-ac39-bcec687aa006",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Put this on a new line. Also, maybe this should throw.\n",
        "createdAt" : "2015-02-17T20:16:41Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +532,536 @@        \n        watchFile(fileName: string, callback: (fileName: string) => void): ts.FileWatcher { \n            return { close() { } };\n        }\n"
  },
  {
    "id" : "27f35427-ae92-45e8-a37a-a4d38bc9f603",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf807599-e510-40f1-8e3e-9ab36c24fe16",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Maybe `LanguageServiceServerAdapter`, but I wouldn't really know because I don't know what this is doing.\n",
        "createdAt" : "2015-02-17T20:20:20Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 194,
    "diffHunk" : "@@ -1,1 +557,561 @@    }\n    \n    export class ServerLanugageServiceAdapter implements LanguageServiceAdapter {\n        private host: SessionClientHost;\n        private client: ts.server.SessionClient;"
  },
  {
    "id" : "282d364f-44bb-44e5-9b6d-9570319071bb",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9363b472-64cf-41e7-ab99-bb57994ddd3e",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I don't know what this comment means.\n",
        "createdAt" : "2015-02-17T20:20:32Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 198,
    "diffHunk" : "@@ -1,1 +561,565 @@        private client: ts.server.SessionClient;\n        constructor(cancellationToken?: ts.CancellationToken, options?: ts.CompilerOptions) {\n            // This is the main host that tests use to direct tests\n            var clientHost = new SessionClientHost(cancellationToken, options);\n            var client = new ts.server.SessionClient(clientHost);"
  },
  {
    "id" : "b97fdc8f-735c-4a2a-95b1-1986ce9cb6e4",
    "prId" : 1420,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07585243-9a50-4519-9fb3-08ecff586e0b",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why set to true all the time. this method is used for both semantic and syntactic features. we only need to set hte parents in the syntactic ones.\n",
        "createdAt" : "2014-12-10T01:46:15Z",
        "updatedAt" : "2014-12-10T01:46:15Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "4ca146d0-bdbe-4742-b6cf-c091c07f6335",
        "parentId" : "07585243-9a50-4519-9fb3-08ecff586e0b",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "@DanielRosenwasser had a fix for this today..\n",
        "createdAt" : "2014-12-10T01:46:37Z",
        "updatedAt" : "2014-12-10T01:46:37Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "f2ae6b36-22cc-4390-acd8-ce6d11851f6e",
        "parentId" : "07585243-9a50-4519-9fb3-08ecff586e0b",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This is actually based on a failed cherry pick of that commit ;)\n",
        "createdAt" : "2014-12-10T05:22:33Z",
        "updatedAt" : "2014-12-10T05:22:33Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6170c56af4f133029b8c14825222f0045257d803",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +268,272 @@        /** Parse file given its source text */\n        public parseSourceText(fileName: string, sourceText: ts.IScriptSnapshot): ts.SourceFile {\n            var result = ts.createSourceFile(fileName, sourceText.getText(0, sourceText.getLength()), ts.ScriptTarget.Latest);\n            result.version = \"1\";\n            result.isOpen = true;"
  }
]