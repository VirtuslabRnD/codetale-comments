[
  {
    "id" : "19f26461-3aaf-48f6-a17c-d7ce82ea1a0d",
    "prId" : 35254,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35254#pullrequestreview-321236655",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a5a474f-aa6f-4afa-9570-576bfb971af5",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "❤️ ",
        "createdAt" : "2019-11-21T22:41:27Z",
        "updatedAt" : "2019-11-22T22:22:40Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "fdafabe62b0f435da9349521b07aa6b841f368aa",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1555,1559 @@        }\n\n        public baselineSyntacticDiagnostics() {\n            const files = this.getCompilerTestFiles();\n            const result = this.getSyntacticDiagnosticBaselineText(files);"
  },
  {
    "id" : "af46f872-725c-415b-8129-7dc69b4ae321",
    "prId" : 34627,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/34627#pullrequestreview-318400599",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7eb9d113-db8b-4c97-831f-d85a2ee280af",
        "parentId" : null,
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "Looks legit 👍 ",
        "createdAt" : "2019-11-18T15:08:52Z",
        "updatedAt" : "2019-11-18T15:09:56Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "d743f0dd532d26acac502b9a9333b9f793681926",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +2361,2365 @@            const codeActions = details.codeActions;\n            if (codeActions?.length !== 1) {\n                this.raiseError(`Expected one code action, got ${codeActions?.length ?? 0}`);\n            }\n            const codeAction = ts.first(codeActions);"
  },
  {
    "id" : "0616984a-d90e-4ed9-ac2a-e7ff77e6342b",
    "prId" : 25908,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25908#pullrequestreview-140101629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4cb789b-4a2b-4006-b319-a32dd799c442",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I had to fix the fourslash harness to do case-appropriate comparisons of the paths returned in definition requests, since the fallback cache'd mapped locations are always canonicalized paths and not input-case-like strings (and the fourslash harness assumes case insensitivity).",
        "createdAt" : "2018-07-24T22:19:42Z",
        "updatedAt" : "2018-07-24T22:19:59Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "03d9322bf73ec93447f925b87398bc70f22e8422",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +710,714 @@            ts.zipWith(endMarkers, definitions, (endMarker, definition, i) => {\n                const marker = this.getMarkerByName(endMarker);\n                if (ts.comparePaths(marker.fileName, definition.fileName, /*ignoreCase*/ true) !== ts.Comparison.EqualTo || marker.position !== definition.textSpan.start) {\n                    this.raiseError(`${testName} failed for definition ${endMarker} (${i}): expected ${marker.fileName} at ${marker.position}, got ${definition.fileName} at ${definition.textSpan.start}`);\n                }"
  },
  {
    "id" : "2fef56f2-4621-428c-aa0f-228b936dba78",
    "prId" : 25886,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25886#pullrequestreview-170892766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0026bf6-93d2-423a-bd4c-2715e0d64801",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This is incorrect. This does not include type keywords .. bigint is type only keyword.",
        "createdAt" : "2018-11-01T21:27:11Z",
        "updatedAt" : "2018-11-05T20:24:02Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "49a56496-32d8-4486-8d69-72ceb7c6fd07",
        "parentId" : "c0026bf6-93d2-423a-bd4c-2715e0d64801",
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "it actually contains type keywords like `unknown`, `never` and so on",
        "createdAt" : "2018-11-01T21:30:54Z",
        "updatedAt" : "2018-11-05T20:24:02Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb99c4123003ade3e471cf17472be6d3f72d96ff",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +4840,4844 @@            \"from\",\n            \"global\",\n            \"bigint\",\n            \"of\",\n        ];"
  },
  {
    "id" : "36031b34-9d54-424a-950b-d44e0edc6e73",
    "prId" : 25422,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25422#pullrequestreview-135277522",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc72119c-59fa-455c-a906-5d83a7e8cc8b",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "You should `return ts.Debug.fail(\"Unexpected key \" + key);`, probably.",
        "createdAt" : "2018-07-06T20:25:04Z",
        "updatedAt" : "2018-07-06T20:25:04Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "79e7288a-402e-4b1b-b4e3-f837f70f2776",
        "parentId" : "dc72119c-59fa-455c-a906-5d83a7e8cc8b",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I usually only do that when the compiler needs to know more about reachability, but I don't think it's necessary here unless I'm missing something.",
        "createdAt" : "2018-07-09T05:09:07Z",
        "updatedAt" : "2018-07-09T05:09:27Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "10fa9893-b9a3-4879-8704-fd6c5b3f40d9",
        "parentId" : "dc72119c-59fa-455c-a906-5d83a7e8cc8b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "We were talking about making it a lint rule a few weeks ago, that way the reachability graph is more complete and may expose more logic bugs (eg, can a following if statement never actually occur because of the implied throw here).",
        "createdAt" : "2018-07-09T05:11:09Z",
        "updatedAt" : "2018-07-09T05:11:10Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9481faab98bae79b897b9f130ae0bf508e280e26",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1517,1521 @@            for (const key in options) {\n                if (!ts.contains(allKeys, key)) {\n                    ts.Debug.fail(\"Unexpected key \" + key);\n                }\n            }"
  },
  {
    "id" : "321749de-572f-4ce7-a065-965765bfc1c9",
    "prId" : 24959,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24959#pullrequestreview-151912103",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5c364b1-5b37-4412-b69f-f305dc6c43bd",
        "parentId" : null,
        "authorId" : "08216af4-8f83-4d7f-ba51-8ca6fd8a49a0",
        "body" : "> baseName === \"tsconfig.json\" \r\n\r\nBut if we have tsconfig with a custom name, will it work?",
        "createdAt" : "2018-06-14T23:12:48Z",
        "updatedAt" : "2018-06-15T12:07:33Z",
        "lastEditedBy" : "08216af4-8f83-4d7f-ba51-8ca6fd8a49a0",
        "tags" : [
        ]
      },
      {
        "id" : "cbd8ee02-dff9-4a09-b86c-9a7d29b78a35",
        "parentId" : "a5c364b1-5b37-4412-b69f-f305dc6c43bd",
        "authorId" : "9678945e-59d1-4a50-a9aa-e501d44720ba",
        "body" : "have the same problem",
        "createdAt" : "2018-09-03T06:36:39Z",
        "updatedAt" : "2018-09-03T06:36:39Z",
        "lastEditedBy" : "9678945e-59d1-4a50-a9aa-e501d44720ba",
        "tags" : [
        ]
      },
      {
        "id" : "73a83d9d-0b05-42aa-814b-b923682d1302",
        "parentId" : "a5c364b1-5b37-4412-b69f-f305dc6c43bd",
        "authorId" : "08216af4-8f83-4d7f-ba51-8ca6fd8a49a0",
        "body" : "@sheetalkamat can you please take a look?",
        "createdAt" : "2018-09-03T21:47:46Z",
        "updatedAt" : "2018-09-03T21:47:46Z",
        "lastEditedBy" : "08216af4-8f83-4d7f-ba51-8ca6fd8a49a0",
        "tags" : [
        ]
      },
      {
        "id" : "612e2368-c733-431b-93cc-977b458612cf",
        "parentId" : "a5c364b1-5b37-4412-b69f-f305dc6c43bd",
        "authorId" : "e4e7e296-ae82-4134-851f-5e7d080e523c",
        "body" : "I think you probably want to raise a new issue for this; I doubt people are looking at this as the original issue was solved and shipped with 3.0.0 AFAIK",
        "createdAt" : "2018-09-04T05:07:04Z",
        "updatedAt" : "2018-09-04T05:07:04Z",
        "lastEditedBy" : "e4e7e296-ae82-4134-851f-5e7d080e523c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe260588fa9f3054fb20c85c731c81c7a2d3023b",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +514,518 @@\n                const baseName = ts.getBaseFileName(fileName);\n                if (baseName === \"package.json\" || baseName === \"tsconfig.json\" || baseName === \"jsconfig.json\") {\n                    return [];\n                }"
  },
  {
    "id" : "e1e8600f-de42-4aa3-83cd-674f16a3036d",
    "prId" : 24325,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24325#pullrequestreview-122375060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cc42c61-6b61-4f83-af3a-37bf297a3d5f",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "What about change locations?",
        "createdAt" : "2018-05-22T22:16:51Z",
        "updatedAt" : "2018-05-22T22:37:07Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "d894149c-089c-4ae8-9be6-1863c614441d",
        "parentId" : "3cc42c61-6b61-4f83-af3a-37bf297a3d5f",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This method `verify.codeFixAvailable` just tests for availability -- `verify.codeFix` will test the actual content of the fix.",
        "createdAt" : "2018-05-22T22:23:03Z",
        "updatedAt" : "2018-05-22T22:37:07Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8fc03cdc634116cbc96f0078bd82d4e35009ef5",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +3002,3006 @@            assert(!negative || !expected);\n            const codeFixes = this.getCodeFixes(this.activeFile.fileName);\n            const actuals = codeFixes.map((fix): FourSlashInterface.VerifyCodeFixAvailableOptions => ({ description: fix.description, commands: fix.commands }));\n            this.assertObjectsEqual(actuals, negative ? ts.emptyArray : expected);\n        }"
  },
  {
    "id" : "6c5cc56d-5ed4-471a-abce-a2e3d2dd8efb",
    "prId" : 23591,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23591#pullrequestreview-117087852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "346f1052-cbcc-42cf-9d55-356ee9afd8b8",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I find the name \"at\" a little unclear and the name \"are\" very unclear.",
        "createdAt" : "2018-05-02T21:51:33Z",
        "updatedAt" : "2018-05-02T21:59:03Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "c8d2c2da-c5d3-4c83-a136-12f082c4f2e1",
        "parentId" : "346f1052-cbcc-42cf-9d55-356ee9afd8b8",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`at` could be `atMarker` -- not sure what to replace `are` with -- it's what the completions are. `areExactly`? Keep in mind the name will appear thousands of times so we don't want it to get too long. How about `exact`?",
        "createdAt" : "2018-05-02T22:05:58Z",
        "updatedAt" : "2018-05-02T22:09:42Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "ff28dbb2-8b1c-405b-99d0-08f7c53da261",
        "parentId" : "346f1052-cbcc-42cf-9d55-356ee9afd8b8",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I figured out what they meant by reading the tests, but I still find the names unclear.  I would have expected something like `location` or `marker` for `at` and something like `all` or `exact` for `are` (or a flag indicating that `includes` is exhaustive).",
        "createdAt" : "2018-05-02T22:09:56Z",
        "updatedAt" : "2018-05-02T22:09:57Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "73ec9e92-ba4e-44ca-a507-fbe25745f56f",
        "parentId" : "346f1052-cbcc-42cf-9d55-356ee9afd8b8",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`marker` and `exact` sound good.",
        "createdAt" : "2018-05-02T22:12:01Z",
        "updatedAt" : "2018-05-02T22:12:02Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "96e90dd98907c52680e8e1696fd2829ee85a0296",
    "line" : 348,
    "diffHunk" : "@@ -1,1 +4754,4758 @@        readonly at?: Many<string>;\n        readonly isNewIdentifierLocation?: boolean;\n        readonly are?: Many<ExpectedCompletionEntry>;\n        readonly includes?: Many<ExpectedCompletionEntry>;\n        readonly excludes?: Many<string | { readonly name: string, readonly source: string }>;"
  },
  {
    "id" : "d8a91781-ea41-40d2-95a3-7d659fb69b7a",
    "prId" : 23591,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23591#pullrequestreview-117082328",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "395c49c5-6fb2-4171-a42e-5e77edf08f21",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Maybe this could be a helper function that operates on `Many<T>`?",
        "createdAt" : "2018-05-02T21:53:09Z",
        "updatedAt" : "2018-05-02T21:59:03Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "96e90dd98907c52680e8e1696fd2829ee85a0296",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +833,837 @@        public verifyCompletions(options: FourSlashInterface.VerifyCompletionsOptions) {\n            if (options.at !== undefined) {\n                if (typeof options.at === \"string\") {\n                    this.goToMarker(options.at);\n                }"
  },
  {
    "id" : "dec5a51f-d985-43d0-90fb-b851498bc7d2",
    "prId" : 23591,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23591#pullrequestreview-117087016",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc5ce0dd-f96f-4251-89a5-98b5fce24c68",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Are `includes` and `excludes` mutually exclusive?",
        "createdAt" : "2018-05-02T21:54:55Z",
        "updatedAt" : "2018-05-02T21:59:03Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "729453f2-e089-4258-87ff-b1218323d557",
        "parentId" : "fc5ce0dd-f96f-4251-89a5-98b5fce24c68",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "No, good catch!",
        "createdAt" : "2018-05-02T22:08:29Z",
        "updatedAt" : "2018-05-02T22:08:29Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "96e90dd98907c52680e8e1696fd2829ee85a0296",
    "line" : 142,
    "diffHunk" : "@@ -1,1 +876,880 @@                    }\n                }\n                else {\n                    for (const exclude of toArray(options.excludes)) {\n                        if (typeof exclude === \"string\") {"
  },
  {
    "id" : "2d0a857c-8c70-4819-98a3-8e876e0a92ad",
    "prId" : 19517,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19517#pullrequestreview-72575268",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e113602b-30a7-4ac0-888a-4d679d5cbe3b",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Please add a comment explaining why we need this.",
        "createdAt" : "2017-10-27T17:28:10Z",
        "updatedAt" : "2017-10-31T17:35:38Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "b14496cd6f186cc524973355d524893f771ccbac",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +383,387 @@            this.openFile(0);\n\n            function memoWrap(ls: ts.LanguageService, target: TestState): ts.LanguageService {\n                const cacheableMembers: (keyof typeof ls)[] = [\n                    \"getCompletionsAtPosition\","
  },
  {
    "id" : "441c6358-db4f-4242-8c6c-22ef9a5d2f8e",
    "prId" : 19175,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19175#pullrequestreview-71347808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b3413ea-5ee5-471d-b0f8-f5efbda5f76d",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">testName [](start = 16, length = 8)\r\n\r\nIt seems like this is actually the name of the API under test. #Closed",
        "createdAt" : "2017-10-23T17:37:35Z",
        "updatedAt" : "2017-10-31T00:02:26Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "12d00907-8022-447c-9378-0d19298d43df",
        "parentId" : "1b3413ea-5ee5-471d-b0f8-f5efbda5f76d",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Which one is reported when the argument is `undefined`?  Does it matter?\r\n\r\n---\r\nIn reply to: [146340127](https://github.com/Microsoft/TypeScript/pull/19175#discussion_r146340127) [](ancestors = 146340127)",
        "createdAt" : "2017-10-23T17:38:30Z",
        "updatedAt" : "2017-10-31T00:02:26Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "97be4d88-b7f4-414b-bf8d-9f51f1f4a902",
        "parentId" : "1b3413ea-5ee5-471d-b0f8-f5efbda5f76d",
        "authorId" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "body" : "The argument is not going to be undefined only the response from the argument function. It happens when the token doesn't contain a definition.",
        "createdAt" : "2017-10-23T22:21:09Z",
        "updatedAt" : "2017-10-31T00:02:26Z",
        "lastEditedBy" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5c18a6fb777a0a3396188f5cd902483a2c6277b",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +640,644 @@            const defs = getDefs();\n            let definitions: ts.DefinitionInfo[] | ReadonlyArray<ts.DefinitionInfo>;\n            let testName: string;\n\n            if (!defs || Array.isArray(defs)) {"
  },
  {
    "id" : "a0e2f2bb-84d2-4b49-994b-6ef9f79c5629",
    "prId" : 18742,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18742#pullrequestreview-65363628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aefd0c1c-6f23-417e-bc29-bc06b07d235c",
        "parentId" : null,
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "Consider merging this into `rangeAfterCodeFix` (possibly in a separate PR) to keep the 4/ API simple.",
        "createdAt" : "2017-09-26T20:53:15Z",
        "updatedAt" : "2017-09-26T21:11:08Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "ecfcfa29-7f6c-4993-a751-35b45415e344",
        "parentId" : "aefd0c1c-6f23-417e-bc29-bc06b07d235c",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I'm planning to remove all `rangeAfterCodeFix` in another PR.",
        "createdAt" : "2017-09-26T21:11:28Z",
        "updatedAt" : "2017-09-26T21:11:28Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "19a38f69dc126d2e88b430e08b65f59f9d9e246a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2338,2342 @@        }\n\n        public verifyCodeFix(options: FourSlashInterface.VerifyCodeFixOptions) {\n            const fileName = this.activeFile.fileName;\n            const actions = this.getCodeFixActions(fileName, options.errorCode);"
  },
  {
    "id" : "73f96622-f471-4f52-8c7e-cd9354889fe7",
    "prId" : 18742,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18742#pullrequestreview-65363543",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bd98f27-7be3-444a-b575-a713615e2b4b",
        "parentId" : null,
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "Should `description` and `newContent` be optional as well?",
        "createdAt" : "2017-09-26T20:54:36Z",
        "updatedAt" : "2017-09-26T21:11:08Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "ceafd6bf-4996-4e2e-ba78-8922af7ee86e",
        "parentId" : "8bd98f27-7be3-444a-b575-a713615e2b4b",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Not if we want to enforce that these are tested.",
        "createdAt" : "2017-09-26T21:11:14Z",
        "updatedAt" : "2017-09-26T21:11:14Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "19a38f69dc126d2e88b430e08b65f59f9d9e246a",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +4399,4403 @@\n    export interface VerifyCodeFixOptions {\n        description: string;\n        // One of these should be defined.\n        newFileContent?: string;"
  },
  {
    "id" : "7eb0fe77-ef0f-4e50-b8dd-9aa1fcbc5c28",
    "prId" : 17625,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17625#pullrequestreview-55367250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbe8ac47-2fb9-4394-ace6-7b459748bd30",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">JSON.parse(JSON.stringify(edits)); [](start = 20, length = 34)\r\n\r\nThis seems like a particularly expensive way to accomplish the copy. #WontFix",
        "createdAt" : "2017-08-09T20:38:25Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "61454f32-3612-4d0e-aa6b-3a586c33ad9f",
        "parentId" : "fbe8ac47-2fb9-4394-ace6-7b459748bd30",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Never mind - didn't see that this was test code.\r\n\r\n---\r\nIn reply to: [132299991](https://github.com/Microsoft/TypeScript/pull/17625#discussion_r132299991) [](ancestors = 132299991)",
        "createdAt" : "2017-08-09T20:41:21Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a923151719a1092134ef318ae37d795dd60b5e7",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +1789,1793 @@\n            // Copy this so we don't ruin someone else's copy\n            edits = JSON.parse(JSON.stringify(edits));\n\n            // Get a snapshot of the content of the file so we can make sure any formatting edits didn't destroy non-whitespace characters"
  },
  {
    "id" : "6a05332d-addc-4c3a-b982-6c8535ec9e9c",
    "prId" : 17625,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17625#pullrequestreview-55367410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39ffcc22-2aa4-479b-bbd7-356dbae50c5f",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Could we avoid this work by sorting the edits in descending order of start position?   (That would also make it easy to restore the no-overlap assertion.)",
        "createdAt" : "2017-08-09T20:39:56Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "e672828e-d367-4c5b-b7eb-035c262bbbdc",
        "parentId" : "39ffcc22-2aa4-479b-bbd7-356dbae50c5f",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Given that this is test code, I don't particularly care about the extra work, but having the assert seems worthwhile.\r\n\r\n---\r\nIn reply to: [132300325](https://github.com/Microsoft/TypeScript/pull/17625#discussion_r132300325) [](ancestors = 132300325)",
        "createdAt" : "2017-08-09T20:41:54Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a923151719a1092134ef318ae37d795dd60b5e7",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +1818,1822 @@                        edits[j].span.start += editDelta;\n                    }\n                }\n            }\n"
  },
  {
    "id" : "e408c7bb-bc38-4a5b-b8e0-2bcd9509a8f9",
    "prId" : 17078,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17078#pullrequestreview-49352628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f822a42-17cb-4382-a20c-c5a911e05a02",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Would it make sense to put the caret at the end of the new text?  It should have the same behavior as this code when the new text is empty.",
        "createdAt" : "2017-07-11T22:16:20Z",
        "updatedAt" : "2017-07-12T18:14:58Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "c03a3242-133c-4902-b97b-dbdb0a629192",
        "parentId" : "4f822a42-17cb-4382-a20c-c5a911e05a02",
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : "In practice, the test cases only hit this when the caret is already at the start of the span (i.e. ```this.currentCaretPosition === offsetStart``` already). So it makes sense not to move it in that case. When the caret is in the middle, it's kind of arbitrary which way to go. I chose the route with the least logic. (Note: I checked VS it does something different altogether. When the caret is in the middle, it only repositions the caret if it would end up outside the range of the new text. Which makes sense. But we literally never hit this case in tests, so I'm not going to spend any more time on it). ",
        "createdAt" : "2017-07-11T23:00:43Z",
        "updatedAt" : "2017-07-12T18:14:58Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "abb229e91b83c06799d2f51200ff364afdc989b3",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1797,1801 @@                    else {\n                        // The span being replaced includes the caret position, place the caret at the beginning of the span\n                        this.currentCaretPosition = offsetStart;\n                    }\n                }"
  },
  {
    "id" : "c261939d-7e84-4340-8d86-310ea183283a",
    "prId" : 16878,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16878#pullrequestreview-48158801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15a5d5a2-fa0a-4550-b22a-08d10f3221ab",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Do you know why above in `if (this.enableFormatting)` we update `offset` but not `currentCaretPosition`?\r\nAlso, is `fixCaretPosition` still necessary if we update it correctly?",
        "createdAt" : "2017-07-05T14:37:35Z",
        "updatedAt" : "2017-07-06T17:46:21Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "55b709c6-c7a3-4cc1-8ea0-d8090149670d",
        "parentId" : "15a5d5a2-fa0a-4550-b22a-08d10f3221ab",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "`this.applyEdits` returns the number of characters added/removed in the file, but this is different from the adjustment to the caret position (which is the number of characters added/removed in the file *before the caret*).",
        "createdAt" : "2017-07-05T19:38:40Z",
        "updatedAt" : "2017-07-06T17:46:21Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "0cec3f7d-b727-437a-81ae-a8ccc9807b49",
        "parentId" : "15a5d5a2-fa0a-4550-b22a-08d10f3221ab",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "`fixCaretPosition` appears to be unnecessary now.",
        "createdAt" : "2017-07-05T19:46:35Z",
        "updatedAt" : "2017-07-06T17:46:21Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc08c5f241e52b3bc05ec6f2a09d5d1da2633500",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1718,1722 @@                        offset += this.applyEdits(this.activeFile.fileName, edits, /*isFormattingEdit*/ true);\n                    }\n                }\n            }\n"
  },
  {
    "id" : "0af4af6a-45d2-4b19-af42-7bae11c3ad4a",
    "prId" : 16742,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16742#pullrequestreview-48979083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c8419c9-7564-4685-a462-1b9cc5c3e2fd",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "nit: doesn't SymbolFlags have an alias defined like `SymbolFlags.All` that's equivalent?",
        "createdAt" : "2017-07-10T16:26:14Z",
        "updatedAt" : "2017-07-10T17:41:30Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "592051db-c3c4-4993-a3ec-896b7a71fde3",
        "parentId" : "6c8419c9-7564-4685-a462-1b9cc5c3e2fd",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Not currently; `All` wouldn't be a good name since that excludes some (`Constructor`, `Signature`, and everything from `ExportValue` on), but this combination is often useful; I'm tempted to just name it `ValueTypeNamespace`.",
        "createdAt" : "2017-07-10T17:44:51Z",
        "updatedAt" : "2017-07-10T17:47:07Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2686c2b38de9ce0b610a8edbda5aee443001168",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +952,956 @@        public symbolsInScope(range: Range): ts.Symbol[] {\n            const node = this.goToAndGetNode(range);\n            return this.getChecker().getSymbolsInScope(node, ts.SymbolFlags.Value | ts.SymbolFlags.Type | ts.SymbolFlags.Namespace);\n        }\n"
  },
  {
    "id" : "9d8a916d-85f9-49fc-bd15-14842d03268f",
    "prId" : 16742,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16742#pullrequestreview-48981622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbd453d1-6fb9-42fd-b904-f4fe1a11bcb3",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "can't we get this from the quick info? I don't know whether we need a separate method for comparing the stringified type of a symbol.",
        "createdAt" : "2017-07-10T16:27:15Z",
        "updatedAt" : "2017-07-10T17:41:30Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "b33bf923-f7d8-42c8-84e0-c51fa64707a8",
        "parentId" : "cbd453d1-6fb9-42fd-b904-f4fe1a11bcb3",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Well, quick info gets us the type of the symbol under the cursor -- this lets us call `getTypeOfSymbolAtLocation` on *any* symbol, at the current location.",
        "createdAt" : "2017-07-10T17:54:35Z",
        "updatedAt" : "2017-07-10T17:54:35Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2686c2b38de9ce0b610a8edbda5aee443001168",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +3715,3719 @@        }\n\n        public typeOfSymbolAtLocation(range: FourSlash.Range, symbol: ts.Symbol, expected: string) {\n            this.state.verifyTypeOfSymbolAtLocation(range, symbol, expected);\n        }"
  },
  {
    "id" : "2486ae6f-0986-48a0-96c3-e4381072e54f",
    "prId" : 16066,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16066#pullrequestreview-40289949",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9aee23d5-e81d-4ac5-8b9c-c50adfb2b11a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I don't understand why this change was made.",
        "createdAt" : "2017-05-25T07:34:01Z",
        "updatedAt" : "2017-05-31T14:52:33Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "93096a7e-f45b-4b3b-a79b-6dc5ed611611",
        "parentId" : "9aee23d5-e81d-4ac5-8b9c-c50adfb2b11a",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`importNameCodeFixUMDGlobalReact2.ts` asserts that the code fixes are currently empty. Previously this method would have raised an error \"No codefixes returned\" even if that was exactly what you were asserting.",
        "createdAt" : "2017-05-25T14:08:14Z",
        "updatedAt" : "2017-05-31T14:52:33Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1aaade7b1823c471827a07a8764c42216c58ebe6",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2389,2393 @@                    this.raiseError(\"No codefixes returned.\");\n                }\n                return;\n            }\n"
  },
  {
    "id" : "26ea4efe-7c8a-438f-b05d-e10abf17259a",
    "prId" : 13111,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/13111#pullrequestreview-14205607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cdceb21-226d-4660-9f35-404989689a04",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "👍 ",
        "createdAt" : "2016-12-22T18:22:01Z",
        "updatedAt" : "2016-12-22T18:22:01Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1f88d2fcd52aaef52b5060f35b47c9738f7f2e2",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +3525,3529 @@        }\n\n        public setOption(name: keyof ts.FormatCodeSettings, value: number | string | boolean): void {\n            this.state.formatCodeSettings[name] = value;\n        }"
  },
  {
    "id" : "d1185a43-7f2d-4dd7-b26e-9b0d8956b94a",
    "prId" : 11894,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11894#pullrequestreview-6095589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "943f1a89-b9bb-48e0-a267-e9d927dee531",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "are we using ES5's Array.map now?\n",
        "createdAt" : "2016-10-27T16:24:08Z",
        "updatedAt" : "2016-10-27T17:27:06Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb45962e20486984b3193a7cd0f2fc4a4bf6b7c2",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +692,696 @@            }\n            else if ((members && members.entries.length !== 0) && !negative) {\n                this.raiseError(`Member list is not empty at Caret:\\nMember List contains: ${stringify(members.entries.map(e => e.name))}`);\n            }\n        }"
  },
  {
    "id" : "07f86b05-a5a0-40c3-ae3a-84d3b56e9917",
    "prId" : 11894,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11894#pullrequestreview-6127974",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc8469e3-b8d0-4013-8c7f-708f826a97d6",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "same here. Are we using Array.map now?\n",
        "createdAt" : "2016-10-27T16:24:27Z",
        "updatedAt" : "2016-10-27T17:27:06Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "8b4476c1-8ea8-4788-9afe-b8881fbd201a",
        "parentId" : "dc8469e3-b8d0-4013-8c7f-708f826a97d6",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I think it should be fine since fourslash only runs when testing the compiler, not when actually compiling.\n",
        "createdAt" : "2016-10-27T16:28:50Z",
        "updatedAt" : "2016-10-27T17:27:06Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "712a1e12-8949-4251-b7a7-5930f36fec4b",
        "parentId" : "dc8469e3-b8d0-4013-8c7f-708f826a97d6",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "We can use `Array.map` now. We haven't been ES3-compatible for a while.\n",
        "createdAt" : "2016-10-27T19:21:50Z",
        "updatedAt" : "2016-10-27T19:21:50Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb45962e20486984b3193a7cd0f2fc4a4bf6b7c2",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +703,707 @@            else if (completions && completions.entries.length !== 0 && !negative) {\n                this.raiseError(`Completion list is not empty at caret at position ${this.activeFile.fileName} ${this.currentCaretPosition}\\n` +\n                    `Completion List contains: ${stringify(completions.entries.map(e => e.name))}`);\n            }\n        }"
  },
  {
    "id" : "00a97093-76b0-484b-80a7-0a38b5c1b84f",
    "prId" : 10482,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19ee4a4c-24bc-42dd-bf6d-f8b5fa955c18",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Shouldn't this duplicate-implementation check be unnecessary so long as we check off each range as being matched by the first implementation we find? Then the duplicate will go into `unmatchedImplementations`.\n",
        "createdAt" : "2016-09-12T14:12:07Z",
        "updatedAt" : "2016-09-15T19:11:16Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "4856d19f-8e07-48bc-9d81-9544e7bfa67c",
        "parentId" : "19ee4a4c-24bc-42dd-bf6d-f8b5fa955c18",
        "authorId" : "da779ea9-f350-4137-9132-97b9396586db",
        "body" : "I wanted to be explicit about the error. Otherwise it would look like that particular implementation was not returned when actually it was returned twice.\n",
        "createdAt" : "2016-09-12T18:00:55Z",
        "updatedAt" : "2016-09-15T19:11:16Z",
        "lastEditedBy" : "da779ea9-f350-4137-9132-97b9396586db",
        "tags" : [
        ]
      }
    ],
    "commit" : "29d85cd7be0fbe6960bce124d4c7dfb717c016d6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1744,1748 @@            }\n\n            for (let i = 0; i < implementations.length; i++) {\n                for (let j = 0; j < implementations.length; j++) {\n                    if (i !== j && implementationsAreEqual(implementations[i], implementations[j])) {"
  },
  {
    "id" : "a035d54d-b91a-4a1e-a49b-f07927bf60a4",
    "prId" : 10482,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "474d6b72-a6dd-477f-b9fa-d02911fae87c",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "There should be a function `referenceEntryEquals` since this seems to be used in a few places. (`maybeAdd` is another)\n",
        "createdAt" : "2016-09-13T14:27:23Z",
        "updatedAt" : "2016-09-15T19:11:16Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "50c6816e-cb8e-49be-9248-4ca101a6580a",
        "parentId" : "474d6b72-a6dd-477f-b9fa-d02911fae87c",
        "authorId" : "da779ea9-f350-4137-9132-97b9396586db",
        "body" : "`maybeAdd` is comparing two implementations while this check is comparing an implementation and a fourslash range.\n",
        "createdAt" : "2016-09-13T23:28:43Z",
        "updatedAt" : "2016-09-15T19:11:16Z",
        "lastEditedBy" : "da779ea9-f350-4137-9132-97b9396586db",
        "tags" : [
        ]
      }
    ],
    "commit" : "29d85cd7be0fbe6960bce124d4c7dfb717c016d6",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +1764,1768 @@            for (const range of ranges) {\n                const length = range.end - range.start;\n                const matchingImpl = ts.find(implementations, impl =>\n                    range.fileName === impl.fileName && range.start === impl.textSpan.start && length === impl.textSpan.length);\n                if (matchingImpl) {"
  },
  {
    "id" : "4c5d5e08-f4e2-4870-8baf-36666e279ff3",
    "prId" : 7587,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdb13f27-880e-43b7-ba41-3534bec1ce57",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Consider using a `Map<CharacterCodes>` and writing\n\n``` ts\nconst openBraceMap: Map<CharacterCodes> = {\n    \"{\": CharacterCodes.openBrace,\n     // etc.\n}\n```\n",
        "createdAt" : "2016-03-22T01:41:56Z",
        "updatedAt" : "2016-03-28T21:33:37Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "15408d87-5cb4-4dd1-9ff7-cca32d69532f",
        "parentId" : "cdb13f27-880e-43b7-ba41-3534bec1ce57",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "You should error when the test-writer accidentally gave the wrong input.\n",
        "createdAt" : "2016-03-22T01:42:25Z",
        "updatedAt" : "2016-03-28T21:33:37Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7228797878a5da87cc9cc655f9da7d813688a74",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1861,1865 @@            if (!charCode) {\n                this.raiseError(`Invalid openingBrace '${openingBrace}' specified.`);\n            }\n\n            const position = this.currentCaretPosition;"
  },
  {
    "id" : "c8776d20-a03a-434b-8da4-8975b0f4b545",
    "prId" : 7587,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a0f2ea2-ab74-4e44-bb13-8033fa7d63c9",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "For every call you're going to be creating this, so make this a static property\n",
        "createdAt" : "2016-03-25T00:10:03Z",
        "updatedAt" : "2016-03-28T21:33:37Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7228797878a5da87cc9cc655f9da7d813688a74",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1847,1851 @@        public verifyBraceCompletionAtPostion(negative: boolean, openingBrace: string) {\n\n            const openBraceMap: ts.Map<ts.CharacterCodes> = {\n                \"(\": ts.CharacterCodes.openParen,\n                \"{\": ts.CharacterCodes.openBrace,"
  },
  {
    "id" : "7fb142a6-d707-47af-9100-85bdc278dd36",
    "prId" : 4371,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "931afece-8fd9-464f-afb2-86e6cb2a3bd8",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This looks so easy to screw up (and I have, and I thought I removed these (or something like these lists) for that reason). Why not split `metadataOptionNames` into two maps, merge them into `metadataOptionNames` at runtime, and create these lists out of the maps?\n",
        "createdAt" : "2015-08-20T05:35:17Z",
        "updatedAt" : "2015-08-20T05:35:22Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "4a826302-aaf7-4ec3-968b-6103c76bdb88",
        "parentId" : "931afece-8fd9-464f-afb2-86e6cb2a3bd8",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i thought you will remove this as part of the test update.. i can remove them all, but will do that in a different change.. actually they are repeated twice, once in harness and once in fourslash, and each has a map and a switch, and each has a slightly different implantation for comparing and setting the values.\n",
        "createdAt" : "2015-08-20T05:52:48Z",
        "updatedAt" : "2015-08-20T05:52:48Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "5cff59ab-71f2-4340-8df8-f48d2bf319b7",
        "parentId" : "931afece-8fd9-464f-afb2-86e6cb2a3bd8",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "It's okay, I'll take care of it tomorrow.\n",
        "createdAt" : "2015-08-20T06:16:30Z",
        "updatedAt" : "2015-08-20T06:16:30Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "7bf88557-ebd8-4d5b-9368-c8fab4ff7301",
        "parentId" : "931afece-8fd9-464f-afb2-86e6cb2a3bd8",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "fix submitted in https://github.com/Microsoft/TypeScript/pull/4383\n",
        "createdAt" : "2015-08-20T21:32:09Z",
        "updatedAt" : "2015-08-20T21:32:09Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "f95fcf967155e91b6c0a37e2221b1412a6864c68",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +136,140 @@    let globalMetadataNames = [metadataOptionNames.allowNonTsExtensions, metadataOptionNames.baselineFile, metadataOptionNames.declaration,\n        metadataOptionNames.mapRoot, metadataOptionNames.module, metadataOptionNames.out,\n        metadataOptionNames.outDir, metadataOptionNames.sourceMap, metadataOptionNames.sourceRoot, metadataOptionNames.jsx];\n\n    function convertGlobalOptionsToCompilerOptions(globalOptions: { [idx: string]: string }): ts.CompilerOptions {"
  },
  {
    "id" : "3504339c-526a-493b-887b-67b99bcb985d",
    "prId" : 4371,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96512099-9d8e-4897-849d-3517d214bc20",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "If `globalOptions[prop]` is `undefined`, then `globalOptions[prop].toLowerCase()` above will crash. If you've provided the option itself, can you even have `undefined`?\n",
        "createdAt" : "2015-08-20T05:38:54Z",
        "updatedAt" : "2015-08-20T05:39:41Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "3b062b35-59fa-4af9-9e48-afb00bf672d4",
        "parentId" : "96512099-9d8e-4897-849d-3517d214bc20",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "that is also fixed in the other PR.\n",
        "createdAt" : "2015-08-20T22:12:03Z",
        "updatedAt" : "2015-08-20T22:12:03Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "f95fcf967155e91b6c0a37e2221b1412a6864c68",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +189,193 @@                                break;\n                            default:\n                                ts.Debug.assert(globalOptions[prop] === undefined || globalOptions[prop] === \"None\");\n                                settings.jsx = ts.JsxEmit.None;\n                                break;"
  },
  {
    "id" : "ca62be90-1189-406a-a9ba-a3d77ff4034f",
    "prId" : 4006,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a756e78-e6b1-4b5b-b943-12983cfa1c4b",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I might just make this\n\n``` TypeScript\nif (expected === undefined) {\n    if (actual) {\n        this.raiseError(name + ' failed - expected no template but got {newText: \\\"' + actual.newText + '\\\" caretOffset: ' + actual.caretOffset + '}');\n    }\n\n    return;\n}\n```\n\nThen remove the `else` block following this\n",
        "createdAt" : "2015-08-05T21:33:52Z",
        "updatedAt" : "2015-08-10T19:57:23Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "6eb8c528-ae18-44e6-9a7e-ba9e3cceb68f",
        "parentId" : "2a756e78-e6b1-4b5b-b943-12983cfa1c4b",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "The only issue is that we don't want to perform the remaining checks if both `expected === undefined` and `actual === undefined` (we'll get null-dereference errors).\n",
        "createdAt" : "2015-08-05T23:27:09Z",
        "updatedAt" : "2015-08-10T19:57:23Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "a71f259a-c806-4b93-abd2-67b47df46069",
        "parentId" : "2a756e78-e6b1-4b5b-b943-12983cfa1c4b",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Right, but the `return;` will jump out before that happens\n",
        "createdAt" : "2015-08-06T04:31:41Z",
        "updatedAt" : "2015-08-10T19:57:23Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "4f2489b3-e8d8-4d69-b7c0-b63de5559920",
        "parentId" : "2a756e78-e6b1-4b5b-b943-12983cfa1c4b",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "yup. changed that.\n",
        "createdAt" : "2015-08-06T21:43:53Z",
        "updatedAt" : "2015-08-10T19:57:23Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3f0a2a2e41c594f26e35676bdb1ad7bddc67dc7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1949,1953 @@                if (actual) {\n                    this.raiseError(name + ' failed - expected no template but got {newText: \\\"' + actual.newText + '\\\" caretOffset: ' + actual.caretOffset + '}');\n                }\n\n                return;"
  },
  {
    "id" : "363a689b-c5b3-4833-b0ea-f1c297bd229c",
    "prId" : 3974,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "752dbd9e-4730-4d57-b481-0e011f6431db",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why `public`? I'm not seeing any change in usage.\n",
        "createdAt" : "2015-07-22T04:44:46Z",
        "updatedAt" : "2015-07-23T17:54:04Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "5aea2b7f-c6c4-4dfa-a8fb-77b20f35faf4",
        "parentId" : "752dbd9e-4730-4d57-b481-0e011f6431db",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "`verifyProjectInfo()` is used at https://github.com/Microsoft/TypeScript/blob/addReferencesForFourslashInTestDir/tests/cases/fourslash/fourslash.ts#L468\n",
        "createdAt" : "2015-07-23T17:53:23Z",
        "updatedAt" : "2015-07-23T17:54:04Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "c42b9f84fe9896567f467bed996825ceb9094049",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1876,1880 @@        }\n\n        public verifyProjectInfo(expected: string[]) {\n            if (this.testType === FourSlashTestType.Server) {\n                let actual = (<ts.server.SessionClient>this.languageService).getProjectInfo("
  },
  {
    "id" : "0634fa37-01f8-429a-ac52-c7f2729681dd",
    "prId" : 3643,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "415d3dfc-0069-47ee-9e78-3aeac2a51c71",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why do any of these parameters help? You're interested n the lack of `symbol` in the list, so if `symbol` isn't in the list, then why do you care about any of the other parameters.\n",
        "createdAt" : "2015-07-01T22:32:23Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "55c8c773-9b6a-4cad-9fca-884d0034e2fb",
        "parentId" : "415d3dfc-0069-47ee-9e78-3aeac2a51c71",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "so for the completion list, I also want to make sure the following case\n\n``` typescript\nclass Foo {} -> additional parameter will be able to make sure that the list doesn't contain symbol with name Foo and of kind local class\nvar x = class Foo { /**/ } -> similar here but for kind class\n```\n\nNote: you can just pass the name if you don't care the rest\n",
        "createdAt" : "2015-07-02T04:59:44Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "4a492410-a4b1-4705-b386-3f36ed3005d7",
        "parentId" : "415d3dfc-0069-47ee-9e78-3aeac2a51c71",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Ah, I see. Got it\n",
        "createdAt" : "2015-07-02T05:17:37Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "dfd41763-24c1-42eb-871e-d137dc79d4bf",
        "parentId" : "415d3dfc-0069-47ee-9e78-3aeac2a51c71",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Fix the comment at line 709\n",
        "createdAt" : "2015-07-02T05:29:21Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "3e474f58-64ad-491b-a960-9deb5bf620e2",
        "parentId" : "415d3dfc-0069-47ee-9e78-3aeac2a51c71",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : ":cactus: \n",
        "createdAt" : "2015-07-06T18:48:33Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f16f9d129a4ffa17723930de208f563894a4ddb8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +715,719 @@         * @param expectedKind the kind of symbol (see ScriptElementKind)\n         */\n        public verifyCompletionListDoesNotContain(symbol: string, expectedText?: string, expectedDocumentation?: string, expectedKind?: string) {\n            let that = this;\n            function filterByTextOrDocumentation(entry: ts.CompletionEntry) {"
  },
  {
    "id" : "af19e8da-eeae-44cf-bec6-10dd6329955e",
    "prId" : 3529,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57144cfc-5e78-4b23-b416-4382d7262192",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i would switch them to just `if( expectedDocumentation)` and please remove comments\n",
        "createdAt" : "2015-06-18T04:40:47Z",
        "updatedAt" : "2015-06-18T04:40:47Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "483f3068-6662-4f8b-aaa1-ee483def9208",
        "parentId" : "57144cfc-5e78-4b23-b416-4382d7262192",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : ":+1: remove these comments. If these were causing issues, discuss in person with someone else on the team.\n",
        "createdAt" : "2015-06-18T05:34:51Z",
        "updatedAt" : "2015-06-18T05:34:51Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d5dcf0d0c2c5ba990d6dfa91cd2a45326b81a60",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +832,836 @@                    assert.notEqual(actualQuickInfoText, expectedText, this.messageAtLastKnownMarker(\"quick info text\"));\n                }\n                // TODO: should be '==='?\n                if (expectedDocumentation != undefined) {\n                    assert.notEqual(actualQuickInfoDocumentation, expectedDocumentation, this.messageAtLastKnownMarker(\"quick info doc comment\"));"
  },
  {
    "id" : "a97f4dc9-5dd9-43fa-b743-db2d7e5baf21",
    "prId" : 3307,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3ce5892-724a-4fd8-94ae-0175cf742cc8",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Is the list of files always guaranteed to be in a certain order?  As you just join the list and compare the string without sorting, this test may be fragile if the order ever changes.  May want to sort first.\n",
        "createdAt" : "2015-06-03T02:36:08Z",
        "updatedAt" : "2015-06-03T02:36:08Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "16c3faa5-4796-4d22-b879-1d32d8f31eb0",
        "parentId" : "e3ce5892-724a-4fd8-94ae-0175cf742cc8",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "This is intended because @mhegazy told me that the sequence of the files is important too, so we should also check if the sequence matches expected. \n",
        "createdAt" : "2015-06-03T02:42:11Z",
        "updatedAt" : "2015-06-03T02:42:11Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      },
      {
        "id" : "b75c869d-5fb4-4291-9971-45347e58d8db",
        "parentId" : "e3ce5892-724a-4fd8-94ae-0175cf742cc8",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "File order matter, it should be the reference/import resolution order or the order of files in tsconfig.\n",
        "createdAt" : "2015-06-03T06:06:01Z",
        "updatedAt" : "2015-06-03T06:06:01Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7550dbba170ee1e1fcda83354c593526cfad223",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1829,1833 @@                    actual.fileNameList.map( file => {\n                        return file.replace(this.basePath + \"/\", \"\")\n                        }).join(\",\")\n                    );\n            }"
  },
  {
    "id" : "c75f96b5-49ea-4fd0-9e3a-7ade7386ff77",
    "prId" : 3093,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39a50ae3-3ff1-41d1-98a9-77fc2963a8d0",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "You can consider just performing this once in a variable prior to the switch, and then using that variable in the appropriate locations.\n",
        "createdAt" : "2015-05-08T21:03:40Z",
        "updatedAt" : "2015-05-08T21:03:40Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6979d80dca0dc17baaf5560b27fec749a856d64",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +145,149 @@                switch (prop) {\n                    case metadataOptionNames.allowNonTsExtensions:\n                        settings.allowNonTsExtensions = globalOptions[prop] === \"true\";\n                        break;\n                    case metadataOptionNames.declaration:"
  },
  {
    "id" : "097fe581-dda0-4c69-bf90-8f1e91fd408b",
    "prId" : 2949,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7ca5846-5acd-4b0b-9aa7-a124938e1219",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "This looks so c-like, can we just turn it into a clouser?\n",
        "createdAt" : "2015-04-29T01:44:44Z",
        "updatedAt" : "2015-04-29T01:44:44Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "97cd07d1d432daae2d85254d9f331846ae886e7f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2197,2201 @@    let fourslashJsOutput: string;\n    {\n        let host = Harness.Compiler.createCompilerHost([{ unitName: Harness.Compiler.fourslashFileName, content: undefined }],\n            (fn, contents) => fourslashJsOutput = contents,\n            ts.ScriptTarget.Latest,"
  },
  {
    "id" : "5550fb1b-6693-46cb-8075-212fcb381536",
    "prId" : 2396,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d67e2933-990c-43d4-bfd9-45fa02afa0cd",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Why we no longer need to check if `completions.entries` is defined?\n",
        "createdAt" : "2015-03-17T23:44:35Z",
        "updatedAt" : "2015-03-18T19:27:32Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "ca9bb333-56f0-4ac1-a2dd-bfefe10f724b",
        "parentId" : "d67e2933-990c-43d4-bfd9-45fa02afa0cd",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "My understanding is `completions` can be `undefined` but `entries` is non-optional. Can @mhegazy weigh in on the accuracy of this?\n",
        "createdAt" : "2015-03-18T06:47:59Z",
        "updatedAt" : "2015-03-18T19:27:32Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "d70760d5-d1e4-4da0-9e11-ec120874bf2e",
        "parentId" : "d67e2933-990c-43d4-bfd9-45fa02afa0cd",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This seems to be the case.\n",
        "createdAt" : "2015-03-18T19:26:37Z",
        "updatedAt" : "2015-03-18T19:27:32Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee073e19f08c623e22f51e3bc557d1286d960111",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +705,709 @@\n            var completions = this.getCompletionListAtCaret();\n            if (completions && completions.entries.filter(e => e.name === symbol).length !== 0) {\n                this.raiseError('Completion list did contain ' + symbol);\n            }"
  },
  {
    "id" : "e8949fad-bdbe-4f08-b918-26a8bf220c29",
    "prId" : 1937,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ae8e316-1f76-4b43-8566-ebde3e6ba827",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`path.join`\n",
        "createdAt" : "2015-02-05T06:12:54Z",
        "updatedAt" : "2015-02-09T17:31:29Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9207d9dd222345e95aec9fec500b4e2270229a42",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +329,333 @@                    // Fourslash insert tests/cases/fourslash into inputFile.unitName and import statement doesn't require \".ts\"\n                    // so convert them before making appropriate comparison\n                    var importedFilePath = this.basePath + '/' + importedFile.fileName + \".ts\";\n                    this.addMatchedInputFile(importedFilePath);\n                });"
  },
  {
    "id" : "7fc07723-fcb1-4fd2-b229-25ec1df7b54c",
    "prId" : 1700,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e52cedc-0ef4-4a33-a324-bf931dc70f99",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "What's the difference between this and `getLineAndCharacterOfPosition`?\n",
        "createdAt" : "2015-01-17T03:17:33Z",
        "updatedAt" : "2015-02-03T19:34:08Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "c8d876cd-a18a-40ff-a3b6-3a93579e5151",
        "parentId" : "9e52cedc-0ef4-4a33-a324-bf931dc70f99",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "`computeLineAndCharacterOfPosition` accepts lineMap as `number[]` and use it to compute line and character. `getLineAndCharacterOfPosition` accepts `SourceFile`, picks lineMap from the file (and initializes it if it was not yet created) and then invokes `computeLineAndCharacterOfPosition`\n",
        "createdAt" : "2015-01-18T02:24:45Z",
        "updatedAt" : "2015-02-03T19:34:08Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "45defa87418a9dd9da62c28510d302b3961d0a7e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +389,393 @@\n            var lineStarts = ts.computeLineStarts(this.getCurrentFileContent());\n            var lineCharPos = ts.computeLineAndCharacterOfPosition(lineStarts, pos);\n            this.scenarioActions.push('<MoveCaretToLineAndChar LineNumber=\"' + lineCharPos.line + '\" CharNumber=\"' + lineCharPos.character + '\" />');\n        }"
  },
  {
    "id" : "d1800ca4-65d7-4b90-b00c-9cb12523cd04",
    "prId" : 1431,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6aeb359-25ca-45e7-b400-68160fc48340",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Maybe `Debug.assert` it's only `undefined` or `None`.\n",
        "createdAt" : "2014-12-10T20:15:50Z",
        "updatedAt" : "2014-12-12T01:00:47Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f6bb5713741fc93f23cb82f98faf5c46e7c9563",
    "line" : null,
    "diffHunk" : "@@ -1,1 +170,174 @@                            ts.Debug.assert(globalOptions[prop] === undefined || globalOptions[prop] === \"None\");\n                            settings.module = ts.ModuleKind.None;\n                            break;\n                        }\n                        break;"
  },
  {
    "id" : "56917653-80ea-42d5-89cf-4caab53bc4f3",
    "prId" : 495,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "383b3162-3fc1-4e89-8a0b-243c2602fc8d",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Since we are storing this, should not we store the canonical name anyways\n",
        "createdAt" : "2014-08-21T19:43:43Z",
        "updatedAt" : "2014-08-21T20:03:22Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ac377cc7626c786bacbe9a78b0dd85dfb75d3db",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1901,1905 @@        files[ts.getCanonicalFileName(fourslashFilename)] = fourslashSourceFile;\n        files[ts.getCanonicalFileName(fileName)] = ts.createSourceFile(fileName, content, ts.ScriptTarget.ES5, /*version*/ 0, /*isOpen*/ false);\n        files[ts.getCanonicalFileName(Harness.Compiler.defaultLibFileName)] = Harness.Compiler.defaultLibSourceFile;\n\n        var host = Harness.Compiler.createCompilerHost(files, (fn, contents) => result = contents);"
  }
]