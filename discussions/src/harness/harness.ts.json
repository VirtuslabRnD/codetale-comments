[
  {
    "id" : "5f9df7c7-d3fa-40bd-902e-d9a1db2bd547",
    "prId" : 24874,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24874#pullrequestreview-127762771",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14de7d96-0790-4007-8c02-f7c94765abea",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "If `symlinks` were a `vfs.FileSet`, you could just call `fs.apply(symlinks)`.",
        "createdAt" : "2018-06-11T22:22:01Z",
        "updatedAt" : "2018-06-12T19:06:39Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "67390298d972e0cb6ab77051dcc01ebb0819c8fd",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1220,1224 @@            const docs = inputFiles.concat(otherFiles).map(documents.TextDocument.fromTestFile);\n            const fs = vfs.createFromFileSystem(IO, !useCaseSensitiveFileNames, { documents: docs, cwd: currentDirectory });\n            if (symlinks) {\n                fs.apply(symlinks);\n            }"
  },
  {
    "id" : "027e675c-bb42-4a8a-9c6a-e80adbf85329",
    "prId" : 22167,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22167#pullrequestreview-117694713",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61de544c-1584-4bac-bfc1-ddab83247190",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Why filter these?",
        "createdAt" : "2018-05-04T16:59:50Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "4316ba74-fd6b-42db-a8da-359d641d46ba",
        "parentId" : "61de544c-1584-4bac-bfc1-ddab83247190",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Because json files arent provided as fileNames but only picked during module resolution",
        "createdAt" : "2018-05-04T17:39:19Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4143ae0c15acae0015f5aa00e8e2391ef156388",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1218,1222 @@\n            const useCaseSensitiveFileNames = options.useCaseSensitiveFileNames !== undefined ? options.useCaseSensitiveFileNames : true;\n            const programFileNames = inputFiles.map(file => file.unitName).filter(fileName => !ts.fileExtensionIs(fileName, ts.Extension.Json));\n\n            // Files from built\\local that are requested by test \"@includeBuiltFiles\" to be in the context."
  },
  {
    "id" : "b3d1d2d6-aaa5-4cb0-8e09-c6bfa64bc5e9",
    "prId" : 20429,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20429#pullrequestreview-82048119",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0abe824f-6c76-480a-a2cb-bdeb9c24c67c",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I have no idea if we have any tests which could trigger this (probably not), but `NaN === NaN` is false, but I'd generally say one would expect `{ x: NaN }` to deep equal `{ x: NaN }`; ergo there should probably be a clause `if (a !== a && b !== b) return true;`.  Probably a pointless remark unless we start testing more `NaN`y edgecases, though.",
        "createdAt" : "2017-12-08T01:42:22Z",
        "updatedAt" : "2017-12-08T01:42:44Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c929015d65372eb41375be9ba8ad24e38fa3ee9",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +67,71 @@\n    function isDeepEqual<T>(a: T, b: T): boolean {\n        if (a === b) {\n            return true;\n        }"
  },
  {
    "id" : "ce38a20e-4c50-45fb-8d63-c5e73b4a238e",
    "prId" : 19695,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19695#pullrequestreview-75277498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31073731-1725-4451-b737-46b7c6b8daa8",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "This is C# naming, not JavaScript naming.",
        "createdAt" : "2017-11-03T02:23:47Z",
        "updatedAt" : "2017-11-03T02:23:47Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "c262f454-84cf-4bdc-819a-ec5ca2ba3e19",
        "parentId" : "31073731-1725-4451-b737-46b7c6b8daa8",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This isn't a public interface, thus won't affect external users.\r\nYou might want to make a pull request to tslint if this still bothers you. Then you could make a pull request here once that's published.",
        "createdAt" : "2017-11-03T02:40:02Z",
        "updatedAt" : "2017-11-03T02:40:02Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "bc73fade-2452-4782-8f1e-007571fb6d28",
        "parentId" : "31073731-1725-4451-b737-46b7c6b8daa8",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Naming conventions are important for collaboration, maintainability.\r\n\r\nI don't think your workaround would work. My suggestion would be to place `// tslint:disable-next-line` on it.",
        "createdAt" : "2017-11-03T14:57:53Z",
        "updatedAt" : "2017-11-03T14:57:53Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "c7ed2269-63d4-4dc9-8a98-9b1046e3896a",
        "parentId" : "31073731-1725-4451-b737-46b7c6b8daa8",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Why don't you think making a pull request to tslint would work?",
        "createdAt" : "2017-11-03T15:00:56Z",
        "updatedAt" : "2017-11-03T15:00:56Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "c28a205a-bcb4-447e-a440-c6714155c959",
        "parentId" : "31073731-1725-4451-b737-46b7c6b8daa8",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Late to the party, but we aren't using `IO` as an **I**nterface prefix here for an `O` type, but `IO` meaning **I**nput/**O**utput, so this rule should have been disabled here rather than enforced on the `IO` and `IOLog` interfaces. It's also cumbersome that we have `Harness.IO` the value and `Harness.Io` the type.",
        "createdAt" : "2017-11-08T22:48:30Z",
        "updatedAt" : "2017-11-08T22:48:41Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ad908c7fbb21533c499a152c83ea48bd3a04f4b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +503,507 @@        getEnvironmentVariable?(name: string): string;\n    }\n    export let IO: Io;\n\n    // harness always uses one kind of new line"
  },
  {
    "id" : "a5d0ab0a-4522-455f-898e-7bd4840d8916",
    "prId" : 19506,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19506#pullrequestreview-72336017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1a546a2-72b4-4658-aac4-e4582edb7fb1",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "should we use a custom handler helper assert function instead? it will be hard to debug why it behaves a certain way.. ",
        "createdAt" : "2017-10-26T20:49:01Z",
        "updatedAt" : "2017-10-26T20:49:01Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9b0bfa654e8bf4ab6fd2b1022db420a32332e49",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +35,39 @@// chai's builtin `assert.isFalse` is featureful but slow - we don't use those features,\n// so we'll just overwrite it as an alterative to migrating a bunch of code off of chai\nassert.isFalse = (expr, msg) => { if (expr as any as boolean !== false) throw new Error(msg); };\ndeclare var __dirname: string; // Node-specific\nvar global: NodeJS.Global = <any>Function(\"return this\").call(undefined);"
  },
  {
    "id" : "e4f78261-dc5c-4a4a-9165-756a98889e04",
    "prId" : 18416,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18416#pullrequestreview-62842325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97c4664a-37c7-4b93-a7e5-b88f3cc76622",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "why can't we use for-of? Is it that we target es5, or because es6's spec doesn't support it?",
        "createdAt" : "2017-09-14T15:42:53Z",
        "updatedAt" : "2017-09-14T23:12:14Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "915ca6b1-8d91-47a1-a39c-f4653f1f3d3e",
        "parentId" : "97c4664a-37c7-4b93-a7e5-b88f3cc76622",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "We do not compile with `--downlevelIteration` on (and we do not include a `Symbol.iterator` polyfill)",
        "createdAt" : "2017-09-14T18:20:25Z",
        "updatedAt" : "2017-09-14T23:12:14Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b392a3fe7f83bf6091c8e2ad0041fdae63622a73",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1294,1298 @@            let outputLines = \"\";\n            const gen = iterateErrorBaseline(inputFiles, diagnostics, pretty);\n            for (let {done, value} = gen.next(); !done; { done, value } = gen.next()) {\n                const [, content] = value;\n                outputLines += content;"
  },
  {
    "id" : "97669792-99aa-4ba7-880e-54565e42de2a",
    "prId" : 18416,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18416#pullrequestreview-62844930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "daa985e0-bd6e-4f4c-9fe0-672e5fbf499b",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "looks like return type of `generateContent` would be better as `IterableIterator<[string, string, number | undefined]>`.",
        "createdAt" : "2017-09-14T15:53:02Z",
        "updatedAt" : "2017-09-14T23:12:14Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "81cf412b-7ad3-478c-aa10-8c236921220d",
        "parentId" : "daa985e0-bd6e-4f4c-9fe0-672e5fbf499b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "An `IterableIterator<[string, string]>` is not assignable to an `IterableIterator<[string, string, number | undefined]>`, unfortunately. Tuple optionality would be nice.",
        "createdAt" : "2017-09-14T18:28:43Z",
        "updatedAt" : "2017-09-14T23:12:14Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b392a3fe7f83bf6091c8e2ad0041fdae63622a73",
    "line" : 261,
    "diffHunk" : "@@ -1,1 +2068,2072 @@        }\n\n        export function runMultifileBaseline(relativeFileBase: string, extension: string, generateContent: () => IterableIterator<[string, string, number]> | IterableIterator<[string, string]>, opts?: BaselineOptions, referencedExtensions?: string[]): void {\n            const gen = generateContent();\n            const writtenFiles = ts.createMap<true>();"
  },
  {
    "id" : "d12e79aa-3305-4b0b-a14b-c1158e6df85e",
    "prId" : 18416,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18416#pullrequestreview-62803522",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "090c8e6d-0b8a-4125-a2a3-83c3898a6b7d",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "do we still need the non-multifile mode? why not get rid of it?",
        "createdAt" : "2017-09-14T15:56:20Z",
        "updatedAt" : "2017-09-14T23:12:14Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "7a93e3ff-f047-49b6-a10e-f29128a77abc",
        "parentId" : "090c8e6d-0b8a-4125-a2a3-83c3898a6b7d",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "We use the non-multifile mode for the compiler runner, still. Which is probably a good thing, since those tests are small.",
        "createdAt" : "2017-09-14T16:07:32Z",
        "updatedAt" : "2017-09-14T23:12:14Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b392a3fe7f83bf6091c8e2ad0041fdae63622a73",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +1515,1519 @@                    baselinePath.replace(/\\.tsx?/, \"\") : baselinePath;\n\n                if (!multifile) {\n                    const fullBaseLine = generateBaseLine(fullResults, isSymbolBaseLine);\n                    Harness.Baseline.runBaseline(outputFileName + fullExtension, () => fullBaseLine, opts);"
  },
  {
    "id" : "c57aff09-0b07-4ae8-b7ae-356822f0ec5d",
    "prId" : 18416,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18416#pullrequestreview-62803701",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c44338b-9234-4b1b-9cac-c357c5742437",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "did you switch to `string` from `string[]` because string concatenation is fast enough in JS?",
        "createdAt" : "2017-09-14T15:58:57Z",
        "updatedAt" : "2017-09-14T23:12:14Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "be1bc7cc-f68e-4cf4-96ba-c5b3fe9deea5",
        "parentId" : "9c44338b-9234-4b1b-9cac-c357c5742437",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Not fast enough, but [_faster_](https://stackoverflow.com/questions/7299010/why-is-string-concatenation-faster-than-array-join).",
        "createdAt" : "2017-09-14T16:08:06Z",
        "updatedAt" : "2017-09-14T23:12:14Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b392a3fe7f83bf6091c8e2ad0041fdae63622a73",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +1537,1541 @@\n            function *iterateBaseLine(typeWriterResults: ts.Map<TypeWriterResult[]>, isSymbolBaseline: boolean): IterableIterator<[string, string]> {\n                let typeLines = \"\";\n                const typeMap: { [fileName: string]: { [lineNum: number]: string[]; } } = {};\n                const dupeCase = ts.createMap<number>();"
  },
  {
    "id" : "922f502d-b0f3-4a55-bbd2-8212a63268b0",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06c3f57d-4b8b-4396-be95-f01e81c3ead2",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Why is this important?",
        "createdAt" : "2017-06-06T21:52:26Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +1841,1845 @@                if (ts.getBaseFileName(data.name).toLowerCase() === \"tsconfig.json\") {\n                    const configJson = ts.parseJsonText(data.name, data.content);\n                    assert.isTrue(configJson.endOfFileToken !== undefined);\n                    let baseDir = ts.normalizePath(ts.getDirectoryPath(data.name));\n                    if (rootDir) {"
  },
  {
    "id" : "fa4f3a47-4533-4efc-b8f7-ec697962897b",
    "prId" : 9628,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99c32eb5-d235-4f16-b19c-87dafc6e2ce4",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "do not think you need all these `/// <reference` tags any more now that you have the tsconfig.json.\n",
        "createdAt" : "2016-07-12T00:08:14Z",
        "updatedAt" : "2016-07-12T00:43:01Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "967b3453-2d9b-4d08-aa42-14fed2da84dd",
        "parentId" : "99c32eb5-d235-4f16-b19c-87dafc6e2ce4",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Strictly speaking you should not, since it's in the config file. Not for the compilation, anyway. However for the editor experience, if the editor starts from the unittests folder and walks back to the harness (via the /// ref in the unittest), it doesn't always see the tsconfig in the harness folder and associate the unittest with that project (so adding the references into the harness file which gets included in all unittests covers it, making the editor experience without it finding the right tsconfig acceptable).\n\nOnly did this because it happened to me when reopening the editor while working on this.\n",
        "createdAt" : "2016-07-12T00:12:14Z",
        "updatedAt" : "2016-07-12T00:43:01Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "a7e3163b-3f5b-4578-82c5-7be809d746dd",
        "parentId" : "99c32eb5-d235-4f16-b19c-87dafc6e2ce4",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "maybe we should move the unit tests to the harness folder. I just got lazy when we moved the code to github and did not move them.\n",
        "createdAt" : "2016-07-12T00:16:28Z",
        "updatedAt" : "2016-07-12T00:43:01Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "c8b45d14-2a03-4d1c-9488-bfe71722451e",
        "parentId" : "99c32eb5-d235-4f16-b19c-87dafc6e2ce4",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I can do that. It would make the structure look more sane, too.\n",
        "createdAt" : "2016-07-12T00:18:54Z",
        "updatedAt" : "2016-07-12T00:43:01Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "697f1b35-ffb9-41ef-ad81-0cb7a5283e7c",
        "parentId" : "99c32eb5-d235-4f16-b19c-87dafc6e2ce4",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "yup. back then there were only two of them, and we were planning to remove them.. but now we have much more :)\n",
        "createdAt" : "2016-07-12T00:20:31Z",
        "updatedAt" : "2016-07-12T00:43:01Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "cfe3aadeb34e535564796f719d8841ab82886538",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +22,26 @@/// <reference path=\"runnerbase.ts\"/>\n/// <reference path=\"virtualFileSystem.ts\" />\n/// <reference types=\"node\" />\n/// <reference types=\"mocha\" />\n/// <reference types=\"chai\" />"
  },
  {
    "id" : "756b7548-d3c8-48d6-9b57-880e2866b297",
    "prId" : 5690,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f9d0782-3f87-412b-afdd-1737e25075e6",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : ":laughing: \n",
        "createdAt" : "2015-11-16T23:16:24Z",
        "updatedAt" : "2015-11-17T00:24:03Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "aa7774cd-052c-440a-a614-12908bdc2ebb",
        "parentId" : "6f9d0782-3f87-412b-afdd-1737e25075e6",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "yes, it is good that we've not done `var` -> `const` conversion first, otherwise we'll have to deal with \"inconstiants\"\n",
        "createdAt" : "2015-11-16T23:18:13Z",
        "updatedAt" : "2015-11-17T00:24:03Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "f67a8495-6297-4d1b-a30b-0a378e587714",
        "parentId" : "6f9d0782-3f87-412b-afdd-1737e25075e6",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : ":100: \n",
        "createdAt" : "2015-11-16T23:28:32Z",
        "updatedAt" : "2015-11-17T00:24:03Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "076d65e1cf261277692591c33c5f4978c57c36d1",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +815,819 @@            sourceText: string,\n            languageVersion: ts.ScriptTarget) {\n            // We'll only assert invariants outside of light mode. \n            const shouldAssertInvariants = !Harness.lightMode;\n"
  },
  {
    "id" : "32332801-8660-4a10-8056-c6d2aa1c86fb",
    "prId" : 5690,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a15dbe3-0d81-4bfd-98ca-d9d0a949dabf",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This is sort of weird; is there any reason we don't just define an interface? I guess it's a decent way to use intersection types.\n",
        "createdAt" : "2015-11-16T23:30:21Z",
        "updatedAt" : "2015-11-17T00:24:03Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "076d65e1cf261277692591c33c5f4978c57c36d1",
    "line" : 205,
    "diffHunk" : "@@ -1,1 +984,988 @@            currentDirectory: string): CompilationOutput {\n\n            const options: ts.CompilerOptions & HarnessOptions = compilerOptions ? ts.clone(compilerOptions) : { noResolve: false };\n            options.target = options.target || ts.ScriptTarget.ES3;\n            options.module = options.module || ts.ModuleKind.None;"
  },
  {
    "id" : "12c84306-c066-449b-ba75-6c4894d559fe",
    "prId" : 5690,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5292f990-126c-471f-bbf3-fb13b45d3bef",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "It makes me uncomfortable that the reason this works is that the \"falsey\" versions are also the defaults\n",
        "createdAt" : "2015-11-16T23:31:36Z",
        "updatedAt" : "2015-11-17T00:24:03Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "79d084e3-8b9d-439e-9625-b07ee2a3e9ac",
        "parentId" : "5292f990-126c-471f-bbf3-fb13b45d3bef",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "I think the defaults are falsey on purpose, so we wouldn't break this without breaking something else (not that it's really an improvement per se)\n",
        "createdAt" : "2015-11-18T05:49:16Z",
        "updatedAt" : "2015-11-18T05:49:16Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "076d65e1cf261277692591c33c5f4978c57c36d1",
    "line" : 208,
    "diffHunk" : "@@ -1,1 +987,991 @@            options.target = options.target || ts.ScriptTarget.ES3;\n            options.module = options.module || ts.ModuleKind.None;\n            options.newLine = options.newLine || ts.NewLineKind.CarriageReturnLineFeed;\n            options.noErrorTruncation = true;\n            options.skipDefaultLibCheck = true;"
  },
  {
    "id" : "bfd5ef2c-3e40-4213-b11b-b264d8aedb6a",
    "prId" : 5690,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a4ef539-0feb-4c1a-9a92-2c3c7ce1bc2c",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "this should be `includeBuildFiles`\n",
        "createdAt" : "2015-11-16T23:35:38Z",
        "updatedAt" : "2015-11-17T00:24:03Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "076d65e1cf261277692591c33c5f4978c57c36d1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1005,1009 @@            // Files from built\\local that are requested by test \"@includeBuiltFiles\" to be in the context.\n            // Treat them as library files, so include them in build, but not in baselines.\n            if (options.includeBuiltFile) {\n                const builtFileName = ts.combinePaths(libFolder, options.includeBuiltFile);\n                const builtFile: TestFile = {"
  },
  {
    "id" : "922cda97-cec3-4871-971e-a0715ffd39c3",
    "prId" : 4383,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27650c93-cc76-449f-aea7-c7d8d86c6fc6",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Maybe to keep these in sync with `reset`, the constructor should call `reset`\n",
        "createdAt" : "2015-08-20T22:01:19Z",
        "updatedAt" : "2015-09-15T19:48:04Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c735a98523e112ccb1e7a45fc854fb3e21327939",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1016,1020 @@            private inputFiles: { unitName: string; content: string }[] = [];\n            private compileOptions: ts.CompilerOptions;\n            private settings: Harness.TestCaseParser.CompilerSettings = {};\n\n            private lastErrors: ts.Diagnostic[];"
  },
  {
    "id" : "bd7cbb0d-8318-4297-95aa-765685dda313",
    "prId" : 4383,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa9b51c8-f733-42c1-922a-e26d317f5d04",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`forEach` or `.forEach`? I always forget what the rule is for the harness\n",
        "createdAt" : "2015-08-20T22:02:02Z",
        "updatedAt" : "2015-09-15T19:48:04Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "5daa6258-649b-4c2a-abff-2cc3802c3935",
        "parentId" : "aa9b51c8-f733-42c1-922a-e26d317f5d04",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "this did not change here.. that was just moving code around\n",
        "createdAt" : "2015-08-21T22:49:07Z",
        "updatedAt" : "2015-09-15T19:48:04Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "c735a98523e112ccb1e7a45fc854fb3e21327939",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1035,1039 @@\n            public addInputFiles(files: { unitName: string; content: string }[]) {\n                files.forEach(file => this.addInputFile(file));\n            }\n"
  },
  {
    "id" : "70aa9123-7693-4f68-bd4c-7947b0d28e14",
    "prId" : 4352,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6465f1b6-ca7a-4f55-b9a9-43e0031a960e",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can you add a comment\n",
        "createdAt" : "2015-08-20T23:21:57Z",
        "updatedAt" : "2015-08-24T22:53:54Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab6fe49d56b948054bf6ec4bfd885ad77e335f40",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1055,1059 @@                                        // Changing all module names to relative will be a major overhaul in code (but we'll do this anyway) so  as a temporary measure \n                                        // we'll use ts.ModuleResolutionKind.Classic for CommonJS modules.\n                                        options.moduleResolution = ts.ModuleResolutionKind.Classic;\n                                    }\n                                } else if (setting.value.toLowerCase() === \"system\") {"
  },
  {
    "id" : "3dfde98b-f77d-4d7e-bee0-e6c6c954f26f",
    "prId" : 3049,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e36b989d-dc17-467b-9e34-2b6befa59bc4",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "This comment seems wrong now.  also, why did this change?\n",
        "createdAt" : "2015-06-04T00:00:20Z",
        "updatedAt" : "2015-06-15T03:07:39Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "e3207004-5e98-4643-ae30-5c7e3a6d337f",
        "parentId" : "e36b989d-dc17-467b-9e34-2b6befa59bc4",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "We were just passing `!Harness.lightMode` everywhere anyway. I can change it back.\n",
        "createdAt" : "2015-06-04T00:47:11Z",
        "updatedAt" : "2015-06-15T03:07:39Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2fa08b2cec27983b6bd4763cc8483daff570ec1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +817,821 @@            const shouldAssertInvariants = !Harness.lightMode;\n            \n            // Only set the parent nodes if we're asserting invariants.  We don't need them otherwise.\n            var result = ts.createSourceFile(fileName, sourceText, languageVersion, /*setParentNodes:*/ shouldAssertInvariants);\n"
  },
  {
    "id" : "4629d6eb-1a6f-472f-9072-7d36b6bcdeec",
    "prId" : 3049,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7df779cb-4a8e-4459-88f2-df4d6616c7c5",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "We probably don't want this as a global.  Instead, decide this on a test by test basis.\n",
        "createdAt" : "2015-06-04T00:58:29Z",
        "updatedAt" : "2015-06-15T03:07:39Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "595b1543-d356-4b7f-b96c-e6dec8354098",
        "parentId" : "7df779cb-4a8e-4459-88f2-df4d6616c7c5",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Since light mode only skips invariant checking now, I don't think this suggestion applies anymore.\n",
        "createdAt" : "2015-06-13T00:55:35Z",
        "updatedAt" : "2015-06-15T03:07:39Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2fa08b2cec27983b6bd4763cc8483daff570ec1",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +734,738 @@    // Settings \n    export let userSpecifiedRoot = \"\";\n    export let lightMode = false;\n\n    /** Functionality for compiling TypeScript code */"
  },
  {
    "id" : "3b21d262-540e-45ec-aced-1ae849e6eef0",
    "prId" : 3049,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8531cea1-8841-401c-aba3-e09feebb727f",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "check for a lightMode setting here.\n",
        "createdAt" : "2015-06-04T00:59:24Z",
        "updatedAt" : "2015-06-15T03:07:39Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2fa08b2cec27983b6bd4763cc8483daff570ec1",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +1162,1166 @@                            options.inlineSourceMap = setting.value === 'true';\n                            break;\n\n                        case 'inlinesources':\n                            options.inlineSources = setting.value === 'true';"
  },
  {
    "id" : "645223e7-7301-427a-b579-ff2dec6eb78a",
    "prId" : 2599,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26b8b758-9b0f-4e66-b5f6-ac3e1c446eee",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Keep space before {\n",
        "createdAt" : "2015-04-03T22:01:18Z",
        "updatedAt" : "2015-04-06T20:39:04Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d5d10a11126ed822bea8d4867e7a3d9847d226a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +782,786 @@            public reset() { this.fileCollection = {}; }\n\n            public toArray(): { fileName: string; file: WriterAggregator; }[]{\n                var result: { fileName: string; file: WriterAggregator; }[] = [];\n                for (var p in this.fileCollection) {"
  },
  {
    "id" : "46b7a96e-1c86-4f4b-9c44-3efdc98cc949",
    "prId" : 2532,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b27c7aa5-aab5-41cb-ab94-acd010b1ec83",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Curlies\n",
        "createdAt" : "2015-03-27T20:36:02Z",
        "updatedAt" : "2015-03-27T23:14:22Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8e4f27e50448579e7775bfe0eaf442c3573e5fd",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1712,1716 @@    }\n\n    if (Error) (<any>Error).stackTraceLimit = 1;\n}\n"
  },
  {
    "id" : "76f7c134-1709-417c-a761-7e5aacab0f15",
    "prId" : 1894,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bf5b4e7-d6c3-4de8-9b9d-2d2009344478",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Why are these capitalized?\n",
        "createdAt" : "2015-02-03T20:31:21Z",
        "updatedAt" : "2015-02-03T23:40:01Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "40b6c3b5-f424-4803-b5d4-908f12dd47cf",
        "parentId" : "2bf5b4e7-d6c3-4de8-9b9d-2d2009344478",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "I just try to keep with the style\n",
        "createdAt" : "2015-02-03T20:37:53Z",
        "updatedAt" : "2015-02-03T23:40:01Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "78efa9748403ee37f27b9f49fdaa5ada2e0f6473",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1570,1574 @@            LineEndingSensitive?: boolean;\n            Subfolder?: string;\n            Baselinefolder?: string;\n        }\n"
  },
  {
    "id" : "a2065983-9117-4f82-9a7d-b21a280d45b2",
    "prId" : 1894,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f21130c-00bc-41d7-a879-373f2ffdcc28",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Why not just always take the baselineFolder and just have each runner pass in the right thing?\n",
        "createdAt" : "2015-02-03T20:35:36Z",
        "updatedAt" : "2015-02-03T23:40:01Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "a06ef473-4e48-422d-b72c-620b5f985204",
        "parentId" : "9f21130c-00bc-41d7-a879-373f2ffdcc28",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Compiler Runner/project runner/ fourslash runner don't need that.\n",
        "createdAt" : "2015-02-03T21:43:28Z",
        "updatedAt" : "2015-02-03T23:40:01Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "78efa9748403ee37f27b9f49fdaa5ada2e0f6473",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1575,1579 @@        export function localPath(fileName: string, baselineFolder?: string, subfolder?: string) {\n            if (baselineFolder === undefined) {\n                return baselinePath(fileName, 'local', 'tests/baselines', subfolder);\n            }\n            else {"
  },
  {
    "id" : "f554364c-15c7-47f2-9532-c96b6a19ee9c",
    "prId" : 1731,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09507463-1dfb-4080-9596-5fb5cc0bfeda",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "should not we check if buffer is available or that we are running on node before using this?\n",
        "createdAt" : "2015-01-20T05:52:08Z",
        "updatedAt" : "2015-01-20T21:57:56Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "afa3fca0-a3bd-4f49-bb69-81c84c314f7e",
        "parentId" : "09507463-1dfb-4080-9596-5fb5cc0bfeda",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Browserify provides it, but it uses typed arrays. You might need to `require(\"buffer\")` if you use it.\n",
        "createdAt" : "2015-01-20T08:48:28Z",
        "updatedAt" : "2015-01-20T21:57:56Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "8608f023-21b8-4ade-87e7-7e3834a35b65",
        "parentId" : "09507463-1dfb-4080-9596-5fb5cc0bfeda",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "This Buffer is the native node buffer. Though browserify version will be nicer as we can run in browser too. There will be additional installation to use it so I will let everyone know once checkin\n\nEdit: You don't need additional install. Browserify should have it in there\n",
        "createdAt" : "2015-01-20T18:15:42Z",
        "updatedAt" : "2015-01-20T23:01:58Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "5b98d1c6-2ca1-4795-acd8-d5f2892c8abc",
        "parentId" : "09507463-1dfb-4080-9596-5fb5cc0bfeda",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "We already use browserify, it's one of our dev dependencies in Node, so might as well try to make it work there as well.\n",
        "createdAt" : "2015-01-20T18:41:54Z",
        "updatedAt" : "2015-01-20T21:57:56Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa5e65a4e20041c6b0418c621b09d7b2891f250a",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +1648,1652 @@\n        function writeComparison(expected: string, actual: string, relativeFilename: string, actualFilename: string, descriptionForDescribe: string) {\n            var encoded_actual = (new Buffer(actual)).toString('utf8')\n            if (expected != encoded_actual) {\n                // Overwrite & issue error"
  },
  {
    "id" : "5c6a845e-e14f-451d-8b27-38696cf25181",
    "prId" : 1160,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b46469c1-5d79-4dba-81df-1ef750565e26",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "great catch :)\n",
        "createdAt" : "2014-11-14T04:42:17Z",
        "updatedAt" : "2014-11-14T04:42:17Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "ea094d96-7ad6-4728-a5b7-93f9cec69fb7",
        "parentId" : "b46469c1-5d79-4dba-81df-1ef750565e26",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "It's really a good thing we had that assertion, it's a subtle situation.\n",
        "createdAt" : "2014-11-14T07:23:03Z",
        "updatedAt" : "2014-11-14T07:23:03Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "56467435598c505803f01fa5da26be6b17fd5595",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1008,1012 @@            });\n\n            // Verify we didn't miss any errors in total\n            assert.equal(totalErrorsReported + numLibraryDiagnostics, diagnostics.length, 'total number of errors');\n"
  },
  {
    "id" : "eadf32a8-1993-45f7-aae9-b0559eeccb91",
    "prId" : 223,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbdcc451-6d90-4977-8e46-f5625f541979",
        "parentId" : null,
        "authorId" : "d5965fb8-a9f1-47ff-bb2a-af034bb198a3",
        "body" : "This change looks like it might not be relevant this this PR.\n",
        "createdAt" : "2014-07-24T01:43:11Z",
        "updatedAt" : "2014-07-24T01:43:11Z",
        "lastEditedBy" : "d5965fb8-a9f1-47ff-bb2a-af034bb198a3",
        "tags" : [
        ]
      },
      {
        "id" : "c02d5883-082a-42e4-aa75-d186e8ea92a7",
        "parentId" : "bbdcc451-6d90-4977-8e46-f5625f541979",
        "authorId" : "062f3bee-c17a-4517-ad46-ba1c73ac0962",
        "body" : "Yeah I could've made it a separate change, was just being lazy. Basically 99% of the time that value just makes test failures print out big useless stack traces, now they print little useless ones ;)\n",
        "createdAt" : "2014-07-24T01:44:21Z",
        "updatedAt" : "2014-07-24T01:44:21Z",
        "lastEditedBy" : "062f3bee-c17a-4517-ad46-ba1c73ac0962",
        "tags" : [
        ]
      },
      {
        "id" : "47f70c3a-97cd-4dfd-abc6-63a6e4082b25",
        "parentId" : "bbdcc451-6d90-4977-8e46-f5625f541979",
        "authorId" : "d5965fb8-a9f1-47ff-bb2a-af034bb198a3",
        "body" : "I just saw the effect of it for baseline differences (the stack trace is pretty useless there).  Much better.\n",
        "createdAt" : "2014-07-24T02:00:08Z",
        "updatedAt" : "2014-07-24T02:00:08Z",
        "lastEditedBy" : "d5965fb8-a9f1-47ff-bb2a-af034bb198a3",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d854212625bcb2a65ba0758992a556dc26f7e1a",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +1127,1131 @@    }\n\n    if (Error) (<any>Error).stackTraceLimit = 1;\n}\n"
  },
  {
    "id" : "483347fc-e629-47e3-ab15-2dcda0d1d879",
    "prId" : 223,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "735c9323-0b65-4125-a1b5-ede4c0a68673",
        "parentId" : null,
        "authorId" : "d5965fb8-a9f1-47ff-bb2a-af034bb198a3",
        "body" : "accidental extra indent?\n",
        "createdAt" : "2014-07-24T01:43:25Z",
        "updatedAt" : "2014-07-24T01:43:25Z",
        "lastEditedBy" : "d5965fb8-a9f1-47ff-bb2a-af034bb198a3",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d854212625bcb2a65ba0758992a556dc26f7e1a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +625,629 @@                }\n\n                    this.settings.forEach(setting => {\n                    switch (setting.flag.toLowerCase()) {\n                        // \"filename\", \"comments\", \"declaration\", \"module\", \"nolib\", \"sourcemap\", \"target\", \"out\", \"outDir\", \"noimplicitany\", \"noresolve\""
  }
]