[
  {
    "id" : "5b8e7d51-42f8-4156-b51c-2f738a1a5d13",
    "prId" : 10303,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9398b043-63a9-4668-8b99-6470c8b03c1e",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This fixes what was breaking web tests: if `pathStart` was `\"\"` then `path.replace(pathStart, \"/\")` would put an extra \"/\" at the beginning (leading to `//src/...`). Then when the host was determining file existence it would look for strings starting with `/src`, which there were none of.\n",
        "createdAt" : "2016-08-12T14:57:58Z",
        "updatedAt" : "2016-08-12T15:13:48Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "df739fdd50b3ea3fcd8a5bd04614fe2093a4aa39",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +53,57 @@        const path = ts.toPath(name, root, (fileName) => Harness.Compiler.getCanonicalFileName(fileName));\n        const pathStart = ts.toPath(Harness.IO.getCurrentDirectory(), \"\", (fileName) => Harness.Compiler.getCanonicalFileName(fileName));\n        return pathStart ? path.replace(pathStart, \"/\") : path;\n    };\n"
  },
  {
    "id" : "51120f15-f61f-436e-beb8-a5a9a5e3dd15",
    "prId" : 8721,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47adaa93-af9e-4b87-aa19-e836ec229458",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "we should not emit \".sourcemap.txt\" if we not gonna emit sourcemap\n",
        "createdAt" : "2016-05-20T21:12:00Z",
        "updatedAt" : "2016-05-22T21:07:33Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "565b637c821d7870ccb4d77e7c0a93047a122c74",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +233,237 @@\n                    Harness.Baseline.runBaseline(\"Correct Sourcemap output for \" + fileName, justName.replace(/\\.tsx?/, \".js.map\"), () => {\n                        if ((options.noEmitOnError && result.errors.length !== 0) || result.sourceMaps.length === 0) {\n                            // We need to return null here or the runBaseLine will actually create a empty file.\n                            // Baselining isn't required here because there is no output."
  },
  {
    "id" : "03c0ff3d-eb5f-4ce8-83b5-90d0bb9ee75e",
    "prId" : 2857,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfefb6b9-af8e-4ae4-8b72-1fc05aa07db3",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Revert this indentation, put `function` on the next line.\n",
        "createdAt" : "2015-04-22T00:06:18Z",
        "updatedAt" : "2015-04-22T00:08:14Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "81ebac5d77b90f616a687bd6a0b8466fd09f65ff",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +98,102 @@                }, function (settings) {\n                        harnessCompiler.setCompilerSettings(tcSettings);\n                    });\n            });\n"
  },
  {
    "id" : "bd803ade-dbd9-4374-a602-4798e93825f8",
    "prId" : 2484,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67d42f66-33d8-4110-ab35-9cd405c4f980",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "I would replace it with Debug.assert with custom message\n",
        "createdAt" : "2015-04-24T23:56:31Z",
        "updatedAt" : "2015-04-27T17:12:04Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "32409f9b9b613e6e6c1bc1547e2c625f2fb7a718",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +230,234 @@            it('Correct Sourcemap output for ' + fileName, () => {\n                if (options.inlineSourceMap) {\n                    if (result.sourceMaps.length > 0) {\n                        throw new Error('No sourcemap files should be generated if inlineSourceMaps was set.');\n                    }"
  },
  {
    "id" : "fca023d2-c579-42ec-8b8c-f55bec1cdcee",
    "prId" : 966,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df417f9c-9dc3-4878-91fc-6b65b9c237ba",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Is there a situation in which `record` can be `undefined` but the condition `options.noEmitOnError && result.errors.length !== 0` evaluates to false? Perhaps a `||` is more appropriate?\n",
        "createdAt" : "2014-10-29T19:30:20Z",
        "updatedAt" : "2014-11-16T21:07:38Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "48b89642-57f9-4a0f-9bc6-a8525307df85",
        "parentId" : "df417f9c-9dc3-4878-91fc-6b65b9c237ba",
        "authorId" : "653c1a3f-9d47-48c5-8f19-f894f1744d89",
        "body" : "Not sure if || is more appropriate here, when for example noEmitOnError is true and there are errors and record is not undefined (because getSourceMapRecord returned a sourcemap).. then it should actually try to compare them right?\n",
        "createdAt" : "2014-10-29T21:57:23Z",
        "updatedAt" : "2014-11-16T21:07:38Z",
        "lastEditedBy" : "653c1a3f-9d47-48c5-8f19-f894f1744d89",
        "tags" : [
        ]
      },
      {
        "id" : "5fff1f2c-3a36-4f43-9897-0239db3edc4d",
        "parentId" : "df417f9c-9dc3-4878-91fc-6b65b9c237ba",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I'm curious, do you actually get an empty sourcemap file if you don't perform this check?\n\nSorry, I'm personally not familiar enough with the harness code.\n",
        "createdAt" : "2014-10-30T01:07:04Z",
        "updatedAt" : "2014-11-16T21:07:38Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "fcdc2795-e839-424e-abed-c7a7a2c97113",
        "parentId" : "df417f9c-9dc3-4878-91fc-6b65b9c237ba",
        "authorId" : "653c1a3f-9d47-48c5-8f19-f894f1744d89",
        "body" : "I believe it did, runBaseline calls generateActual: https://github.com/Microsoft/TypeScript/blob/5ce3baf339e0424263069c70f0ea239bc3cea96a/src/harness/harness.ts#L1307 which creates the file when it is something different than null. It throws an error when it is undefined.\n",
        "createdAt" : "2014-10-30T09:24:29Z",
        "updatedAt" : "2014-11-16T21:07:38Z",
        "lastEditedBy" : "653c1a3f-9d47-48c5-8f19-f894f1744d89",
        "tags" : [
        ]
      }
    ],
    "commit" : "c90fb4a7d3b7fbbb813fdad1afa88d40e0ed08e4",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +177,181 @@                    Harness.Baseline.runBaseline('Correct sourcemap content for ' + fileName, justName.replace(/\\.ts$/, '.sourcemap.txt'), () => {\n                        var record = result.getSourceMapRecord();\n                        if (options.noEmitOnError && result.errors.length !== 0 && record === undefined) {\n                            // Because of the noEmitOnError option no files are created. We need to return null because baselining isn't required.\n                            return null;"
  },
  {
    "id" : "a91f12d3-1918-4414-8d03-c7fb69188b9d",
    "prId" : 554,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ee54bc5-7c97-4f19-be01-2105ea510e3f",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "remove the initialization from outer scope.\n",
        "createdAt" : "2014-08-27T19:32:27Z",
        "updatedAt" : "2014-08-29T00:31:03Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "a6dde139-756f-4e9b-a01a-5e9544ef0feb",
        "parentId" : "3ee54bc5-7c97-4f19-be01-2105ea510e3f",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Done\n",
        "createdAt" : "2014-08-28T19:12:57Z",
        "updatedAt" : "2014-08-29T00:31:03Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae59368836b36c417d4eafe4bff3a3c395a7cbe8",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +69,73 @@\n            before(() => {\n                justName = fileName.replace(/^.*[\\\\\\/]/, ''); // strips the fileName from the path.\n                content = Harness.IO.readFile(fileName);\n                testCaseContent = Harness.TestCaseParser.makeUnitsFromTest(content, fileName);"
  },
  {
    "id" : "0ba6e430-6ceb-4b4c-a661-43d16d126171",
    "prId" : 464,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a052d64-7851-46c5-b0a0-9e85284ce4be",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Instead, assert that everything is referenced\n",
        "createdAt" : "2014-08-18T22:17:23Z",
        "updatedAt" : "2014-08-19T02:59:15Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "f949c5014ac57f2eee089720dc91466795c88ee0",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +280,284 @@                if (result.errors.length === 0) {\n                    Harness.Baseline.runBaseline('Correct expression types for ' + fileName, justName.replace(/\\.ts/, '.types'), () => {\n                        var allFiles = toBeCompiled.concat(otherFiles).filter(file => !!checker.getProgram().getSourceFile(file.unitName));\n                        var typeLines: string[] = [];\n                        var typeMap: { [fileName: string]: { [lineNum: number]: string[]; } } = {};"
  }
]