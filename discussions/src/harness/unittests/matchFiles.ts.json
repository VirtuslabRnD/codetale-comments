[
  {
    "id" : "3132de89-23d4-4da2-a95a-91a281013af5",
    "prId" : 17278,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17278#pullrequestreview-55373192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0861e5a9-cfe4-4360-a640-60df68c96193",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "My personal preference is to annotate the return type on the lambda (`(error): Diagnostic => ...`), rather than specifying the generic argument. Specifying generic arguments always feels a tad clunky to me. No big deal either way, though.",
        "createdAt" : "2017-07-18T21:38:44Z",
        "updatedAt" : "2017-08-09T21:18:11Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "142043b6-1bd0-48d5-b81a-7d29a00cddac",
        "parentId" : "0861e5a9-cfe4-4360-a640-60df68c96193",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I've always felt specifying the return type on the lambda looked clunky :). It's too bad we don't use contextual typing here, since `expected.errors` has a definite type.",
        "createdAt" : "2017-08-09T20:54:06Z",
        "updatedAt" : "2017-08-09T21:18:11Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "273b11dc-060e-4cae-9290-7eafa4ed1b27",
        "parentId" : "0861e5a9-cfe4-4360-a640-60df68c96193",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "My preference for the return type stems from being able to refactor generics into or out of the function signature without affecting the consuming code. But I do agree - appropriately contextually typing the object would be best.",
        "createdAt" : "2017-08-09T21:02:37Z",
        "updatedAt" : "2017-08-09T21:18:11Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4376d0f3c2c2cbf59b16edbba0392292f1ae8a18",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +111,115 @@        {\n            const actual = ts.parseJsonConfigFileContent(json, host, basePath, existingOptions, configFileName, resolutionStack);\n            expected.errors = expected.errors.map<Diagnostic>(error => ({\n                category: error.category,\n                code: error.code,"
  },
  {
    "id" : "7dc31d6e-b8de-4404-bb4f-6e4737a10494",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08ff3d0d-fedc-4ba5-ad48-6296ce31333d",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This is a gotcha in the type system, see https://palantir.github.io/tslint/rules/no-object-literal-type-assertion/. The cast doesn't appear necessary anyway.",
        "createdAt" : "2017-06-06T21:51:42Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +111,115 @@            const actual = ts.parseJsonConfigFileContent(json, host, basePath, existingOptions, configFileName, resolutionStack);\n            expected.errors = map(expected.errors, error => {\n                return <Diagnostic>{\n                    category: error.category,\n                    code: error.code,"
  }
]