[
  {
    "id" : "0825478e-0fd3-40ee-89ff-f69430cdb690",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccfe59c0-aa06-415e-b8e2-eda3d03c161d",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Why not use `assert.deepEqual`?",
        "createdAt" : "2017-06-06T21:54:06Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +36,40 @@            expectedResult.compilerOptions[\"configFilePath\"] = configFileName;\n\n            const parsedCompilerOptions = JSON.stringify(actualCompilerOptions);\n            const expectedCompilerOptions = JSON.stringify(expectedResult.compilerOptions);\n            assert.equal(parsedCompilerOptions, expectedCompilerOptions);"
  },
  {
    "id" : "4f3fec76-dbf9-4d51-be59-0fecb94b1174",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f813e807-3196-4527-82cf-e327f06dfe41",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Could you add a comment explaining why this is necessary?",
        "createdAt" : "2017-06-06T21:54:22Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +41,45 @@            assert.equal(actualCompilerOptions.configFile, result);\n\n            const actualErrors = filter(actualParseErrors, error => error.code !== Diagnostics.No_inputs_were_found_in_config_file_0_Specified_include_paths_were_1_and_exclude_paths_were_2.code);\n            const expectedErrors = expectedResult.errors;\n            assert.isTrue(expectedResult.errors.length === actualErrors.length, `Expected error: ${JSON.stringify(expectedResult.errors)}. Actual error: ${JSON.stringify(actualErrors)}.`);"
  }
]