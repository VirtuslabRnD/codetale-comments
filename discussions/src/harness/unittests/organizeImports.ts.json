[
  {
    "id" : "2b4368fb-663e-447e-b205-4e01d2f41531",
    "prId" : 24237,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24237#pullrequestreview-121507441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8ed911e-20c1-4c3d-b14a-dd849e2efea4",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Since this isn't really a filter, this and `parseImports` could use a helper function:\r\n```ts\r\nfunction castEvery<T, U extends T>(inputs: ReadonlyArray<T>, pred: (t: T) => t is U): ReadonlyArray<U> {\r\n    for (const input of inputs)\r\n        Debug.assert(pred(input));\r\n    return inputs as ReadonlyArray<U>;\r\n}\r\n```",
        "createdAt" : "2018-05-18T14:59:00Z",
        "updatedAt" : "2018-05-18T19:53:36Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "b0520ebf-bd67-4d7d-8725-e619d3c94245",
        "parentId" : "b8ed911e-20c1-4c3d-b14a-dd849e2efea4",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I'm not sure I understand what benefit this provides.",
        "createdAt" : "2018-05-18T17:31:41Z",
        "updatedAt" : "2018-05-18T19:53:36Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f662a9131030b48cfd372ba90db66c534f7af3e",
    "line" : 254,
    "diffHunk" : "@@ -1,1 +725,729 @@        function parseExports(...exportStrings: string[]): ReadonlyArray<ExportDeclaration> {\n            const sourceFile = createSourceFile(\"a.ts\", exportStrings.join(\"\\n\"), ScriptTarget.ES2015, /*setParentNodes*/ true, ScriptKind.TS);\n            const exports = filter(sourceFile.statements, isExportDeclaration);\n            assert.equal(exports.length, exportStrings.length);\n            return exports;"
  },
  {
    "id" : "8380d432-e0ad-4b1c-af0e-6349c26499d5",
    "prId" : 21909,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21909#pullrequestreview-97309072",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ace5af1-7458-4362-942b-c919fc3c0e6e",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I think it would be simpler to emit and compare strings, vs parsing and comparing ASTs. That way there's no need to write `assertEqual`  and we also test if we are correctly formatting the result. Also would make error messages more readable.",
        "createdAt" : "2018-02-13T16:36:02Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "e12c0838-a76d-4c82-b16a-1ed68f90725a",
        "parentId" : "0ace5af1-7458-4362-942b-c919fc3c0e6e",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Suits me.  How do I stringify them?",
        "createdAt" : "2018-02-13T18:34:13Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "f2c5f749-e298-4772-a7eb-9671085e904b",
        "parentId" : "0ace5af1-7458-4362-942b-c919fc3c0e6e",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I'm attempting to do this, but the emitter works best if the ast it's working on is either *entirely* synthesized, or not at all. I'm debugging and it looks like there are some nodes with `pos` set  as children of a synthesized node, which causes the emitter to look at the source file for comments, only there is no source text. Some part of organizeImports might be forgetting to clone a node?\r\nOn this subject, we should have fourslash tests of this feature to ensure we're testing the whole thing, including emit.",
        "createdAt" : "2018-02-13T22:08:31Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "08fc89ac-d594-41eb-83c6-49556870e04f",
        "parentId" : "0ace5af1-7458-4362-942b-c919fc3c0e6e",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Regarding testing with text, it seems not to have been simpler.  I'm going to leave things as they are until we have a concrete problem to correct or improvement to make.\r\n\r\nI was under the impression that the baseline tests were doing an end-to-end test.  Did you mean something else?",
        "createdAt" : "2018-02-14T01:31:24Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "13a08594-d5a5-421c-8325-f1f3b792799e",
        "parentId" : "0ace5af1-7458-4362-942b-c919fc3c0e6e",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "No, baseline tests will do.",
        "createdAt" : "2018-02-16T20:36:38Z",
        "updatedAt" : "2018-02-16T20:36:38Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c278cee17008877f3805f70a214e17ba3f37949",
    "line" : 405,
    "diffHunk" : "@@ -1,1 +403,407 @@        }\n\n        function assertListEqual(list1: ReadonlyArray<Node>, list2: ReadonlyArray<Node>) {\n            if (list1 === undefined || list2 === undefined) {\n                assert.isUndefined(list1);"
  },
  {
    "id" : "ce670f80-762c-4c62-8d5f-e87b4c4b1509",
    "prId" : 21909,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21909#pullrequestreview-96658915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e839249-5e1e-49e1-b3d5-5e1786c09686",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Name is \"Combine namespace imports\" but we're actually testing that we *don't* combine them",
        "createdAt" : "2018-02-14T19:14:47Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "2f24d987-1d56-48e1-9ea7-c972b2f98e6e",
        "parentId" : "3e839249-5e1e-49e1-b3d5-5e1786c09686",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "The name describes the action taken, rather than the outcome.  Combining namespace imports happens to be a no-op.",
        "createdAt" : "2018-02-14T21:13:59Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c278cee17008877f3805f70a214e17ba3f37949",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +97,101 @@            });\n\n            it(\"Combine namespace imports\", () => {\n                const sortedImports = parseImports(\n                    `import * as x from \"lib\";`,"
  },
  {
    "id" : "e2e71b62-dbd1-462b-992b-a565dad5b1d0",
    "prId" : 21909,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21909#pullrequestreview-96659581",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6804b8c4-6d9e-4106-ac47-e086fedbf241",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This pattern occurs a lot, could there be a helper so this can be written:\r\n```ts\r\nassertCoalesce([`import * as x from \"lib\";`, `import y from \"lib\";`], `import y, * as x from \"lib\";`)\r\n```",
        "createdAt" : "2018-02-14T19:17:42Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "5b882250-b6ac-4053-b250-98b33c69fc3b",
        "parentId" : "6804b8c4-6d9e-4106-ac47-e086fedbf241",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I left it expanded because I thought it made the test more readable.  A list of unnamed strings can be hard to follow.",
        "createdAt" : "2018-02-14T21:16:04Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c278cee17008877f3805f70a214e17ba3f37949",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +152,156 @@\n            it(\"Combine namespace import with default import\", () => {\n                const sortedImports = parseImports(\n                    `import * as x from \"lib\";`,\n                    `import y from \"lib\";`);"
  }
]