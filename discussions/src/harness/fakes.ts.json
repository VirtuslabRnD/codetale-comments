[
  {
    "id" : "4755f5ef-cb8b-4ef2-86aa-bd509fce6b02",
    "prId" : 20763,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20763#pullrequestreview-116069818",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "534a7640-913a-4350-a062-c63e98b72013",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Why do you have this another layer? Why not make vfs.FileSystem implement ts.System ?",
        "createdAt" : "2018-04-27T19:13:50Z",
        "updatedAt" : "2018-05-02T17:51:48Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "83517c06-e11a-4369-80fe-6d5ec1da7afb",
        "parentId" : "534a7640-913a-4350-a062-c63e98b72013",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I'd rather keep them separate so that `FileSystem` is purely a file system abstraction. Breaking things down into multiple components is more maintainable and better delineates functionality. We already have too many monolithic dependencies in the compiler, and we don't always need a full `System` implementation (which is why we have so many independent `*Host` types).",
        "createdAt" : "2018-04-27T20:14:46Z",
        "updatedAt" : "2018-05-02T17:51:48Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "66c11c527ad63b65c0df527ff487f18ad2349d62",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@        private readonly _env: Record<string, string> | undefined;\n\n        constructor(vfs: vfs.FileSystem, { executingFilePath, newLine = \"\\r\\n\", env }: SystemOptions = {}) {\n            this.vfs = vfs.isReadonly ? vfs.shadow() : vfs;\n            this.useCaseSensitiveFileNames = !this.vfs.ignoreCase;"
  },
  {
    "id" : "e40f7f21-a1e0-417f-bac3-5f1cf281478a",
    "prId" : 20763,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20763#pullrequestreview-116074974",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97fa7c8d-ccfb-454b-8827-f165b08092de",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Also this one.. Seems like this should just use createCompilerHost API on system instead of having another abstraction.",
        "createdAt" : "2018-04-27T19:15:01Z",
        "updatedAt" : "2018-05-02T17:51:48Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "4edc1fbf-9f36-4648-9494-b059b8848466",
        "parentId" : "97fa7c8d-ccfb-454b-8827-f165b08092de",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Except we need to customize the compiler host for certain operations:\r\n- Handling lib resolution in [getDefaultLibFileName](https://github.com/Microsoft/TypeScript/pull/20763/files/c9c562afac4a115293b2e8d241ba74a03e6abcaf#diff-69c744d8d0f5fcadc214018653db126aR291)\r\n- SourceFile caching for test performance in [getSourceFile](https://github.com/Microsoft/TypeScript/pull/20763/files/c9c562afac4a115293b2e8d241ba74a03e6abcaf#diff-69c744d8d0f5fcadc214018653db126aR315)\r\n- Keep track of outputs in [writeFile](https://github.com/Microsoft/TypeScript/pull/20763/files/c9c562afac4a115293b2e8d241ba74a03e6abcaf#diff-69c744d8d0f5fcadc214018653db126aR263) ",
        "createdAt" : "2018-04-27T20:21:25Z",
        "updatedAt" : "2018-05-02T17:51:48Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "4051da46-57d4-42be-8bb3-b297f7a364ce",
        "parentId" : "97fa7c8d-ccfb-454b-8827-f165b08092de",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Honestly, it'd be nice if `fakes.CompilerHost` could inherit from `fakes.System` except they differ in their definitions of `useCaseSensitiveFileNames`.",
        "createdAt" : "2018-04-27T20:33:18Z",
        "updatedAt" : "2018-05-02T17:51:48Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "66c11c527ad63b65c0df527ff487f18ad2349d62",
    "line" : 203,
    "diffHunk" : "@@ -1,1 +201,205 @@     */\n    export class CompilerHost implements ts.CompilerHost {\n        public readonly sys: System;\n        public readonly defaultLibLocation: string;\n        public readonly outputs: documents.TextDocument[] = [];"
  }
]