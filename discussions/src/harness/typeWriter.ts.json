[
  {
    "id" : "d99dc103-2481-4eaf-8f0c-216c2ed570b9",
    "prId" : 32520,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32520#pullrequestreview-267384723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db79ec0e-e4ac-443a-9da2-53134a228a45",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Let me see if I can summarise what this means: we now bail for `@callback`, `@typedef` and `@enum` and some (which?) type aliases. Before it looks like there was a check that `@callback` and `@typedef` would usually fail, but sometimes incorrectly pass. But I'm not sure in what circumstances.",
        "createdAt" : "2019-07-26T16:29:21Z",
        "updatedAt" : "2019-07-26T20:29:23Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "b72a13b5-d3d6-46d1-a442-f17cf5011404",
        "parentId" : "db79ec0e-e4ac-443a-9da2-53134a228a45",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "`getMeaningFromDeclaration` on a `JSDoc` (as is the parent of all of these) isn't handled afaik, so those cases are already unreachable, as it's defaulted to `All`.",
        "createdAt" : "2019-07-26T20:15:11Z",
        "updatedAt" : "2019-07-26T20:29:23Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a94cfc7b2c59759267c433621b8cbfa8c409130",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +98,102 @@            // Don't try to get the type of something that's already a type.\n            // Exception for `T` in `type T = something` because that may evaluate to some interesting type.\n            if (ts.isPartOfTypeNode(node) || ts.isIdentifier(node) && !(ts.getMeaningFromDeclaration(node.parent) & ts.SemanticMeaning.Value) && !(ts.isTypeAliasDeclaration(node.parent) && node.parent.name === node)) {\n                return undefined;\n            }"
  },
  {
    "id" : "902929e7-3efe-4bfb-a2b8-8fbb89bbd639",
    "prId" : 554,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8ebabd0-7cb4-4306-a9cb-6a84b59ca5f5",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "if we are doing this, i would do super as well\n",
        "createdAt" : "2014-08-27T19:35:15Z",
        "updatedAt" : "2014-08-29T00:31:03Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "bbc734f3-23d8-4784-8549-659b343fbf44",
        "parentId" : "d8ebabd0-7cb4-4306-a9cb-6a84b59ca5f5",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Done\n",
        "createdAt" : "2014-08-28T19:31:44Z",
        "updatedAt" : "2014-08-29T00:31:03Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae59368836b36c417d4eafe4bff3a3c395a7cbe8",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +28,32 @@            // TODO: Ideally we should log all expressions, but to compare to the\n            // old typeWriter baselines, suppress tokens\n            case ts.SyntaxKind.ThisKeyword:\n            case ts.SyntaxKind.SuperKeyword:\n            case ts.SyntaxKind.ArrayLiteral:"
  },
  {
    "id" : "dc1d95f3-12d3-4498-a94e-f1fd43a4272a",
    "prId" : 464,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27750c59-86e1-4699-93a4-d5ee5f98cdd1",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Find out what getTypeOfNode returns for labels\n",
        "createdAt" : "2014-08-18T22:54:56Z",
        "updatedAt" : "2014-08-19T02:59:15Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "f949c5014ac57f2eee089720dc91466795c88ee0",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +52,56 @@            case ts.SyntaxKind.Identifier:\n                var identifier = <ts.Identifier>node;\n                if (!this.isLabel(identifier)) {\n                    var type = this.getTypeOfNode(identifier);\n                    this.log(node, type);"
  }
]