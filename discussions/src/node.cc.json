[
  {
    "id" : "0c489ad3-7875-4166-9868-2a2ad027d7fb",
    "prId" : 667,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41f60282-f464-48c7-bc60-7faeb5c28259",
        "parentId" : null,
        "authorId" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "body" : "Oh, god. This is happening.\n",
        "createdAt" : "2015-01-30T15:11:11Z",
        "updatedAt" : "2015-02-11T23:23:03Z",
        "lastEditedBy" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bb3184d8d08208bfb5233c394cbc1994a531b5f",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1490,1494 @@  int i = 0;\n\n  for (auto w : *env->req_wrap_queue())\n    if (w->persistent().IsEmpty() == false)\n      ary->Set(i++, w->object());"
  },
  {
    "id" : "fc5e1c4c-3a39-451d-ab59-a7d382005ad3",
    "prId" : 667,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "968fb1d8-effd-4f4f-b86e-5ea12053da41",
        "parentId" : null,
        "authorId" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "body" : "Why not `!(...).IsEmpty()`?\n",
        "createdAt" : "2015-01-30T15:52:21Z",
        "updatedAt" : "2015-02-11T23:23:03Z",
        "lastEditedBy" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "tags" : [
        ]
      },
      {
        "id" : "c2096c32-f160-4585-a35a-ed1f8774bd1a",
        "parentId" : "968fb1d8-effd-4f4f-b86e-5ea12053da41",
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "Because I like the explicit version better.\n",
        "createdAt" : "2015-01-30T16:09:31Z",
        "updatedAt" : "2015-02-11T23:23:03Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bb3184d8d08208bfb5233c394cbc1994a531b5f",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1491,1495 @@\n  for (auto w : *env->req_wrap_queue())\n    if (w->persistent().IsEmpty() == false)\n      ary->Set(i++, w->object());\n"
  },
  {
    "id" : "8a6facea-7df3-4c5f-b4ff-89230b5d5267",
    "prId" : 1148,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55237307-49d8-4018-8ee1-b5b4b5a09bc0",
        "parentId" : null,
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "What alternative is there?\n",
        "createdAt" : "2015-03-16T16:41:14Z",
        "updatedAt" : "2015-03-16T17:03:05Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      },
      {
        "id" : "c6dd8ee8-fb4a-4565-bed8-a0faa58ff2a2",
        "parentId" : "55237307-49d8-4018-8ee1-b5b4b5a09bc0",
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "One-byte strings or if you want more radical, buffers or typed arrays.  It also depends on the platform: file paths are untyped binary blobs on most Unices, but on OS X (i.e. HFS+) and Windows, they're Unicode.\n\nI'm not sure yet what the right answer is, just that our current approach is wrong. :-)\n",
        "createdAt" : "2015-03-16T17:00:38Z",
        "updatedAt" : "2015-03-16T17:03:05Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      },
      {
        "id" : "f436710b-22c7-4ee0-985c-857e8904e4a5",
        "parentId" : "55237307-49d8-4018-8ee1-b5b4b5a09bc0",
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "Good point about different data formats. I was only thinking about string encoding.\n",
        "createdAt" : "2015-03-16T17:33:39Z",
        "updatedAt" : "2015-03-16T17:33:39Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      }
    ],
    "commit" : "2551c1d2caaec21a5098de8e86274e0daf7aa781",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +731,735 @@  Local<String> path_string;\n  if (path != nullptr) {\n    // FIXME(bnoordhuis) It's questionable to interpret the file path as UTF-8.\n    path_string = String::NewFromUtf8(env->isolate(), path);\n  }"
  },
  {
    "id" : "dc0860b8-e01f-47e9-afb2-2030c2ce2732",
    "prId" : 1238,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b7f1b85-5713-49a3-8033-0b1af58d5641",
        "parentId" : null,
        "authorId" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "body" : "Oh, nvm. I see now.\n",
        "createdAt" : "2015-03-23T03:07:47Z",
        "updatedAt" : "2015-03-23T09:41:44Z",
        "lastEditedBy" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e5b87a147f0bb1e92de4a62f392bb4f3ac12f8f",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +2524,2528 @@    Local<Value> value,\n    const PropertyCallbackInfo<void>& info) {\n  Environment* env = Environment::GetCurrent(info);\n\n  uv_check_t* immediate_check_handle = env->immediate_check_handle();"
  },
  {
    "id" : "92925e42-2d55-48df-bf38-db1112226948",
    "prId" : 2483,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddacfbcd-a91b-4358-8dd7-8e5880ca1dea",
        "parentId" : null,
        "authorId" : "286d51c5-45bc-421e-8ab3-473992c21d5a",
        "body" : "You could wrap the following for-loop into your if-statement as well.\n",
        "createdAt" : "2015-08-21T09:51:12Z",
        "updatedAt" : "2015-08-21T19:16:53Z",
        "lastEditedBy" : "286d51c5-45bc-421e-8ab3-473992c21d5a",
        "tags" : [
        ]
      },
      {
        "id" : "effac433-8072-4849-a17e-6ab8af3e86c6",
        "parentId" : "ddacfbcd-a91b-4358-8dd7-8e5880ca1dea",
        "authorId" : "bd43ce4d-85c2-4f54-8666-274f0f79f75b",
        "body" : "yea, I had tried that and the results didn't seem to be any different.\n",
        "createdAt" : "2015-08-21T09:55:58Z",
        "updatedAt" : "2015-08-21T19:16:53Z",
        "lastEditedBy" : "bd43ce4d-85c2-4f54-8666-274f0f79f75b",
        "tags" : [
        ]
      },
      {
        "id" : "64c2475c-24a4-4b51-bb4e-23ee9ec65330",
        "parentId" : "ddacfbcd-a91b-4358-8dd7-8e5880ca1dea",
        "authorId" : "286d51c5-45bc-421e-8ab3-473992c21d5a",
        "body" : "I guess it's about aesthetics really. Your call :)\n",
        "createdAt" : "2015-08-21T09:57:40Z",
        "updatedAt" : "2015-08-21T19:16:53Z",
        "lastEditedBy" : "286d51c5-45bc-421e-8ab3-473992c21d5a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c20b87d1979e741f1f1698f8120169d32a779ae",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +3708,3712 @@  // the argv array or the elements it points to.\n  if (v8_argc != 0)\n    V8::SetFlagsFromCommandLine(&v8_argc, const_cast<char**>(v8_argv), true);\n\n  // Anything that's still in v8_argv is not a V8 or a node option."
  },
  {
    "id" : "29d85f75-210f-4c53-bbc7-646166f3c643",
    "prId" : 3528,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "916b1787-21ce-4b75-895e-d08eb6f53842",
        "parentId" : null,
        "authorId" : "b5634520-1776-44d8-b06b-105c83374f81",
        "body" : "Hmmm, our linter doesn't complain about this?\n",
        "createdAt" : "2015-10-26T14:51:11Z",
        "updatedAt" : "2015-10-27T12:01:58Z",
        "lastEditedBy" : "b5634520-1776-44d8-b06b-105c83374f81",
        "tags" : [
        ]
      },
      {
        "id" : "c6a9108f-375c-4916-aeb9-2c6923254f0a",
        "parentId" : "916b1787-21ce-4b75-895e-d08eb6f53842",
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "Why would it?  It's a common C++ idiom.\n",
        "createdAt" : "2015-10-26T15:42:57Z",
        "updatedAt" : "2015-10-27T12:01:58Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "53e64bb29e3b70cf23b345d02fac081de716ef3f",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +3423,3427 @@  // Call only async signal-safe functions here!  Don't retry the exchange,\n  // it will deadlock when the thread is interrupted inside a critical section.\n  if (auto isolate = node_isolate.exchange(nullptr)) {\n    v8::Debug::DebugBreak(isolate);\n    uv_async_send(&dispatch_debug_messages_async);"
  },
  {
    "id" : "2314203d-ce57-48ae-bbb3-9f7cad3c4d2f",
    "prId" : 5591,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6720c54a-4242-4eb7-a357-32d385743853",
        "parentId" : null,
        "authorId" : "7885009b-14c8-46d1-a915-0c610839ac69",
        "body" : "Would it be useful to add a comment here mentioning that `undefined` is returned here for backward compatibility?\n",
        "createdAt" : "2016-03-07T22:53:17Z",
        "updatedAt" : "2016-03-08T17:46:53Z",
        "lastEditedBy" : "7885009b-14c8-46d1-a915-0c610839ac69",
        "tags" : [
        ]
      },
      {
        "id" : "c66f66fa-64f7-44d9-949b-28077370196f",
        "parentId" : "6720c54a-4242-4eb7-a357-32d385743853",
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "Can do.\n",
        "createdAt" : "2016-03-07T23:34:58Z",
        "updatedAt" : "2016-03-08T17:46:53Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      },
      {
        "id" : "9926a98b-ec08-4dd0-b087-bcb4257dc2a5",
        "parentId" : "6720c54a-4242-4eb7-a357-32d385743853",
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "done, just below.\n",
        "createdAt" : "2016-03-07T23:38:26Z",
        "updatedAt" : "2016-03-08T17:46:53Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      }
    ],
    "commit" : "3521b052b175110aab08fe6296e7d5cffbb72925",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1199,1203 @@\n  if (ret.IsEmpty()) {\n    if (callback_scope.in_makecallback())\n      return ret;\n    // NOTE: Undefined() is returned here for backwards compatibility."
  },
  {
    "id" : "95609145-5a8d-464e-9c68-23d21af7a755",
    "prId" : 5881,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a506351-d0f9-4439-9e15-8e63604a8286",
        "parentId" : null,
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "I think this code was changed after I reviewed it?  Because `ARRAY_SIZE(&arg)` doesn't do what you think it does.\n",
        "createdAt" : "2016-03-31T10:38:38Z",
        "updatedAt" : "2016-03-31T10:38:38Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "21d66d621c5b1ce27498fcb1cb846fd34fce4234",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +3328,3332 @@\n  Local<Value> arg = env->process_object();\n  f->Call(Null(env->isolate()), ARRAY_SIZE(&arg), &arg);\n}\n"
  },
  {
    "id" : "7506e298-75eb-433e-b310-3511886bf067",
    "prId" : 6092,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83cb7159-11c4-4c21-b9ed-43c6e7fa4c75",
        "parentId" : null,
        "authorId" : "7490b440-07c7-4433-856f-3720a914a77a",
        "body" : "Is this `process._events`?\n",
        "createdAt" : "2016-04-07T14:28:17Z",
        "updatedAt" : "2016-04-19T01:47:59Z",
        "lastEditedBy" : "7490b440-07c7-4433-856f-3720a914a77a",
        "tags" : [
        ]
      },
      {
        "id" : "d4114854-278b-4fd2-a89f-a002937db70a",
        "parentId" : "83cb7159-11c4-4c21-b9ed-43c6e7fa4c75",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "Yes.\n",
        "createdAt" : "2016-04-07T14:51:11Z",
        "updatedAt" : "2016-04-19T01:47:59Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e38bade82801645d8cc1010e3f4e9826052244cb",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +3231,3235 @@  Local<Object> events_obj = Object::New(env->isolate());\n  events_obj->SetPrototype(env->context(), Null(env->isolate()));\n  process->Set(env->events_string(), events_obj);\n}\n"
  },
  {
    "id" : "9bb3789e-d978-424c-a89e-b22d86e470d9",
    "prId" : 7093,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18922fab-9f19-495f-9ea4-abc4ce0016f7",
        "parentId" : null,
        "authorId" : "514a0163-2303-442b-8dea-a071059bfbe1",
        "body" : "Can't we just reset zero-flag here instead of delegating to JS side, right before the `malloc` so that allocation exception couldn't happen yet? This would lead to less changes + would avoid try-catch deopt in `createBuffer`.\n",
        "createdAt" : "2016-06-01T23:38:07Z",
        "updatedAt" : "2016-06-02T07:23:20Z",
        "lastEditedBy" : "514a0163-2303-442b-8dea-a071059bfbe1",
        "tags" : [
        ]
      },
      {
        "id" : "485b3ca2-e507-4429-babc-9ad2acd40fe0",
        "parentId" : "18922fab-9f19-495f-9ea4-abc4ce0016f7",
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "That was my initial implementation. Problem is if `new Uint8Array()` for some reason throws it'll stay flipped.\n",
        "createdAt" : "2016-06-02T02:57:44Z",
        "updatedAt" : "2016-06-02T07:23:20Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      },
      {
        "id" : "4412f247-b886-4de2-a3b6-be4d33ab303a",
        "parentId" : "18922fab-9f19-495f-9ea4-abc4ce0016f7",
        "authorId" : "4bb0c2a5-ae65-4a7c-b24b-faa4000cdc5b",
        "body" : "Not sure of that. try-finally also checks that no non-failing shortcuts (that return an empty array) result in the flag not being reset.\n\nDo you have an example that passes the tests here?\n",
        "createdAt" : "2016-06-02T03:16:42Z",
        "updatedAt" : "2016-06-02T07:23:20Z",
        "lastEditedBy" : "4bb0c2a5-ae65-4a7c-b24b-faa4000cdc5b",
        "tags" : [
        ]
      },
      {
        "id" : "a7943a15-c4c1-44a3-a5e3-ac732ed987d7",
        "parentId" : "18922fab-9f19-495f-9ea4-abc4ce0016f7",
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "@ChALkeR Are you addressing my comment? I'm saying I reset the bit in C++ and I believe you were the one that realized the bit can be flipped and remain flipped if the allocation fails.\n",
        "createdAt" : "2016-06-02T03:37:56Z",
        "updatedAt" : "2016-06-02T07:23:20Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      },
      {
        "id" : "5e6979bd-8964-4cef-8bc3-55e069b29acc",
        "parentId" : "18922fab-9f19-495f-9ea4-abc4ce0016f7",
        "authorId" : "4bb0c2a5-ae65-4a7c-b24b-faa4000cdc5b",
        "body" : "@trevnorris No, somewhy I didn't see your comment and was adressing @RReverser comment.\n",
        "createdAt" : "2016-06-02T03:46:28Z",
        "updatedAt" : "2016-06-02T07:23:20Z",
        "lastEditedBy" : "4bb0c2a5-ae65-4a7c-b24b-faa4000cdc5b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fea3070ec46d8d231b95ff100170d16306814ee8",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +975,979 @@    return calloc(size, 1);\n  else\n    return malloc(size);\n}\n"
  },
  {
    "id" : "5974ee8e-d75c-4b7e-b77c-2cb464464320",
    "prId" : 8979,
    "prUrl" : "https://github.com/nodejs/node/pull/8979#pullrequestreview-34149520",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77cc9d95-612c-4e99-bfbd-e4e17d1bc328",
        "parentId" : null,
        "authorId" : "e75ae5b4-0256-4743-b9d9-8adee03098da",
        "body" : "--inspect-port was omitted from the docs, see https://github.com/nodejs/node/pull/12581",
        "createdAt" : "2017-04-22T03:44:12Z",
        "updatedAt" : "2017-04-22T03:44:12Z",
        "lastEditedBy" : "e75ae5b4-0256-4743-b9d9-8adee03098da",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ff3b0324067b688610e85db9e008d4afceb19cb",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +3485,3489 @@         \"                        (default: 127.0.0.1:9229)\\n\"\n         \"  --inspect-brk[=host:port]  activate inspector on host:port\\n\"\n         \"                             and break at start of user script\\n\"\n#endif\n         \"  --no-deprecation         silence deprecation warnings\\n\""
  },
  {
    "id" : "2f836178-3142-4e68-8ee5-c157a47d2ec9",
    "prId" : 9221,
    "prUrl" : "https://github.com/nodejs/node/pull/9221#pullrequestreview-5234412",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b8754e6-75c5-4f24-8648-b7e8f16fdea4",
        "parentId" : null,
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "`callback->CreationContext()` seems a little more correct than `recv->CreationContext()` because the former is the context the actual callback takes place in but it's admittedly a mostly academic difference.\n",
        "createdAt" : "2016-10-21T10:31:34Z",
        "updatedAt" : "2016-10-25T11:30:29Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "921d2b080e810dff89c78db7d7f4c2e9e92f57ec",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +1343,1347 @@  // the two contexts need not be the same.\n  EscapableHandleScope handle_scope(isolate);\n  Environment* env = Environment::GetCurrent(callback->CreationContext());\n  Context::Scope context_scope(env->context());\n  return handle_scope.Escape("
  },
  {
    "id" : "d6cdfcd1-8dca-4e29-a1e5-a7ae98bd35a4",
    "prId" : 12028,
    "prUrl" : "https://github.com/nodejs/node/pull/12028#pullrequestreview-29299957",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70d6de2c-839e-4792-bf6f-da49d2ffda92",
        "parentId" : null,
        "authorId" : "cdbfdd98-a076-42e4-be0f-41821df495e4",
        "body" : "Personally, I'd rather that C++ std lib classes are used to avoid all the manual allocations.  And you shouldn't have to worry about if the C++ std lib is available on a certain platform.  And you don't need to rely on the non-reentrant legacy c `strtok`.\r\n\r\n```c++\r\n  std::vector<std::string> env_args;\r\n  std::string::size_type pos = 0, pos_next = 0;\r\n  while (pos_next < nodeopt.size())\r\n  {\r\n    pos_next = nodeopt.find(\" \", pos);\r\n    if (pos_next == std::string::npos)\r\n    {\r\n      pos_next = nodeopt.size();\r\n    }\r\n\r\n    if (pos_next > pos)\r\n    {\r\n      env_args.push_back(nodeopt.substr(pos, pos_next - pos));\r\n    }\r\n\r\n    pos = pos_next + 1;\r\n  }\r\n\r\n  std::vector<const char *> argv_from_env;\r\n  argv_from_env.reserve(args.size() + 2);\r\n  argv_from_env.push_back(argv[0]);\r\n  for (size_t i = 0; i < args.size(); i++)\r\n  {\r\n    argv_from_env.push_back(env_args[i].c_str());\r\n  }\r\n  argv_from_env.push_back(nullptr);\r\n```\r\n\r\nand now you can call `ProcessArgv`:\r\n\r\n```c++\r\n    ProcessArgv(&argc_from_env, &argv_from_env[0], &exec_argc_, &exec_argv_, true );\r\n```\r\n",
        "createdAt" : "2017-03-27T20:57:31Z",
        "updatedAt" : "2017-04-25T17:00:15Z",
        "lastEditedBy" : "cdbfdd98-a076-42e4-be0f-41821df495e4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2282bb812860284035d2a2ed8ac7074bf84cb50",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +4345,4349 @@    delete[] exec_argv_;\n    delete[] argv_from_env;\n    free(cstr);\n  }\n#endif"
  },
  {
    "id" : "d197a469-d530-4796-986c-800cc0850b7e",
    "prId" : 12028,
    "prUrl" : "https://github.com/nodejs/node/pull/12028#pullrequestreview-33808142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f798d8e-c36b-4a2e-ada8-7353bb46aa42",
        "parentId" : null,
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "While I like the simplicity of this, it's not the most performant approach. Would like to see this optimized more.",
        "createdAt" : "2017-04-18T14:39:34Z",
        "updatedAt" : "2017-04-25T17:00:15Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      },
      {
        "id" : "f4ce8863-ba52-4dab-b668-3609ca4c3b11",
        "parentId" : "1f798d8e-c36b-4a2e-ada8-7353bb46aa42",
        "authorId" : "e75ae5b4-0256-4743-b9d9-8adee03098da",
        "body" : "Any suggestions?\r\n\r\nNote:\r\n- The conditional is copied verbatim from the existing code, it is how all command line options are currently matched.\r\n- It would be more efficient to inline the checks into the actual options parsing so the comparison would be done once, but I was requested to refactor that blacklisting approach into a whitelisting approach so no one could accidentally add an option and forget to blacklist it.\r\n- None of this code runs unless `NODE_OPTIONS` is actually used.",
        "createdAt" : "2017-04-18T18:18:28Z",
        "updatedAt" : "2017-04-25T17:00:15Z",
        "lastEditedBy" : "e75ae5b4-0256-4743-b9d9-8adee03098da",
        "tags" : [
        ]
      },
      {
        "id" : "633689fa-3a08-4478-b965-4d79716ccf72",
        "parentId" : "1f798d8e-c36b-4a2e-ada8-7353bb46aa42",
        "authorId" : "e75ae5b4-0256-4743-b9d9-8adee03098da",
        "body" : "not sure what to do",
        "createdAt" : "2017-04-19T21:09:02Z",
        "updatedAt" : "2017-04-25T17:00:15Z",
        "lastEditedBy" : "e75ae5b4-0256-4743-b9d9-8adee03098da",
        "tags" : [
        ]
      },
      {
        "id" : "e0643f2c-9952-4aaf-a2d2-a4062cc2e6f8",
        "parentId" : "1f798d8e-c36b-4a2e-ada8-7353bb46aa42",
        "authorId" : "af50f08e-2bc7-4f86-8ca4-431b9929bc48",
        "body" : "A couple of options I can think of include:\r\n\r\n1) using a hash table, problem might be that cost of building the hashtable outweighs the benefits\r\n2) have 26 whitelist arrays (or 2 dimention array) so that we can quickly cut down the list by the first letter in the option and then only search the subset for that list.  This would reduce the search time, while being 0 cost in terms of startup time.  The main drawback is that is does require us to make sure things go into the right array.",
        "createdAt" : "2017-04-20T15:39:08Z",
        "updatedAt" : "2017-04-25T17:00:15Z",
        "lastEditedBy" : "af50f08e-2bc7-4f86-8ca4-431b9929bc48",
        "tags" : [
        ]
      },
      {
        "id" : "226cdbe1-467c-49da-8627-4eaab9da8d0a",
        "parentId" : "1f798d8e-c36b-4a2e-ada8-7353bb46aa42",
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "Yeah, the code ends up being a bit more complicated but the amount of time it takes to go through the various options is much shorter.",
        "createdAt" : "2017-04-20T15:45:21Z",
        "updatedAt" : "2017-04-25T17:00:15Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2282bb812860284035d2a2ed8ac7074bf84cb50",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +3684,3688 @@    if (strlen(allowed) == arglen && strncmp(allowed, arg, arglen) == 0)\n      return;\n  }\n\n  fprintf(stderr, \"%s: %s is not allowed in NODE_OPTIONS\\n\", exe, arg);"
  },
  {
    "id" : "5b870515-d02c-4584-9247-2ee8a6cecd2c",
    "prId" : 12028,
    "prUrl" : "https://github.com/nodejs/node/pull/12028#pullrequestreview-34137395",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8194f1a-52c4-4eba-a971-3a548b0229d8",
        "parentId" : null,
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "This just makes me happy...",
        "createdAt" : "2017-04-21T22:52:51Z",
        "updatedAt" : "2017-04-25T17:00:15Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2282bb812860284035d2a2ed8ac7074bf84cb50",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +4220,4224 @@\n\nvoid ProcessArgv(int* argc,\n                 const char** argv,\n                 int* exec_argc,"
  },
  {
    "id" : "cd78102e-43f7-44d9-bc50-5d1a72f9b096",
    "prId" : 21283,
    "prUrl" : "https://github.com/nodejs/node/pull/21283#pullrequestreview-209584882",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60b0e3dc-1c28-4662-a9a1-6ef50858473b",
        "parentId" : null,
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "I think we want some more clearly defined semantics for this.\r\n\r\nDo we want this to be basically a  `uv_stop()` call? You can already do that as an embedder, we don’t need to provide anything for that.\r\n\r\nDo we want this to work like `worker.terminate()`, stopping the current JS execution – at *any* point – and not allowing JS to be run by this `Environment` afterwards?",
        "createdAt" : "2019-03-01T13:41:27Z",
        "updatedAt" : "2019-03-16T07:22:20Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      }
    ],
    "commit" : "d35af56e5f3b1334c4360dbf8a013d0c522fe5f8",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +980,984 @@  env->ExitEnv();\n  return 0;\n}\n\n}  // namespace node"
  },
  {
    "id" : "1adc91b7-399f-4404-a8fc-81fe52e1ca98",
    "prId" : 23804,
    "prUrl" : "https://github.com/nodejs/node/pull/23804#pullrequestreview-166792184",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc697af8-ad7b-43be-8540-3c2b6e61b80f",
        "parentId" : null,
        "authorId" : "4e8c77e8-10f9-4830-ac93-3bf7c9d321e2",
        "body" : "@addaleax do you know how `MaybeLocal`s work in a `TryCatch` scope? Is it OK to assume that when `caught` is empty, then `fatal_try_catch.HasCaught()` is also true?",
        "createdAt" : "2018-10-21T16:40:24Z",
        "updatedAt" : "2018-10-23T20:34:18Z",
        "lastEditedBy" : "4e8c77e8-10f9-4830-ac93-3bf7c9d321e2",
        "tags" : [
        ]
      },
      {
        "id" : "6ce0f6a8-d0ff-4bad-98a0-d28b06915958",
        "parentId" : "dc697af8-ad7b-43be-8540-3c2b6e61b80f",
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "> Is it OK to assume that when `caught` is empty, then `fatal_try_catch.HasCaught()` is also true?\r\n\r\nYes, they should work the same way :)",
        "createdAt" : "2018-10-21T16:42:00Z",
        "updatedAt" : "2018-10-23T20:34:18Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      }
    ],
    "commit" : "341006b144d18c15e1b026ea0aa5044c07436f87",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1392,1396 @@      ReportException(env, fatal_try_catch);\n      exit(7);\n    } else if (caught.ToLocalChecked()->IsFalse()) {\n      ReportException(env, error, message);\n"
  },
  {
    "id" : "3f71cfaa-3cbd-48d5-ad57-b2ba02196100",
    "prId" : 24365,
    "prUrl" : "https://github.com/nodejs/node/pull/24365#pullrequestreview-174948297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73028a2b-e2fd-4d37-a199-078d9d892476",
        "parentId" : null,
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "IMO whis should come with a CLI arg. opt-in or opt-out, IDK...",
        "createdAt" : "2018-11-14T15:56:30Z",
        "updatedAt" : "2018-11-16T15:18:01Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      },
      {
        "id" : "9aa2ee03-f978-4de5-a725-8a4c3c5a38e8",
        "parentId" : "73028a2b-e2fd-4d37-a199-078d9d892476",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "my understanding of warnings is that you can do\r\n```js\r\nprocess.on('warning', (warning) => {\r\n  if (warning.name === 'V8') { ... }\r\n});\r\n```",
        "createdAt" : "2018-11-14T16:08:59Z",
        "updatedAt" : "2018-11-16T15:18:01Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      },
      {
        "id" : "35b17161-2c58-4c00-a372-a8321ba16f82",
        "parentId" : "73028a2b-e2fd-4d37-a199-078d9d892476",
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "Ack.",
        "createdAt" : "2018-11-14T16:18:14Z",
        "updatedAt" : "2018-11-16T15:18:01Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1aa7301b4118a92a8f056d1bc02e6069886a913",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1158,1162 @@  Isolate* isolate = message->GetIsolate();\n  switch (message->ErrorLevel()) {\n    case Isolate::MessageErrorLevel::kMessageWarning: {\n      Environment* env = Environment::GetCurrent(isolate);\n      if (!env) {"
  },
  {
    "id" : "5701fddd-4b41-49af-a529-5edfd9d24f96",
    "prId" : 24365,
    "prUrl" : "https://github.com/nodejs/node/pull/24365#pullrequestreview-174958986",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6931b9b8-69b8-4424-85ee-1f82a094c363",
        "parentId" : null,
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "From a design/readability perspective, since `ProcessEmitWarningGeneric` just sends this back to JS, I'd do something like:\r\n```cpp\r\nLocal<Value> args[3] = {\r\n  filename,\r\n  message->GetLineNumber(env->context()).FromMaybe(-1),\r\n  message->Get()\r\n};\r\nif (env.format_warning.As<Function>()->Call(env->context(),\r\n                                            process,\r\n                                            arraysize(args),\r\n                                            args).IsEmpty()) {\r\n  oops;\r\n}\r\n```\r\nand do the formatting in JS...\r\nThat way we can turn this comment into a template\r\n```js\r\nprocess.format_warning = function (filename, line, message) {\r\n  if (check_some_option) {\r\n    console.warn(`${filename}:${line} ${message});\r\n  }\r\n}\r\n```",
        "createdAt" : "2018-11-14T15:59:43Z",
        "updatedAt" : "2018-11-16T15:18:01Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      },
      {
        "id" : "1c7337e0-b129-4269-9e37-6319bf2e0145",
        "parentId" : "6931b9b8-69b8-4424-85ee-1f82a094c363",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "I don't see any compelling reason to special case this, it's just a warning.",
        "createdAt" : "2018-11-14T16:03:59Z",
        "updatedAt" : "2018-11-16T15:18:01Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      },
      {
        "id" : "cbf198ae-1fda-4b14-964a-9dd15906b210",
        "parentId" : "6931b9b8-69b8-4424-85ee-1f82a094c363",
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "The special case is it's structured, and we're clumsily flattening it in C++.\r\nWhat I don't love is that here the formatting is forced (unwrapping the `Value`s and hiding the declarative nature of the template in imperative code).\r\n\r\nBut yeah it's not a blocker.",
        "createdAt" : "2018-11-14T16:25:29Z",
        "updatedAt" : "2018-11-16T15:18:01Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      },
      {
        "id" : "ef09699f-47cf-42de-9b47-516190f41a2b",
        "parentId" : "6931b9b8-69b8-4424-85ee-1f82a094c363",
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "Wait we have `ProcessEmitWarning(Environment* env, const char* fmt, ...)` so how about\r\n```cpp\r\nUSE(ProcessEmitWarning(env, \"%s:%d %s\",\r\n                       filename, \r\n                       message->GetLineNumber(env->context()).FromMaybe(-1),\r\n                       msg));\r\n```",
        "createdAt" : "2018-11-14T16:35:11Z",
        "updatedAt" : "2018-11-16T15:18:01Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      },
      {
        "id" : "992ecb35-301e-457d-9aa6-e7c027bfc0aa",
        "parentId" : "6931b9b8-69b8-4424-85ee-1f82a094c363",
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "Oooofff, it has no `type` param.\r\nNM.",
        "createdAt" : "2018-11-14T16:37:41Z",
        "updatedAt" : "2018-11-16T15:18:01Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1aa7301b4118a92a8f056d1bc02e6069886a913",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1165,1169 @@      Utf8Value filename(isolate,\n          message->GetScriptOrigin().ResourceName());\n      // (filename):(line) (message)\n      std::stringstream warning;\n      warning << *filename;"
  },
  {
    "id" : "9008457a-681e-4e20-abb2-d0bc884e1f92",
    "prId" : 24365,
    "prUrl" : "https://github.com/nodejs/node/pull/24365#pullrequestreview-175104705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d914d608-6639-4a6e-854f-50846428fa4a",
        "parentId" : null,
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "This isn't exactly wrong but we commonly use `snprintf()` on a stack-allocated buffer for this.",
        "createdAt" : "2018-11-14T19:10:07Z",
        "updatedAt" : "2018-11-16T15:18:01Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      },
      {
        "id" : "30b94a49-c335-40f0-90d3-e66d611a4880",
        "parentId" : "d914d608-6639-4a6e-854f-50846428fa4a",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "i have no opinion one way or another but i would assume @refack does",
        "createdAt" : "2018-11-14T20:08:48Z",
        "updatedAt" : "2018-11-16T15:18:01Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      },
      {
        "id" : "01b6c197-2cab-4a53-94d8-6b61046332a8",
        "parentId" : "d914d608-6639-4a6e-854f-50846428fa4a",
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "I like it that `snprintf()` takes a format string... (and yeah a stack buffer is nice too)\r\nBut it's up to you.",
        "createdAt" : "2018-11-14T20:14:20Z",
        "updatedAt" : "2018-11-16T15:18:01Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      },
      {
        "id" : "d103e65b-e890-435b-9910-688e54b1eccd",
        "parentId" : "d914d608-6639-4a6e-854f-50846428fa4a",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "how much should i allocate for the output buffer?",
        "createdAt" : "2018-11-14T21:52:33Z",
        "updatedAt" : "2018-11-16T15:18:01Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      },
      {
        "id" : "9e0bc153-ee5f-4ecd-b3ab-ec11c6669728",
        "parentId" : "d914d608-6639-4a6e-854f-50846428fa4a",
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "I think the fact that the filename length is arbitrary makes that hard – 1024 bytes should be okay in practice, but you can also leave the code as it currently is",
        "createdAt" : "2018-11-14T21:59:43Z",
        "updatedAt" : "2018-11-16T15:18:01Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      },
      {
        "id" : "0bf26edf-916e-4f58-b555-eaf05be21a2f",
        "parentId" : "d914d608-6639-4a6e-854f-50846428fa4a",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "i think i'll just leave it.",
        "createdAt" : "2018-11-14T22:13:06Z",
        "updatedAt" : "2018-11-16T15:18:01Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1aa7301b4118a92a8f056d1bc02e6069886a913",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1172,1176 @@      warning << \" \";\n      v8::String::Utf8Value msg(isolate, message->Get());\n      warning << *msg;\n      USE(ProcessEmitWarningGeneric(env, warning.str().c_str(), \"V8\"));\n      break;"
  },
  {
    "id" : "3dc4cbd2-b76d-4ef3-918f-17b01ac9f498",
    "prId" : 24365,
    "prUrl" : "https://github.com/nodejs/node/pull/24365#pullrequestreview-175029241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5adb78e-f362-4f30-90cf-0fdfd7809fdb",
        "parentId" : null,
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "Can you add a `break` statement?",
        "createdAt" : "2018-11-14T19:12:27Z",
        "updatedAt" : "2018-11-16T15:18:01Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1aa7301b4118a92a8f056d1bc02e6069886a913",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +1177,1181 @@    }\n    case Isolate::MessageErrorLevel::kMessageError:\n      FatalException(isolate, error, message);\n      break;\n  }"
  }
]