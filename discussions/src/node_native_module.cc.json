[
  {
    "id" : "65741d6e-fe01-4517-b89c-ff884f8c7413",
    "prId" : 31321,
    "prUrl" : "https://github.com/nodejs/node/pull/31321#pullrequestreview-344267127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "071b54d0-142d-4932-87d7-1bc73857047f",
        "parentId" : null,
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "There's still enough common functionality to factor out the read-to-std::string bit. The fact alone that you introduced a file descriptor leak in the first iteration is IMO enough reason to do it.\r\n\r\nI suggest sticking with InternalModuleReadJSON's read-to-std::vector and return the actual bytes read so you don't have to shrink-to-fit the std::vector.\r\n\r\nPossible future optimization: `std::move` the vector to a `v8::String::ExternalOneByteStringResource` derivative when creating the `v8::String` when it's definitely known to contain only ASCII or Latin-1.",
        "createdAt" : "2020-01-16T11:42:43Z",
        "updatedAt" : "2020-01-31T09:23:10Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      },
      {
        "id" : "b04d9fa7-1859-4924-a604-88b974f831fe",
        "parentId" : "071b54d0-142d-4932-87d7-1bc73857047f",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "They have different error handling behaviour, i'm really not sure how i'm supposed to combine them.",
        "createdAt" : "2020-01-16T19:11:11Z",
        "updatedAt" : "2020-01-31T09:23:10Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      },
      {
        "id" : "b90ab616-e001-4d91-a54b-4ec7a2a15e4b",
        "parentId" : "071b54d0-142d-4932-87d7-1bc73857047f",
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "I'm not sure what you mean. `r < 0` vs. `r <= 0` w.r.t. the return value of `uv_fs_read()`? The second one is the (superfluous) extra read I mentioned.",
        "createdAt" : "2020-01-16T21:44:18Z",
        "updatedAt" : "2020-01-31T09:23:10Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      },
      {
        "id" : "b9c7d38b-c0a0-464f-b20b-c6027cb8d03c",
        "parentId" : "071b54d0-142d-4932-87d7-1bc73857047f",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "I mean that all three have different behaviour to perform when an error happens. if you have some design in mind I'll gladly accept a patch.",
        "createdAt" : "2020-01-16T21:47:55Z",
        "updatedAt" : "2020-01-31T09:23:10Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      },
      {
        "id" : "3bc1f6ab-e3ad-4cd5-a252-267f44d94d29",
        "parentId" : "071b54d0-142d-4932-87d7-1bc73857047f",
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "I'm still unsure what you mean. The only material difference I see is that your version CHECKs when `uv_fs_open()` fails but I assume that's not what you mean.\r\n\r\n(I don't think that's a particular good way to handle file-not-found but since this is a core developer-only feature that I have no particular interest in using myself, I don't really care. :-))",
        "createdAt" : "2020-01-16T21:53:54Z",
        "updatedAt" : "2020-01-31T09:23:10Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      },
      {
        "id" : "875e13ec-9c60-4d4d-95b7-a842d371965c",
        "parentId" : "071b54d0-142d-4932-87d7-1bc73857047f",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "InternalModuleReadJSON returns `undefined` to the caller if reading fails, the one in module_wrap will best-effort return all the data it managed to read (if any), and the one I'm adding asserts that none of the operations fail. Perhaps aligning these more is best left to a separate PR?",
        "createdAt" : "2020-01-16T22:08:25Z",
        "updatedAt" : "2020-01-31T09:23:10Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      },
      {
        "id" : "3a858c75-3ca5-4f48-9be7-adb731132fe8",
        "parentId" : "071b54d0-142d-4932-87d7-1bc73857047f",
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "Ah, okay. I don't think that really changes the inner open/read/close logic - you just pass the error to the caller and let it decide what to do. But if you pinky promise to follow up with another PR, I'll let it drop. :-)",
        "createdAt" : "2020-01-16T22:42:17Z",
        "updatedAt" : "2020-01-31T09:23:10Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      },
      {
        "id" : "50b81ffa-51fb-461d-86f1-250363006a15",
        "parentId" : "071b54d0-142d-4932-87d7-1bc73857047f",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "pinky promise :D",
        "createdAt" : "2020-01-16T22:46:14Z",
        "updatedAt" : "2020-01-31T09:23:10Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      }
    ],
    "commit" : "43fb6ffef7a14b47d1b0ba8134102795f5017a59",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +222,226 @@    }\n    contents.append(buf.base, r);\n  }\n\n  return String::NewFromUtf8("
  }
]