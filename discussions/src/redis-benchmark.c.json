[
  {
    "id" : "2bc3aef6-5684-4e76-9ad2-c82dfdf91ea6",
    "prId" : 8872,
    "prUrl" : "https://github.com/redis/redis/pull/8872#pullrequestreview-647008584",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09b55459-6917-4d6a-8d17-f877af7709cb",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "@filipecosta90 @itamarhaber  what do you think of the chance that someone uses this benchmark to spot regressions (running it weekly and storing the results). now we'll change the content of this test from 450 to 500, it'll suddenly run slower.\r\non the other hand, changing the label can break some script, right?",
        "createdAt" : "2021-04-27T12:28:23Z",
        "updatedAt" : "2021-04-27T12:28:23Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "8fa57fb8-dd28-4856-9307-c3067272c67d",
        "parentId" : "09b55459-6917-4d6a-8d17-f877af7709cb",
        "authorId" : "99372f0e-10c0-44d7-a1cc-8d4d027b3fa8",
        "body" : "Anything is possible, granted, but I think the risk is low here",
        "createdAt" : "2021-04-28T12:39:08Z",
        "updatedAt" : "2021-04-28T12:39:08Z",
        "lastEditedBy" : "99372f0e-10c0-44d7-a1cc-8d4d027b3fa8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1e34e7261102a665ed990400a4594fc9d19c444",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1943,1947 @@        if (test_is_selected(\"lrange\") || test_is_selected(\"lrange_500\")) {\n            len = redisFormatCommand(&cmd,\"LRANGE mylist%s 0 499\",tag);\n            benchmark(\"LRANGE_500 (first 500 elements)\",cmd,len);\n            free(cmd);\n        }"
  },
  {
    "id" : "b9f29dfe-42be-4b9b-9628-5bd1777cea3c",
    "prId" : 8154,
    "prUrl" : "https://github.com/redis/redis/pull/8154#pullrequestreview-554292536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66926c36-7df9-43e9-bdf6-5f7f60daafbd",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "@ShooterIT i'm not too familiar with this area, but noticed this PR was neglected and and i would like to promote, please help me with the review.\r\n\r\none thing that's odd to me is that in the past we used to enter this block only if `node->ip` is NULL, and now we proceed to do `strcmp` without even checking if if's NULL or not. so maybe we need another `||` here.\r\n\r\nanother thing i wanna note is that we need to aim for redis-benchmark to be able to work with both new and old redis servers, so it should still be compatible with the old behavior of CLUSTER NODES too.",
        "createdAt" : "2020-12-16T10:28:20Z",
        "updatedAt" : "2020-12-16T10:28:20Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "964a5d95-3fb4-4452-9a85-25e7cec4fb95",
        "parentId" : "66926c36-7df9-43e9-bdf6-5f7f60daafbd",
        "authorId" : "98e31153-705f-4299-a152-78c428055d23",
        "body" : "Thanks @oranagra the ip of firstNode is `config.hostip`, it never is NULL, redis-benchmark will core dump in the pas if it is NULL, because we double free this `node->ip`.\r\nOld version  before https://github.com/redis/redis/commit/8fdc857a9f83e59b3062d051dc0155dd53c89ea7, we won't get myself ip, so we need to judge the ip parsed from CLUSTER NODE  is empty or not",
        "createdAt" : "2020-12-17T05:37:19Z",
        "updatedAt" : "2020-12-17T05:37:19Z",
        "lastEditedBy" : "98e31153-705f-4299-a152-78c428055d23",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ba2adf5da20e303a9f02c4f0d4c8df6b99cb896",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1184,1188 @@            node = firstNode;\n            if (ip != NULL && strcmp(node->ip, ip) != 0) {\n                node->ip = sdsnew(ip);\n                node->port = port;\n            }"
  },
  {
    "id" : "0cd82e1f-31c2-477c-970c-c50f5278a403",
    "prId" : 7959,
    "prUrl" : "https://github.com/redis/redis/pull/7959#pullrequestreview-518134687",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55fef955-7d1e-4a9f-ab9a-6ead9037b5a7",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i see redis-cli also handles `ECONNRESET` would we want that here?",
        "createdAt" : "2020-10-27T09:20:52Z",
        "updatedAt" : "2020-10-27T23:01:46Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "d950ad63-8f9e-4521-9ef5-8df4bc75be09",
        "parentId" : "55fef955-7d1e-4a9f-ab9a-6ead9037b5a7",
        "authorId" : "178b77ef-4974-4854-afae-4e18f5dd998f",
        "body" : "@oranagra should we reconnect in the middle of the benchmark? memtier_benchmark also does not reconnect so I would keep the same behaviour ( please confirm that I'm right about memtier @yossigo but I'm 99% sure :) ) ",
        "createdAt" : "2020-10-27T18:54:40Z",
        "updatedAt" : "2020-10-27T23:01:46Z",
        "lastEditedBy" : "178b77ef-4974-4854-afae-4e18f5dd998f",
        "tags" : [
        ]
      },
      {
        "id" : "cd4846a6-bd5e-4732-b256-440b064d1f4d",
        "parentId" : "55fef955-7d1e-4a9f-ab9a-6ead9037b5a7",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "it doesn't really matters here what memtier is doing,\r\nyou're right that if redis-benchamrk didn't have ability to reconnect before, we don't need to add one now (can be done later, and i'm not sure that's at all the right thing, maybe better to abort the benchmark).",
        "createdAt" : "2020-10-27T21:01:16Z",
        "updatedAt" : "2020-10-27T23:01:46Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae349a40dbd3f3ac929409dd0751ed34dafc3a1d",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +634,638 @@            if (nwritten != writeLen) {\n                if (nwritten == -1 && errno != EAGAIN) {\n                    if (errno != EPIPE)\n                        fprintf(stderr, \"Error writing to the server: %s\\n\", strerror(errno));\n                    freeClient(c);"
  },
  {
    "id" : "39c99672-8090-4601-b759-56beda2b6e48",
    "prId" : 7947,
    "prUrl" : "https://github.com/redis/redis/pull/7947#pullrequestreview-516404735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a23e360f-38f9-45de-8d51-b3b6bf6d8f7b",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "@filipecosta90 are you sure that's right? every write carries this count of commands?\r\ni'm not familiar with the redis_benchmark code too good. doesn't it use a streaming pipeline? i.e. one that initially sends N commands, and then as soon as getting the response for one, it issues another one, so that at any given moment there are N commands in flight?\r\n\r\neven f not, i see that we have a `c->pending` variable, maybe that's what we should be using? (rather than assuming each write has N commands)\r\n\r\nplease look into it and tell me what you found.",
        "createdAt" : "2020-10-25T18:05:26Z",
        "updatedAt" : "2020-10-25T22:35:24Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "c5cbe643-4dae-4604-a0a0-000d9c18da62",
        "parentId" : "a23e360f-38f9-45de-8d51-b3b6bf6d8f7b",
        "authorId" : "178b77ef-4974-4854-afae-4e18f5dd998f",
        "body" : "> even f not, i see that we have a `c->pending` variable, maybe that's what we should be using? (rather than assuming each write has N commands)\r\n\r\n@oranagra looking at [src/redis-benchmark.c#L716](https://github.com/redis/redis/blob/unstable/src/redis-benchmark.c#L716) we can check that c->obuf has always N pipeline commands. \r\n\r\nRegarding using c->pending istead of config.pipeline I believe we might get into an issue due to the initial setup commands `c->pending = config.pipeline+c->prefix_pending;` . Apart from it, and given that we only enter this condition when `c->written == 0` the value of c->pending inside that condition will always be `c->pending = config.pipeline` due to https://github.com/redis/redis/blob/unstable/src/redis-benchmark.c#L381;",
        "createdAt" : "2020-10-25T18:53:25Z",
        "updatedAt" : "2020-10-25T22:35:24Z",
        "lastEditedBy" : "178b77ef-4974-4854-afae-4e18f5dd998f",
        "tags" : [
        ]
      },
      {
        "id" : "7e9a5833-0567-41e2-908a-fbcbdafa2555",
        "parentId" : "a23e360f-38f9-45de-8d51-b3b6bf6d8f7b",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "ok...\r\nso that that i'm sure we're on the same line.\r\nit creates a client and an obuf with a single set of pipeline commands.\r\nthen writes to the socket, disables the write handler, enables the read handler.\r\nwhen it's done reading responses it \"re-sets\" the client, enables the write handler and run another iteration.\r\nso working in bursts rather than maintaining a constant in-flight pipeline.\r\n\r\nso now i see that `clientDone` (which is called by the read handler) does this logic too:\r\n```\r\n    if (requests_finished >= config.requests) {\r\n        freeClient(c);\r\n```\r\nso i wonder why it is needed in the write handler.\r\nin theory it's wrong for the write handler to free the client (if it writes anything we wanna wait for the responses), but i suppose that's just dead code (the read handler will free the client rather than re-set it).\r\n\r\ncan you please look into that?",
        "createdAt" : "2020-10-25T19:48:12Z",
        "updatedAt" : "2020-10-25T22:35:24Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "82f12cd1-ad4a-4a02-bb79-25f42067341f",
        "parentId" : "a23e360f-38f9-45de-8d51-b3b6bf6d8f7b",
        "authorId" : "178b77ef-4974-4854-afae-4e18f5dd998f",
        "body" : "> so now i see that clientDone (which is called by the read handler) does this logic too:\r\n\r\n>    if (requests_finished >= config.requests) {\r\n        freeClient(c); \r\n\r\n> so i wonder why it is needed in the write handler.\r\nin theory it's wrong for the write handler to free the client (if it writes anything we wanna wait for the responses), but i suppose that's just dead code (the read handler will free the client rather than re-set it).\r\n\r\n> can you please look into that?\r\n\r\n@oranagra agree. It's wrong to free the client in the write handler given the chance of the replies still to be processed not being processed at all. Confirmed that [removing the freeClient within the writeHandler](https://github.com/redis/redis/pull/7947/files#diff-f37c3eacb5f6ac27e8fa820f102e8b57f0f33c7b46e5ef2ba46b8ad8a56c86a6L582) does not affect the tests and redis-benchmark still works as expected. ",
        "createdAt" : "2020-10-25T22:44:19Z",
        "updatedAt" : "2020-10-25T22:44:19Z",
        "lastEditedBy" : "178b77ef-4974-4854-afae-4e18f5dd998f",
        "tags" : [
        ]
      }
    ],
    "commit" : "67f2927f057557f01b4621cd57e0bf0ff783c93e",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +595,599 @@        /* Enforce upper bound to number of requests. */\n        int requests_issued = 0;\n        atomicGetIncr(config.requests_issued, requests_issued, config.pipeline);\n        if (requests_issued >= config.requests) {\n            return;"
  },
  {
    "id" : "3de33daa-3109-4274-98e9-8344166d75a3",
    "prId" : 7931,
    "prUrl" : "https://github.com/redis/redis/pull/7931#pullrequestreview-512405973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d4cd994-eb3d-4cf5-a098-5f1659ad2441",
        "parentId" : null,
        "authorId" : "99372f0e-10c0-44d7-a1cc-8d4d027b3fa8",
        "body" : "Excellent fix!",
        "createdAt" : "2020-10-20T00:34:23Z",
        "updatedAt" : "2020-10-20T16:39:34Z",
        "lastEditedBy" : "99372f0e-10c0-44d7-a1cc-8d4d027b3fa8",
        "tags" : [
        ]
      },
      {
        "id" : "75fdc1cb-297c-4fc7-beee-906f95bc3ed9",
        "parentId" : "0d4cd994-eb3d-4cf5-a098-5f1659ad2441",
        "authorId" : "178b77ef-4974-4854-afae-4e18f5dd998f",
        "body" : ":) ",
        "createdAt" : "2020-10-20T07:28:48Z",
        "updatedAt" : "2020-10-20T16:39:34Z",
        "lastEditedBy" : "178b77ef-4974-4854-afae-4e18f5dd998f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a568e82d47a8ad867d0643a2b870999d2f875d70",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +780,784 @@                c->stagptr[c->staglen++] = p;\n                c->stagfree--;\n                p += 5; /* 5 is strlen(\"{tag}\"). */\n            }\n        }"
  },
  {
    "id" : "7b6a53d8-b269-42e9-85c3-31fd5ffded75",
    "prId" : 7488,
    "prUrl" : "https://github.com/redis/redis/pull/7488#pullrequestreview-444982687",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82419aeb-c7b4-4364-b8bf-cc0140955225",
        "parentId" : null,
        "authorId" : "351cea45-3d66-4827-bbfb-0a2c2c79b24b",
        "body" : "also here.",
        "createdAt" : "2020-07-08T17:29:01Z",
        "updatedAt" : "2020-07-10T09:47:21Z",
        "lastEditedBy" : "351cea45-3d66-4827-bbfb-0a2c2c79b24b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ae399c994eb0fa5ac7009cc734d6708b101b131",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +284,288 @@    freeReplyObject(reply);\n    redisFree(ctx);\n    return NULL;\n}\n"
  }
]