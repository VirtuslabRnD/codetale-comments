[
  {
    "id" : "aff239e2-96bf-496a-be49-36f90cc69340",
    "prId" : 7807,
    "prUrl" : "https://github.com/redis/redis/pull/7807#pullrequestreview-510494256",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a1dbf59-da35-4a99-af54-ff5e0a700744",
        "parentId" : null,
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "Is this ever called with deep = 1? Are you just keeping the code around in case someone else uses listpack?",
        "createdAt" : "2020-10-16T03:25:54Z",
        "updatedAt" : "2020-12-06T09:23:35Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      },
      {
        "id" : "1c17b52e-2671-4872-ab36-0a6576dbec27",
        "parentId" : "8a1dbf59-da35-4a99-af54-ff5e0a700744",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "yes, in the future, when listpacks are used by other data types, they can use this method.\r\ninitially i used it to validate the listpacks for streams in rdb.c, but i later realized that i need to validate that the actual records in the listpack make sense in the context of a stream to avoid runtime crashes (added streamValidateListpackIntegrity), and i didn't want to run over all the records in the listpack twice, so i made streamValidateListpackIntegrity do both the validation of the listpack structure and the stream in one pass.",
        "createdAt" : "2020-10-16T13:55:25Z",
        "updatedAt" : "2020-12-06T09:23:35Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "c54cd006593a03835df07ac9a1a8b139d7a619d2",
    "line" : 206,
    "diffHunk" : "@@ -1,1 +898,902 @@ * when `deep` is 0, only the integrity of the header is validated.\n * when `deep` is 1, we scan all the entries one by one. */\nint lpValidateIntegrity(unsigned char *lp, size_t size, int deep){\n    /* Check that we can actually read the header. (and EOF) */\n    if (size < LP_HDR_SIZE + 1)"
  }
]