[
  {
    "id" : "432312b1-13dc-4709-8036-441e359b1f5f",
    "prId" : 8999,
    "prUrl" : "https://github.com/redis/redis/pull/8999#pullrequestreview-676838555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "332d5134-ab69-433b-ad36-fd8eab09ca13",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "the documentation in the top of this function needs to be extended, to mentioned the \"extended\" callbacks.",
        "createdAt" : "2021-06-06T08:33:28Z",
        "updatedAt" : "2021-06-06T09:01:14Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "254652b84abcdefb675c01df159e8c730e91df3d",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +4572,4576 @@            moduleTypeUnlinkFunc2 unlink2;\n            moduleTypeCopyFunc2 copy2;\n        } v4;\n    } *tms = (struct typemethods*) typemethods_ptr;\n"
  },
  {
    "id" : "f93da81b-87e0-45d1-8dff-198d08645238",
    "prId" : 8890,
    "prUrl" : "https://github.com/redis/redis/pull/8890#pullrequestreview-669675755",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0da8f6ec-553f-48e4-a90c-3cb56ae994e4",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "so the spell checker also complains about whitespace at the end of line? or is that something related to a manual effort?",
        "createdAt" : "2021-05-26T12:57:14Z",
        "updatedAt" : "2021-05-26T13:14:25Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "b9dbff91-eb05-4635-999f-09344248ad6a",
        "parentId" : "0da8f6ec-553f-48e4-a90c-3cb56ae994e4",
        "authorId" : "c54e672f-7b5e-4402-bd8f-fcb255f27420",
        "body" : "Thoes whitespace were manual effort",
        "createdAt" : "2021-05-26T13:31:49Z",
        "updatedAt" : "2021-05-26T13:31:49Z",
        "lastEditedBy" : "c54e672f-7b5e-4402-bd8f-fcb255f27420",
        "tags" : [
        ]
      },
      {
        "id" : "ba0758a6-986c-4c0b-a452-3839fac2bec6",
        "parentId" : "0da8f6ec-553f-48e4-a90c-3cb56ae994e4",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "well, too many people are asking to fix these, so we might as well solve them in a big commit along with other text changes.\r\njust wanted to know if the CI is gonna fail on such from now on or not..",
        "createdAt" : "2021-05-26T19:17:04Z",
        "updatedAt" : "2021-05-26T19:17:04Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "9758819e-7ab5-4a43-981d-242a0c684a1a",
        "parentId" : "0da8f6ec-553f-48e4-a90c-3cb56ae994e4",
        "authorId" : "c54e672f-7b5e-4402-bd8f-fcb255f27420",
        "body" : "The checker will not check thoes `whitespace`.  \r\nThe CI will fail when it finds some typos.. Unless we add the word to the ignore-list.\r\n\r\nThere also an optional parameter in this action: https://github.com/codespell-project/actions-codespell#parameter-only_warn. But i didn't use this action. I can check on that later.",
        "createdAt" : "2021-05-27T02:24:39Z",
        "updatedAt" : "2021-05-27T02:30:42Z",
        "lastEditedBy" : "c54e672f-7b5e-4402-bd8f-fcb255f27420",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd0656f660857a4edc32042921465cf8e530a0dd",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +2355,2359 @@mstime_t RM_GetExpire(RedisModuleKey *key) {\n    mstime_t expire = getExpire(key->db,key->key);\n    if (expire == -1 || key->value == NULL)\n        return REDISMODULE_NO_EXPIRE;\n    expire -= mstime();"
  },
  {
    "id" : "a985ff89-0401-40f9-b3da-9db192ae9c8d",
    "prId" : 8890,
    "prUrl" : "https://github.com/redis/redis/pull/8890#pullrequestreview-669024684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f276a21-0f96-4495-a03b-11ceaafc7125",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i understand this is a manual fix, right?",
        "createdAt" : "2021-05-26T12:58:43Z",
        "updatedAt" : "2021-05-26T13:14:25Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "8be41343-d6e7-4bd7-a125-7fb15ae8ade0",
        "parentId" : "2f276a21-0f96-4495-a03b-11ceaafc7125",
        "authorId" : "c54e672f-7b5e-4402-bd8f-fcb255f27420",
        "body" : "yes",
        "createdAt" : "2021-05-26T13:32:46Z",
        "updatedAt" : "2021-05-26T13:32:46Z",
        "lastEditedBy" : "c54e672f-7b5e-4402-bd8f-fcb255f27420",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd0656f660857a4edc32042921465cf8e530a0dd",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +6059,6063 @@\n/* Return an array of string pointers, each string pointer points to a cluster\n * node ID of exactly REDISMODULE_NODE_ID_LEN bytes (without any null term).\n * The number of returned node IDs is stored into `*numnodes`.\n * However if this function is called by a module not running an a Redis"
  },
  {
    "id" : "4522d0c4-0ee3-4db1-9b34-ed94eeba2086",
    "prId" : 8890,
    "prUrl" : "https://github.com/redis/redis/pull/8890#pullrequestreview-669229500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9df69dd2-4628-4081-ac99-dfb13ef894fb",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i understand this is a manual fix, right?",
        "createdAt" : "2021-05-26T12:58:49Z",
        "updatedAt" : "2021-05-26T13:14:25Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "093d9274-c54f-432e-887e-ed1018c6ad31",
        "parentId" : "9df69dd2-4628-4081-ac99-dfb13ef894fb",
        "authorId" : "c54e672f-7b5e-4402-bd8f-fcb255f27420",
        "body" : "yes",
        "createdAt" : "2021-05-26T16:11:21Z",
        "updatedAt" : "2021-05-26T16:17:58Z",
        "lastEditedBy" : "c54e672f-7b5e-4402-bd8f-fcb255f27420",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd0656f660857a4edc32042921465cf8e530a0dd",
    "line" : 202,
    "diffHunk" : "@@ -1,1 +6075,6079 @@ *     char **ids = RedisModule_GetClusterNodesList(ctx,&count);\n *     for (j = 0; j < count; j++) {\n *         RedisModule_Log(ctx,\"notice\",\"Node %.*s\",\n *             REDISMODULE_NODE_ID_LEN,ids[j]);\n *     }"
  },
  {
    "id" : "2582cb00-21c5-4de8-8f25-d8e4bf9d6d44",
    "prId" : 8883,
    "prUrl" : "https://github.com/redis/redis/pull/8883#pullrequestreview-647822257",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4aac6710-e206-417e-ac4e-6639ec1d7e1f",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i'm not sure stating that it's one-based is correct.\r\nit actually refers to the argv array, in which [0] is the command itself.\r\nmaybe we should refer to https://redis.io/commands/command ?",
        "createdAt" : "2021-04-29T05:22:24Z",
        "updatedAt" : "2021-04-29T05:24:21Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "1575ec4b24f068f2cd2bb68c206e98629acbe306",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +881,885 @@ * Redis keys. See https://redis.io/commands/command for more information.\n *\n * * 'firstkey': One-based index of the first argument that's a key.\n *               Position 0 is always the command name itself.\n *               0 for commands with no keys."
  },
  {
    "id" : "daed6a66-0997-436f-883d-94e201316c8d",
    "prId" : 8617,
    "prUrl" : "https://github.com/redis/redis/pull/8617#pullrequestreview-608848633",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6375236-62f1-4190-9b49-bd14add6cdd9",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "didn't you mean this?\r\n```suggestion\r\n    int prev_replication_allowed = server.replication_allowed;\r\n    if (!server.replication_allowed) replicate = 0;\r\n    server.replication_allowed = 0;\r\n```",
        "createdAt" : "2021-03-10T13:53:00Z",
        "updatedAt" : "2021-03-10T13:53:01Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "9f98243d-83cd-476e-a2d3-6d6789f143dd",
        "parentId" : "e6375236-62f1-4190-9b49-bd14add6cdd9",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "ohh, my bad, i thought RM_Call does the replication when ! is used. didn't realize it passes the command down the line to be replicated normally",
        "createdAt" : "2021-03-10T15:32:21Z",
        "updatedAt" : "2021-03-10T15:32:21Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "085794708485ddfc70e3575fc9dbe1f0cee488c9",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +4082,4086 @@     * We want the replica/AOF to see only module1.foo and not the INCR from module2.bar */\n    int prev_replication_allowed = server.replication_allowed;\n    server.replication_allowed = replicate && server.replication_allowed;\n\n    /* Run the command */"
  },
  {
    "id" : "9d293e19-068d-4252-93e2-25ae79da9bcc",
    "prId" : 8564,
    "prUrl" : "https://github.com/redis/redis/pull/8564#pullrequestreview-616999265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c07db6fe-0f2c-4dff-83ea-a64a6f5b6f40",
        "parentId" : null,
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "Too long. Should split it into new line? ",
        "createdAt" : "2021-03-19T09:53:26Z",
        "updatedAt" : "2021-03-19T09:54:03Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "fc4eaac1-bd4a-4bbb-91cf-ab73df1e6849",
        "parentId" : "c07db6fe-0f2c-4dff-83ea-a64a6f5b6f40",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i don't personally mind long lines up to a reasonable limit.\r\nany hard limit (like 80) would be wrong, IMHO is should be decided per case to make the code readable.\r\ni.e. i hate it when a line is split in odd places just to comply with a limit, which makes it unreadable.\r\n\r\nin this case, splitting the `if` line would mean the `return` would be indented the same as the `if` line and then we better add a `{` on a line of it's own.\r\ni.e. we'll be adding 3 lines.\r\ni personally think the current code is ok, but i don't mind splitting it if it bothers anyone.\r\n\r\np.s. if this was error handling code that's repeated many times, and breaking it to many lines would make it hard to read the rest of / actual code and logic of the function, i would argue to keep it one long line.",
        "createdAt" : "2021-03-21T09:28:17Z",
        "updatedAt" : "2021-03-21T09:28:17Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "213eb0da762c7d57e9405ad92f5c9588911f2164",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2306,2310 @@ * the key was not open for writing or is an empty key. */\nint RM_SetExpire(RedisModuleKey *key, mstime_t expire) {\n    if (!(key->mode & REDISMODULE_WRITE) || key->value == NULL || (expire < 0 && expire != REDISMODULE_NO_EXPIRE))\n        return REDISMODULE_ERR;\n    if (expire != REDISMODULE_NO_EXPIRE) {"
  },
  {
    "id" : "26b473f8-67cc-4e59-b529-12a11acc933b",
    "prId" : 8446,
    "prUrl" : "https://github.com/redis/redis/pull/8446#pullrequestreview-583796013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ad133d9-d9c3-4de9-989c-5978a42ed07b",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "this one can return 0, in which case the return value can be less than requested and we didn't set errno",
        "createdAt" : "2021-02-04T20:42:56Z",
        "updatedAt" : "2021-02-08T20:14:53Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "26184578aff779b2fc184e64f65b6783a5e154e4",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +3058,3062 @@        /* Handle deletion if value is REDISMODULE_HASH_DELETE. */\n        if (value == REDISMODULE_HASH_DELETE) {\n            count += hashTypeDelete(key->value, field->ptr);\n            if (flags & REDISMODULE_HASH_CFIELDS) decrRefCount(field);\n            continue;"
  },
  {
    "id" : "0727a779-5ac9-4bde-8986-1b0f40d6b15a",
    "prId" : 8442,
    "prUrl" : "https://github.com/redis/redis/pull/8442#pullrequestreview-583504135",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c7e1690-5d62-43b1-856c-f24371f19ab8",
        "parentId" : null,
        "authorId" : "99372f0e-10c0-44d7-a1cc-8d4d027b3fa8",
        "body" : "Is this intentional?",
        "createdAt" : "2021-02-04T13:07:24Z",
        "updatedAt" : "2021-04-13T21:50:40Z",
        "lastEditedBy" : "99372f0e-10c0-44d7-a1cc-8d4d027b3fa8",
        "tags" : [
        ]
      },
      {
        "id" : "9f7a3ad8-e740-44b2-83b9-bf1d57cab9f0",
        "parentId" : "8c7e1690-5d62-43b1-856c-f24371f19ab8",
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "Yes, to hide it from the API docs, since it's internal. If there is no comment block just before the RM_ function, it will not be included.\r\n\r\nIs it wrong?",
        "createdAt" : "2021-02-04T15:19:18Z",
        "updatedAt" : "2021-04-13T21:50:40Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      }
    ],
    "commit" : "4495de09d75bc3d1b9cf425600043327358777eb",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +614,618 @@     *\n     * This function is not meant to be used by modules developer, it is only\n     * used implicitly by including redismodule.h. */\n    dictEntry *he = dictFind(server.moduleapi, funcname);\n    if (!he) return REDISMODULE_ERR;"
  },
  {
    "id" : "c1ef8bf1-90e1-4a88-9176-d65d24517dcc",
    "prId" : 8442,
    "prUrl" : "https://github.com/redis/redis/pull/8442#pullrequestreview-583559303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14d55188-b25a-497b-9bd5-deba5971903a",
        "parentId" : null,
        "authorId" : "99372f0e-10c0-44d7-a1cc-8d4d027b3fa8",
        "body" : "??",
        "createdAt" : "2021-02-04T13:15:33Z",
        "updatedAt" : "2021-04-13T21:50:40Z",
        "lastEditedBy" : "99372f0e-10c0-44d7-a1cc-8d4d027b3fa8",
        "tags" : [
        ]
      },
      {
        "id" : "ce86562d-20bd-4398-b98a-557fef8a8efc",
        "parentId" : "14d55188-b25a-497b-9bd5-deba5971903a",
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "Since the section headings are ## and the RM function name is ###, and this is a sub-headings inside the RM function documentation....",
        "createdAt" : "2021-02-04T16:09:01Z",
        "updatedAt" : "2021-04-13T21:50:40Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      }
    ],
    "commit" : "4495de09d75bc3d1b9cf425600043327358777eb",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +1784,1788 @@ * Otherwise, by default, the command will be propagated in both channels.\n *\n * #### Note about calling this function from a thread safe context:\n *\n * Normally when you call this function from the callback implementing a"
  },
  {
    "id" : "37a5f9fe-8002-4be7-82f3-e660b7c77883",
    "prId" : 8442,
    "prUrl" : "https://github.com/redis/redis/pull/8442#pullrequestreview-583561897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54a408a2-dc27-4806-aeec-4207cc590e4d",
        "parentId" : null,
        "authorId" : "99372f0e-10c0-44d7-a1cc-8d4d027b3fa8",
        "body" : "??",
        "createdAt" : "2021-02-04T13:15:40Z",
        "updatedAt" : "2021-04-13T21:50:40Z",
        "lastEditedBy" : "99372f0e-10c0-44d7-a1cc-8d4d027b3fa8",
        "tags" : [
        ]
      },
      {
        "id" : "9e9b6fe9-c9e4-432c-819a-05cafee2f50e",
        "parentId" : "54a408a2-dc27-4806-aeec-4207cc590e4d",
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "See above",
        "createdAt" : "2021-02-04T16:11:31Z",
        "updatedAt" : "2021-04-13T21:50:40Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      }
    ],
    "commit" : "4495de09d75bc3d1b9cf425600043327358777eb",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +1796,1800 @@ * immediately.\n *\n * #### Return value\n *\n * The command returns REDISMODULE_ERR if the format specifiers are invalid"
  },
  {
    "id" : "83838fbd-cea1-43ab-807b-1d04e0f54a14",
    "prId" : 8344,
    "prUrl" : "https://github.com/redis/redis/pull/8344#pullrequestreview-569599001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6721c325-f6ac-412f-a0b5-daa296e9f0ed",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "unlike the previous one i commented on (which looked good in redis.io), this one does indeed looks messed up in redis.io.\r\ni wonder what's the difference from the previous one i commented on..\r\nmaybe it's the empty line which we should just delete instead of adding indentation in both of these?",
        "createdAt" : "2021-01-15T16:17:29Z",
        "updatedAt" : "2021-01-19T22:39:14Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "c69f4b5a-ec0e-4c63-a87b-26c6add67f21",
        "parentId" : "6721c325-f6ac-412f-a0b5-daa296e9f0ed",
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "It's the indentation. The body of multi-paragraph list items need 4 spaces indentation. The empty lines between the bullets don't matter. I can revert the empty lines to minimize the diff.",
        "createdAt" : "2021-01-15T20:32:43Z",
        "updatedAt" : "2021-01-19T22:39:14Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      }
    ],
    "commit" : "22ca1a6383df6d287f3672ab45b5016a29a15a7d",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +7194,7198 @@ *     to replica or the other way around, however the event is\n *     also called when the replica remains a replica but starts to\n *     replicate with a different master.\n *\n *     The following sub events are available:"
  },
  {
    "id" : "0960dafc-703d-4365-b776-e74d02183662",
    "prId" : 8325,
    "prUrl" : "https://github.com/redis/redis/pull/8325#pullrequestreview-569235527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c5e571f-010c-4e0e-a16d-8cb372cf9c64",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "looks like this one didn't get indented correctly.",
        "createdAt" : "2021-01-15T12:01:42Z",
        "updatedAt" : "2021-01-15T12:05:31Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "e60ff72b-7a1e-475e-9618-11ffe28f13d5",
        "parentId" : "6c5e571f-010c-4e0e-a16d-8cb372cf9c64",
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "This is correct actually. It's a nested list.",
        "createdAt" : "2021-01-15T12:11:54Z",
        "updatedAt" : "2021-01-15T12:11:54Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      },
      {
        "id" : "da42cdce-c4f4-4a25-9b63-c106b11b256c",
        "parentId" : "6c5e571f-010c-4e0e-a16d-8cb372cf9c64",
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "Ah, I see redis.io isn't rendered the same way as Github. In Github it looks right: https://github.com/redis/redis-doc/blob/master/topics/modules-api-ref.md#redismodule_call\r\n",
        "createdAt" : "2021-01-15T12:18:28Z",
        "updatedAt" : "2021-01-15T12:18:28Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      },
      {
        "id" : "c8e4163e-eb86-4e46-87d5-aa18781e2db9",
        "parentId" : "6c5e571f-010c-4e0e-a16d-8cb372cf9c64",
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "I don't know which markdown renderer is used in redis.io, but according to the original markdown spec (https://daringfireball.net/projects/markdown/syntax#list) the body of multi-paragraph lists should be indented 4 spaces, so I'll do that and hope it will work.",
        "createdAt" : "2021-01-15T12:56:21Z",
        "updatedAt" : "2021-01-15T12:56:21Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      }
    ],
    "commit" : "7066c4bbc98e20a30b680499f119cc7fbf2af50b",
    "line" : 208,
    "diffHunk" : "@@ -1,1 +3363,3367 @@ *   * A: Suppress AOF propagation, send only to replicas (requires `!`).\n *   * R: Suppress replicas propagation, send only to AOF (requires `!`).\n * * **...**: The actual arguments to the Redis command.\n *\n * On success a RedisModuleCallReply object is returned, otherwise"
  },
  {
    "id" : "6bd65051-6f11-4f4a-a2bb-9bc83cc1d42d",
    "prId" : 8325,
    "prUrl" : "https://github.com/redis/redis/pull/8325#pullrequestreview-569218603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86fe3fb7-7f6e-45cb-b00b-237ba2a405ff",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "these don't look great in redis.io. maybe use similar formatting to what we have in RM_DictIteratorStartC ?",
        "createdAt" : "2021-01-15T12:03:15Z",
        "updatedAt" : "2021-01-15T12:05:31Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "7253e7fc-ff03-4ce6-98d0-c6c2d8a39599",
        "parentId" : "86fe3fb7-7f6e-45cb-b00b-237ba2a405ff",
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "You mean with backticks? Sure, I can do that.\r\n\r\nActually there are several small typos and small things that can be improved. I didn't want the diff to be too big, but I can sure do more if you want in a follow-up.",
        "createdAt" : "2021-01-15T12:17:47Z",
        "updatedAt" : "2021-01-15T12:17:47Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      },
      {
        "id" : "0e36616b-fd9b-478d-8068-3a4dc79b2c80",
        "parentId" : "86fe3fb7-7f6e-45cb-b00b-237ba2a405ff",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "I mean the  bbackttick, and more importantly the dashes. ",
        "createdAt" : "2021-01-15T12:30:53Z",
        "updatedAt" : "2021-01-15T12:30:53Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "7066c4bbc98e20a30b680499f119cc7fbf2af50b",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +3351,3355 @@ *   of the arguments should be specified by a valid type specification:\n *\n *   * b: The argument is a buffer and is immediately followed by another\n *        argument that is the buffer's length.\n *   * c: The argument is a pointer to a plain C string (null-terminated)."
  },
  {
    "id" : "15583fe6-e1e1-4744-8d75-d86362835d81",
    "prId" : 8288,
    "prUrl" : "https://github.com/redis/redis/pull/8288#pullrequestreview-561847324",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddabba33-9081-46f8-b4c8-d75f1b89e7da",
        "parentId" : null,
        "authorId" : "5b59af25-38e9-4dfb-8906-a8d9b362ef00",
        "body" : "A comment depending on how much validations normally is done at this level:\r\nValidating that argv contains an even amount of elements? (and possibly >= numfields*2 elems)\r\nProbably good since it seems that `streamAppendItem()` expects values to exist: `value = argv[i*2+1]->ptr`",
        "createdAt" : "2021-01-05T11:55:57Z",
        "updatedAt" : "2021-01-25T14:03:46Z",
        "lastEditedBy" : "5b59af25-38e9-4dfb-8906-a8d9b362ef00",
        "tags" : [
        ]
      },
      {
        "id" : "d834bb87-9742-4663-a448-919ef5152bce",
        "parentId" : "ddabba33-9081-46f8-b4c8-d75f1b89e7da",
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "What do you mean? It's not possible to check the number of elements in argv.",
        "createdAt" : "2021-01-05T13:27:18Z",
        "updatedAt" : "2021-01-25T14:03:46Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      },
      {
        "id" : "cda51ec0-89ab-44e3-abee-1f7837374d29",
        "parentId" : "ddabba33-9081-46f8-b4c8-d75f1b89e7da",
        "authorId" : "5b59af25-38e9-4dfb-8906-a8d9b362ef00",
        "body" : "Never mind, I see now that we only have pointers to work with and no container. It needs to be correct from caller and your updated function description is perfect.",
        "createdAt" : "2021-01-05T14:45:58Z",
        "updatedAt" : "2021-01-25T14:03:46Z",
        "lastEditedBy" : "5b59af25-38e9-4dfb-8906-a8d9b362ef00",
        "tags" : [
        ]
      }
    ],
    "commit" : "c811c1e8c10ced1e8469e916ffa29ea06cc0a2e4",
    "line" : 461,
    "diffHunk" : "@@ -1,1 +3145,3149 @@ */\nint RM_StreamAdd(RedisModuleKey *key, int flags, RedisModuleStreamID *id, RedisModuleString **argv, long numfields) {\n    /* Validate args */\n    if (!key || (numfields != 0 && !argv) || /* invalid key or argv */\n        (flags & ~(REDISMODULE_STREAM_ADD_AUTOID)) || /* invalid flags */"
  },
  {
    "id" : "ad895c8b-ca05-4575-83ca-a1dbc6fb3ba2",
    "prId" : 8264,
    "prUrl" : "https://github.com/redis/redis/pull/8264#pullrequestreview-563277847",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a306f8a-415a-4e84-849e-ddc3287d1c49",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i think these two can move into `resetChildState()` too.\r\nwe always do them in either the done handler (or the function that calls it), or the killer proc, right?\r\n```\r\n    closeChildInfoPipe();\r\n    updateDictResizePolicy();\r\n```",
        "createdAt" : "2021-01-07T06:41:27Z",
        "updatedAt" : "2021-01-07T14:03:52Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "216dc5b5-5930-4793-a3fa-720559123ee8",
        "parentId" : "9a306f8a-415a-4e84-849e-ddc3287d1c49",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "in addition to moving these two into resetChildState, i think the call to resetChildState can be moved out of the 3 specific done handlers, and be called in checkChildrenDone instead.",
        "createdAt" : "2021-01-07T08:04:10Z",
        "updatedAt" : "2021-01-07T14:03:52Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c2eff0282e4c760da64f520d95fcd41bc44eefa",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +7114,7118 @@    }\n    /* Reset the buffer accumulating changes while the child saves. */\n    resetChildState();\n    moduleForkInfo.done_handler = NULL;\n    moduleForkInfo.done_handler_user_data = NULL;"
  },
  {
    "id" : "9ae908c1-ac3a-4e65-8569-7b1bc7c3c06d",
    "prId" : 8149,
    "prUrl" : "https://github.com/redis/redis/pull/8149#pullrequestreview-546271611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82c93bf2-7a2e-4729-b273-6e7f2c00adf3",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "didn't we say we wanna cache the stop condition so that we don't call mstime again unnecessarily?\r\nor alternatively we should enhance the comment to advise that this API shouldn't be called too often (which will also ease the pain before we reach endtime)",
        "createdAt" : "2020-12-07T14:35:07Z",
        "updatedAt" : "2020-12-09T18:48:16Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "10e8aaee-31b4-4bd5-b3fc-2339d55b6bd8",
        "parentId" : "82c93bf2-7a2e-4729-b273-6e7f2c00adf3",
        "authorId" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "body" : "I thought it's best to avoid hard-coding this and let the module decide, but you are right it should be clarified.",
        "createdAt" : "2020-12-07T15:41:10Z",
        "updatedAt" : "2020-12-09T18:48:16Z",
        "lastEditedBy" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "tags" : [
        ]
      }
    ],
    "commit" : "170d0b5c1148c9d1ffb5c3bad8e03feedcd00ae6",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +8219,8223 @@ */\nint RM_DefragShouldStop(RedisModuleDefragCtx *ctx) {\n    return (ctx->endtime != 0 && ctx->endtime < ustime());\n}\n"
  },
  {
    "id" : "470157c1-7c1f-4e72-900f-07509aa8e840",
    "prId" : 8149,
    "prUrl" : "https://github.com/redis/redis/pull/8149#pullrequestreview-546198989",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "502c8bab-4187-4a3d-8677-94f0e56cba5c",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "```suggestion\r\n/* Defrag a RedisModuleString previously allocated by RM_CreateString, etc.\r\n```\r\nwhat about retained strings, possibly ones that the module keeps several references to them (not sharing them with redis)?\r\ni see activeDefragStringOb returns NULL if the refcount is not 1, maybe we should at least document that?",
        "createdAt" : "2020-12-07T14:41:58Z",
        "updatedAt" : "2020-12-09T18:48:16Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "170d0b5c1148c9d1ffb5c3bad8e03feedcd00ae6",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +8285,8289 @@}\n\n/* Defrag a RedisModuleString previously allocated by RM_Alloc, RM_Calloc, etc.\n * See RM_DefragAlloc() for more information on how the defragmentation process\n * works."
  },
  {
    "id" : "59ec9c74-bfc1-492a-908c-e647a1dcdb91",
    "prId" : 8149,
    "prUrl" : "https://github.com/redis/redis/pull/8149#pullrequestreview-546198989",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "824fa970-2166-40fa-99af-999a110a8e70",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "do we wanna suggest / document that there's only one concurrent defrag process and one concurrent key that's being defragged, so that the module can use the numeric cursor as a boolean, and store a static / global cursor that's non-numeric?",
        "createdAt" : "2020-12-07T14:47:28Z",
        "updatedAt" : "2020-12-09T18:48:16Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "170d0b5c1148c9d1ffb5c3bad8e03feedcd00ae6",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +8258,8262 @@ * defrag cursors.\n */\nint RM_DefragCursorGet(RedisModuleDefragCtx *ctx, unsigned long *cursor) {\n    if (!ctx->cursor)\n        return REDISMODULE_ERR;"
  },
  {
    "id" : "e132838b-3861-4f3d-969d-ce5acb62b4b8",
    "prId" : 8149,
    "prUrl" : "https://github.com/redis/redis/pull/8149#pullrequestreview-546198989",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "535e5563-d565-4b0c-89cd-306574be2098",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "maybe we wanna document somewhere that the free_effort is matched against this config?\r\nor do we rather leave it vague (people will look into the code)",
        "createdAt" : "2020-12-07T14:49:27Z",
        "updatedAt" : "2020-12-09T18:48:16Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "170d0b5c1148c9d1ffb5c3bad8e03feedcd00ae6",
    "line" : 250,
    "diffHunk" : "@@ -1,1 +8357,8361 @@        if (!effort)\n            effort = SIZE_MAX;\n        if (effort > server.active_defrag_max_scan_fields) {\n            return 0;  /* Defrag later */\n        }"
  },
  {
    "id" : "c15886f4-e33e-4ce2-87a1-5dec0bce4999",
    "prId" : 8149,
    "prUrl" : "https://github.com/redis/redis/pull/8149#pullrequestreview-546505454",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46e72ddb-3b91-4428-af67-22f40c99aebd",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "all of that can be done in one line 8-)",
        "createdAt" : "2020-12-07T19:47:12Z",
        "updatedAt" : "2020-12-09T18:48:16Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "fd27fc66-47cd-46e5-b151-2734f4e86f96",
        "parentId" : "46e72ddb-3b91-4428-af67-22f40c99aebd",
        "authorId" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "body" : "lots more can be done in one line. but why?",
        "createdAt" : "2020-12-07T20:22:30Z",
        "updatedAt" : "2020-12-09T18:48:16Z",
        "lastEditedBy" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "tags" : [
        ]
      }
    ],
    "commit" : "170d0b5c1148c9d1ffb5c3bad8e03feedcd00ae6",
    "line" : 237,
    "diffHunk" : "@@ -1,1 +8344,8348 @@        (*defragged)++;\n        value->ptr = mv = newmv;\n    }\n\n    if (!mt->defrag)"
  },
  {
    "id" : "74d5fc1f-2eff-4a89-a6f5-f82605837f0e",
    "prId" : 8112,
    "prUrl" : "https://github.com/redis/redis/pull/8112#pullrequestreview-542228235",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd3df1a4-82e0-41cc-8f99-59bca736df8d",
        "parentId" : null,
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "Why are hints provided? It seems like it is breaking it's not information the module should need, since keys shouldn't really know where they are. Since you can move them around after they are copied and achieve the same effect.  ",
        "createdAt" : "2020-12-01T01:41:06Z",
        "updatedAt" : "2020-12-01T10:26:56Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      },
      {
        "id" : "caf1605e-6173-427b-87bd-a7eb4401af26",
        "parentId" : "dd3df1a4-82e0-41cc-8f99-59bca736df8d",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "we've come to realize that a lot of modules do things they shouldn't!\r\none case that seems semi-common is storing extra metadata on keys outside of the keyspace.\r\nsimple modules will not use that information, but the complex ones may depend on it.\r\np.s. these modules go through hoops to overcome the absence of the key name in the free callback, and we recently added it for the unlink callback.",
        "createdAt" : "2020-12-01T06:40:46Z",
        "updatedAt" : "2020-12-01T10:26:56Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "8f929281-ed7f-4c24-a8f1-23a6046594ed",
        "parentId" : "dd3df1a4-82e0-41cc-8f99-59bca736df8d",
        "authorId" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "body" : "That's also why I refer to this as a hint rather than a hard commitment to provide a key name. We also have the same thing in `rdb_save` and `rdb_load` where the key name can be queried from `RedisModuleIO` but it may or may not be there depending on the context.",
        "createdAt" : "2020-12-01T09:42:09Z",
        "updatedAt" : "2020-12-01T10:26:56Z",
        "lastEditedBy" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "tags" : [
        ]
      },
      {
        "id" : "107c69de-363b-4fc8-8902-a0060dee8d5e",
        "parentId" : "dd3df1a4-82e0-41cc-8f99-59bca736df8d",
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "Yeah, the whole notion that we added a \"hint\" is sort of weird. I don't know why anyone would actually want to rely on it. If they want to store additional metadata outside of the keyspace, it seems like the notification system is a better approach?",
        "createdAt" : "2020-12-01T19:30:59Z",
        "updatedAt" : "2020-12-01T19:30:59Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      }
    ],
    "commit" : "53b03b325424bcdf6e063e2df5e45bba0e7cc1fe",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +3716,3720 @@ * * **copy**: A callback function pointer that is used to make a copy of the specified key.\n *   The module is expected to perform a deep copy of the specified value and return it.\n *   In addition, hints about the names of the source and destination keys is provided.\n *   A NULL return value is considered an error and the copy operation fails.\n *   Note: if the target key exists and is being overwritten, the copy callback will be"
  },
  {
    "id" : "c61901eb-dc6e-4933-8192-c552a87d295b",
    "prId" : 8097,
    "prUrl" : "https://github.com/redis/redis/pull/8097#pullrequestreview-540459930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a64e187-d0c4-4954-8987-c91e5cb063a8",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i just realized this can cause the wrong indication in case of a busy script.\r\nhowever, in theory, module commands can never run during busy scripts (the list of commands that are allowed while server.lua_timedout is hard coded in processCommand, and AFAIK, we never release the GIL during these).\r\n\r\nmaybe @MeirShpilraien should take a look just in case.",
        "createdAt" : "2020-11-29T09:00:51Z",
        "updatedAt" : "2020-12-06T10:28:47Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "507500a08b1ca9da0bf18c685e1f5e04d85487bc",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +1960,1964 @@\n    if (server.in_eval)\n        flags |= REDISMODULE_CTX_FLAGS_LUA;\n\n    if (server.in_exec)"
  },
  {
    "id" : "d5809f7a-b76a-4ba2-80a8-b360c5705e12",
    "prId" : 7987,
    "prUrl" : "https://github.com/redis/redis/pull/7987#pullrequestreview-520001896",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "365f25b2-a8b8-411c-8282-faf5b484bed8",
        "parentId" : null,
        "authorId" : "87e9831c-db9d-4e4b-bbe0-0e21a65b08de",
        "body" : "If it is to improve the accuracy of the timer, I think it is better to put the update of now directly into the while loop. For example, there are multiple timers at the same time. After the callback of the previous timer is executed (it may take a long time to execute), the expiretime of the next timer has arrived, but in the current implementation, you need to execute this timer in the next event callback.",
        "createdAt" : "2020-10-29T13:46:31Z",
        "updatedAt" : "2020-10-29T13:46:31Z",
        "lastEditedBy" : "87e9831c-db9d-4e4b-bbe0-0e21a65b08de",
        "tags" : [
        ]
      },
      {
        "id" : "770fe654-c7cc-49a0-8c9e-889bed867c65",
        "parentId" : "365f25b2-a8b8-411c-8282-faf5b484bed8",
        "authorId" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "body" : "if we update `now` inside the loop and the timer callback takes less than the period we can get stuck in an endless loop... \r\nexample: my timer registers itself t run every 1s and takes 2s to execute.\r\nlet's say that on the first iteration now=9000 and expiretime=8999 so we execute the callback which takes 2s and re-registers timer for 1s from now which is 9001\r\nnext loop now=9002 and expiretime is 9001 so the callback is executed again, endlessly\r\n",
        "createdAt" : "2020-10-29T14:20:39Z",
        "updatedAt" : "2020-10-29T14:20:39Z",
        "lastEditedBy" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "tags" : [
        ]
      },
      {
        "id" : "5dd09a86-3cc8-4ade-b753-d07177e7c6bb",
        "parentId" : "365f25b2-a8b8-411c-8282-faf5b484bed8",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i agree with the current code of the PR, the criteria for triggering all timers should be the time in which the loop started.\r\nwe can maybe add complicated code to better serve other timers and still avoid endless loop, but i'm not sure the effort is worth it.\r\nthis fix is still simple, and just solves the bug which would cause a timer's request to be correctly recorded in the rax, but the loop exiting and telling redis to sleep for too long.",
        "createdAt" : "2020-10-29T19:25:34Z",
        "updatedAt" : "2020-10-29T19:25:34Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "a169ee7e21f5059760a3247049e202a98c871552",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +5446,5450 @@             * 'next_period' isn't affected by the time it took to execute\n             * previous calls to 'callback. */\n            next_period = (expiretime-ustime())/1000; /* Scale to milliseconds. */\n            break;\n        }"
  },
  {
    "id" : "4701d695-a570-429f-8b0a-95c8fe3b531a",
    "prId" : 7912,
    "prUrl" : "https://github.com/redis/redis/pull/7912#pullrequestreview-526954606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd05f4aa-0489-4684-a4f8-a49c40e8b8f7",
        "parentId" : null,
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "I see this is a direct translation from OS, but I think the notion of free_effort is unnecessary and confusing from a module context. I feel like a better callback would be, can_free_async(), which can make it's own decision about whether or not this is worth freeing async. ",
        "createdAt" : "2020-11-09T23:57:42Z",
        "updatedAt" : "2020-11-12T06:23:10Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      },
      {
        "id" : "7dee2a49-ecac-409a-bb4f-aab61d90b352",
        "parentId" : "fd05f4aa-0489-4684-a4f8-a49c40e8b8f7",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "@madolson what do you mean by \"OS\"?\r\nwe're trying to match the effort to:\r\n```\r\n#define LAZYFREE_THRESHOLD 64\r\n```\r\ni think a name like `can_free_async` is misleading (it's possible that it \"can\" but better not do that). if we're seeking a boolean return, maybe a better name would be `should_free_async`.\r\nbut then if we some day let users control this constant via command or config, the modules will need to be able to query it.\r\ni think returning the complexity (how many pointers you have to free, or how many loops you'll need to run) makes sense as a return value.\r\ni suppose we better document that 0 indicate not to be released by a thread.",
        "createdAt" : "2020-11-10T06:44:22Z",
        "updatedAt" : "2020-11-12T06:23:10Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "1f279e01-5e1e-47b7-a04f-8772d2e90835",
        "parentId" : "fd05f4aa-0489-4684-a4f8-a49c40e8b8f7",
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "Open source? I didn't know what to call none module redis code, redis core maybe?\n\nI still think should free async makes a more sense. The lazy free estimate is an approximation for \"should we free this async\". A module doesn't need to make the same decision we do.\n\nI also think we should never expose the lazy free effort as a parameter, without some type of conversion in between. You could be more explicit and pass the effort to the module callback function and it can choose if it wants to ignore it. I just think we should have more thoughtful apis. From an outside user it's very hard to understand.",
        "createdAt" : "2020-11-10T08:22:15Z",
        "updatedAt" : "2020-11-12T06:23:10Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      }
    ],
    "commit" : "494ba0f131d1c3e66e275affeb04a04e5160ab44",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +3680,3684 @@ * * **aux_load**: A callback function pointer that loads out of keyspace data from RDB files.\n *   Similar to aux_save, returns REDISMODULE_OK on success, and ERR otherwise.\n * * **free_effort**: A callback function pointer that used to determine whether the module's\n *   memory needs to be lazy reclaimed. The module should return the complexity involved by\n *   freeing the value. for example: how many pointers are gonna be freed. Note that if it "
  },
  {
    "id" : "7b65fcb8-6b59-4968-bd48-9e0875478037",
    "prId" : 7884,
    "prUrl" : "https://github.com/redis/redis/pull/7884#pullrequestreview-502309183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "015400ae-f191-4025-b0ff-6d0ff85d3ae3",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "now that we get the pointer to that buffer as input (rather than static in another file), it should be relatively easy to improve that.\r\nwanna take this opportunity?",
        "createdAt" : "2020-10-05T16:24:24Z",
        "updatedAt" : "2020-10-06T09:46:58Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "c8e2ca29-2544-447e-9178-b292ff842f5f",
        "parentId" : "015400ae-f191-4025-b0ff-6d0ff85d3ae3",
        "authorId" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "body" : "Initially I thought I'll postpone that but then I saw that naive `realloc()` per key and decided to handle that as well.",
        "createdAt" : "2020-10-05T18:22:19Z",
        "updatedAt" : "2020-10-06T09:46:58Z",
        "lastEditedBy" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "tags" : [
        ]
      }
    ],
    "commit" : "77c095da683ac8255a3b25517fc766d43986629c",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +680,684 @@    /* We currently always use the array allocated by RM_KeyAtPos() and don't try\n     * to optimize for the pre-allocated buffer.\n     */\n    moduleFreeContext(&ctx);\n    return result->numkeys;"
  },
  {
    "id" : "96a8dade-166b-4e37-b5d8-3153cb5a2722",
    "prId" : 7884,
    "prUrl" : "https://github.com/redis/redis/pull/7884#pullrequestreview-502222528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad65fc54-35ca-4eb5-ab31-9804fcbe0afd",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "I think we must do an arity check before calling it.\r\nsome of the implementations of the command key callbacks don't do that check. AFAIK all the other places that use it are on a `cmd` that already passed this check.",
        "createdAt" : "2020-10-05T16:29:32Z",
        "updatedAt" : "2020-10-06T09:46:58Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "77c095da683ac8255a3b25517fc766d43986629c",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +7926,7930 @@\n    getKeysResult result = GETKEYS_RESULT_INIT;\n    getKeysFromCommand(cmd, argv, argc, &result);\n\n    *num_keys = result.numkeys;"
  },
  {
    "id" : "41186b7f-517a-48e9-a546-1020d0a7ae3f",
    "prId" : 7884,
    "prUrl" : "https://github.com/redis/redis/pull/7884#pullrequestreview-502222528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83f4a9ba-4278-4bae-945f-a2e2e1df82a6",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "```suggestion\r\n        /* If the result is using a stack based array, copy it. */\r\n        unsigned long int size = sizeof(int) * result.numkeys;\r\n```",
        "createdAt" : "2020-10-05T16:33:21Z",
        "updatedAt" : "2020-10-06T09:46:58Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "77c095da683ac8255a3b25517fc766d43986629c",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +7937,7941 @@    if (result.keys == result.keysbuf) {\n        /* If the result is using a stack based array, copy it. */\n        unsigned long int size = sizeof(int) * result.numkeys;\n        res = zmalloc(size);\n        memcpy(res, result.keys, size);"
  },
  {
    "id" : "c3b78269-a5b7-4ed1-82f5-a03724f33946",
    "prId" : 7884,
    "prUrl" : "https://github.com/redis/redis/pull/7884#pullrequestreview-502222528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a90b8a5c-cc7e-4e36-babf-ce93090fcb5c",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "```suggestion\r\n        /* If the result was using a heap based array, re-use it. */\r\n        res = result.keys;\r\n```",
        "createdAt" : "2020-10-05T16:34:20Z",
        "updatedAt" : "2020-10-06T09:46:58Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "77c095da683ac8255a3b25517fc766d43986629c",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +7945,7949 @@         * to free this array.\n         */\n        res = result.keys;\n    }\n"
  },
  {
    "id" : "12226063-0866-473f-aa43-bc3e36d1e519",
    "prId" : 7738,
    "prUrl" : "https://github.com/redis/redis/pull/7738#pullrequestreview-479986020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b564f84-537b-4ada-bc86-e7ff368edea9",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "About the return value, currently it's documented to boolean (0 indicating success).\r\ni guess we should either convert it to REDISMODULE_ERR/OK, or document that we return errno value (like pthread_mutex_trylock does)",
        "createdAt" : "2020-09-01T17:55:22Z",
        "updatedAt" : "2020-09-09T11:42:43Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "14a12cc1da6ba6dfb311977cf8562feda327b51c",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +4888,4892 @@ * otherwise REDISMODULE_ERR is returned and errno is set\n * accordingly. */\nint RM_ThreadSafeContextTryLock(RedisModuleCtx *ctx) {\n    UNUSED(ctx);\n"
  },
  {
    "id" : "af56f50c-2775-4139-9d9e-8d99e5584d76",
    "prId" : 7491,
    "prUrl" : "https://github.com/redis/redis/pull/7491#pullrequestreview-573731499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db1360f2-ed0f-4dfa-951b-9257ac9dc1ba",
        "parentId" : null,
        "authorId" : "178b77ef-4974-4854-afae-4e18f5dd998f",
        "body" : "@madolson added the background time tracking on timeout as well for modules (tested on test named \"check blocked command that uses RedisModule_MeasureTimeStart() is tracking background time even in timeout\" ). \r\nWith regards replyToBlockedClientTimedOut on lists, sorted sets or streams, given that timeout occurs on keys there is no reason to track that time correct?  ",
        "createdAt" : "2021-01-21T21:00:13Z",
        "updatedAt" : "2021-01-28T08:28:59Z",
        "lastEditedBy" : "178b77ef-4974-4854-afae-4e18f5dd998f",
        "tags" : [
        ]
      }
    ],
    "commit" : "73da9d8482cee9d13d6fa8a49eaffc273dca6172",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +4961,4965 @@    bc->timeout_callback(&ctx,(void**)c->argv,c->argc);\n    moduleFreeContext(&ctx);\n    if (!bc->blocked_on_keys) {\n        updateStatsOnUnblock(c, bc->background_duration, 0);\n    }"
  },
  {
    "id" : "04c73de4-0871-49e2-95c2-e5f42f932e8a",
    "prId" : 7491,
    "prUrl" : "https://github.com/redis/redis/pull/7491#pullrequestreview-574995122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1cd0056-b5ee-463f-9deb-d83ae19be716",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "do we need to mention that you don't need to lock the GIL? or that implied?",
        "createdAt" : "2021-01-24T16:48:17Z",
        "updatedAt" : "2021-01-28T08:28:59Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "54469a90-9875-455f-b77b-be6fcf16c391",
        "parentId" : "d1cd0056-b5ee-463f-9deb-d83ae19be716",
        "authorId" : "178b77ef-4974-4854-afae-4e18f5dd998f",
        "body" : "I believe that is implied given the functions RedisModule_BlockedClientMeasureTimeStart() and RedisModule_BlockedClientMeasureTimeEnd() accept the RedisModuleBlockedClient and not the RedisModuleCtx. ",
        "createdAt" : "2021-01-24T22:02:27Z",
        "updatedAt" : "2021-01-28T08:28:59Z",
        "lastEditedBy" : "178b77ef-4974-4854-afae-4e18f5dd998f",
        "tags" : [
        ]
      }
    ],
    "commit" : "73da9d8482cee9d13d6fa8a49eaffc273dca6172",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +4681,4685 @@ * is not account for the total command duration. To include such time you should\n * use RM_BlockedClientMeasureTimeStart() and RM_BlockedClientMeasureTimeEnd() one,\n * or multiple times within the blocking command background work.\n */\nRedisModuleBlockedClient *RM_BlockClient(RedisModuleCtx *ctx, RedisModuleCmdFunc reply_callback, RedisModuleCmdFunc timeout_callback, void (*free_privdata)(RedisModuleCtx*,void*), long long timeout_ms) {"
  },
  {
    "id" : "a4313f5e-2914-497a-912e-5f301cf9936b",
    "prId" : 4994,
    "prUrl" : "https://github.com/redis/redis/pull/4994#pullrequestreview-307666416",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63a78b8b-a21e-42a4-ba9b-39bcc93eed43",
        "parentId" : null,
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "\"Please wait for them to unblock and try again\" Is a little cleaner. ",
        "createdAt" : "2019-10-28T07:06:19Z",
        "updatedAt" : "2019-10-28T07:06:20Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      }
    ],
    "commit" : "c74398e130af6983aa7d109a7b19bb9bb2668745",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +6289,6293 @@            case EAGAIN:\n                errmsg = \"the module has blocked clients. \"\n                         \"Please wait them unblocked and try again\";\n                break;\n            default:"
  },
  {
    "id" : "f9534ed7-4de1-4ec9-bad5-5b2346b17e51",
    "prId" : 4344,
    "prUrl" : "https://github.com/redis/redis/pull/4344#pullrequestreview-78903251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a5fd732-bc38-4f90-b3e0-a74c537efbc3",
        "parentId" : null,
        "authorId" : "9f34873a-4d3c-470c-a765-3216440f6f25",
        "body" : "No sdsfree here? Just asking.",
        "createdAt" : "2017-11-24T11:43:36Z",
        "updatedAt" : "2017-11-24T11:43:48Z",
        "lastEditedBy" : "9f34873a-4d3c-470c-a765-3216440f6f25",
        "tags" : [
        ]
      },
      {
        "id" : "ebe9cedf-38ad-4e3d-b75a-a9b23f4c5489",
        "parentId" : "8a5fd732-bc38-4f90-b3e0-a74c537efbc3",
        "authorId" : "e0863aff-4317-496e-aaec-69c95f9a197a",
        "body" : "There is a memory leak indeed. Fixing, thanks.",
        "createdAt" : "2017-11-24T12:25:33Z",
        "updatedAt" : "2017-11-24T12:25:34Z",
        "lastEditedBy" : "e0863aff-4317-496e-aaec-69c95f9a197a",
        "tags" : [
        ]
      },
      {
        "id" : "8b09231f-e916-4cfb-901c-5334ecc030b9",
        "parentId" : "8a5fd732-bc38-4f90-b3e0-a74c537efbc3",
        "authorId" : "e0863aff-4317-496e-aaec-69c95f9a197a",
        "body" : "Fixed",
        "createdAt" : "2017-11-24T12:31:29Z",
        "updatedAt" : "2017-11-24T12:31:29Z",
        "lastEditedBy" : "e0863aff-4317-496e-aaec-69c95f9a197a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6dffc1b7a33f1fd4fa1ff0368933ed575bca5606",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +673,677 @@        return 1;\n    }\n    return 0;\n}\n"
  },
  {
    "id" : "a2fa63ba-f7e6-4299-a019-705e76237141",
    "prId" : 3383,
    "prUrl" : "https://github.com/redis/redis/pull/3383#pullrequestreview-18130481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eabf1241-d044-4a31-ba79-36d9fa55ad21",
        "parentId" : null,
        "authorId" : "36a75c54-ccc9-403e-a62c-eca486b55646",
        "body" : "I'd rename it something like `RM_ModuleTypeRestoreValue` and the other one `RM_ModuleTypeDumpValue`",
        "createdAt" : "2017-01-24T10:51:14Z",
        "updatedAt" : "2019-11-04T19:54:16Z",
        "lastEditedBy" : "36a75c54-ccc9-403e-a62c-eca486b55646",
        "tags" : [
        ]
      }
    ],
    "commit" : "5350e7669e9dfe7b2b4bcf663171920c441c19e1",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +3900,3904 @@ */\n\nvoid *RM_LoadDataTypeFromString(const RedisModuleString *str, const moduleType *mt) {\n    rio payload;\n    RedisModuleIO io;"
  },
  {
    "id" : "53e13092-63bd-4cd0-8849-21898007f1dc",
    "prId" : 3239,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02a15854-3957-4af0-8cd5-77eba669efd7",
        "parentId" : null,
        "authorId" : "16db50df-4eec-4de0-9e32-3a092b9181b0",
        "body" : "This mix of brace and braceless coding style makes me a little umconfortable.\n",
        "createdAt" : "2016-05-17T17:51:20Z",
        "updatedAt" : "2016-05-17T17:51:20Z",
        "lastEditedBy" : "16db50df-4eec-4de0-9e32-3a092b9181b0",
        "tags" : [
        ]
      },
      {
        "id" : "f2d57ca0-7c20-4128-aaf2-330c79675524",
        "parentId" : "02a15854-3957-4af0-8cd5-77eba669efd7",
        "authorId" : "36a75c54-ccc9-403e-a62c-eca486b55646",
        "body" : "that's how @antirez usually writes - one liners braceless, multiline in braces.  and it's usually mixed in the same function. for example: \n\nhttps://github.com/dvirsky/redis/blob/cfaef8d5d494dc199117cb7a6841dfbdc43dd22e/src/module.c#L1198\n",
        "createdAt" : "2016-05-17T18:00:42Z",
        "updatedAt" : "2016-05-17T18:00:42Z",
        "lastEditedBy" : "36a75c54-ccc9-403e-a62c-eca486b55646",
        "tags" : [
        ]
      },
      {
        "id" : "71e296b6-2083-4b49-93cb-a84e3b02964e",
        "parentId" : "02a15854-3957-4af0-8cd5-77eba669efd7",
        "authorId" : "e0863aff-4317-496e-aaec-69c95f9a197a",
        "body" : "Hey, usually I do:\n\n```\nif (foo) do_that(); /* If it is very short, one line. */\nif (foo)\n    there_is_more_to_do_here(SOME_DEFINE,param,1,2,3); /* Longer gets intended, no {} */\nif (foo) {\n    too_much();\n    business_here();\n    ...\n}\n```\n",
        "createdAt" : "2016-05-18T13:48:05Z",
        "updatedAt" : "2016-05-18T13:48:05Z",
        "lastEditedBy" : "e0863aff-4317-496e-aaec-69c95f9a197a",
        "tags" : [
        ]
      }
    ],
    "commit" : "cfaef8d5d494dc199117cb7a6841dfbdc43dd22e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1802,1806 @@           /* Cleanup */\n           decrRefCount(field);\n        }\n    }\n    va_end(ap);"
  },
  {
    "id" : "adb14eed-9fde-401b-8666-1b7a866ce606",
    "prId" : 8521,
    "prUrl" : "https://github.com/redis/redis/pull/8521#pullrequestreview-665433790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8c72fad-1a11-4d4c-bb86-7b6e4e0b8a79",
        "parentId" : null,
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "In the generated docs, this is treated as Markdown, the newline will disappear and it will look like this:\r\n\r\n> Very similar to RedisModule_ReplySetArrayLength Visit https://github.com/antirez/RESP3/blob/master/spec.md for more info about RESP3.\r\n\r\nUse a period in the end of the sentence. If you want a new paragraph, use a blank line.\r\n\r\nBtw, there's a lot of repetition to have this link at all the functions. Perhaps it's enough to have it at the `RM_ReplyWith*` functions?",
        "createdAt" : "2021-02-26T17:45:36Z",
        "updatedAt" : "2021-03-01T11:03:39Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      },
      {
        "id" : "78ceee95-d1ba-49f9-8f6d-03eed2633c8e",
        "parentId" : "b8c72fad-1a11-4d4c-bb86-7b6e4e0b8a79",
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "Since #8442 was merged, it's now possible to add the link and shared text in a description of a section, i.e. a group of funtions.",
        "createdAt" : "2021-05-21T12:56:57Z",
        "updatedAt" : "2021-05-21T12:56:57Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      }
    ],
    "commit" : "0558b5fe8210f8cb22be8144df6e39a61a466ec6",
    "line" : 265,
    "diffHunk" : "@@ -1,1 +1764,1768 @@\n/* Very similar to RedisModule_ReplySetArrayLength\n * Visit https://github.com/antirez/RESP3/blob/master/spec.md for more info about RESP3. */\nvoid RM_ReplySetSetLength(RedisModuleCtx *ctx, long len) {\n    moduleReplySetCollectionLength(ctx, len, COLLECTION_REPLY_SET);"
  },
  {
    "id" : "b00a708c-d539-4498-995d-9a53c3402514",
    "prId" : 8521,
    "prUrl" : "https://github.com/redis/redis/pull/8521#pullrequestreview-705062777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35ae1e15-1213-4c91-8b82-4164b9a47620",
        "parentId" : null,
        "authorId" : "9ce3c3c7-feb3-4cdb-9933-14459f8ca980",
        "body" : "Can this even happen?",
        "createdAt" : "2021-07-12T12:38:19Z",
        "updatedAt" : "2021-07-12T12:38:30Z",
        "lastEditedBy" : "9ce3c3c7-feb3-4cdb-9933-14459f8ca980",
        "tags" : [
        ]
      },
      {
        "id" : "0d5b643f-7cd5-4e96-811a-422ba9fc97e9",
        "parentId" : "35ae1e15-1213-4c91-8b82-4164b9a47620",
        "authorId" : "2d1ddc4f-3bf1-4d20-9f80-d775ee7b1828",
        "body" : "@MeirShpilraien technically the function can return null.",
        "createdAt" : "2021-07-13T11:23:55Z",
        "updatedAt" : "2021-07-13T11:23:55Z",
        "lastEditedBy" : "2d1ddc4f-3bf1-4d20-9f80-d775ee7b1828",
        "tags" : [
        ]
      }
    ],
    "commit" : "0558b5fe8210f8cb22be8144df6e39a61a466ec6",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +1693,1697 @@void moduleReplySetCollectionLength(RedisModuleCtx *ctx, long len, int type) {\n    client *c = moduleGetReplyClient(ctx);\n    if (c == NULL) return;\n    if (ctx->postponed_arrays_count == 0) {\n        serverLog(LL_WARNING,"
  },
  {
    "id" : "f741d5eb-45b9-4f7c-8193-7ff1f60cca3f",
    "prId" : 8521,
    "prUrl" : "https://github.com/redis/redis/pull/8521#pullrequestreview-704566072",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8aa6f824-5ab7-48cd-bb15-f95953d5903e",
        "parentId" : null,
        "authorId" : "9ce3c3c7-feb3-4cdb-9933-14459f8ca980",
        "body" : "I believe this is dangerous, attribute on resp2 is translated to an array that will get you out of sync. Today the only place that uses attribute is `debug protocol attrib` and when used with resp2 you get this:\r\n```\r\n127.0.0.1:6379> debug protocol attrib\r\n1) \"key-popularity\"\r\n2) 1) \"key:123\"\r\n   2) (integer) 90\r\n127.0.0.1:6379> ping\r\n\"Some real reply following the attribute\"\r\n127.0.0.1:6379> hello\r\nPONG\r\n```\r\nIt's fine on debugging command, no one should really use it, and it's for debugging purposes only. But a module that will try to use attribute will encounter this problem if the user will use resp2 (and there is no way for a module to know that he should not send the attribute). I see 3 options by which we can handle this:\r\n1. Give the module a way to know if the client is using resp2 or resp3 (might be useful regardless of this issue) and pass the full responsibility to the module (module should not reply with attribute on resp2)\r\n2. Adding a mechanism such that Redis will not write the attribute to a resp2 client, Redis will see that the user is sending an attribute of size 3 (for example) which means that Redis need to ignore the next 6 replies (3 keys + 3 values). This is a very complicated solution taking into account that values can also be nested and might also contain attributes (in theory) ...\r\n3. `RM_ReplyWithAttribute` will return an error if used with resp2, in such case the module should stop sending the attribute content.\r\n\r\nPersonally, I vote for 3, I think it's a good solution and not too much complicated...",
        "createdAt" : "2021-07-12T13:09:31Z",
        "updatedAt" : "2021-07-12T13:51:32Z",
        "lastEditedBy" : "9ce3c3c7-feb3-4cdb-9933-14459f8ca980",
        "tags" : [
        ]
      },
      {
        "id" : "4b31f1af-ab92-40c0-a750-0451e6b94489",
        "parentId" : "8aa6f824-5ab7-48cd-bb15-f95953d5903e",
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "Good catch! I prefer 3 too.",
        "createdAt" : "2021-07-12T21:38:38Z",
        "updatedAt" : "2021-07-12T21:38:38Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      }
    ],
    "commit" : "0558b5fe8210f8cb22be8144df6e39a61a466ec6",
    "line" : 162,
    "diffHunk" : "@@ -1,1 +1663,1667 @@    if (ctx->client->resp == 2) return REDISMODULE_ERR;\n \n    return moduleReplyWithCollection(ctx, len, COLLECTION_REPLY_ATTRIBUTE);\n}\n"
  },
  {
    "id" : "9808d397-65fe-45ac-9aac-2631b012b23c",
    "prId" : 8521,
    "prUrl" : "https://github.com/redis/redis/pull/8521#pullrequestreview-705927151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "491faf9c-4482-496f-9e6a-b2eb12af260c",
        "parentId" : null,
        "authorId" : "2d1ddc4f-3bf1-4d20-9f80-d775ee7b1828",
        "body" : "Handle `COLLECTION_REPLY_ATTRIBUTE`.",
        "createdAt" : "2021-07-14T07:10:13Z",
        "updatedAt" : "2021-07-14T12:51:31Z",
        "lastEditedBy" : "2d1ddc4f-3bf1-4d20-9f80-d775ee7b1828",
        "tags" : [
        ]
      }
    ],
    "commit" : "0558b5fe8210f8cb22be8144df6e39a61a466ec6",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +1578,1582 @@            addReplyAttributeLen(c,len);\n            break;\n        default:\n            serverPanic(\"Invalid module empty reply type %d\", type);        }\n    } else {"
  }
]