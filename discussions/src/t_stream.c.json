[
  {
    "id" : "5ac8ffee-1cea-45d9-b7e6-dfd8e2fe4886",
    "prId" : 9147,
    "prUrl" : "https://github.com/redis/redis/pull/9147#pullrequestreview-693559361",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64dd6355-e23b-4172-a4ac-9e2bb709b39c",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i think the right solution to this discussion, is to just clamp the result of this multiplication to some range. e.g. 1 .. 32k",
        "createdAt" : "2021-06-28T05:16:23Z",
        "updatedAt" : "2021-06-28T05:17:14Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5c82a881785ce36bd8525eaf0c5e95a0937bca0",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +989,993 @@                 * stream_node_max_entries is 0 or too big (could cause overflow)\n                 */\n                args->limit = 100 * server.stream_node_max_entries; /* Maximum 100 rax nodes. */\n                if (args->limit <= 0) args->limit = 10000;\n                if (args->limit > 1000000) args->limit = 1000000;"
  },
  {
    "id" : "a693e859-1657-4779-9086-cacaa938fa4e",
    "prId" : 9075,
    "prUrl" : "https://github.com/redis/redis/pull/9075#pullrequestreview-682613013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e341c950-38e8-48e7-9f8b-3a6476af415a",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "shorter, and also consistent with the pattern used in all other HELP sub-commands\r\n```suggestion\r\n    if (c->argc == 2 && !strcasecmp(c->argv[1]->ptr,\"HELP\")) {\r\n```",
        "createdAt" : "2021-06-14T07:58:05Z",
        "updatedAt" : "2021-06-14T07:58:06Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "a72c22aa249bbb81e6579e9b8a88642680c178d9",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +3464,3468 @@            return;\n        }\n\n        const char *help[] = {\n\"CONSUMERS <key> <groupname>\","
  },
  {
    "id" : "b4599b76-da44-4e5e-bea3-8bdee74fa4b2",
    "prId" : 8725,
    "prUrl" : "https://github.com/redis/redis/pull/8725#pullrequestreview-625016025",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6c392a2-7e5b-450f-a35f-41e1ae71f06c",
        "parentId" : null,
        "authorId" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "body" : "what if ri is already raxEOF?\r\nmaybe add a test where the last possible ID is claimed?",
        "createdAt" : "2021-03-30T15:46:12Z",
        "updatedAt" : "2021-03-30T15:46:12Z",
        "lastEditedBy" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "tags" : [
        ]
      },
      {
        "id" : "a743e9b3-d082-4579-9d66-410497eb8762",
        "parentId" : "e6c392a2-7e5b-450f-a35f-41e1ae71f06c",
        "authorId" : "560e8be4-46fd-4071-aaf2-0e4af4f76d18",
        "body" : "@guybe7 - this is already being tested as a part of `XAUTOCLAIM as an iterator`",
        "createdAt" : "2021-03-30T15:48:38Z",
        "updatedAt" : "2021-03-30T15:48:38Z",
        "lastEditedBy" : "560e8be4-46fd-4071-aaf2-0e4af4f76d18",
        "tags" : [
        ]
      },
      {
        "id" : "bb9f7d68-1342-4f1c-9ca1-a4285e051164",
        "parentId" : "e6c392a2-7e5b-450f-a35f-41e1ae71f06c",
        "authorId" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "body" : "ok i see raxNext early-exits in case the iterator is already EOF",
        "createdAt" : "2021-03-31T08:18:55Z",
        "updatedAt" : "2021-03-31T08:18:56Z",
        "lastEditedBy" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "tags" : [
        ]
      }
    ],
    "commit" : "8295af41bac704b97a696bca8573f7a12632d27c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3151,3155 @@\n    /* We need to return the next entry as a cursor for the next XAUTOCLAIM call */\n    raxNext(&ri);\n\n    streamID endid;"
  },
  {
    "id" : "9778c02e-692c-4100-9d3d-0d7b8c6a7ee1",
    "prId" : 8390,
    "prUrl" : "https://github.com/redis/redis/pull/8390#pullrequestreview-595304938",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24b5a985-4259-45e7-9542-750a3352023a",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "```suggestion\r\n            /* Count both live entries and deleted ones. */\r\n            int64_t count = lpGetInteger(lp_ele) + lpGetInteger(lpNext(lp,lp_ele));\r\n```",
        "createdAt" : "2021-02-22T12:37:01Z",
        "updatedAt" : "2021-02-22T12:37:28Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "71e2bd4fd8030ec4557f935c5a1e2ebb9b556569",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +515,519 @@            unsigned char *lp_ele = lpFirst(lp);\n            /* Count both live entries and deleted ones. */\n            int64_t count = lpGetInteger(lp_ele) + lpGetInteger(lpNext(lp,lp_ele));\n            if (count >= server.stream_node_max_entries) {\n                /* Shrink extra pre-allocated memory */"
  },
  {
    "id" : "0cac44f0-0ac1-4bbb-a967-d9beb7a2499d",
    "prId" : 8169,
    "prUrl" : "https://github.com/redis/redis/pull/8169#pullrequestreview-553613404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "787ee28e-b89b-48d7-8810-5419b629f419",
        "parentId" : null,
        "authorId" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "body" : "missing `raxStop`",
        "createdAt" : "2020-12-16T11:53:21Z",
        "updatedAt" : "2021-01-07T07:10:42Z",
        "lastEditedBy" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "tags" : [
        ]
      }
    ],
    "commit" : "55552f4a423846a5266e1560dc48220c26a4547a",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +405,409 @@        edge_id->seq = first ? UINT64_MAX : 0;\n        raxStop(&ri);\n        return;\n    }\n"
  },
  {
    "id" : "fd85eb7a-4509-4b1c-a65c-715638dd95f5",
    "prId" : 8072,
    "prUrl" : "https://github.com/redis/redis/pull/8072#pullrequestreview-536272847",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f89acb9-248a-4641-9bde-9b0a775c48bb",
        "parentId" : null,
        "authorId" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "body" : "i would feel more comfortable if both incr/decr would retur C_OK and C_ERR",
        "createdAt" : "2020-11-23T08:59:28Z",
        "updatedAt" : "2020-11-23T12:36:28Z",
        "lastEditedBy" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "tags" : [
        ]
      }
    ],
    "commit" : "606a58ca2d5afe85f04fb42e194033bc758e1806",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +80,84 @@ * If 'id' is the maximal possible id, it is wrapped around to 0-0 and a\n * C_ERR is returned. */\nint streamIncrID(streamID *id) {\n    int ret = C_OK;\n    if (id->seq == UINT64_MAX) {"
  },
  {
    "id" : "f8af6e4c-5377-4617-b052-e52d8abeb875",
    "prId" : 7973,
    "prUrl" : "https://github.com/redis/redis/pull/7973#pullrequestreview-556227031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3de33f56-30c4-4d60-915e-999474c59f93",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "do we want to return syntax error on negative value rather than silently use 0?\r\nmaybe we wanna create a get**Positive**LongLongFromObjectOrReply method",
        "createdAt" : "2020-12-16T12:46:04Z",
        "updatedAt" : "2021-01-05T09:22:39Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "6fa7a199-1e70-4160-9e9d-cdc93356ca9e",
        "parentId" : "3de33f56-30c4-4d60-915e-999474c59f93",
        "authorId" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "body" : "we have a lot of places that silently use 0 for stuff...other places return syntax error... if we want to fix that we should decide on the behaviour and change all of these commands in one commit",
        "createdAt" : "2020-12-21T08:41:06Z",
        "updatedAt" : "2021-01-05T09:22:39Z",
        "lastEditedBy" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "tags" : [
        ]
      },
      {
        "id" : "3e64a3dc-a19e-4151-aab5-759e7bbc7369",
        "parentId" : "3de33f56-30c4-4d60-915e-999474c59f93",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "ok, i see this logic is already present in xclaimCommand for it's `minidle`.",
        "createdAt" : "2020-12-21T09:05:52Z",
        "updatedAt" : "2021-01-05T09:22:39Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6a7dc05e7666ffd87b8f67b2309d7661d0f7b09",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +2696,2700 @@    if (getLongLongFromObjectOrReply(c,c->argv[4],&minidle,\"Invalid min-idle-time argument for XAUTOCLAIM\") != C_OK)\n        return;\n    if (minidle < 0) minidle = 0;\n\n    if (streamParseIntervalIDOrReply(c,c->argv[5],&startid,&startex,0) != C_OK)"
  },
  {
    "id" : "3d3f26f1-602f-43c2-92bf-68a9280926f8",
    "prId" : 7973,
    "prUrl" : "https://github.com/redis/redis/pull/7973#pullrequestreview-561264120",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8e72943-3330-483a-a464-e78f1eea88f3",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "Should we rename addReplyDeferredLen? \r\nNo longer about len. \r\nI guess not, will mess up the code base too much",
        "createdAt" : "2021-01-04T18:58:55Z",
        "updatedAt" : "2021-01-05T09:22:39Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6a7dc05e7666ffd87b8f67b2309d7661d0f7b09",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +2746,2750 @@\n    addReplyArrayLen(c, 2);\n    void *endidptr = addReplyDeferredLen(c);\n    void *arraylenptr = addReplyDeferredLen(c);\n"
  },
  {
    "id" : "d1398bbb-7096-4c92-ac93-9b724cd23a5e",
    "prId" : 6281,
    "prUrl" : "https://github.com/redis/redis/pull/6281#pullrequestreview-590963887",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26b06de6-fc4e-4d4d-b415-b932d8a66ae1",
        "parentId" : null,
        "authorId" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "body" : "can stream_node_max_bytes be 0? if so, we should fix it..\r\nalso, i'd like to remind that we have a MIN macro",
        "createdAt" : "2021-02-16T07:43:57Z",
        "updatedAt" : "2021-02-16T07:43:57Z",
        "lastEditedBy" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "tags" : [
        ]
      },
      {
        "id" : "c3b30f85-9a43-43d8-b393-257b82d8a36c",
        "parentId" : "26b06de6-fc4e-4d4d-b415-b932d8a66ae1",
        "authorId" : "4625a722-bbfb-4b1f-b6ed-4d33f50099c5",
        "body" : "I think `0` means unlimited.",
        "createdAt" : "2021-02-16T07:48:26Z",
        "updatedAt" : "2021-02-16T07:48:32Z",
        "lastEditedBy" : "4625a722-bbfb-4b1f-b6ed-4d33f50099c5",
        "tags" : [
        ]
      },
      {
        "id" : "193035f7-03bc-477c-a1ec-c00bca4f7650",
        "parentId" : "26b06de6-fc4e-4d4d-b415-b932d8a66ae1",
        "authorId" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "body" : "i see that it is possible for it to be 0 (no idea why) but in this case i think prealloc should be 0... it's a bit weird that:\r\nstream_node_max_bytes == 2 -> prealloc = 2\r\nstream_node_max_bytes == 1 -> prealloc = 1\r\nstream_node_max_bytes == 0 -> prealloc = 4096",
        "createdAt" : "2021-02-16T07:50:31Z",
        "updatedAt" : "2021-02-16T07:50:31Z",
        "lastEditedBy" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "tags" : [
        ]
      },
      {
        "id" : "a53a975b-53f6-418c-8246-9d7d744701b3",
        "parentId" : "26b06de6-fc4e-4d4d-b415-b932d8a66ae1",
        "authorId" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "body" : "```c\r\nif (lp == NULL || lp_bytes >= server.stream_node_max_bytes) {\r\n        master_id = id;\r\n        streamEncodeID(rax_key,&id);\r\n        /* Create the listpack having the master entry ID and fields. */\r\n        lp = lpNew();\r\n        lp = lpAppendInteger(lp,1); /* One item, the one we are adding. */\r\n        lp = lpAppendInteger(lp,0); /* Zero deleted so far. */\r\n```\r\nseems like it'll create a new lp on every streamAppendItem... unless i'm missing something",
        "createdAt" : "2021-02-16T07:52:27Z",
        "updatedAt" : "2021-02-16T07:52:27Z",
        "lastEditedBy" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "tags" : [
        ]
      },
      {
        "id" : "acdd3974-ee42-4c06-931f-14768864c967",
        "parentId" : "26b06de6-fc4e-4d4d-b415-b932d8a66ae1",
        "authorId" : "4625a722-bbfb-4b1f-b6ed-4d33f50099c5",
        "body" : "According to this code: https://github.com/redis/redis/blob/unstable/src/t_stream.c#L506\r\nI think `0` is more like `+inf`?",
        "createdAt" : "2021-02-16T07:52:47Z",
        "updatedAt" : "2021-02-16T07:53:17Z",
        "lastEditedBy" : "4625a722-bbfb-4b1f-b6ed-4d33f50099c5",
        "tags" : [
        ]
      },
      {
        "id" : "134daef1-136a-4853-bd7a-493e4b02883d",
        "parentId" : "26b06de6-fc4e-4d4d-b415-b932d8a66ae1",
        "authorId" : "4625a722-bbfb-4b1f-b6ed-4d33f50099c5",
        "body" : "> seems like it'll create a new lp on every streamAppendItem... unless i'm missing something\r\n\r\n`lp` is set to `NULL` only when a new one needs to be created.",
        "createdAt" : "2021-02-16T07:55:04Z",
        "updatedAt" : "2021-02-16T07:55:04Z",
        "lastEditedBy" : "4625a722-bbfb-4b1f-b6ed-4d33f50099c5",
        "tags" : [
        ]
      },
      {
        "id" : "17898a0f-ce83-4238-bf42-44e0e78a963a",
        "parentId" : "26b06de6-fc4e-4d4d-b415-b932d8a66ae1",
        "authorId" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "body" : "oh ok i think i just didn't look in `unstable`... ok then, +1",
        "createdAt" : "2021-02-16T07:55:14Z",
        "updatedAt" : "2021-02-16T07:55:14Z",
        "lastEditedBy" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "tags" : [
        ]
      },
      {
        "id" : "d1e12b6b-14ba-4ade-8f0b-08da6a6713b2",
        "parentId" : "26b06de6-fc4e-4d4d-b415-b932d8a66ae1",
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "Seems like it can be zero. The `0` (before LONG_MAX) in the code from config.c below is the minimum:\r\n\r\n```C\r\n    createSizeTConfig(\"stream-node-max-bytes\", NULL, MODIFIABLE_CONFIG, 0, LONG_MAX, server.stream_node_max_bytes, 4096, MEMORY_CONFIG, NULL, NULL),\r\n```\r\n\r\nThe only place this config is used is in t_stream.c:\r\n\r\n```C\r\n    /* First of all, check if we can append to the current macro node or\r\n     * if we need to switch to the next one. 'lp' will be set to NULL if\r\n     * the current node is full. */\r\n    if (lp != NULL) {\r\n        if (server.stream_node_max_bytes &&\r\n            lp_bytes >= server.stream_node_max_bytes)\r\n        {\r\n            lp = NULL;\r\n```\r\n\r\n... so zero means \"no limit\" here.",
        "createdAt" : "2021-02-16T08:04:35Z",
        "updatedAt" : "2021-02-16T08:04:36Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      }
    ],
    "commit" : "e85868a20afa511c32e56f3b9d65c3d0978101db",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +535,539 @@         * allocation to fit the data. */\n        size_t prealloc = STREAM_LISTPACK_MAX_PRE_ALLOCATE;\n        if (server.stream_node_max_bytes > 0 && server.stream_node_max_bytes < prealloc) {\n            prealloc = server.stream_node_max_bytes;\n        }"
  }
]