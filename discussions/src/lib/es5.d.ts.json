[
  {
    "id" : "7e234a93-54d1-4a99-9b51-4ab9ab146e1d",
    "prId" : 32473,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32473#pullrequestreview-264304499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c5fcf4d-a242-4eca-b801-b0c3bfc43608",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Wait, it says below `All other strings are considered decimal.` -- what???\r\n\r\n```javascript\r\nparseInt('010')  === 8\r\n```\r\n\r\nThe warning about `0`-leading strings should be big and in front. The `0x` quirk is rather minor in comparison, and the `a`/`A` quirk is totally insifnigicant.\r\n\r\nBTW, there's a specific <a href=\"https://eslint.org/docs/rules/radix\">ESLint rule</a> to warn against `parseInt` and potential trouble with octal format.",
        "createdAt" : "2019-07-19T09:20:31Z",
        "updatedAt" : "2019-07-19T09:21:29Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "de9d39a2-055a-4552-9641-fdb5f1e30dc4",
        "parentId" : "2c5fcf4d-a242-4eca-b801-b0c3bfc43608",
        "authorId" : "4271dfc6-881a-4a6a-a9fe-ced42336f1e2",
        "body" : "In all modern (and [not so modern](https://kangax.github.io/compat-table/es5/#test-Miscellaneous_parseInt_ignores_leading_zeros)) browsers and node `parseInt('010')  === 10`.\r\nThis change was introduced in ES5 see [details on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#ECMAScript_5_removes_octal_interpretation)",
        "createdAt" : "2019-07-19T09:50:11Z",
        "updatedAt" : "2019-07-19T09:53:03Z",
        "lastEditedBy" : "4271dfc6-881a-4a6a-a9fe-ced42336f1e2",
        "tags" : [
        ]
      },
      {
        "id" : "f92ae136-ff93-4b48-acd4-299978c2f42a",
        "parentId" : "2c5fcf4d-a242-4eca-b801-b0c3bfc43608",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Two engines still valid in JS world, WSH and HTA, have that behaviour.\r\n\r\nAlthough this file `es5.d.ts` may be taken to imply ES5-only types, it is also used for ES3.",
        "createdAt" : "2019-07-19T16:11:59Z",
        "updatedAt" : "2019-07-19T16:11:59Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "c30ba7884c76a9e94772c0c89604cb6cbfaced99",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +16,20 @@  * @param s A string to convert into a number.\n  * @param radix A value between 2 and 36 that specifies the base of the number in numString.\n  * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\n  * All other strings are considered decimal.\n  */"
  },
  {
    "id" : "a41b2b13-b3c4-478e-90c2-42665fa2ecdb",
    "prId" : 31515,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31515#pullrequestreview-250377307",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a4fb1ff-23c3-49b2-a9b5-42d8e88e775d",
        "parentId" : null,
        "authorId" : "7bbe1081-6c93-44bd-8dff-a256b87e8d38",
        "body" : "but what about\r\n\r\n```javascript\r\n(someArray as SomeType[]).map(some => {\r\n    if (!some.test) return;  // after this line the result will be (SomeType || undefined)[] \r\n    return some;\r\n}).filter(Boolean); // here undefined was filtered with Exclude in definitions\r\n```\r\n\r\nit breaks #29955 :{",
        "createdAt" : "2019-06-17T09:13:40Z",
        "updatedAt" : "2019-06-17T09:16:17Z",
        "lastEditedBy" : "7bbe1081-6c93-44bd-8dff-a256b87e8d38",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab9d935662a5880ee825c9bfe458a363d965071e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +514,518 @@interface BooleanConstructor {\n    new(value?: any): Boolean;\n    <T>(value?: T): boolean;\n    readonly prototype: Boolean;\n}"
  }
]