[
  {
    "id" : "4e63937e-30d9-4c62-8930-26ccc03d5f6b",
    "prId" : 20431,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20431#pullrequestreview-87355636",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "069f4495-eb1d-4e52-bf04-03a609f0c93b",
        "parentId" : null,
        "authorId" : "f6f9f6e7-b6dc-4ac7-9d04-3df732edd35b",
        "body" : "This will, unfortunately, do the wrong thing if `U` is deduced to be an `Array`, but I'm not sure if there's a way of doing `<U extends anything but Array>`. It's a place where the user will have to be careful.",
        "createdAt" : "2017-12-07T01:49:23Z",
        "updatedAt" : "2018-01-08T21:28:59Z",
        "lastEditedBy" : "f6f9f6e7-b6dc-4ac7-9d04-3df732edd35b",
        "tags" : [
        ]
      },
      {
        "id" : "561bf08a-5ff9-408a-a81d-34752d61aade",
        "parentId" : "069f4495-eb1d-4e52-bf04-03a609f0c93b",
        "authorId" : "f6f9f6e7-b6dc-4ac7-9d04-3df732edd35b",
        "body" : "Example:\r\n\r\n```ts\r\nconst x = Array.from({ length: 2 }).flatMap((_, i) => (\r\n  // U is number[]\r\n  i === 0 ? [1] : [[2]]\r\n))\r\n// x is number[][] but should actually be Array<number|number[]>\r\n```",
        "createdAt" : "2017-12-07T01:53:24Z",
        "updatedAt" : "2018-01-08T21:28:59Z",
        "lastEditedBy" : "f6f9f6e7-b6dc-4ac7-9d04-3df732edd35b",
        "tags" : [
        ]
      },
      {
        "id" : "7fcc165c-6605-4423-8bfa-69567da11d5d",
        "parentId" : "069f4495-eb1d-4e52-bf04-03a609f0c93b",
        "authorId" : "c656ca6e-61ae-44c9-aca9-3838c5b38d4b",
        "body" : "@Kovensky Indeed. However, I don't know either how we can achieve ` <U extends anything by Array>`.\r\nMeanwhile, we can change the definition to \r\n`flatMap<U, This = undefined> (\r\n        callback: (this: This, value: T, index: number, array: T[]) =>` __***U***__ `,thisArg?: This\r\n    ): U[];\r\n`\r\nI will be available to continue working on this PR starting from December 15th. Thanks for the feedback!",
        "createdAt" : "2017-12-08T01:49:06Z",
        "updatedAt" : "2018-01-08T21:28:59Z",
        "lastEditedBy" : "c656ca6e-61ae-44c9-aca9-3838c5b38d4b",
        "tags" : [
        ]
      },
      {
        "id" : "51c2df88-d5f1-4630-a705-3009bbf90145",
        "parentId" : "069f4495-eb1d-4e52-bf04-03a609f0c93b",
        "authorId" : "f6f9f6e7-b6dc-4ac7-9d04-3df732edd35b",
        "body" : "It's better if the callback's return is `U[]` instead of `U`, otherwise this looks no different, type-wise, from a regular `.map`.",
        "createdAt" : "2017-12-08T02:53:58Z",
        "updatedAt" : "2018-01-08T21:28:59Z",
        "lastEditedBy" : "f6f9f6e7-b6dc-4ac7-9d04-3df732edd35b",
        "tags" : [
        ]
      },
      {
        "id" : "461a2c86-4423-4662-90bd-5a5a5e134c98",
        "parentId" : "069f4495-eb1d-4e52-bf04-03a609f0c93b",
        "authorId" : "c656ca6e-61ae-44c9-aca9-3838c5b38d4b",
        "body" : "@Kovensky according to #20724, using conditional types it will be possible to define a type that extends anything but array.\r\nWith something like this I guess\r\n``` typescript\r\ntype Diff<T, U> = T extends U ? never : T;\r\ntype NonArray<T> = Diff<T, Array>;\r\n\r\nflatMap<U: NonArray, This = undefined> (\r\n        callback: (this: This, value: T, index: number, array: T[]) => U|U[],\r\n        thisArg?: This\r\n): U[]\r\n```",
        "createdAt" : "2017-12-17T11:30:46Z",
        "updatedAt" : "2018-01-08T21:28:59Z",
        "lastEditedBy" : "c656ca6e-61ae-44c9-aca9-3838c5b38d4b",
        "tags" : [
        ]
      },
      {
        "id" : "263ec4c7-303b-4acc-a85c-3c98446bc644",
        "parentId" : "069f4495-eb1d-4e52-bf04-03a609f0c93b",
        "authorId" : "c656ca6e-61ae-44c9-aca9-3838c5b38d4b",
        "body" : "@Kovensky for now, I will update the callback's return as `U[]` as you suggested",
        "createdAt" : "2018-01-08T22:08:13Z",
        "updatedAt" : "2018-01-08T22:08:13Z",
        "lastEditedBy" : "c656ca6e-61ae-44c9-aca9-3838c5b38d4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c632e4435093be8815990b1b9f81eae6d4733a11",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +128,132 @@        callback: (this: This, value: T, index: number, array: T[]) => U|U[],\n        thisArg?: This\n    ): U[]\n\n    /**"
  }
]