[
  {
    "id" : "278bbf4b-e653-4005-8910-016d9460f7ae",
    "prId" : 7650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9728d818-9166-42d0-a3fd-239c59caf5ed",
        "parentId" : null,
        "authorId" : "f2b19330-eb30-4612-ac1d-f1474fd89ba0",
        "body" : "Should we change to `obj: this`? \nThis might become useful if someone subclasses the built-in array...\n",
        "createdAt" : "2016-03-23T10:43:18Z",
        "updatedAt" : "2016-03-23T23:28:08Z",
        "lastEditedBy" : "f2b19330-eb30-4612-ac1d-f1474fd89ba0",
        "tags" : [
        ]
      },
      {
        "id" : "51576a42-e8d2-47fd-966e-f3821a8538d4",
        "parentId" : "9728d818-9166-42d0-a3fd-239c59caf5ed",
        "authorId" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "body" : "Yes, it's specced as such.\n\n(Every function that takes a callback has this problem, even the plain old Array methods like forEach)\n",
        "createdAt" : "2016-03-23T11:41:38Z",
        "updatedAt" : "2016-03-23T23:28:08Z",
        "lastEditedBy" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "tags" : [
        ]
      },
      {
        "id" : "3a809935-e14d-4167-9311-604d67a26e52",
        "parentId" : "9728d818-9166-42d0-a3fd-239c59caf5ed",
        "authorId" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "body" : "Will fix in another PR along with other `this`-related changes.\n",
        "createdAt" : "2016-03-23T23:31:13Z",
        "updatedAt" : "2016-03-23T23:31:13Z",
        "lastEditedBy" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5fa1622b166e8386adcba02fa90ad3b4c77d9d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +321,325 @@      * predicate. If it is not provided, undefined is used instead.\n      */\n    find(predicate: (value: T, index: number, obj: Array<T>) => boolean, thisArg?: any): T | undefined;\n\n    /** "
  },
  {
    "id" : "c08f1c6c-983b-48dc-8a42-d7b187533e66",
    "prId" : 7650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "701fe1c1-520a-4c5e-9112-b51deb7f2711",
        "parentId" : null,
        "authorId" : "f2b19330-eb30-4612-ac1d-f1474fd89ba0",
        "body" : "`predicate` should be the same as for `find()`.\n",
        "createdAt" : "2016-03-23T10:43:47Z",
        "updatedAt" : "2016-03-23T23:28:08Z",
        "lastEditedBy" : "f2b19330-eb30-4612-ac1d-f1474fd89ba0",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5fa1622b166e8386adcba02fa90ad3b4c77d9d",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +332,336 @@      * predicate. If it is not provided, undefined is used instead.\n      */\n    findIndex(predicate: (value: T) => boolean, thisArg?: any): number | undefined;\n\n    /**"
  },
  {
    "id" : "eeca5c65-b2a5-41c4-864f-5f523ada562b",
    "prId" : 2083,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f146908-7d77-4e9e-aaf8-96e6fa2459ab",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Interesting.  It returns something htat is both an iterator, and something you can get an iterator off of?\n",
        "createdAt" : "2015-02-20T19:31:52Z",
        "updatedAt" : "2015-02-23T21:53:33Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "98b20a8f-cb03-4c64-96d6-bed03468842a",
        "parentId" : "6f146908-7d77-4e9e-aaf8-96e6fa2459ab",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Yes, all the built-in ES6 iterators are like that.\n",
        "createdAt" : "2015-02-20T20:01:14Z",
        "updatedAt" : "2015-02-23T21:53:33Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "7711a454dd34b66a3086a7b320506509146d3ec6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +231,235 @@interface Array<T> {\n    /** Iterator */\n    [Symbol.iterator](): IterableIterator<T>;\n\n    /** "
  },
  {
    "id" : "aba297df-e5e1-4453-b8fb-047c5e106397",
    "prId" : 987,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "591f0a78-8747-4342-a975-f52aac527385",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "What is this type for? What is the difference between this and normal Array ?\n",
        "createdAt" : "2014-10-30T17:36:59Z",
        "updatedAt" : "2014-12-02T01:22:51Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "3ccd0545-7932-417c-838e-4b5250444b2a",
        "parentId" : "591f0a78-8747-4342-a975-f52aac527385",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "The type of `arguments` and some other weird things have a `length` property and elements `0` through `length - 1`, but their `__proto__` is not `Array.prototype`, so things like `arguments.slice(0)` fail instead of succeeding like you might expect.\n",
        "createdAt" : "2014-10-30T18:49:04Z",
        "updatedAt" : "2014-12-02T01:22:51Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "d390f67f7dc8ae84837adfbea805a7df04718482",
    "line" : null,
    "diffHunk" : "@@ -1,1 +224,228 @@}\n\ninterface ArrayLike<T> {\n    length: number;\n    [n: number]: T;"
  },
  {
    "id" : "64c68c9a-d502-49a3-853d-1d4a20139996",
    "prId" : 987,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5c6ca7c-2f6d-4ca3-90ab-68e040eb0ccc",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "What is this type for?\n\nEdit: never I found it. Though could we add comment? Since for certain type, we also have comment to clarify as well\n",
        "createdAt" : "2014-10-30T17:40:43Z",
        "updatedAt" : "2014-12-02T01:22:51Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d390f67f7dc8ae84837adfbea805a7df04718482",
    "line" : null,
    "diffHunk" : "@@ -1,1 +698,702 @@declare var Set: SetConstructor;\n\ninterface WeakSet<T> {\n    add(value: T): WeakSet<T>;\n    clear(): void;"
  },
  {
    "id" : "f2446ecb-bbbc-44d1-a91b-6ce15859e4b9",
    "prId" : 987,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6860e479-4a64-404d-ab3c-9f617a3aaa7f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I actually meant align to the first asterisk, but this is fine as well. :smile: \n",
        "createdAt" : "2014-10-31T01:25:22Z",
        "updatedAt" : "2014-12-02T01:22:51Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d390f67f7dc8ae84837adfbea805a7df04718482",
    "line" : null,
    "diffHunk" : "@@ -1,1 +18,22 @@\n    /**\n      * Returns a new unique Symbol value.\n      * @param  description Description of the new Symbol object.\n      */"
  }
]