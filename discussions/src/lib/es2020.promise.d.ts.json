[
  {
    "id" : "d5cf7573-0f9c-4c0c-9bee-90b01a0f5a53",
    "prId" : 35998,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35998#pullrequestreview-378242641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbace273-52b8-48bd-94eb-91d28519c995",
        "parentId" : null,
        "authorId" : "54e8a7d9-0fe5-4af8-82f5-cbb0ff08ae8c",
        "body" : "The `readonly []` is there to support read‑only tuples:\r\n\r\n```suggestion\r\n    allSettled<T extends readonly unknown[] | readonly []>(values: T): Promise<{ -readonly [P in keyof T]: PromiseSettledResult<awaited T[P]> }>;\r\n```",
        "createdAt" : "2020-03-20T01:57:18Z",
        "updatedAt" : "2020-03-20T19:41:38Z",
        "lastEditedBy" : "54e8a7d9-0fe5-4af8-82f5-cbb0ff08ae8c",
        "tags" : [
        ]
      },
      {
        "id" : "4aa933f8-db01-4242-b8d4-0779ed008027",
        "parentId" : "cbace273-52b8-48bd-94eb-91d28519c995",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I had a conversation about this with @DanielRosenwasser yesterday. Read-only tuples would still get caught by `readonly unknown[]`. The `| []` actually just forces contextual typing to treat `T` as a tuple, so the `readonly` keyword is unnecessary.",
        "createdAt" : "2020-03-20T05:41:13Z",
        "updatedAt" : "2020-03-20T19:41:38Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9f29c7ed3e11d8d3f9459808c4b0ceaae755cff",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +18,22 @@     * @returns A new Promise.\n     */\n    allSettled<T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: PromiseSettledResult<awaited T[P]> }>;\n\n    /**"
  },
  {
    "id" : "0fff6957-5d05-4e64-9470-cfec92ee4657",
    "prId" : 34065,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/34065#pullrequestreview-335585979",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd2170d4-ee6f-4918-ab60-331eb4f41f9f",
        "parentId" : null,
        "authorId" : "c6025d85-b157-48c1-83c7-5df59e161fe4",
        "body" : "Shouldn't this be `unknown`?",
        "createdAt" : "2019-10-18T00:01:50Z",
        "updatedAt" : "2020-01-02T17:01:21Z",
        "lastEditedBy" : "c6025d85-b157-48c1-83c7-5df59e161fe4",
        "tags" : [
        ]
      },
      {
        "id" : "bc690234-b7fe-400b-938c-c47aeb46506e",
        "parentId" : "fd2170d4-ee6f-4918-ab60-331eb4f41f9f",
        "authorId" : "54e8a7d9-0fe5-4af8-82f5-cbb0ff08ae8c",
        "body" : "This&nbsp;matches the&nbsp;type&nbsp;definition of&nbsp;`Promise.catch(…)` and&nbsp;`Promise.then(…)`.",
        "createdAt" : "2019-12-21T02:16:57Z",
        "updatedAt" : "2020-01-02T17:01:21Z",
        "lastEditedBy" : "54e8a7d9-0fe5-4af8-82f5-cbb0ff08ae8c",
        "tags" : [
        ]
      },
      {
        "id" : "f3868cb9-678c-4a78-a32f-6f48fe4ec743",
        "parentId" : "fd2170d4-ee6f-4918-ab60-331eb4f41f9f",
        "authorId" : "c6025d85-b157-48c1-83c7-5df59e161fe4",
        "body" : "That's because they are old typings, we should adapt stricter/safer types for new features.",
        "createdAt" : "2019-12-21T03:10:00Z",
        "updatedAt" : "2020-01-02T17:01:21Z",
        "lastEditedBy" : "c6025d85-b157-48c1-83c7-5df59e161fe4",
        "tags" : [
        ]
      }
    ],
    "commit" : "2929aad81a7dca0efab60f6c967de89a618b9e7a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +6,10 @@interface PromiseRejectedResult {\n    status: \"rejected\";\n    reason: any;\n}\n"
  }
]