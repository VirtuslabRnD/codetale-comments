[
  {
    "id" : "13283d2d-15ab-4e84-8411-81306ff9fda7",
    "prId" : 23466,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23466#pullrequestreview-113054673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7858602-9df7-4f75-81e4-3415e8dd6a9b",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I would not recommend making `reason` optional. Yes, `undefined` is permitted but it is generally a bad idea to throw `undefined` (which is effectively what this is doing). Requiring the parameter helps catch a certain class of errors, namely an \"I forgot to fill in a reason\" typo. However, if you really and truly want to create a promise rejected with `undefined`, you can still be explicit about it (i.e. `Promise.reject(undefined)`).\r\n\r\nOther than that, I'm perfectly fine with collapsing the two declarations into a single declaration with a default type argument.\r\n",
        "createdAt" : "2018-04-18T00:05:12Z",
        "updatedAt" : "2018-04-18T00:05:19Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "a95332fb-d3ef-4363-abec-d40bdee874c9",
        "parentId" : "d7858602-9df7-4f75-81e4-3415e8dd6a9b",
        "authorId" : "bafc0417-f2e9-447f-b781-1aa202c880a1",
        "body" : "But I feel requiring the reason parameter is not the purpose of #23416. And it doesn't reflect the ES spec. @mhegazy Do you want to make a reason required?",
        "createdAt" : "2018-04-18T00:37:54Z",
        "updatedAt" : "2018-04-18T00:37:54Z",
        "lastEditedBy" : "bafc0417-f2e9-447f-b781-1aa202c880a1",
        "tags" : [
        ]
      },
      {
        "id" : "bcdf1980-a779-4a21-94e8-b88969720e0b",
        "parentId" : "d7858602-9df7-4f75-81e4-3415e8dd6a9b",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "After a quick review it seems that we allow the reason to be elided in the `reject` callback passed as part of the `Promise` constructor.",
        "createdAt" : "2018-04-18T01:45:51Z",
        "updatedAt" : "2018-04-18T01:45:51Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "6798d56472f656a2f9633963f8b99eae68286a7e",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +178,182 @@     * @returns A new rejected Promise.\n     */\n    reject<T = never>(reason?: any): Promise<T>;\n\n    /**"
  },
  {
    "id" : "3bd4a148-16ca-4ec9-a3c2-900246c39795",
    "prId" : 22772,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22772#pullrequestreview-113417362",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e64365d0-d248-4c12-b473-f8e9fb5fb372",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Is the goal to only allow `value` to be optional if `T` is exactly `void`? If `T` is `void | number` you end up with the second definition (with a non-optional `value`) for `(value: void | number | PromiseLike<void | number>) => void`.\r\n\r\nYou could try this instead:\r\n```ts\r\nresolve: [void] extends [T] ? (value?: T | PromiseLike<T>) => void : (value: T | PromiseLike<T>) => void\r\n```\r\n\r\nBy inverting the condition, you would get cases where `void` is assignable (such as when `T` is a union including `void`).",
        "createdAt" : "2018-04-18T02:00:16Z",
        "updatedAt" : "2018-04-18T20:15:04Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "07fa59ee-5b24-4537-883a-54c923f72809",
        "parentId" : "e64365d0-d248-4c12-b473-f8e9fb5fb372",
        "authorId" : "bafc0417-f2e9-447f-b781-1aa202c880a1",
        "body" : "It seems a nice idea. I'll do it.",
        "createdAt" : "2018-04-18T02:12:16Z",
        "updatedAt" : "2018-04-18T20:15:04Z",
        "lastEditedBy" : "bafc0417-f2e9-447f-b781-1aa202c880a1",
        "tags" : [
        ]
      },
      {
        "id" : "ec6e0ee8-bf02-4ae3-9dd2-d40fa0f09f3d",
        "parentId" : "e64365d0-d248-4c12-b473-f8e9fb5fb372",
        "authorId" : "bafc0417-f2e9-447f-b781-1aa202c880a1",
        "body" : "Done.",
        "createdAt" : "2018-04-18T03:25:57Z",
        "updatedAt" : "2018-04-18T20:15:04Z",
        "lastEditedBy" : "bafc0417-f2e9-447f-b781-1aa202c880a1",
        "tags" : [
        ]
      },
      {
        "id" : "ea8b2aa5-8663-49e7-807f-9048496cbde7",
        "parentId" : "e64365d0-d248-4c12-b473-f8e9fb5fb372",
        "authorId" : "bafc0417-f2e9-447f-b781-1aa202c880a1",
        "body" : "I realized `[void] extends [T]` doesn't work with `undefined`. So I reverted it.",
        "createdAt" : "2018-04-18T20:17:51Z",
        "updatedAt" : "2018-04-18T20:17:52Z",
        "lastEditedBy" : "bafc0417-f2e9-447f-b781-1aa202c880a1",
        "tags" : [
        ]
      },
      {
        "id" : "562a8876-043a-497c-a3ae-74b52d01d0c2",
        "parentId" : "e64365d0-d248-4c12-b473-f8e9fb5fb372",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "That's unfortunate, but its better than nothing I suppose.",
        "createdAt" : "2018-04-18T22:35:42Z",
        "updatedAt" : "2018-04-18T22:35:42Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "9660bb1a-e83b-4cb2-ac90-473be78fef5d",
        "parentId" : "e64365d0-d248-4c12-b473-f8e9fb5fb372",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Have you tried this without the conditional type? This should work as well and is probably easier to read:\r\n\r\n```ts\r\n    new <T extends void>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;\r\n    new <T>(executor: (resolve: (value: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;\r\n\r\n```",
        "createdAt" : "2018-04-18T22:39:27Z",
        "updatedAt" : "2018-04-18T22:39:27Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "f7c1edbc-f07b-4399-81f0-56a93eabf4bf",
        "parentId" : "e64365d0-d248-4c12-b473-f8e9fb5fb372",
        "authorId" : "bafc0417-f2e9-447f-b781-1aa202c880a1",
        "body" : "As I mentioned at https://github.com/Microsoft/TypeScript/pull/21867#issuecomment-375087677, it is not extensible.",
        "createdAt" : "2018-04-18T22:42:26Z",
        "updatedAt" : "2018-04-18T22:42:26Z",
        "lastEditedBy" : "bafc0417-f2e9-447f-b781-1aa202c880a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "55a3c22d43d5d8c847199acd95de46852ce47c64",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +11,15 @@     * and a reject callback used to reject the promise with a provided reason or error.\n     */\n    new <T>(executor: (resolve: [T] extends [void] ? (value?: T | PromiseLike<T>) => void : (value: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;\n\n    /**"
  },
  {
    "id" : "380a2c9e-dfe7-4348-8b5b-0e69d1c3a5ac",
    "prId" : 10448,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a2e5d1e-b892-4200-9def-3fc2a61160a5",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "This overload is meant to replace `then(): Promise<T>` as that overload was one of the causes of #10524.\n",
        "createdAt" : "2016-09-06T22:30:47Z",
        "updatedAt" : "2016-09-06T22:30:47Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d4219acf17e6b1e20279a331db12e13e94d4b58",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +9,13 @@     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then(onfulfilled?: ((value: T) => T | PromiseLike<T>) | undefined | null, onrejected?: ((reason: any) => T | PromiseLike<T>) | undefined | null): Promise<T>;\n\n    /**"
  }
]