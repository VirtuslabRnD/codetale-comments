[
  {
    "id" : "d2e8bf66-4826-4f57-8223-3fbab4521c15",
    "prId" : 37502,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37502#pullrequestreview-378864922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd8b2b40-f35e-4069-a793-6b325682be2d",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "The spec says that at least one of these properties must be present, but my hunch is it would likely be annoying to make this a union.",
        "createdAt" : "2020-03-20T20:13:48Z",
        "updatedAt" : "2020-03-20T23:34:00Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "70c40ced-3270-482d-982e-a6a10fbc2074",
        "parentId" : "bd8b2b40-f35e-4069-a793-6b325682be2d",
        "authorId" : "e1b678fa-6b5d-4e88-8a22-d46dce8c64f0",
        "body" : "Hi, I hope I'm not just adding noise here, but we recently added this type locally and tackled the same problem. This is what we came up with if it helps:\r\n\r\n\r\n\r\n```ts\r\ntype AtLeastOneRequired<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> & U[keyof U];\r\n\r\ninterface ShareParams {\r\n  text: string;\r\n  title: string;\r\n  url: string;\r\n}\r\n\r\ninterface Navigator {\r\n  share?: (data: AtLeastOneRequired<ShareParams>) => Promise<void>;\r\n}\r\n```\r\nBut I don't know if a goal for `dom.d.ts` types is to avoid complex types like `AtLeastOneRequired`...\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "createdAt" : "2020-03-20T22:45:29Z",
        "updatedAt" : "2020-03-20T23:34:00Z",
        "lastEditedBy" : "e1b678fa-6b5d-4e88-8a22-d46dce8c64f0",
        "tags" : [
        ]
      },
      {
        "id" : "c764c441-7424-4e6d-bbcc-d08f8518b549",
        "parentId" : "bd8b2b40-f35e-4069-a793-6b325682be2d",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yeah, I think that would be a goal. In this case the fully correct version is not too much to write out:\r\n\r\n```ts\r\ntype ShareParams = \r\n  | { text: string, title?: string, url?: string }\r\n  | { text?: string, title: string, url?: string }\r\n  | { text?: string, title?: string, url: string };\r\n```\r\n\r\nBut I think even that may be overkill.",
        "createdAt" : "2020-03-20T22:48:28Z",
        "updatedAt" : "2020-03-20T23:34:00Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "de29cb26-40ce-4ad8-a57a-d862a4b9538d",
        "parentId" : "bd8b2b40-f35e-4069-a793-6b325682be2d",
        "authorId" : "e1b678fa-6b5d-4e88-8a22-d46dce8c64f0",
        "body" : "Fair enough; and I would say preferred from a clarity and performance point of view. \r\n\r\nI would prefer the union myself, but I suppose people can always do their own overrides locally like us.",
        "createdAt" : "2020-03-20T23:04:25Z",
        "updatedAt" : "2020-03-20T23:34:00Z",
        "lastEditedBy" : "e1b678fa-6b5d-4e88-8a22-d46dce8c64f0",
        "tags" : [
        ]
      },
      {
        "id" : "925949f7-0178-472b-9d58-e1773c5f38fa",
        "parentId" : "bd8b2b40-f35e-4069-a793-6b325682be2d",
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "These are code-gen'd from the same source which browsers use. So for this example: https://www.w3.org/TR/web-share\r\n\r\nWhich pulls out:\r\n\r\n```idl\r\n partial interface Navigator {\r\n   [SecureContext] Promise<void> share(optional ShareData data = {});\r\n };\r\n\r\n  dictionary ShareData {\r\n   USVString title;\r\n   USVString text;\r\n   USVString url;\r\n };\r\n```\r\n\r\nWhich gets codegens to extend the Navigator, and create a new type:\r\n\r\n```\r\ninterface ShareData {\r\n     text?: string;\r\n     title?: string;\r\n     url?: string;\r\n }\r\n```\r\n\r\nWe could make those types, but then we're not using the same source of truth as browsers",
        "createdAt" : "2020-03-20T23:39:58Z",
        "updatedAt" : "2020-03-20T23:39:58Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      },
      {
        "id" : "6b008f17-ee6c-42c8-af21-0eb9d8cf8839",
        "parentId" : "bd8b2b40-f35e-4069-a793-6b325682be2d",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "We can change before the RC if it's really an issue. If it's concerning, maybe we have the generator declare this as a type alias instead to avoid merging and future-proof it",
        "createdAt" : "2020-03-20T23:43:39Z",
        "updatedAt" : "2020-03-20T23:43:39Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2498b99bc6df9eae5013e4f53afe20bd35ea231",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1702,1706 @@    title?: string;\n    url?: string;\n}\n\ninterface SpeechSynthesisErrorEventInit extends SpeechSynthesisEventInit {"
  },
  {
    "id" : "12fd23da-e86e-4055-abf0-57841981f1fa",
    "prId" : 37502,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37502#pullrequestreview-378862375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f03da895-c977-4466-9a92-b05775937ce7",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Should this actually be optional?",
        "createdAt" : "2020-03-20T20:14:48Z",
        "updatedAt" : "2020-03-20T23:34:00Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "dfc0bece-29af-42cf-a548-18dddfc1fc38",
        "parentId" : "f03da895-c977-4466-9a92-b05775937ce7",
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "It probably shouldn't - otherwise all other DOM apis would kinda need it, so all of them are like this",
        "createdAt" : "2020-03-20T23:32:27Z",
        "updatedAt" : "2020-03-20T23:34:00Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2498b99bc6df9eae5013e4f53afe20bd35ea231",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +10740,10744 @@    requestMediaKeySystemAccess(keySystem: string, supportedConfigurations: MediaKeySystemConfiguration[]): Promise<MediaKeySystemAccess>;\n    sendBeacon(url: string, data?: BodyInit | null): boolean;\n    share(data?: ShareData): Promise<void>;\n    vibrate(pattern: number | number[]): boolean;\n}"
  },
  {
    "id" : "0f4aa918-9281-46e7-b758-a24d6ff39e59",
    "prId" : 32335,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32335#pullrequestreview-260826212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5c948e6-1e5f-483e-8926-c4763f04dcb0",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "ðŸ‘† what is all this, LF/CRLF variation?\r\n\r\nLooks set to create trouble down the line.",
        "createdAt" : "2019-07-11T10:55:41Z",
        "updatedAt" : "2019-07-11T10:55:41Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "a1467a3e-6e5e-4131-aa84-ca56354cbb5f",
        "parentId" : "c5c948e6-1e5f-483e-8926-c4763f04dcb0",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Looks like comments.json (1) still has explicit `\\r\\n` and (2) something changed recently to stop converting them to `\\n`.\r\n\r\nThe right fix is to explicitly change comments.json to use `\\n`.",
        "createdAt" : "2019-07-11T16:37:24Z",
        "updatedAt" : "2019-07-11T16:37:25Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "d9196d34-f500-40d8-8830-969421f2431c",
        "parentId" : "c5c948e6-1e5f-483e-8926-c4763f04dcb0",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Good idea!\r\n\r\nPeople may have weird git configs, check in and then CRLF noise could obscure real changes for PR reviews.",
        "createdAt" : "2019-07-11T16:44:40Z",
        "updatedAt" : "2019-07-11T16:44:40Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d0f523895bf46fb9b7c2dd20d42fdf45a52a1a7",
    "line" : 332,
    "diffHunk" : "@@ -1,1 +4485,4489 @@    bgColor: string;\n    /**\n     * Specifies the beginning and end of the document body.\n     */\n    body: HTMLElement;"
  },
  {
    "id" : "1e7b384c-d216-4e39-98aa-6fe6683b64e6",
    "prId" : 29690,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29690#pullrequestreview-200039121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8eec620-6ba4-4170-b50d-10d71552b314",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Wouldn't it improve readability+quality to cut leading `The BiquadFilterNode interface`?",
        "createdAt" : "2019-02-05T12:06:13Z",
        "updatedAt" : "2019-02-05T12:06:14Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0adb1ca2316a4dc289ac1cd551b4ff2aab07e80",
    "line" : 241,
    "diffHunk" : "@@ -1,1 +2215,2219 @@};\n\n/** The BiquadFilterNode interface represents a simple low-order filter, and is created using the AudioContext.createBiquadFilter() method. It is an AudioNode that can represent different kinds of filters, tone control devices, and graphic equalizers. */\ninterface BiquadFilterNode extends AudioNode {\n    readonly Q: AudioParam;"
  },
  {
    "id" : "396a3f15-9aea-4316-8d80-60d90999aca8",
    "prId" : 29690,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29690#pullrequestreview-200039458",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0137d6e-543d-474c-9fd5-81f17deda687",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Or here drop `The beforeunload event is`",
        "createdAt" : "2019-02-05T12:07:14Z",
        "updatedAt" : "2019-02-05T12:07:14Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0adb1ca2316a4dc289ac1cd551b4ff2aab07e80",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +2183,2187 @@};\n\n/** The beforeunload event is fired when the window, the document and its resources are about to be unloaded. */\ninterface BeforeUnloadEvent extends Event {\n    returnValue: any;"
  },
  {
    "id" : "b9dda2ae-3000-41c7-ae09-c37ece317372",
    "prId" : 29690,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29690#pullrequestreview-200039582",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d5b2b9f-db85-4290-b9ed-869ec8a8e026",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Here drop `A Blob object`",
        "createdAt" : "2019-02-05T12:07:36Z",
        "updatedAt" : "2019-02-05T12:07:36Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0adb1ca2316a4dc289ac1cd551b4ff2aab07e80",
    "line" : 249,
    "diffHunk" : "@@ -1,1 +2230,2234 @@};\n\n/** A Blob object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system. */\ninterface Blob {\n    readonly size: number;"
  },
  {
    "id" : "99aafe21-cb73-4586-ac87-bb43280ab5bd",
    "prId" : 29690,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29690#pullrequestreview-200040186",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c47ffab1-cb16-4c62-8ab3-b9f73d1af8c6",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Here a bit more complex: `An object implementing the CSSConditionRule interface`",
        "createdAt" : "2019-02-05T12:09:20Z",
        "updatedAt" : "2019-02-05T12:09:20Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0adb1ca2316a4dc289ac1cd551b4ff2aab07e80",
    "line" : 280,
    "diffHunk" : "@@ -1,1 +2315,2319 @@declare var CSS: CSS;\n\n/** An object implementing the CSSConditionRule interface represents a single condition CSS at-rule, which consists of a condition and a statement block. It is a child of CSSGroupingRule. */\ninterface CSSConditionRule extends CSSGroupingRule {\n    conditionText: string;"
  },
  {
    "id" : "eeea79e2-8d8c-4dc7-8d1a-8597addb6cb2",
    "prId" : 18173,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18173#pullrequestreview-59953856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88d0f72c-b50d-44c9-9ca6-0cc5c5c5d48e",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Isn't this really just `object`?",
        "createdAt" : "2017-08-31T04:58:55Z",
        "updatedAt" : "2017-08-31T04:58:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "1e5dd4d1-8bd6-45ea-bc09-335fdf30b1ed",
        "parentId" : "88d0f72c-b50d-44c9-9ca6-0cc5c5c5d48e",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "it is :)",
        "createdAt" : "2017-08-31T18:42:42Z",
        "updatedAt" : "2017-08-31T18:42:42Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7eaa407d917fe43edbc6af1f2608055fe4aed00",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3886,3890 @@declare var Headers: {\n    prototype: Headers;\n    new(init?: Headers | string[][] | object): Headers;\n};\n"
  },
  {
    "id" : "c157cebf-ddbb-4a98-993e-9724718b87e5",
    "prId" : 10441,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/10441#pullrequestreview-102078049",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8522853d-1c69-4a08-b657-6e5dcb16b16f",
        "parentId" : null,
        "authorId" : "813e4616-ccf2-4b36-a78b-ca730cde3c30",
        "body" : "What is this all about?",
        "createdAt" : "2018-03-07T20:02:37Z",
        "updatedAt" : "2018-03-07T20:02:38Z",
        "lastEditedBy" : "813e4616-ccf2-4b36-a78b-ca730cde3c30",
        "tags" : [
        ]
      },
      {
        "id" : "8c369e89-ee33-4d12-8f57-0f7282087460",
        "parentId" : "8522853d-1c69-4a08-b657-6e5dcb16b16f",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "See https://github.com/Microsoft/TypeScript/issues/9850",
        "createdAt" : "2018-03-07T20:05:44Z",
        "updatedAt" : "2018-03-07T20:05:44Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "794d3e91d07021409ef4a985dd90fc431f4f04c5",
    "line" : 193,
    "diffHunk" : "@@ -1,1 +14314,14318 @@declare var menubar: BarProp;\ndeclare var msCredentials: MSCredentials;\ndeclare const name: never;\ndeclare var navigator: Navigator;\ndeclare var offscreenBuffering: string | boolean;"
  },
  {
    "id" : "10a05e88-e442-44c7-b2b0-b66cd00f7658",
    "prId" : 6546,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f22b07f6-a402-4316-bd6b-c0a613dbf683",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "That kind of stinks, but I guess there's nothing we can really add as far as I see.\n",
        "createdAt" : "2016-01-20T08:51:09Z",
        "updatedAt" : "2016-01-20T08:51:09Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7cf97eb57f8247d1def46f95a05fd21e50b5b664",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +12646,12650 @@\ninterface HTMLPictureElement extends HTMLElement {\n}\n\ndeclare var HTMLPictureElement: {"
  },
  {
    "id" : "767c1266-0bc0-4877-9246-987a1c6a48cc",
    "prId" : 5402,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90f283f9-6ef9-4a08-82dc-e1cd6151fc71",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Why is this here?\n",
        "createdAt" : "2015-10-26T17:52:23Z",
        "updatedAt" : "2015-10-26T17:52:23Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "25776298-6552-4dac-8ab6-1c19b68bfe4e",
        "parentId" : "90f283f9-6ef9-4a08-82dc-e1cd6151fc71",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "This is due to a change in the script to unify the emitted constructor format, so that it is easier to add more constructor signatures to a type using external json data. This change in particular syncs with the version in the script repo.\n",
        "createdAt" : "2015-10-27T03:02:31Z",
        "updatedAt" : "2015-10-27T03:02:31Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "38caf535fc6c648cd184daf207083f2a9aee98b3",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +7077,7081 @@}\n\ndeclare var ImageData: {\n    prototype: ImageData;\n    new(width: number, height: number): ImageData;"
  },
  {
    "id" : "85d3ef92-aa3b-456e-ac20-218dce574b18",
    "prId" : 4306,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c343bd6-18f8-49f5-a775-b7350c93ce37",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I do not think this is correct.. we need a new interface ImageDataConstructor so that:\n\n``` ts\n// ImageData stayes the way it was\n\n interface ImageData {\n     data: number[];\n     height: number;\n     width: number;\n}\n\ninterface ImageDataConstructor {\n    prototype: ImageData;\n    new (): ImageData;\n    new(width: number, height: number): ImageData;\n}\n\ndeclare var ImageData: ImageDataConstructor; \n```\n",
        "createdAt" : "2015-08-13T20:11:18Z",
        "updatedAt" : "2015-08-19T22:02:43Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "df3ecab074a27962956482e8609651acc2069270",
    "line" : null,
    "diffHunk" : "@@ -1,1 +7019,7023 @@interface ImageDataConstructor {\n    prototype: ImageData;\n    new(width: number, height: number): ImageData;\n    new(array: Uint8ClampedArray, width: number, height: number): ImageData;\n}"
  },
  {
    "id" : "6a79e54a-817b-47a8-a5f3-25b3d3d7b607",
    "prId" : 609,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3739f1c-cd20-4fc7-a9ed-e83143e0bc5a",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "What's this for?\n",
        "createdAt" : "2014-09-05T20:41:24Z",
        "updatedAt" : "2014-09-05T20:41:24Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "32aff5f1-c245-4883-a76a-f67ca97bab08",
        "parentId" : "c3739f1c-cd20-4fc7-a9ed-e83143e0bc5a",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Mohamed explained it in the PR message, but I'm still a little confused, and I think it warrants a code comment.\n",
        "createdAt" : "2014-09-05T21:00:55Z",
        "updatedAt" : "2014-09-05T21:00:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "52ef4891-fc4d-482e-9902-e8aece26a00d",
        "parentId" : "c3739f1c-cd20-4fc7-a9ed-e83143e0bc5a",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I am not sure I understand the question.. the indexer is to allow collection[0] ==> Element, instead of an implicit any.\nthe change in order is about the script I use to generate the file, if I override any thing in the interface it process it firs.\n",
        "createdAt" : "2014-09-05T21:44:33Z",
        "updatedAt" : "2014-09-05T21:44:33Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "31641d8a-0cba-47d2-89e9-841344081e67",
        "parentId" : "c3739f1c-cd20-4fc7-a9ed-e83143e0bc5a",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "There is a string indexer that is commented out. That is what I am asking about.\n",
        "createdAt" : "2014-09-05T21:45:49Z",
        "updatedAt" : "2014-09-05T21:45:49Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "aa5fdfc1-31a0-49ee-bb35-acae9db79950",
        "parentId" : "c3739f1c-cd20-4fc7-a9ed-e83143e0bc5a",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "cause we can not enable it. yet the definition says it has a string indexer. \n",
        "createdAt" : "2014-09-05T21:46:36Z",
        "updatedAt" : "2014-09-05T21:46:36Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "56afce34-2079-4f36-bfd4-1ef19608d4fb",
        "parentId" : "c3739f1c-cd20-4fc7-a9ed-e83143e0bc5a",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "so it is more of a guide to know what to expect if you index with a string and get any.\n",
        "createdAt" : "2014-09-05T21:54:57Z",
        "updatedAt" : "2014-09-05T21:54:57Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "8acb6de0-8a70-42d3-91d6-7dd385d9fcae",
        "parentId" : "c3739f1c-cd20-4fc7-a9ed-e83143e0bc5a",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Can we then remove it? Is there a reason why we comment out instead of delete it \n",
        "createdAt" : "2014-09-05T21:55:27Z",
        "updatedAt" : "2014-09-05T21:55:27Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "3fdfc282-e34c-4fea-a070-6d546e61a02f",
        "parentId" : "c3739f1c-cd20-4fc7-a9ed-e83143e0bc5a",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : ":) yes..\n\n> cause we can not enable it. yet the definition says it has a string indexer. \n> so it is more of a guide to know what to expect if you index with a string and get any.\n\nso it is included intentionally, as it reflects the spec, yet it is not a valid TypeScript definition.\n",
        "createdAt" : "2014-09-05T21:57:31Z",
        "updatedAt" : "2014-09-05T21:57:31Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bcde460fd0d66c70df8c77de8d74cc71a40d054",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1879,1883 @@      */\n    namedItem(name: string): Element;\n    // [name: string]: Element;\n    [index: number]: Element;\n}"
  },
  {
    "id" : "91800baa-9efc-43b3-9d15-cad5534f487f",
    "prId" : 45324,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45324#pullrequestreview-722224633",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb147051-91b3-4896-a5a8-8dfed894f912",
        "parentId" : null,
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "Most of the changes from the RC are adding `deprecated` or switching the deprecated to multiline. Though this includes a lot of the beta feedback about the DOM changes in https://github.com/microsoft/TypeScript/issues/45047",
        "createdAt" : "2021-08-04T12:34:00Z",
        "updatedAt" : "2021-08-04T12:34:00Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5f670063d3ecdb12e8a5b36aa1d349c8cf6647b",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +151,155 @@    endings?: EndingType;\n    type?: string;\n}\n\ninterface CSSStyleSheetInit {"
  }
]