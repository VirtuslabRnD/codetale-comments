[
  {
    "id" : "d2f81364-fc88-4b84-9727-cb2d6b11b497",
    "prId" : 3527,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "237d7a46-fe93-4159-9ed9-400eed8116d6",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "The spec only mention number, but not date.\n",
        "createdAt" : "2015-06-17T18:25:06Z",
        "updatedAt" : "2015-06-17T18:25:06Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "f2a78d1b-5de0-473f-8b65-1649055257b2",
        "parentId" : "237d7a46-fe93-4159-9ed9-400eed8116d6",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "from [section 12.3.2: Intl.DateTimeFormat.prototype.format](http://www.ecma-international.org/ecma-402/1.0/#sec-12.3.2)\n\n> When the FormatDateTime abstract operation is called with arguments dateTimeFormat (which must be an object initialized as a DateTimeFormat) and x **(which must be a Number value)**, it returns a String value representing x (interpreted as a time value as specified in ES5, 15.9.1.1) according to the effective locale and the formatting options of dateTimeFormat.\n",
        "createdAt" : "2015-06-17T18:26:41Z",
        "updatedAt" : "2015-06-17T18:26:41Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "88240c25-d650-4d1c-9708-d86f9dc7c0f5",
        "parentId" : "237d7a46-fe93-4159-9ed9-400eed8116d6",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "do we know that all engines support `Date` as well?\n",
        "createdAt" : "2015-06-17T18:27:35Z",
        "updatedAt" : "2015-06-17T18:27:35Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "1531a377-e053-41d7-b6d5-2f5b44778413",
        "parentId" : "237d7a46-fe93-4159-9ed9-400eed8116d6",
        "authorId" : "585876d3-ba76-4ee3-bfcf-d10e826f398c",
        "body" : "Thanks for the review.\n\nMy understanding from the described algorithm is the following:\n\n```\nIntl.DateTimeFormat.prototype.format(date) {\n  if (date === undefined)  // do something\n  else x = toNumber(date);\n  return FormatDateTime(this, x);\n}\n```\n\nwhere [toNumber](http://www.ecma-international.org/ecma-262/5.1/#sec-9.3) tries to convert essentially any object to a number and fails with a RangeError if it can't. In other words the correct type for `date` would be `any` according to the specs and the output of the following are the same in all of the browsers that implemented this feature:\n`new Intl.DateTimeFormat().format(123456789)`\n`new Intl.DateTimeFormat().format('123456789')`\n\nI'm not sure how would you normally treat these cases in d.ts files because I'm sure many functions actually do these toNumber, toBoolean, ... on their inputs as javascript doesn't have a type system by nature. My feeling was you will try to enforce type as much as it makes sense to ensure code sanity, etc. If you think `any` would be the way to go here, let me know.\n",
        "createdAt" : "2015-06-18T06:29:24Z",
        "updatedAt" : "2015-06-18T06:29:24Z",
        "lastEditedBy" : "585876d3-ba76-4ee3-bfcf-d10e826f398c",
        "tags" : [
        ]
      },
      {
        "id" : "e53124c4-c00a-4863-ad39-7cd0ad75b155",
        "parentId" : "237d7a46-fe93-4159-9ed9-400eed8116d6",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "thanks. I did a quick check on different browsers and seems they all support all values as you mentioned. \n",
        "createdAt" : "2015-06-18T06:35:57Z",
        "updatedAt" : "2015-06-18T06:35:57Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ee1890e9481fc3611ab5570e2787adc752db877",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +109,113 @@\n    interface DateTimeFormat {\n        format(date?: Date | number): string;\n        resolvedOptions(): ResolvedDateTimeFormatOptions;\n    }"
  }
]