[
  {
    "id" : "ed518c7a-6f98-4692-9824-1cecde7e2be4",
    "prId" : 42543,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42543#pullrequestreview-580723706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e25a24e6-6d54-403f-a7aa-fce84881567a",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Fun fact! I didn't actually need to make any of these lib changes to make the PR work, what with the compat code in place! But I've updated them anyway, so they serve as examples of what `unique symbol`s really are to anyone reading the definitions.",
        "createdAt" : "2021-01-29T01:37:35Z",
        "updatedAt" : "2021-02-22T22:11:55Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "82bb9a6d-ea29-4369-9788-dba6273db126",
        "parentId" : "e25a24e6-6d54-403f-a7aa-fce84881567a",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Hm - and that won't conflict with a separate \"polyfill\" definition right? In other words, if someone separately declares it as\r\n\r\n```ts\r\ninterface SymbolConstructor {\r\n    readonly iterator: symbol;\r\n}\r\n```\r\n\r\nand these merge, they won't end up conflicting, right?",
        "createdAt" : "2021-02-01T19:45:20Z",
        "updatedAt" : "2021-02-22T22:11:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "a5be7bee-a16d-4f18-abc2-04b0b84b9676",
        "parentId" : "e25a24e6-6d54-403f-a7aa-fce84881567a",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Nope - and there's already a test to that effect on the diff.",
        "createdAt" : "2021-02-01T20:10:38Z",
        "updatedAt" : "2021-02-22T22:11:55Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e99c05a632fd07bffdcf048adb90a4b1eb7a01a0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +6,10 @@     * for-of statement.\n     */\n    readonly iterator: unique symbol;\n}\n"
  },
  {
    "id" : "b66fabb5-7a3e-451f-aa6d-dc700ffb2953",
    "prId" : 30790,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30790#pullrequestreview-235395082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f31f221-aadc-4458-bb68-041cccab76b4",
        "parentId" : null,
        "authorId" : "54e8a7d9-0fe5-4af8-82f5-cbb0ff08ae8c",
        "body" : "```suggestion\r\ninterface Iterable<T, TReturn = T | void, TNext = unknown> {\r\n```",
        "createdAt" : "2019-05-09T04:32:15Z",
        "updatedAt" : "2019-07-04T03:48:16Z",
        "lastEditedBy" : "54e8a7d9-0fe5-4af8-82f5-cbb0ff08ae8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f94886850b185bce3e442c40d7b638890f0de7b",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@}\n\ninterface Iterable<T> {\n    [Symbol.iterator](): Iterator<T>;\n}"
  },
  {
    "id" : "fae74163-d43e-465f-95bc-0124608664be",
    "prId" : 30790,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30790#pullrequestreview-235735588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f254de2b-b0d7-4ae0-b5ca-d4f05584c183",
        "parentId" : null,
        "authorId" : "cfbfb471-ad67-4db7-9ebe-33a524192e3b",
        "body" : "`value` could be omitted in this case\r\n\r\n```ts\r\ninterface IteratorReturnResult {\r\n    done: true;\r\n}\r\n```",
        "createdAt" : "2019-05-09T13:51:25Z",
        "updatedAt" : "2019-07-04T03:48:16Z",
        "lastEditedBy" : "cfbfb471-ad67-4db7-9ebe-33a524192e3b",
        "tags" : [
        ]
      },
      {
        "id" : "dfe583d0-2c51-4436-a689-495a19eecd72",
        "parentId" : "f254de2b-b0d7-4ae0-b5ca-d4f05584c183",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Unfortunately, for accurate type information for `yield*` it cannot be made optional. While it may be true that when you *produce* an `IteratorResult` you might want to elide `value`, when you *consume* an `IteratorResult`, the type system interrogates the `value` property to determine the return type. If the `value` property was optional, then we would always infer `TReturn | undefined` (due to the optionality). Since we cannot specialize `IteratorReturnResult` for both cases, we must leave `value` as mandatory to infer the correct type.",
        "createdAt" : "2019-05-09T17:50:54Z",
        "updatedAt" : "2019-07-04T03:48:16Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "944a349b-93f7-4de4-93fb-078b1d54eb33",
        "parentId" : "f254de2b-b0d7-4ae0-b5ca-d4f05584c183",
        "authorId" : "cfbfb471-ad67-4db7-9ebe-33a524192e3b",
        "body" : "That's ok. It's not so important.",
        "createdAt" : "2019-05-09T17:55:06Z",
        "updatedAt" : "2019-07-04T03:48:16Z",
        "lastEditedBy" : "cfbfb471-ad67-4db7-9ebe-33a524192e3b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f94886850b185bce3e442c40d7b638890f0de7b",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +14,18 @@}\n\ninterface IteratorReturnResult<TReturn> {\n    done: true;\n    value: TReturn;"
  },
  {
    "id" : "ebeac59c-cdf7-4ee8-b7f4-a15dad7b3e1f",
    "prId" : 30790,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30790#pullrequestreview-257684698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "413ccd98-ae52-4edb-83b2-b121e401098c",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "can other code besides generators produces Iterators with different types for TReturn and TNext?\nA 1-parameter Iterator type would be nicer to print. It probably doesn't matter much because it looks like Array (and other built-ins?) use IterableIterator, which is still 1-parameter.",
        "createdAt" : "2019-07-01T20:42:28Z",
        "updatedAt" : "2019-07-04T03:48:16Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "6dbf0abc-d28f-4a9f-a589-09ff1df4ec48",
        "parentId" : "413ccd98-ae52-4edb-83b2-b121e401098c",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Unfortunately it is necessary for `Iterator` to support three parameters so that the correct assignment compatibility rules for `Generator` can be applied to it in certain situations.",
        "createdAt" : "2019-07-03T19:05:49Z",
        "updatedAt" : "2019-07-04T03:48:16Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f94886850b185bce3e442c40d7b638890f0de7b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +21,25 @@type IteratorResult<T, TReturn = any> = IteratorYieldResult<T> | IteratorReturnResult<TReturn>;\n\ninterface Iterator<T, TReturn = any, TNext = undefined> {\n    // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.\n    next(...args: [] | [TNext]): IteratorResult<T, TReturn>;"
  },
  {
    "id" : "ae77d9f8-1455-428a-a608-7581a7f9e4c0",
    "prId" : 28052,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28052#pullrequestreview-536104832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f67f17ed-5ae3-4bf8-9567-32d7f98fa6e1",
        "parentId" : null,
        "authorId" : "54e8a7d9-0fe5-4af8-82f5-cbb0ff08ae8c",
        "body" : "Because this PR only changed this `WeakMap` constructor overload, <https://github.com/microsoft/TypeScript/issues/23551> has resurfaced once again, and the following is still valid:\r\n```ts\r\nnew WeakMap<object>();\r\n```\r\n\r\n---\r\n\r\nI’m fixing that in <https://github.com/microsoft/TypeScript/pull/41635>.",
        "createdAt" : "2020-11-22T19:06:41Z",
        "updatedAt" : "2020-11-22T19:07:58Z",
        "lastEditedBy" : "54e8a7d9-0fe5-4af8-82f5-cbb0ff08ae8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2db4913f0ea1ebfe48ce0c2d688ad92405d0cd00",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +136,140 @@\ninterface WeakMapConstructor {\n    new <K extends object, V>(iterable: Iterable<[K, V]>): WeakMap<K, V>;\n}\n"
  },
  {
    "id" : "a9d14ae6-5e45-4f79-bfb5-9d84e8de686b",
    "prId" : 8451,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cb84b65-3f85-4edf-8dcb-921770a517a0",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "not needed.\n",
        "createdAt" : "2016-05-04T04:56:59Z",
        "updatedAt" : "2016-05-05T17:45:15Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "41f0c050-c7ab-423d-ba1b-2faa76f8969f",
        "parentId" : "5cb84b65-3f85-4edf-8dcb-921770a517a0",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "It is here because `WeakSetConstructor` return `WeakSet` \n",
        "createdAt" : "2016-05-04T14:56:01Z",
        "updatedAt" : "2016-05-05T17:45:15Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "a835a420-ca54-4421-bb0e-e4de421b3fdd",
        "parentId" : "5cb84b65-3f85-4edf-8dcb-921770a517a0",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "but you need the collections for this to work, right?\n",
        "createdAt" : "2016-05-04T16:38:38Z",
        "updatedAt" : "2016-05-05T17:45:15Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "86c071b6-7cf5-4973-ac57-f50cf0451e07",
        "parentId" : "5cb84b65-3f85-4edf-8dcb-921770a517a0",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "That is true :sweat_smile: \n\nEdit: we have similar issue with Promise. see [here ](https://github.com/Microsoft/TypeScript/pull/8451/files#diff-5c3d60d8ed16d2857e28a35a61302b48R92). Then we should remove empty Promise interface as well but then would it be kind of weird that say you want to use collection and iterable but you will have to include promise as well (and vice versa)?\n",
        "createdAt" : "2016-05-04T17:12:55Z",
        "updatedAt" : "2016-05-05T17:45:15Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "a8f58bec-6cff-4171-9b7b-491259c0eef5",
        "parentId" : "5cb84b65-3f85-4edf-8dcb-921770a517a0",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "talk offline @mhegazy we will keep the empty interface to prevent such behaviour\n",
        "createdAt" : "2016-05-05T17:04:59Z",
        "updatedAt" : "2016-05-05T17:45:15Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c01a7bc4352a78be2442895b4583b993397f4450",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +97,101 @@}\n\ninterface WeakSet<T> { }\n\ninterface WeakSetConstructor {"
  }
]