[
  {
    "id" : "f98b83c8-d08e-484b-9c41-3b0737fb6bd2",
    "prId" : 7650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0635a17-4afb-4dd0-ab7c-80905dde4928",
        "parentId" : null,
        "authorId" : "f2b19330-eb30-4612-ac1d-f1474fd89ba0",
        "body" : "`predicate` is incorrect, it should be the same as for `find()`.\nSee https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/TypedArray/findIndex\n",
        "createdAt" : "2016-03-23T10:36:04Z",
        "updatedAt" : "2016-03-23T23:28:08Z",
        "lastEditedBy" : "f2b19330-eb30-4612-ac1d-f1474fd89ba0",
        "tags" : [
        ]
      },
      {
        "id" : "bc72223c-1d02-4963-8a82-75c5d9a40205",
        "parentId" : "e0635a17-4afb-4dd0-ab7c-80905dde4928",
        "authorId" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "body" : "Indeed.\n",
        "createdAt" : "2016-03-23T11:29:19Z",
        "updatedAt" : "2016-03-23T23:28:08Z",
        "lastEditedBy" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "tags" : [
        ]
      },
      {
        "id" : "c3b4a9f4-bb47-4df1-95c2-62f4a7c29b76",
        "parentId" : "e0635a17-4afb-4dd0-ab7c-80905dde4928",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "@Arnavion feel free to send a separate PR for the predicate changes.\n",
        "createdAt" : "2016-03-23T20:01:04Z",
        "updatedAt" : "2016-03-23T23:28:08Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "55752210-2365-4aaa-bfdb-b3df1e894e0e",
        "parentId" : "e0635a17-4afb-4dd0-ab7c-80905dde4928",
        "authorId" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "body" : "@mhegazy And should I move the other commits after the first one into a separate PR as well?\n",
        "createdAt" : "2016-03-23T22:41:08Z",
        "updatedAt" : "2016-03-23T23:28:08Z",
        "lastEditedBy" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "tags" : [
        ]
      },
      {
        "id" : "f13aaf4a-c481-47a1-9fbc-009bc006cacb",
        "parentId" : "e0635a17-4afb-4dd0-ab7c-80905dde4928",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "On a second thought, the commit messages look clear enough, so feel free to include the findIndex chances in this PR if you like or have it in a separate one. up to you.\n",
        "createdAt" : "2016-03-23T23:29:52Z",
        "updatedAt" : "2016-03-23T23:29:52Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "b2b62be1-2634-4cdd-beed-c0233fd81729",
        "parentId" : "e0635a17-4afb-4dd0-ab7c-80905dde4928",
        "authorId" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "body" : "I've removed them from this PR. Will make another one.\n",
        "createdAt" : "2016-03-23T23:30:16Z",
        "updatedAt" : "2016-03-23T23:30:16Z",
        "lastEditedBy" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5fa1622b166e8386adcba02fa90ad3b4c77d9d",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +1531,1535 @@      * predicate. If it is not provided, undefined is used instead.\n      */\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number | undefined;\n\n    /**"
  },
  {
    "id" : "e5b247ae-ac66-437b-9d9f-103552a113da",
    "prId" : 7650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5706e19f-f3b5-4911-bda5-7509aa513422",
        "parentId" : null,
        "authorId" : "f2b19330-eb30-4612-ac1d-f1474fd89ba0",
        "body" : "Same here: `predicate` is incorrect.\n",
        "createdAt" : "2016-03-23T10:36:52Z",
        "updatedAt" : "2016-03-23T23:28:08Z",
        "lastEditedBy" : "f2b19330-eb30-4612-ac1d-f1474fd89ba0",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5fa1622b166e8386adcba02fa90ad3b4c77d9d",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +1804,1808 @@      * predicate. If it is not provided, undefined is used instead.\n      */\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number | undefined;\n\n    /**"
  },
  {
    "id" : "675f978f-c80d-4c95-a9e5-62ac48f4b3f1",
    "prId" : 7650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74158f57-dede-4d53-a404-6808282c0381",
        "parentId" : null,
        "authorId" : "f2b19330-eb30-4612-ac1d-f1474fd89ba0",
        "body" : "Same here: `predicate` is incorrect.\nEDIT: well, all `findIndex` are wrong so I'm not adding more comments.\n",
        "createdAt" : "2016-03-23T10:37:16Z",
        "updatedAt" : "2016-03-23T23:28:08Z",
        "lastEditedBy" : "f2b19330-eb30-4612-ac1d-f1474fd89ba0",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5fa1622b166e8386adcba02fa90ad3b4c77d9d",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +2078,2082 @@      * predicate. If it is not provided, undefined is used instead.\n      */\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number | undefined;\n\n    /**"
  },
  {
    "id" : "11395e86-0a11-405b-8d20-ec8d69442731",
    "prId" : 7650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd159146-7a69-41ca-af2f-ccdc0a861f65",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "I don't think there is a guarantee that compile returns your subclass if you subclass RegExp, so it should return plain `RegExp` instead.\n",
        "createdAt" : "2016-03-24T12:23:22Z",
        "updatedAt" : "2016-03-24T12:23:22Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "1729e5a3-bcd5-407e-bfa5-71421091196e",
        "parentId" : "cd159146-7a69-41ca-af2f-ccdc0a861f65",
        "authorId" : "f2b19330-eb30-4612-ac1d-f1474fd89ba0",
        "body" : "According to ES specs it should return the `this` value of the `compile()` call. \nSo using `this` type here seems like the correct thing to do.\n\nBTW: this method is deprecated so hopefully it won't matter much.\n",
        "createdAt" : "2016-03-24T12:46:45Z",
        "updatedAt" : "2016-03-24T12:46:45Z",
        "lastEditedBy" : "f2b19330-eb30-4612-ac1d-f1474fd89ba0",
        "tags" : [
        ]
      },
      {
        "id" : "c925d814-64c6-438a-8b86-1dc492fc9837",
        "parentId" : "cd159146-7a69-41ca-af2f-ccdc0a861f65",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Concur :+1: \n",
        "createdAt" : "2016-03-24T13:46:56Z",
        "updatedAt" : "2016-03-24T13:46:56Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5fa1622b166e8386adcba02fa90ad3b4c77d9d",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +837,841 @@\n    // Non-standard extensions\n    compile(): this;\n}\n"
  },
  {
    "id" : "c019216c-a47a-4fc5-91c4-47aa2a3ffb40",
    "prId" : 3492,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ab4e74f-aa24-4566-b276-fc8ede866577",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "could we allow this to be generic?  i.e.\n\n``` ts\nisArray<T>(arg: any): arg is Array<T>\n```\n\n?\n",
        "createdAt" : "2015-06-12T21:46:07Z",
        "updatedAt" : "2015-06-12T21:46:07Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "42861452-8761-43a2-8c08-d1d82fb35ae4",
        "parentId" : "5ab4e74f-aa24-4566-b276-fc8ede866577",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "We could, but we should add a separate overload for it. Otherwise, not passing the type argument gives you `Array<{}>`\n",
        "createdAt" : "2015-06-12T21:55:47Z",
        "updatedAt" : "2015-06-12T21:55:47Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "f53c3212-78c4-4c35-9562-74f740e1e568",
        "parentId" : "5ab4e74f-aa24-4566-b276-fc8ede866577",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "so are you expecting this to work:\n\n``` ts\nvar arr: Array<number> | Array<string>;\n\nif (Array.isArray<number>(arr)) {\n    arr[0].toFixed(); // but what does that mean at runtime?\n}\n```\n",
        "createdAt" : "2015-06-12T23:28:28Z",
        "updatedAt" : "2015-06-12T23:28:28Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "c49a24c1-3e36-4100-a742-1cb06ab43208",
        "parentId" : "5ab4e74f-aa24-4566-b276-fc8ede866577",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "@mhegazy I think you're right. Specifying the type is claiming to know something that you don't.\n",
        "createdAt" : "2015-06-13T00:01:47Z",
        "updatedAt" : "2015-06-13T00:01:47Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a520386bb50454e2fae76a5a80f6a7799c0553c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1151,1155 @@    <T>(arrayLength: number): T[];\n    <T>(...items: T[]): T[];\n    isArray(arg: any): arg is Array<any>;\n    prototype: Array<any>;\n}"
  },
  {
    "id" : "fd491d9e-cbc4-4620-9fa2-94683431487f",
    "prId" : 987,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f2d516a-1489-4992-aa14-2ae1e1a6e576",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Are we set on `_Constructor`? I have reservations because it's more than just a constructor; you have \n\n``` TypeScript\nfromCharCode(...codes: number[]): string;\n```\n\nwhich is a method on the static side. A lot of `.d.ts` libraries tend to use the `_Static` as a naming convention for these types.\n\nI can honestly view it either way.\n",
        "createdAt" : "2014-10-29T07:27:26Z",
        "updatedAt" : "2014-12-02T01:22:51Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "82d51756-5dfa-408c-8597-cbebb690a898",
        "parentId" : "4f2d516a-1489-4992-aa14-2ae1e1a6e576",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I have no strong feelings about the name. Personally I would rather not introduce a new named type and kept it the way it is now; and maybe we should.\nBut if we were to change it, am ok with type_static.\n",
        "createdAt" : "2014-10-29T16:45:51Z",
        "updatedAt" : "2014-12-02T01:22:51Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "a9e60b2e-6672-4b99-986d-a3cfa5822902",
        "parentId" : "4f2d516a-1489-4992-aa14-2ae1e1a6e576",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "I would prefer `StringConstructor`. The ES spec calls it \"the String Constructor\" when describing the object and does not ever use the word \"static\" except to reserve it as a keyword.\n\nhttp://www.ecma-international.org/ecma-262/5.1/#sec-15.5.3\n",
        "createdAt" : "2014-10-29T16:52:17Z",
        "updatedAt" : "2014-12-02T01:22:51Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "d390f67f7dc8ae84837adfbea805a7df04718482",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +414,418 @@}\n\ninterface StringConstructor {\n    new (value?: any): String;\n    (value?: any): string;"
  }
]