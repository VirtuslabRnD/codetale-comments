[
  {
    "id" : "ada04f4c-c83e-4e69-a9ea-ef2de5a0b4cf",
    "prId" : 1229,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb9c238c-17ba-4f30-9279-6e2ae7d87152",
        "parentId" : null,
        "authorId" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "body" : "Why not just assign it? Is there any point in rolling it back?\n",
        "createdAt" : "2015-03-21T21:23:48Z",
        "updatedAt" : "2015-03-22T19:10:08Z",
        "lastEditedBy" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "tags" : [
        ]
      },
      {
        "id" : "a9d90600-db25-4069-92ff-49cf6a7e39aa",
        "parentId" : "cb9c238c-17ba-4f30-9279-6e2ae7d87152",
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "Two reasons:\n1. The environment doesn't really belong on the debug context.  This is a hack to stop it from crashing until we have better ways to deal with this.\n2. It introduces a potential use-after-free because the pointer stays around when the non-debug context is disposed.\n",
        "createdAt" : "2015-03-21T21:50:10Z",
        "updatedAt" : "2015-03-22T19:10:08Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf081a471205345abeebc5ee06ed02493c6dbdf1",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +240,244 @@    // there is no way for the embedder to tell if the data index is\n    // in use.\n    struct ScopedEnvironment {\n      ScopedEnvironment(Local<Context> context, Environment* env)\n          : context_(context) {"
  },
  {
    "id" : "991abe9d-257d-4b73-b4bb-f108759f0afa",
    "prId" : 14888,
    "prUrl" : "https://github.com/nodejs/node/pull/14888#pullrequestreview-57343856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43248284-3186-47f6-bfd6-7abdeb15436d",
        "parentId" : null,
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "This branch cannot realistically be taken, can it?",
        "createdAt" : "2017-08-18T09:23:53Z",
        "updatedAt" : "2017-09-05T02:54:13Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      },
      {
        "id" : "4162d13f-9962-44d3-99ce-b979323a2547",
        "parentId" : "43248284-3186-47f6-bfd6-7abdeb15436d",
        "authorId" : "4b71aeaa-5376-4bc0-be81-0ae8df38206e",
        "body" : "Not sure, but the same check is in a couple of other places in the file so I wouldn't touch them in this PR.",
        "createdAt" : "2017-08-19T06:59:45Z",
        "updatedAt" : "2017-09-05T02:54:13Z",
        "lastEditedBy" : "4b71aeaa-5376-4bc0-be81-0ae8df38206e",
        "tags" : [
        ]
      }
    ],
    "commit" : "d932e802317f9f61bd10988189fa43ed03ad0f61",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +981,985 @@    Local<Context> context = sandbox->context();\n    if (context.IsEmpty())\n      return MaybeLocal<Context>();\n    return context;\n  }"
  },
  {
    "id" : "aa72c11a-a40b-4a19-81cb-0cf7549c981b",
    "prId" : 23660,
    "prUrl" : "https://github.com/nodejs/node/pull/23660#pullrequestreview-164522060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0cc0421-d847-4f6d-bee9-59fe1804d844",
        "parentId" : null,
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "V8 recommend using the `MaybeLocal` returning version.\r\n(IMHO it's also cleaner then the out-param version)",
        "createdAt" : "2018-10-14T22:28:36Z",
        "updatedAt" : "2018-10-17T16:27:26Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      },
      {
        "id" : "a6d83aff-f33b-4301-841b-2305d41a3e57",
        "parentId" : "d0cc0421-d847-4f6d-bee9-59fe1804d844",
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "This is the `MaybeLocal` version.",
        "createdAt" : "2018-10-14T22:31:57Z",
        "updatedAt" : "2018-10-17T16:27:26Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      },
      {
        "id" : "c717c121-9bd0-468c-82fc-8d0e114e80c7",
        "parentId" : "d0cc0421-d847-4f6d-bee9-59fe1804d844",
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "So why not:\r\n```cpp\r\nMaybeLocal<Array> maybe = ctx->sandbox()->GetPropertyNames(ctx->context())\r\nif (maybe.IsEmpty())\r\n    return;\r\nargs.GetReturnValue().Set(maybe.ToLocalChecked());\r\n```",
        "createdAt" : "2018-10-14T22:35:33Z",
        "updatedAt" : "2018-10-17T16:27:26Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      },
      {
        "id" : "c7af435e-8fea-4b85-a493-4fb073e9c41a",
        "parentId" : "d0cc0421-d847-4f6d-bee9-59fe1804d844",
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "IMO, this way is easier to read and reason about (don't really have to think about `Maybe`s).",
        "createdAt" : "2018-10-14T22:52:27Z",
        "updatedAt" : "2018-10-17T16:27:26Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      },
      {
        "id" : "cc3a2323-d944-43f5-af0b-39237ee5da03",
        "parentId" : "d0cc0421-d847-4f6d-bee9-59fe1804d844",
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "IMHO having an uninitialized variable is code smell, and if there's a way to avoid it, why not.\r\nAlso `if (!ctx->sandbox()->GetPropertyNames(ctx->context()).ToLocal(&properties))` is a bit busy it does like 5 things...\r\n\r\nBut I leave it to the author.",
        "createdAt" : "2018-10-14T23:15:48Z",
        "updatedAt" : "2018-10-17T16:27:26Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      },
      {
        "id" : "78f44765-28f5-4bb5-8183-60a8e11d6775",
        "parentId" : "d0cc0421-d847-4f6d-bee9-59fe1804d844",
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "@refack Maybe a more objective advantage of the current variation here: It’s easier to handle errors from sequences of operations this way:\r\n\r\nhttps://github.com/nodejs/node/blob/8ce99faa5073298fcec9be91a30e3aa98a8620d3/src/node.cc#L1237-L1241\r\n\r\nAt first, I also was a fan of what you’re suggesting, but for cases like these it can become quite annoying…",
        "createdAt" : "2018-10-14T23:22:23Z",
        "updatedAt" : "2018-10-17T16:27:26Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      },
      {
        "id" : "f743f4fd-2efc-4acf-a359-4e9e6eb8e078",
        "parentId" : "d0cc0421-d847-4f6d-bee9-59fe1804d844",
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "That's IMHO an extreme example of this pattern. What's wrong with:\r\n```cpp\r\n  Maybe<Object> module = args[0]->ToObject(context);\r\n  Maybe<Object> exports = module->Get(context, env->exports_string());\r\n  Maybe<Value> exports_v = exports_v->ToObject(context);\r\n  if (module.isEmpty() || exports.isEmpty() || exports_v.isEmpty()) {\r\n    return;  // Exception pending.\r\n  }\r\n```\r\nThe original code also has short-circuit logic, so it is tricky to reason about.\r\nP.S. see the `// Exception pending` comment, can we tell what when wrong?\r\n\r\n---\r\n\r\nWe have actually have several guidelines that say to avoid this:\r\n\r\nGoogle's:\r\n1. [Local Variables](https://google.github.io/styleguide/cppguide.html#Local_Variables) - Place a function's variables in the narrowest scope possible, and initialize variables in the declaration.\r\n2. [Output Parameters](https://google.github.io/styleguide/cppguide.html#Output_Parameters) - \r\nPrefer using return values rather than output parameters. If output-only parameters are used they should appear after input parameters.\r\n\r\nC++CG:\r\n1. [ES.20](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-always): Always initialize an object\r\n2. [F.20](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f20-for-out-output-values-prefer-return-values-to-output-parameters): For “out” output values, prefer return values to output parameters",
        "createdAt" : "2018-10-14T23:42:30Z",
        "updatedAt" : "2018-10-17T16:27:26Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      },
      {
        "id" : "58e9f044-72ad-498c-8325-8ec15c978dd5",
        "parentId" : "d0cc0421-d847-4f6d-bee9-59fe1804d844",
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "> What's wrong with:\r\n\r\nIt doesn’t compile … `MaybeLocal`s sadly don’t form a full monad; you can’t actually call `->Get()` or `->ToObject()` on one. The idea, as I understand V8, is to force API users to return to JS as soon as possible, and not attempt to do more operations.\r\n\r\n> P.S. see the `// Exception pending` comment, can we tell what when wrong?\r\n\r\nNo, but ideally we don’t have to care about that anyway.\r\n\r\nIt’s also a bit odd to quote Google’s style guide here… I totally see what you mean and why this pattern can be counterintuitive, but after all, this pattern is of Google’s making and V8 uses it very extensively in its own code. :smile: \r\n\r\n> ES.20: Always initialize an object\r\n\r\nI’d say that rule *explicitly* lists this pattern as an exception:\r\n\r\n> If you are declaring an object that is just about to be initialized from input, initializing it would cause a double initialization.",
        "createdAt" : "2018-10-14T23:51:21Z",
        "updatedAt" : "2018-10-17T16:27:26Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      },
      {
        "id" : "6121bcaa-8a0a-4ff4-aa93-e7c625a267c7",
        "parentId" : "d0cc0421-d847-4f6d-bee9-59fe1804d844",
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "> It doesn’t compile … `MaybeLocal`s sadly don’t form a full monad;\r\n\r\nI tried to read this to figure out if the values are dependant. I looked several times, but missed it. That's a red light for me.\r\n\r\nAnyway like you say, we write code so it reads well, not writes easy. The following is linear and reads much better, with only one action per line.\r\n```\r\nMaybe<Object> module = args[0]->ToObject(context);\r\nif (module.isEmpty()) {\r\n  return env->isolate()->ThrowException(\"module is empty\");\r\n}\r\nMaybe<Object> exports = module->ToCheckedLocal()->Get(context, env->exports_string());\r\nif (exports.isEmpty()) {\r\n  return env->isolate()->ThrowException(\"exports is empty\");\r\n}\r\nMaybe<Value> exports_v = exports_v->ToCheckedLocal()->ToObject(context);\r\nif (exports_v.isEmpty()) {\r\n   return env->isolate()->ThrowException(\"exports_v is empty\");\r\n}\r\n```",
        "createdAt" : "2018-10-15T00:01:31Z",
        "updatedAt" : "2018-10-17T16:27:26Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      },
      {
        "id" : "a558be2c-75ff-4a67-bd25-cadfc181e107",
        "parentId" : "d0cc0421-d847-4f6d-bee9-59fe1804d844",
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "The `ThrowException()` bit is not quite how `MaybeLocal`s work – an empty one typically means that there is already an exception pending – but that’s a fair point, yes.\r\n\r\nTo be clear, I don’t personally like the repetition there, but I wouldn’t object to anybody using individual checks for each call.",
        "createdAt" : "2018-10-15T00:08:32Z",
        "updatedAt" : "2018-10-17T16:27:26Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      }
    ],
    "commit" : "7872d7933be571dabfa94259433612a34b885513",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +509,513 @@    return;\n\n  Local<Array> properties;\n\n  if (!ctx->sandbox()->GetPropertyNames(ctx->context()).ToLocal(&properties))"
  }
]