[
  {
    "id" : "4fdfc8ef-f283-451b-9e4b-08d6a76751cc",
    "prId" : 42542,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42542#pullrequestreview-602285515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07f6ee9a-0d57-4cd0-ac02-3c5809e46c10",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "`continue`, as in the visit case?  Then it wouldn't need to be accessed as `queue[pollIndex]` below.",
        "createdAt" : "2021-02-08T21:58:53Z",
        "updatedAt" : "2021-03-02T21:53:12Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "acefa05e-3851-497e-b117-b640bc39f125",
        "parentId" : "07f6ee9a-0d57-4cd0-ac02-3c5809e46c10",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "`callbackOnWatchFileStat` can set the ` queue[pollIndex]` to undefined eg in `createDynamicPriorityPollingWatchFile` when it moves the file from one queue to other with lower priority because file has not changed for several polling sessions",
        "createdAt" : "2021-03-02T21:23:32Z",
        "updatedAt" : "2021-03-02T21:53:12Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "8b881b63-9c50-40c0-bfe2-b0221c3a5eb4",
        "parentId" : "07f6ee9a-0d57-4cd0-ac02-3c5809e46c10",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "So what i meant was i will continue but we still need to check for the undefined value",
        "createdAt" : "2021-03-02T21:24:07Z",
        "updatedAt" : "2021-03-02T21:53:12Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d688665d24766dc295055f6ba42040db5776e50a",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +158,162 @@            if (watchedFile.isClosed) {\n                // Closed watcher as part of callback\n                queue[pollIndex] = undefined;\n                continue;\n            }"
  },
  {
    "id" : "78832189-1b2b-4117-b66f-e28ee6c7889c",
    "prId" : 42542,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42542#pullrequestreview-602286506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18d25770-c260-4d1b-822f-59a41e04e229",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Looks like a \"move\" if we're clearing the old location?  And what's the \"non hole location\"?",
        "createdAt" : "2021-02-08T22:26:42Z",
        "updatedAt" : "2021-03-02T21:53:12Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "6c2f540a-0a3d-4e4e-b722-1c4ef8006fc7",
        "parentId" : "18d25770-c260-4d1b-822f-59a41e04e229",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Seems like maybe we're trying to defragment the queue?",
        "createdAt" : "2021-02-08T22:27:26Z",
        "updatedAt" : "2021-03-02T21:53:12Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "76fd1f14-6869-437f-9bb5-803a231cdb33",
        "parentId" : "18d25770-c260-4d1b-822f-59a41e04e229",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Yes we are defragmenting",
        "createdAt" : "2021-03-02T21:25:02Z",
        "updatedAt" : "2021-03-02T21:53:12Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "86864887-d14a-4359-8349-8fb429dedabb",
        "parentId" : "18d25770-c260-4d1b-822f-59a41e04e229",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Again this is existing thing i just pulled it out so it can be shared for new option",
        "createdAt" : "2021-03-02T21:25:24Z",
        "updatedAt" : "2021-03-02T21:53:12Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d688665d24766dc295055f6ba42040db5776e50a",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +165,169 @@            // Defragment the queue while we are at it\n            if (queue[pollIndex]) {\n                // Copy this file to the non hole location\n                if (definedValueCopyToIndex < pollIndex) {\n                    queue[definedValueCopyToIndex] = watchedFile;"
  },
  {
    "id" : "799792aa-baa1-4b01-9ec2-72d8d0d04d6d",
    "prId" : 42542,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42542#pullrequestreview-602303117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e751881-cbc1-40b5-9ce4-e36e3961ef8c",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This is where actual polling happens. and this is the file that gets counted towards the polling. The code was existing just pulled out to helper so that it can be shared.",
        "createdAt" : "2021-03-02T21:47:54Z",
        "updatedAt" : "2021-03-02T21:53:12Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d688665d24766dc295055f6ba42040db5776e50a",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +155,159 @@            // Only files polled count towards chunkSize\n            chunkSize--;\n            const fileChanged = onWatchedFileStat(watchedFile, getModifiedTime(host, watchedFile.fileName));\n            if (watchedFile.isClosed) {\n                // Closed watcher as part of callback"
  },
  {
    "id" : "06f86550-835b-4a20-b097-355af79288b6",
    "prId" : 41604,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41604#pullrequestreview-536802307",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd96b5d2-250e-4b10-abdd-f66722384b01",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Instead of asserting on the type of `_fs`, maybe assert on the type of the argument.",
        "createdAt" : "2020-11-23T05:05:40Z",
        "updatedAt" : "2020-11-23T05:05:41Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "917cbc05-9aa4-46ec-aa33-d534b7da32ed",
        "parentId" : "fd96b5d2-250e-4b10-abdd-f66722384b01",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I'm changing the return type too.  Would you prefer to have two type assertions or leave it as is?",
        "createdAt" : "2020-11-23T17:15:08Z",
        "updatedAt" : "2020-11-23T17:17:21Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "10a53933-f1bb-4bed-84c7-779b06f3a495",
        "parentId" : "fd96b5d2-250e-4b10-abdd-f66722384b01",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Nah, it's fine.",
        "createdAt" : "2020-11-23T19:59:56Z",
        "updatedAt" : "2020-11-23T19:59:56Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ea122025f2ec0f632199f417a9fd93fd62265c3",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1327,1331 @@            function statSync(path: string): import(\"fs\").Stats | undefined {\n                // throwIfNoEntry will be ignored by older versions of node\n                return (_fs as any).statSync(path, { throwIfNoEntry: false });\n            }\n"
  },
  {
    "id" : "1c2b8b8f-a144-4972-b011-2583a84ec322",
    "prId" : 40043,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40043#pullrequestreview-467857199",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4e5d63f-bd4c-4a1f-8160-2e9b66f728e1",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Another option is to just return using existsSync and ignore directory or file and make our code more tolerant (it might already be) for finding file instead of directory or vice versa. That could give us better perf in both cases.",
        "createdAt" : "2020-08-13T21:47:42Z",
        "updatedAt" : "2020-08-14T20:22:35Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "77617b28-8470-42be-934d-d78a64a0857b",
        "parentId" : "e4e5d63f-bd4c-4a1f-8160-2e9b66f728e1",
        "authorId" : "8f2499d4-8381-4606-ba91-55fe834b0a65",
        "body" : "Definitely. I was also wondering how necessary it was to check for file versus folder existence.\r\n\r\nI'm guessing the current behavior of this function is this way so folders ending with `.ts` get ignored. Is that an edge case where a behavior change would be acceptable?",
        "createdAt" : "2020-08-13T21:59:00Z",
        "updatedAt" : "2020-08-14T20:22:35Z",
        "lastEditedBy" : "8f2499d4-8381-4606-ba91-55fe834b0a65",
        "tags" : [
        ]
      },
      {
        "id" : "020dd246-ea4e-45af-85ea-ba67515eb3ef",
        "parentId" : "e4e5d63f-bd4c-4a1f-8160-2e9b66f728e1",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "If you make a change we can see what user tests break and see what happens",
        "createdAt" : "2020-08-13T22:02:22Z",
        "updatedAt" : "2020-08-14T20:22:35Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "8976f262-1144-48a6-8d84-0bd53ddc5669",
        "parentId" : "e4e5d63f-bd4c-4a1f-8160-2e9b66f728e1",
        "authorId" : "8f2499d4-8381-4606-ba91-55fe834b0a65",
        "body" : "Ended up not doing this and favoring `Error.stackTraceLimit = 0` instead. I assume we wanted to try using `existsSync` entirely since we were worried about perf in the path exists case. Setting `Error.stackTraceLimit = 0` should improve performance when files don't exist with no change to checking files that do exist.",
        "createdAt" : "2020-08-14T18:30:23Z",
        "updatedAt" : "2020-08-14T20:22:35Z",
        "lastEditedBy" : "8f2499d4-8381-4606-ba91-55fe834b0a65",
        "tags" : [
        ]
      },
      {
        "id" : "be2715bc-82ac-470f-aeb4-e6f0dce20236",
        "parentId" : "e4e5d63f-bd4c-4a1f-8160-2e9b66f728e1",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Nice!",
        "createdAt" : "2020-08-14T20:28:58Z",
        "updatedAt" : "2020-08-14T20:28:58Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "930b81cc45f11f810f36d22fbf9012bee2eb4508",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1668,1672 @@                Error.stackTraceLimit = 0;\n\n                try {\n                    const stat = _fs.statSync(path);\n                    switch (entryKind) {"
  },
  {
    "id" : "af14e16e-4440-49cd-850b-14bd0e5f043a",
    "prId" : 39243,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39243#pullrequestreview-488082165",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36257472-8d2f-45b5-980c-bba91aaca278",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "The others appear to be `NonNullable` - is the difference important?",
        "createdAt" : "2020-09-05T00:46:06Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "a6a433c4-6ee2-449c-a832-fddebfb56fa7",
        "parentId" : "36257472-8d2f-45b5-980c-bba91aaca278",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "getCurrentDirectory is not optional!",
        "createdAt" : "2020-09-14T19:36:21Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "90bcea54378021ae39bf197edeb322d54484b174",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +450,454 @@        watchDirectory: HostWatchDirectory;\n        useCaseSensitiveFileNames: boolean;\n        getCurrentDirectory: System[\"getCurrentDirectory\"];\n        getAccessibleSortedChildDirectories(path: string): readonly string[];\n        directoryExists(dir: string): boolean;"
  },
  {
    "id" : "f7407790-f090-4672-967a-8586bf4811b2",
    "prId" : 39243,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39243#pullrequestreview-488082427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e48fc25-4a4a-4cbc-abba-126dc7d27575",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Optimization or important for correctness?",
        "createdAt" : "2020-09-05T00:48:33Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "019580a2-c756-44ff-89f3-986a1e6481e4",
        "parentId" : "7e48fc25-4a4a-4cbc-abba-126dc7d27575",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "optimization and consistency both.",
        "createdAt" : "2020-09-14T19:36:47Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "90bcea54378021ae39bf197edeb322d54484b174",
    "line" : 224,
    "diffHunk" : "@@ -1,1 +1197,1201 @@            const useCaseSensitiveFileNames = isFileSystemCaseSensitive();\n            const fsSupportsRecursiveFsWatch = isNode4OrLater && (process.platform === \"win32\" || process.platform === \"darwin\");\n            const getCurrentDirectory = memoize(() => process.cwd());\n            const { watchFile, watchDirectory } = createSystemWatchFunctions({\n                pollingWatchFile: createSingleFileWatcherPerName(fsWatchFileWorker, useCaseSensitiveFileNames),"
  },
  {
    "id" : "9c911949-37f7-4e7d-bf1e-1359fe8cfb1b",
    "prId" : 39243,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39243#pullrequestreview-523694896",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac0b7f11-5e2e-49ab-977c-e8e70b97e0b8",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I think we're passing this around now so that we can resolve the excluded files and directories.  If that's the case, why not resolve them up-front and pass around lists of resolved paths?",
        "createdAt" : "2020-11-04T17:55:49Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "b18be6ea-ad62-4262-9fdd-5f732dccaf15",
        "parentId" : "ac0b7f11-5e2e-49ab-977c-e8e70b97e0b8",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This just works better as we have this around. esp for watch include and exclude patterns and we dont have to worry about creating different regexps than we do for the matching files when calculating file names.\r\nEg. https://github.com/microsoft/TypeScript/pull/39243/files#diff-4dd2736e47d6b51eaf8ff275c70e53dc5f6bca718a54a2af474cd06147413f68R3198",
        "createdAt" : "2020-11-04T20:04:09Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "90bcea54378021ae39bf197edeb322d54484b174",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +450,454 @@        watchDirectory: HostWatchDirectory;\n        useCaseSensitiveFileNames: boolean;\n        getCurrentDirectory: System[\"getCurrentDirectory\"];\n        getAccessibleSortedChildDirectories(path: string): readonly string[];\n        directoryExists(dir: string): boolean;"
  },
  {
    "id" : "e0660969-a308-4da0-af95-d3a7266be3b5",
    "prId" : 36244,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36244#pullrequestreview-344277969",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78cfcc47-158c-4110-b851-0b4fb73415dd",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Should errors other than `EEXIST` be rethrown?  (Seems worse, but that's what it seems to have done before.)",
        "createdAt" : "2020-01-16T23:12:06Z",
        "updatedAt" : "2020-01-16T23:12:06Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "b8beff2d-9e53-4365-aa6d-bb71a13e48b8",
        "parentId" : "78cfcc47-158c-4110-b851-0b4fb73415dd",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Oh, I see from the bug that swallowing the exception is a feature of this change.",
        "createdAt" : "2020-01-16T23:13:34Z",
        "updatedAt" : "2020-01-16T23:13:34Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "9960b10be0649144e3b47b846f8c3bb51369627d",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1565,1569 @@                }\n                catch (e) {\n                    return undefined;\n                }\n                let len = buffer.length;"
  },
  {
    "id" : "680ba15a-de4f-433b-af6c-22a58655fcae",
    "prId" : 35286,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35286#pullrequestreview-342117041",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14a383ad-0b65-492b-acd0-d671fe68ebea",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You don't need to slice since getAccessibleFileSystemEntries returns new array for directories..",
        "createdAt" : "2020-01-13T19:40:25Z",
        "updatedAt" : "2020-01-15T03:54:47Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "edb83d9a-5ab6-47c3-a51e-55856c4f23ab",
        "parentId" : "14a383ad-0b65-492b-acd0-d671fe68ebea",
        "authorId" : "ef4c5184-8dfa-4f2e-91ff-b16ee322ed65",
        "body" : "Not always: `return emptyFileSystemEntries` does not. Of course, that’s easy to change. I’ve added a commit doing so.\r\n\r\nEdit: I’ve now removed that commit again because we didn’t want to change the type of `getAccessibleFileSystemEntries` (at least not in this PR); see [this discussion](https://github.com/microsoft/TypeScript/pull/35286#discussion_r366686354).",
        "createdAt" : "2020-01-13T20:27:17Z",
        "updatedAt" : "2020-01-15T03:57:38Z",
        "lastEditedBy" : "ef4c5184-8dfa-4f2e-91ff-b16ee322ed65",
        "tags" : [
        ]
      }
    ],
    "commit" : "bee7ee00a5fd4ec5130cfc560665364d5b70d3e7",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +1425,1429 @@\n            function getDirectories(path: string): string[] {\n                return getAccessibleFileSystemEntries(path).directories.slice();\n            }\n"
  },
  {
    "id" : "bb55f341-5a25-4dd9-86e1-7e3a63090139",
    "prId" : 35286,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35286#pullrequestreview-342109324",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c68373c-827a-4dcc-bb98-8405350bfae2",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "@amcasey does this need node version check that you had in your PR ?",
        "createdAt" : "2020-01-13T19:40:51Z",
        "updatedAt" : "2020-01-15T03:54:47Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "37a5e13a-323e-46c2-a7d6-711d230565e8",
        "parentId" : "1c68373c-827a-4dcc-bb98-8405350bfae2",
        "authorId" : "ef4c5184-8dfa-4f2e-91ff-b16ee322ed65",
        "body" : "It’s not needed as written; old Node just ignores the unknown option.\r\n\r\n```console\r\n$ docker run --rm -it node:8-alpine -p 'fs.readdirSync(\"/\", { withFileTypes: true })'\r\n[ '.dockerenv',\r\n  'bin',\r\n  'dev',\r\n  'etc',\r\n  'home',\r\n  'lib',\r\n  'media',\r\n  'mnt',\r\n  'opt',\r\n  'proc',\r\n  'root',\r\n  'run',\r\n  'sbin',\r\n  'srv',\r\n  'sys',\r\n  'tmp',\r\n  'usr',\r\n  'var' ]\r\n$ docker run --rm -it node:10-alpine -p 'fs.readdirSync(\"/\", { withFileTypes: true })'\r\n[ Dirent { name: '.dockerenv', [Symbol(type)]: 1 },\r\n  Dirent { name: 'bin', [Symbol(type)]: 2 },\r\n  Dirent { name: 'dev', [Symbol(type)]: 2 },\r\n  Dirent { name: 'etc', [Symbol(type)]: 2 },\r\n  Dirent { name: 'home', [Symbol(type)]: 2 },\r\n  Dirent { name: 'lib', [Symbol(type)]: 2 },\r\n  Dirent { name: 'media', [Symbol(type)]: 2 },\r\n  Dirent { name: 'mnt', [Symbol(type)]: 2 },\r\n  Dirent { name: 'opt', [Symbol(type)]: 2 },\r\n  Dirent { name: 'proc', [Symbol(type)]: 2 },\r\n  Dirent { name: 'root', [Symbol(type)]: 2 },\r\n  Dirent { name: 'run', [Symbol(type)]: 2 },\r\n  Dirent { name: 'sbin', [Symbol(type)]: 2 },\r\n  Dirent { name: 'srv', [Symbol(type)]: 2 },\r\n  Dirent { name: 'sys', [Symbol(type)]: 2 },\r\n  Dirent { name: 'tmp', [Symbol(type)]: 2 },\r\n  Dirent { name: 'usr', [Symbol(type)]: 2 },\r\n  Dirent { name: 'var', [Symbol(type)]: 2 } ]\r\n```",
        "createdAt" : "2020-01-13T20:12:38Z",
        "updatedAt" : "2020-01-15T03:54:47Z",
        "lastEditedBy" : "ef4c5184-8dfa-4f2e-91ff-b16ee322ed65",
        "tags" : [
        ]
      }
    ],
    "commit" : "bee7ee00a5fd4ec5130cfc560665364d5b70d3e7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1354,1358 @@                perfLogger.logEvent(\"ReadDir: \" + (path || \".\"));\n                try {\n                    const entries = _fs.readdirSync(path || \".\", { withFileTypes: true });\n                    const files: string[] = [];\n                    const directories: string[] = [];"
  },
  {
    "id" : "059bb3a6-bfc4-4e9d-bf80-59200862e106",
    "prId" : 33712,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33712#pullrequestreview-296581069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54688e7b-7c7f-464a-86a4-aa52d6b1a7e2",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Should this `try` wrap `resolveJSModule`? I'm not sure that should be allowed to fail like `require`.",
        "createdAt" : "2019-10-02T22:44:13Z",
        "updatedAt" : "2019-10-04T21:09:35Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "157375f4-4c2e-4686-871f-067bab925b4a",
        "parentId" : "54688e7b-7c7f-464a-86a4-aa52d6b1a7e2",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "That's what we're already doing in src/tsserver/server.ts. In any event, the error is still available.",
        "createdAt" : "2019-10-02T22:55:38Z",
        "updatedAt" : "2019-10-04T21:09:35Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "837058d9-e772-4634-893a-a8192bc2ce66",
        "parentId" : "54688e7b-7c7f-464a-86a4-aa52d6b1a7e2",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "🤷‍♂ It'll just be odd if, at some point in the future, it fails with a `Cannot access field 'kind' on type 'undefined'`-type error in our own code or something and it's just swallowed.",
        "createdAt" : "2019-10-02T23:01:35Z",
        "updatedAt" : "2019-10-04T21:09:35Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "47514322-b613-4b85-ab02-33dea3dbe48a",
        "parentId" : "54688e7b-7c7f-464a-86a4-aa52d6b1a7e2",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "It's not swallowed, per se. The error is returned in the result. We generally try to avoid catching/throwing exceptions in our code if possible (such as readFile returning `string | undefined`).",
        "createdAt" : "2019-10-02T23:15:28Z",
        "updatedAt" : "2019-10-04T21:09:35Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "0a963905-ec39-40b0-b9fe-5f1d9be1d428",
        "parentId" : "54688e7b-7c7f-464a-86a4-aa52d6b1a7e2",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Right, we wanna avoid catch/throwing fs and other kinds of node errors, but implementation problems and debug assertions we'd ideally like to still throw, loudly. That's why I was wondering if the scope of the try/catch was too broad.",
        "createdAt" : "2019-10-02T23:17:53Z",
        "updatedAt" : "2019-10-04T21:09:35Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "00cc34b3-6b85-4ee9-9a7f-5d8f364d7217",
        "parentId" : "54688e7b-7c7f-464a-86a4-aa52d6b1a7e2",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "In cases like tsserver and the plugin API prototype, we inspect the `error` property and report it either in the server log or via a diagnostic, so the error itself is not lost. I'm explicitly *not* using the error property for the extended debug functionality.",
        "createdAt" : "2019-10-02T23:36:08Z",
        "updatedAt" : "2019-10-04T21:09:35Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cacb46af85f3a68290148c663a38c84580fd862f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +879,883 @@                base64encode: input => bufferFrom(input).toString(\"base64\"),\n                require: (baseDir, moduleName) => {\n                    try {\n                        const modulePath = resolveJSModule(moduleName, baseDir, nodeSystem);\n                        return { module: require(modulePath), modulePath, error: undefined };"
  },
  {
    "id" : "3b3f9d88-eac6-4c42-8554-ad448b15e64d",
    "prId" : 33586,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33586#pullrequestreview-292772917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c4296bc-a1c6-4359-ba09-7a34fc8bd659",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "What happens if this is called twice before `disableCPUProfiler`?  Does it matter?",
        "createdAt" : "2019-09-24T23:14:29Z",
        "updatedAt" : "2019-09-26T22:10:35Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "384da035-5e1a-4e2c-87dd-f71f812d2d42",
        "parentId" : "3c4296bc-a1c6-4359-ba09-7a34fc8bd659",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "As-is, minimally only one (the last one) is going to be completed - however that's assuming the runtime even allow multiple sessions to connect simultaneously. I can add a check for an existing session and a return flag for if the profiler is already enabled",
        "createdAt" : "2019-09-24T23:25:08Z",
        "updatedAt" : "2019-09-26T22:10:35Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "5c8249c4-68d8-4641-8ec8-fc9fb30c097d",
        "parentId" : "3c4296bc-a1c6-4359-ba09-7a34fc8bd659",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Or just throw?",
        "createdAt" : "2019-09-24T23:36:28Z",
        "updatedAt" : "2019-09-26T22:10:35Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "0a4cdd70-6455-47e5-9c12-0678bdbd0d71",
        "parentId" : "3c4296bc-a1c6-4359-ba09-7a34fc8bd659",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Nah - given that it's supposed to be a relatively unobtrusive profile, I'd rather just not generate the profile data. If a caller wants to throw, they can inspect the return value and do so.",
        "createdAt" : "2019-09-25T00:16:27Z",
        "updatedAt" : "2019-09-26T22:10:35Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "187b182c-2075-4277-a6fc-21aca119fdf9",
        "parentId" : "3c4296bc-a1c6-4359-ba09-7a34fc8bd659",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "In any case, it's now implemented as suggested in my prior comment - the function is effectively a passthru to the callback if a profiling run is already ongoing.",
        "createdAt" : "2019-09-25T00:17:13Z",
        "updatedAt" : "2019-09-26T22:10:35Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b66e300b62c22cbf05805b36ff5562b679d3ae74",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +884,888 @@             * See https://nodejs.org/api/inspector.html#inspector_example_usage for details\n             */\n            function enableCPUProfiler(path: string, cb: () => void) {\n                if (activeSession) {\n                    cb();"
  },
  {
    "id" : "1c17b7d5-f382-4ae4-997a-61306c10f4a1",
    "prId" : 33586,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33586#pullrequestreview-293953267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2873996e-94dc-458b-8959-c46d8c4764f8",
        "parentId" : null,
        "authorId" : "5494dc6a-1c55-4998-ace4-8d2f12263713",
        "body" : "@weswigham don't forget to add `inspector: false` to `package.json`. these node apis otherwise break bundling resolution. I'm kinda waiting for `3.7` to be webpack-compatible without extra config. this `require` call will break it again.",
        "createdAt" : "2019-09-26T19:29:46Z",
        "updatedAt" : "2019-09-26T22:10:35Z",
        "lastEditedBy" : "5494dc6a-1c55-4998-ace4-8d2f12263713",
        "tags" : [
        ]
      }
    ],
    "commit" : "b66e300b62c22cbf05805b36ff5562b679d3ae74",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +889,893 @@                    return false;\n                }\n                const inspector: typeof import(\"inspector\") = require(\"inspector\");\n                if (!inspector || !inspector.Session) {\n                    cb();"
  },
  {
    "id" : "b70c206a-21e8-4654-9ce5-57aadf80fa39",
    "prId" : 32745,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32745#pullrequestreview-273358224",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ea8779d-1714-4753-ba84-2f70e8ac185f",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "So this callback can change to the Missing FileSystemEntry from the Present one, right? If so, why not always use it?\r\n\r\nHow do we detect missing files -- is it when relativeName is incorrect as handled below? Is it possible for relativeName to be incorrect in other ways that don't indicate missing files?",
        "createdAt" : "2019-08-08T23:12:50Z",
        "updatedAt" : "2019-08-09T22:13:21Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "e37a1f59-b024-45b4-b591-a71df50683e8",
        "parentId" : "0ea8779d-1714-4753-ba84-2f70e8ac185f",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "The missing file system entry is watched by polling on the directory stat so it is cpu extensive and we don't want to do that for directories. \r\nThe name is incorrect in a way it is undefined or doesn't contain full path just base file name. If you look at the check, it is more permissive to check directory existence. So node_modules in child folder will also trigger check but that is more accurate than not checking in that scenario.",
        "createdAt" : "2019-08-09T21:00:33Z",
        "updatedAt" : "2019-08-09T22:13:21Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "850ff783f4dad242119e362314df0882518cf4a6",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +1088,1092 @@                            options,\n                            isLinuxOrMacOs ?\n                                callbackChangingToMissingFileSystemEntry :\n                                callback\n                        );"
  },
  {
    "id" : "a5743d38-f945-4e33-ac3d-75ba472b79ec",
    "prId" : 32612,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32612#pullrequestreview-271036489",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37c67654-21f5-4122-b399-3f7c47cdc475",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This will miss the stop call .. instead of modifying this function how about calling this fun readFileWorker and and adding readFile to start and stop before returning result from the worker",
        "createdAt" : "2019-08-02T23:53:45Z",
        "updatedAt" : "2019-08-06T18:49:02Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "8481831f-ba9b-4ec0-93c2-90f35ef1d832",
        "parentId" : "37c67654-21f5-4122-b399-3f7c47cdc475",
        "authorId" : "6bdd339b-f73c-4887-bed9-3e6ae98f8659",
        "body" : "Good point. I made the change.",
        "createdAt" : "2019-08-05T22:29:10Z",
        "updatedAt" : "2019-08-06T18:49:02Z",
        "lastEditedBy" : "6bdd339b-f73c-4887-bed9-3e6ae98f8659",
        "tags" : [
        ]
      }
    ],
    "commit" : "47e77c976b6d94a7b5fca4ba05a7f4de6ee26506",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1089,1093 @@            function readFileWorker(fileName: string, _encoding?: string): string | undefined {\n                if (!fileExists(fileName)) {\n                    return undefined;\n                }\n                const buffer = _fs.readFileSync(fileName);"
  },
  {
    "id" : "8e5dcd94-2a01-4720-b053-44b82ce7905f",
    "prId" : 30247,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30247#pullrequestreview-211970779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6dc855b-0de3-4e3d-a289-1bcc2c330ebe",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Is there a reason we're special casing `.git` and not just ignoring all dotfolders?",
        "createdAt" : "2019-03-07T01:13:34Z",
        "updatedAt" : "2019-03-07T01:13:39Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "2b2e5424-2170-4e30-a370-aa6636f84398",
        "parentId" : "f6dc855b-0de3-4e3d-a289-1bcc2c330ebe",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Not sure if anything starting with \".\" is too aggressive but we definitely have reports about \".git\" and hence added that one. We can relax this further later if needed.",
        "createdAt" : "2019-03-07T19:17:47Z",
        "updatedAt" : "2019-03-07T19:17:47Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec2ee9ff3afdf4089b71e06dfc64465d1ee210fd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +328,332 @@\n    /*@internal*/\n    export const ignoredPaths = [\"/node_modules/.\", \"/.git\"];\n\n    /*@internal*/"
  },
  {
    "id" : "efbbf3a3-7d4b-42b4-9332-abd3f7619478",
    "prId" : 29161,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29161#pullrequestreview-192361724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "858044c0-1210-43ed-bfb6-8da0f42eefdc",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Is this used a lot? It seems like a for loop over the character indices would allocate less than data.split.map. Of course the optimizer might do the right thing.",
        "createdAt" : "2019-01-10T23:54:47Z",
        "updatedAt" : "2019-01-17T20:29:40Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "36e260ab-600d-41b1-95e6-8f2d415bec41",
        "parentId" : "858044c0-1210-43ed-bfb6-8da0f42eefdc",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Later: oh, this is just a code move.",
        "createdAt" : "2019-01-10T23:55:06Z",
        "updatedAt" : "2019-01-17T20:29:40Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "cea365f8-6685-47c2-ac77-c5391a7d9ceb",
        "parentId" : "858044c0-1210-43ed-bfb6-8da0f42eefdc",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Note that this is a fallback for creating hash to store instead of storing text of generated .d.ts files signature. With this change it would also be used as backup (when node api doesn't support creating hash) to get the hash for source File text as sourceFile's version",
        "createdAt" : "2019-01-11T00:04:56Z",
        "updatedAt" : "2019-01-17T20:29:40Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "01d5cdae-a0a0-4885-854e-ff560d535cd9",
        "parentId" : "858044c0-1210-43ed-bfb6-8da0f42eefdc",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Seems expensive for what it does, but not worth changing right now I think.",
        "createdAt" : "2019-01-14T20:56:18Z",
        "updatedAt" : "2019-01-17T20:29:40Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "4e441636-e036-45fd-8e31-2e7fe3702b1a",
        "parentId" : "858044c0-1210-43ed-bfb6-8da0f42eefdc",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Yeah thats the default function that is independent of this PR.",
        "createdAt" : "2019-01-14T21:04:09Z",
        "updatedAt" : "2019-01-17T20:29:40Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "900d6f7c9042a686cebc2c50343bfa50ca66b04f",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +9,13 @@    /* @internal */\n    export function generateDjb2Hash(data: string): string {\n        const chars = data.split(\"\").map(str => str.charCodeAt(0));\n        return `${chars.reduce((prev, curr) => ((prev << 5) + prev) + curr, 5381)}`;\n    }"
  },
  {
    "id" : "2925205d-4316-4adc-879e-86d94684bab4",
    "prId" : 27563,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27563#pullrequestreview-162683407",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6788a841-d580-4bb7-b8b9-208b0508ef59",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`relativeFileName` is typed as `string`, so either this code is a noop or the type of `fsWatchDirectory` is wrong.",
        "createdAt" : "2018-10-09T00:37:24Z",
        "updatedAt" : "2018-10-09T15:42:56Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "585420e9fae2ee381ed64d7b92cd4b773f0d7ca3",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +797,801 @@                        (_eventName: string, relativeFileName) => {\n                            // When files are deleted from disk, the triggered \"rename\" event would have a relativefileName of \"undefined\"\n                            if (!isString(relativeFileName)) { return; }\n                            const fileName = getNormalizedAbsolutePath(relativeFileName, dirName);\n                            // Some applications save a working file via rename operations"
  },
  {
    "id" : "497f1af7-2be5-4a6b-a80b-fe96855a4590",
    "prId" : 22658,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22658#pullrequestreview-106676703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26bfea18-23ff-4ef2-8ce5-ed5669afe69a",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Shouldn't we also add an optional `sys` member for `base64encode`?",
        "createdAt" : "2018-03-23T23:46:44Z",
        "updatedAt" : "2018-03-26T18:30:14Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "e34a6bd89341f5bec62b79463626ef0481b2857f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +458,462 @@        clearScreen?(): void;\n        /*@internal*/ setBlocking?(): void;\n        base64decode?(input: string): string;\n        base64encode?(input: string): string;\n    }"
  },
  {
    "id" : "d504ebf2-1765-4d79-84ac-8ed0d441fbba",
    "prId" : 22496,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22496#pullrequestreview-103555303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1e052c0-44de-4e35-b548-c5b7bf95d488",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I have some concerns with this approach.  First, I think it might be cleaner (since it would be stateless) to pull up the `mtime` check from below.  Both `curr` and `prev` have timestamp 0, so it would succeed and suppress the callback.  \r\n\r\nSecond, I'm concerned that this only addresses the symptoms of the problem.  Why are we getting a fileChanged notification that has never existed and continues not to exist?  My limited debugging suggests that this used to be suppressed when `oldStatus === -1` and `newStatus === -1` (somewhere in sys or fs) but that we are now seeing `newStatus === -4058`.  If this is a Node limitation, then I think we need a big comment here explaining that we're working around a library limitation.",
        "createdAt" : "2018-03-13T18:13:54Z",
        "updatedAt" : "2018-03-13T18:13:55Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "b0993839-ce4c-4609-aae0-d7240f7f123a",
        "parentId" : "d1e052c0-44de-4e35-b548-c5b7bf95d488",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "My breakpoint was at line 1448 of `fs.js`, but I can't get it to load the text without debugging the issue again, which I'm not currently set up to do.",
        "createdAt" : "2018-03-13T18:17:58Z",
        "updatedAt" : "2018-03-13T18:17:58Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "d5f2e576-65c0-4198-89ee-031239f7fb37",
        "parentId" : "d1e052c0-44de-4e35-b548-c5b7bf95d488",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "https://github.com/nodejs/node/blob/52e869bee8f639fb2b256efa814446d0c325a4ac/lib/fs.js#L1435",
        "createdAt" : "2018-03-13T18:19:09Z",
        "updatedAt" : "2018-03-13T18:19:09Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "88c5e2295baa1e2c10c27c5da30295e3aeede377",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +748,752 @@                function fileChanged(curr: any, prev: any) {\n                    if (+curr.mtime === 0) {\n                        if (eventKind === FileWatcherEventKind.Deleted) {\n                            // Already deleted file, no need to callback again\n                            return;"
  },
  {
    "id" : "728509c3-296a-42d5-8152-e94bbb0981d1",
    "prId" : 21243,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21243#pullrequestreview-100962730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6df0c7e2-4459-4545-a246-5f861f0dc210",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "const enum ?",
        "createdAt" : "2018-03-03T01:07:20Z",
        "updatedAt" : "2018-03-08T20:29:12Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "2dcc4586-9025-4f3f-a87f-0c937b5885cf",
        "parentId" : "6df0c7e2-4459-4545-a246-5f861f0dc210",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Need it not to be const enum so that we can set custom levels. https://github.com/Microsoft/TypeScript/pull/21243/files#diff-cc0eed295cd2bad794329f871b2669fdR90",
        "createdAt" : "2018-03-03T03:17:22Z",
        "updatedAt" : "2018-03-08T20:29:12Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8378f692c7bcef0a111ec4ddc45d8526f394563e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +32,36 @@    }\n\n    /* @internal */\n    export enum PollingInterval {\n        High = 2000,"
  },
  {
    "id" : "631916cf-0b4e-41e2-8168-ae034cf41f2f",
    "prId" : 21243,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21243#pullrequestreview-102440711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "492a3787-e7c3-4bc2-b041-ccdb670c712e",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why is the lambda needed? why not just `return fsWatchFile;`",
        "createdAt" : "2018-03-08T18:09:44Z",
        "updatedAt" : "2018-03-08T20:29:12Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "eb1686d8-0fca-446a-ab08-7544e605df75",
        "parentId" : "492a3787-e7c3-4bc2-b041-ccdb670c712e",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "We weren't passing the polling interval before to the fsWatchFile and hence the lambda.. (to ignore pollingInterval being passed)",
        "createdAt" : "2018-03-08T20:08:34Z",
        "updatedAt" : "2018-03-08T20:29:12Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8378f692c7bcef0a111ec4ddc45d8526f394563e",
    "line" : 609,
    "diffHunk" : "@@ -1,1 +658,662 @@                    createNonPollingWatchFile() :\n                    // Default to do not use polling interval as it is before this experiment branch\n                    (fileName, callback) => fsWatchFile(fileName, callback);\n            }\n"
  },
  {
    "id" : "3e62eaa6-269a-48af-941a-61c2e3662f0c",
    "prId" : 17169,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17169#pullrequestreview-51482671",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d214fd88-0cd9-494c-9595-c0c3cb7c0660",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I just realized that if users ever rename TypeScript to something like `12345` at a top level directoy like `/`, we'll always say that the filesystem is case insensitive. 😄 ",
        "createdAt" : "2017-07-20T16:28:14Z",
        "updatedAt" : "2017-07-20T16:28:21Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "4d6f1e49-15db-4ea1-b69e-4b317663593c",
        "parentId" : "d214fd88-0cd9-494c-9595-c0c3cb7c0660",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Why do it for every letter, when it can be done for the whole string?\r\n\r\n```typescript\r\nvar turnFilename = __filename.toUpperCase();\r\nif (turnFilename===__filename) turnFilename = __filename.toLowerCase();\r\nreturn !fileExists(turnFilename);\r\n```",
        "createdAt" : "2017-07-21T06:28:31Z",
        "updatedAt" : "2017-07-21T06:28:31Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "9dc8e811-acbc-495d-96e3-c8646d0c6b61",
        "parentId" : "d214fd88-0cd9-494c-9595-c0c3cb7c0660",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "'ll do a PR on that, see if you like it.",
        "createdAt" : "2017-07-21T06:30:03Z",
        "updatedAt" : "2017-07-21T06:30:03Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "1ea8d495-c356-4bdb-97b1-5220ad71dac9",
        "parentId" : "d214fd88-0cd9-494c-9595-c0c3cb7c0660",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Sure.",
        "createdAt" : "2017-07-21T14:03:36Z",
        "updatedAt" : "2017-07-21T14:03:36Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "413d0117c1e0b58b4795ec94941eb927f0f858b6",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +206,210 @@                    const up = ch.toUpperCase();\n                    return ch === up ? ch.toLowerCase() : up;\n                });\n            }\n"
  },
  {
    "id" : "c16385a3-e3fc-4b47-81bc-3800289066a6",
    "prId" : 16987,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16987#pullrequestreview-48533578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "191bb817-6743-4fb9-bca2-565de58e0333",
        "parentId" : null,
        "authorId" : "a1ec4ba6-1d73-41c2-811a-8b117347a64a",
        "body" : "`resolvePath: _path.resolve,`",
        "createdAt" : "2017-07-07T07:08:25Z",
        "updatedAt" : "2017-07-07T07:08:25Z",
        "lastEditedBy" : "a1ec4ba6-1d73-41c2-811a-8b117347a64a",
        "tags" : [
        ]
      },
      {
        "id" : "f1570eb4-ec4b-443b-8141-5ef51842100d",
        "parentId" : "191bb817-6743-4fb9-bca2-565de58e0333",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : ":-1: - that's a possible behavioral change in multiple ways (different `this` reference, different behavior when more than one argument is supplied). Very dangerous if someone is currently calling e.g. `[a, b].map(sys.resolvePath)`, it will throw an exception where one wasn't before.",
        "createdAt" : "2017-07-07T07:11:43Z",
        "updatedAt" : "2017-07-07T07:13:37Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "962b70e3146ba292bd7f2f2e7afeb20a570b2505",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +395,399 @@                    );\n                },\n                resolvePath: path => _path.resolve(path),\n                fileExists,\n                directoryExists,"
  },
  {
    "id" : "de6bac3a-cc90-490b-92e1-8b2c6e4382ab",
    "prId" : 16684,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16684#pullrequestreview-46712740",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39c1aa97-a322-4222-8d91-0e7a9a0cf2d1",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "It was this way before, but it would be nice to remove `any` and include a type declaration saying what you expect this to be.",
        "createdAt" : "2017-06-23T17:49:06Z",
        "updatedAt" : "2017-06-29T18:30:27Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "71e027e7-f285-41c0-bc55-d6943a2390df",
        "parentId" : "39c1aa97-a322-4222-8d91-0e7a9a0cf2d1",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I would be interested to learn how to do this.  Do I just specify that it has to have an `mtime` property or is there something more?",
        "createdAt" : "2017-06-27T17:46:37Z",
        "updatedAt" : "2017-06-29T18:30:27Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "3a72d636-15ea-4f0d-8c50-ca09169f2cf0",
        "parentId" : "39c1aa97-a322-4222-8d91-0e7a9a0cf2d1",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "❓ ",
        "createdAt" : "2017-06-27T21:52:08Z",
        "updatedAt" : "2017-06-29T18:30:27Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "13c65e97-4b2e-4070-ab1c-c66724be278d",
        "parentId" : "39c1aa97-a322-4222-8d91-0e7a9a0cf2d1",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "After getting offline help, I don't think this is worth fixing as part of this change.",
        "createdAt" : "2017-06-28T00:01:57Z",
        "updatedAt" : "2017-06-29T18:30:27Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "569ecabb0a6c83f8c0eb9249dd79cfa3e4e91231",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +346,350 @@                    }\n\n                    function fileChanged(curr: any, prev: any) {\n                        const isCurrZero = +curr.mtime === 0;\n                        const isPrevZero = +prev.mtime === 0;"
  },
  {
    "id" : "bb686dc4-6c33-460f-8986-51e82ae99441",
    "prId" : 16684,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16684#pullrequestreview-47211371",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ef061ed-46e1-4f3f-9ca4-9307567c28d6",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Nit: No need for `created` and `deleted` variables, just use `eventKind === FileWatcherEventKind.Changed` instead of `!created && !deleted`",
        "createdAt" : "2017-06-28T20:06:26Z",
        "updatedAt" : "2017-06-29T18:30:27Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "b78efbdd-d383-4076-bd2e-1c396727ea69",
        "parentId" : "3ef061ed-46e1-4f3f-9ca4-9307567c28d6",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I think the existence of the constants makes the code more readable, but I agree that the `if` is better expressed in terms of `eventKind`.",
        "createdAt" : "2017-06-29T18:23:57Z",
        "updatedAt" : "2017-06-29T18:30:27Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "569ecabb0a6c83f8c0eb9249dd79cfa3e4e91231",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +352,356 @@                        const deleted = isCurrZero && !isPrevZero;\n\n                        const eventKind = created\n                            ? FileWatcherEventKind.Created\n                            : deleted"
  },
  {
    "id" : "43b96e7d-1ff0-48f5-9e45-0b23fa45ba84",
    "prId" : 14098,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14098#pullrequestreview-22179000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78573c77-ec30-49e0-90ce-5d3fd013f731",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Cool. `parseInt(process.versions.node)` would also have done the trick ;-)",
        "createdAt" : "2017-02-16T06:03:56Z",
        "updatedAt" : "2017-02-16T18:16:49Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "d6f86aa6-dc6c-4e3d-ab88-1236e6e3e24e",
        "parentId" : "78573c77-ec30-49e0-90ce-5d3fd013f731",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "good to know :) can change it to your proposal if you insist",
        "createdAt" : "2017-02-16T06:07:49Z",
        "updatedAt" : "2017-02-16T18:16:49Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa9d5b052d28573dcd98bdebb6dcc2a65969ab40",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +331,335 @@            const watchedFileSet = createWatchedFileSet();\n\n            const nodeVersion = getNodeMajorVersion();\n            const isNode4OrLater = nodeVersion >= 4;\n"
  },
  {
    "id" : "cb99aa66-a8a4-4f95-ad85-22d92da13eac",
    "prId" : 8670,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d09b5a2-f506-49af-bec1-acca9f8c3feb",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "`SubFolders` is the canonical spelling\n",
        "createdAt" : "2016-05-25T14:34:39Z",
        "updatedAt" : "2016-05-25T14:34:39Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b133489a1c118296e5b3fe356bef4ef926c3356",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +166,170 @@            function getDirectories(path: string): string[] {\n                const folder = fso.GetFolder(path);\n                return getNames(folder.subfolders);\n            }\n"
  },
  {
    "id" : "e5717078-aeaa-4381-9f00-be8f8aeed8bc",
    "prId" : 7676,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98a594c5-aaf8-4972-9207-97ff1322278a",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "how about `if (current === \".\" || current === \"..\") continue;` instead of the filter.\n",
        "createdAt" : "2016-03-24T21:33:28Z",
        "updatedAt" : "2016-03-24T22:56:53Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "8f6db0ba-8137-4e90-9705-a53c60583857",
        "parentId" : "98a594c5-aaf8-4972-9207-97ff1322278a",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "Would be better. Updated.\n",
        "createdAt" : "2016-03-24T22:57:30Z",
        "updatedAt" : "2016-03-24T22:57:30Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddbfb7b961dfb4489ca71866a5e1d7878824ae67",
    "line" : null,
    "diffHunk" : "@@ -1,1 +504,508 @@                            continue;\n                        }\n                        const name = combinePaths(path, current);\n                        if (!contains(exclude, getCanonicalPath(name))) {\n                            const stat = _fs.statSync(name);"
  },
  {
    "id" : "9074e248-44f0-47fe-9451-54160b796fb0",
    "prId" : 7039,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0668f564-b315-49de-8994-49e990478a32",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Add a newline\n",
        "createdAt" : "2016-02-12T01:19:00Z",
        "updatedAt" : "2016-02-12T01:29:20Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b18cbc630045711dfaad594e288c722621def035",
    "line" : null,
    "diffHunk" : "@@ -1,1 +468,472 @@            }\n\n            function fileSystemEntryExists(path: string, entryKind: FileSystemEntryKind): boolean {\n                try {\n                    const stat = _fs.statSync(path);"
  },
  {
    "id" : "1a7c739f-a1f1-4e1b-ac87-9e85eac6734b",
    "prId" : 7039,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05c5111d-6214-42b3-a2f0-8ccbbbe9387a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Should this `switch` should be moved out of the `try`?\n",
        "createdAt" : "2016-02-12T01:19:34Z",
        "updatedAt" : "2016-02-12T01:29:20Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "828d3fbd-b808-4f19-9937-39a3997e7761",
        "parentId" : "05c5111d-6214-42b3-a2f0-8ccbbbe9387a",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "moving it out of try wont make any difference since `try` prevents optimization for the entire function. I've considered extracting this into a separate function but given that I don't see any perf differences when compiling Monaco I don't think we need to do this.\n",
        "createdAt" : "2016-02-12T01:27:51Z",
        "updatedAt" : "2016-02-12T01:29:20Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "b18cbc630045711dfaad594e288c722621def035",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +474,478 @@                        case FileSystemEntryKind.File: return stat.isFile();\n                        case FileSystemEntryKind.Directory: return stat.isDirectory();\n                    }\n                }\n                catch (e) {"
  },
  {
    "id" : "76bd8a0f-87ee-4d42-aa9a-c8dd105eef08",
    "prId" : 6937,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aacda7ef-ecde-4ccc-9a95-b14782ea0a70",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Do we always want to use MD5 @mhegazy?\n\nAlso, could you get away with a single call to `createHash`?\n\n``` ts\nif (!hash) {\n    hash = _crypto.createHash(\"md5\");\n}\n\nhash.update(data);\nreturn hash.digest(\"hex\");\n```\n",
        "createdAt" : "2016-02-09T21:32:46Z",
        "updatedAt" : "2016-02-11T08:38:35Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "8b969607-9b2e-4b9a-802a-ff33f2a8d287",
        "parentId" : "aacda7ef-ecde-4ccc-9a95-b14782ea0a70",
        "authorId" : "5f23d1d3-1b0e-4e58-a00d-5fbafb401943",
        "body" : "@DanielRosenwasser Seems that we need to `createHash` every time.\n",
        "createdAt" : "2016-02-10T00:49:32Z",
        "updatedAt" : "2016-02-11T08:38:35Z",
        "lastEditedBy" : "5f23d1d3-1b0e-4e58-a00d-5fbafb401943",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4813052922da694a34474d884f0f633482fd588",
    "line" : null,
    "diffHunk" : "@@ -1,1 +569,573 @@                },\n                createHash(data) {\n                    const hash = _crypto.createHash(\"md5\");\n                    hash.update(data);\n                    return hash.digest(\"hex\");"
  },
  {
    "id" : "d7dde0bc-cecf-4ad4-9271-fcf9be69fec9",
    "prId" : 6026,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "154a863b-6f7c-4acd-be0f-c68d8c6f1262",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "\"watchDirectory\" (line 474 below) also talks about Node 4 or later and uses the 'recursive' option, but doesn't actually check for Node 4 or later. \n\nI can see in \"tsc.ts\" and \"editorServices.ts\" it is called with \"recursive: true\". Are there potentially issues here if not on Node v4?\n",
        "createdAt" : "2015-12-15T18:00:56Z",
        "updatedAt" : "2016-01-14T08:35:18Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "1f2a1423-67ab-4f21-b904-d89c9ba29000",
        "parentId" : "154a863b-6f7c-4acd-be0f-c68d8c6f1262",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "I tested before that if not supported then the `recursive: true` would simply be ignored. The recursive directory watcher is used with `tsconfig.json` without files array, so that adding/removing files in the background would be detected. The plan for this feature at the time was to support Node v4 or later only, so I didn't differentiate with the cases with older Node version. \n",
        "createdAt" : "2015-12-16T06:39:26Z",
        "updatedAt" : "2016-01-14T08:35:18Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      },
      {
        "id" : "5488e539-b929-432e-ac91-4ca7537ce0ce",
        "parentId" : "154a863b-6f7c-4acd-be0f-c68d8c6f1262",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "I'm not sure i follow about the `plan to use the feature`. `watchDirectory` is a public API (exported on interface `System`). If when called, it's not going to be able to do what the API claims it does (via the `recursive` parameter`), then it should error.\n\nEven if not a public API, it's a future bug waiting to happen if it ignores known failure scenarios based on assumptions about how it will be used. Please protect against it.\n",
        "createdAt" : "2015-12-16T15:55:49Z",
        "updatedAt" : "2016-01-14T08:35:18Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbfe862dbd87e491728fdd83c82c26572c63af7b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +509,513 @@                    const watchedFile =  watchSet.addFile(filePath, callback);\n                    return {\n                        close: () => watchSet.removeFile(watchedFile)\n                    };\n                },"
  },
  {
    "id" : "e32bb83d-d65d-421d-ae0d-30f5a5b59edd",
    "prId" : 6026,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a20f49d-0bd1-4574-98c4-d193a1dca5f6",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "so why do we need this Polling one, why can not we just fall back to fs.watchFile?\n",
        "createdAt" : "2016-01-08T01:05:46Z",
        "updatedAt" : "2016-01-14T08:35:18Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "2caf9ff6-38cb-4d64-8ca4-2438ef8cb4dd",
        "parentId" : "1a20f49d-0bd1-4574-98c4-d193a1dca5f6",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "Our polling mechanism is different from `fs.watchFile`. `fs.watchFile` polls each file independently, so if you got many files to watch, it might increase the work load a lot. In our approach, we poll a fixed number of files (`chunkSize`) each number, so if the `chunkSize` is 30 and you have 90 files to watch, the work load is still the same for each polling, only that changes will be detected after 3 interval time instead of just 1. This way we keep the polling work load consistent\n",
        "createdAt" : "2016-01-08T06:27:45Z",
        "updatedAt" : "2016-01-14T08:35:18Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbfe862dbd87e491728fdd83c82c26572c63af7b",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +230,234 @@            // average async stat takes about 30 microseconds\n            // set chunk size to do 30 files in < 1 millisecond\n            function createPollingWatchedFileSet(interval = 2500, chunkSize = 30) {\n                let watchedFiles: WatchedFile[] = [];\n                let nextFileToCheck = 0;"
  },
  {
    "id" : "aaa0c79f-4990-472e-919f-e08016a2e2bf",
    "prId" : 5880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ca0b1fc-913e-42d7-a650-2f83239a19cd",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Add line\n",
        "createdAt" : "2015-12-02T01:35:17Z",
        "updatedAt" : "2015-12-02T19:50:09Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfb32c5daeec501ae0817dadceeda1cb0d7a35c5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +472,476 @@        }\n\n        function getChakraSystem(): System {\n\n            return {"
  },
  {
    "id" : "c1cddc61-cc25-4cc9-8b3a-bbc5746001a7",
    "prId" : 5127,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c620a721-a72d-4798-bdcb-83b0692150d0",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "`persistent` (per [fs.watch docs](https://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener))\n",
        "createdAt" : "2015-10-15T02:22:58Z",
        "updatedAt" : "2015-10-15T02:42:20Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcfc25eeb040390492716626757274c945ebd47f",
    "line" : 162,
    "diffHunk" : "@@ -1,1 +408,412 @@                    return _fs.watch(\n                        path,\n                        { persisten: true, recursive: !!recursive },\n                        (eventName: string, relativeFileName: string) => {\n                            // In watchDirectory we only care about adding and removing files (when event name is"
  },
  {
    "id" : "c22b5459-47c8-4237-856f-55eb524f5d1e",
    "prId" : 3682,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d8b435c-c953-40e2-b170-7be4f848411a",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "maybe break if toWrite is 0?\n",
        "createdAt" : "2015-06-30T22:51:58Z",
        "updatedAt" : "2015-06-30T22:51:58Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddb60fc8ce8c3d37c7acaf588cfb8948b30c2a3a",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +279,283 @@                    while ((written = _fs.writeSync(1, buffer, offset, toWrite)) < toWrite) {\n                        offset += written;\n                        toWrite -= written;\n                    }\n                },  "
  },
  {
    "id" : "a020d4c2-12b1-4525-bd24-c60f40974807",
    "prId" : 1692,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1333799d-f051-4996-b1f0-353f76ee7c76",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Since this enumerator is just internal to sys, why not make the items typed?\n",
        "createdAt" : "2015-01-20T20:20:06Z",
        "updatedAt" : "2015-01-21T00:29:46Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "45e700e515e6a58545bbf074d417560c2478fdb2",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +31,35 @@    declare var __filename: string;\n\n    declare class Enumerator {\n        public atEnd(): boolean;\n        public moveNext(): boolean;"
  },
  {
    "id" : "32a854ad-bda1-4fee-a0fb-b0d59a34df6e",
    "prId" : 1692,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ef90af3-bb9b-42eb-8099-365f5f6a57f7",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I thought we don't use functions within functions anymore because of extra allocations\n",
        "createdAt" : "2015-01-20T20:21:24Z",
        "updatedAt" : "2015-01-21T00:29:46Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "3b66eaa3-95ee-411b-9425-a9236d3e842c",
        "parentId" : "2ef90af3-bb9b-42eb-8099-365f5f6a57f7",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Everything is a function within a function in our code base. What we need to look out for is nested functions that create closures and/or nested functions in outer functions that are invoked often. In this case neither applies.\n",
        "createdAt" : "2015-01-20T20:53:11Z",
        "updatedAt" : "2015-01-21T00:29:46Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "45e700e515e6a58545bbf074d417560c2478fdb2",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +122,126 @@                visitDirectory(path);\n                return result;\n                function visitDirectory(path: string) {\n                    var folder = fso.GetFolder(path || \".\");\n                    var files = getNames(folder.files);"
  },
  {
    "id" : "a9b81c1c-dadf-4026-9cc6-528bd4b31c0e",
    "prId" : 324,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4196347a-5482-459f-97f2-85e41374bb0f",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "why do we need this?\n",
        "createdAt" : "2014-08-01T09:26:29Z",
        "updatedAt" : "2014-08-02T19:03:26Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "e7ffe1a2-2fae-4424-b920-1598e9f0cc12",
        "parentId" : "4196347a-5482-459f-97f2-85e41374bb0f",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "So even with the buffer period brought up to 500ms, my personal machine still has issues with this when saving in something like vim because it appears that the `mtime` and `ctime` are modified independently.\n",
        "createdAt" : "2014-08-01T20:56:47Z",
        "updatedAt" : "2014-08-02T19:03:26Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a8eff848bf2819726f11c78fb53891075ff1a13",
    "line" : null,
    "diffHunk" : "@@ -1,1 +201,205 @@\n                function fileChanged(curr: any, prev: any) {\n                    if (+curr.mtime <= +prev.mtime) {\n                        return;\n                    }"
  },
  {
    "id" : "b3fca43c-4d28-4fb9-a101-594db0ed9fb6",
    "prId" : 29,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f393df4-79ba-4de4-a422-c7a1be1e92ad",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "encoding should not be optional.  We don't to accidently forget it in some codepath.\n",
        "createdAt" : "2014-07-16T20:31:23Z",
        "updatedAt" : "2014-07-16T20:31:23Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3f5993770078c42830a068092484b621e8ea9ef",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +7,11 @@    write(s: string): void;\n    writeErr(s: string): void;\n    readFile(fileName: string, encoding?: string): string;\n    writeFile(fileName: string, data: string): void;\n    resolvePath(path: string): string;"
  },
  {
    "id" : "55c1dac8-bf25-428e-a543-c31433f199c0",
    "prId" : 29,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cafdde23-6536-4aba-9a27-611e4b5b04fa",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "extract out into helper, or break into multiple statements.  this is very difficult to read as is.\n",
        "createdAt" : "2014-07-16T20:32:35Z",
        "updatedAt" : "2014-07-16T20:32:35Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3f5993770078c42830a068092484b621e8ea9ef",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +59,63 @@                    fileStream.Position = 0;\n                    // [0xFF,0xFE] and [0xFE,0xFF] mean utf-16 (little or big endian), otherwise default to utf-8\n                    fileStream.Charset = bom.length >= 2 && (bom.charCodeAt(0) === 0xFF && bom.charCodeAt(1) === 0xFE || bom.charCodeAt(0) === 0xFE && bom.charCodeAt(1) === 0xFF) ? \"unicode\" : \"utf-8\";\n                }\n                // ReadText method always strips byte order mark from resulting string"
  }
]