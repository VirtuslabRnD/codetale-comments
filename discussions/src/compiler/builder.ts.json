[
  {
    "id" : "7bbd0051-88e4-4d5f-b09d-17dd7c78682e",
    "prId" : 44402,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44402#pullrequestreview-675827972",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6683005-7920-4967-b280-7dcbe9672502",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Separate PR: @sheetalkamat can we lift this out a couple levels so we don't revisit the same paths repeatedly for different \"affected\" files?",
        "createdAt" : "2021-06-03T02:25:43Z",
        "updatedAt" : "2021-06-03T02:25:43Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "5c8c4855-a706-4c96-971d-de8de94b42fb",
        "parentId" : "a6683005-7920-4967-b280-7dcbe9672502",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Or maybe it belongs on the state?",
        "createdAt" : "2021-06-03T02:27:40Z",
        "updatedAt" : "2021-06-03T02:27:40Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "f2f13d73-9a65-4804-a109-c1ddc6d0ae67",
        "parentId" : "a6683005-7920-4967-b280-7dcbe9672502",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "To share it across more than one affected file, it would have to be on the state.  I'm going to try updating it in parallel with `seenAffectedFiles`.",
        "createdAt" : "2021-06-04T00:08:53Z",
        "updatedAt" : "2021-06-04T00:08:53Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "23817a4a-a57c-45b3-b268-ccfb79127ba5",
        "parentId" : "a6683005-7920-4967-b280-7dcbe9672502",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Assuming I've done it correctly, it saves about 10% of total time.  Nothing to complain about, but much less than this change.",
        "createdAt" : "2021-06-04T00:22:07Z",
        "updatedAt" : "2021-06-04T00:22:07Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "70e0b14822265f924706c040f8651d0b3079d05f",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +548,552 @@        Debug.assert(!!state.currentAffectedFilesExportedModulesMap);\n\n        const seenFileAndExportsOfFile = new Set<string>();\n        // Go through exported modules from cache first\n        // If exported modules has path, all files referencing file exported from are affected"
  },
  {
    "id" : "032d9a8b-91ea-4289-a6c4-2fe5e5cda7f9",
    "prId" : 44402,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44402#pullrequestreview-674822279",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24d47af2-7c33-48fd-8198-ce9e8322690d",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I couldn't find a place where `exportedModulesMap` was consumed \"forward\", but it's maintained forward and I couldn't see a way to reverse the meaning without making maintenance (specifically, deleting paths) really expensive.",
        "createdAt" : "2021-06-03T02:26:47Z",
        "updatedAt" : "2021-06-03T02:26:47Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "70e0b14822265f924706c040f8651d0b3079d05f",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +556,560 @@\n        // If exported from path is not from cache and exported modules has path, all files referencing file exported from are affected\n        state.exportedModulesMap.getKeys(affectedFile.resolvedPath)?.forEach(exportedFromPath =>\n            // If the cache had an updated value, skip\n            !state.currentAffectedFilesExportedModulesMap!.hasKey(exportedFromPath) &&"
  },
  {
    "id" : "8b71b867-b55e-47a2-bade-fcd1e77dae16",
    "prId" : 44402,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44402#pullrequestreview-674822711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a00b753c-01f9-42af-b693-f7f72200f741",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Builds on (but doesn't require) https://github.com/microsoft/TypeScript/pull/44322",
        "createdAt" : "2021-06-03T02:27:51Z",
        "updatedAt" : "2021-06-03T02:28:12Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "70e0b14822265f924706c040f8651d0b3079d05f",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +567,571 @@     * Iterate on files referencing referencedPath\n     */\n    function forEachFilesReferencingPath(state: BuilderProgramState, referencedPath: Path, seenFileAndExportsOfFile: Set<string>, fn: (state: BuilderProgramState, filePath: Path) => void): void {\n        state.referencedMap!.getKeys(referencedPath)?.forEach(filePath =>\n            forEachFileAndExportsOfFile(state, filePath, seenFileAndExportsOfFile, fn)"
  },
  {
    "id" : "de1c26e6-0a80-4f05-9500-8598a6ccd795",
    "prId" : 44322,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44322#pullrequestreview-671540563",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f365dd9a-a2fb-4b3a-b56a-a06ec11ca450",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I'm pretty sure never entering this branch was a bug.",
        "createdAt" : "2021-05-28T18:11:11Z",
        "updatedAt" : "2021-05-28T18:11:11Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7399b8229ddecdaaf13790cf5ecba91b6d6c07f",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +537,541 @@                    fn(state, currentPath);\n                    if (isChangedSignature(state, currentPath)) {\n                        const currentSourceFile = Debug.checkDefined(state.program).getSourceFileByPath(currentPath)!;\n                        queue.push(...BuilderState.getReferencedByPaths(state, currentSourceFile.resolvedPath));\n                    }"
  },
  {
    "id" : "5f94454c-29aa-4c7a-a76e-ad5e3fc86827",
    "prId" : 44322,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44322#pullrequestreview-671541088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dadc1ac2-abbb-445e-8370-d1dc0d184fef",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "If no one objects, I'd kind of like to rename `queue` to \"stack\", since it's manipulated with `push` and `pop`.",
        "createdAt" : "2021-05-28T18:12:01Z",
        "updatedAt" : "2021-05-28T18:12:02Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7399b8229ddecdaaf13790cf5ecba91b6d6c07f",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +538,542 @@                    if (isChangedSignature(state, currentPath)) {\n                        const currentSourceFile = Debug.checkDefined(state.program).getSourceFileByPath(currentPath)!;\n                        queue.push(...BuilderState.getReferencedByPaths(state, currentSourceFile.resolvedPath));\n                    }\n                }"
  },
  {
    "id" : "493047f8-0593-47a5-b5a4-811ced9e5083",
    "prId" : 44322,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44322#pullrequestreview-673509319",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "676bf965-c83f-421e-84e2-ff80c35b6b69",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "If this queues files , shouldnt we stop here and not do next step.. its duplicated work?",
        "createdAt" : "2021-06-01T18:06:56Z",
        "updatedAt" : "2021-06-01T18:06:56Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "7eb470d9-5853-48cd-b6e2-0be7acf8121b",
        "parentId" : "676bf965-c83f-421e-84e2-ff80c35b6b69",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I'm not sure what it _should_ do, but I believe this is just a clearer way to write what it already _does_ do.  I don't understand the code very well and may have missed a case where it does return true and exit early.",
        "createdAt" : "2021-06-01T19:30:59Z",
        "updatedAt" : "2021-06-01T19:30:59Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "cbbf2c00-28f3-4a02-88a0-731f1884ab7f",
        "parentId" : "676bf965-c83f-421e-84e2-ff80c35b6b69",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Specifically, I'm less confident in the second commit than the first.  AFAICT, it could only return true if a recursive call to itself returned true and all of the recursive base cases returned false.",
        "createdAt" : "2021-06-01T19:34:17Z",
        "updatedAt" : "2021-06-01T19:34:17Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7399b8229ddecdaaf13790cf5ecba91b6d6c07f",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +548,552 @@        // Go through exported modules from cache first\n        // If exported modules has path, all files referencing file exported from are affected\n        forEachEntry(state.currentAffectedFilesExportedModulesMap, (exportedModules, exportedFromPath) =>\n            exportedModules &&\n            exportedModules.has(affectedFile.resolvedPath) &&"
  },
  {
    "id" : "6635c1c2-8165-409d-89e4-47b47073cfb0",
    "prId" : 43084,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43084#pullrequestreview-605003597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32379600-c469-413e-8cc8-a817309e589f",
        "parentId" : null,
        "authorId" : "8e6058ad-4c59-47f4-a850-33355520dfb5",
        "body" : "Once merged with https://github.com/microsoft/TypeScript/pull/42960 this has to be added here:\r\n\r\n`/*avoidInitializingSignatures*/ true`",
        "createdAt" : "2021-03-05T10:30:09Z",
        "updatedAt" : "2021-03-10T00:31:06Z",
        "lastEditedBy" : "8e6058ad-4c59-47f4-a850-33355520dfb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "317fa07b7c79f81fdcf7fcbb93dbea8b9b205978",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +450,454 @@                computeHash,\n                state.currentAffectedFilesExportedModulesMap\n            );\n            return;\n        }"
  },
  {
    "id" : "de9a2d40-70b5-4ca0-a3e0-b352539e542d",
    "prId" : 41001,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41001#pullrequestreview-505238594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d06e717-2e96-4663-b973-8a90c6d23d14",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "did we ever figure out what the performance impact of `[]` vs `emptyArray` is? Last I heard is that `[]` is better?",
        "createdAt" : "2020-10-08T22:47:41Z",
        "updatedAt" : "2020-10-09T00:34:24Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "536eddba-75d4-4f5f-8482-c9c795fb9ca7",
        "parentId" : "7d06e717-2e96-4663-b973-8a90c6d23d14",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "...eh? In this case, it's just because we mutate `relatedInformation` in some places, so using a global singleton is bad.",
        "createdAt" : "2020-10-08T23:13:18Z",
        "updatedAt" : "2020-10-09T00:34:24Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f324fde873dc5f59ab4f6defe5758395a49a71dd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +275,279 @@                relatedInformation.length ?\n                    relatedInformation.map(r => convertToDiagnosticRelatedInformation(r, newProgram, toPath)) :\n                    [] :\n                undefined;\n            return result;"
  },
  {
    "id" : "3f4f5cce-1fb9-48b1-83ad-b7be4d3d5eb9",
    "prId" : 35711,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35711#pullrequestreview-338254932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29a25623-8dd0-4023-915c-ea32c50bb50b",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "To someone unfamiliar with the builder, it's not clear how adding this simple check does what it says in the description.  Where are the direct dependencies handled if not in the call below?  At what point is the list expanded to include indirect dependencies?",
        "createdAt" : "2020-01-03T02:07:04Z",
        "updatedAt" : "2020-01-03T02:09:37Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "642da222-c0c3-440f-8517-795631336350",
        "parentId" : "29a25623-8dd0-4023-915c-ea32c50bb50b",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "getAffectedFiles handle the direct dependency and the below function handles indirect ones.",
        "createdAt" : "2020-01-03T20:13:23Z",
        "updatedAt" : "2020-01-03T20:13:23Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cab8ae8d53d121308084b33bfa5f0d65dd08c12",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +434,438 @@        }\n\n        if (!state.compilerOptions.assumeChangesOnlyAffectDirectDependencies) {\n            forEachReferencingModulesOfExportOfAffectedFile(state, affectedFile, (state, path) => handleDtsMayChangeOf(state, path, cancellationToken, computeHash));\n        }"
  },
  {
    "id" : "6cc39654-ae81-4da9-9dd3-7b61b629a90c",
    "prId" : 34832,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/34832#pullrequestreview-331595558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d52d4295-ad37-4b14-9575-ece0a0c60d4e",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This is where we handle the noEmit options before writing the files.",
        "createdAt" : "2019-12-12T23:45:29Z",
        "updatedAt" : "2019-12-12T23:45:29Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aff06d3ab2dc1b097ba770b721c1ecc22383652",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +988,992 @@            if (kind === BuilderProgramKind.EmitAndSemanticDiagnosticsBuilderProgram) {\n                assertSourceFileOkWithoutNextAffectedCall(state, targetSourceFile);\n                const result = handleNoEmitOptions(builderProgram, targetSourceFile, cancellationToken);\n                if (result) return result;\n                if (!targetSourceFile) {"
  },
  {
    "id" : "8b5fe51d-6979-4dcf-84dd-9dc08f9f081e",
    "prId" : 29383,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29383#pullrequestreview-191934642",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "757d74a7-16e4-473c-8c93-452e50bedf0d",
        "parentId" : null,
        "authorId" : "ba094d0c-2117-4f1e-a9bd-727ae6c4484e",
        "body" : "/src/compiler/builder.ts",
        "createdAt" : "2019-01-12T10:57:24Z",
        "updatedAt" : "2019-01-12T10:58:39Z",
        "lastEditedBy" : "ba094d0c-2117-4f1e-a9bd-727ae6c4484e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cd967b2c0e93bcebf7379d68e70fb6374d41822",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +76,80 @@        const canCopySemanticDiagnostics = useOldState && oldState!.semanticDiagnosticsPerFile && !!state.semanticDiagnosticsPerFile &&\n            !compilerOptionsAffectSemanticDiagnostics(compilerOptions, oldCompilerOptions!);\n        if (useOldState) {\n            // Verify the sanity of old state\n            if (!oldState!.currentChangedFilePath) {"
  },
  {
    "id" : "bded44d4-e3b3-4ecd-b66a-39e3bfc4854c",
    "prId" : 29383,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29383#pullrequestreview-191934642",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7219c31-c082-4503-9e60-797d2e83cf3c",
        "parentId" : null,
        "authorId" : "ba094d0c-2117-4f1e-a9bd-727ae6c4484e",
        "body" : "/src/compiler/builder.ts",
        "createdAt" : "2019-01-12T10:57:42Z",
        "updatedAt" : "2019-01-12T10:58:39Z",
        "lastEditedBy" : "ba094d0c-2117-4f1e-a9bd-727ae6c4484e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cd967b2c0e93bcebf7379d68e70fb6374d41822",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +76,80 @@        const canCopySemanticDiagnostics = useOldState && oldState!.semanticDiagnosticsPerFile && !!state.semanticDiagnosticsPerFile &&\n            !compilerOptionsAffectSemanticDiagnostics(compilerOptions, oldCompilerOptions!);\n        if (useOldState) {\n            // Verify the sanity of old state\n            if (!oldState!.currentChangedFilePath) {"
  },
  {
    "id" : "fe6ffd6e-b4d8-4303-8708-0b3d0ef65d1c",
    "prId" : 29161,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29161#pullrequestreview-192313176",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0801bacd-1af9-4f2d-bd7e-d48188ccb1c4",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "This seems weird -- if BuilderState can clone itself, why do we have to copy a bunch of properties here too?",
        "createdAt" : "2019-01-14T19:01:30Z",
        "updatedAt" : "2019-01-17T20:29:40Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "1b45f739-55ef-4860-80f9-529d2d0eecd5",
        "parentId" : "0801bacd-1af9-4f2d-bd7e-d48188ccb1c4",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Because you cloned BuilderState and this is BuilderProgramState (interface BuilderProgramState extends BuilderState)",
        "createdAt" : "2019-01-14T19:06:18Z",
        "updatedAt" : "2019-01-17T20:29:40Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "02647fcb-c73e-4f34-a276-b2b6e48f15cb",
        "parentId" : "0801bacd-1af9-4f2d-bd7e-d48188ccb1c4",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I mean these are explicit properties in `BuilderProgramState`",
        "createdAt" : "2019-01-14T19:06:54Z",
        "updatedAt" : "2019-01-17T20:29:40Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "900d6f7c9042a686cebc2c50343bfa50ca66b04f",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +170,174 @@     */\n    function cloneBuilderProgramState(state: Readonly<BuilderProgramState>): BuilderProgramState {\n        const newState = BuilderState.clone(state) as BuilderProgramState;\n        newState.semanticDiagnosticsPerFile = cloneMapOrUndefined(state.semanticDiagnosticsPerFile);\n        newState.changedFilesSet = cloneMap(state.changedFilesSet);"
  },
  {
    "id" : "30002710-d278-4230-9498-3b18bb51c9ff",
    "prId" : 29161,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29161#pullrequestreview-192322160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb29df4d-edb7-481d-932a-8ea1cb1b05bc",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Could this whole block be moved into `getNextAffectedFile`? The logic seems a little out of place here. The main obstacle I see is that the return type would need to include `isPendingEmitFile`, or it would have to be calculated from `affected`.",
        "createdAt" : "2019-01-14T19:20:36Z",
        "updatedAt" : "2019-01-17T20:29:40Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "7c901e77-8ebc-44d7-bb09-f20b90eb9092",
        "parentId" : "fb29df4d-edb7-481d-932a-8ea1cb1b05bc",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Its here because getNextAffectedFile is suppose to be called by anyone. But while emitting you need to handle these extra files because of the way tsc --b works where is it gets semantic diagnostics and then emits. While these builder programs are required(before this change) to have to run emit before diagnostics so that the diagnostics are cached correctly, states are preserved (updated signatures etc)",
        "createdAt" : "2019-01-14T19:27:45Z",
        "updatedAt" : "2019-01-17T20:29:40Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "900d6f7c9042a686cebc2c50343bfa50ca66b04f",
    "line" : 274,
    "diffHunk" : "@@ -1,1 +553,557 @@            let affected = getNextAffectedFile(state, cancellationToken, computeHash);\n            let isPendingEmitFile = false;\n            if (!affected) {\n                if (!state.compilerOptions.out && !state.compilerOptions.outFile) {\n                    affected = getNextAffectedFilePendingEmit(state);"
  },
  {
    "id" : "fbe3e389-a798-4062-a887-1ee7a23ec1d8",
    "prId" : 29161,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29161#pullrequestreview-192351193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3dfca5c0-3051-4470-831a-8c818541848c",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "can this ever be true? affectedFilePendingEmit is just checked to be defined, so at least it should be defined with length 0. Also, what is affectedFilePendingEmitIndex set to in the false case?",
        "createdAt" : "2019-01-14T19:38:17Z",
        "updatedAt" : "2019-01-17T20:29:40Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "a13759b6-f43d-4ead-a34b-744328c61b75",
        "parentId" : "3dfca5c0-3051-4470-831a-8c818541848c",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Its not currently true (since we are synchronized that is all semantic diagnostics are done and then emit is done. but with future plan to create API out of it where the operations are granular) I have this check here..  \r\n`affectedFilesPendingEmitIndex  === undefined` if `state.affectedFilesPendingEmit` before addending current set of affected Files is undefined. (in short all the files are iterated). \r\nIn false branch we retain the index because we want to emit from the existing index to Last added files (note how these are concatenated and used during emit) \r\n",
        "createdAt" : "2019-01-14T20:37:58Z",
        "updatedAt" : "2019-01-17T20:29:40Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "900d6f7c9042a686cebc2c50343bfa50ca66b04f",
    "line" : 362,
    "diffHunk" : "@@ -1,1 +700,704 @@                //   so start from 0 as array would be affectedFilesPendingEmit\n                // else, continue to iterate from existing index, the current set is appended to existing files\n                if (state.affectedFilesPendingEmitIndex === undefined) {\n                    state.affectedFilesPendingEmitIndex = 0;\n                }"
  },
  {
    "id" : "e8c1c180-95b2-4cdd-a086-4da9c0783182",
    "prId" : 28450,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28450#pullrequestreview-173640709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26534e07-bf4c-49ba-936c-760848c97f2b",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I still don't like looping over every file and then testing if it's the default library -- we should be able to get that in O(1).",
        "createdAt" : "2018-11-10T00:50:48Z",
        "updatedAt" : "2018-11-10T01:15:03Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "c5f1e328-eb9e-4e9c-93eb-4da737d0f5b3",
        "parentId" : "26534e07-bf4c-49ba-936c-760848c97f2b",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "There are multiple default libvraries so we do need to go over them and its only once. ",
        "createdAt" : "2018-11-10T00:53:21Z",
        "updatedAt" : "2018-11-10T01:15:03Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "0d2eb752-649d-4284-9277-bf3bebb8dbc5",
        "parentId" : "26534e07-bf4c-49ba-936c-760848c97f2b",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Note this doesn't happen everytime. It happens only once in build cycle. not on every affected file. (its guarded by state.cleanedDiagnosticsOfLibFiles",
        "createdAt" : "2018-11-10T00:58:19Z",
        "updatedAt" : "2018-11-10T01:15:03Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "0a1becf0-9897-4023-ab3b-5ba773054471",
        "parentId" : "26534e07-bf4c-49ba-936c-760848c97f2b",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "OK.",
        "createdAt" : "2018-11-10T01:01:09Z",
        "updatedAt" : "2018-11-10T01:15:03Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b8bfc832a7c4eaef305481fd9f2110c7c96647d",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +211,215 @@            state.cleanedDiagnosticsOfLibFiles = true;\n            const options = state.program.getCompilerOptions();\n            if (forEach(state.program.getSourceFiles(), f =>\n                state.program.isSourceFileDefaultLibrary(f) &&\n                !skipTypeChecking(f, options) &&"
  }
]