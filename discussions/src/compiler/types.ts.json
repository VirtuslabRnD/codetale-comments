[
  {
    "id" : "b951d2c1-7c0b-43cc-9809-37fe525b60b7",
    "prId" : 43652,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43652#pullrequestreview-637244812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c14bb3e-706d-4157-a682-8d070bfb173a",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "These are new, and exist to support passing in a `(node: Node) => Node` parenthesizer rule for binary expressions. The implementation simply wraps `parenthesizeLeftSideOfBinary` or `parenthesizeRightSideOfBinary` and caches the result for reuse.",
        "createdAt" : "2021-04-16T00:53:51Z",
        "updatedAt" : "2021-04-16T01:29:26Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b48a51a80bdc1fc6802706ae1c1c08420d590a5b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +6787,6791 @@    export interface ParenthesizerRules {\n        getParenthesizeLeftSideOfBinaryForOperator(binaryOperator: SyntaxKind): (leftSide: Expression) => Expression;\n        getParenthesizeRightSideOfBinaryForOperator(binaryOperator: SyntaxKind): (rightSide: Expression) => Expression;\n        parenthesizeLeftSideOfBinary(binaryOperator: SyntaxKind, leftSide: Expression): Expression;\n        parenthesizeRightSideOfBinary(binaryOperator: SyntaxKind, leftSide: Expression | undefined, rightSide: Expression): Expression;"
  },
  {
    "id" : "9ab27b4c-4047-4520-8f4f-a2f175fb6c04",
    "prId" : 43199,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43199#pullrequestreview-622829467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e7726cc-47d6-45e8-99da-0d06bfda07d2",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Optional here but not in `ParseCommandLineWorkerDiagnostics`\r\nAlso these can just be two fields:\r\n`alternateOptionsDeclarations` (pass from both compiler and build options (the opposite option declarations) you should need to create new set. \r\n`alternateOptionDiagnostic`",
        "createdAt" : "2021-03-12T20:17:44Z",
        "updatedAt" : "2021-04-07T02:09:49Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "8e6619c1-64d5-4f28-bc28-1d46b279f518",
        "parentId" : "0e7726cc-47d6-45e8-99da-0d06bfda07d2",
        "authorId" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "body" : "@sheetalkamat I'm not following, sorry -- is there a reason the other modes should have this feature as well? I'd made this an optional object with required fields so to not change the type acquisition or watch mode options.",
        "createdAt" : "2021-03-22T02:56:20Z",
        "updatedAt" : "2021-04-07T02:09:49Z",
        "lastEditedBy" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "tags" : [
        ]
      },
      {
        "id" : "fa053609-373b-4fea-8f95-7c92acaf6bba",
        "parentId" : "0e7726cc-47d6-45e8-99da-0d06bfda07d2",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You would need this when running tsc with build and option isnt supported with build?",
        "createdAt" : "2021-03-24T17:20:45Z",
        "updatedAt" : "2021-04-07T02:09:49Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "c58b3a88-fce8-4a7a-aee3-a4296e06485f",
        "parentId" : "0e7726cc-47d6-45e8-99da-0d06bfda07d2",
        "authorId" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "body" : "Agreed - I can add an _\"{0} is only supported in build mode\"_ error for those. I think for type acquisition and watch mode options it'd be cleaner to not require this?",
        "createdAt" : "2021-03-24T19:16:46Z",
        "updatedAt" : "2021-04-07T02:09:49Z",
        "lastEditedBy" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "tags" : [
        ]
      },
      {
        "id" : "05fefc3d-27a5-437f-8cce-17fc01e141f4",
        "parentId" : "0e7726cc-47d6-45e8-99da-0d06bfda07d2",
        "authorId" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "body" : "Done, thanks for the feedback @sheetalkamat!\r\n\r\nI ended up making granular arrays for the lists of configurations so the CLI parser could use `.map(option => option.name)` in places instead of hardcoded lists. ",
        "createdAt" : "2021-03-29T02:31:35Z",
        "updatedAt" : "2021-04-07T02:09:49Z",
        "lastEditedBy" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "660a99e1dbe24a937a75adce382be77b8691036c",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +6132,6136 @@    /* @internal */\n    export interface DidYouMeanOptionsDiagnostics {\n        alternateMode?: AlternateModeDiagnostics;\n        optionDeclarations: CommandLineOption[];\n        unknownOptionDiagnostic: DiagnosticMessage,"
  },
  {
    "id" : "68c0ab8b-f661-484a-abe0-fa0f0d174025",
    "prId" : 43114,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43114#pullrequestreview-622519589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f96e290-ecab-4cb0-b3de-a6246cdd5833",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Is it possible to avoid adding a flag for this? We set `ContainsLexicalThis` in *nodeFactory.ts* for cases where a `super.x()` is encountered (see the implementation of `createCallExpression`).",
        "createdAt" : "2021-03-26T19:50:21Z",
        "updatedAt" : "2021-04-14T07:57:33Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "dd769ea9-091f-4ae5-b294-0f6019979641",
        "parentId" : "0f96e290-ecab-4cb0-b3de-a6246cdd5833",
        "authorId" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "body" : "Would you mind tell me Is the super.xxx(property access) has the flag too? sorry I'm on mobile phone.",
        "createdAt" : "2021-03-26T20:39:00Z",
        "updatedAt" : "2021-04-14T07:57:33Z",
        "lastEditedBy" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "tags" : [
        ]
      },
      {
        "id" : "858837f2-30c6-458c-9066-3c1d2b4dc338",
        "parentId" : "0f96e290-ecab-4cb0-b3de-a6246cdd5833",
        "authorId" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "body" : "Oh I see the below comments. Never mind.",
        "createdAt" : "2021-03-26T20:41:16Z",
        "updatedAt" : "2021-04-14T07:57:33Z",
        "lastEditedBy" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9850dc3df763e134da572dfef52d743987d4178d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +6635,6639 @@        ContainsClassFields = 1 << 23,\n        ContainsPossibleTopLevelAwait = 1 << 24,\n        ContainsLexicalSuper = 1 << 25,\n        // Please leave this as 1 << 29.\n        // It is the maximum bit we can set before we outgrow the size of a v8 small integer (SMI) on an x86 system."
  },
  {
    "id" : "50c4f4d0-8f82-4d0e-a3d1-49e9efd501dc",
    "prId" : 42676,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42676#pullrequestreview-586031549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e84ae06-29ae-401a-b5dd-b4583d8b3ee3",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I'm wondering if these helpful comments should be leading `/** */` style comments, instead, so they actually show up in quick info by default... doesn't matter _too_ much, since as `//` comments these are visible if you hold `ctrl` while checking the quickinfo.",
        "createdAt" : "2021-02-09T00:28:32Z",
        "updatedAt" : "2021-02-24T04:05:43Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "cfda7c2575fc103223dec3ce9a13aace273ca9c8",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +362,366 @@        JSDocTypeExpression,\n        JSDocNameReference,\n        JSDocAllType, // The * type\n        JSDocUnknownType, // The ? type\n        JSDocNullableType,"
  },
  {
    "id" : "5a9e2d3c-a0a7-4415-a48c-c65acb9ce6ac",
    "prId" : 41891,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41891#pullrequestreview-547886104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81c60e8b-d686-4c98-864a-5e991da41114",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I'd say mark this as `/** @internal */`",
        "createdAt" : "2020-12-09T06:55:01Z",
        "updatedAt" : "2020-12-09T21:02:39Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cf670b69c7b85f1453550e8ef52214b8f968da8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +4896,4900 @@        StringOrNumberLiteral = StringLiteral | NumberLiteral,\n        /* @internal */\n        StringLikeLiteral = StringLiteral | TemplateLiteral,\n        /* @internal */\n        FreshableLiteral = Literal | TemplateLiteral,"
  },
  {
    "id" : "e26d76e4-861a-4d96-8895-57ce4b2fd318",
    "prId" : 41891,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41891#pullrequestreview-547886104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8f11d9d-5ab9-4b33-8f15-9bcae58f1541",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Same here, mark internal",
        "createdAt" : "2020-12-09T06:55:19Z",
        "updatedAt" : "2020-12-09T21:02:39Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cf670b69c7b85f1453550e8ef52214b8f968da8",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +4898,4902 @@        StringLikeLiteral = StringLiteral | TemplateLiteral,\n        /* @internal */\n        FreshableLiteral = Literal | TemplateLiteral,\n        /* @internal */\n        StringOrNumberLiteralOrUnique = StringLiteral | NumberLiteral | UniqueESSymbol,"
  },
  {
    "id" : "8eecb372-16ee-46dd-b577-76ba5d12a6d0",
    "prId" : 41877,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41877#pullrequestreview-549730523",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5a1d6ba-ce5a-45b9-bdaf-b5b3ace0286f",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "this new name is 100% silly -- I would *like* to change the existing `JSDocComment` to `JSDoc` and `JSDocCommentComment` to `JSDocComment`, but I'm not sure how bad of a breaking change that is. Maybe CommentComment should just become CommentText. @DanielRosenwasser do you have opinions?",
        "createdAt" : "2020-12-11T00:24:29Z",
        "updatedAt" : "2021-03-16T18:20:25Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "5a828137-12a1-4958-bac9-40bbdd7aa48c",
        "parentId" : "b5a1d6ba-ce5a-45b9-bdaf-b5b3ace0286f",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "JSDocCommentText seems good!",
        "createdAt" : "2020-12-11T01:04:26Z",
        "updatedAt" : "2021-03-16T18:20:25Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "4b70f839-25d8-4b19-b678-116b6fcb17a5",
        "parentId" : "b5a1d6ba-ce5a-45b9-bdaf-b5b3ace0286f",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "![image](https://user-images.githubusercontent.com/972891/101848233-d1785200-3b09-11eb-8d88-b96a03182c64.png)\r\n\r\nNo GitHub, it should be \"Update *comment text*\"",
        "createdAt" : "2020-12-11T01:05:22Z",
        "updatedAt" : "2021-03-16T18:20:25Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfdaee97195451f0a1947da5ec05f5df19f6aa8",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +370,374 @@        JSDocVariadicType,\n        JSDocNamepathType, // https://jsdoc.app/about-namepaths.html\n        JSDocComment,\n        JSDocText,\n        JSDocTypeLiteral,"
  },
  {
    "id" : "0bca5f4d-64a4-4a79-8cbd-e811a50f4047",
    "prId" : 41877,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41877#pullrequestreview-613496611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da62615e-bde4-4871-afeb-247188de67d4",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Would it be worthwhile to create a type alias for `string | NodeArray<JSDocText | JSDocLink>`?",
        "createdAt" : "2021-03-15T17:18:11Z",
        "updatedAt" : "2021-03-16T18:20:25Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "82418170-e0ac-48cb-a77f-ab71594190eb",
        "parentId" : "da62615e-bde4-4871-afeb-247188de67d4",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Or possibly just `NodeArray<JSDocText | JSDocLink>` (in case we add some other embedded tag in the future).",
        "createdAt" : "2021-03-15T17:19:56Z",
        "updatedAt" : "2021-03-16T18:20:25Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "e7c0883e-a53d-4424-8940-7ab9b58b28c7",
        "parentId" : "da62615e-bde4-4871-afeb-247188de67d4",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I thought about it and decided against it:\r\n\r\n1. There are no other embedded tags in jsdoc.\r\n2. The type isn't *super* unwieldy, and the type alias hurts discoverability of the API, where first-time exposure of actual types is more important than concision for repeated usage.",
        "createdAt" : "2021-03-16T16:51:10Z",
        "updatedAt" : "2021-03-16T18:20:25Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "f032379b-41c8-4504-9a44-ffddd27d0fc9",
        "parentId" : "da62615e-bde4-4871-afeb-247188de67d4",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "https://jsdoc.app/tags-inline-tutorial.html 😛 ",
        "createdAt" : "2021-03-16T16:54:53Z",
        "updatedAt" : "2021-03-16T18:20:25Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfdaee97195451f0a1947da5ec05f5df19f6aa8",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +7186,7190 @@        createJSDocSignature(typeParameters: readonly JSDocTemplateTag[] | undefined, parameters: readonly JSDocParameterTag[], type?: JSDocReturnTag): JSDocSignature;\n        updateJSDocSignature(node: JSDocSignature, typeParameters: readonly JSDocTemplateTag[] | undefined, parameters: readonly JSDocParameterTag[], type: JSDocReturnTag | undefined): JSDocSignature;\n        createJSDocTemplateTag(tagName: Identifier | undefined, constraint: JSDocTypeExpression | undefined, typeParameters: readonly TypeParameterDeclaration[], comment?: string | NodeArray<JSDocText | JSDocLink>): JSDocTemplateTag;\n        updateJSDocTemplateTag(node: JSDocTemplateTag, tagName: Identifier | undefined, constraint: JSDocTypeExpression | undefined, typeParameters: readonly TypeParameterDeclaration[], comment: string | NodeArray<JSDocText | JSDocLink> | undefined): JSDocTemplateTag;\n        createJSDocTypedefTag(tagName: Identifier | undefined, typeExpression?: JSDocTypeExpression | JSDocTypeLiteral, fullName?: Identifier | JSDocNamespaceDeclaration, comment?: string | NodeArray<JSDocText | JSDocLink>): JSDocTypedefTag;"
  },
  {
    "id" : "67da01d0-241d-48f0-8b98-7cf002e298ff",
    "prId" : 40336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40336#pullrequestreview-481527354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37476819-79a5-49fd-a771-1a20d9bea577",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "```suggestion\r\n        texts: readonly [string, string, ...string[]];  // Always one element longer than casings/types\r\n        casings: readonly [TemplateCasing, ...TemplateCasing[]];  // Always at least one element\r\n        types: readonly [Type, ...Type[]];  // Always at least one element\r\n```\r\n\r\nif that's at all useful",
        "createdAt" : "2020-09-03T06:58:41Z",
        "updatedAt" : "2020-09-10T02:54:33Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d38a3880d4a65be90fe1abee9d6d96f2819e399d",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +5375,5379 @@        texts: readonly string[];  // Always one element longer than casings/types\n        casings: readonly TemplateCasing[];  // Always at least one element\n        types: readonly Type[];  // Always at least one element\n    }\n"
  },
  {
    "id" : "3f308d2e-2286-4c0c-a399-fc8fc2427133",
    "prId" : 40336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40336#pullrequestreview-481527354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e7ae470-9335-4f6a-9c56-70e35b2ff5bb",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "```suggestion\r\n        renameType?: Type;\r\n```",
        "createdAt" : "2020-09-03T06:59:11Z",
        "updatedAt" : "2020-09-10T02:54:33Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d38a3880d4a65be90fe1abee9d6d96f2819e399d",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +5231,5235 @@        typeParameter?: TypeParameter;\n        constraintType?: Type;\n        nameType?: Type;\n        templateType?: Type;\n        modifiersType?: Type;"
  },
  {
    "id" : "a5fe2f7a-cf3d-4910-823a-5336212bcc6c",
    "prId" : 40336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40336#pullrequestreview-481527354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90bce597-f41f-46b8-bb01-33881c7faa38",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "```suggestion\r\n    export const enum StringTemplateCasing {\r\n```\r\n\r\nI feel weird that this is *part* of the node instead of a first-class operator.\r\n\r\nDoes this need to be publicly exported?",
        "createdAt" : "2020-09-03T07:00:39Z",
        "updatedAt" : "2020-09-10T02:54:33Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d38a3880d4a65be90fe1abee9d6d96f2819e399d",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +1669,1673 @@    }\n\n    export const enum TemplateCasing {\n        None,\n        Uppercase,"
  },
  {
    "id" : "5ba98fe0-d140-4d0d-a2de-b6567b429208",
    "prId" : 39723,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39723#pullrequestreview-456042272",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c58abe7-3e5b-4e2f-93df-4ae7bdfb369c",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I think without the explanation, this is unclear.",
        "createdAt" : "2020-07-27T18:44:04Z",
        "updatedAt" : "2020-07-27T18:45:27Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "69a7b7000e11d2450f6c30201826e2dc05ca7fe9",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +5425,5429 @@    export const enum InferencePriority {\n        NakedTypeVariable            = 1 << 0,  // Naked type variable in union or intersection type\n        SpeculativeTuple             = 1 << 1,  // Speculative tuple inference\n        HomomorphicMappedType        = 1 << 2,  // Reverse inference for homomorphic mapped type\n        PartialHomomorphicMappedType = 1 << 3,  // Partial reverse inference for homomorphic mapped type"
  },
  {
    "id" : "d566fa31-df40-4b41-8bfc-0623fe7e2b08",
    "prId" : 39094,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39094#pullrequestreview-435366897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c336397-3f74-4007-a0ee-07424485649b",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Why are `Required` and `Optional` both flags? This means we can mistakenly mark a member as both required and optional, which seems incorrect. Actually, I'm pretty sure all of these are mutually exclusive - is there a good reason this shouldn't be `ElementKind` instead of `ElementFlags`?",
        "createdAt" : "2020-06-22T21:53:35Z",
        "updatedAt" : "2020-06-23T01:01:52Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "1420faec-9321-48a3-a801-57c26b503aa4",
        "parentId" : "5c336397-3f74-4007-a0ee-07424485649b",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "It's similar to `TypeFlags` and others. Makes it cheaper to check for multiple values at once.",
        "createdAt" : "2020-06-22T23:05:10Z",
        "updatedAt" : "2020-06-23T01:01:52Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "805a38dc-c9ad-4448-80a3-e8ba97a38a80",
        "parentId" : "5c336397-3f74-4007-a0ee-07424485649b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "But the most we use at once is two... Is it really worth giving up exhaustiveness and exclusivity checking to replace so few expressions?",
        "createdAt" : "2020-06-22T23:11:06Z",
        "updatedAt" : "2020-06-23T01:01:52Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "5e733d96-1d5c-4e0e-977a-fbcc925b18d6",
        "parentId" : "5c336397-3f74-4007-a0ee-07424485649b",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Yes, I think this is fine, particularly as the current scheme makes it easy for us to add additional element flags that are orthogonal to the kind of element.",
        "createdAt" : "2020-06-23T00:50:45Z",
        "updatedAt" : "2020-06-23T01:01:52Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "11f70bee31aab48e7fd60b3b92d348a2ea074914",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +5101,5105 @@\n    export const enum ElementFlags {\n        Required  = 1 << 0,  // T\n        Optional  = 1 << 1,  // T?\n        Rest      = 1 << 2,  // ...T[]"
  },
  {
    "id" : "e34c3444-79bc-4d1b-883f-34434d8aa224",
    "prId" : 39084,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39084#pullrequestreview-432672001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc6503ac-8eac-4203-a96f-10a3fad5d759",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Do we need to handle emitting an arbitrary non-empty expression for empty identifiers in the emitter for this? Or is it OK to just let the empty identifier get emitted?",
        "createdAt" : "2020-06-17T02:19:42Z",
        "updatedAt" : "2020-06-18T18:18:37Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "23a4868a-7545-4a92-b823-2f5c08a06b82",
        "parentId" : "dc6503ac-8eac-4203-a96f-10a3fad5d759",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "We already handle that. There was one test difference showing the change, as we went from `throw;` to `throw ;`. \r\n\r\nI think this is better to do now because one of these days I want to propose `throw;` to TC39 as a means to rethrow an exception in a `catch {}` block (without a reachable binding), in which case having a missing expression would have a different meaning...",
        "createdAt" : "2020-06-17T18:37:39Z",
        "updatedAt" : "2020-06-18T18:18:37Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "75c6375a121529670d4860fc42b5e8cded09df63",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2723,2727 @@    export interface ThrowStatement extends Statement {\n        readonly kind: SyntaxKind.ThrowStatement;\n        readonly expression: Expression;\n    }\n"
  },
  {
    "id" : "4739b897-3d7a-48e8-a675-a6e1c5adb8dd",
    "prId" : 38726,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38726#pullrequestreview-416722861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cdfcc95-179a-4f66-8f5c-031f3121d267",
        "parentId" : null,
        "authorId" : "3ad6a9a9-ee99-46b7-aee0-8a093dc080d7",
        "body" : "In #37578 I asked to deprecate misspelled variable instead of removing it, as it may break backward-compatibility (in linters, etc.)\r\n\r\nIt was previously done here, for example:\r\nhttps://github.com/microsoft/TypeScript/blob/a1c8608f681488fda3f0b6ffd89195a81f80f0b0/src/compiler/types.ts#L3380-L3381\r\n\r\nWhat do you think about it?",
        "createdAt" : "2020-05-22T05:58:15Z",
        "updatedAt" : "2020-09-04T15:38:56Z",
        "lastEditedBy" : "3ad6a9a9-ee99-46b7-aee0-8a093dc080d7",
        "tags" : [
        ]
      },
      {
        "id" : "db713976-ad48-46d3-bc6b-6eaf55adf161",
        "parentId" : "6cdfcc95-179a-4f66-8f5c-031f3121d267",
        "authorId" : "03df56ee-dd26-43e2-8aa7-8c18f278d275",
        "body" : "Oh yeah, that sounds much better than deleting it. I just updated my code to deprecate it instead.",
        "createdAt" : "2020-05-22T08:04:04Z",
        "updatedAt" : "2020-09-04T15:38:56Z",
        "lastEditedBy" : "03df56ee-dd26-43e2-8aa7-8c18f278d275",
        "tags" : [
        ]
      }
    ],
    "commit" : "418c232130dab7a4c955f47ed012be70ddfec3aa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3692,3696 @@        // Error handling\n        AllowThisInObjectLiteral                = 1 << 15,\n        AllowQualifiedNameInPlaceOfIdentifier    = 1 << 16,\n        /** @deprecated AllowQualifedNameInPlaceOfIdentifier. Use AllowQualifiedNameInPlaceOfIdentifier instead. */\n        AllowQualifedNameInPlaceOfIdentifier    = AllowQualifiedNameInPlaceOfIdentifier,"
  },
  {
    "id" : "e0dae6e4-8aeb-4a87-a0f3-15b451cd9e00",
    "prId" : 38523,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38523#pullrequestreview-412885331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa28a36f-c5e8-4eb1-8a10-9b754a42e191",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Can you explain why this is needed? Why do we need reportsDeprecated flag?",
        "createdAt" : "2020-05-15T18:45:39Z",
        "updatedAt" : "2020-06-19T00:15:17Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6434447c678c8779badc6157b5d8ab0c217e0c75",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +5534,5538 @@        reportsUnnecessary?: {};\n\n        reportsDeprecated?: {}\n        source?: string;\n        relatedInformation?: DiagnosticRelatedInformation[];"
  },
  {
    "id" : "a6fc0ae4-a38c-4123-b4c8-559dc5fb8239",
    "prId" : 38234,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38234#pullrequestreview-472945423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd5cd8e9-0f3d-45cc-abe3-26876c65795c",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "In the end, I made `NamedTupleMember` a `TypeNode`, which is inline with `OptionalType` and `RestType`, so I don't _have_ to rename this field (or even change the type). If anyone feels strongly about it, I can change it back. However renaming it was very useful for figuring out where I needed to adjust/handle the new node; so \"breaking\" the API because of the new child kind might be worthwhile for other consumers, too. Depends on how strongly we want to maintain AST compatibility I suppose.",
        "createdAt" : "2020-04-28T21:21:13Z",
        "updatedAt" : "2020-05-19T21:20:07Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "c4562858-eb36-416f-8823-c17dd2c3de93",
        "parentId" : "cd5cd8e9-0f3d-45cc-abe3-26876c65795c",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "I like the rename.",
        "createdAt" : "2020-05-19T18:01:14Z",
        "updatedAt" : "2020-05-19T21:20:07Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "5a4c8225-117a-4330-ab1a-70db6e984a2a",
        "parentId" : "cd5cd8e9-0f3d-45cc-abe3-26876c65795c",
        "authorId" : "c3348eb6-d72b-4d08-a788-c9815a1f41f9",
        "body" : "This rename is missing in the API breaking changes for 4.0 - https://github.com/microsoft/TypeScript/wiki/API-Breaking-Changes",
        "createdAt" : "2020-08-22T19:01:54Z",
        "updatedAt" : "2020-08-22T19:01:54Z",
        "lastEditedBy" : "c3348eb6-d72b-4d08-a788-c9815a1f41f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "05d398e1e72c34a10337b1666bf63ecd088a91b8",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1277,1281 @@    export interface TupleTypeNode extends TypeNode {\n        kind: SyntaxKind.TupleType;\n        elements: NodeArray<TypeNode | NamedTupleMember>;\n    }\n"
  },
  {
    "id" : "75d15dc6-efc6-419f-bb7d-c98bf8a34e9a",
    "prId" : 38234,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38234#pullrequestreview-412259001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8026e89a-fa14-4ca4-8986-fabfdcedff95",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "General design question: how do you decide between saving a reference to a token like this vs. saving a boolean property that indicates optionality, like `ImportTypeNode['isTypeOf']`? Is this token actually used anywhere?",
        "createdAt" : "2020-05-14T22:17:30Z",
        "updatedAt" : "2020-05-19T21:20:07Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "6713cbd1-a616-47ac-90f7-c4523ee71d3a",
        "parentId" : "8026e89a-fa14-4ca4-8986-fabfdcedff95",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "In this case, mostly so the members of the same name are the same type as `ParameterDeclaration`. In the case of `ParameterDeclaration`, so comments can more easily be collected on the intervening tokens (iirc). (Types don't normally care about comment preservation on intervening tokens)",
        "createdAt" : "2020-05-14T23:49:40Z",
        "updatedAt" : "2020-05-19T21:20:07Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "05d398e1e72c34a10337b1666bf63ecd088a91b8",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1284,1288 @@        dotDotDotToken?: Token<SyntaxKind.DotDotDotToken>;\n        name: Identifier;\n        questionToken?: Token<SyntaxKind.QuestionToken>;\n        type: TypeNode;\n    }"
  },
  {
    "id" : "f1913d6f-5d86-44e1-ba9f-a401515d7d46",
    "prId" : 36398,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36398#pullrequestreview-348911578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ebd0d5c-bd07-49c4-ab9c-b78eb7be0c2a",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You need this flag in `NodeBuilderFlagsMask`  as well.",
        "createdAt" : "2020-01-27T19:19:42Z",
        "updatedAt" : "2020-01-27T19:43:01Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "41d0c28c66606a036f89f0bd70ad75e7026ab6ca",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +3674,3678 @@\n        UseAliasDefinedOutsideCurrentScope      = 1 << 14, // For a `type T = ... ` defined in a different file, write `T` instead of its value, even though `T` can't be accessed in the current scope.\n        UseSingleQuotesForStringLiteralType     = 1 << 28, // Use single quotes for string literal type\n\n        // Error Handling"
  },
  {
    "id" : "7a2c853d-8448-4a9a-98e2-4f084820734a",
    "prId" : 33220,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33220#pullrequestreview-294549669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9294169-0399-4f7f-b3da-c67f6833c9d0",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "navigationBar uses `DeclarationName` and `getNameOfDeclaration`. Is it affected by this change?",
        "createdAt" : "2019-09-27T00:56:27Z",
        "updatedAt" : "2019-09-27T20:31:03Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "52014199-5cb3-4aae-8e7f-2b39b738a2c8",
        "parentId" : "f9294169-0399-4f7f-b3da-c67f6833c9d0",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Hmmm, it uses `nodeText` on the `name`, which probably works fine for `ComputedPropertyDeclaration`s, but probably falls a little short for `ElementAccessExpression`s. Can you point me to a test for computed property name tests for `navigationBar`? I'll (speculatively) build in the fix, but I'd like to add a test.",
        "createdAt" : "2019-09-27T01:31:34Z",
        "updatedAt" : "2019-09-27T20:31:03Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "4ab12d77-65a0-49a9-ab5b-22bb7d5860d9",
        "parentId" : "f9294169-0399-4f7f-b3da-c67f6833c9d0",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "tests\\cases\\fourslash\\navigationBarItemsSymbols1.ts",
        "createdAt" : "2019-09-27T04:29:09Z",
        "updatedAt" : "2019-09-27T20:31:03Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "b119d731-2065-4ef3-9e7f-3b0cb8841f98",
        "parentId" : "f9294169-0399-4f7f-b3da-c67f6833c9d0",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "FWIW: https://github.com/microsoft/TypeScript/pull/33537/files#diff-098ee0b770157ee6b5ef687045ee074b",
        "createdAt" : "2019-09-27T16:03:10Z",
        "updatedAt" : "2019-09-27T20:31:03Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "f9107090-c1db-449d-9fd7-df6a2ed3da5f",
        "parentId" : "f9294169-0399-4f7f-b3da-c67f6833c9d0",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "So, turns out js assignment members aren't syntactically children, so they can't be in the nav bar (which only looks at syntax members). Additionally, the nav bar excludes dynamically named members, so on two fronts these shouldn't appear in the nav bar. I've added a test showing the behavior~",
        "createdAt" : "2019-09-27T20:32:16Z",
        "updatedAt" : "2019-09-27T20:32:24Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "11b344897672d76845b88b720d20d1b52b79e926",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +815,819 @@    export type PropertyName = Identifier | StringLiteral | NumericLiteral | ComputedPropertyName;\n\n    export type DeclarationName = Identifier | StringLiteralLike | NumericLiteral | ComputedPropertyName | ElementAccessExpression | BindingPattern;\n\n    export interface Declaration extends Node {"
  },
  {
    "id" : "f9a57675-dd44-4b68-a950-65726c188251",
    "prId" : 33036,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33036#pullrequestreview-278724715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72adfb10-6294-43ba-b987-daf9e220d43d",
        "parentId" : null,
        "authorId" : "c0d4779c-8ebc-430d-9199-cdb29d8e72ad",
        "body" : "I thought it was the reverse: The variance check may cause a typecheck to pass (positive) where the structural check would fail (negative)\r\n\r\nhttps://github.com/microsoft/TypeScript/issues/32664#issuecomment-518318932",
        "createdAt" : "2019-08-22T22:03:02Z",
        "updatedAt" : "2019-08-22T22:06:01Z",
        "lastEditedBy" : "c0d4779c-8ebc-430d-9199-cdb29d8e72ad",
        "tags" : [
        ]
      },
      {
        "id" : "06629435-cffb-423f-95b9-4f7452af2e40",
        "parentId" : "72adfb10-6294-43ba-b987-daf9e220d43d",
        "authorId" : "fde7ab8a-5820-4ddb-8e3f-0de480adc675",
        "body" : "See #33020 and the associated issue for variance checks raising errors where a structural comparison would not.",
        "createdAt" : "2019-08-22T22:11:54Z",
        "updatedAt" : "2019-08-22T22:11:54Z",
        "lastEditedBy" : "fde7ab8a-5820-4ddb-8e3f-0de480adc675",
        "tags" : [
        ]
      },
      {
        "id" : "698f6489-6888-41a5-bf77-a1d3d840316c",
        "parentId" : "72adfb10-6294-43ba-b987-daf9e220d43d",
        "authorId" : "c0d4779c-8ebc-430d-9199-cdb29d8e72ad",
        "body" : "Hmm, I'm just confused because that seemingly contradicts the conversion I had with @weswigham (linked in my post above).",
        "createdAt" : "2019-08-22T22:16:33Z",
        "updatedAt" : "2019-08-22T22:16:33Z",
        "lastEditedBy" : "c0d4779c-8ebc-430d-9199-cdb29d8e72ad",
        "tags" : [
        ]
      },
      {
        "id" : "423a0f94-bfbd-4086-8d55-455835448f5d",
        "parentId" : "72adfb10-6294-43ba-b987-daf9e220d43d",
        "authorId" : "c0d4779c-8ebc-430d-9199-cdb29d8e72ad",
        "body" : "In particular:\r\n> `Unreliable` is supposed to be \"fallback to structural if varianced-based check fails\"\r\n\r\nWhich sounds like it shouldn't be able to cause an error *only* based on the variance result.",
        "createdAt" : "2019-08-22T22:18:41Z",
        "updatedAt" : "2019-08-22T22:18:42Z",
        "lastEditedBy" : "c0d4779c-8ebc-430d-9199-cdb29d8e72ad",
        "tags" : [
        ]
      },
      {
        "id" : "22cabbdf-bd35-40aa-babf-4a3fd95fba3e",
        "parentId" : "72adfb10-6294-43ba-b987-daf9e220d43d",
        "authorId" : "c0d4779c-8ebc-430d-9199-cdb29d8e72ad",
        "body" : "Also (I'm done after this I promise):\r\n> Only Unreliable rather than Unmeasurable since it should be that in any case where the variance result is wrong, it's because the variance is overstrict because we have more relaxed arity-based rules on the signature than tuples have.\r\n\r\nImplying that any false negatives will be discarded in favor of the structural result.",
        "createdAt" : "2019-08-22T22:23:14Z",
        "updatedAt" : "2019-08-22T22:23:15Z",
        "lastEditedBy" : "c0d4779c-8ebc-430d-9199-cdb29d8e72ad",
        "tags" : [
        ]
      },
      {
        "id" : "d50c325f-ad5c-404f-9847-e5c95485d72a",
        "parentId" : "72adfb10-6294-43ba-b987-daf9e220d43d",
        "authorId" : "fde7ab8a-5820-4ddb-8e3f-0de480adc675",
        "body" : "My reading: \r\n\r\nThe marker indicates that negative results are unreliable, therefore structural checks are used in the event of failure.\r\n\r\nThe positive results are assumed to be reliable such that false positives do not occur, even if in reality they can. There is no fallback in the event of success.",
        "createdAt" : "2019-08-22T22:37:15Z",
        "updatedAt" : "2019-08-22T22:37:15Z",
        "lastEditedBy" : "fde7ab8a-5820-4ddb-8e3f-0de480adc675",
        "tags" : [
        ]
      },
      {
        "id" : "02413f89-c934-4e0f-9f9a-86ea13fe5810",
        "parentId" : "72adfb10-6294-43ba-b987-daf9e220d43d",
        "authorId" : "c0d4779c-8ebc-430d-9199-cdb29d8e72ad",
        "body" : "I guess when I hear \"false positive\" I think of, e.g. a virus scanner reporting a virus where none exists; likewise the `unreliable` variance can produce a successful typecheck where the canonical one (structural) would fail.  We thus seem to be seeing the \"positive\" and \"negative\" from opposite sides of the fence, hence the confusion :smile:\r\n\r\nReverse polarity! ➕ <--> ➖ ",
        "createdAt" : "2019-08-22T22:47:47Z",
        "updatedAt" : "2019-08-22T22:47:48Z",
        "lastEditedBy" : "c0d4779c-8ebc-430d-9199-cdb29d8e72ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "5012380e664be0ddcf8948bc005adfeb1361fcc3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4215,4219 @@        VarianceMask  = Invariant | Covariant | Contravariant | Independent, // Mask containing all measured variances without the unmeasurable flag\n        Unmeasurable  = 1 << 3,  // Variance result is unusable - relationship relies on structural comparisons which are not reflected in generic relationships\n        Unreliable    = 1 << 4,  // Variance result is unreliable - checking may produce false negatives, but not false positives\n        AllowsStructuralFallback = Unmeasurable | Unreliable,\n    }"
  },
  {
    "id" : "8cb741c0-ef6f-4e83-b316-be6a85dd1084",
    "prId" : 32461,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32461#pullrequestreview-263410500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b9695fb-0b63-48fc-99bb-d996d8637056",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Given that the value for ESNext has _already_ been volatile, I see no reason not to make this one last churn and then have all these values be _not_ volatile. But I would wait for another reviewer just in case I’m not thinking of some crazy edge case.\r\n\r\n(CI will tell you this, but does this affect the compiler API baselines?)",
        "createdAt" : "2019-07-17T22:40:01Z",
        "updatedAt" : "2019-07-18T15:08:49Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "e08a5ca5-327c-472e-8049-934cfeef6f93",
        "parentId" : "4b9695fb-0b63-48fc-99bb-d996d8637056",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think we should do this for ModuleKind.EsNext as while at it",
        "createdAt" : "2019-07-17T22:58:13Z",
        "updatedAt" : "2019-07-18T15:08:49Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "0accb691-530c-41dc-8491-7b26a26f5dea",
        "parentId" : "4b9695fb-0b63-48fc-99bb-d996d8637056",
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "Agree, added",
        "createdAt" : "2019-07-18T03:09:23Z",
        "updatedAt" : "2019-07-18T15:08:49Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c4422e47203cc3a5b3680aac443ab031c03c1fb",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +4809,4813 @@        ES2019 = 6,\n        ES2020 = 7,\n        ESNext = 99,\n        JSON = 100,\n        Latest = ESNext,"
  },
  {
    "id" : "bd25e00f-c6d7-443c-88ef-3530dd362b92",
    "prId" : 29717,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29717#pullrequestreview-200187763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad72c052-f75f-4a44-8f43-4778cbd09343",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "We should consider putting the address into a separate field `address?: string`. However, I would do that in a separate PR since it's not clear that it's worthwhile if our understanding of the address syntax is vague.",
        "createdAt" : "2019-02-05T21:55:22Z",
        "updatedAt" : "2019-04-19T10:03:55Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "08bd017db97445709cc249d3c0c9661ff962c009",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2459,2463 @@\n    export interface JSDocAuthorTag extends JSDocTag {\n        kind: SyntaxKind.JSDocAuthorTag;\n    }\n"
  },
  {
    "id" : "1b355269-c9ff-4fd1-8f67-af2a077bd72b",
    "prId" : 29338,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29338#pullrequestreview-191011982",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "736a851e-540c-4603-aba4-f21cfb58da2b",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Should `permissiveInstantiation`s and `restrictiveInstantiation`s have pointers back to the original type, this way when we attempt to get them, if we already have one of them we can avoid bothering instantiating a new type (and often creating a new type identity)?",
        "createdAt" : "2019-01-10T00:59:00Z",
        "updatedAt" : "2019-01-10T00:59:00Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c1c97e5013e957da26e15390e5268cb63c1884e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +3919,3923 @@        permissiveInstantiation?: Type;  // Instantiation with type parameters mapped to wildcard type\n        /* @internal */\n        restrictiveInstantiation?: Type; // Instantiation with type parameters mapped to unconstrained form\n        /* @internal */\n        immediateBaseConstraint?: Type;  // Immediate base constraint cache"
  },
  {
    "id" : "8ce71fab-8615-4283-945c-7b5d4bcef949",
    "prId" : 27560,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27560#pullrequestreview-165274301",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c120140-1115-426e-a33b-195314b682e5",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "when resolving module names in the root project, there will be no `ResolvedProjectReference`. Therefore a custom CompilerHost has no access to the CompilerOptions of that project.",
        "createdAt" : "2018-10-11T19:40:52Z",
        "updatedAt" : "2018-10-16T21:56:31Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      },
      {
        "id" : "17f2107b-a06c-42d9-9c7f-52fa3096c5e2",
        "parentId" : "8c120140-1115-426e-a33b-195314b682e5",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "That is not changed since it was original API as well. In general host already knows root compiler options. Eg. https://github.com/TypeStrong/ts-loader/blob/master/src/servicesHost.ts#L498",
        "createdAt" : "2018-10-11T19:55:35Z",
        "updatedAt" : "2018-10-16T21:56:31Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "7132498a-d55a-453d-aa81-904064d3d303",
        "parentId" : "8c120140-1115-426e-a33b-195314b682e5",
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "> In general host already knows root compiler options.\r\n\r\nCorrect, although that only works when building exactly one project with that host. The current implementation of `tsbuild.ts` (I know it's still considered internal) uses the same `SolutionBuilderHost` to build all projects. That host cannot know about the compilerOptions of all projects. And since tsbuild can even handle multiple tsconfig.json files at once, there's no way the host could ever know the correct compilerOptions.",
        "createdAt" : "2018-10-14T15:32:26Z",
        "updatedAt" : "2018-10-16T21:56:31Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      },
      {
        "id" : "caa831d6-ed93-4ecc-9d31-ed6991dde979",
        "parentId" : "8c120140-1115-426e-a33b-195314b682e5",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I don't think we want to change that. (the default compilerHost is for specific compilerOptions) Infact we want to change tsbuilder to create compiler host for each program separaterly but that's a todo for little later.",
        "createdAt" : "2018-10-16T17:17:53Z",
        "updatedAt" : "2018-10-16T21:56:31Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc72577ce31ef0f176b81d36a43d71d842c2e52f",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +4965,4969 @@         * 'throw new Error(\"NotImplemented\")'\n         */\n        resolveModuleNames?(moduleNames: string[], containingFile: string, reusedNames?: string[], redirectedReference?: ResolvedProjectReference): (ResolvedModule | undefined)[];\n        /**\n         * This method is a companion for 'resolveModuleNames' and is used to resolve 'types' references to actual type declaration files"
  },
  {
    "id" : "9a90786a-d34b-4e38-a93d-75b1a4a2600d",
    "prId" : 27042,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27042#pullrequestreview-155663450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bc8d45c-8de6-4687-b5d6-1d273aec65ee",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "this change doesn't seem related (and I'm not sure it's an improvement?)",
        "createdAt" : "2018-09-14T21:08:03Z",
        "updatedAt" : "2018-09-14T21:08:03Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "410a4099-dfe4-41ef-8f33-6c0e9809ddea",
        "parentId" : "7bc8d45c-8de6-4687-b5d6-1d273aec65ee",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Eh, I changed it because I actually removed `StringOrNumberLiteral` at first because it was practically unused within our code after the change, but then added it back to avoid an API break.",
        "createdAt" : "2018-09-14T21:10:46Z",
        "updatedAt" : "2018-09-14T21:43:06Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2c028831d6d31010cc1eb100425ed01db27f901",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +3732,3736 @@        StringOrNumberLiteral = StringLiteral | NumberLiteral,\n        /* @internal */\n        StringOrNumberLiteralOrUnique = StringLiteral | NumberLiteral | UniqueESSymbol,\n        /* @internal */\n        DefinitelyFalsy = StringLiteral | NumberLiteral | BooleanLiteral | Void | Undefined | Null,"
  },
  {
    "id" : "d8a1d552-9371-4a06-835f-ce362fde4840",
    "prId" : 26795,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26795#pullrequestreview-151205768",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adbeb128-03d3-41aa-9588-6a59a41ef6f9",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "The comments make it sound like the meaning changed -- previously this would be the symbol for the thing you're assigning to properties of, now it sounds like the symbol for a particular assignment?",
        "createdAt" : "2018-08-30T22:07:33Z",
        "updatedAt" : "2018-09-12T17:22:59Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "3adca743-77d7-4677-b4f9-4c89454f0f5d",
        "parentId" : "adbeb128-03d3-41aa-9588-6a59a41ef6f9",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Yes, I just merged #26690, which puts this flag on *all* assignment declarations, not just ones that are themselves containers. I decided to put all the renames in this PR, though.",
        "createdAt" : "2018-08-30T22:29:37Z",
        "updatedAt" : "2018-09-12T17:22:59Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "27b274e84f565b13c79a4898fdeae5a9d8baf2bd",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +3436,3440 @@        Optional                = 1 << 24,  // Optional property\n        Transient               = 1 << 25,  // Transient symbol (created during type check)\n        Assignment              = 1 << 26,  // Assignment treated as declaration (eg `this.prop = 1`)\n        ModuleExports           = 1 << 27,  // Symbol for CommonJS `module` of `module.exports`\n"
  },
  {
    "id" : "c512bab4-1ca2-4a7a-8f02-89583a363571",
    "prId" : 26341,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26341#pullrequestreview-145307697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "208141c7-c655-47bc-ab37-dc531fca34b7",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I think the API would be better if this and `getCommonSourceDirectory` weren't optional members of this interface, and were just passed in as values in the one place they're needed.",
        "createdAt" : "2018-08-09T23:41:34Z",
        "updatedAt" : "2018-08-09T23:41:35Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "a64ff6a8-11ba-43e9-af5d-7494058d577e",
        "parentId" : "208141c7-c655-47bc-ab37-dc531fca34b7",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Hmmmmm they're on the interface because that interface is how the declaration emitter shuffles bits of its emit host into the checker to fulfill these needs. And I don't _particularly_ want to pass in a second host object with the kinda-nice-to-have-for-one-of-the-entry-points methods (especially since `{moduleResolverHost: host, declarationModuleResolverHost: host}` in `declarations.ts` would look like we were going mad).\r\n",
        "createdAt" : "2018-08-10T01:32:28Z",
        "updatedAt" : "2018-08-10T01:32:28Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "19a9f1e1-875d-4f2b-9563-0896a14910b8",
        "parentId" : "208141c7-c655-47bc-ab37-dc531fca34b7",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I didn't mean to add a second host for those methods, but that a host isn't necessary at all. Both methods are immediately called in the first function and not used by anything else in `moduleSpecifiers`.\r\nMaking the method optional seems to cover up problems, such as the fact that `getCommonSourceDirectory` isn't defined on `TypeCheckerHost` (although it might happen to be defined at runtime anyway, though possibly with a different type), and users of other functions will think they need to provide these methods even when they're unused outside of `getModuleSpecifierForDeclarationFile`. It also looks like `host.getSourceFiles()` is non-optional so testing for its existence is dead code.",
        "createdAt" : "2018-08-10T15:29:31Z",
        "updatedAt" : "2018-08-10T15:29:31Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "dc73168d-555f-412a-a826-4aa2567eabd7",
        "parentId" : "208141c7-c655-47bc-ab37-dc531fca34b7",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "A host is merely a group of argument methods to delegate to, no? If I need two, it's reasonable to group them into a second host object.",
        "createdAt" : "2018-08-10T16:15:02Z",
        "updatedAt" : "2018-08-10T16:15:03Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f58f73e39b8355c171918d6e18a59463e78207dd",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +5334,5338 @@        fileExists?(path: string): boolean;\n        readFile?(path: string): string | undefined;\n        getSourceFiles?(): ReadonlyArray<SourceFile>; // Used for cached resolutions to find symlinks without traversing the fs (again)\n        getCommonSourceDirectory?(): string;\n    }"
  },
  {
    "id" : "0f31ca2e-ba1f-4bd6-9944-e3b44b0c86bf",
    "prId" : 26283,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26283#pullrequestreview-145016250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16cf068c-c22a-4508-8576-10f4419b2c3b",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Only the first type parameter in a list is constrained by the constraint. Can you add a test for that? That is, `/** @template {number} T,U */` only constrains T. ",
        "createdAt" : "2018-08-08T15:19:34Z",
        "updatedAt" : "2018-08-09T22:37:26Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "49b4db3a-14c0-4dab-96a3-b82969ea8b02",
        "parentId" : "16cf068c-c22a-4508-8576-10f4419b2c3b",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "That was done in #24600 for the reason that reusing a node would be bad -- maybe not necessary now?",
        "createdAt" : "2018-08-09T19:10:18Z",
        "updatedAt" : "2018-08-09T22:37:26Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "6cdaabb8-40bd-4bfa-9e78-142645ffecef",
        "parentId" : "16cf068c-c22a-4508-8576-10f4419b2c3b",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "The test `jsdocTemplateTag3`, added in #24600, will have fewer errors if this is changed, so it's already being tested.",
        "createdAt" : "2018-08-09T19:13:07Z",
        "updatedAt" : "2018-08-09T22:37:26Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "179b1a3b-89a0-4797-963b-528adcb2b2d5",
        "parentId" : "16cf068c-c22a-4508-8576-10f4419b2c3b",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I don't like applying the constraint to multiple parameters even if there's no implementation reason that it's easier.",
        "createdAt" : "2018-08-09T20:39:57Z",
        "updatedAt" : "2018-08-09T22:37:26Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6e3705193b0df7f4589e67a79d0ba7bfcb45702",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2365,2369 @@    export interface JSDocTemplateTag extends JSDocTag {\n        kind: SyntaxKind.JSDocTemplateTag;\n        constraint: TypeNode | undefined;\n        typeParameters: NodeArray<TypeParameterDeclaration>;\n    }"
  },
  {
    "id" : "ea8db575-3a5a-4197-82d0-ea4576400a4b",
    "prId" : 25886,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25886#pullrequestreview-171901458",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "891758cf-40b7-4459-bd93-accdff39eebb",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "nope.. that is bad. on V8 this will be a not be represented as an int any more, and the smi (SMall Integer) conversion will impact performance. V8 uses one bit for sign, and one for differentiating pointers from integers, so that leaves us with 30 bits to use.",
        "createdAt" : "2018-07-24T22:27:26Z",
        "updatedAt" : "2018-11-05T20:24:02Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "dc3b2d41-b3a5-4d12-b781-5da1becca94b",
        "parentId" : "891758cf-40b7-4459-bd93-accdff39eebb",
        "authorId" : "2a9ff7d0-9e5d-4e6a-9c76-06f809e7ccca",
        "body" : "Hmm, any suggestions for how to fix that?",
        "createdAt" : "2018-07-24T22:31:41Z",
        "updatedAt" : "2018-11-05T20:24:02Z",
        "lastEditedBy" : "2a9ff7d0-9e5d-4e6a-9c76-06f809e7ccca",
        "tags" : [
        ]
      },
      {
        "id" : "3b8ff691-efd0-4349-8c37-d68027b969b6",
        "parentId" : "891758cf-40b7-4459-bd93-accdff39eebb",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Usually we extract a set of flags into a new field that only exists on some subset of types. Similar to `ObjectFlags`. Given the number of them, I think literals are _probably_ ripe for this.",
        "createdAt" : "2018-07-25T05:16:52Z",
        "updatedAt" : "2018-11-05T20:24:02Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "d5e59187-f9a8-44e5-bef2-1e69437b2318",
        "parentId" : "891758cf-40b7-4459-bd93-accdff39eebb",
        "authorId" : "2a9ff7d0-9e5d-4e6a-9c76-06f809e7ccca",
        "body" : "Presumably this could be done as a separate pull request. I'd rather avoid growing this one since it's already quite large.",
        "createdAt" : "2018-07-25T05:33:38Z",
        "updatedAt" : "2018-11-05T20:24:02Z",
        "lastEditedBy" : "2a9ff7d0-9e5d-4e6a-9c76-06f809e7ccca",
        "tags" : [
        ]
      },
      {
        "id" : "af4dc18d-2e7b-4243-82ce-32c69aa15f21",
        "parentId" : "891758cf-40b7-4459-bd93-accdff39eebb",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Can you please create issue tracking this. Thanks",
        "createdAt" : "2018-11-01T19:36:08Z",
        "updatedAt" : "2018-11-05T20:24:02Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "a794c67d-7f64-482f-90b3-cb5550dd4413",
        "parentId" : "891758cf-40b7-4459-bd93-accdff39eebb",
        "authorId" : "2a9ff7d0-9e5d-4e6a-9c76-06f809e7ccca",
        "body" : "#28354 is tracking this now",
        "createdAt" : "2018-11-06T08:19:54Z",
        "updatedAt" : "2018-11-06T08:19:54Z",
        "lastEditedBy" : "2a9ff7d0-9e5d-4e6a-9c76-06f809e7ccca",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb99c4123003ade3e471cf17472be6d3f72d96ff",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +3845,3849 @@        ContainsObjectLiteral   = 1 << 30,  // Type is or contains object literal type\n        /* @internal */\n        ContainsAnyFunctionType = 1 << 31,  // Type is or contains the anyFunctionType\n\n        /* @internal */"
  },
  {
    "id" : "5e338231-2092-4382-bfa4-027aa06bda6b",
    "prId" : 24810,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24810#pullrequestreview-127305953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c10a23f-3720-4ba2-86ae-82d27bdd8408",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Moving the comment next to the method it actually describes.",
        "createdAt" : "2018-06-08T20:33:12Z",
        "updatedAt" : "2018-06-08T20:33:12Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "228f311ac35beb3e1bcdffdc3941735f2ce89d14",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3049,3053 @@\n        /* @internal */ isArrayLikeType(type: Type): boolean;\n        /**\n         * For a union, will include a property if it's defined in *any* of the member types.\n         * So for `{ a } | { b }`, this will include both `a` and `b`."
  },
  {
    "id" : "e4c6747a-c3d2-495f-8a61-54d7e3adf522",
    "prId" : 24137,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24137#pullrequestreview-120725820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c9888a9-11c0-4980-93eb-a1ac9aa7fd66",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "With this, `TypeFlags` is full. We're going to need a new field for flags like this (very) soon (as I don't see any that are obviously `ObjectFlags`). (This and the propagating flags are effectively a union's equivalent of `ObjectFlags`)",
        "createdAt" : "2018-05-15T20:19:00Z",
        "updatedAt" : "2018-05-16T23:26:53Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "ac0ea48e-1f44-4666-b4f4-82ae6a47f7f7",
        "parentId" : "2c9888a9-11c0-4980-93eb-a1ac9aa7fd66",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Well, `TypeFlags` being full is nothing new. Seems like it has been for the last many years. I actually think it is fine to put all of the flags to good use and then work out alternate solutions as the need arises. This particular flag could easily be moved to a property local to union types, but there's no reason to do so now.",
        "createdAt" : "2018-05-16T16:43:54Z",
        "updatedAt" : "2018-05-16T23:26:53Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "027829fbcd0a84172ab4a36d60a0ac915ca7ea09",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3675,3679 @@        NonPrimitive            = 1 << 27,  // intrinsic object type\n        /* @internal */\n        UnionOfUnitTypes        = 1 << 28,  // Type is union of unit types\n        /* @internal */\n        GenericMappedType       = 1 << 29,  // Flag used by maybeTypeOfKind"
  },
  {
    "id" : "d2b1ddaf-2d72-4925-b496-c6dce3159dbd",
    "prId" : 23902,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23902#pullrequestreview-118633849",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c85d7b00-7e78-4e26-a0f3-eff3d6bb5aef",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Why does this need a flag?",
        "createdAt" : "2018-05-07T15:15:14Z",
        "updatedAt" : "2018-05-09T23:20:06Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "6daf0c1e-1eca-4a02-b775-5f519afa8fd4",
        "parentId" : "c85d7b00-7e78-4e26-a0f3-eff3d6bb5aef",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "We don't wanna bother renaming the conflicts in quickinfo and signature help, at least in my opinion.",
        "createdAt" : "2018-05-09T07:33:18Z",
        "updatedAt" : "2018-05-09T23:20:06Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae142660e0e87e990583e43c15e55ea7035a943a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3032,3036 @@        NoTruncation                            = 1 << 0,   // Don't truncate result\n        WriteArrayAsGenericType                 = 1 << 1,   // Write Array<T> instead T[]\n        GenerateNamesForShadowedTypeParams      = 1 << 2,   // When a type parameter T is shadowing another T, generate a name for it so it can still be referenced\n        UseStructuralFallback                   = 1 << 3,   // When an alias cannot be named by its symbol, rather than report an error, fallback to a structural printout if possible\n        // empty space"
  },
  {
    "id" : "4e0ffae2-b10d-4efd-93f1-11a25cdb5e3d",
    "prId" : 23672,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23672#pullrequestreview-115158170",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5938aae5-36e3-4fd6-8b10-afc981485b32",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Ahhh.... can we go with the term `UndefinedLike` instead? Since `void` is a TS-only and, conceptually, corresponds with a function return of no value, which maps to a runtime value of `undefined` (whereas `undefined` doesn't really imply anything `void`-y on its own).",
        "createdAt" : "2018-04-25T00:49:28Z",
        "updatedAt" : "2018-04-25T18:03:58Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "8771e7f7-87cd-4adc-a250-7c405882a8ba",
        "parentId" : "5938aae5-36e3-4fd6-8b10-afc981485b32",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Sure. I went with void-like because `void` is the supertype, but either way works.",
        "createdAt" : "2018-04-25T12:45:27Z",
        "updatedAt" : "2018-04-25T18:03:58Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbcb1bb25a6e74f956e8819a84fcf9ce3c897e79",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3614,3618 @@        EnumLike = Enum | EnumLiteral,\n        ESSymbolLike = ESSymbol | UniqueESSymbol,\n        VoidLike = Void | Undefined,\n        /* @internal */\n        DisjointDomains = NonPrimitive | StringLike | NumberLike | BooleanLike | ESSymbolLike | VoidLike | Null,"
  },
  {
    "id" : "d66b530f-eaf7-4346-a788-bcc05e1b082e",
    "prId" : 23672,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23672#pullrequestreview-115644849",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a24d06c5-1a34-49b8-9bea-ac56a251590b",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Object types can also have disjoint domains, eg \r\n```ts\r\ntype A = { x: string };\r\ntype B = { x: number };\r\ntype C = { x: boolean };\r\nfunction f5<T extends A | B>(x: T & (B | C)) {\r\n    const y: B = x; // expected to work, currently does not, doesn't work with this PR\r\n}\r\n```\r\n(important if you just consider each of those types of `x` as different tags for tagged unions, eg `\"a\"`, `\"b\"`, and `\"c\"`)\r\n\r\nWhat we have here is certainly better, but definitely still not quite complete. ",
        "createdAt" : "2018-04-26T04:04:06Z",
        "updatedAt" : "2018-04-26T04:05:35Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "fd77071a-8249-4780-a0a9-1ebee4bd4d48",
        "parentId" : "a24d06c5-1a34-49b8-9bea-ac56a251590b",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Yes, the intent here is simply to do better for the primitive types. I don't think it is feasible to reason about disjoint domains for arbitrary object types since they can be recursive or infinite. Also, we still allow stuff like `string & { __tag__?: void }` even though that's technically an impossible type.",
        "createdAt" : "2018-04-26T13:22:19Z",
        "updatedAt" : "2018-04-26T13:22:19Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "ead24c8f-d618-47fa-afb9-b09230073d60",
        "parentId" : "a24d06c5-1a34-49b8-9bea-ac56a251590b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "> Also, we still allow stuff like string & { __tag__?: void } even though that's technically an impossible type.\r\n\r\nI feel like you can justify that by claiming that `{}` types indicate structure, but no top level domain (which is mostly true - `{ toString(): string }` matches primitives AFAIK), so it's just string-augmented-with-extras. So it doesn't feel so bad.\r\n\r\nAlso, it's probably feasible for object types - we do compare them based on that structure, after all, and we're even within that comparison when this simplifier/inliner gets called. And it's not like `{ x: number } & { x: string }` should simplify to `never` - it should be `{ x: never }` (and `{ x: number } | { x: never }` should be `{ x: number }`) - it's exactly what we'd do when we actually compare the properties (or asked for `obj.x`), but not deferred until access so that the top-level union/intersection relationship works out (and this is all about doing union/intersection simplification more eagerly to make comparisons work, so it kinda fits right in).\r\n\r\nI don't suppose we _need_ to fix it as part of this (after all, it's already better than `master`), but we should at least add the test and know that the fix is incomplete, so we can either revisit it or keep its behavior stable.",
        "createdAt" : "2018-04-26T16:06:30Z",
        "updatedAt" : "2018-04-26T16:06:30Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbcb1bb25a6e74f956e8819a84fcf9ce3c897e79",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +3616,3620 @@        VoidLike = Void | Undefined,\n        /* @internal */\n        DisjointDomains = NonPrimitive | StringLike | NumberLike | BooleanLike | ESSymbolLike | VoidLike | Null,\n        UnionOrIntersection = Union | Intersection,\n        StructuredType = Object | Union | Intersection,"
  },
  {
    "id" : "2bb828d7-f457-4ca4-ba9f-c88a1bdd8524",
    "prId" : 22592,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22592#pullrequestreview-109074704",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fee0f1b1-89d1-4863-b5a3-fcaaa45f1f74",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "@weswigham is in intentional that this is the only `SyntaxKind` with the suffix Node?",
        "createdAt" : "2018-04-03T18:08:58Z",
        "updatedAt" : "2018-04-03T18:08:58Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      },
      {
        "id" : "2e2c4c34-63df-48f2-8792-a7c809801602",
        "parentId" : "fee0f1b1-89d1-4863-b5a3-fcaaa45f1f74",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "T.T no, I just unconsciously reused the interface name (which always uses `Node`) for the syntax kind. Will fix.",
        "createdAt" : "2018-04-03T18:54:36Z",
        "updatedAt" : "2018-04-03T18:54:36Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c143a0cf02b5f1d135d8ade159fbb440ebddf90",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +285,289 @@        MappedType,\n        LiteralType,\n        ImportTypeNode,\n        // Binding patterns\n        ObjectBindingPattern,"
  },
  {
    "id" : "d217aacf-4226-4855-8c97-79618a232f9a",
    "prId" : 22495,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22495#pullrequestreview-104696756",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6e66b74-407a-4c37-bd5d-673d1aaeca95",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This seems to be incorrect from https://github.com/Microsoft/TypeScript/pull/22495/files#diff-08a3cc4f1f9a51dbb468c2810f5229d3R1607 where moduleSpecifier is not present ?",
        "createdAt" : "2018-03-16T18:50:48Z",
        "updatedAt" : "2018-03-16T20:35:09Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "a0de4d38-481c-46e9-b7c2-5c95c6e5e10e",
        "parentId" : "a6e66b74-407a-4c37-bd5d-673d1aaeca95",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "It should be, added it there.",
        "createdAt" : "2018-03-16T19:47:17Z",
        "updatedAt" : "2018-03-16T20:35:09Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "49d7565a4581e0caae03dde7fca5f94f17e4a6fe",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +3152,3156 @@    /* @internal */\n    export type AnyValidImportOrReExport =\n        | (ImportDeclaration | ExportDeclaration) & { moduleSpecifier: StringLiteral }\n        | ImportEqualsDeclaration & { moduleReference: ExternalModuleReference & { expression: StringLiteral } }\n        | RequireOrImportCall;"
  },
  {
    "id" : "5c29474d-e7ed-4003-828c-b87ef9a11180",
    "prId" : 22197,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22197#pullrequestreview-99763362",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5b5cf51-9b90-4216-b52b-93e556647ebc",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Is mapper still optional? It looks like you got rid of the defined-check in getConstraintOfDistributiveConditionalType. Maybe it's only guaranteed to exist to distributive conditional types.",
        "createdAt" : "2018-02-27T16:47:52Z",
        "updatedAt" : "2018-03-01T14:47:22Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "6b0c4ee9-b701-4271-b08a-18741fb6d0e7",
        "parentId" : "d5b5cf51-9b90-4216-b52b-93e556647ebc",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Never mind, the check is now in `combineTypeMapper`.",
        "createdAt" : "2018-02-27T16:53:17Z",
        "updatedAt" : "2018-03-01T14:47:22Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c965aa691d4cc0721b77faa2eead4556bd58ed3",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +3844,3848 @@        resolvedFalseType?: Type;\n        /* @internal */\n        mapper?: TypeMapper;\n    }\n"
  },
  {
    "id" : "5ba1d45a-d377-45f6-a83a-ad17e5b8210a",
    "prId" : 22167,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22167#pullrequestreview-115750852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45bf45a1-2e6e-4a15-9e93-28007bc34b64",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I don't get the reason for this -- ObjectLiteralExpression can contain methods, so JsonObjectExpressionStatement is not actually that restrictive. Why not just use ExpressionStatement here?",
        "createdAt" : "2018-04-26T21:46:25Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4143ae0c15acae0015f5aa00e8e2391ef156388",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +2622,2626 @@\n    export interface JsonSourceFile extends SourceFile {\n        statements: NodeArray<JsonObjectExpressionStatement>;\n    }\n"
  },
  {
    "id" : "bcadc331-2b4f-4280-944f-56a35efedcd0",
    "prId" : 22167,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22167#pullrequestreview-116478054",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd19c67f-5717-4123-9b83-4d6d2d5a48b4",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i would just call it `JSON`",
        "createdAt" : "2018-04-30T23:08:25Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "4f779fae-6edd-4878-8610-9646191c0839",
        "parentId" : "fd19c67f-5717-4123-9b83-4d6d2d5a48b4",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "or `Json` for consistency ",
        "createdAt" : "2018-04-30T23:11:44Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "3bf47c6e-24a0-4752-b9af-59c8a7852a6a",
        "parentId" : "fd19c67f-5717-4123-9b83-4d6d2d5a48b4",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "https://github.com/Microsoft/TypeScript/pull/22167/files#diff-4b8bd1eea29904f1be39cd864e1a45c0R489 has this as JavaScriptFile isnt it more consitent to use JsonFile ?",
        "createdAt" : "2018-04-30T23:51:36Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "fe1d6b76-1ba5-4229-abb7-182e3e0dd44e",
        "parentId" : "fd19c67f-5717-4123-9b83-4d6d2d5a48b4",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "sure..",
        "createdAt" : "2018-05-01T00:22:01Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4143ae0c15acae0015f5aa00e8e2391ef156388",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +506,510 @@        /* @internal */ Ambient                       = 1 << 22, // If node was inside an ambient context -- a declaration file, or inside something with the `declare` modifier.\n        /* @internal */ InWithStatement               = 1 << 23, // If any ancestor of node was the `statement` of a WithStatement (not the `expression`)\n        JsonFile                                      = 1 << 24, // If node was parsed in a Json\n\n        BlockScoped = Let | Const,"
  },
  {
    "id" : "3038e34e-e505-4910-964b-32a8151f2288",
    "prId" : 21930,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21930#pullrequestreview-98032176",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d85a0c74-de03-488f-af66-bb63d42228b7",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "YES. But is there any case where we don't want to just use `OptimisticUnique`? Maybe we should make this the behavior of `Unique` after this PR.",
        "createdAt" : "2018-02-21T00:41:40Z",
        "updatedAt" : "2018-03-15T23:08:04Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "ecace0d7-545f-4f7e-b7e9-c0a9b44c3e2f",
        "parentId" : "d85a0c74-de03-488f-af66-bb63d42228b7",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "@aozgaa has a reasonable point that you potentially want the `Unique` behavior in some cases (not here) to indicate that the output was machine-generated to some extent.",
        "createdAt" : "2018-02-21T00:43:24Z",
        "updatedAt" : "2018-03-15T23:08:04Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d729cfb9b8d9064b79960f234b1e462ba2fe497",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +699,703 @@        Unique = 3,                         // Unique name based on the 'text' property.\n        Node = 4,                           // Unique name based on the node in the 'original' property.\n        OptimisticUnique = 5,               // Unique name based on the 'text' property, first instance won't use '_#' if there's no conflict\n        KindMask = 7,                       // Mask to extract the kind of identifier from its flags.\n"
  },
  {
    "id" : "7892fde1-62f2-4538-8abe-18ff3dfa686f",
    "prId" : 21496,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21496#pullrequestreview-93767526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c83e4c98-ff27-40ca-bf56-2d50d6f18f71",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "kinda strange to have these on priority, and not on inferenceInfo for instance.",
        "createdAt" : "2018-02-02T21:49:36Z",
        "updatedAt" : "2018-02-03T19:32:49Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ae8445ff7a73d606c00dc6a701792b53ffbc046",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +3888,3892 @@        MappedType        = 1 << 1,  // Reverse inference for mapped type\n        ReturnType        = 1 << 2,  // Inference made from return type of generic function\n        NoConstraints     = 1 << 3,  // Don't infer from constraints of instantiable types\n        AlwaysStrict      = 1 << 4,  // Always use strict rules for contravariant inferences\n    }"
  },
  {
    "id" : "0c01c310-cb60-4449-a749-3dbe31c23549",
    "prId" : 21496,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21496#pullrequestreview-93767645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb9cc182-4cf0-4105-a263-6fa1c84a6456",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i am not sure i understand that one really.. i think it might be easier to check with you in person.",
        "createdAt" : "2018-02-02T21:50:04Z",
        "updatedAt" : "2018-02-03T19:32:49Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ae8445ff7a73d606c00dc6a701792b53ffbc046",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +3889,3893 @@        ReturnType        = 1 << 2,  // Inference made from return type of generic function\n        NoConstraints     = 1 << 3,  // Don't infer from constraints of instantiable types\n        AlwaysStrict      = 1 << 4,  // Always use strict rules for contravariant inferences\n    }\n"
  },
  {
    "id" : "4a4555cd-fd87-428b-829e-8376f2e1dbff",
    "prId" : 21383,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21383#pullrequestreview-93801613",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "713732f7-6e5a-4b41-b439-a98857502b8f",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I kind of like 0. It’s pretty succinct.",
        "createdAt" : "2018-02-01T23:53:26Z",
        "updatedAt" : "2018-02-05T23:05:48Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "c611f58e-6286-403e-baec-82b721b9ace7",
        "parentId" : "713732f7-6e5a-4b41-b439-a98857502b8f",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "But we have `None` for so many other enums - plus, it also clarifies what `0` actually does at the callsite to someone reading the code.",
        "createdAt" : "2018-02-03T01:44:07Z",
        "updatedAt" : "2018-02-05T23:05:48Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1c97364c7a509fd811b9247c1088565196b6350",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3905,3909 @@\n    export const enum InferenceFlags {\n        None            =      0,  // No special inference behaviors\n        InferUnionTypes = 1 << 0,  // Infer union types for disjoint candidates (otherwise unknownType)\n        NoDefault       = 1 << 1,  // Infer unknownType for no inferences (otherwise anyType or emptyObjectType)"
  },
  {
    "id" : "5d27f068-71b5-42be-a5ca-7b6987822776",
    "prId" : 21316,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21316#pullrequestreview-90315478",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da3a6b5d-74a8-48d8-99a4-dd4737df0efb",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "One of the problems that we discussed a few weeks back was that for something like\r\n\r\n```ts\r\ntype ElementType<T> = T extends any[] ? T[number]: never\r\n```\r\n\r\n`T` would be viewed as `T & any[]` in the true branch type, which would result in something like `any & T[number]` which really just becomes `any`. If I understand correctly, I think key thing to inform other contributors about what you've done here is that substitution types are really just used for extra validation, and are ignored when a type is requested from `getConditionalType`.\r\n\r\nI don't think that's obvious from just looking at this (you have to jump to `eraseSubstitutionType`), so I would try to mention this explicitly. Maybe something like\r\n\r\n```ts\r\n// Substitution types are created for type parameter references that occur in the true branch\r\n// of a conditional type, but are *only* used for validation against type parameters and type operators.\r\n```\r\n\r\netc.",
        "createdAt" : "2018-01-20T22:16:23Z",
        "updatedAt" : "2018-02-03T16:41:41Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4dc67aab233f5a8834dff16531baf99b16fea78",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +3810,3814 @@    // Substitution types are created for type parameter references that occur in the true branch\n    // of a conditional type. For example, in 'T extends string ? Foo<T> : Bar<T>', the reference to\n    // T in Foo<T> is resolved as a substitution type that substitutes 'string & T' for T. Thus, if\n    // Foo has a 'string' constraint on its type parameter, T will satisfy it. Substitution types\n    // disappear upon instantiation (just like type parameters)."
  },
  {
    "id" : "012a4750-ee28-4abf-80c3-6682edc2959d",
    "prId" : 21316,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21316#pullrequestreview-90916000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf192ad1-3a89-4f86-b86d-74dab9a236cd",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Why not 28 here?",
        "createdAt" : "2018-01-23T16:10:24Z",
        "updatedAt" : "2018-02-03T16:41:41Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "cb366882-b0f2-4796-96f1-d861d5724288",
        "parentId" : "bf192ad1-3a89-4f86-b86d-74dab9a236cd",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "I hate 28.",
        "createdAt" : "2018-01-23T17:40:56Z",
        "updatedAt" : "2018-02-03T16:41:41Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4dc67aab233f5a8834dff16531baf99b16fea78",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +3506,3510 @@        NonPrimitive            = 1 << 27,  // intrinsic object type\n        /* @internal */\n        GenericMappedType       = 1 << 29,  // Flag used by maybeTypeOfKind\n\n        /* @internal */"
  },
  {
    "id" : "4974312b-97ba-46c9-b241-833d7979e8fb",
    "prId" : 21316,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21316#pullrequestreview-90880242",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80b82ff5-88ea-4f99-a14f-ca45282937e0",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "This line is not needed",
        "createdAt" : "2018-01-23T16:11:59Z",
        "updatedAt" : "2018-02-03T16:41:41Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4dc67aab233f5a8834dff16531baf99b16fea78",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +3543,3547 @@        /* @internal */\n        PropagatingFlags = ContainsWideningType | ContainsObjectLiteral | ContainsAnyFunctionType,\n        /* @internal */\n    }\n"
  },
  {
    "id" : "0589891f-a7f8-4012-8bfd-9260a4ac06c4",
    "prId" : 21316,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21316#pullrequestreview-93821761",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc300668-e7a6-4733-8491-73d5dc5dfa38",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I'm still concerned that baking the `S extends T` head of a conditional type into `ConditionalTypeNode` would mean an API change to evolve conditional types to have other types of conditions in the future as that would affect tools that integrate TypeScript (like linters).",
        "createdAt" : "2018-01-31T21:18:56Z",
        "updatedAt" : "2018-02-03T16:41:41Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "0eb7689d-3c4e-40f0-ad6f-61268dc3b3de",
        "parentId" : "bc300668-e7a6-4733-8491-73d5dc5dfa38",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "It's hard to speculate about what we might do here (i.e. nothing vs. additional conditions vs. discrete conditional operators), so I'm not keen on introducing more abstraction.",
        "createdAt" : "2018-02-03T17:12:55Z",
        "updatedAt" : "2018-02-03T17:12:55Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4dc67aab233f5a8834dff16531baf99b16fea78",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1120,1124 @@    export interface ConditionalTypeNode extends TypeNode {\n        kind: SyntaxKind.ConditionalType;\n        checkType: TypeNode;\n        extendsType: TypeNode;\n        trueType: TypeNode;"
  },
  {
    "id" : "710eef6e-4b45-4e8c-9383-9912bfc2f28f",
    "prId" : 20706,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20706#pullrequestreview-83937940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91ef911a-f036-479d-85da-eee042888d2c",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "performance? I remember doing this (or similar) and found it added quite a bit of time to our build.",
        "createdAt" : "2017-12-15T18:14:48Z",
        "updatedAt" : "2017-12-15T22:17:12Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "f4baac6c-cc59-415d-b00e-61bc9d7ff55c",
        "parentId" : "91ef911a-f036-479d-85da-eee042888d2c",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "There's no noticeable difference in self-compilation (maybe slightly better? The difference is in the noise.).",
        "createdAt" : "2017-12-15T22:05:54Z",
        "updatedAt" : "2017-12-15T22:17:12Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "07c7c6d2e9b2459a7cf7e0a3ee12e12a4a34c339",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +886,890 @@    }\n\n    export type VariableLikeDeclaration =\n        | VariableDeclaration\n        | ParameterDeclaration"
  },
  {
    "id" : "0509b92d-5fbc-43c0-ac2b-8b9e4be3b0ec",
    "prId" : 20162,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20162#pullrequestreview-78244730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30d490ae-246b-4788-868f-49e30216611c",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Why not just take a `TypeParameter` as input?",
        "createdAt" : "2017-11-21T15:00:38Z",
        "updatedAt" : "2017-11-21T15:00:38Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "dae00850-359b-40d1-b234-d80181f08e03",
        "parentId" : "30d490ae-246b-4788-868f-49e30216611c",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Just to be the same as `getBaseConstraintOfType`. Which, BTW, `getBaseConstraintOfType` technically returns the `resolvedBaseConstraint`, while `getConstraintFromTypeParameter` would actually return the `constraint`; the different being that `getBaseConstraintOfType` follows all the constraints on your constraints to get the actual final constraint, while `getConstraintFromTypeParameter` is just the immediate constraint. Should we be exposing both?",
        "createdAt" : "2017-11-21T20:16:06Z",
        "updatedAt" : "2017-11-21T20:16:06Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0de197736bdbd69b43a03b6f8083226b45f858d4",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2768,2772 @@        getSuggestionForNonexistentSymbol(location: Node, name: string, meaning: SymbolFlags): string | undefined;\n        getBaseConstraintOfType(type: Type): Type | undefined;\n        getDefaultFromTypeParameter(type: Type): Type | undefined;\n\n        /* @internal */ getAnyType(): Type;"
  },
  {
    "id" : "093556b1-c4f1-4e31-9851-a70998f82457",
    "prId" : 19228,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19228#pullrequestreview-69706895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de8a8483-90d5-4cf5-901a-ae8ece85b4ba",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I think this is populated by passing a `ScriptInfo` as a `JsFileExtensionInfo`.  If that's the case, is this actually optional?  Is the question mark just there in case a consumer has created their own implementation of the interface (i.e. for back compat)?",
        "createdAt" : "2017-10-16T21:16:21Z",
        "updatedAt" : "2017-10-16T21:16:21Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "fa67daca-7601-4a4f-8e05-b523554ef65b",
        "parentId" : "de8a8483-90d5-4cf5-901a-ae8ece85b4ba",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I misunderstood - it's passed by the client.",
        "createdAt" : "2017-10-16T21:22:44Z",
        "updatedAt" : "2017-10-16T21:22:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "5a4afa0f-8d2d-4b40-aa21-22789c4ed3ea",
        "parentId" : "de8a8483-90d5-4cf5-901a-ae8ece85b4ba",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "For back-compat reasons for this late fix, I've tried to make the changes as benign as possible, rather than requiring extra fields. I may look for areas when porting to master where changes can be more explicit in changing expectations.",
        "createdAt" : "2017-10-16T21:32:21Z",
        "updatedAt" : "2017-10-16T21:32:21Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7566760911f932c2cf639e254c15d5a571b063ad",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3500,3504 @@        extension: string;\n        isMixedContent: boolean;\n        scriptKind?: ScriptKind;\n    }\n"
  },
  {
    "id" : "4acfecc5-210f-4897-8291-54b544f071fc",
    "prId" : 18903,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18903#pullrequestreview-66724260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b190ec7-5e1d-458f-beaa-8559a7ded216",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Should this be optional? This member <a href=\"https://github.com/Microsoft/TypeScript/blob/ae3f29ade6a8af80a46ce55cf23dd44ebdfe4036/src/compiler/commandLineParser.ts#L1429\">later feeds</a> into an optional `configFileSpec` declared as optional/internal here above at line 3835.",
        "createdAt" : "2017-10-03T11:11:49Z",
        "updatedAt" : "2017-10-03T11:12:24Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "dace2aef-8b20-4db3-8039-f6ce95996442",
        "parentId" : "9b190ec7-5e1d-458f-beaa-8559a7ded216",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "In fact <a href=\"https://github.com/Microsoft/TypeScript/search?utf8=%E2%9C%93&q=ExpandResult\">it looks like</a> whole `ExpandResult` is never exposed anywhere through any API, except for the declaration of the interface itself.\r\n\r\nSo the `/* @internal */` mark should go on whole `ExpandResult`.",
        "createdAt" : "2017-10-03T11:19:53Z",
        "updatedAt" : "2017-10-03T11:19:53Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a290615476e7d62098115220886505429fe83089",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +3860,3864 @@        fileNames: string[];\n        wildcardDirectories: MapLike<WatchDirectoryFlags>;\n        /* @internal */ spec: ConfigFileSpecs;\n    }\n"
  },
  {
    "id" : "cda9db2a-fa3d-4a09-b138-c3a58b8bc34c",
    "prId" : 18860,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18860#pullrequestreview-68455607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e64ab1a-8fce-4069-b19c-50cb1c2009aa",
        "parentId" : null,
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "Should `NotDelimited` be part of the mask?",
        "createdAt" : "2017-10-10T00:14:50Z",
        "updatedAt" : "2018-01-09T23:02:35Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "dc738ab0-1e2e-4e85-a18d-1a937030d6d5",
        "parentId" : "0e64ab1a-8fce-4069-b19c-50cb1c2009aa",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "It's `0`, so..... it wouldn't _actually_ be part of the mask.",
        "createdAt" : "2017-10-10T23:25:52Z",
        "updatedAt" : "2018-01-09T23:02:35Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "a481f7f01dbaea6177d7897c584355e5e7e605c2",
    "line" : 386,
    "diffHunk" : "@@ -1,1 +4978,4982 @@        AmpersandDelimited = 1 << 3,    // Each list item is space-and-ampersand (\" &\") delimited.\n        CommaDelimited = 1 << 4,        // Each list item is comma (\",\") delimited.\n        DelimitersMask = BarDelimited | AmpersandDelimited | CommaDelimited,\n\n        AllowTrailingComma = 1 << 5,    // Write a trailing comma (\",\") if present."
  },
  {
    "id" : "2bf9fd9e-0d1f-43a9-be42-788d82b4fdc6",
    "prId" : 18860,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18860#pullrequestreview-75915364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68963076-6dcc-4ce1-8ef6-2ec6bc1de8d7",
        "parentId" : null,
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "nit: why the extra newline?",
        "createdAt" : "2017-10-10T00:15:36Z",
        "updatedAt" : "2018-01-09T23:02:35Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "9da6f9ce-8a88-4a84-862d-55b670b04fee",
        "parentId" : "68963076-6dcc-4ce1-8ef6-2ec6bc1de8d7",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "It was there in the version of this which used to be within `emitter.ts`. I assume to signify some logical separation between the literal member formats and the other formats.",
        "createdAt" : "2017-10-10T23:25:19Z",
        "updatedAt" : "2018-01-09T23:02:35Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "8b8f1e35-5639-41a4-9c74-62de8ef7054c",
        "parentId" : "68963076-6dcc-4ce1-8ef6-2ec6bc1de8d7",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I don't think it serves a specific purpose.",
        "createdAt" : "2017-11-11T02:07:47Z",
        "updatedAt" : "2018-01-09T23:02:35Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a481f7f01dbaea6177d7897c584355e5e7e605c2",
    "line" : 419,
    "diffHunk" : "@@ -1,1 +5011,5015 @@        SingleLineTypeLiteralMembers = SingleLine | SpaceBetweenBraces | SpaceBetweenSiblings | Indented,\n        MultiLineTypeLiteralMembers = MultiLine | Indented,\n\n        TupleTypeElements = CommaDelimited | SpaceBetweenSiblings | SingleLine | Indented,\n        UnionTypeConstituents = BarDelimited | SpaceBetweenSiblings | SingleLine,"
  },
  {
    "id" : "c669029a-080c-44b2-8591-98026d48dd8a",
    "prId" : 18775,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18775#pullrequestreview-65956578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "948f63e6-2ae9-4938-a290-e5dd6d844484",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "don't you want a subclass of ExpressionWithTypeArguments that has the override `expression: Identifier | PropertyAccessEntityNameExpression` ? Seems like intersection would be too permissive.",
        "createdAt" : "2017-09-28T17:26:40Z",
        "updatedAt" : "2017-09-28T18:33:28Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "187f8bea-d0fe-40e2-aa2e-875ffba64a38",
        "parentId" : "948f63e6-2ae9-4938-a290-e5dd6d844484",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "How is intersection permissive where `extends` isn't? Could you give an example?",
        "createdAt" : "2017-09-28T18:21:29Z",
        "updatedAt" : "2017-09-28T18:33:28Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "518e3414-6421-4bd6-ac7e-8a1d1eec7a67",
        "parentId" : "948f63e6-2ae9-4938-a290-e5dd6d844484",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I forgot that `Identifier` is assignable to `Expression & Identifier` but (for example) `BinaryExpression` isn't. Never mind.",
        "createdAt" : "2017-09-28T18:30:10Z",
        "updatedAt" : "2017-09-28T18:33:28Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2e4fed2f9436432717ca22dba30db57488028f5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2162,2166 @@    export interface JSDocAugmentsTag extends JSDocTag {\n        kind: SyntaxKind.JSDocAugmentsTag;\n        class: ExpressionWithTypeArguments & { expression: Identifier | PropertyAccessEntityNameExpression };\n    }\n"
  },
  {
    "id" : "e6f80a46-6539-4fe2-b966-af1e88cf5d0d",
    "prId" : 18654,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18654#pullrequestreview-66290586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f14e27a-33db-485d-8aac-cdcdf0a16a7b",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "should probably be `@internal`",
        "createdAt" : "2017-09-28T23:13:39Z",
        "updatedAt" : "2017-10-02T20:40:43Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "f0e676e0-f091-4330-b19d-48ff3791c0da",
        "parentId" : "4f14e27a-33db-485d-8aac-cdcdf0a16a7b",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Probably, but not really related to this PR since the type already existed before. I'm going to leave it be for now.",
        "createdAt" : "2017-09-29T23:04:38Z",
        "updatedAt" : "2017-10-02T20:40:43Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2344e07a4d02d5cc453c6e7cc5eda6d0d373de6",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +3534,3538 @@    }\n\n    export const enum InferencePriority {\n        Contravariant     = 1 << 0,  // Inference from contravariant position\n        NakedTypeVariable = 1 << 1,  // Naked type variable in union or intersection type"
  },
  {
    "id" : "a420ac68-d8fb-4c84-8356-56d7ebb41247",
    "prId" : 18300,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18300#pullrequestreview-66296388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98130b3d-84a0-4926-81f9-85e5bdbfa324",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "this change is an example of why aligned comments make me sad :(",
        "createdAt" : "2017-09-07T16:13:49Z",
        "updatedAt" : "2017-10-03T07:37:45Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "269a9298-fa46-4c7d-9f0f-e7b370323709",
        "parentId" : "98130b3d-84a0-4926-81f9-85e5bdbfa324",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : ":(",
        "createdAt" : "2017-09-30T00:06:36Z",
        "updatedAt" : "2017-10-03T07:37:45Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fd638c7a8449e0d15f0f32e2557f08f26c95c9e",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +4272,4276 @@    /* @internal */\n    export const enum ExternalEmitHelpers {\n        Extends = 1 << 0,               // __extends (used by the ES2015 class transformation)\n        Assign = 1 << 1,                // __assign (used by Jsx and ESNext object spread transformations)\n        Rest = 1 << 2,                  // __rest (used by ESNext object rest transformation)"
  },
  {
    "id" : "4a67c461-32e7-470f-9498-5a1bc5827b42",
    "prId" : 18231,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18231#pullrequestreview-60647624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75c8d9c1-6834-45a3-846b-77ca0fd13c78",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "with this change, it would now be easier to read as `type TypeMapper = (t: TypeParameter) => Type;`",
        "createdAt" : "2017-09-05T15:52:51Z",
        "updatedAt" : "2017-09-05T17:36:32Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "82281d9910e9d5dd3289368dad63b18fb87dbc29",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +3467,3471 @@\n    /* @internal */\n    export interface TypeMapper {\n        (t: TypeParameter): Type;\n    }"
  },
  {
    "id" : "1106fa5d-edf1-4386-85f6-33222056e9a5",
    "prId" : 18172,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18172#pullrequestreview-61273049",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd337cd3-654b-42ec-a793-b05e842edf9f",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "`& Node` ?",
        "createdAt" : "2017-09-07T00:00:22Z",
        "updatedAt" : "2017-09-07T17:14:47Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "85789876-6c56-497a-8b13-1a9a92c69422",
        "parentId" : "fd337cd3-654b-42ec-a793-b05e842edf9f",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "All members of `HasJSDoc` are already nodes. The interface `HasJSDocNodes` would require that. Is that confusing? Should I rename the second to something like `JSDocContainer`?",
        "createdAt" : "2017-09-07T05:03:18Z",
        "updatedAt" : "2017-09-07T17:14:47Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "3ff4da00-d27e-43d2-a1f4-95de6a34ba6a",
        "parentId" : "fd337cd3-654b-42ec-a793-b05e842edf9f",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "JSDocContainer seems like a better name",
        "createdAt" : "2017-09-07T16:10:53Z",
        "updatedAt" : "2017-09-07T17:14:47Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfccaf4b01e5da690b8a0f22f9787632010a449f",
    "line" : 388,
    "diffHunk" : "@@ -1,1 +2144,2148 @@    export interface JSDoc extends Node {\n        kind: SyntaxKind.JSDocComment;\n        parent?: HasJSDoc;\n        tags: NodeArray<JSDocTag> | undefined;\n        comment: string | undefined;"
  },
  {
    "id" : "b26b3f77-784e-4d0b-9f64-f6489207e130",
    "prId" : 17750,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17750#pullrequestreview-55916551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f01fa7ec-2fbc-4cfe-99f1-38315347e121",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Are backtick strings uninteresting?  Would it make sense to store a quote character?",
        "createdAt" : "2017-08-11T21:58:48Z",
        "updatedAt" : "2017-08-11T22:31:18Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "57f58dc2-91dd-45f4-a9dc-538eed22bc6f",
        "parentId" : "f01fa7ec-2fbc-4cfe-99f1-38315347e121",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "A `StringLiteral` can't be quoted using backtick. If it is quoted using backtick in source, then it would be a `NoSubstitutionTemplateLiteral`",
        "createdAt" : "2017-08-11T22:02:50Z",
        "updatedAt" : "2017-08-11T22:31:18Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "09487b8a1dab2e625af8cf22b44ac97c4285dfab",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1000,1004 @@        kind: SyntaxKind.StringLiteral;\n        /* @internal */ textSourceNode?: Identifier | StringLiteral | NumericLiteral; // Allows a StringLiteral to get its text from another node (used by transforms).\n        /* @internal */ singleQuote?: boolean;\n    }\n"
  },
  {
    "id" : "ec595a25-6fad-4491-8c0b-0dcfd9f7f506",
    "prId" : 17625,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17625#pullrequestreview-55408105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b82bf37f-3413-49fe-bf38-1a8aee38a03a",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "See comment on the implementation.",
        "createdAt" : "2017-08-10T00:17:55Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a923151719a1092134ef318ae37d795dd60b5e7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2632,2636 @@         */\n        /* @internal */ getAllPossiblePropertiesOfType(type: Type): Symbol[];\n        /* @internal */ resolveName(name: string, location: Node, meaning: SymbolFlags): Symbol | undefined;\n        /* @internal */ getJsxNamespace(): string;\n    }"
  },
  {
    "id" : "fbb96aa1-550e-4482-a56a-ad4cae4564d2",
    "prId" : 17376,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17376#pullrequestreview-51936827",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "746651ac-e4cc-45f6-8d37-39070d54966e",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Why internal?",
        "createdAt" : "2017-07-24T22:33:38Z",
        "updatedAt" : "2017-07-26T22:41:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "64f23a8f-447a-4ed8-a5b3-0df10a490323",
        "parentId" : "746651ac-e4cc-45f6-8d37-39070d54966e",
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : "I feel that this goes hand in hand with ```getExportsAndPropertiesOfModule```  and that one's internal",
        "createdAt" : "2017-07-25T00:53:57Z",
        "updatedAt" : "2017-07-26T22:41:44Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf72bdab8ae0e5750703c1897b573a23b7b175a8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2588,2592 @@        tryGetMemberInModuleExports(memberName: string, moduleSymbol: Symbol): Symbol | undefined;\n        /** Unlike `tryGetMemberInModuleExports`, this includes properties of an `export =` value. */\n        /* @internal */ tryGetMemberInModuleExportsAndProperties(memberName: string, moduleSymbol: Symbol): Symbol | undefined;\n        getApparentType(type: Type): Type;\n        getSuggestionForNonexistentProperty(node: Identifier, containingType: Type): string | undefined;"
  },
  {
    "id" : "15af7c3a-be80-49ce-8c43-9852c0acc251",
    "prId" : 16120,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16120#pullrequestreview-41048239",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57cf3c08-046e-436d-bc8e-6195433f926c",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This should definitely be documented as only being present in debug mode... better, don't define it here at all and require a cast to `DebugType`.",
        "createdAt" : "2017-05-30T14:41:42Z",
        "updatedAt" : "2017-05-31T21:58:42Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "db43dac5-d250-476a-aafb-318c14fb48b7",
        "parentId" : "57cf3c08-046e-436d-bc8e-6195433f926c",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "It's not only present in debug mode. It's also present when using the language service. See https://github.com/Microsoft/TypeScript/blob/master/src/services/services.ts#L382",
        "createdAt" : "2017-05-30T19:17:42Z",
        "updatedAt" : "2017-05-31T21:58:42Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ddbfcae8a40c6f1618594b774f6a7f321dd9a9c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3088,3092 @@        flags: TypeFlags;                // Flags\n        /* @internal */ id: number;      // Unique ID\n        /* @internal */ checker: TypeChecker;\n        symbol?: Symbol;                 // Symbol associated with type (if any)\n        pattern?: DestructuringPattern;  // Destructuring pattern represented by type (if any)"
  },
  {
    "id" : "cb214224-dcfb-4665-a5e1-934e940233bc",
    "prId" : 15594,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15594#pullrequestreview-37103593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95b26d34-09ba-4baa-b817-e528f9c2f0dc",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Why is this a `NamedDeclaration`?",
        "createdAt" : "2017-05-08T23:31:05Z",
        "updatedAt" : "2017-05-09T17:47:49Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "646569cb-9f9d-432f-aed1-89e2deba3903",
        "parentId" : "95b26d34-09ba-4baa-b817-e528f9c2f0dc",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "This one actually does have a `name` property, so I'll leave it alone.",
        "createdAt" : "2017-05-09T17:49:04Z",
        "updatedAt" : "2017-05-09T17:49:04Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "157b777660b7e65d8e2d9cf871bd7f9c1aba5bbe",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +1420,1424 @@    export type EntityNameOrEntityNameExpression = EntityName | EntityNameExpression;\n\n    export interface PropertyAccessExpression extends MemberExpression, NamedDeclaration {\n        kind: SyntaxKind.PropertyAccessExpression;\n        expression: LeftHandSideExpression;"
  },
  {
    "id" : "0c84a683-5928-4d91-ae25-12f2e3eceafe",
    "prId" : 12715,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12715#pullrequestreview-12294125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e56a212-9c57-4d37-bf01-a46c028ae421",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "If we opt to add `keys/values/entries` to the `Map` shim, then we should add those here, as well as our definition for `Iterator<T>`",
        "createdAt" : "2016-12-09T22:58:59Z",
        "updatedAt" : "2017-01-17T18:42:38Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "30ccc7a5d01dd090902c720193f50c817ff5d678",
    "line" : null,
    "diffHunk" : "@@ -1,1 +17,21 @@        clear(): void;\n        forEach(action: (value: T, key: string) => void): void;\n        readonly size: number;\n        keys(): Iterator<string>;\n        values(): Iterator<T>;"
  },
  {
    "id" : "7ef6a04c-2487-4174-b8ca-79f70ac508cb",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42426762",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29654e08-aa1a-497a-a546-08818fe3032b",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This shouldn't extend from `SourceFile`. There's an existing `SourceFileLike` interface, could you use that? Or just create a `SourceFileBase` with common properties.",
        "createdAt" : "2017-06-06T19:45:22Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2376,2380 @@    }\n\n    export interface JsonSourceFile extends SourceFile {\n        jsonObject?: ObjectLiteralExpression;\n        extendedSourceFiles?: string[];"
  },
  {
    "id" : "22dbf4f3-ebae-40a5-92ee-733c55d80eb8",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42713845",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ec25f45-498e-4501-b30d-f8097085a888",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Nit: Probably easier to make this non-optional and initialize to an empty array.",
        "createdAt" : "2017-06-06T21:51:02Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "2778a545-1148-4bb8-bafd-8deb487fe9a3",
        "parentId" : "6ec25f45-498e-4501-b30d-f8097085a888",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Is this another tsconfig. this tsconfig extends from?? ",
        "createdAt" : "2017-06-07T20:43:09Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2378,2382 @@    export interface JsonSourceFile extends SourceFile {\n        jsonObject?: ObjectLiteralExpression;\n        extendedSourceFiles?: string[];\n    }\n"
  },
  {
    "id" : "3c73a4fc-8c8b-4282-9e05-b19db2b80e05",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "323b9cd1-59a9-4764-8f1a-5d1bc6a207de",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Do we really need a `ScriptKind.JSON` if we don't have `JsonSourceFile` extend `SourceFile`?",
        "createdAt" : "2017-06-06T21:51:21Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +3628,3632 @@        TSX = 4,\n        External = 5,\n        JSON = 6\n    }\n"
  },
  {
    "id" : "e482ad6b-b38f-46ef-9135-00792ea67a5f",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-43602010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb1a97a9-46da-474f-964e-89d8177593a6",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "While it makes sense for parsing _tsconfig.json_, JSON isn't necessarily always an object literal. In the lib reference PR, I started using [`ts.parseConfigFileTextToJson`](https://github.com/Microsoft/TypeScript/pull/15780/files#diff-0994635726d7ae5036c62009690e571aR71) to parse a single _libs.json_ file shared between the gulpfile and jakefile. I'd have to make some changes since [_libs.json_ has an array as its root](https://github.com/Microsoft/TypeScript/pull/15780/files#diff-15c93c9538c61c5e506a49ecefcbba8e).",
        "createdAt" : "2017-06-13T01:25:58Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2377,2381 @@\n    export interface JsonSourceFile extends SourceFile {\n        jsonObject?: ObjectLiteralExpression;\n        extendedSourceFiles?: string[];\n    }"
  },
  {
    "id" : "e5c23a5d-4ce3-4c20-807d-5f8a0c3303f6",
    "prId" : 12231,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12231#pullrequestreview-17139804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f401f72-cfec-4984-b1a5-3d575e7b93c3",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "This reads weird and needs a comment if deliberate. By definition, I would assume a \"TsConfigOnlyOption\" can't be provided as a CommandLineOption?",
        "createdAt" : "2017-01-18T00:35:46Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "802866fe-9949-4532-83f7-f4e2a3a99697",
        "parentId" : "6f401f72-cfec-4984-b1a5-3d575e7b93c3",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "It's how everything here is named. Note that `CommandLineOptionBase` has an `isTSConfigOnly` property, which you would think would have to be false by definition",
        "createdAt" : "2017-01-18T02:07:52Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "86cc40528668793cfb49cf977bed2d77f84b2f5e",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +3435,3439 @@    export interface CommandLineOptionOfListType extends CommandLineOptionBase {\n        type: \"list\";\n        element: CommandLineOptionOfCustomType | CommandLineOptionOfPrimitiveType | TsConfigOnlyOption;\n    }\n"
  },
  {
    "id" : "cc58a917-4eb9-4952-84c0-da08c6ee41b8",
    "prId" : 11929,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11929#pullrequestreview-6656998",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "270c594c-e9c5-4adc-9502-53cc66f76837",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why array instead of map? the array is going to be sparse if indexed with type id.\n",
        "createdAt" : "2016-11-01T16:54:49Z",
        "updatedAt" : "2016-11-02T16:13:59Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "66d620a5-433a-46df-900f-7232acd55dc6",
        "parentId" : "270c594c-e9c5-4adc-9502-53cc66f76837",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Yes, it will be sparse, in the same way that our `nodeLinks` and `symbolLinks` arrays are sparse. I believe this performs better than a map.\n",
        "createdAt" : "2016-11-01T17:09:34Z",
        "updatedAt" : "2016-11-02T16:13:59Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bbe29ab733dcc2449d81f22b19be7f798cfb856",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +2876,2880 @@        resolvedIndexType: IndexType;\n        /* @internal */\n        resolvedIndexedAccessTypes: IndexedAccessType[];\n        /* @internal */\n        isThisType?: boolean;"
  },
  {
    "id" : "d8eaca00-5e8b-4107-901d-bb97666773c2",
    "prId" : 11704,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11704#pullrequestreview-5970600",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd17bf78-ad2a-4f79-aaaf-278a7a83c35e",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "optional?\n",
        "createdAt" : "2016-10-26T23:23:11Z",
        "updatedAt" : "2016-10-26T23:23:11Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "e0f41277-73d6-4199-9896-f56bbb4706db",
        "parentId" : "cd17bf78-ad2a-4f79-aaaf-278a7a83c35e",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "If this is optional we will need fallback logic on every access. I thought it was easier to just perform the conversion when getting it from an external source. This would mean that older clients won't compile against the new compiler, but will still run.\nWe might choose to not have this property as it is techincally redundant, but it's neater to have this property and use switch statements than to use `if (fileExtensionIs(resolved.resolvedFileName, \".ts\")) { ... } else if (fileExtensionIs(resolved.resolvedFileName, \".tsx\")) { ... }` all over.\n",
        "createdAt" : "2016-10-26T23:47:54Z",
        "updatedAt" : "2016-10-26T23:47:55Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "718d57ff3c0f2dc20cc30bed8dee271b6813801e",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +3318,3322 @@        resolvedFileName: string;\n        /** Extension of resolvedFileName. This must match what's at the end of resolvedFileName. */\n        extension: Extension;\n        /**\n         * Denotes if 'resolvedFileName' is isExternalLibraryImport and thus should be a proper external module:"
  },
  {
    "id" : "fcf6e232-94ba-40f5-83d8-ac10684f77d4",
    "prId" : 11695,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11695#pullrequestreview-5505532",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "972130b9-d424-4846-9244-b86987151a63",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Can you reuse or wrap `NamespaceDeclaration` instead of making a new type `JSDocNamespaceDeclaration`? I'd like to  eventually remove all duplication between typescript and jsdoc nodes.\n",
        "createdAt" : "2016-10-20T17:35:56Z",
        "updatedAt" : "2016-10-25T19:02:00Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "699ccdd9-d23d-4441-bb1a-4ca4c5bc9953",
        "parentId" : "972130b9-d424-4846-9244-b86987151a63",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "As we discussed, this might be too complex to do now, and can wait until we have a chance to clean up jsdoc parsing all at once.\n",
        "createdAt" : "2016-10-24T18:42:46Z",
        "updatedAt" : "2016-10-25T19:02:00Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce331893aeff6ab146a018096f16dbb02eaa34bc",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +1876,1880 @@    export interface JSDocTypedefTag extends JSDocTag, Declaration {\n        kind: SyntaxKind.JSDocTypedefTag;\n        fullName?: JSDocNamespaceDeclaration | Identifier;\n        name?: Identifier;\n        typeExpression?: JSDocTypeExpression;"
  },
  {
    "id" : "b5b14e86-fc00-40c6-847a-56a8e77ea443",
    "prId" : 11432,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11432#pullrequestreview-4117027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92fe7b61-56d8-4a19-b6d2-b7f509cb03f9",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "why isn't AutoArrayType a new subtype of AnonymousType? I think it would make it easier to track the property that auto array types don't escape the dynamic scope of `getFlowTypeOfReference`.\n",
        "createdAt" : "2016-10-12T17:51:22Z",
        "updatedAt" : "2016-10-14T14:48:42Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "943f8e0a-c161-49cd-a3cb-47398b655087",
        "parentId" : "92fe7b61-56d8-4a19-b6d2-b7f509cb03f9",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "I don't follow. `autoArrayType` is the _declared_ type of an auto-inferred `any[]` and it's already used outside of `getFlowTypeOfReference`.\n",
        "createdAt" : "2016-10-13T16:34:05Z",
        "updatedAt" : "2016-10-14T14:48:42Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "641be240-5327-4107-9ec7-f9488fa76f8c",
        "parentId" : "92fe7b61-56d8-4a19-b6d2-b7f509cb03f9",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "It's separate from `autoArrayType`, whose type is actually TypeReference. \n\nI'm talking about the comment at the top of the new code that says \n\n> Evolving array types are ultimately converted into manifest array types\n> and never escape the getFlowTypeOfReference function.\"\n\nI was suggesting something like:\n\n``` ts\nexport interface AutoArrayType extends AnonymousType {\n  elementType?: Type;\n  finalArrayType?: Type;\n}\n```\n\nAnd then having the new code that returns AnonymousType today return AutoArrayType instead. \n",
        "createdAt" : "2016-10-13T16:44:29Z",
        "updatedAt" : "2016-10-14T14:48:42Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "cfebc339-6c66-446f-bb90-21bd07258026",
        "parentId" : "92fe7b61-56d8-4a19-b6d2-b7f509cb03f9",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Oh, I see. The issue with doing it that way is that we don't have a `TypeFlags.EvolvingArrayType` that would indicate an evolving array type (because we're out of flag bits). Instead, we distinguish by looking for the `elementType` property on `AnonymousType`, so it has to be part of `AnonymousType`.\n",
        "createdAt" : "2016-10-13T16:51:24Z",
        "updatedAt" : "2016-10-14T14:48:42Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "444f52f4-4156-42ed-9299-3cf3b5c6f186",
        "parentId" : "92fe7b61-56d8-4a19-b6d2-b7f509cb03f9",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Ok, that makes sense.\n",
        "createdAt" : "2016-10-13T16:53:32Z",
        "updatedAt" : "2016-10-14T14:48:42Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "c876d92b79fdfdd5c9f488f0b3cbec8787e3fcbe",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +2757,2761 @@        target?: AnonymousType;  // Instantiation target\n        mapper?: TypeMapper;     // Instantiation mapper\n        elementType?: Type;      // Element expressions of evolving array type\n        finalArrayType?: Type;   // Final array type of evolving array type\n    }"
  },
  {
    "id" : "8a990fc7-b850-4dc5-9930-4c7f5fb0c64b",
    "prId" : 11150,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11150#pullrequestreview-7722520",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1c417c4-8ce7-44ba-b3ca-bce4e10571db",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "We've officially run out of space. We may have to start another enum for any new flags, or find ways to consolidate.\n",
        "createdAt" : "2016-11-05T02:23:54Z",
        "updatedAt" : "2016-11-10T17:18:14Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "0398af88-8dc4-4ea0-8ece-c0ea30b95562",
        "parentId" : "c1c417c4-8ce7-44ba-b3ca-bce4e10571db",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Yep, I ended up reusing `ContainsSpreadExpression` in the object-rest PR. It works pretty well, but the emit for will over-downlevel to ES5 with `--target es2015`. For example,\n\n``` ts\nvar { a: [x, ...y], ...rest } = source;\n// should emit as\nvar { a: [x, ...y] } = source, rest = __rest(source, [\"a\"]);\n// but actually downlevels all the way to [1]\nvar _a = source.a, x = _a[0], y = _a.slice(1), rest = __rest(source, [\"a\"]);`\n```\n\nBecause the destructuring code checks `ContainsSpreadExpression` to find out whether to downlevel a binding element.\n\n[1] I wrote this emit; it's not pasted, so it might be wrong. You get the idea though.\n",
        "createdAt" : "2016-11-07T16:45:34Z",
        "updatedAt" : "2016-11-10T17:18:14Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "0577fb20-8a1c-4505-973f-a72fed4f8e6e",
        "parentId" : "c1c417c4-8ce7-44ba-b3ca-bce4e10571db",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Please, no more properties in the base node!\n",
        "createdAt" : "2016-11-07T20:44:51Z",
        "updatedAt" : "2016-11-10T17:18:14Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "b1a19ab3-56fa-4590-9966-3f76b3be0975",
        "parentId" : "c1c417c4-8ce7-44ba-b3ca-bce4e10571db",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Unfortunately, if you down-level an ES6 iterator destructuring into our ES5 compatible emit when using `--target ES6`, you will run into issues if the binding element evaluates to an `Iterable` that is not an `Array`, since `Iterable` does not define `.slice()` or support element access. We need a means to determine exactly how much destructuring to transform.\n",
        "createdAt" : "2016-11-08T21:44:26Z",
        "updatedAt" : "2016-11-10T17:18:14Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "bfae3bfd-966e-48d4-9dcf-c39f3121d5b9",
        "parentId" : "c1c417c4-8ce7-44ba-b3ca-bce4e10571db",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I think I can avoid the over-emit inside destructuring by checking whether the destructuring is happening for ESNext. If it's ESNext, then I can just do nothing to nodes that have ContainsSpreadElement if they are array rest rather than object rest.\n",
        "createdAt" : "2016-11-08T22:15:05Z",
        "updatedAt" : "2016-11-10T17:18:14Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "25462c95712fd7ac91e8c7285f458c31ee63314c",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +3519,3523 @@        ContainsBindingPattern = 1 << 26,\n        ContainsYield = 1 << 27,\n        ContainsHoistedDeclarationOrCompletion = 1 << 28,\n\n        HasComputedFlags = 1 << 29, // Transform flags have been computed."
  },
  {
    "id" : "ec09d6e7-b47e-4615-bd2c-c2b49054baae",
    "prId" : 11114,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11114#pullrequestreview-1598229",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4d2b833-88d0-459b-a932-1ac90cfa12ad",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I guess `JSXAttributes` isn't in this change?\n",
        "createdAt" : "2016-09-26T17:34:01Z",
        "updatedAt" : "2016-09-26T18:43:06Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "ac71e8ab-7988-471a-893e-b50915fc49b3",
        "parentId" : "b4d2b833-88d0-459b-a932-1ac90cfa12ad",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Yep\n",
        "createdAt" : "2016-09-26T18:44:08Z",
        "updatedAt" : "2016-09-26T18:44:08Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "625a253da420ee0d2403c94d50f3d82660293ff8",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1052,1056 @@\n    /**\n      * This interface is a base interface for ObjectLiteralExpression and JSXAttributes to extend from. JSXAttributes is similar to\n      * ObjectLiteralExpression in that it contains array of properties; however, JSXAttributes' properties can only be\n      * JSXAttribute or JSXSpreadAttribute. ObjectLiteralExpression, on the other hand, can only have properties of type"
  },
  {
    "id" : "58cd2c69-4928-44ea-a6c4-ecf1a14a1ad9",
    "prId" : 10118,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b3b7d6d-2e5c-4198-bd59-88e8a71b330f",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Since we have numeric literal types and enum literal types now, shouldn't this just be `TypeFlags.None` or `0`? (Which would alleviate the need for the long explanatory comment above. And possibly allow you to remove some of the casts you have in the implementation.)\n",
        "createdAt" : "2016-08-03T18:01:22Z",
        "updatedAt" : "2016-08-03T18:04:08Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "32be5288-5fc5-41f8-bebc-d958cc1b4e29",
        "parentId" : "4b3b7d6d-2e5c-4198-bd59-88e8a71b330f",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "`TypeFlags` isn't a union enum type (because it contains non-literal initializers and is intended to be used as bit flags), so there is no `TypeFlags.None` type. I could use `0`, but then it would be less obvious that `flags` is overlaid on the similarly named property in `Type`. Either way, the comment is still necessary.\n",
        "createdAt" : "2016-08-03T18:11:38Z",
        "updatedAt" : "2016-08-03T18:11:38Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "b83c4b21-d83b-4aad-a1c0-26c060e063ae",
        "parentId" : "4b3b7d6d-2e5c-4198-bd59-88e8a71b330f",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "IDK, I think `0` carries more meaning; since you're using only a sentinel value for the member, encoding the sentinel value in the type seems like a good documentation choice. And `0` should still be assignable to `TypeFlags`, so it should still overlay just fine, right?\n",
        "createdAt" : "2016-08-03T18:41:30Z",
        "updatedAt" : "2016-08-03T18:41:30Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "12eb57c4d0d9b1082e8f4e7b459685e5829bac78",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1613,1617 @@    // objects are internal to the getFlowTypeOfRefecence function and never escape it.\n    export interface IncompleteType {\n        flags: TypeFlags;  // No flags set\n        type: Type;        // The type marked incomplete\n    }"
  },
  {
    "id" : "af812365-833c-4697-91da-fad7a067a069",
    "prId" : 9995,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdaa69dd-52c5-46a9-ab0f-ddb949f8ee94",
        "parentId" : null,
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "You may need to update the `LastJSDocNode` and `LastJSDocTagNode` pointers\n",
        "createdAt" : "2016-07-27T22:26:45Z",
        "updatedAt" : "2016-08-04T20:02:01Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      },
      {
        "id" : "37b62e76-3d91-45eb-8621-7e174d32324a",
        "parentId" : "fdaa69dd-52c5-46a9-ab0f-ddb949f8ee94",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Good catch!\n",
        "createdAt" : "2016-07-27T22:56:54Z",
        "updatedAt" : "2016-08-04T20:02:01Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "a171fbfd-ae27-44c7-8807-18a52b8dcdb9",
        "parentId" : "fdaa69dd-52c5-46a9-ab0f-ddb949f8ee94",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Updated\n",
        "createdAt" : "2016-07-27T22:58:24Z",
        "updatedAt" : "2016-08-04T20:02:01Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c32478b8fd433b5bdf708b27aef04309a107a3d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +348,352 @@        JSDocTypeLiteral,\n        JSDocLiteralType,\n\n        // Synthesized list\n        SyntaxList,"
  },
  {
    "id" : "e731dec7-bded-4005-b9b2-127fc2844ea8",
    "prId" : 9941,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d2a309a-65b6-4f53-a8ad-ecea81163f0e",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "we need to document this as an API breaking change.\n",
        "createdAt" : "2016-08-25T18:14:57Z",
        "updatedAt" : "2016-08-30T00:18:10Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "9926fb22-1ea2-4d2a-9d2d-deb332a3c678",
        "parentId" : "5d2a309a-65b6-4f53-a8ad-ecea81163f0e",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "@alexeagle, @chuckjaz, @basarat, @adidahiya, @ivogabe, @jbrantly, and @chancancode this is a breaking change in the API, it adds a requirement for a new method `ParseConfigHost.readFile` to handle config file inheritance. We would like to merge this in soon. Please let us know if you have any reservations about this change.\n",
        "createdAt" : "2016-08-30T00:23:31Z",
        "updatedAt" : "2016-08-30T00:23:31Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "7ec683f0-7f9f-4739-a835-b8e7911c40d6",
        "parentId" : "5d2a309a-65b6-4f53-a8ad-ecea81163f0e",
        "authorId" : "d028362c-70f3-4a60-b6bc-f80ee67fc04b",
        "body" : "I've been just passing in `ts.sys` and it works fine and probably will continue to be fine :rose:\n",
        "createdAt" : "2016-08-30T00:42:13Z",
        "updatedAt" : "2016-08-30T00:42:13Z",
        "lastEditedBy" : "d028362c-70f3-4a60-b6bc-f80ee67fc04b",
        "tags" : [
        ]
      },
      {
        "id" : "1dcd1262-b929-4076-b7af-ce2a1215c848",
        "parentId" : "5d2a309a-65b6-4f53-a8ad-ecea81163f0e",
        "authorId" : "d028362c-70f3-4a60-b6bc-f80ee67fc04b",
        "body" : ":heart: @blakeembrey (ts-node / tsconfig) @cartant / @smrq (tsify) @johnnyreilly (also on ts-loader) @sebastian-lenz (typedoc) \n\nSorry for the mention, thought I'd let you know. Feel free to ignore 💟  :rose: \n",
        "createdAt" : "2016-08-30T00:48:35Z",
        "updatedAt" : "2016-08-30T00:48:35Z",
        "lastEditedBy" : "d028362c-70f3-4a60-b6bc-f80ee67fc04b",
        "tags" : [
        ]
      },
      {
        "id" : "5f433c37-9ff5-4bf9-9cac-d5eeebf461b6",
        "parentId" : "5d2a309a-65b6-4f53-a8ad-ecea81163f0e",
        "authorId" : "9aec1f9a-e1c6-48a3-b361-1484fc758211",
        "body" : "This breaks us in at least one place:\n\n  https://github.com/angular/angular/blob/master/tools/@angular/tsc-wrapped/src/tsc.ts#L70\n\nWhat is the timing of this change? Will it be part of 2.0? If so this will be a challenge for us.\n",
        "createdAt" : "2016-08-30T02:04:22Z",
        "updatedAt" : "2016-08-30T02:04:22Z",
        "lastEditedBy" : "9aec1f9a-e1c6-48a3-b361-1484fc758211",
        "tags" : [
        ]
      },
      {
        "id" : "e54310f5-3fce-4b0f-9e01-7a07d00ca3da",
        "parentId" : "5d2a309a-65b6-4f53-a8ad-ecea81163f0e",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "@chuckjaz It looks like you have a readfile method available, you just dont pass it in as part of the host, so it looks easy to update for future versions. Actually, is there a reason you capture the methods on a new object, rather than just passing in `this`?\n",
        "createdAt" : "2016-08-30T17:55:10Z",
        "updatedAt" : "2016-08-30T17:55:10Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "aadb1127-5e1f-4da5-a9e5-abaaf4348329",
        "parentId" : "5d2a309a-65b6-4f53-a8ad-ecea81163f0e",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "> What is the timing of this change? Will it be part of 2.0? If so this will be a challenge for us.\n\nno, this is a TS 2.1 feature. but once checked in it will start showing up in `typescript@next`. This is why i wanted to make sure that all partners are aware of it. I would recommend adding the readFile method now. in TS 2.0 it will not be used; this way users can mix and match tool versions without breakage.\n",
        "createdAt" : "2016-08-30T17:57:40Z",
        "updatedAt" : "2016-08-30T17:57:40Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "d7c618e5-3d0e-4a57-b63a-e345c8322bc7",
        "parentId" : "5d2a309a-65b6-4f53-a8ad-ecea81163f0e",
        "authorId" : "9aec1f9a-e1c6-48a3-b361-1484fc758211",
        "body" : "@mhegazy If it is part of 2.1 on `typescript@next` we will have plenty of time to react and this should not be significant for us.\n\n@weswigham This can be better but we do this, in general, to make testing easier.\n",
        "createdAt" : "2016-08-30T18:43:26Z",
        "updatedAt" : "2016-08-30T18:43:26Z",
        "lastEditedBy" : "9aec1f9a-e1c6-48a3-b361-1484fc758211",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8ff546512f3c27384a70239d73fc6be3d5dccbc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1723,1727 @@        fileExists(path: string): boolean;\n\n        readFile(path: string): string;\n    }\n"
  },
  {
    "id" : "e159b1d9-ec8b-4e31-895c-5c07d8a6526a",
    "prId" : 9270,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "553210c5-1eec-4be4-9cb2-a6680ec93a9b",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "It was never quite right to resolve `thisType` in `getSignatureOfDeclaration` so switching to a symbol is an improvement. But it means that you should remove `thisType` entirely and replace usages with `getTypeOfSymbol(sig.thisParameter)`.\n",
        "createdAt" : "2016-06-21T15:53:08Z",
        "updatedAt" : "2016-06-23T19:08:23Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "89c992a8a1ff23575306ab4a96653fd165535eee",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2388,2392 @@        parameters: Symbol[];               // Parameters\n        /* @internal */\n        thisParameter?: Symbol;             // symbol of this-type parameter\n        /* @internal */\n        resolvedReturnType: Type;           // Resolved return type"
  },
  {
    "id" : "66cd21ed-3138-4194-87c2-e45ee9605f7c",
    "prId" : 8939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "817214f8-33ed-4507-8871-c8d425cd0aab",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "`/* @internal */` as well\n",
        "createdAt" : "2016-06-02T17:15:29Z",
        "updatedAt" : "2016-06-09T18:34:04Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "559b49baa9380bfd77681aa466444e1d9c37d5cf",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2137,2141 @@    }\n\n    /** Represents a \"prefix*suffix\" pattern. */\n    /* @internal */\n    export interface Pattern {"
  },
  {
    "id" : "a58ed66f-11de-4fc4-8a63-fc13bb027d6d",
    "prId" : 8939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eea46e75-10f9-45b8-8e63-76db1180d87b",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "and this too `/* @internal */` as well\n",
        "createdAt" : "2016-06-02T17:15:37Z",
        "updatedAt" : "2016-06-09T18:34:04Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "559b49baa9380bfd77681aa466444e1d9c37d5cf",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2146,2150 @@    /** Used to track a `declare module \"foo*\"`-like declaration. */\n    /* @internal */\n    export interface PatternAmbientModule {\n        pattern: Pattern;\n        symbol: Symbol;"
  },
  {
    "id" : "58448ed1-7e8c-45d2-93e2-d55c3f4bd491",
    "prId" : 8560,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "725241cc-7c13-4278-a2e3-115be264c342",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "should not path be the first argument?\n",
        "createdAt" : "2016-05-11T20:59:25Z",
        "updatedAt" : "2016-05-11T20:59:25Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "67af55a7-c350-47fd-a3f4-2e249dbf6475",
        "parentId" : "725241cc-7c13-4278-a2e3-115be264c342",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "we need both on the LS since file name is used to query managed side for the script snapshot. With this order it is just consistent with `getSourceFile` where `fileName` is a first argument\n",
        "createdAt" : "2016-05-11T21:01:52Z",
        "updatedAt" : "2016-05-11T21:01:52Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e94c761905f51fcf1d6c23e14ad500835483092",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2815,2819 @@    export interface CompilerHost extends ModuleResolutionHost {\n        getSourceFile(fileName: string, languageVersion: ScriptTarget, onError?: (message: string) => void): SourceFile;\n        getSourceFileByPath?(fileName: string, path: Path, languageVersion: ScriptTarget, onError?: (message: string) => void): SourceFile;\n        getCancellationToken?(): CancellationToken;\n        getDefaultLibFileName(options: CompilerOptions): string;"
  },
  {
    "id" : "0f918ab6-a079-46f7-a608-23cfe9806e1d",
    "prId" : 8555,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f78afa5-12c9-4161-b0da-3a72c445a288",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "The term for this is a \"parameter property\", so maybe a better name for the flag would be `ParameterPropertyModifier`\n",
        "createdAt" : "2016-05-11T16:30:01Z",
        "updatedAt" : "2016-05-12T14:08:13Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "22ee90a744d123c5123ac198e4255f94a3ae5720",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +410,414 @@        Modifier = Export | Ambient | Public | Private | Protected | Static | Abstract | Default | Async | Readonly,\n        AccessibilityModifier = Public | Private | Protected,\n        // Accessibility modifiers and 'readonly' can be attached to a parameter in a constructor to make it a property.\n        ParameterPropertyModifier = AccessibilityModifier | Readonly,\n        BlockScoped = Let | Const,"
  },
  {
    "id" : "1cbd2fc4-fa6e-4adb-a87a-4a93b25d606b",
    "prId" : 8555,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40941483-6f2e-4a8c-b119-eafb61b69de6",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Do you still want to keep `Readonly` in ? since you have made a new flag `ParameterPropertyModifier`\n",
        "createdAt" : "2016-05-11T16:59:49Z",
        "updatedAt" : "2016-05-12T14:08:13Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "0118ff3a-8397-4e52-b6bb-ec1f9290c427",
        "parentId" : "40941483-6f2e-4a8c-b119-eafb61b69de6",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "it is a modifier..\n",
        "createdAt" : "2016-05-11T18:31:16Z",
        "updatedAt" : "2016-05-12T14:08:13Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "42ba4b85-ed96-497c-aae8-d964b4059c56",
        "parentId" : "40941483-6f2e-4a8c-b119-eafb61b69de6",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "got cha, I got confused why it is here caz i thought it is not direct related with the bug. \n",
        "createdAt" : "2016-05-11T22:25:56Z",
        "updatedAt" : "2016-05-12T14:08:13Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "22ee90a744d123c5123ac198e4255f94a3ae5720",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +408,412 @@        HasJsxSpreadAttribute = 1 << 30,\n\n        Modifier = Export | Ambient | Public | Private | Protected | Static | Abstract | Default | Async | Readonly,\n        AccessibilityModifier = Public | Private | Protected,\n        // Accessibility modifiers and 'readonly' can be attached to a parameter in a constructor to make it a property."
  },
  {
    "id" : "bd475d97-d461-49c3-96e0-389687916e2f",
    "prId" : 8469,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73a54e69-3c5b-413d-a0cf-df05569b334b",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "why it is optional if you always set it?\n",
        "createdAt" : "2016-05-06T17:17:01Z",
        "updatedAt" : "2016-05-06T17:28:09Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "7631f828-3fc2-4b54-8947-4f8cc938622d",
        "parentId" : "73a54e69-3c5b-413d-a0cf-df05569b334b",
        "authorId" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "body" : "not set in commandLineParser.parseStrings\n",
        "createdAt" : "2016-05-06T17:22:01Z",
        "updatedAt" : "2016-05-06T17:28:09Z",
        "lastEditedBy" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "88da665dff94c85e38f174475f28a257b7e6cab9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2593,2597 @@        typingOptions?: TypingOptions;\n        fileNames: string[];\n        raw?: any;\n        errors: Diagnostic[];\n    }"
  },
  {
    "id" : "186d5686-b259-4b2e-9360-667a9b54264f",
    "prId" : 8103,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b12ef5e2-cbc9-4a41-b42d-847170990b12",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "question: what is the JSDocTypeLiteral? \n",
        "createdAt" : "2016-04-19T20:23:45Z",
        "updatedAt" : "2016-05-31T23:08:22Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "61a8be50-237f-4331-a088-8d1de8edaaad",
        "parentId" : "b12ef5e2-cbc9-4a41-b42d-847170990b12",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "A `@typedef` is similar to a type alias in TS. In TS you can give an alias to an object type literal:\n\n``` ts\ntype T = { name: string, age: number}\n```\n\nwhich is equivalent to the following jsdoc:\n\n``` js\n/** \n * @typedef {Object} T\n * @property {string} name\n * @property {number} age\n */\n```\n\nSo I defined the `@property`s as `JSDocTypeLiteral`, as it functions like object type literal, but with a different shape.\n",
        "createdAt" : "2016-04-19T21:44:27Z",
        "updatedAt" : "2016-05-31T23:08:22Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb0f035c78219ed920052094351326c5b35e1fe3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +346,350 @@        JSDocTypedefTag,\n        JSDocPropertyTag,\n        JSDocTypeLiteral,\n\n        // Synthesized list"
  },
  {
    "id" : "fb6eedf3-18a0-4dee-ab76-c86bf00145ab",
    "prId" : 8069,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02a74c8a-dca2-4580-9c86-4ed5eb91f08b",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Why you need to exclude them? I thought by checking for it in the subTreeFlag then convert it to ContainsLexicalThis, we actually didn't propagate \"ContainsLexicalThisInComputedPropertyName\"\n",
        "createdAt" : "2016-04-13T23:22:49Z",
        "updatedAt" : "2016-04-14T16:51:52Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "9aede396-7d40-4d01-9023-127a37806d0f",
        "parentId" : "02a74c8a-dca2-4580-9c86-4ed5eb91f08b",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Nope, the conversion just _adds_ to transformFlags -- this list is the part that adds to the list of excludes.\n",
        "createdAt" : "2016-04-13T23:26:31Z",
        "updatedAt" : "2016-04-14T16:51:52Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "74c121af-c688-46b6-a063-1a354351b00e",
        "parentId" : "02a74c8a-dca2-4580-9c86-4ed5eb91f08b",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "@yuit, @sandersn  is correct. The `*Excludes` flags are what prevents the propagation. All flags propagate up the tree by default. \n",
        "createdAt" : "2016-04-14T00:49:53Z",
        "updatedAt" : "2016-04-14T16:51:52Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "480fd620-2c6c-4a43-927d-b7726e600f5b",
        "parentId" : "02a74c8a-dca2-4580-9c86-4ed5eb91f08b",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "gotcha. Thanks\n",
        "createdAt" : "2016-04-14T00:54:01Z",
        "updatedAt" : "2016-04-14T16:51:52Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d5bf0ee32a39288cee795f190cae5c36eaf2c86",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +2855,2859 @@        ConstructorExcludes = ContainsDefaultValueAssignments | ContainsLexicalThis | ContainsCapturedLexicalThis | ContainsBlockScopedBinding,\n        MethodOrAccessorExcludes = ContainsDefaultValueAssignments | ContainsLexicalThis | ContainsCapturedLexicalThis | ContainsBlockScopedBinding,\n        ClassExcludes = ContainsDecorators | ContainsPropertyInitializer | ContainsLexicalThis | ContainsCapturedLexicalThis | ContainsComputedPropertyName | ContainsParameterPropertyAssignments | ContainsLexicalThisInComputedPropertyName,\n        ModuleExcludes = ContainsDecorators | ContainsLexicalThis | ContainsCapturedLexicalThis | ContainsBlockScopedBinding,\n        TypeExcludes = ~ContainsTypeScript,"
  },
  {
    "id" : "e98fd2a2-4786-4693-b23a-1287e8267791",
    "prId" : 7952,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a56fcb4f-732b-421b-bccc-fcc747aa2f08",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Can you log an issue to address the fact that we're now at the effective flag cap for this enum and should break it apart somehow?\n",
        "createdAt" : "2016-04-08T07:08:16Z",
        "updatedAt" : "2016-04-08T19:40:32Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "73dbe41cd14228e5a010a082f405663b78cec925",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +406,410 @@        ThisNodeOrAnySubNodesHasError = 1 << 28,  // If this node or any of its children had an error\n        HasAggregatedChildData = 1 << 29,  // If we've computed data from children and cached it in this node\n        HasJsxSpreadAttribute = 1 << 30,\n\n        Modifier = Export | Ambient | Public | Private | Protected | Static | Abstract | Default | Async,"
  },
  {
    "id" : "09ec4259-7bac-4656-9e1e-06e98c5f77d0",
    "prId" : 7783,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ac9e1d5-738d-4d5d-8a48-0c636cd188e7",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I guess you don't need it now, but I wonder if you could just have a `NotEmittedExpression` and let `StatementExpression` do the heavy lifting.\n",
        "createdAt" : "2016-04-03T16:26:56Z",
        "updatedAt" : "2016-04-04T18:04:15Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "a1c1e994-ee91-40cd-b707-9940cc420845",
        "parentId" : "4ac9e1d5-738d-4d5d-8a48-0c636cd188e7",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "That would be like an `EmptyStatement` and would add an unwanted extra semicolon. Using a `NotEmittedStatement` also reduces the number of unnecessary allocations.\n",
        "createdAt" : "2016-04-04T17:55:22Z",
        "updatedAt" : "2016-04-04T18:04:15Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "02d2178e31a936b0f8654240c7728bae8ede3124",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1116,1120 @@    // @internal\n    // @kind(SyntaxKind.NotEmittedStatement)\n    export interface NotEmittedStatement extends Statement {\n    }\n"
  },
  {
    "id" : "05589090-f2ae-4a3f-85fc-8bfbee8d3947",
    "prId" : 7522,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20ae37d5-c874-4732-8de9-4954be24a9b9",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Here's an idea - create an interface called `CommandLineOptionTypeSpecifier` which `CommandLineOptionBase` extends from. Then use it here, and that way you won't have to specify the `name` for each array element.\n",
        "createdAt" : "2016-03-15T19:05:28Z",
        "updatedAt" : "2016-03-16T23:35:59Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e2df0459eb1c144b15d8c2b6e02705886495675",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +2562,2566 @@    export interface CommandLineOptionOfListType extends CommandLineOptionBase {\n        type: \"list\";\n        element: CommandLineOptionOfCustomType | CommandLineOptionOfPrimitiveType;\n    }\n"
  },
  {
    "id" : "1638dfea-b8ce-4ebd-a18f-388bc7c488d2",
    "prId" : 7440,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ab6840c-af93-4fe7-9ef2-3e5bea3c3500",
        "parentId" : null,
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "Is this type intended to be used as the parameter type for `discoverTypings`?\n",
        "createdAt" : "2016-03-09T04:43:47Z",
        "updatedAt" : "2016-03-09T23:50:58Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      },
      {
        "id" : "e2dcc69e-140b-411c-8535-1f46c786416a",
        "parentId" : "7ab6840c-af93-4fe7-9ef2-3e5bea3c3500",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "The CoreServicesShim's discoverTypings parameter type is a json string that is parsed to a DiscoverTypingsInfo.  This matches the DiscoverTypingsInfo on the VS host side.\n",
        "createdAt" : "2016-03-09T07:34:04Z",
        "updatedAt" : "2016-03-09T23:50:58Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe9da694b2c21b41247e0e9b685a190285773729",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +2457,2461 @@    }\n\n    export interface DiscoverTypingsInfo {\n        fileNames: string[];                            // The file names that belong to the same project.\n        projectRootPath: string;                        // The path to the project root directory"
  },
  {
    "id" : "4b76c011-9aa8-4f1b-84ff-cc2c282d3b13",
    "prId" : 7107,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d72df6ff-8050-45be-b581-75f8dd852a0f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Mark this as `/* @internal */`\n",
        "createdAt" : "2016-02-17T01:57:29Z",
        "updatedAt" : "2016-02-19T22:21:28Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "8cae5605-8ca7-47c6-96dd-d51878677d57",
        "parentId" : "d72df6ff-8050-45be-b581-75f8dd852a0f",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "Hmm - the tests fail when I do this. Not sure if this should be internal as other hosts can implement getScriptKind.\n",
        "createdAt" : "2016-02-17T06:53:22Z",
        "updatedAt" : "2016-02-19T22:21:28Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2da73b334054b8c93efcf74bbfd3802086cd03fe",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2462,2466 @@    }\n\n    export const enum ScriptKind {\n        Unknown = 0,\n        JS = 1,"
  },
  {
    "id" : "01b5b383-3641-4781-8a66-fc0ed26bd10c",
    "prId" : 6983,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "896c0a09-50c5-450c-907d-e178c022c09f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Do these assertions actually get acted on in a later PR?\n",
        "createdAt" : "2016-02-10T08:13:54Z",
        "updatedAt" : "2016-03-18T23:39:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "bccda05b-70da-43d6-bc47-d332a265e20a",
        "parentId" : "896c0a09-50c5-450c-907d-e178c022c09f",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Yes, and the example above shows how they are used. The bitmask of an assertion is merely a shortcut used to ensure that both the \"this node is a\" flag (e.g. `TypeScript`) and \"the subtree containing this node has a\" flag (e.g. `ContainsTypeScript`) are set on the node.\n",
        "createdAt" : "2016-02-10T18:30:09Z",
        "updatedAt" : "2016-03-18T23:39:31Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a212e2b6960ebe4773d9e19c8a314299598ef446",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2767,2771 @@        HasComputedFlags = 1 << 31, // Transform flags have been computed.\n\n        // Assertions\n        // - Bitmasks that are used to assert facts about the syntax of a node and its subtree.\n        AssertTypeScript = TypeScript | ContainsTypeScript,"
  },
  {
    "id" : "ae17b908-9ea3-47a3-a9e0-7beae0d4186f",
    "prId" : 6983,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a1ed3a9-407f-4254-acfa-08a7ff0a5ee6",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "What is a context in which `ContainsTypeScript` doesn't suffice for `TypeScript` itself?\n",
        "createdAt" : "2016-02-10T08:14:35Z",
        "updatedAt" : "2016-03-18T23:39:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "95413b98-3485-49cd-982c-1d38b7540df1",
        "parentId" : "3a1ed3a9-407f-4254-acfa-08a7ff0a5ee6",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "See the example above, the two flags are used separately to determine the correct course of action to take.\n",
        "createdAt" : "2016-02-10T18:30:46Z",
        "updatedAt" : "2016-03-18T23:39:31Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a212e2b6960ebe4773d9e19c8a314299598ef446",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2744,2748 @@        // - Flags used to indicate that a node or subtree contains syntax that requires transformation.\n        TypeScript = 1 << 0,\n        ContainsTypeScript = 1 << 1,\n        Jsx = 1 << 2,\n        ContainsJsx = 1 << 3,"
  },
  {
    "id" : "fcc9c133-9420-432d-9667-ebaef4b0d793",
    "prId" : 6860,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fbd92e9-52c8-405b-9c4d-e01b9002d2ff",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "You could just use `hasProperty` instead of having both of these.\n",
        "createdAt" : "2016-02-08T20:12:54Z",
        "updatedAt" : "2016-02-11T18:11:47Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "a9b7c208-b6af-43ac-95e3-dbc9ea3f2644",
        "parentId" : "9fbd92e9-52c8-405b-9c4d-e01b9002d2ff",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "`hasProperty` check property in the map\n",
        "createdAt" : "2016-02-09T17:45:46Z",
        "updatedAt" : "2016-02-11T18:11:47Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "61e954bbc6a18ae21609d93221672b34d238ce9a",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +2090,2094 @@        resolvedJsxType?: Type;           // resolved element attributes type of a JSX openinglike element\n        hasSuperCall?: boolean;           // recorded result when we try to find super-call. We only try to find one if this flag is undefined, indicating that we haven't made an attempt.\n        superCall?: ExpressionStatement;  // Cached first super-call found in the constructor. Used in checking whether super is called before this-accessing \n    }\n"
  },
  {
    "id" : "43f4638e-830b-4e09-9529-cf75751d4a2e",
    "prId" : 6773,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eee4fb80-96b7-4404-8f2c-476bc8e6625c",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Should these be `/*@internal*/`?\n",
        "createdAt" : "2016-02-01T05:21:32Z",
        "updatedAt" : "2016-02-01T14:56:05Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc657b869609b42c273b9b4d2944943208d93386",
    "line" : null,
    "diffHunk" : "@@ -1,1 +949,953 @@        elements: NodeArray<Expression>;\n        /* @internal */\n        multiLine?: boolean;\n    }\n"
  },
  {
    "id" : "141e1bf7-c9f3-4a8b-81d3-b96fc5561666",
    "prId" : 6773,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9dc790ca-29ff-4681-88a8-5df66dd87fb3",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Actually, I think these last three should be `/*@internal*/`\n",
        "createdAt" : "2016-02-01T05:22:09Z",
        "updatedAt" : "2016-02-01T14:56:05Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "897418ce-ba0f-482d-9e39-640894412fe3",
        "parentId" : "9dc790ca-29ff-4681-88a8-5df66dd87fb3",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Agreed.\n",
        "createdAt" : "2016-02-01T14:56:57Z",
        "updatedAt" : "2016-02-01T14:56:57Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc657b869609b42c273b9b4d2944943208d93386",
    "line" : null,
    "diffHunk" : "@@ -1,1 +906,910 @@        hasExtendedUnicodeEscape?: boolean;\n        /* @internal */\n        isOctalLiteral?: boolean;\n    }\n"
  },
  {
    "id" : "815c6af8-7928-43eb-88c3-1745c2960bd8",
    "prId" : 6744,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd388388-001c-49ba-9339-97ac197395cd",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : ":+1:\n",
        "createdAt" : "2016-02-01T23:57:09Z",
        "updatedAt" : "2016-02-12T22:13:02Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "74b1e3f446cda098877e84f64ef16593647d3760",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1861,1865 @@    }\n\n    export type TypePredicate = IdentifierTypePredicate | ThisTypePredicate;\n\n    /* @internal */"
  },
  {
    "id" : "45d1bea6-568e-4dc8-a5c7-3ec369c19748",
    "prId" : 6553,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "866ecbc6-dd84-40f7-b08f-923a2ac34ee8",
        "parentId" : null,
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Should be `isDeclarationWithCollidingName`.\n",
        "createdAt" : "2016-01-25T21:51:07Z",
        "updatedAt" : "2016-01-27T18:40:57Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "c603971a-46ce-4485-bfc4-c03c3e16d5ce",
        "parentId" : "866ecbc6-dd84-40f7-b08f-923a2ac34ee8",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "my bad, will fix\n",
        "createdAt" : "2016-01-25T22:01:15Z",
        "updatedAt" : "2016-01-27T18:40:57Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "e67ff39e173264f622a59eaaacdd7e0add163ecb",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +2039,2043 @@        resolvedExports?: SymbolTable;      // Resolved exports of module\n        exportsChecked?: boolean;           // True if exports of external module have been checked\n        isDeclaratonWithCollidingName?: boolean;    // True if symbol is block scoped redeclaration\n        bindingElement?: BindingElement;    // Binding element associated with property symbol\n        exportsSomeValue?: boolean;         // true if module exports some value (not just types)"
  },
  {
    "id" : "dd662134-52ea-442d-810b-a4bfabb18f96",
    "prId" : 6376,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7de5a538-aa64-4a1f-9e5e-5299d5735d49",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "None of the other exposed methods use the word \"target\" so should this one?\n",
        "createdAt" : "2016-01-06T19:36:25Z",
        "updatedAt" : "2016-01-13T23:35:20Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "56876716-a498-4399-a249-3284181d89fe",
        "parentId" : "7de5a538-aa64-4a1f-9e5e-5299d5735d49",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "it is not the symbol of the export, it is the thing it aliases. others do not have this behavior.\n",
        "createdAt" : "2016-01-06T19:44:10Z",
        "updatedAt" : "2016-01-13T23:35:20Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "c1b3ce89-b2d9-4920-a00b-b7ac755abdc8",
        "parentId" : "7de5a538-aa64-4a1f-9e5e-5299d5735d49",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I don't think \"target\" clarifies that any better, but I'm not familiar enough with where else we make this distinction. I just mention this because we're making this a part of our API, so we'll have to commit to this naming scheme.\n",
        "createdAt" : "2016-01-06T19:52:35Z",
        "updatedAt" : "2016-01-13T23:35:20Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "31d85155b90d557e868ae21fd8bd5aa34509b83d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1726,1730 @@        getSymbolsOfParameterPropertyDeclaration(parameter: ParameterDeclaration, parameterName: string): Symbol[];\n        getShorthandAssignmentValueSymbol(location: Node): Symbol;\n        getExportSpecifierLocalTargetSymbol(location: ExportSpecifier): Symbol;\n        getTypeAtLocation(node: Node): Type;\n        typeToString(type: Type, enclosingDeclaration?: Node, flags?: TypeFormatFlags): string;"
  },
  {
    "id" : "db74a26d-4b2c-4fb1-a006-5b2be95e76ac",
    "prId" : 5906,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22144068-95b5-46fb-b46e-75e9b4d4c9e5",
        "parentId" : null,
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "It seems like overkill to have two different kinds of TypePredicate types and a dedicated enum. Could you just use `parameterIndex = -1` to indicate `this`?\n",
        "createdAt" : "2015-12-03T20:04:56Z",
        "updatedAt" : "2015-12-10T00:43:53Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e586943a1b60075e51fc482af2d9be278eab08b",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +1841,1845 @@\n    // @kind (TypePredicateKind.Identifier)\n    export interface IdentifierTypePredicate extends TypePredicate {\n        parameterName: string;\n        parameterIndex: number;"
  },
  {
    "id" : "d4feb18e-9f4c-4c81-a1be-7313f2b612a5",
    "prId" : 5906,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94a16c6e-b413-41d8-82b1-df9958e01820",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "More than anything else, can you leave a comment about the interaction here with `intrinsicName`?\n",
        "createdAt" : "2015-12-09T22:35:11Z",
        "updatedAt" : "2015-12-10T00:43:53Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e586943a1b60075e51fc482af2d9be278eab08b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2114,2118 @@\n        /* @internal */\n        Intrinsic = Any | String | Number | Boolean | ESSymbol | Void | Undefined | Null,\n        /* @internal */\n        Primitive = String | Number | Boolean | ESSymbol | Void | Undefined | Null | StringLiteral | Enum,"
  },
  {
    "id" : "c10059ad-731e-4440-99eb-dc70f475eb70",
    "prId" : 5725,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6b9d805-93df-4c0e-a995-4a94d72f4de3",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Nice!\n",
        "createdAt" : "2015-11-20T01:46:38Z",
        "updatedAt" : "2015-11-20T01:50:34Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b0231d9b897b44b75d7828afe61bb1048beff38",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +935,939 @@    // @kind(SyntaxKind.TemplateMiddle)\n    // @kind(SyntaxKind.TemplateTail)\n    export interface TemplateLiteralFragment extends LiteralLikeNode {\n        _templateLiteralFragmentBrand: any;\n    }"
  },
  {
    "id" : "6c9eae38-3a14-4b4e-9d8b-a75c6ddf93c5",
    "prId" : 5719,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa64c874-baec-4cd9-a402-648858a7df4c",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "What about string literal types?\n",
        "createdAt" : "2015-11-19T22:12:45Z",
        "updatedAt" : "2015-11-19T23:32:05Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "6545c258-49d4-494b-95d0-a96e52a6f5de",
        "parentId" : "fa64c874-baec-4cd9-a402-648858a7df4c",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I think there would need to be a `StringLiteralType` kind and a `StringLiteral` kind, just like how there's `ThisType` and `ThisKeyword`. So maybe a followup PR?\n",
        "createdAt" : "2015-11-19T22:17:46Z",
        "updatedAt" : "2015-11-19T23:32:05Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "84c838ea-ce3f-4575-92eb-d39abbfd356e",
        "parentId" : "fa64c874-baec-4cd9-a402-648858a7df4c",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "@DanielRosenwasser, @weswigham: I primarily need this to disambiguate `this` during tree transformations. I have no such need for disambiguation for string literal types. I may have a follow-up PR for this at some point to achieve consistency, but its not as high of a priority.\n",
        "createdAt" : "2015-11-19T23:30:28Z",
        "updatedAt" : "2015-11-19T23:32:05Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "93af2b2beb2bc9f787285db906c47dc1825627bb",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +728,732 @@    // @kind(SyntaxKind.SymbolKeyword)\n    // @kind(SyntaxKind.VoidKeyword)\n    // @kind(SyntaxKind.ThisType)\n    export interface TypeNode extends Node {\n        _typeNodeBrand: any;"
  },
  {
    "id" : "4a6fd556-2303-4ece-a68f-93e2ad9b6767",
    "prId" : 5597,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aab9f864-533e-462e-a408-7d60a37b771a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Consider adding brands to these.\n",
        "createdAt" : "2015-11-11T00:20:15Z",
        "updatedAt" : "2015-11-11T00:20:15Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "947c3911-fda7-4f96-a4a1-62ba01d43137",
        "parentId" : "aab9f864-533e-462e-a408-7d60a37b771a",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I'd rather not litter all of the interfaces with brands. They seem more valuable when disambiguating structurally similar nodes that may not be legally valid in certain parts of the tree (such as `LeftHandSideExpression` vs `Expression`).\n\nIf we ever end up with Enum type literals, I might change it to:\n\n``` ts\nexport interface EmptyStatement extends Statement {\n    kind: SyntaxKind.EmptyStatement;\n}\n...\n```\n",
        "createdAt" : "2015-11-11T22:55:05Z",
        "updatedAt" : "2015-11-11T22:55:05Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ac4b782e06111a47ec8ae12373e11e3e07a54ab",
    "line" : 566,
    "diffHunk" : "@@ -1,1 +1073,1077 @@\n    // @kind(SyntaxKind.DebuggerStatement)\n    export interface DebuggerStatement extends Statement { }\n\n    // @kind(SyntaxKind.MissingDeclaration)"
  },
  {
    "id" : "29159601-78f1-4890-b500-b08f62b2997b",
    "prId" : 5597,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "003badb5-8148-428e-920b-bbc518579c54",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "what does facroryhidden and factoryParam mean?\n",
        "createdAt" : "2015-11-12T07:36:23Z",
        "updatedAt" : "2015-11-12T07:36:23Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "38349227-9ce6-4254-a0e0-b22c205bdee5",
        "parentId" : "003badb5-8148-428e-920b-bbc518579c54",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Sorry, meant to remove those.\n",
        "createdAt" : "2015-11-17T18:54:43Z",
        "updatedAt" : "2015-11-17T18:54:43Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ac4b782e06111a47ec8ae12373e11e3e07a54ab",
    "line" : 569,
    "diffHunk" : "@@ -1,1 +1076,1080 @@\n    // @kind(SyntaxKind.MissingDeclaration)\n    // @factoryhidden(\"name\", true)\n    export interface MissingDeclaration extends DeclarationStatement, ClassElement, ObjectLiteralElement, TypeElement {\n        name?: Identifier;"
  },
  {
    "id" : "ae6a0a03-a576-4ba6-919a-233c7d017ee0",
    "prId" : 5552,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05f23665-97bb-408d-8357-dfb495e5340d",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Who uses this or will use it?\n",
        "createdAt" : "2015-11-06T17:59:19Z",
        "updatedAt" : "2015-11-06T17:59:19Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "98d7dc3e-6270-4b5b-84e2-284e83809d0d",
        "parentId" : "05f23665-97bb-408d-8357-dfb495e5340d",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Look at the changes in checker.ts.\n",
        "createdAt" : "2015-11-06T18:40:33Z",
        "updatedAt" : "2015-11-06T18:40:33Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "cc2d69a2-28d5-4399-aee1-2ea55ee2e849",
        "parentId" : "05f23665-97bb-408d-8357-dfb495e5340d",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Oh, I missed that it was doing caching. I expected some other code to read it but it looks like it's only to avoid re-computing the apparent type.\n",
        "createdAt" : "2015-11-06T18:42:56Z",
        "updatedAt" : "2015-11-06T18:42:56Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "d52455f8902a5182ebdfbc6b8813c7e740c0dede",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1958,1962 @@        mapper?: TypeMapper;     // Instantiation mapper\n        /* @internal */\n        resolvedApparentType: Type;\n    }\n"
  },
  {
    "id" : "6d9d3835-b584-4d3e-9053-b53c3cb5dacd",
    "prId" : 5121,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89adbe2c-08ce-4091-9854-87980c6b319c",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "When would you have a question token in a shorthand?\n",
        "createdAt" : "2015-10-08T21:26:10Z",
        "updatedAt" : "2015-10-09T16:55:58Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "e6ad7d31-1b06-4211-b8c6-65a42a27f75b",
        "parentId" : "89adbe2c-08ce-4091-9854-87980c6b319c",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "AFAIR we currently parse it and issue the grammar error later\n",
        "createdAt" : "2015-10-08T22:05:59Z",
        "updatedAt" : "2015-10-09T16:55:58Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "a556209b7e68306bcb9faaa36ac57e0624e3ca8e",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +562,566 @@    export interface ShorthandPropertyAssignment extends ObjectLiteralElement {\n        name: Identifier;\n        questionToken?: Node;\n        // used when ObjectLiteralExpression is used in ObjectAssignmentPattern\n        // it is grammar error to appear in actual object initializer"
  },
  {
    "id" : "80856862-2d53-459e-b19b-b649a10debf6",
    "prId" : 5121,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "895e3b1d-3560-4e40-95a9-2eca99567194",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why not just error on the `objectAssignmentInitializer`?\n",
        "createdAt" : "2015-10-10T03:23:14Z",
        "updatedAt" : "2015-10-10T03:23:14Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "67eb8348-320b-47ee-995c-7fd0b338193d",
        "parentId" : "895e3b1d-3560-4e40-95a9-2eca99567194",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I think the idea is to error on the first incorrect token. Also, this controls the span size so it is just 1.\n",
        "createdAt" : "2015-10-10T05:02:18Z",
        "updatedAt" : "2015-10-10T05:02:18Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "f0ff33cd-5ea4-4fe0-b605-6d45a393893e",
        "parentId" : "895e3b1d-3560-4e40-95a9-2eca99567194",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "the comment is referring to both `equalsToken` and `objectAssignmentInitializer` - this pair matches `Initializer` part from `CoverInitializerName` [production](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-initializer). My reasoning of reporting error on `=` instead of entire range `[equalsToken, objectAssignmentInitializer]` was:\n- having large ranges of squigglies is annoying\n- I can certainly see cases when by mistake people type `{x = 1}` instead of `{x: 1}` and personally for me it will look confusing if we squiggle `= 1` instead of just =`  \n",
        "createdAt" : "2015-10-10T05:02:30Z",
        "updatedAt" : "2015-10-10T05:02:30Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "3e0d1c78-5a69-4439-a28d-6a245ad87936",
        "parentId" : "895e3b1d-3560-4e40-95a9-2eca99567194",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "yes, @JsonFreeman is right\n",
        "createdAt" : "2015-10-10T06:14:46Z",
        "updatedAt" : "2015-10-10T06:14:46Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "e2544b35-595d-4fbb-a873-38c8381d7795",
        "parentId" : "895e3b1d-3560-4e40-95a9-2eca99567194",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Okay; in that case, can you amend the comment so it specifically says \"The below are used\". and just make it \"It is a grammar error\".\n\nOther than that LGTM.\n",
        "createdAt" : "2015-10-10T18:16:42Z",
        "updatedAt" : "2015-10-10T18:16:42Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a556209b7e68306bcb9faaa36ac57e0624e3ca8e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +565,569 @@        // used when ObjectLiteralExpression is used in ObjectAssignmentPattern\n        // it is grammar error to appear in actual object initializer\n        equalsToken?: Node;\n        objectAssignmentInitializer?: Expression;\n    }"
  },
  {
    "id" : "a37a5236-14fd-47e7-b839-2f82bed3c93d",
    "prId" : 3823,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6d8ce0b-819c-4a3c-af89-4c38369f4d21",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Please define fresh object literal in the comment.\n",
        "createdAt" : "2015-07-13T02:43:06Z",
        "updatedAt" : "2015-07-21T18:20:38Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "5b56a1ad-597f-41ad-923b-aafc1c3f63bb",
        "parentId" : "e6d8ce0b-819c-4a3c-af89-4c38369f4d21",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Why do we need a new flag here? This is set in the same place as ObjectLiteral. And when you get the regular type, you turn off FreshObjectLiteral, but not ObjectLiteral, and I don't really understand why. So a regular type is allowed to have excess properties, but it still does not need to have all the optional properties of the target in a subtype check?\n",
        "createdAt" : "2015-07-13T18:28:54Z",
        "updatedAt" : "2015-07-21T18:20:38Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "67564480-363d-4824-9bbf-a5a37707440a",
        "parentId" : "e6d8ce0b-819c-4a3c-af89-4c38369f4d21",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Well, it's related to the issue of removing freshness after the first assignment, but still remembering that the source was an object literal. It may be that we can combine the two if we give up on the first assignment bit.\n",
        "createdAt" : "2015-07-13T18:34:47Z",
        "updatedAt" : "2015-07-21T18:20:38Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "24de98ae-5cbf-437c-92d9-315a08d8f51f",
        "parentId" : "e6d8ce0b-819c-4a3c-af89-4c38369f4d21",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Yup, I think we should give up the first assignment bit. I think it is a strange rule.\n",
        "createdAt" : "2015-07-13T18:43:35Z",
        "updatedAt" : "2015-07-21T18:20:38Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "4b3c6417-f9e2-42c6-9980-40475ddb982a",
        "parentId" : "e6d8ce0b-819c-4a3c-af89-4c38369f4d21",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "So, I don't think we can get rid of the new flag. We use `TypeFlag.ObjectLiteral` to indicate that a type originated in an object literal and may contain null or undefined types. We can't turn off that flag unless we also widen the type. Yet, in type assertions and during subtype reduction we want to turn off freshness but not widen.\n\nThat said, we could still drop the assignment rule. They're really orthogonal issues.\n",
        "createdAt" : "2015-07-13T23:51:06Z",
        "updatedAt" : "2015-07-21T18:20:38Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "06549475-c5e9-4fd3-a8a6-d9ff5f557616",
        "parentId" : "e6d8ce0b-819c-4a3c-af89-4c38369f4d21",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Yes, let's drop the assignment rule.\n\nI understand what you mean about `TypeFlags.ObjectLiteral`, but I still think we can use it. We actually use `ContainsUndefinedOrNull` and `ContainsObjectLiteral` for what you are talking about, not ObjectLiteral directly. For type assertions, I think it's fine to widen, we already do in the downcast direction, and I think it's fine to do it for the upcast (it uses assignability so we should be fine). For creation of a union type, we already give it `TypeFlags.Union` plus all the widening flags (which do not include ObjectLiteral anyway). So all the flags that getWidenedType checks for would still be there.\n\nSo I think it is safe to remove it.\n",
        "createdAt" : "2015-07-14T00:28:56Z",
        "updatedAt" : "2015-07-21T18:20:38Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "40af10e9-a029-45f7-8621-4c349305acbf",
        "parentId" : "e6d8ce0b-819c-4a3c-af89-4c38369f4d21",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "To elaborate about the type assertion case, widening would essentially do two things:\n1. null and undefined become any. They are bottom types anyway, so changing them to any should have no effect.\n2. The object literal is changed with respect to the optional-properties-being-required rule. This rule only applies to subtype, and type assertions use assignability.\n",
        "createdAt" : "2015-07-14T00:31:48Z",
        "updatedAt" : "2015-07-21T18:20:38Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "2702f9fa-c791-4502-8c03-5a2db80979a5",
        "parentId" : "e6d8ce0b-819c-4a3c-af89-4c38369f4d21",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I admit it's still possible that I missed something, but if I did, I'd like to understand it before allowing us to have two flags that sound really similar and are easy to confuse.\n",
        "createdAt" : "2015-07-14T00:38:19Z",
        "updatedAt" : "2015-07-21T18:20:38Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f7bc51a1064b6dd901ba12c749121d9da69082b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1763,1767 @@        ObjectLiteral           = 0x00080000,  // Originates in an object literal\n        /* @internal */\n        FreshObjectLiteral      = 0x00100000,  // Fresh object literal type\n        /* @internal */\n        ContainsUndefinedOrNull = 0x00200000,  // Type is or contains Undefined or Null type"
  },
  {
    "id" : "da968e62-47e5-4135-a223-1fb349f10d99",
    "prId" : 3823,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4bf7d0b-daee-4912-a7a9-0591eae66e81",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Does regular mean not fresh? Are they opposites?\n",
        "createdAt" : "2015-07-13T02:45:32Z",
        "updatedAt" : "2015-07-21T18:20:38Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "2b3f11da-3bfb-4495-85e1-9f599912cfcc",
        "parentId" : "c4bf7d0b-daee-4912-a7a9-0591eae66e81",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "They are exactly the same, except the TypeFlags.FreshObjectLiteral flag is set in the fresh version.\n",
        "createdAt" : "2015-07-13T16:22:38Z",
        "updatedAt" : "2015-07-21T18:20:38Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f7bc51a1064b6dd901ba12c749121d9da69082b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1866,1870 @@    // version of a fresh type is identical except for the TypeFlags.FreshObjectLiteral flag.\n    export interface FreshObjectLiteralType extends ResolvedType {\n        regularType: ResolvedType;  // Regular version of fresh type\n    }\n"
  },
  {
    "id" : "a57af43e-4b0c-4aa6-9637-eb69e9ef1565",
    "prId" : 3622,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f61d1d7-ec46-43fe-bc9a-4e8dd5e4fce3",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "add brands so that these UnionTypeNode  and IntersectionTypeNode are distinguished and not assignable to each other.\n",
        "createdAt" : "2015-06-25T04:54:07Z",
        "updatedAt" : "2015-07-03T18:29:34Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc1888ec8abec533ef7503e79c4e4c632b17ac90",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +673,677 @@    }\n\n    export interface UnionTypeNode extends UnionOrIntersectionTypeNode { }\n\n    export interface IntersectionTypeNode extends UnionOrIntersectionTypeNode { }"
  },
  {
    "id" : "6e207f1c-1087-4a83-8c86-7a24a956a620",
    "prId" : 3622,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4648dd17-f270-4354-a1dd-1cb88b4f9de6",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "align comments.\n",
        "createdAt" : "2015-06-25T04:54:36Z",
        "updatedAt" : "2015-07-03T18:29:34Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc1888ec8abec533ef7503e79c4e4c632b17ac90",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1658,1662 @@        mapper?: TypeMapper;                // Type mapper for instantiation alias\n        referenced?: boolean;               // True if alias symbol has been referenced as a value\n        containingType?: UnionOrIntersectionType; // Containing union or intersection type for synthetic property\n        resolvedExports?: SymbolTable;      // Resolved exports of module\n        exportsChecked?: boolean;           // True if exports of external module have been checked"
  },
  {
    "id" : "21e38956-e8fc-4c1f-9277-8e1b04e3c052",
    "prId" : 3622,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70ada975-602a-4fba-97d2-7f41fd7b8662",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Add brands.\n",
        "createdAt" : "2015-06-25T04:54:59Z",
        "updatedAt" : "2015-07-03T18:29:34Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc1888ec8abec533ef7503e79c4e4c632b17ac90",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +1816,1820 @@    }\n\n    export interface UnionType extends UnionOrIntersectionType { }\n\n    export interface IntersectionType extends UnionOrIntersectionType { }"
  },
  {
    "id" : "eb05a488-15d2-456f-b40b-763df9d349d0",
    "prId" : 3622,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b8f3604-7464-4646-9ca0-3f305d4deda5",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "we use \"UnionOrIntersection\" elsewhere.  It seems like another place we'd want to use them.  i.e. \"UnionOrIntersectionProperty\".  \"Synthetic\" is odd, as it's a term we don't use consistently for this concept elsewhere.\n",
        "createdAt" : "2015-06-25T04:56:01Z",
        "updatedAt" : "2015-07-03T18:29:34Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "a5335e19-fffc-4b3c-9ef7-69dcdebcc39f",
        "parentId" : "7b8f3604-7464-4646-9ca0-3f305d4deda5",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Agree with @CyrusNajmabadi. After reading the code, it will be much easier to read if it is name `UnionOrIntersectionProperty` \n",
        "createdAt" : "2015-06-26T18:23:51Z",
        "updatedAt" : "2015-07-03T18:29:34Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "566639e2-9278-4fc5-b7f7-cdda0bb76c55",
        "parentId" : "7b8f3604-7464-4646-9ca0-3f305d4deda5",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Yeah, also instantiated properties are just as synthetic as union/intersection properties.\n",
        "createdAt" : "2015-06-29T22:14:52Z",
        "updatedAt" : "2015-07-03T18:29:34Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc1888ec8abec533ef7503e79c4e4c632b17ac90",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1579,1583 @@        Transient               = 0x04000000,  // Transient symbol (created during type check)\n        Prototype               = 0x08000000,  // Prototype property (no source representation)\n        SyntheticProperty       = 0x10000000,  // Property in union or intersection type\n        Optional                = 0x20000000,  // Optional property\n        ExportStar              = 0x40000000,  // Export * declaration"
  },
  {
    "id" : "06ea3ceb-0fee-4528-8d05-746819ff584b",
    "prId" : 3622,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4e5799a-b59a-4972-b395-6c82d34ce6b5",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Can you add a comment explaining why these are considered structured?\n",
        "createdAt" : "2015-06-29T23:27:17Z",
        "updatedAt" : "2015-07-03T18:29:34Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc1888ec8abec533ef7503e79c4e4c632b17ac90",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +1748,1752 @@        ObjectType = Class | Interface | Reference | Tuple | Anonymous,\n        UnionOrIntersection = Union | Intersection,\n        StructuredType = ObjectType | Union | Intersection,\n        /* @internal */ \n        RequiresWidening = ContainsUndefinedOrNull | ContainsObjectLiteral"
  },
  {
    "id" : "f5d393d6-b1e2-48d2-afa0-fa4f56ef67d9",
    "prId" : 3558,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c7c519b-1a8b-4427-aab0-6450b67cb3d8",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`getOptionsDiagnostics` sounds vague enough that it's not obvious that it refers to compiler options. Can we not just keep that name?\n",
        "createdAt" : "2015-06-18T17:13:37Z",
        "updatedAt" : "2015-06-18T18:00:54Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "b1962623-cf38-47bb-b2d6-28a215f0cf68",
        "parentId" : "2c7c519b-1a8b-4427-aab0-6450b67cb3d8",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Isn't everything in this API implicitly about the compiler anyways?   Like, we don't have \"getCompilerSemanticDiagnostics\" :)\n",
        "createdAt" : "2015-06-18T17:41:21Z",
        "updatedAt" : "2015-06-18T18:00:54Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "8720d36b-8ba1-4277-9d40-b22a5898e5f8",
        "parentId" : "2c7c519b-1a8b-4427-aab0-6450b67cb3d8",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Sure; but we don't have a semantic core to the parser, whereas we do have options that we give when parsing.\n",
        "createdAt" : "2015-06-18T17:52:38Z",
        "updatedAt" : "2015-06-18T18:00:54Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4f65f8bbf0b9d54311af782d989144c47cc2417",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1213,1217 @@        emit(targetSourceFile?: SourceFile, writeFile?: WriteFileCallback): EmitResult;\n\n        getOptionsDiagnostics(): Diagnostic[];\n        getGlobalDiagnostics(): Diagnostic[];\n        getSyntacticDiagnostics(sourceFile?: SourceFile): Diagnostic[];"
  },
  {
    "id" : "e5c26c7b-9e20-4857-a180-98670d1e1019",
    "prId" : 3516,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b76b1dd-9753-4cf3-a965-f9bbd9ecf072",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Don't these still need to be deferred until after getDeclaredTypeOfSymbol?\n",
        "createdAt" : "2015-06-17T05:47:24Z",
        "updatedAt" : "2015-06-17T21:18:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "408be36b-bba8-45f8-9d21-7650f8ef17eb",
        "parentId" : "8b76b1dd-9753-4cf3-a965-f9bbd9ecf072",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "In other words, why remove InterfaceWithBaseTypes?\n",
        "createdAt" : "2015-06-17T05:48:00Z",
        "updatedAt" : "2015-06-17T21:18:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "b9c93d25-203b-46e5-9a12-3cfa378ec36f",
        "parentId" : "8b76b1dd-9753-4cf3-a965-f9bbd9ecf072",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Yes, they're still deferred. The pattern we use elsewhere for _single_ deferred values is a resolvedXXX property guarded by a getXXX function that returns the value. In cases where we defer the computation of _multiple_ properties we use an XXXWithYYY type and return the object itself.\n",
        "createdAt" : "2015-06-17T13:59:13Z",
        "updatedAt" : "2015-06-17T21:18:00Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b9a1b5e20696be8c6e27480cd43034f74fbac34",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1671,1675 @@        localTypeParameters: TypeParameter[];      // Local type parameters (undefined if none)\n        resolvedBaseConstructorType?: Type;        // Resolved base constructor type of class\n        resolvedBaseTypes: ObjectType[];           // Resolved base types\n    }\n"
  },
  {
    "id" : "84b0b69b-7aaa-4da6-95d1-ce00e44c72b5",
    "prId" : 3397,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6ddf3ca-303d-436e-b1cd-3eee0663a480",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "i would call this typeAliasTypeParameter.  That way it's clear from use that it's only intended for Type aliases.  \"typeParameters\" on its own is very vague, and makes it unclear at the use site that it's only for these cases, and not for anything else with type parameters.  (same with instantiations).\n",
        "createdAt" : "2015-06-06T23:18:25Z",
        "updatedAt" : "2015-06-09T13:32:35Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "14cef859-b963-43f0-b47a-ece12cfc941b",
        "parentId" : "e6ddf3ca-303d-436e-b1cd-3eee0663a480",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "I think we either keep it this way or switch to a family of xxxSymbolLinks types like we have for types. But my preference would be to just keep it this way to reduce the noise.\n",
        "createdAt" : "2015-06-06T23:58:57Z",
        "updatedAt" : "2015-06-09T13:32:35Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "3fc3c606-ac1b-44df-b8eb-3eb0e574802d",
        "parentId" : "e6ddf3ca-303d-436e-b1cd-3eee0663a480",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I would not be opposed to starting a small family of xxxSymbolLinks types. I actually think that would be a rather nice way of compartmentalizing things.\n",
        "createdAt" : "2015-06-07T06:09:38Z",
        "updatedAt" : "2015-06-09T13:32:35Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd595739081d63577460a93442bda73dbb3ad2f9",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1542,1546 @@        type?: Type;                        // Type of value symbol\n        declaredType?: Type;                // Type of class, interface, enum, type alias, or type parameter\n        typeParameters?: TypeParameter[];   // Type parameters of type alias (undefined if non-generic)\n        instantiations?: Map<Type>;         // Instantiations of generic type alias (undefined if non-generic)\n        mapper?: TypeMapper;                // Type mapper for instantiation alias"
  },
  {
    "id" : "880ffed7-aad0-4e1b-a0f2-fd0071dfc3b9",
    "prId" : 3384,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "973681d6-1e06-4882-b412-4645cbe4b189",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why not `noLibCheck`?\n",
        "createdAt" : "2015-06-04T19:42:21Z",
        "updatedAt" : "2015-06-04T19:59:56Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "8cad624e-4993-4f37-89c9-ad723e4a2f43",
        "parentId" : "973681d6-1e06-4882-b412-4645cbe4b189",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "We also should expose this as a commandline option.\n",
        "createdAt" : "2015-06-04T19:45:03Z",
        "updatedAt" : "2015-06-04T19:59:56Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcf6129c7b6ef829d1ade87e447383c3730b80b5",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1834,1838 @@        emitDecoratorMetadata?: boolean;\n        /* @internal */ stripInternal?: boolean;\n        /* @internal */ skipDefaultLibCheck?: boolean;\n        [option: string]: string | number | boolean;\n    }"
  },
  {
    "id" : "273942b2-cb2b-4097-a11a-55f62c7e07c9",
    "prId" : 3359,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3eca1fda-5e81-4d4d-b6f1-6611c745bd4c",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "If these are optional, maybe the three former properties should also be optional.\n",
        "createdAt" : "2015-06-03T17:54:07Z",
        "updatedAt" : "2015-06-03T17:54:07Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "51c8629a-4b4c-49a5-a2a1-4521b229a0b4",
        "parentId" : "3eca1fda-5e81-4d4d-b6f1-6611c745bd4c",
        "authorId" : "5337ef4d-94c8-4e5c-879e-f0cdd297fcaa",
        "body" : "Possibly, they all get assigned currently so no need for null check:\nhttps://github.com/Microsoft/TypeScript/blob/master/src/compiler/checker.ts#L1066\n",
        "createdAt" : "2015-06-03T18:01:33Z",
        "updatedAt" : "2015-06-03T18:01:33Z",
        "lastEditedBy" : "5337ef4d-94c8-4e5c-879e-f0cdd297fcaa",
        "tags" : [
        ]
      },
      {
        "id" : "75a8715b-0450-480c-88a9-8dea12711d54",
        "parentId" : "3eca1fda-5e81-4d4d-b6f1-6611c745bd4c",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Ah ok\n",
        "createdAt" : "2015-06-03T18:09:41Z",
        "updatedAt" : "2015-06-03T18:09:41Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6ced33c1389633de8a335183f6057476f1f2e7c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1676,1680 @@        constructSignatures: Signature[];  // Construct signatures of type\n        stringIndexType?: Type;            // String index type\n        numberIndexType?: Type;            // Numeric index type\n    }\n"
  },
  {
    "id" : "954125a1-23db-4556-b5ec-0d7eb9e629b1",
    "prId" : 3316,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee614a9c-ae00-4a3b-8452-cea017d81a7b",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Can you rename this InstantiatedAnonymous? Or have all the types created by instantiateType take on the flag as well.\n\nAlso, it seems to me that References are always Instantiated. To that end, can you OR this flag into the Reference flag as well so the subset / superset relation is clear?\n",
        "createdAt" : "2015-06-01T18:17:47Z",
        "updatedAt" : "2015-06-03T21:16:42Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "f6c5fb2c-2afc-46bd-92bc-064aa09d541d",
        "parentId" : "ee614a9c-ae00-4a3b-8452-cea017d81a7b",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Agreed.  'Instantiated' conveys something entirely different to me.  Furthermore, if it is supposed to mean InstantiatedAnonymousTYpe, then i'm surprised that it doesn't include 0x00008000 as part of it.  \n",
        "createdAt" : "2015-06-02T01:21:45Z",
        "updatedAt" : "2015-06-03T21:16:42Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "87d43aa6f5cc0bb434bd606defba8588c487b8f3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1583,1587 @@        Union                   = 0x00004000,  // Union\n        Anonymous               = 0x00008000,  // Anonymous\n        Instantiated            = 0x00010000,  // Instantiated anonymous type\n        /* @internal */ \n        FromSignature           = 0x00020000,  // Created for signature assignment check"
  },
  {
    "id" : "fa40b14c-77ee-4616-9323-32bef558d39c",
    "prId" : 3274,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2941085a-d2bd-4a31-84b6-1a17de639ac4",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "this is bad.  We now have multiple ways to get the same diagnostics.  Previously, diagnostics were entirely split, and any given diagnostic would only be in one of the four \"getXXXDiagnostics\" methods.  Now both getGlobalDiagnostics and getCompilerOptions diagnostics will return the same errors.  This makes it much harder for clients to know which one they should call.  If you do want to expose getCompilerOptionsDiagnostics, then i would remove the compiler options diagnostics from getGlobalDiagnostics.\n",
        "createdAt" : "2015-05-27T09:38:57Z",
        "updatedAt" : "2015-06-03T01:04:50Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "dbc63050-0e9c-41a7-9ac8-92944b8c7c1a",
        "parentId" : "2941085a-d2bd-4a31-84b6-1a17de639ac4",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "This is why i made it internal.\n",
        "createdAt" : "2015-05-27T17:03:32Z",
        "updatedAt" : "2015-06-03T01:04:51Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "85f134a1-476a-4591-a367-86cea10caf30",
        "parentId" : "2941085a-d2bd-4a31-84b6-1a17de639ac4",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I'm not just concerned about external clients.  I'm also concerned about our own code :)\n\nThis is now more confusing for us in terms of knowing which of these functions we should be calling.  Previously it was simple.  To get all errors, with no duplicates, you just called each of these functions.  Now you have to know \"oh... if i'm transpiling, then i should call \"getCompilerOptionsDiagnostics\" but not \"getGlobalDiagnostics\".  This is not discoverable and will cause confusion.\n\nAlso, do we need to fix up anything with 'emit' in the LS case?  If the user has hte option set to just transpile, should we be changing how we get errors?\n",
        "createdAt" : "2015-05-27T19:28:19Z",
        "updatedAt" : "2015-06-03T01:04:51Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "c08edc34-abf4-42e9-8348-f8e9c87d033f",
        "parentId" : "2941085a-d2bd-4a31-84b6-1a17de639ac4",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "transpile is not an option. it is an entry point. the LS never uses transpile, nor does the commandline compiler.\n",
        "createdAt" : "2015-05-28T18:06:31Z",
        "updatedAt" : "2015-06-03T01:04:51Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "6902b050ca9cb94ba494d0900ad48a0780850ef4",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1065,1069 @@        getSemanticDiagnostics(sourceFile?: SourceFile): Diagnostic[];\n        getDeclarationDiagnostics(sourceFile?: SourceFile): Diagnostic[];\n        /* @internal */ getCompilerOptionsDiagnostics(): Diagnostic[];\n\n        /** "
  },
  {
    "id" : "a082bb17-8a9d-48b2-9925-9ae10fdb1e56",
    "prId" : 3266,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ccabc55-a8ed-49d1-9143-8581f0f67d45",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I expected to see things like changes to ClassDeclation/EnumDeclaration/etc. to make them statements.\n\nIf they're not statements, then we need to change things like Block to have an array of ModuleElements instead.\n\nRight now the type system isn't correct vis-a-vis what we say you may encounter and what you can actually encounter.\n",
        "createdAt" : "2015-05-26T22:23:13Z",
        "updatedAt" : "2015-05-31T00:11:47Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "762e8b42-e348-43f1-a092-97439de121e0",
        "parentId" : "2ccabc55-a8ed-49d1-9143-8581f0f67d45",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "They are. You're looking at the _type_ interfaces here, not the _node_ interfaces.\n",
        "createdAt" : "2015-05-26T22:43:39Z",
        "updatedAt" : "2015-05-31T00:11:47Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "5f78ef41-ef19-4e90-804c-f8c7f47b4d6b",
        "parentId" : "2ccabc55-a8ed-49d1-9143-8581f0f67d45",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I'm a bit confused.  For example, I don't see a change to EnumDeclaration to make it a Statement.  As such, i would not expect that it could be contained within a Block.  \n",
        "createdAt" : "2015-05-26T22:48:35Z",
        "updatedAt" : "2015-05-31T00:11:47Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "2c9405dd-7efc-4535-98d2-ed6b5baffb13",
        "parentId" : "2ccabc55-a8ed-49d1-9143-8581f0f67d45",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Right, it looks like only `ClassDeclaration` was changed. I will fix the others.\n",
        "createdAt" : "2015-05-26T23:03:45Z",
        "updatedAt" : "2015-05-31T00:11:47Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "ff9ef3c1-a677-4d51-9766-4b1b652b27f9",
        "parentId" : "2ccabc55-a8ed-49d1-9143-8581f0f67d45",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "1. I do not see ClassDeclaration changed here, but you said you did change that one to be a statement, right?\n2. Are there still things that are only ModuleElements but not statements? Like module/namespace declarations for instance? Are there any others?\n",
        "createdAt" : "2015-05-28T08:27:50Z",
        "updatedAt" : "2015-05-31T00:11:47Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "6de0bec4-6b66-4a38-a196-ef834aabec43",
        "parentId" : "2ccabc55-a8ed-49d1-9143-8581f0f67d45",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "1. ClassDeclaration definitely has been changed to extend Statement. Not sure what you looking at.\n2. Module, namespace, export, and import declarations are not statements (but export can be used as a modifier and is then allowed).\n",
        "createdAt" : "2015-05-28T16:03:53Z",
        "updatedAt" : "2015-05-31T00:11:47Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "ecee6e34-103a-4264-81ef-5f7a56ac189f",
        "parentId" : "2ccabc55-a8ed-49d1-9143-8581f0f67d45",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "1. I meant in this PR, but I guess it's been changed before.\n2. To clarify, the export modifier in a statement context is not _allowed_, it's just parsed as a statement.\n",
        "createdAt" : "2015-05-28T18:01:28Z",
        "updatedAt" : "2015-05-31T00:11:47Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "4b7757be-89c7-484f-9d1c-3f77f5c7e4c4",
        "parentId" : "2ccabc55-a8ed-49d1-9143-8581f0f67d45",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "We always parse all modifiers on a declaration and then issue errors later during type check. We need to do this so our incremental parsing always parses declarations the same. Also, it provides better error handling.\n",
        "createdAt" : "2015-05-28T20:39:55Z",
        "updatedAt" : "2015-05-31T00:11:47Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "6f432d67-51c2-4ccb-b249-b726782df511",
        "parentId" : "2ccabc55-a8ed-49d1-9143-8581f0f67d45",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Yes, that makes sense. Thanks for explaining.\n",
        "createdAt" : "2015-05-28T20:41:40Z",
        "updatedAt" : "2015-05-31T00:11:47Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f734d6edef5b168be800e25018a5d95d2abb949",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1631,1635 @@    }\n\n    export interface InterfaceTypeWithBaseTypes extends InterfaceType {\n        baseTypes: ObjectType[];\n    }"
  },
  {
    "id" : "d7b4b8f1-b332-4d8b-a0c8-980bef4dafc2",
    "prId" : 3262,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ad0f82e-9823-47a6-a345-36800688bead",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I think this should be TypeReferenceNode, \n",
        "createdAt" : "2015-05-26T20:34:58Z",
        "updatedAt" : "2015-06-08T23:54:02Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "e011edce-b0ea-4942-a72b-025246678373",
        "parentId" : "8ad0f82e-9823-47a6-a345-36800688bead",
        "authorId" : "3ae23f38-5f1a-4286-b485-a4c470edce21",
        "body" : "Isn't TypeReferenceNode for non-primitives only? How about primitive types?\n",
        "createdAt" : "2015-05-27T10:00:46Z",
        "updatedAt" : "2015-06-08T23:54:02Z",
        "lastEditedBy" : "3ae23f38-5f1a-4286-b485-a4c470edce21",
        "tags" : [
        ]
      },
      {
        "id" : "d2479cf9-688e-44f4-a680-3c5c61c84750",
        "parentId" : "8ad0f82e-9823-47a6-a345-36800688bead",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Yes, I believe TypeNode is indeed what you want\n",
        "createdAt" : "2015-05-28T08:28:29Z",
        "updatedAt" : "2015-06-08T23:54:02Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "efb701387e52ba2730fc2750f4e386d89b8e3234",
    "line" : null,
    "diffHunk" : "@@ -1,1 +619,623 @@    export interface TypePredicateNode extends TypeNode {\n        parameterName: Identifier;\n        type: TypeNode;\n    }\n"
  },
  {
    "id" : "eea8d9b0-e6e8-4cde-a4b0-1dd306d276b6",
    "prId" : 3249,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c0bb725-273b-49d0-8f00-1ff81dd519c9",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "DecoratorApplication?\n",
        "createdAt" : "2015-05-24T04:42:12Z",
        "updatedAt" : "2015-06-23T22:26:50Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "7b8335cb-b097-4453-9798-219af770ff13",
        "parentId" : "6c0bb725-273b-49d0-8f00-1ff81dd519c9",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I'd rather just leave this as `Decorator`\n",
        "createdAt" : "2015-05-27T19:12:23Z",
        "updatedAt" : "2015-06-23T22:26:50Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "071ef34e49a181ac4ce35000ce9f706381df11bb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +798,802 @@    }\n\n    export type CallLikeExpression = CallExpression | NewExpression | TaggedTemplateExpression | Decorator;\n\n    export interface TypeAssertion extends UnaryExpression {"
  },
  {
    "id" : "f31d0dbe-5fd7-4b7e-9ace-3c45d0404d27",
    "prId" : 3239,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e513b4be-e56d-4d5d-97b3-8001483e90e0",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Can you write what the key and the value represent in the map?\n",
        "createdAt" : "2015-05-22T05:30:41Z",
        "updatedAt" : "2015-05-22T05:30:41Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebcdd85ad06503b3776135f6c50e56c7d0f8a27d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1590,1594 @@    export interface TypeMapper {\n        (t: TypeParameter): Type;\n        mappings?: Map<Type>;  // Type mapping cache\n    }\n"
  },
  {
    "id" : "5df344b4-05bb-48a6-9640-5a98936424fe",
    "prId" : 2851,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86959464-2165-4427-9f2d-6c8ec8aa4979",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "nice.  i like that these can't be reached, by default, from an InterfaceType.\n",
        "createdAt" : "2015-04-22T17:55:29Z",
        "updatedAt" : "2015-04-22T17:55:29Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "782c55f7711573106461161a12657f6df901c75e",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1493,1497 @@\n    export interface InterfaceTypeWithDeclaredMembers extends InterfaceType {\n        declaredProperties: Symbol[];              // Declared members\n        declaredCallSignatures: Signature[];       // Declared call signatures\n        declaredConstructSignatures: Signature[];  // Declared construct signatures"
  },
  {
    "id" : "12525740-7c3c-4d90-ba8b-e7d8d7f87041",
    "prId" : 2550,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ff42ab7-c568-479e-9758-96cbeba5a8b7",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i think we need to make use of const enums from an ambient declaration an error while using this module, also consider using of internal modules on the global scope as an error..\n\nalso we need to make that available on the command line, as an experimental flag.\n",
        "createdAt" : "2015-03-30T20:32:19Z",
        "updatedAt" : "2015-03-31T20:55:15Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bdcaa3d43db6a44bed574f93de3d422bb47bf04",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1588,1592 @@        version?: boolean;\n        watch?: boolean;\n        separateCompilation?: boolean;\n        /* @internal */ stripInternal?: boolean;\n        [option: string]: string | number | boolean;"
  },
  {
    "id" : "a6e0f165-3952-4dd1-bcc4-44b5b64d311a",
    "prId" : 2356,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd16112d-ea96-466a-988b-a8b4b890d673",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Might want to consider marking this as @internal   so it doesn't affect the API tests.\n",
        "createdAt" : "2015-03-15T22:19:27Z",
        "updatedAt" : "2015-03-17T17:45:52Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "9b300ce6-fffe-44fa-8b2e-3e7bdd5eb9f8",
        "parentId" : "dd16112d-ea96-466a-988b-a8b4b890d673",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "We should just add a keyword for this instead of having this comment annotation thing. But sure.\n",
        "createdAt" : "2015-03-16T03:00:00Z",
        "updatedAt" : "2015-03-17T17:45:52Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "3879d0ae9add9b0e7bac23e88f47cda21efc068b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1489,1493 @@\n    // @internal\n    export interface TypeInferences {\n        primary: Type[];    // Inferences made directly to a type parameter\n        secondary: Type[];  // Inferences made to a type parameter in a union type"
  },
  {
    "id" : "54ef8799-a12f-40b1-98b8-10e5f75dc9ad",
    "prId" : 2339,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ade3f3ce-7af6-4527-8c6f-86a01792208b",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Does this mean you can also do\n\n``` ts\nexport = : type\n```\n",
        "createdAt" : "2015-03-13T18:17:43Z",
        "updatedAt" : "2015-03-16T21:42:59Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "ffe35abf-743d-4a03-8e2f-150e649277e9",
        "parentId" : "ade3f3ce-7af6-4527-8c6f-86a01792208b",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "No. But I get your point. We will need a new syntax kind for it.\n",
        "createdAt" : "2015-03-13T18:48:03Z",
        "updatedAt" : "2015-03-16T21:42:59Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "dc6fad2e-b8a4-4d07-933b-f5bf82e168cb",
        "parentId" : "ade3f3ce-7af6-4527-8c6f-86a01792208b",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I did the work to create a new syntax kind, but then felt it was more complexity than value. do you feel strongly about this?\n",
        "createdAt" : "2015-03-15T21:24:52Z",
        "updatedAt" : "2015-03-16T21:42:59Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "89178ca3-910f-4d20-8fa8-d3a3db4f8cc8",
        "parentId" : "ade3f3ce-7af6-4527-8c6f-86a01792208b",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "There were actually two things that I found odd:\n1. The type is only allowed if isExportEquals is false\n2. type and expression are mutually exclusive, yet this interface implies that both or neither can be there.\n\nThat said, if you tried it and it's too much added complexity, that's fine. We're already half... you know\n",
        "createdAt" : "2015-03-16T01:36:34Z",
        "updatedAt" : "2015-03-16T21:42:59Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "696b68898727d49ea9f1e0aeef8577d29be0a532",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +946,950 @@        isExportEquals?: boolean;\n        expression?: Expression;\n        type?: TypeNode;\n    }\n"
  },
  {
    "id" : "7c2cf663-50ce-4b90-a5cc-13ca474bcc43",
    "prId" : 2291,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4f86555-bdee-4c5e-9391-29642d2b2061",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Can we just add a comment that this is more like a SwitchBlock? It's somewhat misleading\n",
        "createdAt" : "2015-03-11T01:06:16Z",
        "updatedAt" : "2015-03-11T01:18:02Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "59c71acae8e6cc0dcf2bcef19a249bc143fcf20a",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +795,799 @@    }\n\n    export interface CaseBlock extends Node {\n        clauses: NodeArray<CaseOrDefaultClause>;\n    }"
  },
  {
    "id" : "3d326407-e146-40e6-96dd-9f119f309614",
    "prId" : 2161,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a65a162-0b7a-4fbd-8421-baf16f87afc1",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "loop body, not loop initializer, right?\n",
        "createdAt" : "2015-02-27T22:53:17Z",
        "updatedAt" : "2015-02-28T01:24:41Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "f779a3c1-a85d-41f4-88b0-f8ffb360d8b4",
        "parentId" : "4a65a162-0b7a-4fbd-8421-baf16f87afc1",
        "authorId" : "f2b19330-eb30-4612-ac1d-f1474fd89ba0",
        "body" : "According to ES6 spec, `let` in the loop initializer is also scoped _per iteration_ (so subject to the same downlevel codegen issues). Beware that browsers currently get it wrong (tested in IE11, FF33).\n",
        "createdAt" : "2015-02-28T12:20:52Z",
        "updatedAt" : "2015-02-28T12:21:58Z",
        "lastEditedBy" : "f2b19330-eb30-4612-ac1d-f1474fd89ba0",
        "tags" : [
        ]
      },
      {
        "id" : "c2030941-14f9-49e4-b81f-a8ff18eb9e79",
        "parentId" : "4a65a162-0b7a-4fbd-8421-baf16f87afc1",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Yeah I learned that while in the middle of reviewing this PR. I still do not quite understand the difference between the loop scope and the body scope, given that they are both per iteration. I suppose the difference is that you can access the loop scoped bindings in the initializer, guard, and incrementor of the loop, but they will be shadowed as soon as the body starts for that iteration. Though I still don't see how there could be a difference for `for...in` and `for...of`.\n",
        "createdAt" : "2015-02-28T21:37:57Z",
        "updatedAt" : "2015-02-28T21:37:57Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "6685e806-9ecb-4b0a-93ba-e1d2019fc138",
        "parentId" : "4a65a162-0b7a-4fbd-8421-baf16f87afc1",
        "authorId" : "f2b19330-eb30-4612-ac1d-f1474fd89ba0",
        "body" : "To be honest I don't think that there is any useful difference between the two. But there is a _technical_ difference, as the loop body is a new scope nested inside the loop scope itself. It means that you can redeclare `let i` both in the loop initializer and the loop body. The initializer, loop increment and loop condition share one scope, the loop body is a nested scope.\n\nAllen makes it very clear in his answer to this question: https://esdiscuss.org/topic/in-es6-do-for-loops-with-a-let-const-initializer-create-a-separate-scope\n",
        "createdAt" : "2015-02-28T23:20:50Z",
        "updatedAt" : "2015-02-28T23:20:50Z",
        "lastEditedBy" : "f2b19330-eb30-4612-ac1d-f1474fd89ba0",
        "tags" : [
        ]
      },
      {
        "id" : "cc5f4a24-036e-4754-8492-3cb9dd76a71d",
        "parentId" : "4a65a162-0b7a-4fbd-8421-baf16f87afc1",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Got it, thanks for explaining that!\n",
        "createdAt" : "2015-02-28T23:45:48Z",
        "updatedAt" : "2015-02-28T23:45:48Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b3a94c7d7bea54baec55507d67dc458004da59d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1331,1335 @@        // Values for enum members have been computed, and any errors have been reported for them.\n        EnumValuesComputed  = 0x00000080,\n        BlockScopedBindingInLoop = 0x00000100,\n    }\n"
  },
  {
    "id" : "d6975721-6c1e-4a16-aac5-b5068ae67d0b",
    "prId" : 1939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c18d1d0-98ae-4af7-80a0-5eca046b7789",
        "parentId" : null,
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "What's the significance of `@internal`?\n",
        "createdAt" : "2015-02-05T14:38:14Z",
        "updatedAt" : "2015-02-06T02:43:24Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "59252f03-ab68-4e7e-92ac-7e43a687a29b",
        "parentId" : "1c18d1d0-98ae-4af7-80a0-5eca046b7789",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "@ahejlsberg Hey Anders, 'internal' is used to prevent members/symbols/etc. from appearing in our public d.ts files for the compiler/LS API.  We are using them so that we can expose things like 'SourceFile' without necessarily having to expose all their innards.  Useful places for 'internal' include:\n\n1) lazily initialized fields.  We don't want to expose these fields directly as users could see them in an inconsistent state.  Instead, there are helper functions for getting the data that can then check and set the values.\n\n2) internal implementation details.  While we may have some functions that mutate the world, we don't necessarily want consumers seeing or accessing these.  THey're just for our compiler to call itself, but not really something that is part of our 'public' API.  \n",
        "createdAt" : "2015-02-05T20:52:27Z",
        "updatedAt" : "2015-02-06T02:43:24Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d20d20aa9c9b9ba4d7e4c6ff75c5351015c12969",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +901,905 @@        /* @internal */ nodeCount: number;\n        /* @internal */ identifierCount: number;\n        /* @internal */ symbolCount: number;\n\n        // File level diagnostics reported by the parser (includes diagnostics about /// references"
  },
  {
    "id" : "c320b3b1-5bf6-4280-a036-12ae533e8a13",
    "prId" : 1939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "479d2d73-e883-4da9-9d74-ff050b5723fc",
        "parentId" : null,
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Is there a particular reason referenceDiagnostics and parseDiagnostics are separate?\n",
        "createdAt" : "2015-02-05T14:42:52Z",
        "updatedAt" : "2015-02-06T02:43:24Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "b295cf03-a2d4-44b9-a985-9a3d8aa4b404",
        "parentId" : "479d2d73-e883-4da9-9d74-ff050b5723fc",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "@ahejlsberg  At one point there was.  Specifically, we wanted to know if there had been any actual parseDiagnostics so that we could skip grammar checks.  And we didn't want referenceDiagnostics to prevent to prevent grammar checks from happening.  \n\nHowever, at this point, they do seem superfluous.  So i will remove.\n",
        "createdAt" : "2015-02-05T20:55:33Z",
        "updatedAt" : "2015-02-06T02:43:24Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d20d20aa9c9b9ba4d7e4c6ff75c5351015c12969",
    "line" : null,
    "diffHunk" : "@@ -1,1 +905,909 @@        // File level diagnostics reported by the parser (includes diagnostics about /// references\n        // as well as code diagnostics).\n        /* @internal */ parseDiagnostics: Diagnostic[];\n        \n        // File level diagnostics reported by the binder."
  },
  {
    "id" : "1ab316f6-7f2f-4d5d-a880-5790b5cb160c",
    "prId" : 1939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "002416bd-12f2-4545-936a-0a4917cacba9",
        "parentId" : null,
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Do we really care about all these different classifications of errors? I feel this is getting more complicated, not less.\n",
        "createdAt" : "2015-02-05T14:47:41Z",
        "updatedAt" : "2015-02-06T02:43:24Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "ea98c1f2-d2b3-4c42-9713-3deab1402c11",
        "parentId" : "002416bd-12f2-4545-936a-0a4917cacba9",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "@ahejlsberg \"Do we really care about ...\"  Unfortunately, we do care.  Both tsc.ts and the services layer care about these different classifications.\n\n1) The LS wants to know about syntactic errors so it can report them right away to the user so the user can easily fix their syntactic mistakes.  This is a concept of the VS diagnostics subsystem that is deeply threaded through everywhere.\n\n2) The LS also needs to know about Declaration diagnostics.  We want to tell people (who have the -d flag) _up front_ that there are issues that would cause Declaration problems.  As such, we want to report them when we report normal semantic errors.  However, we don't want to merge Declaration and Semantic, because to get Declaration errors you essentially must do an emit.  And htat would cause tsc to do two emits.\n\n3) tsc wants to know about syntactic and semantic errors so it can report syntax, and then only report semantics if no syntax errors happened.  At hte command line this is valuable for preventing cascading errors that can make it difficult to discover the root cause.\n\n4) Both the LS and tsc need to know about global errors so that they can be reported.\n\nAs such, these four methods are the smallest number i could come up with that met all our needs.  This system is beneficial over the old one in that:\na) there is only one place to go to get diagnostics.\nb) diagnostics are cleanly separated.  You can't get the same diagnostic from different calls.\nc) diagnostics should not be missed.  For example, we had bugs where some code was checking program.getGlobalDiagnostics but was missing typeChecker.getGlobalDiagnostics. \nd) Consumers who don't need this level of granularity can just call getPreEmitDiagnostics to get all relevant diagnostics.\n\nNote that several bugs were found and squashed because of this (Including duplicate errors being reported).  We've also discovered some very odd behavior.  Namely that we were very inconsistent around checking Global Errors and deciding what we should do at that point.  Mohamed and i will be investigating this further and figuring out what to do.  With the old system, lots of our components didn't understand the differences between the APIs, nor could they tell which they should call.  People checked what they thought was sufficient, but could easily miss things.\n\nAlso, that this also more closely follows the Roslyn breakdown for diagnostics as well.  \n",
        "createdAt" : "2015-02-05T21:02:54Z",
        "updatedAt" : "2015-02-06T02:43:24Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d20d20aa9c9b9ba4d7e4c6ff75c5351015c12969",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +943,947 @@        getGlobalDiagnostics(): Diagnostic[];\n        getSemanticDiagnostics(sourceFile?: SourceFile): Diagnostic[];\n        getDeclarationDiagnostics(sourceFile?: SourceFile): Diagnostic[];\n\n        // Gets a type checker that can be used to semantically analyze source fils in the program."
  },
  {
    "id" : "878b7909-761f-42b5-8a0d-423f44d0413d",
    "prId" : 1700,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83ca3c4d-7d63-4b77-a95c-e3d2ed40a49d",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "remove this commented out line.\n",
        "createdAt" : "2015-01-20T06:11:53Z",
        "updatedAt" : "2015-02-03T19:34:08Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "45defa87418a9dd9da62c28510d302b3961d0a7e",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +899,903 @@        parseDiagnostics: Diagnostic[];\n\n        //getSyntacticDiagnostics(): Diagnostic[];\n\n        // File level diagnostics reported by the binder."
  },
  {
    "id" : "189c4e9e-8838-4d5b-80d0-abae3b90aac8",
    "prId" : 1512,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f609d1b5-28bb-427a-8a80-d77f76c9e92e",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "\"files\"\n",
        "createdAt" : "2014-12-16T22:08:45Z",
        "updatedAt" : "2014-12-18T20:20:46Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef2087add52d7260c8e14746862eabc43dcd43f5",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +937,941 @@        getDeclarationDiagnostics(sourceFile: SourceFile): Diagnostic[];\n\n        // Gets a type checker that can be used to semantically analyze source fils in the program.\n        // The 'produceDiagnostics' flag determines if the checker will produce diagnostics while\n        // analyzing the code.  It can be set to 'false' to make many type checking operaitons "
  },
  {
    "id" : "60044867-9cbb-4e09-a4f2-b12b31d2b454",
    "prId" : 1512,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e980872-413f-4fec-bc7e-020657655220",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "\"operations\"\n",
        "createdAt" : "2014-12-16T22:09:11Z",
        "updatedAt" : "2014-12-18T20:20:46Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef2087add52d7260c8e14746862eabc43dcd43f5",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +939,943 @@        // Gets a type checker that can be used to semantically analyze source fils in the program.\n        // The 'produceDiagnostics' flag determines if the checker will produce diagnostics while\n        // analyzing the code.  It can be set to 'false' to make many type checking operaitons \n        // faster.  With this flag set, the checker can avoid codepaths only necessary to produce \n        // diagnostics, but not necessary to answer semantic questions about the code."
  },
  {
    "id" : "45332ae0-1bf4-4856-8c7e-be41968fe0fd",
    "prId" : 1512,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbf80235-3c21-4b6b-bd14-ac92764d6d2a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "~~\"getDiagnostics\"~~ \"any diagnostics\"\n",
        "createdAt" : "2014-12-16T22:10:07Z",
        "updatedAt" : "2014-12-18T20:20:46Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef2087add52d7260c8e14746862eabc43dcd43f5",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +943,947 @@        // diagnostics, but not necessary to answer semantic questions about the code.\n        //\n        // If 'produceDiagnostics' is false, then any calls to get diagnostics from the TypeChecker\n        // will throw an invalid operation exception.\n        getTypeChecker(produceDiagnostics: boolean): TypeChecker;"
  },
  {
    "id" : "8bc2ed6a-3335-4377-9939-c5eb9021e146",
    "prId" : 1470,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d193970-26ca-4fb7-849b-696db76a8427",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This sounds so vague; what do we use this for other than parse error info?\n",
        "createdAt" : "2014-12-12T23:35:59Z",
        "updatedAt" : "2014-12-12T23:35:59Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea3e509154efd42fc30c5198c34aefe229aa02e2",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +331,335 @@\n        // Used to know if we've computed data from children and cached it in this node.\n        HasAggregatedChildData = 1 << 6\n    }\n"
  },
  {
    "id" : "ac656fcc-e16b-4be0-a2af-a6fc4c412dd6",
    "prId" : 1434,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9852886-52d2-4fd7-994e-b67fc61b4dd2",
        "parentId" : null,
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Alignment?\n",
        "createdAt" : "2014-12-16T21:44:45Z",
        "updatedAt" : "2014-12-17T21:22:17Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "2bfbc4e1-e319-49ce-8979-019b5c89cbb5",
        "parentId" : "f9852886-52d2-4fd7-994e-b67fc61b4dd2",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Yeah, not sure what happened there.  Will fix.\n",
        "createdAt" : "2014-12-17T00:20:51Z",
        "updatedAt" : "2014-12-17T21:22:17Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a08c54f429e486d774b92c4af6858820fb9c55f",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +296,300 @@        Const =             0x00001000,  // Variable declaration\n        OctalLiteral =      0x00002000,\n\n        Modifier = Export | Ambient | Public | Private | Protected | Static,\n        AccessibilityModifier = Public | Private | Protected,"
  },
  {
    "id" : "c0c616d6-618d-4a05-99a1-67fb82a0e0e3",
    "prId" : 1434,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef8d148e-c8e3-4e2c-b915-9454dd7c0c79",
        "parentId" : null,
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Why do we need this?\n",
        "createdAt" : "2014-12-16T21:45:28Z",
        "updatedAt" : "2014-12-17T21:22:17Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "0d3b2a10-ff5c-4a76-ad77-822601ce8f8e",
        "parentId" : "ef8d148e-c8e3-4e2c-b915-9454dd7c0c79",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "The primary problem was that hte parser was setting flags on nodes that didn't belong with them.  Specifically, if you had something like the \"let a, b, c\" the parser woudl parse a, b, and c as variable declaration, then go back and change them to have new flags on them that were dependent on this outer context.\n\nThis broke incremental scenarios because we would want to reuse a variable declaration node while parsing hte variable declaration list, and we'd happily slurp it up despite the node flag not necessarily being correct in the new context it was being parsed in.  \n\nWith the new formalization, flags like .Let/.Const travel appropriately with the VariableDeclarationList node, and VariableDeclarations are now nicely not context sensitive.  Similarly, modifier flags travel with the variable statement.\n",
        "createdAt" : "2014-12-17T00:26:45Z",
        "updatedAt" : "2014-12-17T21:22:17Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "3d055a2e-4b7f-4203-aa10-8a59a135ff6d",
        "parentId" : "ef8d148e-c8e3-4e2c-b915-9454dd7c0c79",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "I get the problem of pushing in flags from an outer context and I see how it was cleaned up, but I don't see why that necessitates introducing an extra VariableDeclarationList node. Let/Const live on the variable statement node, no?\n",
        "createdAt" : "2014-12-17T00:35:24Z",
        "updatedAt" : "2014-12-17T21:22:17Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "826dec1b-bb1d-4b78-b13c-53439c558590",
        "parentId" : "ef8d148e-c8e3-4e2c-b915-9454dd7c0c79",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Let/Const can be used for variables not in a variable statement.  For example:\n\n``` typescript\nfor (let a, b, c ...) {\n}\n```\n\nWe don't necessarily have variable statements in all the places where have variable declarations.  \n",
        "createdAt" : "2014-12-17T01:56:02Z",
        "updatedAt" : "2014-12-17T21:22:17Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "9411f883-7fe2-4d63-b03e-2569ee118fed",
        "parentId" : "ef8d148e-c8e3-4e2c-b915-9454dd7c0c79",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Got it. But why does VariableStatement need an extra level of indirection? Why not VariableStatement _is-a_ VariableDeclarationList instead of _has-a_.\n",
        "createdAt" : "2014-12-17T02:02:57Z",
        "updatedAt" : "2014-12-17T21:22:17Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a08c54f429e486d774b92c4af6858820fb9c55f",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +402,406 @@    }\n\n    export interface VariableDeclarationList extends Node {\n        declarations: NodeArray<VariableDeclaration>;\n    }"
  },
  {
    "id" : "e72761ee-30fe-4909-920e-9e9e7ec53a83",
    "prId" : 1434,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06d6152b-a09b-4c66-8d94-aaa43e897ac0",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "The thinking i had at the time was that that approach could  lead to more confusion.  i.e. people who had VariableDeclarations would then need to know \"sometimes the parent is a variable statement.  Sometimes it is a variable declaration list.\"  The intent was to make it so all clients would be able to say \"ah, i have a variable declaration  as such, i know my parent is always a variable declaration list.  Indeed in the types file, we can strongly type .parent because of that.  \n\nThis also made parsing simpler.  parseVariableStatement could just call parseVariableDeclarationList.\n",
        "createdAt" : "2014-12-17T02:52:57Z",
        "updatedAt" : "2014-12-17T21:22:17Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a08c54f429e486d774b92c4af6858820fb9c55f",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +404,408 @@    export interface VariableDeclarationList extends Node {\n        declarations: NodeArray<VariableDeclaration>;\n    }\n\n    // SyntaxKind.Parameter"
  },
  {
    "id" : "df143512-b3d4-41fd-bf54-d8ec862099a6",
    "prId" : 1346,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "711640b7-7738-4089-a5f8-b1b52805d70f",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "What is meant by 'unknown' here?\n",
        "createdAt" : "2014-12-03T03:34:10Z",
        "updatedAt" : "2014-12-09T19:29:09Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "04d2963e-4a09-4a16-8995-42616b386321",
        "parentId" : "711640b7-7738-4089-a5f8-b1b52805d70f",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "It means that a lookup of the given name (as a value) at the given location produces no match.\n",
        "createdAt" : "2014-12-03T06:28:09Z",
        "updatedAt" : "2014-12-09T19:29:09Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "92e8fd88-23fb-40d0-ae3a-4841e365083a",
        "parentId" : "711640b7-7738-4089-a5f8-b1b52805d70f",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "(good to add a comment to this effect) :)\n",
        "createdAt" : "2014-12-03T10:12:59Z",
        "updatedAt" : "2014-12-09T19:29:09Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "7bc35b3ae0e663e59b8305433da17508b868f140",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1079,1083 @@        getConstantValue(node: PropertyAccessExpression | ElementAccessExpression): number;\n        isEmitBlocked(sourceFile?: SourceFile): boolean;\n        isUnknownIdentifier(location: Node, name: string): boolean;\n    }\n"
  },
  {
    "id" : "a0ac15e8-f257-4d17-9e08-675b621ceae2",
    "prId" : 1346,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4918415-8ba2-41d6-90ef-d94e5f61d833",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "With the ability to have declaratoins that have pattern names, it now means a single declaration can end up with multiple names, and thus multiple symbols.  i.e.   `var { a, b }`   is a single variable declaration, but ends up making symbols for 'a' and 'b'.  \n\nGiven that, should we rethink how we do module decls + module symbols.  i.e.   it's now much more reasonable to say that a module decl `module a.b.c` has the name ast `a.b.c`, but that that produces three symbols.\n",
        "createdAt" : "2014-12-03T04:11:32Z",
        "updatedAt" : "2014-12-09T19:29:09Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "0879b51e-3f39-4e86-845f-0bc9ae9a7b11",
        "parentId" : "e4918415-8ba2-41d6-90ef-d94e5f61d833",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Actually, no, there is a single distinct variable declaration for each of `a` and `b`, it just so happens that they are parented by a binding pattern that in turn is parented by another variable declaration (for which no symbol is created because it is a binding pattern declaration).\n",
        "createdAt" : "2014-12-04T19:09:44Z",
        "updatedAt" : "2014-12-09T19:29:09Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "37f6b8c8-6474-4f6d-86f0-08b5d4d3a094",
        "parentId" : "e4918415-8ba2-41d6-90ef-d94e5f61d833",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Sure. I got that :)\n\nMy point was that we could follow the same pattern for modules.  i.e. if i have:\n\n``` typescript\nmodule A.B.C {\n}\n```\n\nThen the ModuleBlock would refer to this bit\n\n``` typescript\nmodule <...> {\n}\n```\n\nThis module block would not have a symbol created for it (for hte same reason you don't create a symbol for `var {a, b}`.  Then, there would be module declarations for 'a', 'b', and 'c', which would get symbols created for them.  Unlike now, where the module block is actually parented by the module declaration, you'd have the block parent itsmodule declarations (similar to how a catch block parents its variable, and how the variable declaration parents the binding declarations).\n",
        "createdAt" : "2014-12-05T16:38:43Z",
        "updatedAt" : "2014-12-09T19:29:09Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "7bc35b3ae0e663e59b8305433da17508b868f140",
    "line" : null,
    "diffHunk" : "@@ -1,1 +359,363 @@    export type EntityName = Identifier | QualifiedName;\n\n    export type DeclarationName = Identifier | LiteralExpression | ComputedPropertyName | BindingPattern;\n\n    export interface Declaration extends Node {"
  },
  {
    "id" : "604d6b6a-9958-4314-ae73-154519730a05",
    "prId" : 1343,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "057b81a5-3203-4453-8b5d-634f773c3ed6",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Extraneous space between \"for\" and \"things\"\n",
        "createdAt" : "2014-12-02T23:26:37Z",
        "updatedAt" : "2014-12-02T23:26:37Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "90bf48f2d4baba138a3bbd6edada95679fdcc59d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +804,808 @@        parseDiagnostics: Diagnostic[];\n\n        // Grammar errors are for  things the parser understood, but either the ES6 or TS grammars\n        // do not allow (like putting an 'public' modifier on a 'class declaration').\n        grammarDiagnostics: Diagnostic[];"
  },
  {
    "id" : "0e35f02d-9db1-4365-bfc4-5e02e36d4626",
    "prId" : 1308,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd0c3c97-6011-4961-97ee-61e2b563a5d3",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I don't exactly see why this is a declaration.\n",
        "createdAt" : "2014-12-01T06:28:16Z",
        "updatedAt" : "2014-12-01T06:28:44Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "ce26e638-558d-4961-a3df-8eeec1f83556",
        "parentId" : "bd0c3c97-6011-4961-97ee-61e2b563a5d3",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "It's the declaration of an anonymous symbol.  I'll add a comment explaining as much.  (Function expressions and Object literals are also in this category).\n",
        "createdAt" : "2014-12-01T06:34:14Z",
        "updatedAt" : "2014-12-01T06:34:14Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebe8711a21ef7ecca2b877b5fe121b52edcd512e",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +422,426 @@    }\n\n    export interface TypeLiteralNode extends TypeNode, Declaration {\n        members: NodeArray<Node>;\n    }"
  },
  {
    "id" : "13bd2ce6-4e61-405b-ac8a-dbdbb6309e20",
    "prId" : 1221,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e84c9a76-e272-49f7-899b-e417e0d254d2",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Why not `extends NodeArray<Node>`?\n",
        "createdAt" : "2014-11-20T19:19:34Z",
        "updatedAt" : "2014-11-20T22:27:22Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "c005c33244b75911acc04d69c6fbf23269f8acea",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +297,301 @@    }\n\n    export interface ModifiersArray extends Array<Node> {\n        flags: number;\n    }"
  },
  {
    "id" : "0bef1520-26db-493c-9856-320804b2336b",
    "prId" : 1221,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf5a79b7-0165-4cfc-b1ec-05e681133980",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "a\n",
        "createdAt" : "2014-11-20T19:24:09Z",
        "updatedAt" : "2014-11-20T22:27:22Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "c005c33244b75911acc04d69c6fbf23269f8acea",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +664,668 @@        // missing tokens, or tokens it didn't know how to deal with). Grammar errors are for \n        // things the parser understood, but either the ES6 or TS grammars do not allow (like \n        // putting an 'public' modifier on a 'class declaration').\n        parseDiagnostics: Diagnostic[];\n        grammarDiagnostics: Diagnostic[];"
  },
  {
    "id" : "eee912d1-c139-4a27-a69c-3ac634e054fe",
    "prId" : 1221,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c17e10d-1139-4843-881d-6ff950e7876e",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Move this to Declaration\n",
        "createdAt" : "2014-11-20T19:30:37Z",
        "updatedAt" : "2014-11-20T22:27:22Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "c005c33244b75911acc04d69c6fbf23269f8acea",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +290,294 @@        nextContainer?: Node;         // Next container in declaration order (initialized by binding)\n        localSymbol?: Symbol;         // Local symbol declared by node (initialized by binding only for exported nodes)\n        modifiers?: ModifiersArray;           // Array of modifiers\n    }\n"
  },
  {
    "id" : "3a93789a-519e-4117-a0d4-921ea8b3faca",
    "prId" : 1109,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb4a9d4b-dee4-4481-afae-b97cb99d886f",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "can you doc these?  What's the difference between an early error an a parse error?\n",
        "createdAt" : "2014-11-10T08:08:47Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "50975413-93f4-4b7b-adbd-84c1e69e8cf9",
        "parentId" : "bb4a9d4b-dee4-4481-afae-b97cb99d886f",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "early error - any error (can be produced at parsing\\binding\\typechecking step) that blocks emit\nparse error - error produced by parser when it scanner returns a token that parser does not understand in its current state (as opposed to grammar error when parser can interpret the token but interpretation is not legal from the grammar perespective)\n",
        "createdAt" : "2014-11-10T19:22:56Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "04d233a8-e794-45c2-855d-52cc9ce788c3",
        "parentId" : "bb4a9d4b-dee4-4481-afae-b97cb99d886f",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I would call that a grammarError then, not a parseError.\n",
        "createdAt" : "2014-11-10T20:36:20Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "23e35bcfc1bd6bf8b469b77ea42d6e64fa4b6c7f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1136,1140 @@          * (as opposed to grammar error when parser can interpret the token but interpretation is not legal from the grammar perespective)\n          */\n        isParseError?: boolean;\n    }\n"
  },
  {
    "id" : "28f8926c-4bb4-4e7b-a5d0-657885f11a33",
    "prId" : 987,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dab11a0-888a-4e05-915d-9d65e0d575b8",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "What happens on compile on save - So what happens with emit - what file name do we give.. Should it be emitted? Should it be considered ts file and not .d.ts file? What about declaration file generation - I think we should give error if emit is called with this option. (Emit time error)\nWe need tests with and without this option and .d.ts and .js file generation. Can be compiler baseline I guess.\n",
        "createdAt" : "2014-11-20T20:25:28Z",
        "updatedAt" : "2014-12-02T01:22:51Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d390f67f7dc8ae84837adfbea805a7df04718482",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1307,1311 @@        watch?: boolean;\n        preserveConstEnums?: boolean;\n        allowNonTsExtensions?: boolean;\n        [option: string]: string | number | boolean;\n    }"
  },
  {
    "id" : "dd5111cd-1c88-4c05-b02e-f3fb2061b130",
    "prId" : 650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c8b1673-e219-4bd4-9d48-89fa38ee13fc",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "note sure i get the difference between '2' and '3'.\n",
        "createdAt" : "2014-09-10T23:11:05Z",
        "updatedAt" : "2014-09-17T00:41:31Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "0dc2d2c2-7d43-45d4-83a9-77e54ef2149b",
        "parentId" : "5c8b1673-e219-4bd4-9d48-89fa38ee13fc",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "So the idea is to differentiate when users turn on declaration flag and there is semantic error, they will get declarationGenerationSkipped while without the flag on, they will get JSGeneratedWithSemanticErrors. I was thinking that it may be helpful to let users know in the second case that although we successfully create .js file there actually some semantic errots.  \n",
        "createdAt" : "2014-09-10T23:17:56Z",
        "updatedAt" : "2014-09-17T00:41:31Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ee63fa21d6ad32072e797e0da72e6387b545075",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +602,606 @@        AllOutputGenerationSkipped = 1,     // No .js generated because of syntax errors, or compiler options errors, nothing generated\n        JSGeneratedWithSemanticErrors = 2,  // .js and .map generated with semantic errors\n        DeclarationGenerationSkipped = 3,   // .d.ts generation skipped because of semantic errors or declaration emitter specific errors; Output .js with semantic errors\n        EmitErrorsEncountered = 4           // Emitter errors occurred during emitting process\n    }"
  },
  {
    "id" : "89caa94c-95c9-4d69-9242-612e0fb3494d",
    "prId" : 650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec4a9b3a-b536-4413-bf41-ad85855387a1",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "In old compiler we had : \n\n``` TypeScript\n\n    export enum EmitOutputResult {\n        Succeeded,\n        FailedBecauseOfSyntaxErrors,\n        FailedBecauseOfCompilerOptionsErrors,\n        FailedToGenerateDeclarationsBecauseOfSemanticErrors\n    }\n```\n\nAre we changing this enum ?\n",
        "createdAt" : "2014-09-10T23:40:16Z",
        "updatedAt" : "2014-09-17T00:41:31Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "e3cd655a-0d87-41c5-be49-234824f5f045",
        "parentId" : "ec4a9b3a-b536-4413-bf41-ad85855387a1",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Yes. We change the enum to have clearer status result\n",
        "createdAt" : "2014-09-10T23:53:29Z",
        "updatedAt" : "2014-09-17T00:41:31Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ee63fa21d6ad32072e797e0da72e6387b545075",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +604,608 @@        DeclarationGenerationSkipped = 3,   // .d.ts generation skipped because of semantic errors or declaration emitter specific errors; Output .js with semantic errors\n        EmitErrorsEncountered = 4           // Emitter errors occurred during emitting process\n    }\n\n    export interface EmitResult {"
  },
  {
    "id" : "3efa4aa9-67ba-49b4-b8b2-6305f87da613",
    "prId" : 473,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69e1b033-2d85-4fcd-ab7c-71c69d45276d",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Comment what this does\n",
        "createdAt" : "2014-08-19T19:02:47Z",
        "updatedAt" : "2014-08-29T22:59:29Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc0560ae596815838a67606a57b40d4f78a5de76",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +618,622 @@        symbolToString(symbol: Symbol, enclosingDeclaration?: Node, meaning?: SymbolFlags): string;\n        getAugmentedPropertiesOfApparentType(type: Type): Symbol[];\n        getRootSymbol(symbol: Symbol): Symbol;\n        getContextualType(node: Node): Type;\n    }"
  },
  {
    "id" : "d15616e9-9242-4153-8f0b-c2c845b7241d",
    "prId" : 428,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "429f7790-ea6a-42a4-b6a4-0fd4086119e0",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "After you merge the changes from typeWriter (now in master), be sure to modify SyntaxKind.LastTypeNode accordingly.\n",
        "createdAt" : "2014-08-19T17:44:44Z",
        "updatedAt" : "2014-09-15T18:08:25Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4cddc39033834a291cb241d55a0270098aaa452",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +150,154 @@        TypeLiteral,\n        ArrayType,\n        TupleType,\n        // Expression\n        ArrayLiteral,"
  }
]