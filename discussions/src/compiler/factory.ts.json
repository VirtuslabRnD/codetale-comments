[
  {
    "id" : "7d94e3b2-de1b-43be-bc40-00a8a0132df8",
    "prId" : 33768,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33768#pullrequestreview-296575041",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6202ac9e-49cc-495e-ae0b-92d40e59a306",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I imagine if we had a way to emit a deprecation warning, we'd do it here.",
        "createdAt" : "2019-10-02T22:33:09Z",
        "updatedAt" : "2019-10-02T22:33:10Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "53864d01-58c5-4165-b6d2-be99fd27c65b",
        "parentId" : "6202ac9e-49cc-495e-ae0b-92d40e59a306",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I'm working on that elsewhere...",
        "createdAt" : "2019-10-02T23:13:24Z",
        "updatedAt" : "2019-10-02T23:13:25Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c185d6fc68ddbbcd29f1c638e35e1ad98c145db",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1067,1071 @@    export function updatePropertyAccess(node: PropertyAccessExpression, expression: Expression, name: Identifier) {\n        if (isOptionalChain(node)) {\n            return updatePropertyAccessChain(node, expression, node.questionDotToken, name);\n        }\n        // Because we are updating existed propertyAccess we want to inherit its emitFlags"
  },
  {
    "id" : "92ad10a6-c532-44f2-b6bd-8c14b5eef6bd",
    "prId" : 32468,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32468#pullrequestreview-271504211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "421c35e3-6c56-4906-bde5-d00f6f3a394b",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Can you make this \"Object **is** not iterable.\"?",
        "createdAt" : "2019-08-05T21:30:33Z",
        "updatedAt" : "2019-08-05T21:30:33Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "61c4fb7f-381c-4273-a3a6-078847003f6c",
        "parentId" : "421c35e3-6c56-4906-bde5-d00f6f3a394b",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Adding a suggestion.\r\n\r\n```suggestion\r\n                throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n```",
        "createdAt" : "2019-08-06T17:31:01Z",
        "updatedAt" : "2019-08-06T17:31:01Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "a2dfa6b0-4382-452b-92e4-adc579b6b813",
        "parentId" : "421c35e3-6c56-4906-bde5-d00f6f3a394b",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "There are too many tests to resolve doing these via suggestions...",
        "createdAt" : "2019-08-06T17:36:50Z",
        "updatedAt" : "2019-08-06T17:36:50Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "395d1515eeefe5f52aab8a1365824bd0eba49215",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +3646,3650 @@                    }\n                };\n                throw new TypeError(s ? \"Object not iterable.\" : \"Symbol.iterator is not defined.\");\n            };`\n    };"
  },
  {
    "id" : "0a07ba2c-cd25-45c3-bced-9d6da40450c6",
    "prId" : 31166,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31166#pullrequestreview-231926043",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d04de28a-dc04-4365-966c-bc837c9c55a5",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You would want to add it to `allUnscopedEmitHelpers`",
        "createdAt" : "2019-04-29T22:07:49Z",
        "updatedAt" : "2019-06-11T19:19:49Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6b3a11a2870f388527f89273a42f2c890e577d8",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +3695,3699 @@    }\n\n    export const spreadArraysHelper: UnscopedEmitHelper = {\n        name: \"typescript:spreadArrays\",\n        scoped: false,"
  },
  {
    "id" : "e0087ee3-a882-45f8-bf2f-99c0edbfed57",
    "prId" : 24000,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24000#pullrequestreview-119134582",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "077ffe21-b4cf-40ef-a8be-383227586903",
        "parentId" : null,
        "authorId" : "8389a728-f47d-4de8-b757-4315de7acf48",
        "body" : "üëç no need to add unit test for this?",
        "createdAt" : "2018-05-10T01:49:24Z",
        "updatedAt" : "2018-05-10T01:49:24Z",
        "lastEditedBy" : "8389a728-f47d-4de8-b757-4315de7acf48",
        "tags" : [
        ]
      },
      {
        "id" : "e089a14a-9f89-4c0f-ad9f-651068543b7f",
        "parentId" : "077ffe21-b4cf-40ef-a8be-383227586903",
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "there are no unit tests for the other factory functions",
        "createdAt" : "2018-05-10T15:34:39Z",
        "updatedAt" : "2018-05-10T15:34:40Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc3ba76ab72df37d82dfaeefcaf8865a8ef017d8",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +100,104 @@    }\n\n    export function createRegularExpressionLiteral(text: string): RegularExpressionLiteral {\n        const node = <RegularExpressionLiteral>createSynthesizedNode(SyntaxKind.RegularExpressionLiteral);\n        node.text = text;"
  },
  {
    "id" : "cfa59221-3dc9-4113-8e78-2069358a21bc",
    "prId" : 22450,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22450#pullrequestreview-102885145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e578d39-adb9-4394-b591-98a87588a862",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "This looks concerning. Does this happen often? Did you catch the code path where this occurres?",
        "createdAt" : "2018-03-10T19:46:29Z",
        "updatedAt" : "2018-03-10T19:46:42Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "aadb69ed-a71c-42bd-9ef6-c79208de95c9",
        "parentId" : "6e578d39-adb9-4394-b591-98a87588a862",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I did look for exact code path since they are multiple ones but remember seeing this with code fix related node creations being one of them. it was discovered as part of #22167 when code fix related tests would cause those module resolution tests to fail.... ",
        "createdAt" : "2018-03-11T15:07:34Z",
        "updatedAt" : "2018-03-11T15:07:34Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0cd8d3f7d994103de2067a398da9cd31cefbf3f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +26,30 @@    export function createNodeArray<T extends Node>(elements?: ReadonlyArray<T>, hasTrailingComma?: boolean): NodeArray<T> {\n        if (!elements || elements === emptyArray) {\n            elements = [];\n        }\n        else {"
  },
  {
    "id" : "86bfdcbe-e1c5-4ae1-b19c-bf71e540ec53",
    "prId" : 21930,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21930#pullrequestreview-96378934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "912fcbc5-d505-480f-b1c3-5ea9c045b93c",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Curious why all these ending backticks got moved up a line? Simple reason. I updated `guessIndentation` to infer whitespace from whitespace-only lines (but not empty lines), as when converting comments into synthetic ones (as on accessors), once you ignore the first line you can often be left with just whitespace! In any case, this brought to my attention the fact that some of our helpers had their trailing backtick on a new line tabbed one less indentation level than the rest of the lines in the helper. We were a bit inconsistent about this, so I just updated the helpers that did not to have the backtick after the last nonwhitespace character.",
        "createdAt" : "2018-02-14T03:49:05Z",
        "updatedAt" : "2018-03-15T23:08:04Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d729cfb9b8d9064b79960f234b1e462ba2fe497",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +3229,3233 @@                }\n                return ar;\n            };`\n    };\n"
  },
  {
    "id" : "c92ee46f-3857-4c67-af66-f03859ba3ae4",
    "prId" : 21930,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21930#pullrequestreview-104313004",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e86dd16-9d58-4c67-8c26-0bed9bd07931",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "When I wrote this originally I made an effort to evaluate the property assignments in the same way (including order and optionality) that they are assigned by the parser to avoid excess polymorphism.",
        "createdAt" : "2018-03-15T01:14:01Z",
        "updatedAt" : "2018-03-15T23:08:04Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "6ea2f71d-b31b-40dc-962b-66477498eced",
        "parentId" : "4e86dd16-9d58-4c67-8c26-0bed9bd07931",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "They are very much not in the same order right now; this is the initial ordering from the parser:\r\n```ts\r\n            sourceFile.text = sourceText;\r\n            sourceFile.bindDiagnostics = [];\r\n            sourceFile.languageVersion = languageVersion;\r\n            sourceFile.fileName = normalizePath(fileName);\r\n            sourceFile.languageVariant = getLanguageVariant(scriptKind);\r\n            sourceFile.isDeclarationFile = isDeclarationFile;\r\n            sourceFile.scriptKind = scriptKind;\r\n```\r\nif this is important we can correct it in a separate PR.",
        "createdAt" : "2018-03-15T17:53:18Z",
        "updatedAt" : "2018-03-15T23:08:04Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d729cfb9b8d9064b79960f234b1e462ba2fe497",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +2395,2399 @@            updated.path = node.path;\n            updated.text = node.text;\n            updated.isDeclarationFile = isDeclarationFile === undefined ? node.isDeclarationFile : isDeclarationFile;\n            updated.referencedFiles = referencedFiles === undefined ? node.referencedFiles : referencedFiles;\n            updated.typeReferenceDirectives = typeReferences === undefined ? node.typeReferenceDirectives : typeReferences;"
  },
  {
    "id" : "5696764f-ba3b-4a72-8fc2-2a3bb35f7d4c",
    "prId" : 21577,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21577#pullrequestreview-93755749",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b68e746a-21cb-4cf4-be34-ef69a8340d46",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "This leads me to wonder why we have two separate properties for this on `PropertyDeclaration`.",
        "createdAt" : "2018-02-02T20:34:22Z",
        "updatedAt" : "2018-02-02T20:35:52Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "4a216cce-5246-4568-ae81-fd1c6933c5ac",
        "parentId" : "b68e746a-21cb-4cf4-be34-ef69a8340d46",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Yeah, that's unfortunate...",
        "createdAt" : "2018-02-02T21:03:38Z",
        "updatedAt" : "2018-02-02T21:03:38Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a05b3cda4fdad3cf091ddd2eea3d4108551088ee",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +357,361 @@        node.modifiers = asNodeArray(modifiers);\n        node.name = asName(name);\n        node.questionToken = questionOrExclamationToken !== undefined && questionOrExclamationToken.kind === SyntaxKind.QuestionToken ? questionOrExclamationToken : undefined;\n        node.exclamationToken = questionOrExclamationToken !== undefined && questionOrExclamationToken.kind === SyntaxKind.ExclamationToken ? questionOrExclamationToken : undefined;\n        node.type = type;"
  },
  {
    "id" : "c79faa1b-ab84-4cb2-9883-527de143ffe6",
    "prId" : 19916,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19916#pullrequestreview-81023745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84b08cb1-b02c-4134-b8f7-a4aa41e67893",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This isn't internal, but it uses `StringLiteralLike`. You can technically make an internal overload for it, or use `NoSubstitutionTemplateLiteral`",
        "createdAt" : "2017-12-04T23:11:40Z",
        "updatedAt" : "2018-01-09T21:01:12Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "cd1ac16a-8cf3-4895-96a7-fa0d1279b48c",
        "parentId" : "84b08cb1-b02c-4134-b8f7-a4aa41e67893",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This isn't exported so it won't show up in the public API. API baseline tests would have told us if we tried to use an internal type in a public api.",
        "createdAt" : "2017-12-04T23:18:31Z",
        "updatedAt" : "2018-01-09T21:01:12Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d67ef009c0ea63416675289f5d7b245d34aa3a8f",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +102,106 @@    }\n\n    function createLiteralFromNode(sourceNode: StringLiteralLike | NumericLiteral | Identifier): StringLiteral {\n        const node = createStringLiteral(getTextOfIdentifierOrLiteral(sourceNode));\n        node.textSourceNode = sourceNode;"
  },
  {
    "id" : "2d2995ae-f27f-43f4-8298-2068342d3be5",
    "prId" : 19590,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19590#pullrequestreview-73033424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e87eaaad-d4be-4d9c-962c-3bae6a3ab60f",
        "parentId" : null,
        "authorId" : "f6f9f6e7-b6dc-4ac7-9d04-3df732edd35b",
        "body" : "Is parenthesizing `FunctionExpression` and `ClassExpression` enough to stop them from being seen as `HoistableDeclaration`/`ClassDeclaration`? ü§î ",
        "createdAt" : "2017-10-31T01:15:44Z",
        "updatedAt" : "2017-10-31T01:15:44Z",
        "lastEditedBy" : "f6f9f6e7-b6dc-4ac7-9d04-3df732edd35b",
        "tags" : [
        ]
      },
      {
        "id" : "33e6a11d-c18f-4cbe-b64c-1a321d2410b1",
        "parentId" : "e87eaaad-d4be-4d9c-962c-3bae6a3ab60f",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Yes. Once you add parens, you are no longer in a declaration.",
        "createdAt" : "2017-10-31T01:19:49Z",
        "updatedAt" : "2017-10-31T01:19:49Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "78ae019b-5b83-463a-8bf2-8a6c645445a5",
        "parentId" : "e87eaaad-d4be-4d9c-962c-3bae6a3ab60f",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Should be. Anything that doesn't work that way is parsing incorrectly.",
        "createdAt" : "2017-10-31T01:23:03Z",
        "updatedAt" : "2017-10-31T01:23:03Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "899f719025705d817cff378e9e7b2190a196ebbf",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +3900,3904 @@        const check = skipPartiallyEmittedExpressions(e);\n        return (check.kind === SyntaxKind.ClassExpression ||\n            check.kind === SyntaxKind.FunctionExpression ||\n            check.kind === SyntaxKind.CommaListExpression ||\n            isBinaryExpression(check) && check.operatorToken.kind === SyntaxKind.CommaToken)"
  },
  {
    "id" : "0013ed7b-6362-4390-bbf8-54d148062739",
    "prId" : 19249,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19249#pullrequestreview-73299015",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "parentId" : null,
        "authorId" : "f6f9f6e7-b6dc-4ac7-9d04-3df732edd35b",
        "body" : "Should this perhaps be customizable, similar to how `--jsxFactory` is? e.g. `--jsxFragmentComponent`?\r\n\r\nArguably not useful for anything but React and React clones, though; as other less similar frameworks would want to do other special processing on fragments.",
        "createdAt" : "2017-10-19T04:38:51Z",
        "updatedAt" : "2017-10-31T17:54:21Z",
        "lastEditedBy" : "f6f9f6e7-b6dc-4ac7-9d04-3df732edd35b",
        "tags" : [
        ]
      },
      {
        "id" : "aea06943-4f99-4c6b-bf55-1461447adbb7",
        "parentId" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "I agree with your second point here; to take the example of Mithril, the framework supports fragments, but with a completely different approach than React will (i.e. `m.fragment(attrs, children)`) so it's not as convenient as simply replacing the call to `createElement` with `--jsxFactory`. It seems to make sense in this case to just preserve the JSX syntax as is for non-React libs and have each define their own transpilation depending on their implementation of fragments.",
        "createdAt" : "2017-10-19T16:29:01Z",
        "updatedAt" : "2017-10-31T17:54:21Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "783169e8-25fa-4271-8b57-62ec04032391",
        "parentId" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "@Kovensky do you know what babel will do here? would it support another version of the paragma for the `React.createElement`? ",
        "createdAt" : "2017-10-23T22:48:45Z",
        "updatedAt" : "2017-10-31T17:54:21Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "13cd1409-13d8-4ba3-a473-8d372e8ef596",
        "parentId" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "checked with @hzoo over slack and does not seem that babel have plans for this in the immediate term. \r\nI wounder if we should just make it an error to use Fragment + `--jsx React` + `--jsxNamespace`",
        "createdAt" : "2017-10-24T16:16:39Z",
        "updatedAt" : "2017-10-31T17:54:21Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "ffc4655e-53ab-4ad3-ab72-2961585c7af5",
        "parentId" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "@uniqueiniquity can you file an issue for adding the error.",
        "createdAt" : "2017-10-24T16:17:31Z",
        "updatedAt" : "2017-10-31T17:54:21Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "25ba6476-bf4d-4344-ba6b-e6780840a3ce",
        "parentId" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "authorId" : "637454d8-117e-4688-8b45-638d2e3f76d0",
        "body" : "I think we can add it later when it's really asked for?",
        "createdAt" : "2017-10-24T17:26:22Z",
        "updatedAt" : "2017-10-31T17:54:21Z",
        "lastEditedBy" : "637454d8-117e-4688-8b45-638d2e3f76d0",
        "tags" : [
        ]
      },
      {
        "id" : "66809c4c-2d9d-4259-ab57-a719ac65d43a",
        "parentId" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "yeah. that is why we are adding an error. this will ensure that we do not have any unintended uses of the Fragment element. once we add a new option we can remove/relax the error.",
        "createdAt" : "2017-10-24T17:36:29Z",
        "updatedAt" : "2017-10-31T17:54:21Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "5be4d4d6-f685-415f-9120-68e5c6bcb544",
        "parentId" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why would we want to error here? Seems like you're not helping that many people by preventing this.",
        "createdAt" : "2017-10-24T18:01:44Z",
        "updatedAt" : "2017-10-31T17:54:21Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "e18632a2-675c-4d8d-bf3f-1855d077ef9d",
        "parentId" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "The concern was those that use --jsx react and --jsxFactory to emit for a different framework. In particular, Mithril has already supported [fragments](https://mithril.js.org/fragment.html) for about a year with the syntax `m.fragment(attrs, children)`, which doesn't really work with our current setup.",
        "createdAt" : "2017-10-24T19:57:56Z",
        "updatedAt" : "2017-10-31T17:54:22Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "c810ef3f-0e12-4f4e-bf4e-5ad123b31ae8",
        "parentId" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "True, but if you're importing React under a different name, who are we to stop users?\r\n\r\nAlso, might as well ask: @developit @KFlash @trueadm @lhorie, do Preact, Inferno, and Mithril intend to support fragments with a similar top-level API? I ask because your libraries allow users to take advantage of Babel's React JSX pragma option.",
        "createdAt" : "2017-10-24T20:19:15Z",
        "updatedAt" : "2017-10-31T17:54:22Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "8636094f-c169-4c91-a61f-33ab34c94046",
        "parentId" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "> True, but if you're importing React under a different name, who are we to stop users?\r\n\r\nit is not going to work.. the emit still emits `React.Fragment` in the otuput. so if `React` is not defined this is going to fail at runtime.\r\ne.g. `--jsxFactory h`  results in `h(React.Fragment, null, [...])`\r\n\r\n\r\nThe question is how do we support this for non-React, non-`--reactNamesace`-users? one option is to add a new `--jsxFragmentParagma` or similar that defaults to `React.Fragment`.",
        "createdAt" : "2017-10-24T20:51:23Z",
        "updatedAt" : "2017-10-31T17:54:22Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "9392cc52-ad07-4630-b45b-e58872b9520b",
        "parentId" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "> it is not going to work.. \r\n\r\nI don't understand, the emit currently uses `createReactNamespace`. Maybe a test should be added?",
        "createdAt" : "2017-10-24T22:05:58Z",
        "updatedAt" : "2017-10-31T17:54:22Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "59526cd2-abfa-44b8-b908-61ba41c3148b",
        "parentId" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Oh, I think I see now. I'm confusing `jsxFactory` and `reactNamespace`",
        "createdAt" : "2017-10-24T22:10:09Z",
        "updatedAt" : "2017-10-31T17:54:22Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "442f06a4-7d9a-4d3a-a572-340dac2a0b48",
        "parentId" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "So are you on board with issuing the error?",
        "createdAt" : "2017-10-24T23:16:03Z",
        "updatedAt" : "2017-10-31T17:54:22Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "f2bd036c-022b-4e2a-bba8-45145e75ee2a",
        "parentId" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Probably, but feel free not to block this PR on it.",
        "createdAt" : "2017-10-25T20:41:18Z",
        "updatedAt" : "2017-10-31T17:54:22Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "600beecd-7fb3-4994-885a-15949e4c2c02",
        "parentId" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "Updated the PR to issue an error.",
        "createdAt" : "2017-10-25T20:43:02Z",
        "updatedAt" : "2017-10-31T17:54:22Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "5bb0bcfa-163c-41e4-93b1-2f955368c84a",
        "parentId" : "e79f9dfa-ac30-4d9b-a84f-56267e74787e",
        "authorId" : "f4312295-2574-42fc-9f31-aae0f1153eb0",
        "body" : "In the Babel PR, I add a pragma for fragments, as @mhegazy suggested. https://github.com/babel/babel/pull/6552/files#diff-7e5b807d66ce513f501563ad8f8d03e6R117\r\nhttps://github.com/babel/babel/pull/6552/files#diff-7e5b807d66ce513f501563ad8f8d03e6R89",
        "createdAt" : "2017-10-31T19:40:03Z",
        "updatedAt" : "2017-10-31T19:40:04Z",
        "lastEditedBy" : "f4312295-2574-42fc-9f31-aae0f1153eb0",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ebb2e8a34393cd15838e595ad8054126a8ff425",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +3037,3041 @@            createReactNamespace(reactNamespace, parentElement),\n            \"Fragment\"\n        );\n\n        const argumentsList = [<Expression>tagName];"
  },
  {
    "id" : "452f28ee-c295-44d8-a56d-a699864eaa62",
    "prId" : 18709,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18709#pullrequestreview-64729048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01e5f79d-8bee-4955-9751-9b63c3ee4d98",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Generally we only update `Node` or `NodeArray` properties, not strings (e.g. there's no update method for `Identifier`). I don't think we need these update methods.",
        "createdAt" : "2017-09-23T01:10:26Z",
        "updatedAt" : "2017-09-23T01:10:33Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "200c8cd1-c7dd-4b31-8888-599f29ca53e2",
        "parentId" : "01e5f79d-8bee-4955-9751-9b63c3ee4d98",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Alright then, will remove.",
        "createdAt" : "2017-09-23T02:03:21Z",
        "updatedAt" : "2017-09-23T02:03:21Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ffe22c74bd7c6a683801f8efa8c244483394e3e",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1214,1218 @@    }\n\n    export function updateTemplateHead(node: TemplateHead, text: string) {\n        return node.text !== text\n            ? updateNode(createTemplateHead(text), node)"
  },
  {
    "id" : "4fa4453e-ee62-4d69-87b6-fa33bdfd8455",
    "prId" : 18284,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18284#pullrequestreview-61323851",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5b7da9a-3a8b-4cdb-ad80-a4f10d7bcaf8",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Need to ensure that we use the `=>` from the *new* tree, which has a correct position. The `=>` from the old tree has a different position that causes assertion errors in the formatter.",
        "createdAt" : "2017-09-06T20:27:41Z",
        "updatedAt" : "2017-09-07T21:22:50Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "96f7061d-a81c-4778-9032-e6faae2635ad",
        "parentId" : "e5b7da9a-3a8b-4cdb-ad80-a4f10d7bcaf8",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Can we add it at the end instead?",
        "createdAt" : "2017-09-06T21:35:03Z",
        "updatedAt" : "2017-09-07T21:22:50Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "769c3892-43eb-4511-954c-0231eba5416f",
        "parentId" : "e5b7da9a-3a8b-4cdb-ad80-a4f10d7bcaf8",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "We should always keep elements in the create/update methods in the order they are parsed.",
        "createdAt" : "2017-09-07T19:14:16Z",
        "updatedAt" : "2017-09-07T21:22:50Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b33dbecfd60b6665e744b0e3219012a73eda2222",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1038,1042 @@        parameters: ReadonlyArray<ParameterDeclaration>,\n        type: TypeNode | undefined,\n        equalsGreaterThanTokenOrBody: Token<SyntaxKind.EqualsGreaterThanToken> | ConciseBody,\n        bodyOrUndefined?: ConciseBody,\n    ): ArrowFunction {"
  },
  {
    "id" : "198fd9dd-fa6a-41fc-b52e-68f9765f7dee",
    "prId" : 16226,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16226#pullrequestreview-42161921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7eb84217-b395-4fb9-92c7-63d6cdb0eeb9",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "The reason I used `slice` was I always wanted to be sure `leadingComments` and `trailingComments` were unique arrays on an emit node, in case they are modified later. Now it is possible for someone to change the leading/trailing comments of a cloned node and it will affect the leading/trailing comments of the source node (though its not a likely scenario).",
        "createdAt" : "2017-06-05T21:05:14Z",
        "updatedAt" : "2017-06-05T21:21:24Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "ea68935c-8022-4b2b-a8ce-f3738b7d8bb7",
        "parentId" : "7eb84217-b395-4fb9-92c7-63d6cdb0eeb9",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "That interface is internal, but it does look like `.leadingComments` is potentially mutable due to `addSyntheticLeadingComment`.",
        "createdAt" : "2017-06-05T21:42:38Z",
        "updatedAt" : "2017-06-05T21:42:38Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "083079ee1509826ec75921f9dc78340aba214840",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2504,2508 @@        } = sourceEmitNode;\n        if (!destEmitNode) destEmitNode = {};\n        if (leadingComments) destEmitNode.leadingComments = concatenate(leadingComments, destEmitNode.leadingComments);\n        if (trailingComments) destEmitNode.trailingComments = concatenate(trailingComments, destEmitNode.trailingComments);\n        if (flags) destEmitNode.flags = flags;"
  },
  {
    "id" : "277e7a30-982c-41e1-aa2e-45bcf53d6c9e",
    "prId" : 16120,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16120#pullrequestreview-41092289",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecd7ec66-9944-4e47-96a7-34fd51e390d1",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "nit: should `param` and `paramValue` be default value of []?",
        "createdAt" : "2017-05-30T19:45:54Z",
        "updatedAt" : "2017-05-31T21:58:42Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "cc2ae45f-7694-4149-ba3b-2b509633bea8",
        "parentId" : "ecd7ec66-9944-4e47-96a7-34fd51e390d1",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "No, these are not arrays. As written, this function only allows zero or one parameter.",
        "createdAt" : "2017-05-30T22:28:16Z",
        "updatedAt" : "2017-05-31T21:58:42Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ddbfcae8a40c6f1618594b774f6a7f321dd9a9c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2136,2140 @@\n    export function createImmediatelyInvokedFunctionExpression(statements: Statement[]): CallExpression;\n    export function createImmediatelyInvokedFunctionExpression(statements: Statement[], param: ParameterDeclaration, paramValue: Expression): CallExpression;\n    export function createImmediatelyInvokedFunctionExpression(statements: Statement[], param?: ParameterDeclaration, paramValue?: Expression) {\n        return createCall("
  },
  {
    "id" : "396dd366-6e44-4e73-b399-2593701f42bc",
    "prId" : 15791,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15791#pullrequestreview-37964018",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcbd1de3-fe36-435c-a320-7a84eaf59035",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "rename to createCommaListExpression to align with the other create or update functions?",
        "createdAt" : "2017-05-12T18:53:03Z",
        "updatedAt" : "2017-05-12T18:53:45Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      },
      {
        "id" : "4f20e8fc-3b31-48bc-b3f1-5eca908699c2",
        "parentId" : "dcbd1de3-fe36-435c-a320-7a84eaf59035",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Actually, most other create/update functions for expressions elide the word Expression.",
        "createdAt" : "2017-05-12T23:48:45Z",
        "updatedAt" : "2017-05-12T23:48:45Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "22cf036ed91e638220520bb5ff5b167ee723180c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +2090,2094 @@    }\n\n    export function createCommaList(elements: Expression[]) {\n        const node = <CommaListExpression>createSynthesizedNode(SyntaxKind.CommaListExpression);\n        node.elements = createNodeArray(sameFlatMap(elements, flattenCommaElements));"
  },
  {
    "id" : "bbfca37d-fdad-49c7-9e27-7da75d7c70dd",
    "prId" : 15791,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15791#pullrequestreview-37917357",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd584e62-171b-41aa-a4e4-70074e772bee",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "same as above",
        "createdAt" : "2017-05-12T18:53:11Z",
        "updatedAt" : "2017-05-12T18:53:45Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "22cf036ed91e638220520bb5ff5b167ee723180c",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +2096,2100 @@    }\n\n    export function updateCommaList(node: CommaListExpression, elements: Expression[]) {\n        return node.elements !== elements\n            ? updateNode(createCommaList(elements), node)"
  },
  {
    "id" : "41dec70a-bd8d-418e-b6ba-fe388dba1d68",
    "prId" : 15531,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15531#pullrequestreview-36421462",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a64d8441-6402-4ca6-8392-bc549277d67c",
        "parentId" : null,
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "why make the `Declaration` part of the name implicit?",
        "createdAt" : "2017-05-03T23:51:44Z",
        "updatedAt" : "2017-05-04T00:04:44Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "f33309d7-9610-4bbe-871f-09c5abf2366c",
        "parentId" : "a64d8441-6402-4ca6-8392-bc549277d67c",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Consistency with most other factory functions. Most of the time we're transforming to JavaScript, and JavaScript doesn't have method signatures.",
        "createdAt" : "2017-05-05T01:05:27Z",
        "updatedAt" : "2017-05-05T01:05:27Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "981956af7a96719729740e2f13bb3019559081e2",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +328,332 @@    }\n\n    export function createMethod(decorators: Decorator[] | undefined, modifiers: Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | PropertyName, questionToken: QuestionToken | undefined, typeParameters: TypeParameterDeclaration[] | undefined, parameters: ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined) {\n        const node = <MethodDeclaration>createSynthesizedNode(SyntaxKind.MethodDeclaration);\n        node.decorators = asNodeArray(decorators);"
  },
  {
    "id" : "62cd16fc-a078-4074-93dc-bec620429a3a",
    "prId" : 15531,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15531#pullrequestreview-36421547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fda566cf-4dfe-495c-9cbb-8ab0677527d4",
        "parentId" : null,
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "In analogue to the above, should this be `createSignature`?",
        "createdAt" : "2017-05-03T23:52:44Z",
        "updatedAt" : "2017-05-04T00:04:44Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "2fb40a84-ae1c-40fe-90e2-36da924fe617",
        "parentId" : "fda566cf-4dfe-495c-9cbb-8ab0677527d4",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Per above, signatures are purely TypeScript. We can probably change the name if only to make it more concise.",
        "createdAt" : "2017-05-05T01:06:40Z",
        "updatedAt" : "2017-05-05T01:06:41Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "981956af7a96719729740e2f13bb3019559081e2",
    "line" : 327,
    "diffHunk" : "@@ -1,1 +454,458 @@\n    /* @internal */\n    export function createSignatureDeclaration(kind: SyntaxKind, typeParameters: TypeParameterDeclaration[] | undefined, parameters: ParameterDeclaration[], type: TypeNode | undefined) {\n        const node = createSynthesizedNode(kind) as SignatureDeclaration;\n        node.typeParameters = asNodeArray(typeParameters);"
  },
  {
    "id" : "deb6e5e2-852c-45d9-bb50-0f733cab1529",
    "prId" : 15473,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15473#pullrequestreview-67796947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db5e6d38-506b-4780-9a6b-a44f28773920",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "This should check `node.operator` in addition to `node.type`, right?",
        "createdAt" : "2017-10-05T21:27:00Z",
        "updatedAt" : "2017-11-16T01:32:01Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "f233fe94-feb9-422c-92d1-e89e394d9ae2",
        "parentId" : "db5e6d38-506b-4780-9a6b-a44f28773920",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "No. `operator` is not a `Node` and you can't change it during update. We have a very small number of cases where we allow this, but generally we shouldn't. If you want to change the operator you should call `createTypeOperatorNode` instead.",
        "createdAt" : "2017-10-06T21:25:45Z",
        "updatedAt" : "2017-11-16T01:32:01Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccba1280dc51d6044f8c6190ae36309902de1988",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +747,751 @@\n    export function updateTypeOperatorNode(node: TypeOperatorNode, type: TypeNode) {\n        return node.type !== type ? updateNode(createTypeOperatorNode(node.operator, type), node) : node;\n    }\n"
  },
  {
    "id" : "066e3329-447b-42e0-8137-7aa616ecb646",
    "prId" : 12028,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12028#pullrequestreview-7283779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad9413a0-5f32-4e15-abde-3c6ea57534d8",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "the only changes here are to add extra parameters needed to use transformFunctionBody and friends outside of a transformer, and to pass along convertObjectRest to `flattenParameterDestructuring`.\n",
        "createdAt" : "2016-11-04T21:00:15Z",
        "updatedAt" : "2016-11-09T18:53:13Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "01969475cf576b4f476beeb5aca648e743eb5cd2",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +3074,3078 @@     *\n     * @param node A function-like node.\n     */\n    export function transformFunctionBody(node: FunctionLikeDeclaration,\n                                          visitor: (node: Node) => VisitResult<Node>,"
  },
  {
    "id" : "d1fd46fc-21a0-4b3a-9e91-399b7104fd07",
    "prId" : 12028,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12028#pullrequestreview-7284097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26df5dba-d495-495c-8f99-383906c12340",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "the only changes to convertForOf are \n1. in creating `counter` and `elementAccess`\n2. calling flattenParameterDestructuring with `convertObjectRest`\n3. calling `createForOf` vs `createFor` depending on whether `convertObjectRest` is true.\n\nOtherwise it's just moved from es2015\n",
        "createdAt" : "2016-11-04T21:02:17Z",
        "updatedAt" : "2016-11-09T18:53:13Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "01969475cf576b4f476beeb5aca648e743eb5cd2",
    "line" : 384,
    "diffHunk" : "@@ -1,1 +3449,3453 @@        //     for (let v of arr) { }\n        //\n        // we don't want to emit a temporary variable for the RHS, just use it directly.\n        const counter = convertObjectRest ? undefined : createLoopVariable();\n        const rhsReference = expression.kind === SyntaxKind.Identifier"
  },
  {
    "id" : "d927fa4a-8385-4d88-80e0-0a26288c3b68",
    "prId" : 9852,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea910ab1-adf7-45fa-81e7-85f8471f96db",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "why we call this function here?\n",
        "createdAt" : "2016-07-21T15:43:44Z",
        "updatedAt" : "2016-07-21T15:43:44Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "da35a55e-e0d0-4579-83a9-bd48eaffb994",
        "parentId" : "ea910ab1-adf7-45fa-81e7-85f8471f96db",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "We always call `aggregateTransformFlags` at some point during the transformation pass, usually just after this function is called. By calling it here we cut down on how deep `aggregateTransformFlags` has to analyze a subtree.\n",
        "createdAt" : "2016-07-21T16:52:23Z",
        "updatedAt" : "2016-07-21T16:52:23Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b087526b8c8984eaad7b9d806bb37acdf83f3df0",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +27,31 @@                updated.startsOnNewLine = true;\n            }\n            aggregateTransformFlags(updated);\n        }\n        return updated;"
  },
  {
    "id" : "b9b62582-1be4-40b8-a138-99b6afe8e61a",
    "prId" : 9175,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf9f01d3-b25e-4fe0-bc1e-6b8b7081f089",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Why not `recordTempVariable?: (node: Identifier) => void`?\n",
        "createdAt" : "2016-06-17T05:42:01Z",
        "updatedAt" : "2016-07-18T22:57:12Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "cd899b42-093a-49e9-a5da-51bc91f8338b",
        "parentId" : "bf9f01d3-b25e-4fe0-bc1e-6b8b7081f089",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "To catch mistakes. Its acceptable to not record the temp variable, but you almost always want to. The only cases where we don't are when we're creating a temp parameter, or we are going to add the temp variable name to a `VariableDeclarationList` ourselves.\n",
        "createdAt" : "2016-06-17T05:49:26Z",
        "updatedAt" : "2016-07-18T22:57:12Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2857672dcb70b9985220b374ffec6c018346c55",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +140,144 @@    }\n\n    export function createTempVariable(recordTempVariable: ((node: Identifier) => void) | undefined, location?: TextRange): Identifier {\n        const name = <Identifier>createNode(SyntaxKind.Identifier, location);\n        name.text = \"\";"
  },
  {
    "id" : "4c7c509b-7d3b-457a-ad05-dae84d2ead83",
    "prId" : 9175,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7dd1d82-5fd3-4372-8280-1f1cc6293429",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "`node.multiLine = !!multiLine`? Or does it really need to not exist when not set?\n",
        "createdAt" : "2016-06-17T05:44:54Z",
        "updatedAt" : "2016-07-18T22:57:12Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "7599b8ca-1e54-4b3d-9c0c-e446b5e0088a",
        "parentId" : "f7dd1d82-5fd3-4372-8280-1f1cc6293429",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Setting it unnecessarily could introduce a new hidden class and cause deoptimizations, and increases the number of bytes per node. \n",
        "createdAt" : "2016-06-17T05:50:51Z",
        "updatedAt" : "2016-07-18T22:57:12Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2857672dcb70b9985220b374ffec6c018346c55",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +324,328 @@        const node = <ArrayLiteralExpression>createNode(SyntaxKind.ArrayLiteralExpression, location);\n        node.elements = parenthesizeListElements(createNodeArray(elements));\n        if (multiLine) {\n            node.multiLine = true;\n        }"
  },
  {
    "id" : "22e5a8c0-5d2c-41ca-b1b3-8db31bec474c",
    "prId" : 9175,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c788abcb-54cf-48bb-9653-dcb99b18a92d",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Same question as above.\n",
        "createdAt" : "2016-06-17T05:45:16Z",
        "updatedAt" : "2016-07-18T22:57:12Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "dc1c4c28-f1f7-4c3a-a9ca-76504eaed19f",
        "parentId" : "c788abcb-54cf-48bb-9653-dcb99b18a92d",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Same answer as above ;)\n",
        "createdAt" : "2016-06-17T05:52:18Z",
        "updatedAt" : "2016-07-18T22:57:12Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2857672dcb70b9985220b374ffec6c018346c55",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +334,338 @@        const node = <ObjectLiteralExpression>createNode(SyntaxKind.ObjectLiteralExpression, location);\n        node.properties = createNodeArray(properties);\n        if (multiLine) {\n            node.multiLine = true;\n        }"
  },
  {
    "id" : "e40e95f4-411b-4bdd-b9e5-c54c4eb67eac",
    "prId" : 9175,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa6dba03-2270-4e76-86f2-bc30966419e3",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Since `catchClause` and `finallyBlock` are both optional/undefinable (as done below) - why not annotate them both with a `?`?\n",
        "createdAt" : "2016-06-17T05:50:01Z",
        "updatedAt" : "2016-07-18T22:57:12Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "6bbb1e53-75d5-4864-b1f9-0cb5f9b57be3",
        "parentId" : "fa6dba03-2270-4e76-86f2-bc30966419e3",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Because a `try` with neither a `catch` nor a `finally` is illegal. I could make `finallyBlock` optional, but there are fewer places where that matters.\n",
        "createdAt" : "2016-06-17T05:53:44Z",
        "updatedAt" : "2016-07-18T22:57:12Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2857672dcb70b9985220b374ffec6c018346c55",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +736,740 @@    }\n\n    export function createTryCatchFinally(tryBlock: Block, catchClause: CatchClause, finallyBlock: Block, location?: TextRange) {\n        const node = <TryStatement>createNode(SyntaxKind.TryStatement, location);\n        node.tryBlock = tryBlock;"
  },
  {
    "id" : "cb12e6b2-907e-462c-ba20-0c06eb317ed9",
    "prId" : 8873,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f358c4ba-8dfe-4b06-97a0-b8a62a1c9f85",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Why you need to pass in `typeArguments` parameter? In the change, it seems that all caller will pass `undefined`? also since we are in emitting phase, would we `typearguments` matter, won't we get rid of it anyway?\n",
        "createdAt" : "2016-05-31T17:43:12Z",
        "updatedAt" : "2016-05-31T17:43:12Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "6e87d2ff-a7e5-477a-8e2f-c19bd35391e3",
        "parentId" : "f358c4ba-8dfe-4b06-97a0-b8a62a1c9f85",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Just for consistency. The `updateCall` function needs `typeArguments` (which will be `undefined` currently in all cases) to know it needs to create a new `CallExpression` when we remove `typeArguments` during transformation. It's not the responsibility of `updateCall` to remove it for you. Since you could pass in an actual value for `typeArguments` to `updateCall`, it is generally more clear to allow `createCall` to accept the value. This is to prevent future issues if we reuse this logic elsewhere in the compiler.\n",
        "createdAt" : "2016-05-31T17:49:03Z",
        "updatedAt" : "2016-05-31T17:49:19Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fbb326d8d82a28c8e51768620564b6840039e45",
    "line" : 255,
    "diffHunk" : "@@ -1,1 +370,374 @@    }\n\n    export function createCall(expression: Expression, typeArguments: TypeNode[], argumentsArray: Expression[], location?: TextRange, flags?: NodeFlags) {\n        const node = <CallExpression>createNode(SyntaxKind.CallExpression, location, flags);\n        node.expression = parenthesizeForAccess(expression);"
  },
  {
    "id" : "3d2fd58e-cd1d-4d76-bfe3-3f568246bdf0",
    "prId" : 8824,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9119107-c541-487c-86da-c72dd59cb435",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "should similar things be applied in `createTempVariable` ?\nEDIT: I didnt' see \"~\" @rbuckton  explains why he needs to unset the flag in [here](https://github.com/Microsoft/TypeScript/pull/8824#discussion-diff-64811965R824)\n",
        "createdAt" : "2016-05-26T20:08:00Z",
        "updatedAt" : "2016-05-27T21:56:17Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "62735c41-0ac6-4ece-9a80-1904793d66b9",
        "parentId" : "b9119107-c541-487c-86da-c72dd59cb435",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "No, this is a specific case to ensure the react namespace is properly resolved by the emit resolver, which would otherwise try to find an original source tree node that doesn't exist.\n",
        "createdAt" : "2016-05-26T23:41:04Z",
        "updatedAt" : "2016-05-27T21:56:17Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "82e2531f6daad275e0bf5ba141856d224424cad5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +816,820 @@        // flag and setting a parent node.\n        const react = createIdentifier(reactNamespace || \"React\");\n        react.flags &= ~NodeFlags.Synthesized;\n        react.parent = parent;\n        return react;"
  },
  {
    "id" : "45cf5a9b-7897-4b8e-85b9-de4a8574652e",
    "prId" : 8049,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1262e98-0808-423f-979a-72376f12b93c",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Why don't you pass in `sourcefile` instead of both `declaration` and `resolver`? Then you can just call the function:\n`tryGetModuleNameFromDeclaration(resolver.getExternalModuleFileFromDeclaration(declaration), host, compilerOptions)`? thought may be you don't need this function and just call `tryGetModuleNameFromFile` directly in the caller site\n",
        "createdAt" : "2016-04-12T23:52:44Z",
        "updatedAt" : "2016-04-13T20:20:15Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "50c2d6c4-1fe9-41e7-a393-4d29be952ff0",
        "parentId" : "b1262e98-0808-423f-979a-72376f12b93c",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I don't necessarily see that as an improvement since that makes the call pretty huge.\n",
        "createdAt" : "2016-04-13T05:10:04Z",
        "updatedAt" : "2016-04-13T20:20:15Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f66c8766eb8c49012dca742eef290f2331df6a9",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +1776,1780 @@    }\n\n    function tryGetModuleNameFromDeclaration(declaration: ImportEqualsDeclaration | ImportDeclaration | ExportDeclaration, host: EmitHost, resolver: EmitResolver, compilerOptions: CompilerOptions) {\n        return tryGetModuleNameFromFile(resolver.getExternalModuleFileFromDeclaration(declaration), host, compilerOptions);\n    }"
  },
  {
    "id" : "6ad49de6-fc65-4bb9-9dd0-9fefcc3df527",
    "prId" : 8049,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f47138c2-70f3-41e4-972d-61a4abf9f44f",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Why you call `getSynthesizedClone` ? why don't just return moduleName if all fails?\n",
        "createdAt" : "2016-04-13T00:26:23Z",
        "updatedAt" : "2016-04-13T20:20:15Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "307abdc8-f5a6-4616-a377-dc1528ddabb5",
        "parentId" : "f47138c2-70f3-41e4-972d-61a4abf9f44f",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "this makes sure that the emitted module names are all uniform, e.g. they all use double quotes and not single quotes.\n",
        "createdAt" : "2016-04-13T00:29:54Z",
        "updatedAt" : "2016-04-13T20:20:15Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f66c8766eb8c49012dca742eef290f2331df6a9",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1739,1743 @@            return tryGetModuleNameFromDeclaration(importNode, host, resolver, compilerOptions)\n                || tryRenameExternalModule(<StringLiteral>moduleName, sourceFile)\n                || getSynthesizedClone(<StringLiteral>moduleName);\n        }\n"
  },
  {
    "id" : "f9524a54-94d9-484a-8f31-b5c47881e42d",
    "prId" : 8049,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8765033a-e1a0-4fc0-a579-f0d9f8c7f814",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Consider renaming or providing JSDoc to explain what this does. At a glance, I find myself asking\n1. What makes an import _external_? Aren't all imports of external entities?\n2. What exactly is meany by a _local name_?\n",
        "createdAt" : "2016-04-13T05:06:01Z",
        "updatedAt" : "2016-04-13T20:20:15Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "df3803a5-136e-42a8-8c19-6ebb9662566f",
        "parentId" : "8765033a-e1a0-4fc0-a579-f0d9f8c7f814",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : ":cake: agree\n",
        "createdAt" : "2016-04-13T17:07:21Z",
        "updatedAt" : "2016-04-13T20:20:15Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f66c8766eb8c49012dca742eef290f2331df6a9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1712,1716 @@     * Get the name of that target module from an import or export declaration\n     */\n    export function getLocalNameForExternalImport(node: ImportDeclaration | ExportDeclaration | ImportEqualsDeclaration, sourceFile: SourceFile): Identifier {\n        const namespaceDeclaration = getNamespaceDeclarationNode(node);\n        if (namespaceDeclaration && !isDefaultImport(node)) {"
  },
  {
    "id" : "dd925f31-9ffb-421d-a4fa-ed10f3ad66c5",
    "prId" : 8049,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8ff83c5-4d84-4857-8370-7f16c0e2e941",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Explicit `return undefined`\n",
        "createdAt" : "2016-04-13T05:15:48Z",
        "updatedAt" : "2016-04-13T20:20:15Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f66c8766eb8c49012dca742eef290f2331df6a9",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1722,1726 @@        if (node.kind === SyntaxKind.ExportDeclaration && (<ExportDeclaration>node).moduleSpecifier) {\n            return getGeneratedNameForNode(node);\n        }\n        return undefined;\n    }"
  },
  {
    "id" : "0027499c-e3a2-44f1-a063-55d0ecb4e012",
    "prId" : 6892,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8792a3e-0b01-4fc2-8c24-c7397da2ad88",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Is there any reason you need to do this again instead of leveraging `ts.createNode`?\n",
        "createdAt" : "2016-02-09T00:57:26Z",
        "updatedAt" : "2016-03-18T23:39:52Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "efbacfc5-c962-4233-9aaf-cb239b884829",
        "parentId" : "d8792a3e-0b01-4fc2-8c24-c7397da2ad88",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "This is partly performance related, as the `ts` namespace is horribly deoptimized in v8, but also due to the fact I have a slightly different call signature.\n",
        "createdAt" : "2016-02-09T01:17:47Z",
        "updatedAt" : "2016-03-18T23:39:52Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9cb493a1cfd467279e82f4a815e20e733a4655c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +5,9 @@namespace ts {\n    let NodeConstructor: new (kind: SyntaxKind, pos: number, end: number) => Node;\n    let SourceFileConstructor: new (kind: SyntaxKind, pos: number, end: number) => Node;\n\n    function createNode(kind: SyntaxKind, location?: TextRange, flags?: NodeFlags): Node {"
  }
]