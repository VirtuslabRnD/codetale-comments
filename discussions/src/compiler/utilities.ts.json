[
  {
    "id" : "c044ae28-9b98-49f5-94bd-12f7ecc8e6e4",
    "prId" : 44710,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44710#pullrequestreview-694194016",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7e0ef6e-62cb-4dad-8ec5-10d05def2c3b",
        "parentId" : null,
        "authorId" : "49e9dc50-aed9-4996-a6c3-ad63dbae4790",
        "body" : "@amcasey I wonder if this check is causing a behavior change in the material-ui benchmark and changing the number of .d.ts files that get loaded or similar.",
        "createdAt" : "2021-06-24T23:35:41Z",
        "updatedAt" : "2021-06-24T23:35:41Z",
        "lastEditedBy" : "49e9dc50-aed9-4996-a6c3-ad63dbae4790",
        "tags" : [
        ]
      },
      {
        "id" : "7fb6db3f-485e-462a-98b6-aed82d3576c2",
        "parentId" : "e7e0ef6e-62cb-4dad-8ec5-10d05def2c3b",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Comparing `--extendedDiagnostics` might be a good first step to figuring out whether there really is an observable behavior change, if you haven't already done that @amcasey",
        "createdAt" : "2021-06-25T15:12:06Z",
        "updatedAt" : "2021-06-25T15:12:07Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "5a26f640-6083-424c-8cf8-e83540528e0b",
        "parentId" : "e7e0ef6e-62cb-4dad-8ec5-10d05def2c3b",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Sorry, we'd been discussing this offline and I forgot to update the issue.  The perf suite was using the wrong baseline.  I'll kick off a clean run now, but local testing showed no change in the check time of material-ui.",
        "createdAt" : "2021-06-28T16:23:13Z",
        "updatedAt" : "2021-06-28T16:23:13Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "071bb2f7-cbb5-4431-9b03-410504627327",
        "parentId" : "e7e0ef6e-62cb-4dad-8ec5-10d05def2c3b",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I guess I should also say that I don't believe it will cause a behavioral change because `visitDirectory` would just see an empty list of fs entries for the non-existent directory and stop.\r\n\r\nThe latest perf run shows no change, as expected. :smile:",
        "createdAt" : "2021-06-28T17:06:16Z",
        "updatedAt" : "2021-06-28T17:06:16Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9ae52cf49732a2d45b6cb7f4069205c88af39eb",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +6507,6511 @@        const toCanonical = createGetCanonicalFileName(useCaseSensitiveFileNames);\n        for (const basePath of patterns.basePaths) {\n            if (directoryExists(basePath)) {\n                visitDirectory(basePath, combinePaths(currentDirectory, basePath), depth);\n            }"
  },
  {
    "id" : "d3776980-29f2-488f-8238-741a386a54d6",
    "prId" : 43892,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43892#pullrequestreview-649586469",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a1690b5-64e0-4c42-91a2-9870bc8b4cff",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Should you do this lazily to avoid having to do this by default?\r\nAlso dont you want to set `symlinkedFiles` ?",
        "createdAt" : "2021-04-29T23:32:28Z",
        "updatedAt" : "2021-05-06T21:08:34Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "deab074a-0609-4860-9fe9-f232356942a1",
        "parentId" : "4a1690b5-64e0-4c42-91a2-9870bc8b4cff",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Is `symlinkedFiles` just a fast path for searching `symlinkedDirectories`? I was just copying what `discoverProbableSymlinks` does. `symlinkedFiles` is not used by module specifier resolution / auto imports, but from the one place that it is used, it seems like it might be beneficial to add to it whenever we can.",
        "createdAt" : "2021-04-30T18:51:45Z",
        "updatedAt" : "2021-05-06T21:08:34Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "1b4221b2-3698-44b6-9c2d-64eb529356c5",
        "parentId" : "4a1690b5-64e0-4c42-91a2-9870bc8b4cff",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Also, I’m not sure making this more lazy is worth the complexity. This method only gets called during the initialization/update of an AutoImportProviderProject, and is altogether a small part of the overhead of getting better auto imports. It seems like most users _would_ invoke this eventually.",
        "createdAt" : "2021-04-30T18:57:08Z",
        "updatedAt" : "2021-05-06T21:08:34Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "ac70ac51-c4b6-4d81-8d5b-4f694170d54d",
        "parentId" : "4a1690b5-64e0-4c42-91a2-9870bc8b4cff",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "i was just saying because if completions are not invoked, and program get disposed or changes it might be unnecessary but we can do that later if people report on it.. ",
        "createdAt" : "2021-04-30T20:14:08Z",
        "updatedAt" : "2021-05-06T21:08:34Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "39fd07212caf08c7e90e8aa51474d7daa5f1fe12",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +6176,6180 @@            setSymlinkedDirectoryFromSymlinkedFile(symlink, real) {\n                this.setSymlinkedFile(toPath(symlink, cwd, getCanonicalFileName), real);\n                const [commonResolved, commonOriginal] = guessDirectorySymlink(real, symlink, cwd, getCanonicalFileName) || emptyArray;\n                if (commonResolved && commonOriginal) {\n                    this.setSymlinkedDirectory(commonOriginal, {"
  },
  {
    "id" : "783f7b8c-2f43-4c05-b31e-7d492c1cd9e3",
    "prId" : 42095,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42095#pullrequestreview-562089047",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f49a176e-5eae-4cc8-9566-b7e0ede5c9df",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This should be handled when it is used for module specifier resolution instead of in general in my opinion since we still want to resolve the cache for answering if file is from referenced project for project construction ?",
        "createdAt" : "2021-01-04T20:42:34Z",
        "updatedAt" : "2021-01-12T22:03:06Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "e4d8b044-1b74-44d1-aa10-1edeca7aa082",
        "parentId" : "f49a176e-5eae-4cc8-9566-b7e0ede5c9df",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I think something inside `node_modules/.pnpm/` should never be a project reference redirect, which seems to be the only reason beside module specifier resolution that this is used (`fileOrDirectoryExistsUsingSource`).",
        "createdAt" : "2021-01-04T21:27:51Z",
        "updatedAt" : "2021-01-12T22:03:06Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "4fa08650-3707-4a3e-a7b3-4e4a22bfea4e",
        "parentId" : "f49a176e-5eae-4cc8-9566-b7e0ede5c9df",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You are right because it would resolve completely to actual path even if equivalent of npm link kind of thing is used .",
        "createdAt" : "2021-01-05T19:57:58Z",
        "updatedAt" : "2021-01-12T22:03:06Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3e67b69ebeb18a4e4046dd8875d34f9b1977ca0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +6105,6109 @@            getSymlinkedDirectories: () => symlinkedDirectories,\n            setSymlinkedFile: (path, real) => (symlinkedFiles || (symlinkedFiles = new Map())).set(path, real),\n            setSymlinkedDirectory: (path, directory) => {\n                // Large, interconnected dependency graphs in pnpm will have a huge number of symlinks\n                // where both the realpath and the symlink path are inside node_modules/.pnpm. Since"
  },
  {
    "id" : "fe455f0b-3b82-4dda-8623-27097dbce396",
    "prId" : 42095,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42095#pullrequestreview-567649369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9bd9f15-05cd-4eaf-97ec-f0fe06f3c474",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Does this need to look at canonical path? eg. look at `isIgnoredPath` and `isInPath` in sys.ts ",
        "createdAt" : "2021-01-13T20:00:14Z",
        "updatedAt" : "2021-01-13T20:00:14Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "fee838ee-e666-40bc-a1e6-3cafed220162",
        "parentId" : "b9bd9f15-05cd-4eaf-97ec-f0fe06f3c474",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I did look at that, but I noticed that where this is used, we were already doing a `containsNodeModulesPathPart` check without calling `getCanonicalFileName` or anything.",
        "createdAt" : "2021-01-13T21:11:19Z",
        "updatedAt" : "2021-01-13T21:11:19Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3e67b69ebeb18a4e4046dd8875d34f9b1977ca0",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +7077,7081 @@\n    export function containsIgnoredPath(path: string) {\n        return some(ignoredPaths, p => stringContains(path, p));\n    }\n}"
  },
  {
    "id" : "c48217bc-1f65-4e16-8f34-709cb8113f18",
    "prId" : 41330,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41330#pullrequestreview-521066723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c2986df-2293-4598-8fb8-af5ec79aa521",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You would also need to mark `jsxImportSource` as affects module resolution  and `jsx` as well ? can you add test cases to make sure update in that reflects change in program.",
        "createdAt" : "2020-10-30T22:21:26Z",
        "updatedAt" : "2020-10-30T23:21:37Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e1ae3034b8dd5e1b222ebdd25c4001f04aeb04e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +6011,6015 @@\n    export function getJSXImplicitImportBase(compilerOptions: CompilerOptions, file?: SourceFile): string | undefined {\n        const jsxImportSourcePragmas = file?.pragmas.get(\"jsximportsource\");\n        const jsxImportSourcePragma = isArray(jsxImportSourcePragmas) ? jsxImportSourcePragmas[0] : jsxImportSourcePragmas;\n        return compilerOptions.jsx === JsxEmit.ReactJSX ||"
  },
  {
    "id" : "9b2d1962-1caf-41cf-9772-17ae323f8b37",
    "prId" : 39669,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39669#pullrequestreview-489963744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2dcf024c-760b-4e49-b44f-4143f27d7a46",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I'm finding the need for these somewhat surprising. How were we checking for ambient-ness and abtract-ness before? Are there cheaper ways?",
        "createdAt" : "2020-09-16T18:47:58Z",
        "updatedAt" : "2021-03-26T06:56:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "8d1e92a2-f6e7-4641-8bd0-d355142ff8d9",
        "parentId" : "2dcf024c-760b-4e49-b44f-4143f27d7a46",
        "authorId" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "body" : "I'm not sure. Does it expensive? Even I found cache inside `hasSyntacticModifier`",
        "createdAt" : "2020-09-16T19:02:02Z",
        "updatedAt" : "2021-03-26T06:56:55Z",
        "lastEditedBy" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "tags" : [
        ]
      },
      {
        "id" : "580e1311-fb67-4d2b-99cd-e7d6109cdbc8",
        "parentId" : "2dcf024c-760b-4e49-b44f-4143f27d7a46",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I didn't see where this was used, so I don’t know for sure that this is what you’re looking for, but you can use `node.flags & NodeFlags.Ambient` to determine if any node is in an ambient context. It gets propagated down to all child nodes, so e.g. everything inside a `declare module` block will have that. Not sure if there’s an equivalent flag for abstract off the top of my head.",
        "createdAt" : "2020-09-16T19:39:22Z",
        "updatedAt" : "2021-03-26T06:56:55Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "4575b5a9921ad54be01de6431c11fa8aafd4089e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +4666,4670 @@    export function hasAmbientModifier(node: Node): boolean {\n        return hasSyntacticModifier(node, ModifierFlags.Ambient);\n    }\n\n    export function hasEffectiveReadonlyModifier(node: Node): boolean {"
  },
  {
    "id" : "131c6f15-44f5-4bd8-9fa6-6c6f6e3f592a",
    "prId" : 39216,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39216#pullrequestreview-436244238",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f4765f0-1aba-4d80-985c-eeca2051099b",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I'm inferring that this change means\r\n\r\n1. QualifiedNames are only ever children of TypeQuery/TypeReference\r\n2. Unlike before, only top-level qualified names are identifier names, or else identifier names are parsed such that only top-level qualified names are actually passed to isIdentifierName.\r\n\r\nAm I right?",
        "createdAt" : "2020-06-23T23:28:40Z",
        "updatedAt" : "2020-06-23T23:31:01Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "d33e356a-edce-4b23-81ca-a0d0edcf511c",
        "parentId" : "2f4765f0-1aba-4d80-985c-eeca2051099b",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "That is incorrect. The function is testing whether `node` is an _IdentifierName_ in ES. The _IdentifierName_ production is generally used for property names (i.e. `({ foo: 1 })` or `obj.foo`), where reserved words are not forbidden. A `QualifiedName` is a TS-only syntax, but is essentially similar to a property access expression when used as an expression. The name of a `QualifiedName` should always be considered an _IdentifierName_, even when it is not the child of a `TypeQuery` or `TypeReference`. The case this addresses is this:\r\n\r\n```ts\r\nexport {};\r\nimport X = someNamespace.await;\r\n```\r\n\r\nWithout this change, we would incorrectly error on `await` since the namespace import is at the top level of a module.",
        "createdAt" : "2020-06-23T23:45:30Z",
        "updatedAt" : "2020-06-24T00:00:11Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "c1815140-c56f-4dba-82b4-be1c4a86037d",
        "parentId" : "2f4765f0-1aba-4d80-985c-eeca2051099b",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Actually, *all* identifiers are _IdentifierName_ in ES. The difference is that there are essentially 4 categories of identifiers:\r\n\r\n- [_IdentifierReference_](https://tc39.es/ecma262/#prod-IdentifierReference) - An identifier that is a _PrimaryExpression_ (e.g., `id` in `id()`, `id.prop`, `id + 1`, etc.).\r\n- [_BindingIdentifier_](https://tc39.es/ecma262/#prod-BindingIdentifier) - An identifier that introduces a binding in the current scope (e.g., `id` in `var id`, `function id() {}`, `class id {}`, etc.).\r\n- [_LabelIdentifier_](https://tc39.es/ecma262/#prod-LabelIdentifier) - An identifier that introduces a new label for use with `break`/`continue` (e.g., `id` in `id: while(true) break id`, etc.).\r\n- Any **other** _IdentifierName_ such as the ones used in [_LiteralPropertyName_](https://tc39.es/ecma262/#prod-LiteralPropertyName) and [_MemberExpression_](https://tc39.es/ecma262/#prod-MemberExpression), [_ExportSpecifier_](https://tc39.es/ecma262/#prod-ExportSpecifier).\r\n\r\nThere is only one caller to this function, and what it is actually checking are these [static semantics](https://tc39.es/ecma262/#sec-identifiers-static-semantics-early-errors):\r\n\r\n> _IdentifierReference_: `yield`\\\r\n> _BindingIdentifier_: `yield`\\\r\n> _LabelIdentifier_: `yield`\r\n>\r\n> It is a Syntax Error if the code matched by this production is contained in **strict mode** code.\r\n>\r\n>\r\n> _IdentifierReference_: `await`\\\r\n> _BindingIdentifier_: `await`\\\r\n> _LabelIdentifier_: `await`\r\n>\r\n> It is a Syntax Error if the goal symbol of the syntactic grammar is _Module_.\r\n>\r\n> _BindingIdentifier_<sub>[Yield, Await]</sub>: `yield`\r\n>\r\n> It is a Syntax Error if this production has a `[Yield]` parameter.\r\n>\r\n> _BindingIdentifier_<sub>[Yield, Await]</sub>: `await`\r\n>\r\n> It is a Syntax Error if this production has an `[Await]` parameter.\r\n>\r\n> _IdentifierReference_<sub>[Yield, Await]</sub>: _Identifier_\\\r\n> _BindingIdentifier_<sub>[Yield, Await]</sub>: _Identifier_\\\r\n> _LabelIdentifier_<sub>[Yield, Await]</sub>: _Identifier_\r\n>\r\n> It is a Syntax Error if this production has a `[Yield]` parameter and StringValue of Identifier is `\"yield\"`.\\\r\n> It is a Syntax Error if this production has an `[Await]` parameter and StringValue of Identifier is `\"await\"`.\r\n\r\nSo what this function is actually testing is that the node is in the *other* category.",
        "createdAt" : "2020-06-24T00:21:00Z",
        "updatedAt" : "2020-06-24T00:21:00Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "6298d84460ac0a80ec09359447baba0d0b9fa6c4",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +2811,2815 @@            case SyntaxKind.QualifiedName:\n                // Name on right hand side of dot in a type query or type reference\n                return (<QualifiedName>parent).right === node;\n            case SyntaxKind.BindingElement:\n            case SyntaxKind.ImportSpecifier:"
  },
  {
    "id" : "3b96a3c1-18d4-49db-b193-73ba619d4954",
    "prId" : 39199,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39199#pullrequestreview-499948720",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15d815a5-9164-42c0-802d-551b9bfe930a",
        "parentId" : null,
        "authorId" : "4397350a-eae4-4e61-9495-290068d88fd2",
        "body" : "Hi! @weswigham I think this is wrong. You should not treat it as a \"base\" of the import. It should be a fully qualified import specifier. With the current behavior, it is impossible to make it emit like: `import { jsx as _jsx } from \"//cdn.example.com/my-jsx-lib/jsx-runtime.js\"` cause it is not possible to add a \".js\" at the end of the import specifier.\r\n\r\nThis also requires the imported file to name exactly as \"jsx-runtime\".",
        "createdAt" : "2020-09-25T03:41:27Z",
        "updatedAt" : "2020-09-25T03:41:53Z",
        "lastEditedBy" : "4397350a-eae4-4e61-9495-290068d88fd2",
        "tags" : [
        ]
      },
      {
        "id" : "a724c926-9118-449a-8aa9-cf0e46774d74",
        "parentId" : "15d815a5-9164-42c0-802d-551b9bfe930a",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "...Yeah, so that wasn't _really_ my choice - it's how the `react` maintainers implemented the same option in [the `babel` transform.](https://babeljs.io/docs/en/babel-preset-react#importsource) (And we just want to match the functionality provided by babel here, without overstepping.) The runtime being accessible at `${source}/jsx-runtime` and `${source}/jsx-dev-runtime`, based on how the options are presented, is part of the API contract for these endpoints (probably so the import can be swapped between dev/non-dev without explicitly reconfiguring the import? I dunno, I'm guessing.).",
        "createdAt" : "2020-09-25T04:26:24Z",
        "updatedAt" : "2020-09-25T04:26:25Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "9e161022-403e-408c-b05e-2da57f8fa2ba",
        "parentId" : "15d815a5-9164-42c0-802d-551b9bfe930a",
        "authorId" : "4397350a-eae4-4e61-9495-290068d88fd2",
        "body" : "Thanks for your explanation, I'll post it to the react repo instead",
        "createdAt" : "2020-09-25T04:51:58Z",
        "updatedAt" : "2020-09-25T04:51:58Z",
        "lastEditedBy" : "4397350a-eae4-4e61-9495-290068d88fd2",
        "tags" : [
        ]
      },
      {
        "id" : "e1ca92ab-3b8c-4ca1-bfe6-d39ddf36911e",
        "parentId" : "15d815a5-9164-42c0-802d-551b9bfe930a",
        "authorId" : "4397350a-eae4-4e61-9495-290068d88fd2",
        "body" : "facebook/react#19905",
        "createdAt" : "2020-09-25T05:07:00Z",
        "updatedAt" : "2020-09-25T05:07:00Z",
        "lastEditedBy" : "4397350a-eae4-4e61-9495-290068d88fd2",
        "tags" : [
        ]
      },
      {
        "id" : "c91ddd68-172e-4f10-83b5-7a401c0e51f0",
        "parentId" : "15d815a5-9164-42c0-802d-551b9bfe930a",
        "authorId" : "4397350a-eae4-4e61-9495-290068d88fd2",
        "body" : "hi @weswigham babel/babel#12116 babel has added `.js` after `jsx-runtime`. Please also do that in TypeScript, thanks!",
        "createdAt" : "2020-10-01T01:02:48Z",
        "updatedAt" : "2020-10-01T01:02:49Z",
        "lastEditedBy" : "4397350a-eae4-4e61-9495-290068d88fd2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e02e55f2f99384a30c6c99d7cd944459e1b4cdc4",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +5969,5973 @@    }\n\n    export function getJSXImplicitImportBase(compilerOptions: CompilerOptions, file: SourceFile): string | undefined {\n        const jsxImportSourcePragmas = file.pragmas.get(\"jsximportsource\");\n        const jsxImportSourcePragma = isArray(jsxImportSourcePragmas) ? jsxImportSourcePragmas[0] : jsxImportSourcePragmas;"
  },
  {
    "id" : "967b0235-e8e2-487a-aca3-7c5ad808252d",
    "prId" : 37846,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37846#pullrequestreview-397695224",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c2b5bb8-64dd-4769-9255-ce9de113c8f4",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Instead of doing this, I could imagine `getPreviousNonWhitespacePosition` just returns the `stopPos` instead of `undefined`",
        "createdAt" : "2020-04-21T21:31:39Z",
        "updatedAt" : "2020-04-21T21:32:13Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "f97a2e89-5ee6-49c2-a91a-0d76420c8592",
        "parentId" : "7c2b5bb8-64dd-4769-9255-ce9de113c8f4",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I thought about that, but if someone wanted to use this elsewhere without looking at the implementation, I think returning a position that's not actually non-whitespace would be really surprising.",
        "createdAt" : "2020-04-21T21:38:39Z",
        "updatedAt" : "2020-04-21T21:38:39Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b90e6e092744ee884ea7829189f4e8daf5c4919",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +4780,4784 @@        const startPos = skipTrivia(sourceFile.text, pos, /*stopAfterLineBreak*/ false, includeComments);\n        const prevPos = getPreviousNonWhitespacePosition(startPos, stopPos, sourceFile);\n        return getLinesBetweenPositions(sourceFile, prevPos ?? stopPos, startPos);\n    }\n"
  },
  {
    "id" : "be4ec308-e25b-460a-9bfb-de76ee01e418",
    "prId" : 37543,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37543#pullrequestreview-387452832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a60442ab-f671-4f59-974a-c9fe594c9eb8",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I would really really like to recommend the obscure haskell name for this function but I can't remember it.\r\n\r\nIt's probably `eigenall`. See how much shorter that is?",
        "createdAt" : "2020-04-02T16:29:45Z",
        "updatedAt" : "2020-04-02T16:40:51Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "9e3b5a69-8048-4d49-95d1-9fcea0136b1a",
        "parentId" : "a60442ab-f671-4f59-974a-c9fe594c9eb8",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Serious comment: I wouldn't make the second parameter have a default until there's a reason for it, unless the default is really easy to get wrong.",
        "createdAt" : "2020-04-02T16:31:24Z",
        "updatedAt" : "2020-04-02T16:40:51Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "6badd923-8361-4b34-8f07-533f2c985451",
        "parentId" : "a60442ab-f671-4f59-974a-c9fe594c9eb8",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "The issue is more that I really had to hunt for `equateValues`, which I think is the expected default for a function by this name. Using it as a default matches the convention set by `contains`, `arraysEqual`, `arrayIsEqualTo`, and `equalOwnProperties` in core.",
        "createdAt" : "2020-04-02T16:39:52Z",
        "updatedAt" : "2020-04-02T16:40:51Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "d320609a-f46e-46f6-8a73-ba2208b22587",
        "parentId" : "a60442ab-f671-4f59-974a-c9fe594c9eb8",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Fair enough; that's what I was getting at with \"easy to get the default wrong\".",
        "createdAt" : "2020-04-03T17:36:13Z",
        "updatedAt" : "2020-04-03T17:36:14Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab75df6268298ad12549214c9f9211d0f8c928ba",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +6359,6363 @@    }\n\n    export function arrayIsHomogeneous<T>(array: readonly T[], comparer: EqualityComparer<T> = equateValues) {\n        if (array.length < 2) return true;\n        const first = array[0];"
  },
  {
    "id" : "c49247cc-3cce-43f6-aaa2-6e307cc4cc0e",
    "prId" : 36688,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36688#pullrequestreview-361517621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "172b6cb2-3b5c-4d4c-be29-97ada693f8b4",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "was this function somewhere else previously? It looks really familiar.",
        "createdAt" : "2020-02-19T23:00:39Z",
        "updatedAt" : "2020-03-16T18:52:35Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "1f02eb14-0bb5-4d4d-bc50-31c2159002d5",
        "parentId" : "172b6cb2-3b5c-4d4c-be29-97ada693f8b4",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "It’s similar to `skipTrivia`, but operates in reverse. `skipTrivia` is complex enough and this is simple enough that I opted not to try to overload the former.",
        "createdAt" : "2020-02-19T23:37:10Z",
        "updatedAt" : "2020-03-16T18:52:35Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "6daa27e52a5ef8fd0a76f49cffd3b76e9a5caf48",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +4787,4791 @@    }\n\n    function getPreviousNonWhitespacePosition(pos: number, sourceFile: SourceFile) {\n        while (pos-- > 0) {\n            if (!isWhiteSpaceLike(sourceFile.text.charCodeAt(pos))) {"
  },
  {
    "id" : "8cfecca1-392c-402d-90d8-0f35c220e5bf",
    "prId" : 36464,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36464#pullrequestreview-349041800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6af4c1f0-0473-4c45-9f0f-7373fa32a7aa",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "why does it have to be the *first* identifier? Why can't it be anywhere?\r\n\r\n(That long chain of `?.`s gives me the shivers.)",
        "createdAt" : "2020-01-27T22:24:14Z",
        "updatedAt" : "2020-01-27T23:10:06Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "c3b1160d-88a0-4455-837b-eb6980032d88",
        "parentId" : "6af4c1f0-0473-4c45-9f0f-7373fa32a7aa",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Because this is a hot path and any other location in the node will be covered by other criteria of `isValidTypeOnlyAliasUseSite`, so it doesn’t make sense to check more than necessary.\r\n\r\n`node` could be an identifier at the top level of a SourceFile, so I think that’d be SourceFile > ExpressionStatement > Identifier, so I guess only the last `?.` is needed.",
        "createdAt" : "2020-01-27T22:44:34Z",
        "updatedAt" : "2020-01-27T23:10:06Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "4e988431-0eb5-428d-9f74-b9c215d76fa0",
        "parentId" : "6af4c1f0-0473-4c45-9f0f-7373fa32a7aa",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Also I don't think it checks the scenario of type ? ` types.SomeInterfaceContainingNamespace.Component` since its parent is going to be one more level up than just `types.Component` ?",
        "createdAt" : "2020-01-27T22:46:23Z",
        "updatedAt" : "2020-01-27T23:10:06Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "6724d2fa-ece7-4787-9c83-70fc392806c4",
        "parentId" : "6af4c1f0-0473-4c45-9f0f-7373fa32a7aa",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "> any other location in the node will be covered by other criteria of isValidTypeOnlyAliasUseSite,\r\n\r\ndouble checking that this is true",
        "createdAt" : "2020-01-27T22:46:33Z",
        "updatedAt" : "2020-01-27T23:10:06Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "37072bdc-f7cf-4333-9cdb-ecedae07d2f4",
        "parentId" : "6af4c1f0-0473-4c45-9f0f-7373fa32a7aa",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "@sheetalkamat this only gets called on identifiers from `resolveName`, which will only be the left-most identifier. The other parts of entity names get checked elsewhere.",
        "createdAt" : "2020-01-27T23:15:16Z",
        "updatedAt" : "2020-01-27T23:15:16Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c74b61cf87dd14de8e144a0df942bcc2b3903f4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1794,1798 @@\n    export function isFirstIdentifierOfImplementsClause(node: Node) {\n        return node.parent?.parent?.parent?.kind === SyntaxKind.HeritageClause\n            && (node.parent.parent.parent as HeritageClause).token === SyntaxKind.ImplementsKeyword;\n    }"
  },
  {
    "id" : "a1f7c82f-29ae-44d3-87a5-ea1d286e7931",
    "prId" : 36292,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36292#pullrequestreview-346828068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a77d51d-77fc-41b2-bbe7-3eb1d8ad973d",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "it would be a lot safer to put this code into getClassImplementsHeritageClauseElements, and then change the name to `getEffectiveImplementsTypeNodes`.",
        "createdAt" : "2020-01-22T19:04:48Z",
        "updatedAt" : "2020-02-27T11:33:30Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "98877171a8d5cd8ab96218d9f2c6e5ba9166bfbd",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2805,2809 @@    }\n\n    export function getEffectiveImplementsTypeNodes(node: ClassLikeDeclaration): undefined | readonly ExpressionWithTypeArguments[]{\n        if(isInJSFile(node)) {\n            return getJSDocImplementsTags(node).map(n => n.class);"
  },
  {
    "id" : "f4b4c98a-4d2c-4e6d-ba7f-7c6f52ef7e3b",
    "prId" : 36092,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36092#pullrequestreview-343640683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "157e0f20-1b9f-418d-b743-d3d500ef9dc0",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "As a minor optimization, I think that `QualifiedName`s are always parts of types, but don't take my word for it maybe.",
        "createdAt" : "2020-01-16T02:08:09Z",
        "updatedAt" : "2020-01-23T20:26:36Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "a132af86-e776-4831-9f56-839c5a55a0be",
        "parentId" : "157e0f20-1b9f-418d-b743-d3d500ef9dc0",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I think you’re right.",
        "createdAt" : "2020-01-16T02:18:45Z",
        "updatedAt" : "2020-01-23T20:26:36Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "53305690-8e75-46c4-9237-45d8680fa912",
        "parentId" : "157e0f20-1b9f-418d-b743-d3d500ef9dc0",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This would be true if it weren't for `import foo = a.b.c`! There's `PropertyAccessEntityName` but I'm not sure if that helps.",
        "createdAt" : "2020-01-16T02:19:28Z",
        "updatedAt" : "2020-01-23T20:26:36Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "395597d2-ee87-43c9-9d46-197d39ed4e36",
        "parentId" : "157e0f20-1b9f-418d-b743-d3d500ef9dc0",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "But, this util currently has a reasonable name and a reasonable chance of reuse. Not sure an optimization here is worth the hit to the understandability of what we’re checking.",
        "createdAt" : "2020-01-16T02:23:33Z",
        "updatedAt" : "2020-01-23T20:26:36Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "19b32066d20f4f76ab93341436e374ca55cdbc02",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1773,1777 @@\n    export function isPartOfTypeQuery(node: Node) {\n        while (node.kind === SyntaxKind.QualifiedName || node.kind === SyntaxKind.Identifier) {\n            node = node.parent;\n        }"
  },
  {
    "id" : "7d4e2d3a-8602-47a6-b08c-900c8253a8ba",
    "prId" : 34885,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/34885#pullrequestreview-319337164",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b1e9116-8f53-4e5d-ab78-76733867c23c",
        "parentId" : null,
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "This is great 👍 ",
        "createdAt" : "2019-11-19T20:41:00Z",
        "updatedAt" : "2019-11-19T20:45:31Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "321efc1fe678c2d5180738ffdf4c67802e11762c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +4247,4251 @@            const baseStr = tryGetPropertyAccessOrIdentifierToString(expr.expression);\n            if (baseStr !== undefined) {\n                return baseStr + \".\" + expr.name;\n            }\n        }"
  },
  {
    "id" : "28ef6bd3-d9a2-44d8-aeb7-a54a5f8996ba",
    "prId" : 34649,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/34649#pullrequestreview-305402497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a08fc1eb-1e0f-486e-b6a0-c8937f63df59",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "the fix is actually here: previously it called `isBindableStaticElementAccessExpression`, which meant that element accesses had to be trailing; they were not allowed to be interspersed.",
        "createdAt" : "2019-10-22T18:03:20Z",
        "updatedAt" : "2019-10-22T18:03:20Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6744812a02110a8cff461a54e6a8414295fe970",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +2085,2089 @@            && ((!excludeThisKeyword && node.expression.kind === SyntaxKind.ThisKeyword) ||\n                isEntityNameExpression(node.expression) ||\n                isBindableStaticAccessExpression(node.expression, /*excludeThisKeyword*/ true));\n    }\n"
  },
  {
    "id" : "aff02b94-e548-473d-a4dc-5d2e3d95315f",
    "prId" : 33622,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33622#pullrequestreview-294602410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3dbb4be-f395-4b95-9d6a-ccc5d95ed2f0",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "BTW, will this need to be updated for optional chains? Should a `t1?.assert(b)` be a thing?",
        "createdAt" : "2019-09-27T23:31:18Z",
        "updatedAt" : "2019-09-27T23:31:18Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5af71e3cd00c9803b07767e65d4afdd8419e661",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +4063,4067 @@    }\n\n    export function isDottedName(node: Expression): boolean {\n        return node.kind === SyntaxKind.Identifier || node.kind === SyntaxKind.ThisKeyword ||\n            node.kind === SyntaxKind.PropertyAccessExpression && isDottedName((<PropertyAccessExpression>node).expression) ||"
  },
  {
    "id" : "74dd0af3-1812-478e-8ed8-c45744562091",
    "prId" : 33220,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33220#pullrequestreview-285141748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ce4b3da-278f-44d2-8f40-33645370134b",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I thought the code from here until the end of the function was already in some other utility",
        "createdAt" : "2019-09-06T22:31:01Z",
        "updatedAt" : "2019-09-27T20:31:03Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "0a3a96e7-c442-4176-b17f-f94c51ed73ba",
        "parentId" : "5ce4b3da-278f-44d2-8f40-33645370134b",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Looks like not. Maybe it's stuck in the checker somewhere?",
        "createdAt" : "2019-09-06T22:31:57Z",
        "updatedAt" : "2019-09-27T20:31:03Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "d9adc9a8-67f4-4f7c-92d7-a6b5e6b3b351",
        "parentId" : "5ce4b3da-278f-44d2-8f40-33645370134b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I don't think we've had something quite like this before - it's supposed to return the name if the name is able to be interpreted as not late bound, and `undefined` otherwise.",
        "createdAt" : "2019-09-06T23:53:45Z",
        "updatedAt" : "2019-09-27T20:31:03Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "11b344897672d76845b88b720d20d1b52b79e926",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +2094,2098 @@    export function getElementOrPropertyAccessName(node: AccessExpression): string | undefined {\n        const name = getElementOrPropertyAccessArgumentExpressionOrName(node);\n        if (name) {\n            if (isIdentifier(name)) {\n                return idText(name);"
  },
  {
    "id" : "84a1340f-751b-4fe1-9dad-9ecd75285abe",
    "prId" : 32883,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32883#pullrequestreview-284467904",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f5fe9f1-1613-40fe-9c45-ea55e5ada8b8",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Handle `getNameOfExpando` as well?",
        "createdAt" : "2019-09-05T19:33:01Z",
        "updatedAt" : "2019-09-30T22:14:43Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b030f730d029422ca7a6767134f51bed48354675",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +1977,1981 @@            && getExpandoInitializer(initializer.right, isPrototypeAssignment);\n        if (e && isSameEntityName(name, (initializer as BinaryExpression).left)) {\n            return e;\n        }\n    }"
  },
  {
    "id" : "249b087b-bcbf-4bdd-b68f-115ec19c8373",
    "prId" : 32372,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32372#pullrequestreview-261509396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afdd9889-e551-480d-a11c-91f6f972c43b",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "where does the term Scope Marker come from and what does it mean?",
        "createdAt" : "2019-07-12T20:00:10Z",
        "updatedAt" : "2019-09-26T21:10:11Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "23c32d2f-712e-4d65-91c5-f21bf5190be7",
        "parentId" : "afdd9889-e551-480d-a11c-91f6f972c43b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "This was moved from the declaration emitter. A \"scope marker\" is a declaration that means the scope can actually have private symbols - an export assignment or an export declaration.",
        "createdAt" : "2019-07-12T23:28:06Z",
        "updatedAt" : "2019-09-26T21:10:11Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "007b3d4afe7726f7b72cd617e5453c8943e48ad2",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +6804,6808 @@\n    /* @internal */\n    export function isScopeMarker(node: Node) {\n        return isExportAssignment(node) || isExportDeclaration(node);\n    }"
  },
  {
    "id" : "a1b646fb-4cb1-4610-8fba-d042bde96ff2",
    "prId" : 31503,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31503#pullrequestreview-240744601",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf5a5578-745b-46b3-b008-bd89718c7edd",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "So `pathComponents[0]` is always `/` on *nix systems, and e.g. `C:/` on Windows, right?",
        "createdAt" : "2019-05-21T20:20:59Z",
        "updatedAt" : "2019-05-21T20:21:04Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "65dc562d-998a-4556-9ca3-d3771baf4237",
        "parentId" : "bf5a5578-745b-46b3-b008-bd89718c7edd",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Yes",
        "createdAt" : "2019-05-22T16:25:23Z",
        "updatedAt" : "2019-05-22T16:25:23Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "db150517d7fa6261ee9362ba58fec42dd5a2f816",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +7653,7657 @@    function getPathWithoutRoot(pathComponents: ReadonlyArray<string>) {\n        if (pathComponents.length === 0) return \"\";\n        return pathComponents.slice(1).join(directorySeparator);\n    }\n}"
  },
  {
    "id" : "60031a17-7771-445e-86d6-c7278da6d8ca",
    "prId" : 31100,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31100#pullrequestreview-233691185",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6538083-2baf-42d1-af87-703d795a98c0",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "@sheetalkamat would it be reasonable to expose this function in the public API? That would allow API users to reuse their ModuleResolutionCache until changes in CompilerOptions require a new cache.",
        "createdAt" : "2019-05-03T19:38:45Z",
        "updatedAt" : "2019-05-03T19:38:46Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      },
      {
        "id" : "44015efa-9784-4700-8725-82fcccdb941c",
        "parentId" : "e6538083-2baf-42d1-af87-703d795a98c0",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Sure. Note that this only compares CompilerOptions and not changes in directory structure which could affect the module resolution.",
        "createdAt" : "2019-05-03T22:10:45Z",
        "updatedAt" : "2019-05-03T22:10:45Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bb837332774ae60356382f5ca5adce3d8137b78",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +106,110 @@    }\n\n    export function optionsHaveModuleResolutionChanges(oldOptions: CompilerOptions, newOptions: CompilerOptions) {\n        return moduleResolutionOptionDeclarations.some(o =>\n            !isJsonEqual(getCompilerOptionValue(oldOptions, o), getCompilerOptionValue(newOptions, o)));"
  },
  {
    "id" : "2131214a-0c74-48e4-89e0-209e27ed8a74",
    "prId" : 29349,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29349#pullrequestreview-200361561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a82ede1e-4687-45b2-a0b1-4fc378c66a21",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "@DanielRosenwasser @sandersn should it be error to have augments clause and not have extends clause?",
        "createdAt" : "2019-01-10T17:10:52Z",
        "updatedAt" : "2019-01-10T17:10:52Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "8a108b11-be03-4c9b-8ab2-c263aa038d44",
        "parentId" : "a82ede1e-4687-45b2-a0b1-4fc378c66a21",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I think it would be too noisy. Every time we add errors like this they add noise to erroneous jsdoc -- ones where people weren't actually using the jsdoc and didn't want to.",
        "createdAt" : "2019-02-05T23:51:15Z",
        "updatedAt" : "2019-02-05T23:51:33Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "306a0723e0eee6c14972e04eb8aa132e052f0246",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2515,2519 @@    export function getEffectiveBaseTypeNode(node: ClassLikeDeclaration | InterfaceDeclaration) {\n        const baseType = getClassExtendsHeritageElement(node);\n        if (baseType && isInJSFile(node)) {\n            // Prefer an @augments tag because it may have type parameters.\n            const tag = getJSDocAugmentsTag(node);"
  },
  {
    "id" : "36f633eb-5a3b-470f-8d9a-a4c785f33797",
    "prId" : 28645,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28645#pullrequestreview-178543988",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a08b6f1-14ad-475e-a0d7-9fc62f6b443f",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "NOTE: this just fixes coloration in the file. There seems to be a bug in the TypeScript syntax highlighting here.",
        "createdAt" : "2018-11-26T23:01:25Z",
        "updatedAt" : "2018-11-26T23:01:25Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "29b8c716-d038-4c4e-9ce0-b62b4c1286bd",
        "parentId" : "0a08b6f1-14ad-475e-a0d7-9fc62f6b443f",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Filed as a bug here: https://github.com/Microsoft/TypeScript-TmLanguage/issues/687\r\n",
        "createdAt" : "2018-11-26T23:06:25Z",
        "updatedAt" : "2018-11-26T23:06:26Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5198bf3c6722d1d5082f42405e295580d10937b4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +6926,6930 @@    export interface ObjectAllocator {\n        getNodeConstructor(): new (kind: SyntaxKind, pos?: number, end?: number) => Node;\n        getTokenConstructor(): { new <TKind extends SyntaxKind>(kind: TKind, pos?: number, end?: number): Token<TKind> };\n        getIdentifierConstructor(): new (kind: SyntaxKind.Identifier, pos?: number, end?: number) => Identifier;\n        getSourceFileConstructor(): new (kind: SyntaxKind.SourceFile, pos?: number, end?: number) => SourceFile;"
  },
  {
    "id" : "add2a494-89d2-4fa0-83ac-b59e998daa26",
    "prId" : 26824,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26824#pullrequestreview-152149778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "603e9b7a-3783-40ef-b2a8-1f9f7ee3e755",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Could just be `@remarks See comment on getJSDocParameterTags`?",
        "createdAt" : "2018-09-04T16:22:59Z",
        "updatedAt" : "2018-09-04T16:24:31Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "0876ab28-270f-46a1-8ea9-181da5c914d5",
        "parentId" : "603e9b7a-3783-40ef-b2a8-1f9f7ee3e755",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "That's kind of annoying for interactive use, though.",
        "createdAt" : "2018-09-04T16:28:33Z",
        "updatedAt" : "2018-09-04T16:28:33Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "01a07fc7177da9804199790f0c9d9b710215e77e",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +5030,5034 @@     * Gets the JSDoc type parameter tags for the node if present.\n     *\n     * @remarks Returns any JSDoc template tag whose names match the provided\n     * parameter, whether a template tag on a containing function\n     * expression, or a template tag on a variable declaration whose"
  },
  {
    "id" : "eb0ce2f9-ce8c-4953-a95b-28b99255fe1f",
    "prId" : 26528,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26528#pullrequestreview-152207946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ac658a5-0500-4828-8661-27e9fdf52a6a",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Does this change fix only fourslash tests or does it affect the type baselines as well?",
        "createdAt" : "2018-09-04T15:33:19Z",
        "updatedAt" : "2018-09-04T21:47:30Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "1b63bda5-70b4-4f65-96ea-19fca9b24363",
        "parentId" : "4ac658a5-0500-4828-8661-27e9fdf52a6a",
        "authorId" : "3075017b-26f7-4d26-8bc7-fe9ba07f6aa8",
        "body" : "This does not affect type baselines, only `verify.quickInfoIs()` in [`tests/cases/fourslash/jsDocFunctionSignatures12.ts`](https://github.com/Microsoft/TypeScript/pull/26528/files/f46389c6201858a604b8aa1d0c83b744a38bd8a9#diff-6eaa29e63779e6ab3b37bb42bd7c2a5eL13)",
        "createdAt" : "2018-09-04T18:58:30Z",
        "updatedAt" : "2018-09-04T21:47:30Z",
        "lastEditedBy" : "3075017b-26f7-4d26-8bc7-fe9ba07f6aa8",
        "tags" : [
        ]
      }
    ],
    "commit" : "aca9919950c8242bda60e10a53f6b1032db41f30",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +507,511 @@        }\n\n        return text;\n    }\n"
  },
  {
    "id" : "4c6448f7-0bc2-43e3-9f6e-112dfb2bb936",
    "prId" : 26528,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26528#pullrequestreview-152256812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e519b80-a532-4def-879f-bd646b4e1564",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Seems like this will do the wrong thing for the non-leading-asterisk use of the * type. ",
        "createdAt" : "2018-09-04T15:35:49Z",
        "updatedAt" : "2018-09-04T21:47:30Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "e2b14cf2-449b-43bf-8045-46a87da614d1",
        "parentId" : "0e519b80-a532-4def-879f-bd646b4e1564",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "We discussed this and agreed that it's acceptable to get this wrong as long as there is a test showing how it gets it wrong.",
        "createdAt" : "2018-09-04T18:02:51Z",
        "updatedAt" : "2018-09-04T21:47:30Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "03793641-def3-4b48-bbdf-c023b4062e46",
        "parentId" : "0e519b80-a532-4def-879f-bd646b4e1564",
        "authorId" : "3075017b-26f7-4d26-8bc7-fe9ba07f6aa8",
        "body" : "In 64bbf5ee125b44a55cbe8efda60182ec20d815be I added a test that shows how `getTextOfNodeFromSourceText` works on this (ugly) code:\r\n```js\r\n/**\r\n * @param {{\r\n *   stringProp: string,\r\n *   numProp: number,\r\n *   boolProp: boolean,\r\n *   anyProp: *,\r\n *   anotherAnyProp:\r\n *   *,\r\n *   functionProp:\r\n *   function(string,\r\n *   *):\r\n *   *\r\n * }} o\r\n */\r\nfunction f1(o) {\r\n    o;\r\n}\r\n```\r\n\r\nThat results in this being (pretty) printed:\r\n```\r\n(parameter) o: {\r\n    stringProp: string;\r\n    numProp: number;\r\n    boolProp: boolean;\r\n    anyProp: any;\r\n    anotherAnyProp: any;\r\n    functionProp: (arg0: string, arg1: any) => any;\r\n}\r\n```\r\n\r\nNot sure if this covers what you are talking about.",
        "createdAt" : "2018-09-04T21:15:43Z",
        "updatedAt" : "2018-09-04T21:48:57Z",
        "lastEditedBy" : "3075017b-26f7-4d26-8bc7-fe9ba07f6aa8",
        "tags" : [
        ]
      }
    ],
    "commit" : "aca9919950c8242bda60e10a53f6b1032db41f30",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +503,507 @@\n        if (isJSDocTypeExpressionOrChild(node)) {\n            // strip space + asterisk at line start\n            text = text.replace(/(^|\\r?\\n|\\r)\\s*\\*\\s*/g, \"$1\");\n        }"
  },
  {
    "id" : "7ba7b18d-1a08-4e2c-8b12-87ef066b6e7d",
    "prId" : 26368,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26368#pullrequestreview-145403257",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02096ff6-92b3-40ef-b6b0-dd7c184617d2",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I didn't want to create another wrapper/worker pair, but I couldn't come up with a better way to special-case the isJS check just for property assignments. Any ideas?",
        "createdAt" : "2018-08-10T21:26:09Z",
        "updatedAt" : "2018-08-15T22:03:07Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "05c2ffc60f7189f3679eb975612b59b8b4b12b35",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1897,1901 @@    export function getSpecialPropertyAssignmentKind(expr: BinaryExpression): SpecialPropertyAssignmentKind {\n        const special = getSpecialPropertyAssignmentKindWorker(expr);\n        return special === SpecialPropertyAssignmentKind.Property || isInJavaScriptFile(expr) ? special : SpecialPropertyAssignmentKind.None;\n    }\n"
  },
  {
    "id" : "b9027b26-3cf6-4c1f-864d-01725f6cf39b",
    "prId" : 26330,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26330#pullrequestreview-145341767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f83a7c6c-9b75-495c-bfc6-da934a07e1da",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "The name implies that this includes BigInt literals once they are added to the language. I don't know if that is correct for all call sites",
        "createdAt" : "2018-08-10T11:56:35Z",
        "updatedAt" : "2018-08-10T11:56:35Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      },
      {
        "id" : "cadb2414-430d-4057-ae04-2d5a04c4dd1d",
        "parentId" : "f83a7c6c-9b75-495c-bfc6-da934a07e1da",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "It looks like in most cases it would be -- `{ [0n]: true }` is the same as `{ 0: true }` so as long as IntLiteral#text doesn't include `n` this would work. @sheetalkamat is working on bigints.",
        "createdAt" : "2018-08-10T16:46:46Z",
        "updatedAt" : "2018-08-10T16:46:46Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "2ab78f6c-53f3-4629-a12a-f263dcd165b1",
        "parentId" : "f83a7c6c-9b75-495c-bfc6-da934a07e1da",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "@andy-ms #25886 I think is the nearly complete implementation at this point (unless we have multiple implementations at the ready). But yeah, I guess indexing with `bigint` is fine - it's just odd, since in the typesystem that needs to go under the `number` index signature since `0n` and `0` have the same string representation. Probably worth testing in #25886, at least! It's probably not a concern for this PR directly, since it'll need to be dealt with at the point they're added.",
        "createdAt" : "2018-08-10T17:58:21Z",
        "updatedAt" : "2018-08-10T17:58:21Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "40972baa412f4be49dfb3ae09d2b39b514de1e20",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +2561,2565 @@    }\n\n    export function isStringOrNumericLiteralLike(node: Node): node is StringLiteralLike | NumericLiteral {\n        return isStringLiteralLike(node) || isNumericLiteral(node);\n    }"
  },
  {
    "id" : "90e886f6-a59c-4d19-80a2-93958248d4d3",
    "prId" : 25886,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25886#pullrequestreview-162273330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6e14874-0e7e-4a3c-a2e8-07382924c30a",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Just for prudence, I feel like this is the kind of method that'd be nice to be unittested on its own; but it's probably not strictly required since other tests should exercise it enough.",
        "createdAt" : "2018-08-29T18:34:53Z",
        "updatedAt" : "2018-11-05T20:24:02Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "eb6d7329-c003-4913-a990-2abc6150723b",
        "parentId" : "c6e14874-0e7e-4a3c-a2e8-07382924c30a",
        "authorId" : "2a9ff7d0-9e5d-4e6a-9c76-06f809e7ccca",
        "body" : "Added a unit test: https://github.com/Microsoft/TypeScript/pull/25886/files#diff-b222e6a526e22d4babe56a51168f5fae",
        "createdAt" : "2018-10-06T23:45:59Z",
        "updatedAt" : "2018-11-05T20:24:02Z",
        "lastEditedBy" : "2a9ff7d0-9e5d-4e6a-9c76-06f809e7ccca",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb99c4123003ade3e471cf17472be6d3f72d96ff",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +8446,8450 @@     * to its decimal string representation, e.g. `4660`.\n     */\n    export function parsePseudoBigInt(stringValue: string): string {\n        let log2Base: number;\n        switch (stringValue.charCodeAt(1)) { // \"x\" in \"0x123\""
  },
  {
    "id" : "d8ea0abd-a86f-4efa-8de2-23841887105c",
    "prId" : 25561,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25561#pullrequestreview-136333286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f804fad2-97e5-4d05-8b89-48f9ddc364c8",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "`prependStatements` shouldn't care about prologue directives. This logic should be handled elsewhere at the call site instead.",
        "createdAt" : "2018-07-10T22:24:53Z",
        "updatedAt" : "2018-07-11T16:56:59Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "5e0847b9-81d2-4f6f-8986-8e5c269d5bbc",
        "parentId" : "f804fad2-97e5-4d05-8b89-48f9ddc364c8",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Just rename `prependStatements` - every single one of it's callsites needs to do this.",
        "createdAt" : "2018-07-10T22:51:19Z",
        "updatedAt" : "2018-07-11T16:56:59Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "4a327d99-1273-4634-bbab-690560ad1989",
        "parentId" : "f804fad2-97e5-4d05-8b89-48f9ddc364c8",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "That's probably fine. The general-purpose name of `prependStatements` means it could be used in _any_ place where there's a statement list, including a `Block` or a `CaseClause`, which don't support prologue directives. Giving it a more specific name would remove that concern.",
        "createdAt" : "2018-07-10T23:04:34Z",
        "updatedAt" : "2018-07-11T16:56:59Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "12f633c7-24c1-4f34-9a76-9a46a451cc0b",
        "parentId" : "f804fad2-97e5-4d05-8b89-48f9ddc364c8",
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "done",
        "createdAt" : "2018-07-11T16:57:24Z",
        "updatedAt" : "2018-07-11T16:57:25Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a960011d7ccabc262f85fad985591d74e8f115a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +409,413 @@        // skip all prologue directives to insert at the correct position\n        for (; statementIndex < to.length; ++statementIndex) {\n            if (!isPrologueDirective(to[statementIndex])) {\n                break;\n            }"
  },
  {
    "id" : "1cbad476-1f82-45e6-91d2-d20092e19627",
    "prId" : 25282,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25282#pullrequestreview-132920298",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e696c58-21fa-4010-852f-5df95e0e3a35",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "for other readers: all the changes below here are just refactorings based on an improved definition of walkupBindingElementsAndPatterns.",
        "createdAt" : "2018-06-28T16:22:59Z",
        "updatedAt" : "2018-06-28T17:05:45Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee51c4669c235324aa981f223a4036fd7cfa20de",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +902,906 @@    }\n\n    export function isConst(node: Node): boolean {\n        return !!(getCombinedNodeFlags(node) & NodeFlags.Const)\n            || !!(isDeclaration(node) && getCombinedModifierFlags(node) & ModifierFlags.Const);"
  },
  {
    "id" : "cbc8fa7b-2275-489f-8466-58ac182b4854",
    "prId" : 25106,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25106#pullrequestreview-130621153",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c6dfc73-08af-43b8-8d64-4eb86b3f3b2e",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can we fix `getNameOfDeclaration` as well to return nullable type? i do not know where else our assumptions are wrong, and this seems like a good time as any to fix them once and for all.",
        "createdAt" : "2018-06-20T20:56:00Z",
        "updatedAt" : "2018-06-21T16:37:11Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "d2c0aa07-3f2f-4420-8c04-0ff2fe3900b3",
        "parentId" : "3c6dfc73-08af-43b8-8d64-4eb86b3f3b2e",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I'll try. It's used a lot of places without checking, but many of these follow a similar error-reporting pattern that might be supportable with a non-nullable overload or something.",
        "createdAt" : "2018-06-20T23:17:26Z",
        "updatedAt" : "2018-06-21T16:37:11Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddb60c7a5d8ad040af6c16e385d4fc55c8a8ab6d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +4847,4851 @@\n    function getDeclarationIdentifier(node: Declaration | Expression): Identifier | undefined {\n        const name = getNameOfDeclaration(node);\n        return name && isIdentifier(name) ? name : undefined;\n    }"
  },
  {
    "id" : "bb56a53a-f148-4af0-92c1-c857af2249b5",
    "prId" : 24465,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24465#pullrequestreview-127336265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6eedd8b8-cd6d-4beb-97f2-753780a346db",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "So we are walking now every string we write in the emitter to find lineStarts? why is this needed? do you know the perf impact on the emitter?",
        "createdAt" : "2018-06-08T00:31:16Z",
        "updatedAt" : "2018-06-09T16:43:39Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "d4877568-e95a-4a43-99cf-75b0c4fd07c6",
        "parentId" : "6eedd8b8-cd6d-4beb-97f2-753780a346db",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "If we don't count the lines and the length of the last one, we don't set the line and column correctly for get line and column, resulting in incorrect sourcemaps.",
        "createdAt" : "2018-06-08T03:48:51Z",
        "updatedAt" : "2018-06-09T16:43:39Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "4f135d3f-cb64-490b-949a-abb2908e0c42",
        "parentId" : "6eedd8b8-cd6d-4beb-97f2-753780a346db",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i understand, but how often are these functions called with multi-line text? can we split these to have their own writer function to avoid doing this on every token we write?",
        "createdAt" : "2018-06-08T17:56:46Z",
        "updatedAt" : "2018-06-09T16:43:39Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "a673970e-0181-48b1-bd23-ee20701928f2",
        "parentId" : "6eedd8b8-cd6d-4beb-97f2-753780a346db",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Probably best to discuss this in #24704",
        "createdAt" : "2018-06-08T22:59:26Z",
        "updatedAt" : "2018-06-09T16:43:39Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f626fdcb3026452fe1ca333085c2b720add2ee6",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +2871,2875 @@                }\n                output += s;\n                updateLineCountAndPosFor(s);\n            }\n        }"
  },
  {
    "id" : "0938267a-e8db-4b0a-b970-0d548ee8b197",
    "prId" : 24386,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24386#pullrequestreview-123250911",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "118adccd-ec06-4248-92d0-d3f890544e89",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "It's possible that there is more than one directive. Though I don't know if that occurs in real world code. Should this case be handled here? ",
        "createdAt" : "2018-05-25T05:34:58Z",
        "updatedAt" : "2018-05-25T05:35:31Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      },
      {
        "id" : "f2e39409-2192-4052-a4b3-d1a1432b784b",
        "parentId" : "118adccd-ec06-4248-92d0-d3f890544e89",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "We don't handle it in any other locations we check for prologues, I looked. I figured I shouldn't differ here.",
        "createdAt" : "2018-05-25T05:54:36Z",
        "updatedAt" : "2018-05-25T05:54:36Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c1961186e2ed2731fb49359ec0c9fc9d0b611b0",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +266,270 @@        if (from === undefined || from.length === 0) return to;\n        if (to === undefined) return from.slice();\n        const prologue = to.length && isPrologueDirective(to[0]) && to.shift();\n        to.unshift(...from);\n        if (prologue) {"
  },
  {
    "id" : "24f527f4-5960-484b-b5a9-c085fab341c9",
    "prId" : 24153,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24153#pullrequestreview-120819703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b2693a3-af36-4dd9-a05c-af2754d4b996",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "there are a few other places that we get type parameter declarations of typedef and callback tags. They explicitly do *not* use `getEffectiveTypeParameterDeclarations` because it incorrectly (1) finds the host and (2) looks for `@template` in *any* jsdoc comment. Jsdoc type aliases only look for `@template` in their containing comment.\r\n\r\nThat said, it's probably the Right Thing to make `getEffectiveTypeParameterDeclarations` handle jsdoc type aliases, and have everybody call it.",
        "createdAt" : "2018-05-16T15:59:06Z",
        "updatedAt" : "2018-05-16T19:24:02Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "01ea2d16-f845-43eb-aadb-af23d094f27c",
        "parentId" : "9b2693a3-af36-4dd9-a05c-af2754d4b996",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "> That said, it's probably the Right Thing to make getEffectiveTypeParameterDeclarations handle jsdoc type aliases, and have everybody call it.\r\n\r\nDo you not have such a fix in #23947 ?",
        "createdAt" : "2018-05-16T18:11:53Z",
        "updatedAt" : "2018-05-16T19:24:02Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "0bc124af-192d-4c1c-858a-71a1d52c36d4",
        "parentId" : "9b2693a3-af36-4dd9-a05c-af2754d4b996",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Yes, along with the astonishing ability to forget what I did two weeks ago!",
        "createdAt" : "2018-05-16T21:04:51Z",
        "updatedAt" : "2018-05-16T21:04:51Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "a63f725671b5594ca51382d422b2b15bce295a28",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +3094,3098 @@     * JavaScript file, gets the type parameters from the `@template` tag from JSDoc.\n     */\n    export function getEffectiveTypeParameterDeclarations(node: DeclarationWithTypeParameters | JSDocTypedefTag) {\n        return isJSDocTypedefTag(node)\n            ? getJSDocTypeParameterDeclarations(node)"
  },
  {
    "id" : "a2936b88-241d-46bd-9ddc-5f2311651fd0",
    "prId" : 23546,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23546#pullrequestreview-114032766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32186599-4826-4df6-a92d-884f188376dc",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "why doesn't this miss a lot of tags, for example, when `node.kind === SyntaxKind.Parameter` on line 1848 and following?",
        "createdAt" : "2018-04-20T15:54:25Z",
        "updatedAt" : "2018-04-20T16:11:05Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "8215968e099f4a22bfe0cfd4d0e7acdf62ba993d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1819,1823 @@        function getJSDocCommentsAndTagsWorker(node: Node): void {\n            const parent = node.parent;\n            if (!parent) return;\n            if (parent.kind === SyntaxKind.PropertyAssignment || parent.kind === SyntaxKind.PropertyDeclaration || getNestedModuleDeclaration(parent)) {\n                getJSDocCommentsAndTagsWorker(parent);"
  },
  {
    "id" : "b40d647d-c183-4a74-a7b8-e3678646da1f",
    "prId" : 23342,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23342#pullrequestreview-111746282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22503306-95ab-423a-9cf9-ea784f52c617",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "For my own edification, why not use `{}` as the default value?",
        "createdAt" : "2018-04-12T18:17:09Z",
        "updatedAt" : "2018-04-12T18:49:13Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "54c691ff-2718-4e4a-b969-e4e32b734f42",
        "parentId" : "22503306-95ab-423a-9cf9-ea784f52c617",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I've been using `Map<true>` everywhere for sets; to me `Map<{}>` would imply actually being a map from `string` to something, where we didn't specify that something.",
        "createdAt" : "2018-04-12T18:44:13Z",
        "updatedAt" : "2018-04-12T18:49:13Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8af64d3c4524b26e951b48d951bd426f7c8338a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +4023,4027 @@    export function addToSeen(seen: Map<true>, key: string | number): boolean;\n    export function addToSeen<T>(seen: Map<T>, key: string | number, value: T): boolean;\n    export function addToSeen<T>(seen: Map<T>, key: string | number, value: T = true as any): boolean {\n        key = String(key);\n        if (seen.has(key)) {"
  },
  {
    "id" : "d963c350-3e17-49ec-8b5c-e00559f24055",
    "prId" : 23115,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23115#pullrequestreview-109044903",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "226d2436-5331-4452-94ba-1d22cd5a9c2f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Instead of checking if `parent` is defined over and over again, maybe you should bail out if `parent` isn't defined?",
        "createdAt" : "2018-04-03T17:31:17Z",
        "updatedAt" : "2018-04-03T17:31:18Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8797bfbe2bc59999a8016715f200b63390b747f4",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +1805,1809 @@        function getJSDocCommentsAndTagsWorker(node: Node): void {\n            const parent = node.parent;\n            if (parent &&\n                (parent.kind === SyntaxKind.PropertyAssignment ||\n                 parent.kind === SyntaxKind.PropertyDeclaration ||"
  },
  {
    "id" : "55c81e4c-766b-4833-b93a-4aac1e28c68f",
    "prId" : 22844,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22844#pullrequestreview-107451360",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6751f8c1-ba8b-44a4-80af-23fabe3643b4",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I'd rather we keep to a consistent series of values for operator precedence, so we don't in the future accidentally try to compare the result from `getBinaryOperatorPrecedence` to `getOperatorPrecedence`. As far as the parser is concerned, it only cares whether the new precedence is higher than the old one and is greater than `0`.",
        "createdAt" : "2018-03-27T20:18:14Z",
        "updatedAt" : "2018-03-27T22:36:38Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "38b6de4f9e2497017f2661707c9c5ee6005bc562",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +2500,2504 @@    }\n\n    /* @internal */\n    export function getBinaryOperatorPrecedence(kind: SyntaxKind): number {\n        switch (kind) {"
  },
  {
    "id" : "a98eb159-009a-4197-a053-cd6fd9d600bd",
    "prId" : 22844,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22844#pullrequestreview-107486023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdd5be27-0dc9-4b2b-9237-e7fbd2b5c686",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "minor nit: It's a bit odd to read `getOperatorPrecedence` in descending order then see `getBinaryOperatorPrecedence` in ascending order. We might want to change the order of one or the other to be consistent.",
        "createdAt" : "2018-03-27T22:08:55Z",
        "updatedAt" : "2018-03-27T22:36:38Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "38b6de4f9e2497017f2661707c9c5ee6005bc562",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +2502,2506 @@    /* @internal */\n    export function getBinaryOperatorPrecedence(kind: SyntaxKind): number {\n        switch (kind) {\n            case SyntaxKind.BarBarToken:\n                return 5;"
  },
  {
    "id" : "813deab8-f2ff-4c4c-9b43-d30b5244c9be",
    "prId" : 22573,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22573#pullrequestreview-103930585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3c917b2-5c9b-4703-90bb-7b630260f03d",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "@sandersn These functions are so simple now, and only used in a few places, maybe we should just inline them?",
        "createdAt" : "2018-03-14T17:34:24Z",
        "updatedAt" : "2018-03-14T17:52:46Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "375e627a-378d-4cf9-8cb9-6a572b3e67d0",
        "parentId" : "c3c917b2-5c9b-4703-90bb-7b630260f03d",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Aren't they part of the public API? Otherwise I'd say yes.",
        "createdAt" : "2018-03-14T17:37:19Z",
        "updatedAt" : "2018-03-14T17:52:46Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "556474e9-98cb-4c85-9d17-1ecd858fa6e8",
        "parentId" : "c3c917b2-5c9b-4703-90bb-7b630260f03d",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "D'oh, it's all public.",
        "createdAt" : "2018-03-14T17:51:26Z",
        "updatedAt" : "2018-03-14T17:52:46Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd9c0b9345c209d607a96f650c8ce5aadfe2d984",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +4440,4444 @@\n    /** Gets the JSDoc augments tag for the node if present */\n    export function getJSDocAugmentsTag(node: Node): JSDocAugmentsTag | undefined {\n        return getFirstJSDocTag(node, isJSDocAugmentsTag);\n    }"
  },
  {
    "id" : "e4951407-d2e2-4bd6-b2b8-b57d31b480e6",
    "prId" : 22495,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22495#pullrequestreview-104681007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d47916f8-d1cf-4ab8-a3e9-512ed0834be3",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "And this is where we might crash as moduleSpecifier is absent on import declaration at: https://github.com/Microsoft/TypeScript/pull/22495/files#diff-08a3cc4f1f9a51dbb468c2810f5229d3R1607 ?",
        "createdAt" : "2018-03-16T18:51:40Z",
        "updatedAt" : "2018-03-16T20:35:09Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "49d7565a4581e0caae03dde7fca5f94f17e4a6fe",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +1659,1663 @@            case SyntaxKind.ImportDeclaration:\n            case SyntaxKind.ExportDeclaration:\n                return node.parent as AnyValidImportOrReExport;\n            case SyntaxKind.ExternalModuleReference:\n                return (node.parent as ExternalModuleReference).parent as AnyValidImportOrReExport;"
  },
  {
    "id" : "3cc413b8-84df-4ca7-b971-06a26019c16a",
    "prId" : 22404,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22404#pullrequestreview-102497228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bea50c4c-c51d-4ef5-b14e-70d578c8aa09",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "For my own understanding, if `node` is not a `HasType` but does have a `type` property with a defined value, we will return that (as we did before?)?",
        "createdAt" : "2018-03-08T23:10:29Z",
        "updatedAt" : "2018-03-08T23:12:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "a8ccc7e3-a606-484c-b62b-989209c1c544",
        "parentId" : "bea50c4c-c51d-4ef5-b14e-70d578c8aa09",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Yes, the assumption is that only a `HasType` has a type.",
        "createdAt" : "2018-03-08T23:17:53Z",
        "updatedAt" : "2018-03-08T23:17:53Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "17742e0c7af72216a3f5afcdb18119ce4a68ed9b",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2841,2845 @@     */\n    export function getEffectiveTypeAnnotationNode(node: Node): TypeNode | undefined {\n        return (node as HasType).type || (isInJavaScriptFile(node) ? getJSDocType(node) : undefined);\n    }\n"
  },
  {
    "id" : "cdf0e350-7c2e-4596-a728-a70b9772aab2",
    "prId" : 22335,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22335#pullrequestreview-101458362",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c14bf30c-6b09-4478-b15d-fa192f92c05b",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This *technically* only needs to be 0 through 7 (`isOctalDigit`), but I'm fine with this.",
        "createdAt" : "2018-03-06T08:45:59Z",
        "updatedAt" : "2018-03-06T08:45:59Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "67aae9810cc4fa46e2fd5aea3a86f19192067242",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +2498,2502 @@        if (c.charCodeAt(0) === CharacterCodes.nullCharacter) {\n            const lookAhead = input.charCodeAt(offset + c.length);\n            if (lookAhead >= CharacterCodes._0 && lookAhead <= CharacterCodes._9) {\n                // If the null character is followed by digits, print as a hex escape to prevent the result from parsing as an octal (which is forbidden in strict mode)\n                return \"\\\\x00\";"
  },
  {
    "id" : "977b36f6-fb51-4acc-bcf9-d2bf2fafb752",
    "prId" : 22278,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22278#pullrequestreview-100866676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90337760-1eae-42ba-9340-16c75e4aed99",
        "parentId" : null,
        "authorId" : "896eefaa-e0e1-46ed-b15c-ddc0bfe62688",
        "body" : "here maybe consider doing return textSpanIntersection(span1, span2) as it returns undefined if no value.",
        "createdAt" : "2018-03-02T00:01:24Z",
        "updatedAt" : "2018-03-02T00:02:23Z",
        "lastEditedBy" : "896eefaa-e0e1-46ed-b15c-ddc0bfe62688",
        "tags" : [
        ]
      },
      {
        "id" : "3ef7d3c7-df7f-40d6-9b88-7a40ae5d2cea",
        "parentId" : "90337760-1eae-42ba-9340-16c75e4aed99",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`textSpanIntersection` doesn't return undefined if there's a 0-size intersection (the ranges are right up against each other), but this function does. So they're not exactly the same.",
        "createdAt" : "2018-03-02T18:22:20Z",
        "updatedAt" : "2018-03-02T18:22:20Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b0269117b3b57e3cd773c905b740d2105f8faa1",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +3765,3769 @@    export function textSpanOverlap(span1: TextSpan, span2: TextSpan) {\n        const overlap = textSpanIntersection(span1, span2);\n        return overlap && overlap.length === 0 ? undefined : overlap;\n    }\n"
  },
  {
    "id" : "dd0515cc-8f71-482f-ace2-279e9225450c",
    "prId" : 22089,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22089#pullrequestreview-98760750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75149500-1910-4bf4-bbad-c516514455bb",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Mmm, this implementation doesn't seem to actually check that the name is a `DeclarationName`. ",
        "createdAt" : "2018-02-22T00:42:01Z",
        "updatedAt" : "2018-03-05T21:41:14Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "2c72f178-c556-40d2-b8de-a82d620af433",
        "parentId" : "75149500-1910-4bf4-bbad-c516514455bb",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Added an assertion -- a `name` property should always be a `DeclarationName`.",
        "createdAt" : "2018-02-22T23:00:18Z",
        "updatedAt" : "2018-03-05T21:41:14Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "142824b0973e0dd0844279953758aef17f8bbe83",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4300,4304 @@\n    /** @internal */\n    export function isNamedDeclaration(node: Node): node is NamedDeclaration & { name: DeclarationName } {\n        return !!(node as NamedDeclaration).name; // A 'name' property should always be a DeclarationName.\n    }"
  },
  {
    "id" : "3b47e979-1049-4b46-ba8a-45ded0385c2c",
    "prId" : 20324,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20324#pullrequestreview-80006977",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1068769d-d5a5-4302-a7b3-0bc6e750bc77",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "we should emit them as is for ESNext i would say..",
        "createdAt" : "2017-11-29T18:17:47Z",
        "updatedAt" : "2017-12-08T18:49:29Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "735f3f05-3da3-4bb5-89de-db3122b96683",
        "parentId" : "1068769d-d5a5-4302-a7b3-0bc6e750bc77",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Acctually `ES2018` and later.",
        "createdAt" : "2017-11-29T18:18:53Z",
        "updatedAt" : "2017-12-08T18:49:29Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "752d9651-edc7-47ab-932f-0695c4601e51",
        "parentId" : "1068769d-d5a5-4302-a7b3-0bc6e750bc77",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Should we add an `es2018` target now or wait until the ES2018 spec is official?",
        "createdAt" : "2017-11-29T20:18:27Z",
        "updatedAt" : "2017-12-08T18:49:29Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "010e4325-7c27-4519-be06-1030a6542d57",
        "parentId" : "1068769d-d5a5-4302-a7b3-0bc6e750bc77",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "@mhegazy said offline that we should open an issue to add an ES2018 target, since there are some lib additions to make in addition to adding an output mode that preserves these separators.",
        "createdAt" : "2017-11-29T21:34:40Z",
        "updatedAt" : "2017-12-08T18:49:29Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "72ec009f-1850-4a6f-9f0f-8bbef1b4206e",
        "parentId" : "1068769d-d5a5-4302-a7b3-0bc6e750bc77",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Opened #20342 to track.",
        "createdAt" : "2017-11-29T21:41:27Z",
        "updatedAt" : "2017-12-08T18:49:29Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec4540d1492c31ffb9923a8ac733093b5f5192dc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +347,351 @@        // If we don't need to downlevel and we can reach the original source text using\n        // the node's parent reference, then simply get the text as it was originally written.\n        if (!nodeIsSynthesized(node) && node.parent && !(isNumericLiteral(node) && node.numericLiteralFlags & TokenFlags.ContainsSeparator)) {\n            return getSourceTextOfNodeFromSourceFile(sourceFile, node);\n        }"
  },
  {
    "id" : "3baf61ae-c7db-415c-99d8-da047feb3ec8",
    "prId" : 19355,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19355#pullrequestreview-70860987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8f00a3c-53bc-4e8f-bc07-9c8d0aad5b90",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "No need to export.\r\n\r\nPlease annotate potentially `undefined` return values (although as written this is potentially `false`).\r\nI would prefer multiple statements with local variables instead of writing it all as one expression that has to be formatted on different lines anyway.\r\n```ts\r\nif (isExpressionStatement(node)) {\r\n    const { expression } = node;\r\n    if (isBinaryExpression(expression)) {\r\n        const { operatorToken, right } = node;\r\n        return operatorToken.kind === SyntaxKind.EqualsToken ? right : undefined;\r\n    }\r\n}\r\n```",
        "createdAt" : "2017-10-20T14:31:58Z",
        "updatedAt" : "2017-10-20T14:35:22Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cc2af59b1d098ea00adc1a24bba2570e6cf838b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1539,1543 @@    }\n\n    export function getSourceOfAssignment(node: Node): Node {\n        return isExpressionStatement(node) &&\n            node.expression && isBinaryExpression(node.expression) &&"
  },
  {
    "id" : "67440981-3caa-459c-a40a-119b711d7927",
    "prId" : 18822,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18822#pullrequestreview-65957066",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d370604e-c7f0-4ab2-b973-c7813efd7fdd",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Why was the parameter renamed?",
        "createdAt" : "2017-09-28T18:11:39Z",
        "updatedAt" : "2017-09-28T18:11:39Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "5ee677f9-ef16-4237-8ded-7faf30876904",
        "parentId" : "d370604e-c7f0-4ab2-b973-c7813efd7fdd",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "In the old version it was assigned to a `const expr` -- this cuts out the middleman.\r\nYou could of course rename the declaration to `expression` if you want, along with all of its uses.",
        "createdAt" : "2017-09-28T18:31:48Z",
        "updatedAt" : "2017-09-28T18:32:07Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3b5d3eebe5c536ff4d8e73869764d851e46b5af",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1402,1406 @@    /// Given a BinaryExpression, returns SpecialPropertyAssignmentKind for the various kinds of property\n    /// assignments we treat as special in the binder\n    export function getSpecialPropertyAssignmentKind(expr: ts.BinaryExpression): SpecialPropertyAssignmentKind {\n        if (!isInJavaScriptFile(expr)) {\n            return SpecialPropertyAssignmentKind.None;"
  },
  {
    "id" : "c7f74929-1c19-48d4-8338-6068b4435400",
    "prId" : 18706,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18706#pullrequestreview-67811239",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ff395d5-70d0-4100-8c88-38ca5bb49cd2",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "remove 'All'",
        "createdAt" : "2017-10-06T23:00:17Z",
        "updatedAt" : "2017-10-09T21:44:03Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f3d6e753e0c89419bd3734ccf991c26ba772131",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4249,4253 @@\n    /** Gets all JSDoc tags of a specified kind, or undefined if not present. */\n    export function getAllJSDocTagsOfKind(node: Node, kind: SyntaxKind): ReadonlyArray<JSDocTag> | undefined {\n        const tags = getJSDocTags(node);\n        return filter(tags, doc => doc.kind === kind);"
  },
  {
    "id" : "abf46fb9-338d-4082-8d45-bf6ff71a8619",
    "prId" : 18635,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18635#pullrequestreview-64212394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ce498b3-7abd-491c-93fb-c080cbf64c17",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "One place this wouldn't work is with synthesized nodes. Not sure if those cases can pop up where it's been used so far.",
        "createdAt" : "2017-09-21T08:32:57Z",
        "updatedAt" : "2017-09-21T08:32:57Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2493ade11776c927615e6c38c4c417d5df72b05a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +327,331 @@     */\n    export function indexOfNode(nodeArray: ReadonlyArray<Node>, node: Node) {\n        return binarySearch(nodeArray, node, compareNodePos);\n    }\n"
  },
  {
    "id" : "caf16dfa-fd4f-4df8-b077-75c1b5a318a7",
    "prId" : 17988,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17988#pullrequestreview-58531343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "458324d9-6cd4-42b5-a0ef-7a6cd4bc0200",
        "parentId" : null,
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : ">export function isDeclarationWithTypeParameters(node: DeclarationWithTypeParameters): node is DeclarationWithTypeParameters { [](start = 4, length = 125)\r\n\r\nWhat is the purpose of the overload here? I think you can just remove it and have one function that takes Node. \r\n\r\nIf you have an argument of DeclarationWithTypeParameters type then you already know enough at compile time not to call this function.",
        "createdAt" : "2017-08-24T22:20:07Z",
        "updatedAt" : "2017-08-29T18:34:33Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      },
      {
        "id" : "9ac33282-3188-4f22-b872-0d23f01cefb2",
        "parentId" : "458324d9-6cd4-42b5-a0ef-7a6cd4bc0200",
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : "Or is this a trick to get the `default: staticAssertNever` to work?\r\n\r\n---\r\nIn reply to: [135145388](https://github.com/Microsoft/TypeScript/pull/17988#discussion_r135145388) [](ancestors = 135145388)",
        "createdAt" : "2017-08-24T22:22:26Z",
        "updatedAt" : "2017-08-29T18:34:33Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      },
      {
        "id" : "e444d1b2-28b9-45de-83d2-0e13bcd96d7f",
        "parentId" : "458324d9-6cd4-42b5-a0ef-7a6cd4bc0200",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "It's the tricky one. 😄 ",
        "createdAt" : "2017-08-24T22:46:17Z",
        "updatedAt" : "2017-08-29T18:34:33Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a816079ddad974b7d62c1368767e60d72371311b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +480,484 @@    /* @internal */\n    export function isDeclarationWithTypeParameters(node: Node): node is DeclarationWithTypeParameters;\n    export function isDeclarationWithTypeParameters(node: DeclarationWithTypeParameters): node is DeclarationWithTypeParameters {\n        switch (node.kind) {\n            case SyntaxKind.CallSignature:"
  },
  {
    "id" : "c3a328a0-ffc1-4e68-8c37-3a8fe95e8dc4",
    "prId" : 17327,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17327#pullrequestreview-55053539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecaa3d39-fbd3-48c6-b14c-aa63e0f56c63",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Does this need to be exported?",
        "createdAt" : "2017-08-08T19:25:22Z",
        "updatedAt" : "2017-08-08T20:04:53Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "7d1e31ec-6361-4c1a-869a-736d01ca04f7",
        "parentId" : "ecaa3d39-fbd3-48c6-b14c-aa63e0f56c63",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "We export the regexes for the rest of our matched triple-slash references, so I would assume so. Our triple-slash recognition functions are also currently all internal (prior to this PR anyway), so people need to replicate these regexes themselves if they're trying to emulate our behavior.",
        "createdAt" : "2017-08-08T20:01:17Z",
        "updatedAt" : "2017-08-08T20:04:53Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b36e36d3d54fce85d5758a78d7608674dc461f6",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +681,685 @@    export let fullTripleSlashReferenceTypeReferenceDirectiveRegEx = /^(\\/\\/\\/\\s*<reference\\s+types\\s*=\\s*)('|\")(.+?)\\2.*?\\/>/;\n    export let fullTripleSlashAMDReferencePathRegEx = /^(\\/\\/\\/\\s*<amd-dependency\\s+path\\s*=\\s*)('|\")(.+?)\\2.*?\\/>/;\n    export let defaultLibReferenceRegEx = /^(\\/\\/\\/\\s*<reference\\s+no-default-lib\\s*=\\s*)('|\")(.+?)\\2\\s*\\/>/;\n\n    export function isPartOfTypeNode(node: Node): boolean {"
  },
  {
    "id" : "897d8b66-90f9-4645-9a79-678bc1fe7665",
    "prId" : 16836,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16836#pullrequestreview-48347775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53f5480d-bc13-49f8-b29c-3fd9ff7e3125",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Q: why this function get export?",
        "createdAt" : "2017-07-05T22:19:00Z",
        "updatedAt" : "2017-07-07T17:39:33Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "aab1ff31-f0a1-4225-b8e4-d3a04c1cd722",
        "parentId" : "53f5480d-bc13-49f8-b29c-3fd9ff7e3125",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "It's needed in `getJsDocTagsFromDeclarations` in `jsDoc.ts`.",
        "createdAt" : "2017-07-06T14:17:39Z",
        "updatedAt" : "2017-07-07T17:39:33Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b3ea9fda86472fc74cac5a710003dd4d798fbe6",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +1464,1468 @@    }\n\n    export function getJSDocTags(node: Node): JSDocTag[] | undefined {\n        let tags = node.jsDocCache;\n        // If cache is 'null', that means we did the work of searching for JSDoc tags and came up with nothing."
  },
  {
    "id" : "932e81d1-b884-4d90-b239-c5f3820940d3",
    "prId" : 16742,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16742#pullrequestreview-49062330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61f3a8eb-3f61-48ed-9d5b-dce10dc853e5",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "why combine flags in the true case instead of just returning `symbol.exportSymbol.flags`?",
        "createdAt" : "2017-07-10T16:24:43Z",
        "updatedAt" : "2017-07-10T17:41:30Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "d62c8cd7-ea13-4ae7-801a-4b96f97171ba",
        "parentId" : "61f3a8eb-3f61-48ed-9d5b-dce10dc853e5",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "In `findAllRefsForDefaultExport08` (and `findAllRefsForDefaultExport02`), we have an exported class and a non-exported namespace merged with it. So the local symbol will have flags that the exported symbol is lacking; it has `NamespaceModule|ExportValue|ExportType` while the exported symbol just has `Class`.",
        "createdAt" : "2017-07-10T17:52:50Z",
        "updatedAt" : "2017-07-10T17:52:50Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "9d0512ca-e8ca-4b6f-b021-8284f8c5c4a6",
        "parentId" : "61f3a8eb-3f61-48ed-9d5b-dce10dc853e5",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Makes sense",
        "createdAt" : "2017-07-10T23:59:02Z",
        "updatedAt" : "2017-07-10T23:59:02Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2686c2b38de9ce0b610a8edbda5aee443001168",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +3594,3598 @@    /** See comment on `declareModuleMember` in `binder.ts`. */\n    export function getCombinedLocalAndExportSymbolFlags(symbol: Symbol): SymbolFlags {\n        return symbol.exportSymbol ? symbol.exportSymbol.flags | symbol.flags : symbol.flags;\n    }\n}"
  },
  {
    "id" : "79f92fb4-4073-47b2-bc38-45ddd1e51ee1",
    "prId" : 16413,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16413#pullrequestreview-43244864",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "311efd91-096f-4448-9bcf-b383cc755a89",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "In a TypeScript file, a TypeParameter in JSDoc is just a comment, albeit one that is parsed.\r\nIn a JavaScript file, it's actually a declaration.",
        "createdAt" : "2017-06-09T19:42:11Z",
        "updatedAt" : "2017-06-09T20:39:58Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "23f1ddf0bf8f65003ac9d0ba5fa32b49a36ceee1",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +5281,5285 @@    /* @internal */\n    export function isDeclaration(node: Node): node is NamedDeclaration {\n        if (node.kind === SyntaxKind.TypeParameter) {\n            return node.parent.kind !== SyntaxKind.JSDocTemplateTag || isInJavaScriptFile(node);\n        }"
  },
  {
    "id" : "fbd6f313-3189-47cb-a801-f704cb77774d",
    "prId" : 16385,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16385#pullrequestreview-57047867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed29115a-66b0-41ae-8a7d-866ab0fc08fc",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "What's special about jsx?  Does it apply to tsx as well?",
        "createdAt" : "2017-08-17T18:22:37Z",
        "updatedAt" : "2017-08-18T03:07:02Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "60583fc9-b1b4-4aac-bb5f-14f5eecc9d3e",
        "parentId" : "ed29115a-66b0-41ae-8a7d-866ab0fc08fc",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "`JsxText` nodes are children of `JsxElement`s that are not `JsxElements` themselves or curly-brace-delimited assignment expressions. In the following example, the underlined is `JsxText`:\r\n```tsx\r\n<div>Click me!<h1/></div>\r\n     ~~~~~~~~~\r\n```\r\n\r\nWe essentially treat them like string literals, though differences in the way they are delimited mean that `getLeadingCommentRanges` cannot handle them correctly without some information from the parser, which `getLeadingCommentRanges` has been designed to avoid.",
        "createdAt" : "2017-08-17T19:42:48Z",
        "updatedAt" : "2017-08-18T03:07:02Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "60a20af4-6480-4f1c-b65a-9244e4765330",
        "parentId" : "ed29115a-66b0-41ae-8a7d-866ab0fc08fc",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "And that covers tsx as well?",
        "createdAt" : "2017-08-17T20:08:39Z",
        "updatedAt" : "2017-08-18T03:07:02Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "620fff2e-464d-4585-85a4-03925f5f9d09",
        "parentId" : "ed29115a-66b0-41ae-8a7d-866ab0fc08fc",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "Yes.",
        "createdAt" : "2017-08-17T20:36:40Z",
        "updatedAt" : "2017-08-18T03:07:02Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4e969a210325190097c963cc3e4023682125c4a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +648,652 @@\n    export function getLeadingCommentRangesOfNode(node: Node, sourceFileOfNode: SourceFile) {\n        return node.kind !== SyntaxKind.JsxText ? getLeadingCommentRanges(sourceFileOfNode.text, node.pos) : undefined;\n    }\n"
  },
  {
    "id" : "425db224-2ca9-4510-9f5b-abdd56f6bf47",
    "prId" : 16226,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16226#pullrequestreview-41880578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c623e2b-2e69-4bf7-aac6-af615426b4d1",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This isn't exactly identical to before since we now check for `SyntaxKind.JSDocComment` instead of `SyntaxKind.JSDocParameterTag`. I think it makes more sense this way though, since the cast `doc as JSDoc` isn't valid if all we know is that it's not an `@param` tag. @sandersn",
        "createdAt" : "2017-06-02T20:44:12Z",
        "updatedAt" : "2017-06-05T20:37:55Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "3c821e77-0727-4314-b858-0b9d1513c1ba",
        "parentId" : "5c623e2b-2e69-4bf7-aac6-af615426b4d1",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "If the tests pass then this is a good change. I tried writing it with `flatMap` originally but other parts of the implementation didn't work, and I forgot to change it back afterward.\r\n\r\nI still think it's weird that the return type of `mapfn` is `U | U[]` though.",
        "createdAt" : "2017-06-02T20:49:04Z",
        "updatedAt" : "2017-06-05T20:37:55Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "083079ee1509826ec75921f9dc78340aba214840",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1435,1439 @@\n    function getJSDocTags(node: Node, kind: SyntaxKind): JSDocTag[] {\n        return flatMap(getJSDocs(node), doc =>\n            doc.kind === SyntaxKind.JSDocComment\n                ? filter((doc as JSDoc).tags, tag => tag.kind === kind)"
  },
  {
    "id" : "7a3b38e7-300f-4cbf-acb4-9467087aa393",
    "prId" : 15507,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15507#pullrequestreview-37686707",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5653fc9c-5098-457b-9edd-19f3360e23d1",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Did you intend for `levenshtein` to be in the public TypeScript API? This file has two top-level `ts` namespaces, the first marked with `/* @internal */` and the second without the marker. This code is in the second namespace currently.",
        "createdAt" : "2017-05-11T20:12:46Z",
        "updatedAt" : "2017-05-11T20:12:46Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "370b5618a0acc7a7f1e308ea33098fb8622b7b6c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4643,4647 @@    }\n\n    export function levenshtein(s1: string, s2: string): number {\n        let previous: number[] = new Array(s2.length + 1);\n        let current: number[] = new Array(s2.length + 1);"
  },
  {
    "id" : "c223c996-d099-423a-86d0-e27710833fc1",
    "prId" : 15037,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15037#pullrequestreview-32478831",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39f6b757-dc0a-43d9-9f42-80ac5b3464bc",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Move comment above line",
        "createdAt" : "2017-04-12T20:01:43Z",
        "updatedAt" : "2017-04-12T20:01:46Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "04c71f097136493a2bc42b6e7fabcf69c0e25e24",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +4209,4213 @@                return \"lib.es2016.full.d.ts\";\n            case ScriptTarget.ES2015:\n                return \"lib.es6.d.ts\";  // We don't use lib.es2015.full.d.ts due to breaking change.\n            default:\n                return \"lib.d.ts\";"
  },
  {
    "id" : "79132705-0284-4dd5-b6a9-babc853199ec",
    "prId" : 14996,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14996#pullrequestreview-30928790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "897bdf26-4955-4d43-8806-26c5f3e61585",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Would it be better to just rename property in CallExpression? Also would this change should be applied to `newExpression` as well?\r\n\r\n",
        "createdAt" : "2017-04-04T18:17:24Z",
        "updatedAt" : "2017-04-04T20:51:11Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "61601d8e-e551-4019-b374-242664b9b8d8",
        "parentId" : "897bdf26-4955-4d43-8806-26c5f3e61585",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "That would be a breaking change to API consumers.",
        "createdAt" : "2017-04-04T23:36:27Z",
        "updatedAt" : "2017-04-04T23:36:27Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa70a182fe6ed169500d4d2ac4550a960f16c21e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1412,1416 @@            return false;\n        }\n        const { expression, arguments: args } = callExpression as CallExpression;\n\n        if (expression.kind !== SyntaxKind.Identifier || (expression as Identifier).text !== \"require\") {"
  },
  {
    "id" : "6c18030f-b2bf-41f0-898d-7580cd1e4e18",
    "prId" : 14709,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14709#pullrequestreview-29003990",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77132f6d-d4da-4946-870c-ec44c64775f0",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Keep in mind `this` and `null` can also be expressions. I would check to be sure that `isTypeNode` (which calls `isTypeNodeKind`) isn't used to skip visiting a TypeNode that could also be an expression.",
        "createdAt" : "2017-03-18T00:50:01Z",
        "updatedAt" : "2017-03-27T19:42:00Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "e850ddcd-f59c-4dcc-aa67-7a7026e58cdc",
        "parentId" : "77132f6d-d4da-4946-870c-ec44c64775f0",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "resolved offline: we decided that conflating `this` as a type node and expression isn't a problem for now because it has no children and we would only rely on the distinction for now when aggregating modifier flags from children.\r\n\r\nWe may want to introduce a distinction as we have with `StringLiteral` and `LiteralType` in the future.",
        "createdAt" : "2017-03-24T20:33:01Z",
        "updatedAt" : "2017-03-27T19:42:00Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "4329b4524eb4b215752fc2a81d1676d8d4830aea",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +3722,3726 @@            || kind === SyntaxKind.StringKeyword\n            || kind === SyntaxKind.SymbolKeyword\n            || kind === SyntaxKind.ThisKeyword\n            || kind === SyntaxKind.VoidKeyword\n            || kind === SyntaxKind.UndefinedKeyword"
  },
  {
    "id" : "6fc0d24f-e821-4ca2-adaf-e4c2bd42b307",
    "prId" : 13648,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/13648#pullrequestreview-21147952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d4c03d5-6f3f-451c-8aa2-38f1f73e01ff",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "don't need this extra whitespace",
        "createdAt" : "2017-01-27T00:29:54Z",
        "updatedAt" : "2017-02-14T05:04:43Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "3b850488-dd31-4299-93b3-67d28516cb8c",
        "parentId" : "6d4c03d5-6f3f-451c-8aa2-38f1f73e01ff",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "nope",
        "createdAt" : "2017-02-09T23:30:55Z",
        "updatedAt" : "2017-02-14T05:04:43Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "db0e3762e9f86c4d5cfe91d016766fbf09103be1",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1458,1462 @@        }\n\n\n        return SpecialPropertyAssignmentKind.None;\n    }"
  },
  {
    "id" : "96f1772a-7bbd-4da6-9009-7b035789cd1e",
    "prId" : 13648,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/13648#pullrequestreview-21147890",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dab3bc3-9b13-4fd3-bbb3-626121a515dd",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Comment is not updated on line 1402",
        "createdAt" : "2017-02-04T00:38:30Z",
        "updatedAt" : "2017-02-14T05:04:43Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "550edb31-70a2-430a-96c5-96dbd24dca53",
        "parentId" : "1dab3bc3-9b13-4fd3-bbb3-626121a515dd",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "fixed.",
        "createdAt" : "2017-02-09T23:30:30Z",
        "updatedAt" : "2017-02-14T05:04:43Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "db0e3762e9f86c4d5cfe91d016766fbf09103be1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1403,1407 @@     * This function does not test if the node is in a JavaScript file or not.\n     */\n    export function isDeclarationOfFunctionOrClassExpression(s: Symbol) {\n        if (s.valueDeclaration && s.valueDeclaration.kind === SyntaxKind.VariableDeclaration) {\n            const declaration = s.valueDeclaration as VariableDeclaration;"
  },
  {
    "id" : "c86ade5d-e958-4bd4-a0b0-c27d20032999",
    "prId" : 12783,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12783#pullrequestreview-14069153",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7038c4ca-318a-45fe-b3dd-f0b385d7c8e6",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "You only use this function once - do we anticipate using it again?",
        "createdAt" : "2016-12-20T19:15:21Z",
        "updatedAt" : "2016-12-28T21:42:04Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "9a86d7c0-5de0-426d-ba6e-c44d7569e67c",
        "parentId" : "7038c4ca-318a-45fe-b3dd-f0b385d7c8e6",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Yes, I also am using this in the asyncGenerators branch",
        "createdAt" : "2016-12-21T23:13:11Z",
        "updatedAt" : "2016-12-28T21:42:04Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "40980589074026c2a890a13267373ee96b11d0a0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +915,919 @@    }\n\n    export function unwrapInnermostStatmentOfLabel(node: LabeledStatement, beforeUnwrapLabelCallback?: (node: LabeledStatement) => void) {\n        while (true) {\n            if (beforeUnwrapLabelCallback) {"
  },
  {
    "id" : "905d3d43-8e77-4a14-9919-4cef1ad378b3",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-43602010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9ef6c9b-3528-4c2b-8289-5b06554bd47a",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Why was this moved here? All of the other `emitNode` related functions are still in factory, including the corresponding `setEmitFlags` function.",
        "createdAt" : "2017-06-13T01:31:15Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +313,317 @@     * Gets flags that control emit behavior of a node.\n     */\n    export function getEmitFlags(node: Node): EmitFlags | undefined {\n        const emitNode = node.emitNode;\n        return emitNode && emitNode.flags;"
  },
  {
    "id" : "4006443c-0dcf-47c5-825f-23cb68b42b4f",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-43602010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cc45914-b82d-4aaf-96f1-136aa95fea94",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Why was this moved? All of the other related `skip` functions are still in _factory.ts_.",
        "createdAt" : "2017-06-13T01:32:12Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +4228,4232 @@    }\n\n    export function skipPartiallyEmittedExpressions(node: Expression): Expression;\n    export function skipPartiallyEmittedExpressions(node: Node): Node;\n    export function skipPartiallyEmittedExpressions(node: Node) {"
  },
  {
    "id" : "3f49fe1a-9e94-4328-b935-d948a4cd3e1a",
    "prId" : 12335,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12335#pullrequestreview-9327127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e2fbc6b-261d-4165-9cc1-172ed3b07f45",
        "parentId" : null,
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "When does the cache get cleared?\n",
        "createdAt" : "2016-11-18T21:53:36Z",
        "updatedAt" : "2016-11-18T23:49:11Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      },
      {
        "id" : "576ad4aa-b4c6-4763-9d94-d281ed31baf3",
        "parentId" : "5e2fbc6b-261d-4165-9cc1-172ed3b07f45",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Never. Once it's created, it should not be changed. But it's only created if it's requested.\n",
        "createdAt" : "2016-11-18T23:32:44Z",
        "updatedAt" : "2016-11-18T23:49:11Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c5429d3b704e557c5be8573a6faba4da30f10a2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1445,1449 @@   function getJSDocs(node: Node): (JSDoc | JSDocTag)[] {\n        let cache: (JSDoc | JSDocTag)[] = node.jsDocCache;\n        if (!cache) {\n            getJSDocsWorker(node);\n            node.jsDocCache = cache;"
  },
  {
    "id" : "01264f1d-78f1-46a7-b116-1000723a4c07",
    "prId" : 10798,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52996de8-087b-4fea-8703-0f30e13ddcc3",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "It's kind of weird that a binding element uses an omitted _expression_\n",
        "createdAt" : "2016-09-09T00:55:57Z",
        "updatedAt" : "2016-09-09T00:55:57Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c048f7cd6f188d7995fed86a242dbd1a7d91d17a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +3705,3709 @@        const kind = node.kind;\n        return kind === SyntaxKind.BindingElement\n            || kind === SyntaxKind.OmittedExpression;\n    }\n"
  },
  {
    "id" : "32d02f42-22e3-445f-90d9-1944cdcbdc5c",
    "prId" : 10514,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab902d52-035a-43d7-8303-a357e5161030",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "This (and similar changes around) don't not seem to be related to the original issue\n",
        "createdAt" : "2016-08-24T04:03:23Z",
        "updatedAt" : "2016-08-24T17:33:11Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "d5003b9a-cff8-418f-b2ac-1cfb219d2bb8",
        "parentId" : "ab902d52-035a-43d7-8303-a357e5161030",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "It is actually, because I just found out otherwise the emitter would not write the triple slashes in the declaration file. \n",
        "createdAt" : "2016-08-24T04:17:55Z",
        "updatedAt" : "2016-08-24T17:33:11Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      },
      {
        "id" : "bce8921e-94c4-41fb-bcd3-d4152274e34c",
        "parentId" : "ab902d52-035a-43d7-8303-a357e5161030",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "nit: can you make parameter non-optional?\n",
        "createdAt" : "2016-08-24T05:27:57Z",
        "updatedAt" : "2016-08-24T17:33:11Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "7eca64b52fc06b324638c0a29bfb85ded04b841f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2273,2277 @@                declarationFilePath\n            };\n            action(emitFileNames, [sourceFile], /*isBundledEmit*/false, emitOnlyDtsFiles);\n        }\n"
  },
  {
    "id" : "7e3514ff-e6ca-487a-804e-8ab0f25bee71",
    "prId" : 10013,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcfe4327-8796-42d9-85a4-0aa6c81ce724",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This would be a one-liner with recursion, but I guess we're worried about performance? Note that recursion should be shallow (assuming `a.b.c.d.e.f.g` is rare in real code).\n",
        "createdAt" : "2016-07-28T20:12:34Z",
        "updatedAt" : "2016-08-11T16:44:16Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "e7dd03a3-d78d-4caf-b099-05044ee796b9",
        "parentId" : "bcfe4327-8796-42d9-85a4-0aa6c81ce724",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Again, a better question for @vladima since he knows more about performance.\n\n---\n\nIn reply to: [72693482](https://github.com/Microsoft/TypeScript/pull/10013#discussion_r72693482) [](ancestors = 72693482)\n",
        "createdAt" : "2016-08-02T16:36:13Z",
        "updatedAt" : "2016-08-11T16:44:16Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b9bd820706fb3a70b404cafabb9e8203bc0b760",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2686,2690 @@    }\n\n    export function isEntityNameExpression(node: Expression): node is EntityNameExpression {\n        return node.kind === SyntaxKind.Identifier ||\n            node.kind === SyntaxKind.PropertyAccessExpression && isEntityNameExpression((<PropertyAccessExpression>node).expression);"
  },
  {
    "id" : "31e85ce5-1d34-4849-8bf7-27831111ccf9",
    "prId" : 10013,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "813e7a6e-18f9-4a3c-827b-f6ad9c7f63a3",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "> exportAssignmentIsAlias [](start = 20, length = 23)\n\nit seems weird that there are 3 functions whose bodies are all just `isEntityNameExpression(node.expression)`. If you express them as a single function, does any common name look at all good? #Closed\n",
        "createdAt" : "2016-08-02T16:46:21Z",
        "updatedAt" : "2016-08-11T16:44:16Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b9bd820706fb3a70b404cafabb9e8203bc0b760",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1707,1711 @@    }\n\n    export function exportAssignmentIsAlias(node: ExportAssignment): boolean {\n        return isEntityNameExpression(node.expression);\n    }"
  },
  {
    "id" : "47954dce-6b47-4c55-9219-87cb30dc78e3",
    "prId" : 8929,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77822370-f500-4770-b930-e0df1cad1019",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "how is this function used? it doesn't seems to be use in this change.\n",
        "createdAt" : "2016-06-02T19:35:21Z",
        "updatedAt" : "2016-06-03T18:50:41Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "34f8904a-d238-4541-a570-69d5782d02c3",
        "parentId" : "77822370-f500-4770-b930-e0df1cad1019",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "It's used for emitting declaration files: https://github.com/Microsoft/TypeScript/blob/transforms-extractFromPrinter/src/compiler/printer.ts#L197 \n",
        "createdAt" : "2016-06-02T20:03:21Z",
        "updatedAt" : "2016-06-03T18:50:41Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef436a189fa01af7cea2d0deb3c8a3a3adc727a4",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +1966,1970 @@    }\n\n    export function getOriginalSourceFiles(sourceFiles: SourceFile[]) {\n        const originalSourceFiles: SourceFile[] = [];\n        for (const sourceFile of sourceFiles) {"
  },
  {
    "id" : "1941f43b-e931-47e9-8e83-84ce392d7ed6",
    "prId" : 8598,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53e95247-f680-42f2-b523-ab5004805c07",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "why don't just call `isSourceTreeNode(node)` ?\n",
        "createdAt" : "2016-05-16T21:19:15Z",
        "updatedAt" : "2016-05-19T22:39:52Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "d09e3131-2a3d-4332-94e6-951ae372032a",
        "parentId" : "53e95247-f680-42f2-b523-ab5004805c07",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "No need to check `original`, avoids an inline decision for `isSourceTreeNode` that could cause later deoptimizations.\n",
        "createdAt" : "2016-05-16T22:01:27Z",
        "updatedAt" : "2016-05-19T22:39:52Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "150cecbaf37b959ead6ac1aa3b628d2385e02418",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1839,1843 @@        node = getOriginalNode(node);\n\n        if (node && (node.parent !== undefined || node.kind === SyntaxKind.SourceFile)) {\n            return node;\n        }"
  },
  {
    "id" : "47c01b28-ac6d-45c8-aff6-2bbffa9183f7",
    "prId" : 8560,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31432c3d-7dc6-4835-a424-986536a2e53e",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "would it be faster to do something like `object.getownpropertynames(map1).length === object.getownpropertynames(map2).length) && containsAll(map1, map2))`?\n",
        "createdAt" : "2016-05-11T21:01:18Z",
        "updatedAt" : "2016-05-11T21:01:27Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "772022f0-f222-47cc-a2f4-d07395bd9c90",
        "parentId" : "31432c3d-7dc6-4835-a424-986536a2e53e",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "it might but on our scenarios (maps with size < 10) I'll be more concerned about the cost of extra array allocations.\n",
        "createdAt" : "2016-05-11T21:24:55Z",
        "updatedAt" : "2016-05-11T21:24:55Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e94c761905f51fcf1d6c23e14ad500835483092",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +89,93 @@            return map1 === map2;\n        }\n        return containsAll(map1, map2) && containsAll(map2, map1);\n    }\n"
  },
  {
    "id" : "824b57e4-b7ba-49ce-89ea-7b1ddcc23812",
    "prId" : 8010,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51b12d7f-e770-4197-bf90-b358fe96ef86",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Why was the type-guardiness of this function removed?\n",
        "createdAt" : "2016-04-11T17:24:29Z",
        "updatedAt" : "2016-04-22T13:53:41Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "d2c14d85-f370-40f9-97b4-e935d56465d1",
        "parentId" : "51b12d7f-e770-4197-bf90-b358fe96ef86",
        "authorId" : "b2e5e981-f1bc-47a6-9499-789a8e6f8b59",
        "body" : "Probably because this function can also return `true` if the node is some identifier, but not used as a declaration. With the control flow checks, the code after an `if` with a return will be considered to be the else block, which might have caused some issues.\n",
        "createdAt" : "2016-04-11T19:42:22Z",
        "updatedAt" : "2016-04-22T13:53:41Z",
        "lastEditedBy" : "b2e5e981-f1bc-47a6-9499-789a8e6f8b59",
        "tags" : [
        ]
      },
      {
        "id" : "9368da16-cc7f-4ac9-977a-261dabd227c7",
        "parentId" : "51b12d7f-e770-4197-bf90-b358fe96ef86",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "If that was the case, then wouldn't the name of the function be misleading?\n",
        "createdAt" : "2016-04-11T20:12:35Z",
        "updatedAt" : "2016-04-22T13:53:41Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "eb54a243-dfb0-4f02-8389-9a1205eb3231",
        "parentId" : "51b12d7f-e770-4197-bf90-b358fe96ef86",
        "authorId" : "b2e5e981-f1bc-47a6-9499-789a8e6f8b59",
        "body" : "Not in my opinion, it checks whether a node is a declaration name, but not every identifier is a declaration name. So the type annotation was wrong, not the name.\n",
        "createdAt" : "2016-04-11T20:15:11Z",
        "updatedAt" : "2016-04-22T13:53:41Z",
        "lastEditedBy" : "b2e5e981-f1bc-47a6-9499-789a8e6f8b59",
        "tags" : [
        ]
      },
      {
        "id" : "accf6ff5-3b38-4e72-a191-b006fc0085e7",
        "parentId" : "51b12d7f-e770-4197-bf90-b358fe96ef86",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Seems fair.\n",
        "createdAt" : "2016-04-11T20:16:06Z",
        "updatedAt" : "2016-04-22T13:53:41Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "40ed603b-f550-4d09-8dd7-e77cc87767f0",
        "parentId" : "51b12d7f-e770-4197-bf90-b358fe96ef86",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Yes, @ivogabe is exactly right about why I removed the type predicate annotation.\n",
        "createdAt" : "2016-04-11T20:47:52Z",
        "updatedAt" : "2016-04-22T13:53:41Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dee5addf3b129d9241e7dd57e895cea8ec7dfac",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +1539,1543 @@\n    // True if the given identifier, string literal, or number literal is the name of a declaration node\n    export function isDeclarationName(name: Node): boolean {\n        if (name.kind !== SyntaxKind.Identifier && name.kind !== SyntaxKind.StringLiteral && name.kind !== SyntaxKind.NumericLiteral) {\n            return false;"
  },
  {
    "id" : "e112e428-d496-4570-b3d8-031486e719f7",
    "prId" : 7845,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ed7d925-356f-434b-927c-478abe697cbf",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Does this fix the problem we saw on https://github.com/Microsoft/TypeScript/pull/7814/files#r58450947?\n",
        "createdAt" : "2016-04-06T08:13:30Z",
        "updatedAt" : "2016-04-06T08:13:30Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "311598f2-4e95-4804-a18b-b0aade69a22d",
        "parentId" : "7ed7d925-356f-434b-927c-478abe697cbf",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "No, it does not.\n",
        "createdAt" : "2016-04-06T19:01:45Z",
        "updatedAt" : "2016-04-06T19:01:45Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8988ea849bf8c031323679fb1a7546bc79551c99",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1638,1642 @@                return getPropertyNameForKnownSymbolName(rightHandSideName);\n            }\n            if (isStringOrNumericLiteral(nameExpression.kind)) {\n                return (<LiteralExpression>nameExpression).text;\n            }"
  },
  {
    "id" : "222517a1-79dc-4cfa-91b4-3d321403bec8",
    "prId" : 7713,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "204f7d7c-e786-459b-8a20-1864b2d361d3",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Nit: consider swapping `sourceFile` and `line`\n",
        "createdAt" : "2016-04-04T07:16:28Z",
        "updatedAt" : "2016-04-04T18:16:27Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb7ece54bfaec262fec946f23928857c6c4b4086",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +180,184 @@    }\n\n    export function getEndLinePosition(line: number, sourceFile: SourceFile): number {\n        Debug.assert(line >= 0);\n        const lineStarts = getLineStarts(sourceFile);"
  },
  {
    "id" : "8e29c100-f5f3-4f78-b690-73be9707b2e6",
    "prId" : 7170,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8c78a76-fbe8-4d4f-a260-13504b0a167e",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "since --declarationDir is ignored here, it should be an error to specify --out/--outFile + --declarationDir\n",
        "createdAt" : "2016-02-23T01:16:24Z",
        "updatedAt" : "2016-02-23T22:46:29Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "87adb082-1285-4f3e-b568-d515007cb5a7",
        "parentId" : "e8c78a76-fbe8-4d4f-a260-13504b0a167e",
        "authorId" : "a87d80b7-41de-4730-8937-7bebba1fc058",
        "body" : "@DanielRosenwasser suggests that the `declarationDir` option be respected when specified alongside `out`/`outFile`. I think this means I should simply put the bundled declaration file in `declarationDir`.\n",
        "createdAt" : "2016-02-23T01:22:52Z",
        "updatedAt" : "2016-02-23T22:46:29Z",
        "lastEditedBy" : "a87d80b7-41de-4730-8937-7bebba1fc058",
        "tags" : [
        ]
      },
      {
        "id" : "c7e93f48-4c15-44a3-93b2-7ac4a21eac2c",
        "parentId" : "e8c78a76-fbe8-4d4f-a260-13504b0a167e",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i do not think this is correct. `declarationDir` should behave like `outDir`, we can add in the future a `declarationOutFile` to behave like `outFile`\n",
        "createdAt" : "2016-02-23T18:03:33Z",
        "updatedAt" : "2016-02-23T22:46:29Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "f251768f32a9d4f5b8017628a731b0537106e211",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +2094,2098 @@                    jsFilePath,\n                    sourceMapFilePath: getSourceMapFilePath(jsFilePath, options),\n                    declarationFilePath: options.declaration ? removeFileExtension(jsFilePath) + \".d.ts\" : undefined\n                };\n                action(emitFileNames, bundledSources, /*isBundledEmit*/true);"
  },
  {
    "id" : "2f95df37-9e4c-4b83-88a9-aac5f880ac33",
    "prId" : 6212,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acbf4567-e72d-41ab-9b64-86c1d5beacd3",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "This is a meaningful change - these functions no longer return the indent level. Does this represent a shortcoming in the rule, and should they be reverted?\n",
        "createdAt" : "2015-12-23T01:36:49Z",
        "updatedAt" : "2016-01-04T17:05:47Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "6f856aa5-fe4c-4255-85c9-f6e8c2d01848",
        "parentId" : "acbf4567-e72d-41ab-9b64-86c1d5beacd3",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "No, I think the rule itself is effectively that you have to separate the mutation of your variable from reading its (potentially new) value. If people find this too restrictive, we can always change it back.\n",
        "createdAt" : "2015-12-23T03:03:52Z",
        "updatedAt" : "2016-01-04T17:05:47Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "653ab0d6-f95a-4a7d-aae2-ed542fab719e",
        "parentId" : "acbf4567-e72d-41ab-9b64-86c1d5beacd3",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "If that's the case, should these functions be rewritten as `increaseIndent: () => { indent++; return indent; }` to preserve the old behavior? Or does it not matter?\n",
        "createdAt" : "2016-01-03T12:49:19Z",
        "updatedAt" : "2016-01-04T17:05:47Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "73062f0b-5227-4be7-ac74-02884f83842d",
        "parentId" : "acbf4567-e72d-41ab-9b64-86c1d5beacd3",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "It doesn't matter -- `EmitTextWriter` says these functions are void, so callers cannot have used the return value.\n\n(Yes, we are saner than we look!)\n",
        "createdAt" : "2016-01-04T16:31:03Z",
        "updatedAt" : "2016-01-04T17:05:47Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "b01de71d52355d4590433881ac4b7d50de334cfc",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1885,1889 @@            writeLiteral,\n            writeLine,\n            increaseIndent: () => { indent++; },\n            decreaseIndent: () => { indent--; },\n            getIndent: () => indent,"
  },
  {
    "id" : "55e964e1-b03a-4716-89de-9264290924cd",
    "prId" : 5780,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53d186ee-53e3-4a5d-9a2e-65d1fd8f5286",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "why not `map(filter(value, v => v), stringifyValue).join(',')` ?\n",
        "createdAt" : "2015-11-25T18:11:40Z",
        "updatedAt" : "2015-11-25T22:35:51Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "87a02d2d-f9ac-47e2-838f-15d51c813a6a",
        "parentId" : "53d186ee-53e3-4a5d-9a2e-65d1fd8f5286",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Lately I've been very allocation-averse and that approach creates two temporary arrays.\n",
        "createdAt" : "2015-11-25T19:23:36Z",
        "updatedAt" : "2015-11-25T22:35:51Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "04d53c1cfed6a01c8f8b84ce95f930c9585bd1a5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2448,2452 @@\n    function stringifyArray(value: any) {\n        return `[${reduceLeft(value, stringifyElement, \"\")}]`;\n    }\n"
  },
  {
    "id" : "09ba5195-a9f7-4551-8ec3-cb696f9a2e15",
    "prId" : 5726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ad88d82-71ee-44d3-a9c4-8039fd3238f7",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "kind is copied again in the for loop, right? I just want to make sure I'm reading the code correctly.\n",
        "createdAt" : "2015-11-20T16:53:40Z",
        "updatedAt" : "2015-11-20T18:30:55Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "cf09177b-1ee0-4365-9085-bc9c86e10ccf",
        "parentId" : "7ad88d82-71ee-44d3-a9c4-8039fd3238f7",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Good catch. I originally wrote the `cloneNode` function before @vladima modified the Node constructor, when `kind` was set on the prototype. I can probably drop `isExcludedPropertyForClone` in favor of `clone.hasOwnProperty(key)`.\n",
        "createdAt" : "2015-11-20T18:14:29Z",
        "updatedAt" : "2015-11-20T18:30:55Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "1588497f-cad8-4bcc-ac47-95a01b9a0eed",
        "parentId" : "7ad88d82-71ee-44d3-a9c4-8039fd3238f7",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "This will copy over `flags` and `parent` now, won't it? Which is bad unless they are provided by the caller.\n",
        "createdAt" : "2015-11-20T18:17:53Z",
        "updatedAt" : "2015-11-20T18:30:55Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "608083a6-b75e-4e92-babe-ca3e5be2fdf4",
        "parentId" : "7ad88d82-71ee-44d3-a9c4-8039fd3238f7",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "No, flags and parent are set in the Node constructor.  See line 808 of core.ts:\n\n``` ts\n    function Node(kind: SyntaxKind, pos: number, end: number) {\n        this.kind = kind;\n        this.pos = pos;\n        this.end = end;\n        this.flags = NodeFlags.None;\n        this.parent = undefined;\n    }\n```\n\nAnd line 191 of services.ts:\n\n``` ts\n        constructor(kind: SyntaxKind, pos: number, end: number) {\n            this.kind = kind;\n            this.pos = pos;\n            this.end = end;\n            this.flags = NodeFlags.None;\n            this.parent = undefined;\n        }\n```\n",
        "createdAt" : "2015-11-20T18:28:09Z",
        "updatedAt" : "2015-11-20T18:30:55Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "d2ef0d4c-7810-4096-915e-bf487ba21d86",
        "parentId" : "7ad88d82-71ee-44d3-a9c4-8039fd3238f7",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "All right, sounds good.\n",
        "createdAt" : "2015-11-20T18:28:55Z",
        "updatedAt" : "2015-11-20T18:30:55Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "4edf330217375c90161b83fda8f2c53f350ff7fc",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1595,1599 @@        // properties (to skip members already defined on the shared prototype).\n        const clone = location !== undefined\n            ? <T>createNode(node.kind, location.pos, location.end)\n            : <T>createSynthesizedNode(node.kind);\n"
  },
  {
    "id" : "0d334eed-870f-4e9b-bf66-ac593f1ae20e",
    "prId" : 5535,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09f8459c-f887-43ae-bfe3-61af38f8646f",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i find the name a bit vague.\n",
        "createdAt" : "2015-11-10T21:07:11Z",
        "updatedAt" : "2015-11-10T21:07:11Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "72723e93bebe87c657ebe1c69f771b00b3d4f780",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1443,1447 @@    }\n\n    export function isDynamicName(name: DeclarationName): boolean {\n        return name.kind === SyntaxKind.ComputedPropertyName &&\n            !isStringOrNumericLiteral((<ComputedPropertyName>name).expression.kind) &&"
  },
  {
    "id" : "511b7107-7cae-481e-95b4-ae913707b712",
    "prId" : 5472,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "171a152d-ec1b-4b68-b143-8b2e14dce639",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "A quick JSDoc comment would be helpful here.\n",
        "createdAt" : "2015-10-30T19:51:53Z",
        "updatedAt" : "2015-11-02T16:08:35Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1703972dd2a3980af42c1d4423ad02b8498b92f9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1909,1913 @@     * the next statement by space.\n     */\n    export function emitDetachedComments(currentSourceFile: SourceFile, writer: EmitTextWriter,\n        writeComment: (currentSourceFile: SourceFile, writer: EmitTextWriter, comment: CommentRange, newLine: string) => void,\n        node: TextRange, newLine: string, removeComments: boolean) {"
  },
  {
    "id" : "1d3beed4-6c5d-46b6-bf0b-defa0d1d1a86",
    "prId" : 5471,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9a2e058-25f6-404f-abdc-2f35d819e083",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "I think this function needs a better name. To me `forEach` implies that this function will \n- have a callback parameter and this callback will accept one file as an argument\n- this callback will be invoked for every file in the list (probably module some filtering).\n  For this function the only part that is true - it indeed accepts callback. \n",
        "createdAt" : "2015-11-16T22:41:45Z",
        "updatedAt" : "2015-11-18T19:27:06Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "e208eccf-73a7-4e7c-abe5-87d335ee07c1",
        "parentId" : "a9a2e058-25f6-404f-abdc-2f35d819e083",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I like the name because even if it doesn't follow the forEach type of callback the name explicitly suggests that the callback would be called for each emit file. If you have suggestion on name I can update accordingly.\n",
        "createdAt" : "2015-11-18T18:31:55Z",
        "updatedAt" : "2015-11-18T19:27:06Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "a19307d533d646d3366f7d4a512718460e065d52",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1904,1908 @@    }\n\n    export function forEachExpectedEmitFile(host: EmitHost,\n        action: (emitFileNames: EmitFileNames, sourceFiles: SourceFile[], isBundledEmit: boolean) => void,\n        targetSourceFile?: SourceFile) {"
  },
  {
    "id" : "c52b5b7a-8c53-4539-a482-dcd932bfc545",
    "prId" : 5266,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd8bf275-6ec2-477f-ac10-d88a19541010",
        "parentId" : null,
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Seems a little odd that something named `isTsx` return true for a .jsx extension.\n",
        "createdAt" : "2015-10-22T01:23:28Z",
        "updatedAt" : "2015-11-09T22:48:42Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "1261a7ac-4ab2-4a2a-9fa2-41f0cfcaa4ff",
        "parentId" : "fd8bf275-6ec2-477f-ac10-d88a19541010",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Open to suggestions on the name here. `usesJsxSyntax` ? `allowJsxExpressions` ?\n",
        "createdAt" : "2015-10-22T19:19:57Z",
        "updatedAt" : "2015-11-09T22:48:42Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "69ca1f2e1dd95889cfd0e5cd3b3f00daa71d894c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2270,2274 @@\n    export function allowsJsxExpressions(fileName: string) {\n        return fileExtensionIs(fileName, \".tsx\") || fileExtensionIs(fileName, \".jsx\");\n    }\n"
  },
  {
    "id" : "88263275-aed5-4d68-91ae-0769e68476c9",
    "prId" : 5127,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7a65a4f-3b1b-45c1-94c2-c9dda89de2c6",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "this is not true if both arrays are `null` / `undefined`. \nI would probably add extra parameter `sortBeforeComparison` to `arrayIsEqualTo` and sort input data inside instead of this new function - initial checks here are exactly the same with `arrayIsEqualTo` and the only difference is that inputs are sorted\n",
        "createdAt" : "2015-10-15T02:34:32Z",
        "updatedAt" : "2015-10-15T02:34:32Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcfc25eeb040390492716626757274c945ebd47f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2410,2414 @@    export function arrayStructurallyIsEqualTo<T>(array1: Array<T>, array2: Array<T>): boolean {\n        if (!array1 || !array2) {\n            return false;\n        }\n"
  },
  {
    "id" : "8549eb8b-6498-4ad2-b4fa-bb5e9b022729",
    "prId" : 4943,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a0a87b2-8d2b-4306-8f28-c9836a160468",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I think you want to check for if there is only one variable declaration, because otherwise what does this mean?\n\n```\n/**\n * @param {string} name\n * @returns {string}\n */\nvar f = function (name) { return name }, g = function(x,y,z) { return x + y + z; };\n```\n",
        "createdAt" : "2015-09-23T22:13:11Z",
        "updatedAt" : "2015-09-23T23:08:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "ad195dbd-6f74-44e0-b641-19c505c67e34",
        "parentId" : "4a0a87b2-8d2b-4306-8f28-c9836a160468",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "I've considered this as an option and decided not to do this since in JavaScript our goal is to suggest not restrict and it does not really buy us anything. Completion list in JavaScript are populated with\n- high confidence items (information that we fish out from type information)\n- low confidence items (all identifiers that exist in source files).\n\nIn your example in completion list for `name` we'll have some items from the first group and tons of items from the second. For `x` we'll have no high confidence items and still tons of low confidence ones. If we add this restriction then we'll still see the same items in completion lists for both `name` and `x` except that now all of them will have low confidence.\n",
        "createdAt" : "2015-09-23T22:57:23Z",
        "updatedAt" : "2015-09-23T23:08:55Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "787cb470-eed6-4e85-8999-f4d8f59247c1",
        "parentId" : "4a0a87b2-8d2b-4306-8f28-c9836a160468",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Seems reasonable\n",
        "createdAt" : "2015-09-24T00:23:31Z",
        "updatedAt" : "2015-09-24T00:23:46Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d08117b7cd5bea73e80071dec41a736e902845b4",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +1164,1168 @@                node.parent.kind === SyntaxKind.VariableDeclaration && \n                (<VariableDeclaration>node.parent).initializer === node &&\n                node.parent.parent.parent.kind === SyntaxKind.VariableStatement\n                \n            const variableStatementNode = isInitializerOfVariableDeclarationInStatement ? node.parent.parent.parent : undefined;"
  },
  {
    "id" : "8aba0d43-2546-4b77-a411-849f0de50c4f",
    "prId" : 3601,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bbb5ee4-101e-4edc-8c31-b136ed6f8de2",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : ":+1: \n",
        "createdAt" : "2015-06-22T21:21:14Z",
        "updatedAt" : "2015-06-23T19:06:03Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "740fd9c908380147212ecd9a2d77b238e13c7172",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1068,1072 @@    }\n\n    export function isBindingPattern(node: Node): node is BindingPattern {\n        return !!node && (node.kind === SyntaxKind.ArrayBindingPattern || node.kind === SyntaxKind.ObjectBindingPattern);\n    }"
  },
  {
    "id" : "0fb7feec-5115-4337-b7b7-e626bb7b9ea1",
    "prId" : 3568,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0490f54-f7b4-4806-8390-597a520cf97c",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Can you make this `!!node` so this never returns `undefined`?\n",
        "createdAt" : "2015-06-19T04:07:27Z",
        "updatedAt" : "2015-06-24T00:06:57Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "ef5a13de-abf9-4d5c-bb70-e60756a83b26",
        "parentId" : "c0490f54-f7b4-4806-8390-597a520cf97c",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "There's no need to, `undefined` is just as good.\n",
        "createdAt" : "2015-06-20T13:25:53Z",
        "updatedAt" : "2015-06-24T00:06:57Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "55f195d445ede31aea7b83da435480bcf0d7c7e8",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +589,593 @@\n    export function isClassLike(node: Node): boolean {\n        return node && (node.kind === SyntaxKind.ClassDeclaration || node.kind === SyntaxKind.ClassExpression);\n    }\n"
  },
  {
    "id" : "371cdbf9-3c5d-4826-927c-c9fc654945e8",
    "prId" : 3568,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c06e4d2d-7373-4acd-9b19-7610dd134837",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "You can now make this return `node is ClassLikeDeclaration`\n",
        "createdAt" : "2015-06-19T04:07:52Z",
        "updatedAt" : "2015-06-24T00:06:57Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "55f195d445ede31aea7b83da435480bcf0d7c7e8",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +588,592 @@    }\n\n    export function isClassLike(node: Node): boolean {\n        return node && (node.kind === SyntaxKind.ClassDeclaration || node.kind === SyntaxKind.ClassExpression);\n    }"
  },
  {
    "id" : "23a8a616-7c77-498a-a192-a54168e2064c",
    "prId" : 3530,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1eadd85-dca6-4957-9014-b01b8e6049cd",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Can you keep the comparison directions consistent? It reads a bit easier.\n",
        "createdAt" : "2015-06-17T05:27:20Z",
        "updatedAt" : "2015-06-18T15:30:30Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "5d9009bf-2b8c-4c14-866c-c9db539d4cce",
        "parentId" : "b1eadd85-dca6-4957-9014-b01b8e6049cd",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "hrmm.  i could.  but that actually seems harder to read.  With the comparisons now what we're doing is always comparing the second span to the first span.  If i flip so that it's two <= comparisons, then we'll be first comparing the second span to the first, and then the first span to the second.  \n",
        "createdAt" : "2015-06-18T15:25:34Z",
        "updatedAt" : "2015-06-18T15:30:30Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "730e47e8-1550-47f1-9ce2-cc448cca58af",
        "parentId" : "b1eadd85-dca6-4957-9014-b01b8e6049cd",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I'm not sure I see the gain in nominal over relational consistency. Maybe just leave a comment like\n\n``` TypeScript\n// Covers\n// (1)\n//        s1-----------e1\n//              s2-----------e2\n//\n// (2)\n//              s1-----------e1\n//        s2-----------e2\n//\n// (3)\n//        s1-----------e1\n//            s2---e2\n//\n// (4)\n//            s1---e1\n//        s2-----------e2\n```\n\nor if you don't see huge utility in it, don't.\n\nAlso this might be better called \"overlaps with\" instead of \"intersects with\"\n",
        "createdAt" : "2015-06-18T17:49:29Z",
        "updatedAt" : "2015-06-18T17:49:29Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "151306f42374369f1e9bc94d63de2af63b5f1381",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2087,2091 @@        let end1 = start1 + length1;\n        let end2 = start2 + length2;\n        return start2 <= end1 && end2 >= start1;\n    }\n"
  },
  {
    "id" : "870a6711-e989-4f56-8beb-f905075d33ed",
    "prId" : 3530,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95e327cb-303b-4846-96d8-dd97e1482ea5",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "\"Overlaps\" has very different semantics from \"Intersects\" from the perspective of the Editor and how they use that terminology.  This is following the editor semantics for 'intersects', so i'd like to keep using that name.\n",
        "createdAt" : "2015-06-18T18:11:14Z",
        "updatedAt" : "2015-06-18T18:11:14Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "151306f42374369f1e9bc94d63de2af63b5f1381",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2088,2092 @@        let end2 = start2 + length2;\n        return start2 <= end1 && end2 >= start1;\n    }\n\n    export function textSpanIntersectsWithPosition(span: TextSpan, position: number) {"
  },
  {
    "id" : "0258abaa-cc52-4f3f-892e-8c981d2c5f33",
    "prId" : 3509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f61f6e1-8947-459c-bfd9-d56ebbfc6776",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "What does it mean to be an IdentifierName and why is it significant? I know what this function is doing in the context of this PR, but for any future reader it may not be clear.\n",
        "createdAt" : "2015-06-15T03:37:03Z",
        "updatedAt" : "2015-06-15T13:48:59Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "ac6dea44-846f-4cd1-88c5-498d51a5b86b",
        "parentId" : "0f61f6e1-8947-459c-bfd9-d56ebbfc6776",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "An IdentifierName is any identifier, including reserved words. It's part of the ES grammar and we use the term in many places in the compiler.\n",
        "createdAt" : "2015-06-15T05:05:31Z",
        "updatedAt" : "2015-06-15T13:48:59Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c20f6820b7a71b4c147a81e0a07d027dd7e8a668",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1178,1182 @@    }\n\n    // Return true if the given identifier is classified as an IdentifierName\n    export function isIdentifierName(node: Identifier): boolean {\n        let parent = node.parent;"
  },
  {
    "id" : "3fa3d15d-3d55-4057-bb77-b195bd3f2cba",
    "prId" : 3291,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5684246-2fae-48d4-b639-018606b19f8b",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Or just isClass. I'm getting a little tired of the \"like\" names\n",
        "createdAt" : "2015-05-28T17:41:28Z",
        "updatedAt" : "2015-05-28T17:41:28Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "9aab98419b5f8cb54cdcb781854292aa722ee08a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +469,473 @@    }\n\n    export function isClassLike(node: Node): boolean {\n        if (node) {\n            return node.kind === SyntaxKind.ClassDeclaration || node.kind === SyntaxKind.ClassExpression;"
  },
  {
    "id" : "ab4dec8a-af4f-479c-8dd2-a61ec0d0fe0d",
    "prId" : 3274,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8081721-538b-4d1a-b0f6-065cd77631b5",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Do you mean `typeof sys !== undefined`.\n",
        "createdAt" : "2015-05-27T03:27:42Z",
        "updatedAt" : "2015-06-03T01:04:50Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "a117f644-e0ec-4131-9f41-bfed96d8d6be",
        "parentId" : "b8081721-538b-4d1a-b0f6-065cd77631b5",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Maybe just have a `defaultNewLine` parameter. I don't mind either way.\n",
        "createdAt" : "2015-05-27T03:30:22Z",
        "updatedAt" : "2015-06-03T01:04:50Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "b74962a8-6c32-45f1-985e-c1fd5a9f4fca",
        "parentId" : "b8081721-538b-4d1a-b0f6-065cd77631b5",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I think sys is always defined now, it is just may have no value if you are in services.\n",
        "createdAt" : "2015-05-27T04:45:23Z",
        "updatedAt" : "2015-06-03T01:04:50Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "6902b050ca9cb94ba494d0900ad48a0780850ef4",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1785,1789 @@            return lineFeed;\n        }\n        else if (sys) {\n            return sys.newLine\n        }"
  },
  {
    "id" : "6b6bf2a2-0a5a-48f7-8552-44d50e85c01d",
    "prId" : 3048,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94f5381e-b763-462a-bc30-2804a1f97e7d",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "isDeclaredWithinParameter\n",
        "createdAt" : "2015-05-05T23:00:40Z",
        "updatedAt" : "2015-05-09T01:06:27Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b70276538be2a77308a695cf440af4bc395abee3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1148,1152 @@    }\n\n    export function isParameterDeclaration(node: VariableLikeDeclaration) {\n        let root = getRootDeclaration(node);\n        return root.kind === SyntaxKind.Parameter;"
  },
  {
    "id" : "df3aef90-5c44-403d-a6c6-f050b660ae2d",
    "prId" : 3031,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e7eb488-61d7-4513-b8b1-13e4224b9c0d",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I find it weird that this is not consistent with `forEachReturnStatement`\n",
        "createdAt" : "2015-05-15T00:14:03Z",
        "updatedAt" : "2015-05-30T00:38:01Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "c725ea36-65a0-4281-978e-bbaf54caf9d2",
        "parentId" : "5e7eb488-61d7-4513-b8b1-13e4224b9c0d",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "What part is inconsistent?\n",
        "createdAt" : "2015-05-15T06:44:57Z",
        "updatedAt" : "2015-05-30T00:38:01Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "f5aea6c6-10f4-4930-8653-d8efd672c5fc",
        "parentId" : "5e7eb488-61d7-4513-b8b1-13e4224b9c0d",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`visitor` returns void and so does `forEachYieldExpression`. If we're doing this, maybe we should instead also change `forEachReturnStatement`, but the reason I wrote that the way I did is to stay true to the behavior of the general family of functions.\n",
        "createdAt" : "2015-05-15T20:52:09Z",
        "updatedAt" : "2015-05-30T00:38:01Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "afdd7d9e-b118-4a55-9e75-c89932759142",
        "parentId" : "5e7eb488-61d7-4513-b8b1-13e4224b9c0d",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "The reason I used void is because yield expressions can be nested. If this could be used to return something for each yield expression I find, then it's not clear in what order the results should be returned (pre-order vs post-order). I avoided the question by making it void. This might not be a good argument. But anyone can change it if they need to return something else.\n\nFor the forEachReturnStatement case, we actually do use it to return a value sometimes (I think a boolean), that's why I left it alone instead of converting it to void.\n",
        "createdAt" : "2015-05-17T00:54:35Z",
        "updatedAt" : "2015-05-30T00:38:01Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "171b3852375d6d1f6cbb49c01e4e870bf77ac7b7",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +526,530 @@    }\n\n    export function forEachYieldExpression(body: Block, visitor: (expr: YieldExpression) => void): void {\n\n        return traverse(body);"
  },
  {
    "id" : "0a372884-39b5-4f89-99dc-ebe813a3391b",
    "prId" : 2484,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8acd0175-9f4a-4895-a439-254ef3649c34",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "handle\n",
        "createdAt" : "2015-04-24T23:45:40Z",
        "updatedAt" : "2015-04-27T17:12:04Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "32409f9b9b613e6e6c1bc1547e2c625f2fb7a718",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1709,1713 @@            let charCode = input.charCodeAt(i);\n\n            // handel utf8\n            if (charCode < 0x80) {\n                output.push(charCode);"
  },
  {
    "id" : "644a98f8-f197-4a0d-9ffc-fef87a885064",
    "prId" : 2309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3549c798-c3ef-48d3-97b8-cdccce44ab4f",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Did anything change here (can't tell cuz it moved)?\n",
        "createdAt" : "2015-03-12T00:50:25Z",
        "updatedAt" : "2015-03-12T20:03:51Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "76592254-74dd-4e6e-8159-04a83bec48fc",
        "parentId" : "3549c798-c3ef-48d3-97b8-cdccce44ab4f",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "no, code was just moved from emitter to utilities\n",
        "createdAt" : "2015-03-12T05:52:50Z",
        "updatedAt" : "2015-03-12T20:03:51Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ce105ae4ba282e71bb3069746ca6d0088da4e25",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +204,208 @@    }\n\n    export function getEnclosingBlockScopeContainer(node: Node): Node {\n        var current = node;\n        while (current) {"
  },
  {
    "id" : "45139ff6-fd52-45d7-871c-548d25e1891a",
    "prId" : 2205,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ed3b83e-cd3f-468e-81dc-250233f1231c",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Remove this case label\n",
        "createdAt" : "2015-03-05T02:20:46Z",
        "updatedAt" : "2015-03-05T02:38:01Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "a2aedc44-801e-4c46-b1c0-82cc1162102c",
        "parentId" : "5ed3b83e-cd3f-468e-81dc-250233f1231c",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Done.\n",
        "createdAt" : "2015-03-05T02:29:45Z",
        "updatedAt" : "2015-03-05T02:38:01Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d367c96df6ea716d8e4f3b1a8485d99da3a7abd3",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +259,263 @@            case SyntaxKind.EnumMember:\n            case SyntaxKind.FunctionDeclaration:\n            case SyntaxKind.FunctionExpression:\n                errorNode = (<Declaration>node).name;\n                break;"
  },
  {
    "id" : "63cae1e8-8e27-43bf-ab0b-2af1c6559644",
    "prId" : 2161,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed3c5181-2d00-4462-9e6c-c9d24fc80af8",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "What does this mean? Would it be correct to call this nodeStartsNewFunctionScope?\n",
        "createdAt" : "2015-02-27T22:56:04Z",
        "updatedAt" : "2015-02-28T01:24:41Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b3a94c7d7bea54baec55507d67dc458004da59d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1140,1144 @@    }\n\n    export function nodeStartsNewLexicalEnvironment(n: Node): boolean {\n        return isAnyFunction(n) || n.kind === SyntaxKind.ModuleDeclaration || n.kind === SyntaxKind.SourceFile;\n    }"
  },
  {
    "id" : "0efc1f9c-b145-4941-9946-f06ca372ce63",
    "prId" : 2161,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5c7cd74-e938-4da9-a1f2-b39497946805",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I thought @ahejlsberg added name generation in the checker\n",
        "createdAt" : "2015-02-27T22:56:55Z",
        "updatedAt" : "2015-02-28T01:24:41Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "4ff905ba-30ec-4170-922c-078c4e31358c",
        "parentId" : "c5c7cd74-e938-4da9-a1f2-b39497946805",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "yes, this is his code, I've just moved it to utilities so it can be shared\n",
        "createdAt" : "2015-02-27T23:23:50Z",
        "updatedAt" : "2015-02-28T01:24:41Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b3a94c7d7bea54baec55507d67dc458004da59d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1156,1160 @@    }\n\n    export function generateUniqueName(baseName: string, isExistingName: (name: string) => boolean): string {\n        // First try '_name'\n        if (baseName.charCodeAt(0) !== CharacterCodes._) {"
  },
  {
    "id" : "916f1675-a47d-4e5a-b17d-081d4b1c3af2",
    "prId" : 1978,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce910a2d-d11e-4baa-a780-a48827ef1ce9",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "What exactly happens when I make an object like the following?\n\n``` TypeScript\nvar x = {\n    \"__@iterator\": 10;\n}\n```\n",
        "createdAt" : "2015-02-13T01:15:31Z",
        "updatedAt" : "2015-02-18T01:02:30Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "2b95229e-bc90-4127-86fa-62919254d771",
        "parentId" : "ce910a2d-d11e-4baa-a780-a48827ef1ce9",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I have a test for that (tests/cases/conformance/es6/Symbols/symbolProperty17.ts). Internally it becomes \"___@iterator\" (with 3 underscores). This is done by escapeIdentifier\n",
        "createdAt" : "2015-02-13T01:33:28Z",
        "updatedAt" : "2015-02-18T01:02:30Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "47404bccf08092d0cb087cb85e9c202bc7b79c89",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +874,878 @@\n    export function getPropertyNameForKnownSymbolName(symbolName: string): string {\n        return \"__@\" + symbolName;\n    }\n"
  },
  {
    "id" : "6c8464cb-1edd-4281-9c7d-7de687ccbb14",
    "prId" : 1434,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78f969ee-51f1-4216-8662-6b3706bd7db8",
        "parentId" : null,
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Curious why we need this as opposed to just using undefined for optional nodes that are missing?\n",
        "createdAt" : "2014-12-16T21:42:02Z",
        "updatedAt" : "2014-12-17T21:22:17Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "81b5a888-d027-41e9-8644-6b2efc001f81",
        "parentId" : "78f969ee-51f1-4216-8662-6b3706bd7db8",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "This is for non-optional nodes that are missing, and for optional nodes that are missing.  It provides a uniform way for client code to ask \"is this there\" and have it return \"no\" both in the case where it was optional, but missing, and required, but not provided.\n",
        "createdAt" : "2014-12-17T00:20:35Z",
        "updatedAt" : "2014-12-17T21:22:17Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "d96b254d-99d4-4d7d-87b4-7003672c0113",
        "parentId" : "78f969ee-51f1-4216-8662-6b3706bd7db8",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "If I understand you right, optional missing nodes are still just indicated as undefined, i.e. nothing changed about how we encode missing optional nodes? If so, why did you change many places (but not all places) to call this function on optional nodes when it is cheaper to just say e.g. `if (func.body) ...`? I much prefer the old way of checking.\n",
        "createdAt" : "2014-12-17T00:28:54Z",
        "updatedAt" : "2014-12-17T21:22:17Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "50e4aed2-29d4-404f-8ecf-5994d54e67c1",
        "parentId" : "78f969ee-51f1-4216-8662-6b3706bd7db8",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "To be consistent in all the places in the checker where we need to do this sort of check.\n\nThis avoids the issue where someone has to go: “oh wait.  Is this the sort of ‘body’ that is optional, and thus can be ‘undefined’? Or is it ‘required’ and thus I need to check it for having a width of 0?  Or could it be both?”.\n\nInstead of having to know how we encoded the value in the tree, the code can right the more expressive “is this missing/present?” question and have the right thing happen.  This makes the code consistent in how this question is asked, and provides all clients with the ‘right’ method to use in all circumstances to ask the question.\n\n(responding by email as github is acting wonky on me).\n\n```\n      -- Cyrus\n```\n\nFrom: Anders Hejlsberg [mailto:notifications@github.com]\nSent: Tuesday, December 16, 2014 4:29 PM\nTo: Microsoft/TypeScript\nCc: Cyrus Najmabadi\nSubject: Re: [TypeScript] Add support for incremental parsing. (#1434)\n\nIn src/compiler/utilities.tshttps://github.com/Microsoft/TypeScript/pull/1434#discussion-diff-21944616:\n\n> @@ -110,14 +110,22 @@ module ts {\n> \n> ```\n>      return node.pos;\n> \n>  }\n> ```\n> -    export function isMissingNode(node: Node) {\n> -    export function nodeIsMissing(node: Node) {\n> - ```\n>      if (!node) {\n>   ```\n\nIf I understand you right, optional missing nodes are still just indicated as undefined, i.e. nothing changed about how we encode missing optional nodes? If so, why did you change many places (but not all places) to call this function on optional nodes when it is cheaper to just say e.g. if (func.body) ...? I much prefer the old way of checking.\n\n—\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/1434/files#r21944616.\n",
        "createdAt" : "2014-12-17T02:02:25Z",
        "updatedAt" : "2014-12-17T21:22:17Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a08c54f429e486d774b92c4af6858820fb9c55f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +120,124 @@    // contained within it.\n    export function nodeIsMissing(node: Node) {\n        if (!node) {\n            return true;\n        }"
  },
  {
    "id" : "b6f1962a-6e3b-4abe-abcc-163bb011ee23",
    "prId" : 1434,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4622e6d-f960-4cd8-8e22-353c1c62fe24",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Make sure this is used in _all_ places where we check for missing nodes - this can be any place we use `getFullWidth`, `getWidth`, etc.\n",
        "createdAt" : "2014-12-17T01:41:49Z",
        "updatedAt" : "2014-12-17T21:22:17Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a08c54f429e486d774b92c4af6858820fb9c55f",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +119,123 @@    // However, this node will be 'missing' in the sense that no actual source-code/tokens are\n    // contained within it.\n    export function nodeIsMissing(node: Node) {\n        if (!node) {\n            return true;"
  },
  {
    "id" : "a797233c-1576-4273-af66-d93f0891f561",
    "prId" : 45289,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45289#pullrequestreview-722817034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13a6ea3e-7fef-4d91-9ffe-0407262167a4",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "hmm. I had to figure this out recently and I thought the Right Way was `symbol.valueDeclaration?.kind === SyntaxKind.PrivateIdentifier` or something similar. But I guess this way works too.",
        "createdAt" : "2021-08-04T17:02:10Z",
        "updatedAt" : "2021-08-04T17:19:04Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "a571de2b-eed9-4220-ade3-8b222ada541e",
        "parentId" : "13a6ea3e-7fef-4d91-9ffe-0407262167a4",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I would readily believe, or at least hope, that those are equivalent, but this implementation gets to the core of what went wrong in the linked crash. You cannot ask for a name starting with `__#` in `checker.tryGetInModuleExportsAndProperties` and expect to get the private identifier symbol it came from back out, because the checker will underscore-escape that string and try to find a property whose _actual name_ starts with `__#`. So it’s very important that we don’t store any symbols with escapedNames like this, somewhat regardless of what it represents.",
        "createdAt" : "2021-08-04T23:28:28Z",
        "updatedAt" : "2021-08-04T23:29:21Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "55974d68ed6283a8809c6f26022838798d6f183d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3290,3294 @@    }\n\n    export function isPrivateIdentifierSymbol(symbol: Symbol): boolean {\n        return startsWith(symbol.escapedName as string, \"__#\");\n    }"
  }
]