[
  {
    "id" : "f397147e-32c2-48b6-8c01-195e7721a8f1",
    "prId" : 40306,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40306#pullrequestreview-482815946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc321815-f82f-4df3-bdac-43134855d537",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-09-04T17:06:12Z",
        "updatedAt" : "2020-09-10T19:01:01Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "69b9328cce4b055e32161360f19c88abfb4aa7f1",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +2274,2278 @@        }\n        return array.slice(0, index);\n    }\n}"
  },
  {
    "id" : "53bed9a9-71b8-4d88-bc3c-628af5105f4c",
    "prId" : 39060,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39060#pullrequestreview-552617547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "335ddd28-2a6a-49e8-be97-56de9cd173bc",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Would it make sense to cache the lowercase versions of `s1` and `s2` and index into those instead?\r\n\r\nThis piece of code needs a microbenchmark, since I have no idea. I'm not sure how to do that off the top of my head though.",
        "createdAt" : "2020-12-01T16:38:35Z",
        "updatedAt" : "2020-12-13T06:06:58Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "be4734ea-d64c-4772-a3f0-b45fdc641f52",
        "parentId" : "335ddd28-2a6a-49e8-be97-56de9cd173bc",
        "authorId" : "b4f80f72-1d8e-4c62-85b6-8a59ad6153f0",
        "body" : "How about extracting all symbols from some mostly used type definitions and then apply `getSpellingSuggestion` randomly?",
        "createdAt" : "2020-12-05T08:17:10Z",
        "updatedAt" : "2020-12-13T06:06:58Z",
        "lastEditedBy" : "b4f80f72-1d8e-4c62-85b6-8a59ad6153f0",
        "tags" : [
        ]
      },
      {
        "id" : "31a94422-692e-4381-b25e-1b6f16461231",
        "parentId" : "335ddd28-2a6a-49e8-be97-56de9cd173bc",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Maybe? One way to stress the system would be to have a scope that fills in all possible neighbours, so that the algorithm has to run on lots of candidates, all under the maximum distance cutoff.\r\n\r\nI'm going to run the perf suite on this too, since all those projects compile with lots of errors now -- maybe enough of them are name resolution errors to notice a slowdown.",
        "createdAt" : "2020-12-15T16:06:01Z",
        "updatedAt" : "2020-12-15T16:06:02Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "99a5074e12e741ed9413709201cd8bcb2c96bc77",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +1989,1993 @@            for (let j = minJ; j <= maxJ; j++) {\n                // case difference should be significantly cheaper than other differences\n                const substitutionDistance = s1[i - 1].toLowerCase() === s2[j-1].toLowerCase()\n                    ? (previous[j - 1] + 0.1)\n                    : (previous[j - 1] + 2);"
  },
  {
    "id" : "6eb0fc5f-9462-4628-b713-80159262e852",
    "prId" : 38119,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38119#pullrequestreview-399345695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bf5e92a-cb73-4308-b1db-ee742d125a24",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I’ll give everyone until EOD to bikeshed this horribly vague name.",
        "createdAt" : "2020-04-23T18:00:08Z",
        "updatedAt" : "2020-04-23T18:00:08Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bbbb644a0bae6082e27158daffeb4fdcf7ad00b",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +859,863 @@    export function combine<T>(xs: T | readonly T[] | undefined, ys: T | readonly T[] | undefined): T | readonly T[] | undefined;\n    export function combine<T>(xs: T | T[] | undefined, ys: T | T[] | undefined): T | T[] | undefined;\n    export function combine<T>(xs: T | T[] | undefined, ys: T | T[] | undefined) {\n        if (xs === undefined) return ys;\n        if (ys === undefined) return xs;"
  },
  {
    "id" : "a313a7bd-9c0b-4891-9af0-3b4ad6ea656e",
    "prId" : 36496,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36496#pullrequestreview-350335748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "795e415f-9ff0-49f9-b28f-8c3c36e9b425",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "viva posix",
        "createdAt" : "2020-01-29T18:39:26Z",
        "updatedAt" : "2020-01-29T21:47:01Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "0972e5aed031fdf09980fd75914a6281c588c149",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2012,2016 @@        }\n    }\n}"
  },
  {
    "id" : "29820f7f-9449-49b9-b316-4d64155b0e2d",
    "prId" : 36106,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36106#pullrequestreview-341457191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc20bec9-4544-4539-8e70-977b078ba4dd",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Can we document why we're unconditionally handling this ourselves and not deferring to `string.toLocaleLowercase` (or `Intl.Collator`), as we do in `compareStringsCaseSensitiveUI`, where possible (namely what cases that fails to handle)?",
        "createdAt" : "2020-01-10T21:06:03Z",
        "updatedAt" : "2020-01-31T18:10:39Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "1103c7d2-914b-491d-b4fe-26a50f6edd5b",
        "parentId" : "dc20bec9-4544-4539-8e70-977b078ba4dd",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "https://github.com/microsoft/TypeScript/pull/36106/files#diff-66cec844e251a1918deb897eabca206bR1404 is this not good enough ?",
        "createdAt" : "2020-01-10T22:22:43Z",
        "updatedAt" : "2020-01-31T18:10:39Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "853a8b98-2159-4a01-bc8d-83909a802fc7",
        "parentId" : "dc20bec9-4544-4539-8e70-977b078ba4dd",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "It explains what's being done, but not why using locale lower case is insufficient.",
        "createdAt" : "2020-01-10T22:31:28Z",
        "updatedAt" : "2020-01-31T18:10:39Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a0244618686f0c8bcd56e80b7b399f24649af39",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1439,1443 @@     * So for this function purpose, we go ahead and assume character I with dot on top it as case sensitive since its very unlikely to use lower case form of that special character\n     */\n    export function toFileNameLowerCase(x: string) {\n        return fileNameLowerCaseRegExp.test(x) ?\n            x.replace(fileNameLowerCaseRegExp, toLowerCase) :"
  },
  {
    "id" : "fb4efdc4-b63e-48a4-9ef0-b33417b394c7",
    "prId" : 36106,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36106#pullrequestreview-344895757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0bb8b44-d79d-4376-b979-5edf05db63b6",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Is this windows specific (does this need to live in `sys` and keyed off of `process.os`), or is this also important on mac? And on windows and non-windows systems, does this potentially change with the system locale?",
        "createdAt" : "2020-01-11T00:48:33Z",
        "updatedAt" : "2020-01-31T18:10:39Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "ea592633-d867-4223-b58e-ca6f76896d87",
        "parentId" : "b0bb8b44-d79d-4376-b979-5edf05db63b6",
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : "This is a feature of the standard Windows filesystem (NTFS). It's not affected by system locale - the upcase table is hardcoded into the filesystem. In theory, other case-insensitive filesystems could behave differently re: casing. \r\n\r\nI'm a lot less clear on the Mac OS system specifics but I just tried out creating some files on my Macbook, and a similar issue exists - (I,i) , (İ) and (ı) are all distinct filenames even though the filesystem is case insensitive. Note this is slightly different than Windows which treats (İ,ı) as equivalent. It's entirely possible `toLowerCase` does the right thing for the Mac scenario, I just haven't tried it out.",
        "createdAt" : "2020-01-13T19:15:07Z",
        "updatedAt" : "2020-01-31T18:10:39Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      },
      {
        "id" : "b5dcb57a-d633-4ad8-bdbb-dbb1bdbde384",
        "parentId" : "b0bb8b44-d79d-4376-b979-5edf05db63b6",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Is the behavior on Windows different if the active drive is backed by FAT32 instead of NTFS (eg, an old thumb drive)? Or do FAT and NTFS have the same filename case handling in windows?",
        "createdAt" : "2020-01-13T21:07:36Z",
        "updatedAt" : "2020-01-31T18:10:39Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "8d152a1b-813a-4d7c-b670-f04b8f6d6df2",
        "parentId" : "b0bb8b44-d79d-4376-b979-5edf05db63b6",
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : "I'm like 99.99% sure FAT32 behaves exactly the same but I'm speaking from memory.",
        "createdAt" : "2020-01-13T21:12:46Z",
        "updatedAt" : "2020-01-31T18:10:39Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      },
      {
        "id" : "b186bf5e-55e2-4396-97b6-89c4cd4db639",
        "parentId" : "b0bb8b44-d79d-4376-b979-5edf05db63b6",
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "This is what it looks like on node for Mac:\r\n\r\n```sh\r\n❯ node\r\n> \"İi̇ı\".toLowerCase()\r\n'i̇i̇ı'\r\n> \"İi̇ı\".toUpperCase()\r\n'İİI'\r\n```",
        "createdAt" : "2020-01-17T22:38:47Z",
        "updatedAt" : "2020-01-31T18:10:39Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      },
      {
        "id" : "b06bd97a-949e-4d1d-86cb-8ba0cc574a1a",
        "parentId" : "b0bb8b44-d79d-4376-b979-5edf05db63b6",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "We're interested in filesystem behavior (what's equivalent to what on disk) - `toLowerCase` and `toUpperCase` in the language are specified 😛 ",
        "createdAt" : "2020-01-17T22:46:52Z",
        "updatedAt" : "2020-01-31T18:10:39Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "d8557a5e-4d96-491c-ba91-d8f5bca07d27",
        "parentId" : "b0bb8b44-d79d-4376-b979-5edf05db63b6",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Thanks orta for looking into that.\r\nI don't think, we should depend on the os to determine how to get canonical file name at all.. Considering `İı` as unique(that is not changing file casing for those) is right thing to do.. In worst cases we wont recognize that file with `İ` and `i̇` are not same which would be really a small group. The `GetCanonicalFileName` is internal compiler thing that currently is based on if file system is case sensitive or not and we shouldn't change that fact. It is an ok trade off to do in my opinion\r\n\r\ncc: @RyanCavanaugh  and @DanielRosenwasser to see if they agree.",
        "createdAt" : "2020-01-17T22:47:29Z",
        "updatedAt" : "2020-01-31T18:10:39Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "4e7b861a-a766-4e12-9955-9550586ad2fa",
        "parentId" : "b0bb8b44-d79d-4376-b979-5edf05db63b6",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Also we do not want to use `toUpperCase` since in most cases file name is lowercase so not having to store duplicate strings just for case swapping is more performant",
        "createdAt" : "2020-01-17T22:49:25Z",
        "updatedAt" : "2020-01-31T18:10:39Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "e66b45af-bb5a-496e-ae54-ba77234f20d1",
        "parentId" : "b0bb8b44-d79d-4376-b979-5edf05db63b6",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "> I don't think, we should depend on the os to determine how to get canonical file name at all\r\n\r\nNo, I'm not saying query the OS - i'm saying check `process.os` to see if the host is mac or windows (in `sys.ts`, as that's where we do things like that) to swap between a windows implementation of `toFileNameLowerCase` and a mac implementation of `toFileNameLowerCase`, since their handling of turkish i differs. As-is, this might fix turkish i on windows, but will potentially break it on mac, since our existing `toLowerCase` call _may have happened_ to already do the right thing for the mac's implementation of case-insensitivity.\r\n\r\nPretty much: we shouldn't break one platform to fix another, or only partially fix the issue on windows only - we should properly handle both.",
        "createdAt" : "2020-01-17T23:33:54Z",
        "updatedAt" : "2020-01-31T18:10:39Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "00d8a334-87f0-437d-90ae-ea0a85b556de",
        "parentId" : "b0bb8b44-d79d-4376-b979-5edf05db63b6",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "The argument is pretty much that our discussion here has made it evident that, as it relates to filesystems, there isn't just `case sensitive` vs `case insensitive` - there's `case sensitive` vs `windows case insensitive` vs `mac case insensitive` (probably vs `linux bespoke filesystem case insensitive` but we care about that way, way less), and while the later two are they same in the ASCII range, they differ in some of the edge cases, as @minestarks pointed out. We should strive to handle them both.",
        "createdAt" : "2020-01-17T23:39:12Z",
        "updatedAt" : "2020-01-31T18:10:39Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a0244618686f0c8bcd56e80b7b399f24649af39",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1407,1411 @@    // We convert the file names to lower case as key for file name on case insensitive file system\n    // While doing so we need to handle special characters (eg \\u0130) to ensure that we dont convert\n    // it to lower case, fileName with its lowercase form can exist along side it.\n    // Handle special characters and make those case sensitive instead\n    //"
  },
  {
    "id" : "dc13abed-16e6-4cb5-b335-37b92b9e96fc",
    "prId" : 33402,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33402#pullrequestreview-288960022",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5ec424b-71f5-4a00-8d45-b28d9209c719",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "This is probably just a convention I don't recognize, but why \"right\", rather than \"reverse\"?",
        "createdAt" : "2019-09-16T23:27:24Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "a2a1ce13-d70f-4086-a79a-f57d715585d1",
        "parentId" : "f5ec424b-71f5-4a00-8d45-b28d9209c719",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yep, I was modeling off of `Array.prototype.reduceRight`. Without a precedent of convention I would avoid using “handed” language as I imagine it’s somewhat dissonant to folks whose first written language is RTL.",
        "createdAt" : "2019-09-17T00:00:30Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "61c3e61f3e56e2f570b2b6b478913c3878aaa17a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +333,337 @@     * Like `forEach`, but iterates in reverse order.\n     */\n    export function forEachRight<T, U>(array: readonly T[] | undefined, callback: (element: T, index: number) => U | undefined): U | undefined {\n        if (array) {\n            for (let i = array.length - 1; i >= 0; i--) {"
  },
  {
    "id" : "01eb43db-471a-4832-98e1-90971d34bed5",
    "prId" : 33402,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33402#pullrequestreview-292594425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fa38020-8bf3-4819-a99b-49fa6404e70a",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "How do you choose between for-of, for-increment, and `forEach`?",
        "createdAt" : "2019-09-16T23:27:38Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "d3a28411-8b1d-473f-bc27-dcf41977481d",
        "parentId" : "3fa38020-8bf3-4819-a99b-49fa6404e70a",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "My personal tendencies:\r\n\r\n- for-of: lets you early return enclosing function, doesn’t give you element index\r\n- for-increment: generally only use when element index is important, or if I need to start somewhere other than the first element\r\n- `forEach`: gives you early termination of iteration but not return of the enclosing function, result transformation, and element index. It’s generally replaceable by for-of but is more elegant if you return something, like\r\n\r\n```ts\r\nconst firstMatchingSignature = forEach(types, type => {\r\n  return firstDefined(type.getCallSignatures(), somePredicateThing);\r\n});\r\n```\r\n\r\n- `Array.prototype.forEach`: no early termination, no return value 👎 \r\n  ",
        "createdAt" : "2019-09-17T00:09:30Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "8a071628-6d5f-4068-832a-0d2e95cfd44b",
        "parentId" : "3fa38020-8bf3-4819-a99b-49fa6404e70a",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "`arg => forEach(fs, f => f(arg)) || false`?",
        "createdAt" : "2019-09-17T01:36:42Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "509738fe-cd59-40ab-9c2f-bc3532da0d6e",
        "parentId" : "3fa38020-8bf3-4819-a99b-49fa6404e70a",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yeah, that would work. I think I also have a tendency to implement abstractions with building blocks that are _less_ abstract than the function I’m implementing, if that makes sense. `or` and `forEach` are both fairly low-level atomic abstractions, so it makes sense to me that neither would depend on the other, but would rather be built with primitive loops. (I’ve never been consciously aware of this thought process before now; it’s typically just driven by a vague intuition.)",
        "createdAt" : "2019-09-23T16:54:52Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "eeba6573-5706-4be4-8d4b-bccd8f9d7f6c",
        "parentId" : "3fa38020-8bf3-4819-a99b-49fa6404e70a",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I guess, in my mind, if `or` can straightforwardly be reduced to `forEach` it is higher-level.  `forEach` also seems like the sort of thing that might eventually be performance-tuned and it would be nice to pick up the benefits automatically.  I don't feel strongly about it though.",
        "createdAt" : "2019-09-24T17:41:44Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "61c3e61f3e56e2f570b2b6b478913c3878aaa17a",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +2177,2181 @@    export function or<T extends unknown>(...fs: ((arg: T) => boolean)[]): (arg: T) => boolean {\n        return arg => {\n            for (const f of fs) {\n                if (f(arg)) {\n                    return true;"
  },
  {
    "id" : "20bf6457-a8d9-49e0-a4da-f48d551d6441",
    "prId" : 33178,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33178#pullrequestreview-282324192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f4821e9-bb0f-4112-840b-41902c80e25f",
        "parentId" : null,
        "authorId" : "e99d882e-f92d-4043-8953-ae32b114eb90",
        "body" : "This is a pretty good example of what TS would now consider suspicious-enough code to error on. Making `e` optional would also have fixed this.",
        "createdAt" : "2019-09-01T01:03:53Z",
        "updatedAt" : "2019-09-25T17:06:56Z",
        "lastEditedBy" : "e99d882e-f92d-4043-8953-ae32b114eb90",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c9986f26cdfe42c3b48f62ccbe8952718b3930b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1655,1659 @@    export function compose<T>(...args: ((t: T) => T)[]): (t: T) => T;\n    export function compose<T>(a: (t: T) => T, b: (t: T) => T, c: (t: T) => T, d: (t: T) => T, e: (t: T) => T): (t: T) => T {\n        if (!!e) {\n            const args: ((t: T) => T)[] = [];\n            for (let i = 0; i < arguments.length; i++) {"
  },
  {
    "id" : "759b75a1-4e33-43b4-bf1b-95d13f6488de",
    "prId" : 32372,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32372#pullrequestreview-292661738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9db2bcfa-f15b-48b4-8c04-b41ed1389c89",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "/raises eyebrow at name",
        "createdAt" : "2019-09-24T18:55:43Z",
        "updatedAt" : "2019-09-26T21:10:12Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "6757052b-2aaa-4605-ba2d-0a06d6999de8",
        "parentId" : "9db2bcfa-f15b-48b4-8c04-b41ed1389c89",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "It maps a map into a new map.\r\n\r\nWhat more do you want. 😄 ",
        "createdAt" : "2019-09-24T19:40:20Z",
        "updatedAt" : "2019-09-26T21:10:12Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "007b3d4afe7726f7b72cd617e5453c8943e48ad2",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1553,1557 @@    }\n\n    export function mapMap<T, U>(map: Map<T>, f: (t: T, key: string) => [string, U]): Map<U>;\n    export function mapMap<T, U>(map: UnderscoreEscapedMap<T>, f: (t: T, key: __String) => [string, U]): Map<U>;\n    export function mapMap<T, U>(map: Map<T> | UnderscoreEscapedMap<T>, f: ((t: T, key: string) => [string, U]) | ((t: T, key: __String) => [string, U])): Map<U> {"
  },
  {
    "id" : "1c8d2127-36df-4640-a6ec-35601c325d5f",
    "prId" : 28951,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28951#pullrequestreview-183586297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2574484-ece7-4c0b-b756-59ec8c8ff25b",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "At least in V8 this causes the array to be considered \"holey\" and therefore it's not as optimized as packed arrays.\r\nOn the other hand repeatedly calling `push` needs to grow the backing store.\r\n\r\nI'd say this is fine as is, as this function is only used in a single place in `generateTypes.ts`. So the holey array won't cause too much deoptimization where it's used. The alternative using `push` wouldn't be a problem either because the arrays are unlikely to contain more than a dozen elements.",
        "createdAt" : "2018-12-11T09:48:06Z",
        "updatedAt" : "2018-12-11T09:48:25Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "28c3663e6218c61929d74dda1cdd8bcf042a3f6a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2166,2170 @@\n    export function fill<T>(length: number, cb: (index: number) => T): T[] {\n        const result = Array<T>(length);\n        for (let i = 0; i < length; i++) {\n            result[i] = cb(i);"
  },
  {
    "id" : "7410aa1f-4c75-4d8a-ad41-0020a85fbf21",
    "prId" : 19916,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19916#pullrequestreview-76483806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d9baf72-92df-4ba1-85d0-2f696afd13c7",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "You can pass a function that only takes `x`, right?",
        "createdAt" : "2017-11-13T19:09:02Z",
        "updatedAt" : "2018-01-09T21:01:12Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "fa93c52c-de1d-4449-ad4b-515b786ee7bb",
        "parentId" : "8d9baf72-92df-4ba1-85d0-2f696afd13c7",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : ":+1:",
        "createdAt" : "2017-11-14T15:38:23Z",
        "updatedAt" : "2018-01-09T21:01:12Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d67ef009c0ea63416675289f5d7b245d34aa3a8f",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +554,558 @@    }\n\n    export function mapAllOrFail<T, U>(array: ReadonlyArray<T>, mapFn: (x: T, i: number) => U | undefined): U[] | undefined {\n        const result: U[] = [];\n        for (let i = 0; i < array.length; i++) {"
  },
  {
    "id" : "826bd7c2-f228-4256-a9c3-d843ea9da873",
    "prId" : 19542,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19542#pullrequestreview-75849115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71e67ea8-09b7-4f64-9c84-4c60a047c5de",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Do we really need this function in compiler? Can it be part of services\\utilities instead?",
        "createdAt" : "2017-11-09T17:07:28Z",
        "updatedAt" : "2017-11-09T21:55:28Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "2769e4ed-e4b7-48f0-99aa-4691fd5e5f23",
        "parentId" : "71e67ea8-09b7-4f64-9c84-4c60a047c5de",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "This functions needs to be used in the typings installer and in tsserver; I couldn't find another file that was shared by them. services\\utilities isn't involved in the typings installer and adding it introduced more errors because it needs references to e.g. Project",
        "createdAt" : "2017-11-10T18:52:54Z",
        "updatedAt" : "2017-11-10T18:52:54Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d5dec9a9870637cb4602cd7eb05683d97d0dcda",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +2639,2643 @@     * Takes a string like \"jquery-min.4.2.3\" and returns \"jquery\"\n     */\n    export function removeMinAndVersionNumbers(fileName: string) {\n        // Match a \".\" or \"-\" followed by a version number or 'min' at the end of the name\n        const trailingMinOrVersion = /[.-]((min)|(\\d+(\\.\\d+)*))$/;"
  },
  {
    "id" : "63c70ee0-72ee-42d6-bf47-3b9ce4f949ec",
    "prId" : 19452,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19452#pullrequestreview-72351947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b45cb62b-0083-4ec5-8e5e-13056d724c1d",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Would be easier to read if you just called `compareStrings` inside the loop -- then we wouldn't need a `compareStringsCaseSensitive` function and could just use `===` directly.",
        "createdAt" : "2017-10-25T19:02:09Z",
        "updatedAt" : "2017-11-04T06:53:22Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "9e02f7cb-5dc9-406e-be9f-22d972cd04d5",
        "parentId" : "b45cb62b-0083-4ec5-8e5e-13056d724c1d",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "That's what this did before. However, that means we are evaluating the `ignoreCase` condition for each iteration of the loop. This saves a few cycles.",
        "createdAt" : "2017-10-25T20:00:58Z",
        "updatedAt" : "2017-11-04T06:53:22Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "c9293580-8ea6-4794-8adb-1dfd542593de",
        "parentId" : "b45cb62b-0083-4ec5-8e5e-13056d724c1d",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I would think that an indirect function call isn't any faster than an if?",
        "createdAt" : "2017-10-25T20:13:57Z",
        "updatedAt" : "2017-11-04T06:53:22Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "1764adb5-2e42-4182-9057-0c3afda40f8a",
        "parentId" : "b45cb62b-0083-4ec5-8e5e-13056d724c1d",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I've actually removed `compareStrings` now. Comparisons need to be explicit and intentional:\r\n\r\n- `compareValues` now only compares numbers\r\n- `compareStringsCaseSensitive` compares strings using an ordinal case-sensitive comparison\r\n- `compareStringsCaseSensitiveUI` compares strings using a dictionary-ordered case-sensitive comparison using the current UI locale\r\n- `compareStringsCaseInsensitive` compares strings using an ordinal case-insensitive comparison\r\n- `compareStringsCaseInsensitiveUI` compares strings using a dictionary-ordered case-insensitive comparison using the current UI locale\r\n\r\n",
        "createdAt" : "2017-10-26T21:48:33Z",
        "updatedAt" : "2017-11-04T06:53:22Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed914a8d4755d8152040648faf25f8c65e01f1b9",
    "line" : 623,
    "diffHunk" : "@@ -1,1 +2117,2121 @@        const bComponents = getNormalizedPathComponents(b, currentDirectory);\n        const sharedLength = Math.min(aComponents.length, bComponents.length);\n        const comparer = ignoreCase ? compareStringsCaseInsensitive : compareStringsCaseSensitive;\n        for (let i = 0; i < sharedLength; i++) {\n            const result = comparer(aComponents[i], bComponents[i]);"
  },
  {
    "id" : "69bc3c16-f76b-4dce-8141-f6b077027bbe",
    "prId" : 19228,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19228#pullrequestreview-69704916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a68bf187-bf3e-417a-a527-75cae414708e",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "What's the file extension of something like `.gitconfig`?  If we decide that it has no file extension (because that's not really what dot means in that position) we just have to change `>=` to `>`.",
        "createdAt" : "2017-10-16T20:58:24Z",
        "updatedAt" : "2017-10-16T20:58:24Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "2ab8e682-8b61-4c3a-b22c-d2485cf83fb1",
        "parentId" : "a68bf187-bf3e-417a-a527-75cae414708e",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "I always think of those as files with just an extension. Not sure it matters in this case (e.g. if you have a file named `.html`, you probably want it treated as an HTML file.",
        "createdAt" : "2017-10-16T21:24:30Z",
        "updatedAt" : "2017-10-16T21:24:30Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7566760911f932c2cf639e254c15d5a571b063ad",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +2599,2603 @@        const baseFileName = getBaseFileName(path);\n        const extensionIndex = baseFileName.lastIndexOf(\".\");\n        if (extensionIndex >= 0) {\n            return baseFileName.substring(extensionIndex);\n        }"
  },
  {
    "id" : "a445272b-b128-40a8-8ef3-3c22090ae2cc",
    "prId" : 18860,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18860#pullrequestreview-66290701",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16908716-65a7-4c4a-8e8b-168b705b5db2",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "`<||>` is much better name for this function bro",
        "createdAt" : "2017-09-29T23:05:31Z",
        "updatedAt" : "2018-01-09T23:02:35Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "a481f7f01dbaea6177d7897c584355e5e7e605c2",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +3047,3051 @@    }\n\n    export function or<T>(f: (arg: T) => boolean, g: (arg: T) => boolean) {\n        return (arg: T) => f(arg) || g(arg);\n    }"
  },
  {
    "id" : "9ae43c6d-67d7-4fb2-85ae-dc359ba6e802",
    "prId" : 18549,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18549#pullrequestreview-63436707",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d36c07dd-9421-4bc1-bfcd-8a4cef26fee7",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I'm sure I'm missing something, but how is this different from a for-of loop?",
        "createdAt" : "2017-09-18T17:47:47Z",
        "updatedAt" : "2017-09-18T18:16:02Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "3b6a2d38-4988-4662-98f6-f3a004fed0b5",
        "parentId" : "d36c07dd-9421-4bc1-bfcd-8a4cef26fee7",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "A `for-in` loop iterates over the keys of an object, while a `for-of` loop only works on an object implementing the iterator protocol. See [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)",
        "createdAt" : "2017-09-18T18:00:41Z",
        "updatedAt" : "2017-09-18T18:16:02Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "16eb2003-30d0-4449-9fde-73c340985f4c",
        "parentId" : "d36c07dd-9421-4bc1-bfcd-8a4cef26fee7",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "It's also supposedly identical to `Object.values`, which, much like `hasOwnProperty`, which we should probably check for the existence of and use if available.",
        "createdAt" : "2017-09-18T18:01:31Z",
        "updatedAt" : "2017-09-18T18:16:02Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc9914077fe1abe909ba1e3cbc2bd2940b2a5d70",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1009,1013 @@    export function getOwnValues<T>(sparseArray: T[]): T[] {\n        const values: T[] = [];\n        for (const key in sparseArray) {\n            if (hasOwnProperty.call(sparseArray, key)) {\n                values.push(sparseArray[key]);"
  },
  {
    "id" : "302b3ea0-339b-4abf-9edd-f398f57eab30",
    "prId" : 18456,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18456#pullrequestreview-62853531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2a1bd1a-b9a8-4cda-8747-06b3ae8e3eaa",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "so why do we have undefined file paths?",
        "createdAt" : "2017-09-14T16:56:49Z",
        "updatedAt" : "2017-09-14T16:56:49Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "10049830-09ec-4bf5-a7ab-d7c06f5a9872",
        "parentId" : "a2a1bd1a-b9a8-4cda-8747-06b3ae8e3eaa",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Answers from plugins may include them",
        "createdAt" : "2017-09-14T18:16:58Z",
        "updatedAt" : "2017-09-14T18:16:58Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "bc5aac6c-5331-424a-a7ce-60b3ec7d375c",
        "parentId" : "a2a1bd1a-b9a8-4cda-8747-06b3ae8e3eaa",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "would not that cause issues in other places as well, and should we just prune/sanitize the list first in these cases?",
        "createdAt" : "2017-09-14T18:57:51Z",
        "updatedAt" : "2017-09-14T18:57:51Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "9046fcb65831ba9edb1dc8ef657ba094547b5671",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1660,1664 @@\n    export function isRootedDiskPath(path: string) {\n        return path && getRootLength(path) !== 0;\n    }\n"
  },
  {
    "id" : "3d274e2a-1ee1-4e9e-880f-166f22f3d723",
    "prId" : 17125,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17125#pullrequestreview-49624009",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fa1b0f3-0de7-45ce-bbf9-777e85e04132",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Why this change?",
        "createdAt" : "2017-07-12T19:38:09Z",
        "updatedAt" : "2017-07-12T21:24:55Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "f299ed2f-06db-4673-b9fb-e23f34a6b0f8",
        "parentId" : "1fa1b0f3-0de7-45ce-bbf9-777e85e04132",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This avoids needing a closure for the second argument (if it is not an interpolation).",
        "createdAt" : "2017-07-12T21:22:43Z",
        "updatedAt" : "2017-07-12T21:24:55Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9399e2fda9a017945c60d4c1bf764ee172b33aa",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +2335,2339 @@        }\n\n        export function assert(expression: boolean, message?: string, verboseDebugInfo?: string | (() => string), stackCrawlMark?: Function): void {\n            if (!expression) {\n                if (verboseDebugInfo) {"
  },
  {
    "id" : "dba92aea-4714-4ffa-9a90-34514eafcf37",
    "prId" : 17092,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17092#pullrequestreview-49321459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7adc0907-e9af-499f-8d74-6d5071951183",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Is this overload order correct? Won't we just always pick the top one, since a `ReadonlyArray` will be compatible with it (so we'll never go down the list)? (Same comment on `singleOrMany`, `concatenate`, `sameFlatMap`, `sameMap`, and `filter`)",
        "createdAt" : "2017-07-11T17:19:32Z",
        "updatedAt" : "2017-07-11T20:38:17Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "2039c308-2da0-4b34-9156-566dfe0bf441",
        "parentId" : "7adc0907-e9af-499f-8d74-6d5071951183",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "The more-specific overload should go first -- `T[]` is more specific than `ReadonlyArray` since it contains everything `ReadonlyArray` has, plus mutators.",
        "createdAt" : "2017-07-11T20:35:58Z",
        "updatedAt" : "2017-07-11T20:38:17Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "52ce0aa0434909614ee22d4396d696c0bcf81a38",
    "line" : 229,
    "diffHunk" : "@@ -1,1 +671,675 @@     */\n    export function compact<T>(array: T[]): T[];\n    export function compact<T>(array: ReadonlyArray<T>): ReadonlyArray<T>;\n    export function compact<T>(array: T[]): T[] {\n        let result: T[];"
  },
  {
    "id" : "df19c0f8-2917-4a15-ae2e-a417e5ab1201",
    "prId" : 17014,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17014#pullrequestreview-51495321",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78281c56-f8b6-4383-819d-365157e52250",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Good call! 👍 ",
        "createdAt" : "2017-07-11T05:36:27Z",
        "updatedAt" : "2017-07-11T14:22:16Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "6b942e64-49de-4dd3-a6a9-654314b10597",
        "parentId" : "78281c56-f8b6-4383-819d-365157e52250",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "@DanielRosenwasser @andy-ms \r\nThe <a href=\"https://github.com/Microsoft/TypeScript/pull/16646#pullrequestreview-47396091\">original justification</a> for the change was: to make version parsing easier.\r\n\r\nGiven how parsing issues escalated, while compiler gained unnecessary variable and all these troubling cross-referencing comments — is it better to revisit?\r\n\r\nIf TSC goes back to dumb simple `export const version = \"2.5.0\";` all these quirks go away. More to it, built TSC.JS has version in a plain parseable format.\r\n\r\nCompare old simple way:\r\n``` typescript\r\n(function (ts) {\r\n    ts.version = \"2.4.1\";\r\n})(ts || (ts = {}));\r\n```\r\n\r\nWith what we got today:\r\n```typescript\r\n(function (ts) {\r\n    ts.versionMajorMinor = \"2.5\";\r\n    ts.version = ts.versionMajorMinor + \".0-dev.20170719\";\r\n})(ts || (ts = {}));\r\n```\r\n\r\nAll that trouble for the sake of splitting `versionMajorMinor` off `version`. Could have just gone `version.split('.').slice(0,2).join('.')`.",
        "createdAt" : "2017-07-20T12:36:30Z",
        "updatedAt" : "2017-07-20T12:36:30Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "6deb4621-905d-40f0-93eb-b13c7bf2ea0e",
        "parentId" : "78281c56-f8b6-4383-819d-365157e52250",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "@mihailik You could make a pull request updating both `configureNightly.ts` and `core.ts`, but please don't revert it back to where we had multiple `versionMajorMinor` declarations.",
        "createdAt" : "2017-07-21T14:06:43Z",
        "updatedAt" : "2017-07-21T14:06:44Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "f618f829-08d3-4919-a91d-b29e659d3aa1",
        "parentId" : "78281c56-f8b6-4383-819d-365157e52250",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "That's a great idea! I'll try to work on it soon and we can compare likes for likes.",
        "createdAt" : "2017-07-21T14:46:44Z",
        "updatedAt" : "2017-07-21T14:46:44Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "75a7561df90b7e86278d085cf13b595d6e442b26",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4,8 @@namespace ts {\n    // WARNING: The script `configureNightly.ts` uses a regexp to parse out these values.\n    // If changing the text in this section, be sure to test `configureNightly` too.\n    export const versionMajorMinor = \"2.5\";\n    /** The version of the TypeScript compiler release */"
  },
  {
    "id" : "ce3a75bc-adf9-4afd-a900-a534a2d20744",
    "prId" : 16724,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16724#pullrequestreview-46943137",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0363eb5d-7241-4285-ad51-09c4cc4a691b",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "also remove the check in `toKey` &mdash; `keyMapper ? keyMapper(path) : path`.",
        "createdAt" : "2017-06-28T19:29:43Z",
        "updatedAt" : "2017-06-28T20:01:04Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e82679559ba09b70dace669d4c849a4c13afc2a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +146,150 @@    }\n\n    export function createFileMap<T>(keyMapper: (key: string) => string): FileMap<T> {\n        const files = createMap<T>();\n        return {"
  },
  {
    "id" : "8dc2220b-2b3f-40ad-9142-24e4cfa2cf73",
    "prId" : 16684,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16684#pullrequestreview-47490064",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b00b970-62a9-42f8-8c29-7291ddd4ac38",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "This is used exactly ONCE. Is it worth extracting like that -- from performance, code clarity or any other perspective?",
        "createdAt" : "2017-06-30T07:31:41Z",
        "updatedAt" : "2017-06-30T20:28:46Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "11aa103e-f9f4-4003-b882-9b0ccc1bb352",
        "parentId" : "7b00b970-62a9-42f8-8c29-7291ddd4ac38",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "It's generally useful to factor generic code out of a more specific context. That way you don't have to worry about the specifics of how an array is converted to a set, and only have to worry about the actual problem domain.",
        "createdAt" : "2017-06-30T20:33:00Z",
        "updatedAt" : "2017-06-30T20:33:00Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "569ecabb0a6c83f8c0eb9249dd79cfa3e4e91231",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1103,1107 @@     * @param array the array of input elements.\n     */\n    export function arrayToSet<T>(array: T[], makeKey: (value: T) => string): Map<true> {\n        return arrayToMap<T, true>(array, makeKey, () => true);\n    }"
  },
  {
    "id" : "f63c91d0-c8e0-4a41-9986-015c73ee45bc",
    "prId" : 16646,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16646#pullrequestreview-57224889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65057312-0d3b-4a1a-8f17-90c2081e605f",
        "parentId" : null,
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "Is this a potential breaking change if anyone else is using matchFiles? Should depth be added as the final param?",
        "createdAt" : "2017-06-27T22:48:04Z",
        "updatedAt" : "2017-06-27T22:48:04Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      },
      {
        "id" : "7791e73e-71fd-4d3d-b592-fa1926406a4f",
        "parentId" : "65057312-0d3b-4a1a-8f17-90c2081e605f",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This is `/* @internal */`. (See comment at top of the enclosing namespace)",
        "createdAt" : "2017-06-28T14:35:53Z",
        "updatedAt" : "2017-06-28T14:35:53Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "662f2a0b-00ae-490d-8133-3e5dcf724c1e",
        "parentId" : "65057312-0d3b-4a1a-8f17-90c2081e605f",
        "authorId" : "7319a273-93d6-44e6-b3c2-96b26556a125",
        "body" : "What was the reason for intentionally breaking the signature here (the only answer above to the question is that it is supposedly private)? Regardless of the `/* @internal */` comment this method is exported (without an underscore or other indication of it being private) on the main export (e.g. `import { matchFiles } from 'typescript'`). \r\n\r\nThis is definitely a breaking change and makes life difficult for tooling that must support both 2.4 and 2.5.  See https://github.com/tildeio/broccoli-typescript-compiler/issues/49.",
        "createdAt" : "2017-08-18T13:59:09Z",
        "updatedAt" : "2017-08-18T13:59:09Z",
        "lastEditedBy" : "7319a273-93d6-44e6-b3c2-96b26556a125",
        "tags" : [
        ]
      },
      {
        "id" : "0a9c2228-4e01-4da4-8f03-19813c3e8521",
        "parentId" : "65057312-0d3b-4a1a-8f17-90c2081e605f",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Ref: #17891",
        "createdAt" : "2017-08-18T14:56:51Z",
        "updatedAt" : "2017-08-18T14:56:51Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9841bf7c054093fb6f302626c8a462114a462b76",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +2022,2026 @@    }\n\n    export function matchFiles(path: string, extensions: string[], excludes: string[], includes: string[], useCaseSensitiveFileNames: boolean, currentDirectory: string, depth: number | undefined, getFileSystemEntries: (path: string) => FileSystemEntries): string[] {\n        path = normalizePath(path);\n        currentDirectory = normalizePath(currentDirectory);"
  },
  {
    "id" : "137321be-e253-4424-b318-2d195ac5e8fd",
    "prId" : 16646,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16646#pullrequestreview-47421593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b79b5883-40fd-48ad-8407-7e9d4ec7ac00",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "That escalated quickly!\r\n\r\nWhence has this change come from?",
        "createdAt" : "2017-06-30T13:51:56Z",
        "updatedAt" : "2017-06-30T13:51:56Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "a5b64d15-2df7-449c-bb6e-828d8505ed13",
        "parentId" : "b79b5883-40fd-48ad-8407-7e9d4ec7ac00",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This shouldn't actually change the value. I needed to access just the `major.minor` version in a test, so I made a variable just for that, and wrote `version` in terms of it so they wouldn't get out-of-sync.",
        "createdAt" : "2017-06-30T14:28:59Z",
        "updatedAt" : "2017-06-30T14:28:59Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "ad2e4a5d-74b7-4bf0-b7b3-d6e4bff1af3a",
        "parentId" : "b79b5883-40fd-48ad-8407-7e9d4ec7ac00",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Ah, see that now, thanks a lot!\r\n\r\nI wonder whether moving complexity out of testing code into the compiler is worthy. Especially, now it's surfaced in the API in a confusing way (can we still assume normal version is dot-joined numbers?). And of course readability and text-searchability suffers.",
        "createdAt" : "2017-06-30T15:08:44Z",
        "updatedAt" : "2017-06-30T15:08:44Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "624b9fae-7733-46b9-9061-cbf9ef151998",
        "parentId" : "b79b5883-40fd-48ad-8407-7e9d4ec7ac00",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "versionMajorMinor was required in several places (not just tests), but previously we were parsing it out of `version`. Figured it would be better to construct `version` from `versionMajorMinor` than the other way around.",
        "createdAt" : "2017-06-30T15:25:23Z",
        "updatedAt" : "2017-06-30T15:25:23Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9841bf7c054093fb6f302626c8a462114a462b76",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +5,9 @@    export const versionMajorMinor = \"2.5\";\n    /** The version of the TypeScript compiler release */\n    export const version = `${versionMajorMinor}.0`;\n}\n"
  },
  {
    "id" : "19b57d1a-653a-4e94-a867-18be8d477abd",
    "prId" : 16299,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16299#pullrequestreview-42472764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "320352ed-946c-49f3-9cb9-f47fd4f4bc69",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Why not `ReadonlyArray<U>`?",
        "createdAt" : "2017-06-06T22:22:40Z",
        "updatedAt" : "2017-06-06T22:22:40Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "e5dd679a-9edb-4aa6-ad92-1da271f12b24",
        "parentId" : "320352ed-946c-49f3-9cb9-f47fd4f4bc69",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "We always create a fresh array. If the caller wants a readonly array they can type it that way.\r\nCan't just change this one to ReadonlyArray because `services/types.ts` currently uses mutable arrays. We should change that separately. #16312",
        "createdAt" : "2017-06-06T23:15:56Z",
        "updatedAt" : "2017-06-06T23:44:13Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e0236b281c844eca05cea561217993dc566304b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +522,526 @@    }\n\n    export function mapDefined<T, U>(array: ReadonlyArray<T>, mapFn: (x: T, i: number) => U | undefined): U[] {\n        const result: U[] = [];\n        for (let i = 0; i < array.length; i++) {"
  },
  {
    "id" : "dbc513b7-d875-4058-b74c-1fc61e2c7833",
    "prId" : 16274,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16274#pullrequestreview-50119238",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7a8b1ab-3af7-4fd1-a66c-3795c3582732",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "For my own edification, does this have some advantage over calling `concat`?",
        "createdAt" : "2017-07-13T22:05:18Z",
        "updatedAt" : "2017-08-09T20:45:04Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "c35b0d08-a886-4de9-88cc-09d3e62630d8",
        "parentId" : "c7a8b1ab-3af7-4fd1-a66c-3795c3582732",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "See #17076",
        "createdAt" : "2017-07-14T14:30:12Z",
        "updatedAt" : "2017-08-09T20:45:04Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "406b908b-35b4-4340-81e3-ebfaea5827f4",
        "parentId" : "c7a8b1ab-3af7-4fd1-a66c-3795c3582732",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Cute.",
        "createdAt" : "2017-07-14T18:27:34Z",
        "updatedAt" : "2017-08-09T20:45:04Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f74f55efdd3d71456d30340411cb870e9d9a5ff",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +2216,2220 @@            return needAllExtensions ? allSupportedExtensions : supportedTypeScriptExtensions;\n        }\n        return deduplicate([...allSupportedExtensions, ...extraFileExtensions.map(e => e.extension)]);\n    }\n"
  },
  {
    "id" : "875117dc-f882-4b9a-9637-7e52c721f5be",
    "prId" : 16227,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16227#pullrequestreview-41882859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4839fbc4-b001-4f0b-8ef2-2038be41f750",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Does the line ending matter?  I'm not sure how it changed, but I can revert it.",
        "createdAt" : "2017-06-02T20:59:25Z",
        "updatedAt" : "2017-06-02T20:59:26Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5541c9c5def741f1ce528c3e7ad809f5c04b046",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +5,9 @@    /** The version of the TypeScript compiler release */\n    export const version = \"2.3.5\";\n}\n\n/* @internal */"
  },
  {
    "id" : "84061df7-bc9a-44d8-b2d0-862057c62c2c",
    "prId" : 16120,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16120#pullrequestreview-41019148",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9911aee3-95af-4f7b-b920-14124456f821",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Don't see any reason to allow an `undefined` parameter since the function will always fail in that case.",
        "createdAt" : "2017-05-30T13:50:10Z",
        "updatedAt" : "2017-05-31T21:58:42Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "f36d4343-752b-4c6c-a7da-2fdfaf560d03",
        "parentId" : "9911aee3-95af-4f7b-b920-14124456f821",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "If we ever turn on `--strictNullChecks` there may be cases where `value` may be typed `undefined`.",
        "createdAt" : "2017-05-30T17:29:06Z",
        "updatedAt" : "2017-05-31T21:58:42Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ddbfcae8a40c6f1618594b774f6a7f321dd9a9c",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +1168,1172 @@    }\n\n    export function cast<TOut extends TIn, TIn = any>(value: TIn | undefined, test: (value: TIn) => value is TOut): TOut {\n        if (value !== undefined && test(value)) return value;\n        Debug.fail(`Invalid cast. The supplied value did not pass the test '${Debug.getFunctionName(test)}'.`);"
  },
  {
    "id" : "e6e9acf4-74c9-4ced-a8ef-e75a4955f756",
    "prId" : 12715,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12715#pullrequestreview-12294125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d88ca782-50b6-4cec-9624-a56a0241f67a",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "If you want the Map shim to have support for keys/values/entries iterators, take a look at https://gist.github.com/rbuckton/06d2c79bea46778f9e8bbeca77292087. That way there is less differentiation between what we need out of a native Map and what our shim provides.",
        "createdAt" : "2016-12-09T20:23:30Z",
        "updatedAt" : "2017-01-17T18:42:38Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "30ccc7a5d01dd090902c720193f50c817ff5d678",
    "line" : null,
    "diffHunk" : "@@ -1,1 +64,68 @@\n    // Keep the class inside a function so it doesn't get compiled if it's not used.\n    function shimMap(): { new<T>(): Map<T> } {\n\n        class MapIterator<T, U extends (string | T | [string, T])> {"
  },
  {
    "id" : "bbe3e252-8045-490e-a27d-49986144f83e",
    "prId" : 11342,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11342#pullrequestreview-3199204",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a2b02da-813a-42b3-a96f-28b39fc502f5",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Kind of funny that the `Identifier` constructor needs to take a `SyntaxKind`\n",
        "createdAt" : "2016-10-06T20:39:14Z",
        "updatedAt" : "2016-10-06T20:41:28Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "ab0fc0db-ef60-498c-af7c-f3fef3eca3e4",
        "parentId" : "9a2b02da-813a-42b3-a96f-28b39fc502f5",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Who knows, we could eventually have different kind's of `Identifier` nodes. \n",
        "createdAt" : "2016-10-06T20:40:47Z",
        "updatedAt" : "2016-10-06T20:41:28Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "519095f58585398d608cdf0acdee32f70d594dac",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1815,1819 @@        getNodeConstructor(): new (kind: SyntaxKind, pos?: number, end?: number) => Node;\n        getTokenConstructor(): new <TKind extends SyntaxKind>(kind: TKind, pos?: number, end?: number) => Token<TKind>;\n        getIdentifierConstructor(): new (kind: SyntaxKind.Identifier, pos?: number, end?: number) => Identifier;\n        getSourceFileConstructor(): new (kind: SyntaxKind.SourceFile, pos?: number, end?: number) => SourceFile;\n        getSymbolConstructor(): new (flags: SymbolFlags, name: string) => Symbol;"
  },
  {
    "id" : "220a2511-8b61-4c0e-9f17-aae48dde2457",
    "prId" : 11197,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11197#pullrequestreview-1848246",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1339aaa3-4faa-40ac-a3dc-40b388b5d5da",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I understand this is not part of this change. but can we replace this with a check at the use site, and other wise use the normal loop. optionally have two implementations. it would not make sens to have a function call just to return `>`\n",
        "createdAt" : "2016-09-27T23:52:49Z",
        "updatedAt" : "2016-09-28T06:37:17Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f2e3919b4a5193d68bc0027700dd0e2a28eeddb",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +513,517 @@        let low = 0;\n        let high = array.length - 1;\n        comparer = comparer !== undefined\n            ? comparer\n            : (v1, v2) => (v1 < v2 ? -1 : (v1 > v2 ? 1 : 0));"
  },
  {
    "id" : "be8d68dc-94a9-46c3-9a3c-8a42a651641f",
    "prId" : 10349,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a530647d-8cfe-48c1-95f5-bc84368291f0",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "measured how?\n",
        "createdAt" : "2016-08-15T21:17:01Z",
        "updatedAt" : "2016-09-01T19:40:45Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "5c6a0947-05c2-4252-a3ad-5442841855f9",
        "parentId" : "a530647d-8cfe-48c1-95f5-bc84368291f0",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "```\nconst assert = require(\"assert\");\nconst {Suite} = require(\"benchmark\");\nconst pad = require(\"pad\");\n\n// Implementations\n\nfunction loop(array, index) {\n    for (let i = index; i < array.length - 1; i++) {\n        array[i] = array[i + 1];\n    }\n    array.pop();\n}\n\nfunction splice(array, index) {\n    array.splice(index, 1);\n}\n\nfunction memcpy(array, index) {\n    array.copyWithin(index, index + 1);\n    array.pop();\n}\n\nconst fns = [loop, splice, memcpy];\n\n\n// Correctness check\n\nfunction randint(min, max) {\n    return min + Math.floor(Math.random() * (max - min));\n}\n\nfor (const f of fns) {\n    const arr = sampleArray(100);\n    for (let len = arr.length; len > 0; len--) {\n        const i = randint(0, len);\n        const em = arr[i];\n        assert(arr.indexOf(em) !== -1);\n        f(arr, i);\n        assert(arr.indexOf(em) === -1);\n        assert.equal(arr.length, len - 1);\n    }\n}\n\n\n// Test helpers\n\nfunction sampleArray(N) {\n    const arr = new Array(N);\n    for (let i = 0; i < N; i++) {\n        arr[i] = i;\n    }\n    return arr;\n}\n\nfunction testFront(n, remove) {\n    const arr = sampleArray(n);\n    for (let len = arr.length; len > 0; len--) {\n        remove(arr, 0);\n        assert(arr.length === len - 1);\n    }\n}\n\nfunction testRear(n, remove) {\n    const arr = sampleArray(n);\n    for (let len = arr.length; len > 0; len--) {\n        remove(arr, len - 1);\n        assert(arr.length === len - 1);\n    }\n}\n\n\n// Perf test\n\nfunction test(makeSuite) {\n    const suite = new Suite();\n    makeSuite(suite);\n    suite.on(\"complete\", function() {\n        this.forEach(({name, stats}) => {\n            console.log(`${name}: ${stats.mean * 1000}ms`);\n        });\n    });\n    suite.on(\"error\", error => {\n        throw error.target.error;\n    });\n    suite.run();\n}\n\ntest(suite => {\n    for (const test of [testFront, testRear]) {\n        for (const n of [10, 100, 1000]) {\n            for (const f of fns) {\n                suite.add(`${pad(9, test.name)} ${pad(4, n)} ${pad(6, f.name)}`, () => test(n, f));\n            }\n        }\n    }\n});\n```\n\nResults:\n\n```\ntestFront   10   loop: 0.00028075305868859946ms\ntestFront   10 splice: 0.0024167716220477586ms\ntestFront   10 memcpy: 0.003104232232456715ms\n\ntestFront  100   loop: 0.014285475240188552ms\ntestFront  100 splice: 0.023001260699088717ms\ntestFront  100 memcpy: 0.28665747186761226ms\n\ntestFront 1000   loop: 1.1882795027214252ms\ntestFront 1000 splice: 0.23387040256038646ms\ntestFront 1000 memcpy: 26.856770945312498ms\n\n testRear   10   loop: 0.0001227723598808805ms\n testRear   10 splice: 0.002122261221082299ms\n testRear   10 memcpy: 0.0004173716600574439ms\n\n testRear  100   loop: 0.001598535853706533ms\n testRear  100 splice: 0.021219825430875625ms\n testRear  100 memcpy: 0.0037203930576036157ms\n\n testRear 1000   loop: 0.015465716346486885ms\n testRear 1000 splice: 0.21165966573636746ms\n testRear 1000 memcpy: 0.03714556813039422ms\n```\n\n`loop` is best for all but `testFront 1000`, which is a pretty unlikely scenario.\n",
        "createdAt" : "2016-08-16T14:08:53Z",
        "updatedAt" : "2016-09-01T19:40:45Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "1e064655-3dd8-4e83-8ab6-2843d676627a",
        "parentId" : "a530647d-8cfe-48c1-95f5-bc84368291f0",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "For really long comments, there's https://gist.github.com ;)\n",
        "createdAt" : "2016-08-21T18:21:40Z",
        "updatedAt" : "2016-09-01T19:40:45Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7b6cc89b5bac9294f06a91dc88674888f51f3d6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1503,1507 @@    /** Remove an item from an array, moving everything to its right one space left. */\n    export function orderedRemoveItemAt<T>(array: T[], index: number): void {\n        // This seems to be faster than either `array.splice(i, 1)` or `array.copyWithin(i, i+ 1)`.\n        for (let i = index; i < array.length - 1; i++) {\n            array[i] = array[i + 1];"
  },
  {
    "id" : "325a21e3-3c70-4fa7-9b0e-30ad04a394be",
    "prId" : 10115,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdf3072d-cab2-4351-b234-0228aa1dd460",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "what changes on this line? Is it the line ending?\n",
        "createdAt" : "2016-08-03T20:53:14Z",
        "updatedAt" : "2016-08-03T20:53:14Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "ec9d7d8d-e2e1-4b10-9d8a-fd1fe26b61eb",
        "parentId" : "bdf3072d-cab2-4351-b234-0228aa1dd460",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "It's line ending. This line ends with just an `LF` in master.\n\nWhich is strange, because we have a lint rule covering this which is not triggering.\n",
        "createdAt" : "2016-08-03T20:56:52Z",
        "updatedAt" : "2016-08-03T20:56:52Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "8838353a-f264-49dc-94ee-74ea9c667619",
        "parentId" : "bdf3072d-cab2-4351-b234-0228aa1dd460",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Does it only detect _extra_ line endings? It just fired for me when I had an extra.\n",
        "createdAt" : "2016-08-03T21:42:54Z",
        "updatedAt" : "2016-08-03T21:42:54Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "204f2c16c0d6ff851e4798c03a9646b625ac2bd7",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +946,950 @@     *  (\\\\.(?!min\\\\.js$))?     # matches . characters but not if they are part of the .min.js file extension\n     */\n    const singleAsteriskRegexFragmentFiles = \"([^./]|(\\\\.(?!min\\\\.js$))?)*\";\n    const singleAsteriskRegexFragmentOther = \"[^/]*\";\n"
  },
  {
    "id" : "4f020d26-fb5d-4800-b0a3-a134ca20a819",
    "prId" : 10115,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88e81ab9-5f8d-465d-a9fd-39deef1a55f1",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "are there any other places that should use this function? I think we use objects as maps quite a lot.\n",
        "createdAt" : "2016-08-03T20:53:54Z",
        "updatedAt" : "2016-08-03T20:53:54Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "28730266-9baf-44b9-9377-23157d0d5ebe",
        "parentId" : "88e81ab9-5f8d-465d-a9fd-39deef1a55f1",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "There are a lot of places that use code like this -- just search for `] ||` -- but they seem to be using numeric IDs (so are safe from default properties) or are safe for other reasons.\nI'm also currently looking into using Maps as maps.\n",
        "createdAt" : "2016-08-03T21:02:06Z",
        "updatedAt" : "2016-08-03T21:02:06Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "204f2c16c0d6ff851e4798c03a9646b625ac2bd7",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +328,332 @@    }\n\n    export function getOrUpdateProperty<T>(map: Map<T>, key: string, makeValue: () => T): T {\n        return hasProperty(map, key) ? map[key] : map[key] = makeValue();\n    }"
  },
  {
    "id" : "509ac099-9c80-4266-8ff3-78703f7092f0",
    "prId" : 9941,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4658e1c-da32-48d5-b0c1-dc21dfba3a62",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "what's the diff here?\n",
        "createdAt" : "2016-08-02T20:42:10Z",
        "updatedAt" : "2016-08-30T00:18:10Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8ff546512f3c27384a70239d73fc6be3d5dccbc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1109,1113 @@     *  (\\\\.(?!min\\\\.js$))?     # matches . characters but not if they are part of the .min.js file extension\n     */\n    const singleAsteriskRegexFragmentFiles = \"([^./]|(\\\\.(?!min\\\\.js$))?)*\";\n    const singleAsteriskRegexFragmentOther = \"[^/]*\";\n"
  },
  {
    "id" : "ad0e8b48-2d7e-4b06-bc53-8815b9845945",
    "prId" : 9580,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2342081b-d666-47d8-9c4e-3abb7ef8d315",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "@rakatyal just remembered your tslint rule would have issues with this because it can't distinguish between `ts.Symbol` and `Symbol`\n",
        "createdAt" : "2016-07-09T00:34:45Z",
        "updatedAt" : "2016-07-11T20:49:49Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6414a5721c833148d646b91b6f68ee0ea1c265aa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1238,1242 @@    }\n\n    function Symbol(this: Symbol, flags: SymbolFlags, name: string) {\n        this.flags = flags;\n        this.name = name;"
  },
  {
    "id" : "123f4eed-c109-4c76-a85f-0000ac0db4b8",
    "prId" : 7440,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cfb3b33-0a44-4539-9b09-ef0936b34e0c",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "From the code, isnt  the default case is unknown?\n",
        "createdAt" : "2016-03-10T00:57:58Z",
        "updatedAt" : "2016-03-10T00:57:58Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe9da694b2c21b41247e0e9b685a190285773729",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +784,788 @@        // If the 'scriptKind' is 'undefined' or 'Unknown' then we attempt\n        // to get the ScriptKind from the file name. If it cannot be resolved\n        // from the file name then the default 'TS' script kind is returned.\n        return (scriptKind || getScriptKindFromFileName(fileName)) || ScriptKind.TS;\n    }"
  },
  {
    "id" : "fa003c42-69e8-41a0-9087-45a1f9558342",
    "prId" : 7192,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a45b0a6b-1166-4d59-b6e3-57dc60ea0be2",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I don't think this temp is needed for readability or efficiency.\n",
        "createdAt" : "2016-03-02T00:05:05Z",
        "updatedAt" : "2016-03-18T22:21:42Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc00f4cd99501040de30dd6d620330a3c78f0b8f",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +256,260 @@            while (start < len) {\n                while (pos < len) {\n                    const value = array[pos];\n                    key = keyfn(value, pos);\n                    if (pos === 0) {"
  },
  {
    "id" : "14753010-0d5f-4f9d-9603-f12a52bda222",
    "prId" : 7179,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b41fd67-e6ea-47cd-b272-f1b3e3f68e1d",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Why no hasOwnProperty check here?\n",
        "createdAt" : "2016-03-04T10:46:17Z",
        "updatedAt" : "2016-03-04T10:46:17Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "2378fb29-a5e5-47f7-b83b-8e1a221bbfc1",
        "parentId" : "8b41fd67-e6ea-47cd-b272-f1b3e3f68e1d",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "It should have. Thanks for pointing out.\n",
        "createdAt" : "2016-03-04T18:26:41Z",
        "updatedAt" : "2016-03-04T18:26:41Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8772bc0a216023ae978b619fcd29a5567506225",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +281,285 @@    export function getKeys<T>(map: Map<T>): string[] {\n        const keys: string[] = [];\n        for (const key in map) {\n            keys.push(key);\n        }"
  },
  {
    "id" : "ff20fb94-9b11-4eab-b0fa-64c4ffcac62d",
    "prId" : 5980,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "437a08ff-19bb-44b4-be00-cc5eff9edcf6",
        "parentId" : null,
        "authorId" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "body" : "doesn't this make more sense in sys.ts ?\n",
        "createdAt" : "2015-12-16T21:49:24Z",
        "updatedAt" : "2016-01-05T18:25:48Z",
        "lastEditedBy" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "tags" : [
        ]
      },
      {
        "id" : "30a3e563-9354-480c-91a7-cf5fabbb2591",
        "parentId" : "437a08ff-19bb-44b4-be00-cc5eff9edcf6",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Most of our other path logic exists in core.ts.\n",
        "createdAt" : "2015-12-16T23:40:34Z",
        "updatedAt" : "2016-01-05T18:25:48Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1205ebdfbfebc94b35abab251237bdfbff213c5",
    "line" : 225,
    "diffHunk" : "@@ -1,1 +959,963 @@    }\n\n    export function matchFiles(path: string, extensions: string[], excludes: string[], includes: string[], useCaseSensitiveFileNames: boolean, currentDirectory: string, getFileSystemEntries: (path: string) => FileSystemEntries): string[] {\n        path = normalizePath(path);\n        currentDirectory = normalizePath(currentDirectory);"
  },
  {
    "id" : "71f98978-19e8-4360-a768-4665bae23abe",
    "prId" : 5980,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d1938f0-35e3-4896-b105-c075a8e83924",
        "parentId" : null,
        "authorId" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "body" : "Any specific reason for these values?\n",
        "createdAt" : "2015-12-16T21:53:32Z",
        "updatedAt" : "2016-01-05T18:25:48Z",
        "lastEditedBy" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "tags" : [
        ]
      },
      {
        "id" : "1950c88d-21c2-4716-8cb7-abc891d96d7e",
        "parentId" : "7d1938f0-35e3-4896-b105-c075a8e83924",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "It is a formal way to specify the offsets to each extension in `allSupportedExtensions`, and is used to disambiguate between `file.ts` and `file.d.ts` (or also `file.js` with `-allowJs`) in the same directory. This could have just been constant values, but I felt this was more descriptive.\n",
        "createdAt" : "2015-12-16T23:43:50Z",
        "updatedAt" : "2016-01-05T18:25:48Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1205ebdfbfebc94b35abab251237bdfbff213c5",
    "line" : 315,
    "diffHunk" : "@@ -1,1 +1064,1068 @@     * allSupportedExtensions array.\n     */\n    export const enum ExtensionPriority {\n        TypeScriptFiles = 0,\n        DeclarationAndJavaScriptFiles = 2,"
  },
  {
    "id" : "c7fa7b98-cb2f-4196-b30e-49dd7bd36e9b",
    "prId" : 5728,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce1aaa57-193e-43c3-8976-81bcc6733a39",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "do we need the first argument here?\n",
        "createdAt" : "2016-01-25T21:54:08Z",
        "updatedAt" : "2016-01-27T05:38:22Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "38ea58aa-9282-4eb1-8e76-24eb9c974dce",
        "parentId" : "ce1aaa57-193e-43c3-8976-81bcc6733a39",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "this is necessary to skip `host` argument in the `trace` function\n",
        "createdAt" : "2016-01-25T22:04:24Z",
        "updatedAt" : "2016-01-27T05:38:22Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "adacad326a3d023f82f076b2aa5f92334610226b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +441,445 @@\n    /* internal */\n    export function formatMessage(dummy: any, message: DiagnosticMessage): string {\n        let text = getLocaleSpecificMessage(message);\n"
  },
  {
    "id" : "8bdb26eb-7dda-4ca1-bd16-4509e3d4601d",
    "prId" : 5273,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "833d9478-7402-4c8a-af0c-70681ccf9270",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "For an empty string key, you'll always use the non-localized message unless you use `message.key in localizedDiagnosticMessages`. Though, that would be the most ridiculous edge case I may have ever brought up.\n",
        "createdAt" : "2015-10-15T19:02:34Z",
        "updatedAt" : "2015-10-15T19:03:08Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "90cc848a15cb5d6d405bd2111cc06afd849fb0c9",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +367,371 @@\n    export function getLocaleSpecificMessage(message: DiagnosticMessage) {\n        return localizedDiagnosticMessages && localizedDiagnosticMessages[message.key]\n            ? localizedDiagnosticMessages[message.key]\n            : message.message;"
  },
  {
    "id" : "f6cac0b0-d70d-4378-8cd5-fcf5f200cbc8",
    "prId" : 5127,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1935ffad-8a49-407d-b112-639a775ac066",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "`!==`\n",
        "createdAt" : "2015-10-14T23:42:35Z",
        "updatedAt" : "2015-10-14T23:57:27Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcfc25eeb040390492716626757274c945ebd47f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +837,841 @@        let copiedList: T[] = [];\n        for (var i = 0, len = list.length; i < len; i++) {\n            if (list[i] != item) {\n                copiedList.push(list[i]);\n            }"
  },
  {
    "id" : "686b5776-bce0-45c1-b6b3-54a2eb49591b",
    "prId" : 5127,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11987a0f-986a-4486-b888-36723ee13644",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "``` ts\nfor(extension of supportedExtensions) {\n   if (!fileExtensionIs(fileName, extension)) {\n       return false;\n   }\n}\n\nreturn true;\n```\n",
        "createdAt" : "2015-10-14T23:55:52Z",
        "updatedAt" : "2015-10-14T23:57:27Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcfc25eeb040390492716626757274c945ebd47f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +730,734 @@        if (!fileName) { return false; }\n\n        let dotIndex = fileName.lastIndexOf(\".\");\n        if (dotIndex < 0) {\n            return false;"
  },
  {
    "id" : "8760c163-e65d-408b-83bd-3e595c6dd5a7",
    "prId" : 5127,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2fbc93f-5782-46b2-8e14-405c587656ae",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "use `for-of`\n",
        "createdAt" : "2015-10-15T02:16:36Z",
        "updatedAt" : "2015-10-15T02:16:36Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcfc25eeb040390492716626757274c945ebd47f",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +836,840 @@    export function copyListRemovingItem<T>(item: T, list: T[]) {\n        let copiedList: T[] = [];\n        for (var i = 0, len = list.length; i < len; i++) {\n            if (list[i] != item) {\n                copiedList.push(list[i]);"
  },
  {
    "id" : "3b174ad1-0f90-4539-98e0-2145f17f88d2",
    "prId" : 3291,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8d91056-9154-4f0c-82db-1b8d347d4f08",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Why would file be undefined?\n",
        "createdAt" : "2015-05-28T17:40:43Z",
        "updatedAt" : "2015-05-28T17:40:43Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "9aab98419b5f8cb54cdcb781854292aa722ee08a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +314,318 @@        Debug.assert(length >= 0, \"length must be non-negative, is \" + length);\n\n        if (file) {\n            Debug.assert(start <= file.text.length, `start must be within the bounds of the file. ${ start } > ${ file.text.length }`);\n            Debug.assert(end <= file.text.length, `end must be the bounds of the file. ${ end } > ${ file.text.length }`);"
  },
  {
    "id" : "8b42657c-8b64-4c9f-9d30-d35f47d7f961",
    "prId" : 3144,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e906f0d6-39f7-4815-87a3-92e503136ad0",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why `lastIndexOf`? Does `file://file://foo` need to be special-cased in some way?\n",
        "createdAt" : "2015-05-15T07:21:32Z",
        "updatedAt" : "2015-05-15T07:42:17Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "5420e469-7c78-4e60-b868-d4b7d65aea50",
        "parentId" : "e906f0d6-39f7-4815-87a3-92e503136ad0",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : " `lastIndexOf` with start position 0 here works as `startsWith` since it searches backwards starting from given position\n",
        "createdAt" : "2015-05-15T07:35:37Z",
        "updatedAt" : "2015-05-15T07:42:17Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "6fbfa9f4-2365-4fe5-b62b-c2d30531331e",
        "parentId" : "e906f0d6-39f7-4815-87a3-92e503136ad0",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Ah, so it's a faster check.\n",
        "createdAt" : "2015-05-15T08:26:56Z",
        "updatedAt" : "2015-05-15T08:26:56Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8582d80459930c1b05f26a7cadc87422b3babab0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +465,469 @@        // file:///folder1/file1 - this is a correct URI\n        // file://folder2/file2 - this is an incorrect URI\n        if (path.lastIndexOf(\"file:///\", 0) === 0) {\n            return \"file:///\".length;\n        }"
  },
  {
    "id" : "661f4538-c57e-4323-b43f-0791ca8e0096",
    "prId" : 1735,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50afd69f-682e-4dde-bf5f-44dc12dae6ed",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "We use some stuff like this in the harness - @yuit was questioning the logic a week ago. Not sure if the problem persists.\n",
        "createdAt" : "2015-01-20T06:36:34Z",
        "updatedAt" : "2015-02-03T02:49:21Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "e0d32190-b49d-4935-8cc2-440dbef4023f",
        "parentId" : "50afd69f-682e-4dde-bf5f-44dc12dae6ed",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "should we be more generic here for future targets? something that converts ScriptTaget into string and use that with lib.scriptTagetString.d.ts ?\n",
        "createdAt" : "2015-01-20T20:27:59Z",
        "updatedAt" : "2015-02-03T02:49:21Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "5dfb5090-df35-47bf-9ca0-7e27b9194f93",
        "parentId" : "50afd69f-682e-4dde-bf5f-44dc12dae6ed",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i think we should only have one lib file with some details inside on when declarations are relevant, e.g. decorators/attribute annotations that say if this declaration applies to the current compilation or not.\nmanaging multiple files has been a hassle.\n",
        "createdAt" : "2015-01-20T20:41:11Z",
        "updatedAt" : "2015-02-03T02:49:21Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "ee056235-c58d-42a6-81cd-a1bfab8d2c70",
        "parentId" : "50afd69f-682e-4dde-bf5f-44dc12dae6ed",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "@mhegazy I agree on that. Also, should we make sure that the target exist first? or we are guarantee to have default target as there was a problem in the harness when target isn't specified \n",
        "createdAt" : "2015-01-20T22:24:11Z",
        "updatedAt" : "2015-02-03T02:49:21Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6bd9f74d233b7c8e1fd9611fae51e78589b9835",
    "line" : null,
    "diffHunk" : "@@ -1,1 +648,652 @@        return options.target === ScriptTarget.ES6 ? \"lib.es6.d.ts\" : \"lib.d.ts\";\n    }\n\n    export interface ObjectAllocator {\n        getNodeConstructor(kind: SyntaxKind): new () => Node;"
  },
  {
    "id" : "977121e3-cf42-45a5-9591-e99e4a38a260",
    "prId" : 1341,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de424b0f-9da1-4591-a05f-155fa976a561",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Can we just use JSON here?  And polyfill for the one host that doesn't support it?\n",
        "createdAt" : "2014-12-03T00:25:53Z",
        "updatedAt" : "2014-12-03T00:25:53Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "d505f563-4384-495e-a1b7-06363120e90d",
        "parentId" : "de424b0f-9da1-4591-a05f-155fa976a561",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "so I would do a check if JSON is defined, and use it to escape, and fallback to escapestring otherwise. other than that the change looks good to me.\n",
        "createdAt" : "2014-12-09T22:24:17Z",
        "updatedAt" : "2014-12-09T22:24:17Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "538f033f0d453d17f0ded0e263bd831593bf12db",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +594,598 @@    var backslashOrDoubleQuote = /[\\\"\\\\]/g;\n    var escapedCharsRegExp = /[\\0-\\19\\t\\v\\f\\b\\0\\r\\n\\u2028\\u2029\\u0085]/g;\n    var escapedCharsMap: Map<string> = {\n        \"\\0\": \"\\\\0\",\n        \"\\t\": \"\\\\t\","
  },
  {
    "id" : "1981af96-3371-412b-9f16-b3b976949b14",
    "prId" : 824,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfb59f6c-6d9e-4fb6-b85b-0d5b70ae5dd2",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "'distinct'.\n\n'deduplicate' indicates you are mutating in the array in place.   'distinct' is the linq name for getting back the set of unique elements.\n",
        "createdAt" : "2014-11-04T11:12:28Z",
        "updatedAt" : "2014-11-04T11:12:28Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5cd4145d5e2e02672018c267dbfc00ee1d2ebcb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +83,87 @@    }\n\n    export function deduplicate<T>(array: T[]): T[] {\n        if (array) {\n            var result: T[] = [];"
  },
  {
    "id" : "b8ecb5a1-0ab3-471f-a39f-298b5f272b6a",
    "prId" : 709,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c8b2422-1f9d-4661-82c8-087c79160ab7",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "no newline.\n",
        "createdAt" : "2014-09-20T00:03:45Z",
        "updatedAt" : "2014-10-04T00:46:05Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1d15c792baca3aad5c920fa4c64e48120943062",
    "line" : null,
    "diffHunk" : "@@ -1,1 +535,539 @@\n    var supportedExtensions = [\".d.ts\", \".ts\", \".js\"];\n\n    export function removeFileExtension(path: string): string {\n        for (var i = 0; i < supportedExtensions.length; i++) {"
  },
  {
    "id" : "49d4421b-46ca-4dc1-ba9d-ecd609995e41",
    "prId" : 351,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ea53d67-ede1-40bf-b21f-502e728ead7a",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "not sure how the generic is any better.\n",
        "createdAt" : "2014-08-04T23:42:52Z",
        "updatedAt" : "2014-08-05T23:41:24Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "6056185d-b1c5-4f35-ad96-d2fd5f43277c",
        "parentId" : "4ea53d67-ede1-40bf-b21f-502e728ead7a",
        "authorId" : "d028362c-70f3-4a60-b6bc-f80ee67fc04b",
        "body" : "I think for `compareValues('1',1)` => error \n",
        "createdAt" : "2014-08-05T00:04:25Z",
        "updatedAt" : "2014-08-05T23:41:24Z",
        "lastEditedBy" : "d028362c-70f3-4a60-b6bc-f80ee67fc04b",
        "tags" : [
        ]
      },
      {
        "id" : "3cf495e0-3343-404f-ad68-bcac6107d464",
        "parentId" : "4ea53d67-ede1-40bf-b21f-502e728ead7a",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "`compareValues('1', 1)` computes a BCT of `{}` and succeeds without complaint, see #360\n",
        "createdAt" : "2014-08-05T04:14:09Z",
        "updatedAt" : "2014-08-05T23:41:24Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "a24b175586c841b25a8ea195c572ad347f8f027d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +260,264 @@    }\n\n    export function compareValues<T>(a: T, b: T): number {\n        if (a === b) return 0;\n        if (a === undefined) return -1;"
  }
]