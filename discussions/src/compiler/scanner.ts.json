[
  {
    "id" : "174fbffb-2d11-48b8-976b-1964577bfc69",
    "prId" : 43854,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43854#pullrequestreview-647333605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77ae8780-787b-48b3-aa96-7555be6d31c6",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Dont you need to set canConsumeStar to false in the default case as well? ",
        "createdAt" : "2021-04-27T23:37:55Z",
        "updatedAt" : "2021-04-27T23:37:55Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "29587f8c-4968-474f-917f-07d2182bffdc",
        "parentId" : "77ae8780-787b-48b3-aa96-7555be6d31c6",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I don’t think so—the default case is either whitespace (which doesn’t change whether we can consume a leading `*`) or it breaks and returns.",
        "createdAt" : "2021-04-28T17:23:57Z",
        "updatedAt" : "2021-04-28T17:23:57Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d2564ed8da5e5032d608051126d9e11489003b5",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +633,637 @@                case CharacterCodes.asterisk:\n                    if (canConsumeStar) {\n                        pos++;\n                        canConsumeStar = false;\n                        continue;"
  },
  {
    "id" : "b29d01fe-7dda-4c5f-8bc3-287582a36f44",
    "prId" : 40336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40336#pullrequestreview-501246851",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba6e61f7-c0cc-4055-b99a-ce8a19b57329",
        "parentId" : null,
        "authorId" : "c74991c3-45b2-4f30-b998-ef2b620fd4e1",
        "body" : "Note that this change should be reverted since #40580 has removed `uncapitalize` and `intrinsic` is 9 characters long.",
        "createdAt" : "2020-10-02T15:43:21Z",
        "updatedAt" : "2020-10-02T15:43:21Z",
        "lastEditedBy" : "c74991c3-45b2-4f30-b998-ef2b620fd4e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d38a3880d4a65be90fe1abee9d6d96f2819e399d",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1515,1519 @@            // Reserved words are between 2 and 12 characters long and start with a lowercase letter\n            const len = tokenValue.length;\n            if (len >= 2 && len <= 12) {\n                const ch = tokenValue.charCodeAt(0);\n                if (ch >= CharacterCodes.a && ch <= CharacterCodes.z) {"
  },
  {
    "id" : "03df5892-9a15-4210-9f90-f2ef394b92e4",
    "prId" : 38228,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38228#pullrequestreview-402102211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa651cbd-b0f8-4483-8471-193b3637971d",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Same here..",
        "createdAt" : "2020-04-28T18:28:32Z",
        "updatedAt" : "2020-05-06T03:30:19Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "87c813502c52c6bee95590dee0dead60fd89edb4",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +1781,1785 @@                            }\n\n                            commentDirectives = appendIfCommentDirective(commentDirectives, text.slice(lastLineStart, pos), commentDirectiveRegExMultiLine, lastLineStart);\n\n                            if (!commentClosed) {"
  },
  {
    "id" : "72a840d8-4a66-46cd-ac17-2e8aeaa7e4d4",
    "prId" : 32769,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32769#pullrequestreview-273323501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28efce06-ca00-48bb-89f5-f8222e8fd253",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Should we also be ignoring errors on invalid Unicode escapes, like `\\u{1010101010}`? That'll require passing a flag into `scanIdentifierParts` and the other callers of `scanExtendedUnicodeEscape`.",
        "createdAt" : "2019-08-09T06:06:35Z",
        "updatedAt" : "2019-08-09T19:31:46Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "4a56bfba-9bac-4b0d-8bea-fd8b73e02a08",
        "parentId" : "28efce06-ca00-48bb-89f5-f8222e8fd253",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I can't get any error with the current code! I compared\r\n\r\n```js\r\n/**\r\n * unicode-escape = \\u{abcdefghi} -- should not have error for invalid unicode escape\r\n */\r\nvar hi = \"\\u{00fa}\\u{abcdefghi}\"\r\n```\r\n\r\nThere's an error for the second `abcdefghi` but not the first.\r\n\r\nI'll add a test to make sure it stays that way.",
        "createdAt" : "2019-08-09T15:36:57Z",
        "updatedAt" : "2019-08-09T19:31:46Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "2fe0f6f5-554c-4e52-bcab-b3f14bc68d51",
        "parentId" : "28efce06-ca00-48bb-89f5-f8222e8fd253",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "You should also check, just in case, the scenario when the unicode escape is the second character in the identifier `eg, q\\u{abcdefghi}` - The first character is handled inline in `scanJsDocToken` with a non-erroring `peek` (so it can fallback to the `Invalid character` error you just removed), while the second character (and beyond) is handled in `scanIdentifierParts` which, could always behave different. ",
        "createdAt" : "2019-08-09T18:13:28Z",
        "updatedAt" : "2019-08-09T19:31:46Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "982d4606-15b4-4ad3-b025-f802cc5e1bec",
        "parentId" : "28efce06-ca00-48bb-89f5-f8222e8fd253",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Done.",
        "createdAt" : "2019-08-09T19:31:42Z",
        "updatedAt" : "2019-08-09T19:31:46Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "f73909fc75b98e37bc127cf26a2dd8bb42c80f2e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2160,2164 @@                        return token = getIdentifierToken();\n                    }\n                    pos++;\n                    return token = SyntaxKind.Unknown;\n            }"
  },
  {
    "id" : "8c24eb88-d886-4ac1-a9c4-76d470e87e58",
    "prId" : 32725,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32725#pullrequestreview-271066340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "553f39d8-fc93-4b50-80ee-11d7ce457bb7",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Note that this just peeks to make sure the escape scans and doesn't validate that the resulting number is in the expected range - `scanExtendedUnicodeEscape` (which is called after both uses to get the real value) does all that.",
        "createdAt" : "2019-08-06T00:34:39Z",
        "updatedAt" : "2019-08-06T00:34:40Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec70458a72132ffc1a161972725d9cf2ffa8d126",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1343,1347 @@\n\n        function peekExtendedUnicodeEscape(): number {\n            if (languageVersion >= ScriptTarget.ES2015 && codePointAt(text, pos + 1) === CharacterCodes.u && codePointAt(text, pos + 2) === CharacterCodes.openBrace) {\n                const start = pos;"
  },
  {
    "id" : "baf0dbfc-c1e2-4111-aaf7-44d049bb8125",
    "prId" : 32720,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32720#pullrequestreview-271020665",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f765a41-622e-4e52-ba33-1091ba717569",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "if the intention of this function is to verify that the given string can be used as identifier, it should probably also support unicode escape sequences like the Identifier parsing in `scan`",
        "createdAt" : "2019-08-05T20:43:45Z",
        "updatedAt" : "2019-08-05T23:36:16Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      },
      {
        "id" : "9f613dfd-90a0-44ae-808f-688bff3375b4",
        "parentId" : "4f765a41-622e-4e52-ba33-1091ba717569",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "`isIdentifierText` should never be fed text containing escape sequences that still need to be interpreted. It operates on values of text, not raw text.",
        "createdAt" : "2019-08-05T21:42:33Z",
        "updatedAt" : "2019-08-05T23:36:16Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e4240e99a5a516a6d7bc269edf7dd7865c7c01d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +833,837 @@    /* @internal */\n    export function isIdentifierText(name: string, languageVersion: ScriptTarget | undefined): boolean {\n        let ch = codePointAt(name, 0);\n        if (!isIdentifierStart(ch, languageVersion)) {\n            return false;"
  },
  {
    "id" : "41a5df83-cf9d-4c5d-b3ef-b375c6ceeaef",
    "prId" : 30829,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30829#pullrequestreview-257714626",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d284dfda-115d-4f18-9dc1-e805efe77ad0",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "the error for ShebangTrivia seems like it changed, so I wonder if this breaks parsing of it somehow.",
        "createdAt" : "2019-07-02T18:16:27Z",
        "updatedAt" : "2019-12-24T10:22:58Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "073e9dcc-8ac4-449c-8ecb-ecb66e8003bd",
        "parentId" : "d284dfda-115d-4f18-9dc1-e805efe77ad0",
        "authorId" : "7c818427-dca2-4bb8-94a1-f7e70e4a264a",
        "body" : "The shebangTrivia error got slightly more verbose. The first line is new and the rest were unchanged:\r\n\r\n```\r\n!!! error TS1128: Declaration or statement expected.\r\n     \r\n!!! error TS1127: Invalid character.\r\n     ~~~~~~~~~\r\n!!! error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\r\n               ~~~\r\n!!! error TS2304: Cannot find name 'env'.\r\n                   ~~~~\r\n!!! error TS1005: ';' expected.\r\n                   ~~~~\r\n!!! error TS2304: Cannot find name 'node'\r\n\r\n```\r\n\r\nSo the changes in this PR make the error more verbose and not any more informative.\r\nWhat can we do to make this better? I think it makes sense for the error message to change because we've changed the places where `#` is allowed.",
        "createdAt" : "2019-07-03T20:16:54Z",
        "updatedAt" : "2019-12-24T10:22:58Z",
        "lastEditedBy" : "7c818427-dca2-4bb8-94a1-f7e70e4a264a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbb84d1e81b35f944d994f6c71c3eda40f944b85",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1894,1898 @@                        pos++;\n                        return token = SyntaxKind.Unknown;\n                    case CharacterCodes.hash:\n                        if (pos !== 0 && text[pos + 1] === \"!\") {\n                            error(Diagnostics.can_only_be_used_at_the_start_of_a_file);"
  },
  {
    "id" : "60ce4039-7da8-4ece-bd3f-f8ac796fb778",
    "prId" : 30829,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30829#pullrequestreview-257732613",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad37bab8-e707-4534-8ce8-6b9f19995037",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "why not include the whitespace-handling cases the way Identifier does? Is it possible to share code with the identifier case? (This might hurt performance, so might not be worth it.)",
        "createdAt" : "2019-07-02T18:19:57Z",
        "updatedAt" : "2019-12-24T10:22:58Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "04a42e1c-e71c-4635-ac8c-8fb08becc097",
        "parentId" : "ad37bab8-e707-4534-8ce8-6b9f19995037",
        "authorId" : "7c818427-dca2-4bb8-94a1-f7e70e4a264a",
        "body" : "The repetition troubled me as well, but I couldn't come up with a way to extract the common part and keep the code readable.\r\nThese are the five lines in common, and everything around them is slightly different:\r\n\r\n```ts\r\n                            while (pos < end && isIdentifierPart(ch = text.charCodeAt(pos), languageVersion)) pos++;\r\n                            tokenValue = text.substring(tokenPos, pos);\r\n                            if (ch === CharacterCodes.backslash) {\r\n                                tokenValue += scanIdentifierParts();\r\n                            }\r\n```\r\n",
        "createdAt" : "2019-07-03T20:59:48Z",
        "updatedAt" : "2019-12-24T10:22:58Z",
        "lastEditedBy" : "7c818427-dca2-4bb8-94a1-f7e70e4a264a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbb84d1e81b35f944d994f6c71c3eda40f944b85",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1909,1913 @@                            }\n                            return token = SyntaxKind.PrivateIdentifier;\n                        }\n                        error(Diagnostics.Invalid_character);\n                        // no `pos++` because already advanced past the '#'"
  },
  {
    "id" : "d832b24c-15af-4fd2-8f81-d56bcaf5d604",
    "prId" : 28896,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28896#pullrequestreview-185961289",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0aa6b4ce-10bb-4cd0-bac8-55517a43ef24",
        "parentId" : null,
        "authorId" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "body" : "Note that `pos` is no longer reset to the beginning of the identifier if it's an `n` part of an invalid bigint literal. Given that the error message indicates it's part of the invalid literal, that seems fine?",
        "createdAt" : "2018-12-18T09:00:07Z",
        "updatedAt" : "2018-12-18T09:00:07Z",
        "lastEditedBy" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d7e3f82d40885a29b42a190e758fa00f194ed97",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +1009,1013 @@            else {\n                error(Diagnostics.An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal, identifierStart, length);\n                pos = identifierStart;\n            }\n        }"
  },
  {
    "id" : "1bff6316-9e8f-4a08-a144-783ea602d5b5",
    "prId" : 26528,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26528#pullrequestreview-152258341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "526b5d88-dcbc-43fb-b400-37c4acef08c0",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Are there nested calls to setInJDSocType? Or is there another reason that `inJSDocType = inType` isn’t enough?",
        "createdAt" : "2018-09-04T15:28:52Z",
        "updatedAt" : "2018-09-04T21:47:30Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "f6ccfecf-0d5e-46fd-8f21-bc46c4e26cd2",
        "parentId" : "526b5d88-dcbc-43fb-b400-37c4acef08c0",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I looked for nested calls and there don't seem to be any.",
        "createdAt" : "2018-09-04T16:41:54Z",
        "updatedAt" : "2018-09-04T21:47:30Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "7497b76f-46c0-4973-b793-a9079b086d82",
        "parentId" : "526b5d88-dcbc-43fb-b400-37c4acef08c0",
        "authorId" : "3075017b-26f7-4d26-8bc7-fe9ba07f6aa8",
        "body" : "I was seeing nesting while parsing a `@typedef` with a function property.  I think the tests should fail if `inJSDocType` is a boolean.  I'll confirm.",
        "createdAt" : "2018-09-04T18:53:51Z",
        "updatedAt" : "2018-09-04T21:47:30Z",
        "lastEditedBy" : "3075017b-26f7-4d26-8bc7-fe9ba07f6aa8",
        "tags" : [
        ]
      },
      {
        "id" : "87ebad1b-06ad-4872-8001-e29024fbc528",
        "parentId" : "526b5d88-dcbc-43fb-b400-37c4acef08c0",
        "authorId" : "3075017b-26f7-4d26-8bc7-fe9ba07f6aa8",
        "body" : "I'll add another test, but there are nested calls to `parseJSDocType` here:\r\n```\r\n/**\r\n * @typedef {{foo: function(string)}} SomeType\r\n */\r\n```\r\n\r\nAnd more for a function that accepts a function etc.\r\n",
        "createdAt" : "2018-09-04T19:34:54Z",
        "updatedAt" : "2018-09-04T21:47:30Z",
        "lastEditedBy" : "3075017b-26f7-4d26-8bc7-fe9ba07f6aa8",
        "tags" : [
        ]
      },
      {
        "id" : "b2d0ff97-b246-4645-a967-945449ddb64f",
        "parentId" : "526b5d88-dcbc-43fb-b400-37c4acef08c0",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Thanks. It's too bad -- I thought our JSDoc type parsing was simpler than that.",
        "createdAt" : "2018-09-04T21:20:13Z",
        "updatedAt" : "2018-09-04T21:47:30Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "aca9919950c8242bda60e10a53f6b1032db41f30",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +2093,2097 @@        function setInJSDocType(inType: boolean) {\n            inJSDocType += inType ? 1 : -1;\n        }\n    }\n}"
  },
  {
    "id" : "3bb2fd11-abca-44e5-b364-87d6e1120d03",
    "prId" : 20324,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20324#pullrequestreview-82322408",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "781e8555-974e-4738-abb9-22237fecbe5b",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Considering the similarities between this, `scanHexDigit`, and `scanBinaryOrOctalDigits` perhaps we should unify (at least in part) these three functions by having `scanNumberFragment` take a callback for `isDigit` and then calling it as `scanNumberFragment(isDigit)`, `scanNumberFragment(isHexDigit)`, `scanNumberFragment(isBinaryDigit)`, and `scanNumberFragment(isOctalDigit)`.",
        "createdAt" : "2017-11-29T20:15:24Z",
        "updatedAt" : "2017-12-08T18:49:29Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "2aa66c74-6972-4e96-bb2c-63d5a01f5768",
        "parentId" : "781e8555-974e-4738-abb9-22237fecbe5b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "`scanBinaryOrOctalDigits` and `scanHexDigit` also do arithmetic to calculate the actual numeric value, however (rather than relying on the host being able to parse the literal correctly).  I would also need to pass thru another callback to retain that behavior, too.",
        "createdAt" : "2017-11-29T21:18:33Z",
        "updatedAt" : "2017-12-08T18:49:29Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "a1a3f58d-4d65-4eab-80c4-ce73d4ac5483",
        "parentId" : "781e8555-974e-4738-abb9-22237fecbe5b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "`scanHexDigit` also has to deal with validating that there are a certain number of digits and have an option to not recognize separators, for when its used while handling escape sequences. IMO, while the general structure is similar, they're distinct enough to not warrant a shared base.",
        "createdAt" : "2017-11-29T22:21:56Z",
        "updatedAt" : "2017-12-08T18:49:29Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "e98d5693-e34a-4add-92cf-878e24657e29",
        "parentId" : "781e8555-974e-4738-abb9-22237fecbe5b",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Alternatively, you can pass in a `base` of type `2 | 8 | 10 | 16` like in `scanBinaryOrOctalDigits` and special case hex characters for base 16?",
        "createdAt" : "2017-11-30T01:41:31Z",
        "updatedAt" : "2017-12-08T18:49:29Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "70f3b1bb-b94a-4891-bdcb-8ca0385d55aa",
        "parentId" : "781e8555-974e-4738-abb9-22237fecbe5b",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Worth keeping focus on performance when parsing numbers, even at a cost of flexibility. Too hot a code path.",
        "createdAt" : "2017-12-09T11:19:21Z",
        "updatedAt" : "2017-12-09T11:19:21Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec4540d1492c31ffb9923a8ac733093b5f5192dc",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +883,887 @@                    continue;\n                }\n                if (isDigit(ch)) {\n                    allowSeparator = true;\n                    pos++;"
  },
  {
    "id" : "1803e1ba-8105-4aec-8657-c985e6bc9caf",
    "prId" : 20324,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20324#pullrequestreview-79998333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01aaeaba-4db1-49a3-9979-dd6159e3df5a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "\"Multiple consecutive numeric separators are not permitted.\"",
        "createdAt" : "2017-12-08T22:25:01Z",
        "updatedAt" : "2017-12-08T22:26:27Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec4540d1492c31ffb9923a8ac733093b5f5192dc",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +877,881 @@                    }\n                    else {\n                        error(Diagnostics.Numeric_separators_are_not_allowed_here, pos, 1);\n                    }\n                    pos++;"
  },
  {
    "id" : "525d52bf-ed1b-478e-b632-249412004124",
    "prId" : 18775,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18775#pullrequestreview-65957584",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f13667e7-5c28-4ac4-b25c-535a6a094ca0",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "can you make sure that we have some tests that use < and > inside jsdoc comments in various places? it should be allowed everywhere in comment text, especially in misaligned cases like\r\n\r\n```\r\n  /**\r\n   * @param x hi\r\n< > still part of the previous comment\r\n   */\r\n```\r\n\r\nAnd of course it should cause error in places like the tag name, etc.",
        "createdAt" : "2017-09-28T17:24:44Z",
        "updatedAt" : "2017-09-28T18:33:28Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "e1b3e141-5598-4a63-97d6-a01310ff12a9",
        "parentId" : "f13667e7-5c28-4ac4-b25c-535a6a094ca0",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Added a test.",
        "createdAt" : "2017-09-28T18:33:45Z",
        "updatedAt" : "2017-09-28T18:33:45Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2e4fed2f9436432717ca22dba30db57488028f5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1857,1861 @@                    pos++;\n                    return token = SyntaxKind.CloseBracketToken;\n                case CharacterCodes.lessThan:\n                    pos++;\n                    return token = SyntaxKind.LessThanToken;"
  },
  {
    "id" : "3d3edb68-0677-4829-857e-20875727ec61",
    "prId" : 16135,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16135#pullrequestreview-41032745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6c5098e-234c-4504-86ad-e4ac1dc58977",
        "parentId" : null,
        "authorId" : "a1ec4ba6-1d73-41c2-811a-8b117347a64a",
        "body" : "It's actually called `pipe` pretty much everywhere",
        "createdAt" : "2017-05-30T06:14:36Z",
        "updatedAt" : "2017-05-30T06:14:36Z",
        "lastEditedBy" : "a1ec4ba6-1d73-41c2-811a-8b117347a64a",
        "tags" : [
        ]
      },
      {
        "id" : "a210e80e-fbb5-4a6b-8396-046c5bd31ee0",
        "parentId" : "b6c5098e-234c-4504-86ad-e4ac1dc58977",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "@alfaproject can you open a separate issue or PR for this? This PR doesn't change the `CharacterCodes` enum.",
        "createdAt" : "2017-05-30T17:51:14Z",
        "updatedAt" : "2017-05-30T17:51:14Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "a7e09fb9-9915-4d83-a55c-9aada8230701",
        "parentId" : "b6c5098e-234c-4504-86ad-e4ac1dc58977",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Please don't open a PR - we already consistently use `bar` and `Bar` throughout the codebase.",
        "createdAt" : "2017-05-30T18:17:20Z",
        "updatedAt" : "2017-05-30T18:17:20Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "04217c27-a786-466f-a802-5d5bb0b05cba",
        "parentId" : "b6c5098e-234c-4504-86ad-e4ac1dc58977",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "From further discussion with @DanielRosenwasser, it would change the public API since `SyntaxKind` would also need to change. So I think we should just live with `bar`.",
        "createdAt" : "2017-05-30T18:20:09Z",
        "updatedAt" : "2017-05-30T18:20:09Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d60b2d1175d70542acb7029a3f80faa4c3e38ba",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +430,434 @@                  // starts of normal trivia\n              case CharacterCodes.lessThan:\n              case CharacterCodes.bar:\n              case CharacterCodes.equals:\n              case CharacterCodes.greaterThan:"
  },
  {
    "id" : "421c97cc-6143-48e9-aeb3-fb46c0d01113",
    "prId" : 16106,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16106#pullrequestreview-41023589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97ca147e-34c5-416b-bb5c-bb3478ceff79",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why would it return undefined?",
        "createdAt" : "2017-05-30T16:49:41Z",
        "updatedAt" : "2017-05-30T16:49:41Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "a70c1dde-5da9-47ae-883b-0db49f04e828",
        "parentId" : "97ca147e-34c5-416b-bb5c-bb3478ceff79",
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "If you pass a SyntaxKind of a Node. And even if you only pass SyntaxKind of Tokens, you get undefined for example for StringLiteral, NumericLiteral, etc. ",
        "createdAt" : "2017-05-30T17:45:28Z",
        "updatedAt" : "2017-05-30T17:45:28Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "c030fc46ea5c23445d01b8538ac6c923095f7ccf",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +287,291 @@    const tokenStrings = makeReverseMap(textToToken);\n\n    export function tokenToString(t: SyntaxKind): string | undefined {\n        return tokenStrings[t];\n    }"
  },
  {
    "id" : "ad9204ff-d278-417c-b43a-dfc158879cc3",
    "prId" : 15160,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15160#pullrequestreview-33136730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c2c7d20-ad52-4a7e-81c6-5e255d743017",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Why the rename?",
        "createdAt" : "2017-04-18T00:12:00Z",
        "updatedAt" : "2017-04-21T16:42:33Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "83e96b4a-d467-41a9-aa57-320018805ef5",
        "parentId" : "2c2c7d20-ad52-4a7e-81c6-5e255d743017",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Because it is not just WhiteSpace but Whitespace and empty line.",
        "createdAt" : "2017-04-18T03:37:36Z",
        "updatedAt" : "2017-04-21T16:42:33Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7e13ecbfcd5207073cc1ff2b57cbd05ea84b9b0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +367,371 @@    }\n\n    export function isWhiteSpaceLike(ch: number): boolean {\n        return isWhiteSpaceSingleLine(ch) || isLineBreak(ch);\n    }"
  },
  {
    "id" : "07854e68-bcf7-40a5-be8e-a105b1c0bcc8",
    "prId" : 9420,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff26a751-ca43-4962-bead-39260a8e0b82",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "move new line above old comment\n",
        "createdAt" : "2016-06-29T21:40:37Z",
        "updatedAt" : "2016-07-01T20:57:26Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c40fea9f1da904957ab774c23bd1523e255a513",
    "line" : null,
    "diffHunk" : "@@ -1,1 +33,37 @@        scan(): SyntaxKind;\n        getText(): string;\n        // Sets the text for the scanner to scan.  An optional subrange starting point and length\n        // can be provided to have the scanner only scan a portion of the text.\n        setText(text: string, start?: number, length?: number): void;"
  },
  {
    "id" : "a40e3155-5754-4242-b62e-5aece5fe0387",
    "prId" : 9420,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bb95858-1cb3-409f-8570-7226a089ce4d",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "is there some terminology we could borrow from regexes for this? I know regexes have a distinction between dot-matches-newline and dot-doesn't-match-newline.\n",
        "createdAt" : "2016-06-29T21:46:03Z",
        "updatedAt" : "2016-07-01T20:57:26Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "0040b94d-806f-4e0c-83e0-9da805fd6671",
        "parentId" : "0bb95858-1cb3-409f-8570-7226a089ce4d",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "The regex terminology for including newlines seems to be \"multiline\". However, I would normally expect \"whitespace\" to include newlines. So maybe there should be `isWhiteSpace`, `isWhiteSpaceSingleLine`, and `isLineBreak`?\n",
        "createdAt" : "2016-06-30T13:46:02Z",
        "updatedAt" : "2016-07-01T20:57:26Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c40fea9f1da904957ab774c23bd1523e255a513",
    "line" : null,
    "diffHunk" : "@@ -1,1 +370,374 @@    }\n\n    /** Does not include line breaks. For that, see isWhiteSpaceLike. */\n    export function isWhiteSpaceSingleLine(ch: number): boolean {\n        // Note: nextLine is in the Zs space, and should be considered to be a whitespace."
  },
  {
    "id" : "a2a090c3-5c0f-44ac-96a3-df79eb9b142e",
    "prId" : 8906,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce77d3fa-eac6-4448-bb3d-1cf8f58553fb",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "why u return anything here? from searching around, it doesn't seem to be consumed by anything\n",
        "createdAt" : "2016-06-01T21:13:45Z",
        "updatedAt" : "2016-06-01T22:10:08Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "a80df249-f69c-4a1b-9ab7-7a74811a438d",
        "parentId" : "ce77d3fa-eac6-4448-bb3d-1cf8f58553fb",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I had investigated using this also for detached comments and was using the early-exit capability but decided against that approach. I left it in for consistency with `forEach` in core.\n",
        "createdAt" : "2016-06-01T22:09:33Z",
        "updatedAt" : "2016-06-01T22:10:08Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf9d2c4bebbeea5bcf581b5b27b2c8ae80b04930",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +704,708 @@\n    export function forEachLeadingCommentRange<T, U>(text: string, pos: number, cb: (pos: number, end: number, kind: SyntaxKind, hasTrailingNewLine: boolean, state: T) => U, state?: T) {\n        return iterateCommentRanges(/*reduce*/ false, text, pos, /*trailing*/ false, cb, state);\n    }\n"
  },
  {
    "id" : "30d5dd9a-69cb-4204-aa43-e623bea5327e",
    "prId" : 6024,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a7f965c-cbc5-477e-bb74-ef26799a871b",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "It seems a little fragile to use  a method (`setText` - which calls `setTextPos`) to modify the state prior to callback execution, then manually restore each field individually after. If anyone added further state changes in `setText` (or `setTextPos`), they'd need to know to come and manually undo those same changes here. Can this set/restore be made more symmetrical/colocated somehow?\n",
        "createdAt" : "2016-01-08T20:10:45Z",
        "updatedAt" : "2016-01-12T23:33:40Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "a1866594-2e22-4a8d-9ec4-33d9ab1dd22a",
        "parentId" : "5a7f965c-cbc5-477e-bb74-ef26799a871b",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "This is the same pattern we use elsewhere (e.g. in `speculationHelper`). I don't see any obvious improvement.\n",
        "createdAt" : "2016-01-11T21:21:19Z",
        "updatedAt" : "2016-01-12T23:33:40Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "120fa190d22fda462df989ce04268c67c0523305",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +1770,1774 @@            tokenValue = saveTokenValue;\n            hasExtendedUnicodeEscape = saveHasExtendedUnicodeEscape;\n            tokenIsUnterminated = saveTokenIsUnterminated;\n\n            return result;"
  },
  {
    "id" : "f7b33f08-9b36-4ddf-bfc9-fc86fad8145a",
    "prId" : 2856,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "074304e0-842f-439e-ba18-acf8ca24e692",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "There was an errant extended character in the file, breaking cscript.\n",
        "createdAt" : "2015-04-22T00:04:31Z",
        "updatedAt" : "2015-04-22T00:04:31Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "92756e135b08a6d1481c238256d3859c968d0ce0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +353,357 @@        // ES5 7.3:\n        // The ECMAScript line terminator characters are listed in Table 3.\n        //     Table 3: Line Terminator Characters\n        //     Code Unit Value     Name                    Formal Name\n        //     \\u000A              Line Feed               <LF>"
  },
  {
    "id" : "6383083f-2a5f-46db-add8-497d86a204a0",
    "prId" : 2448,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbbdc2ec-a962-4ac5-8707-1b97b0d79263",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Makes this `CharacterCodes.enQuad <= ch && ch <= CharacterCodes.zeroWidthSpace`\n",
        "createdAt" : "2015-03-21T00:11:50Z",
        "updatedAt" : "2015-03-21T00:11:50Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae0815e21ced877f094cf7f99021216a3d252ce",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +328,332 @@            ch === CharacterCodes.nextLine ||\n            ch === CharacterCodes.ogham ||\n            ch >= CharacterCodes.enQuad && ch <= CharacterCodes.zeroWidthSpace ||\n            ch === CharacterCodes.narrowNoBreakSpace ||\n            ch === CharacterCodes.mathematicalSpace ||"
  },
  {
    "id" : "42fb3998-083e-4815-8dd3-5c02818b006e",
    "prId" : 2169,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "809a5072-5bb2-4e84-8e72-f659b1ae6a85",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Can you just refernece the relevant portion of theES6 spec?\n\nCan you just do \"|0\" to floor instead?\n",
        "createdAt" : "2015-02-28T00:36:51Z",
        "updatedAt" : "2015-03-03T19:56:17Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "24b08b8b-7eae-41a4-94c1-183cf39834d0",
        "parentId" : "809a5072-5bb2-4e84-8e72-f659b1ae6a85",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "It's exactly the same as 10.1.1\n",
        "createdAt" : "2015-02-28T01:10:51Z",
        "updatedAt" : "2015-03-03T19:56:17Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c5a48911a0a77d156743640c2c3063a8c747ddf",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +868,872 @@            }\n            \n            var codeUnit1 = Math.floor((codePoint - 65536) / 1024) + 0xD800;\n            var codeUnit2 = ((codePoint - 65536) % 1024) + 0xDC00;\n            "
  },
  {
    "id" : "fd55dab8-fe86-458b-a9c7-94a2eb635717",
    "prId" : 1700,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6681b076-ded2-4a06-8765-32757e6f646f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "For anything new functions introduced, we need to discuss where they get exported from (i.e. most will need to be exposed from `utilities.ts`).\n\n@mhegazy, this relates to the API test we need to reintroduce; Monday?\n\nI'd also annotate the return types, but that's just me.\n",
        "createdAt" : "2015-01-18T03:24:05Z",
        "updatedAt" : "2015-02-03T19:34:08Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "45defa87418a9dd9da62c28510d302b3961d0a7e",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +292,296 @@    }\n\n    export function computeLineAndCharacterOfPosition(lineStarts: number[], position: number) {\n        var lineNumber = binarySearch(lineStarts, position);\n        if (lineNumber < 0) {"
  },
  {
    "id" : "2462cd4c-7ef2-4e99-8ea6-afc875b83716",
    "prId" : 1535,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38d167f7-516f-45de-93ba-8299675bca8d",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Our spec says nothing about conflict markers, so leave a comment on what conflict markers are, who leaves them in this format (svn, hg, git), and why it's useful to have parser support for it (i.e. language service, potentially forgetting to fix a merge conflict).\n",
        "createdAt" : "2014-12-29T17:51:11Z",
        "updatedAt" : "2014-12-30T00:23:27Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "581c941d-2c1c-47e2-ab19-b16ccd47f601",
        "parentId" : "38d167f7-516f-45de-93ba-8299675bca8d",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Done.\n",
        "createdAt" : "2014-12-30T00:06:48Z",
        "updatedAt" : "2014-12-30T00:23:27Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "12cb284e5da01fc5fcb483a8fae1ed4487d319da",
    "line" : null,
    "diffHunk" : "@@ -1,1 +414,418 @@    }\n\n    function scanConflictMarkerTrivia(text: string, pos: number, error?: ErrorCallback) {\n        if (error) {\n            error(Diagnostics.Merge_conflict_marker_encountered, mergeConflictMarkerLength);"
  },
  {
    "id" : "6a500275-b421-47ed-98c4-01e2660003fd",
    "prId" : 1535,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0670474a-bbab-4d96-9c1e-ba32329a510c",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why exactly do we stop _before_ the end-conflict marker?\n",
        "createdAt" : "2014-12-29T18:00:53Z",
        "updatedAt" : "2014-12-30T00:23:27Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "c7e5d255-25be-4393-99ee-277e9f04bcbe",
        "parentId" : "0670474a-bbab-4d96-9c1e-ba32329a510c",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Will comment.  \n\nWe want hte end marker treated as an individual piece of trivia.  That makes later parts of the pipeline much simpler.  For example, when classifying, we don't need to recompute which piece is the end marker.  it just shows up for us in the token stream.\n",
        "createdAt" : "2014-12-30T00:08:25Z",
        "updatedAt" : "2014-12-30T00:23:27Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "12cb284e5da01fc5fcb483a8fae1ed4487d319da",
    "line" : null,
    "diffHunk" : "@@ -1,1 +434,438 @@                var ch = text.charCodeAt(pos);\n                if (ch === CharacterCodes.greaterThan && isConflictMarkerTrivia(text, pos)) {\n                    break;\n                }\n"
  },
  {
    "id" : "68ea896d-f038-44ad-9711-2f6712f49d5c",
    "prId" : 1456,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/1456#pullrequestreview-32183062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb02a18e-77cf-4237-92ff-810c7a518916",
        "parentId" : null,
        "authorId" : "09e5672a-add1-4ea0-95f3-a2db2a79db57",
        "body" : "\"followd\" should be \"followed\"",
        "createdAt" : "2017-04-11T17:54:50Z",
        "updatedAt" : "2017-04-11T17:54:50Z",
        "lastEditedBy" : "09e5672a-add1-4ea0-95f3-a2db2a79db57",
        "tags" : [
        ]
      },
      {
        "id" : "31f12f89-5781-47db-9a5f-095c64767001",
        "parentId" : "bb02a18e-77cf-4237-92ff-810c7a518916",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Probably best to send a patch instead of commenting on a 2-year-old PR",
        "createdAt" : "2017-04-11T18:03:02Z",
        "updatedAt" : "2017-04-11T18:03:02Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8a2d5de1a7efe9573f55a8735a2e204a52c0931",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +399,403 @@\n            // All conflict markers consist of the same character repeated seven times.  If it is \n            // a <<<<<<< or >>>>>>> marker then it is also followd by a space.\n            var markerLength = \"<<<<<<<\".length;\n"
  },
  {
    "id" : "166b3c2b-a2a7-43b6-9cb0-eb556ebd888d",
    "prId" : 1254,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d739b4e5-5e66-4e50-9fda-9eca83e684dc",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "i don't think you can ever get a negative value from scanBinaryOrOctalDigits.\n",
        "createdAt" : "2014-11-26T01:37:45Z",
        "updatedAt" : "2014-12-01T19:27:49Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "958c82fc-b0b6-4e0f-81d7-9b9441f20ad2",
        "parentId" : "d739b4e5-5e66-4e50-9fda-9eca83e684dc",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "You are absolutely right. I will remove that\n",
        "createdAt" : "2014-11-27T00:01:40Z",
        "updatedAt" : "2014-12-01T19:27:49Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ec49fd80eef1127d045a815485ff0128c23511b",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +961,965 @@                            pos += 2;\n                            var value = scanBinaryOrOctalDigits(/* base */ 2);\n                            if (value < 0) {\n                                error(Diagnostics.Binary_digit_expected);\n                                value = 0;"
  },
  {
    "id" : "91f1dea9-07b1-4c3e-98fa-1ff0425efe83",
    "prId" : 960,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fffd9acf-fe01-40a8-9586-8a3bcfba0a43",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "'\"'\n",
        "createdAt" : "2014-10-25T00:58:11Z",
        "updatedAt" : "2014-10-31T21:54:20Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e8978fb60973242390a4b3e5c481194c1cce335",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +674,678 @@                    return \"\\'\";\n                case CharacterCodes.doubleQuote:\n                    return \"\\\"\";\n                case CharacterCodes.x:\n                case CharacterCodes.u:"
  },
  {
    "id" : "41c2c38b-23de-416f-9b84-7ffb41d6058a",
    "prId" : 473,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b78d8df9-4a08-4c1c-aa7d-89c136109250",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "These are already here! Make sure they are not duplicated\n",
        "createdAt" : "2014-08-19T19:02:35Z",
        "updatedAt" : "2014-08-29T22:59:29Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc0560ae596815838a67606a57b40d4f78a5de76",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +453,457 @@            ch > CharacterCodes.maxAsciiCharacter && isUnicodeIdentifierPart(ch, languageVersion);\n    }\n\n    export function createScanner(languageVersion: ScriptTarget, text?: string, onError?: ErrorCallback, onComment?: CommentCallback): Scanner {\n        var pos: number;       // Current position (end position of text of current token)"
  },
  {
    "id" : "388bc3a3-c2ef-4aa4-8c80-d5cfffa60f54",
    "prId" : 409,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "696f9bd4-97e0-48e2-8e7b-00edf2bfbd4b",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This whole logic seems repeat of skip trivia, can we just factor things out instead ? It would be easier to maintain that way? / may be skipTrivia takes OnCommentStart and onCommentEnd callbacks that record the positions?\n",
        "createdAt" : "2014-08-08T23:57:08Z",
        "updatedAt" : "2014-08-09T00:04:12Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "afa2b5b8-3159-4b59-b39a-3504ded2208e",
        "parentId" : "696f9bd4-97e0-48e2-8e7b-00edf2bfbd4b",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Yes, there's a lot of similarity, but factoring into shared logic would make it slower and likely require object allocations for return values or callbacks. Performance is pretty critical for these methods, I think it is worth it to keep them separate.\n",
        "createdAt" : "2014-08-09T00:02:40Z",
        "updatedAt" : "2014-08-09T00:04:12Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5318bab51708435fd62cee303c8ed6e2ff2aa6f4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +386,390 @@                        var startPos = pos;\n                        pos += 2;\n                        if (nextChar === CharacterCodes.slash) {\n                            while (pos < text.length) {\n                                if (isLineBreak(text.charCodeAt(pos))) {"
  }
]