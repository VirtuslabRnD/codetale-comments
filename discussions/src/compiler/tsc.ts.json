[
  {
    "id" : "4aef15cb-68d9-469e-8b01-9f68dfec39d8",
    "prId" : 23408,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23408#pullrequestreview-112300825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afa6c5ff-5a37-465b-8030-98c79b3a6dc4",
        "parentId" : null,
        "authorId" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "body" : "So now there are two CLI flags that can tell tsc it's pretty. What if the user provides `tsc --pretty false --diagnosticStyle pretty` or `tsc --pretty true --diagnosticStyle simple`? Should there be a warning for providing both?\r\n",
        "createdAt" : "2018-04-16T07:20:19Z",
        "updatedAt" : "2018-04-18T19:43:38Z",
        "lastEditedBy" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "25bb58124bf165354f897a817940cbdbff2c9093",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +25,29 @@    }\n\n    function shouldBePretty(options: CompilerOptions) {\n        if (typeof options.pretty === \"undefined\") {\n            return !!sys.writeOutputIsTTY && sys.writeOutputIsTTY();"
  },
  {
    "id" : "ab76474d-2731-45a4-894b-dd9202d23ced",
    "prId" : 9750,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a289e613-d74e-4ada-b677-2d371369f13e",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Question: why you are doing this instead of just call `reportDiagnosticSimply` directly?\n",
        "createdAt" : "2016-07-15T18:44:53Z",
        "updatedAt" : "2016-07-15T18:44:57Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "a4863443-8ead-4335-8f0f-78364ccb853b",
        "parentId" : "a289e613-d74e-4ada-b677-2d371369f13e",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "because `reportDiagnosticWorker` can be either `reportDiagnosticSimply` or `reportDiagnosticWithColorAndContext` if `pretty` option is set\n",
        "createdAt" : "2016-07-15T19:18:43Z",
        "updatedAt" : "2016-07-15T19:18:43Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "2da684655762d4a51e8c33c4772059d1a689e9df",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +13,17 @@    };\n\n    let reportDiagnosticWorker = reportDiagnosticSimply;\n\n    function reportDiagnostic(diagnostic: Diagnostic, host: FormatDiagnosticsHost) {"
  },
  {
    "id" : "e47dcd2f-6ce6-4b53-ab7d-56a343b0322c",
    "prId" : 9750,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "784f99bc-37f5-4e36-a89b-83ea07d203d6",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "nit: I think use /_formatDiagnosticsHost_/ will be more clear\n",
        "createdAt" : "2016-07-15T18:45:36Z",
        "updatedAt" : "2016-07-15T18:45:36Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2da684655762d4a51e8c33c4772059d1a689e9df",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +299,303 @@        if (commandLine.options.project) {\n            if (!isJSONSupported()) {\n                reportDiagnostic(createCompilerDiagnostic(Diagnostics.The_current_host_does_not_support_the_0_option, \"--project\"), /* host */ undefined);\n                return sys.exit(ExitStatus.DiagnosticsPresent_OutputsSkipped);\n            }"
  },
  {
    "id" : "5101a03f-7556-439b-95d3-a7d67127e912",
    "prId" : 9536,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57a71872-3ed2-4817-8f1f-a5534a85a4c7",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "With this you'll get different names for statistics than you do below (e.g. \"I/O read time\" vs. \"I/O read\").\n",
        "createdAt" : "2016-07-11T18:40:37Z",
        "updatedAt" : "2016-07-12T00:01:56Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "f2ab82a6-c3e6-41c1-ab3a-30521f0f2e4a",
        "parentId" : "57a71872-3ed2-4817-8f1f-a5534a85a4c7",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "True. I could just special-case out the builtins while printing and print them via the old path (though I'd honestly prefer using a single code path if renaming them is okay).\n",
        "createdAt" : "2016-07-11T19:36:38Z",
        "updatedAt" : "2016-07-12T00:01:56Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a9ba59cb65080cf7e3358232090ee92946e765e",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +585,589 @@            const emitTime = performance.getDuration(\"Emit\");\n            if (compilerOptions.extendedDiagnostics) {\n                performance.forEachMeasure((name, duration) => reportTimeStatistic(`${name} time`, duration));\n            }\n            else {"
  },
  {
    "id" : "081b1449-8343-4a8b-8b65-8f1360a134d1",
    "prId" : 7145,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3d43d93-b3f4-44e7-8eaa-03d0b1c90d1a",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can you add outDir as well?\n",
        "createdAt" : "2016-02-19T01:07:24Z",
        "updatedAt" : "2016-02-19T01:07:24Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "a9b8087d-ed8f-4196-b248-9ba902c024a4",
        "parentId" : "c3d43d93-b3f4-44e7-8eaa-03d0b1c90d1a",
        "authorId" : "3ae23f38-5f1a-4286-b485-a4c470edce21",
        "body" : "Sure, what should be the value?\n",
        "createdAt" : "2016-02-19T04:34:11Z",
        "updatedAt" : "2016-02-19T04:34:11Z",
        "lastEditedBy" : "3ae23f38-5f1a-4286-b485-a4c470edce21",
        "tags" : [
        ]
      }
    ],
    "commit" : "46cc470332d27fbbfd0c4ace7085b3439e60e5cf",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +719,723 @@            }\n            else {\n                configurations.exclude = [\"node_modules\"];\n            }\n"
  },
  {
    "id" : "0a30203e-0dac-4061-85fb-6af22bde7f12",
    "prId" : 7142,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32b93ad1-4c22-4412-a561-c7fd4af159cf",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "can you please: \n- add a function `isWatchSet` (or something similar) that will contain this check\n- replace all places where we currently have `compilerOptions.watch || !compilerOptions.hasOwnProperty(\"watch\")` with the call to this function\n- add a comment to `compilerOptions.watch` why it should not be checked directly and `isWatchSet` should be used instead\n",
        "createdAt" : "2016-02-18T22:02:53Z",
        "updatedAt" : "2016-02-18T22:02:53Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "4e93a735-d2ee-47f3-91c2-d42bc965cbe5",
        "parentId" : "32b93ad1-4c22-4412-a561-c7fd4af159cf",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Good points!\n\nBut if we go that length, it might be cleaner to rename the option to say `watchOption` -- then nobody would have to worry about helper functions, comments and the rest of this complexity. And also simpler code is better performance.\n\nWell, we can still have a wee comment next to the option itself, but that's it.\n",
        "createdAt" : "2016-02-18T22:12:28Z",
        "updatedAt" : "2016-02-18T22:12:28Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "deab2e3c-7fa8-4270-99d4-d1c366b491a1",
        "parentId" : "32b93ad1-4c22-4412-a561-c7fd4af159cf",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "renaming compiler options is technically a breaking change so I'd like to keep it as a last thing.\n",
        "createdAt" : "2016-02-18T23:06:56Z",
        "updatedAt" : "2016-02-18T23:06:56Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "80323a50-44dd-4daa-bff7-eec363192ae5",
        "parentId" : "32b93ad1-4c22-4412-a561-c7fd4af159cf",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "The variable can change without breaking any external consumer. Just as compiler options received from the caller, legacy `watch` can be detected and translated to `watchOption`.\n",
        "createdAt" : "2016-02-19T07:14:51Z",
        "updatedAt" : "2016-02-19T07:14:51Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "a1265fd0-b4a5-4eff-9b1f-1f89b271bac8",
        "parentId" : "32b93ad1-4c22-4412-a561-c7fd4af159cf",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I think the problem is that that's still an API breaking change, and adds non-uniformity to our command line parser.\n",
        "createdAt" : "2016-02-19T08:13:14Z",
        "updatedAt" : "2016-02-19T08:13:14Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8aaf923260b4920c21c087c4d8b3618639aed071",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +417,421 @@\n            // Firefox has Object.prototype.watch\n            if (!compilerOptions.watch || !compilerOptions.hasOwnProperty(\"watch\")) {\n                return sys.exit(compileResult.exitStatus);\n            }"
  },
  {
    "id" : "77c6718a-f540-4890-a4ae-722d8d06dc75",
    "prId" : 5367,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc0dc832-88e7-4fb5-8dcb-9686e3186d3f",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can you add a comment here to explain why this is needed.\n",
        "createdAt" : "2015-10-23T18:35:45Z",
        "updatedAt" : "2015-10-23T20:09:26Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "19a222e7185ad69d16573efba538823409dbd33b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +162,166 @@        // This map stores and reuses results of fileExists check that happen inside 'createProgram'\n        // This allows to save time in module resolution heavy scenarios when existence of the same file might be checked multiple times.\n        let cachedExistingFiles: Map<boolean>;\n        let hostFileExists: typeof compilerHost.fileExists;\n"
  },
  {
    "id" : "c5323676-50fa-4501-8b6c-f01e1a00f7f6",
    "prId" : 5140,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb1cc630-9159-45d7-b5fa-5324bd6139fb",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "sound like a long way to say `repeat(\"~\", lastLineChar)`, where repeat is just a simple for loop.\n",
        "createdAt" : "2015-11-02T20:38:24Z",
        "updatedAt" : "2015-11-02T23:46:04Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce24bcb2eecec7c0d5cdc5d760a28b2428d79345",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +172,176 @@                }\n                else if (i === lastLine) {\n                    output += lineContent.slice(0, lastLineChar).replace(/./g, \"~\");\n                }\n                else {"
  },
  {
    "id" : "d92ad4aa-70c3-46bb-9449-6618ac7f7703",
    "prId" : 5127,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76e663a7-7f99-4470-9817-9646cf3964c1",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "possibly set a timer for this as well.\n",
        "createdAt" : "2015-10-12T19:21:54Z",
        "updatedAt" : "2015-10-14T23:57:27Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcfc25eeb040390492716626757274c945ebd47f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +342,346 @@\n        function watchedDirectoryChanged(fileName: string) {\n            if (fileName && !ts.isSupportedSourceFileName(fileName)) {\n                return;\n            }"
  },
  {
    "id" : "197b12b7-c47f-4e5a-9eda-29a285397c67",
    "prId" : 5127,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efe518ed-01cf-43a2-926d-9c3d9cf98e5b",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "consider using `getNormalizedAbsolutePath` instead.\n",
        "createdAt" : "2015-10-12T19:31:59Z",
        "updatedAt" : "2015-10-14T23:57:27Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcfc25eeb040390492716626757274c945ebd47f",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +223,227 @@            }\n            if (sys.watchDirectory && configFileName) {\n                let directory = ts.getDirectoryPath(configFileName);\n                directoryWatcher = sys.watchDirectory(\n                    // When the configFileName is just \"tsconfig.json\", the watched directory should be "
  },
  {
    "id" : "cfe7e1b3-8d8f-4b46-a40b-0d4ca77e076e",
    "prId" : 4998,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bed2a39-4bd5-43ec-bdc6-6f8c6ddab156",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "nit: extra space at the beginning of the line.\n",
        "createdAt" : "2015-09-29T18:22:34Z",
        "updatedAt" : "2015-09-29T18:27:24Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "e35733479e44e800961af3836718539be79683a4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +105,109 @@        let output = new Date().toLocaleTimeString() + \" - \";\n\t\t\n        if (diagnostic.file) {\n            let loc = getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start);\n            output += `${ diagnostic.file.fileName }(${ loc.line + 1 },${ loc.character + 1 }): `;"
  },
  {
    "id" : "9bb5196a-9668-45dd-81e7-9b39df33677d",
    "prId" : 3780,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8c9f82c-9fcd-493f-8a25-a8fadad10480",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Does this cover referenced files?\n\nAlso, I don't know if this is the right approach. I think that if a root file is deleted, we should be removing the file from the cached program, but we should be erroring when we fail to find it.\n",
        "createdAt" : "2015-07-08T17:36:29Z",
        "updatedAt" : "2015-07-17T17:11:16Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "30888da8fa212ecc59d01fd9999e2edce57917cc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +286,290 @@                var index = rootFileNames.indexOf(sourceFile.fileName);\n                if (index >= 0) {\n                    rootFileNames.splice(index, 1);\n                }\n            }"
  },
  {
    "id" : "781b56e4-f48b-4d8e-aab1-9e72cd90065f",
    "prId" : 3648,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97faf166-03ac-4454-909d-4ca0baffd440",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Sorry I didn't catch this before - we use double quoted strings when possible.\n",
        "createdAt" : "2015-06-26T15:50:12Z",
        "updatedAt" : "2015-06-26T15:50:12Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7e020e958bb4e9ec7942227be32092624a4ee99",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +193,197 @@\n        // Firefox has Object.prototype.watch\n        if (commandLine.options.watch && commandLine.options.hasOwnProperty('watch')) {\n            if (!sys.watchFile) {\n                reportDiagnostic(createCompilerDiagnostic(Diagnostics.The_current_host_does_not_support_the_0_option, \"--watch\"));"
  },
  {
    "id" : "7eeed69c-6abc-4bea-8a02-2f6b14ef0c13",
    "prId" : 2245,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2afd7b37-01b2-4aa4-956c-e7dacef4ca29",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Why do you need this namespace qualifier? You should have access to all the exports in the ts module.\n",
        "createdAt" : "2015-03-07T09:37:45Z",
        "updatedAt" : "2015-03-08T04:19:56Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "3aa5a317-a91b-45aa-872c-40674d5b9a68",
        "parentId" : "2afd7b37-01b2-4aa4-956c-e7dacef4ca29",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "I don't NEED it, I just LIKE it :smile:  \n\nThe main reason however, is that 'version' is a really common identifier throughout our code base.  I just wanted to make it clear this was the top-level module property, and not some local or closure reference.\n",
        "createdAt" : "2015-03-08T04:25:25Z",
        "updatedAt" : "2015-03-08T04:25:25Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6816fc128191cc71dbd4b21492a334dcbc29e91",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +418,422 @@\n    function printVersion() {\n        sys.write(getDiagnosticText(Diagnostics.Version_0, ts.version) + sys.newLine);\n    }\n"
  },
  {
    "id" : "bba47663-00ce-4091-8065-38543fe33823",
    "prId" : 1692,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa98bd4e-418c-40b2-a5eb-b27ca3643fcc",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "JSON is not supported on scscript. this will crash then. i would add an error message The_current_host_does_not_support_the_0_option similar to locale and watch.\n",
        "createdAt" : "2015-01-20T20:11:07Z",
        "updatedAt" : "2015-01-21T00:29:46Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "734b2c71-0e52-4fb1-90f4-fc04d53a339d",
        "parentId" : "aa98bd4e-418c-40b2-a5eb-b27ca3643fcc",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "I doesn't crash because we catch the exception when attempting to JSON.parse the file. What you'll see is an error message saying\n\n```\nerror TS6050: Unable to open file 'tsconfig.json'.\n```\n\nI like this solution because it also alerts you in cases where we find the tsconfig.json file by walking the directory path but then fail because of no JSON support.\n",
        "createdAt" : "2015-01-20T20:49:34Z",
        "updatedAt" : "2015-01-21T00:29:46Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "dc67b50c-7174-4f53-a824-4f8ac787020f",
        "parentId" : "aa98bd4e-418c-40b2-a5eb-b27ca3643fcc",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i think an explicit message that the host does not support it, as opposed to the file is corrupt, no access privileges, or even does not exist, is more helpful. either ways i do not think we have a large user base on cscript anyways.\n",
        "createdAt" : "2015-01-20T21:23:56Z",
        "updatedAt" : "2015-01-21T00:29:46Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "45e700e515e6a58545bbf074d417560c2478fdb2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +194,198 @@                return sys.exit(EmitReturnStatus.CompilerOptionsErrors);\n            }\n            configFilename = normalizePath(combinePaths(commandLine.options.project, \"tsconfig.json\"));\n            if (commandLine.filenames.length !== 0) {\n                reportDiagnostic(createCompilerDiagnostic(Diagnostics.Option_project_cannot_be_mixed_with_source_files_on_a_command_line));"
  },
  {
    "id" : "e1292476-6aaf-41c3-8101-24a83c4d4a61",
    "prId" : 1692,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3337fbf-482f-45cf-90fb-c3e693c89a6c",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Why is it necessary for the file to know about its watcher?\n",
        "createdAt" : "2015-01-20T20:23:09Z",
        "updatedAt" : "2015-01-21T00:29:46Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "c8fa8ec5-1f45-4784-907b-d6e8e108101c",
        "parentId" : "f3337fbf-482f-45cf-90fb-c3e693c89a6c",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Because they're 1:1 related. In -watch mode every source file has a watcher attached and the natural place to store it is in the source file object. We do the same in services.ts for language service stuff.\n",
        "createdAt" : "2015-01-20T20:55:06Z",
        "updatedAt" : "2015-01-21T00:29:46Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "45e700e515e6a58545bbf074d417560c2478fdb2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +6,10 @@\n    export interface SourceFile {\n        fileWatcher: FileWatcher;\n    }\n"
  },
  {
    "id" : "1c52dc0e-a7d1-4094-a6b1-82fc94335e2e",
    "prId" : 1692,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c17083f-9100-43f3-884a-f3ded70f3de1",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "This seems unsafe because if getSourceFile refers to 'this', the reference will not work if you call it as a function\n",
        "createdAt" : "2015-01-20T20:29:32Z",
        "updatedAt" : "2015-01-21T00:29:46Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "4e729aa7-343e-4aa1-b8c5-48723609e6ca",
        "parentId" : "1c17083f-9100-43f3-884a-f3ded70f3de1",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Fair point, although it never happens because we have a closed loop here. We ourselves create both the host and the client with no opportunity for user code to get in the middle.\n",
        "createdAt" : "2015-01-20T20:57:52Z",
        "updatedAt" : "2015-01-21T00:29:46Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "45e700e515e6a58545bbf074d417560c2478fdb2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +160,164 @@        var compilerOptions: CompilerOptions;       // Compiler options for compilation\n        var compilerHost: CompilerHost;             // Compiler host\n        var hostGetSourceFile: typeof compilerHost.getSourceFile;  // getSourceFile method from default host\n        var timerHandle: number;                    // Handle for 0.25s wait timer\n"
  },
  {
    "id" : "3247162e-1876-496c-b8ce-8a26e960216f",
    "prId" : 1692,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae34ccf8-f344-4a3e-b092-764a7de1fbea",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "What is going on in these 3 lines? How is getSourceFile different from hostGetSourceFile? I assume it has something to do with watching\n",
        "createdAt" : "2015-01-20T20:39:02Z",
        "updatedAt" : "2015-01-21T00:29:46Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "3e3e5785-dd78-4a1a-9a05-f4a59d889a1a",
        "parentId" : "ae34ccf8-f344-4a3e-b092-764a7de1fbea",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Lines are pretty self explanatory, we save the old value and store a new value.\n",
        "createdAt" : "2015-01-20T21:02:15Z",
        "updatedAt" : "2015-01-21T00:29:46Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "79a38781-498a-4149-9c4c-206e35d6d3c4",
        "parentId" : "ae34ccf8-f344-4a3e-b092-764a7de1fbea",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "What I meant was, it's not clear what is the difference between hostGetSourceFile and getSourceFile. Can you rename them so that each sounds like it excludes the other?\n",
        "createdAt" : "2015-01-20T21:06:15Z",
        "updatedAt" : "2015-01-21T00:29:46Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "45e700e515e6a58545bbf074d417560c2478fdb2",
    "line" : 175,
    "diffHunk" : "@@ -1,1 +246,250 @@                compilerHost = createCompilerHost(compilerOptions);\n                hostGetSourceFile = compilerHost.getSourceFile;\n                compilerHost.getSourceFile = getSourceFile;\n            }\n"
  },
  {
    "id" : "44b15de7-aec6-4218-b718-6e2e8a6b2ff8",
    "prId" : 1501,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb6dbe3b-8bad-4b27-9848-be060992898d",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Declaration errors (e.g. exported type using other unexported types) are only generated when we emit. this means with --noEmit you are not getting all the errors.\n\nOptions:\n1. Make it an error to use --d with --noEmit (I am ok with that, not a good experience though)\n2. If --noEmit flag is set, call getDeclarationDiagnostics to report diagnostics if --d is exposed (better experience, but will complicate the logic)\n3. do not handle --noEmit here, but do it in the emitter to skip the actual writing of files (that should solve the issue with 2 but will be a slightly bigger change, and i am not sure i like the \"emitter\" handling --noEmit\n\nClearly i have no good solution here, so other suggestions are welcomed :)\n",
        "createdAt" : "2014-12-16T18:20:17Z",
        "updatedAt" : "2014-12-17T04:27:53Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "b4d64488-e662-45ff-bdc2-421df3ef7b40",
        "parentId" : "bb6dbe3b-8bad-4b27-9848-be060992898d",
        "authorId" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "body" : "Or 4. Always call getDeclarationDiagnostics in the semantic error phase? Shouldn't exported type using non-exported types always be an error?\n",
        "createdAt" : "2014-12-16T19:20:17Z",
        "updatedAt" : "2014-12-17T04:27:53Z",
        "lastEditedBy" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "tags" : [
        ]
      },
      {
        "id" : "8422d8f2-bff6-40d5-b1ca-5b47025dd2b9",
        "parentId" : "bb6dbe3b-8bad-4b27-9848-be060992898d",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "that means we will be doing the work twice. once to get the diagnostics and once to emit. the current model does this as we emit which saves us the extra pass.\n",
        "createdAt" : "2014-12-16T19:31:35Z",
        "updatedAt" : "2014-12-17T04:27:53Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "7091533f-adcd-4b2f-ba4a-dc6213ebd390",
        "parentId" : "bb6dbe3b-8bad-4b27-9848-be060992898d",
        "authorId" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "body" : "Ah yes, I see what you mean. For declarations, the emit and typecheck happen together.\n\nI will do option 1 for now, since for option 2 or 3 I have to make a new emitter that has stubs for the methods that actually write things.\n",
        "createdAt" : "2014-12-17T04:11:01Z",
        "updatedAt" : "2014-12-17T04:27:53Z",
        "lastEditedBy" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "tags" : [
        ]
      }
    ],
    "commit" : "880e5c50d726b3a05f2c75c26139992822b3a349",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +301,305 @@            }\n            else {\n                var emitStart = new Date().getTime();\n                var emitOutput = checker.emitFiles();\n                var emitErrors = emitOutput.diagnostics;"
  },
  {
    "id" : "a61e5802-5c6f-4d7b-bc15-4c02bdfda980",
    "prId" : 508,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afd5abe1-b294-4e7e-8dc2-2be93252abb4",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Does 'category' need to be localized?\n",
        "createdAt" : "2014-08-22T09:31:03Z",
        "updatedAt" : "2014-08-22T22:52:08Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "201e39a7-8d66-48bd-ba0b-3010e6458924",
        "parentId" : "afd5abe1-b294-4e7e-8dc2-2be93252abb4",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "[Apparently not!](http://blogs.msdn.com/b/msbuild/archive/2006/11/03/msbuild-visual-studio-aware-error-messages-and-message-formats.aspx)\n",
        "createdAt" : "2014-08-22T19:45:20Z",
        "updatedAt" : "2014-08-22T22:52:08Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "48c6bdb2aa7ba3a5ef62ed661fc4b39897002f68",
    "line" : null,
    "diffHunk" : "@@ -1,1 +96,100 @@\n        var category = DiagnosticCategory[diagnostic.category].toLowerCase();\n        output += category + \" TS\" + diagnostic.code + \": \" + diagnostic.messageText + sys.newLine;\n\n        sys.write(output);"
  },
  {
    "id" : "f6673060-3298-4744-99b1-073808936fc4",
    "prId" : 444,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "168fe558-ba93-40a1-bc07-c12b112a2600",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I would rather this was optional. it would have made sense if it was used in any ways in this scenario.. but it is not.. we are just burdening the users. the other alternative, is to have an overload that requires version and isOpen, and up to the user to decide which one to use.\neven better.. we can define version and isopen in the extension of SoruceFile in services.ts, this way we are sure no one can use them other than the service.\n",
        "createdAt" : "2014-08-13T20:25:14Z",
        "updatedAt" : "2014-08-13T22:41:53Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "b95eca90-6ae7-4cc0-a24f-b6bcbcd4c3ab",
        "parentId" : "168fe558-ba93-40a1-bc07-c12b112a2600",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "If we have that overload, then people will still call the wrong overload (note: this is not hypothetical.  This kept happening as part of this change).  \n",
        "createdAt" : "2014-08-13T21:39:59Z",
        "updatedAt" : "2014-08-13T22:41:53Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "088e58644aacfa734c75a18440e511e3a9cf3364",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +144,148 @@            }\n            return text !== undefined ? createSourceFile(filename, text, languageVersion, /*version:*/ \"0\") : undefined;\n        }\n\n        function writeFile(fileName: string, data: string, writeByteOrderMark: boolean, onError?: (message: string) => void) {"
  }
]