[
  {
    "id" : "3b18f5b1-6a45-465d-bbac-67eb40a87dd9",
    "prId" : 10926,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/10926#pullrequestreview-73530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fe724ec-102f-4b17-a833-00f59671ddd9",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "we will have to do this for generators as well, correct?\n",
        "createdAt" : "2016-09-14T20:56:52Z",
        "updatedAt" : "2016-09-14T20:56:57Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "f522b9c6-6cbf-42d7-8c6d-1541758211af",
        "parentId" : "6fe724ec-102f-4b17-a833-00f59671ddd9",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "We will cross that bridge when we get to it.\n",
        "createdAt" : "2016-09-15T00:10:02Z",
        "updatedAt" : "2016-09-15T00:10:02Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "e50105bd9e35565f12f14c6d1cc39947dcd1382d",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +429,433 @@                        containingNonArrowFunction = <FunctionLikeDeclaration>currentParent;\n                        if (!(containingNonArrowFunction.emitFlags & NodeEmitFlags.AsyncFunctionBody)) {\n                            superScopeContainer = containingNonArrowFunction;\n                        }\n                        break;"
  },
  {
    "id" : "48f50ac6-a22b-4957-8a50-38eabce02bc7",
    "prId" : 10890,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b47052a7-d9d2-46e1-8805-bd2b2a70d59b",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "shouldn't it be `ContainingYield`?\n",
        "createdAt" : "2016-09-13T17:05:32Z",
        "updatedAt" : "2016-09-13T19:59:09Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "a0e8bc77-9c81-4f71-909a-8687db2ce1b9",
        "parentId" : "b47052a7-d9d2-46e1-8805-bd2b2a70d59b",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Yes and no. It contains an `await` transformed into a `yield`.\n",
        "createdAt" : "2016-09-13T21:14:01Z",
        "updatedAt" : "2016-09-13T21:14:01Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "094cb6d6d709cb086519e8e2d7eb6b2eb6e2ee00",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2057,2061 @@            }\n\n            const isAsyncBlockContainingAwait =\n                containingNonArrowFunction\n                && (containingNonArrowFunction.emitFlags & NodeEmitFlags.AsyncFunctionBody) !== 0"
  },
  {
    "id" : "5abf241f-5fe5-4ac4-b6fd-3413e9e833ce",
    "prId" : 10762,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/10762#pullrequestreview-1833886",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9ea9aca-e1e1-4654-bb88-17a9989739b3",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "These overloads seem superfluous. Are they needed?\n",
        "createdAt" : "2016-09-27T16:53:04Z",
        "updatedAt" : "2016-09-30T03:33:57Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "747b6fdb-204a-4a06-a36c-f356178969c9",
        "parentId" : "e9ea9aca-e1e1-4654-bb88-17a9989739b3",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Removed.\n",
        "createdAt" : "2016-09-27T21:54:02Z",
        "updatedAt" : "2016-09-30T03:33:57Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "02b9917cd84bddd252b21e11088dc84d40c3ce1a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1275,1279 @@        }\n\n        function captureThisForNode(statements: Statement[], node: Node, initializer: Expression | undefined, originalStatement?: Statement): void {\n            enableSubstitutionsForCapturedThis();\n            const captureThisStatement = createVariableStatement("
  },
  {
    "id" : "529a3f46-ce9f-48b9-8faa-dcb4201dd7fe",
    "prId" : 8598,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb11e52e-a897-4434-a431-8c7a3af4e302",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "what happens now if expression is undefined?\n",
        "createdAt" : "2016-05-18T21:37:40Z",
        "updatedAt" : "2016-05-19T22:39:52Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "3c47d9dd-a717-462a-bcb6-af90bf78903c",
        "parentId" : "fb11e52e-a897-4434-a431-8c7a3af4e302",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "This should never be the case (`visitNode` will raise a debug assertion).\n",
        "createdAt" : "2016-05-19T22:29:35Z",
        "updatedAt" : "2016-05-19T22:39:52Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "150cecbaf37b959ead6ac1aa3b628d2385e02418",
    "line" : 361,
    "diffHunk" : "@@ -1,1 +1368,1372 @@\n                const expression = visitNode(body, visitor, isExpression);\n                const returnStatement = createReturn(expression, /*location*/ body);\n                setNodeEmitFlags(returnStatement, NodeEmitFlags.NoTokenSourceMaps | NodeEmitFlags.NoTrailingSourceMap | NodeEmitFlags.NoTrailingComments);\n                statements.push(returnStatement);"
  },
  {
    "id" : "d01ace2c-a06a-4a1b-9e57-a3ebcd067d53",
    "prId" : 7977,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fb13f40-685a-497b-9609-fd9d7f708e5b",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "is `original` still the right name for this?\n",
        "createdAt" : "2016-04-13T16:48:17Z",
        "updatedAt" : "2016-04-13T17:43:10Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "964e57b7-f8fc-4806-901c-b17064b7fe51",
        "parentId" : "6fb13f40-685a-497b-9609-fd9d7f708e5b",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "There's no reason why not. `getSourceTreeNodeOfType` and `getSourceTreeNode` follow `original` pointers, but return `undefined` if the original node is not a source tree node (e.g. the node must have a `parent` or be a `SourceFile`.)\n",
        "createdAt" : "2016-04-13T17:28:14Z",
        "updatedAt" : "2016-04-13T17:43:10Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "9899cda6d3eaefd685443e791d73135a31d2d613",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +2612,2616 @@            // bindings.\n            if (enabledSubstitutions & ES6SubstitutionFlags.BlockScopedBindings) {\n                const original = getSourceTreeNodeOfType(node, isIdentifier);\n                if (original && isNameOfDeclarationWithCollidingName(original)) {\n                    return getGeneratedNameForNode(original);"
  },
  {
    "id" : "3dc47ea8-c51e-4495-9fcf-cddb014963d6",
    "prId" : 7950,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "587bf5a0-9516-406d-9d87-1130bd53a912",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "In the emitter, the return statement's position is mapped to `node.members.end`. Also, rather than defining this here and passing it down as an argument, couldn't you derive it inside of `transformClassBody` as its the only place that uses it?\n",
        "createdAt" : "2016-04-13T18:06:05Z",
        "updatedAt" : "2016-04-16T19:11:27Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "13fb37e324b7042a97d6202756aef94751f143e6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +613,617 @@            }\n\n            const closingBraceLocation = { pos: node.end - 1, end: node.end };\n            const baseTypeNode = getClassExtendsHeritageClauseElement(node);\n            const classFunction = createFunctionExpression("
  },
  {
    "id" : "feb76176-142e-47e4-b036-19e861145c21",
    "prId" : 7693,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32d293fc-c6c9-449b-8a90-d160c6f40f43",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Each of these starts out explained as \"set of\", where really these are the types of jumps that this converted loop might need to deal with. So can you change each of these to \"Types of non-labeled jumps...\" etc.?\n",
        "createdAt" : "2016-03-29T07:08:25Z",
        "updatedAt" : "2016-03-29T16:28:41Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "a8a0b9ed-8dc9-4c39-9541-4b293c800b99",
        "parentId" : "32d293fc-c6c9-449b-8a90-d160c6f40f43",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "`Jump` represents a combination of flags so I think `set of` expresses this pretty nicely\n",
        "createdAt" : "2016-03-29T16:22:13Z",
        "updatedAt" : "2016-03-29T16:28:41Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d8d3b85bd8b0c194c1fd05b25d05dc40f1b4fce",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +81,85 @@\n        /*\n         * set of non-labeled jumps that transfer control outside the converted loop\n         * used to emit dispatching logic in the caller of converted loop\n         */"
  },
  {
    "id" : "fd059685-3af7-4457-bd0e-10841fe2faf0",
    "prId" : 7693,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd92bc38-0019-44bd-8835-0fdf5561f3ef",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "What return value are you referring to here? Also, why is the comment only in this specific branch?\n",
        "createdAt" : "2016-03-29T07:30:41Z",
        "updatedAt" : "2016-03-29T16:28:41Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "c60d0cac-7fe3-4cf6-bc97-5f41c89becf0",
        "parentId" : "bd92bc38-0019-44bd-8835-0fdf5561f3ef",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "`break` and `continue` inside converted loops are generated as `return` with some optional marker value that denotes jump target. Given that non-labeled `continue` emitted as `return` already terminates current iteration we don't need to handle it any specially on the callsite - the only purpose why we emit `return \"continue\"` instead of just `return` is to make debugging simpler.\n",
        "createdAt" : "2016-03-29T16:26:34Z",
        "updatedAt" : "2016-03-29T16:28:41Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d8d3b85bd8b0c194c1fd05b25d05dc40f1b4fce",
    "line" : 344,
    "diffHunk" : "@@ -1,1 +486,490 @@                        else {\n                            convertedLoopState.nonLocalJumps |= Jump.Continue;\n                            // note: return value is emitted only to simplify debugging, call to converted loop body does not do any dispatching on it.\n                            labelMarker = \"continue\";\n                        }"
  }
]