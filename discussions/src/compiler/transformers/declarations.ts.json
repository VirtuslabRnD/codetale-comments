[
  {
    "id" : "d602a7d9-03b0-4275-98d6-ccc6bc85977a",
    "prId" : 42585,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42585#pullrequestreview-580924024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d6d1835-a524-4be9-b933-f893e5af9aff",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I'd just capture these into a local so you can avoid the `!`",
        "createdAt" : "2021-02-02T01:58:31Z",
        "updatedAt" : "2021-02-02T01:58:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "db4ddd75c42b90d448f6a8c2cc1be6516fbe73f8",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +163,167 @@\n        function reportPrivateInBaseOfClassExpression(propertyName: string) {\n            if (errorNameNode || errorFallbackNode) {\n                context.addDiagnostic(\n                    createDiagnosticForNode((errorNameNode || errorFallbackNode)!, Diagnostics.Property_0_of_exported_class_expression_may_not_be_private_or_protected, propertyName));"
  },
  {
    "id" : "10e6a63c-099b-4c52-a76d-9beb491ad55e",
    "prId" : 38403,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38403#pullrequestreview-407916307",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "902d7a5e-fe0b-4ec0-8090-e4445856e380",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I thought you said earlier that jsdoc wasn't always available during transforms. Did I get that wrong?",
        "createdAt" : "2020-05-07T23:24:07Z",
        "updatedAt" : "2020-05-08T00:43:30Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "d4ea62c8-5ea4-48c8-be02-66dd9aa9396d",
        "parentId" : "902d7a5e-fe0b-4ec0-8090-e4445856e380",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "`parent` isn't always guaranteed during transformations so its unsafe to rely on. In this case, we are generating declarations directly from the parse tree, so `node` *should* have addressable jsdoc and that jsdoc (if it exists) will inform decisions about whether to include syntactic modifiers on the declaration output (which we would want in this case).",
        "createdAt" : "2020-05-08T00:06:52Z",
        "updatedAt" : "2020-05-08T00:43:30Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "39d9d22c073149291c1d9d1ffe7172a01c803e40",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +488,492 @@\n        function ensureType(node: HasInferredType, type: TypeNode | undefined, ignorePrivate?: boolean): TypeNode | undefined {\n            if (!ignorePrivate && hasEffectiveModifier(node, ModifierFlags.Private)) {\n                // Private nodes emit no types (except private parameter properties, whose parameter types are actually visible)\n                return;"
  },
  {
    "id" : "9ed3b46d-063a-4ae0-872c-340bab755ad6",
    "prId" : 36593,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36593#pullrequestreview-356928619",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2390adb6-a9df-4208-837e-698b7f7d0ccd",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "issuing errors would essentially conflict with this PR, though, right? It seems like this PR's intent is to elide.",
        "createdAt" : "2020-02-11T18:56:29Z",
        "updatedAt" : "2020-02-11T19:04:11Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "e22face6-6847-45bd-8b6e-a56c337a2294",
        "parentId" : "2390adb6-a9df-4208-837e-698b7f7d0ccd",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Issuing errors would be a breaking change, since our past behavior with late bound stuff has always been to elide what we couldn't emit. Still, it means we're quietly omitting type information from the declaration file. Usually that'd warrant an error in any other scenario, imo.",
        "createdAt" : "2020-02-11T19:23:12Z",
        "updatedAt" : "2020-02-11T19:23:12Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8db13ea472133ff5a8d561af3083b064adef7f1b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1166,1170 @@                            const name = unescapeLeadingUnderscores(p.escapedName);\n                            if (!isIdentifierText(name, ScriptTarget.ES3)) {\n                                return undefined; // TODO: Rather than quietly eliding (as is current behavior), maybe we should issue errors?\n                            }\n                            getSymbolAccessibilityDiagnostic = createGetSymbolAccessibilityDiagnosticForNode(p.valueDeclaration);"
  },
  {
    "id" : "7366e481-f8d4-4793-9b16-ed3d6b52a57c",
    "prId" : 29905,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29905#pullrequestreview-203501666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8dcefe1-10c6-4557-b35a-b971d23cd445",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I don't know this part of the codebase, but I don't get why you're not stashing into `oldDiag` first.",
        "createdAt" : "2019-02-13T22:51:59Z",
        "updatedAt" : "2019-02-13T22:51:59Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "18fe24cb-5e98-49d1-9eb1-f88487e41d00",
        "parentId" : "c8dcefe1-10c6-4557-b35a-b971d23cd445",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Because we already stashed it for the context we made for the associated function declaration ❤️ ",
        "createdAt" : "2019-02-13T23:25:11Z",
        "updatedAt" : "2019-02-13T23:25:11Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "94de7ef90b550d01522f9b3b9b604b47b95596ab",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1009,1013 @@                            getSymbolAccessibilityDiagnostic = createGetSymbolAccessibilityDiagnosticForNode(p.valueDeclaration);\n                            const type = resolver.createTypeOfDeclaration(p.valueDeclaration, enclosingDeclaration, declarationEmitNodeBuilderFlags, symbolTracker);\n                            getSymbolAccessibilityDiagnostic = oldDiag;\n                            const varDecl = createVariableDeclaration(unescapeLeadingUnderscores(p.escapedName), type, /*initializer*/ undefined);\n                            return createVariableStatement(/*modifiers*/ undefined, createVariableDeclarationList([varDecl]));"
  },
  {
    "id" : "7fe1919b-d8cc-4992-a2fb-624b26b61204",
    "prId" : 23351,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23351#pullrequestreview-118947954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8803fdda-b17a-420c-928d-0395c9f66eb0",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Why was this needed? If `AccessorDeclaration` is now synthetic, you could just call `getParseTreeNode` (which you are _still_ doing in the version in the checker) and use the existing `getAllAccessorDeclarations` in _utilities.ts_.",
        "createdAt" : "2018-05-09T22:15:57Z",
        "updatedAt" : "2018-05-10T00:31:53Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "e8d07a14-383b-47c7-9394-100d3cf79dc9",
        "parentId" : "8803fdda-b17a-420c-928d-0395c9f66eb0",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Computed property names have differing names and need to merge - the only way to do so is via their symbol.",
        "createdAt" : "2018-05-10T00:31:21Z",
        "updatedAt" : "2018-05-10T00:31:53Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e6e6ee2a2855087a6cca4b85e6e4dd1e38b4789",
    "line" : 322,
    "diffHunk" : "@@ -1,1 +1157,1161 @@\n        function ensureAccessor(node: AccessorDeclaration): PropertyDeclaration | undefined {\n            const accessors = resolver.getAllAccessorDeclarations(node);\n            if (node.kind !== accessors.firstAccessor.kind) {\n                return;"
  },
  {
    "id" : "6d6a9cea-5cea-4963-b8d1-ffa96c1a383e",
    "prId" : 22752,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22752#pullrequestreview-108197330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3687c6b-476b-4fac-ab07-6fbad049b3d5",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "nit. `return undefined` and return type should be `FileReference | undefined`",
        "createdAt" : "2018-03-29T20:43:42Z",
        "updatedAt" : "2018-03-29T22:51:56Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ae84ed8c2c6a20ce90ac2a2a0c15b8cfad5fd3a",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +208,212 @@                    if (isImportEqualsDeclaration(importStatement) && isExternalModuleReference(importStatement.moduleReference)) {\n                        const expr = importStatement.moduleReference.expression;\n                        if (isStringLiteralLike(expr) && expr.text === typeName) {\n                            return undefined;\n                        }"
  },
  {
    "id" : "1e6edd8c-bbfc-47a9-89b6-f58043de9ce7",
    "prId" : 21930,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21930#pullrequestreview-104061677",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8636d6cb-2c28-4889-923e-82112802624f",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Is this your `// TODO` or an existing `// TODO` that was just copied over?",
        "createdAt" : "2018-03-15T01:28:28Z",
        "updatedAt" : "2018-03-15T23:08:04Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "39e848c7-99e8-49ce-8cd9-e4ed54c73743",
        "parentId" : "8636d6cb-2c28-4889-923e-82112802624f",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I put an existing `TODO` into words.",
        "createdAt" : "2018-03-15T02:49:44Z",
        "updatedAt" : "2018-03-15T23:08:04Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d729cfb9b8d9064b79960f234b1e462ba2fe497",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +74,78 @@                }\n\n                // TODO: Do all these accessibility checks inside/after the first pass in the checker when declarations are enabled, if possible\n            }\n            else {"
  }
]