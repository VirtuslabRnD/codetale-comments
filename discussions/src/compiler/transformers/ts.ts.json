[
  {
    "id" : "0035c335-cf67-4fb6-80ae-c7d8f26ae364",
    "prId" : 32064,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32064#pullrequestreview-293911447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee321db7-541e-4310-a6ca-dd711d51b822",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Just curious, what was this one needed for?",
        "createdAt" : "2019-09-26T16:36:38Z",
        "updatedAt" : "2019-09-27T17:36:57Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "875134c7-accf-4b05-a696-4be990a86b8c",
        "parentId" : "ee321db7-541e-4310-a6ca-dd711d51b822",
        "authorId" : "4271dfc6-881a-4a6a-a9fe-ced42336f1e2",
        "body" : "Template literals and string literals with extended Unicode escapes will be first processed with es2015 transformer which will replace them with `Synthesized` string literals that don't have reference to parent element or to original node.\r\n\r\nUnder the hood `getTextOfNode(node.argumentExpression)` will call `getSourceFileOfNode` on `Synthesized` string literal which will return `undefined` (because `node.parent` is `undefined`) and then [`getSourceTextOfNodeFromSourceFile`](https://github.com/microsoft/TypeScript/blob/3dd7b84ef82f5985d15b20ac0c150302bcdc49d9/src/compiler/utilities.ts#L522-L524) that will try to access `sourceFile.text` and exception will be thrown.\r\n\r\nOn the other hand `ElementAccessExpression` even if will be replaced with `Synthesized` node, it will have link to original node. Therefore `originalNode.argumentExpression` will have proper parent references up to source file and text will be retrieved correctly.",
        "createdAt" : "2019-09-26T18:13:58Z",
        "updatedAt" : "2019-09-27T17:36:57Z",
        "lastEditedBy" : "4271dfc6-881a-4a6a-a9fe-ced42336f1e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "169566a34923c10097cfe30e82491e68b1d3b9ab",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +3250,3254 @@                const substitute = createLiteral(constantValue);\n                if (!compilerOptions.removeComments) {\n                    const originalNode = getOriginalNode(node, isAccessExpression);\n                    const propertyName = isPropertyAccessExpression(originalNode)\n                        ? declarationNameToString(originalNode.name)"
  },
  {
    "id" : "5374a3a0-bdf6-4c39-b44f-ff3c48f13f11",
    "prId" : 31777,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31777#pullrequestreview-267926367",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4346243-cc4f-4d15-a3bd-d28d2a2942c8",
        "parentId" : null,
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "It's annoying that we have to do this for comments, but maybe it's not too bad.",
        "createdAt" : "2019-07-29T17:44:44Z",
        "updatedAt" : "2019-09-10T13:34:39Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      }
    ],
    "commit" : "861f0bec01eaabd65145a70205c03b4f2d005e44",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +371,375 @@                case SyntaxKind.ReadonlyKeyword:\n                // TypeScript accessibility and readonly modifiers are elided\n                // falls through\n                case SyntaxKind.ArrayType:\n                case SyntaxKind.TupleType:"
  },
  {
    "id" : "6e11f1d3-025d-4d11-8c7e-492a65997e63",
    "prId" : 27410,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27410#pullrequestreview-159714083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bcdb0be-cf53-4c9a-a021-83253000ce6d",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Name no longer accurate",
        "createdAt" : "2018-09-28T01:31:20Z",
        "updatedAt" : "2018-09-28T01:32:45Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "29fa0b54-5273-4a05-b121-9a3758101f4d",
        "parentId" : "6bcdb0be-cf53-4c9a-a021-83253000ce6d",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "How is it no longer accurate? It is checking the same thing.",
        "createdAt" : "2018-09-28T03:41:36Z",
        "updatedAt" : "2018-09-28T03:41:36Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "ed945541-87a7-4deb-bfd7-6a1cae77a0bd",
        "parentId" : "6bcdb0be-cf53-4c9a-a021-83253000ce6d",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I thought this would now trigger if any TS features were used inside it, not just parameter property assignments.",
        "createdAt" : "2018-09-28T04:04:50Z",
        "updatedAt" : "2018-09-28T04:04:50Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d224ee02d76d00f2ee47bed6314f4495284353c8",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +976,980 @@            const constructor = getFirstConstructorWithBody(node);\n            const hasInstancePropertyWithInitializer = forEach(node.members, isInstanceInitializedProperty);\n            const hasParameterPropertyAssignments = constructor &&\n                constructor.transformFlags & TransformFlags.ContainsTypeScriptClassSyntax &&\n                forEach(constructor.parameters, isParameterWithPropertyAssignment);"
  },
  {
    "id" : "9aa4b973-9b79-4ed3-8c6a-304edb673241",
    "prId" : 25886,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25886#pullrequestreview-170895495",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3211a897-dce8-4abb-b07e-95c1b7382162",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You also need to handle SyntaxKind.BigIntKeyword and BigIntLiterals in `serializeTypeNode` ",
        "createdAt" : "2018-11-01T21:38:56Z",
        "updatedAt" : "2018-11-05T20:24:02Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb99c4123003ade3e471cf17472be6d3f72d96ff",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +2013,2017 @@                    return createVoidZero();\n\n                case TypeReferenceSerializationKind.BigIntLikeType:\n                    return getGlobalBigIntNameWithFallback();\n"
  },
  {
    "id" : "f6378d2f-7385-48e1-9e76-a4a620d012d1",
    "prId" : 19430,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19430#pullrequestreview-71358959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3340c7db-8dcd-43a2-8364-dd7a65726bc2",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Can we do this in a `visitPropertyDeclaration` function instead?",
        "createdAt" : "2017-10-23T23:32:43Z",
        "updatedAt" : "2017-11-06T20:26:42Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b86cbbbbf35ef4a49f8813c2fc29b5f12ec0b73d",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +398,402 @@\n                case SyntaxKind.PropertyDeclaration:\n                    // TypeScript property declarations are elided. However their names are still visited, and can potentially be retained if they could have sideeffects\n                    return visitPropertyDeclaration(node as PropertyDeclaration);\n"
  },
  {
    "id" : "b7a1417b-7647-449b-ae8e-e18917f2c254",
    "prId" : 16120,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16120#pullrequestreview-41091440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75175130-668b-4098-8e29-c6b96dcf0b82",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Nit: `NeedImmediatelyInvokedFunctionExpression`",
        "createdAt" : "2017-05-30T18:54:28Z",
        "updatedAt" : "2017-05-31T21:58:42Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "a9389029-4af3-4eee-813b-6ee854c68cb8",
        "parentId" : "75175130-668b-4098-8e29-c6b96dcf0b82",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "These two flags indicates that the class *may* need an IIFE. Whether it *actually* needs it is also based on the target language, which is not encoded in these flags.",
        "createdAt" : "2017-05-30T22:23:27Z",
        "updatedAt" : "2017-05-31T21:58:42Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ddbfcae8a40c6f1618594b774f6a7f321dd9a9c",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +32,36 @@        HasAnyDecorators = HasConstructorDecorators | HasMemberDecorators,\n        NeedsName = HasStaticInitializedProperties | HasMemberDecorators,\n        MayNeedImmediatelyInvokedFunctionExpression = HasAnyDecorators | HasStaticInitializedProperties,\n        IsExported = IsExportOfNamespace | IsDefaultExternalExport | IsNamedExternalExport,\n    }"
  },
  {
    "id" : "d5c30ec6-ac74-468a-8bb6-6f281a134418",
    "prId" : 16120,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16120#pullrequestreview-41041317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "785e512a-e01f-4631-8fde-a3377f20af3d",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Nit: add comment show the transform result",
        "createdAt" : "2017-05-30T19:19:06Z",
        "updatedAt" : "2017-05-31T21:58:42Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ddbfcae8a40c6f1618594b774f6a7f321dd9a9c",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +576,580 @@            addConstructorDecorationStatement(statements, node);\n\n            if (facts & ClassFacts.UseImmediatelyInvokedFunctionExpression) {\n                // When we emit a TypeScript class down to ES5, we must wrap it in an IIFE so that the\n                // 'es2015' transformer can properly nest static initializers and decorators. The result"
  },
  {
    "id" : "347307a1-72f6-4802-94e0-55740832f9cd",
    "prId" : 16120,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16120#pullrequestreview-41092069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "285de6b0-4d31-4917-997c-017a9da46987",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Comments here seems to be outdated since we not always emit modifiers",
        "createdAt" : "2017-05-30T19:25:08Z",
        "updatedAt" : "2017-05-31T21:58:42Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "d35df0b1-f146-44a5-9893-771f7a5dff43",
        "parentId" : "285de6b0-4d31-4917-997c-017a9da46987",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "It just illustrates an example of the emit. I'm not too terribly concerned.",
        "createdAt" : "2017-05-30T22:26:54Z",
        "updatedAt" : "2017-05-31T21:58:42Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ddbfcae8a40c6f1618594b774f6a7f321dd9a9c",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +654,658 @@         */\n        function createClassDeclarationHeadWithoutDecorators(node: ClassDeclaration, name: Identifier, facts: ClassFacts) {\n            //  ${modifiers} class ${name} ${heritageClauses} {\n            //      ${members}\n            //  }"
  },
  {
    "id" : "5195381d-e9d0-4823-8b4c-6bbf300ce058",
    "prId" : 12715,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12715#pullrequestreview-16460647",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97a1f4ff-703f-45d5-b080-abba42e02334",
        "parentId" : null,
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "What's up with these `^M` line breaks? There are a lot of them in the following files.",
        "createdAt" : "2017-01-10T23:57:13Z",
        "updatedAt" : "2017-01-17T18:42:38Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "ec07f9c7-10f0-4453-8641-1facdc39e33d",
        "parentId" : "97a1f4ff-703f-45d5-b080-abba42e02334",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I've looked at this and don't know why it shows a diff here.\r\n\r\n* It only shows `^M` on lines that I've changed -- if I had changed line endings in the file, presumably they would show as changed in the whole file.\r\n* When I look at the file, it appears to have CRLF line endings (on all lines) on both `master` and `map5`. I have `core.autocrlf` set to `false`. Tested on both Windows and Linux.\r\n\r\nAfter merge I'll look back to this file to see if it has mixed line endings, but I doubt that.\r\nCC @DanielRosenwasser ",
        "createdAt" : "2017-01-12T21:34:25Z",
        "updatedAt" : "2017-01-17T18:42:38Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "30ccc7a5d01dd090902c720193f50c817ff5d678",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +-1,3 @@﻿/// <reference path=\"../factory.ts\" />\n/// <reference path=\"../visitor.ts\" />\n/// <reference path=\"./destructuring.ts\" />"
  },
  {
    "id" : "b63a88cd-8862-442e-aae8-8590ab9aaa6e",
    "prId" : 8598,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96441a75-4c1c-4682-8036-024601e352d3",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "I don't understand why you set location to the member of class\n",
        "createdAt" : "2016-05-16T17:32:50Z",
        "updatedAt" : "2016-05-19T22:39:52Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "47f1795c-6da0-4cb9-8552-72838cdd2330",
        "parentId" : "96441a75-4c1c-4682-8036-024601e352d3",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "This is to align with emitter.ts, line 5277:\n\n``` ts\nemitToken(SyntaxKind.CloseBraceToken, ctor ? (<Block>ctor.body).statements.end : node.members.end);\n```\n",
        "createdAt" : "2016-05-16T20:30:46Z",
        "updatedAt" : "2016-05-19T22:39:52Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "150cecbaf37b959ead6ac1aa3b628d2385e02418",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +866,870 @@                    createNodeArray(\n                        statements,\n                        /*location*/ constructor ? constructor.body.statements : node.members\n                    ),\n                    /*location*/ constructor ? constructor.body : undefined"
  },
  {
    "id" : "c9abe663-964f-4826-b1b1-6b82cb8dbfa2",
    "prId" : 8598,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91a822cf-80b8-4d5a-951a-140e591f269f",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Would this mean we will not emit comment in the following case:\n\n``` ts\nclass C {\n   // Comment\n   @dec prop;\n}\n```\n",
        "createdAt" : "2016-05-16T18:00:37Z",
        "updatedAt" : "2016-05-19T22:39:52Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "026dab03-9f67-4dde-81c0-dd9fdb48eb2c",
        "parentId" : "91a822cf-80b8-4d5a-951a-140e591f269f",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Should this line be move into \"...DecorateHelper\"? So we won't have to make sure \"setNodeEmitFlags(helper, NodeEmitFlags.NoComments);\" is called by the caller every times\n",
        "createdAt" : "2016-05-16T18:08:11Z",
        "updatedAt" : "2016-05-19T22:39:52Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "150cecbaf37b959ead6ac1aa3b628d2385e02418",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1340,1344 @@            );\n\n            setNodeEmitFlags(helper, NodeEmitFlags.NoComments);\n            return helper;\n        }"
  },
  {
    "id" : "a16dfad7-93ec-49df-a3de-03a0d6b5ac66",
    "prId" : 8598,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de2eca5a-d974-4202-883f-457196b8bbd9",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Looks like this expression can be simplified to `return createNotEmittedStatement(node)`\n",
        "createdAt" : "2016-05-18T20:52:35Z",
        "updatedAt" : "2016-05-19T22:39:52Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "150cecbaf37b959ead6ac1aa3b628d2385e02418",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +227,231 @@        function visitTypeScript(node: Node): VisitResult<Node> {\n            if (hasModifier(node, ModifierFlags.Ambient) && isStatement(node)) {\n                // TypeScript ambient declarations are elided, but some comments may be preserved.\n                // See the implementation of `getLeadingComments` in comments.ts for more details.\n                return createNotEmittedStatement(node);"
  },
  {
    "id" : "6654c260-fca4-43ad-b4db-f522ebe277aa",
    "prId" : 8598,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd4e59ea-d4fc-43be-b09c-044a6b1d300c",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "change to `if (constructor && foreach(constructor.parameters, p => p.decorators && p.decorators.length > 0))`\n",
        "createdAt" : "2016-05-18T20:56:36Z",
        "updatedAt" : "2016-05-19T22:39:52Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "150cecbaf37b959ead6ac1aa3b628d2385e02418",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +428,432 @@\n            const constructor = getFirstConstructorWithBody(node);\n            if (constructor) {\n                return forEach(constructor.parameters, shouldEmitDecorateCallForParameter);\n            }"
  },
  {
    "id" : "431c61e3-ec1b-4e83-9b7c-a37c8f6193ba",
    "prId" : 8064,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bce3506-7c51-4380-8d82-61e368c8fd2d",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I can't find `addVarForEnumOrModuleDeclaration` in `transforms` branch, and I don't see it added here. Am I missing something?\n",
        "createdAt" : "2016-04-13T21:12:42Z",
        "updatedAt" : "2016-04-13T21:19:37Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "5eded007-1008-4519-af2c-98e5efa41f0b",
        "parentId" : "2bce3506-7c51-4380-8d82-61e368c8fd2d",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "https://github.com/Microsoft/TypeScript/pull/8064/commits/27adb8c363c6a172a5a489929251f569666bd2d2#diff-c0d0e8b1528663b6cff3bb893150cec3R2382 \nRenamed `addVarForModuleDeclaration` to `addVarForEnumOrModuleDeclaration`\n",
        "createdAt" : "2016-04-13T21:15:52Z",
        "updatedAt" : "2016-04-13T21:19:37Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e47f22fcc75cc0989dfb5f44ec372896bb38447",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +2244,2248 @@            const statements: Statement[] = [];\n            if (shouldEmitVarForEnumDeclaration(node)) {\n                addVarForEnumOrModuleDeclaration(statements, node);\n            }\n"
  },
  {
    "id" : "c0913672-2e42-4efb-8e6c-68b1b5163eea",
    "prId" : 8028,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ca19aa9-1be5-46f8-9b2e-3b3c9d4a4aba",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "There's already an `addPrologueDirectives` function. Can we that instead?\n",
        "createdAt" : "2016-04-13T18:30:01Z",
        "updatedAt" : "2016-04-15T22:26:01Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "e65b1754-2acd-4f63-825d-4847416fe3de",
        "parentId" : "5ca19aa9-1be5-46f8-9b2e-3b3c9d4a4aba",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "sure\n",
        "createdAt" : "2016-04-13T21:08:47Z",
        "updatedAt" : "2016-04-15T22:26:01Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "487be624930771e9ef58e980c22a97a7d9f46a8c",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +850,854 @@         * @returns index of the statement that follows super call\n         */\n        function addPrologueDirectivesAndInitialSuperCall(ctor: ConstructorDeclaration, result: Statement[]): number {\n            if (ctor.body) {\n                const statements = ctor.body.statements;"
  },
  {
    "id" : "c23a2141-402c-4f18-b146-e2ff25fe7f9f",
    "prId" : 7977,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e9d3b66-7307-46c4-b572-4cf52214410b",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "this is half of the fix for #7894 . :)\n",
        "createdAt" : "2016-04-13T16:58:00Z",
        "updatedAt" : "2016-04-13T17:43:10Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "9899cda6d3eaefd685443e791d73135a31d2d613",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +2766,2770 @@            if (enabledSubstitutions & applicableSubstitutions) {\n                // If this is explicitly a local name, do not substitute.\n                if (getNodeEmitFlags(node) & NodeEmitFlags.LocalName) {\n                    return node;\n                }"
  }
]