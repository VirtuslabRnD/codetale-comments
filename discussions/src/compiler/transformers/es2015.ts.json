[
  {
    "id" : "b674c92b-86ef-4bbc-9f02-5addb5d0636f",
    "prId" : 38596,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38596#pullrequestreview-412815063",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d258d1cc-5ebf-4e1f-a524-7c1eb1b7b80f",
        "parentId" : null,
        "authorId" : "1e789298-f9d6-4b64-b80b-206f2f8fbd2a",
        "body" : "I put this since I figured that it won't hurt to check it, but maybe it's better to use a `?` or maybe leave as is?",
        "createdAt" : "2020-05-15T16:56:55Z",
        "updatedAt" : "2020-05-15T21:58:46Z",
        "lastEditedBy" : "1e789298-f9d6-4b64-b80b-206f2f8fbd2a",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea1e0aba73b0695b15d847b8ee50a28f79c91f57",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2584,2588 @@                    numInitialPropertiesWithoutYield = i;\n                }\n                if (Debug.checkDefined(property.name).kind === SyntaxKind.ComputedPropertyName) {\n                    numInitialProperties = i;\n                    break;"
  },
  {
    "id" : "4bcfab4d-1956-466c-9e6e-fa57b8195e8a",
    "prId" : 32844,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32844#pullrequestreview-274566092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f5198a8-db63-4b28-947b-d552987f01c3",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Wait, what? `node.text` is the cooked string value, I thought - yes, it can contain quotes and stuff, but it shouldn't need to be `substring`'d?",
        "createdAt" : "2019-08-13T19:50:09Z",
        "updatedAt" : "2019-08-13T22:12:15Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "e6cf5601-1b59-4826-ad2d-c31f8bfbf5bf",
        "parentId" : "5f5198a8-db63-4b28-947b-d552987f01c3",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "My bad, that should be `text = getSourceTextOfNodeFromSourceFile(currentSourceFile, node);`",
        "createdAt" : "2019-08-13T21:27:22Z",
        "updatedAt" : "2019-08-13T22:12:15Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e98fc36352fe4646ab9112ebcba9b54282d5926",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +4002,4006 @@                text = getSourceTextOfNodeFromSourceFile(currentSourceFile, node);\n\n                // text contains the original source, it will also contain quotes (\"`\"), dolar signs and braces (\"${\" and \"}\"),\n                // thus we need to remove those characters.\n                // First template piece starts with \"`\", others with \"}\""
  },
  {
    "id" : "1372bae8-b894-4342-bca1-efb56a3b75d8",
    "prId" : 31166,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31166#pullrequestreview-247783856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2dd412d-4914-4222-b3d2-72328b187daa",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "```ts\r\nconst innerSpreadEmpty = [1, 2, ...[...[,,,]]]\r\n```\r\n?",
        "createdAt" : "2019-06-10T18:36:26Z",
        "updatedAt" : "2019-06-11T19:19:49Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "a141b9ae-a25a-4622-ac93-7f25d359396d",
        "parentId" : "f2dd412d-4914-4222-b3d2-72328b187daa",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Works just fine.",
        "createdAt" : "2019-06-10T18:53:16Z",
        "updatedAt" : "2019-06-11T19:19:49Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "ea494ea8-7106-4f48-9662-eff771209473",
        "parentId" : "f2dd412d-4914-4222-b3d2-72328b187daa",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "It basically catches `[...[1, 2]]` and turns it into `[1, 2]` rather than calling the helper.",
        "createdAt" : "2019-06-10T18:54:45Z",
        "updatedAt" : "2019-06-11T19:19:49Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6b3a11a2870f388527f89273a42f2c890e577d8",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +3860,3864 @@\n        function isPackedElement(node: Expression) {\n            return !isOmittedExpression(node);\n        }\n"
  },
  {
    "id" : "31107d52-0b88-4a1a-809e-f4c7c4321346",
    "prId" : 27204,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27204#pullrequestreview-159622704",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52c31e4e-5ea4-4c6e-9af4-4c1c750f2c32",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I dislike a non-TS transform relying on typechecking information to be correct. Especially since this means that in the presence of a `before` transformer, it's very possible that we'll fail to convert something which needs to be.",
        "createdAt" : "2018-09-27T18:16:49Z",
        "updatedAt" : "2018-09-27T18:16:49Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "50a06ab6-cfb6-4221-a89a-58ff42322f76",
        "parentId" : "52c31e4e-5ea4-4c6e-9af4-4c1c750f2c32",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "We do this in other places, which is the reason we have `original` pointers for nodes to begin with.",
        "createdAt" : "2018-09-27T20:10:31Z",
        "updatedAt" : "2018-09-27T20:10:31Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "b943a566-d187-4a75-8d90-2469fc2170df",
        "parentId" : "52c31e4e-5ea4-4c6e-9af4-4c1c750f2c32",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Geh, you're right. It's actually only a few transforms that can operate without a typechecker available.",
        "createdAt" : "2018-09-27T20:16:49Z",
        "updatedAt" : "2018-09-27T20:16:49Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "efe76c4375576be6063eaf079e0f8695ae20a097",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +2634,2638 @@\n        function shouldConvertPartOfIterationStatement(node: Node) {\n            return (resolver.getNodeCheckFlags(node) & NodeCheckFlags.ContainsCapturedBlockScopeBinding) !== 0;\n        }\n"
  },
  {
    "id" : "2f1114e3-d61c-4c3d-901b-ad7a0d252dc3",
    "prId" : 25317,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25317#pullrequestreview-135173853",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9545b9f8-996c-4e0d-b02d-eda6a9e733dd",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "not sure i understand what this change is doing?",
        "createdAt" : "2018-07-03T21:43:44Z",
        "updatedAt" : "2018-07-18T07:00:42Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "1cd06f90-8a7c-4383-a414-c0d1a8f157d3",
        "parentId" : "9545b9f8-996c-4e0d-b02d-eda6a9e733dd",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Fixing #25340 by lifting a sequence of, eg `VariableStatement, EndOfDeclarationMarker` (like a downlevel class produces) into a block. (Since right now that triggers an assertion violation)",
        "createdAt" : "2018-07-06T22:30:13Z",
        "updatedAt" : "2018-07-18T07:00:42Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ce321fa6243ba7563ea19fe896412c4246afbce",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2208,2212 @@            return isIterationStatement(statement, /*lookInLabeledStatements*/ false)\n                ? visitIterationStatement(statement, /*outermostLabeledStatement*/ node)\n                : restoreEnclosingLabel(visitNode(statement, visitor, isStatement, liftToBlock), node, convertedLoopState && resetLabel);\n        }\n"
  },
  {
    "id" : "0e2bd8e1-6049-43bc-a5fd-8f0d3826007f",
    "prId" : 18300,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18300#pullrequestreview-66379276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4ce5c23-492d-4d28-998f-9d6d27efba4f",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "What about:\r\n```js\r\ncooked.raw = raw;\r\nif (Object.freeze) Object.freeze(cooked);\r\nreturn cooked;\r\n```\r\n\r\nOr, the one-line alternative:\r\n```js\r\nreturn Object.defineProperty ? Object.defineProperty(cooked, \"raw\", { value: raw }) : (cooked.raw = raw, cooked);\r\n```\r\n",
        "createdAt" : "2017-10-02T03:57:07Z",
        "updatedAt" : "2017-10-03T07:37:45Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "fd9e08d3-833f-4c0a-8a35-0304e07f9557",
        "parentId" : "d4ce5c23-492d-4d28-998f-9d6d27efba4f",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Uglify already produces a shorter output given this current implementation.",
        "createdAt" : "2017-10-02T07:33:51Z",
        "updatedAt" : "2017-10-03T07:37:45Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "f0aa6ab0-5d05-4e38-bc3f-ab66a7c119d3",
        "parentId" : "d4ce5c23-492d-4d28-998f-9d6d27efba4f",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "_Slightly_ better one-liner (two less characters, just as readable and correct):\r\n```ts\r\nreturn Object.defineProperty ? Object.defineProperty(cooked, \"raw\", { value: raw }) : cooked.raw = raw, cooked;\r\n```\r\nWhich is, coincidentally, how uglify restructures what daniel has right now when it minifies it.",
        "createdAt" : "2017-10-02T07:37:36Z",
        "updatedAt" : "2017-10-03T07:37:45Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fd638c7a8449e0d15f0f32e2557f08f26c95c9e",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +4092,4096 @@        priority: 0,\n        text: `\n            var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {\n                if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n                return cooked;"
  },
  {
    "id" : "638e33ac-e1eb-4f40-b775-9a9dbfbda8d8",
    "prId" : 16120,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16120#pullrequestreview-40953648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09f75bd0-3022-4578-b3f3-4a3282d5ac1d",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "In `isTypeScriptClassWrapper`, this just skips parentheses.",
        "createdAt" : "2017-05-30T14:09:33Z",
        "updatedAt" : "2017-05-31T21:58:42Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ddbfcae8a40c6f1618594b774f6a7f321dd9a9c",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +3354,3358 @@            // We skip any outer expressions in a number of places to get to the innermost\n            // expression, but we will restore them later to preserve comments and source maps.\n            const body = cast(skipOuterExpressions(node.expression), isFunctionExpression).body;\n\n            // The class statements are the statements generated by visiting the first statement of the"
  },
  {
    "id" : "da88c5d4-0a86-421c-b753-2cadffe707ba",
    "prId" : 16120,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16120#pullrequestreview-41067397",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c47f66f-60e2-4f06-81cb-275ae23b6725",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "great comment 👍 ",
        "createdAt" : "2017-05-30T20:37:51Z",
        "updatedAt" : "2017-05-31T21:58:42Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ddbfcae8a40c6f1618594b774f6a7f321dd9a9c",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +3321,3325 @@\n        function visitTypeScriptClassWrapper(node: CallExpression) {\n            // This is a call to a class wrapper function (an IIFE) created by the 'ts' transformer.\n            // The wrapper has a form similar to:\n            //"
  },
  {
    "id" : "7a8ada57-7c37-4290-9caa-8b7055204eb9",
    "prId" : 15379,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15379#pullrequestreview-34700035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14e38210-7a08-440d-bb58-49883f334538",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "you can use `findAncestor` in `core.ts` to replace this loop. It's fairly new, about a week or so old.",
        "createdAt" : "2017-04-25T20:40:41Z",
        "updatedAt" : "2017-04-25T21:13:57Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "aaf7fa19-1912-449e-a22f-2e049a0e647b",
        "parentId" : "14e38210-7a08-440d-bb58-49883f334538",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "`findAncestor` doesn't do much to improve this. It's the same number of lines, introduces a new environment record for the closure each time it's called, and doesn't improve readability of the function. There's no apparent performance difference between the two, as far as I can tell.\r\n\r\n```ts\r\n        function isPartOfClassBody(declaration: ClassLikeDeclaration, node: Identifier) {\r\n            node = getParseTreeNode(node, isIdentifier);\r\n            if (!node || node.end <= declaration.pos || node.pos >= declaration.end) {\r\n                // if the node has no correlation to a parse tree node, its definitely not\r\n                // part of the body.\r\n                // if the node is outside of the document range of the declaration, its\r\n                // definitely not part of the body.\r\n                return false;\r\n            }\r\n            const blockScope = getEnclosingBlockScopeContainer(declaration);\r\n            return !!findAncestor(node, current => {\r\n                if (current === blockScope || current === declaration) {\r\n                    return \"quit\";\r\n                }\r\n                if (isClassElement(current) && current.parent === declaration) {\r\n                    // we are in the class body, but we treat static fields as outside of the class body\r\n                    return current.kind !== SyntaxKind.PropertyDeclaration\r\n                        || (getModifierFlags(current) & ModifierFlags.Static) === 0 ? true : \"quit\";\r\n                }\r\n                return false;\r\n            });\r\n        }\r\n```",
        "createdAt" : "2017-04-25T21:54:13Z",
        "updatedAt" : "2017-04-25T21:54:13Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "e8ccb1d0-f73d-4168-979b-27525f3945da",
        "parentId" : "14e38210-7a08-440d-bb58-49883f334538",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Fair enough. If there's no readability benefit then there's no point introducing it.",
        "createdAt" : "2017-04-25T21:55:43Z",
        "updatedAt" : "2017-04-25T21:55:43Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d1ebd0d70677cedf76b0dfa97513e7d91aca0d2",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +3799,3803 @@            }\n            const blockScope = getEnclosingBlockScopeContainer(declaration);\n            while (currentNode) {\n                if (currentNode === blockScope || currentNode === declaration) {\n                    // if we are in the enclosing block scope of the declaration, we are definitely"
  },
  {
    "id" : "f5f9a589-cfd7-4a18-8770-078f825e0748",
    "prId" : 14090,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14090#pullrequestreview-32669532",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d656bd8-b77e-4812-af49-0dfc3e060797",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "We need to always emit *real* prologue directives first (e.g. \"use strict\"), then our custom prologue statements.",
        "createdAt" : "2017-04-11T23:56:52Z",
        "updatedAt" : "2017-04-13T20:22:20Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "4effdd3d-9869-4a95-95ec-c205aea77295",
        "parentId" : "7d656bd8-b77e-4812-af49-0dfc3e060797",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Maybe we need to split `addPrologueDirectives` into two functions, `addPrologueDirectives` (which only handles *real* prologue directives) and `addCustomPrologueDirectives` (which only handles our custom leading statements).",
        "createdAt" : "2017-04-11T23:58:22Z",
        "updatedAt" : "2017-04-13T20:22:20Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "ea4f30a1-dabd-4ab9-a969-2181a56bc902",
        "parentId" : "7d656bd8-b77e-4812-af49-0dfc3e060797",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "How do I tell the difference? Is \"use strict\" the only real prologue directive right now?",
        "createdAt" : "2017-04-12T20:14:20Z",
        "updatedAt" : "2017-04-13T20:22:20Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "eeae29a3-c267-40c7-9184-a0757d0d4c40",
        "parentId" : "7d656bd8-b77e-4812-af49-0dfc3e060797",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Ah, it just looks like it's any ExpressionStatement at the beginning of a file/function that is just a string literal.",
        "createdAt" : "2017-04-13T15:53:52Z",
        "updatedAt" : "2017-04-13T20:22:20Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "58a6c92c297a7bb9da2d9e57c8440993b74ff3e8",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +932,936 @@                addDefaultValueAssignmentsIfNeeded(statements, constructor);\n                addRestParameterIfNeeded(statements, constructor, hasSynthesizedSuper);\n                if (!hasSynthesizedSuper) {\n                    // If no super call has been synthesized, emit custom prologue directives.\n                    statementOffset = addCustomPrologue(statements, constructor.body.statements, statementOffset, visitor);"
  },
  {
    "id" : "bc834cb3-7208-4ec7-a825-7cb50879d015",
    "prId" : 12783,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12783#pullrequestreview-13827101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38634803-b837-461b-b116-c41090733219",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`newTarget` could be `undefined` if you're somehow not handling a case - consider adding a\r\n\r\n```ts\r\nDebug.assert(!!newTarget, \"'newTarget' should be defined for \" + (ts.SyntaxKind as any)[node.kind])\r\n```\r\n\r\nor something similar.",
        "createdAt" : "2016-12-20T19:01:03Z",
        "updatedAt" : "2016-12-28T21:42:04Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "40980589074026c2a890a13267373ee96b11d0a0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1452,1456 @@                }\n\n                const captureNewTargetStatement = createVariableStatement(\n                    /*modifiers*/ undefined,\n                    createVariableDeclarationList(["
  },
  {
    "id" : "4f28d6e4-6d3c-48eb-a20b-c01c772b693d",
    "prId" : 12346,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12346#pullrequestreview-19952339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d919a888-208f-45e2-8ae9-f0114d438273",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "why is this code almost identical to the same transformation in esnext for `for await .. of`? I thought that the esnext transform could just let the es2015 transform take care of it. #Resolved",
        "createdAt" : "2017-01-25T00:27:15Z",
        "updatedAt" : "2017-02-17T01:31:33Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "6247ad75-f29b-48e1-9df0-076c0da2ddfa",
        "parentId" : "d919a888-208f-45e2-8ae9-f0114d438273",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "If you use `--target es2016`, then the es2015 transform will never be run.",
        "createdAt" : "2017-02-03T05:50:56Z",
        "updatedAt" : "2017-02-17T01:31:33Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "11f58ea2f0c193780a660602bb040514c46f5fba",
    "line" : 345,
    "diffHunk" : "@@ -1,1 +2430,2434 @@            hoistVariableDeclaration(returnMethod);\n\n            const forStatement = setEmitFlags(\n                setTextRange(\n                    createFor("
  }
]