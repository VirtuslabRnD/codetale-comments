[
  {
    "id" : "dba22e41-509d-4460-a840-aed22e421135",
    "prId" : 33294,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33294#pullrequestreview-292128604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58a836ef-d4cc-407b-a6a8-77a724061e2a",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "might not be possible because of performance, but it would be easier to read if the property access and element access functions were combined.",
        "createdAt" : "2019-09-23T22:19:10Z",
        "updatedAt" : "2019-09-30T19:11:29Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "61a8a352-570b-46e3-8280-bbd9c24638e6",
        "parentId" : "58a836ef-d4cc-407b-a6a8-77a724061e2a",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I'd rather keep the definitions distinct. They have different access patterns and object shapes (due to `.name` vs `.argumentExpression`). Property and element access nodes are fairly common in a JS/TS file and we would want to ensure we optimize this case.",
        "createdAt" : "2019-09-24T01:03:40Z",
        "updatedAt" : "2019-09-30T19:11:29Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfc798fc64e142d0640424b58afdd8bcdf93b359",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +74,78 @@        }\n\n        function visitNonOptionalElementAccessExpression(node: ElementAccessExpression, captureThisArg: boolean): Expression {\n            if (isOptionalChain(node)) {\n                // If `node` is an optional chain, then it is the outermost chain of an optional expression."
  },
  {
    "id" : "9a7c4c6b-df50-4fcb-9ac7-e86f699f1855",
    "prId" : 33294,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33294#pullrequestreview-292573760",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "289ad789-e647-4cd4-81f6-1580e461f37a",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "1. why is leftThisArg the type argument here?\r\n2. why is typeArguments undefined in the else clause? If it's always undefined, why?",
        "createdAt" : "2019-09-23T22:47:49Z",
        "updatedAt" : "2019-09-30T19:11:29Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "1bcdd9d7-2509-44b1-afad-3bd4926f0358",
        "parentId" : "289ad789-e647-4cd4-81f6-1580e461f37a",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I think you are conflating `createFunctionCall` and `createCall`. These functions do two different things. `createFunctionCall` creates a `CallExpression` for the `.call` method of a function, while `createCall` creates a CallExpression. I'm working on a refactor/cleanup of the various factory functions for a different feature that would make this less ambiguous.\r\n\r\n1. `leftThisArg` is not a type, it is the `this` receiver. Think of the transformation here as something like: `<rightExpression>.call(<leftThisArg>, ...<segment.arguments>)`.\r\n2. This is the `esnext` transform and comes *after* the `ts` transform. Type Arguments shouldn't exist at this point, and would be invalid here.",
        "createdAt" : "2019-09-24T01:08:36Z",
        "updatedAt" : "2019-09-30T19:11:29Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "e3574dfe-91f8-406a-bf1a-9cbc48034276",
        "parentId" : "289ad789-e647-4cd4-81f6-1580e461f37a",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Yep, I got the two confused!",
        "createdAt" : "2019-09-24T17:06:28Z",
        "updatedAt" : "2019-09-30T19:11:29Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfc798fc64e142d0640424b58afdd8bcdf93b359",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +147,151 @@                            rightExpression = createFunctionCall(\n                                rightExpression,\n                                leftThisArg,\n                                visitNodes(segment.arguments, visitor, isExpression)\n                            );"
  },
  {
    "id" : "31213f01-da6e-4d7f-9d9f-ab39f2877ead",
    "prId" : 32883,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32883#pullrequestreview-294023584",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2df5359f-1775-46e4-8bf2-78029b20b215",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Since optional chaining uses strict equality, can you switch this to strict equality?\r\n\r\n```ts\r\ncreateBinary(\r\n    createBinary(\r\n        temp\r\n        createToken(SyntaxKind.ExclamationEqualsEqualsToken),\r\n        createNull()\r\n    ),\r\n    createToken(SyntaxKind.AmpersandAmpersandToken),\r\n    createBinary(\r\n        temp,\r\n        createToken(SyntaxKind.ExclamationEqualsEqualsToken),\r\n        createVoidZero()\r\n    )\r\n);\r\n```\r\n\r\n(@rbuckton)",
        "createdAt" : "2019-09-26T21:50:07Z",
        "updatedAt" : "2019-09-30T22:14:43Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b030f730d029422ca7a6767134f51bed48354675",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +180,184 @@\n        function createNotNullCondition(node: Expression) {\n            return createBinary(\n                createBinary(\n                    node,"
  },
  {
    "id" : "1c01ec01-4725-4825-9810-c97b0921e394",
    "prId" : 13757,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/13757#pullrequestreview-19180683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d973a725-9d25-4203-9029-ad589950d4e2",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "we are still checking for it under `--importHelpers` in the checker i believe. you need to change that to ES2015 as well. and also add a test for it.",
        "createdAt" : "2017-01-30T19:26:26Z",
        "updatedAt" : "2017-01-30T20:42:58Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "9030d393-588b-488b-bd22-2a75680b4ab7",
        "parentId" : "d973a725-9d25-4203-9029-ad589950d4e2",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Thanks for catching that. Fixed.",
        "createdAt" : "2017-01-30T20:43:15Z",
        "updatedAt" : "2017-01-30T20:43:15Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "cca68adf877f5c91fcb8dd00842e985cecfdaa63",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +403,407 @@\n    export function createAssignHelper(context: TransformationContext, attributesSegments: Expression[]) {\n        if (context.getCompilerOptions().target >= ScriptTarget.ES2015) {\n            return createCall(createPropertyAccess(createIdentifier(\"Object\"), \"assign\"),\n                              /*typeArguments*/ undefined,"
  },
  {
    "id" : "670350ff-a005-4416-b709-ce1eae928323",
    "prId" : 12223,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12223#pullrequestreview-8514611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7add435-76b6-465e-bbf4-bc87436fc6b4",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "You don't seem to be visiting methods or accessors in this transformer.\n",
        "createdAt" : "2016-11-15T00:09:44Z",
        "updatedAt" : "2016-11-15T00:10:00Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "486aa11a-0e65-4130-9d9d-9acba7e58a60",
        "parentId" : "d7add435-76b6-465e-bbf4-bc87436fc6b4",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Hmm. Good point. I'll confirm that they don't work and put them in a separate PR I think.\n",
        "createdAt" : "2016-11-15T00:15:07Z",
        "updatedAt" : "2016-11-15T00:15:07Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "fab1416dd26339a7338d009faeb025d37ef0c91b",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +261,265 @@            return setOriginalNode(\n                createFunctionExpression(\n                    node.modifiers,\n                    node.asteriskToken,\n                    name,"
  }
]