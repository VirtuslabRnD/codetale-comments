[
  {
    "id" : "ed8d350e-ee38-4940-a694-e7bc631839f9",
    "prId" : 44968,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44968#pullrequestreview-707867334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d72a34ac-679e-4d80-a0bf-1522a5c3580a",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Is it possible to share code between module.ts and system.ts? The parts in this review look identical.",
        "createdAt" : "2021-07-14T23:56:29Z",
        "updatedAt" : "2021-07-14T23:58:11Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "3b350154-2eec-4c3a-a263-c29e00fcfa06",
        "parentId" : "d72a34ac-679e-4d80-a0bf-1522a5c3580a",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Most of the sharing we do between these two module systems is in `collectExternalModuleInfo`. The problem with refactoring the similarities between the two is that in both cases they close over specific visitors for their individual cases. We could conceivably refactor module emit, but that's not a task I'd like to take on in this PR.",
        "createdAt" : "2021-07-15T22:24:57Z",
        "updatedAt" : "2021-07-15T22:24:58Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5fbe3848ad2ae79f57230dadea0494edc623e0c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +224,228 @@            // Add any prologue directives.\n            const ensureUseStrict = getStrictOptionValue(compilerOptions, \"alwaysStrict\") || (!compilerOptions.noImplicitUseStrict && isExternalModule(currentSourceFile));\n            const statementOffset = factory.copyPrologue(node.statements, statements, ensureUseStrict, topLevelVisitor);\n\n            // var __moduleName = context_1 && context_1.id;"
  },
  {
    "id" : "5409594e-0feb-4801-b6be-46571ad85747",
    "prId" : 14774,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14774#pullrequestreview-32732097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a68e4123-6fc8-4229-855a-e9e0af8cc7e9",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Easier to do `else if (node.transformFlags & (TransformFlags.ContainsDestructuringAssignment | TransformFlags.ContainsDynamicImport))`?",
        "createdAt" : "2017-04-13T21:47:16Z",
        "updatedAt" : "2017-06-05T04:19:28Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "1729ea860925485616de87e751eccdd7c81a2f5e",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +1470,1474 @@                return visitImportCallExpression(node);\n            }\n            else if ((node.transformFlags & TransformFlags.ContainsDestructuringAssignment) || (node.transformFlags & TransformFlags.ContainsDynamicImport)) {\n                return visitEachChild(node, destructuringAndImportCallVisitor, context);\n            }"
  },
  {
    "id" : "b2da0386-9fc9-4f9c-88b4-54baa37b914a",
    "prId" : 7973,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5d4dc7c-2df9-45a3-bc3b-43311a1f6409",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Consider creating a variable named `updatedNodeFlags` to keep this comment and the new flags nearby each other.\n",
        "createdAt" : "2016-04-09T22:38:15Z",
        "updatedAt" : "2016-04-11T19:46:19Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "403e58b8cce9817d49abddb55e7722d0907b13e4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +123,127 @@            // Write the call to `System.register`\n            // Clear the emit-helpers flag for later passes since we'll have already used it in the module body\n            // So the helper will be emit at the correct position instead of at the top of the source-file\n            return updateSourceFile(node, [\n                createStatement("
  },
  {
    "id" : "1c8317ff-6623-45d7-9179-bce92888be46",
    "prId" : 7646,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3951584-5795-404a-b1ed-9a642503ffc9",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Since we aren't guaranteed that the node ids for SourceFiles are sequential, we will end up with a sparse array. Would it be more efficient to use `Map<Identifier> = { }`?\n",
        "createdAt" : "2016-03-22T23:06:59Z",
        "updatedAt" : "2016-03-22T23:06:59Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4ecdd8b91f0cb21d690da9d61051ff87097fbea",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +30,34 @@        context.enableEmitNotification(SyntaxKind.SourceFile);\n\n        const exportFunctionForFileMap: Identifier[] = [];\n        const previousOnEmitNode = context.onEmitNode;\n        context.onEmitNode = onEmitNode;"
  },
  {
    "id" : "9aa22b3b-ce72-4eb9-8b82-80318b59c26d",
    "prId" : 7206,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7af7fb9-4742-4ccb-8c70-2151209415a6",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "that's weird, there are two identical declarations of this function in this review\n",
        "createdAt" : "2016-03-10T17:53:49Z",
        "updatedAt" : "2016-03-18T20:05:02Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "44ca7d435fc9b0d9b6f05de360dd11a4a18726a4",
    "line" : 1078,
    "diffHunk" : "@@ -1,1 +1075,1079 @@        }\n\n        function getLocalNameForExternalImport(node: ImportDeclaration | ExportDeclaration | ImportEqualsDeclaration): Identifier {\n            const namespaceDeclaration = getNamespaceDeclarationNode(node);\n            if (namespaceDeclaration && !isDefaultImport(node)) {"
  }
]