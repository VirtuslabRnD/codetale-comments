[
  {
    "id" : "f305bb97-7a56-4552-9068-8ae90226051f",
    "prId" : 44489,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44489#pullrequestreview-682233339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a29034f-10de-4b58-9b8b-78dc5915b258",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Without knowing anything about custom transformers or how they're actually used, this seems a little strange to me.  If there's a way to pass them to emit, why doesn't the consumer do that, rather than embed them in the host?  Why is it (potentially) called separately for each `emit` call?  Can they change over time?  If not, should they be stored somewhere?  And why `||`, rather than (e.g) `?.concat()`?\r\n\r\nI'm pretty sure this change accomplishes what it needs to accomplish, but it feels a little bit hastily done (assuming any of my intuition about what it's supposed to do is correct).  Do you have a better understanding, @andrewbranch? ",
        "createdAt" : "2021-06-11T21:42:20Z",
        "updatedAt" : "2021-06-11T21:42:20Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "024f61325a2d615241ecbccb1a489933cf8d032c",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +787,791 @@                    if (targetSourceFile || emitOnlyDtsFiles) {\n                        return withProgramOrUndefined(\n                            program => program.emit(targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles, customTransformers || state.host.getCustomTransformers?.(project))\n                        );\n                    }"
  },
  {
    "id" : "180893fa-cf3f-43b2-816a-ac848b651dac",
    "prId" : 43666,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43666#pullrequestreview-637956346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4540e16-03ed-48da-9b10-a5d2f742f207",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This shouldnt be here because what of scenario when `tsc --b --force --watch`",
        "createdAt" : "2021-04-14T19:46:52Z",
        "updatedAt" : "2021-04-16T23:38:01Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "89bd6b91-ae15-42ae-8eab-a1af6179e511",
        "parentId" : "d4540e16-03ed-48da-9b10-a5d2f742f207",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "ahh well it still is going to build all the time i guess... it was never tested scenario.. so .... ",
        "createdAt" : "2021-04-14T19:50:03Z",
        "updatedAt" : "2021-04-16T23:38:01Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "4a4f3626-dd25-4af4-af18-87edfd1e57fa",
        "parentId" : "d4540e16-03ed-48da-9b10-a5d2f742f207",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I would have assumed that meant \"force the first time, watch after that\".  If it currently means \"force build on every change\", then I agree (I think?  I didn't completely follow your comment) that this shouldn't cause a change in behavior (other than dropping status messages).",
        "createdAt" : "2021-04-14T20:31:17Z",
        "updatedAt" : "2021-04-16T23:38:01Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "17967c76-ea32-4e08-9d77-c73a053f9113",
        "parentId" : "d4540e16-03ed-48da-9b10-a5d2f742f207",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "yes  i assumed it would be force first time and watch after that but thats not current behaviour.. \r\nI think it would be better to add different status message just to be clear rather than just omitting it completely. ",
        "createdAt" : "2021-04-15T17:15:20Z",
        "updatedAt" : "2021-04-16T23:38:01Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "9b95d6c5-4e8c-42ae-a374-1bffd69642dc",
        "parentId" : "d4540e16-03ed-48da-9b10-a5d2f742f207",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Done.",
        "createdAt" : "2021-04-16T17:49:08Z",
        "updatedAt" : "2021-04-16T23:38:01Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "331dfc46d7e5c301791b27652e89b63997853f0f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1351,1355 @@\n    function getUpToDateStatusWorker(state: SolutionBuilderState, project: ParsedCommandLine, resolvedPath: ResolvedConfigFilePath): UpToDateStatus {\n        const force = !!state.options.force;\n        let newestInputFileName: string = undefined!;\n        let newestInputFileTime = minimumDate;"
  },
  {
    "id" : "88917aa8-54d6-43c0-b32c-97394e70b3cf",
    "prId" : 38853,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38853#pullrequestreview-422177640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75d47695-ff0a-47e7-b50c-5e11e18badef",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Why do syntax errors block a build info?",
        "createdAt" : "2020-06-01T20:37:09Z",
        "updatedAt" : "2020-06-02T18:57:22Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "035d3393-3da2-460b-a2d4-805366dc15ce",
        "parentId" : "75d47695-ff0a-47e7-b50c-5e11e18badef",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Because there is nothing to write in this case. Only semantic errors are cached so there is no use writing tsbuildinfo in this case",
        "createdAt" : "2020-06-01T20:59:18Z",
        "updatedAt" : "2020-06-02T18:57:22Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7eeaf64a0c0dd81a0d8c7e1742e1c91b4b1b5714",
    "line" : 322,
    "diffHunk" : "@@ -1,1 +1299,1303 @@        errorType: string,\n    ) {\n        const canEmitBuildInfo = !(buildResult & BuildResultFlags.SyntaxErrors) && program && !outFile(program.getCompilerOptions());\n\n        reportAndStoreErrors(state, resolvedPath, diagnostics);"
  }
]