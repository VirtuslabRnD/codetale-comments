[
  {
    "id" : "d739eb75-2060-4596-bfbc-b91256ef3c3e",
    "prId" : 45080,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45080#pullrequestreview-708783349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d65b6dba-c8e3-491f-9a61-eaf4871b6e7c",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "It seems kind of unimportant here whether what follows `node:` is actually something we recognize in our list, particularly as this PR shows we have neglected to keep the list fully up to date. I do use the list in the single-file analysis so we know we can _stop_ looking at more module specifiers when we see an unprefixed one like `fs` or `path`.",
        "createdAt" : "2021-07-16T22:33:17Z",
        "updatedAt" : "2021-07-16T22:33:44Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "d551c277ca71a3a20970f3ed95f9a6266a213911",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +2332,2336 @@                        imports = append(imports, moduleNameExpr);\n                        if (!usesUriStyleNodeCoreModules && currentNodeModulesDepth === 0 && !file.isDeclarationFile) {\n                            usesUriStyleNodeCoreModules = startsWith(moduleNameExpr.text, \"node:\");\n                        }\n                    }"
  },
  {
    "id" : "40a3b683-7d4d-4457-ab23-0bf84d5cb03e",
    "prId" : 45080,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45080#pullrequestreview-708796212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d0bf449-63aa-443a-bf41-10193cd375db",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Does this get fixed up on subsequent builds? Or does it \"stick\"?",
        "createdAt" : "2021-07-16T22:49:35Z",
        "updatedAt" : "2021-07-16T22:49:50Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "5241e8ff-f702-4d7d-a172-6b4bd3279b13",
        "parentId" : "2d0bf449-63aa-443a-bf41-10193cd375db",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yeah, you got it. It gets reused if resolution isn’t going to happen in the next program.",
        "createdAt" : "2021-07-16T23:15:56Z",
        "updatedAt" : "2021-07-16T23:15:57Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "a315d222-96f3-4743-bac7-37d5153e1d7f",
        "parentId" : "2d0bf449-63aa-443a-bf41-10193cd375db",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "There’s a test that shows editing back and forth: https://github.com/microsoft/TypeScript/pull/45080/files#diff-0694f66b155b0b58bf9818822b2ff472fb62409216c1ad39dbdbede5064de2f7R20",
        "createdAt" : "2021-07-16T23:16:46Z",
        "updatedAt" : "2021-07-16T23:16:46Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "d551c277ca71a3a20970f3ed95f9a6266a213911",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1638,1642 @@            sourceFileToPackageName = oldProgram.sourceFileToPackageName;\n            redirectTargetsMap = oldProgram.redirectTargetsMap;\n            usesUriStyleNodeCoreModules = oldProgram.usesUriStyleNodeCoreModules;\n\n            return StructureIsReused.Completely;"
  },
  {
    "id" : "8788d495-1296-4bc6-8615-176af813d7ad",
    "prId" : 41933,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41933#pullrequestreview-555463029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "964ad728-ea56-4750-ba4c-2d4241030bfe",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Let’s get a test that shows this, and then we should be good to go. Thanks!",
        "createdAt" : "2020-12-16T18:27:47Z",
        "updatedAt" : "2021-01-13T23:19:39Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "1fffe451-a2fc-4e47-b47c-c3ba8eaa3296",
        "parentId" : "964ad728-ea56-4750-ba4c-2d4241030bfe",
        "authorId" : "096d381a-d52d-4a58-835e-8da712fb8faf",
        "body" : "I added a \"compiler\" test, because I couldn't find any other ways to test command line arguments, and/or I couldn't get any of the other test frameworks to work.",
        "createdAt" : "2020-12-18T12:57:02Z",
        "updatedAt" : "2021-01-13T23:19:39Z",
        "lastEditedBy" : "096d381a-d52d-4a58-835e-8da712fb8faf",
        "tags" : [
        ]
      }
    ],
    "commit" : "49d77c397f3230853c07d3389f4e94b3c3dbf344",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3158,3162 @@\n                if (options.preserveConstEnums === false) {\n                    createDiagnosticForOptionName(Diagnostics.Option_preserveConstEnums_cannot_be_disabled_when_isolatedModules_is_enabled, \"preserveConstEnums\", \"isolatedModules\");\n                }\n"
  },
  {
    "id" : "94e00a57-cd49-4e14-8b3c-2dcc28817ff7",
    "prId" : 40954,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40954#pullrequestreview-502461089",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9786e16f-1edc-4322-ba2d-031985131166",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This ensures we try to locate source of project reference file on .d.ts file only if it contains modules",
        "createdAt" : "2020-10-05T22:20:40Z",
        "updatedAt" : "2020-10-06T17:44:51Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "589e9b35cc8b0edeef1f4560ce049824d86660c1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +991,995 @@\n        function resolveModuleNamesWorker(moduleNames: string[], containingFile: SourceFile, reusedNames: string[] | undefined): readonly ResolvedModuleFull[] {\n            if (!moduleNames.length) return emptyArray;\n            const containingFileName = getNormalizedAbsolutePath(containingFile.originalFileName, currentDirectory);\n            const redirectedReference = getRedirectReferenceForResolution(containingFile);"
  },
  {
    "id" : "c8e31cff-2354-44d6-9510-1b2018c2d2b8",
    "prId" : 40275,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40275#pullrequestreview-497279045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "699bdbf7-643a-4a78-bd52-0be596bfa34f",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This seems incorrect condition. You want to check if options.allowJs === false here instead",
        "createdAt" : "2020-08-27T18:14:49Z",
        "updatedAt" : "2020-08-27T18:14:49Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "7d5a2435-f50a-4f03-91de-3ae6db8f02d3",
        "parentId" : "699bdbf7-643a-4a78-bd52-0be596bfa34f",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Duh, thanks for the catch.",
        "createdAt" : "2020-09-01T17:03:18Z",
        "updatedAt" : "2020-09-01T17:03:18Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "3e237942-7326-47a9-8558-c51897d2c661",
        "parentId" : "699bdbf7-643a-4a78-bd52-0be596bfa34f",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "No, wait, that undoes the loosening from this PR. THe current code only errors when `checkJs: true` but `allowJs: false` explicitly.",
        "createdAt" : "2020-09-01T17:13:42Z",
        "updatedAt" : "2020-09-01T17:13:43Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "f8e70554-7e62-4df3-8f9d-70903979b5da",
        "parentId" : "699bdbf7-643a-4a78-bd52-0be596bfa34f",
        "authorId" : "54e8a7d9-0fe5-4af8-82f5-cbb0ff08ae8c",
        "body" : "```suggestion\r\n            if (options.checkJs && options.allowJs === false) {\r\n```\r\nwill also work and won’t require a function call.",
        "createdAt" : "2020-09-28T08:10:31Z",
        "updatedAt" : "2020-09-28T08:10:31Z",
        "lastEditedBy" : "54e8a7d9-0fe5-4af8-82f5-cbb0ff08ae8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9943fdea618f745dbe7b9cc2eaacb160df5acbe",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +3161,3165 @@            }\n\n            if (options.checkJs && !getAllowJSCompilerOption(options)) {\n                programDiagnostics.add(createCompilerDiagnostic(Diagnostics.Option_0_cannot_be_specified_without_specifying_option_1, \"checkJs\", \"allowJs\"));\n            }"
  },
  {
    "id" : "068beb8f-fae1-49a9-bacd-ec341140a3d2",
    "prId" : 39122,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39122#pullrequestreview-438563567",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49ad8f60-5c28-427f-84d2-02d32d2a4b7a",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "should probably be named `diagnostics` and `options`",
        "createdAt" : "2020-06-23T21:31:44Z",
        "updatedAt" : "2020-06-23T21:33:16Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "1e5da343-d7f0-4784-98a7-b2011879aac2",
        "parentId" : "49ad8f60-5c28-427f-84d2-02d32d2a4b7a",
        "authorId" : "8b959186-ecad-4053-92b0-822de909519e",
        "body" : "There's also a typo in the function name.",
        "createdAt" : "2020-06-26T20:04:57Z",
        "updatedAt" : "2020-06-26T20:04:57Z",
        "lastEditedBy" : "8b959186-ecad-4053-92b0-822de909519e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e18dd33e4db39378a55dc17da5d0cfdf9a3ca1cb",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +3680,3684 @@\n    /*@internal*/\n    export function filterSemanticDiagnotics(diagnostic: readonly Diagnostic[], option: CompilerOptions): readonly Diagnostic[] {\n        return filter(diagnostic, d => !d.skippedOn || !option[d.skippedOn]);\n    }"
  },
  {
    "id" : "5706c462-93da-4404-bdbc-3433a1121246",
    "prId" : 37370,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37370#pullrequestreview-373851162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e0fb39d-f8e9-4153-bc1f-12820a9fa29f",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "All the new code is just moved from ConfiguredProject to program as part of this change.. Rest is threading through things",
        "createdAt" : "2020-03-12T19:44:54Z",
        "updatedAt" : "2020-03-12T19:44:54Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f5e0805ec94f6a9e36e599bd8411ab39bcfa693",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +3460,3464 @@    }\n\n    interface SymlinkedDirectory {\n        real: string;\n        realPath: Path;"
  },
  {
    "id" : "1525d642-2b20-48c4-b402-60208cfc062c",
    "prId" : 37054,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37054#pullrequestreview-365353466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a48b248-467c-4b9c-8e83-5b4dbe77e197",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "This works, but you could also do this:\r\n\r\n```ts\r\n// create once near the top of the file\r\nconst { enter: enterResolveModuleNames, exit: exitResolveModuleNames } = performance.createTimer(\r\n    \"ResolveModule\",\r\n    \"beforeResolveModule\",\r\n    \"afterResolveModule\");\r\n...\r\nfunction resolveModuleNamesWorker(...) {\r\n  enterResolveModuleNames();\r\n  const result = actualResolveModuleNamesWorker(...);\r\n  exitResolveModuleNames();\r\n  return result;\r\n}\r\n```\r\n\r\nYou can also use `performance.createTimerIf` if you want to create a performance timer conditionally (such as if you only care about the metric when `--extendedDiagnostics` is set.\r\n\r\nWhether you want to use `createTimer` is up to you.",
        "createdAt" : "2020-02-27T01:06:14Z",
        "updatedAt" : "2020-02-27T01:06:23Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "55b71df3601171f08c95967137569f77afc3ef45",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +978,982 @@\n        function resolveModuleNamesWorker(moduleNames: string[], containingFile: string, reusedNames?: string[], redirectedReference?: ResolvedProjectReference) {\n            performance.mark(\"beforeResolveModule\");\n            const result = actualResolveModuleNamesWorker(moduleNames, containingFile, reusedNames, redirectedReference);\n            performance.mark(\"afterResolveModule\");"
  },
  {
    "id" : "5147b8f9-a9f9-47bb-8f11-81003d07a55b",
    "prId" : 33771,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33771#pullrequestreview-436896490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "708f59ae-2926-4e17-b02f-e6ebc1cd0527",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Key as path",
        "createdAt" : "2020-06-22T18:09:47Z",
        "updatedAt" : "2020-06-25T22:54:19Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "eb8d3f08-970c-4d28-ac24-1def0d290dc5",
        "parentId" : "708f59ae-2926-4e17-b02f-e6ebc1cd0527",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "This breaks `verifyEmitFilePath` unless we cast the key to `Path`.",
        "createdAt" : "2020-06-22T21:01:07Z",
        "updatedAt" : "2020-06-25T22:54:19Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "e9dad193-0e79-4522-82f1-612f8fa8fa4f",
        "parentId" : "708f59ae-2926-4e17-b02f-e6ebc1cd0527",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "emitFilesSeen.add(emitFileKey); is path in there though.",
        "createdAt" : "2020-06-24T18:20:28Z",
        "updatedAt" : "2020-06-25T22:54:19Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "661fa61decb5d014b3cacd5430aac427de8c7230",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +3202,3206 @@            if (!options.noEmit && !options.suppressOutputPathCheck) {\n                const emitHost = getEmitHost();\n                const emitFilesSeen = new Set<string>();\n                forEachEmittedFile(emitHost, (emitFileNames) => {\n                    if (!options.emitDeclarationOnly) {"
  },
  {
    "id" : "731e16d8-5ea5-472e-90e7-aa78ffc7524d",
    "prId" : 33383,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33383#pullrequestreview-287752227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa57a0c8-531c-4b1c-8d3a-1135cdeac3f7",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Question, currently unchecked files have also some fuzzy completions (currently only in js files since those are the only ones) but would we want that? I think no but I am just pointing out one of the `checkJs` enabled and disabled difference.\r\n\r\nSimilarly there is disableJsDiagnostics code fix, do we need similar one now for ts?\r\n\r\nHandle report `reportImplicitAny` for early exit?",
        "createdAt" : "2019-09-12T16:07:22Z",
        "updatedAt" : "2019-09-12T16:07:23Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "33107ecc-b8a8-4e80-b7af-7f5496fd1bb5",
        "parentId" : "fa57a0c8-531c-4b1c-8d3a-1135cdeac3f7",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I don't think a `//@ts-nocheck` in a TS file should do anything other than suppress errors - everything else should be as-is.",
        "createdAt" : "2019-09-12T23:18:46Z",
        "updatedAt" : "2019-09-12T23:18:46Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c3ee9ce7341042cff29385fb7677d223e7ce845",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1692,1696 @@\n                const isCheckJs = isCheckJsEnabledForFile(sourceFile, options);\n                const isTsNoCheck = !!sourceFile.checkJsDirective && sourceFile.checkJsDirective.enabled === false;\n                // By default, only type-check .ts, .tsx, 'Deferred' and 'External' files (external files are added by plugins)\n                const includeBindAndCheckDiagnostics = !isTsNoCheck && (sourceFile.scriptKind === ScriptKind.TS || sourceFile.scriptKind === ScriptKind.TSX ||"
  },
  {
    "id" : "9166c465-4a54-4efe-a569-3aca09e3dcdb",
    "prId" : 32788,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32788#pullrequestreview-273994049",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcaee6ee-0449-4931-b941-bb11db2d016d",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "looks like this happens when refFileMap's entry for `file` is empty. When does that happen?",
        "createdAt" : "2019-08-12T22:01:57Z",
        "updatedAt" : "2019-08-12T23:06:22Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "43898f08-ca27-4ceb-bafc-4f33a2623940",
        "parentId" : "bcaee6ee-0449-4931-b941-bb11db2d016d",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This is possible if error to report happens to be in rootPath? Eg checkout test in `unittests/tsserver/telemetry.ts` called `does not expose paths` The root file `/a.ts` does not belong to `rootDir`: `/hunter2`",
        "createdAt" : "2019-08-12T23:05:39Z",
        "updatedAt" : "2019-08-12T23:06:22Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a9198a53af6fc56bbcc408fdc7c3ef5bd933213",
    "line" : 393,
    "diffHunk" : "@@ -1,1 +3098,3102 @@            }\n            else {\n                programDiagnostics.add(createCompilerDiagnostic(message, ...args));\n            }\n        }"
  },
  {
    "id" : "8c1eb4d7-6a05-4ea3-affe-e998e0adf3f4",
    "prId" : 32372,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32372#pullrequestreview-293169317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2ec44c3-a449-4968-87d7-eea29b11f432",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Need to remove `hasTSFileExtension(fileName)` from `getSourceOfProjectReferenceRedirect`",
        "createdAt" : "2019-09-25T15:29:55Z",
        "updatedAt" : "2019-09-26T21:10:12Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "007b3d4afe7726f7b72cd617e5453c8943e48ad2",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +2450,2454 @@        function getProjectReferenceRedirectProject(fileName: string) {\n            // Ignore dts\n            if (!resolvedProjectReferences || !resolvedProjectReferences.length || fileExtensionIs(fileName, Extension.Dts)) {\n                return undefined;\n            }"
  },
  {
    "id" : "67fae97d-e77c-44fc-9dcd-f021fbe61553",
    "prId" : 31503,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31503#pullrequestreview-241265292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b88edb2c-1b0d-4672-b3c9-e81e8257f114",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Is it??\r\n\r\n`C:\\file` is indeed the same as `c:\\file` — but it is most definitely NOT the same as `D:\\file`.\r\n\r\nLooking at the use below the code will wrongly assume `C:\\file` match `D:\\file`.",
        "createdAt" : "2019-05-23T14:18:24Z",
        "updatedAt" : "2019-05-23T14:18:35Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "39e1ae40-46b6-4ada-b522-79f955d1dd9a",
        "parentId" : "b88edb2c-1b0d-4672-b3c9-e81e8257f114",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "That's guaranteed to be match because the file was found by its name.",
        "createdAt" : "2019-05-23T15:03:28Z",
        "updatedAt" : "2019-05-23T15:03:28Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "db150517d7fa6261ee9362ba58fec42dd5a2f816",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2233,2237 @@                        inputName = getProjectReferenceRedirect(fileName) || fileName;\n                    }\n                    // Check if it differs only in drive letters its ok to ignore that error:\n                    const checkedAbsolutePath = getNormalizedAbsolutePathWithoutRoot(checkedName, currentDirectory);\n                    const inputAbsolutePath = getNormalizedAbsolutePathWithoutRoot(inputName, currentDirectory);"
  },
  {
    "id" : "50dd90c5-ce7f-4577-beb1-1f6e0ea12f49",
    "prId" : 31270,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31270#pullrequestreview-234146732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c855ed14-b20d-4f20-b454-9021719a484e",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think the fix is correct but we should assert sourceFile.path === undefined || sourceFile.path == sourceFilePath so as to make sure we aren't overriding paths incorrectly especially since we don't get sourceFile explicitly.",
        "createdAt" : "2019-05-06T19:04:20Z",
        "updatedAt" : "2019-05-06T19:31:30Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c2f36890821cbd49149ba6b21580d898ab7760b",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2703,2707 @@                commandLine = parseJsonSourceFileConfigFileContent(sourceFile, configParsingHost, basePath, /*existingOptions*/ undefined, refPath);\n            }\n            sourceFile.path = sourceFilePath;\n            sourceFile.resolvedPath = sourceFilePath;\n            sourceFile.originalFileName = refPath;"
  },
  {
    "id" : "b25b0ed5-2784-424c-b93a-3414cdef997b",
    "prId" : 30721,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30721#pullrequestreview-222355217",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12ce3a29-30a1-4f49-af78-18c714339354",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "What is `refFile` in this function?",
        "createdAt" : "2019-04-03T16:26:44Z",
        "updatedAt" : "2019-04-03T16:42:49Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "0d4dd458-60d8-4764-8794-ba1b8a978ddd",
        "parentId" : "12ce3a29-30a1-4f49-af78-18c714339354",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "refFile is normally passed in if its trying to resolve imports/ or reference directives etc. thats the file in which import exists and hence the file is being added. The root files passed to program, when processed have refile as undefined.",
        "createdAt" : "2019-04-03T17:39:10Z",
        "updatedAt" : "2019-04-03T17:39:11Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "602aec2f7d9cd539f71c6c81f42985d8916a1422",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +2266,2270 @@\n            let redirectedPath: Path | undefined;\n            if (refFile) {\n                const redirectProject = getProjectReferenceRedirectProject(fileName);\n                if (redirectProject) {"
  },
  {
    "id" : "9ea581d6-3f66-4733-8ca2-c9358217497a",
    "prId" : 30721,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30721#pullrequestreview-222354619",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b583917d-d183-44b1-a3bd-f7ce4e0a496e",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Trying to see if I understand:\r\n\r\nNormally, if you call `findSourceFile` for say `subproject/a.ts` which is part of a referenced project, you'd return (after updating caches) the source file for `subproject/a.d.ts`. But if that referenced project has an `outFile` option, there won't be a `subproject/a.d.ts`, there will be a single concatenated definition file, let's say `subproject/built.d.ts`.\r\n\r\nSo you return early here because `subproject/built.d.ts` has already been processed, and doing it again causes problems. That makes sense to me, but why not return the SourceFile for `subproject/built.d.ts`?",
        "createdAt" : "2019-04-03T16:41:03Z",
        "updatedAt" : "2019-04-03T16:42:49Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "9d463ef5-781a-4645-bf52-50171f88c379",
        "parentId" : "b583917d-d183-44b1-a3bd-f7ce4e0a496e",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You do not want to return `subproject/built.d.ts` because normally file is 1:1 mapping and breaking that could lead to more severe breaks down the line somewhere. Technically there is no `single` file with `subproject/a.ts` but its mix of multiple files in subproject",
        "createdAt" : "2019-04-03T17:37:57Z",
        "updatedAt" : "2019-04-03T17:37:57Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "602aec2f7d9cd539f71c6c81f42985d8916a1422",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +2271,2275 @@                    if (redirectProject.commandLine.options.outFile || redirectProject.commandLine.options.out) {\n                        // Shouldnt create many to 1 mapping file in --out scenario\n                        return undefined;\n                    }\n                    const redirect = getProjectReferenceOutputName(redirectProject, fileName);"
  },
  {
    "id" : "b9a1a8a1-4330-4d5b-95ef-8a5df5f20c87",
    "prId" : 30513,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30513#pullrequestreview-219198773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbee5cf2-6c40-43da-b254-6f9b3354fded",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Shouldn't this also be checking `options.tsBuildInfoFile`?",
        "createdAt" : "2019-03-26T22:28:55Z",
        "updatedAt" : "2019-03-29T21:42:14Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "f07babac-1934-42de-a6c2-56f71237a68e",
        "parentId" : "cbee5cf2-6c40-43da-b254-6f9b3354fded",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Thats absent since its in the else portion of `if (options.tsBuildInfoFile)`",
        "createdAt" : "2019-03-26T22:33:22Z",
        "updatedAt" : "2019-03-29T21:42:14Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "878f56a9-8aa2-4696-85a4-443098728a9d",
        "parentId" : "cbee5cf2-6c40-43da-b254-6f9b3354fded",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Ah, K. Would still be nice to see a compiler test with both flags.",
        "createdAt" : "2019-03-26T22:51:20Z",
        "updatedAt" : "2019-03-29T21:42:14Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf8b3085118bb38540bb8c50032746f2cd244cc2",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +2736,2740 @@                }\n            }\n            else if (options.incremental && !options.outFile && !options.out && !options.configFilePath) {\n                programDiagnostics.add(createCompilerDiagnostic(Diagnostics.Option_incremental_can_only_be_specified_using_tsconfig_emitting_to_single_file_or_when_option_tsBuildInfoFile_is_specified));\n            }"
  },
  {
    "id" : "dba410ec-ba0a-4ba0-9b25-16f6babbc4dd",
    "prId" : 29161,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29161#pullrequestreview-188138707",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c84194e9-d29c-464c-bc49-6f24844b9252",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "why is `directoryStructureHost` only used for `readDirectory`? Shouldn't it also be used for `readFile` and `fileExists`?",
        "createdAt" : "2018-12-26T21:03:10Z",
        "updatedAt" : "2019-01-17T20:29:40Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      },
      {
        "id" : "c5f0f4d9-8c9e-4e4b-838e-b772d4831762",
        "parentId" : "c84194e9-d29c-464c-bc49-6f24844b9252",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Yes, Thanks for catching that. I was just trying to get things working and later on missed this. Will look into it.",
        "createdAt" : "2018-12-27T17:23:06Z",
        "updatedAt" : "2019-01-17T20:29:40Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "900d6f7c9042a686cebc2c50343bfa50ca66b04f",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +3128,3132 @@            readDirectory(root, extensions, excludes, includes, depth) {\n                Debug.assertDefined(directoryStructureHost.readDirectory, \"'CompilerHost.readDirectory' must be implemented to correctly process 'projectReferences'\");\n                return directoryStructureHost.readDirectory!(root, extensions, excludes, includes, depth);\n            },\n            readFile: f => directoryStructureHost.readFile(f),"
  },
  {
    "id" : "00f7ba56-c7f6-41bf-b40d-f910f61106d5",
    "prId" : 28629,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28629#pullrequestreview-177391072",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10062a39-abf8-44cc-aad7-f8e5466d9fe3",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "In general it's not usually safe to pluck methods off a host like this. If an API user passes in a class instance for a host, this can unbind the `this` for these methods. Best `.bind` these to `host` here so that doesn't happen.",
        "createdAt" : "2018-11-21T18:52:22Z",
        "updatedAt" : "2018-11-21T20:22:04Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "50b082e2-6a21-47e9-98d4-2bc3c1734e68",
        "parentId" : "10062a39-abf8-44cc-aad7-f8e5466d9fe3",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "We are always calling it by passing host as this to these functions.calls. For now these are passed only to reset back host and once we move to new api we wont need to return these at all  and hence its safe to not bind it.",
        "createdAt" : "2018-11-21T19:04:59Z",
        "updatedAt" : "2018-11-21T20:22:04Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f2d403f6db0d623b2cb3ed45755d2a0833e528d",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +210,214 @@        useCacheForSourceFile: boolean\n    ) {\n        const originalReadFile = host.readFile;\n        const originalFileExists = host.fileExists;\n        const originalDirectoryExists = host.directoryExists;"
  },
  {
    "id" : "81aeb857-d406-4c14-8c69-73843fa8f6c3",
    "prId" : 28629,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28629#pullrequestreview-177407837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "233d1579-b392-46d1-9697-f1b7206df66e",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I agree with Nathan - we shouldn't be mutating the host object. Since we can recieve these from API consumers what happens here if, for example, this member is marked non-configurable? It's much safer to build a cacheing host that wraps the original host.",
        "createdAt" : "2018-11-21T18:54:18Z",
        "updatedAt" : "2018-11-21T20:22:04Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "d525c915-eaad-436a-b339-556a67f187bd",
        "parentId" : "233d1579-b392-46d1-9697-f1b7206df66e",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Agreed but the API is internal because we haven't fixed it yet and hence this temporary. This will move to creating host for builder once we are there. And hence TODO.",
        "createdAt" : "2018-11-21T19:03:13Z",
        "updatedAt" : "2018-11-21T20:22:04Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "4f0e3719-290c-412a-a5e9-b21af3ab9fdd",
        "parentId" : "233d1579-b392-46d1-9697-f1b7206df66e",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Mmmm we're going to want an issue open to track fixing this particular bit of tech debt, then. Otherwise we'll probably forget it until we accidentally break someone by using it somewhere in, eg, the language service. It can get away with mutating right now because tsc and tsbuild don't have any API hooks yet; but once tsbuild has a public API or we use this in a layer which has a public API, it'll need to be fixed.",
        "createdAt" : "2018-11-21T19:08:37Z",
        "updatedAt" : "2018-11-21T20:22:04Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "c1a25b11-4931-4fe0-a449-578855f39d24",
        "parentId" : "233d1579-b392-46d1-9697-f1b7206df66e",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Created #28640 to track this",
        "createdAt" : "2018-11-21T19:54:01Z",
        "updatedAt" : "2018-11-21T20:22:04Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f2d403f6db0d623b2cb3ed45755d2a0833e528d",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +232,236 @@            return newValue;\n        };\n        host.readFile = fileName => {\n            const key = toPath(fileName);\n            const value = readFileCache.get(key);"
  },
  {
    "id" : "378f7c47-b1cf-43d6-bc64-d922b84e0eb7",
    "prId" : 28104,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28104#pullrequestreview-168201179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "939694cb-310d-4bb9-90e0-6c69e4b57e83",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "does this differ from `getTokenAtPosition` in `services/utitilities.ts`? if not, it could be moved to `compiler/utilities.ts` and also used for services",
        "createdAt" : "2018-10-24T19:04:20Z",
        "updatedAt" : "2018-10-24T19:14:47Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      },
      {
        "id" : "31b89aa0-2b60-4998-9d84-c293e369dc8a",
        "parentId" : "939694cb-310d-4bb9-90e0-6c69e4b57e83",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Yes, it uses Node.pos and Node.end instead of the much-more-complicated Node.getStart() and Node.getFullStart() that are present in the language service. The original getTokenAtPosition handles a lot more cases as well; I'd rather wait until something else in the compiler proper needs this code to move it into utilities and harden it.",
        "createdAt" : "2018-10-24T21:36:25Z",
        "updatedAt" : "2018-10-24T22:16:31Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "a07433cd-5aee-42ef-8fef-c2b9b21c02e9",
        "parentId" : "939694cb-310d-4bb9-90e0-6c69e4b57e83",
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "I see. In addition it doesn't use `node.getChildren` to get the actual token. So at least it should be renamed to `getNodeAtPosition` to avoid confusion. ",
        "createdAt" : "2018-10-25T03:57:53Z",
        "updatedAt" : "2018-10-25T03:57:53Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf1b104a92a12c242adeda34aaf703181685930c",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +1968,1972 @@\n            /** Returns a token if position is in [start-of-leading-trivia, end) */\n            function getTokenAtPosition(sourceFile: SourceFile, position: number): Node {\n                let current: Node = sourceFile;\n                const getContainingChild = (child: Node) => {"
  },
  {
    "id" : "e7c11647-5755-42e5-8b9e-8d59c15c1dec",
    "prId" : 28104,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28104#pullrequestreview-168494176",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1eb410b-0b96-4589-b0ac-79772e15b9f8",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "you could tweak the regex to avoid false positives. though you need to adjust the loop a bit to save the result of `r.exec` to a variable.\r\n```ts\r\n/\\b(?:import|require)\\s*[(/<]/g\r\n```\r\n\r\nThe above will not match `require.resolve` for example as it requires an opening parenthesis or a slash (typically the start of a comment) after it.",
        "createdAt" : "2018-10-24T19:09:27Z",
        "updatedAt" : "2018-10-25T06:13:37Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      },
      {
        "id" : "6bab248d-6aa8-4ec2-a5e4-b5548af0dff3",
        "parentId" : "c1eb410b-0b96-4589-b0ac-79772e15b9f8",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I don't think we'd save much in the majority of files, and I prefer to have the simplest possible regex.",
        "createdAt" : "2018-10-24T21:33:53Z",
        "updatedAt" : "2018-10-24T22:16:30Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "7d4e92f5-4eea-47da-9c12-e1c8046259b5",
        "parentId" : "c1eb410b-0b96-4589-b0ac-79772e15b9f8",
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "Since this PR is about performance, I'd rather we are careful to not regress performance where possible.\r\nThere is `require.resolve`, `import.meta`, in a project of mine there's a lot **require**sTypeInformation and in addition these are regular verbs that could occur in a lot of comments.\r\nEach time you encounter something that contains one of these words, you need to recursively look up the node in the AST. That can potentially be very slow for large files with deep nesting.",
        "createdAt" : "2018-10-25T06:13:29Z",
        "updatedAt" : "2018-10-25T06:13:29Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      },
      {
        "id" : "3a6dcbdc-8395-4721-a2fa-3b76d857cff8",
        "parentId" : "c1eb410b-0b96-4589-b0ac-79772e15b9f8",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Well, the new collector is *m log(n)* where *m* is the number of `import|require` and *n* is the number of nodes. The old collector is *n log(n)*, and I think *m* will only approach *n* in pathological cases.\r\n\r\nAlso, the compiler is going to crash on very deep ASTs in the binder anyway. I tried to fix that by adding a flat OperatorListExpression to replace deep BinaryExpression trees, but gave up (for now) because of the amount of work needed to update all our BinaryExpression-based code.",
        "createdAt" : "2018-10-25T17:17:25Z",
        "updatedAt" : "2018-10-25T17:17:25Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf1b104a92a12c242adeda34aaf703181685930c",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1951,1955 @@\n            function collectDynamicImportOrRequireCalls(file: SourceFile) {\n                const r = /import|require/g;\n                while (r.exec(file.text) !== null) {\n                    const node = getTokenAtPosition(file, r.lastIndex);"
  },
  {
    "id" : "2cd3e767-ae62-4e09-90c3-4b4cb923307c",
    "prId" : 28104,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28104#pullrequestreview-168623930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ab772d5-11ea-444c-ad3f-74d580fc328f",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "as this also includes trivia, you will add the following imports twice to the list:\r\n\r\n```ts\r\n/* using require() */ require('foo');\r\n/* using import() */ import('bar');\r\n```",
        "createdAt" : "2018-10-24T19:14:26Z",
        "updatedAt" : "2018-10-24T19:14:48Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      },
      {
        "id" : "7417d52f-c0f8-4587-ad76-2bb1126fa330",
        "parentId" : "7ab772d5-11ea-444c-ad3f-74d580fc328f",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "For the comment-internal `require`, we end up with the Identifier require, not the CallExpression require. So we don't end up double-adding imports.",
        "createdAt" : "2018-10-24T22:16:07Z",
        "updatedAt" : "2018-10-24T22:16:31Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "08597c25-f45e-42eb-bcb7-aa1a9b9b47d2",
        "parentId" : "7ab772d5-11ea-444c-ad3f-74d580fc328f",
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "I realized that too after writing the comment.\r\nThough there's still the double-adding when the comment is at another position:\r\n```ts\r\nrequire/* using require() */ ('foo');\r\n```",
        "createdAt" : "2018-10-25T03:54:13Z",
        "updatedAt" : "2018-10-25T03:54:13Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      },
      {
        "id" : "62fc0ca2-51f8-4311-9405-b83aa6db0150",
        "parentId" : "7ab772d5-11ea-444c-ad3f-74d580fc328f",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Good catch. I added a check that the regex's end must be the same as the retrieved node's end.",
        "createdAt" : "2018-10-25T23:03:15Z",
        "updatedAt" : "2018-10-25T23:03:15Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "6c6904d0-9b8d-4dde-8505-d1e54ee5da24",
        "parentId" : "7ab772d5-11ea-444c-ad3f-74d580fc328f",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Actually, @weswigham points out that duplicates are fine -- it's just like writing `import('bar')` twice.",
        "createdAt" : "2018-10-25T23:18:30Z",
        "updatedAt" : "2018-10-25T23:18:30Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf1b104a92a12c242adeda34aaf703181685930c",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1953,1957 @@                const r = /import|require/g;\n                while (r.exec(file.text) !== null) {\n                    const node = getTokenAtPosition(file, r.lastIndex);\n                    if (isRequireCall(node, /*checkArgumentIsStringLiteralLike*/ true)) {\n                        imports = append(imports, node.arguments[0]);"
  },
  {
    "id" : "baa5b2b7-dc3d-4194-bb4b-d20234ee7c71",
    "prId" : 28104,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28104#pullrequestreview-168221340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad0c67ad-eba8-4456-9254-e39437196178",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "probably unrelated to this change: IMO it should only look at JSDoc in JS files as ImportTypeNodes in JSDoc of TS files have no effect.",
        "createdAt" : "2018-10-25T06:15:21Z",
        "updatedAt" : "2018-10-25T06:15:22Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf1b104a92a12c242adeda34aaf703181685930c",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +1976,1980 @@                };\n                while (true) {\n                    const child = hasJSDocNodes(current) && forEach(current.jsDoc, getContainingChild) || forEachChild(current, getContainingChild);\n                    if (!child) {\n                        return current;"
  },
  {
    "id" : "5bf8c154-0a91-4555-9112-be280eb3bfad",
    "prId" : 28028,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28028#pullrequestreview-167020382",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc40213e-6054-446e-a14c-49a278b39d29",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think you can get away with creating duplicate array by using every function on modifiedSourceFiles to find if oldFile isn't in modified files",
        "createdAt" : "2018-10-22T16:51:37Z",
        "updatedAt" : "2018-10-22T16:53:55Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "966c374f-4a58-4d1a-b25b-2d988c5e5865",
        "parentId" : "fc40213e-6054-446e-a14c-49a278b39d29",
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "I don't know if I correctly understand what your comment means:\r\nIf you mean I should prefer `!modifiedSourceFiles.some((f) => f.oldFile === oldFile)` in the loop below, I don't think it's worth changing. That would need to allocate a closure for every lookup and basically does the mapping inplace just to avoid allocating a new (probably very small) array.",
        "createdAt" : "2018-10-22T17:28:29Z",
        "updatedAt" : "2018-10-22T17:32:13Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "63a8cb6933d9a78dde7f5e5df7b01417a812968c",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +1202,1206 @@            }\n\n            const modifiedFiles = modifiedSourceFiles.map(f => f.oldFile);\n            for (const oldFile of oldSourceFiles) {\n                if (!contains(modifiedFiles, oldFile)) {"
  },
  {
    "id" : "87769595-8473-41ca-9761-52064a0e86f1",
    "prId" : 28028,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28028#pullrequestreview-167020382",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a6d4c0d-badb-4829-b0d3-166f49fcd6a4",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think this needs to be a function that either gets the value that's cached or calculate this so that we avoid doing this if there are no modules in new files etc. ",
        "createdAt" : "2018-10-22T16:52:19Z",
        "updatedAt" : "2018-10-22T16:53:55Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "8d0a4d22-2d51-416d-9125-17f541d644f8",
        "parentId" : "3a6d4c0d-badb-4829-b0d3-166f49fcd6a4",
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "I don't think this loop is critical for performance as it's only executed once and it's very likely that this information is needed later anyway.\r\nIn addition `modifiedSourceFiles` is only available in the scope of this function. I would need to move it to an outer scope to access it later. I'd like to avoid that as it increases the likelihood to retain references to old sourcefiles that could otherwise be garbage collected",
        "createdAt" : "2018-10-22T17:31:22Z",
        "updatedAt" : "2018-10-22T17:32:13Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "63a8cb6933d9a78dde7f5e5df7b01417a812968c",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +1203,1207 @@\n            const modifiedFiles = modifiedSourceFiles.map(f => f.oldFile);\n            for (const oldFile of oldSourceFiles) {\n                if (!contains(modifiedFiles, oldFile)) {\n                    for (const moduleName of oldFile.ambientModuleNames) {"
  },
  {
    "id" : "ba82d566-bfad-458b-956e-37ff0f0e7547",
    "prId" : 27082,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27082#pullrequestreview-155351245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fd4767b-5d9f-4a03-bff6-48a12f659923",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "IMO this is a good change, but still it's a breaking API change and should be documented somewhere ",
        "createdAt" : "2018-09-14T04:43:41Z",
        "updatedAt" : "2018-09-14T19:44:21Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "c63d58148a8abaf21f59a4f2bdf65ffa2372e635",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +1271,1275 @@        }\n\n        function getResolvedProjectReferences() {\n            return resolvedProjectReferences;\n        }"
  },
  {
    "id" : "1ac4e37e-625b-45a8-b39c-e5b76d373344",
    "prId" : 24704,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24704#pullrequestreview-126930001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16cadb3b-6e27-4ccc-bd51-0e310c27c3c2",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i would check `--sourceMap` on the referenced project to avoid picking up a stale source map file.",
        "createdAt" : "2018-06-07T19:45:07Z",
        "updatedAt" : "2018-06-07T19:45:07Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb1973a4fd129eb7deb5aad5a4f376bba396c21b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1193,1197 @@                    const dtsFilename = changeExtension(resolvedRefOpts.options.outFile, \".d.ts\");\n                    const js = host.readFile(resolvedRefOpts.options.outFile) || `/* Input file ${resolvedRefOpts.options.outFile} was missing */\\r\\n`;\n                    const jsMap = host.readFile(resolvedRefOpts.options.outFile + \".map\"); // TODO: try to read sourceMappingUrl comment from the js file\n                    const dts = host.readFile(dtsFilename) || `/* Input file ${dtsFilename} was missing */\\r\\n`;\n                    const dtsMap = host.readFile(dtsFilename + \".map\");"
  },
  {
    "id" : "2edf8d86-9ac6-441f-bc72-964f9c838e7a",
    "prId" : 24704,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24704#pullrequestreview-126930115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3cb1552-9ef1-495c-939d-956ab128b940",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "and for the declaration file map as well.",
        "createdAt" : "2018-06-07T19:45:27Z",
        "updatedAt" : "2018-06-07T19:45:27Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb1973a4fd129eb7deb5aad5a4f376bba396c21b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1195,1199 @@                    const jsMap = host.readFile(resolvedRefOpts.options.outFile + \".map\"); // TODO: try to read sourceMappingUrl comment from the js file\n                    const dts = host.readFile(dtsFilename) || `/* Input file ${dtsFilename} was missing */\\r\\n`;\n                    const dtsMap = host.readFile(dtsFilename + \".map\");\n                    const node = createInputFiles(js, dts, jsMap, dtsMap);\n                    nodes.push(node);"
  },
  {
    "id" : "33fea7cb-e09f-4b07-8ca2-68c2d65654e6",
    "prId" : 24704,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24704#pullrequestreview-126994803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ec96ad4-b0fc-45ec-9ba6-aa77bee70531",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Per my comments in _sourcemap.ts_, would it make sense to parse `jsMap` and `dtsMap` here so that we can report necessary diagnostics? We can then just store the _valid and parsed_ source maps on `node`.",
        "createdAt" : "2018-06-07T23:55:39Z",
        "updatedAt" : "2018-06-07T23:56:54Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb1973a4fd129eb7deb5aad5a4f376bba396c21b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1196,1200 @@                    const dts = host.readFile(dtsFilename) || `/* Input file ${dtsFilename} was missing */\\r\\n`;\n                    const dtsMap = host.readFile(dtsFilename + \".map\");\n                    const node = createInputFiles(js, dts, jsMap, dtsMap);\n                    nodes.push(node);\n                }"
  },
  {
    "id" : "851f4dfb-68e7-44fc-976e-8a2abb98fce3",
    "prId" : 24589,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24589#pullrequestreview-126837311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2106de24-30e5-42b1-9e08-f6ced7a2c3c8",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "whats difference between path and resolvedPath? why are they different?",
        "createdAt" : "2018-06-01T22:24:25Z",
        "updatedAt" : "2018-06-01T22:24:25Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "65d83308-3f9d-4980-b4ec-6af7b48bd2b9",
        "parentId" : "2106de24-30e5-42b1-9e08-f6ced7a2c3c8",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "From what I can tell, the server assumes that there is an exact match between paths provided to `getSourceFileByPath` and the resulting `.path` of the returned `SourceFile`, so during `getScriptInfoForPath` it's assumed that the same `path` can be used interchangeably. This breaks when we redirect a source file (`.ts`) to a build output (`.d.ts`) in a project reference scenario",
        "createdAt" : "2018-06-05T18:30:35Z",
        "updatedAt" : "2018-06-05T18:30:35Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "947b6f10-86e0-4b65-8ea0-59426f9f2d39",
        "parentId" : "2106de24-30e5-42b1-9e08-f6ced7a2c3c8",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I still don't understand why its ok to use filename and not path because they are same except for complete path and handling of case sensitivity?",
        "createdAt" : "2018-06-07T15:33:27Z",
        "updatedAt" : "2018-06-07T15:33:28Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e9e29ce64218568ab7d33e6423838268238fc38",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1992,1996 @@                sourceFilesFoundSearchingNodeModules.set(path, currentNodeModulesDepth > 0);\n                file.path = path;\n                file.resolvedPath = toPath(fileName);\n\n                if (host.useCaseSensitiveFileNames()) {"
  },
  {
    "id" : "0c93aab9-8658-4376-9652-23035982805b",
    "prId" : 24390,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24390#pullrequestreview-123169540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edd471db-4f84-442b-aab1-f1aba9010e2c",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "should we also check the file extension?",
        "createdAt" : "2018-05-24T20:54:10Z",
        "updatedAt" : "2018-05-24T20:54:10Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "3f9ebb2a-3bcc-4664-90e0-1dd6cea30ecc",
        "parentId" : "edd471db-4f84-442b-aab1-f1aba9010e2c",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "When \"files\" is not provided in the tsconfig, declarationDir is added to excludes. We dont check extensions in there so if we go by same rule, we needn't check extension?\r\nAlso in outDir, we dont see if that is really output file or some random file.",
        "createdAt" : "2018-05-24T20:57:51Z",
        "updatedAt" : "2018-05-24T20:57:51Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "51058b56e55350f79ac8929e082c1b98e6551359",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2669,2673 @@\n            // If declarationDir is specified, return if its a file in that directory\n            if (options.declarationDir && containsPath(options.declarationDir, filePath, currentDirectory, !host.useCaseSensitiveFileNames())) {\n                return true;\n            }"
  },
  {
    "id" : "ff7c8a34-dbdb-44af-b49d-fe15f6a24394",
    "prId" : 23686,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23686#pullrequestreview-121561865",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a8362d1-6b74-43fe-9547-cd037bf50252",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Can you instead use concatenate on the diagnostics instead of using empty array assignment to sub arrays to be concatenated, that way multiple emptyArray concatenate wont create new array with length 0 but use empty array in the end?",
        "createdAt" : "2018-05-18T19:08:08Z",
        "updatedAt" : "2018-05-22T15:40:57Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "576b0a6a-a428-40a0-8c4d-f07321029d42",
        "parentId" : "1a8362d1-6b74-43fe-9547-cd037bf50252",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`emptyArray` is a const and not a function call -- it doesn't create a new empty array, it just refers to a global empty array. So shouldn't be any issue of too many allocations.",
        "createdAt" : "2018-05-18T19:41:37Z",
        "updatedAt" : "2018-05-22T15:40:57Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "f3f3a106-9ab2-4094-8a4b-e78809755818",
        "parentId" : "1a8362d1-6b74-43fe-9547-cd037bf50252",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "https://github.com/Microsoft/TypeScript/pull/23686/files#diff-08a3cc4f1f9a51dbb468c2810f5229d3R1410 will allocate new array.",
        "createdAt" : "2018-05-18T20:26:24Z",
        "updatedAt" : "2018-05-22T15:40:57Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "919cb052da92db93c10dba8032067967e1364e01",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +1404,1408 @@                const includeBindAndCheckDiagnostics = sourceFile.scriptKind === ScriptKind.TS || sourceFile.scriptKind === ScriptKind.TSX ||\n                    sourceFile.scriptKind === ScriptKind.External || isCheckJs || sourceFile.scriptKind === ScriptKind.Deferred;\n                const bindDiagnostics: ReadonlyArray<Diagnostic> = includeBindAndCheckDiagnostics ? sourceFile.bindDiagnostics : emptyArray;\n                const checkDiagnostics = includeBindAndCheckDiagnostics ? typeChecker.getDiagnostics(sourceFile, cancellationToken) : emptyArray;\n                const fileProcessingDiagnosticsInFile = fileProcessingDiagnostics.getDiagnostics(sourceFile.fileName);"
  },
  {
    "id" : "a1e029af-acd4-405a-b29c-7d4087a7049c",
    "prId" : 23521,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23521#pullrequestreview-113382683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a7de34e-b25c-4c11-8d55-126050d7e2f5",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "should be `&&` instead of `||`. in a .ts file this is going to be a node, and not a comment. ",
        "createdAt" : "2018-04-18T19:27:03Z",
        "updatedAt" : "2018-04-18T23:14:25Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "6b27b406-219f-4b0a-ac13-f73c66927cf3",
        "parentId" : "0a7de34e-b25c-4c11-8d55-126050d7e2f5",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "It's always a node. It just may (or may not) have `.jsDoc` nodes attached.",
        "createdAt" : "2018-04-18T19:46:02Z",
        "updatedAt" : "2018-04-18T23:14:25Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "82a48915-0d2d-402d-a1ec-f9744762dd75",
        "parentId" : "0a7de34e-b25c-4c11-8d55-126050d7e2f5",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "In a .ts file we do not bind or process jsdoc. If it we are on EOF we are sure this is not a regular node, we are only looking at jsdoc. So what I am saying there is no reason to look at the jsdoc in a .ts file",
        "createdAt" : "2018-04-18T20:23:38Z",
        "updatedAt" : "2018-04-18T23:14:25Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "5daf8470-246d-485a-ad29-479e52df9f95",
        "parentId" : "0a7de34e-b25c-4c11-8d55-126050d7e2f5",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "@mhegazy You say that, and I've said that, but that's not true. We parse `jsdoc` even in TS files for the LS (that's why you can still use `Go To Definition` on a typedef in a `.ts` file) - we just don't consider them as part of the types of any associated nodes in the checker. Seriously - `addJSDocComment` in `parser.ts` is unconditional. Parts of the binding process are also unconditional (not typedef binding, that's only done in JS; but parent pointer setup is always done).",
        "createdAt" : "2018-04-18T20:37:46Z",
        "updatedAt" : "2018-04-18T23:14:25Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "243e403c5629a186d2e44cbc2098b996074f39b3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1625,1629 @@                }\n            }\n            if ((file.flags & NodeFlags.PossiblyContainsDynamicImport) || isJavaScriptFile) {\n                collectDynamicImportOrRequireCalls(file.endOfFileToken);\n            }"
  },
  {
    "id" : "a47de6a0-4ddc-4882-92b4-8471ff4d29bc",
    "prId" : 22167,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22167#pullrequestreview-116461164",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45dac648-7100-47b8-a901-e2b8e552884e",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "interesting to see permissions changing from 755 to 644. Any idea why they were 755 before?",
        "createdAt" : "2018-04-26T21:43:28Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "c4ea442b-11a0-4ba8-8114-5ced3d286079",
        "parentId" : "45dac648-7100-47b8-a901-e2b8e552884e",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "what?",
        "createdAt" : "2018-04-30T18:10:52Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "82b6e4e8-c21a-4f8d-b671-63ff4b37d883",
        "parentId" : "45dac648-7100-47b8-a901-e2b8e552884e",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "in the title for program.ts, it says that program.ts has 14 lines changed and also changed permissions from 100755 to 100644. I think that is safer since I don't think we can run program.ts from the command line, but I wasn't sure what prompted the change.",
        "createdAt" : "2018-04-30T22:42:15Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4143ae0c15acae0015f5aa00e8e2391ef156388",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +1986,1990 @@                    if (!resolution) {\n                        continue;\n                    }\n\n                    const isFromNodeModulesSearch = resolution.isExternalLibraryImport;"
  },
  {
    "id" : "f540ba68-0a16-4e10-af71-e7f3803023cc",
    "prId" : 22167,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22167#pullrequestreview-117737691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce1ea29a-2d85-4aeb-b8ef-f6c20c95ab3d",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "what about `--module`? do not think we should allow this for `--module ES2015` for example..",
        "createdAt" : "2018-05-04T19:29:14Z",
        "updatedAt" : "2018-05-04T19:29:25Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "699e03df-6a14-43d0-ade7-dfbf7079dfd7",
        "parentId" : "ce1ea29a-2d85-4aeb-b8ef-f6c20c95ab3d",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Clarified offline. At present ```--moduleResolution``` specified takes preferences for resolution irrespective of ```--module``` and since there is no change in there, no error needs to be reported specially.",
        "createdAt" : "2018-05-04T19:41:46Z",
        "updatedAt" : "2018-05-04T19:41:46Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4143ae0c15acae0015f5aa00e8e2391ef156388",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2202,2206 @@\n            if (options.resolveJsonModule) {\n                if (getEmitModuleResolutionKind(options) !== ModuleResolutionKind.NodeJs) {\n                    createDiagnosticForOptionName(Diagnostics.Option_resolveJsonModule_cannot_be_specified_without_node_module_resolution_strategy, \"resolveJsonModule\");\n                }"
  },
  {
    "id" : "49570e5f-e02a-4487-9671-5ab59b9a5c5d",
    "prId" : 19228,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19228#pullrequestreview-69705206",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24617c46-3765-45d6-ac73-67f75c2681a9",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "As an aside, I get confused every time I see a reference to \"external\" source files.  It sounds like they relate to external projects.  Maybe \"plugin\" or \"extension\" would be clearer?",
        "createdAt" : "2017-10-16T21:04:31Z",
        "updatedAt" : "2017-10-16T21:04:32Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "1f461663-26d8-4a3b-b387-ba5a7b62e70a",
        "parentId" : "24617c46-3765-45d6-ac73-67f75c2681a9",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "You're right, that is an aside ;-)\r\n\r\nFor this quick & urgent fix, I don't intend to do a large refactoring across both managed and script side where this terminology is used. Maybe a suggestion for later though.",
        "createdAt" : "2017-10-16T21:25:41Z",
        "updatedAt" : "2017-10-16T21:25:41Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7566760911f932c2cf639e254c15d5a571b063ad",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1150,1154 @@                // By default, only type-check .ts, .tsx, and 'External' files (external files are added by plugins)\n                const includeBindAndCheckDiagnostics = sourceFile.scriptKind === ScriptKind.TS || sourceFile.scriptKind === ScriptKind.TSX ||\n                    sourceFile.scriptKind === ScriptKind.External || isCheckJsEnabledForFile(sourceFile, options);\n                const bindDiagnostics = includeBindAndCheckDiagnostics ? sourceFile.bindDiagnostics : emptyArray;\n                const checkDiagnostics = includeBindAndCheckDiagnostics ? typeChecker.getDiagnostics(sourceFile, cancellationToken) : emptyArray;"
  },
  {
    "id" : "30a2973b-4433-490b-ad2e-ed1ce402492f",
    "prId" : 19228,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19228#pullrequestreview-69712058",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81f74983-1b57-4b27-8b73-466f5afa195e",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Does something about our parsing prevent `checkJsDirective` from being set for non-JS files (e.g. for JSON files)?",
        "createdAt" : "2017-10-16T21:20:36Z",
        "updatedAt" : "2017-10-16T21:20:36Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "8c60badc-a9e3-4d33-8d5a-a2055982a33b",
        "parentId" : "81f74983-1b57-4b27-8b73-466f5afa195e",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Wouldn't that fall through to the `isCheckJsEnabledForFile(sourceFile, options)` at the end of the OR clauses if so?",
        "createdAt" : "2017-10-16T21:33:18Z",
        "updatedAt" : "2017-10-16T21:33:18Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "f1ec8f42-054c-4be9-8614-f73868cf04e0",
        "parentId" : "81f74983-1b57-4b27-8b73-466f5afa195e",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Yes, wouldn't that be bad?",
        "createdAt" : "2017-10-16T21:53:57Z",
        "updatedAt" : "2017-10-16T21:53:57Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "7566760911f932c2cf639e254c15d5a571b063ad",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1150,1154 @@                // By default, only type-check .ts, .tsx, and 'External' files (external files are added by plugins)\n                const includeBindAndCheckDiagnostics = sourceFile.scriptKind === ScriptKind.TS || sourceFile.scriptKind === ScriptKind.TSX ||\n                    sourceFile.scriptKind === ScriptKind.External || isCheckJsEnabledForFile(sourceFile, options);\n                const bindDiagnostics = includeBindAndCheckDiagnostics ? sourceFile.bindDiagnostics : emptyArray;\n                const checkDiagnostics = includeBindAndCheckDiagnostics ? typeChecker.getDiagnostics(sourceFile, cancellationToken) : emptyArray;"
  },
  {
    "id" : "6535d7c7-7ee7-4e04-b54b-498c614b08f7",
    "prId" : 18185,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18185#pullrequestreview-60013403",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4d4c952-6efe-438d-a0cf-2fa31926c231",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Just to confirm, we're fine with producing an ugly string when `packageId.subModuleName` is empty?  It appears to only be used as a dictionary key, so I'm assuming we are.",
        "createdAt" : "2017-08-31T23:04:47Z",
        "updatedAt" : "2017-09-05T17:31:42Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "104a52b6054608149f4f2f97d473f239715d529f",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1676,1680 @@\n            if (packageId) {\n                const packageIdKey = `${packageId.name}/${packageId.subModuleName}@${packageId.version}`;\n                const fileFromPackageId = packageIdToSourceFile.get(packageIdKey);\n                if (fileFromPackageId) {"
  },
  {
    "id" : "4aaeeb71-0d4e-4ad6-af84-f1582eb71a31",
    "prId" : 18009,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18009#pullrequestreview-58719926",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bdab138-da10-4d92-9d1f-9bd37c1c6eef",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Just to confirm, the string literal `\"global\"` is not equal to the identifier `global`?",
        "createdAt" : "2017-08-25T17:08:21Z",
        "updatedAt" : "2017-08-25T21:34:37Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "dc6d1692-af06-4377-a182-6b28bb121a4c",
        "parentId" : "8bdab138-da10-4d92-9d1f-9bd37c1c6eef",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "```ts\r\nexport {}; // this is a module\r\n\r\n// Augments a module named \"global\"\r\ndeclare module \"global\" {\r\n    export const x: number;\r\n}\r\n\r\n// Augments the global scope\r\ndeclare global {\r\n    const y: number;\r\n}\r\n\r\n// Module access: \"y\" fails\r\nimport { x as _x, y as _y } from \"global\";\r\n\r\n// Global access: \"x\" fails\r\nx; y;\r\n```",
        "createdAt" : "2017-08-25T17:49:26Z",
        "updatedAt" : "2017-08-25T21:34:37Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "08689802c6b6f8c7655b9f8fe6bfbe32f4b2a237",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1432,1436 @@\n        function moduleNameIsEqualTo(a: StringLiteral | Identifier, b: StringLiteral | Identifier): boolean {\n            return a.kind === SyntaxKind.StringLiteral\n                ? b.kind === SyntaxKind.StringLiteral && a.text === b.text\n                : b.kind === SyntaxKind.Identifier && a.escapedText === b.escapedText;"
  },
  {
    "id" : "21693480-1cf6-4ecc-908f-558235f216d6",
    "prId" : 18009,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18009#pullrequestreview-58719875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adf0616a-73d3-4261-bde4-35c1fa90b378",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "For my own edification, what's the difference between `T[]` and `Array<T>`?",
        "createdAt" : "2017-08-25T17:08:57Z",
        "updatedAt" : "2017-08-25T21:34:37Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "50ca2c64-d970-4940-89f3-171e46fc2762",
        "parentId" : "adf0616a-73d3-4261-bde4-35c1fa90b378",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "No semantic difference. I prefer to use `Array<>` when wrapping unions to avoid needing parentheses. (`Array<A | B>` instead of `(A | B)[]`). (See [array-type](https://palantir.github.io/tslint/rules/array-type/) (the \"array-simple\" option), which maybe we should start using.)",
        "createdAt" : "2017-08-25T17:49:10Z",
        "updatedAt" : "2017-08-25T21:34:37Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "08689802c6b6f8c7655b9f8fe6bfbe32f4b2a237",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1447,1451 @@            // file.imports may not be undefined if there exists dynamic import\n            let imports: StringLiteral[];\n            let moduleAugmentations: Array<StringLiteral | Identifier>;\n            let ambientModules: string[];\n"
  },
  {
    "id" : "5e4650db-d366-4cb2-a070-0f4b50898ad0",
    "prId" : 17669,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17669#pullrequestreview-56218423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac6e0637-8df5-4fd4-8568-2bf0d38b0c2c",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`compareDataObjects` doesn't look like it will compare the values of anything that isn't a function or object, so it would usually return `true` for compiler option changes, which tend to be booleans or numbers (enums).\r\nBased on the only other use of this function, it should probably be renamed to `deepEquals` and changed to compare primitive values using `===`, and it should just assert that it never sees a function.",
        "createdAt" : "2017-08-10T17:53:44Z",
        "updatedAt" : "2017-08-31T00:34:53Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "b730c040-0b9d-455b-9d92-d4262bd9e9e7",
        "parentId" : "ac6e0637-8df5-4fd4-8568-2bf0d38b0c2c",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I would keep this way since I have just moved from services to the compiler utilities so that we can unify the logic. If there is need to do more in this function, we could handle that on demand later.",
        "createdAt" : "2017-08-14T22:10:20Z",
        "updatedAt" : "2017-08-31T00:34:53Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea95f3b4e564e2f0d9d7c9ddb0869c179783ee4f",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +418,422 @@        const currentOptions = program.getCompilerOptions();\n        // If the compilation settings do no match, then the program is not up-to-date\n        if (!compareDataObjects(currentOptions, newOptions)) {\n            return false;\n        }"
  },
  {
    "id" : "f995a67c-148d-4ff4-a3d9-d6a6099d89fb",
    "prId" : 17669,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17669#pullrequestreview-56357434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ebbbfdc-0166-4e3a-8aff-295385d30c61",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "If `compareDataObjects` is fixed, this should be handled by the above test.\r\nActually, you probably want a shallow equals instead to avoid comparing two `JsonSourceFile` objects deeply, just their text.",
        "createdAt" : "2017-08-10T18:00:21Z",
        "updatedAt" : "2017-08-31T00:34:53Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "438affe6-81e6-4729-bc78-7b0a830a3108",
        "parentId" : "8ebbbfdc-0166-4e3a-8aff-295385d30c61",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "compareDataObjects compares only enumerable properties. configFile is set as non enumerable hence the check",
        "createdAt" : "2017-08-14T22:17:14Z",
        "updatedAt" : "2017-08-31T00:34:53Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "bc7f7ab5-e2bc-4127-b195-3c999dd2635a",
        "parentId" : "8ebbbfdc-0166-4e3a-8aff-295385d30c61",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "That's far too clever. I'd prefer if we didn't depend on enumerability anywhere, got rid of `compareDataObjects`, and just had specialized equals functions for `JsonSourceFile` and `FormatCodeSettings`.",
        "createdAt" : "2017-08-15T14:31:19Z",
        "updatedAt" : "2017-08-31T00:34:53Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea95f3b4e564e2f0d9d7c9ddb0869c179783ee4f",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +424,428 @@        // If everything matches but the text of config file is changed,\n        // error locations can change for program options, so update the program\n        if (currentOptions.configFile && newOptions.configFile) {\n            return currentOptions.configFile.text === newOptions.configFile.text;\n        }"
  },
  {
    "id" : "eb7094ee-9566-4da6-933d-3d39d510225f",
    "prId" : 17503,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17503#pullrequestreview-53066785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7197852d-d679-4090-9083-39326f69cd44",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Do we always interpret as JSX in a JS file?",
        "createdAt" : "2017-07-29T01:59:53Z",
        "updatedAt" : "2017-07-29T02:00:00Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "ffaa86bc-148a-48dc-92d3-d05ca8ffc2f3",
        "parentId" : "7197852d-d679-4090-9083-39326f69cd44",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Yes, see `getLanguageVariant` in `parser.ts`.",
        "createdAt" : "2017-07-29T02:03:35Z",
        "updatedAt" : "2017-07-29T02:03:35Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "45be690452ef096a63fd3558ddcea1631cba6f52",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1204,1208 @@                            return;\n                        case SyntaxKind.TypeAssertionExpression:\n                            Debug.fail(); // Won't parse these in a JS file anyway, as they are interpreted as JSX.\n                    }\n"
  },
  {
    "id" : "aa77c0cf-4583-47b5-a2da-fa8559ad3a6d",
    "prId" : 17415,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17415#pullrequestreview-62849045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3332b009-d5aa-45de-886d-8244b3f49e23",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Why bother with `memoize` and not just have `const defaultLibraryFileName = host.getDefaultLibraryFileName(options)`?",
        "createdAt" : "2017-09-14T18:33:46Z",
        "updatedAt" : "2017-09-14T19:48:17Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "889fb51e-eae4-44d0-ac89-39e5399cb08d",
        "parentId" : "3332b009-d5aa-45de-886d-8244b3f49e23",
        "authorId" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "body" : "Depending on the options and some logic, the variable might end up not being needed. This was done for lazy evaluation.",
        "createdAt" : "2017-09-14T18:42:42Z",
        "updatedAt" : "2017-09-14T19:48:17Z",
        "lastEditedBy" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ab67c0f222f79e4e380febcd7bd8988aa3c92d5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +439,443 @@\n        let skipDefaultLib = options.noLib;\n        const getDefaultLibraryFileName = memoize(() => host.getDefaultLibFileName(options));\n        const defaultLibraryPath = host.getDefaultLibLocation ? host.getDefaultLibLocation() : getDirectoryPath(getDefaultLibraryFileName());\n        const programDiagnostics = createDiagnosticCollection();"
  },
  {
    "id" : "71001d13-a8a5-45c6-8f71-5d5fa88c0169",
    "prId" : 16544,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16544#pullrequestreview-44205001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2418d457-3449-4314-b5e7-f6f18d6cbdd1",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "I am still not sure whether this should be StructureIsReused.Not",
        "createdAt" : "2017-06-15T04:51:49Z",
        "updatedAt" : "2017-06-19T23:18:54Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8038300380ba692e0c11498d8238ebb797f4b1e8",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +805,809 @@                    if ((oldSourceFile.flags & NodeFlags.PossiblyContainsDynamicImport) !== (newSourceFile.flags & NodeFlags.PossiblyContainsDynamicImport)) {\n                        // dynamicImport has changed\n                        oldProgram.structureIsReused = StructureIsReused.SafeModules;\n                    }\n"
  },
  {
    "id" : "5a841252-2ac0-4857-bd8a-005a425b269a",
    "prId" : 16210,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16210#pullrequestreview-41678092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66d14679-7f5d-4dbe-99e0-0614c823f769",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "`emptyArray` instead of `[]`",
        "createdAt" : "2017-06-02T01:32:50Z",
        "updatedAt" : "2017-06-02T17:35:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "1fcd4819-32d8-4fec-95ce-1b21709739de",
        "parentId" : "66d14679-7f5d-4dbe-99e0-0614c823f769",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Will do.  What's the difference?  Fewer allocations?",
        "createdAt" : "2017-06-02T01:58:53Z",
        "updatedAt" : "2017-06-02T17:35:05Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "549485dd8efd55332969098fcb823a0f31d3bb6b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1071,1075 @@                Debug.assert(!!sourceFile.bindDiagnostics);\n                // For JavaScript files, we don't want to report semantic errors unless explicitly requested.\n                const includeBindAndCheckDiagnostics = !isSourceFileJavaScript(sourceFile) || isCheckJsEnabledForFile(sourceFile, options);\n                const bindDiagnostics = includeBindAndCheckDiagnostics ? sourceFile.bindDiagnostics : emptyArray;\n                const checkDiagnostics = includeBindAndCheckDiagnostics ? typeChecker.getDiagnostics(sourceFile, cancellationToken) : emptyArray;"
  },
  {
    "id" : "0b9c186e-2bbd-486f-ac40-41ceeb723105",
    "prId" : 15260,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15260#pullrequestreview-33612687",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4061b7c-458a-46db-b15a-1a6e16b60b43",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "This comment isn't making much sense to me as written. If you have no-default-lib set to true, then I assume there is no default lib to check - in which case, what difference does skipDefaultLibCheck make?",
        "createdAt" : "2017-04-19T20:24:52Z",
        "updatedAt" : "2017-04-20T00:49:51Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "cb5aa0b4-44d6-4572-a89e-318c4ba7f7b5",
        "parentId" : "e4061b7c-458a-46db-b15a-1a6e16b60b43",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "`no-default-lib` is just a triple-slash directive. it can exist any where. \r\nWe have two flags, for historic reasons:\r\n1. skipDefaultLibCheck, only skips the checking of files that have `/// <reference no-default-lib=\"true\"/>` in them. This flag is now deprecated, but we still honor it.\r\n2. skipLibCheck, skips checking of all .d.ts files",
        "createdAt" : "2017-04-19T20:36:11Z",
        "updatedAt" : "2017-04-20T00:49:51Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "420908eb6300e39d276680f8bbcdde7a93913650",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +911,915 @@                // If skipLibCheck is enabled, skip reporting errors if file is a declaration file.\n                // If skipDefaultLibCheck is enabled, skip reporting errors if file contains a\n                // '/// <reference no-default-lib=\"true\"/>' directive.\n                if (options.skipLibCheck && sourceFile.isDeclarationFile || options.skipDefaultLibCheck && sourceFile.hasNoDefaultLib) {\n                    return emptyArray;"
  },
  {
    "id" : "a9b85a8b-8c88-491b-ae30-b1c5087c0925",
    "prId" : 15260,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15260#pullrequestreview-33882303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "046bd4de-fc00-4863-8743-9874f16f9e11",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Why do we have this check in two places ? I see similar check in  checkSourceFileWorker in checker.ts. Do we need to remove that check?",
        "createdAt" : "2017-04-19T21:19:28Z",
        "updatedAt" : "2017-04-20T16:33:56Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "cbad997b-140d-446a-b00e-1d44b6278a9a",
        "parentId" : "046bd4de-fc00-4863-8743-9874f16f9e11",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "yes, will get that fixed.",
        "createdAt" : "2017-04-20T18:02:53Z",
        "updatedAt" : "2017-04-20T18:02:53Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "8b802338-7137-44dc-9f28-949ca0467450",
        "parentId" : "046bd4de-fc00-4863-8743-9874f16f9e11",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I remember now why i did not do that, we call TypeChecker.getDiagnostics from the tests directly.",
        "createdAt" : "2017-04-20T20:46:45Z",
        "updatedAt" : "2017-04-20T20:46:46Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "420908eb6300e39d276680f8bbcdde7a93913650",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +912,916 @@                // If skipDefaultLibCheck is enabled, skip reporting errors if file contains a\n                // '/// <reference no-default-lib=\"true\"/>' directive.\n                if (options.skipLibCheck && sourceFile.isDeclarationFile || options.skipDefaultLibCheck && sourceFile.hasNoDefaultLib) {\n                    return emptyArray;\n                }"
  },
  {
    "id" : "55853b44-2056-4cec-a3b0-aa2515e48154",
    "prId" : 14774,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14774#pullrequestreview-34950262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59484585-d7bb-45ab-8bfd-6f8b8a945760",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I almost wish we tracked these during parse to avoid having to walk the entire source tree again, though there are issues with that when considering incremental parse scenarios. Not a requirement for this PR though.",
        "createdAt" : "2017-04-13T21:02:37Z",
        "updatedAt" : "2017-06-05T04:19:28Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "974bfeae-2c8b-40e5-ae96-e2bb5188714c",
        "parentId" : "59484585-d7bb-45ab-8bfd-6f8b8a945760",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Yea. Incremental parser is the main reason I pick this approach. We can try to be smarter about this but it will add lots of complexity to get our incremental parser done correctly..I do think it will be worth visiting this again in the future ...\r\nHowever with the new `NodeFlags.possiblyContainDynamicImport`  at least people who don't use the feature won't pay the price in batch compilation",
        "createdAt" : "2017-04-26T20:15:00Z",
        "updatedAt" : "2017-06-05T04:19:28Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1729ea860925485616de87e751eccdd7c81a2f5e",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1451,1455 @@            }\n\n            function collectDynamicImportOrRequireCalls(node: Node): void {\n                if (isRequireCall(node, /*checkArgumentIsStringLiteral*/ true)) {\n                    (imports || (imports = [])).push(<StringLiteral>(<CallExpression>node).arguments[0]);"
  },
  {
    "id" : "bf85dfe1-1e7d-4982-87ec-dbf6e786f279",
    "prId" : 14496,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14496#pullrequestreview-27194274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49103c0f-b8f3-4384-8815-62398bd98bac",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "- can line have more than one error where only one should be suppresed\r\n- seems that `ts-suppress` should be located immediately before the line to be suppressed so if user will put a comment between `ts-suppress` and target line it will stop working. Is it intended?",
        "createdAt" : "2017-03-15T20:48:14Z",
        "updatedAt" : "2017-03-28T04:38:25Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ea961714b6ecd7ecf285568ac3f1418bb203aaf",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +932,936 @@            const { file, start } = diagnostic;\n            const lineStarts = getLineStarts(file);\n            let { line } = computeLineAndCharacterOfPosition(lineStarts, start);\n            while (line > 0) {\n                const previousLineText = file.text.slice(lineStarts[line - 1], lineStarts[line]);"
  },
  {
    "id" : "5e45409b-588a-4671-a7a3-1ce5ed4c18fb",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-20841367",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f93c60e1-a577-4c79-9738-871a36d04a3a",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "it would be better to call the same `createDiagnosticForOption` twice, once for each option, instead of passing the second key through out the whole stack.",
        "createdAt" : "2017-01-28T01:14:49Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "61742d85-7557-4b57-85b0-98d7d3844c3a",
        "parentId" : "f93c60e1-a577-4c79-9738-871a36d04a3a",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This avoid iterating in compiler options object literal multiple times to find those two options. We have most of the error messages reported on 2 options and there are very select messages that are reported on single option so it seems ok to pass that undefined for those few scenarios? ",
        "createdAt" : "2017-02-08T19:31:37Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 249,
    "diffHunk" : "@@ -1,1 +2029,2033 @@\n        function createDiagnosticForOptionName(message: DiagnosticMessage, option1: string, option2?: string) {\n            createDiagnosticForOption(/*onKey*/ true, option1, option2, message, option1, option2);\n        }\n"
  },
  {
    "id" : "27946966-91a4-411d-a4f0-2e6f04a6b02c",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67ffdcc2-3a79-4e39-a66a-e349612545e7",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Why not return early? Is there a reason we would want to add the same diagnostic twice?",
        "createdAt" : "2017-06-06T21:48:29Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 213,
    "diffHunk" : "@@ -1,1 +1993,1997 @@                            keyProps.initializer.elements.length > valueIndex) {\n                            programDiagnostics.add(createDiagnosticForNodeInSourceFile(options.configFile, keyProps.initializer.elements[valueIndex], message, arg0, arg1, arg2));\n                            needCompilerDiagnostic = false;\n                        }\n                    }"
  },
  {
    "id" : "f92724f1-71b0-4a98-94db-e624b5b5b15d",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f229d700-a0da-42a9-a6eb-8d452b83cf91",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Would name this `getCompilerOptionsObjectLiteralExpression`. Similar for `getOptionPathsSyntax`.",
        "createdAt" : "2017-06-06T21:49:03Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 266,
    "diffHunk" : "@@ -1,1 +2046,2050 @@        }\n\n        function getCompilerOptionsObjectLiteralSyntax() {\n            if (_compilerOptionsObjectLiteralSyntax === undefined) {\n                _compilerOptionsObjectLiteralSyntax = null; // tslint:disable-line:no-null-keyword"
  },
  {
    "id" : "bef28bdd-b8a0-4974-90c3-6d219b09cc60",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a448cd5e-a78d-4001-a63f-8745636ba10b",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Maybe use array spreads instead of nested `concatenate`?",
        "createdAt" : "2017-06-06T21:50:41Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1328,1332 @@\n        function getOptionsDiagnostics(): Diagnostic[] {\n            return sortAndDeduplicateDiagnostics(concatenate(\n                fileProcessingDiagnostics.getGlobalDiagnostics(),\n                concatenate("
  },
  {
    "id" : "7b35b769-cfcb-44d2-87b9-4cbd5d6c7d97",
    "prId" : 12020,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12020#pullrequestreview-8244140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43648765-4b18-4240-ba36-b50b62020925",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "don't think that changes in the way how common subpath is computed should not be the part of this PR since it is not related to original issue\n",
        "createdAt" : "2016-11-11T18:34:26Z",
        "updatedAt" : "2016-11-11T21:37:19Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "258e5868-9007-495a-ab9b-d32de4f70ac3",
        "parentId" : "43648765-4b18-4240-ba36-b50b62020925",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Review #11993, then I'll rebase.\n",
        "createdAt" : "2016-11-11T18:37:36Z",
        "updatedAt" : "2016-11-11T21:37:19Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c7e1b69138762827bf927c7885cd53517a1f260",
    "line" : null,
    "diffHunk" : "@@ -1,1 +433,437 @@        function getCommonSourceDirectory() {\n            if (commonSourceDirectory === undefined) {\n                const emittedFiles = filterSourceFilesInDirectory(files, isSourceFileFromExternalLibrary);\n                if (options.rootDir && checkSourceFilesBelongToPath(emittedFiles, options.rootDir)) {\n                    // If a rootDir is specified and is valid use it as the commonSourceDirectory"
  },
  {
    "id" : "68f10466-ef1a-48f0-8f12-d3b37982a5ec",
    "prId" : 11993,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11993#pullrequestreview-8068542",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bc00dd8-606d-4975-8cdd-1f5e464c30cb",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This is ignoring .d.ts files in the own compilation as well ? (not from external library) \n",
        "createdAt" : "2016-11-02T18:41:53Z",
        "updatedAt" : "2016-11-11T21:10:48Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "162a5a3c-8b1b-49a9-ba59-74538bb1d48d",
        "parentId" : "9bc00dd8-606d-4975-8cdd-1f5e464c30cb",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Yes. For the `--outDir` case that makes sense since we are just emitting `.ts` files. Can you provide another case where we would want the `.d.ts` files included?\n",
        "createdAt" : "2016-11-02T19:03:47Z",
        "updatedAt" : "2016-11-11T21:10:48Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "c141d130-bbfd-43dd-ac27-7838533c399d",
        "parentId" : "9bc00dd8-606d-4975-8cdd-1f5e464c30cb",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "But right now we didnt ignore .d.ts files from our own program to compute the common source directory? So this is intended change? \n",
        "createdAt" : "2016-11-03T15:45:18Z",
        "updatedAt" : "2016-11-11T21:10:48Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "a71e7626-acea-4189-b317-d66941ec3cc1",
        "parentId" : "9bc00dd8-606d-4975-8cdd-1f5e464c30cb",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I've added a `.d.ts` file to the test.\n",
        "createdAt" : "2016-11-03T19:33:46Z",
        "updatedAt" : "2016-11-11T21:10:48Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "2cce728d-da13-4921-9110-893ac4f803b6",
        "parentId" : "9bc00dd8-606d-4975-8cdd-1f5e464c30cb",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "you need a new test case:\n\n```\n//@filename: app/src/index.ts\n\n//@filename: app/lib/bar.d.ts\n\n//@filename: app/tsconfig.json\n```\n\nTo make sure common source directory is still `app`\n",
        "createdAt" : "2016-11-10T17:20:01Z",
        "updatedAt" : "2016-11-11T21:10:48Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "599b2d0e-7dfd-4d99-9cf9-73ce51cf3d0e",
        "parentId" : "9bc00dd8-606d-4975-8cdd-1f5e464c30cb",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "OK, I added a test `commonSourceDirectory_dts.ts`. This appears to already be the behavior of the current compiler -- the referenced file does not become part of the output.\n",
        "createdAt" : "2016-11-10T18:26:36Z",
        "updatedAt" : "2016-11-11T21:10:48Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b65729e5b28a84bca02de7abdace4b4f0eaa2e11",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +433,437 @@        function getCommonSourceDirectory() {\n            if (commonSourceDirectory === undefined) {\n                const emittedFiles = filterSourceFilesInDirectory(files, isSourceFileFromExternalLibrary);\n                if (options.rootDir && checkSourceFilesBelongToPath(emittedFiles, options.rootDir)) {\n                    // If a rootDir is specified and is valid use it as the commonSourceDirectory"
  },
  {
    "id" : "9c809217-70cc-4bd3-9ef1-71af0764105e",
    "prId" : 11993,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11993#pullrequestreview-7251681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4636cf8c-8508-483c-82ce-5b5ed30ca358",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This is also used by maproot and sourceroot.. So not doing this for bundle emit has effect on how the paths would be represented... Because --mapRoot --sourceRoot --outFile is a valid option\n",
        "createdAt" : "2016-11-02T18:46:22Z",
        "updatedAt" : "2016-11-11T21:10:48Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "3e326c57-e074-4706-a232-f0c49f167666",
        "parentId" : "4636cf8c-8508-483c-82ce-5b5ed30ca358",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Could you write a test case?\n",
        "createdAt" : "2016-11-02T19:01:08Z",
        "updatedAt" : "2016-11-11T21:10:48Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "d5c9ab8a-10e6-49f3-9d48-55a5b513ecaf",
        "parentId" : "4636cf8c-8508-483c-82ce-5b5ed30ca358",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "when the files exist in node_modules and src folder and --sourceroot is specified?\n",
        "createdAt" : "2016-11-03T15:53:35Z",
        "updatedAt" : "2016-11-11T21:10:48Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "9c36e8ee-aee0-43c5-94d2-f093498491b5",
        "parentId" : "4636cf8c-8508-483c-82ce-5b5ed30ca358",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "If `--sourceRoot` is specified, then the `\"sourceRoot\"` property in the source map is whatever you specified.\n",
        "createdAt" : "2016-11-03T19:40:05Z",
        "updatedAt" : "2016-11-11T21:10:48Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "c27e0b00-d7c0-4e6d-9946-6369fb3b4b52",
        "parentId" : "4636cf8c-8508-483c-82ce-5b5ed30ca358",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "yes but the paths are relative to common source directory and with this change the commonsourcedirectory would be different from what it used to be if say eg your sources are in ./src/ and ./node_modules/ which means the sources will be just relative to ./src/ instead or ./\n",
        "createdAt" : "2016-11-04T17:44:06Z",
        "updatedAt" : "2016-11-11T21:10:48Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "b055aabc-520c-4e47-8ff8-d2dbcc1e210f",
        "parentId" : "4636cf8c-8508-483c-82ce-5b5ed30ca358",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I think this is the section @sheetalkamat is referring to: https://github.com/Microsoft/TypeScript/blob/4a906143c62fcbfe113bf3f1cc607c488df47400/src/compiler/sourcemap.ts#L171-L180\n",
        "createdAt" : "2016-11-04T20:09:35Z",
        "updatedAt" : "2016-11-11T21:10:48Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "31c8d2cc-35c4-47da-a5d2-b16291bee5ce",
        "parentId" : "4636cf8c-8508-483c-82ce-5b5ed30ca358",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I wrote a test case. @sheetalkamat could you look at the baselines and tell me if they're what you would expect?\n",
        "createdAt" : "2016-11-07T15:15:59Z",
        "updatedAt" : "2016-11-11T21:10:48Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "91b0f241-ecd2-469d-83b9-5d6ad674b0c3",
        "parentId" : "4636cf8c-8508-483c-82ce-5b5ed30ca358",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think test case is ok, and realized that scenario I was talking about sourceroot and maproot works because  --out is only allowed with `amd` or `system` and hence there is no way to get bundled emit that includes modules from `node_modules` folder.\n",
        "createdAt" : "2016-11-10T17:25:37Z",
        "updatedAt" : "2016-11-11T21:10:48Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b65729e5b28a84bca02de7abdace4b4f0eaa2e11",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +432,436 @@\n        function getCommonSourceDirectory() {\n            if (commonSourceDirectory === undefined) {\n                const emittedFiles = filterSourceFilesInDirectory(files, isSourceFileFromExternalLibrary);\n                if (options.rootDir && checkSourceFilesBelongToPath(emittedFiles, options.rootDir)) {"
  },
  {
    "id" : "f6528194-5e7b-45bf-b872-96ed022d1057",
    "prId" : 11980,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11980#pullrequestreview-6881269",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de3bfb03-f9fe-4015-911a-7998751e1f4f",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "if 'noEmitOverwrittenFiles' is true, then it must be an inferred project, so the other options are never going to be set, right? What's the value in checking them? (Or as we adding 'noEmitOverwritenFiles' as a general config file option?)\n",
        "createdAt" : "2016-11-02T18:21:00Z",
        "updatedAt" : "2016-11-02T18:35:15Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "a5c432a4-a1d5-49d2-a0b7-c306c450380b",
        "parentId" : "de3bfb03-f9fe-4015-911a-7998751e1f4f",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "That is true for now, though the relationship might be loose. It is possible that in the future this option can be enabled for other projects, while this checking guarantees correctness without costing much\n",
        "createdAt" : "2016-11-02T18:31:35Z",
        "updatedAt" : "2016-11-02T18:35:15Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "c266897aaeacc2ee88cbfc500848b642bb55b3fe",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1538,1542 @@                    // Report error if the output overwrites input file\n                    if (filesByName.contains(emitFilePath)) {\n                        if (options.noEmitOverwritenFiles && !options.out && !options.outDir && !options.outFile) {\n                            blockEmittingOfFile(emitFileName);\n                        }"
  },
  {
    "id" : "338df6a4-4ac5-43b9-97f7-23abab83e518",
    "prId" : 11978,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11978#pullrequestreview-6728624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68079e96-48c8-4046-83a6-ae5aab05da49",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why are we using parent instead of node?\n",
        "createdAt" : "2016-11-01T21:13:40Z",
        "updatedAt" : "2016-11-10T17:41:18Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "26e49eaa-90a3-4f62-8c74-78086ed5dd06",
        "parentId" : "68079e96-48c8-4046-83a6-ae5aab05da49",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Here we are checking if the node is 'questiontoken' or 'type' of parent and hence the check.\n",
        "createdAt" : "2016-11-01T21:35:17Z",
        "updatedAt" : "2016-11-10T17:41:18Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "11f68f3b-01b5-450e-9f06-50816d46629a",
        "parentId" : "68079e96-48c8-4046-83a6-ae5aab05da49",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "but what was wrong with the previous pattern where we check parameter node, and then check it has a questiontoken set?\n",
        "createdAt" : "2016-11-01T23:30:09Z",
        "updatedAt" : "2016-11-10T17:41:18Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "c9e064a8-aa86-4623-9446-5eef5cf04115",
        "parentId" : "68079e96-48c8-4046-83a6-ae5aab05da49",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "There was no control over what to skip.. With this we visit all nodes except the nodes that aren't supported. (Eg. checkout how we use to return true when we found ? token, which would mean we wouldn't look into parameter children.. While that might be ok there it isn't if say for example we want to report error say on decorator of the class declaration and also verify say methods of class..) With this if we have say found typeNode of the variable declaration/function return type we don't go it that type node. But still visit other nodes of the variable declaration/function declaration which means we would be reporting other errors.\n",
        "createdAt" : "2016-11-01T23:54:28Z",
        "updatedAt" : "2016-11-10T17:41:18Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2eba10a25b85150075fd55348e2bd86d6271b54c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +918,922 @@                    // Otherwise break to visit each child\n\n                    switch (parent.kind) {\n                        case SyntaxKind.Parameter:\n                        case SyntaxKind.PropertyDeclaration:"
  },
  {
    "id" : "dd4c14d9-c212-49fb-ad9d-8813223c79fa",
    "prId" : 11848,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11848#pullrequestreview-6133590",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3060c64-0381-40cc-a026-00e9cab28c6f",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "consider changing it to:\n\n``` ts\n   if (isSourceFileJavaScript(sourceFile))\n            if (!sourceFile.additionalSyntacticDiagnostics) {\n                sourceFile.additionalSyntacticDiagnostics = getJavaScriptAdditionalSyntacticDiagnosticsForFile(sourceFile);\n            }\n        return concatenate(sourceFile.additionalSyntacticDiagnostics, sourceFile.parseDiagnostics);\n    }\n    return sourceFile.parseDiagnostics;\n```\n",
        "createdAt" : "2016-10-27T18:31:49Z",
        "updatedAt" : "2016-10-28T02:20:22Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "f9d65538-1745-4ded-8eb1-55aa51192450",
        "parentId" : "d3060c64-0381-40cc-a026-00e9cab28c6f",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "sounds good - done\n",
        "createdAt" : "2016-10-27T19:55:35Z",
        "updatedAt" : "2016-10-28T02:20:22Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      }
    ],
    "commit" : "05c2c9b67bdbdda06ca11d9b5c81604a6209caf8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +733,737 @@                }\n                return concatenate(sourceFile.additionalSyntacticDiagnostics, sourceFile.parseDiagnostics);\n            }\n            return sourceFile.parseDiagnostics;\n        }"
  },
  {
    "id" : "769cbc26-d611-4dc7-a98a-eff379ef1ce8",
    "prId" : 11704,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11704#pullrequestreview-5967925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c566c0be-1fc7-4de3-9349-9a887a72f132",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "`Extenstion.TS` is Zero so this will fail. probably want to check for undefined here.\n",
        "createdAt" : "2016-10-26T23:20:37Z",
        "updatedAt" : "2016-10-26T23:20:37Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "718d57ff3c0f2dc20cc30bed8dee271b6813801e",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +334,338 @@            resolveModuleNamesWorker = (moduleNames, containingFile) => host.resolveModuleNames(moduleNames, containingFile).map(resolved => {\n                // An older host may have omitted extension, in which case we should infer it from the file extension of resolvedFileName.\n                if (!resolved || resolved.extension) {\n                    return resolved;\n                }"
  },
  {
    "id" : "b164df52-3f96-40b0-958e-bc16960c4858",
    "prId" : 9750,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ecd353d-e557-4021-9d7e-cd08715d69e0",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Can you please clarify this interface? Thanks a lot!\n- It's a contract between which part of the system and which other part?\n- Who is meant to provide the implementation?\n- Do existing host scenarios need to do anything?\n- Maybe a use case please?\n\nSorry for being inquisitive, but there are a few other `*Host` interfaces at various levels of abstraction, it becomes harder to follow. Please give us a picture why `FormatDiagnosticsHost` is there, beyond self-evident 'to deal with diagnostic formatting'. I am sure others will benefit from the same, especially where TS is an embedded library.\n\nMany thanks!\n",
        "createdAt" : "2016-07-18T13:51:10Z",
        "updatedAt" : "2016-07-18T13:51:50Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "1c3b682f-a1a0-4432-8a71-f66888475771",
        "parentId" : "1ecd353d-e557-4021-9d7e-cd08715d69e0",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "It's a subset of CompilerHost/sys functionality - specifically the minimal subset needed to properly format diagnostics. Like how use use ModuleResolutionHost to indicate where we need the minimal functionality for resolving modules. Grouping the methods needed into a \"host\" like this is simply cleaner than passing in a collection of arguments or closures directly.\n",
        "createdAt" : "2016-07-18T16:39:38Z",
        "updatedAt" : "2016-07-18T16:39:38Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "35566fb5-eab4-4dca-b14d-046026d21327",
        "parentId" : "1ecd353d-e557-4021-9d7e-cd08715d69e0",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Thanks @weswigham!\n\nAlthough that sort of rephrases \"Format Diagnostics Host\" rather than answers any of the questions above ;-)\n",
        "createdAt" : "2016-07-18T17:44:49Z",
        "updatedAt" : "2016-07-18T17:44:49Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "2da684655762d4a51e8c33c4772059d1a689e9df",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +992,996 @@    }\n\n    export interface FormatDiagnosticsHost {\n        getCurrentDirectory(): string;\n        getCanonicalFileName(fileName: string): string;"
  },
  {
    "id" : "6f2732ba-8c4b-4d1e-884e-255b145ecd7a",
    "prId" : 9689,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f47fe4d8-7baf-4540-9f8a-bf3bf097be7d",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "using `sys.newLine` is incorrect here since it can be used in environments where `sys` is not defined. instead it should use `host.newLine()`\n",
        "createdAt" : "2016-07-13T21:50:56Z",
        "updatedAt" : "2016-07-13T21:50:56Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "4dec294d-d843-495b-a9aa-b4198220a995",
        "parentId" : "f47fe4d8-7baf-4540-9f8a-bf3bf097be7d",
        "authorId" : "d2b49226-f0ed-4c35-b531-fd404da7736a",
        "body" : "That was an existing bug in `tsc.ts`, then. Other code nearby uses `sys` as well. But I think your point is that this utility is likely useful in new contexts, not just current usage sites.\nI'll send another PR to change it?\n",
        "createdAt" : "2016-07-13T22:26:51Z",
        "updatedAt" : "2016-07-13T22:26:51Z",
        "lastEditedBy" : "d2b49226-f0ed-4c35-b531-fd404da7736a",
        "tags" : [
        ]
      },
      {
        "id" : "fe81c8a1-4a33-4fbe-b926-c35cdd589535",
        "parentId" : "f47fe4d8-7baf-4540-9f8a-bf3bf097be7d",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "`tsc.ts` is only ever used in environments where `sys` is defined (since it is the command line entry point for node's tsc.js and chakrahost's tsc.exe). `utilities`, however, is not.\n",
        "createdAt" : "2016-07-13T23:03:37Z",
        "updatedAt" : "2016-07-13T23:04:20Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "34e81f2805fd57616c65efa607dcdced47a0161e",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1010,1014 @@\n            const category = DiagnosticCategory[diagnostic.category].toLowerCase();\n            output += `${ category } TS${ diagnostic.code }: ${ flattenDiagnosticMessageText(diagnostic.messageText, sys.newLine) }${ sys.newLine }`;\n        }\n        return output;"
  },
  {
    "id" : "5cac6d51-a2cb-4fb5-b91c-1b783328db93",
    "prId" : 9646,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0aef64db-888a-4e93-9ddf-031590c45c2c",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "do we know that `candidate` is extensionless already? `tryAddingExtensions` looks like it blindly adds `ext` to the end of `candidate`\n",
        "createdAt" : "2016-08-15T17:00:15Z",
        "updatedAt" : "2016-08-19T13:14:37Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "73edec4f-c7d8-440c-8924-b03846cd736e",
        "parentId" : "0aef64db-888a-4e93-9ddf-031590c45c2c",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "That's right, so if someone imports \"foo.bar\" they can get \"foo.bar.ts\".\n",
        "createdAt" : "2016-08-15T17:47:17Z",
        "updatedAt" : "2016-08-19T13:14:37Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b452469419cfed00dc5b04f4d286c2c700ef2619",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +663,667 @@     */\n    function loadModuleFromFile(candidate: string, extensions: string[], failedLookupLocation: string[], onlyRecordFailures: boolean, state: ModuleResolutionState): string | undefined {\n        // First, try adding an extension. An import of \"foo\" could be matched by a file \"foo.ts\", or \"foo.js\" by \"foo.js.ts\"\n        const resolvedByAddingExtension = tryAddingExtensions(candidate, extensions, failedLookupLocation, onlyRecordFailures, state);\n        if (resolvedByAddingExtension) {"
  },
  {
    "id" : "61db39d8-645a-428d-82bc-8d6fc75dc069",
    "prId" : 9095,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d3b29cf-f334-4654-8db0-afe18caeedc2",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "ts.map(defaultTypeRoots\n",
        "createdAt" : "2016-06-13T21:58:53Z",
        "updatedAt" : "2016-06-13T22:02:58Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "90b319fc246d53604f54c9b7d003ab2dfb741ec6",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +181,185 @@    function getEffectiveTypeRoots(options: CompilerOptions, host: ModuleResolutionHost) {\n        return options.typeRoots ||\n            defaultTypeRoots.map(d => combinePaths(options.configFilePath ? getDirectoryPath(options.configFilePath) : host.getCurrentDirectory(), d));\n    }\n"
  },
  {
    "id" : "b71623fa-2cd4-42c6-9d51-7f1e91ff8d76",
    "prId" : 8939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a262e015-3e89-4946-b3ca-b2c88d87c827",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "`/*@internal*/`\n",
        "createdAt" : "2016-06-02T17:21:52Z",
        "updatedAt" : "2016-06-09T18:34:04Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "559b49baa9380bfd77681aa466444e1d9c37d5cf",
    "line" : null,
    "diffHunk" : "@@ -1,1 +97,101 @@\n    /* @internal */\n    export function hasZeroOrOneAsteriskCharacter(str: string): boolean {\n        let seenAsterisk = false;\n        for (let i = 0; i < str.length; i++) {"
  },
  {
    "id" : "02490a75-a943-4be5-acdd-e664d5253243",
    "prId" : 8895,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "667c7006-d3b9-4a69-a6ec-05030791d182",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Newline above.\n",
        "createdAt" : "2016-05-31T19:11:25Z",
        "updatedAt" : "2016-06-06T19:28:47Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "704f9874e058da4bad7bcb003710002c410570fd",
    "line" : null,
    "diffHunk" : "@@ -1,1 +636,640 @@    }\n\n    function loadModuleFromFileWorker(candidate: string, extensions: string[], failedLookupLocation: string[], onlyRecordFailures: boolean, state: ModuleResolutionState): string {\n        if (!onlyRecordFailures) {\n            // check if containing folder exists - if it doesn't then just record failures for all supported extensions without disk probing"
  },
  {
    "id" : "e9db0e48-abbe-48f4-b39d-3c9f0783b69c",
    "prId" : 8670,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75e2f3f4-37e6-46db-ae17-ccb269106d07",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Why not  just add `types` and `node_modules\\@types` in `parseJsonConfigFileContent.getFileNames`?\n",
        "createdAt" : "2016-05-24T00:39:20Z",
        "updatedAt" : "2016-05-24T18:31:18Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "31e9aefb-3b6e-40a9-929c-79fb536753d0",
        "parentId" : "75e2f3f4-37e6-46db-ae17-ccb269106d07",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Is that called even if there's no config file?\n",
        "createdAt" : "2016-05-24T00:44:00Z",
        "updatedAt" : "2016-05-24T18:31:18Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "8f74ba50-411b-4f4c-a8f6-c38cd84c60df",
        "parentId" : "75e2f3f4-37e6-46db-ae17-ccb269106d07",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "No, but why do we need to do this if there is no confit file?\n",
        "createdAt" : "2016-05-24T01:24:33Z",
        "updatedAt" : "2016-05-24T18:31:18Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "c57c929a-5a3b-4f07-b39e-f9d1424f1318",
        "parentId" : "75e2f3f4-37e6-46db-ae17-ccb269106d07",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "I think we want this to be useful even if you're specifying options on the commandline (or maybe I'm misunderstanding what you're getting at?)\n",
        "createdAt" : "2016-05-24T02:00:21Z",
        "updatedAt" : "2016-05-24T18:31:18Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b133489a1c118296e5b3fe356bef4ef926c3356",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +1045,1049 @@                const resolutions = resolveTypeReferenceDirectiveNamesWorker(typeReferences, /*containingFile*/ undefined);\n                for (let i = 0; i < typeReferences.length; i++) {\n                    processTypeReferenceDirective(typeReferences[i], resolutions[i]);\n                }\n            }"
  },
  {
    "id" : "163c4704-9564-4032-8429-1a40a589cbb9",
    "prId" : 8223,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0241236-4a03-4c7e-83f6-33fceb1e0806",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "option.module could be `none`. we should not error in this case.\n",
        "createdAt" : "2016-04-20T19:29:46Z",
        "updatedAt" : "2016-04-20T19:29:46Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "75b23f5b-334c-4f40-8152-0ce9d31ec10f",
        "parentId" : "b0241236-4a03-4c7e-83f6-33fceb1e0806",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "@mhegazy, really? I think we should.. because --out works with only amd and system.. Nothing else.\n",
        "createdAt" : "2016-04-20T20:39:31Z",
        "updatedAt" : "2016-04-20T20:39:31Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "56c04eb6-718b-4e7e-8a37-ed374e80b5b5",
        "parentId" : "b0241236-4a03-4c7e-83f6-33fceb1e0806",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "If you could make it an elaboration I would agree, but right now you end up with two separate error messages that could seem confusing if reported at the same time\n",
        "createdAt" : "2016-04-20T20:44:02Z",
        "updatedAt" : "2016-04-20T20:44:21Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "9d84cce9-ce8a-4885-83d4-279e66b5ebbc",
        "parentId" : "b0241236-4a03-4c7e-83f6-33fceb1e0806",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "works for system, amd, none\nerrors for node, umd, es6\n\nif no module is specified, then only error if we have an external module specifier.\n",
        "createdAt" : "2016-04-20T21:01:54Z",
        "updatedAt" : "2016-04-20T21:02:40Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "99a31c2f-6107-45c9-9ef4-7051dcb772ad",
        "parentId" : "b0241236-4a03-4c7e-83f6-33fceb1e0806",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "@mhegazy, That's what I am doing though..  (options.module || firstExternalModuleSourceFile) does exactly same thing. may be I should reword my comment as it seems unclear\n",
        "createdAt" : "2016-04-20T21:43:50Z",
        "updatedAt" : "2016-04-20T21:43:50Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "1ccf1bf3-9bfc-4c58-99c3-09d902997a3a",
        "parentId" : "b0241236-4a03-4c7e-83f6-33fceb1e0806",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "aaah.. `none` is `0`. sorry. for some reason i thought `none` was truthy.\n",
        "createdAt" : "2016-04-20T21:47:07Z",
        "updatedAt" : "2016-04-20T21:47:07Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "39f7e394-40ef-4ea7-b6f2-18cd2afcf277",
        "parentId" : "b0241236-4a03-4c7e-83f6-33fceb1e0806",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : ":+1: \n",
        "createdAt" : "2016-04-20T21:47:13Z",
        "updatedAt" : "2016-04-20T21:47:13Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "1814569cc5d1c7f8b8617124d2659085ccff088f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2080,2084 @@            // or if there is external module in compilation which defaults to commonjs\n            const emitModuleKind = getEmitModuleKind(options);\n            if (outFile && (options.module || firstExternalModuleSourceFile) && !(emitModuleKind === ModuleKind.AMD || emitModuleKind === ModuleKind.System)) {\n                programDiagnostics.add(createCompilerDiagnostic(Diagnostics.Only_amd_and_system_modules_are_supported_alongside_0, options.out ? \"out\" : \"outFile\"));\n            }"
  },
  {
    "id" : "f859496f-cf13-4d5a-9406-26af15337e04",
    "prId" : 7946,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b8b610c-5ec7-4526-841a-13429856daa5",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "can you wrap it into lambda so `this` won't be torn out?\n",
        "createdAt" : "2016-04-08T00:01:51Z",
        "updatedAt" : "2016-04-08T00:01:51Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "018a0d1d3a47b2e75a07cb079fee6a287612f0a8",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +646,650 @@            trace: (s: string) => sys.write(s + newLine),\n            directoryExists: directoryName => sys.directoryExists(directoryName),\n            getEnvironmentVariable: sys.getEnvironmentVariable\n        };\n    }"
  },
  {
    "id" : "83fa5da5-d868-40b8-aa37-baf045edb209",
    "prId" : 7883,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4731889b-5f76-4cab-a4b8-844f54964fb4",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why are there two places where we check `noEmit`? One in `program.ts` and one in `emitter.ts`?\n",
        "createdAt" : "2016-04-06T20:40:30Z",
        "updatedAt" : "2016-04-07T23:48:05Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "e587ab5c-14a1-4188-9b20-36caaf65d734",
        "parentId" : "4731889b-5f76-4cab-a4b8-844f54964fb4",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "@paulvanbrenk says it could be the language service (i.e. Compile-on-Save)\n",
        "createdAt" : "2016-04-06T20:40:48Z",
        "updatedAt" : "2016-04-07T23:48:05Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "097adc6b3a5150d42fc33646ee84552036b9455e",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1015,1019 @@            let declarationDiagnostics: Diagnostic[] = [];\n\n            if (options.noEmit) {\n                return { diagnostics: declarationDiagnostics, sourceMaps: undefined, emittedFiles: undefined, emitSkipped: true };\n            }"
  },
  {
    "id" : "02b2a7e9-42ee-4eec-af1a-70acb2ab1c7b",
    "prId" : 7775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6ab4407-88e1-4855-8b1a-bb99b9b19c1f",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Is it safe to remove this now?\n",
        "createdAt" : "2016-04-02T00:46:48Z",
        "updatedAt" : "2016-04-08T21:38:51Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "87236fac-4a47-4b09-9ed9-fbda48af33e3",
        "parentId" : "b6ab4407-88e1-4855-8b1a-bb99b9b19c1f",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "cast to `Path` - yes, I'll drop it. As for `defaultLibrarySearchPaths` - no, they are still used [here](https://github.com/Microsoft/TypeScript/pull/7775/files#diff-08a3cc4f1f9a51dbb468c2810f5229d3R239)\n",
        "createdAt" : "2016-04-02T03:42:02Z",
        "updatedAt" : "2016-04-08T21:38:51Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5e7d47782854fb9eefe1dd3c9d42705618d29d3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +15,19 @@    const defaultLibrarySearchPaths = [\n        \"types/\",\n        \"node_modules/\",\n        \"node_modules/@types/\",\n    ];"
  },
  {
    "id" : "3fbee87b-3c6e-4911-9217-646aff0f1bb6",
    "prId" : 7775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07406280-c12d-4555-a353-1269eb96a4c9",
        "parentId" : null,
        "authorId" : "d9b42c7f-d20f-46d6-8ab8-0f662952c7ac",
        "body" : "This line breaks the optional nature of the host argument\n",
        "createdAt" : "2016-04-11T02:10:17Z",
        "updatedAt" : "2016-04-11T02:10:17Z",
        "lastEditedBy" : "d9b42c7f-d20f-46d6-8ab8-0f662952c7ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5e7d47782854fb9eefe1dd3c9d42705618d29d3",
    "line" : 420,
    "diffHunk" : "@@ -1,1 +962,966 @@        let skipDefaultLib = options.noLib;\n        const programDiagnostics = createDiagnosticCollection();\n        const currentDirectory = host.getCurrentDirectory();\n        const supportedExtensions = getSupportedExtensions(options);\n"
  },
  {
    "id" : "28c12ea8-46fe-4c53-aaae-ffff33267a41",
    "prId" : 7409,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee69d5b6-8089-4fa0-889c-3f5c129a6f7f",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "&& !options.noEmit\n",
        "createdAt" : "2016-03-12T19:57:43Z",
        "updatedAt" : "2016-03-12T20:17:08Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "e576ffdd-f352-4f90-ac11-bc9fe923facc",
        "parentId" : "ee69d5b6-8089-4fa0-889c-3f5c129a6f7f",
        "authorId" : "13ac2fcb-8f92-4c8d-a80b-590adca7a826",
        "body" : "@mhegazy That would reflect the old behaviour. But I gave this a thought and I chose to do it this way because:\n\n`allowJs` is incompatible with `declaration`. Then why does the compiler try to hide the error when `noEmit` is true? Maybe I should add `&& !options.noEmit` and let this be discussed somewhere else.\n",
        "createdAt" : "2016-03-12T20:10:52Z",
        "updatedAt" : "2016-03-12T20:17:08Z",
        "lastEditedBy" : "13ac2fcb-8f92-4c8d-a80b-590adca7a826",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e35cdd52cda9156d642a5a1de43c97ad6b99061",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1748,1752 @@\n            if (!options.noEmit && options.allowJs && options.declaration) {\n                programDiagnostics.add(createCompilerDiagnostic(Diagnostics.Option_0_cannot_be_specified_with_option_1, \"allowJs\", \"declaration\"));\n            }\n"
  },
  {
    "id" : "fdfdff47-7ed1-4671-bfc2-7c1239fcf0e3",
    "prId" : 7264,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50c6d003-2289-4625-a478-e105b98927a1",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "A little bit of documentation on this would be helpful. From a cursory glance, it doesn't seem obvious that this is differentiated from an import.\n\nAlternatively, make an enum.\n",
        "createdAt" : "2016-03-01T07:45:03Z",
        "updatedAt" : "2016-03-10T18:12:05Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "043b3380248509193dae8fe49a1c908d158869ed",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1380,1384 @@          * 'isReference' indicates whether the file was brought in via a reference directive (rather than an import declaration)\n          */\n        function processSourceFile(fileName: string, isDefaultLib: boolean, isReference: boolean, refFile?: SourceFile, refPos?: number, refEnd?: number) {\n            let diagnosticArgument: string[];\n            let diagnostic: DiagnosticMessage;"
  },
  {
    "id" : "67a9e977-a3e8-4b72-b0da-5b2510e3f4eb",
    "prId" : 7228,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "661f8839-72c2-433c-92f1-9f1f144bad38",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i would add a comment here.\n",
        "createdAt" : "2016-02-24T22:28:01Z",
        "updatedAt" : "2016-02-24T22:30:26Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "821ff79c-4bf5-4ebc-8679-57e034b1aba6",
        "parentId" : "661f8839-72c2-433c-92f1-9f1f144bad38",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : ":white_check_mark: \n",
        "createdAt" : "2016-02-24T22:30:34Z",
        "updatedAt" : "2016-02-24T22:30:34Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0900434c9ae74e35cee7e3ebe03b2e0cdb4ce41",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1033,1037 @@            const options = program.getCompilerOptions();\n            // collect diagnostics from the program only once if either no source file was specified or out/outFile is set (bundled emit)\n            if (!sourceFile || options.out || options.outFile) {\n                return getDeclarationDiagnosticsWorker(sourceFile, cancellationToken);\n            }"
  },
  {
    "id" : "4a357a13-b9dc-489e-b138-e13385b184a1",
    "prId" : 6937,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2740502c-6f14-420b-8c4d-9889caa4d2c6",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Mark this `/* @internal */`\n",
        "createdAt" : "2016-04-03T20:28:22Z",
        "updatedAt" : "2016-04-03T20:28:33Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "6b05845b-4df9-49fa-aaaf-eb5658e30323",
        "parentId" : "2740502c-6f14-420b-8c4d-9889caa4d2c6",
        "authorId" : "5f23d1d3-1b0e-4e58-a00d-5fbafb401943",
        "body" : "@DanielRosenwasser I am confused, it's not even exported, why does it need `/** @internal */`?\n",
        "createdAt" : "2016-04-04T04:33:30Z",
        "updatedAt" : "2016-04-04T07:13:26Z",
        "lastEditedBy" : "5f23d1d3-1b0e-4e58-a00d-5fbafb401943",
        "tags" : [
        ]
      },
      {
        "id" : "95018eaf-5d5e-426a-9395-76bbfd3e1a84",
        "parentId" : "2740502c-6f14-420b-8c4d-9889caa4d2c6",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Whoops! Misread the code, forgive me. I was taking a quick glance at this PR again since it's been a bit.\n",
        "createdAt" : "2016-04-04T07:07:42Z",
        "updatedAt" : "2016-04-04T07:07:42Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4813052922da694a34474d884f0f633482fd588",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +560,564 @@    };\n\n    interface OutputFingerprint {\n        hash: string;\n        byteOrderMark: boolean;"
  },
  {
    "id" : "37d380fe-3f01-4c0a-b0ec-b09668ac4410",
    "prId" : 6378,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa148fb8-3da3-4ae0-b418-e4d6d86fb4cf",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i would call it directoryExists.\n",
        "createdAt" : "2016-01-06T21:06:33Z",
        "updatedAt" : "2016-01-06T21:06:33Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "36af815bbabfc9d109336543ebb0fd4d85c67a12",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +71,75 @@\n    /* @internal */\n    export function directoryProbablyExists(directoryName: string, host: { directoryExists?: (directoryName: string) => boolean } ): boolean {\n        // if host does not support 'directoryExists' assume that directory will exist\n        return !host.directoryExists || host.directoryExists(directoryName);"
  },
  {
    "id" : "28458485-64d3-49b1-864c-59dcb83b1a77",
    "prId" : 6378,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "316a6db5-5f13-4b3a-aac3-a829b978e870",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i would rather call this `containingDirectoryDoesNotExist` \n",
        "createdAt" : "2016-01-06T21:08:35Z",
        "updatedAt" : "2016-01-06T21:08:35Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "36af815bbabfc9d109336543ebb0fd4d85c67a12",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +80,84 @@     * in cases when we know upfront that all load attempts will fail (because containing folder does not exists) however we still need to record all failed lookup locations. \n     */\n    function loadNodeModuleFromFile(extensions: string[], candidate: string, failedLookupLocation: string[], onlyRecordFailures: boolean, host: ModuleResolutionHost): string {\n        return forEach(extensions, tryLoad);\n"
  },
  {
    "id" : "fcd98f52-c935-4653-b249-447e3aab3848",
    "prId" : 6213,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd164394-dbcf-424e-9ea4-030bbf441067",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I think you mean \"if the ambient module declaration is in a module file, then it is a module augmentation\"\n",
        "createdAt" : "2015-12-23T23:36:46Z",
        "updatedAt" : "2016-01-15T01:12:49Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "36c489c8dbea802c85a188670e163304d75da8fe",
    "line" : null,
    "diffHunk" : "@@ -1,1 +969,973 @@                            // Ambient module declarations can be interpreted as augmentations for some existing external modules.\n                            // This will happen in two cases:\n                            // - if current file is external module then module augmentation is a ambient module declaration defined in the top level scope\n                            // - if current file is not external module then module augmentation is an ambient module declaration with non-relative module name\n                            //   immediately nested in top level ambient module declaration ."
  },
  {
    "id" : "917b9522-1b86-4e7c-b2f9-1b80a787e727",
    "prId" : 6213,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4762d202-6c5c-4b78-b50d-2f2d591cb76a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "\"if the current file is not a module (e.g. an ambient declaration file), then if the module name is non-relative, the declaration is a module augmentation\"\n",
        "createdAt" : "2015-12-23T23:39:38Z",
        "updatedAt" : "2016-01-15T01:12:49Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "36c489c8dbea802c85a188670e163304d75da8fe",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +970,974 @@                            // This will happen in two cases:\n                            // - if current file is external module then module augmentation is a ambient module declaration defined in the top level scope\n                            // - if current file is not external module then module augmentation is an ambient module declaration with non-relative module name\n                            //   immediately nested in top level ambient module declaration .\n                            if (isExternalModuleFile || (inAmbientModule && !isExternalModuleNameRelative(moduleName.text))) {"
  },
  {
    "id" : "4df4274f-30ba-49d4-a379-f09db91c3a90",
    "prId" : 5728,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "468262c0-4bb6-42b5-8846-d84c220d950a",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Just to clarify, the `moduleName.length >= prefix.length + suffix.length` is more for optimization? because I think below caz should catch the case when `moduleName.length < prefix.length + suffix.length`? as `startsWith(moduleName, prefix)` will be false?\n",
        "createdAt" : "2015-11-24T01:03:20Z",
        "updatedAt" : "2016-01-27T05:38:22Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "ea21898e-2cda-453c-89ca-99ecf30ecd29",
        "parentId" : "468262c0-4bb6-42b5-8846-d84c220d950a",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "no, this is necessary for cases when prefix and suffix overlap. I.e. when pattern is `aa*ab` and string is `aab`\n",
        "createdAt" : "2015-11-25T00:09:20Z",
        "updatedAt" : "2016-01-27T05:38:22Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "adacad326a3d023f82f076b2aa5f92334610226b",
    "line" : 287,
    "diffHunk" : "@@ -1,1 +315,319 @@                    const prefix = pattern.substr(0, indexOfStar);\n                    const suffix = pattern.substr(indexOfStar + 1);\n                    if (moduleName.length >= prefix.length + suffix.length &&\n                        startsWith(moduleName, prefix) &&\n                        endsWith(moduleName, suffix)) {"
  },
  {
    "id" : "b8dce432-a731-4b55-a240-a6873de23991",
    "prId" : 5604,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c8d3f91-0414-4c7f-a006-3ebd0e728764",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "1.7.3\n",
        "createdAt" : "2015-11-11T01:41:14Z",
        "updatedAt" : "2015-11-11T01:41:14Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ad4de151884e8b144da05c5d33445feb6c66b73",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +13,17 @@    let emptyArray: any[] = [];\n\n    export const version = \"1.7.4\";\n\n    export function findConfigFile(searchPath: string): string {"
  },
  {
    "id" : "93de85db-5200-4a61-bad6-982342fbe53a",
    "prId" : 5590,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a705d050-0cf8-4869-9c35-eab73c14bf4b",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "`isRootedDiskPath` ?\n",
        "createdAt" : "2015-11-17T22:27:07Z",
        "updatedAt" : "2015-11-17T22:27:07Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "752854d7-9a09-49c4-8d8a-cf325b638abf",
        "parentId" : "a705d050-0cf8-4869-9c35-eab73c14bf4b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Aye, that works.\n",
        "createdAt" : "2015-11-17T22:37:15Z",
        "updatedAt" : "2015-11-17T22:37:15Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "52d95473-1dbc-4c20-be79-ad9d337f2084",
        "parentId" : "a705d050-0cf8-4869-9c35-eab73c14bf4b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Scratch that, no - we're saying `> 1` because we want to exclude paths which start with `/`, which `isRootedDiskPath` would include.\n",
        "createdAt" : "2015-11-17T22:43:53Z",
        "updatedAt" : "2015-11-17T22:43:53Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "c06c2d1b-a967-4ac3-8c6d-3a2677321fba",
        "parentId" : "a705d050-0cf8-4869-9c35-eab73c14bf4b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Since if the root is a filesystem rooted at `/`, we can just use `/` as the common dir.\n",
        "createdAt" : "2015-11-17T22:44:58Z",
        "updatedAt" : "2015-11-17T22:44:58Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "9950f85a-d706-4699-9749-4cdda603c7d8",
        "parentId" : "a705d050-0cf8-4869-9c35-eab73c14bf4b",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "but apparently we cannot do this since `commonSourceDirectory` is \"\". Just trying to understand in what cases using `isRootedDiskPath` will yield incorrect results.\n",
        "createdAt" : "2015-11-17T23:38:20Z",
        "updatedAt" : "2015-11-17T23:38:20Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "ef30fc22-fd5e-469a-81f8-1bc848cdd43e",
        "parentId" : "a705d050-0cf8-4869-9c35-eab73c14bf4b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Correct - in effect, we want to allow `\"\"` as a valid common source directory provided either all paths are relative or all paths are rooted to a unix-style drive (with a root of `/`), otherwise `\"\"` is the return value when there is no available common path and we should error in its presence.\n",
        "createdAt" : "2015-11-17T23:46:21Z",
        "updatedAt" : "2015-11-17T23:46:21Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "2e85abd2-e651-4ff1-b470-daf8e3b424e4",
        "parentId" : "a705d050-0cf8-4869-9c35-eab73c14bf4b",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "discussed offline\n",
        "createdAt" : "2015-11-18T00:05:07Z",
        "updatedAt" : "2015-11-18T00:05:07Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "a989595044bf942cef77360e7225622f464e4a6b",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +1066,1070 @@                    commonSourceDirectory = computeCommonSourceDirectory(files);\n                    // If we failed to find a good common directory, but outDir is specified and at least one of our files is on a windows drive/URL/other resource, add a failure\n                    if (options.outDir && commonSourceDirectory === \"\" && forEach(files, file => getRootLength(file.fileName) > 1)) {\n                            programDiagnostics.add(createCompilerDiagnostic(Diagnostics.Cannot_find_the_common_subdirectory_path_for_the_input_files));\n                    }"
  },
  {
    "id" : "ccecbd49-c017-4084-b8a7-30c38f1a0bd7",
    "prId" : 5471,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dce8d1c0-2652-469d-8bde-0d25632e8960",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "add a comment here explaining what we are doing.\n",
        "createdAt" : "2015-11-02T20:59:40Z",
        "updatedAt" : "2015-11-18T19:27:06Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "a19307d533d646d3366f7d4a512718460e065d52",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1283,1287 @@\n            // If the emit is enabled make sure that every output file is unique and not overwriting any of the input files\n            if (!options.noEmit) {\n                const emitHost = getEmitHost();\n                const emitFilesSeen = createFileMap<boolean>(!host.useCaseSensitiveFileNames() ? key => key.toLocaleLowerCase() : undefined);"
  },
  {
    "id" : "abe6c599-fa8c-45a8-b07d-e0ea9620cda0",
    "prId" : 5275,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40b5deec-3888-46ec-9272-b0a0b0da714d",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why do not we do this all the time, instead of two different checks, something like:\n\n``` ts\nlet checkFileCasing = host.useCaseSensitiveFileNames() || options.forceConsistentCasingInFileNames;\n if (checkFileCasing) { \n    const existingFile = filesByNameIgnoreCase.get(normalizedAbsolutePath);\n    if (existingFile) {\n        reportFileNamesDifferOnlyInCasingError(fileName, existingFile.fileName, refFile, refPos, refEnd);\n    }\n    else {\n        filesByNameIgnoreCase.set(normalizedAbsolutePath, file);\n    }\n}\n```\n",
        "createdAt" : "2015-10-26T19:55:11Z",
        "updatedAt" : "2015-10-27T20:31:46Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "fe962623-7310-44b5-958d-34befdb5d6ca",
        "parentId" : "40b5deec-3888-46ec-9272-b0a0b0da714d",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "discussed offline\n",
        "createdAt" : "2015-10-27T17:51:27Z",
        "updatedAt" : "2015-10-27T20:31:46Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d4aa7d9c0a3fbe5c731e0b4288839538541e5d",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +812,816 @@            filesByName.set(normalizedAbsolutePath, file);\n            if (file) {\n                if (host.useCaseSensitiveFileNames()) {\n                    // for case-sensitive file systems check if we've already seen some file with similar filename ignoring case\n                    const existingFile = filesByNameIgnoreCase.get(normalizedAbsolutePath);"
  },
  {
    "id" : "50003e84-949c-4efb-a4b1-5f3dd56ebdca",
    "prId" : 4352,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d70acb06-5ba8-42ad-835a-551dc94fb76e",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Add a comment to explain what's going on here.\n",
        "createdAt" : "2015-08-18T21:32:46Z",
        "updatedAt" : "2015-08-24T22:53:54Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab6fe49d56b948054bf6ec4bfd885ad77e335f40",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +137,141 @@            \n            let parentPath = getDirectoryPath(directory);\n            if (parentPath === directory) {\n                break;\n            }"
  },
  {
    "id" : "e359c310-c91a-4f80-a7d9-089d303fd104",
    "prId" : 4352,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d117232e-13d2-4c38-84ef-a08d90977045",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Should there be a check and give out compilerOptions error if the baseUrl is not defined?\n",
        "createdAt" : "2015-08-19T20:55:00Z",
        "updatedAt" : "2015-08-24T22:53:54Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "09601d37-f254-45da-bce3-be13cf847aa1",
        "parentId" : "d117232e-13d2-4c38-84ef-a08d90977045",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "this check will be in `verifyCompilerOptions` - it is not there yet\n",
        "createdAt" : "2015-08-19T23:52:38Z",
        "updatedAt" : "2015-08-24T22:53:54Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab6fe49d56b948054bf6ec4bfd885ad77e335f40",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +148,152 @@    \n    export function baseUrlModuleNameResolver(moduleName: string, containingFile: string, baseUrl: string, host: ModuleResolutionHost): ResolvedModule {\n        Debug.assert(baseUrl !== undefined);\n        \n        let normalizedModuleName = normalizeSlashes(moduleName);         "
  },
  {
    "id" : "917fe7b4-e547-4862-8f23-95d0ac3b53b8",
    "prId" : 4352,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "336862f2-dd6b-4e51-91af-41c13579a598",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Is this used to give out any error or it is mainly use for testing?\n",
        "createdAt" : "2015-08-19T21:01:05Z",
        "updatedAt" : "2015-08-24T22:53:54Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "96cb3676-d893-4fe0-a6e6-8fd1b4997240",
        "parentId" : "336862f2-dd6b-4e51-91af-41c13579a598",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "this is used as the part of output\n",
        "createdAt" : "2015-08-19T23:51:30Z",
        "updatedAt" : "2015-08-24T22:53:54Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab6fe49d56b948054bf6ec4bfd885ad77e335f40",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +51,55 @@\n        if (getRootLength(moduleName) !== 0 || nameStartsWithDotSlashOrDotDotSlash(moduleName)) {\n            let failedLookupLocations: string[] = [];\n            let candidate = normalizePath(combinePaths(containingDirectory, moduleName));\n            let resolvedFileName = loadNodeModuleFromFile(candidate, /* loadOnlyDts */ false, failedLookupLocations, host);"
  },
  {
    "id" : "83fbf0b4-bb72-4cb0-80da-1de5249308b1",
    "prId" : 4290,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7ee43d8-d963-483a-a305-b12c1b58e6a1",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Make a helper function for this\n",
        "createdAt" : "2015-08-14T22:13:22Z",
        "updatedAt" : "2015-08-14T22:13:22Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "109dda5f-0392-482b-99d8-236e956c4c21",
        "parentId" : "a7ee43d8-d963-483a-a305-b12c1b58e6a1",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i thought about that, but this seems easier to read and a reminder why we are doing it this way.\n",
        "createdAt" : "2015-08-17T20:40:57Z",
        "updatedAt" : "2015-08-17T20:40:57Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "1749329655f9b9b3bf12426ee717d1557f9c2a7b",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +468,472 @@                    let sourceFileName = useAbsolutePath ? getNormalizedAbsolutePath(file.fileName, host.getCurrentDirectory()) : file.fileName;\n                    if (canonicalName !== sourceFileName) {\n                        if (refFile !== undefined && refPos !== undefined && refEnd !== undefined) {\n                            diagnostics.add(createFileDiagnostic(refFile, refPos, refEnd - refPos,\n                                Diagnostics.File_name_0_differs_from_already_included_file_name_1_only_in_casing, fileName, sourceFileName));"
  },
  {
    "id" : "a307725a-2e5c-4ffb-bb77-0c3ebd0f7de7",
    "prId" : 4154,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fca2d9a-6442-419c-8a25-deb8f79b9f64",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "also add `options.jsx`\n",
        "createdAt" : "2015-08-05T00:28:23Z",
        "updatedAt" : "2015-08-17T21:42:39Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "e6468083-715f-4c22-a9d6-a3f61d6bb075",
        "parentId" : "1fca2d9a-6442-419c-8a25-deb8f79b9f64",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "done\n",
        "createdAt" : "2015-08-05T01:11:40Z",
        "updatedAt" : "2015-08-17T21:42:39Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6b735c0f2787a2de3564c7a6b6ae47c51aed231",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +244,248 @@            if ((oldOptions.module !== options.module) || \n                (oldOptions.noResolve !== options.noResolve) || \n                (oldOptions.target !== options.target) || \n                (oldOptions.noLib !== options.noLib) ||\n                (oldOptions.jsx !== options.jsx)) {"
  },
  {
    "id" : "d8e223ba-ba1d-4e0d-a8cc-84d293523659",
    "prId" : 3561,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38757ee5-18d8-4214-a01a-1e287f530d98",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Why do we need to refresh the noDiagnosticsTypeChecker too? I thought only the diagnosticsProducingTypeChecker can be cancelled.\n",
        "createdAt" : "2015-06-29T21:42:35Z",
        "updatedAt" : "2015-07-06T22:31:26Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "0a61cc16-ba3c-4e77-885c-d1ee290ceb85",
        "parentId" : "38757ee5-18d8-4214-a01a-1e287f530d98",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I will add a comment explaining.\n",
        "createdAt" : "2015-07-06T22:26:39Z",
        "updatedAt" : "2015-07-06T22:31:26Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a26cd21f99771258f257d183bdfc389e780614c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +321,325 @@                    // program instance) will get thrown away anyways.  So trying to keep one of \n                    // these type checkers alive doesn't serve much purpose.\n                    noDiagnosticsTypeChecker = undefined;\n                    diagnosticsProducingTypeChecker = undefined;\n                }"
  },
  {
    "id" : "6d75b53c-cba6-4be0-b365-249e0e9dc986",
    "prId" : 3274,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "847019f4-22ba-4131-929a-96663b4ec228",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Is there a reason we can't just call `getGlobalDiagnostics`? Does it cache?\n",
        "createdAt" : "2015-05-27T03:25:44Z",
        "updatedAt" : "2015-06-03T01:04:50Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "eea2f8a5-514c-4ba5-b1fb-2facd28d1185",
        "parentId" : "847019f4-22ba-4131-929a-96663b4ec228",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "It also gets the checker global diagnostics like cannot find Array. I did not want to pass a flag to it, do adding the new function seemed more appealing.\n",
        "createdAt" : "2015-05-27T04:43:59Z",
        "updatedAt" : "2015-06-03T01:04:50Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "6902b050ca9cb94ba494d0900ad48a0780850ef4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +289,293 @@        function getCompilerOptionsDiagnostics(): Diagnostic[] {\n            let allDiagnostics: Diagnostic[] = [];\n            addRange(allDiagnostics, diagnostics.getGlobalDiagnostics());\n            return sortAndDeduplicateDiagnostics(allDiagnostics);\n        }"
  },
  {
    "id" : "506390d6-d1ce-4eef-911c-bc5148202bb1",
    "prId" : 3094,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cd6dc16-7f5e-4066-856f-2ccf17845e84",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "nice catch.  I'm wondering if there's a way to make this less error prone (though nothing is coming to mind).  To some extent, what is weird is a model where a source file is passed at all to emit when you have -out.  I mean, what does it mean to say \"emit foo.ts\" or \"emit bar.ts\" when you have \"--out\"?  There's no effective difference, and it probably makes more sense for this to not be supported, or for the caller to have to say \"emit all\".  (i'm just speaking out loud.  i don't have an actual proposal).\n",
        "createdAt" : "2015-05-08T21:03:55Z",
        "updatedAt" : "2015-05-08T21:34:45Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "0401553810be4f08d3ea148effc755363f0fff1a",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +225,229 @@            // files need to be type checked. And the way to specify that all files need to be type\n            // checked is to not pass the file to getEmitResolver.\n            let emitResolver = getDiagnosticsProducingTypeChecker().getEmitResolver(options.out ? undefined : sourceFile);\n\n            let start = new Date().getTime();"
  },
  {
    "id" : "25916a57-023e-477b-9210-3ea16a64f8b7",
    "prId" : 2772,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93d6bbaa-cfff-47e7-8261-9214032e7d7f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I think you meant `sourceFiles` here not `files`.\n",
        "createdAt" : "2015-04-16T21:04:15Z",
        "updatedAt" : "2015-04-20T21:23:52Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "181fd307-f420-4dfa-bf67-110a438bfd71",
        "parentId" : "93d6bbaa-cfff-47e7-8261-9214032e7d7f",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Also use a for..of unless you're really hesitant to use a label.\n",
        "createdAt" : "2015-04-16T21:04:36Z",
        "updatedAt" : "2015-04-20T21:23:52Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed2e105f178a2941b56239a7f5ac57f1a37b8e3b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +459,463 @@            let commonPathComponents: string[];\n            let currentDirectory = host.getCurrentDirectory();\n            forEach(files, sourceFile => {\n                // Each file contributes into common source file path\n                if (isDeclarationFile(sourceFile)) {"
  },
  {
    "id" : "34254eab-dd88-4910-8ad5-2ed207a08a2f",
    "prId" : 2772,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae3f74cc-064f-49ad-bf16-a865cff5ec39",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "```\n                           ~~~~~~~~~~~~~~~~~~~~~\nWarning (508, 28) DR1000: Variable 'allFilesBelongToPath' is declared but never read from.\n```\n",
        "createdAt" : "2015-04-17T23:27:41Z",
        "updatedAt" : "2015-04-20T21:23:52Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "c43c7f0d-0923-44ca-bd35-5014706f665d",
        "parentId" : "ae3f74cc-064f-49ad-bf16-a865cff5ec39",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "``` ts\n return allFilesBelongToPath;\n```\n",
        "createdAt" : "2015-04-19T20:23:34Z",
        "updatedAt" : "2015-04-20T21:23:52Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "45f184f6-31c9-49bd-b0c8-60b3cb56faa8",
        "parentId" : "ae3f74cc-064f-49ad-bf16-a865cff5ec39",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "just to report all violations instead of just the first one.\n",
        "createdAt" : "2015-04-19T20:23:59Z",
        "updatedAt" : "2015-04-20T21:23:52Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed2e105f178a2941b56239a7f5ac57f1a37b8e3b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +497,501 @@\n        function checkSourceFilesBelongToPath(sourceFiles: SourceFile[], rootDirectory: string): boolean {\n            let allFilesBelongToPath = true;\n            if (sourceFiles) {\n                let currentDirectory = host.getCurrentDirectory();"
  },
  {
    "id" : "ad16e3af-2f50-498f-b1dc-d41f585230ec",
    "prId" : 2414,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "307e97c8-0cf2-4a1d-a760-f1da82f72551",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Shouldn't this just be a compiler option then?\n",
        "createdAt" : "2015-03-18T21:35:22Z",
        "updatedAt" : "2015-03-18T21:35:22Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "10d75921-bf10-4f9b-8189-fca0d876ae82",
        "parentId" : "307e97c8-0cf2-4a1d-a760-f1da82f72551",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I thought about that, but did not feel right, createSourceFile does not know about options. so it will be added, and only honored by the default cmd line host, which is a bit misleading.\n",
        "createdAt" : "2015-03-18T23:15:26Z",
        "updatedAt" : "2015-03-18T23:15:26Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "7462915baf4f4dee29be8c89cff5e01b7b338c30",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +11,15 @@    export let version = \"1.5.0.0\";\n\n    export function createCompilerHost(options: CompilerOptions, setParentNodes?: boolean): CompilerHost {\n        let currentDirectory: string;\n        let existingDirectories: Map<boolean> = {};"
  },
  {
    "id" : "7225286a-ba7a-4948-815a-70eb13a4faa4",
    "prId" : 1512,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b52d07a-560d-4e42-8d7f-6aa00f3f7f43",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "\"if the\"\n",
        "createdAt" : "2014-12-16T22:20:27Z",
        "updatedAt" : "2014-12-18T20:20:46Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef2087add52d7260c8e14746862eabc43dcd43f5",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@\n        function getCanonicalFileName(fileName: string): string {\n            // if underlying system can distinguish between two files whose names differs only in cases then file name already in canonical form.\n            // otherwise use toLowerCase as a canonical form.\n            return sys.useCaseSensitiveFileNames ? fileName : fileName.toLowerCase();"
  }
]