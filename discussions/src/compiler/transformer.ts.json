[
  {
    "id" : "02e857fc-f27e-453a-8b53-95135c63763a",
    "prId" : 22994,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22994#pullrequestreview-108200310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ca3ff0b-f6cd-4c90-9953-92e8af9daa77",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Can you verify the performance of this change against a large project? The original version was written so that the final transformation of a file would basically be a function like `x => d(c(b(a(x))))` for simple cases rather than relying on array iteration. If anything, I would have been tempted to expand `compose` and `chain` to ensure a simple compiled function for a larger number of inputs before falling back to array iteration. To be honest though, since we don't use it heavily the performance characteristics of this approach may be negligible unless you have a large project with a lot of small files.",
        "createdAt" : "2018-03-29T20:53:29Z",
        "updatedAt" : "2018-11-16T18:33:45Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b0e7e6f5ef111167fcb6a8dd5f0427666347913",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +144,148 @@\n        // Chain together and initialize each transformer.\n        const transformersWithContext = transformers.map(t => t(context));\n        const transformation = (node: T): T => {\n            for (const transform of transformersWithContext) {"
  },
  {
    "id" : "0cb386cb-94bf-446f-a4ee-62af7c180380",
    "prId" : 8824,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "719eb144-553f-4bc0-a2fd-04593b4e0d13",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Can you comment on the lifetime of this transformId? You mentioned monotonically increasing but is that in a global context, or per compilation?\n",
        "createdAt" : "2016-05-27T00:40:46Z",
        "updatedAt" : "2016-05-27T21:56:17Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "7baf218a-a6e3-41dc-8cdf-f31a50afccac",
        "parentId" : "719eb144-553f-4bc0-a2fd-04593b4e0d13",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "It sounds like global (you mentioned compile-on-save), but clarify this\n",
        "createdAt" : "2016-05-27T00:41:17Z",
        "updatedAt" : "2016-05-27T21:56:17Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "f846d058-e3fe-4b1c-aa0e-e167c7b0feeb",
        "parentId" : "719eb144-553f-4bc0-a2fd-04593b4e0d13",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Yes, globally. I need to ensure that I can clean up transient properties from source tree nodes. \n",
        "createdAt" : "2016-05-27T00:44:09Z",
        "updatedAt" : "2016-05-27T21:56:17Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "82e2531f6daad275e0bf5ba141856d224424cad5",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +146,150 @@     * with compile-on-save).\n     */\n    let nextTransformId = 1;\n\n    /**"
  },
  {
    "id" : "2cbeb5a1-13f4-47b9-8454-9e6f1abe596f",
    "prId" : 8824,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5b5c6c2-e484-4e12-904a-9a4f05dd05eb",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why do you need `|| node`?\n",
        "createdAt" : "2016-05-27T00:43:48Z",
        "updatedAt" : "2016-05-27T21:56:17Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "f7b808f9-cd96-45f3-be69-cd90d74232e5",
        "parentId" : "b5b5c6c2-e484-4e12-904a-9a4f05dd05eb",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "`lastSourceMapRange` may be `undefined`. If there is no custom source map range, we return the node itself.\n",
        "createdAt" : "2016-05-27T00:52:09Z",
        "updatedAt" : "2016-05-27T21:56:17Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "82e2531f6daad275e0bf5ba141856d224424cad5",
    "line" : 283,
    "diffHunk" : "@@ -1,1 +389,393 @@            // This helps for cases where this function is called repeatedly for the same node.\n            if (lastSourceMapRangeNode === node) {\n                return lastSourceMapRange || node;\n            }\n"
  },
  {
    "id" : "b3b7b6a0-df82-47d8-b4fc-d33bb645f9d4",
    "prId" : 8598,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0c7147c-eeae-492b-91f5-68dc989576ef",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "is it possible to refactor these lookup loops without killing performance? it's pretty tiresome to read these functions that only differ in the property that they get/set.\n",
        "createdAt" : "2016-05-18T22:02:34Z",
        "updatedAt" : "2016-05-19T22:39:52Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "fb23f8b3-9e69-4d80-9da0-70deab2e31ff",
        "parentId" : "c0c7147c-eeae-492b-91f5-68dc989576ef",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Currently these functions are a big performance bottleneck. I'm investigating this presently, but in all likelyhood these will always be separate functions.\n",
        "createdAt" : "2016-05-19T22:33:39Z",
        "updatedAt" : "2016-05-19T22:39:52Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "150cecbaf37b959ead6ac1aa3b628d2385e02418",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +247,251 @@        function getTokenSourceMapRanges(node: Node) {\n            let current = node;\n            while (current) {\n                const options = getEmitOptions(current);\n                if (options && options.tokenSourceMapRange) {"
  }
]