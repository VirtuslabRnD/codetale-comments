[
  {
    "id" : "48ea01da-aae2-4eb9-b092-e561cc4fcd7b",
    "prId" : 35506,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35506#pullrequestreview-327760893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b17c60c8-9746-4245-9135-1ae6a1c5d708",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "friendship ended etc etc",
        "createdAt" : "2019-12-05T17:37:58Z",
        "updatedAt" : "2019-12-05T18:27:20Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "07f45cbe-5f8a-4553-8967-ab44f57f76a7",
        "parentId" : "b17c60c8-9746-4245-9135-1ae6a1c5d708",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Yah, string enums don't merge across files, while you can make an interface that does (via module augmentation). Downside is you have to use _assignments_ to actually create the value side. Terrible, I know.",
        "createdAt" : "2019-12-05T18:29:54Z",
        "updatedAt" : "2019-12-05T18:29:54Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6051a8f1db5c45f70e12c11d4621ac94155ac494",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +244,248 @@    }\n\n    export type WatchType = WatchTypeRegistry[keyof WatchTypeRegistry];\n    export const WatchType: WatchTypeRegistry = {\n        ConfigFile: \"Config file\","
  },
  {
    "id" : "dadc8245-7f44-470b-bc38-bd71ade2238c",
    "prId" : 33082,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33082#pullrequestreview-280508769",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae2b0b9c-f5da-435c-aa68-3744a184d790",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Add test in same file and similar to https://github.com/microsoft/TypeScript/blob/master/src/testRunner/unittests/tscWatch/watchApi.ts#L21 that verifies the error count comes out correctly.",
        "createdAt" : "2019-08-26T15:53:39Z",
        "updatedAt" : "2019-08-27T22:36:17Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "8ec5266f-4fd2-43a3-a291-3d4119006c30",
        "parentId" : "ae2b0b9c-f5da-435c-aa68-3744a184d790",
        "authorId" : "7c770115-2de1-4e11-8093-36dbb95d7125",
        "body" : "Added the unit test in the next commit",
        "createdAt" : "2019-08-27T22:37:41Z",
        "updatedAt" : "2019-08-27T22:37:41Z",
        "lastEditedBy" : "7c770115-2de1-4e11-8093-36dbb95d7125",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f7ac1f202a252b8ac72281e292a8df4a6550416",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +482,486 @@    }\n\n    export type WatchStatusReporter = (diagnostic: Diagnostic, newLine: string, options: CompilerOptions, errorCount?: number) => void;\n    /** Create the program with rootNames and options, if they are undefined, oldProgram and new configFile diagnostics create new program */\n    export type CreateProgram<T extends BuilderProgram> = (rootNames: ReadonlyArray<string> | undefined, options: CompilerOptions | undefined, host?: CompilerHost, oldProgram?: T, configFileParsingDiagnostics?: ReadonlyArray<Diagnostic>, projectReferences?: ReadonlyArray<ProjectReference> | undefined) => T;"
  },
  {
    "id" : "ea4f8a92-313a-42ce-9494-f7e32b6915e6",
    "prId" : 29161,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29161#pullrequestreview-192443482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "769f6c49-e8db-411e-a61e-32faac86e3d0",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "It's weird that we pass watchLogLevel and writeLog to getWatchFactory and still have to set them on the result right after.",
        "createdAt" : "2019-01-15T01:00:01Z",
        "updatedAt" : "2019-01-17T20:29:40Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "900d6f7c9042a686cebc2c50343bfa50ca66b04f",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +211,215 @@        const watchLogLevel = host.trace ? options.extendedDiagnostics ? WatchLogLevel.Verbose : options.diagnostics ? WatchLogLevel.TriggerOnly : WatchLogLevel.None : WatchLogLevel.None;\n        const writeLog: (s: string) => void = watchLogLevel !== WatchLogLevel.None ? (s => host.trace!(s)) : noop;\n        const result = getWatchFactory<WatchType, Y>(watchLogLevel, writeLog) as WatchFactory<WatchType, Y>;\n        result.writeLog = writeLog;\n        return result;"
  },
  {
    "id" : "e5fde8bd-7c92-40ce-81ff-5c2907e4cc89",
    "prId" : 26366,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26366#pullrequestreview-145773613",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74a78227-bb5c-4ad3-bd82-d890ab01b7e9",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Can you please open a bug to track this so we can look into this. Thanks",
        "createdAt" : "2018-08-13T17:39:18Z",
        "updatedAt" : "2018-08-13T17:39:21Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "843c9c9a-0aa7-4987-aab6-d20f9b7359a3",
        "parentId" : "74a78227-bb5c-4ad3-bd82-d890ab01b7e9",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "#26417",
        "createdAt" : "2018-08-13T18:14:22Z",
        "updatedAt" : "2018-08-13T18:14:23Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "57077096be9c9429c6bdf0441728864021447ff0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +184,188 @@\n        let host: DirectoryStructureHost = system;\n        host; // tslint:disable-line no-unused-expression (TODO: `host` is unused!)\n        const useCaseSensitiveFileNames = () => system.useCaseSensitiveFileNames;\n        const writeFileName = (s: string) => system.write(s + system.newLine);"
  },
  {
    "id" : "583c5a8e-fe35-4fc3-bada-2114cd0e0193",
    "prId" : 22254,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22254#pullrequestreview-102813451",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cc3185b-d29a-4e55-8a36-0e534695b036",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "i agree with  @mhegazy 's https://github.com/Microsoft/TypeScript/pull/22254#issuecomment-370082170 that we should just report this all the time",
        "createdAt" : "2018-03-09T21:41:05Z",
        "updatedAt" : "2018-04-04T17:21:28Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "112ea173-cfa3-4010-b281-c7397263ba9b",
        "parentId" : "6cc3185b-d29a-4e55-8a36-0e534695b036",
        "authorId" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "body" : "I'm hesitant to change the behavior for non-pretty non-watch users. What if those users have builds that rely on `tsc` not having any non-whitespace output? This would break their workflow.\r\n\r\nIf these changes are acceptable for watch mode, can we discuss enabling for them in a separate issue?",
        "createdAt" : "2018-03-09T22:10:57Z",
        "updatedAt" : "2018-04-04T17:21:28Z",
        "lastEditedBy" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "tags" : [
        ]
      },
      {
        "id" : "f8d6077a-9840-4628-8f33-e7717612f05c",
        "parentId" : "6cc3185b-d29a-4e55-8a36-0e534695b036",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "But that can be done through checking ```if (program.getCompilerOptions().pretty)```",
        "createdAt" : "2018-03-09T22:47:24Z",
        "updatedAt" : "2018-04-04T17:21:28Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dbebec28f2ff4b92fa809ec58571a7d10038a08",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +169,173 @@        }\n\n        if (reportSummary) {\n            reportSummary(diagnostics.filter(diagnostic => diagnostic.category === DiagnosticCategory.Error).length);\n        }"
  },
  {
    "id" : "a22ccd84-056f-49e0-a0ad-61c44249765e",
    "prId" : 21693,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21693#pullrequestreview-94804710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d36c08c6-87f3-4596-b67f-be5bc3155da5",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can we make it a `number` instead of a `string` since we are using it as a version?",
        "createdAt" : "2018-02-06T20:39:39Z",
        "updatedAt" : "2018-02-07T17:21:48Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "efa969fa-d0a0-4bec-a122-b6e7dc235c93",
        "parentId" : "d36c08c6-87f3-4596-b67f-be5bc3155da5",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Done. Earlier i was wondering if i should do that given we do checks like ```if (hostSourceFile)```. But now that we have initial version starting at ```1``` makes it easier to do that switch",
        "createdAt" : "2018-02-06T21:49:30Z",
        "updatedAt" : "2018-02-07T17:21:48Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "a6bb6761-4d24-452b-be87-45dee9535a69",
        "parentId" : "d36c08c6-87f3-4596-b67f-be5bc3155da5",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "so we do not need the call to `Number`?",
        "createdAt" : "2018-02-07T17:49:12Z",
        "updatedAt" : "2018-02-07T17:49:12Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "82aa1fbbe4e38896f4d4f430b3326544537dbf90",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +725,729 @@                if (isFileMissingOnHost(hostSourceFile)) {\n                    // The next version, lets set it as presence unknown file\n                    sourceFilesCache.set(path, { version: Number(hostSourceFile) + 1 });\n                }\n                else {"
  },
  {
    "id" : "169db6c2-173d-4ecf-8c30-3008a6855a40",
    "prId" : 21693,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21693#pullrequestreview-94515431",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "137969be-c349-47c4-95f1-6cb19c4d1084",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "these functions should return a user-defined type guards to avoid the casts below.",
        "createdAt" : "2018-02-06T20:40:27Z",
        "updatedAt" : "2018-02-07T17:21:48Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "214792f2-beab-43f0-b495-6d30b466f966",
        "parentId" : "137969be-c349-47c4-95f1-6cb19c4d1084",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "In the line below the hostSourceFile could be ```FilePresenceUnknownOnHost```  or ```FileMayBePresentOnHost``` . It is kind of redundant to check if ```isFilePresentOnHost``` since it only checks if sourceFile is present on the host and the next check is going to check if sourceFile === oldSourceFile (oldSourceFile is never undefined). Hence the cast",
        "createdAt" : "2018-02-06T21:42:12Z",
        "updatedAt" : "2018-02-07T17:21:48Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "82aa1fbbe4e38896f4d4f430b3326544537dbf90",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +746,750 @@            if (hostSourceFileInfo) {\n                // record the missing file paths so they can be removed later if watchers arent tracking them\n                if (isFileMissingOnHost(hostSourceFileInfo)) {\n                    (missingFilePathsRequestedForRelease || (missingFilePathsRequestedForRelease = [])).push(oldSourceFile.path);\n                }"
  }
]