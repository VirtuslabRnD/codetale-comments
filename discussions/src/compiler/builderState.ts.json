[
  {
    "id" : "5a43c7d4-1e2a-47a4-9668-00edfb1f3b4c",
    "prId" : 45238,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45238#pullrequestreview-718418019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23d2b789-c344-48b5-8011-1c613d63d44d",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I'm pretty sure the value from `delete` is redundant because it would necessarily be accompanied by a multi-map update, but I saw no harm in consuming it.",
        "createdAt" : "2021-07-29T18:24:45Z",
        "updatedAt" : "2021-07-29T18:24:45Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "f0d50c53-2f19-4bc1-b8ea-51b15eefbfab",
        "parentId" : "23d2b789-c344-48b5-8011-1c613d63d44d",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Since `Path` isn't an object, you need to explicitly check whether it was `undefined`, right? Otherwise you could end up with a weird bug around empty paths?",
        "createdAt" : "2021-07-29T18:29:56Z",
        "updatedAt" : "2021-07-29T18:30:14Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "441ffa7b-43dc-456b-be8d-0ab5b7b94883",
        "parentId" : "23d2b789-c344-48b5-8011-1c613d63d44d",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "The initializer returns a boolean unless the `deleted` Set is `undefined`; the truthiness of a `Path` is never observed here.",
        "createdAt" : "2021-07-29T18:36:05Z",
        "updatedAt" : "2021-07-29T18:36:05Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "e6a42b2e-3033-40dc-ad6d-e1876bdc698a",
        "parentId" : "23d2b789-c344-48b5-8011-1c613d63d44d",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Gotcha, thought it returned the deleted object.",
        "createdAt" : "2021-07-29T18:39:11Z",
        "updatedAt" : "2021-07-29T18:39:11Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "19d977fc37e74e854c5380a0c892c4d588137f24",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +137,141 @@                    },\n                    set: (k, vSet) => {\n                        let changed = !!deleted?.delete(k);\n\n                        const existingVSet = forward.get(k);"
  },
  {
    "id" : "0aa4fde1-ed42-481f-96da-96a50431a406",
    "prId" : 45238,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45238#pullrequestreview-718406397",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad501a02-5fb7-4f22-90ba-4d2df4f34058",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "It's vitally important that this not miss a case where the map has actually changed - please double-check.",
        "createdAt" : "2021-07-29T18:25:11Z",
        "updatedAt" : "2021-07-29T18:25:11Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "19d977fc37e74e854c5380a0c892c4d588137f24",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +157,161 @@\n                        if (changed) {\n                            version++;\n                        }\n"
  },
  {
    "id" : "ce34e71f-bfd1-4d10-8ef4-c5a3d0165b05",
    "prId" : 45238,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45238#pullrequestreview-718528838",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d4e71d5-9ab4-4ad5-af48-c876d01acf06",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I think that if you swap this to the containing `ReadonlyManyToManyPathMap`, you can avoid introducting an `id` field to `ReadonlyManyToManyPathMap` itself.\r\n\r\nI don't know if it adds any risk of introducing a leak of some sort, but it might be work considering.",
        "createdAt" : "2021-07-29T20:49:32Z",
        "updatedAt" : "2021-07-29T20:52:46Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "df0e5134-33a5-48a0-bffb-185de2585529",
        "parentId" : "4d4e71d5-9ab4-4ad5-af48-c876d01acf06",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I was worried about the hypothetical leak.  Plus, the ID was useful to tracing/debugging.",
        "createdAt" : "2021-07-29T20:59:08Z",
        "updatedAt" : "2021-07-29T20:59:09Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "19d977fc37e74e854c5380a0c892c4d588137f24",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +50,54 @@\n        previousCache?: {\n            id: number,\n            version: number,\n        };"
  },
  {
    "id" : "beb31473-28be-463f-bae8-a78afb57d7d0",
    "prId" : 45238,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45238#pullrequestreview-718529738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f432c87-ceb4-426b-b4b8-2cacda1f3789",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Just checking: it's intentional that `clone` returns a map with a different `id`, right?",
        "createdAt" : "2021-07-29T20:50:35Z",
        "updatedAt" : "2021-07-29T20:52:46Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "437411f0-2d48-46c6-9019-37b29eb2f1db",
        "parentId" : "2f432c87-ceb4-426b-b4b8-2cacda1f3789",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "It's probably not necessary, but it seemed like the more conservative approach.  `clone` isn't called at all in the scenario I'm testing, so it's somewhat academic.",
        "createdAt" : "2021-07-29T21:00:15Z",
        "updatedAt" : "2021-07-29T21:00:15Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "19d977fc37e74e854c5380a0c892c4d588137f24",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +115,119 @@                    id: manyToManyPathMapCount++,\n                    version: () => version,\n                    clone: () => create(new Map(forward), new Map(reverse), deleted && new Set(deleted)),\n                    forEach: fn => forward.forEach(fn),\n                    getKeys: v => reverse.get(v),"
  },
  {
    "id" : "f27cec17-5878-401f-a42a-aae1b8a8cedb",
    "prId" : 45238,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45238#pullrequestreview-718587241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "840db570-b103-4443-802e-bcc5a5b3dd55",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "So if this actually results in a change, it will necessarily get hit in one of the following two loops, right? (And if `existingVSet` is `undefined` it will be set to `true` in the second loop?) Is it possible to ever see an empty set? It looks to me like the only way we could make a mutation without setting `changed` is by setting an empty `vSet` for a `k` that did not exist before. Assuming that can’t happen and wouldn’t be semantically meaningful if it did, this looks right to me.",
        "createdAt" : "2021-07-29T22:11:27Z",
        "updatedAt" : "2021-07-29T22:11:53Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "d761a0bc-3e6d-4e93-8020-883930c9e8d9",
        "parentId" : "840db570-b103-4443-802e-bcc5a5b3dd55",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Yes, AFAIK, consuming the return value of `delete` is [redundant](https://github.com/microsoft/TypeScript/pull/45238#discussion_r679388151).\r\n\r\n`deleteFromMultimap` clears empty sets by default, so I believe an empty set is impossible.  Also, if it did happen, I don't think I would count that as a change, since it wouldn't actually add a new mapping (which I think is what you meant by \"wouldn't be semantically meaningful\").",
        "createdAt" : "2021-07-29T22:35:30Z",
        "updatedAt" : "2021-07-29T22:35:30Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "19d977fc37e74e854c5380a0c892c4d588137f24",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +140,144 @@\n                        const existingVSet = forward.get(k);\n                        forward.set(k, vSet);\n\n                        existingVSet?.forEach(v => {"
  }
]