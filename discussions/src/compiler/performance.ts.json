[
  {
    "id" : "7b87bbe8-091f-4945-bc85-49ef9578e68c",
    "prId" : 9845,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df5f49fc-536d-450e-ad72-646e6a5707be",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "should this also be `/*@internal*/`?\n",
        "createdAt" : "2016-07-20T22:10:20Z",
        "updatedAt" : "2016-07-20T22:18:06Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "fbaf07e2-ef83-472c-ba1c-077adced2ebc",
        "parentId" : "df5f49fc-536d-450e-ad72-646e6a5707be",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Do we not want to publicly expose `timestamp`? I guess we don't have a good reason to expose it, so may as well not.\n",
        "createdAt" : "2016-07-20T22:14:21Z",
        "updatedAt" : "2016-07-20T22:18:06Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "55101ccd8249e391295ce4ef779f7b764edf22ee",
    "line" : null,
    "diffHunk" : "@@ -1,1 +0,4 @@/*@internal*/\nnamespace ts {\n    declare const performance: { now?(): number } | undefined;\n    /** Gets a timestamp with (at least) ms resolution */"
  },
  {
    "id" : "526bbffa-f726-4987-bc24-2a446e68bceb",
    "prId" : 9536,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a34915df-555f-4363-a29c-8496b52a64e7",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "1. See comment below on `new Date().getTime()` performance (it should be `+new Date()` instead here).\n2. Also please use `typeof performance!=='undefined'` instead of just checking for truthiness. Otherwise you'll get ReferenceError on platforms that don't have it defined.\n3. Lastly, it's quite non-obvious whether **performance** identifier here resolves to global-scope performance or ts.performance. I can see you've got that `declare const performance` up at line 6 â€” but it feels like a trick, and it may come back biting as resolution rules change all the time.\n   \n   Perhaps a clearer solution would be to move the whole `Date.now` thing in together with other fallback-safe utils (forEach, contains, indexOf) in [core.ts around line 84](https://github.com/Microsoft/TypeScript/blob/master/src/compiler/core.ts#L79)?\n   \n   ``` typescript\n   namespace ts {\n       export var preciseTime =\n           typeof performance!=='undefined' && performance && performance.now ? performance.now :\n           Date.now ? Date.now :\n           () => +new Date();\n   }\n   ```\n   \n   That way rather than having defined and called markInternal here in performance.ts, you'd call `ts.preciseTime()` from core.ts. Also you would replace overly optimistic Date.now at [shims.ts isCancellationRequested at line 426](https://github.com/Microsoft/TypeScript/blob/master/src/services/shims.ts#L425) and [editorServices.ts resolveNamesWithLocalCache line 145](https://github.com/Microsoft/TypeScript/blob/master/src/server/editorServices.ts#L120)\n",
        "createdAt" : "2016-07-20T10:44:11Z",
        "updatedAt" : "2016-07-20T10:44:11Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a9ba59cb65080cf7e3358232090ee92946e765e",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +95,99 @@                ? onProfilerEvent\n                : undefined;\n            markInternal = performance && performance.now ? performance.now : Date.now ? Date.now : () => new Date().getTime();\n        }\n"
  }
]