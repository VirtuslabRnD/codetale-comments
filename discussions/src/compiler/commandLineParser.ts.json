[
  {
    "id" : "f0a6e9cb-f459-489b-8997-0f410d9327d0",
    "prId" : 44394,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44394#pullrequestreview-675589944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "836df7b4-2db3-44cf-9a79-cbf3352c62f3",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I kind of wonder whether it's just worth it to say this always has `affectsSemanticDiagnostics` set to `true` since it's unlikely that you'd toggle this but have no difference in effective strict options.",
        "createdAt" : "2021-06-02T22:28:42Z",
        "updatedAt" : "2021-06-02T22:28:42Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "4c4f2b16-5723-4b9b-b592-f0346107d2f0",
        "parentId" : "836df7b4-2db3-44cf-9a79-cbf3352c62f3",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think its better that we dont update unnecessarily so prefer to keep it like this. But not stuck on it so open to changing that if you feel strongly about it.",
        "createdAt" : "2021-06-02T23:39:54Z",
        "updatedAt" : "2021-06-02T23:39:54Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "5382d8ff-b418-4e5b-aed5-587348ade75d",
        "parentId" : "836df7b4-2db3-44cf-9a79-cbf3352c62f3",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "What’s the actual consequence of doing it like this? Like if someone had every individual strict flag enabled, and then toggled `strict` itself, we would be able to correctly identify that it had no effect?",
        "createdAt" : "2021-06-03T14:12:24Z",
        "updatedAt" : "2021-06-03T14:12:24Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "9bcfdc52-e90d-451f-8384-c31ddd77ddd1",
        "parentId" : "836df7b4-2db3-44cf-9a79-cbf3352c62f3",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "correct.",
        "createdAt" : "2021-06-03T18:08:22Z",
        "updatedAt" : "2021-06-03T18:08:23Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "cee9f40fd9d069e3e08e337b59df578fb50d57cd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +566,570 @@            type: \"boolean\",\n            // Though this affects semantic diagnostics, affectsSemanticDiagnostics is not set here\n            // The value of each strictFlag depends on own strictFlag value or this and never accessed directly.\n            showInSimplifiedHelpView: true,\n            category: Diagnostics.Strict_Type_Checking_Options,"
  },
  {
    "id" : "e4bc89f7-ef75-4514-b8db-f72181790515",
    "prId" : 44197,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44197#pullrequestreview-665875553",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70102b2a-3060-4325-b8e3-a4c62a908622",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Does it matter that this won't catch leading `..`?",
        "createdAt" : "2021-05-21T19:29:47Z",
        "updatedAt" : "2021-05-21T19:45:02Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "08847f8d-e188-4576-82b7-60d4a22166c8",
        "parentId" : "70102b2a-3060-4325-b8e3-a4c62a908622",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Leading `..` can't come after a `**` segment, so.... nope.",
        "createdAt" : "2021-05-21T20:44:35Z",
        "updatedAt" : "2021-05-21T20:44:35Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0523fc67f929d2f38f95ac7505cac82fae49d2da",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +3194,3198 @@            return false;\n        }\n        const lastDotIndex = endsWith(s, \"/..\") ? s.length : s.lastIndexOf(\"/../\");\n        return lastDotIndex > wildcardIndex;\n    }"
  },
  {
    "id" : "6f1ef8b4-a9d4-47bd-bced-87d70cf46d70",
    "prId" : 42657,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42657#pullrequestreview-584576779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d94a002-eb0b-4ad7-b179-ed3f57a22486",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Would this potentially be a polymorphism deopt?",
        "createdAt" : "2021-02-05T17:58:59Z",
        "updatedAt" : "2021-02-23T00:31:28Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "41925b36e62db32edd7276cc10e3527da67af0c3",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +1807,1811 @@    export function convertToObjectWorker(\n        sourceFile: JsonSourceFile,\n        rootExpression: Expression | undefined,\n        errors: Push<Diagnostic>,\n        returnValue: boolean,"
  },
  {
    "id" : "1406e2da-c7ba-4336-a801-d191e299ab08",
    "prId" : 42514,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42514#pullrequestreview-577708569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7d9219e-d7c8-4685-a06b-a3144fe5cc5d",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "```suggestion\r\n        },\r\n```",
        "createdAt" : "2021-01-27T19:58:09Z",
        "updatedAt" : "2021-04-29T15:59:10Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7aee1e01dd619cf388fcef6a8ae2fca4c56c6bb3",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +210,214 @@            description: Diagnostics.Print_names_of_files_and_the_reason_they_are_part_of_the_compilation\n        },\n        {\n            name: \"listEmittedFiles\",\n            type: \"boolean\","
  },
  {
    "id" : "9e091145-1d4f-48f1-b6ac-54e702e39f9c",
    "prId" : 40101,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40101#pullrequestreview-469715240",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9b58bce-632d-43bd-b690-6184c0621ba0",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I am not sure if this should be non enumerable and should be in tsconfig build info or not. You would also want test case with incremental set.",
        "createdAt" : "2020-08-18T17:48:47Z",
        "updatedAt" : "2020-09-11T19:32:23Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "e305bf13-2dfa-484e-83d2-fa0d42dc771c",
        "parentId" : "e9b58bce-632d-43bd-b690-6184c0621ba0",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "There is a baseline that shows it in the .tsbuildinfo. It seems like it would be necessary if an incremental build doesn’t re-resolve everything in tsconfig, but I’m not sure how that works. Exactly what would you want to see in a test case?",
        "createdAt" : "2020-08-18T18:24:32Z",
        "updatedAt" : "2020-09-11T19:32:23Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fcd9e69e7bf1345a816a1e85f4093b20f350706",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +2514,2518 @@            // Since 'paths' can be inherited from an extended config in another directory,\n            // we wouldn't know which directory to use unless we store it here.\n            ownConfig.options.pathsBasePath = basePath;\n        }\n        if (ownConfig.extendedConfigPath) {"
  },
  {
    "id" : "8a7c4758-9441-4e7a-a11c-5dd1582db093",
    "prId" : 40101,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40101#pullrequestreview-469716441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a71cd43c-bc14-4bd6-b249-a5e6b71b7b36",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I dont think this is going to work when paths is in extended config file since the paths should be resolved with baseUrl = directory of extended config file. So you would need to handle that magic somewhere for extended config path",
        "createdAt" : "2020-08-18T17:51:55Z",
        "updatedAt" : "2020-09-11T19:32:23Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "28a50737-966a-42ba-9aad-d69f1473d80a",
        "parentId" : "a71cd43c-bc14-4bd6-b249-a5e6b71b7b36",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "It does work; see [the test](https://github.com/microsoft/TypeScript/pull/40101/files#diff-0917ba20b8847b85fdb7085454a168da) for it",
        "createdAt" : "2020-08-18T18:19:35Z",
        "updatedAt" : "2020-09-11T19:32:23Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "2e95a2b5-ad25-4860-b920-ac9495c59e49",
        "parentId" : "a71cd43c-bc14-4bd6-b249-a5e6b71b7b36",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "(It works because this function recurses on extended configs, and this line happens on the way up out of that recursion.)",
        "createdAt" : "2020-08-18T18:26:19Z",
        "updatedAt" : "2020-09-11T19:32:23Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fcd9e69e7bf1345a816a1e85f4093b20f350706",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2509,2513 @@            parseOwnConfigOfJsonSourceFile(sourceFile!, host, basePath, configFileName, errors);\n\n        if (ownConfig.options?.paths) {\n            // If we end up needing to resolve relative paths from 'paths' relative to\n            // the config file location, we'll need to know where that config file was."
  },
  {
    "id" : "ed4ad84a-fe34-4bf5-8c24-5625cc64c985",
    "prId" : 40041,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40041#pullrequestreview-467231715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a21cce38-11b7-4f49-8fa7-d4167483f3cf",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "should we return something besides `result` in this error case?",
        "createdAt" : "2020-08-13T23:01:07Z",
        "updatedAt" : "2020-08-13T23:02:10Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "1bc3e78e-4a50-4346-88ce-21a2661c9aaa",
        "parentId" : "a21cce38-11b7-4f49-8fa7-d4167483f3cf",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "It’s not needed at moment.. if needed we can add later ",
        "createdAt" : "2020-08-14T00:07:19Z",
        "updatedAt" : "2020-08-14T00:07:19Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d9f7e4ec0b7ea553fcd308affeb67142cf8c9e4",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +2385,2389 @@                    const result = raw[prop];\n                    if (!sourceFile && !every(result, validateElement)) {\n                        errors.push(createCompilerDiagnostic(Diagnostics.Compiler_option_0_requires_a_value_of_type_1, prop, elementTypeName));\n                    }\n                    return result;"
  },
  {
    "id" : "6d2e4ab9-2559-49ca-9815-4ad01f746d5c",
    "prId" : 39243,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39243#pullrequestreview-488078923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9594664-64b9-4bc3-8bfb-6da70d2c24c3",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "It looks like the only two consumers of `extraValidation` do the same thing.  Personally, I think it would make more sense to either generalize this to `validation` and have a bunch of pre-packaged ones (e.g. file, number, etc) or just add a new `type` or flag that has the validation you want.",
        "createdAt" : "2020-09-05T00:12:10Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "91bf2df0-3c37-4e91-a7ea-e95308af5bda",
        "parentId" : "d9594664-64b9-4bc3-8bfb-6da70d2c24c3",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This adds a flag with validation it wants.. currently it is just these two but this enables us to add more if needed in future. Wouldnt want to create separate type just for different validation and prefer this instead.",
        "createdAt" : "2020-09-14T19:31:29Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "90bcea54378021ae39bf197edeb322d54484b174",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +141,145 @@                type: \"string\",\n                isFilePath: true,\n                extraValidation: specToDiagnostic\n            },\n            category: Diagnostics.Advanced_Options,"
  },
  {
    "id" : "c4715c6c-bbe1-4721-ae75-82477410ddce",
    "prId" : 39243,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39243#pullrequestreview-488079912",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "300eeb60-70b5-4861-aa0a-8e465d1c6684",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Why not for for `\"list\"` (below) as well?",
        "createdAt" : "2020-09-05T00:16:09Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "7cd1e3e3-a298-474c-adbb-8c568c149580",
        "parentId" : "300eeb60-70b5-4861-aa0a-8e465d1c6684",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "It is dont in parseListTypeOption as thats where list is parsed.",
        "createdAt" : "2020-09-14T19:32:58Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "90bcea54378021ae39bf197edeb322d54484b174",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +1423,1427 @@                        break;\n                    case \"string\":\n                        options[opt.name] = validateJsonOptionValue(opt, args[i] || \"\", errors);\n                        i++;\n                        break;"
  },
  {
    "id" : "258c66ae-4248-4c8a-9097-16ca782028e7",
    "prId" : 39243,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39243#pullrequestreview-488081564",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a431d8be-1e65-4e42-90ba-52a9e952e15f",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "This is just a bug you noticed?",
        "createdAt" : "2020-09-05T00:18:19Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "daf0f8d7-570c-4255-822e-fd3ef2ae105f",
        "parentId" : "a431d8be-1e65-4e42-90ba-52a9e952e15f",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "yeah",
        "createdAt" : "2020-09-14T19:35:27Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "90bcea54378021ae39bf197edeb322d54484b174",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +1871,1875 @@            if (!returnValue) {\n                elements.forEach(element => convertPropertyValueToJson(element, elementOption));\n                return undefined;\n            }\n"
  },
  {
    "id" : "314a7e58-7510-4efd-883c-da2cbe913491",
    "prId" : 39243,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39243#pullrequestreview-488081013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf425cbe-5ffb-452c-815d-d9ee07057d47",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Why is the internal caller passing bad values that need to be filtered out?",
        "createdAt" : "2020-09-05T00:20:26Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "8fe146f0-5db4-4823-87b8-9f54e77e1110",
        "parentId" : "bf425cbe-5ffb-452c-815d-d9ee07057d47",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This can be called by API  indirectly since json compiler options can be passed by external tools without validating.",
        "createdAt" : "2020-09-14T19:34:39Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "90bcea54378021ae39bf197edeb322d54484b174",
    "line" : 259,
    "diffHunk" : "@@ -1,1 +3204,3208 @@        return matchesExcludeWorker(\n            pathToCheck,\n            filter(excludeSpecs, spec => !invalidDotDotAfterRecursiveWildcardPattern.test(spec)),\n            useCaseSensitiveFileNames,\n            currentDirectory"
  },
  {
    "id" : "404aa2aa-003e-458a-992d-40097c360c46",
    "prId" : 39243,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39243#pullrequestreview-523691214",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2fcace2-401b-4547-9cb5-2aacd6a258cc",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Why `mapDefined`?  Isn't the result unusable anyway, if there are errors?",
        "createdAt" : "2020-11-04T17:47:09Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "79996562-023a-45ea-bcf0-5837fe11e5a5",
        "parentId" : "c2fcace2-401b-4547-9cb5-2aacd6a258cc",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Because we ignore only invalid values inside the array instead of ignoring everything",
        "createdAt" : "2020-11-04T19:58:36Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "90bcea54378021ae39bf197edeb322d54484b174",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +1256,1260 @@        switch (opt.element.type) {\n            case \"number\":\n                return mapDefined(values, v => validateJsonOptionValue(opt.element, parseInt(v), errors));\n            case \"string\":\n                return mapDefined(values, v => validateJsonOptionValue(opt.element, v || \"\", errors));"
  },
  {
    "id" : "c3ad7827-d076-4ebb-b816-20a1062a5b13",
    "prId" : 37808,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37808#pullrequestreview-389088157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d5a978b-9b1c-4240-a220-b9db45903920",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "From the design meeting::\r\n> Ask is for skipLibCheck to be included in tsc --init, not that it's turned on.",
        "createdAt" : "2020-04-06T17:07:21Z",
        "updatedAt" : "2020-04-06T17:07:21Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "3aa0f89e-9877-44d5-ba28-3f9310efaec7",
        "parentId" : "1d5a978b-9b1c-4240-a220-b9db45903920",
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "Yeah I agree - it looks like that. I think the design notes were the first part of the discussion  - the JSON dump we worked on included it as true\r\n\r\n![Screen Shot 2020-04-07 at 8 56 51 AM](https://user-images.githubusercontent.com/49038/78671861-d8c9ca80-78ad-11ea-87dd-7cf9e6898f2c.png)\r\n",
        "createdAt" : "2020-04-07T12:58:04Z",
        "updatedAt" : "2020-04-07T12:58:04Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "807f7c978fe9dd1db1b4020b81e476adc5367985",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1117,1121 @@        esModuleInterop: true,\n        forceConsistentCasingInFileNames: true,\n        skipLibCheck: true\n    };\n"
  },
  {
    "id" : "2b716410-fdee-4597-bd6b-5c7aaa4ff9e5",
    "prId" : 35711,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35711#pullrequestreview-338253331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "221aa3c9-eee7-40e1-bf1c-5fe89ac698f4",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I suspect this is probably a very ignorant question, but does this apply only within projects or across projects as well?  Clearly we can't get everything into the name, but it might be nice to provide more details in the description (or in a a comment, if we'd prefer to keep the switch mysterious and little-used).",
        "createdAt" : "2020-01-03T02:09:26Z",
        "updatedAt" : "2020-01-03T02:09:37Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "0be604a7-ac25-44f5-ae44-ea7d4ff5af21",
        "parentId" : "221aa3c9-eee7-40e1-bf1c-5fe89ac698f4",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Builder is not used across projects but within single program.",
        "createdAt" : "2020-01-03T20:09:15Z",
        "updatedAt" : "2020-01-03T20:09:15Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cab8ae8d53d121308084b33bfa5f0d65dd08c12",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +208,212 @@            affectsEmit: true,\n            category: Diagnostics.Advanced_Options,\n            description: Diagnostics.Have_recompiles_in_incremental_and_watch_assume_that_changes_within_a_file_will_only_affect_files_directly_depending_on_it\n        },\n        {"
  },
  {
    "id" : "3e9956fe-ba2a-45b9-94e7-8dc446b57a74",
    "prId" : 35615,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35615#pullrequestreview-340007219",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dc289df-bb4d-4a33-9bd1-cc62d1ac7374",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "As a user, is this relevant to me? What do I need to know? It's not clear to me what this option does.",
        "createdAt" : "2020-01-07T20:13:21Z",
        "updatedAt" : "2020-01-07T20:13:21Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "5be0ad2e-8baa-46fd-9290-2feb5d693afb",
        "parentId" : "1dc289df-bb4d-4a33-9bd1-cc62d1ac7374",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Also, what's the default?",
        "createdAt" : "2020-01-07T20:28:06Z",
        "updatedAt" : "2020-01-07T20:28:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "79dbb64d-f53e-41ee-a9aa-a3df6e7ceea2",
        "parentId" : "1dc289df-bb4d-4a33-9bd1-cc62d1ac7374",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "default is false and setting this to true would get you behaviour in 3.7.. This is new flag that when not set, on recursive directory watching doesnt update the watcher status right away but instead sets a timeout to update the watches for recursive structure.. (eg. when say removing or creating node_modules folder, while npm install is going, the recursive watchers aren't updated right away but on timeout so we aren't eg adding watches on directories that will anyways be deleted or recreated..)",
        "createdAt" : "2020-01-07T21:47:09Z",
        "updatedAt" : "2020-01-07T21:47:09Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "492e6a7f-20aa-4ddc-a3c1-81d8c2758478",
        "parentId" : "1dc289df-bb4d-4a33-9bd1-cc62d1ac7374",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Who would you say would use this feature? Here's how I'm describing it.\r\n\r\n> Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in `node_modules` from running `npm install`), but you might want to disable it with this flag for some atypical setups.",
        "createdAt" : "2020-01-07T23:13:24Z",
        "updatedAt" : "2020-01-07T23:13:44Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "198eab7a-a5cb-4f91-88ad-9ed79ca32e75",
        "parentId" : "1dc289df-bb4d-4a33-9bd1-cc62d1ac7374",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This is kind of backup flag that can disable this behavior if changes aren't reflected correctly/sooner.",
        "createdAt" : "2020-01-08T17:00:10Z",
        "updatedAt" : "2020-01-08T17:00:10Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "600bc04667b4bffc119368c8f10ac64f45ec1682",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +113,117 @@            type: \"boolean\",\n            category: Diagnostics.Advanced_Options,\n            description: Diagnostics.Synchronously_call_callbacks_and_update_the_state_of_directory_watchers_on_platforms_that_don_t_support_recursive_watching_natively,\n        },\n    ];"
  },
  {
    "id" : "f04e1235-4ab1-4069-8157-fb536b495172",
    "prId" : 35615,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35615#pullrequestreview-339526896",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "660386e3-d04c-4ede-9590-30e6a19c8427",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Is this polling for files, directories, or both?",
        "createdAt" : "2020-01-07T20:51:32Z",
        "updatedAt" : "2020-01-07T20:51:32Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "1c573d89-b3d4-427f-9818-0d7a7d81b084",
        "parentId" : "660386e3-d04c-4ede-9590-30e6a19c8427",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Its for both.. Any fallback when filesystem native fails uses this method",
        "createdAt" : "2020-01-07T21:44:36Z",
        "updatedAt" : "2020-01-07T21:44:36Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "600bc04667b4bffc119368c8f10ac64f45ec1682",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +100,104 @@        },\n        {\n            name: \"fallbackPolling\",\n            type: createMapFromTemplate({\n                fixedinterval: PollingWatchKind.FixedInterval,"
  },
  {
    "id" : "7f9204b4-d097-46db-88aa-91f89d458db8",
    "prId" : 35063,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35063#pullrequestreview-315865777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dc31a27-80c9-4c2d-ac12-5616a6058333",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You probably also want this when parsing tsconfig options.. Eg. https://github.com/microsoft/TypeScript/blob/37820defaeeae460b508b231ada5dd6c6337be17/src/compiler/commandLineParser.ts#L1400 ",
        "createdAt" : "2019-11-12T20:55:44Z",
        "updatedAt" : "2019-11-13T21:53:48Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "f8dc67cc-d2dc-4212-990a-6850d3a39f62",
        "parentId" : "1dc31a27-80c9-4c2d-ac12-5616a6058333",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Also note the tsconfig can be parsed by creating sourceFile to report error at location or by just using json apis.. So you would need to handle https://github.com/microsoft/TypeScript/blob/37820defaeeae460b508b231ada5dd6c6337be17/src/compiler/commandLineParser.ts#L2479 likes as well",
        "createdAt" : "2019-11-12T20:57:31Z",
        "updatedAt" : "2019-11-13T21:53:48Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "9d9369ab-8356-46b8-b452-4fbb858b9b0f",
        "parentId" : "1dc31a27-80c9-4c2d-ac12-5616a6058333",
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "Thanks, cool, will take a look!",
        "createdAt" : "2019-11-12T21:45:38Z",
        "updatedAt" : "2019-11-13T21:53:48Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "63e5b9eab9f21fac8f1812fc68dd7439e0e3efec",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1164,1168 @@                    }\n                    else {\n                        const possibleOption = getSpellingSuggestion(s, optionDeclarations, opt => `--${opt.name}`);\n                        if (possibleOption) {\n                            errors.push(createCompilerDiagnostic(diagnostics.unknownDidYouMeanDiagnostic, s, possibleOption.name));"
  },
  {
    "id" : "a90f4c32-a461-48a5-823a-2aed011978bb",
    "prId" : 35063,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35063#pullrequestreview-316561029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd0f8f19-5e96-418e-952b-6f2d5d369b88",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This seems incorrect? It needs unknown type aquisition? and corresponding did you mean",
        "createdAt" : "2019-11-13T19:05:12Z",
        "updatedAt" : "2019-11-13T21:53:48Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "43de6846-8d3b-44b8-abcb-f48d8b09b3a7",
        "parentId" : "cd0f8f19-5e96-418e-952b-6f2d5d369b88",
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "I feel like this should be right:\r\n\r\n```diff\r\nFrom \r\n\r\n- Diagnostics.Unknown_type_acquisition_option_0, errors\r\n\r\nto\r\n\r\n+ unknownOptionDiagnostic: Diagnostics.Unknown_type_acquisition_option_0\r\n+ unknownDidYouMeanDiagnostic: Diagnostics.Unknown_type_acquisition_option_0_Did_you_mean_1\r\n```",
        "createdAt" : "2019-11-13T21:15:40Z",
        "updatedAt" : "2019-11-13T21:53:48Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "63e5b9eab9f21fac8f1812fc68dd7439e0e3efec",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +2518,2522 @@        const typeAcquisition = convertEnableAutoDiscoveryToEnable(jsonOptions);\n\n        const diagnostics = {\n            unknownOptionDiagnostic: Diagnostics.Unknown_type_acquisition_option_0,\n            unknownDidYouMeanDiagnostic: Diagnostics.Unknown_type_acquisition_option_0_Did_you_mean_1 ,"
  },
  {
    "id" : "d7a7b104-ebb9-43bf-adf4-dd0bb92f869c",
    "prId" : 34505,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/34505#pullrequestreview-303600368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb09a818-1f49-4ba3-8584-71ab5a986045",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Does this \"affect\" semantic diagnostics?  Emit?",
        "createdAt" : "2019-10-16T01:24:55Z",
        "updatedAt" : "2019-10-18T00:22:56Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "a3cb6489-5cc9-4946-91fe-da4b7bd9f55f",
        "parentId" : "eb09a818-1f49-4ba3-8584-71ab5a986045",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Yes.",
        "createdAt" : "2019-10-17T23:30:22Z",
        "updatedAt" : "2019-10-18T00:22:56Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "7275e9ca93e634cb0e2d8e7f57bd3c00c72d9d93",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +220,224 @@            name: \"listFilesOnly\",\n            type: \"boolean\",\n            category: Diagnostics.Command_line_Options,\n            affectsSemanticDiagnostics: true,\n            affectsEmit: true,"
  },
  {
    "id" : "de30d774-8f06-4b80-bd9c-ccf1145c3f1e",
    "prId" : 34505,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/34505#pullrequestreview-302753641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91ef3493-342d-4c47-8ca9-76cdeaa5a3a1",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "@uniqueiniquity As far as I could tell, vstsc doesn't use this in build mode.  Does that sound right?",
        "createdAt" : "2019-10-16T01:28:35Z",
        "updatedAt" : "2019-10-18T00:22:56Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "0847d0f8-52a5-4527-9191-9618ed4bf07e",
        "parentId" : "91ef3493-342d-4c47-8ca9-76cdeaa5a3a1",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "Yes, it does. The idea is that in build mode, you should be depending on the incremental behavior of build mode itself, not our MSBuild version of it.",
        "createdAt" : "2019-10-16T15:52:35Z",
        "updatedAt" : "2019-10-18T00:22:56Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "2efd3234-4799-47cc-9d90-655b28f8e12b",
        "parentId" : "91ef3493-342d-4c47-8ca9-76cdeaa5a3a1",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "To confirm, that's \"Yes, it does sound right\" and not \"Yes, it does use the flag in build mode\"?",
        "createdAt" : "2019-10-16T17:29:24Z",
        "updatedAt" : "2019-10-18T00:22:56Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "a73f8783-0e96-4e8c-85d5-758698fe08b4",
        "parentId" : "91ef3493-342d-4c47-8ca9-76cdeaa5a3a1",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "Yes, the former - it does sound right.",
        "createdAt" : "2019-10-16T17:36:05Z",
        "updatedAt" : "2019-10-18T00:22:56Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7275e9ca93e634cb0e2d8e7f57bd3c00c72d9d93",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +220,224 @@            name: \"listFilesOnly\",\n            type: \"boolean\",\n            category: Diagnostics.Command_line_Options,\n            affectsSemanticDiagnostics: true,\n            affectsEmit: true,"
  },
  {
    "id" : "a06c405b-a40c-469e-9078-53d1fc8eaf7b",
    "prId" : 34505,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/34505#pullrequestreview-303600793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "692f8be0-f758-4b65-b0bf-eb36d99e0db7",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "We should also make this Advanced options instead.",
        "createdAt" : "2019-10-16T20:09:32Z",
        "updatedAt" : "2019-10-18T00:22:56Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "121a413d-d377-4022-a4f1-3fd315081d6b",
        "parentId" : "692f8be0-f758-4b65-b0bf-eb36d99e0db7",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Ignorant question: what's the difference?",
        "createdAt" : "2019-10-16T20:43:37Z",
        "updatedAt" : "2019-10-18T00:22:56Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "26b1447d-6d7c-4a64-83bb-6fd501c78dee",
        "parentId" : "692f8be0-f758-4b65-b0bf-eb36d99e0db7",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I think we concluded that `Command_line_Options` is fine.",
        "createdAt" : "2019-10-17T23:32:01Z",
        "updatedAt" : "2019-10-18T00:22:56Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "7275e9ca93e634cb0e2d8e7f57bd3c00c72d9d93",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +224,228 @@            affectsEmit: true,\n            isCommandLineOnly: true,\n            description: Diagnostics.Print_names_of_files_that_are_part_of_the_compilation_and_then_stop_processing\n        },\n"
  },
  {
    "id" : "ef8df371-7c14-4f01-846e-6deb7dd7baa8",
    "prId" : 34403,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/34403#pullrequestreview-302000629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "125ac6ea-1b11-4453-a180-6a2af05016d8",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "doesn't the main loop already run `toAbsolutePath` on `configFilePath` with all the other properties?",
        "createdAt" : "2019-10-15T00:26:59Z",
        "updatedAt" : "2019-10-15T14:58:52Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "8f5073f7-b2da-4891-93f1-dcd41e94647c",
        "parentId" : "125ac6ea-1b11-4453-a180-6a2af05016d8",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "`configFilePath` is not in `optionDeclarations` so it wont get normalized.",
        "createdAt" : "2019-10-15T15:28:02Z",
        "updatedAt" : "2019-10-15T15:28:02Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "758bd99879b3074ced6668f9fe68acb6cfdcd7d3",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +2056,2060 @@            }\n        }\n        if (result.configFilePath) {\n            result.configFilePath = toAbsolutePath(result.configFilePath);\n        }"
  },
  {
    "id" : "5d903a48-a45b-4c01-8894-010b6afbc183",
    "prId" : 32481,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32481#pullrequestreview-264419028",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb6b2bcc-d060-40dd-a0a0-f13401dcf6d8",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You want this to be internal since `convertToTSConfig` is internal too.",
        "createdAt" : "2019-07-19T20:04:25Z",
        "updatedAt" : "2019-07-20T08:42:28Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "3fd3c65a-822a-4d5b-9ba3-48fcc4299706",
        "parentId" : "fb6b2bcc-d060-40dd-a0a0-f13401dcf6d8",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "Oke, Thanks.",
        "createdAt" : "2019-07-19T20:32:15Z",
        "updatedAt" : "2019-07-20T08:42:28Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf6f060b99067d6b8442cca2e62a17ec8e960af3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1741,1745 @@\n    /** @internal */\n    export interface TSConfig {\n        compilerOptions: CompilerOptions;\n        compileOnSave: boolean | undefined;"
  },
  {
    "id" : "0aa1dc92-0c97-4e0d-84f6-a84841cc8ac0",
    "prId" : 32481,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32481#pullrequestreview-264463693",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b7a3992-d6d4-4612-a59c-4a9a64b8bf44",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Please add test similar to https://github.com/microsoft/TypeScript/blob/master/src/testRunner/unittests/config/showConfig.ts#L57 ",
        "createdAt" : "2019-07-19T23:13:45Z",
        "updatedAt" : "2019-07-20T08:42:28Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf6f060b99067d6b8442cca2e62a17ec8e960af3",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1791,1795 @@                exclude: configParseResult.configFileSpecs.validatedExcludeSpecs\n            } : {}),\n            compileOnSave: !!configParseResult.compileOnSave ? true : undefined\n        };\n        return config;"
  },
  {
    "id" : "c7e7f9c4-1526-4db7-be2e-2364f8b800cb",
    "prId" : 27060,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27060#pullrequestreview-155638325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b10ac809-9b3e-46dc-8f16-a0b635a7453e",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "While you have added this, could you please change ```changesAffectModuleResolution``` as well to use this instead of manual checks.",
        "createdAt" : "2018-09-14T17:56:43Z",
        "updatedAt" : "2018-09-15T00:28:27Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "563b3afd-e352-4706-8e76-f6b04229a105",
        "parentId" : "b10ac809-9b3e-46dc-8f16-a0b635a7453e",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : ":+1:",
        "createdAt" : "2018-09-14T19:49:53Z",
        "updatedAt" : "2018-09-15T00:28:27Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae51afa853b45c787d0172db368ffc4390fa69e3",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +442,446 @@            name: \"paths\",\n            type: \"object\",\n            affectsModuleResolution: true,\n            isTSConfigOnly: true,\n            category: Diagnostics.Module_Resolution_Options,"
  },
  {
    "id" : "cf941bd8-92ff-4235-81cd-7e7fc5e65868",
    "prId" : 26200,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26200#pullrequestreview-145409064",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebf8db02-7e01-4876-9c13-5b968c86042d",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "What determines whether affectsSemanticDiagnostics is true?",
        "createdAt" : "2018-08-10T21:13:33Z",
        "updatedAt" : "2018-08-10T21:47:09Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "543a97d3-717c-486b-ae4b-06fe4836d019",
        "parentId" : "ebf8db02-7e01-4876-9c13-5b968c86042d",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "The flags is true if changing value of the option, affects the semantic diagnostics reported(more/less) even if there is no change in file content. ( in turn whether to we need to throw away semantic diagnostics from cache(in --w mode) ) Eg. --noUnusedLocals can report more errors when turned on so it will have the flag true",
        "createdAt" : "2018-08-10T21:36:31Z",
        "updatedAt" : "2018-08-10T21:47:09Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "0e87262a-3102-41b2-812e-7a08b2935a27",
        "parentId" : "ebf8db02-7e01-4876-9c13-5b968c86042d",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "It seems easy to forget to set this when adding a new flag. Would making it required help? It would be annoying then, though.",
        "createdAt" : "2018-08-10T21:46:39Z",
        "updatedAt" : "2018-08-10T21:47:10Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "ef05539b-2f40-44a0-a91d-7bf5728d8fcf",
        "parentId" : "ebf8db02-7e01-4876-9c13-5b968c86042d",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "yeah I don't think we want this required.",
        "createdAt" : "2018-08-10T21:53:43Z",
        "updatedAt" : "2018-08-10T21:53:43Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "796302294fffe130b94c75d41443a7f96894940f",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +378,382 @@            name: \"noUnusedParameters\",\n            type: \"boolean\",\n            affectsSemanticDiagnostics: true,\n            showInSimplifiedHelpView: true,\n            category: Diagnostics.Additional_Checks,"
  },
  {
    "id" : "751b9acb-9c1d-4d25-9ea0-95cd78586c9f",
    "prId" : 22167,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22167#pullrequestreview-117650750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bab7a68b-a768-429a-9007-2d655de84d0c",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "is this returnValue check just for efficiency, to avoid building up a value that's not needed. \r\n\r\nActually, why isn't it needed, when existing callers needed it?",
        "createdAt" : "2018-04-26T21:13:13Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "a5a30202-22e2-42a8-8a99-e53ba7cad8b4",
        "parentId" : "bab7a68b-a768-429a-9007-2d655de84d0c",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "We dont need value when we are importing modules: We just want the error reporting on valid json syntax. So creating (potentially large) json object isnt needed hence the flag. In case of config file, we do need json object as well as checks which can be done simultaneously. ",
        "createdAt" : "2018-04-30T18:01:59Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "4874abc9-62d9-47a0-9b09-840ec8936d71",
        "parentId" : "bab7a68b-a768-429a-9007-2d655de84d0c",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Could you add a comment on the function header?",
        "createdAt" : "2018-05-04T15:44:02Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4143ae0c15acae0015f5aa00e8e2391ef156388",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +1103,1107 @@            parentOption: string | undefined\n        ): any {\n            const result: any = returnValue ? {} : undefined;\n            for (const element of node.properties) {\n                if (element.kind !== SyntaxKind.PropertyAssignment) {"
  },
  {
    "id" : "81617210-136a-441f-95dd-89a2594e7203",
    "prId" : 20385,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20385#pullrequestreview-80676560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2cde116-5528-4a2a-86f1-4cf9b04522f9",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "you need to build the new library as well. this is defined in our Jake/gulp files (sorry we have two build systems for now untill we are done with the migration).\r\nJakeFile: https://github.com/Microsoft/TypeScript/blob/8f1cdc9b0c649f1e4fe9d96718be93277baa2ecd/Jakefile.js#L229\r\nGulpFle: https://github.com/Microsoft/TypeScript/blob/8f1cdc9b0c649f1e4fe9d96718be93277baa2ecd/Gulpfile.ts#L168\r\nSee https://github.com/Microsoft/TypeScript/commit/6a737c88f7734d7f6d70a85c11bf109bbe18436e that added esNext target.",
        "createdAt" : "2017-12-01T08:02:37Z",
        "updatedAt" : "2017-12-02T15:34:20Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "9bba27d8-a31f-484e-a54e-ad2d06b4c7fb",
        "parentId" : "e2cde116-5528-4a2a-86f1-4cf9b04522f9",
        "authorId" : "c656ca6e-61ae-44c9-aca9-3838c5b38d4b",
        "body" : "@mhegazy thank you for the review. I am updating my PR accordingly.\r\n\r\nFYI, I see that jake LKG generates diagnosticMessages.generated.json file per locale. I think this is related to PR  #19308\r\n\r\nTherefore, in my PR you will have 2 commits:\r\n1. 'run jake LKG before es2018 addition' \r\n2. 'fix(es2018): add a target and an initial lib' (contains the es2018 lib + jake LKG run a second time)\r\nPlease let me know if I need to squash both commits",
        "createdAt" : "2017-12-02T14:46:30Z",
        "updatedAt" : "2017-12-02T15:34:20Z",
        "lastEditedBy" : "c656ca6e-61ae-44c9-aca9-3838c5b38d4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab4a2921f419c2ff264bad2f07f2044f57275e4c",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +122,126 @@                    \"es2016\": \"lib.es2016.d.ts\",\n                    \"es2017\": \"lib.es2017.d.ts\",\n                    \"es2018\": \"lib.es2018.d.ts\",\n                    \"esnext\": \"lib.esnext.d.ts\",\n                    // Host only"
  },
  {
    "id" : "2a832513-949f-4978-b2a5-4d0589f2b079",
    "prId" : 17330,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17330#pullrequestreview-51882893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf7c7806-38ae-405a-9ab2-6b7b28e40338",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "The check used to be `fileNames && fileNames.length`, is this okay to abbreviate?",
        "createdAt" : "2017-07-22T01:03:32Z",
        "updatedAt" : "2017-07-24T20:09:49Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "78327f13-8f23-4267-bebe-22828f04e6c8",
        "parentId" : "cf7c7806-38ae-405a-9ab2-6b7b28e40338",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This function is `@internal` and only called in one place (that's not a unit test), so if this were nullable I think we would know.",
        "createdAt" : "2017-07-24T20:08:20Z",
        "updatedAt" : "2017-07-24T20:11:01Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ef4fa4e450e8162653b4aa5b47450f98d54563a",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +1332,1336 @@                result.push(optionName && `${tab}${tab}${optionName}${ description && (makePadding(marginLength - optionName.length + 2) + description)}`);\n            }\n            if (fileNames.length) {\n                result.push(`${tab}},`);\n                result.push(`${tab}\"files\": [`);"
  },
  {
    "id" : "923c315a-4dcf-41b4-9bbb-4a91ccf25237",
    "prId" : 12373,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12373#pullrequestreview-9549392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bbca681-2ffe-47ad-b1a2-37e468a9f638",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "question to @mhegazy - do we consider this a breaking change since this API was public in 2.0. this is also related to name of section in config file\n",
        "createdAt" : "2016-11-19T07:26:10Z",
        "updatedAt" : "2016-11-23T01:08:55Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "64c06f59-4e77-4f44-b96e-90bf8c6c1560",
        "parentId" : "1bbca681-2ffe-47ad-b1a2-37e468a9f638",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "we never documented it intentionally , i would say. so it is a breaking change, but not one that would impact ppl.",
        "createdAt" : "2016-11-21T20:53:43Z",
        "updatedAt" : "2016-11-23T01:08:55Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "c1f2238d-8ebd-4890-a172-698618810766",
        "parentId" : "1bbca681-2ffe-47ad-b1a2-37e468a9f638",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "Adding support for the deprecated API (typingOptions.enableAutoDiscovery) just in case",
        "createdAt" : "2016-11-21T21:43:45Z",
        "updatedAt" : "2016-11-23T01:08:55Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b89d919a0de7167d45a377f69b13c977f4aa94d",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +1021,1025 @@    }\n\n    export function convertTypeAcquisitionFromJson(jsonOptions: any, basePath: string, configFileName?: string): { options: TypeAcquisition, errors: Diagnostic[] } {\n        const errors: Diagnostic[] = [];\n        const options = convertTypeAcquisitionFromJsonWorker(jsonOptions, basePath, errors, configFileName);"
  },
  {
    "id" : "0711b7f3-bd99-464d-9f4e-22dfcf7145cc",
    "prId" : 12373,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12373#pullrequestreview-9730318",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fead5daf-caa8-4b4d-95d2-dec8a0cb6a4d",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "can you add a comment that we support `typingOptions` only for backward compat purposes and should remove it in a couple of releases",
        "createdAt" : "2016-11-22T18:40:14Z",
        "updatedAt" : "2016-11-23T01:08:55Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b89d919a0de7167d45a377f69b13c977f4aa94d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +867,871 @@        // typingOptions has been deprecated and is only supported for backward compatibility purposes.\n        // It should be removed in future releases - use typeAcquisition instead.\n        const jsonOptions = json[\"typeAcquisition\"] || json[\"typingOptions\"];\n        const typeAcquisition: TypeAcquisition = convertTypeAcquisitionFromJsonWorker(jsonOptions, basePath, errors, configFileName);\n"
  },
  {
    "id" : "44859bdc-2f4b-4dae-9d59-d33670944c49",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-20104800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a8ab3e4-c27b-489b-8c7d-88e3edb99d7c",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "what if it is a computed property? or a method declaration?",
        "createdAt" : "2017-01-28T00:05:59Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "213a4315-1f52-4bc6-a912-173fe83cc73f",
        "parentId" : "5a8ab3e4-c27b-489b-8c7d-88e3edb99d7c",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "https://github.com/Microsoft/TypeScript/pull/12336/files#diff-057bf8560e435e388ba45f7810c3d08dR844 already reported error for this isn't it.",
        "createdAt" : "2017-02-03T21:11:08Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 202,
    "diffHunk" : "@@ -1,1 +1048,1052 @@                }\n\n                const keyText = getTextOfPropertyName(element.name);\n                const option = knownOptions ? knownOptions.get(keyText) : undefined;\n                if (extraKeyDiagnosticMessage && !option) {"
  },
  {
    "id" : "25c58dd4-c18b-464f-a9d4-add46c7d56ff",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8617fe86-6a83-4523-9ab1-a2bc841398fe",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Should this be `@internal`?\r\nAlso, I'd recommend using `errors: Push<Diagnostic>`, since it's really an output, not an input.\r\nIt would be a good idea to separate parse tree -> object conversion and options validation. This function does both at once.",
        "createdAt" : "2017-06-06T21:39:23Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +1009,1013 @@     * Convert the json syntax tree into the json value\n     */\n    export function convertToObject(sourceFile: JsonSourceFile, errors: Diagnostic[]): any {\n        return convertToObjectWorker(sourceFile, errors, /*knownRootOptions*/ undefined, /*jsonConversionNotifier*/ undefined);\n    }"
  },
  {
    "id" : "95ca5c1c-cf28-4391-aa28-c0160d2abf53",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-45060087",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1bcd21c-a4ea-464d-84c9-488177d93f66",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Did you mean `keyText !== undefined`?",
        "createdAt" : "2017-06-06T21:40:50Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "ba1c84c8-5242-4633-b260-d61cb8e9742d",
        "parentId" : "c1bcd21c-a4ea-464d-84c9-488177d93f66",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "This was merged like that??\r\n\r\nLooks like an overlooked bug.\r\n\r\nhttps://github.com/Microsoft/TypeScript/blob/master/src/compiler/commandLineParser.ts#L1056\r\n\r\nSurely it was meant to be `typeof keyText !== 'undefined'` and same for value.",
        "createdAt" : "2017-06-19T17:06:29Z",
        "updatedAt" : "2017-06-19T17:06:29Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "f7c332d2-96dd-4bb6-af61-5fa200256279",
        "parentId" : "c1bcd21c-a4ea-464d-84c9-488177d93f66",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "@sheetalkamat @andy-ms can you please have a look? This looks like a bug.\r\nThanks!",
        "createdAt" : "2017-06-20T08:07:56Z",
        "updatedAt" : "2017-06-20T08:07:56Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 208,
    "diffHunk" : "@@ -1,1 +1054,1058 @@                }\n                const value = convertPropertyValueToJson(element.initializer, option);\n                if (typeof keyText !== undefined && typeof value !== undefined) {\n                    result[keyText] = value;\n                    // Notify key value set, if user asked for it"
  },
  {
    "id" : "1706e11c-93c3-4c52-ae59-6cd0fce16c0c",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3549205e-25ca-419c-9e6e-5358c2a003ad",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Type annotations on parameters are not necessary, those should be inherited from `JsonConversionNotifier`.",
        "createdAt" : "2017-06-06T21:41:17Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 703,
    "diffHunk" : "@@ -1,1 +1609,1613 @@\n        const optionsIterator: JsonConversionNotifier = {\n            onSetValidOptionKeyValueInParent(parentOption: string, option: CommandLineOption, value: CompilerOptionsValue) {\n                Debug.assert(parentOption === \"compilerOptions\" || parentOption === \"typeAcquisition\" || parentOption === \"typingOptions\");\n                const currentOption = parentOption === \"compilerOptions\" ?"
  },
  {
    "id" : "81cfd185-10cb-43c6-a853-76e0cacd2224",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5bb16cb-77cd-492b-96c9-ac8b168e53fb",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Nit: refactor to check `option && typeof option.type === \"string\"` only once.",
        "createdAt" : "2017-06-06T21:42:23Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 266,
    "diffHunk" : "@@ -1,1 +1112,1116 @@                        errors.push(createDiagnosticForNodeInSourceFile(sourceFile, valueExpression, Diagnostics.String_literal_with_double_quotes_expected));\n                    }\n                    reportInvalidOptionValue(option && (typeof option.type === \"string\" && option.type !== \"string\"));\n                    const text = (<StringLiteral>valueExpression).text;\n                    if (option && typeof option.type !== \"string\") {"
  },
  {
    "id" : "e006edfb-2925-43be-83af-00667f7dde3a",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecfb38a9-c216-4b01-9976-42fc71682ecb",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This cast isn't valid. Someone might have passed an object literal to an option that shouldn't have an object value. We will report an error, but still continue on to this point.",
        "createdAt" : "2017-06-06T21:42:53Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 297,
    "diffHunk" : "@@ -1,1 +1143,1147 @@                    // If need arises, we can modify this interface and callbacks as needed\n                    if (option) {\n                        const { elementOptions, extraKeyDiagnosticMessage, name: optionName } = <TsConfigOnlyOption>option;\n                        return convertObjectLiteralExpressionToJson(objectLiteralExpression,\n                            elementOptions, extraKeyDiagnosticMessage, optionName);"
  },
  {
    "id" : "3599d19f-4c4f-4a66-bd19-8c45edf54049",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20b9923e-a4c7-41cf-a091-aea7837107b9",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "See above comment -- this cast isn't valid.",
        "createdAt" : "2017-06-06T21:43:18Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 311,
    "diffHunk" : "@@ -1,1 +1157,1161 @@                    return convertArrayLiteralExpressionToJson(\n                        (<ArrayLiteralExpression>valueExpression).elements,\n                        option && (<CommandLineOptionOfListType>option).element);\n            }\n"
  },
  {
    "id" : "7205385d-3674-4805-832f-6735fe920cdf",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7f30f06-49bc-4858-adfb-9867919d0c73",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This could just use `elements.map`? If you also want to filter out undefined values, maybe `mapDefined`.",
        "createdAt" : "2017-06-06T21:43:56Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 241,
    "diffHunk" : "@@ -1,1 +1087,1091 @@            elementOption: CommandLineOption | undefined\n        ): any[] {\n            const result: any[] = [];\n            for (const element of elements) {\n                result.push(convertPropertyValueToJson(element, elementOption));"
  },
  {
    "id" : "c2f26457-0143-4903-9d03-a736133b8385",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da1e94c0-2da4-49da-b7ad-e605d2fb501a",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Isn't a tsconfig with no `compilerOptions` provided still successfully parsed?",
        "createdAt" : "2017-06-06T21:44:11Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 573,
    "diffHunk" : "@@ -1,1 +1508,1512 @@    }\n\n    function isSuccessfulParsedTsconfig(value: ParsedTsconfig) {\n        return !!value.options;\n    }"
  },
  {
    "id" : "b49f340c-5bdf-4582-b41c-49c85f36dc06",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7f0c39e-fa19-4857-9b72-66a9cf21c0e5",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "What does `own` mean?",
        "createdAt" : "2017-06-06T21:44:37Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 633,
    "diffHunk" : "@@ -1,1 +1566,1570 @@    }\n\n    function parseOwnConfigOfJson(\n        json: any,\n        host: ParseConfigHost,"
  },
  {
    "id" : "f5df1323-fdaf-4e30-9a21-c9c6c66c3f7c",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f439616-9c07-4686-baec-56364e66f472",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I find it useful to use no space on TODO comments so the linter catches them. E.g. `//extend typeAcquisition`.",
        "createdAt" : "2017-06-06T21:45:10Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 626,
    "diffHunk" : "@@ -1,1 +1559,1563 @@                }\n                ownConfig.options = assign({}, extendedConfig.options, ownConfig.options);\n                // TODO extend type typeAcquisition\n            }\n        }"
  },
  {
    "id" : "af146668-cbbc-4a72-9ec1-32887fe30b37",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fe62c5f-a514-4c0f-8642-738393edaa63",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Could you document this? Why should it be non-enumerable and non-writable?",
        "createdAt" : "2017-06-06T21:45:51Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 408,
    "diffHunk" : "@@ -1,1 +1389,1393 @@\n    /*@internal*/\n    export function setConfigFileInOptions(options: CompilerOptions, configFile: JsonSourceFile) {\n        if (configFile) {\n            Object.defineProperty(options, \"configFile\", { enumerable: false, writable: false, value: configFile });"
  },
  {
    "id" : "2bf9c820-b022-42db-95f4-4989c8db6482",
    "prId" : 10359,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8bd31f0-d378-4582-aa70-e45a9793ee07",
        "parentId" : null,
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Love `in` instead of `hasProperty`.\n",
        "createdAt" : "2016-08-16T16:49:45Z",
        "updatedAt" : "2016-08-16T18:18:32Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "b4608113-d5fc-448a-a424-7e48238f7adc",
        "parentId" : "b8bd31f0-d378-4582-aa70-e45a9793ee07",
        "authorId" : "6d55dcf7-296e-4d3e-b0c5-1d175980aa0d",
        "body" : "`in` will do a proto walk. Make sure your maps have a null prototype, or else `'toString' in map` will always be true.\n",
        "createdAt" : "2016-08-16T18:04:19Z",
        "updatedAt" : "2016-08-16T18:18:32Z",
        "lastEditedBy" : "6d55dcf7-296e-4d3e-b0c5-1d175980aa0d",
        "tags" : [
        ]
      },
      {
        "id" : "03dbd073-4bf1-45f1-969e-477ea0a67fd0",
        "parentId" : "b8bd31f0-d378-4582-aa70-e45a9793ee07",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "@bterlson that's the point. Anything that is a `Map<T>` in the compiler now will always have a `null` prototype.\n",
        "createdAt" : "2016-08-16T18:20:23Z",
        "updatedAt" : "2016-08-16T18:20:23Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0146556e863f39eaa1922d66b1dda6b173f7b8a",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +498,502 @@        const map = opt.type;\n        if (key in map) {\n            return map[key];\n        }\n        else {"
  },
  {
    "id" : "5b742ffb-9254-4493-a17a-d3f3202488ec",
    "prId" : 10355,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e775cb22-73f8-41d2-8d51-42f1eae2ba74",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "`customTypeMap` is going to be undefined here for `rootDirs`, and i believe this will cause `getNameOfCompilerOptionValue` to throw.\n",
        "createdAt" : "2016-08-16T23:56:11Z",
        "updatedAt" : "2016-08-17T21:38:41Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "547c69fe-cdcf-44b8-8015-c2d001c5eccf",
        "parentId" : "e775cb22-73f8-41d2-8d51-42f1eae2ba74",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "it actually won't be because for `rootDirs` will have `customTypeMap` be undefined (as `getCustomTypeMapOfCommandLineOption` recursively call when you have \"list\" type and it will then return undefined) so it will already be catched [here](https://github.com/Microsoft/TypeScript/pull/10355#discussion-diff-75042499R746)\n\nThe reason we still have check for type of \"list\" [here](https://github.com/Microsoft/TypeScript/pull/10355#discussion-diff-75042499R752) is that we will know whether to iterate over input or not\n\nUnrelated but your comment reminds me is to add tests for invalid option and make sure we generate something that make sense. Should error in the cases of incorrect input and generate results? Currently we will just ignore those incorrect inputs\n",
        "createdAt" : "2016-08-17T00:22:49Z",
        "updatedAt" : "2016-08-17T21:38:41Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "d1f38070-f753-4cd6-b10f-d955bffe1c07",
        "parentId" : "e775cb22-73f8-41d2-8d51-42f1eae2ba74",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "> it actually won't be because for rootDirs will have customTypeMap be undefined \n\ni am a bit confused. the type of rootDirs is list, then we call `getCustomTypeMapOfCommandLineOption` with the element, the next time around the type of the element is `string`, so we return `undefined`. we can talk in person if you have time.\n",
        "createdAt" : "2016-08-17T20:27:11Z",
        "updatedAt" : "2016-08-17T21:38:41Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "22d6e82d21cccaf058e6f4a6d4fa74c9b8f1a452",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +746,750 @@                                        const convertedValue: string[] = [];\n                                        for (const element of value as (string | number)[]) {\n                                            convertedValue.push(getNameOfCompilerOptionValue(element, customTypeMap));\n                                        }\n                                        result[name] = convertedValue;"
  },
  {
    "id" : "9b1c6f8d-1402-47e5-9f33-58b2383b4107",
    "prId" : 9941,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d2c51c9-53ce-423b-b89a-fe2904d89371",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "kinda strange that you force them to write `.\\` but not the extension. i would say either be pedantic all the way or not. so i would just try to load the file, if it exists fine, if not error.\n",
        "createdAt" : "2016-08-25T18:13:58Z",
        "updatedAt" : "2016-08-30T00:18:10Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "4830dde2-c943-459b-bc59-080342d877a2",
        "parentId" : "4d2c51c9-53ce-423b-b89a-fe2904d89371",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "The reasoning for forbidding modules identifier like paths is, as described in the original issue, to reserve the form for potentially loading configs from `node_modules` in the future (to align with module resolution) (this way adding that isn't a breaking change) (eslint does this). If you'd like, you can spec that behavior out; but without that I think it'd be better to just reserve the form with an error for now.\n",
        "createdAt" : "2016-08-29T21:01:22Z",
        "updatedAt" : "2016-08-30T00:18:10Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8ff546512f3c27384a70239d73fc6be3d5dccbc",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +859,863 @@            }\n            let extendedConfigPath = toPath(extendedConfig, basePath, getCanonicalFileName);\n            if (!host.fileExists(extendedConfigPath) && !endsWith(extendedConfigPath, \".json\")) {\n                extendedConfigPath = `${extendedConfigPath}.json` as Path;\n                if (!host.fileExists(extendedConfigPath)) {"
  },
  {
    "id" : "58c453dc-5472-4b7a-bce8-14994076b48f",
    "prId" : 8787,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1865bd6f-37a1-4692-ab01-79e959746050",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "What if shortName was a `string | string[]`\n",
        "createdAt" : "2016-05-24T19:30:58Z",
        "updatedAt" : "2016-05-24T19:30:58Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "23c40e3e-da64-40d2-864b-bc9f11cdfbf1",
        "parentId" : "1865bd6f-37a1-4692-ab01-79e959746050",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Then we'd have more code later for the sake of exactly one thing?\n",
        "createdAt" : "2016-05-24T19:48:51Z",
        "updatedAt" : "2016-05-24T19:48:51Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "28f548a7405f89c2e8e60ddf35015cdd841572b2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +40,44 @@        {\n            name: \"help\",\n            shortName: \"?\",\n            type: \"boolean\"\n        },"
  },
  {
    "id" : "1a271c22-11f4-43a3-9ddd-7757d056f185",
    "prId" : 7775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f354a853-789c-4734-8285-262ab411ab84",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "We should mark this experimental as the semantics around this are still somewhat up for debate\n",
        "createdAt" : "2016-04-04T21:59:38Z",
        "updatedAt" : "2016-04-08T21:38:51Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "8d1d7754-2d2d-4aa8-90ed-2abefc26bec0",
        "parentId" : "f354a853-789c-4734-8285-262ab411ab84",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "at this point this is tsconfig only option and since it lacks description it is already excluded from the list of possible command line options. I think all these hides it well enough.\n",
        "createdAt" : "2016-04-04T23:41:44Z",
        "updatedAt" : "2016-04-08T21:38:51Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5e7d47782854fb9eefe1dd3c9d42705618d29d3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +318,322 @@        },\n        {\n            name: \"typesSearchPaths\",\n            type: \"list\",\n            isTSConfigOnly: true,"
  },
  {
    "id" : "a0939d0d-24be-45c4-8da2-ed2fcdd461ec",
    "prId" : 7522,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed171c84-4c3f-491c-a094-caa03aca49c5",
        "parentId" : null,
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "the `configFileName` parameter is optional here, but it is required in local functions inside `parseJsonConfigFileContent`, would that lead to confusion?\n",
        "createdAt" : "2016-03-16T22:46:38Z",
        "updatedAt" : "2016-03-16T23:35:59Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      },
      {
        "id" : "78c7ed1a-3868-437d-8d8d-7cc15f242a8a",
        "parentId" : "ed171c84-4c3f-491c-a094-caa03aca49c5",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Yea. it can be. Will be better to have it as optional as well. I also realize that `convertOptionFromJson` doesn't use the parameter at all\n",
        "createdAt" : "2016-03-16T22:52:40Z",
        "updatedAt" : "2016-03-16T23:35:59Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e2df0459eb1c144b15d8c2b6e02705886495675",
    "line" : 211,
    "diffHunk" : "@@ -1,1 +589,593 @@      *    file to. e.g. outDir\n      */\n    export function parseJsonConfigFileContent(json: any, host: ParseConfigHost, basePath: string, existingOptions: CompilerOptions = {}, configFileName?: string): ParsedCommandLine {\n        const errors: Diagnostic[] = [];\n        const compilerOptions: CompilerOptions = convertCompilerOptionsFromJson(optionDeclarations, json[\"compilerOptions\"], basePath, errors, configFileName);"
  },
  {
    "id" : "e369b666-4096-4fe5-adf8-bd4df5bce9f2",
    "prId" : 7179,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fdfa378-c762-4842-86f6-44f87ec4d1a9",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "else push an error?\n",
        "createdAt" : "2016-02-29T18:01:31Z",
        "updatedAt" : "2016-03-02T18:11:34Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "128285c5-7c6e-4800-86c4-981e7828d30a",
        "parentId" : "4fdfa378-c762-4842-86f6-44f87ec4d1a9",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "sounds good - we're doing it if the other options are invalid so makes sense here as well.\n",
        "createdAt" : "2016-03-01T19:12:04Z",
        "updatedAt" : "2016-03-02T18:11:34Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8772bc0a216023ae978b619fcd29a5567506225",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +612,616 @@                for (const id in jsonTypingOptions) {\n                    if (id === \"enableAutoDiscovery\") {\n                        if (typeof jsonTypingOptions[id] === \"boolean\") {\n                            options.enableAutoDiscovery = jsonTypingOptions[id];\n                        }"
  },
  {
    "id" : "362f8153-155b-4811-9bd2-f1f1afb5b2b1",
    "prId" : 7179,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2df4bab9-ac98-4540-ac14-847fa96e3e98",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Here `id` is `\"enableAutoDiscovery\"` which is known pretty well, so the generated error is incorrect: `Unknown typing option 'enableAutoDiscovery'`\n\nInstead it should complain about `enableAutoDiscovery` not being `boolean`\n",
        "createdAt" : "2016-03-04T11:31:59Z",
        "updatedAt" : "2016-03-04T11:31:59Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "4f120625-3378-48ca-8f31-57ef47644f95",
        "parentId" : "2df4bab9-ac98-4540-ac14-847fa96e3e98",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "Good point.\n",
        "createdAt" : "2016-03-04T18:27:35Z",
        "updatedAt" : "2016-03-04T18:27:35Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8772bc0a216023ae978b619fcd29a5567506225",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +616,620 @@                        }\n                        else {\n                            errors.push(createCompilerDiagnostic(Diagnostics.Unknown_typing_option_0, id));\n                        }\n                    }"
  },
  {
    "id" : "2f971569-d6bb-4faf-a073-6bf4a7bdfdbc",
    "prId" : 6739,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b19ba183-afcd-40af-9517-2a65cf13915a",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Please add a description for this one.\n",
        "createdAt" : "2016-03-30T18:37:41Z",
        "updatedAt" : "2016-04-07T15:02:00Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "7fe02c17-5384-4d9a-9570-be319d8d525e",
        "parentId" : "b19ba183-afcd-40af-9517-2a65cf13915a",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "done\n",
        "createdAt" : "2016-03-30T22:01:54Z",
        "updatedAt" : "2016-04-07T15:02:00Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c735b5cbf889cc703ed6d415d0af972439ddbbf",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +125,129 @@        {\n            name: \"noImplicitThis\",\n            type: \"boolean\",\n            description: Diagnostics.Raise_error_on_this_expressions_with_an_implied_any_type,\n        },"
  },
  {
    "id" : "2fbe5b5b-5e7b-4533-a7e7-3c15a5158f1c",
    "prId" : 6545,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9deff638-3691-4b33-82c0-7421db30dfab",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Default \"module\" to \"commonjs\" also for jsconfig.json files, as by default we infer CommonJS from `require` calls or `exports` assignments, and also this will allow usage of ES6 syntax without getting errors about setting the module type (which is mostly needed for emit, which usually doesn't apply in the .js case).\n",
        "createdAt" : "2016-01-21T23:51:41Z",
        "updatedAt" : "2016-01-22T00:13:23Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      }
    ],
    "commit" : "31f5502f2b4ae4e4ad1253c0f63b5e0241c8447f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +554,558 @@        if (configFileName && getBaseFileName(configFileName) === \"jsconfig.json\") {\n            options.module = ModuleKind.CommonJS;\n            options.allowJs = true;\n        }\n"
  },
  {
    "id" : "5913e5ae-805b-4a3c-81ab-3c1bbd85c00c",
    "prId" : 5980,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a103ade7-94ba-405e-8fd5-914c63da701f",
        "parentId" : null,
        "authorId" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "body" : "Can you add comments to all these regular expressions.. they are impossible to parse.\n",
        "createdAt" : "2015-12-16T21:41:12Z",
        "updatedAt" : "2016-01-05T18:25:48Z",
        "lastEditedBy" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1205ebdfbfebc94b35abab251237bdfbff213c5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +598,602 @@     *  \\/?$        # matches an optional trailing directory separator at the end of the string.\n     */\n    const invalidTrailingRecursionPattern = /(^|\\/)\\*\\*\\/?$/;\n\n    /**"
  },
  {
    "id" : "f9ed7b49-01d7-44ac-adba-db05878498d2",
    "prId" : 5980,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "923234b0-5c5a-4f4a-a76d-c6faf090dbb3",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "We use this map later when including\n",
        "createdAt" : "2016-02-10T19:39:44Z",
        "updatedAt" : "2016-02-10T19:39:44Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1205ebdfbfebc94b35abab251237bdfbff213c5",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +665,669 @@\n        // Literal file names (provided via the \"files\" array in tsconfig.json) are stored in a\n        // file map with a possibly case insensitive key. We use this map later when when including\n        // wildcard paths.\n        const literalFileMap: Map<string> = {};"
  },
  {
    "id" : "6a1cb701-29c0-4e30-886e-860aef11b9f1",
    "prId" : 5728,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30653f73-05cc-47ac-a532-42d57015a399",
        "parentId" : null,
        "authorId" : "53d12194-0586-4d18-876e-8f88ef868e77",
        "body" : "Leave a line note\n",
        "createdAt" : "2016-01-22T01:59:18Z",
        "updatedAt" : "2016-01-27T05:38:22Z",
        "lastEditedBy" : "53d12194-0586-4d18-876e-8f88ef868e77",
        "tags" : [
        ]
      }
    ],
    "commit" : "adacad326a3d023f82f076b2aa5f92334610226b",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +302,306 @@            // this option can only be specified in tsconfig.json\n            // use type = object to copy the value as-is\n            name: \"rootDirs\",\n            type: \"object\",\n            isTSConfigOnly: true,"
  },
  {
    "id" : "6175aa07-c5f9-4627-a7cd-d1dca0562b0e",
    "prId" : 5471,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85dbd056-e18e-4095-9516-9ee5fb82c341",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why are we passing the existing options here? previously the caller has to call extend on them, so why is the change in the API?\n",
        "createdAt" : "2015-11-10T18:59:53Z",
        "updatedAt" : "2015-11-18T19:27:06Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "dced3f4a-6d37-4c06-af26-af75a144646c",
        "parentId" : "85dbd056-e18e-4095-9516-9ee5fb82c341",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "plus one to the question\n",
        "createdAt" : "2015-11-16T20:40:15Z",
        "updatedAt" : "2015-11-18T19:27:06Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "a19307d533d646d3366f7d4a512718460e065d52",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +480,484 @@      *    file to. e.g. outDir\n      */\n    export function parseJsonConfigFileContent(json: any, host: ParseConfigHost, basePath: string, existingOptions: CompilerOptions = {}): ParsedCommandLine {\n        const { options: optionsFromJsonConfigFile, errors } = convertCompilerOptionsFromJson(json[\"compilerOptions\"], basePath);\n"
  },
  {
    "id" : "8d9ad8c5-fba7-4408-9a21-61168c2578a7",
    "prId" : 5275,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67b1e1e5-0f1e-4aca-b0aa-5adac1ae36a2",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "`--useCaseSensitiveLookups` or\n`--caseSensitiveFileNames`\n",
        "createdAt" : "2015-10-26T18:39:51Z",
        "updatedAt" : "2015-10-27T20:31:46Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d4aa7d9c0a3fbe5c731e0b4288839538541e5d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +250,254 @@        },\n        {\n            name: \"forceConsistentCasingInFileNames\",\n            type: \"boolean\",\n            description: Diagnostics.Disallow_inconsistently_cased_references_to_the_same_file"
  },
  {
    "id" : "f4f25899-ae56-4919-8033-388cce2de1ab",
    "prId" : 4811,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38bd1eb3-85fe-4a5b-bcff-f1c1449cc6e1",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "you do not need that. just leave target as `es6` and allow for additional `--module` flag. today we make it an error to use `--target es6` with `--module`; relaxing this should be sufficient.\n",
        "createdAt" : "2015-09-15T22:56:28Z",
        "updatedAt" : "2015-09-22T00:39:03Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "7634e9e9-3936-41e6-b9c5-2ce63751b0b7",
        "parentId" : "38bd1eb3-85fe-4a5b-bcff-f1c1449cc6e1",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Internally we checked for language version like it was a module kind in a number of places. Is it just a matter of not wanting to make it able to be specified explicitly?\n",
        "createdAt" : "2015-09-15T23:01:18Z",
        "updatedAt" : "2015-09-22T00:39:03Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "2c0c6217-2cb5-460f-9410-22310d99387d",
        "parentId" : "38bd1eb3-85fe-4a5b-bcff-f1c1449cc6e1",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "we do not support `target: es5` with `module: es6`, so why allow it and add additional burden on users. \n`--target es6` with no `--module` is implied to be `es6`, if another `--module` tareget is specified, emit should use that.\n",
        "createdAt" : "2015-09-15T23:26:09Z",
        "updatedAt" : "2015-09-22T00:39:03Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "146df610-a01b-47c3-95c6-95c93d0b602e",
        "parentId" : "38bd1eb3-85fe-4a5b-bcff-f1c1449cc6e1",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Alright, so I'm just removing it as an option for the --module command line flag.\n",
        "createdAt" : "2015-09-16T17:56:32Z",
        "updatedAt" : "2015-09-22T00:39:03Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ff551ce081aec65fb191dd1bcf0bea7a29d3a03",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +77,81 @@                \"system\": ModuleKind.System,\n                \"umd\": ModuleKind.UMD,\n                \"es6\": ModuleKind.ES6,\n            },\n            description: Diagnostics.Specify_module_code_generation_Colon_commonjs_amd_system_umd_or_es6,"
  },
  {
    "id" : "aafdab25-b7c6-4a22-99d3-7f9a0f7ab4d7",
    "prId" : 4788,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d92fd91-822a-4b6a-82ce-23a4e2d36bbc",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "nit : Report_errors\n",
        "createdAt" : "2015-09-16T19:05:59Z",
        "updatedAt" : "2015-10-29T16:34:06Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "57fd77d5-3146-4501-a71d-505ee03ca55e",
        "parentId" : "9d92fd91-822a-4b6a-82ce-23a4e2d36bbc",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "we don't have a consistent style here. My understanding of phrasing is: 'use this option to do...' but not 'this option does...' so I'd prefer to keep existing version. Probably @JsonFreeman has different opinion.\n",
        "createdAt" : "2015-09-16T19:36:08Z",
        "updatedAt" : "2015-10-29T16:34:06Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "674d8a8f-fb2c-4192-ac6f-c830c279511d",
        "parentId" : "9d92fd91-822a-4b6a-82ce-23a4e2d36bbc",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "@yuit's comment was about singular vs plural, rather than the mood, if I understood correctly. The mood inconsistency is a different issue.\n",
        "createdAt" : "2015-09-16T22:45:09Z",
        "updatedAt" : "2015-10-29T16:34:06Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "a1d7b275-361c-4245-bc7d-f016ea8eb10f",
        "parentId" : "9d92fd91-822a-4b6a-82ce-23a4e2d36bbc",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "@JsonFreeman @vladima yep, it is more about the consistency on plural or singular on the word \"error\". I will be ok either one but I think it is nice to keep them consistent\n",
        "createdAt" : "2015-09-17T23:27:39Z",
        "updatedAt" : "2015-10-29T16:34:06Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f11c0b2debb0dbf53ebc0a34a436a72c69007cb",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +257,261 @@            name: \"noImplicitReturns\",\n            type: \"boolean\",\n            description: Diagnostics.Report_error_when_not_all_code_paths_in_function_return_a_value\n        },\n        {"
  },
  {
    "id" : "2d47134a-9c52-4ba1-b611-8604470feb61",
    "prId" : 4724,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05d86cf6-d53a-45c1-8826-0ff6bd217986",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i do not think this is the right place for this change. normalizePath is expected to remove all \".\" and \"..\" s.\n",
        "createdAt" : "2015-09-10T18:46:44Z",
        "updatedAt" : "2015-09-10T18:46:44Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "22b0aa00-7341-41bb-bb1c-c26872010ba5",
        "parentId" : "05d86cf6-d53a-45c1-8826-0ff6bd217986",
        "authorId" : "5046e90e-30dc-40c2-a206-eb3d90844c1c",
        "body" : "@mhegazy Then probably we have to use `typeof options.somePathOption === 'string'` everywhere when we need to check if a path option is specified. Currently zero-length path options are treated as not specified...\n",
        "createdAt" : "2015-09-10T19:06:09Z",
        "updatedAt" : "2015-09-10T19:07:14Z",
        "lastEditedBy" : "5046e90e-30dc-40c2-a206-eb3d90844c1c",
        "tags" : [
        ]
      },
      {
        "id" : "fb45042f-85ba-45bc-9f9e-52968fc8d35d",
        "parentId" : "05d86cf6-d53a-45c1-8826-0ff6bd217986",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i see.. @DanielRosenwasser can you take a look\n",
        "createdAt" : "2015-09-10T19:22:50Z",
        "updatedAt" : "2015-09-10T19:22:50Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a9bd1432c01352c2247fd05177625a4438f3ad0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +447,451 @@                            if (opt.isFilePath) {\n                                value = normalizePath(combinePaths(basePath, value));\n                                if (value === \"\") {\n                                    value = \".\";\n                                }"
  },
  {
    "id" : "bea71299-c4a5-4f62-bacf-018797ef9852",
    "prId" : 29,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e145b24-2770-4f04-a40c-588361dec022",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "How is this different from codepage?\n",
        "createdAt" : "2014-07-16T18:27:20Z",
        "updatedAt" : "2014-07-16T18:47:09Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "1215015b-7b90-4833-95b1-0cafb09b074a",
        "parentId" : "8e145b24-2770-4f04-a40c-588361dec022",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "The 'charset' option takes a character set name as an argument (e.g. \"--charset gb18030\") whereas the (currently unsupported) 'codepage' option takes a code page number (e.g. \"--codepage 54936\").\n",
        "createdAt" : "2014-07-16T18:53:11Z",
        "updatedAt" : "2014-07-16T18:53:28Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3f5993770078c42830a068092484b621e8ea9ef",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +15,19 @@\n    var options: CommandLineOption[] = [\n        { name: \"charset\", type: \"string\" },\n        { name: \"codepage\", type: \"number\" },\n        { name: \"declaration\", type: \"boolean\" },"
  }
]