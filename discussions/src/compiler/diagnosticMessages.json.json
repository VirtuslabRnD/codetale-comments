[
  {
    "id" : "13c3d1e0-cc8c-4a08-9462-1450d6c33feb",
    "prId" : 44876,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44876#pullrequestreview-703148582",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6d284d9-ddb0-4862-846f-c3d748ce070d",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "1. It's not really a duplicate identifier, just a reserved one in special cases.\r\n2. This avoids naming the compiler, which I don't think any other messages do.\r\n3. This avoids adding 'The', which is otherwise needed.\r\n4. I don't think any other identifiers need this treatment, so I'd vote to make this not paramaterised. Not sure about this point though.\r\n```suggestion\r\n    \"'Reflect' is reserved for emitting 'super' references in static initializers.\": {\r\n```",
        "createdAt" : "2021-07-08T23:50:55Z",
        "updatedAt" : "2021-07-09T00:17:31Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "8ee2bdbf-22c6-41bb-bd49-88a484581411",
        "parentId" : "e6d284d9-ddb0-4862-846f-c3d748ce070d",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "We have a number of messages worded in the exact same way:\r\nhttps://github.com/microsoft/TypeScript/blob/dc237b317ed4bbccd043ddda802ffde00362a387/src/compiler/diagnosticMessages.json#L1777\r\nhttps://github.com/microsoft/TypeScript/blob/dc237b317ed4bbccd043ddda802ffde00362a387/src/compiler/diagnosticMessages.json#L1789\r\nhttps://github.com/microsoft/TypeScript/blob/dc237b317ed4bbccd043ddda802ffde00362a387/src/compiler/diagnosticMessages.json#L1801\r\nhttps://github.com/microsoft/TypeScript/blob/dc237b317ed4bbccd043ddda802ffde00362a387/src/compiler/diagnosticMessages.json#L1941\r\nhttps://github.com/microsoft/TypeScript/blob/dc237b317ed4bbccd043ddda802ffde00362a387/src/compiler/diagnosticMessages.json#L2245\r\nhttps://github.com/microsoft/TypeScript/blob/dc237b317ed4bbccd043ddda802ffde00362a387/src/compiler/diagnosticMessages.json#L2281\r\nhttps://github.com/microsoft/TypeScript/blob/dc237b317ed4bbccd043ddda802ffde00362a387/src/compiler/diagnosticMessages.json#L2337",
        "createdAt" : "2021-07-09T02:11:08Z",
        "updatedAt" : "2021-07-09T02:11:08Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "d8bca2bc-d605-4534-b4d3-928692e50ff6",
        "parentId" : "e6d284d9-ddb0-4862-846f-c3d748ce070d",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Odd, the `_super` one says `Duplicate identifier` for me locally.",
        "createdAt" : "2021-07-09T02:16:31Z",
        "updatedAt" : "2021-07-09T02:16:32Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "087c63e7-13fa-4b0a-8e9f-d16cd014d823",
        "parentId" : "e6d284d9-ddb0-4862-846f-c3d748ce070d",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Oh, I didn't see those. I'd vote to change them all at some point but obviously not here.",
        "createdAt" : "2021-07-09T15:09:49Z",
        "updatedAt" : "2021-07-09T15:10:07Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a7919a7c292b9102935ba1ea7712a548c06e756",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3353,3357 @@        \"code\": 2817\n    },\n    \"Duplicate identifier '{0}'. Compiler reserves name '{1}' when emitting 'super' references in static initializers.\": {\n        \"category\": \"Error\",\n        \"code\": 2818"
  },
  {
    "id" : "dcf5b132-1bf8-4979-8f35-552abd854473",
    "prId" : 43666,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43666#pullrequestreview-639229293",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "513c6d77-8425-40fc-a1ba-d8a65557f872",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "@DanielRosenwasser How's the wording?",
        "createdAt" : "2021-04-19T16:58:50Z",
        "updatedAt" : "2021-04-19T16:58:51Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "d03158ff-ffdb-48f8-8077-79d1f47938f5",
        "parentId" : "513c6d77-8425-40fc-a1ba-d8a65557f872",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Seems good!",
        "createdAt" : "2021-04-19T19:22:29Z",
        "updatedAt" : "2021-04-19T19:22:29Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "331dfc46d7e5c301791b27652e89b63997853f0f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +5042,5046 @@        \"reportsDeprecated\": true\n    },\n    \"Project '{0}' is being forcibly rebuilt\": {\n        \"category\": \"Message\",\n        \"code\": 6388"
  },
  {
    "id" : "f6293c10-82de-47e3-8439-31d820b2d620",
    "prId" : 43615,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43615#pullrequestreview-647694396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1391aeab-6a2f-4a1d-ad47-d0016ae372ad",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "```suggestion\r\n    \"Property '{0}' cannot have an initializer because it is marked 'abstract'.\": {\r\n```\r\n\r\nMaybe? Then https://github.com/microsoft/TypeScript/actions?query=workflow%3A%22Accept+Baselines+and+Fix+Lints%22",
        "createdAt" : "2021-04-28T22:35:45Z",
        "updatedAt" : "2021-04-28T22:35:45Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e1387375b08ab74791d4aa70f5e75abe6e3468f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +880,884 @@        \"code\": 1266\n    },\n    \"Property '{0}' cannot have an initializer because it is marked abstract.\": {\n        \"category\": \"Error\",\n        \"code\": 1267"
  },
  {
    "id" : "9b9b015f-f41d-48e5-b048-19c0fa0bebfa",
    "prId" : 42514,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42514#pullrequestreview-649151605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89269f09-22b9-4da2-b717-39f69c6af168",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Does this need to start with 6243 instead of 6250 ..  i dont think it needs to be different order start.. if needs to be then 6300 or some such larger number might be better giving enough room in between these slots for additions?",
        "createdAt" : "2021-04-29T20:05:27Z",
        "updatedAt" : "2021-04-29T20:09:41Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "3767070d-c87e-4b16-b12a-ffe4bf30b401",
        "parentId" : "89269f09-22b9-4da2-b717-39f69c6af168",
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "Need: nope - I can change it, makes sense to me üëçüèª ",
        "createdAt" : "2021-04-30T12:11:32Z",
        "updatedAt" : "2021-04-30T12:11:32Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "7aee1e01dd619cf388fcef6a8ae2fca4c56c6bb3",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +4855,4859 @@    },\n\n    \"Modules\": {\n        \"category\": \"Message\",\n        \"code\": 6244"
  },
  {
    "id" : "34a6c6d0-f4ce-4b39-9023-cc5205e59463",
    "prId" : 40336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40336#pullrequestreview-488233224",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9aefd5f-d441-440a-8a90-81a521de9c70",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Just noticed this when handling a merge conflict:\r\n\r\n```suggestion\r\n    \"Template literal type argument '{0}' is not a literal type or a generic type.\": {\r\n```\r\n",
        "createdAt" : "2020-09-15T00:01:01Z",
        "updatedAt" : "2020-09-15T00:01:02Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "d38a3880d4a65be90fe1abee9d6d96f2819e399d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3029,3033 @@        \"code\": 2792\n    },\n    \"Template literal type argument '{0}' is not literal type or a generic type.\": {\n        \"category\": \"Error\",\n        \"code\": 2793"
  },
  {
    "id" : "caf50f61-944c-43f1-a181-7896007bf91f",
    "prId" : 38720,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38720#pullrequestreview-431060863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f225eaa-4841-49b2-9ce6-0df82c27893c",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Hopefully this doesn‚Äôt turn into the GIF pronunciation debate, but I don‚Äôt pronounce the `@` character so I think these articles should be ‚Äúa,‚Äù not ‚Äúan‚Äù üôÉ ",
        "createdAt" : "2020-06-15T20:34:52Z",
        "updatedAt" : "2020-06-18T02:07:05Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "f19cafb5-4d2f-43cb-abe0-0e65ae175c3d",
        "parentId" : "0f225eaa-4841-49b2-9ce6-0df82c27893c",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Pretty glad we moved away from \"working @Ôªømicrosoft\" to \"working at @Ôªømicrosoft\"",
        "createdAt" : "2020-06-15T21:10:00Z",
        "updatedAt" : "2020-06-18T02:07:05Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "8633af54-be1b-4ec3-a260-03d6fbd09696",
        "parentId" : "0f225eaa-4841-49b2-9ce6-0df82c27893c",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "... I pronounce the `@`. üòÜ ",
        "createdAt" : "2020-06-15T21:37:00Z",
        "updatedAt" : "2020-06-18T02:07:05Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "e1ff7fd2-25a1-4879-8445-d49b55f23b07",
        "parentId" : "0f225eaa-4841-49b2-9ce6-0df82c27893c",
        "authorId" : "f3e790bf-ebdf-4022-ae47-b1f0f851b0cc",
        "body" : "When @weswigham first mentioned this as PR comment, I didn't fully agree with him, but when I read it over many times I was internally conflicted which way is the right way. In the end I chose to appease @weswigham ü§∑ ",
        "createdAt" : "2020-06-15T23:33:00Z",
        "updatedAt" : "2020-06-18T02:07:05Z",
        "lastEditedBy" : "f3e790bf-ebdf-4022-ae47-b1f0f851b0cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "b950086928d7a67c7a26dfa5528c9fb24ebe9bae",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +5032,5036 @@        \"code\": 17016\n    },\n    \"An @jsxFrag pragma is required when using an @jsx pragma with JSX fragments.\": {\n        \"category\": \"Error\",\n        \"code\": 17017"
  },
  {
    "id" : "e3b80ef8-65cb-4fbb-8f0e-592f22050e72",
    "prId" : 38523,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38523#pullrequestreview-412854986",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a60d358-95ef-482f-bc3b-da25facf7b72",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This is where you add the flag",
        "createdAt" : "2020-05-15T17:57:19Z",
        "updatedAt" : "2020-06-19T00:15:17Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6434447c678c8779badc6157b5d8ab0c217e0c75",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +4607,4611 @@        \"code\": 6385,\n        \"reportsDeprecated\": true\n    },\n\n    \"The expected type comes from property '{0}' which is declared here on type '{1}'\": {"
  },
  {
    "id" : "0f138208-e3b8-49b6-bc91-d70ae830c799",
    "prId" : 36727,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36727#pullrequestreview-356863639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3acbc23-b379-4b7d-9d12-8c36709b3eef",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "‚Äú$20 says you‚Äôre missing a semicolon‚Äù",
        "createdAt" : "2020-02-11T17:47:00Z",
        "updatedAt" : "2020-02-11T17:47:00Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cae3bdaa95b743a1134374174b26370aa49f830",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2684,2688 @@        \"code\": 2733\n    },\n    \"Are you missing a semicolon?\": {\n        \"category\": \"Error\",\n        \"code\": 2734"
  },
  {
    "id" : "7bcbef95-574d-4233-a196-7b596942ec85",
    "prId" : 36496,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36496#pullrequestreview-350356473",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "534d4876-87f8-4a67-be7b-31036a6fb758",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "@DanielRosenwasser added you to look at the new error messages",
        "createdAt" : "2020-01-29T17:48:32Z",
        "updatedAt" : "2020-01-29T21:47:01Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "64c65c90-503e-4883-81a9-07a8a9addede",
        "parentId" : "534d4876-87f8-4a67-be7b-31036a6fb758",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Looks good! Maybe call it an `import =` alias to be clearer, but I think this is fine.",
        "createdAt" : "2020-01-29T18:26:48Z",
        "updatedAt" : "2020-01-29T21:47:01Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "47f20223-cc41-42ab-bf4f-16abcd4ea9cd",
        "parentId" : "534d4876-87f8-4a67-be7b-31036a6fb758",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I think it‚Äôs weird to have non-word tokens in error messages without quotes, but I also think it‚Äôs weird to say `'import ='` because that‚Äôs not an actual excerpt of syntax (it‚Äôs missing the identifier in the middle), so I wasn‚Äôt sure how to format that ü§î ",
        "createdAt" : "2020-01-29T18:32:38Z",
        "updatedAt" : "2020-01-29T21:47:01Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "e4bdb234-a3fb-46f4-bf0d-e35f12ef4bd7",
        "parentId" : "534d4876-87f8-4a67-be7b-31036a6fb758",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "the error span should make it pretty clear",
        "createdAt" : "2020-01-29T18:40:50Z",
        "updatedAt" : "2020-01-29T21:47:01Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "25c3f59a-946f-4215-bc7f-a195663c37bb",
        "parentId" : "534d4876-87f8-4a67-be7b-31036a6fb758",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "That was my thought as well üëç ",
        "createdAt" : "2020-01-29T19:11:55Z",
        "updatedAt" : "2020-01-29T21:47:02Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "0972e5aed031fdf09980fd75914a6281c588c149",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1135,1139 @@        \"category\": \"Error\",\n        \"code\": 1380\n    },\n\n    \"The types of '{0}' are incompatible between these types.\": {"
  },
  {
    "id" : "0ae99213-b708-419e-9411-bde14d34fad3",
    "prId" : 32788,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32788#pullrequestreview-273981190",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b66e8722-434a-4bff-848d-1a733a35d9f0",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "these seem awfully similar.",
        "createdAt" : "2019-08-09T22:24:08Z",
        "updatedAt" : "2019-08-12T23:06:22Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "9dadfa58-68ac-429c-ba24-a18dac721120",
        "parentId" : "b66e8722-434a-4bff-848d-1a733a35d9f0",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Yes but it follows other verbose message printed by solution builder",
        "createdAt" : "2019-08-12T22:21:43Z",
        "updatedAt" : "2019-08-12T23:06:22Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a9198a53af6fc56bbcc408fdc7c3ef5bd933213",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +4180,4184 @@        \"category\": \"Message\",\n        \"code\": 6383\n    },\n\n    \"The expected type comes from property '{0}' which is declared here on type '{1}'\": {"
  },
  {
    "id" : "909aa573-e51a-4212-8ccb-27e7b4564fd8",
    "prId" : 30829,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30829#pullrequestreview-267711393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccddce9d-d47f-4620-8fe0-1ffde2880e35",
        "parentId" : null,
        "authorId" : "7c818427-dca2-4bb8-94a1-f7e70e4a264a",
        "body" : "@sandersn replying to your comment GitHub won't let me reply to in context:\r\n\r\n> I personally think 'name' is fine because (1) people will know what you mean (2) it's similar to existing messages, so people will be able to skim it faster. But I don't mind 'spelling' if you feel strongly about it.\r\n\r\nThe problem I see with 'name' is that the two private identifiers have *different* private names that are spelled the same. If we use 'name' here, we are effectively saying:\r\n\r\n\"These two things have the same **name** but different **private names**\"\r\n\r\nI can see two solutions:\r\n1. 'spelling'\r\n2. OR banish 'private name' from our terminology, as 'name' is thoroughly overloaded.\r\n\r\n(2) this would require the following tweaks to terminology:\r\n- change \"because it is privately named\" to \"because it has a private identifier\"\r\n- call the feature: \"hash private members\" or \"hard private members\" or \"private identifier members\" or something better\r\n\r\nSorry, I used to be a philosopher and can get a little hung up on terminology. Would be good to pick something though. The reason for the re-think is that the spec recently renamed the the syntax production to 'PrivateIdentifier'.\r\n\r\ncc @DanielRosenwasser who is also feedbacking the diagnosticMessages",
        "createdAt" : "2019-07-17T13:55:07Z",
        "updatedAt" : "2019-12-24T10:22:58Z",
        "lastEditedBy" : "7c818427-dca2-4bb8-94a1-f7e70e4a264a",
        "tags" : [
        ]
      },
      {
        "id" : "ef81e1d6-94e8-463b-bf78-3129076567da",
        "parentId" : "ccddce9d-d47f-4620-8fe0-1ffde2880e35",
        "authorId" : "7c818427-dca2-4bb8-94a1-f7e70e4a264a",
        "body" : "resolving, as this is discussed elsewhere https://github.com/microsoft/TypeScript/pull/30829#discussion_r308171538",
        "createdAt" : "2019-07-29T11:04:38Z",
        "updatedAt" : "2019-12-24T10:22:58Z",
        "lastEditedBy" : "7c818427-dca2-4bb8-94a1-f7e70e4a264a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbb84d1e81b35f944d994f6c71c3eda40f944b85",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +5387,5391 @@        \"code\": 18013\n    },\n    \"The property '{0}' cannot be accessed on type '{1}' within this class because it is shadowed by another private identifier with the same spelling.\": {\n        \"category\": \"Error\",\n        \"code\": 18014"
  },
  {
    "id" : "fffd13a2-2e0e-405d-857a-901d36d1f44a",
    "prId" : 30089,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30089#pullrequestreview-210967399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9c2e834-3bb9-4fe8-a392-780eb8541032",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "I think we agreed on \"Convert to parameters object\" ?",
        "createdAt" : "2019-03-05T23:02:52Z",
        "updatedAt" : "2019-03-06T00:56:42Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b2d6a2f5488c279f957bfca518b8591a15358a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4873,4877 @@        \"code\": 95074\n    },\n    \"Convert to named parameters\": {\n        \"category\": \"Message\",\n        \"code\": 95075"
  },
  {
    "id" : "2451e223-3580-4dad-b251-acba4ba14ce3",
    "prId" : 27016,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27016#pullrequestreview-155656811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "020dde35-e599-4ae4-be0f-8d7856ddd476",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">`new` [](start = 25, length = 5)\r\n\r\nElsewhere, \"new\" is in single quotes.",
        "createdAt" : "2018-09-14T20:48:48Z",
        "updatedAt" : "2018-09-14T20:48:49Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "7af89a899e6ceed88b22d255df806981242f5608",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +3721,3725 @@        \"code\": 6212\n    },\n    \"Did you mean to use `new` with this expression?\": {\n        \"category\": \"Message\",\n        \"code\": 6213"
  },
  {
    "id" : "35b8fd18-45b5-4cc4-9223-0ee3e5041789",
    "prId" : 26446,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26446#pullrequestreview-150683597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0faa498-96b6-42ef-8c37-69211c74da7a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Remove the stray space at the end.",
        "createdAt" : "2018-08-29T17:57:20Z",
        "updatedAt" : "2019-04-30T01:03:10Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cab6e04ce1a9d7d255aa227bd9dbf6582425a013",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4273,4277 @@        \"code\": 7051\n    },\n    \"Element implicitly has an 'any' type because type '{0}' has no index signature. Did you mean to call '{1}' ?\": {\n        \"category\": \"Error\",\n        \"code\": 7052"
  },
  {
    "id" : "2c84f202-1877-4374-b34e-8659af9cd1f1",
    "prId" : 25251,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25251#pullrequestreview-133052794",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d78935bc-53f8-47e8-90b4-cce72fc93eaf",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "If those are statically known primitive types, can we include actual values in error message? Like:\r\n\r\n`\"These values are known to be '{0}' and '{1}', rendering this condition always '{2}'.\"`",
        "createdAt" : "2018-06-28T09:51:28Z",
        "updatedAt" : "2018-06-28T09:53:09Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "ca866609-9d74-49bb-9843-8f7740b4ce8b",
        "parentId" : "d78935bc-53f8-47e8-90b4-cce72fc93eaf",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Check out #25311",
        "createdAt" : "2018-06-28T23:09:39Z",
        "updatedAt" : "2018-06-28T23:09:39Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "704cd7ba7e066b79d8757da51337246dfb3ecb0e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1253,1257 @@        \"code\": 2366\n    },\n    \"The types of these values indicate that this condition will always be '{0}'.\": {\n        \"category\": \"Error\",\n        \"code\": 2367"
  },
  {
    "id" : "34983207-e5a7-4ad4-a179-ea5151372690",
    "prId" : 21104,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21104#pullrequestreview-87688763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43d83181-7056-4a04-b09c-6421dcf29e74",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Probably want to switch from `'any'` to `'{0}'`",
        "createdAt" : "2018-01-09T21:48:27Z",
        "updatedAt" : "2018-01-09T23:09:16Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "a9840f93-879c-479b-88d5-704b65e57e92",
        "parentId" : "43d83181-7056-4a04-b09c-6421dcf29e74",
        "authorId" : "08a4e45c-a2b7-46b6-b633-d72c15b8e1aa",
        "body" : "Changing it produces `Mapped object type implicitly has an 'undefined' template type` :grimacing:",
        "createdAt" : "2018-01-09T22:18:23Z",
        "updatedAt" : "2018-01-09T23:09:16Z",
        "lastEditedBy" : "08a4e45c-a2b7-46b6-b633-d72c15b8e1aa",
        "tags" : [
        ]
      },
      {
        "id" : "edd5d764-8ed1-49c7-bd7b-8410f5244823",
        "parentId" : "43d83181-7056-4a04-b09c-6421dcf29e74",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i think the previous behavior was correct. sorry about that. they type is guaranteed to be `any`. we pass in the type if it can be `any` | `any[]` for instance. but in this case that is not needed. i would keep the old message.\r\nsorry for the wrong suggestion here.",
        "createdAt" : "2018-01-09T22:50:35Z",
        "updatedAt" : "2018-01-09T23:09:16Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "5539294d-acf3-40c2-89d4-635ae70a041e",
        "parentId" : "43d83181-7056-4a04-b09c-6421dcf29e74",
        "authorId" : "08a4e45c-a2b7-46b6-b633-d72c15b8e1aa",
        "body" : "Ok, I reverted the change.",
        "createdAt" : "2018-01-09T23:11:15Z",
        "updatedAt" : "2018-01-09T23:11:15Z",
        "lastEditedBy" : "08a4e45c-a2b7-46b6-b633-d72c15b8e1aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "80ed305086513ac850adc3bd00014e9535228669",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3572,3576 @@        \"code\": 7038\n    },\n    \"Mapped object type implicitly has an 'any' template type.\": {\n        \"category\": \"Error\",\n        \"code\": 7039"
  },
  {
    "id" : "c2b413e8-78b9-4ff5-8580-178163876dda",
    "prId" : 14133,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14133#pullrequestreview-23969876",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41b69053-14a6-431a-aaad-e1f9485171f9",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "No full stop here?",
        "createdAt" : "2017-02-27T12:05:07Z",
        "updatedAt" : "2017-02-28T11:57:51Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "b62b4678ac35919ae7334221e037ca367329e45b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +3312,3316 @@        \"code\": 90016\n    },\n    \"Add index signature for missing property '{0}'\": {\n        \"category\": \"Message\",\n        \"code\": 90017"
  },
  {
    "id" : "c9eac410-12df-49a8-9cda-41941efb60ae",
    "prId" : 12305,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12305#pullrequestreview-10831045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "101eb757-fef0-46b2-9aa5-9df5fbe8360a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "member *named* '{1}'",
        "createdAt" : "2016-11-27T22:36:23Z",
        "updatedAt" : "2016-11-30T20:29:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "849c81fa-485a-48e3-9349-19a8f7f70557",
        "parentId" : "101eb757-fef0-46b2-9aa5-9df5fbe8360a",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "This follows the same pattern as 2305: `\"Module '{0}' has no exported member '{1}'.\"`",
        "createdAt" : "2016-11-30T19:34:08Z",
        "updatedAt" : "2016-11-30T20:29:55Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c294bf505619cf046b18d381a8d8b5f07614ea1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1028,1032 @@        \"code\": 2342\n    },\n    \"This syntax requires an imported helper named '{1}', but module '{0}' has no exported member '{1}'.\": {\n        \"category\": \"Error\",\n        \"code\": 2343"
  },
  {
    "id" : "2f530b98-4e03-46cd-9c93-5e437f8a51c9",
    "prId" : 11929,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11929#pullrequestreview-6659696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e76b37b-ce45-420d-a96d-acddcda9f853",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "üéâ  this is much better now!\n",
        "createdAt" : "2016-11-01T17:21:13Z",
        "updatedAt" : "2016-11-02T16:13:59Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bbe29ab733dcc2449d81f22b19be7f798cfb856",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +2922,2926 @@        \"code\": 7016\n    },\n    \"Element implicitly has an 'any' type because type '{0}' has no index signature.\": {\n        \"category\": \"Error\",\n        \"code\": 7017"
  },
  {
    "id" : "66e9a7a6-9f78-45bf-a343-8aa2a558b530",
    "prId" : 9200,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e1cb899-837b-4099-add2-c38153909ee2",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "this should be an \"Error\"\n",
        "createdAt" : "2016-06-15T21:58:18Z",
        "updatedAt" : "2016-06-24T20:09:09Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "40787359-609e-40bc-9df9-53e6cdee60c9",
        "parentId" : "5e1cb899-837b-4099-add2-c38153909ee2",
        "authorId" : "896b67a9-738b-4c09-a7e1-9d57057a1a55",
        "body" : "Done\n",
        "createdAt" : "2016-06-16T00:02:11Z",
        "updatedAt" : "2016-06-24T20:09:09Z",
        "lastEditedBy" : "896b67a9-738b-4c09-a7e1-9d57057a1a55",
        "tags" : [
        ]
      }
    ],
    "commit" : "9753d09af2d965af3f23d12f75f40100c84d269c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2790,2794 @@    },\n    \"File name '{0}' has a '{1}' extension - stripping it\": {\n        \"category\": \"Message\",\n        \"code\": 6132\n    },"
  },
  {
    "id" : "32653a80-1323-4e87-9d07-7ee733b581de",
    "prId" : 8678,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4472dc5-8bf7-46a1-bb5e-b7b438b358ca",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "But that isn't specifically the solution. The problem is that you're using something intended to be used as a global. Importing an identifier by that name from a module might not work at all. Importing the module _as_ that name would work.\n\nA better message might be\n\n```\nThe namespace '{0}' declared in '{1}' is not accessible within a module. Did you mean to import the file instead?\n```\n",
        "createdAt" : "2016-05-19T06:58:16Z",
        "updatedAt" : "2016-05-19T06:58:56Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "21c344e2-fb8c-43f7-99a6-7418438bf947",
        "parentId" : "b4472dc5-8bf7-46a1-bb5e-b7b438b358ca",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "We don't have a good way right now to generate `{1}` in that message (since we'd basically have to reverse-engineer a module name that would successfully resolve from the containing file).\n\nHow about\n\n> `Global identifier {0} cannot be used from a module. Did you mean to import this from its module?`\n",
        "createdAt" : "2016-05-19T19:22:04Z",
        "updatedAt" : "2016-05-19T19:22:04Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "ea161bde-4eaf-44f2-91d7-886dbabb1309",
        "parentId" : "b4472dc5-8bf7-46a1-bb5e-b7b438b358ca",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "What about getting the path relative to the project root?\n",
        "createdAt" : "2016-05-23T22:50:13Z",
        "updatedAt" : "2016-05-23T22:50:13Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "91b8f204f24d468f709ab6e8a9fea203e24a8f65",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1924,1928 @@        \"code\": 2685\n    },\n    \"Identifier '{0}' must be imported from a module\": {\n        \"category\": \"Error\",\n        \"code\": 2686"
  },
  {
    "id" : "861b9e90-aa36-4c2d-8360-2ffc0bb81c71",
    "prId" : 8103,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79421388-e875-4e4c-9013-ac7b099442e6",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Could you add test cases that fail\n",
        "createdAt" : "2016-04-19T22:19:51Z",
        "updatedAt" : "2016-05-31T23:08:22Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "13ad3090-2607-456d-ae3d-792efcc26afc",
        "parentId" : "79421388-e875-4e4c-9013-ac7b099442e6",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "It's tricky as currently we don't report error happens within JSDoc comments\n",
        "createdAt" : "2016-04-22T21:18:50Z",
        "updatedAt" : "2016-05-31T23:08:22Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb0f035c78219ed920052094351326c5b35e1fe3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +820,824 @@        \"code\": 1252\n    },\n    \"'{0}' tag cannot be used independently as a top level JSDoc tag.\": {\n        \"category\": \"Error\",\n        \"code\": 1253"
  },
  {
    "id" : "320b9256-1d1f-4540-97d0-9b07aff9311c",
    "prId" : 7775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e184009-8014-4177-a188-5a2a7528ccea",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "file name\n",
        "createdAt" : "2016-04-03T07:57:10Z",
        "updatedAt" : "2016-04-08T21:38:51Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "71789050-6f4c-4303-aa82-9bc7b3afecb3",
        "parentId" : "4e184009-8014-4177-a188-5a2a7528ccea",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "`name` here is either a module name or library name which by itself is not necessary a file name (but it will be resolved to a file name)\n",
        "createdAt" : "2016-04-03T17:01:30Z",
        "updatedAt" : "2016-04-08T21:38:51Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5e7d47782854fb9eefe1dd3c9d42705618d29d3",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +2546,2550 @@        \"code\": 6084\n    },\n    \"Enable tracing of the name resolution process.\": {\n        \"category\": \"Message\",\n        \"code\": 6085"
  },
  {
    "id" : "adc6b56f-7c8e-4178-b266-e8677aeff3e0",
    "prId" : 7775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9a46947-0876-47c9-b793-48a34b01052d",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "file name\n",
        "createdAt" : "2016-04-03T07:57:26Z",
        "updatedAt" : "2016-04-08T21:38:51Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "7457fe54-6fa5-4f82-ad0d-5ab02deaf120",
        "parentId" : "e9a46947-0876-47c9-b793-48a34b01052d",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "answered in [this comment](https://github.com/Microsoft/TypeScript/pull/7775#discussion_r58313500)\n",
        "createdAt" : "2016-04-03T17:01:56Z",
        "updatedAt" : "2016-04-08T21:38:51Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5e7d47782854fb9eefe1dd3c9d42705618d29d3",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +2594,2598 @@        \"code\": 6096\n    },\n    \"File '{0}' exist - use it as a name resolution result.\": {\n        \"category\": \"Message\",\n        \"code\": 6097"
  },
  {
    "id" : "4cba30ba-9f0f-4ab0-b7ef-22f2db84e6e0",
    "prId" : 7775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eae70a1a-389d-4326-8b5e-f31226c19962",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why not generalize this to take the expected type as well?\n",
        "createdAt" : "2016-04-05T22:21:27Z",
        "updatedAt" : "2016-04-08T21:38:51Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5e7d47782854fb9eefe1dd3c9d42705618d29d3",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +2626,2630 @@        \"code\": 6104\n    },\n    \"Expected type of '{0}' field in 'package.json' to be 'string', got '{1}'.\": {\n        \"category\": \"Message\",\n        \"code\": 6105"
  },
  {
    "id" : "8d4efcb7-015d-4b76-b19b-e57c0ed88767",
    "prId" : 6631,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9a6cc85-8f0d-4a12-9d97-6446417d8dc5",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "The compiler reserves '{1}' in the top level scope of of a module when using async functions.\n",
        "createdAt" : "2016-01-26T23:47:26Z",
        "updatedAt" : "2016-01-27T01:34:34Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "f174b3e4-feb3-4731-aa39-2f50ffea6bb8",
        "parentId" : "a9a6cc85-8f0d-4a12-9d97-6446417d8dc5",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "This is modeled after TS2441: `Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module.` See: https://github.com/Microsoft/TypeScript/blob/master/src/compiler/diagnosticMessages.json#L1350\n",
        "createdAt" : "2016-01-27T00:02:59Z",
        "updatedAt" : "2016-01-27T01:34:34Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "c11c8bd8-5a4f-437d-9f27-56e8847e49b3",
        "parentId" : "a9a6cc85-8f0d-4a12-9d97-6446417d8dc5",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I think we should change that as well then.\n",
        "createdAt" : "2016-01-27T00:39:30Z",
        "updatedAt" : "2016-01-27T01:34:34Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "9d43f904-5ccb-4878-bc8e-74c2ed80e137",
        "parentId" : "a9a6cc85-8f0d-4a12-9d97-6446417d8dc5",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "These also?\n- [line 818](https://github.com/Microsoft/TypeScript/blob/master/src/compiler/diagnosticMessages.json#L818)\n- [line 1190](https://github.com/Microsoft/TypeScript/blob/master/src/compiler/diagnosticMessages.json#L1190)\n- [line 1198](https://github.com/Microsoft/TypeScript/blob/master/src/compiler/diagnosticMessages.json#L1198)\n- [line 1206](https://github.com/Microsoft/TypeScript/blob/master/src/compiler/diagnosticMessages.json#L1206)\n\nIf you want to change the various messages we use for these cases, I'd rather we do that in a different PR.\n",
        "createdAt" : "2016-01-27T01:32:48Z",
        "updatedAt" : "2016-01-27T01:34:34Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "412943a7-1545-4bfc-8e02-78672cf471af",
        "parentId" : "a9a6cc85-8f0d-4a12-9d97-6446417d8dc5",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Also \"when using async functions\" is too broad. It only enforces this check if you use async functions in the current module, hence the wording: \"in the top level scope of a module containing async functions.\"\n",
        "createdAt" : "2016-01-27T01:35:32Z",
        "updatedAt" : "2016-01-27T01:35:32Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "d4947c00-a67b-4804-a1e2-51370592a415",
        "parentId" : "a9a6cc85-8f0d-4a12-9d97-6446417d8dc5",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Let's just do that in a different PR like you mentioned.\n",
        "createdAt" : "2016-01-27T20:03:33Z",
        "updatedAt" : "2016-01-27T20:03:33Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4c0c0028704f637a6417b67879132343532a261",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1692,1696 @@        \"code\": 2528\n    },\n    \"Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module containing async functions.\": {\n        \"category\": \"Error\",\n        \"code\": 2529"
  },
  {
    "id" : "868f8462-2cfd-4b61-800f-d1cb70c2186d",
    "prId" : 6077,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87131d83-ce64-4293-a54d-35b828610ad7",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`\"The 'super' keyword can only be referenced in members of derived classes and object literal expressions.\"`\n",
        "createdAt" : "2015-12-16T06:15:47Z",
        "updatedAt" : "2015-12-18T05:40:45Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "914ae210-b968-431c-b19c-8b974815440b",
        "parentId" : "87131d83-ce64-4293-a54d-35b828610ad7",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "discussed offline\n",
        "createdAt" : "2015-12-16T21:12:21Z",
        "updatedAt" : "2015-12-18T05:40:45Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae7d687a77cc3a880f3f62332071ee6bbbaf985b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1764,1768 @@        \"code\": 2659\n    },\n    \"'super' can only be referenced in members of derived classes or object literal expressions.\": {\n        \"category\": \"Error\",\n        \"code\": 2660"
  },
  {
    "id" : "babd45e3-8767-4844-a8fb-0f1f2ca64776",
    "prId" : 4946,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6972185-beaf-4caa-a5b2-0ce007585bad",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "`In ambient enum declarations, member initializer must be constant enum expression` Use similar vocabulary as spec\n",
        "createdAt" : "2015-09-24T23:02:34Z",
        "updatedAt" : "2015-09-24T23:02:34Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "f84aecf0-c883-457b-aca1-eefd0dc46065",
        "parentId" : "f6972185-beaf-4caa-a5b2-0ce007585bad",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "An ambient enum member must be initialized with a constant expression.\n",
        "createdAt" : "2015-09-25T00:06:04Z",
        "updatedAt" : "2015-09-25T00:12:19Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "8568bd81-f97a-4c39-8687-89792625b0d0",
        "parentId" : "f6972185-beaf-4caa-a5b2-0ce007585bad",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "Current message is based on the text that we show for const enums:\n    \"In 'const' enum declarations member initializer must be constant expression.\": {\n",
        "createdAt" : "2015-09-25T00:10:23Z",
        "updatedAt" : "2015-09-25T00:10:23Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "0edf5061-083a-4d07-8dc4-3572a96b5918",
        "parentId" : "f6972185-beaf-4caa-a5b2-0ce007585bad",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "nit. \"Enum member initializer must be constant expression in an ambient enum declaration\"\n\nthe emphasis should be on the enum member initializer and not the ambient enum declaration.\n",
        "createdAt" : "2015-09-25T23:54:55Z",
        "updatedAt" : "2015-09-25T23:54:55Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa3d9f3997db907bf3cce66674bfe5ad1a0d4de0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +196,200 @@        \"code\": 1063\n    },\n    \"In ambient enum declarations member initializer must be constant expression.\": {\n        \"category\": \"Error\",\n        \"code\": 1066"
  },
  {
    "id" : "1d7ebe40-ad05-4b37-a798-b8b0bf784e6f",
    "prId" : 3579,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86ae4000-5ca2-496e-961f-64a24b082857",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "How is this different from error 1238? This one is specifically for the inherited methods?\n",
        "createdAt" : "2015-06-29T19:55:57Z",
        "updatedAt" : "2015-07-01T23:15:02Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d0c7c9f6a80f020a8cde9f594855327ee154ce7",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +1606,1610 @@        \"code\": 2513\n    },\n    \"Classes containing abstract methods must be marked abstract.\": {\n        \"category\": \"Error\",\n        \"code\": 2514"
  },
  {
    "id" : "f4884a0b-790e-43fe-8f05-13ce41ba68ba",
    "prId" : 3564,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bf0c972-5498-446c-a7e3-28bea3878114",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Put single quotes around `JSX.{0}`.\n",
        "createdAt" : "2015-06-19T19:59:30Z",
        "updatedAt" : "2015-06-29T17:39:59Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "993aa4b6-044b-4d58-9906-7a8ca04909ee",
        "parentId" : "7bf0c972-5498-446c-a7e3-28bea3878114",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "I don't see what you're referring to?\n",
        "createdAt" : "2015-06-22T16:11:16Z",
        "updatedAt" : "2015-06-29T17:39:59Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "3809eb5e-3858-4feb-b076-1626ee8e8271",
        "parentId" : "7bf0c972-5498-446c-a7e3-28bea3878114",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I may be losing my mind; when I wrote that, I did not see the single quotes.\n",
        "createdAt" : "2015-06-22T23:12:41Z",
        "updatedAt" : "2015-06-29T17:39:59Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3402f3556c3ceb12be8506116e15d65e5a761928",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +1552,1556 @@        \"code\": 2607\n    },\n    \"The global type 'JSX.{0}' may not have more than one property\": {\n        \"category\": \"Error\",\n        \"code\": 2608"
  },
  {
    "id" : "57032f72-e3f4-455d-99e7-9cb4430d9796",
    "prId" : 3516,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a7a70ed-dc51-4f5a-ba1d-0ebfbc65b2bf",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "It might be helpful in these 4 error messages to mention what type the expression resolved to.\n",
        "createdAt" : "2015-06-17T05:59:58Z",
        "updatedAt" : "2015-06-17T21:18:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "e80386ad-ef01-4ac3-99de-9170c876c818",
        "parentId" : "3a7a70ed-dc51-4f5a-ba1d-0ebfbc65b2bf",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Yes, at least for the first and the third message.\n",
        "createdAt" : "2015-06-17T14:11:03Z",
        "updatedAt" : "2015-06-17T21:18:00Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b9a1b5e20696be8c6e27480cd43034f74fbac34",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1545,1549 @@        \"category\": \"Error\",\n        \"code\": 2510\n    },\n\n    \"Import declaration '{0}' is using private name '{1}'.\": {"
  },
  {
    "id" : "42fae6d5-aa31-4308-8d6e-d54c549e2cbe",
    "prId" : 3333,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "def6c39a-1d4b-43b1-b608-51606e46a93f",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I would just pick one of these. Also, I would cancel out the 'non' and the 'cannot' to make an 'only'.\n",
        "createdAt" : "2015-06-03T19:00:47Z",
        "updatedAt" : "2015-07-02T17:34:17Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "aea8b774-c57e-4377-9908-94262a75d6a1",
        "parentId" : "def6c39a-1d4b-43b1-b608-51606e46a93f",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "Changed, and baselines updated.\n",
        "createdAt" : "2015-06-03T21:17:59Z",
        "updatedAt" : "2015-07-02T17:34:17Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "3af3177fe3bae91761611fa419aedaaf5842080e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1581,1585 @@        \"category\": \"Error\",\n        \"code\": 2507\n    },\n    \"No base constructor has the specified number of type arguments.\": {\n        \"category\": \"Error\","
  },
  {
    "id" : "42c27222-0348-44dc-8ecd-c90ff3f00d45",
    "prId" : 3032,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b39a0a0-0b1d-4d00-9be7-96174b86f6ba",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "an unsupported extension\n",
        "createdAt" : "2015-05-05T06:35:06Z",
        "updatedAt" : "2015-05-07T18:28:24Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "6ff6d089-a2a9-474b-bc12-bb5d133884cb",
        "parentId" : "8b39a0a0-0b1d-4d00-9be7-96174b86f6ba",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "did that,, then felt too hard to read; this is still grammatically correct and gives the same meaning.\n",
        "createdAt" : "2015-05-05T06:37:17Z",
        "updatedAt" : "2015-05-07T18:28:24Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "48897544-09e0-4db2-a6a6-cd2cd1a682bc",
        "parentId" : "8b39a0a0-0b1d-4d00-9be7-96174b86f6ba",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "OR, keep it the same and make it\n\n```\n\"File '{0}' has unsupported extension '{1}'. The only supported extensions are {2}.\"\n```\n",
        "createdAt" : "2015-05-05T06:41:41Z",
        "updatedAt" : "2015-05-07T18:28:24Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "0b75b2e5-9d04-40ab-814c-300947f37703",
        "parentId" : "8b39a0a0-0b1d-4d00-9be7-96174b86f6ba",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I would rather switch back to the old message then, at least it had the \"or\".. :D\n",
        "createdAt" : "2015-05-05T06:52:43Z",
        "updatedAt" : "2015-05-07T18:28:24Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce9f7b431ff60efc2316b65afa8903f6559e3ddc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1983,1987 @@        \"code\": 6053\n    },\n    \"File '{0}' has unsupported extension. The only supported extensions are {1}.\": {\n        \"category\": \"Error\",\n        \"code\": 6054"
  },
  {
    "id" : "52c8cd57-4c76-4589-845f-11666bc7ade5",
    "prId" : 2567,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb395e6c-bea5-4a76-afae-5f21cc3ccf5d",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "\"an identifier or a qualified-name\"\n",
        "createdAt" : "2015-04-01T17:34:31Z",
        "updatedAt" : "2015-04-01T17:34:31Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "afc38c2956e0a5cd8b3e27c934bf204e3658b7d1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1404,1408 @@        \"code\": 2498\n    },\n    \"An interface can only extend an identifier/qualified-name with optional type arguments.\": {\n        \"category\": \"Error\",\n        \"code\": 2499"
  },
  {
    "id" : "d75a113f-92f8-4521-b377-67fc38d38ad2",
    "prId" : 1501,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2baf22fb-96ef-4889-93fa-3ddf3e0a5185",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "~~\"Option 'noEmit' cannot be specified with options 'out' or 'outDir'.\"~~\n\nActually, I see that this is not consistent with other messages. I'll take care of this myself.\n",
        "createdAt" : "2014-12-17T06:01:39Z",
        "updatedAt" : "2014-12-17T06:03:59Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "880e5c50d726b3a05f2c75c26139992822b3a349",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1512,1516 @@        \"code\": 5039\n    },\n    \"Option noEmit cannot be specified with option out or outDir.\": {\n        \"category\": \"Error\",\n        \"code\": 5040"
  },
  {
    "id" : "aef17507-36c6-4f22-ae79-627f492017f7",
    "prId" : 748,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26a2f87a-5982-4ded-a762-b2cdda330ffd",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "old compiler had this as error code 5006, can we keep the same error code\n",
        "createdAt" : "2014-09-26T19:47:51Z",
        "updatedAt" : "2014-09-29T17:23:21Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "3346c7cc-0794-4075-9c73-0a4cc0938e06",
        "parentId" : "26a2f87a-5982-4ded-a762-b2cdda330ffd",
        "authorId" : "fe87caf4-bdcc-4926-8b6e-d7fd2b533094",
        "body" : "I originally had it as a 5006 error but I was told to change it to put it in the 1000 range.\n",
        "createdAt" : "2014-09-26T19:54:45Z",
        "updatedAt" : "2014-09-29T17:23:21Z",
        "lastEditedBy" : "fe87caf4-bdcc-4926-8b6e-d7fd2b533094",
        "tags" : [
        ]
      },
      {
        "id" : "b4e2c455-3072-40f2-8f75-c348c2e782ef",
        "parentId" : "26a2f87a-5982-4ded-a762-b2cdda330ffd",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "1000 is fine. we have moved these around lately. so I would keep them all consistent. thanks.\n",
        "createdAt" : "2014-09-26T21:39:48Z",
        "updatedAt" : "2014-09-29T17:23:21Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "3751b25dd202e165ec0d10b0539de341d6da1cb0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +12,16 @@        \"code\": 1005\n    },\n\t\"A file cannot have a reference to itself.\": {\n        \"category\": \"Error\",\n        \"code\": 1006"
  },
  {
    "id" : "85fc33cd-4fb9-49c2-95eb-a81673845cc4",
    "prId" : 665,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e2150dc-7f9c-42fd-8dee-376e91f42581",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Can we make the error message a bit more explicit. I do not find \"circularity\" particularly helpful, specially that we do not print the cycle. how about:\n`'{0}' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its initializer.`\n\n`Function implicitly has return type 'any' because it does not have a return type annotation and it is referenced directly or indirectly in at least one if its return expressions.`\n",
        "createdAt" : "2014-09-12T16:29:51Z",
        "updatedAt" : "2014-09-12T17:23:40Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "cff9fccf-5baf-4427-bfb9-947af816b0ff",
        "parentId" : "0e2150dc-7f9c-42fd-8dee-376e91f42581",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Agreed. I will change the error messages.\n",
        "createdAt" : "2014-09-12T17:20:00Z",
        "updatedAt" : "2014-09-12T17:23:40Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b805037cf297b8ca478d3e1b92cba06d39aa39c1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1569,1573 @@        \"category\": \"Error\",\n        \"code\": 7023\n    },\n    \"Function implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.\": {\n        \"category\": \"Error\","
  },
  {
    "id" : "efdd1d32-e3f2-4378-a0fc-685b8fe0e1d3",
    "prId" : 383,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51afbde4-89d1-4c78-bcd0-46503ec3e272",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I kind of like the old error better. It indicated that we knew you were _calling_ super. It's just missing the indefinite article in the beginning.\n",
        "createdAt" : "2014-08-08T01:17:48Z",
        "updatedAt" : "2014-08-18T22:45:14Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "294ef856-8c04-4ee6-907d-24c5662cdccc",
        "parentId" : "51afbde4-89d1-4c78-bcd0-46503ec3e272",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "We were already using the new error message in other contexts as well.\n\nFor example\n\n``` TypeScript\nsuper + super\n```\n\nPerhaps it should have a different error message, as it seems to cover a more broad set of cases, but the results are nicer than in the old compiler.\n",
        "createdAt" : "2014-08-08T08:44:51Z",
        "updatedAt" : "2014-08-18T22:45:14Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "b0dee867-c5f9-4bd3-a7fd-1011104d90e7",
        "parentId" : "51afbde4-89d1-4c78-bcd0-46503ec3e272",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I think ideally we would have a specialized error for type arguments, but it doesn't matter that much.\n",
        "createdAt" : "2014-08-08T17:15:52Z",
        "updatedAt" : "2014-08-18T22:45:14Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "8baee8a785d9c0e0532d41bfdc9298d55086b6d1",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +104,108 @@        \"code\": 1032\n    },\n    \"'super' must be followed by an argument list or member access.\": {\n        \"category\": \"Error\",\n        \"code\": 1034"
  },
  {
    "id" : "5b872952-a1cc-4b3c-aeae-c57a84f5c144",
    "prId" : 383,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03c77162-b8a0-404d-8139-314e8e8f82ac",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Can you go thru and make sure none of them say NoPrefix? We should consider deleting the NoPrefix category at this point\n",
        "createdAt" : "2014-08-08T01:19:06Z",
        "updatedAt" : "2014-08-18T22:45:14Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "8baee8a785d9c0e0532d41bfdc9298d55086b6d1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1337,1341 @@    },\n    \"Unsupported file encoding.\": {\n        \"category\": \"Error\",\n        \"code\": 5013\n    },"
  },
  {
    "id" : "1a2bd31f-d170-4e28-b65c-b434e195f777",
    "prId" : 317,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c19e4cd8-e840-4250-b97e-563af3c05952",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "This error message was changed from \"Constructor implementation expected.\" to \"Constructor implementation is missing.\". Given that error is usually reported on the line that contains the last overload wording \"Constructor implementation expected.\" is not clear enough to explain what went wrong (should I create implementation instead of this overloads? But what if I need this overloads? etc...). In opposite \"Constructor implementation is missing.\" implies that this overload itself is ok but it lacks implementation and thus error is reported\n",
        "createdAt" : "2014-07-30T23:35:10Z",
        "updatedAt" : "2014-07-31T18:06:49Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "311c1896-481a-45e8-9016-503df991478c",
        "parentId" : "c19e4cd8-e840-4250-b97e-563af3c05952",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Seems too generic, the problem may not be a missing implementation per se but an implementation that is separated from the declaration.. so something like \"Function implementation is missing or not immediately following the declaration\", or \"Function implementation is expected to follow the declaration\" .. etc..\n",
        "createdAt" : "2014-07-31T17:41:17Z",
        "updatedAt" : "2014-07-31T18:06:49Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "2a13185c-97ca-49c9-8953-cf9e388cee86",
        "parentId" : "c19e4cd8-e840-4250-b97e-563af3c05952",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "ok, makes sense. I'll change it to \"Function implementation is missing or not immediately following the declaration\"\n",
        "createdAt" : "2014-07-31T17:52:09Z",
        "updatedAt" : "2014-07-31T18:06:49Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "a62b47eace853463a8dc7ee73d1851a978675ff2",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +629,633 @@        \"code\": 2239\n    },\n    \"Constructor implementation is missing.\": {\n        \"category\": \"Error\",\n        \"code\": 2240"
  },
  {
    "id" : "9240e9aa-9611-452b-9927-d3dca57c407e",
    "prId" : 317,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44dc02aa-3498-44c7-aa20-b18ade8ad587",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Also possible: \"Function overload cannot be static\" or \"Function overload must be non-static.\" - I'm a bigger fan of the first.\n",
        "createdAt" : "2014-07-30T23:56:04Z",
        "updatedAt" : "2014-07-31T18:06:49Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "8d320e16-8b4c-4f54-a010-7bc4295134e2",
        "parentId" : "44dc02aa-3498-44c7-aa20-b18ade8ad587",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "+1 for \"Function overload cannot be static\"\n",
        "createdAt" : "2014-07-31T17:37:53Z",
        "updatedAt" : "2014-07-31T18:06:49Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "a62b47eace853463a8dc7ee73d1851a978675ff2",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +645,649 @@        \"code\": 2247\n    },\n    \"Function overload must not be static.\": {\n        \"category\": \"Error\",\n        \"code\": 2248"
  },
  {
    "id" : "a72f2bbc-10c6-4675-b235-c26e6518834f",
    "prId" : 33,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "083f435f-c772-46dd-8d6c-8b73b8797b43",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "incorrect indentation\n",
        "createdAt" : "2014-07-16T23:28:03Z",
        "updatedAt" : "2014-07-16T23:32:02Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b112b1a468af6ae9a6a2ddc1950493217cd64a0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1141,1145 @@        \"code\": -9999999\n    },\n\t\"A module declaration cannot be in a different file from a class or function with which it is merged\": {\n        \"category\": \"Error\",\n        \"code\": -9999999"
  }
]