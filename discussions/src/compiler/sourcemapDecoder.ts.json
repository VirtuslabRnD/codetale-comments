[
  {
    "id" : "ff62ac28-ee15-4a88-a56f-99498cbb5f2f",
    "prId" : 28273,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28273#pullrequestreview-171923653",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f8154ef-19cc-4752-b970-25a51173fe73",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Should that `ignoreCase` parameter in `comparePaths` be mandatory?\r\n\r\nIt doesn't look like is EVER safe to assume 'ignore case' without consulting the actual host parameter.",
        "createdAt" : "2018-11-06T09:23:01Z",
        "updatedAt" : "2018-11-06T09:23:01Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f844c4b084b52451fe99b667c109d907ef118f2",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +81,85 @@                targetIndex = ~targetIndex;\n            }\n            if (!maps[targetIndex] || comparePaths(loc.fileName, maps[targetIndex].sourcePath, sourceRoot, !host.useCaseSensitiveFileNames) !== 0) {\n                return loc;\n            }"
  },
  {
    "id" : "c2461ce6-6310-4715-903d-ec02c59855c2",
    "prId" : 25838,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25838#pullrequestreview-140063340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0df16520-0c61-4823-910c-c8e2e9113a6e",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Do you need to handle if the sourceRoot specified is URL ?",
        "createdAt" : "2018-07-24T18:22:10Z",
        "updatedAt" : "2018-07-24T18:22:10Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "a237c8c2-db69-4764-a971-21e22b041802",
        "parentId" : "0df16520-0c61-4823-910c-c8e2e9113a6e",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "`getNormalizedAbsolutePath` already passes along URLs just fine (it preserves the input root if it is rooted), as will the rest of the path handling in the sourcemap code. The language service will likely summarily reject the mapped location, however, since `https://github.com/Microsoft/TypeScript/tree/master/src/compiler/checker.ts` (for example) won't exist on disk (though I imagine a host implementation could exist that returns results for such paths). UNC paths might in theory work fine, though.... those return normal results via `fileExists` and similar APIs on windows, right?\r\n\r\nIn any case: No, I don't think so - all the path normalizing/building stuff already is.",
        "createdAt" : "2018-07-24T20:21:54Z",
        "updatedAt" : "2018-07-24T20:21:54Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c02e24a2a7ca8a7f79a5c603d0402e3c4777e21",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +62,66 @@    export function decode(host: SourceMapDecodeHost, mapPath: string, map: SourceMapData, program?: Program, fallbackCache = createSourceFileLikeCache(host)): SourceMapper {\n        const currentDirectory = getDirectoryPath(mapPath);\n        const sourceRoot = map.sourceRoot ? getNormalizedAbsolutePath(map.sourceRoot, currentDirectory) : currentDirectory;\n        let decodedMappings: ProcessedSourceMapPosition[];\n        let generatedOrderedMappings: ProcessedSourceMapPosition[];"
  }
]