[
  {
    "id" : "0f094979-9558-4898-a8c8-80b2e390389a",
    "prId" : 43652,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43652#pullrequestreview-637247225",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b0f0292-7d15-4c68-a605-3cafe955f2c5",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "This (and the code path that sets `currentParenthesizerRule`) is the only \"actual\" change from what we previously were doing in 4.2. The point here is to only invoke the parenthesizer rule when substitution results in a *different* node (which might have a different precedence).",
        "createdAt" : "2021-04-16T01:01:52Z",
        "updatedAt" : "2021-04-16T01:29:26Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b48a51a80bdc1fc6802706ae1c1c08420d590a5b",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +1256,1260 @@                    if (substituteNode !== noEmitSubstitution && (lastSubstitution = substituteNode(emitHint, node) || node) !== node) {\n                        if (currentParenthesizerRule) {\n                            lastSubstitution = currentParenthesizerRule(lastSubstitution);\n                        }\n                        return pipelineEmitWithSubstitution;"
  },
  {
    "id" : "177cd9b0-eda4-4bd8-89e1-25ccda124fdf",
    "prId" : 42676,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42676#pullrequestreview-597813514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "091fe6e6-4327-4669-95b9-39138cf63093",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Should we open issues for the missing emit node kinds? I'm not sure under what circumstances we emit jsdoc using the emitter, but when we do, I assume these node kinds being missing maybe has an effect?",
        "createdAt" : "2021-02-09T00:00:17Z",
        "updatedAt" : "2021-02-24T04:05:43Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "6f09fd9a-6908-43e0-af71-b7255b7812f1",
        "parentId" : "091fe6e6-4327-4669-95b9-39138cf63093",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "We only emit JSDoc tags using the emitter as part of refactors. I assume we've only been adding them on an as-need basis.",
        "createdAt" : "2021-02-24T18:49:22Z",
        "updatedAt" : "2021-02-24T18:49:23Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cfda7c2575fc103223dec3ce9a13aace273ca9c8",
    "line" : 624,
    "diffHunk" : "@@ -1,1 +1670,1674 @@                case SyntaxKind.JSDocImplementsTag:\n                    return emitJSDocHeritageTag(node as JSDocImplementsTag | JSDocAugmentsTag);\n                // SyntaxKind.JSDocAuthorTag (missing)\n                // SyntaxKind.JSDocDeprecatedTag (missing)\n                // SyntaxKind.JSDocClassTag (see JSDocTag, above)"
  },
  {
    "id" : "864c5d5e-26be-4af7-aa83-1fcc0b472156",
    "prId" : 37846,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37846#pullrequestreview-390347150",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cbadf98-89a1-4881-9903-013b7e2ec739",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "These functions are extracted from `emitParenthesizedExpression` because fixing the actual bug revealed that a JSX example was only working by accident because of the bug, and needed to borrow this code from `emitParenthesizedExpression`.",
        "createdAt" : "2020-04-08T21:31:41Z",
        "updatedAt" : "2020-04-10T17:06:33Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b90e6e092744ee884ea7829189f4e8daf5c4919",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +4397,4401 @@        }\n\n        function writeLineSeparatorsAndIndentBefore(node: Node, parent: Node): boolean {\n            const leadingNewlines = preserveSourceNewlines && getLeadingLineTerminatorCount(parent, [node], ListFormat.None);\n            if (leadingNewlines) {"
  },
  {
    "id" : "e5dba9f3-212a-4be7-aa54-8b261939a63c",
    "prId" : 36688,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36688#pullrequestreview-367478066",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db2b28ca-e6b5-4a04-92e1-43f3be42c54f",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "does `synthesizedNodeStartsOnNewline` require its parameter to synthetic? It might not be in the case that `previousNode.parent !== nextNode.parent`.",
        "createdAt" : "2020-02-19T23:22:39Z",
        "updatedAt" : "2020-03-16T18:52:35Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "43ab415a-df56-4d7b-b23e-8859797fbad2",
        "parentId" : "db2b28ca-e6b5-4a04-92e1-43f3be42c54f",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "It short circuits to considering `format` alone if the node isnâ€™t synthesized. I guess it works out because all the tests pass (and it took forever to get them all to passâ€”when virtually every compiler baseline runs through the emitter, coverage is pretty good), but it probably wasnâ€™t my intent to go into this branch in that case. Will revisit.",
        "createdAt" : "2020-02-19T23:49:50Z",
        "updatedAt" : "2020-03-16T18:52:35Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "969c9610-24d2-42b5-8fd1-6b3eab966b53",
        "parentId" : "db2b28ca-e6b5-4a04-92e1-43f3be42c54f",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "It turns out that this oversight is what produces some of the desirable baseline changes like https://github.com/microsoft/TypeScript/pull/36688/files#diff-ad4da0479d0f311e5380216f1820cba3. It does seem confusing but Iâ€™m not sure what the best way is to be more explicit about what should happen without nesting more conditionals and getting these functions more in the weeds ðŸ¤” ",
        "createdAt" : "2020-03-02T19:47:13Z",
        "updatedAt" : "2020-03-16T18:52:35Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "6daa27e52a5ef8fd0a76f49cffd3b76e9a5caf48",
    "line" : 320,
    "diffHunk" : "@@ -1,1 +4334,4338 @@                    return rangeEndIsOnSameLineAsRangeStart(previousNode, nextNode, currentSourceFile!) ? 0 : 1;\n                }\n                else if (synthesizedNodeStartsOnNewLine(previousNode, format) || synthesizedNodeStartsOnNewLine(nextNode, format)) {\n                    return 1;\n                }"
  },
  {
    "id" : "53bec19b-af61-45b6-828c-bd1a7f6f0b07",
    "prId" : 33145,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33145#pullrequestreview-282272770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "868792e7-7dbf-414b-8119-cddac1a5f09c",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "quick note for @weswigham: this new line will probably need when bringing the js-to-dts PR up to date with master",
        "createdAt" : "2019-08-30T23:00:13Z",
        "updatedAt" : "2019-08-30T23:07:43Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c1a3522c6e791b6d713bc0fb949a2cc9a69e633",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +217,221 @@            if (jsFilePath) return jsFilePath;\n            if (fileExtensionIs(inputFileName, Extension.Json)) continue;\n            if (getEmitDeclarations(configFile.options) && hasTSFileExtension(inputFileName)) {\n                return getOutputDeclarationFileName(inputFileName, configFile, ignoreCase);\n            }"
  },
  {
    "id" : "f39a5176-2401-42a1-b3de-1b167e17957f",
    "prId" : 32372,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32372#pullrequestreview-292659357",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb1e38ba-4cfe-4b31-b6b1-49b25a138b08",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You also want to fix `getAllProjectOutputs`, `getFirstProjectOutput`",
        "createdAt" : "2019-09-24T19:35:42Z",
        "updatedAt" : "2019-09-26T21:10:12Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "88269f36-06a3-4ecf-926a-625a01afa3fb",
        "parentId" : "bb1e38ba-4cfe-4b31-b6b1-49b25a138b08",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Change in `getOutputDeclarationFileName`",
        "createdAt" : "2019-09-24T19:36:35Z",
        "updatedAt" : "2019-09-26T21:10:12Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "007b3d4afe7726f7b72cd617e5453c8943e48ad2",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +97,101 @@            const jsFilePath = options.emitDeclarationOnly || isJsonEmittedToSameLocation ? undefined : ownOutputFilePath;\n            const sourceMapFilePath = !jsFilePath || isJsonSourceFile(sourceFile) ? undefined : getSourceMapFilePath(jsFilePath, options);\n            const declarationFilePath = (forceDtsPaths || getEmitDeclarations(options)) ? getDeclarationEmitOutputFilePath(sourceFile.fileName, host) : undefined;\n            const declarationMapPath = declarationFilePath && getAreDeclarationMapsEnabled(options) ? declarationFilePath + \".map\" : undefined;\n            return { jsFilePath, sourceMapFilePath, declarationFilePath, declarationMapPath, buildInfoPath: undefined };"
  },
  {
    "id" : "0876789b-4922-4cac-b1f9-21e5c2830876",
    "prId" : 32372,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32372#pullrequestreview-292659357",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cadc16f-1986-4eda-9227-c73841d59ed3",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Handling emit concating when output of d.ts file doesn't change but referencing project with prepend = true, (so transformation of existing output from .tsbuildinfo, existing output, new output from referenced projects to new output (look for testrunner\\unittests\\tsbuild\\outFile.ts)",
        "createdAt" : "2019-09-24T19:36:18Z",
        "updatedAt" : "2019-09-26T21:10:12Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "007b3d4afe7726f7b72cd617e5453c8943e48ad2",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +657,661 @@        getSymbolOfExternalModuleSpecifier: notImplemented,\n        isBindingCapturedByNode: notImplemented,\n        getDeclarationStatementsForSourceFile: notImplemented,\n    };\n"
  },
  {
    "id" : "8ba2a9c4-23f2-41cb-b40d-592e96156b0c",
    "prId" : 28451,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28451#pullrequestreview-173625906",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6736553-c8c5-4fec-b4b3-b9101cfddd9c",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Don't you need to reset it in sourceMap as well (to avoid accidental wrong sourceFile pick)?",
        "createdAt" : "2018-11-09T23:04:46Z",
        "updatedAt" : "2018-11-09T23:04:46Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "ae259434-9909-4c47-9c7f-b3cea0ff18ae",
        "parentId" : "e6736553-c8c5-4fec-b4b3-b9101cfddd9c",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "`setSourceMapSource` very much does not handle `undefined` input. `sourceMapSource` is only used when emitting sourcemaps which is only used when descending into an actual file (emitting a node with a sourcemap pipeline phase, actually - versus printing comments at the top level of a bundle, where we set the current source file so we can get the text, and need to unset it before we call a function which uses it set-ed-ness to determine if it needs to print). It doesn't need to be unset partially because it expects to be defined in all places where it is used (unlike `currentSourceFile` which is actually checked).",
        "createdAt" : "2018-11-09T23:18:41Z",
        "updatedAt" : "2018-11-09T23:18:41Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9404af34fc11e12cb971e92175237f7fed82f4b0",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +610,614 @@            detachedCommentsInfo = undefined;\n            if (sourceFile) {\n                setSourceMapSource(sourceFile);\n            }\n        }"
  },
  {
    "id" : "e0d595ec-7b79-4dbb-8ce9-fd6731f01ea9",
    "prId" : 27978,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27978#pullrequestreview-166600042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05e8e93e-cad5-4ece-bc87-fb12c33b1653",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "This is lumping the empty string and an `undefined` comment into the same behavioral bucket. Intentional?",
        "createdAt" : "2018-10-18T23:58:04Z",
        "updatedAt" : "2018-10-24T22:47:17Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "498bf537-0329-4393-a5b6-48c25d83d874",
        "parentId" : "05e8e93e-cad5-4ece-bc87-fb12c33b1653",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Yes, they behave the same.",
        "createdAt" : "2018-10-19T16:25:04Z",
        "updatedAt" : "2018-10-24T22:47:17Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b4f14f5160dbd12f7003bfe123454fe553e47f3",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +2617,2621 @@        function emitJSDoc(node: JSDoc) {\n            write(\"/**\");\n            if (node.comment) {\n                const lines = node.comment.split(/\\r\\n?|\\n/g);\n                for (const line of lines) {"
  },
  {
    "id" : "f181bacd-94a1-4843-bd2a-e7ad71d8659a",
    "prId" : 27978,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27978#pullrequestreview-167483768",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a90da25-dd0b-44a7-9319-6778ff67621e",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Why is `@type` special?",
        "createdAt" : "2018-10-22T17:47:33Z",
        "updatedAt" : "2018-10-24T22:47:17Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "ace8d1dc-8f3f-4a4f-850e-fe54efca48b4",
        "parentId" : "6a90da25-dd0b-44a7-9319-6778ff67621e",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I want to generate a single-line jsdoc for type tags, multi-line for all other tags. Thatâ€™s based on observed usage from chrome-devtools and webpack. ",
        "createdAt" : "2018-10-23T15:20:07Z",
        "updatedAt" : "2018-10-24T22:47:17Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b4f14f5160dbd12f7003bfe123454fe553e47f3",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +2628,2632 @@            }\n            if (node.tags) {\n                if (node.tags.length === 1 && node.tags[0].kind === SyntaxKind.JSDocTypeTag && !node.comment) {\n                    writeSpace();\n                    emit(node.tags[0]);"
  },
  {
    "id" : "5f0cd097-4e3a-4f70-bc61-9e22aa74db21",
    "prId" : 27978,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27978#pullrequestreview-167997732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07f0b3c2-4cbb-4294-bd29-4ce2316260df",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Any reason we can't `writePunctuation(\"[]\")`?",
        "createdAt" : "2018-10-22T17:51:36Z",
        "updatedAt" : "2018-10-24T22:47:17Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "2232e2a6-cb77-464b-ad51-429c89aedd6a",
        "parentId" : "07f0b3c2-4cbb-4294-bd29-4ce2316260df",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Doesn't look like there's any inherent reason, but `emitArrayType` does it this way too.",
        "createdAt" : "2018-10-24T16:16:03Z",
        "updatedAt" : "2018-10-24T22:47:17Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b4f14f5160dbd12f7003bfe123454fe553e47f3",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +2674,2678 @@                    write(\"Object\");\n                    if (tag.typeExpression.isArrayType) {\n                        writePunctuation(\"[\");\n                        writePunctuation(\"]\");\n                    }"
  },
  {
    "id" : "c20022ac-9aa1-4035-968a-30d437bcea92",
    "prId" : 27978,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27978#pullrequestreview-167999702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "008cadba-dcf8-438d-a970-94c9a09ec0ce",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "These calls look the same but one must use `<>` and one must use `()`, how does it tell the difference?",
        "createdAt" : "2018-10-22T17:53:29Z",
        "updatedAt" : "2018-10-24T22:47:17Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "55773563-8afb-4766-8c72-f54892f8a09c",
        "parentId" : "008cadba-dcf8-438d-a970-94c9a09ec0ce",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "A JSDocSignature renders like\r\n\r\n```js\r\n/**\r\n * @template T\r\n * @template U\r\n * @param {T} x\r\n * @param {U} y\r\n * @returns {*}\r\n */\r\n```\r\n\r\nSo actually a `'\\n * '`-separated list is the same for both parameters and typeParameters.",
        "createdAt" : "2018-10-24T16:20:34Z",
        "updatedAt" : "2018-10-24T22:47:17Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b4f14f5160dbd12f7003bfe123454fe553e47f3",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +2710,2714 @@\n        function emitJSDocSignature(sig: JSDocSignature) {\n            if (sig.typeParameters) {\n                emitList(sig, createNodeArray(sig.typeParameters), ListFormat.JSDocComment);\n            }"
  },
  {
    "id" : "62215b34-3a08-4e59-84ab-a81843704214",
    "prId" : 23902,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23902#pullrequestreview-118634310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a357bc7b-c1d9-48f5-8fd9-d5692444be8b",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Anything that goes in `generatedNames` is already reserved throughout the entire generated output, so scoping these doesn't seem to make any sense. Why was this needed?",
        "createdAt" : "2018-05-09T07:09:00Z",
        "updatedAt" : "2018-05-09T23:20:06Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "624f3a61-84cf-49b8-bf5c-f4a5430c39e9",
        "parentId" : "a357bc7b-c1d9-48f5-8fd9-d5692444be8b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "`scoped` causes it to go into `reservedNames` instead of `generatedNames`; this allows, eg, `T_1` to be reused in adjacent scopes.",
        "createdAt" : "2018-05-09T07:35:03Z",
        "updatedAt" : "2018-05-09T23:20:06Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae142660e0e87e990583e43c15e55ea7035a943a",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +3459,3463 @@            if (optimistic) {\n                if (checkFn(baseName)) {\n                    if (scoped) {\n                        reserveNameInNestedScopes(baseName);\n                    }"
  },
  {
    "id" : "8f7eeed3-9957-4089-afbb-69f1afcaf4d0",
    "prId" : 22740,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22740#pullrequestreview-108195623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33f5e3fb-6c41-4357-a3ad-ea1eb2eee8df",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "`/// <reference no-default-lib=\"true\"/>` is the only one left out here.. well in addition to `/** @jsx */` ",
        "createdAt" : "2018-03-29T20:36:35Z",
        "updatedAt" : "2018-03-29T20:36:35Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "6d5dcbf6-4dde-4fe5-b49f-422d013475b2",
        "parentId" : "33f5e3fb-6c41-4357-a3ad-ea1eb2eee8df",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "funny.. i opened an issue for it some 4 years ago.. https://github.com/Microsoft/TypeScript/issues/545",
        "createdAt" : "2018-03-29T20:37:52Z",
        "updatedAt" : "2018-03-29T20:37:52Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7f4d7c0937c3a9cc7438264e375ed9cfb3fee57",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2470,2474 @@        function emitTripleSlashDirectives(files: ReadonlyArray<FileReference>, types: ReadonlyArray<FileReference>) {\n            if (currentSourceFile && currentSourceFile.moduleName) {\n                write(`/// <amd-module name=\"${currentSourceFile.moduleName}\" />`);\n                writeLine();\n            }"
  },
  {
    "id" : "48fce435-933e-4065-8349-878d7b24e611",
    "prId" : 22167,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22167#pullrequestreview-116477975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d86ae6fb-db4d-459d-ae93-744f763b14bb",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why would this be called in the first place?",
        "createdAt" : "2018-04-30T23:02:33Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "243c8a10-4308-43ac-a50b-68b4d5f6a483",
        "parentId" : "d86ae6fb-db4d-459d-ae93-744f763b14bb",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "https://github.com/Microsoft/TypeScript/pull/22167/files#diff-9e36f50e46928676c6142f634cb7cd1bR18 when the output is copied into outDir just like any other js file ?",
        "createdAt" : "2018-05-01T00:01:02Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "8a204481-fa39-4df4-b1ae-c7b824fe7f74",
        "parentId" : "d86ae6fb-db4d-459d-ae93-744f763b14bb",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i see",
        "createdAt" : "2018-05-01T00:21:24Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4143ae0c15acae0015f5aa00e8e2391ef156388",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1681,1685 @@        function emitExpressionStatement(node: ExpressionStatement) {\n            emitExpression(node.expression);\n            if (!isJsonSourceFile(currentSourceFile)) {\n                writeSemicolon();\n            }"
  },
  {
    "id" : "260043e3-5f3e-4591-b3fe-d1b798e7b253",
    "prId" : 21316,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21316#pullrequestreview-93821824",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ce8e1eb-e5f1-4958-99b6-f68b23bcb467",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Spaces should be written using `writeSpace()`, keywords using `writeKeyword(\"extends\")`, and punctuation using `writePunctuation(\"?\")` to support the symbol display builder integration with the emitter.",
        "createdAt" : "2018-01-31T21:10:46Z",
        "updatedAt" : "2018-02-03T16:41:41Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "e2022b9d-4ffb-457b-849a-f1fed027b172",
        "parentId" : "1ce8e1eb-e5f1-4958-99b6-f68b23bcb467",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Everything else is written this way in emitter.ts. Are you saying it all needs to change?",
        "createdAt" : "2018-02-03T17:07:33Z",
        "updatedAt" : "2018-02-03T17:07:33Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "8784a416-4cc7-41bf-b182-e4b6768e10d7",
        "parentId" : "1ce8e1eb-e5f1-4958-99b6-f68b23bcb467",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Nevermind, I was looking at the old declaration emitter. I will fix this.",
        "createdAt" : "2018-02-03T17:15:42Z",
        "updatedAt" : "2018-02-03T17:15:42Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4dc67aab233f5a8834dff16531baf99b16fea78",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1195,1199 @@        function emitConditionalType(node: ConditionalTypeNode) {\n            emit(node.checkType);\n            write(\" extends \");\n            emit(node.extendsType);\n            write(\" ? \");"
  },
  {
    "id" : "14105442-03be-4c2f-ab6f-b43388360052",
    "prId" : 18284,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18284#pullrequestreview-61301432",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "582db760-2bba-4301-9df2-433ca44dbe86",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "~No need to guard against undefined as that is already handled in `emit`~ \r\n\r\n_Edit: I was incorrect. Apparently emit does not have this guard._",
        "createdAt" : "2017-09-06T21:52:45Z",
        "updatedAt" : "2017-09-07T21:22:50Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "45b93cf8-6660-4f57-9d5e-bde928a0a7f1",
        "parentId" : "582db760-2bba-4301-9df2-433ca44dbe86",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I get a test failure in the test `PrinterAPI printFile removeComments` if I try to emit the asterisk unconditionally. `emit` doesn't seem to check for an undefined node.",
        "createdAt" : "2017-09-07T17:54:23Z",
        "updatedAt" : "2017-09-07T21:22:50Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b33dbecfd60b6665e744b0e3219012a73eda2222",
    "line" : 216,
    "diffHunk" : "@@ -1,1 +1670,1674 @@            emitDecorators(node, node.decorators);\n            emitModifiers(node, node.modifiers);\n            write(\"function\");\n            emitIfPresent(node.asteriskToken);\n            write(\" \");"
  },
  {
    "id" : "ea8ccbb0-fc56-409a-83f4-6147ec317ae1",
    "prId" : 16341,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16341#pullrequestreview-42760032",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59fcdf72-7e19-4787-9d7d-a76ed2b6ce9b",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Is this for `async`?",
        "createdAt" : "2017-06-07T23:16:29Z",
        "updatedAt" : "2017-06-07T23:20:51Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "3416147b-e080-4438-95a8-5a4472bb67f5",
        "parentId" : "59fcdf72-7e19-4787-9d7d-a76ed2b6ce9b",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "This existed previously and was for handling source parsed as `(x) => x` vs `x => x`.",
        "createdAt" : "2017-06-07T23:23:48Z",
        "updatedAt" : "2017-06-07T23:23:48Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "595a815b94b305359d4ecc89771a5405c267d0ab",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2287,2291 @@            const parameter = singleOrUndefined(parameters);\n            return parameter\n                && parameter.pos === parentNode.pos // may not have parsed tokens between parent and parameter\n                && !(isArrowFunction(parentNode) && parentNode.type) // arrow function may not have return type annotation\n                && !some(parentNode.decorators)     // parent may not have decorators"
  },
  {
    "id" : "3c5597d7-6c8a-42dd-9473-ced174a1e3f2",
    "prId" : 15790,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15790#pullrequestreview-37957828",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad16f015-a9aa-4e87-9dca-cc82a214a2b1",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Consider reverting this in a separate PR, and simplify the names (especially for the general emit case).",
        "createdAt" : "2017-05-12T22:41:25Z",
        "updatedAt" : "2017-05-16T22:35:41Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "11019e4a4ae9877199874d2913829b6de38cba14",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +2983,2987 @@        IntersectionTypeConstituents = AmpersandDelimited | SpaceBetweenSiblings | SingleLine,\n        ObjectBindingPatternElements = SingleLine | CommaDelimited | SpaceBetweenSiblings,\n        ObjectBindingPatternElementsWithSpaceBetweenBraces = SingleLine | AllowTrailingComma | SpaceBetweenBraces | CommaDelimited | SpaceBetweenSiblings,\n        ArrayBindingPatternElements = SingleLine | AllowTrailingComma | CommaDelimited | SpaceBetweenSiblings,\n        ObjectLiteralExpressionProperties = PreserveLines | CommaDelimited | SpaceBetweenSiblings | SpaceBetweenBraces | Indented | Braces,"
  },
  {
    "id" : "fedc8bd0-e420-4c00-997b-eb83e620d5f4",
    "prId" : 14995,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14995#pullrequestreview-30930179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc72e90a-3453-4a7c-8a75-b9cb163902fb",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "nit: could you merge these two line into one",
        "createdAt" : "2017-04-04T20:45:58Z",
        "updatedAt" : "2017-04-04T23:49:17Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "dad814cf-b473-4f36-b421-c7c1f24325b3",
        "parentId" : "bc72e90a-3453-4a7c-8a75-b9cb163902fb",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "With all of the conditions on one line, the line looks a little long.",
        "createdAt" : "2017-04-04T23:47:30Z",
        "updatedAt" : "2017-04-04T23:49:17Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "d32231ebe3fd597ffa36bfce26e7506c91a9c20c",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1122,1126 @@                // check if numeric literal is a decimal literal that was originally written with a dot\n                const text = getLiteralTextOfNode(<LiteralExpression>expression);\n                return !expression.numericLiteralFlags\n                    && text.indexOf(tokenToString(SyntaxKind.DotToken)) < 0;\n            }"
  },
  {
    "id" : "a5a7dfc5-f259-4433-a73c-94a3bf516c19",
    "prId" : 13640,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/13640#pullrequestreview-18947815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6d9c4b8-9dd4-4af3-9154-adf00206d11c",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "typo: emiting &rarr; emitting",
        "createdAt" : "2017-01-27T22:47:01Z",
        "updatedAt" : "2017-02-14T23:21:41Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "a52ccff74e8d92d7a6a08f481dea4b7b10e030bc",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1894,1898 @@            emitJsxTagName(node.tagName);\n            write(\" \");\n            // We are checking here so we won't re-enter the emiting pipeline and emit extra sourcemap\n            if (node.attributes.properties && node.attributes.properties.length > 0) {\n                emit(node.attributes);"
  },
  {
    "id" : "a8f006e3-10d3-4c0b-9ed3-8d3a467d6728",
    "prId" : 12028,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12028#pullrequestreview-8055430",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42179215-e573-4f70-878a-52de3b70af0e",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "we will need to add this to https://github.com/Microsoft/tslib\n",
        "createdAt" : "2016-11-10T17:14:06Z",
        "updatedAt" : "2016-11-10T17:14:06Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "e58c7a74-dfd9-4d5c-820d-07cf2aad6386",
        "parentId" : "42179215-e573-4f70-878a-52de3b70af0e",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "also you will need a check in checker.ts for __rest and __assign, and add some tests for these.\n",
        "createdAt" : "2016-11-10T17:17:05Z",
        "updatedAt" : "2016-11-10T17:17:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "01969475cf576b4f476beeb5aca648e743eb5cd2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +44,48 @@\n        const restHelper = `\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && !e.indexOf(p))"
  },
  {
    "id" : "16f090a1-5bb8-4f47-98f6-300c17cff22f",
    "prId" : 11653,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11653#pullrequestreview-4366828",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e46d61cd-c669-4be1-8ed4-44864eee3339",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "I can see why this is necessary, but do we have cases today when we need to emit type arguments or type annotations - asking because It will be nice to test this functionality\n",
        "createdAt" : "2016-10-15T03:57:21Z",
        "updatedAt" : "2016-10-16T00:29:11Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "490300f9-afed-47d3-84c4-36a184802a58",
        "parentId" : "e46d61cd-c669-4be1-8ed4-44864eee3339",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Primarily it helped me catch other possible future errors.\n",
        "createdAt" : "2016-10-15T04:30:51Z",
        "updatedAt" : "2016-10-16T00:29:11Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "db76a9ca0720199852c39eef1c8956d5c55bacb7",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +1220,1224 @@            write(\"new \");\n            emitExpression(node.expression);\n            emitTypeArguments(node, node.typeArguments);\n            emitExpressionList(node, node.arguments, ListFormat.NewExpressionArguments);\n        }"
  },
  {
    "id" : "1527a848-b036-4ad3-921a-e4a4eef5d70a",
    "prId" : 9151,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4950cbd-52be-4cfc-ba80-2c7bee9a278f",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "how can the container not be a sourceFile here?\n",
        "createdAt" : "2016-06-14T17:18:25Z",
        "updatedAt" : "2016-06-14T17:18:25Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "72991eda-33ea-4d1b-94c0-89ca56a966ab",
        "parentId" : "c4950cbd-52be-4cfc-ba80-2c7bee9a278f",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "If you had a namespace, then the container is probably a namespace (i.e. `ModuleDeclaration` or `ModuleBlock`).\n\nAre there any other containers I need to be aware of? Potentially statics on a class?\n",
        "createdAt" : "2016-06-14T17:23:44Z",
        "updatedAt" : "2016-06-14T17:23:44Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8a7e0c0d41fa524ddb7912d0b335abce7e4b1ea",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2153,2157 @@            function isExportReference(node: Identifier) {\n                const container = resolver.getReferencedExportContainer(node);\n                return !!container;\n            }\n"
  },
  {
    "id" : "6fd4a644-77df-4b38-8587-32c88b48fac5",
    "prId" : 7952,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc640827-f648-4379-ae40-286d4edd8e41",
        "parentId" : null,
        "authorId" : "65afaace-dcc3-4e8f-8380-4e7b93040328",
        "body" : "Polyfill I found (and what React used) convert `t` into an object, like:\n\n```\nif (t == null) {\nthrow new TypeError('Object.assign cannot be called with null or undefined');\n}\nvar result = Object(t);\n```\n\nI'm unsure if this is necessary with current browsers. But https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill does to.\n",
        "createdAt" : "2016-04-08T06:32:47Z",
        "updatedAt" : "2016-04-08T19:40:32Z",
        "lastEditedBy" : "65afaace-dcc3-4e8f-8380-4e7b93040328",
        "tags" : [
        ]
      },
      {
        "id" : "b7b3c5fa-9fb1-49ac-989a-3c414b41c16b",
        "parentId" : "bc640827-f648-4379-ae40-286d4edd8e41",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "For our uses this should it should be unnecessary anyway.\n",
        "createdAt" : "2016-04-08T08:01:07Z",
        "updatedAt" : "2016-04-08T19:40:32Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "73dbe41cd14228e5a010a082f405663b78cec925",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +347,351 @@\n        const assignHelper = `\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];"
  },
  {
    "id" : "8733a5a5-978b-4706-874c-1ccea26afb7c",
    "prId" : 6911,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aead4e83-fd8f-4e89-bbbf-3fd104291b6b",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I'd just take a `NodeArray<Statement>`\n",
        "createdAt" : "2016-02-04T23:32:05Z",
        "updatedAt" : "2016-02-05T02:20:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "83578509-e4e9-4ec6-a73f-71c3f784a8da",
        "parentId" : "aead4e83-fd8f-4e89-bbbf-3fd104291b6b",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Can you add an explicit return at the end?\n",
        "createdAt" : "2016-02-04T23:33:36Z",
        "updatedAt" : "2016-02-05T02:20:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "92eca7bb-1f47-4bcc-b944-962831f5faf5",
        "parentId" : "aead4e83-fd8f-4e89-bbbf-3fd104291b6b",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why doesn't this just return a boolean if there's a super call at that index?\n",
        "createdAt" : "2016-02-04T23:34:26Z",
        "updatedAt" : "2016-02-05T02:20:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "ecb1837f-7a2a-4b85-81d1-f5c20ac6f87f",
        "parentId" : "aead4e83-fd8f-4e89-bbbf-3fd104291b6b",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "We can't just return boolean because we should the super-call found here for emitting later\n",
        "createdAt" : "2016-02-05T02:00:50Z",
        "updatedAt" : "2016-02-05T02:20:31Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c02816feaddd97a6b915b68ac5f0fe2e9c6bde0e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4772,4776 @@             * @param index an index to constructor's body to check\n             */\n            function getSuperCallAtGivenIndex(ctor: ConstructorDeclaration, index: number): ExpressionStatement {\n                if (!ctor.body) {\n                    return undefined;"
  },
  {
    "id" : "484bbe54-cfae-45d9-8704-173eb872a019",
    "prId" : 6631,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4e09eed-9d8b-4645-8186-43cfd43111c3",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "why can't use always just do `new Promise` here?\n",
        "createdAt" : "2016-01-26T23:19:49Z",
        "updatedAt" : "2016-01-27T01:34:34Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "d0abde37-76af-4e88-b9fa-c89d6bfb8e0c",
        "parentId" : "f4e09eed-9d8b-4645-8186-43cfd43111c3",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "We are leaving support for custom Promise return types for ES5 and earlier which do not have a global Promise, so we want to keep the same argument list. The default behavior now will be to use the Promise captured in the same scope as `__awaiter`. This is to avoid issues when creating closures in namespaces:\n\n``` ts\n// input.ts\nexport namespace x {\n  var Promise = \"Not a Promise constructor.\";\n  async function f(): Promise { // references global Promise type\n  }\n}\n\n// output.js\nvar __awaiter = ...; // captures global Promise here\nexport var x = (function (x) {\n  var Promise = \"Not a Promise constructor.\"; // local Promise var shadows global Promise\n  function f() {\n    // Before this change, we would capture Promise here, which would be the wrong Promise:\n    // return __awaiter(this, void 0, Promise, function *() { });\n\n    // After this change, we use the Promise captured at the top-level of the module.\n    return __awaiter(this, void 0, void 0, function *() { });\n  }\n})(x || (x = {}));\n```\n",
        "createdAt" : "2016-01-26T23:31:30Z",
        "updatedAt" : "2016-01-27T01:34:34Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4c0c0028704f637a6417b67879132343532a261",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +321,325 @@        const awaiterHelper = `\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }"
  },
  {
    "id" : "59e90475-0ec6-4730-8cb5-be434a66c582",
    "prId" : 6597,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d77dc7e1-24e5-4f16-a5fa-1973ab4e5de5",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "The function name (`emitVar`) is misleading and we probably don't need the function at all.\n\nI'd prefer to just have a local in this function `const varOrConst = (languageVersion <= ScriptTarget.ES5) ? 'var ' : 'const ';`) and `write(varOrConst)` at these call sites.\n",
        "createdAt" : "2016-01-25T05:15:42Z",
        "updatedAt" : "2016-01-25T05:35:21Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "ed3e5f7c-e3e0-40bb-8b8f-b54cbcb6aed2",
        "parentId" : "d77dc7e1-24e5-4f16-a5fa-1973ab4e5de5",
        "authorId" : "a64f452a-2f67-4340-ac2a-5cee239c7a19",
        "body" : "done\n",
        "createdAt" : "2016-01-25T05:45:36Z",
        "updatedAt" : "2016-01-25T05:45:36Z",
        "lastEditedBy" : "a64f452a-2f67-4340-ac2a-5cee239c7a19",
        "tags" : [
        ]
      }
    ],
    "commit" : "d06d66cf5d95785c84b99944c63f9f05fa21a8ef",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +6109,6113 @@                            // import x = require(\"foo\")\n                            // import * as x from \"foo\"\n                            if (!isExportedImport) {\n                                write(varOrConst);\n                            };"
  },
  {
    "id" : "00aead6d-178d-40b2-8719-556efcc8d967",
    "prId" : 6553,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e08b598-854f-4c2f-b64a-f4f848ab8cc4",
        "parentId" : null,
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "I have a hard time parsing this comment.\n",
        "createdAt" : "2016-01-25T22:05:18Z",
        "updatedAt" : "2016-01-27T18:40:57Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "df4bda5c-923c-4844-be40-817975be4793",
        "parentId" : "4e08b598-854f-4c2f-b64a-f4f848ab8cc4",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "this comment is related to our emit in the presence of errors, should we emit zero initializers for cases like this one\n\n``` ts\nlet {a,b,c};\n```\n\nCurrently we don't do this because main reason why it is done for identifiers is that we don't want old value to be observed. However for destructuring downlevel emit will always throw if initializer is omitted .\n",
        "createdAt" : "2016-01-25T22:11:15Z",
        "updatedAt" : "2016-01-27T18:40:57Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "8a4da019-25ed-4145-b264-1061986d89dc",
        "parentId" : "4e08b598-854f-4c2f-b64a-f4f848ab8cc4",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "I see. Agreed, we shouldn't emit initializers in the destructuring case.\n",
        "createdAt" : "2016-01-25T22:58:22Z",
        "updatedAt" : "2016-01-27T18:40:57Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e67ff39e173264f622a59eaaacdd7e0add163ecb",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +4069,4073 @@                        languageVersion < ScriptTarget.ES6 &&\n                        // for names - binding patterns that lack initializer there is no point to emit explicit initializer \n                        // since downlevel codegen for destructuring will fail in the absence of initializer so all binding elements will say uninitialized\n                        node.name.kind === SyntaxKind.Identifier) {\n"
  },
  {
    "id" : "9810de01-1ef2-4e63-823a-9028753dc8ed",
    "prId" : 6194,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8d3ff8d-4650-428b-ad81-901ae8bcc21b",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "add a comment why do we need to unescape the text here\n",
        "createdAt" : "2015-12-22T00:25:50Z",
        "updatedAt" : "2016-01-26T23:45:12Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc2599083c5905451f27e63be07abdb29260242e",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +3889,3893 @@                        // We create a synthetic copy of the identifier in order to avoid the rewriting that might\n                        // otherwise occur when the identifier is emitted.\n                        index = <Identifier | LiteralExpression>createSynthesizedNode(propName.kind);\n                        // We need to unescape identifier here because when parsing an identifier prefixing with \"__\"\n                        // the parser need to append \"_\" in order to escape colliding with magic identifiers such as \"__proto__\""
  },
  {
    "id" : "366aa30b-ad79-4251-8c12-f5d133793d01",
    "prId" : 5780,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "909f9cd9-7672-4475-954a-8026a147f9fb",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "How about instead of this add a method on sourceMap with input TextWriter for JS file and that method does whatever is necessary?\n",
        "createdAt" : "2015-11-25T19:46:11Z",
        "updatedAt" : "2015-11-25T22:35:51Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "aad06fe7-7b20-4cc5-8963-20472cda5874",
        "parentId" : "909f9cd9-7672-4475-954a-8026a147f9fb",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Right now, the SourceMapWriter's only job is to write the source map, while the emitter's only job is to write the JS file. I'd rather not further conflate the two and would rather keep the logic here.\n",
        "createdAt" : "2015-11-25T20:35:54Z",
        "updatedAt" : "2015-11-25T22:35:51Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "04d53c1cfed6a01c8f8b84ce95f930c9585bd1a5",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +542,546 @@                writeLine();\n\n                const sourceMappingURL = sourceMap.getSourceMappingURL();\n                if (sourceMappingURL) {\n                    write(`//# sourceMappingURL=${sourceMappingURL}`);"
  },
  {
    "id" : "da9c3ba5-be1c-4ec8-b7dd-fbd9070eab71",
    "prId" : 5780,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ab61f25-83c6-4fb6-bace-21f6a251fb3d",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "why cant be this inside the earlier writeFile block that conditions on sourceMap and inlineSourceMap? \n",
        "createdAt" : "2015-11-25T19:49:12Z",
        "updatedAt" : "2015-11-25T22:35:51Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "34e2a093-7242-4945-bba8-77ddc41dffe8",
        "parentId" : "7ab61f25-83c6-4fb6-bace-21f6a251fb3d",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "That block is only when writing a separate file, and isn't executed when applying an inline source map. If I moved this inside that block, then we wouldn't record the source map information for inline source maps for use with the test harness.\n",
        "createdAt" : "2015-11-25T20:36:58Z",
        "updatedAt" : "2015-11-25T22:35:51Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "04d53c1cfed6a01c8f8b84ce95f930c9585bd1a5",
    "line" : 491,
    "diffHunk" : "@@ -1,1 +693,697 @@                }\n\n                if (sourceMapDataList) {\n                    sourceMapDataList.push(sourceMap.getSourceMapData());\n                }"
  },
  {
    "id" : "6ced3730-c96a-4d5f-b4ca-d7a32877b1b0",
    "prId" : 5780,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b23fbcb-41b7-47ed-8304-8f12f79a63d6",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "May be sourceMap.writeFile instead that depending on its setting writes the sourcemap file ?\n",
        "createdAt" : "2015-11-25T19:49:50Z",
        "updatedAt" : "2015-11-25T22:35:51Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "04d53c1cfed6a01c8f8b84ce95f930c9585bd1a5",
    "line" : 485,
    "diffHunk" : "@@ -1,1 +689,693 @@            /** Write emitted output to disk */\n            function writeEmittedFiles(emitOutput: string, jsFilePath: string, sourceMapFilePath: string, writeByteOrderMark: boolean) {\n                if (compilerOptions.sourceMap && !compilerOptions.inlineSourceMap) {\n                    writeFile(host, emitterDiagnostics, sourceMapFilePath, sourceMap.getText(), /*writeByteOrderMark*/ false);\n                }"
  },
  {
    "id" : "3783f7a2-3c58-4a0a-8fd5-95818bcfbd90",
    "prId" : 5780,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b696c594-c1ad-4e12-8ca8-5925b381cf1d",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "The reason behind this to depend on sourcemap was we dont need to get tokenStartPos when we are not emitting sourcemap \n",
        "createdAt" : "2015-11-25T19:51:24Z",
        "updatedAt" : "2015-11-25T22:35:51Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "60fdbba1-9d9a-49d1-a93d-529caac302cb",
        "parentId" : "b696c594-c1ad-4e12-8ca8-5925b381cf1d",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I didn't find this to be a major performance bottleneck after the change (most of the time when this is called there isn't a large amount of trivia preceeding the token), and figured simplicity outweighs unnecessary complexity.\n",
        "createdAt" : "2015-11-25T20:41:56Z",
        "updatedAt" : "2015-11-25T22:35:51Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "04d53c1cfed6a01c8f8b84ce95f930c9585bd1a5",
    "line" : 521,
    "diffHunk" : "@@ -1,1 +742,746 @@              * @param emitFn if given will be invoked to emit the text instead of actual token emit */\n            function emitToken(tokenKind: SyntaxKind, startPos: number, emitFn?: () => void) {\n                const tokenStartPos = skipTrivia(currentText, startPos);\n                emitPos(tokenStartPos);\n"
  },
  {
    "id" : "cf837c3f-6a0a-4da9-a87d-afff8fddd700",
    "prId" : 5780,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f7a3516-0b8f-4398-aa0c-4285da82f134",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I liked the earlier version better where we called emitWithSourceMap or emitWithoutSourceMap as emit so no need to call emitStart and emitEnd when sourcemap is not enabled. \n",
        "createdAt" : "2015-11-25T19:55:14Z",
        "updatedAt" : "2015-11-25T22:35:51Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "190ed1f4-46c8-429e-af66-cd72d9e39011",
        "parentId" : "2f7a3516-0b8f-4398-aa0c-4285da82f134",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I see emitWithoutSourceMap as an explicit statement that the node should not be tied back to its original source location. Since emitStart and emitEnd are no-ops when source mapping is disabled, they will be inlined as a no-op by V8. We likely don't have many cases where we turn source maps on and off during the same session in NodeJS. \n",
        "createdAt" : "2015-11-25T20:44:20Z",
        "updatedAt" : "2015-11-25T22:35:51Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "04d53c1cfed6a01c8f8b84ce95f930c9585bd1a5",
    "line" : 680,
    "diffHunk" : "@@ -1,1 +7343,7347 @@            }\n\n            function emit(node: Node): void {\n                emitNodeConsideringCommentsOption(node, emitNodeWithSourceMap);\n            }"
  },
  {
    "id" : "3baa7fb1-c54a-4c1d-b82d-9d7f93cf18e9",
    "prId" : 5648,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "940e4a67-681d-4334-a5b5-4c09243fac04",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "in ES3 we should emit this as `exports[\"defualt\"]`\n",
        "createdAt" : "2015-11-13T04:45:05Z",
        "updatedAt" : "2015-11-17T21:03:20Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "04450270-08f5-4196-bef2-092cc9316c56",
        "parentId" : "940e4a67-681d-4334-a5b5-4c09243fac04",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "never mind.\n",
        "createdAt" : "2015-11-13T04:47:41Z",
        "updatedAt" : "2015-11-17T21:03:20Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "83205d07-c338-4ead-9bd7-316e0d3f2dad",
        "parentId" : "940e4a67-681d-4334-a5b5-4c09243fac04",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : ":+1:\n",
        "createdAt" : "2015-11-13T19:54:07Z",
        "updatedAt" : "2015-11-17T21:03:20Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "db2d30af-59f5-4aee-95c5-2dd69b119ef3",
        "parentId" : "940e4a67-681d-4334-a5b5-4c09243fac04",
        "authorId" : "8b959186-ecad-4053-92b0-822de909519e",
        "body" : "Shouldn't this be regular quotation marks? (no embedded variables)\n",
        "createdAt" : "2015-11-25T15:48:18Z",
        "updatedAt" : "2015-11-25T15:48:18Z",
        "lastEditedBy" : "8b959186-ecad-4053-92b0-822de909519e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e41f1ae04d69f1dadf02c40c56d378098865f2ff",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +5598,5602 @@                    }\n                    else if (modulekind !== ModuleKind.ES6) {\n                        write(`exports.default = `);\n                        emitDeclarationName(node);\n                        write(\";\");"
  },
  {
    "id" : "3e7f5dc3-4e7b-4ed3-a836-09048d9249fc",
    "prId" : 5648,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "383da304-545e-40c5-90e8-e38ce3a8fd1b",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "just `modulekind !== ModuleKind.ES6` ? \n",
        "createdAt" : "2015-11-13T04:52:42Z",
        "updatedAt" : "2015-11-17T21:03:20Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "a7d2e92e-5304-4762-bfa6-aadd1551225e",
        "parentId" : "383da304-545e-40c5-90e8-e38ce3a8fd1b",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "`(modulekind !== ModuleKind.ES6 && !(node.flags & NodeFlags.Default)) || (node.parent.kind !== SyntaxKind.SourceFile)` is needed, since this handles non-es6 non-default exports and namespace exports. ES6 nondefault exports get handled by the `export` modifier far above.\n",
        "createdAt" : "2015-11-13T19:56:43Z",
        "updatedAt" : "2015-11-17T21:03:20Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e41f1ae04d69f1dadf02c40c56d378098865f2ff",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +5603,5607 @@                    }\n                }\n                else if (node.parent.kind !== SyntaxKind.SourceFile || (modulekind !== ModuleKind.ES6 && !(node.flags & NodeFlags.Default))) {\n                    writeLine();\n                    emitStart(node);"
  },
  {
    "id" : "492784aa-1cb6-48f0-a576-a7c43871a8e8",
    "prId" : 5561,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d7291f8-60d3-4d7e-bca3-c2aa233e2e30",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "can you use a for..of?\n",
        "createdAt" : "2015-11-07T07:04:00Z",
        "updatedAt" : "2015-11-07T23:28:46Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f1596bba7e61df6a48a6a445d89245cdef45786",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +597,601 @@                }\n                else {\n                    forEach(host.getSourceFiles(), sourceFile => {\n                        if (!isExternalModuleOrDeclarationFile(sourceFile)) {\n                            emitSourceFile(sourceFile);"
  },
  {
    "id" : "da86d3a5-b6ba-48c3-98c6-58144ff03d6d",
    "prId" : 5561,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a352b140-99a1-4195-ad16-dcbc53a30d7f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "If there's a `TempFlags.None` could you use that here?\n",
        "createdAt" : "2015-11-07T07:08:19Z",
        "updatedAt" : "2015-11-07T23:28:46Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f1596bba7e61df6a48a6a445d89245cdef45786",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +575,579 @@                paramEmitted = false;\n                awaiterEmitted = false;\n                tempFlags = 0;\n                tempVariables = undefined;\n                tempParameters = undefined;"
  },
  {
    "id" : "e103a78d-805a-4294-abd9-ada11ddf5fdb",
    "prId" : 5477,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcc2b40b-d33d-4009-852c-eeb7b21827d0",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "One possibility might be to check if the rhs is declared as `const`, and then we can emit it inline.\n",
        "createdAt" : "2015-10-30T23:21:09Z",
        "updatedAt" : "2015-10-31T00:15:12Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5dd69b7b6af655b94f81006143def9c12e8279d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +3615,3619 @@                //     for (let v of arr) { }\n                //\n                // we can't reuse 'arr' because it might be modified within the body of the loop.\n                let counter = createTempVariable(TempFlags._i);\n                let rhsReference = createSynthesizedNode(SyntaxKind.Identifier) as Identifier;"
  },
  {
    "id" : "1dc2ca83-a2c1-4de6-aa68-9d7936357896",
    "prId" : 5477,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "377158d9-5bb1-416c-a088-d2c26f02467a",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Could you add tests for this case?\n",
        "createdAt" : "2015-10-30T23:43:49Z",
        "updatedAt" : "2015-10-31T00:15:12Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "a37479aa-ef73-40ad-9281-33841832fb66",
        "parentId" : "377158d9-5bb1-416c-a088-d2c26f02467a",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "We already have tests for that case\n",
        "createdAt" : "2015-10-30T23:48:57Z",
        "updatedAt" : "2015-10-31T00:15:12Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5dd69b7b6af655b94f81006143def9c12e8279d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +3620,3624 @@                rhsReference.text = node.expression.kind === SyntaxKind.Identifier ?\n                    makeUniqueName((<Identifier>node.expression).text) :\n                    makeTempVariableName(TempFlags.Auto);\n\n                // This is the let keyword for the counter and rhsReference. The let keyword for"
  },
  {
    "id" : "f46b27a8-fe06-4559-827d-1fa59dcd7e71",
    "prId" : 5208,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ef59a01-9baf-44e7-b955-6531732b6758",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Might as well `JumpKind`.\n",
        "createdAt" : "2015-10-16T22:17:52Z",
        "updatedAt" : "2015-10-19T22:53:22Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "9f3f9070-87b1-4fdb-8dfe-ec9d841acb4e",
        "parentId" : "5ef59a01-9baf-44e7-b955-6531732b6758",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Actually `Jump` is fine as long as you just document what these are for (i.e. tracking non-local jumps for local variable capturing in loops)\n",
        "createdAt" : "2015-10-16T22:34:33Z",
        "updatedAt" : "2015-10-19T22:53:22Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2045a8784ecf196b7f2d7b5dd077a0d190be842",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +380,384 @@        }\n\n        const enum Jump {\n            Break       = 1 << 1,\n            Continue    = 1 << 2,"
  },
  {
    "id" : "2a8f56c6-1c3c-4421-8b25-28f082ebd53c",
    "prId" : 5208,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9b1e236-3f79-4253-b30a-abe84fe824e0",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Add a line above\n",
        "createdAt" : "2015-10-16T22:29:26Z",
        "updatedAt" : "2015-10-19T22:53:22Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "de04b863-48fe-4673-b843-995186d98a22",
        "parentId" : "e9b1e236-3f79-4253-b30a-abe84fe824e0",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "done\n",
        "createdAt" : "2015-10-19T20:25:57Z",
        "updatedAt" : "2015-10-19T22:53:22Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2045a8784ecf196b7f2d7b5dd077a0d190be842",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3335,3339 @@                           }\n\n                           if (!hasProperty(seen, id.text)) {\n                               emit(id);\n                               seen[id.text] = id.text;"
  },
  {
    "id" : "66280501-3ac0-43ab-9901-b82db25c42ef",
    "prId" : 5208,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8024ff62-3a47-4712-b6bf-462817fea6a7",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "``` ts\n// Don't initialize seen unless we have at least one element.\n// Emit a comma to separate for all but the first element.\n```\n",
        "createdAt" : "2015-10-16T22:30:10Z",
        "updatedAt" : "2015-10-19T22:53:22Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "7493feca-888b-43e1-893d-3d1640697b44",
        "parentId" : "8024ff62-3a47-4712-b6bf-462817fea6a7",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "done\n",
        "createdAt" : "2015-10-19T20:26:23Z",
        "updatedAt" : "2015-10-19T22:53:22Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2045a8784ecf196b7f2d7b5dd077a0d190be842",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3328,3332 @@                           // Don't initialize seen unless we have at least one element.\n                           // Emit a comma to separate for all but the first element.\n                           if (!seen) {\n                               seen = {};\n                           }"
  },
  {
    "id" : "e6931d90-a353-41c6-97dc-6bf512ad0806",
    "prId" : 5090,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75af507a-ad6b-484d-8a6a-db9f44b24dcb",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why not `umd` too?\n",
        "createdAt" : "2015-10-28T21:06:00Z",
        "updatedAt" : "2015-11-09T20:50:43Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "43604b0c-a079-498a-8766-de7e34b374e6",
        "parentId" : "75af507a-ad6b-484d-8a6a-db9f44b24dcb",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "only the amd compat part of umd would work - trying to load the concatenated umd file in a commonjs  environment would only lead to sadness. So there's no point in allowing it.\n",
        "createdAt" : "2015-10-28T23:00:43Z",
        "updatedAt" : "2015-11-09T20:50:43Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "977c3eec22470df8cb0053282f515fc6eb84c640",
    "line" : null,
    "diffHunk" : "@@ -1,1 +578,582 @@                [ModuleKind.AMD]: emitAMDModule,\n                [ModuleKind.System]: emitSystemModule,\n                [ModuleKind.UMD]() {},\n                [ModuleKind.CommonJS]() {},\n            };"
  },
  {
    "id" : "7c8addfa-7df4-4fb7-ae76-41c8ece40ea3",
    "prId" : 4914,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c20e7ccd-4cee-4800-ac43-ea193007f091",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "A lot of this looks duplicated, couldn't you consolidate it further?\n",
        "createdAt" : "2015-10-08T20:26:40Z",
        "updatedAt" : "2015-10-12T23:14:43Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "977df99e-c747-4bbe-88d3-833fed08260c",
        "parentId" : "c20e7ccd-4cee-4800-ac43-ea193007f091",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Not sure I understand what you mean\n",
        "createdAt" : "2015-10-08T20:54:51Z",
        "updatedAt" : "2015-10-12T23:14:43Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "b15b72d7-a170-4005-b483-962a121f93ae",
        "parentId" : "c20e7ccd-4cee-4800-ac43-ea193007f091",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Parts of the `if` and the `else if` look the same.\n",
        "createdAt" : "2015-10-08T21:06:58Z",
        "updatedAt" : "2015-10-12T23:14:43Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "90258794a6cfd42b4da7f8f4abbc2c381c285e05",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2817,2821 @@\n                        (<PropertyAccessExpression>synthesizedLHS).dotToken = leftHandSideExpression.dotToken;\n                        (<PropertyAccessExpression>synthesizedLHS).name = leftHandSideExpression.name;\n                        write(\", \");\n                    }"
  },
  {
    "id" : "f0523ed5-97b4-4b39-ad5c-cb60bf982a1b",
    "prId" : 4914,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e24b4aa7-6495-4ce3-8315-d3c10f5a9475",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "What is this last parameter supposed to be?\n",
        "createdAt" : "2015-10-08T20:27:47Z",
        "updatedAt" : "2015-10-12T23:14:43Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "7caa4d91-ab2f-4725-bc1e-6043824fd865",
        "parentId" : "e24b4aa7-6495-4ce3-8315-d3c10f5a9475",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "This is an already existed code. I believe what it does is toe indent the operator if it is on different line\n\n``` ts\n3\n+2;\n```\n\nwill be \n\n``` js\n3\n    + 2;\n```\n",
        "createdAt" : "2015-10-08T20:57:46Z",
        "updatedAt" : "2015-10-12T23:14:43Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "82bff9ec-7c1d-401f-99a4-b337eb890132",
        "parentId" : "e24b4aa7-6495-4ce3-8315-d3c10f5a9475",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Sure; can you leave a comment specifying what the parameter name is, and potentially break the call into several lines?\n",
        "createdAt" : "2015-10-08T21:07:41Z",
        "updatedAt" : "2015-10-12T23:14:43Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "90258794a6cfd42b4da7f8f4abbc2c381c285e05",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2872,2876 @@                        //      3\n                        //          + 2;\n                        let indentedBeforeOperator = indentIfOnDifferentLines(node, node.left, node.operatorToken, node.operatorToken.kind !== SyntaxKind.CommaToken ? \" \" : undefined);\n                        write(tokenToString(node.operatorToken.kind));\n                        let indentedAfterOperator = indentIfOnDifferentLines(node, node.operatorToken, node.right, \" \");"
  },
  {
    "id" : "d85c20e2-bd52-47d1-873d-315c49ee50d4",
    "prId" : 4829,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1102b390-8dc7-496e-9e96-9a4c77ad56bf",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Just use single quotes.\n",
        "createdAt" : "2015-09-17T19:24:41Z",
        "updatedAt" : "2015-09-17T20:03:52Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "9fba96bd-c1bc-444e-af1c-64e4b9915e34",
        "parentId" : "1102b390-8dc7-496e-9e96-9a4c77ad56bf",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "But that would fail the linter.\n",
        "createdAt" : "2015-09-17T19:57:17Z",
        "updatedAt" : "2015-09-17T20:03:52Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "b09a41b0-bf55-4347-a8e6-df3b5a5f3b23",
        "parentId" : "1102b390-8dc7-496e-9e96-9a4c77ad56bf",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "On that note, we should consider merging #4458 at some point.\n",
        "createdAt" : "2015-09-17T20:01:56Z",
        "updatedAt" : "2015-09-17T20:03:52Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3062c59fded3c23d7523b8879b6f997489665ef",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1519,1523 @@                            var identifier = getSourceTextOfNodeFromSourceFile(currentSourceFile, name);\n                            if (languageVersion === ScriptTarget.ES3 && identifier === \"default\") {\n                                write(`[\"default\"]`);\n                            }\n                            else {"
  },
  {
    "id" : "ad8224b3-f9f8-4ff4-bfda-42c7bda93920",
    "prId" : 4381,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0ab51f3-62ff-4314-a6fc-b5d952d3f6f9",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "const\n",
        "createdAt" : "2015-08-20T19:49:40Z",
        "updatedAt" : "2015-08-20T19:49:40Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "ee89b8fe-53a3-435e-959c-20d533478ed8",
        "parentId" : "d0ab51f3-62ff-4314-a6fc-b5d952d3f6f9",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Can't use `const` here until we fix the bug about TDZ and functions\n",
        "createdAt" : "2015-08-20T19:55:48Z",
        "updatedAt" : "2015-08-20T19:55:48Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "6eca09b062349a37afb0273a5ed77407e9ef4099",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +7154,7158 @@    }\n\n    var entities: Map<number> = {\n        \"quot\": 0x0022,\n        \"amp\": 0x0026,"
  },
  {
    "id" : "75e64221-8c10-4e4e-8fb3-b57ede909cdb",
    "prId" : 4380,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "182c2190-200f-4719-ab9f-40b5e98fd212",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Since `\"\"` if falsy, you could also just return `text || undefined`, but this might just be clearer anyway.\n",
        "createdAt" : "2015-08-20T19:03:12Z",
        "updatedAt" : "2015-08-21T21:49:53Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "27dabe49e0e8021e095ca3c1595e865e62831cae",
    "line" : null,
    "diffHunk" : "@@ -1,1 +6563,6567 @@                    case JsxEmit.React:\n                        let text = trimReactWhitespaceAndApplyEntities(node);\n                        if (text === undefined || text.length === 0) {\n                            return undefined;\n                        }"
  },
  {
    "id" : "fd83bab4-62d4-422b-b89c-b5bd2016b8e2",
    "prId" : 4319,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a41786f-59bd-4c1d-925b-3047b9815506",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can you add a comment, either here or on tryRenameExternalModule\n",
        "createdAt" : "2015-08-17T17:20:35Z",
        "updatedAt" : "2015-08-17T17:39:39Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "967214e7-ef8c-4382-b19f-af2ab6b40453",
        "parentId" : "6a41786f-59bd-4c1d-925b-3047b9815506",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "done, added one on `tryRenameExternalModule`\n",
        "createdAt" : "2015-08-17T17:40:09Z",
        "updatedAt" : "2015-08-17T17:40:09Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbb2425ccde8fc6b96fd5a5bdc297d96af8148f4",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +5359,5363 @@                if (moduleName.kind === SyntaxKind.StringLiteral) {\n                    write(\"require(\");\n                    let text = tryRenameExternalModule(<LiteralExpression>moduleName);\n                    if (text) {\n                        write(text);"
  },
  {
    "id" : "3ac407bd-9b09-4b9f-9c14-cf7570e496b4",
    "prId" : 4230,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d240fb54-510b-471d-970a-892af674a98a",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "I am not sure what would be an appropriate name here. So I wold love some suggestion\n",
        "createdAt" : "2015-08-08T00:33:29Z",
        "updatedAt" : "2015-08-13T00:55:26Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "aff438c3-3e03-43a9-821a-5d244fe3fe10",
        "parentId" : "d240fb54-510b-471d-970a-892af674a98a",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This is fine\n",
        "createdAt" : "2015-08-12T20:09:11Z",
        "updatedAt" : "2015-08-13T00:55:26Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6adf7feb5eea512b0b29e1361808cf3b1441cb5f",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +6987,6991 @@             *        ^ => pos; the function will emit \"comment1\" in the emitJS\n             */\n            function emitTrailingCommentsOfPosition(pos: number) {\n                let trailingComments = filterComments(getTrailingCommentRanges(currentSourceFile.text, pos), /*onlyPinnedOrTripleSlashComments:*/ compilerOptions.removeComments); \n"
  },
  {
    "id" : "cce67c36-9820-4335-b886-af8e721fb466",
    "prId" : 4230,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "663fdbb3-91d4-4878-8c93-b0c634341e5d",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why is that a trailing comment? That sounds broken\n",
        "createdAt" : "2015-08-10T18:43:14Z",
        "updatedAt" : "2015-08-13T00:55:26Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6adf7feb5eea512b0b29e1361808cf3b1441cb5f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +838,842 @@                    //         ^ => node.pos\n                    // \"comment1\" is not considered leading comment for \"y\" but rather\n                    // considered as trailing comment of the previous node.\n                    emitTrailingCommentsOfPosition(node.pos);\n                    emitNode(node);"
  },
  {
    "id" : "55ffe735-9083-4443-bb5d-10e48c8da6c8",
    "prId" : 4230,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9eb0ba98-fdc2-423b-adbd-22069610d763",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Asterisks\n",
        "createdAt" : "2015-08-12T20:08:46Z",
        "updatedAt" : "2015-08-13T00:55:26Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6adf7feb5eea512b0b29e1361808cf3b1441cb5f",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +6984,6988 @@            /**\n             * Emit trailing comments at the position. The term trailing comment is used here to describe following comment:\n             *      x, /comment1/ y\n             *        ^ => pos; the function will emit \"comment1\" in the emitJS\n             */"
  },
  {
    "id" : "5ff9af18-f0ed-42a1-bcbc-12bc21ad6b6f",
    "prId" : 4179,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d591de37-0985-48e0-801c-fd4f373f7ad8",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "@sheetalkamat this looks related to your other change.. can u take a look.\n",
        "createdAt" : "2015-08-10T19:14:40Z",
        "updatedAt" : "2015-08-10T20:53:11Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ecaea39266d6b830816bbda201ee11155123cf2",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +3112,3116 @@            \n            function emitExportSpecifierInSystemModule(specifier: ExportSpecifier): void {\n                Debug.assert(compilerOptions.module === ModuleKind.System);\n                \n                writeLine();"
  },
  {
    "id" : "c15e1888-1fa7-4c12-b14f-a52e45535b68",
    "prId" : 3945,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c568bac-22b4-45e3-a727-2305f6a52942",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why not:\n\n```\nexports_1({\n    \"x\": _a_1[\"x\"],\n    \"z\": _a_1[\"y\"]\n});\n```\n",
        "createdAt" : "2015-07-21T17:33:52Z",
        "updatedAt" : "2015-07-21T17:33:52Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "22961e5240765abe63cc9acaa6f7e71e2c66baab",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +6111,6115 @@                                writeLine();\n                                write(`var ${reexportsVariableName} = {};`)\n                                writeLine();\n                                for (let e of (<ExportDeclaration>importNode).exportClause.elements) {\n                                    write(`${reexportsVariableName}[\"`);"
  },
  {
    "id" : "4aba1307-6fbf-4d85-8001-0f007aa62fb7",
    "prId" : 3935,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65739425-828f-4ac5-8a7d-87f08c478ec2",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "you do not need this now then.\n",
        "createdAt" : "2015-07-20T21:01:01Z",
        "updatedAt" : "2015-07-25T08:02:26Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "394db46a-71f8-4866-8210-dfe1b4f16e19",
        "parentId" : "65739425-828f-4ac5-8a7d-87f08c478ec2",
        "authorId" : "8aca90a2-6b2a-4a17-811d-a61c5a4890fd",
        "body" : "I agree with you, I think that the write value of `emitSerializedReturnTypeOfNode` (`void 0`) is the right one when a function has no return type declared; instead, with this fix, `emitSerializedNode` will always write \"Object\", that could be wrong in some situation. Maybe we could enforce the null check in `emitSerializedNode` (as we did with this fix) **and** each caller should emit the right output by handling the undefined value itself. What do you think about this?\n",
        "createdAt" : "2015-07-21T06:55:21Z",
        "updatedAt" : "2015-07-25T08:02:26Z",
        "lastEditedBy" : "8aca90a2-6b2a-4a17-811d-a61c5a4890fd",
        "tags" : [
        ]
      },
      {
        "id" : "6b311543-1137-4199-9621-adc8645ddf04",
        "parentId" : "65739425-828f-4ac5-8a7d-87f08c478ec2",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "That might have an impact on performance. I think we'll consider it down the line.\n",
        "createdAt" : "2015-07-30T17:20:58Z",
        "updatedAt" : "2015-07-30T17:20:58Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6895237f9a618e1dbf3f3273333be79eff04d454",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +5015,5019 @@            /** Serializes the return type of function. Used by the __metadata decorator for a method. */\n            function emitSerializedReturnTypeOfNode(node: Node): string | string[] {\n                if (node && isFunctionLike(node) && (<FunctionLikeDeclaration>node).type) {\n                    emitSerializedTypeNode((<FunctionLikeDeclaration>node).type);\n                    return;"
  },
  {
    "id" : "e2ec4f9d-d741-4eed-bdce-57a1a598e99f",
    "prId" : 3935,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "899d4873-2975-4e6d-aa0a-8594f1800e06",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Can you add a space after the `if`?\n",
        "createdAt" : "2015-07-30T17:19:36Z",
        "updatedAt" : "2015-07-30T17:19:36Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6895237f9a618e1dbf3f3273333be79eff04d454",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4845,4849 @@            function emitSerializedTypeNode(node: TypeNode) {\n                \n                if(!node) {\n                    return; //don't write anything on the stream when type is not defined\n                }"
  },
  {
    "id" : "5bebcab0-e8fd-4d32-8167-def32ca3d211",
    "prId" : 3883,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6551131-644b-4b29-9d6e-cb3ce333bac3",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Instead of doing this can you make emitLeadingCommentsOfPosition a function pointer. It helps with the perf since that check happens just once. Do this for other functions that do nothing when remove comments too.\n\n``` Typescript\nemitLeadingCommentsOfPosition = compilerOptions.removeComments ? function (pos: number) { } : emitLeadingOCmmentsOfPositionWorker\n```\n",
        "createdAt" : "2015-09-04T18:43:32Z",
        "updatedAt" : "2015-09-10T20:06:03Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "40f05b7f7dd4090e9123b68900b5c9310c659fb5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +7107,7111 @@\n            function emitLeadingCommentsOfPositionWorker(pos: number) {\n                if (compilerOptions.removeComments) {\n                    return;\n                }"
  },
  {
    "id" : "8b5d18dc-1049-493e-be8a-e6ae328f35a3",
    "prId" : 3883,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4487280-133b-4f91-88e1-0b30b2abc3e7",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "This is concerning.\n",
        "createdAt" : "2015-09-05T01:25:01Z",
        "updatedAt" : "2015-09-10T20:06:03Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "40f05b7f7dd4090e9123b68900b5c9310c659fb5",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +7050,7054 @@\n            function emitLeadingCommentsWorker(node: Node, isEmittedNode: boolean) {\n                if (compilerOptions.removeComments) {\n                    return;\n                }"
  },
  {
    "id" : "e1952cf2-df04-4113-b423-b92cb7109c7f",
    "prId" : 3883,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "864b0a89-13af-4cb6-9727-40ee8284e885",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "This seems wrong (and seems like a very strange thing to explain to people using the product).  \"We will preserve pinned comments.  But only at the very top of a file\".\n\nIt also seems like we'll be breaking people who use pinned comments today (a feature we added precisely for people that wanted to use --removeComments, but who wanted some comments to remain).\n",
        "createdAt" : "2015-09-05T01:28:02Z",
        "updatedAt" : "2015-09-10T20:06:03Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "40f05b7f7dd4090e9123b68900b5c9310c659fb5",
    "line" : 220,
    "diffHunk" : "@@ -1,1 +7132,7136 @@                    // removeComments is true, only reserve pinned comment at the top of file\n                    // For example:\n                    //      /*! Pinned Comment */\n                    //\n                    //      var x = 10;"
  },
  {
    "id" : "8c88b770-8dc7-42f2-a95e-102546cc5ec5",
    "prId" : 3853,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dc73085-0e81-42a6-a745-928cb08f06b1",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Please define startIndex outside the if statement, and initialize it appropriately. \n",
        "createdAt" : "2015-07-15T23:32:40Z",
        "updatedAt" : "2015-07-15T23:32:40Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "379c9d49-9d3d-46e7-b1f3-45500243e765",
        "parentId" : "1dc73085-0e81-42a6-a745-928cb08f06b1",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "also use let or const instead of var.\n",
        "createdAt" : "2015-07-15T23:37:21Z",
        "updatedAt" : "2015-07-15T23:37:27Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "12809125f8eb406e7743b75425595c065e8e05af",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +4222,4226 @@                    // Emit all the directive prologues (like \"use strict\").  These have to come before\n                    // any other preamble code we write (like parameter initializers).\n                    var startIndex = emitDirectivePrologues(ctor.body.statements, /*startWithNewLine*/ true);                    \n                    emitDetachedComments(ctor.body.statements);\n                }"
  },
  {
    "id" : "32a1f37a-52c7-4708-b4c5-dd04c329a8bd",
    "prId" : 3601,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3693c64-4c1e-42ca-bac9-2de385f0ec4c",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "I would merge this two if-clause\n",
        "createdAt" : "2015-06-22T21:25:46Z",
        "updatedAt" : "2015-06-23T19:06:03Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "cab64fb8-cb0c-4c93-97d8-b3b536312fb0",
        "parentId" : "e3693c64-4c1e-42ca-bac9-2de385f0ec4c",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Two things about that:\n1. If there is no initializer present, we would unnecessarily check if there is an initializer\n2. If there is (good test case!), we actually wouldn't do the right thing.\n",
        "createdAt" : "2015-06-22T21:37:51Z",
        "updatedAt" : "2015-06-23T19:06:03Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "23e1922e-b93d-40e8-a8a0-556ce362752c",
        "parentId" : "e3693c64-4c1e-42ca-bac9-2de385f0ec4c",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Yep, you are right. I didn't pay attention to the `else if` clause \n",
        "createdAt" : "2015-06-22T22:15:37Z",
        "updatedAt" : "2015-06-23T19:06:03Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "740fd9c908380147212ecd9a2d77b238e13c7172",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3144,3148 @@\n                        let { name: paramName, initializer } = parameter;\n                        if (isBindingPattern(paramName)) {\n                            // In cases where a binding pattern is simply '[]' or '{}',\n                            // we usually don't want to emit a var declaration; however, in the presence"
  },
  {
    "id" : "fafa1bef-343f-44a4-aa65-fb944dc3d608",
    "prId" : 3586,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b75da0e-3543-4007-9fd3-660b6267f36c",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Should this be an assert too?\n",
        "createdAt" : "2015-07-15T19:06:20Z",
        "updatedAt" : "2015-07-15T19:06:20Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "d3394965-0ec2-4525-88ff-398b3ef2624c",
        "parentId" : "1b75da0e-3543-4007-9fd3-660b6267f36c",
        "authorId" : "391619ef-0978-4a45-98f3-accb4a997077",
        "body" : "@JsonFreeman I think this line is required. if this line changes into `Debug.assert`, we got a assertion error in wrong context.\n\n```\n  3 failing\n\n  1) compiler tests for tests/cases/compiler/moduleElementsInWrongContext.ts \"before all\" hook:\n     Error: Debug Failure. False expression:\n      at Object.assert (eval at <anonymous> (built/local/run.js:52497:13), <anonymous>:1533:23)\n\n  2) compiler tests for tests/cases/compiler/moduleElementsInWrongContext2.ts \"before all\" hook:\n     Error: Debug Failure. False expression:\n      at Object.assert (eval at <anonymous> (built/local/run.js:52497:13), <anonymous>:1533:23)\n\n  3) compiler tests for tests/cases/compiler/moduleElementsInWrongContext3.ts \"before all\" hook:\n     Error: Debug Failure. False expression:\n      at Object.assert (eval at <anonymous> (built/local/run.js:52497:13), <anonymous>:1533:23)\n```\n",
        "createdAt" : "2015-07-16T00:40:22Z",
        "updatedAt" : "2015-07-16T00:40:22Z",
        "lastEditedBy" : "391619ef-0978-4a45-98f3-accb4a997077",
        "tags" : [
        ]
      }
    ],
    "commit" : "a512e9eeae8e5b9f49357f69e298db98d2296582",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3014,3018 @@\n            function emitEs6ExportDefaultCompat(node: Node) {\n                if (node.parent.kind === SyntaxKind.SourceFile) {\n                    Debug.assert(!!(node.flags & NodeFlags.Default) || node.kind === SyntaxKind.ExportAssignment);\n                    // only allow export default at a source file level"
  },
  {
    "id" : "2bf0a583-42a2-4d0a-aef4-c4a8d09825ab",
    "prId" : 3564,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "067236dc-65ec-4985-93cd-bfe8d2afd979",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Cache the first check, `isSelfClosingElement`.\n",
        "createdAt" : "2015-06-22T19:41:10Z",
        "updatedAt" : "2015-06-29T17:39:59Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "77fda39f-ec89-41ec-8374-4fe16e88ad96",
        "parentId" : "067236dc-65ec-4985-93cd-bfe8d2afd979",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "I don't see that as an improvement\n",
        "createdAt" : "2015-06-22T20:04:20Z",
        "updatedAt" : "2015-06-29T17:39:59Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "3402f3556c3ceb12be8506116e15d65e5a761928",
    "line" : 219,
    "diffHunk" : "@@ -1,1 +1300,1304 @@                    emitAttributes(node.attributes);\n\n                    if (node.kind === SyntaxKind.JsxSelfClosingElement) {\n                        write(\"/>\");\n                    }"
  },
  {
    "id" : "7cbd49e7-86bd-445a-a371-530115d25967",
    "prId" : 3564,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "439e5691-c2a8-479a-92a8-19ed630dde4d",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This can just be an `if`\n",
        "createdAt" : "2015-06-22T19:42:59Z",
        "updatedAt" : "2015-06-29T17:39:59Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "879ca994-7d21-4811-a9e0-ef2c0a21fd28",
        "parentId" : "439e5691-c2a8-479a-92a8-19ed630dde4d",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Correct\n",
        "createdAt" : "2015-06-22T20:04:25Z",
        "updatedAt" : "2015-06-29T17:39:59Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "3402f3556c3ceb12be8506116e15d65e5a761928",
    "line" : null,
    "diffHunk" : "@@ -1,1 +5917,5921 @@\n            function emitJsxElement(node: JsxElement | JsxSelfClosingElement) {\n                switch (compilerOptions.jsx) {\n                    case JsxEmit.React:\n                        jsxEmitReact(node);"
  },
  {
    "id" : "170851c8-ca17-4556-9790-8883821127bb",
    "prId" : 3564,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10c28725-6f6f-42aa-89dd-e81d6cf1cef5",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "What exactly are you checking here? It's not immediately obvious.\n",
        "createdAt" : "2015-06-22T19:44:11Z",
        "updatedAt" : "2015-06-29T17:39:59Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "e26c4812-5194-4cfd-9beb-acb16121ce87",
        "parentId" : "10c28725-6f6f-42aa-89dd-e81d6cf1cef5",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Added comment with the general gist of this function\n",
        "createdAt" : "2015-06-22T20:06:32Z",
        "updatedAt" : "2015-06-29T17:39:59Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "3402f3556c3ceb12be8506116e15d65e5a761928",
    "line" : null,
    "diffHunk" : "@@ -1,1 +5941,5945 @@                    let c = text.charCodeAt(i);\n                    if (isLineBreak(c)) {\n                        if (firstNonWhitespace !== -1 && (lastNonWhitespace - firstNonWhitespace + 1 > 0)) {\n                            let part = text.substr(firstNonWhitespace, lastNonWhitespace - firstNonWhitespace + 1);\n                            result = (result ? result + '\" + \\' \\' + \"' : '') + part;"
  },
  {
    "id" : "484a718c-71fc-4a4d-85b0-40f5c2a0de81",
    "prId" : 3564,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c9ebb0d-3532-43cb-b131-5eb6a3d5e515",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This function's naming is inconsistent with other identifiers using the term \"whitespace\"\n",
        "createdAt" : "2015-06-22T19:46:19Z",
        "updatedAt" : "2015-06-29T17:39:59Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "8a793809-25a2-41c7-9ae0-74eeb12d11f7",
        "parentId" : "2c9ebb0d-3532-43cb-b131-5eb6a3d5e515",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "`whitespace` is one word; I'd rather a) not have this function be _also_ wrong and b) not break the public API for the sake of it. We can take a separate PR on that.\n",
        "createdAt" : "2015-06-22T20:08:09Z",
        "updatedAt" : "2015-06-29T17:39:59Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "3402f3556c3ceb12be8506116e15d65e5a761928",
    "line" : null,
    "diffHunk" : "@@ -1,1 +5947,5951 @@                        firstNonWhitespace = -1;\n                    }\n                    else if (!isWhiteSpace(c)) {\n                        lastNonWhitespace = i;\n                        if (firstNonWhitespace === -1) {"
  },
  {
    "id" : "cc144c20-f3be-47c7-a42b-8c029b12814d",
    "prId" : 3564,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b0601e4-bf10-4365-beeb-44956dbd2e7b",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This can just be an `if`\n",
        "createdAt" : "2015-06-22T19:48:12Z",
        "updatedAt" : "2015-06-29T17:39:59Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3402f3556c3ceb12be8506116e15d65e5a761928",
    "line" : 423,
    "diffHunk" : "@@ -1,1 +5980,5984 @@            function emitJsxText(node: JsxText) {\n                switch (compilerOptions.jsx) {\n                    case JsxEmit.React:\n                        write('\"');\n                        write(trimReactWhitespace(node));"
  },
  {
    "id" : "e6bad723-c46f-4d57-ba9d-366cddb25692",
    "prId" : 3564,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69b21ae7-c3a6-4fb9-bc04-a1fef9f3660b",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Make this an `if`\n",
        "createdAt" : "2015-06-22T19:48:53Z",
        "updatedAt" : "2015-06-29T17:39:59Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3402f3556c3ceb12be8506116e15d65e5a761928",
    "line" : null,
    "diffHunk" : "@@ -1,1 +5995,5999 @@            function emitJsxExpression(node: JsxExpression) {\n                if (node.expression) {\n                    switch (compilerOptions.jsx) {\n                        case JsxEmit.Preserve:\n                        default:"
  },
  {
    "id" : "6ab98461-a6a4-4112-8a90-c0ad4385bb35",
    "prId" : 3434,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b7a1696-1834-4687-8088-8a62a9caa615",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Missing semicolon\n",
        "createdAt" : "2015-06-09T04:09:12Z",
        "updatedAt" : "2015-06-10T19:32:42Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0763060c9c837d6c3a235e58271313e54cb3146",
    "line" : null,
    "diffHunk" : "@@ -1,1 +5332,5336 @@                write(\"}\"); // return\n                emitTempDeclarations(/*newLine*/ true);\n            }\n\n            function emitSetters(exportStarFunction: string) {"
  },
  {
    "id" : "336ed1a6-c35f-453a-99ec-f6d7a81dd143",
    "prId" : 2948,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21ec90e1-d87c-46e0-a6fb-fc918f34ba1e",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can we file a bug for source maps for modules in generarl (AMD, UMD, and System)\n",
        "createdAt" : "2015-04-29T17:19:03Z",
        "updatedAt" : "2015-04-29T20:56:32Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "2184be883c4818225360bcf7dd29139e7023ffa7",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +2678,2682 @@                        writeLine();\n                        if (compilerOptions.module === ModuleKind.System) {\n                            emitStart(specifier.name);\n                            write(`${exportFunctionForFile}(\"`);\n                            emitNodeWithoutSourceMap(specifier.name);"
  },
  {
    "id" : "83de6bc9-196c-4ac8-9808-444fdb293f7e",
    "prId" : 2901,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b83303cb-888d-4aec-b455-9f9527fbc404",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "We are considering a different approach to making `__extends` and other helpers available with something like `--noEmitHelpers`, so I would recommend removing this line.\n",
        "createdAt" : "2015-04-24T19:27:47Z",
        "updatedAt" : "2015-04-30T03:34:00Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "3eb20f45-a782-40a2-b4b4-dcdc4e66a795",
        "parentId" : "b83303cb-888d-4aec-b455-9f9527fbc404",
        "authorId" : "36e10b18-3655-4fd4-b0de-e779c0ceae8d",
        "body" : "Sorry @rbuckton I'm a little confused by that comment. Does this still apply? The intention behind this line is to inject an implementation of said helper that user can tap into.\n\nI'm thinking the check still needs to be there but maybe some logic could be applied to only add in the helper module when needed. Do you agree?\n",
        "createdAt" : "2015-04-26T23:19:05Z",
        "updatedAt" : "2015-04-30T03:34:00Z",
        "lastEditedBy" : "36e10b18-3655-4fd4-b0de-e779c0ceae8d",
        "tags" : [
        ]
      },
      {
        "id" : "7022b6fd-701b-40a8-8e73-9cdbe9577541",
        "parentId" : "b83303cb-888d-4aec-b455-9f9527fbc404",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "This makes it required for users to define \"__extends\" as a module, only in AMD., but global otherwise. i think we need to make it always global. i.e. remove the addition of \"__extends\" as a dependency name. If you want to override that you need to define a global var __extends:\n\nsomething like:\n\n``` js\nif (typeof __extends !== \"function\") {\n  __extends = function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n     __.prototype = b.prototype;\n    d.prototype = new __();\n  };\n}\n```\n",
        "createdAt" : "2015-04-27T19:01:15Z",
        "updatedAt" : "2015-04-30T03:34:00Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "4ead4863-394f-4856-9b20-f26ea1ca89a0",
        "parentId" : "b83303cb-888d-4aec-b455-9f9527fbc404",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "@whitneyit If you look at #2911, what we are considering is making a separate runtime library available that contains these helpers, which would allow you to write the following:\n\n```\ntsc --noEmitHelpers --import tslib --module commonjs app.ts\n```\n\nSo your app.js output might be the following for CommonJS:\n\n``` js\nrequire(\"tslib\");\n// app body\n```\n\nOr the following for AMD:\n\n``` js\ndefine([\"require\", \"exports\", \"tslib\"], function (require, exports) {\n  // app body\n});\n```\n\nAnd the `tslib` library (or whatever it is called), would define globals for `__extends`, `__decorate`, etc.\n",
        "createdAt" : "2015-04-28T23:47:02Z",
        "updatedAt" : "2015-04-30T03:34:00Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "69645963-44dc-4884-9305-d0b189bee2ba",
        "parentId" : "b83303cb-888d-4aec-b455-9f9527fbc404",
        "authorId" : "36e10b18-3655-4fd4-b0de-e779c0ceae8d",
        "body" : "If the tslib runtime is going to handle these helpers is there anything from with say using: `tslib.extends` instead of `__extends`? That way we could do away with globals in all contexts/module patterns\n",
        "createdAt" : "2015-04-29T00:09:30Z",
        "updatedAt" : "2015-04-30T03:34:00Z",
        "lastEditedBy" : "36e10b18-3655-4fd4-b0de-e779c0ceae8d",
        "tags" : [
        ]
      },
      {
        "id" : "85002ca8-4ef0-4e4f-bbe6-96937e6ae9c9",
        "parentId" : "b83303cb-888d-4aec-b455-9f9527fbc404",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Currently we have no way of knowing that we should import __extends from a library. We also need to be able to use these globals for `<script/>` references in the browser. That said, while the approach we're considering does introduce globals, you can still write the following, as the helpers are exported as well:\n\n``` ts\nimport { __extends } from 'tslib';\n```\n",
        "createdAt" : "2015-04-29T00:34:44Z",
        "updatedAt" : "2015-04-30T03:34:00Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "ec90ea71-5877-4c3b-8fd4-43014bd6f1b9",
        "parentId" : "b83303cb-888d-4aec-b455-9f9527fbc404",
        "authorId" : "36e10b18-3655-4fd4-b0de-e779c0ceae8d",
        "body" : "But you would know if a `--module` argument has been passed wouldn't you? That's what I was trying to do with the above line:\n\n``` js\nwrite(\", \\\"__extends\\\"\");\n```\n\nI was trying to add `__extends` as a module to the amd pattern. So if we are able to deduce that we are in a module then couldn't we use the `tslib.extends` pattern and use `__extends` otherwise. How's that sound?\n\nExample taken from #1350\n\n``` js\n// commonjs\nvar __extends = require('./tslib').extends;\nvar Mammal = require('./mammal');\nvar Human = (function (_super) {\n    __extends(Human, _super);\n    function Human() {\n        _super.apply(this, arguments);\n    }\n    return Human;\n})(Mammal);\n\n// amd\ndefine([\"require\", \"exports\", \"tslib\", './mammal'], function (require, exports, tslib, Mammal) {\n    var Human = (function (_super) {\n        tslib.extends(Human, _super);\n        function Human() {\n            _super.apply(this, arguments);\n        }\n        return Human;\n    })(Mammal);\n    return Human;\n});\n\n// script\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar Animal = (function () {\n    function Animal() {\n    }\n    return Animal;\n})();\nvar Mammal = (function (_super) {\n    __extends(Mammal, _super);\n    function Mammal() {\n        _super.apply(this, arguments);\n    }\n    return Mammal;\n})(Animal);\nvar Human = (function (_super) {\n    __extends(Human, _super);\n    function Human() {\n        _super.apply(this, arguments);\n    }\n    return Human;\n})(Mammal);\n```\n",
        "createdAt" : "2015-04-29T00:58:41Z",
        "updatedAt" : "2015-04-30T03:34:00Z",
        "lastEditedBy" : "36e10b18-3655-4fd4-b0de-e779c0ceae8d",
        "tags" : [
        ]
      }
    ],
    "commit" : "76fa4b838f7eacbd4e1a1d85b2ad739e40d4d1c9",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +5500,5504 @@                }\n                write(\"], function (require, exports\");\n                if (compilerOptions.noEmitHelpers) {\n                    write(\", __extends\");\n                }"
  },
  {
    "id" : "4ca69ce8-79f4-45bf-9171-5d96afd0e7fd",
    "prId" : 2901,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd7a637e-4d62-455f-ae39-572cebcfacd7",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "We are considering a different approach to making `__extends` and other helpers available with something like `--noEmitHelpers`, so I would recommend removing this line.\n",
        "createdAt" : "2015-04-24T19:29:28Z",
        "updatedAt" : "2015-04-30T03:34:00Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "76fa4b838f7eacbd4e1a1d85b2ad739e40d4d1c9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +5488,5492 @@\n                write(\"[\\\"require\\\", \\\"exports\\\"\");\n                if (compilerOptions.noEmitHelpers) {\n                    write(\", \\\"__extends\\\"\");\n                }"
  },
  {
    "id" : "3b06bc1c-4240-4615-987a-b9f40da2cb1f",
    "prId" : 2840,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "487149bb-3d4d-4057-adcc-21f6bf449253",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "would not it be sufficient to check if (getCombinedNodeFlags(node) & NodeFlags.Export) && node.parent.kind===SyntaxKind.SourceFile ?\n\nI am  thinking of isES6ExportedDeclaration which does the same thing.\n",
        "createdAt" : "2015-04-23T21:20:49Z",
        "updatedAt" : "2015-04-24T04:14:31Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "7a90784c-3d67-4e24-a822-adc1019eb667",
        "parentId" : "487149bb-3d4d-4057-adcc-21f6bf449253",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "no, because of hoisting var declarations defined in blocks should also be considered\n",
        "createdAt" : "2015-04-23T22:02:25Z",
        "updatedAt" : "2015-04-24T04:14:31Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "af8925545e5cd3ad2c322bd7b8088f74057f5942",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +2042,2046 @@\n                let current: Node = node;\n                while (current) {\n                    if (current.kind === SyntaxKind.SourceFile) {\n                        return !isExported || ((getCombinedNodeFlags(node) & NodeFlags.Export) !== 0)"
  },
  {
    "id" : "61d7f1ab-3f60-4b60-b4a7-a545a83a06a4",
    "prId" : 2840,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f78f7bbd-7a7b-4e33-86cb-d80f653de390",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can we just split them into two functions, one for hoistable declarations, and one for exported ones.\n",
        "createdAt" : "2015-04-23T21:22:23Z",
        "updatedAt" : "2015-04-24T04:14:31Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "651fa872-e023-4b36-babe-6dca3073c874",
        "parentId" : "f78f7bbd-7a7b-4e33-86cb-d80f653de390",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "I'll keep this function `isSourceFileLevelDeclarationInSystemJsModule` and add a helper named `shouldHoistDeclarationInSystemJsModule` that will call this function with `isExported = false`. There is only one place that invokes `isSourceFileLevelDeclarationInSystemJsModule` with `isExported = true` so I don't think it is worth adding one more helper just for this once case\n",
        "createdAt" : "2015-04-24T04:05:25Z",
        "updatedAt" : "2015-04-24T04:14:31Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "30c955cb-2797-4409-bed9-178f848b4553",
        "parentId" : "f78f7bbd-7a7b-4e33-86cb-d80f653de390",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I really do not like the name. It is too long.\n",
        "createdAt" : "2015-04-24T04:32:00Z",
        "updatedAt" : "2015-04-24T04:32:00Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "405c3db5-1212-4ea5-b715-30d8e5f541e5",
        "parentId" : "f78f7bbd-7a7b-4e33-86cb-d80f653de390",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "what alternative do you propose?\n",
        "createdAt" : "2015-04-24T17:13:35Z",
        "updatedAt" : "2015-04-24T17:13:35Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "af8925545e5cd3ad2c322bd7b8088f74057f5942",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +2034,2038 @@             * - check if node is a source level declaration to emit it differently, \n             *   i.e non-exported variable statement 'var x = 1' is hoisted so \n             *   we we emit variable statement 'var' should be dropped.\n             */\n            function isSourceFileLevelDeclarationInSystemJsModule(node: Node, isExported: boolean): boolean {"
  },
  {
    "id" : "3d1ad299-9bb1-4516-99e9-a6401df92a08",
    "prId" : 2840,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be70f310-c019-4199-9e40-03edd498fe9c",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "should also handle the ES3 case and write [\"default\"]. also can you add a test for it.\n",
        "createdAt" : "2015-04-23T21:24:33Z",
        "updatedAt" : "2015-04-24T04:14:31Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "1bd5be45-d875-48d0-95b6-cbfd6d6f3e8d",
        "parentId" : "be70f310-c019-4199-9e40-03edd498fe9c",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "never mind, just realized it is a string.\n",
        "createdAt" : "2015-04-23T21:53:08Z",
        "updatedAt" : "2015-04-24T04:14:31Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "af8925545e5cd3ad2c322bd7b8088f74057f5942",
    "line" : 286,
    "diffHunk" : "@@ -1,1 +2624,2628 @@                        write(`${exportFunctionForFile}(\"`);\n                        if (node.flags & NodeFlags.Default) {\n                            write(\"default\");\n                        }\n                        else {"
  },
  {
    "id" : "27e8389e-7c3f-4eb1-8f58-6ce4e6459ac2",
    "prId" : 2750,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72e3a1b9-4bb9-4614-81de-c9fd55d6769f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "If you know that the entity of a certain name exists, do you need the `var` even if you're in ES3/ES5?\n",
        "createdAt" : "2015-04-14T07:52:13Z",
        "updatedAt" : "2015-04-15T06:23:07Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "c782a592-ac54-4c90-81a5-53106f7708ec",
        "parentId" : "72e3a1b9-4bb9-4614-81de-c9fd55d6769f",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I didn't want to introduce a possible complication for ES3/ES5 for a scenario you can only get into for ES6+\n",
        "createdAt" : "2015-04-15T01:23:13Z",
        "updatedAt" : "2015-04-15T06:23:07Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "bec7e845-0c84-466e-ab73-27040852cb44",
        "parentId" : "72e3a1b9-4bb9-4614-81de-c9fd55d6769f",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I agree with @rbuckton \n",
        "createdAt" : "2015-04-15T17:54:19Z",
        "updatedAt" : "2015-04-15T17:54:19Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "3eb0a3abab71f933b8bfb50ca9e94505926b305e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4209,4213 @@\n            function isModuleMergedWithES6Class(node: ModuleDeclaration) {\n                return languageVersion === ScriptTarget.ES6 && !!(resolver.getNodeCheckFlags(node) & NodeCheckFlags.LexicalModuleMergesWithClass);\n            }\n"
  },
  {
    "id" : "4a1214af-6e9d-4b72-a95f-ffe98fd8fc89",
    "prId" : 2750,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87a3ae9d-9974-4571-b4bf-19ae40e8cb6b",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Oh interesting. I did not realize that in ES6, you can export a var, and then reassign to it, and it will amend the export binding too.\n",
        "createdAt" : "2015-04-14T18:19:12Z",
        "updatedAt" : "2015-04-15T06:23:07Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "78baadc5-b44c-493c-a0aa-6e529175f1b1",
        "parentId" : "87a3ae9d-9974-4571-b4bf-19ae40e8cb6b",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "`var` and `let` declarations are both mutable bindings in the environment record and exported names, `const` declarations are immutable bindings (obviously). Import bindings are immutable as well, but are an indirect binding to the binding in the environment record of the imported module.\n- [8.1.1.1.2 - CreateMutableBinding](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-declarative-environment-records-createmutablebinding-n-d)\n- [8.1.1.1.3 - CreateImmutableBinding](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-declarative-environment-records-createimmutablebinding-n-s)\n- [8.1.1.1.5 - SetMutableBinding](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-declarative-environment-records-setmutablebinding-n-v-s)\n- [8.1.1.5 - Module Environment Records](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-module-environment-records)\n- [8.1.1.5.5 - CreateImportBinding](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-createimportbinding)\n- [15.2.3.3 - Static Semantics: ExportedBindings](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-exports-static-semantics-exportedbindings)\n",
        "createdAt" : "2015-04-15T06:58:39Z",
        "updatedAt" : "2015-04-15T06:58:39Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "3eb0a3abab71f933b8bfb50ca9e94505926b305e",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +4226,4230 @@                    }\n\n                    write(\"var \");\n                    emit(node.name);\n                    write(\";\");"
  },
  {
    "id" : "d1019000-8a9f-4198-b5be-e72204678d99",
    "prId" : 2706,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8dd9d142-5a4d-42de-86c3-3c2473212d38",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Can you amend my comment? Also, did we start supporting spread?\n",
        "createdAt" : "2015-04-10T06:09:16Z",
        "updatedAt" : "2015-04-10T20:47:13Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e56c6154233174ad5c1c9b58632c3337a39dfb3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1098,1102 @@                                    return Comparison.LessThan;\n                            }\n                        case SyntaxKind.YieldExpression:\n                        case SyntaxKind.ConditionalExpression:\n                            return Comparison.LessThan;"
  },
  {
    "id" : "05682225-c0d1-4278-b5cc-45ca4cc802f0",
    "prId" : 2603,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fbc65a5-f73e-4021-9272-86d586414e22",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "let\n",
        "createdAt" : "2015-04-03T20:16:04Z",
        "updatedAt" : "2015-04-03T20:16:04Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8537232d32180f61dbd1bac35cde67932de692f6",
    "line" : 145,
    "diffHunk" : "@@ -1,1 +3641,3645 @@\n                if (isClassExpressionWithStaticProperties) {\n                    for (var property of staticProperties) {\n                        write(\",\");\n                        writeLine();"
  },
  {
    "id" : "d90285a0-b9af-4418-b1dd-559c759ec5e8",
    "prId" : 2589,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f4dd8da-ca8e-468b-91b7-fa3c2deecd45",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "should not this check if ti also has a decorator?\n",
        "createdAt" : "2015-04-02T20:59:14Z",
        "updatedAt" : "2015-04-06T18:13:54Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "f9154813-47f0-4c76-b9a0-4a07284b25fe",
        "parentId" : "5f4dd8da-ca8e-468b-91b7-fa3c2deecd45",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "This is only used by `emitSerializedTypeMetadata`, which is only called for a decorator. Adding the check would add unnecessary overhead.\n",
        "createdAt" : "2015-04-02T21:42:07Z",
        "updatedAt" : "2015-04-06T18:13:54Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bab2339a34ce2673f78ccd43b23b19201f84295",
    "line" : 358,
    "diffHunk" : "@@ -1,1 +4005,4009 @@                    case SyntaxKind.SetAccessor:\n                    case SyntaxKind.PropertyDeclaration:\n                        return true;\n                }\n"
  },
  {
    "id" : "eee83967-669c-414e-9b2b-6babd178c203",
    "prId" : 2567,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d983804-36e8-41e4-9ec5-b674461696a9",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "We also need to handle emitting static members with initialization in ES6\n",
        "createdAt" : "2015-04-01T17:38:03Z",
        "updatedAt" : "2015-04-01T17:38:03Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "c8ab5896-3604-43d4-8044-6889a0681d85",
        "parentId" : "3d983804-36e8-41e4-9ec5-b674461696a9",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "you probably need to wrap it in an IIFE\n",
        "createdAt" : "2015-04-01T17:38:35Z",
        "updatedAt" : "2015-04-01T17:38:35Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "afc38c2956e0a5cd8b3e27c934bf204e3658b7d1",
    "line" : 261,
    "diffHunk" : "@@ -1,1 +3548,3552 @@                }\n\n                var baseTypeNode = getClassExtendsHeritageClauseElement(node);\n                if (baseTypeNode) {\n                    write(\" extends \");"
  },
  {
    "id" : "d68737a1-e6ff-44b8-9ac3-f91d14d34c6e",
    "prId" : 2514,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f74168b-dff0-4c35-a777-20e6a6f0a5e8",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "We still need to get rid of _n, but that can be a separate change.\n",
        "createdAt" : "2015-03-26T20:51:49Z",
        "updatedAt" : "2015-03-26T23:32:38Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "3878b99b-ef33-4c4e-a850-e39fe001d6d1",
        "parentId" : "9f74168b-dff0-4c35-a777-20e6a6f0a5e8",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Why is this better than the TempVariableKind we had previously?\n",
        "createdAt" : "2015-03-26T20:52:06Z",
        "updatedAt" : "2015-03-26T23:32:38Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "18235a14-f919-4d6d-802c-a7047d473758",
        "parentId" : "9f74168b-dff0-4c35-a777-20e6a6f0a5e8",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "It's better because it is all in a single `tempFlags` variable.\n",
        "createdAt" : "2015-03-26T23:01:47Z",
        "updatedAt" : "2015-03-26T23:32:38Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4788581f5364a733bc3aa3e282b7eb6f6bd9702b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +18,22 @@        CountMask = 0x0FFFFFFF,  // Temp variable counter\n        _i        = 0x10000000,  // Use/preference flag for '_i'\n        _n        = 0x20000000,  // Use/preference flag for '_n'\n    }\n"
  },
  {
    "id" : "df52ce03-ab8a-4347-8f69-9b9ddb7fab8d",
    "prId" : 2514,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b19ac8c8-052c-46a8-9482-61cecc7edd5b",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "What flags does `flags` refer to? It seems like if `flags` is not _i, then you assume it's _n. But what if it's Auto? Then you will not want _n, correct?\n",
        "createdAt" : "2015-03-26T20:58:12Z",
        "updatedAt" : "2015-03-26T23:32:38Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "76881c78-e079-42b5-b1eb-207efaddf57d",
        "parentId" : "b19ac8c8-052c-46a8-9482-61cecc7edd5b",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I guess my bigger question is, why does the condition `flags && !(tempFlags & flags)` mean that you are trying to use _i or _n?\n",
        "createdAt" : "2015-03-26T20:59:10Z",
        "updatedAt" : "2015-03-26T23:32:38Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "d7075358-780c-4f94-be32-31f0e9eeb244",
        "parentId" : "b19ac8c8-052c-46a8-9482-61cecc7edd5b",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Oh it's because `flags` will be falsy if it is Auto. In that case, can you do `if (flags !== TempFlags.Auto && !(tempFlags & flags))`.\n\nCould you also rename flags to `desiredFlags` or something to indicate that it's the flag of the name you are trying to create?\n",
        "createdAt" : "2015-03-26T21:12:45Z",
        "updatedAt" : "2015-03-26T23:32:38Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "1875679d-ec6c-4355-ab21-b74b39d94719",
        "parentId" : "b19ac8c8-052c-46a8-9482-61cecc7edd5b",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "I'm not sure `desiredFlags` is that much better. If anything it should be part of the name of the flag itself. But I'd rather just keep it this way.\n",
        "createdAt" : "2015-03-26T23:13:32Z",
        "updatedAt" : "2015-03-26T23:32:38Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4788581f5364a733bc3aa3e282b7eb6f6bd9702b",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +178,182 @@            // Note that names generated by makeTempVariableName and makeUniqueName will never conflict.\n            function makeTempVariableName(flags: TempFlags): string {\n                if (flags && !(tempFlags & flags)) {\n                    var name = flags === TempFlags._i ? \"_i\" : \"_n\"\n                    if (isUniqueName(name)) {"
  },
  {
    "id" : "b7cee8d8-40a6-4545-98d3-f4efbc617c54",
    "prId" : 2514,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f852e3fd-ebac-490c-80a3-2720549026ba",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I guess this won't work if `tempFlags === TempFlags.CountMask`\n",
        "createdAt" : "2015-03-26T21:05:42Z",
        "updatedAt" : "2015-03-26T23:32:38Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "16b238b5-4f68-46f4-9374-930c5b6abdbb",
        "parentId" : "f852e3fd-ebac-490c-80a3-2720549026ba",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "That would require 250,000,000 temp variables. Likely you have bigger problems than this at that point.\n",
        "createdAt" : "2015-03-26T23:05:45Z",
        "updatedAt" : "2015-03-26T23:32:38Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "4c8994e2-59d2-46ee-8c1d-78c6abdae615",
        "parentId" : "f852e3fd-ebac-490c-80a3-2720549026ba",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Yeah I thought about that when I wrote this comment. It's not a problem.\n",
        "createdAt" : "2015-03-26T23:12:09Z",
        "updatedAt" : "2015-03-26T23:32:38Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "4788581f5364a733bc3aa3e282b7eb6f6bd9702b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +187,191 @@                while (true) {\n                    let count = tempFlags & TempFlags.CountMask;\n                    tempFlags++;\n                    // Skip over 'i' and 'n'\n                    if (count !== 8 && count !== 13) {"
  },
  {
    "id" : "46f6e4b0-9d20-4e6c-bbc3-39fdd32a2df8",
    "prId" : 2484,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa9cc453-c8a1-4d6c-b249-8e1b6f254715",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Maybe make this a `Debug.fail`\n",
        "createdAt" : "2015-03-25T03:58:37Z",
        "updatedAt" : "2015-04-27T17:12:04Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "32409f9b9b613e6e6c1bc1547e2c625f2fb7a718",
    "line" : null,
    "diffHunk" : "@@ -1,1 +406,410 @@                                return 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.charAt(inValue);\n                            }\n                            throw TypeError(inValue + \": not a 64 based value\");\n                        }\n"
  },
  {
    "id" : "e3fb5e3b-da46-4290-a1f6-c604470324b4",
    "prId" : 2484,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2433dd3-825b-4b7e-81ff-62c794684fb4",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Yay! Templates!\n",
        "createdAt" : "2015-03-25T04:23:37Z",
        "updatedAt" : "2015-04-27T17:12:04Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "32409f9b9b613e6e6c1bc1547e2c625f2fb7a718",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +635,639 @@                        // Encode the sourceMap into the sourceMap url\n                        let base64SourceMapText = convertToBase64(sourceMapText);\n                        sourceMapUrl = `//# sourceMappingURL=data:application/json;base64,${base64SourceMapText}`;\n                    }\n                    else {"
  },
  {
    "id" : "aefeed2c-2f8e-496d-b373-1e99084a1cee",
    "prId" : 2484,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4213e318-f0dc-4f1d-90cf-8590f9d58837",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Can we put this on two more lines and maybe put parens around the `||` expression?\n",
        "createdAt" : "2015-04-23T07:09:58Z",
        "updatedAt" : "2015-04-27T17:12:04Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "32409f9b9b613e6e6c1bc1547e2c625f2fb7a718",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +58,62 @@        let compilerOptions = host.getCompilerOptions();\n        let languageVersion = compilerOptions.target || ScriptTarget.ES3;\n        let sourceMapDataList: SourceMapData[] = compilerOptions.sourceMap || compilerOptions.inlineSourceMap ? [] : undefined;\n        let diagnostics: Diagnostic[] = [];\n        let newLine = host.getNewLine();"
  },
  {
    "id" : "f6e098a8-365f-423f-98a7-d95e28185d88",
    "prId" : 2484,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4769de1c-c3a3-4856-a21e-9e8d6f47eff8",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Maybe factor this out into a variable and use it above as well.\n",
        "createdAt" : "2015-04-23T07:10:58Z",
        "updatedAt" : "2015-04-27T17:12:04Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "32409f9b9b613e6e6c1bc1547e2c625f2fb7a718",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +182,186 @@            let sourceMapData: SourceMapData;\n\n            if (compilerOptions.sourceMap || compilerOptions.inlineSourceMap) {\n                initializeEmitterWithSourceMaps();\n            }"
  },
  {
    "id" : "bc8aa4f5-730f-49d9-8322-14b7e0db3063",
    "prId" : 2484,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "456e2556-d41f-42d9-921e-28ce985d6130",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Template?\n\nAlso, factor out the last part into a variable `sourcesContentJSON`\n",
        "createdAt" : "2015-04-23T07:18:37Z",
        "updatedAt" : "2015-04-27T17:12:04Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "32409f9b9b613e6e6c1bc1547e2c625f2fb7a718",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +603,607 @@                    }\n\n                    return \"{\\\"version\\\":\" + version + \",\\\"file\\\":\\\"\" + escapeString(file) + \"\\\",\\\"sourceRoot\\\":\\\"\" + escapeString(sourceRoot) + \"\\\",\\\"sources\\\":[\" + serializeStringArray(sources) + \"],\\\"names\\\":[\" + serializeStringArray(names) + \"],\\\"mappings\\\":\\\"\" + escapeString(mappings) + \"\\\" \" + (sourcesContent !== undefined ? \",\\\"sourcesContent\\\":[\" + serializeStringArray(sourcesContent) + \"]\" : \"\") + \"}\";\n\n                    function serializeStringArray(list: string[]): string {"
  },
  {
    "id" : "8775e054-4e19-40c0-a324-55358323939c",
    "prId" : 2471,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f43563f-b77e-46bc-99b2-8be97d7de387",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "curlies.\n",
        "createdAt" : "2015-03-24T18:33:09Z",
        "updatedAt" : "2015-03-24T19:28:20Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0cbcd6782899685b13a7ae1e70ac3d3c16d7809",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +71,75 @@        function isNodeDescendentOf(node: Node, ancestor: Node): boolean {\n            while (node) {\n                if (node === ancestor) return true;\n                node = node.parent;\n            }"
  },
  {
    "id" : "16be96c1-57d3-4db7-b0e5-93c41df40d1f",
    "prId" : 2471,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4205c603-801d-49fb-a434-a21ad8f7c678",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I would love if we could switch away from the .nextContainer approach, and just have .childContainers.  But that's optional and not necessary for this change.  (It would make the isUniqueLocalName simpler IMO).\n",
        "createdAt" : "2015-03-24T18:33:55Z",
        "updatedAt" : "2015-03-24T19:28:20Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "700f7b4d-3f70-47b5-b886-a9793e634879",
        "parentId" : "4205c603-801d-49fb-a434-a21ad8f7c678",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "If we decide that it is ok to always rename module parameter in module IIFE then we can get rid `isUniqueLocalName` and all related stuff. Maybe it is not that bad given that this name is kind of implementation detail that does not affect external consumers of the module\n",
        "createdAt" : "2015-03-24T18:35:41Z",
        "updatedAt" : "2015-03-24T19:28:20Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "9f9169b3-e362-4b28-a9ff-945bedec3603",
        "parentId" : "4205c603-801d-49fb-a434-a21ad8f7c678",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "See https://github.com/Microsoft/TypeScript/commit/141c96b8f3be9bd071d1a0d6583a7926f5fa3334#commitcomment-10373301\n",
        "createdAt" : "2015-03-24T18:46:58Z",
        "updatedAt" : "2015-03-24T19:28:20Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0cbcd6782899685b13a7ae1e70ac3d3c16d7809",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +78,82 @@\n        function isUniqueLocalName(name: string, container: Node): boolean {\n            for (let node = container; isNodeDescendentOf(node, container); node = node.nextContainer) {\n                if (node.locals && hasProperty(node.locals, name)) {\n                    // We conservatively include alias symbols to cover cases where they're emitted as locals"
  },
  {
    "id" : "1c572200-f8fe-44fb-9860-9b5ad6911e00",
    "prId" : 2471,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d9f0867-7f03-426b-b966-50c6e87d92ba",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "we could just update hasProperty to return false on an undefined map.  That's our general pattern for these top level helpers.\n",
        "createdAt" : "2015-03-24T18:34:52Z",
        "updatedAt" : "2015-03-24T19:28:20Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0cbcd6782899685b13a7ae1e70ac3d3c16d7809",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +207,211 @@                return !resolver.hasGlobalName(name) &&\n                    !hasProperty(currentSourceFile.identifiers, name) &&\n                    (!generatedNameSet || !hasProperty(generatedNameSet, name))\n            }\n"
  },
  {
    "id" : "8b677050-b777-42cc-9ee3-8c54dbc30ad9",
    "prId" : 2471,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6426d4c-7d4b-42a4-9160-60f05cce9ec7",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "/\\* @flags */ :)   At least to indicate that next value should be '4' and not '3'.\n",
        "createdAt" : "2015-03-24T18:37:07Z",
        "updatedAt" : "2015-03-24T19:28:20Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0cbcd6782899685b13a7ae1e70ac3d3c16d7809",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +22,26 @@    // flag enum used to request and track usages of few dedicated temp variables\n    // enum values are used to set/check bit values and thus should not have bit collisions.\n    const enum TempVariableKind {\n        auto = 0,\n        _i = 1,"
  },
  {
    "id" : "68c1bae9-86fc-4851-959b-ebfea24937be",
    "prId" : 2471,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34e1f263-8802-4b1c-8c0e-50ba7003ead8",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "starting with 1?  Blasphemy!  (j/k)\n",
        "createdAt" : "2015-03-24T18:39:00Z",
        "updatedAt" : "2015-03-24T19:28:20Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0cbcd6782899685b13a7ae1e70ac3d3c16d7809",
    "line" : null,
    "diffHunk" : "@@ -1,1 +295,299 @@                }\n\n                let i = 1;\n                let generatedName: string;\n                while (true) {"
  },
  {
    "id" : "ad9dc230-7770-4a3b-be2f-ba3a182e45fd",
    "prId" : 2471,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57fa28a9-6351-4e4d-a232-50cf02fd4cb1",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "``` ts\nfor (let i = 1; true; i++) {\n...    \n}\n```\n",
        "createdAt" : "2015-03-24T18:39:41Z",
        "updatedAt" : "2015-03-24T19:28:20Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0cbcd6782899685b13a7ae1e70ac3d3c16d7809",
    "line" : null,
    "diffHunk" : "@@ -1,1 +297,301 @@                let i = 1;\n                let generatedName: string;\n                while (true) {\n                    generatedName = baseName + i;\n                    if (isUniqueName(generatedName)) {"
  },
  {
    "id" : "82e38cd1-fe01-41aa-800c-c500fc39ef01",
    "prId" : 2471,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ce8ce8a-c7a3-4874-91c7-632e85353592",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "so we are chaining these to a boolean flag.\n",
        "createdAt" : "2015-03-24T21:41:05Z",
        "updatedAt" : "2015-03-24T21:41:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0cbcd6782899685b13a7ae1e70ac3d3c16d7809",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +24,28 @@    const enum TempVariableKind {\n        auto = 0,\n        _i = 1,\n        _n = 2,\n    }"
  },
  {
    "id" : "ff0d7bfc-b06d-4f2b-8f64-1c6365db3b51",
    "prId" : 2374,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8e8a27b-eac5-4aa9-a69d-f799889e9877",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Add comment\n",
        "createdAt" : "2015-03-16T20:04:21Z",
        "updatedAt" : "2015-03-16T20:36:58Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f8ef3881ba3c0322c47d1ba20f98dd4428b86dd",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +2078,2082 @@                    if (node) {\n                        if (nodeIsSynthesized(node)) {\n                            return emitNodeWithoutSourceMap(node, /*allowGeneratedIdentifiers*/ false);\n                        }\n                        if (node.kind != SyntaxKind.SourceFile) {"
  },
  {
    "id" : "59cae92e-9de4-48e7-ba3d-d2fe0bf2cdf9",
    "prId" : 2374,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8e329a2-972a-4caf-aefe-392ef895d3b9",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Add small comment\n",
        "createdAt" : "2015-03-16T20:04:36Z",
        "updatedAt" : "2015-03-16T20:36:58Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f8ef3881ba3c0322c47d1ba20f98dd4428b86dd",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +2087,2091 @@                        else {\n                            recordNewSourceFileStart(<SourceFile>node);\n                            emitNodeWithoutSourceMap(node, /*allowGeneratedIdentifiers*/ false);\n                        }\n                    }"
  },
  {
    "id" : "416ecc80-e474-4711-9b59-915ee4da211f",
    "prId" : 2374,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a03e8c86-e633-4efb-8254-1f4e2cf6056f",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Use default value\n",
        "createdAt" : "2015-03-16T20:18:42Z",
        "updatedAt" : "2015-03-16T20:36:58Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f8ef3881ba3c0322c47d1ba20f98dd4428b86dd",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +5361,5365 @@            }\n\n            function emitNodeWithoutSourceMapWithComments(node: Node, allowGeneratedIdentifiers?: boolean): void {\n                if (!node) {\n                    return;"
  },
  {
    "id" : "4fd5093f-d7aa-4208-98d9-2a080d628dad",
    "prId" : 2374,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4376d018-9b5f-414f-8793-a58d5dceb001",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "add default value\n",
        "createdAt" : "2015-03-16T20:22:46Z",
        "updatedAt" : "2015-03-16T20:36:58Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f8ef3881ba3c0322c47d1ba20f98dd4428b86dd",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +5382,5386 @@            }\n\n            function emitNodeWithoutSourceMapWithoutComments(node: Node, allowGeneratedIdentifiers?: boolean): void {\n                if (!node) {\n                    return;"
  },
  {
    "id" : "d8b827b4-1d85-4946-aebf-8ce1aaa29c8a",
    "prId" : 2335,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd185915-c9e3-4ea5-b774-6aa3616b7fb1",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "Can we just mark (probably as an argument) that we want to collect only default for the module instead of collecting all data and throwing it away?\n",
        "createdAt" : "2015-03-16T22:22:55Z",
        "updatedAt" : "2015-03-17T20:09:24Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "a3dbcd16-b258-4797-9ecc-8732cec2ae0f",
        "parentId" : "fd185915-c9e3-4ea5-b774-6aa3616b7fb1",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "done.\n",
        "createdAt" : "2015-03-17T03:55:08Z",
        "updatedAt" : "2015-03-17T20:09:24Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "a06ce61684e286d641c237b4688f7fb908dc675d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +5590,5594 @@\n            function emitES6Module(node: SourceFile, startIndex: number) {\n                externalImports = undefined;\n                exportSpecifiers = undefined;\n                exportDefault = undefined;"
  },
  {
    "id" : "8d9a4db1-5c21-4ce0-ae83-8310d4a839f5",
    "prId" : 2335,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02589acc-8818-4377-9ce9-d25bbe107da0",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "can you add a comment just for clarity?\n",
        "createdAt" : "2015-03-17T19:45:51Z",
        "updatedAt" : "2015-03-17T20:09:24Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "ae7afac1-2b4f-4ccc-a54e-da5fa43bdcdd",
        "parentId" : "02589acc-8818-4377-9ce9-d25bbe107da0",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "done.\n",
        "createdAt" : "2015-03-17T20:05:31Z",
        "updatedAt" : "2015-03-17T20:09:24Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "a06ce61684e286d641c237b4688f7fb908dc675d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4906,4910 @@                // check if this is an \"export default class\" as it may not have a name\n                if (node.name || !(node.flags & NodeFlags.Default)) {\n                    emitDeclarationName(node);\n                }\n                var baseTypeNode = getClassBaseTypeNode(node);"
  },
  {
    "id" : "36eabea8-653f-4b94-9db0-44e967ef4c40",
    "prId" : 2333,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7528939-d780-4110-ae1e-a46b95b15c39",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Hrmm.. are you sure we need this.  If we're emitting to ES6 and the user didn't write a constructor, it's not clear to me why we would synthesize a constructor for them.  I think the ES6 spec is just saying how you would _evaluate_ a class that didn't have an explicit constructor written in it.\n\nSo, if this is ES6 or above, and there's no class constructor written, i think you can just immediately return out of from this.\n",
        "createdAt" : "2015-03-13T09:23:53Z",
        "updatedAt" : "2015-03-16T23:24:55Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "b70003df-2261-4f14-adf1-f13119755cb4",
        "parentId" : "c7528939-d780-4110-ae1e-a46b95b15c39",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "You are right. I was misreading the specification. It is say if the constructor is empty (i.e if we didn't emit the constructor), it will be evaluate as described. I agree that we should not emit the constructor if not specified\n\nAdded: we can omit constructor if these two conditions are true: there is no explicit constructor defined by users and there is no property assignment.\n",
        "createdAt" : "2015-03-14T22:37:28Z",
        "updatedAt" : "2015-03-16T23:24:55Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "db2bebbb-1be9-4084-83fe-04211bae8684",
        "parentId" : "c7528939-d780-4110-ae1e-a46b95b15c39",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Great!\n",
        "createdAt" : "2015-03-16T20:14:21Z",
        "updatedAt" : "2015-03-16T23:24:55Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b3fccd5c4885fc88e40a14fac6fa761a8739cff",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +4788,4792 @@                        //      Else,\n                        //          Let constructor be the result of parsing the String \"constructor( ){ }\" using the syntactic grammar with the goal symbol MethodDefinition\n                        if (baseTypeNode) {\n                            write(\"(...args)\");\n                        }"
  },
  {
    "id" : "ad55fabe-de49-4b1d-91dc-b68d58e67301",
    "prId" : 2333,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82d8a156-147c-4561-b5df-0ca1ff3affd2",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "emitClassDeclarationForES5OrLower\n",
        "createdAt" : "2015-03-13T09:25:29Z",
        "updatedAt" : "2015-03-16T23:24:55Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "c3042b8f-a4c5-479f-8444-7b2ffd350a90",
        "parentId" : "82d8a156-147c-4561-b5df-0ca1ff3affd2",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "I use emitClassDeclarationForES5AndLower so it similar to emitMemberFunctionForES5AndLower\n",
        "createdAt" : "2015-03-14T22:39:01Z",
        "updatedAt" : "2015-03-16T23:24:55Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b3fccd5c4885fc88e40a14fac6fa761a8739cff",
    "line" : 259,
    "diffHunk" : "@@ -1,1 +4893,4897 @@            }\n\n            function emitClassDeclarationBelowES6(node: ClassDeclaration) {\n                write(\"var \");\n                emitDeclarationName(node);"
  },
  {
    "id" : "4162241a-c47d-4784-9356-b73bbf5a3663",
    "prId" : 2333,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8641ea46-b7f9-4007-8ff7-e2a841fa250e",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "What's this case for?\n",
        "createdAt" : "2015-03-16T18:22:32Z",
        "updatedAt" : "2015-03-16T23:24:55Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "34ca06a5-0aec-41bd-842b-53145e798e69",
        "parentId" : "8641ea46-b7f9-4007-8ff7-e2a841fa250e",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "So my understanding is that in the case of invalid usage of super, we will emit out the word `super` rather than `_super`\n",
        "createdAt" : "2015-03-16T19:27:34Z",
        "updatedAt" : "2015-03-16T23:24:55Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "f6d269fe-021e-440a-9863-f9742b9c9386",
        "parentId" : "8641ea46-b7f9-4007-8ff7-e2a841fa250e",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "I think it should just emit _super in general for down level\n",
        "createdAt" : "2015-03-16T20:02:15Z",
        "updatedAt" : "2015-03-16T23:24:55Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b3fccd5c4885fc88e40a14fac6fa761a8739cff",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2674,2678 @@                        write(\"_super.prototype\");\n                    }\n                    else {\n                        write(\"_super\");\n                    }"
  },
  {
    "id" : "394e00a9-bf80-4757-8216-5c44b46d2144",
    "prId" : 2333,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15dbec76-f33c-4e8e-8086-daa259be29fe",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Why would body not be a block?\n",
        "createdAt" : "2015-03-16T19:12:31Z",
        "updatedAt" : "2015-03-16T23:24:55Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "f8868a89-5274-42d4-bc64-2752330b51d2",
        "parentId" : "15dbec76-f33c-4e8e-8086-daa259be29fe",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "We should likely add a 'ConstructorDeclaration' type that overrides 'Body' to be 'Block'.  That will clean up a lot of the code here.\n",
        "createdAt" : "2015-03-16T20:15:35Z",
        "updatedAt" : "2015-03-16T23:24:55Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "5274be1f-f5f7-4d63-8aaa-0151b96cfab6",
        "parentId" : "15dbec76-f33c-4e8e-8086-daa259be29fe",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Agreed\n",
        "createdAt" : "2015-03-16T20:50:46Z",
        "updatedAt" : "2015-03-16T23:24:55Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b3fccd5c4885fc88e40a14fac6fa761a8739cff",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4831,4835 @@                emitMemberAssignments(node, /*staticFlag*/0);\n                if (ctor) {\n                    var statements: Node[] = (<Block>ctor.body).statements;\n                    if (superCall) {\n                        statements = statements.slice(1);"
  },
  {
    "id" : "967a361e-60ef-41ea-8dbb-80f861386367",
    "prId" : 2333,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d204e724-0328-4a02-bc4c-3e4bcfafd599",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "You could also turn this into a for..of\n",
        "createdAt" : "2015-03-16T20:14:40Z",
        "updatedAt" : "2015-03-16T23:24:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "205ca671-ecaf-405c-8148-87371960ee05",
        "parentId" : "d204e724-0328-4a02-bc4c-3e4bcfafd599",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Yes, please do :)\n",
        "createdAt" : "2015-03-16T20:51:10Z",
        "updatedAt" : "2015-03-16T23:24:55Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b3fccd5c4885fc88e40a14fac6fa761a8739cff",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4748,4752 @@\n                // Emit the constructor overload pinned comments\n                forEach(node.members, member => {\n                    if (member.kind === SyntaxKind.Constructor && !(<ConstructorDeclaration>member).body) {\n                        emitPinnedOrTripleSlashComments(member);"
  },
  {
    "id" : "ffb8219a-0c94-4039-ab64-567c85e8247a",
    "prId" : 2267,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1b95bb0-ae20-4068-8426-6426be1d26e3",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Use an explicit return type, document that it returns true if the indentation was indeed emitted.\n",
        "createdAt" : "2015-03-09T21:19:34Z",
        "updatedAt" : "2015-03-09T22:50:43Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa96475f73bcc619f63dea84e0c391ce0b6ceb43",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3037,3041 @@            // If the code is not indented, an optional valueToWriteWhenNotIndenting will be \n            // emitted instead.\n            function indentIfOnDifferentLines(parent: Node, node1: Node, node2: Node, valueToWriteWhenNotIndenting?: string) {\n                var realNodesAreOnDifferentLines = preserveNewLines && !nodeIsSynthesized(parent) && !nodeEndIsOnSameLineAsNodeStart(node1, node2);\n"
  },
  {
    "id" : "2d0ae58b-0e78-4b3f-820e-31045c9d9717",
    "prId" : 2267,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cd7bbe3-e1b3-4542-af1f-b9672afd5894",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Either add a sufficient comment explaining that this is to avoid multiple calls in common cases, or use two separate calls.\n",
        "createdAt" : "2015-03-09T21:23:55Z",
        "updatedAt" : "2015-03-09T22:50:43Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa96475f73bcc619f63dea84e0c391ce0b6ceb43",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3329,3333 @@            // call this once, passing in all their appropriate indent values, instead of needing\n            // to call this helper function multiple times.\n            function decreaseIndentIf(value1: boolean, value2?: boolean) {\n                if (value1) {\n                    decreaseIndent();"
  },
  {
    "id" : "16243bea-6a53-4d6d-a03a-fcc6443e17c2",
    "prId" : 2251,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3afbc5e6-d875-4e0d-b696-f64e65ff55de",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "What about when it's a type assertion in a parenthesized expression?\n",
        "createdAt" : "2015-03-07T09:56:31Z",
        "updatedAt" : "2015-03-07T10:08:45Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "6b9b0aaa-b87a-4d2a-947d-fe09addbed4a",
        "parentId" : "3afbc5e6-d875-4e0d-b696-f64e65ff55de",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I'll add a test for that as well.\n",
        "createdAt" : "2015-03-07T09:58:54Z",
        "updatedAt" : "2015-03-07T10:08:45Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdcdd84dda276e9db3c710008e1ca4e823f34d0d",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +4214,4218 @@                // Unwrap all type assertions.\n                var current = body;\n                while (current.kind === SyntaxKind.TypeAssertionExpression) {\n                    current = (<TypeAssertion>current).expression;\n                }"
  },
  {
    "id" : "2739e069-85d9-437d-868c-0b221b0f8856",
    "prId" : 2207,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a149ca4-4488-4a94-b222-9112e1da2a60",
        "parentId" : null,
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "What does this do?\n",
        "createdAt" : "2015-03-09T18:26:37Z",
        "updatedAt" : "2015-03-10T17:41:50Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "9c907e87-5b4f-48fa-b6c8-05dbac4252b6",
        "parentId" : "1a149ca4-4488-4a94-b222-9112e1da2a60",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I just copied it from emitForInOrForOfStatement. If source maps are requested, it emits the token with its source map spans, as opposed to `write`, which does not emit source map spans.\n",
        "createdAt" : "2015-03-09T18:50:15Z",
        "updatedAt" : "2015-03-10T17:41:50Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "ec67c886-c474-4890-be58-e1a47a21fc6c",
        "parentId" : "1a149ca4-4488-4a94-b222-9112e1da2a60",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "I have to say I find this `emitToken` method very obtuse!\n",
        "createdAt" : "2015-03-09T21:47:22Z",
        "updatedAt" : "2015-03-10T17:41:50Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "3b10453f-e097-4dff-af26-c9d4cca478fb",
        "parentId" : "1a149ca4-4488-4a94-b222-9112e1da2a60",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Me too. Particularly because it's a function pointer that can be set to emitTokenText or writeTextWithSpanRecord. One thing I don't understand is why it's important to emit a source map span for a token. The other thing I don't understand is why it takes a callback to override the default emit behavior.\n",
        "createdAt" : "2015-03-09T22:14:09Z",
        "updatedAt" : "2015-03-10T17:41:50Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "f389aefc478de9d867e56ef56da6e66309c8a187",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +3565,3569 @@                // for-of bodies are always emitted as blocks.\n                \n                var endPos = emitToken(SyntaxKind.ForKeyword, node.pos);\n                write(\" \");\n                endPos = emitToken(SyntaxKind.OpenParenToken, endPos);"
  },
  {
    "id" : "7f494758-779c-4076-a747-b46611bb9d52",
    "prId" : 2207,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "818b7dc8-4b80-4eeb-a806-fc1eb3b7f783",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Can you please add a comment `// Note that _i is skipped`, since the above is super subtle.\n",
        "createdAt" : "2015-03-09T21:10:41Z",
        "updatedAt" : "2015-03-10T17:41:50Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f389aefc478de9d867e56ef56da6e66309c8a187",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +2122,2126 @@                    // _a .. _h, _j ... _z, _0, _1, ...\n                    // Note that _i is skipped\n                    name = \"_\" + (tempCount < 25 ? String.fromCharCode(tempCount + (tempCount < 8 ? 0 : 1) + CharacterCodes.a) : tempCount - 25);\n                    tempCount++;\n                }"
  },
  {
    "id" : "086f9e86-8c6a-4120-b91b-1bfc0b43e82a",
    "prId" : 2194,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1994c065-adc5-4fb9-b0e5-0e8fe9f40ed8",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "You can turn this into a for-loop:\n\n``` TypeScript\nfor (var frame = lastFrame; frame; frame = frame.previous) {\n    // ...\n}\n```\n",
        "createdAt" : "2015-03-04T06:25:37Z",
        "updatedAt" : "2015-03-04T07:47:15Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "96f79432-5dc4-4aa5-a16e-b7360fdbe668",
        "parentId" : "1994c065-adc5-4fb9-b0e5-0e8fe9f40ed8",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "I can but don't think that this will be more readable than current version :)\n",
        "createdAt" : "2015-03-04T06:53:26Z",
        "updatedAt" : "2015-03-04T07:47:15Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a6b59a3ba448d8da0086eb7a16c9b471349f630",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1723,1727 @@                    }\n                    frame = frame.previous;\n                }\n                return false;\n            }"
  },
  {
    "id" : "3ec1277a-4d42-4cdd-a3ba-a53ed4613fb1",
    "prId" : 2194,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "285dff45-05ce-41c9-8f07-ed8c5dbb663b",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Add a newline before this `if` (and maybe the `var`). Then leave a comment like \n\n``` TypeScript\n// Try checking the current scope and all previous scopes to fully\n// check whether the a variable with the given name has been declared.\n```\n\nThen add to the comment on why the resolver doesn't already cover these cases. From what I can gather, this is for cases where the resolver is unaware of another variable which you have generated and are emitting.\n",
        "createdAt" : "2015-03-04T06:40:09Z",
        "updatedAt" : "2015-03-04T07:47:15Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "2636cf7f-e8da-47d9-b463-c074e06fcdb2",
        "parentId" : "285dff45-05ce-41c9-8f07-ed8c5dbb663b",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "resolver can tell you about names that you wrote, however it has no idea about names that were generated by the emitter - this is why we need to consult both resolver and chain of name scopes in emitter\n",
        "createdAt" : "2015-03-04T06:55:51Z",
        "updatedAt" : "2015-03-04T07:47:15Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "de2848ff-e031-47e9-b078-9601140bf34b",
        "parentId" : "285dff45-05ce-41c9-8f07-ed8c5dbb663b",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Good, just making sure. Let's just document it here.\n",
        "createdAt" : "2015-03-04T07:07:06Z",
        "updatedAt" : "2015-03-04T07:47:15Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a6b59a3ba448d8da0086eb7a16c9b471349f630",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1700,1704 @@\n                // check if name is present in generated names that were introduced by the emitter\n                if (currentScopeNames && hasProperty(currentScopeNames, name)) {\n                    return true;\n                }"
  },
  {
    "id" : "e1965017-bde3-4c62-a22e-0cb8bfd342f2",
    "prId" : 2194,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71052c57-4d27-45a3-9b5a-80f1d127afb2",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Ah, yes this example looks more relevant.\n",
        "createdAt" : "2015-03-04T08:01:39Z",
        "updatedAt" : "2015-03-04T08:01:39Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "b26fa35e-2cad-4212-b7a0-0fd1cc2d4910",
        "parentId" : "71052c57-4d27-45a3-9b5a-80f1d127afb2",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Because it is an example of generating a name in one scope, and referencing it in a nested scope. And it's not use-before-def so it has to be emitted correctly.\n",
        "createdAt" : "2015-03-04T08:04:26Z",
        "updatedAt" : "2015-03-04T08:04:26Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "8f92695c-0ad5-4123-91f3-db35a1d1cc33",
        "parentId" : "71052c57-4d27-45a3-9b5a-80f1d127afb2",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "this example is emitted correctly\n",
        "createdAt" : "2015-03-04T08:07:56Z",
        "updatedAt" : "2015-03-04T08:07:56Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a6b59a3ba448d8da0086eb7a16c9b471349f630",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1714,1718 @@                //        console.log(x); // 3\n                //    }\n                //}\n                // here both x(1) and x(2) should be renamed and their names should be different\n                // so x in (3) will refer to x(1)"
  },
  {
    "id" : "9e7d6b4b-fb8f-45ac-8771-3ade3a9c2480",
    "prId" : 2163,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdb2b735-1228-4cee-8337-dea9a928fce9",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Shouldn't this be optional?\n",
        "createdAt" : "2015-02-27T01:30:15Z",
        "updatedAt" : "2015-02-27T01:30:15Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "a5b166e8-21cf-46ec-a09c-9a3859490ab8",
        "parentId" : "bdb2b735-1228-4cee-8337-dea9a928fce9",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "If it's optional then it, as a structural type, has no meaning.  \n",
        "createdAt" : "2015-02-27T01:43:53Z",
        "updatedAt" : "2015-02-27T01:43:53Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "71c3bccef4d6492ee3bdcd170d551376fcb5ef42",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1525,1529 @@\n    interface SynthesizedNode extends Node {\n        startsOnNewLine: boolean;\n    }\n"
  },
  {
    "id" : "2bb83dac-9f22-4e5a-a3e4-cbc45619d4ab",
    "prId" : 2161,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87c7461c-2f93-4ffe-9185-64f8c1be482f",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Mention that this distinction has to do with source maps\n",
        "createdAt" : "2015-02-28T00:34:26Z",
        "updatedAt" : "2015-02-28T01:24:41Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b3a94c7d7bea54baec55507d67dc458004da59d",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +3344,3348 @@                }\n\n                if (startPos !== undefined) {\n                    emitToken(tokenKind, startPos);\n                }"
  },
  {
    "id" : "23830627-4c45-4c5f-83dd-51e01f410ff6",
    "prId" : 2139,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e213c05-5979-471a-8585-53b3c56d8965",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "may be call this isReferenced or isUsed to distinguish it from the checker's isVisible flag..\n",
        "createdAt" : "2015-03-18T19:34:23Z",
        "updatedAt" : "2015-03-18T21:29:26Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ad40c25c9778494bd5938e10bb3b50d55e56ec8",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +47,51 @@        asynchronousOutput?: string; // If the output for alias was written asynchronously, the corresponding output\n        subModuleElementDeclarationEmitInfo?: ModuleElementDeclarationEmitInfo[];\n        isVisible?: boolean;\n    }\n"
  },
  {
    "id" : "fbedbe4a-394a-45f3-ab00-3eee603ad081",
    "prId" : 2139,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adf50927-d198-4813-9974-c71e9a4a5c92",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "also needs a new name.. possibly pendingEdits\n",
        "createdAt" : "2015-03-18T19:40:46Z",
        "updatedAt" : "2015-03-18T21:29:26Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ad40c25c9778494bd5938e10bb3b50d55e56ec8",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +378,382 @@\n        let moduleElementDeclarationEmitInfo: ModuleElementDeclarationEmitInfo[] = [];\n        let asynchronousSubModuleDeclarationEmitInfo: ModuleElementDeclarationEmitInfo[];\n\n        // Contains the reference paths that needs to go in the declaration file."
  },
  {
    "id" : "34202445-b659-4b45-aeb1-7c2176c71db0",
    "prId" : 2138,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06598ca5-2a87-4a5f-923d-484bcc99aa4c",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "What if there are statements, but the function is still all on one line? Many stubs are written this way:\n\n``` ts\nvar obj = {\n    toString: () => { return \"\"; }\n};\n```\n",
        "createdAt" : "2015-02-25T22:02:36Z",
        "updatedAt" : "2015-02-25T22:25:34Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "d205cb51-aa1d-4b43-b2f3-1e4d2bb674f2",
        "parentId" : "06598ca5-2a87-4a5f-923d-484bcc99aa4c",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Actually I think this is precisely what you are handling that the previous code did not.\n",
        "createdAt" : "2015-02-25T22:04:15Z",
        "updatedAt" : "2015-02-25T22:25:34Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7214442cde66de15e3eb35fef1ade1b9494e246",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3959,3963 @@                var preambleEmitted = writer.getTextPos() !== initialTextPos;\n\n                if (!preambleEmitted && nodeEndIsOnSameLineAsNodeStart(body, body)) {\n                    for (var i = 0, n = body.statements.length; i < n; i++) {\n                        write(\" \");"
  },
  {
    "id" : "a8d88d0c-1649-4f5d-9975-16489e0fa36f",
    "prId" : 2025,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77c8aabb-6b44-4df8-982d-f8f7254ca3f3",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "When would the `name` be `undefined`?\n",
        "createdAt" : "2015-02-16T22:36:50Z",
        "updatedAt" : "2015-02-16T22:36:50Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "c7d0dc5f-8654-453b-8c16-bebda8834e7a",
        "parentId" : "77c8aabb-6b44-4df8-982d-f8f7254ca3f3",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Never mind, I see that the reason is that you can have an omitted element such as in the following:\n\n`var [a, , c] = foo();`\n\nBut please put a comment with an example.\n\nAlso, I believe that @JsonFreeman mentioned that for a well-formed tree, it is more appropriate to check the syntax kind.\n",
        "createdAt" : "2015-02-16T22:42:52Z",
        "updatedAt" : "2015-02-16T22:42:56Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "dae9e06e-eab5-4dbe-9cac-3bbda1715b80",
        "parentId" : "77c8aabb-6b44-4df8-982d-f8f7254ca3f3",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Namely, when bindingElement.name is undefined, it's because the syntax kind is OmittedExpression and not BindingElement\n",
        "createdAt" : "2015-02-16T22:44:31Z",
        "updatedAt" : "2015-02-16T22:44:31Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "b88efa1b80fea9d49e5385a33ccfb894c60e72d3",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +1103,1107 @@                }\n\n                if (bindingElement.name) {\n                    if (isBindingPattern(bindingElement.name)) {\n                        emitBindingPattern(<BindingPattern>bindingElement.name);"
  },
  {
    "id" : "acc8a2e6-1bb0-4be1-890c-0d5b4eb64ce2",
    "prId" : 1983,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c479832b-cae2-4b06-8b74-6b94b5f614a7",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Can we say `=== ModuleKind.CommonJS`\n",
        "createdAt" : "2015-02-11T19:19:29Z",
        "updatedAt" : "2015-02-23T19:27:45Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "eb5c5f1f-cd06-4f9f-af45-a9474bbfaa56",
        "parentId" : "c479832b-cae2-4b06-8b74-6b94b5f614a7",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "No, because we default to emitting CommonJS style when the user hasn't opted into modules (along with giving an error).\n",
        "createdAt" : "2015-02-11T19:24:43Z",
        "updatedAt" : "2015-02-23T19:27:45Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "27529f1d38584189b98e57a526d3854216ab5c45",
    "line" : 334,
    "diffHunk" : "@@ -1,1 +4468,4472 @@                    var declarationNode = info.declarationNode;\n                    var namedImports = info.namedImports;\n                    if (compilerOptions.module !== ModuleKind.AMD) {\n                        emitLeadingComments(node);\n                        emitStart(node);"
  },
  {
    "id" : "50ab7abd-2887-4ed6-8289-26a6bf514ca2",
    "prId" : 1983,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1543ba1-c28d-4e3d-9a38-4e7a5f0b4d3b",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "If it's exported, don't you have to emit `M.` before the member name?\n",
        "createdAt" : "2015-02-11T19:20:32Z",
        "updatedAt" : "2015-02-23T19:27:45Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "299539fb-a0ce-44fe-91a1-a9d4dd3aaeb8",
        "parentId" : "c1543ba1-c28d-4e3d-9a38-4e7a5f0b4d3b",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Yes, that's what `emitModuleMemberName` does.\n",
        "createdAt" : "2015-02-11T19:28:01Z",
        "updatedAt" : "2015-02-23T19:27:45Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "81becf7e-4165-4f1e-8ce9-a322775cdc58",
        "parentId" : "c1543ba1-c28d-4e3d-9a38-4e7a5f0b4d3b",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "But sometimes you emit the var keyword before that. How does that work? It would be `var M.v`. I am assuming that emitModuleMemberName does check if the thing is exported, and only then it emits the prefix. If that's the case, why can't it also be responsible for the var keyword?\n",
        "createdAt" : "2015-02-11T19:31:27Z",
        "updatedAt" : "2015-02-23T19:27:45Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "fd8ed8d6-338f-4184-87c3-70341a28ab9f",
        "parentId" : "c1543ba1-c28d-4e3d-9a38-4e7a5f0b4d3b",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "emitModuleMemberName doesn't (and shouldn't) know whether the surrounding context requires a var keyword to be emitted first. It checks the NodeFlags.Export flag on the node to know whether to rewrite, but that's pretty much it.\n",
        "createdAt" : "2015-02-12T14:28:51Z",
        "updatedAt" : "2015-02-23T19:27:45Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "374125e3-c941-4906-b0ca-5cf2ab5358be",
        "parentId" : "c1543ba1-c28d-4e3d-9a38-4e7a5f0b4d3b",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Ah, because this is used for both definitions and references\n",
        "createdAt" : "2015-02-12T19:14:08Z",
        "updatedAt" : "2015-02-23T19:27:45Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "27529f1d38584189b98e57a526d3854216ab5c45",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4474,4478 @@                        if (declarationNode) {\n                            if (!(declarationNode.flags & NodeFlags.Export)) write(\"var \");\n                            emitModuleMemberName(declarationNode);\n                            write(\" = \");\n                            emitRequire(moduleName);"
  },
  {
    "id" : "42b4b680-5732-4c54-83c3-ecc54c97b7a2",
    "prId" : 1983,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c14898a0-ec89-4058-afe6-0acab9e81e49",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Is there a good reason to do this, or just legacy?\n",
        "createdAt" : "2015-02-11T19:24:25Z",
        "updatedAt" : "2015-02-23T19:27:45Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "8bea6b1e-d175-41d0-8ac1-ac0ac9a33d73",
        "parentId" : "c14898a0-ec89-4058-afe6-0acab9e81e49",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "IIRC, someone was relying on top-level import aliases to always be emitted such that the resulting global variable could be accessed from JavaScript.\n",
        "createdAt" : "2015-02-12T14:33:16Z",
        "updatedAt" : "2015-02-23T19:27:45Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "27529f1d38584189b98e57a526d3854216ab5c45",
    "line" : 381,
    "diffHunk" : "@@ -1,1 +4512,4516 @@                // - import declaration is top level and target is value imported by entity name\n                if (resolver.isReferencedImportDeclaration(node) ||\n                    (!isExternalModule(currentSourceFile) && resolver.isTopLevelValueImportEqualsWithEntityName(node))) {\n                    emitLeadingComments(node);\n                    emitStart(node);"
  },
  {
    "id" : "ad73e018-58f9-47b3-bf96-5263e1680ff2",
    "prId" : 1974,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37cf955d-88b9-4ddd-94c7-92cac222ffed",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "isSingleLineEmptyBlock\n",
        "createdAt" : "2015-02-07T02:49:37Z",
        "updatedAt" : "2015-02-07T02:49:37Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "36b6f4e1b724765ed8e7ec6364f216456189c7ad",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2714,2718 @@            }\n\n            function isSingleLineBlock(node: Node) {\n                if (node && node.kind === SyntaxKind.Block) {\n                    var block = <Block>node;"
  },
  {
    "id" : "8f2e97c9-7776-4695-9aaa-08b56e522442",
    "prId" : 1974,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b655fdae-3be4-4e76-bf49-f4d1ef711359",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Does node1 ever differ from node2?\n",
        "createdAt" : "2015-02-07T02:50:02Z",
        "updatedAt" : "2015-02-07T02:50:02Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "3cae085a-325c-4bfc-bce7-70226574a63c",
        "parentId" : "b655fdae-3be4-4e76-bf49-f4d1ef711359",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "If not, then just check the pos and end of the single node\n",
        "createdAt" : "2015-02-07T02:50:56Z",
        "updatedAt" : "2015-02-07T02:50:56Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "36b6f4e1b724765ed8e7ec6364f216456189c7ad",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +2901,2905 @@            }\n\n            function nodeEndIsOnSameLineAsNodeStart(node1: Node, node2: Node) {\n                return getLineOfLocalPosition(currentSourceFile, node1.end) ===\n                    getLineOfLocalPosition(currentSourceFile, skipTrivia(currentSourceFile.text, node2.pos));"
  },
  {
    "id" : "fa233727-cdff-4eac-bb6a-e4a6de9d637f",
    "prId" : 1974,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8af1fa6b-f0f9-4e90-96d3-1e73596aea2a",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Wow, this diff is awful.\n",
        "createdAt" : "2015-02-07T02:52:45Z",
        "updatedAt" : "2015-02-07T02:52:45Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "1ae25021-da6f-4321-b7b1-399150ce7d69",
        "parentId" : "8af1fa6b-f0f9-4e90-96d3-1e73596aea2a",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I'm assuming nothing changed inside this else block?\n",
        "createdAt" : "2015-02-07T02:52:59Z",
        "updatedAt" : "2015-02-07T02:52:59Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "36b6f4e1b724765ed8e7ec6364f216456189c7ad",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +3472,3476 @@                                emitEnd(node.body);\n                            }\n                        }\n                    }\n"
  },
  {
    "id" : "29ed87bd-902c-4515-8fd9-cbbdc51ac62f",
    "prId" : 1950,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6a5d6a0-6ccf-4fea-87aa-3b2ff8b58397",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "@JsonFreeman @sheetalkamat what is the appropriate behavior here?\n",
        "createdAt" : "2015-02-20T22:09:47Z",
        "updatedAt" : "2015-02-21T02:42:53Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "89c5f74a-166d-44f7-8897-084492d4782d",
        "parentId" : "a6a5d6a0-6ccf-4fea-87aa-3b2ff8b58397",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Probably emit\n",
        "createdAt" : "2015-02-20T22:15:05Z",
        "updatedAt" : "2015-02-21T02:42:53Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "4138fed1d751c617139419ec0f71d289ffbf7fff",
    "line" : 579,
    "diffHunk" : "@@ -1,1 +3872,3876 @@\n            function emitMemberAccessForPropertyName(memberName: DeclarationName) {\n                // TODO: (jfreeman,drosen): comment on why this is emitNode instead of emit here.\n                if (memberName.kind === SyntaxKind.StringLiteral || memberName.kind === SyntaxKind.NumericLiteral) {\n                    write(\"[\");"
  },
  {
    "id" : "dd18d747-acfb-4438-904e-90a1f744c971",
    "prId" : 1950,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b9049c1-5c8d-49a8-b280-bceae777418a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "@sheetalkamat \n",
        "createdAt" : "2015-02-20T22:11:40Z",
        "updatedAt" : "2015-02-21T02:42:53Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4138fed1d751c617139419ec0f71d289ffbf7fff",
    "line" : 595,
    "diffHunk" : "@@ -1,1 +3929,3933 @@                        emitEnd((<MethodDeclaration>member).name);\n                        write(\" = \");\n                        // TODO (drosen): Should we performing emitStart twice on emitStart(member)?\n                        emitStart(member);\n                        emitFunctionDeclaration(<MethodDeclaration>member);"
  },
  {
    "id" : "3dc4bec2-cb34-4142-b624-5a636d78320b",
    "prId" : 1950,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdf9ecda-1043-458e-b34f-f4d388685259",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "@sheetalkamat?\n",
        "createdAt" : "2015-02-20T22:18:01Z",
        "updatedAt" : "2015-02-21T02:42:53Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4138fed1d751c617139419ec0f71d289ffbf7fff",
    "line" : 612,
    "diffHunk" : "@@ -1,1 +3949,3953 @@                            }\n                            write(\", \");\n                            // TODO: Shouldn't emitStart on name occur *here*?\n                            emitExpressionForPropertyName((<AccessorDeclaration>member).name);\n                            emitEnd((<AccessorDeclaration>member).name);"
  },
  {
    "id" : "e588ba8a-f21b-44dc-9682-9e4771249aea",
    "prId" : 1931,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba899e2f-7d41-4b4a-85b0-15f0a8d9238f",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "This is pretty confusing. Can you put a comment explaining what this is doing? Also, I think it makes sense to replace the numbers with named constants. This can be addressed separately from this change.\n",
        "createdAt" : "2015-02-06T08:50:43Z",
        "updatedAt" : "2015-02-06T15:39:33Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "84d88ca5-93bb-4be0-900b-f37a6a5d55bd",
        "parentId" : "ba899e2f-7d41-4b4a-85b0-15f0a8d9238f",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Unrelated to this checkin, all that changed was formatting (guess VS must have formatted the file).\n",
        "createdAt" : "2015-02-06T14:33:47Z",
        "updatedAt" : "2015-02-06T15:39:34Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "7e3ece93-19ce-42f1-a4f9-291f04ff3956",
        "parentId" : "ba899e2f-7d41-4b4a-85b0-15f0a8d9238f",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Yup, just pointing out that it would be good to clarify it, but in a separate change.\n",
        "createdAt" : "2015-02-06T18:47:06Z",
        "updatedAt" : "2015-02-06T18:47:06Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "0819ca897cf2dc61f8e60f51870e192ae28c764b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1922,1926 @@                    }\n                    // _a .. _h, _j ... _z, _0, _1, ...\n                    name = \"_\" + (tempCount < 25 ? String.fromCharCode(tempCount + (tempCount < 8 ? 0 : 1) + CharacterCodes.a) : tempCount - 25);\n                    tempCount++;\n                }"
  },
  {
    "id" : "3ba7bd98-e090-412a-9a4c-2568c943024f",
    "prId" : 1931,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91c6f74f-c600-4e4c-ac2c-7c0d419bf442",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Can recordTempDeclaration be folded into createTempVariable?\n",
        "createdAt" : "2015-02-06T09:11:54Z",
        "updatedAt" : "2015-02-06T15:39:33Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "08950f99-5ad6-4d91-a712-731c88662ef6",
        "parentId" : "91c6f74f-c600-4e4c-ac2c-7c0d419bf442",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "It probably could, but I prefer keeping them separate instead of adding another boolean argument.\n",
        "createdAt" : "2015-02-06T14:51:21Z",
        "updatedAt" : "2015-02-06T15:39:34Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "9b72952e-d5b1-4e3c-9ae4-0ddecb963b57",
        "parentId" : "91c6f74f-c600-4e4c-ac2c-7c0d419bf442",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "My concern is that you could do one without the other and forget. In general I don't really like void functions that are just called imperatively like this, because somebody will forget.\n",
        "createdAt" : "2015-02-06T18:45:36Z",
        "updatedAt" : "2015-02-06T18:45:36Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "0819ca897cf2dc61f8e60f51870e192ae28c764b",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +2514,2518 @@                }\n                var temp = createTempVariable(node);\n                recordTempDeclaration(temp);\n                write(\"(\");\n                emit(temp);"
  },
  {
    "id" : "aeb19c64-13b7-419b-abf0-ca19a4c5ccd3",
    "prId" : 1931,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf1a07ec-3454-45d9-af2a-aecf2cda2a67",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Please comment to explain why it is like this, and not simply `emitTarget(expr)`. I realize that it's to make sure the temp receives the correct `this` value, but it took me a few minutes to understand.\n",
        "createdAt" : "2015-02-06T09:18:48Z",
        "updatedAt" : "2015-02-06T15:39:33Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "0819ca897cf2dc61f8e60f51870e192ae28c764b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2530,2534 @@                    target = emitCallTarget((<PropertyAccessExpression>expr).expression);\n                    write(\".\");\n                    emit((<PropertyAccessExpression>expr).name);\n                }\n                else if (expr.kind === SyntaxKind.ElementAccessExpression) {"
  },
  {
    "id" : "e8d37bd2-7e59-4a4e-a574-9f1f4671bcb1",
    "prId" : 1931,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1c109a7-8f3c-442b-b4dc-fd98a0b54176",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Can you add a sample call for each case to see what it corresponds to?\n",
        "createdAt" : "2015-02-06T09:22:35Z",
        "updatedAt" : "2015-02-06T15:39:33Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "0819ca897cf2dc61f8e60f51870e192ae28c764b",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +2547,2551 @@                }\n                write(\".apply(\");\n                if (target) {\n                    if (target.kind === SyntaxKind.SuperKeyword) {\n                        // Calls of form super(...) and super.foo(...)"
  },
  {
    "id" : "4597b16a-ddf8-430b-84a0-8f227e25d604",
    "prId" : 1909,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4c2a98d-e819-4dcd-ac4c-61da3b5512e5",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "what if you have multiple dependencies, ones with names and ones without. this will get the order our of sync, since name is optional and path is not. e.g.:\n\n``` TypeScript\n///<amd-dependency path='module1' />\n///<amd-dependency path='module2' name='m2'/>\n```\n\nwill emit:\n\n``` JavaScript\ndefine([\"require\", \"exports\", \"module1\", \"module2\"], function (require, exports, m2) { }\n```\n\nwhich is not what you want. so either you reorder them, so that ones with names come first, which we do not do usually as we like to keep emitted code as close as possible to generated code. or you give the other ones unused random names consider using createTempVariable utility in the emitter.\n\nAlso worth adding a new test for this case.\n",
        "createdAt" : "2015-02-05T18:06:23Z",
        "updatedAt" : "2015-02-11T09:13:51Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "b31c503f-d31e-4011-b4c9-3d3cb47395ce",
        "parentId" : "e4c2a98d-e819-4dcd-ac4c-61da3b5512e5",
        "authorId" : "f2f9206c-29f1-4f1c-8a3d-6722fc894186",
        "body" : "Giving random names would add unnecessary garbage to emitted code. Since import order does not matter for AMD modules, reordering would make most sense.\n\nChanging order is a bit intrusive to original code, but amd-dependency comment is not a language feature, just a utility. Its also not documented in official materials, so I think violating some project principles is justifiable. \n",
        "createdAt" : "2015-02-05T18:24:55Z",
        "updatedAt" : "2015-02-11T09:13:51Z",
        "lastEditedBy" : "f2f9206c-29f1-4f1c-8a3d-6722fc894186",
        "tags" : [
        ]
      }
    ],
    "commit" : "d94cbed41324a520d311b23810debbf1ff6cda9c",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +4095,4099 @@                    emit(imp.name);\n                });\n                forEach(node.amdDependencies, amdDependency => {\n                    if (amdDependency.name) {\n                        write(\", \");"
  },
  {
    "id" : "502acd88-61ce-463b-95c9-a3eba7bf4e31",
    "prId" : 1899,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b11585d7-ee00-42ec-bcbd-a1da00eb0983",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Maybe use `void 0` here instead.\n",
        "createdAt" : "2015-02-03T00:49:47Z",
        "updatedAt" : "2015-02-03T01:21:09Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e63d795b1a9398872fafe2916af9289c48d0c529",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +3746,3750 @@                }\n                else {\n                    write(\"undefined\");\n                }\n            }"
  },
  {
    "id" : "b487f673-55b1-481a-a692-bcd4026f86b3",
    "prId" : 1855,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29c03956-b690-4cad-b7ce-ba67bff8c052",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "type annotation unnecessary. If you remove that, and add the tests as asked for, then i'm :+1:  on this change.  Thanks!\n",
        "createdAt" : "2015-01-30T21:00:26Z",
        "updatedAt" : "2015-02-02T23:13:53Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "5333f41e-46a2-4cd6-92c0-996486075677",
        "parentId" : "29c03956-b690-4cad-b7ce-ba67bff8c052",
        "authorId" : "b6128edf-c139-4855-965e-1002696576d7",
        "body" : "There we disagree. Typing is a fundemental aspect of TypeScript and I would have type specification for every variable.\n",
        "createdAt" : "2015-01-30T23:36:44Z",
        "updatedAt" : "2015-02-02T23:13:53Z",
        "lastEditedBy" : "b6128edf-c139-4855-965e-1002696576d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1087ae0a90322fe710a619c5ba9ec6fe5f7fd1c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2465,2469 @@                    write(constantValue.toString());\n                    if (!compilerOptions.removeComments) {\n                        var propertyName: string = node.kind === SyntaxKind.PropertyAccessExpression ? declarationNameToString((<PropertyAccessExpression>node).name) : getTextOfNode((<ElementAccessExpression>node).argumentExpression);\n                        write(\" /* \" + propertyName + \" */\");\n                    }"
  },
  {
    "id" : "882214ed-f1c1-4c93-bcd6-b46ed83c81b9",
    "prId" : 1777,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d77d76e-6f33-45c1-a248-08b80032d4fa",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This seems weird - what if the method is recursive?\n",
        "createdAt" : "2015-01-23T00:25:57Z",
        "updatedAt" : "2015-01-28T01:16:47Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "03c4cfd3-b097-41ec-bb95-2427500409d5",
        "parentId" : "8d77d76e-6f33-45c1-a248-08b80032d4fa",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I don't know what that means.\n",
        "createdAt" : "2015-01-23T08:33:57Z",
        "updatedAt" : "2015-01-28T01:16:47Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c5ff5310fc553e0256f7e8c3b3763ee4d60fe62",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +2430,2434 @@                emit(node.name);\n                if (languageVersion < ScriptTarget.ES6) {\n                    write(\": function \");\n                }\n                emitSignatureAndBody(node);"
  },
  {
    "id" : "dccb3777-ae30-4539-a6cb-d580c009d81f",
    "prId" : 1777,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0962e16-c0ef-4b76-8c50-1d4b314f7386",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Above where? This is a dense function, explain where it's happening.\n",
        "createdAt" : "2015-01-23T00:27:23Z",
        "updatedAt" : "2015-01-28T01:16:47Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c5ff5310fc553e0256f7e8c3b3763ee4d60fe62",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3311,3315 @@                    // Don't emit comments on this body.  We'll have already taken care of it above \n                    // when we called emitDetachedComments.\n                    emitNode(node.body, /*disableComments:*/ true);\n                    emitEnd(node.body);\n                    write(\";\");"
  },
  {
    "id" : "c294aabd-b01f-4b5f-8a4c-60616055e3e5",
    "prId" : 1777,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b361095d-529f-4814-a4a4-e31f6ffab6dd",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Space after colon.\n",
        "createdAt" : "2015-01-23T00:28:13Z",
        "updatedAt" : "2015-01-28T01:16:47Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c5ff5310fc553e0256f7e8c3b3763ee4d60fe62",
    "line" : 277,
    "diffHunk" : "@@ -1,1 +3959,3963 @@            }\n\n            function emitNode(node: Node, disableComments?:boolean): void {\n                if (!node) {\n                    return;"
  },
  {
    "id" : "e0161a82-ecf6-4c30-8f58-0c16d4dd635f",
    "prId" : 1743,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f23fda66-5ea9-4e56-a46b-8c1bfe540383",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "getPositionFromLineAndCharacter should throws if currentLine > lastLine, or at least debug.assert to signal that it is an unsupported scenario, and users should all check the limit before calling. \n",
        "createdAt" : "2015-01-20T21:32:04Z",
        "updatedAt" : "2015-01-21T05:05:21Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "0587ca9d-7a12-4ee0-aa08-d0419028afc2",
        "parentId" : "f23fda66-5ea9-4e56-a46b-8c1bfe540383",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "sure, will add that check.\n",
        "createdAt" : "2015-01-21T00:11:55Z",
        "updatedAt" : "2015-01-21T05:05:21Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ef7d2557ab46574ec54ded112e1c2aab3f1a555",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +178,182 @@            var firstCommentLineIndent: number;\n            for (var pos = comment.pos, currentLine = firstCommentLineAndCharacter.line; pos < comment.end; currentLine++) {\n                var nextLineStart = currentLine === lastLine ? (comment.end + 1) : currentSourceFile.getPositionFromLineAndCharacter(currentLine + 1, /*character*/1);\n\n                if (pos !== comment.pos) {"
  },
  {
    "id" : "0d085f49-258c-4a4d-b889-1e30b79249ac",
    "prId" : 1589,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69dc4f23-404d-4451-949a-0a41ed1801b3",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I'm torn.  On one hand, this brings us closer to what the user already wrote.  ON the other, it means you need to do a lot more processing.  Why not just use node.text instead?  It will already have stripped off the } and ${  bits, and will already have changes newlines appropriately.\n",
        "createdAt" : "2015-02-21T22:12:03Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "4598272b-7887-4cd2-8106-67e35322f82a",
        "parentId" : "69dc4f23-404d-4451-949a-0a41ed1801b3",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Oh.  Is this because it's supposed to be 'raw'?  If so, can you comment here the difference and how this shoudl behave on different inputs?  Thanks!\n",
        "createdAt" : "2015-02-21T22:13:54Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b10d394d4b9bee0c670f84fedf48735c167680f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2211,2215 @@                // The raw strings contain the (escaped) strings of what the user wrote.\n                // Examples: `\\n` is converted to \"\\\\n\", a template string with a newline to \"\\n\".\n                var text = getSourceTextOfNodeFromSourceFile(currentSourceFile, node);\n                \n                // text contains the original source, it will also contain quotes (\"`\"), dolar signs and braces (\"${\" and \"}\"),"
  },
  {
    "id" : "fd1e2138-0f91-488a-a2fc-b8b5eef55139",
    "prId" : 1589,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e843b477-73bc-412f-999a-73322b45d096",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Aren't these steps for the cooked strings?\n",
        "createdAt" : "2015-02-22T00:01:40Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "a6809c1b-157c-4f06-81dd-d8351059cc3e",
        "parentId" : "e843b477-73bc-412f-999a-73322b45d096",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Oh maybe these are the steps that uncook the string\n",
        "createdAt" : "2015-02-22T00:03:39Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b10d394d4b9bee0c670f84fedf48735c167680f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2224,2228 @@                // <CR><LF> and <CR> LineTerminatorSequences are normalized to <LF> for both TV and TRV.\n                text = text.replace(/\\r\\n?/g, \"\\n\");\n                text = escapeString(text);\n                \n                write('\"' + text + '\"');"
  },
  {
    "id" : "f9d91a0a-540a-4b27-9042-d893735bc7de",
    "prId" : 1589,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33ce169e-f71c-428d-845d-387186f76702",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Why do you need parentheses? I don't think you need to add them. The reason is that you want something that can be the left hand side of a call. But MemberExpression and CallExpression are the two nonterminals that can be the LHS of a tagged template, and those are precisely the things you need on the LHS of a call.\n",
        "createdAt" : "2015-02-22T00:29:58Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "150316b4-deff-41db-bc58-182c3cb6f682",
        "parentId" : "33ce169e-f71c-428d-845d-387186f76702",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Unless there is some subtlety with `new` that I'm missing, but I don't think there is.\n",
        "createdAt" : "2015-02-22T00:33:18Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "9074c11e-fcb9-4edb-a05e-f3abfdcebe0b",
        "parentId" : "33ce169e-f71c-428d-845d-387186f76702",
        "authorId" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "body" : "As nonsensical as it is, it's because of https://github.com/Microsoft/TypeScript/pull/1589#issuecomment-73362303\n",
        "createdAt" : "2015-02-22T00:33:41Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "tags" : [
        ]
      },
      {
        "id" : "d15b4546-69b5-4dab-bfcc-ad1acecdfd70",
        "parentId" : "33ce169e-f71c-428d-845d-387186f76702",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Yeah looking at the grammar, you can't have a NewExpression as the tag, so you don't need to parenthesize the tag.\n",
        "createdAt" : "2015-02-22T00:35:49Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "e58538f6-0eb3-4964-abe7-1ab00ad92d20",
        "parentId" : "33ce169e-f71c-428d-845d-387186f76702",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Oh gosh, you're right! The template literal gets demoted to an AdditiveExpression! Disregard what I said.\n",
        "createdAt" : "2015-02-22T00:42:09Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "2434fe4f-a48c-48f9-826a-7412193ea34b",
        "parentId" : "33ce169e-f71c-428d-845d-387186f76702",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "But I also thought we parenthesize templates as part of emitting _them_. Wouldn't the tag already be parenthesized by virtue of it needing to be a MemberExpression/CallExpression? If not, I think the correct fix would be to add this to the parenthesization rules for templates.\n",
        "createdAt" : "2015-02-22T00:44:47Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "8c594abe-e999-4976-aed1-8c44534ec076",
        "parentId" : "33ce169e-f71c-428d-845d-387186f76702",
        "authorId" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "body" : "For example, 6to5 also adds parens: http://bit.ly/1zWUBIa\n",
        "createdAt" : "2015-02-22T00:45:02Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "tags" : [
        ]
      },
      {
        "id" : "91b9b197-9749-40d2-af0e-0bf669d6f8d4",
        "parentId" : "33ce169e-f71c-428d-845d-387186f76702",
        "authorId" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "body" : "Yes, that makes sense. A CallExpression should be standalone and have parens around it if necessary, without needing the code to add them.\n",
        "createdAt" : "2015-02-22T00:47:29Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "tags" : [
        ]
      },
      {
        "id" : "081d800f-171f-4950-b7e0-8864d694847d",
        "parentId" : "33ce169e-f71c-428d-845d-387186f76702",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "But do we do the right thing in this case?\n\n``` ts\n`hello${\"goodbye\"}hello`[0]\n```\n",
        "createdAt" : "2015-02-22T00:47:59Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "01a9aa4c-8d95-4e61-9e33-0b12f4e40123",
        "parentId" : "33ce169e-f71c-428d-845d-387186f76702",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "My point is that rather than each parent node needing to know that its child could be a template, and therefore needs to parenthesize that child, the template should parenthesize itself accordingly, because _it_ is the one that lowers its precedence when it gets emitted.\n",
        "createdAt" : "2015-02-22T00:49:41Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "27db56a5-78e3-4323-8b97-fccc2ed42ec2",
        "parentId" : "33ce169e-f71c-428d-845d-387186f76702",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "To clarify, when I say template in this context, I mean an _untagged_ template.\n",
        "createdAt" : "2015-02-22T00:51:31Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "e07ebf7f-6f54-4584-85ab-de6192d21f25",
        "parentId" : "33ce169e-f71c-428d-845d-387186f76702",
        "authorId" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "body" : "Yes, I was agreeing with you that node.tag should include the parens, instead of requiring the code that uses it to add them.\n\nFor your example, the current PR also emits it correctly `(\"hello\" + \"goodbye\" + \"hello\")[0];` but yes, your suggested implementation would be better.\n",
        "createdAt" : "2015-02-22T00:53:04Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "41920e05-7bfb-4e72-85eb-bc79a906262a",
        "tags" : [
        ]
      },
      {
        "id" : "53a94b89-9a1f-4e7e-a7e3-0c293fed0815",
        "parentId" : "33ce169e-f71c-428d-845d-387186f76702",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Yes, I think that's a better approach. Although I do think this PR can go in as is, and we make that change separately.\n",
        "createdAt" : "2015-02-22T00:57:09Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b10d394d4b9bee0c670f84fedf48735c167680f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2257,2261 @@                write(\", \");\n                \n                emitParenthesizedIf(node.tag, needsParenthesisForPropertyAccessOrInvocation(node.tag));\n                write(\"(\");\n                emit(tempVariable);"
  },
  {
    "id" : "82236510-b2bf-4718-9f31-7c6c2c6b4a7d",
    "prId" : 1589,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c75b2947-533a-4ce8-8d4e-f66ff04dae0b",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Leave as is\n",
        "createdAt" : "2015-02-22T00:36:56Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "3f1042e7-c73a-4376-a0c3-10aaa35b6ae2",
        "parentId" : "c75b2947-533a-4ce8-8d4e-f66ff04dae0b",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Nvm, this change is fine.\n",
        "createdAt" : "2015-02-22T00:43:43Z",
        "updatedAt" : "2015-02-26T11:01:32Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b10d394d4b9bee0c670f84fedf48735c167680f",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +2547,2551 @@            }\n\n            function needsParenthesisForPropertyAccessOrInvocation(node: Expression) {\n                switch (node.kind) {\n                    case SyntaxKind.Identifier:"
  },
  {
    "id" : "d2ac78da-57ba-427f-9d1a-bc1337989bb7",
    "prId" : 1463,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c092166f-7566-408d-a4bd-8cbc207427a5",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "would this approach possibly be nicer by just generating the new tree we want and emitting that?\n",
        "createdAt" : "2014-12-15T08:41:30Z",
        "updatedAt" : "2014-12-17T19:50:22Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "67aa3fdb-6e19-4ef8-87dc-231b47866fe4",
        "parentId" : "c092166f-7566-408d-a4bd-8cbc207427a5",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "I tried that, but it ended up being way more lines of code and complexity.\n",
        "createdAt" : "2014-12-15T14:47:05Z",
        "updatedAt" : "2014-12-17T19:50:22Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a667959b1fcc0f22c3695fb71e9abf7da31e948b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2318,2322 @@                    // Emit using the pattern <group0>.concat(<group1>, <group2>, ...)\n                    if (group === 1) {\n                        write(\".concat(\");\n                    }\n                    else if (group > 1) {"
  },
  {
    "id" : "0baccfb5-e481-400c-aff3-bd8698ddcd97",
    "prId" : 1463,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5c3d133-6846-407b-9786-370c2d3f5199",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "this doesn't follow the pattern we have elsewhere in the emitter for changing emit behavior based on script target.  In general you would instead have an emitParameter which would do the simple pass-through emitting, and an emitDownlevelParameter which would do the more compex rewriting of ES6 features to ES5 level emit.\n",
        "createdAt" : "2014-12-15T08:44:19Z",
        "updatedAt" : "2014-12-17T19:50:22Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "10aef69a-6b00-488c-a917-7dabf9b97ac7",
        "parentId" : "a5c3d133-6846-407b-9786-370c2d3f5199",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "That pattern is no longer there, it just ended up leading to a bunch of duplicated code. It makes more sense to do the branching locally--and if the downlevel case turns out to be different enough (which so far hasn't been the case) you can always break it out yourself.\n",
        "createdAt" : "2014-12-15T14:53:29Z",
        "updatedAt" : "2014-12-17T19:50:22Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a667959b1fcc0f22c3695fb71e9abf7da31e948b",
    "line" : 328,
    "diffHunk" : "@@ -1,1 +3104,3108 @@            function emitParameter(node: ParameterDeclaration) {\n                emitLeadingComments(node);\n                if (compilerOptions.target < ScriptTarget.ES6) {\n                    if (isBindingPattern(node.name)) {\n                        var name = createTempVariable(node);"
  },
  {
    "id" : "4c6b7bc9-ddca-4236-87fe-f2ebcd48611c",
    "prId" : 1269,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24573059-8a78-47e3-a878-c0b54889b8dc",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`// Here we emit nodes whose output is dependent on the emit target.`\n\nI **_do**_ kind of like the idea that we have a single place for where target-specific stuff is performed - that way we can easily see where downlevel isn't supported for a target.\n\nIf you are doing this, we should work to ensure that `emitTemplateExpression` works properly here.\n",
        "createdAt" : "2014-11-25T22:10:05Z",
        "updatedAt" : "2014-12-02T23:51:21Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "f1b1cf75-2633-423e-85a9-c892d69e74dc",
        "parentId" : "24573059-8a78-47e3-a878-c0b54889b8dc",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Yep. This PR is to give initial proposal and get others' opinions about the change. I will eventually move other types of node\n",
        "createdAt" : "2014-11-25T22:45:36Z",
        "updatedAt" : "2014-12-02T23:51:21Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4471f90d292ecdd880d22dd2ddf3266806a26f58",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +3621,3625 @@                }\n\n                // Emit node which needs to be emitted differently depended on ScriptTarget\n                if (compilerOptions.target < ScriptTarget.ES6) {\n                    // Emit node down-level"
  },
  {
    "id" : "851792b2-f481-4390-b1d7-cc5f1a635844",
    "prId" : 1269,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de25cd29-ec7b-41ea-a3d0-02d56614100f",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "what if we're in ES5 mode though?\n",
        "createdAt" : "2014-11-26T01:39:18Z",
        "updatedAt" : "2014-12-02T23:51:21Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "7b88b668-e9e3-4b61-b0e5-8cf2b5efc3b8",
        "parentId" : "de25cd29-ec7b-41ea-a3d0-02d56614100f",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Then this function shouldn't get called; maybe that fact alone calls for an assert.\n",
        "createdAt" : "2014-11-26T03:00:52Z",
        "updatedAt" : "2014-12-02T23:51:21Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "c8055dd0-67cd-4570-a963-2e354a0ca72c",
        "parentId" : "de25cd29-ec7b-41ea-a3d0-02d56614100f",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "I agree with assertion\n",
        "createdAt" : "2014-12-02T01:55:57Z",
        "updatedAt" : "2014-12-02T23:51:21Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4471f90d292ecdd880d22dd2ddf3266806a26f58",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2262,2266 @@                }\n                // If short-hand property has no prefix, emit it as short-hand.\n                else {\n                    emitLeadingComments(node);\n                    emit(node.name);"
  },
  {
    "id" : "2f10d513-c41a-4974-9f04-9d4408c36227",
    "prId" : 1122,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ca1df7c-4e69-4c10-84d1-46bcac1b8da9",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "why not just write the text of teh node here?  i.e.   writeTextOfNode(type)?   For that matter, why not just call writeTextOfNode for all TypeNode's?\n",
        "createdAt" : "2014-11-11T05:48:51Z",
        "updatedAt" : "2014-11-21T00:42:19Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "9e5b123a-995c-414e-8376-c59057af59d3",
        "parentId" : "6ca1df7c-4e69-4c10-84d1-46bcac1b8da9",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "that's because we want to format how we are writing d.ts ...   We do need to go deep in the type node though to check if it is referencing any type that is not visibile so it didn't seem much of a work writing the text to declaration file along with traversing.\n",
        "createdAt" : "2014-11-11T20:18:55Z",
        "updatedAt" : "2014-11-21T00:42:19Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7600006fb517d9bfb22ce295dfde74328d3cb0b",
    "line" : 242,
    "diffHunk" : "@@ -1,1 +2725,2729 @@                        return writeTextOfNode(type);\n                    case SyntaxKind.TypeReference:\n                        return emitTypeReference(<TypeReferenceNode>type);\n                    case SyntaxKind.TypeQuery:\n                        return emitTypeQuery(<TypeQueryNode>type);"
  },
  {
    "id" : "f52488c0-2c15-4fc3-b3c1-f6fb258a44a3",
    "prId" : 960,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffa6a5e8-55c7-4751-8994-4a7f9d70429b",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Explain that in ES6 we don't need to do anything.  But that in ES5 we'll convert things according.  Explain the type of conversion you're trying to do.\n",
        "createdAt" : "2014-10-25T00:46:54Z",
        "updatedAt" : "2014-10-31T21:54:20Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e8978fb60973242390a4b3e5c481194c1cce335",
    "line" : null,
    "diffHunk" : "@@ -1,1 +813,817 @@                // In ES6 mode and above, we can simply emit each portion of a template in order, but in\n                // ES3 & ES5 we must convert the template expression into a series of string concatenations.\n                if (compilerOptions.target >= ScriptTarget.ES6) {\n                    forEachChild(node, emit);\n                    return;"
  },
  {
    "id" : "55e32f4e-4d26-4d75-ba83-caf7d11758da",
    "prId" : 960,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ae329b4-a369-4585-9f15-c100cae6ac1c",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "add assert that you're in ES5 mode or lower.\n",
        "createdAt" : "2014-10-25T00:48:25Z",
        "updatedAt" : "2014-10-31T21:54:20Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e8978fb60973242390a4b3e5c481194c1cce335",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +875,879 @@                    // Arrow functions and conditionals have a lower precedence, \n                    // although we convert the former into regular function expressions in ES5 mode,\n                    // and in ES6 mode this function won't get called anyway.\n                    // \n                    // TODO (drosen): Note that we need to account for the upcoming 'yield' and"
  },
  {
    "id" : "4ddb6d76-d48a-434a-9e20-79f6ad4f2324",
    "prId" : 750,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72d2233c-2bfc-45a0-9f9f-2ca1b0a62500",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "resolveScriptReference is called one more time, later on, you will need to guard that as well. I would also change the name to tryResolveScriptReference\n",
        "createdAt" : "2014-09-25T19:36:58Z",
        "updatedAt" : "2014-09-25T20:58:13Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc8a5f8b152dcad7b708d5834c1c7624c46575bd",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3184,3188 @@\n                        // All the references that are not going to be part of same file\n                        if (referencedFile && ((referencedFile.flags & NodeFlags.DeclarationFile) || // This is a declare file reference\n                            shouldEmitToOwnFile(referencedFile, compilerOptions) || // This is referenced file is emitting its own js file\n                            !addedGlobalFileReference)) { // Or the global out file corresponding to this reference was not added"
  },
  {
    "id" : "d876e8d0-125a-4399-97d0-395b7dc6e21d",
    "prId" : 688,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dffa96f1-e892-4c1e-b2c3-550b37bab625",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "these seem repeated, I would move them before the if statement\n",
        "createdAt" : "2014-09-17T19:17:46Z",
        "updatedAt" : "2014-09-19T21:01:30Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "7f7c25f4-164e-46b3-93fe-9b97e683ecd6",
        "parentId" : "dffa96f1-e892-4c1e-b2c3-550b37bab625",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "never mind.\n",
        "createdAt" : "2014-09-17T19:19:21Z",
        "updatedAt" : "2014-09-19T21:01:30Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5b0777ad51fa6e7de362fad5e10db95a5ab91a3",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +2369,2373 @@            function emitDeclarationFlags(node: Declaration) {\n                if (node.flags & NodeFlags.Static) {\n                    if (node.flags & NodeFlags.Private) {\n                        write(\"private \");\n                    }"
  },
  {
    "id" : "0ea1f14e-0383-4763-8f5f-55d01b127149",
    "prId" : 650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9918426-947f-40dd-83c0-f95cb3c2b1aa",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "please explicitly return false.\n",
        "createdAt" : "2014-09-10T23:09:45Z",
        "updatedAt" : "2014-09-17T00:41:31Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ee63fa21d6ad32072e797e0da72e6387b545075",
    "line" : null,
    "diffHunk" : "@@ -1,1 +34,38 @@        }\n        return false;\n    }\n\n    export function isExternalModuleOrDeclarationFile(sourceFile: SourceFile) {"
  },
  {
    "id" : "243f24c6-5e73-413f-a734-8283b31e7c06",
    "prId" : 650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "550d1c01-aecb-41ed-808c-8a9ff4fd17f6",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Why do you need to check. If there are errors in the diagnostics they are going to be emit errors\n",
        "createdAt" : "2014-09-10T23:33:23Z",
        "updatedAt" : "2014-09-17T00:41:31Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "dcbe79d1-65f3-4973-9e91-857e0b5d1944",
        "parentId" : "550d1c01-aecb-41ed-808c-8a9ff4fd17f6",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Though diagnostic can have warning as well. So shouldn't we check to make sure that diagnostic is really an error?\n",
        "createdAt" : "2014-09-10T23:56:16Z",
        "updatedAt" : "2014-09-17T00:41:31Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ee63fa21d6ad32072e797e0da72e6387b545075",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3197,3201 @@\n        // Update returnCode if there is any EmitterError\n        var hasEmitterError = forEach(diagnostics, diagnostic => diagnostic.category === DiagnosticCategory.Error);\n\n        // Check and update returnCode for syntactic and semantic"
  },
  {
    "id" : "9a7eb124-2709-42c6-9af3-f1478b062f88",
    "prId" : 650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dda0dbe6-d94d-4d24-b1b3-7522141e88ad",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You should determine result code  = Succeeded | JSGeneratedWithSemanticErrors | Declaration not generated when you determine shouldEmitDeclarations itself. Only Update the result = hadEmitErrors when  !!diagnostics.length \n",
        "createdAt" : "2014-09-10T23:38:05Z",
        "updatedAt" : "2014-09-17T00:41:31Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ee63fa21d6ad32072e797e0da72e6387b545075",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +3173,3177 @@            }\n        }\n\n        if (targetSourceFile === undefined) {\n            forEach(program.getSourceFiles(), sourceFile => {"
  },
  {
    "id" : "4b44ad9a-ebb6-4158-a9f3-5a4c40a4c4ee",
    "prId" : 650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afba8972-f68f-40c7-9b97-13574124eca5",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "too confusing.  please break into individual statments taht make it clear what you're checking for.  tnx.\n",
        "createdAt" : "2014-09-16T22:05:45Z",
        "updatedAt" : "2014-09-17T00:41:31Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ee63fa21d6ad32072e797e0da72e6387b545075",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +28,32 @@    export function shouldEmitToOwnFile(sourceFile: SourceFile, compilerOptions: CompilerOptions): boolean {\n        if (!(sourceFile.flags & NodeFlags.DeclarationFile)) {\n            if ((isExternalModule(sourceFile) || !compilerOptions.out) && !fileExtensionIs(sourceFile.filename, \".js\")) {\n                return true;\n            }"
  },
  {
    "id" : "119a948c-c195-4e37-90e4-f355f09f02d1",
    "prId" : 650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a51e7fc-96dd-4016-a2d5-028ef008d3e7",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "not needed.\n",
        "createdAt" : "2014-09-16T22:05:52Z",
        "updatedAt" : "2014-09-17T00:41:31Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ee63fa21d6ad32072e797e0da72e6387b545075",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +31,35 @@                return true;\n            }\n            return false;\n        }\n        return false;"
  },
  {
    "id" : "f72d0020-d7af-492a-a530-c99d6008eba9",
    "prId" : 455,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d139148-045d-4346-9466-6cdb3c938348",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "why character 1?\n",
        "createdAt" : "2014-08-15T22:54:49Z",
        "updatedAt" : "2014-08-16T00:00:25Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad8fa6377cbf1d1e78eca199bdacc486239d119",
    "line" : null,
    "diffHunk" : "@@ -1,1 +200,204 @@                var firstCommentLineIndent: number;\n                for (var pos = comment.pos, currentLine = firstCommentLineAndCharacter.line; pos < comment.end; currentLine++) {\n                    var nextLineStart = currentSourceFile.getPositionFromLineAndCharacter(currentLine + 1, /*character*/1);\n\n                    if (pos !== comment.pos) {"
  },
  {
    "id" : "babfaa7d-de2b-4311-abe4-d4cc47746063",
    "prId" : 455,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5e35ff1-7a07-474c-924b-20481b2a4872",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "why not just compute this where firstCommentLineIndent is declared?\n",
        "createdAt" : "2014-08-15T22:55:44Z",
        "updatedAt" : "2014-08-16T00:00:25Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad8fa6377cbf1d1e78eca199bdacc486239d119",
    "line" : null,
    "diffHunk" : "@@ -1,1 +204,208 @@                    if (pos !== comment.pos) {\n                        // If we are not emitting first line, we need to write the spaces to adjust the alignment\n                        if (firstCommentLineIndent === undefined) {\n                            firstCommentLineIndent = calculateIndent(currentSourceFile.getPositionFromLineAndCharacter(firstCommentLineAndCharacter.line, /*character*/1),\n                                comment.pos);"
  },
  {
    "id" : "2bd66c2d-0c4a-4fd6-a05b-530eefbb5eab",
    "prId" : 455,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3c5ecaa-737b-4da9-8fed-26bf76e9359f",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "move this initialization to where the variable is declared?\n",
        "createdAt" : "2014-08-16T00:03:42Z",
        "updatedAt" : "2014-08-16T00:03:42Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "dfa50f6b-aa68-410f-b355-4cb5917ec1df",
        "parentId" : "c3c5ecaa-737b-4da9-8fed-26bf76e9359f",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I would like to keep it as it is because if the comment is not multiline but /\\* */ is on single line we don't need to calculate it \n",
        "createdAt" : "2014-08-18T19:52:37Z",
        "updatedAt" : "2014-08-18T19:52:37Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad8fa6377cbf1d1e78eca199bdacc486239d119",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +204,208 @@                    if (pos !== comment.pos) {\n                        // If we are not emitting first line, we need to write the spaces to adjust the alignment\n                        if (firstCommentLineIndent === undefined) {\n                            firstCommentLineIndent = calculateIndent(currentSourceFile.getPositionFromLineAndCharacter(firstCommentLineAndCharacter.line, /*character*/1),\n                                comment.pos);"
  },
  {
    "id" : "9f2c40ea-062a-41f9-b8a7-ad6feec5909a",
    "prId" : 455,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "381326f4-9326-46b3-8f78-84d6534704ef",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "is this even needed/\n",
        "createdAt" : "2014-08-16T00:04:51Z",
        "updatedAt" : "2014-08-16T00:04:51Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad8fa6377cbf1d1e78eca199bdacc486239d119",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +242,246 @@                        else {\n                            // No spaces to emit write empty string\n                            writer.rawWrite(\"\");\n                        }\n                    }"
  },
  {
    "id" : "2d301312-3ac7-4127-b7ec-a99d40f98a52",
    "prId" : 452,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7a45631-aa8f-47f6-94b5-2874498c257a",
        "parentId" : null,
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "I think this will write an unwanted blank after the last comment.\n",
        "createdAt" : "2014-08-14T18:09:17Z",
        "updatedAt" : "2014-08-20T23:50:36Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "5ef8fb04-4e3c-4db6-b6b0-7b0a7092ddde",
        "parentId" : "a7a45631-aa8f-47f6-94b5-2874498c257a",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "No it does not because writeLine will take care of not emitting unwanted blank statement because of writeLine implementation (which just sets the flag iof new line but does not actually write the new line in the output)\n",
        "createdAt" : "2014-08-14T21:59:01Z",
        "updatedAt" : "2014-08-20T23:50:36Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "13a7d600-94fa-4b86-a3d7-f027ec7ffeec",
        "parentId" : "a7a45631-aa8f-47f6-94b5-2874498c257a",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "No, I meant an unwanted space character.\n",
        "createdAt" : "2014-08-14T22:33:41Z",
        "updatedAt" : "2014-08-20T23:50:36Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "1b79ef34-2f95-4fbe-873a-66a85abb8213",
        "parentId" : "a7a45631-aa8f-47f6-94b5-2874498c257a",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "don't we want a space before the comment ? \n\n``` TypeScript\n/** class c1*/ class c1 {\n}\n/** class c2*/class c2 {\n}\n```\n\nBecomes:\n\n``` javascript\n/** class c1*/ var c1 = (function () {\n    function c1() {\n    }\n    return c1;\n})();\n/** class c2*/ var c2 = (function () {\n    function c2() {\n    }\n    return c2;\n})();\n```\n\nWhich is a good thing isn't it? We anyways format the code so this looks correct to me.\n",
        "createdAt" : "2014-08-15T19:27:38Z",
        "updatedAt" : "2014-08-20T23:50:36Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "8ca3da07-f81b-4ddb-8aa8-686c55a091e9",
        "parentId" : "a7a45631-aa8f-47f6-94b5-2874498c257a",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Yes, it looks fine for leading comments, but I think you end up with an extra space character after a trailing comment.\n",
        "createdAt" : "2014-08-15T19:59:23Z",
        "updatedAt" : "2014-08-20T23:50:36Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8050959c105f44b4f3220058a5907286446dd883",
    "line" : null,
    "diffHunk" : "@@ -1,1 +200,204 @@                }\n                else if (trailingSeparator) {\n                    writer.write(\" \");\n                }\n                else {"
  },
  {
    "id" : "2397aebb-37b7-41c2-bf10-97af61aea217",
    "prId" : 413,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f80b102-1f63-41dd-8d89-82326b16bb03",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why do we need to sort the declarations?\n",
        "createdAt" : "2014-08-11T21:41:16Z",
        "updatedAt" : "2014-08-14T01:04:18Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "5bcacf14-958d-4b36-a9cb-9d16075588ae",
        "parentId" : "7f80b102-1f63-41dd-8d89-82326b16bb03",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "we need to sort that because the text is patched correctly and we don't need to track partial edits. The asynchronous output could make declaration in reverse or random order to be in importDeclarations list\n",
        "createdAt" : "2014-08-13T20:14:54Z",
        "updatedAt" : "2014-08-14T01:04:18Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "658c266f-1216-49fe-ae61-bb4e7b3eef37",
        "parentId" : "7f80b102-1f63-41dd-8d89-82326b16bb03",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I am not sure I understand, an example may be helpful :)\n",
        "createdAt" : "2014-08-13T21:05:31Z",
        "updatedAt" : "2014-08-14T01:04:18Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "1838a9c5-a03a-4d25-9404-ef4a6858c454",
        "parentId" : "7f80b102-1f63-41dd-8d89-82326b16bb03",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "hm.. sorry I thought you were talking about the code that was patching asynchronous code. The sort is not needed here. I am updating it.\n",
        "createdAt" : "2014-08-14T00:40:50Z",
        "updatedAt" : "2014-08-14T01:04:18Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e26d9e57d402064248ca24a18c341b96549ee38f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1886,1890 @@                var oldWriter = writer;\n                forEach(importDeclarations, aliasToWrite => {\n                    var aliasEmitInfo = forEach(aliasDeclarationEmitInfo, declEmitInfo => declEmitInfo.declaration === aliasToWrite ? declEmitInfo : undefined);\n                    writer = createTextWriter(writeSymbol);\n                    for (var declarationIndent = aliasEmitInfo.indent; declarationIndent; declarationIndent--) {"
  },
  {
    "id" : "decb7257-e9b9-4545-bba4-79b1b2a2a0d7",
    "prId" : 161,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6225e9f-c2b3-4053-af96-bd665d8257b6",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I'm getting to be a bigger fan of placing these functions at the bottom (kind of like with the `where` clause in Haskell), since it kind of obscures the actual functionality of the function.\n",
        "createdAt" : "2014-07-26T08:39:01Z",
        "updatedAt" : "2014-08-06T18:26:46Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "ff8e1797-22a7-4bd5-aaf0-6e2c6e0d546f",
        "parentId" : "d6225e9f-c2b3-4053-af96-bd665d8257b6",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "moved the function definitions in the bottom\n",
        "createdAt" : "2014-08-04T18:36:46Z",
        "updatedAt" : "2014-08-06T18:26:46Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e31aa9e12ae98fe5cbfffdd4aaee85bf0b67197b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2105,2109 @@                    getSymbolVisibilityDiagnosticMessage = undefined; \n\n                    function getHeritageClauseVisibilityError(symbolAccesibilityResult: SymbolAccessiblityResult) {\n                        var diagnosticMessage: DiagnosticMessage;\n                        if (node.parent.kind === SyntaxKind.ClassDeclaration) {"
  },
  {
    "id" : "6ae42096-c705-42f1-a3c2-0cd0671edab1",
    "prId" : 140,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c72e23ca-f8bf-440e-9fc2-371e1b5511bf",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "`; startIndex < node.statement.length && isDirectivePrologue(node.statements[startIndex]);`\n\nOr is that too ugly?\n",
        "createdAt" : "2014-07-18T01:12:16Z",
        "updatedAt" : "2014-07-18T01:32:32Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "421bc913-e0aa-46b8-903c-7a8e354735ad",
        "parentId" : "c72e23ca-f8bf-440e-9fc2-371e1b5511bf",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "I would prefer to be more explicit: IMO long\\complicated conditions in for loops are less convenient to read\n",
        "createdAt" : "2014-07-18T01:14:55Z",
        "updatedAt" : "2014-07-18T01:32:32Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "52ab9f110e696f15e3d533d3b7b74a86692af06f",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +1662,1666 @@                currentSourceFile = node;\n                var startIndex = 0;\n                for (; startIndex < node.statements.length; ++startIndex) {\n                    // emit prologue directives prior to __extends\n                    if (isDirectivePrologue(node.statements[startIndex])) {"
  },
  {
    "id" : "ecb439fe-9b11-412a-a73a-89ba9e0d0058",
    "prId" : 140,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2e63928-24a2-4300-b5e1-b0a79bc0e490",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "why two functions just make emitLines with startIndex parameter = 0 ?\n",
        "createdAt" : "2014-07-18T01:26:36Z",
        "updatedAt" : "2014-07-18T01:32:32Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "89dfe749-c7e9-4e14-9f11-f18b03f469e2",
        "parentId" : "b2e63928-24a2-4300-b5e1-b0a79bc0e490",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "don't like to specify 0 as start index in all other places\n",
        "createdAt" : "2014-07-18T01:31:17Z",
        "updatedAt" : "2014-07-18T01:32:32Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "73cbd672-3594-4daf-a500-015789fa3a56",
        "parentId" : "b2e63928-24a2-4300-b5e1-b0a79bc0e490",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "``` TypeScript\nfunction emitLines(nodes: Node[], startIndex = 0)  \n}\n```\n",
        "createdAt" : "2014-07-18T01:33:16Z",
        "updatedAt" : "2014-07-18T01:33:16Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "b1610633-a2c6-4063-a328-527d1c4d1c1b",
        "parentId" : "b2e63928-24a2-4300-b5e1-b0a79bc0e490",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "During our perf measurements initialization of default values for optional parameters often bubble up in perf traces. I've considered this as an option but prefer to use another function\n",
        "createdAt" : "2014-07-18T01:35:46Z",
        "updatedAt" : "2014-07-18T01:35:46Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "52ab9f110e696f15e3d533d3b7b74a86692af06f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +556,560 @@            }\n\n            function emitLinesStartingAt(nodes: Node[], startIndex: number): void {\n                for (var i = startIndex; i < nodes.length; i++) {\n                    writeLine();"
  },
  {
    "id" : "90624083-319b-4880-b127-402360416f22",
    "prId" : 29,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52b7b012-effa-4773-8b05-c5e7ee953985",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "May be this can be function outside emitJavascript so it need not be duplicated\n",
        "createdAt" : "2014-07-16T18:07:13Z",
        "updatedAt" : "2014-07-16T18:47:09Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3f5993770078c42830a068092484b621e8ea9ef",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +226,230 @@        var sourceMapData: SourceMapData;\n\n        function writeFile(filename: string, data: string) {\n            compilerHost.writeFile(filename, data, hostErrorMessage => {\n                diagnostics.push(createCompilerDiagnostic(Diagnostics.Could_not_write_file_0_Colon_1, filename, hostErrorMessage));"
  }
]