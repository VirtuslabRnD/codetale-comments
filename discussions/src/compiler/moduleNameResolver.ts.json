[
  {
    "id" : "0dd41372-4868-4d19-b236-def6ba15c51e",
    "prId" : 42246,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42246#pullrequestreview-564515895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f97dabfa-308d-4975-a219-37fa0f37163a",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "The new code path makes sense, but is this `tryFile` useful anymore? Even if the path pattern specified `.js`, I think I would have expected a colocated `.d.ts` file to be picked up.",
        "createdAt" : "2021-01-08T00:24:26Z",
        "updatedAt" : "2021-01-08T00:24:45Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "062197e8-bf9b-44f2-bdad-d637340f756d",
        "parentId" : "f97dabfa-308d-4975-a219-37fa0f37163a",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "There are tests to specifically map to a file eg. : https://github.com/microsoft/TypeScript/blob/master/tests/cases/compiler/pathMappingBasedModuleResolution_withExtension.ts#L20",
        "createdAt" : "2021-01-08T19:14:54Z",
        "updatedAt" : "2021-01-08T19:14:54Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "cfe6b69da91a5a4022f6d3f1a5b99fe44b0f36f8",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1380,1384 @@                const extension = tryGetExtensionFromPath(subst);\n                if (extension !== undefined) {\n                    const path = tryFile(candidate, onlyRecordFailures, state);\n                    if (path !== undefined) {\n                        return noPackageId({ path, ext: extension });"
  },
  {
    "id" : "9e5098ea-6541-4b59-8161-2d34c3e471fd",
    "prId" : 40101,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40101#pullrequestreview-484418833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79580add-cc3c-464d-af38-7a18fea38659",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This looks sketchy, but I manually verified that the assertion should hold in all cases we currently have; itâ€™s just hard to encode it into the types. The only times `host.getCurrentDirectory` is `undefined` are\r\n\r\n1. The command line parser and typings installer each call the module name resolver in an ad-hoc way under certain circumstances, but they pass a hard-coded `compilerOptions` that lack `paths`, so this code path is never taken.\r\n2. `Project` calls `getAutomaticTypeDirectives` with a `DirectoryStructureHost`, but that function never uses `host.getCurrentDirectory()`.\r\n\r\nChanging `ModuleResolutionHost['getCurrentDirectory']` to be non-optional makes these call sites a bit of a nuisance.",
        "createdAt" : "2020-09-08T19:07:50Z",
        "updatedAt" : "2020-09-11T19:32:23Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fcd9e69e7bf1345a816a1e85f4093b20f350706",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +797,801 @@                trace(state.host, Diagnostics.paths_option_is_specified_looking_for_a_pattern_to_match_module_name_0, moduleName);\n            }\n            const baseDirectory = baseUrl ?? Debug.checkDefined(pathsBasePath || state.host.getCurrentDirectory?.(), \"Encountered 'paths' without a 'baseUrl', config file, or host 'getCurrentDirectory'.\");\n            return tryLoadModuleUsingPaths(extensions, moduleName, baseDirectory, paths, loader, /*onlyRecordFailures*/ false, state);\n        }"
  },
  {
    "id" : "3fdc0656-0ac2-4928-8121-31fe18108e79",
    "prId" : 31541,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31541#pullrequestreview-241333788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcca2222-d79a-4e02-a67a-9f40c7793b11",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "`name` and `version` have type `string | undefined`, right? It seems a lot clearer to write `packageJsonContent.name !== undefined`",
        "createdAt" : "2019-05-22T22:53:55Z",
        "updatedAt" : "2019-05-22T22:59:04Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "e35c1d69-5745-45c1-abe4-6730ce4cd8c6",
        "parentId" : "fcca2222-d79a-4e02-a67a-9f40c7793b11",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "If name or version aren't defined, then you get no packageId now. Before this change, was it possible to get a packageId in situations where name or version would be undefined? What happens now in that case (if it exists)?",
        "createdAt" : "2019-05-22T22:55:05Z",
        "updatedAt" : "2019-05-22T22:59:04Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "576e95b4-cfc6-4c7c-ac27-86e224bb8007",
        "parentId" : "fcca2222-d79a-4e02-a67a-9f40c7793b11",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "it was exact same condition for package id to be present .. just copied it here instead. Given that the value is coming from Json I think checking string type is better but check can be updated to isString() instead for better readability ",
        "createdAt" : "2019-05-23T01:29:25Z",
        "updatedAt" : "2019-05-23T01:29:25Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "4aa4bef3-8d4b-4e76-bd5f-25c83d935ab9",
        "parentId" : "fcca2222-d79a-4e02-a67a-9f40c7793b11",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "No, I think `typeof x==='string'` is just as readable as `isString`.",
        "createdAt" : "2019-05-23T17:04:46Z",
        "updatedAt" : "2019-05-23T17:04:46Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d188a8c68d1a54d6933ad0be5e1375b7be3e4db",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +21,25 @@        if (r && packageInfo) {\n            const packageJsonContent = packageInfo.packageJsonContent as PackageJson;\n            if (typeof packageJsonContent.name === \"string\" && typeof packageJsonContent.version === \"string\") {\n                packageId = {\n                    name: packageJsonContent.name,"
  },
  {
    "id" : "673a643d-4994-4123-8279-33947be27d79",
    "prId" : 27980,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27980#pullrequestreview-170496155",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf28243a-3617-46b9-bb52-6bdcffef326e",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Also needs some tests to ensure that caching is working as intended (and hasn't changed)",
        "createdAt" : "2018-10-29T16:38:57Z",
        "updatedAt" : "2018-11-07T21:20:39Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "f29678d4-a97f-43ec-937b-a4a99b5ef4f1",
        "parentId" : "cf28243a-3617-46b9-bb52-6bdcffef326e",
        "authorId" : "f42e5e63-0d29-423c-9623-dca4df66a53d",
        "body" : "Could you point me in the right direction? I am unsure what would be needed.",
        "createdAt" : "2018-10-29T18:45:10Z",
        "updatedAt" : "2018-11-07T21:20:39Z",
        "lastEditedBy" : "f42e5e63-0d29-423c-9623-dca4df66a53d",
        "tags" : [
        ]
      },
      {
        "id" : "8ff29301-2552-4586-a5a2-c47f100ed90d",
        "parentId" : "cf28243a-3617-46b9-bb52-6bdcffef326e",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "There are tests in `src/testRunner/moduleResolution.ts` that verify caching is working as expected.",
        "createdAt" : "2018-10-29T18:53:18Z",
        "updatedAt" : "2018-11-07T21:20:39Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "274df667-f10d-46c0-a4f2-ed986d38cc9d",
        "parentId" : "cf28243a-3617-46b9-bb52-6bdcffef326e",
        "authorId" : "f42e5e63-0d29-423c-9623-dca4df66a53d",
        "body" : "@sheetalkamat Can you please explain how I can run the unit tests? Thank you",
        "createdAt" : "2018-10-31T21:24:10Z",
        "updatedAt" : "2018-11-07T21:20:39Z",
        "lastEditedBy" : "f42e5e63-0d29-423c-9623-dca4df66a53d",
        "tags" : [
        ]
      },
      {
        "id" : "05d8d5a9-6f5b-4846-8726-50ca18ded9d8",
        "parentId" : "cf28243a-3617-46b9-bb52-6bdcffef326e",
        "authorId" : "f42e5e63-0d29-423c-9623-dca4df66a53d",
        "body" : "@sheetalkamat I figured it out, they are run by default",
        "createdAt" : "2018-10-31T22:20:38Z",
        "updatedAt" : "2018-11-07T21:20:39Z",
        "lastEditedBy" : "f42e5e63-0d29-423c-9623-dca4df66a53d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a9c20949e42400e55194dbd1516c2eac6257275",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +734,738 @@        if (resolved) return resolved.value;\n\n        if (!isExternalModuleNameRelative(moduleName)) {\n            return tryLoadModuleUsingBaseUrl(extensions, moduleName, loader, state);\n        }"
  },
  {
    "id" : "b255fce9-100e-4fd6-88ae-3562e9cb053a",
    "prId" : 26568,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26568#pullrequestreview-152628271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f1140f7-5a08-48b8-b32d-68d3d4ccd00f",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "This case probably deserves a log message since it's basically a silent error",
        "createdAt" : "2018-09-05T17:09:35Z",
        "updatedAt" : "2018-09-07T20:52:51Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "7b24eb48-c15f-48e4-9920-38d1d8eb4eb2",
        "parentId" : "2f1140f7-5a08-48b8-b32d-68d3d4ccd00f",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I'll add a verification pass to `readPackageJsonTypesVersionPaths`, since `getPackageJsonTypesVersionsPaths` is also used by services and doesn't take a `ModuleResolutionState` argument.",
        "createdAt" : "2018-09-05T18:23:12Z",
        "updatedAt" : "2018-09-07T20:52:51Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a255d9a163813158dda4f4ca854646f00dd70bee",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +203,207 @@\n            const keyRange = VersionRange.tryParse(key);\n            if (keyRange === undefined) {\n                continue;\n            }"
  },
  {
    "id" : "2076b5e0-e4c9-4483-aaf5-333e89810c8f",
    "prId" : 24112,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24112#pullrequestreview-120418591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ba38634-6922-4c78-8e8c-ecdd34186d4a",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Nit: might just modify `tryReadPackageJsonFields` to take separate `readTypes` and `readMain` parameters, if we might want both at once.",
        "createdAt" : "2018-05-15T20:47:30Z",
        "updatedAt" : "2018-05-15T20:54:31Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "f1c9bd3a-03cc-4d1a-ad97-319975a4f6c3",
        "parentId" : "7ba38634-6922-4c78-8e8c-ecdd34186d4a",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "In most both cases different conditions determine if we read main types so i would rather leave it as is.",
        "createdAt" : "2018-05-15T21:17:49Z",
        "updatedAt" : "2018-05-15T21:17:49Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc50fe5e40887972dba8283ca45a6e2d05c0fb85",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1050,1054 @@\n    function loadModuleFromPackageJson(jsonContent: PackageJsonPathFields, extensions: Extensions, candidate: string, failedLookupLocations: Push<string>, state: ModuleResolutionState): PathAndExtension | undefined {\n        let file = tryReadPackageJsonFields(extensions !== Extensions.JavaScript && extensions !== Extensions.Json, jsonContent, candidate, state);\n        if (!file) {\n            if (extensions === Extensions.TypeScript) {"
  },
  {
    "id" : "80e8e677-430b-47bb-a042-75d1bc5a6d9a",
    "prId" : 23150,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23150#pullrequestreview-109530604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03162b1d-03ac-4cb4-ab3c-f68b86c7789b",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Why not mark `readFile` optional?",
        "createdAt" : "2018-04-04T22:41:33Z",
        "updatedAt" : "2018-04-05T21:59:43Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "e6f83abe-da72-4e39-9129-a2eb3e2c03d4",
        "parentId" : "03162b1d-03ac-4cb4-ab3c-f68b86c7789b",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Whoops, left in a change to the function body on accident. This should not be optional here because it is checked by the callers.",
        "createdAt" : "2018-04-04T23:05:29Z",
        "updatedAt" : "2018-04-05T21:59:43Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "274029e20c36e81635fd9638acec42773e031a22",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +119,123 @@\n    /* @internal */\n    export function readJson(path: string, host: { readFile(fileName: string): string | undefined }): object {\n        try {\n            const jsonText = host.readFile(path);"
  },
  {
    "id" : "a4a9bee1-5a82-478b-8d62-fb70e8ea1a75",
    "prId" : 22167,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22167#pullrequestreview-117693490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8644bb28-c281-4c81-ab55-9c749bec4369",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Seems like this could be handled along with the bottom case `if (hasJavaScriptFileExtension)`?",
        "createdAt" : "2018-05-04T15:48:43Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "33264f5e-9623-4539-a4c7-4406d33601e0",
        "parentId" : "8644bb28-c281-4c81-ab55-9c749bec4369",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "That just makes too many checks of extension !== Extensions.Json since we dont want to resolve \"module\" to module.json but only \"module.json\"\r\n",
        "createdAt" : "2018-05-04T17:35:31Z",
        "updatedAt" : "2018-05-04T18:16:21Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4143ae0c15acae0015f5aa00e8e2391ef156388",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +904,908 @@     */\n    function loadModuleFromFile(extensions: Extensions, candidate: string, failedLookupLocations: Push<string>, onlyRecordFailures: boolean, state: ModuleResolutionState): PathAndExtension | undefined {\n        if (extensions === Extensions.Json) {\n            const extensionLess = tryRemoveExtension(candidate, Extension.Json);\n            return extensionLess && tryAddingExtensions(extensionLess, extensions, failedLookupLocations, onlyRecordFailures, state);"
  },
  {
    "id" : "489f84df-bf57-4cbf-b63d-ae2261221fa7",
    "prId" : 21471,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21471#pullrequestreview-92675837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea497a5e-ecd9-4963-80fe-58abd0a4f542",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "what about `.jsx`?",
        "createdAt" : "2018-01-30T18:46:33Z",
        "updatedAt" : "2018-01-30T18:50:47Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7de8cd3073f62b4a2d33b6fcaafd6b4e4548ef2",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +979,983 @@                else {\n                    const jsPath = tryReadPackageJsonFields(/*readTypes*/ false, packageJsonContent, nodeModuleDirectory, state);\n                    if (typeof jsPath === \"string\") {\n                        subModuleName = removeExtension(removeExtension(jsPath.substring(nodeModuleDirectory.length + 1), Extension.Js), Extension.Jsx) + Extension.Dts;\n                    }"
  },
  {
    "id" : "f6fb0abb-aadd-4960-89bf-9d415a4183ea",
    "prId" : 21130,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21130#pullrequestreview-89536446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "350fb839-884d-4c7a-a449-be90708e08dd",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can you add a test for scoped packages as well",
        "createdAt" : "2018-01-17T18:06:21Z",
        "updatedAt" : "2018-01-17T18:48:04Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "3420bd6d1093eaa133c31e9fa596ddb4c14a5ac3",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +840,844 @@        const indexAfterNodeModules = idx + nodeModulesPathPart.length;\n        let indexAfterPackageName = moveToNextDirectorySeparatorIfAvailable(path, indexAfterNodeModules);\n        if (path.charCodeAt(indexAfterNodeModules) === CharacterCodes.at) {\n            indexAfterPackageName = moveToNextDirectorySeparatorIfAvailable(path, indexAfterPackageName);\n        }"
  },
  {
    "id" : "2e4a32b9-150c-45f2-abe8-43d8bb76c3db",
    "prId" : 16661,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16661#pullrequestreview-55914881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e504dd6-9048-44ab-af37-6ad6cdfb4e1b",
        "parentId" : null,
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "Can you add a doc-comment describing what `ModuleResolutionHost.realpath` (called by `realpath`) is supposed to do? It's not obvious to me from the name that it is supposed to resolve symbolic links. ",
        "createdAt" : "2017-06-22T17:41:48Z",
        "updatedAt" : "2017-08-09T21:51:21Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "02b2742f-233f-4831-803f-eea1245195a9",
        "parentId" : "6e504dd6-9048-44ab-af37-6ad6cdfb4e1b",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "realpath is declared optional but oyu never check for its functionality. tsc should check if the current host supports realpath, and we should probably be resilient or throw if realpath isn't available.\r\n\r\nAlso, I think that `realpath` should be camelCase to be consistent with the rest of the APIs.",
        "createdAt" : "2017-08-11T21:00:22Z",
        "updatedAt" : "2017-08-11T21:00:22Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "c7c89efd-f9df-4544-9eae-5a9ba757c80d",
        "parentId" : "6e504dd6-9048-44ab-af37-6ad6cdfb4e1b",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "The first action taken by `realpath` here is to test `if (!host.realpath) return path;`\r\nI can change the name of the local function but wouldn't changing the name of the host method break existing hosts?",
        "createdAt" : "2017-08-11T21:52:04Z",
        "updatedAt" : "2017-08-11T21:52:04Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d362b13e592527ce78255ccd9f8f039297a1a82b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +202,206 @@        if (resolved) {\n            if (!options.preserveSymlinks) {\n                resolved = realpath(resolved, host, traceEnabled);\n            }\n"
  },
  {
    "id" : "62dbf124-d58b-4075-8fe9-3a5c52ce946a",
    "prId" : 16274,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16274#pullrequestreview-50061002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1457771-0883-4423-b454-372742d2a1e6",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Is it important that they not be assignable to each other?  Is it just to avoid confusion or something more?",
        "createdAt" : "2017-07-13T22:20:38Z",
        "updatedAt" : "2017-08-09T20:45:04Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "cbc720ce-57b8-4299-979c-2d398ef0c567",
        "parentId" : "d1457771-0883-4423-b454-372742d2a1e6",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This prevents us from computing `packageId` and then not using it. See #12936",
        "createdAt" : "2017-07-14T14:29:14Z",
        "updatedAt" : "2017-08-09T20:45:04Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f74f55efdd3d71456d30340411cb870e9d9a5ff",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +38,42 @@    interface PathAndExtension {\n        path: string;\n        // (Use a different name than `extension` to make sure Resolved isn't assignable to PathAndExtension.)\n        ext: Extension;\n    }"
  },
  {
    "id" : "d2543101-e7a5-45cd-80ef-4816c61ecc70",
    "prId" : 16274,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16274#pullrequestreview-50119408",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8eff151-1d8f-4c41-8251-dffd5b997c6d",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "What gets returned otherwise?  Is `return undefined` implied?",
        "createdAt" : "2017-07-13T22:23:49Z",
        "updatedAt" : "2017-08-09T20:45:04Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "ce13cd01-0f46-402f-859a-a318f91d949d",
        "parentId" : "c8eff151-1d8f-4c41-8251-dffd5b997c6d",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Yes, JS functions always return `undefined` if they don't reach a `return` statement.",
        "createdAt" : "2017-07-14T14:29:07Z",
        "updatedAt" : "2017-08-09T20:45:04Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "db285e7e-b568-49b0-8954-c91f273b43c7",
        "parentId" : "c8eff151-1d8f-4c41-8251-dffd5b997c6d",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Personally, I like to be explicit, but I'm fine if this is idiomatic JS.",
        "createdAt" : "2017-07-14T18:28:13Z",
        "updatedAt" : "2017-08-09T20:45:04Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f74f55efdd3d71456d30340411cb870e9d9a5ff",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +922,926 @@        // Don't do package.json lookup recursively, because Node.js' package lookup doesn't.\n        const result = nodeLoadModuleByRelativeName(nextExtensions, file, failedLookupLocations, onlyRecordFailures, state, /*considerPackageJson*/ false);\n        if (result) {\n            // It won't have a `packageId` set, because we disabled `considerPackageJson`.\n            Debug.assert(result.packageId === undefined);"
  },
  {
    "id" : "78a2a33e-171c-495c-b930-f4efe6804271",
    "prId" : 13678,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/13678#pullrequestreview-18739682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e62e3a0-f6f6-41f8-9c60-a1b23a51310f",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "that looks a bit odd: does it mean that i.e. for `.ts` or `.js` extensions we'll repeat the whole resolution process trying to resolve the same file again?",
        "createdAt" : "2017-01-26T22:02:24Z",
        "updatedAt" : "2017-01-26T22:27:06Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "bb009483-316b-49d0-a06e-fd3bb831fc77",
        "parentId" : "6e62e3a0-f6f6-41f8-9c60-a1b23a51310f",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "We'll repeat the process trying to resolve the file specified in the `package.json`. But `considerPackageJson` is `false` this time, so it won't repeat forever.",
        "createdAt" : "2017-01-26T22:24:12Z",
        "updatedAt" : "2017-01-26T22:27:06Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "132fa7093ed64bc0e78a9a3bb4ca7a7325e540be",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +876,880 @@        const nextExtensions = extensions === Extensions.DtsOnly ? Extensions.TypeScript : extensions;\n        // Don't do package.json lookup recursively, because Node.js' package lookup doesn't.\n        return nodeLoadModuleByRelativeName(nextExtensions, file, failedLookupLocations, onlyRecordFailures, state, /*considerPackageJson*/ false);\n    }\n"
  },
  {
    "id" : "813be36d-db89-4049-aeda-94ad71fa3d37",
    "prId" : 12020,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12020#pullrequestreview-7736696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce394fb0-0949-4d7c-832e-a8c7a18183fe",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "you need to do the same for resolveTypeReferenceDirectives as well.\n",
        "createdAt" : "2016-11-08T23:59:12Z",
        "updatedAt" : "2016-11-11T21:37:19Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c7e1b69138762827bf927c7885cd53517a1f260",
    "line" : null,
    "diffHunk" : "@@ -1,1 +567,571 @@                // For node_modules lookups, get the real path so that multiple accesses to an `npm link`-ed module do not create duplicate files.\n                return resolved && { resolved: { path: realpath(resolved.path, host, traceEnabled), extension: resolved.extension }, isExternalLibraryImport: true };\n            }\n            else {\n                const candidate = normalizePath(combinePaths(containingDirectory, moduleName));"
  },
  {
    "id" : "91b1f98a-5910-4e77-8223-10c2e6044cad",
    "prId" : 11926,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11926#pullrequestreview-6321515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8d50a72-e76a-4c68-a808-7c9fb2d7a32d",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Turns out that since `CompilerOptions` consists only of optional properties, anything can be assigned to it. So while I thought I was statically ensuring that these were the only compiler options used, we actually use several others, by passing this into a parameter of type `CompilerOptions` and then accessing them.\n",
        "createdAt" : "2016-10-28T21:20:59Z",
        "updatedAt" : "2016-11-11T21:00:50Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce9e5f52270951bf0cb04dbd9dff7543543af79f",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +68,72 @@    interface ModuleResolutionState {\n        host: ModuleResolutionHost;\n        compilerOptions: CompilerOptions;\n        traceEnabled: boolean;\n    }"
  },
  {
    "id" : "00c4dd01-33f4-422e-baa4-b9a551c73ba4",
    "prId" : 11704,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11704#pullrequestreview-4742734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8e9eff8-6457-45fb-8696-aae3aff46e20",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "why removing `@internal`?\n",
        "createdAt" : "2016-10-18T19:28:10Z",
        "updatedAt" : "2016-10-26T17:14:28Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "718d57ff3c0f2dc20cc30bed8dee271b6813801e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3,7 @@\nnamespace ts {\n    function trace(host: ModuleResolutionHost, message: DiagnosticMessage, ...args: any[]): void;\n    function trace(host: ModuleResolutionHost): void {\n        host.trace(formatMessage.apply(undefined, arguments));"
  }
]