[
  {
    "id" : "83f93c58-a449-4057-96c0-5a177fbd0dc4",
    "prId" : 44176,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44176#pullrequestreview-678883778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fcb81d0-5131-4575-9a4d-c5a683df76d3",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Should user preferences be part of the key for the cache as it does affect the module specifiers (esp what if compileOnSave with declarations enabled which uses module specifiers(? but not sure if same path applies) and auto import are inter mixed?)",
        "createdAt" : "2021-06-08T17:02:00Z",
        "updatedAt" : "2021-06-08T17:07:13Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "406634c0-90de-4a05-ae3e-a528ef890711",
        "parentId" : "1fcb81d0-5131-4575-9a4d-c5a683df76d3",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Only `importModuleSpecifierEnding` and `importModuleSpecifierPreference` affect the answers and I’m currently clearing it in editorServices.ts when they change... but it might be cleaner to make it part of the key. I’ll look and see how disruptive that is.",
        "createdAt" : "2021-06-08T17:22:14Z",
        "updatedAt" : "2021-06-08T17:22:15Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "8c525efc-0cb4-4d52-af0b-688de321fa11",
        "parentId" : "1fcb81d0-5131-4575-9a4d-c5a683df76d3",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Latest commit makes it part of the cache key instead of clearing when the host config changes. It has to be threaded through a lot more places, but it’s definitely more obvious that it’s a dependency, and will play nicer with other hosts/callers.",
        "createdAt" : "2021-06-08T18:41:16Z",
        "updatedAt" : "2021-06-08T18:41:16Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "4604dde1e7d905badde552c18bb19fafe07b2b85",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +118,122 @@\n        modulePaths ||= getAllModulePathsWorker(importingSourceFile.path, moduleSourceFile.originalFileName, host);\n        const preferences = getPreferences(userPreferences, compilerOptions, importingSourceFile);\n        const existingSpecifier = forEach(modulePaths, modulePath => forEach(\n            host.getFileIncludeReasons().get(toPath(modulePath.path, host.getCurrentDirectory(), info.getCanonicalFileName)),"
  },
  {
    "id" : "c194a366-2ff4-4cf8-be07-ce0723a5dd0c",
    "prId" : 42232,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42232#pullrequestreview-563005744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2eb5dea4-5983-4e49-b750-b84b7a82feca",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This change is so that it actually uses directory of tsconfig file and not random directory where tsc is invoked from. (eg in test added the current directory is \"/\")",
        "createdAt" : "2021-01-06T20:06:08Z",
        "updatedAt" : "2021-04-29T23:47:12Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d1b450ed85580ae485168e71e8a242e8474a8d9",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +206,210 @@\n        if (relativePreference === RelativePreference.ExternalNonRelative) {\n            const projectDirectory = compilerOptions.configFilePath ?\n                toPath(getDirectoryPath(compilerOptions.configFilePath), host.getCurrentDirectory(), info.getCanonicalFileName) :\n                info.getCanonicalFileName(host.getCurrentDirectory());"
  },
  {
    "id" : "6a3ba141-a2aa-4c03-adeb-531bab5a9286",
    "prId" : 42224,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42224#pullrequestreview-562995326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1a415b1-22a9-499d-9a83-7e6ba8243315",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "importFixes.ts calls this function, and will never find this `existingSpecifier` since it takes a different approach altogether if there was an existing specifier the auto import could reuse. It’s probably not very expensive, but it would be nice if we could skip this in that case.",
        "createdAt" : "2021-01-06T00:01:41Z",
        "updatedAt" : "2021-01-08T22:54:55Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "7f3fcd15-873a-4465-a6a9-b656ca5f493f",
        "parentId" : "b1a415b1-22a9-499d-9a83-7e6ba8243315",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Looked into this.. I don't think this is expensive since its not going to find the import in the file include reason. the importing file is already in program so thats also not good quick check. Adding another flag or optionality adds to maintenance cost later so would like to keep this.",
        "createdAt" : "2021-01-06T19:48:42Z",
        "updatedAt" : "2021-01-08T22:54:55Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4a1ea7883eb959da8c90e2727492e06b0634e22",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +107,111 @@        const preferences = getPreferences(userPreferences, compilerOptions, importingSourceFile);\n\n        const existingSpecifier = forEach(modulePaths, modulePath => forEach(\n            host.getFileIncludeReasons().get(toPath(modulePath.path, host.getCurrentDirectory(), info.getCanonicalFileName)),\n            reason => {"
  },
  {
    "id" : "69d6cd45-fed1-4e76-b478-c5168b62fbb6",
    "prId" : 42224,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42224#pullrequestreview-564635447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c5938eb-c794-4d91-b433-e2e5c0ff5af3",
        "parentId" : null,
        "authorId" : "82099593-2916-4461-9564-9ad9860d81b1",
        "body" : "`preferences.relativePreference !== RelativePreference.NonRelative` is a little hard to parse as a double negative.  Could it be extracted and named `prefersRelative`?",
        "createdAt" : "2021-01-06T08:38:52Z",
        "updatedAt" : "2021-01-08T22:54:55Z",
        "lastEditedBy" : "82099593-2916-4461-9564-9ad9860d81b1",
        "tags" : [
        ]
      },
      {
        "id" : "254d0d15-776d-4180-8237-425ac23f3b62",
        "parentId" : "5c5938eb-c794-4d91-b433-e2e5c0ff5af3",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I will add comment instead. prefer keeping this inline instead.",
        "createdAt" : "2021-01-08T22:54:06Z",
        "updatedAt" : "2021-01-08T22:54:55Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4a1ea7883eb959da8c90e2727492e06b0634e22",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +113,117 @@                const specifier = getModuleNameStringLiteralAt(importingSourceFile, reason.index).text;\n                // If the preference is for non relative and the module specifier is relative, ignore it\n                return preferences.relativePreference !== RelativePreference.NonRelative || !pathIsRelative(specifier) ?\n                    specifier :\n                    undefined;"
  },
  {
    "id" : "490a510e-5430-43d5-8cde-4e5359b5b537",
    "prId" : 42150,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42150#pullrequestreview-572497330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "712b8997-86ea-4f75-90cf-54c9fab6f120",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Use `importedPath` which is already canonicalized?",
        "createdAt" : "2021-01-14T20:51:14Z",
        "updatedAt" : "2021-01-19T23:36:44Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "baccd782-3675-4957-bae5-d7d08c81732e",
        "parentId" : "712b8997-86ea-4f75-90cf-54c9fab6f120",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This is import**ing**FileName, not import**ed**FileName",
        "createdAt" : "2021-01-19T21:31:37Z",
        "updatedAt" : "2021-01-19T23:36:44Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "0534f44a-84e8-4fb6-8d48-af96d2a71734",
        "parentId" : "712b8997-86ea-4f75-90cf-54c9fab6f120",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "sorry about that..  ",
        "createdAt" : "2021-01-20T18:11:51Z",
        "updatedAt" : "2021-01-20T18:11:52Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "13eb85bb0a560cb66425debe4f6f024750d89aaa",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +308,312 @@\n            // Don't want to a package to globally import from itself (importNameCodeFix_symlink_own_package.ts)\n            if (startsWithDirectory(importingFileName, realPathDirectory, getCanonicalFileName)) {\n                return false; // Stop search, each ancestor directory will also hit this condition\n            }"
  },
  {
    "id" : "ab40c679-c7fd-444c-8010-48c0c3f53040",
    "prId" : 40637,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40637#pullrequestreview-498833043",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cde8afe7-4433-4e29-84cc-4568547e6d27",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Some example values in this containing block might be helpful",
        "createdAt" : "2020-09-29T19:58:39Z",
        "updatedAt" : "2020-10-19T18:39:49Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b875bb1f7125e55fd668be2408b34bc60332423",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +203,207 @@                return nonRelative;\n            }\n\n            const nearestTargetPackageJson = getNearestAncestorDirectoryWithPackageJson(host, getDirectoryPath(modulePath));\n            const nearestSourcePackageJson = getNearestAncestorDirectoryWithPackageJson(host, sourceDirectory);"
  },
  {
    "id" : "3b879104-4a8a-4639-8943-9f6649e6e31a",
    "prId" : 39277,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39277#pullrequestreview-490069626",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ad72c80-d5b3-4149-925b-5c477d08bfc7",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I'm late to the party here, but I don't think it's right to pass the bundled package reference to `tryGetModuleNameFromPaths`. These values get tested for equality with the values in the `paths` value arrays (with `*` substitutions applied), which are absolute paths. `bundledPkgReference` will presumably not be an absolute path, so this will prevent `paths` from ever being used to generate a module specifier in tandem with `bundledPackageName`. Or, maybe that's the intent? I can't totally wrap my mind around how/why these options would ever be used together.",
        "createdAt" : "2020-09-16T22:46:11Z",
        "updatedAt" : "2020-09-16T22:46:12Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "25d8b56e70136fdc5876e3e888c72803f138df42",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +173,177 @@        const bundledPkgReference = bundledPackageName ? combinePaths(bundledPackageName, relativeToBaseUrl) : relativeToBaseUrl;\n        const importRelativeToBaseUrl = removeExtensionAndIndexPostFix(bundledPkgReference, ending, compilerOptions);\n        const fromPaths = paths && tryGetModuleNameFromPaths(removeFileExtension(bundledPkgReference), importRelativeToBaseUrl, paths);\n        const nonRelative = fromPaths === undefined ? importRelativeToBaseUrl : fromPaths;\n"
  },
  {
    "id" : "dc75ae35-ec98-4a73-b820-e05a6fdd1000",
    "prId" : 37561,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37561#pullrequestreview-381606629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8495df3c-061c-4737-94fc-7863f347df88",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Just to make sure I’m understanding this correctly, the idea is:\r\n\r\n1. we’ve located the `moduleFileName`, say, `/project/node_modules/preact/hooks/src/index.js`\r\n2. we look at the structure of the path (as before) to call `/project/node_modules/preact` the “package root”\r\n3. we see if `moduleFileName` is accessible (via a package.json main field) from `/project/node_modules/preact`\r\n4. if not, go to step 3 but with one more directory appended to the end (in the first iteration of this case, `/project/node_modules/preact/hooks`)\r\n\r\nAs contrasted to the previous behavior, where we’d only try the package root before giving up and using the full `moduleFileName` (optionally with `/index.js` taken off the end).",
        "createdAt" : "2020-03-25T23:22:31Z",
        "updatedAt" : "2020-03-25T23:23:16Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b7505895c3d15dfc2f53d58a1d97769e29053a9",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +336,340 @@\n                // try with next level of directory\n                packageRootIndex = moduleFileName.indexOf(directorySeparator, packageRootIndex + 1);\n                if (packageRootIndex === -1) {\n                    moduleSpecifier = getExtensionlessFileName(moduleFileNameForExtensionless);"
  },
  {
    "id" : "fde33f79-f827-4a5c-81cd-cd83f86d4e4f",
    "prId" : 37438,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37438#pullrequestreview-376319866",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "028d3ffe-b5a4-4db1-a03d-3038a310ff44",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "What’s the significance of changing `importedFileName` to go at the beginning instead of the end of the array?",
        "createdAt" : "2020-03-17T18:43:56Z",
        "updatedAt" : "2020-03-17T18:59:19Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "6930a622-3f31-4924-b67a-3c828df98400",
        "parentId" : "028d3ffe-b5a4-4db1-a03d-3038a310ff44",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "There is no significance.. I don't know why we had it other way around but it doesn't change any of the tests we have",
        "createdAt" : "2020-03-17T18:57:18Z",
        "updatedAt" : "2020-03-17T18:59:19Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "39315da4fe8c96d3e050e9dc82dd65b439e7f1d3",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +179,183 @@        const cwd = host.getCurrentDirectory();\n        const redirects = host.redirectTargetsMap.get(toPath(importedFileName, cwd, getCanonicalFileName)) || emptyArray;\n        const importedFileNames = [importedFileName, ...redirects];\n        const targets = importedFileNames.map(f => getNormalizedAbsolutePath(f, cwd));\n        if (!preferSymlinks) {"
  },
  {
    "id" : "b172a48e-9152-476c-aecc-505a051f7958",
    "prId" : 37438,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37438#pullrequestreview-376320825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "deb9d2d8-53f1-4849-9766-23083d3af016",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I see the explanation of this change in the PR description. It looks like everything outside this file is just cleanup/refactoring or test changes—is that right, or is there somewhere else I should look for behavior changes?",
        "createdAt" : "2020-03-17T18:50:41Z",
        "updatedAt" : "2020-03-17T18:59:19Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "c9b034e2-9043-4ff6-a5f7-baf98e044406",
        "parentId" : "deb9d2d8-53f1-4849-9766-23083d3af016",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Thats correct.. The real change is two changes in this file (casing and node_modules behaviour) everything else was just refactoring for cleaner interface and potential new additions needed from program.. ",
        "createdAt" : "2020-03-17T18:58:41Z",
        "updatedAt" : "2020-03-17T18:59:19Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "39315da4fe8c96d3e050e9dc82dd65b439e7f1d3",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +243,247 @@                    if (!importedFileFromNodeModules || pathContainsNodeModules(fileName)) {\n                        (pathsInDirectory || (pathsInDirectory = [])).push(fileName);\n                    }\n                    allFileNames.delete(fileName);\n                }"
  },
  {
    "id" : "bae54903-c530-48bb-83e4-78e278bfd164",
    "prId" : 25850,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25850#pullrequestreview-139754222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fc0daa1-0f91-4679-b3ec-754e262c8d45",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I'm not sure I follow all the logic here, but there may be some duplicated effort. A few lines above this we get symlinks, then in `discoverProbableSymlinks` there is some nearly identical (copy-pasted?) code to do the same thing.",
        "createdAt" : "2018-07-23T22:29:22Z",
        "updatedAt" : "2018-07-24T18:12:55Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "c76b021c-62a9-43d6-919a-f431081b3d8f",
        "parentId" : "9fc0daa1-0f91-4679-b3ec-754e262c8d45",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "As far as I know, it's not duplicated at all. Here we find files whose realpath differed from their actual path, _provided those files refer to the imported file_. In `discoverProbableSymlinks`, we crawl _all_ files looking for common parts among all files with symlinks to find probable directory junction links. If I remember correctly, anyway.",
        "createdAt" : "2018-07-24T06:51:00Z",
        "updatedAt" : "2018-07-24T18:12:55Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "873399688b76d1b8245f0ea22e9aa469f6609436",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +195,199 @@            sf.resolvedModules && firstDefinedIterator(sf.resolvedModules.values(), res =>\n                res && res.resolvedFileName === importedFileName ? res.originalPath : undefined));\n        const cwd = host.getCurrentDirectory ? host.getCurrentDirectory() : \"\";\n        const baseOptions = getAllModulePathsUsingIndirectSymlinks(files, getNormalizedAbsolutePath(importedFileName, cwd), getCanonicalFileName, host);\n        if (symlinks.length === 0) {"
  },
  {
    "id" : "35caa927-44d0-4e11-86d4-b58accfced0d",
    "prId" : 25364,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25364#pullrequestreview-134098629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b58b4b8-a9e3-46f3-9984-cd69c127c0fc",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Dont you need to do getCanonicalFileName for sourceDirectory as well?",
        "createdAt" : "2018-07-02T18:56:53Z",
        "updatedAt" : "2018-07-03T17:57:29Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "9c1aacec-0dc6-4af8-86d3-90d6684dcfb6",
        "parentId" : "7b58b4b8-a9e3-46f3-9984-cd69c127c0fc",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "That comes from `importingSourceFile.path` which should already be canonicalized.",
        "createdAt" : "2018-07-03T16:53:42Z",
        "updatedAt" : "2018-07-03T17:57:29Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "a0c2efc0-8c91-4841-9a7e-d427546af4ec",
        "parentId" : "7b58b4b8-a9e3-46f3-9984-cd69c127c0fc",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Makes sense. Good that you changed the type there so its easy to catch in future. Thanks.",
        "createdAt" : "2018-07-03T17:28:27Z",
        "updatedAt" : "2018-07-03T17:57:29Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "db03a996e7cb4b9a15ce3981dda503eab3f0c735",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +291,295 @@        // Get a path that's relative to node_modules or the importing file's path\n        // if node_modules folder is in this folder or any of its parent folders, no need to keep it.\n        if (!startsWith(sourceDirectory, getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex)))) return undefined;\n        // If the module was found in @types, get the actual Node package name\n        return getPackageNameFromAtTypesDirectory(moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1));"
  },
  {
    "id" : "65e99878-ebde-4053-8fb8-235b07713ea2",
    "prId" : 25074,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25074#pullrequestreview-131292507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "891cab81-0fc0-42a9-aafe-1a3ad05be343",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "should that instead be a boolean flag?",
        "createdAt" : "2018-06-21T18:48:43Z",
        "updatedAt" : "2018-06-25T18:40:28Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "26b4ab85-30ff-45d5-a075-578ea0286fdd",
        "parentId" : "891cab81-0fc0-42a9-aafe-1a3ad05be343",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Let's do that in #25073 which is making this configurable.",
        "createdAt" : "2018-06-22T18:03:23Z",
        "updatedAt" : "2018-06-25T18:40:28Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "73737a2b59ff0a528fedccd51f64507403c899ea",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +6,10 @@    }\n\n    // Note: importingSourceFile is just for usesJsExtensionOnImports\n    export function getModuleSpecifier(\n        compilerOptions: CompilerOptions,"
  },
  {
    "id" : "7a56bd0d-1020-49b1-8c56-0c0aab527a9b",
    "prId" : 24874,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24874#pullrequestreview-128085520",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9104c70c-3086-432f-a176-4af100babc48",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "not sure i understand why we are adding the original name?",
        "createdAt" : "2018-06-12T18:06:20Z",
        "updatedAt" : "2018-06-12T19:06:39Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "b5955ef6-04cb-4514-b87d-78d15e0470da",
        "parentId" : "9104c70c-3086-432f-a176-4af100babc48",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "When we find a symlinked path that we know is correct, we make a choice to ignore the original path and not present is as an option. Since the file in this case wasn't imported directly via a symlink in the compilation already, in this case I think it's more appropriate to keep it around, that way you can still get, eg `./foo` as an option even though `module/foo` is possible.",
        "createdAt" : "2018-06-12T18:09:19Z",
        "updatedAt" : "2018-06-12T19:06:39Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "67390298d972e0cb6ab77051dcc01ebb0819c8fd",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +170,174 @@        const resolvedtarget = host.getCurrentDirectory ? resolvePath(host.getCurrentDirectory(), target) : target;\n        if (options) {\n            options.push(resolvedtarget); // Since these are speculative, we also include the original resolved name as a possibility\n            return options;\n        }"
  }
]