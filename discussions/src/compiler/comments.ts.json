[
  {
    "id" : "5ba0d2e5-505d-4896-839d-e74ecb95ea3b",
    "prId" : 13761,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/13761#pullrequestreview-19678891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d92132c-a8c6-4b55-b46f-e763270a7867",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "why this check (and other checks below) are necessary? If `emitPos` can be undefined, can you please reflect this in its type?",
        "createdAt" : "2017-02-01T19:43:03Z",
        "updatedAt" : "2017-02-02T00:16:14Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "a5eb23f5-ddce-46b2-8e90-cd0bbebca6f6",
        "parentId" : "2d92132c-a8c6-4b55-b46f-e763270a7867",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Source map support is not currently exposed publicly, so a printer created through the public API would not be able to provide an `emitPos` callback. I'll amend the parameter to include `undefined`.",
        "createdAt" : "2017-02-01T22:54:48Z",
        "updatedAt" : "2017-02-02T00:16:14Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "984541316ac586bc9fdd385400b8858122a16baf",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +199,203 @@\n            // Leading comments are emitted at /*leading comment1 */space/*leading comment*/space\n            if (emitPos) emitPos(commentPos);\n            writeCommentRange(currentText, currentLineMap, writer, commentPos, commentEnd, newLine);\n            if (emitPos) emitPos(commentEnd);"
  },
  {
    "id" : "e61580ca-bbb6-495d-b0a8-e141b3ebdc98",
    "prId" : 11165,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11165#pullrequestreview-2061429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8dc623e-52dd-428f-a7ea-013a1fce3e9e",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "at first it is a bit confusing with `emitContext` and `context` which is a `TransformationContext`\n",
        "createdAt" : "2016-09-29T00:45:24Z",
        "updatedAt" : "2016-09-30T00:32:22Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "2e8ed370-6cec-4551-8a9e-0fd3378f85ec",
        "parentId" : "e8dc623e-52dd-428f-a7ea-013a1fce3e9e",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I'm open to a better name, but I feel this is the correct terminology.\n",
        "createdAt" : "2016-09-29T01:55:14Z",
        "updatedAt" : "2016-09-30T00:32:22Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "e151401333ca0d6aac1a3647ceb8cf5f552afb0a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +6,10 @@        reset(): void;\n        setSourceFile(sourceFile: SourceFile): void;\n        emitNodeWithComments(emitContext: EmitContext, node: Node, emitCallback: (emitContext: EmitContext, node: Node) => void): void;\n        emitBodyWithDetachedComments(node: Node, detachedRange: TextRange, emitCallback: (node: Node) => void): void;\n        emitTrailingCommentsOfPosition(pos: number): void;"
  },
  {
    "id" : "82cdea4f-6c6e-49e8-9bfa-ec315fd7cc21",
    "prId" : 8906,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3dc0c0f-03d3-4243-9d60-88a0fb1be64f",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "maybe it should save previous value of `disabled` and restore it later instead of unconditionally set it to `false`?\n",
        "createdAt" : "2016-06-01T03:26:48Z",
        "updatedAt" : "2016-06-01T22:10:08Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "3bfc22d1-0c8b-4008-9e75-41de614443ca",
        "parentId" : "a3dc0c0f-03d3-4243-9d60-88a0fb1be64f",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "There is no need, the first branch handles that case.\n",
        "createdAt" : "2016-06-01T04:34:47Z",
        "updatedAt" : "2016-06-01T22:10:08Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "507f0cc6-9b13-431c-9697-81ba3e731841",
        "parentId" : "a3dc0c0f-03d3-4243-9d60-88a0fb1be64f",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "got it\n",
        "createdAt" : "2016-06-01T18:30:34Z",
        "updatedAt" : "2016-06-01T22:10:08Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf9d2c4bebbeea5bcf581b5b27b2c8ae80b04930",
    "line" : 551,
    "diffHunk" : "@@ -1,1 +298,302 @@                disabled = true;\n                emitCallback(node);\n                disabled = false;\n            }\n        }"
  },
  {
    "id" : "8ca80274-5618-4b55-8f6f-2e89f9fcbeb9",
    "prId" : 8824,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c77923f1-61c5-4167-bf26-0420cbcd26fa",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "how this help with optimization?\n",
        "createdAt" : "2016-05-26T20:57:32Z",
        "updatedAt" : "2016-05-27T21:56:17Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "58960804-07d2-41bb-8bcf-dfe76b3a76d3",
        "parentId" : "c77923f1-61c5-4167-bf26-0420cbcd26fa",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "It does not. This is left over from gathering some individual performance metrics and just needs to be cleaned up.\n",
        "createdAt" : "2016-05-26T23:44:20Z",
        "updatedAt" : "2016-05-27T21:56:17Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "82e2531f6daad275e0bf5ba141856d224424cad5",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +131,135 @@                if (contextNode) {\n                    if (ignoreNodeCallback(contextNode)) {\n                        ignored = true;\n                    }\n                    else {"
  },
  {
    "id" : "70502596-2d12-4c45-954a-a872d4dd23df",
    "prId" : 7783,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1efea14-1bad-4cc4-91af-461ecf7a76cf",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Doesn't seem like you should necessarily be converting the range to a `Node` unless you're sure you have a `Node`\n",
        "createdAt" : "2016-04-03T16:32:12Z",
        "updatedAt" : "2016-04-04T18:04:15Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "2f278bc3-9db2-4ed4-afbe-e0381bc5ea99",
        "parentId" : "c1efea14-1bad-4cc4-91af-461ecf7a76cf",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "See line 8, the only overload that allows a callback requires a `Node`.\n",
        "createdAt" : "2016-04-04T17:47:02Z",
        "updatedAt" : "2016-04-04T18:04:15Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "02d2178e31a936b0f8654240c7728bae8ede3124",
    "line" : null,
    "diffHunk" : "@@ -1,1 +72,76 @@            function getLeadingComments(range: TextRange): CommentRange[];\n            function getLeadingComments(range: TextRange | Node, shouldSkipCommentsForNodeCallback?: (node: Node) => boolean) {\n                if (shouldSkipCommentsForNodeCallback && shouldSkipCommentsForNodeCallback(<Node>range)) {\n                    // If the node will not be emitted in JS, remove all the comments (normal,\n                    // pinned and `///`) associated with the node, unless it is a triple slash"
  }
]