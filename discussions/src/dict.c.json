[
  {
    "id" : "a1487cab-b771-4ba5-88f4-b0e91e3fdc61",
    "prId" : 7954,
    "prUrl" : "https://github.com/redis/redis/pull/7954#pullrequestreview-540344389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3ffc8c5-fd69-4db5-91cd-8857b2b19f97",
        "parentId" : null,
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "You forgot to change the comment \"we resize doubling the number of buckets\"\r\n\r\n```c\r\n/* If we reached the 1:1 ratio, and we are allowed to resize the hash\r\n     * table (global setting) or we should avoid it but the ratio between\r\n     * elements/buckets is over the \"safe\" threshold, we resize doubling\r\n     * the number of buckets. */\r\n```",
        "createdAt" : "2020-11-26T01:45:44Z",
        "updatedAt" : "2020-12-06T09:33:53Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "8b4da9dd-9d30-4856-84c2-665950e4b8a7",
        "parentId" : "f3ffc8c5-fd69-4db5-91cd-8857b2b19f97",
        "authorId" : "98e31153-705f-4299-a152-78c428055d23",
        "body" : "Hi @sundb Actually, before this commit, resizing dict is not expected, new hash table size may `*4` old table size,  oran has been explained https://github.com/redis/redis/pull/7954#issuecomment-725544359",
        "createdAt" : "2020-11-26T11:38:16Z",
        "updatedAt" : "2020-12-06T09:33:53Z",
        "lastEditedBy" : "98e31153-705f-4299-a152-78c428055d23",
        "tags" : [
        ]
      },
      {
        "id" : "cf555a26-801f-4379-a80f-3be0aa38bfef",
        "parentId" : "f3ffc8c5-fd69-4db5-91cd-8857b2b19f97",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "@ShooterIT You misunderstood, I meant to change comment \"we resize doubling the number of buckets.\" to \"we add 1 to the number of buckets\"",
        "createdAt" : "2020-11-26T12:18:18Z",
        "updatedAt" : "2020-12-06T09:33:53Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "de15251f-df32-41cd-b6d9-fb9a5f4fae0a",
        "parentId" : "f3ffc8c5-fd69-4db5-91cd-8857b2b19f97",
        "authorId" : "98e31153-705f-4299-a152-78c428055d23",
        "body" : "@sundb `used` is not the number of buckets.\r\nSince first check `used >= size` and we will call _dictNextPower(used+1) in `dictExpand`, new table size will be double of the number of buckets in most cases.",
        "createdAt" : "2020-11-27T16:48:23Z",
        "updatedAt" : "2020-12-06T09:33:53Z",
        "lastEditedBy" : "98e31153-705f-4299-a152-78c428055d23",
        "tags" : [
        ]
      },
      {
        "id" : "382713fe-806d-4cb7-8e4f-da5c0c14f7f2",
        "parentId" : "f3ffc8c5-fd69-4db5-91cd-8857b2b19f97",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "@ShooterIT So that's it, thank you.",
        "createdAt" : "2020-11-28T05:33:06Z",
        "updatedAt" : "2020-12-06T09:33:53Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "20d8a8e678e802cd8f14a4bd44e8540531bd46f7",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +980,984 @@        dictTypeExpandAllowed(d))\n    {\n        return dictExpand(d, d->ht[0].used + 1);\n    }\n    return DICT_OK;"
  },
  {
    "id" : "0a108693-010d-4cf8-911e-60b1a7a93ba0",
    "prId" : 9228,
    "prUrl" : "https://github.com/redis/redis/pull/9228#pullrequestreview-710347729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9483f7ac-815b-4e7b-9033-5bad201525df",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i suggested the CLZ opt twice:\r\nhttps://github.com/redis/redis/pull/2382\r\nhttps://github.com/redis/redis/pull/3833\r\nand got rejected.\r\n\r\nSalvatore believe that it makes the code less readable, and we did agree that due to the way it is used, there's no real impact on performance.\r\n\r\npersonally, i'm think it makes the code less readable",
        "createdAt" : "2021-07-18T11:39:27Z",
        "updatedAt" : "2021-07-18T11:42:40Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "83dfc29d-195b-4367-88cd-a8ca79be0dda",
        "parentId" : "9483f7ac-815b-4e7b-9033-5bad201525df",
        "authorId" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "body" : "Note that now we can use the instrinsic `__builtin_clzl` supported by both clang and gcc. It's definitely more efficient and arguably more readable than both antirez's and your code. In any case I used it here: https://github.com/yoav-steinberg/redis/blob/52596812e7e9b74f1ca63ad197ab30665198437b/src/server.c#L1748",
        "createdAt" : "2021-07-20T06:56:31Z",
        "updatedAt" : "2021-07-20T06:56:32Z",
        "lastEditedBy" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "tags" : [
        ]
      },
      {
        "id" : "78df4015-d5db-4a80-82de-01642f189ffd",
        "parentId" : "9483f7ac-815b-4e7b-9033-5bad201525df",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i think we may need a wrapper with the C fallback. not sure if redis isn't also used by some compiler that doesn't have that builtin.",
        "createdAt" : "2021-07-20T09:04:48Z",
        "updatedAt" : "2021-07-20T09:04:48Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9a8e10124fb76fc63b0f6c5fbf3f3ffb109b294",
    "line" : 499,
    "diffHunk" : "@@ -1,1 +1003,1007 @@}\n\n/* TODO: clz optimization */\n/* Our hash table capability is a power of two */\nstatic char _dictNextExp(unsigned long size)"
  }
]