[
  {
    "id" : "49288bcf-2b4a-4ba1-8d78-112579d5de89",
    "prId" : 9177,
    "prUrl" : "https://github.com/redis/redis/pull/9177#pullrequestreview-696198396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84edfe3b-ce14-445b-b93d-4039a0fb7fef",
        "parentId" : null,
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "This makes the function return a non-blocking socket on Linux and a blocking socket on other OSes.\r\n\r\nCan we do `anetNonBlock(NULL, fd)` and `anetCloexec(fd)` in the `#else` branch here, so we have the same socket flags here regardless of OS?",
        "createdAt" : "2021-06-30T13:13:12Z",
        "updatedAt" : "2021-06-30T13:20:10Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      },
      {
        "id" : "65b2d207-c914-425d-a86d-d2722767ff21",
        "parentId" : "84edfe3b-ce14-445b-b93d-4039a0fb7fef",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "good idea... it was bothering me too (that we have coupling between networking.c and anet.c, both use the same ifdef and the fact networking.c relies on some internal behavior of anet.c), but i was lazy and decided not to act on it..\r\ni'll make the change.",
        "createdAt" : "2021-06-30T13:57:47Z",
        "updatedAt" : "2021-06-30T13:57:47Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ae7e90084367f4e60d01d873acb7e798e6d75dd",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +504,508 @@#else\n        fd = accept(s,sa,len);\n#endif\n    } while(fd == -1 && errno == EINTR);\n    if (fd == -1) {"
  },
  {
    "id" : "0b2d9ab4-ced8-485b-8145-d3d78342592e",
    "prId" : 9177,
    "prUrl" : "https://github.com/redis/redis/pull/9177#pullrequestreview-696310003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3219ecf4-4a75-4e80-b860-4d9e9478cd90",
        "parentId" : null,
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "The cluster mode connection establishment also calls through here, so need to get updated. https://github.com/redis/redis/blob/6476c8e856f790bef24eacd62c10c2df54e33f14/src/cluster.c#L719",
        "createdAt" : "2021-06-30T15:02:04Z",
        "updatedAt" : "2021-06-30T15:06:23Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      },
      {
        "id" : "d2d8b7db-ee27-4e5d-a7a8-e647c82d4057",
        "parentId" : "3219ecf4-4a75-4e80-b860-4d9e9478cd90",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "thanks. done.",
        "createdAt" : "2021-06-30T15:25:21Z",
        "updatedAt" : "2021-06-30T15:25:22Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ae7e90084367f4e60d01d873acb7e798e6d75dd",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +495,499 @@/* Accept a connection and also make sure the socket is non-blocking, and CLOEXEC.\n * returns the new socket FD, or -1 on error. */\nstatic int anetGenericAccept(char *err, int s, struct sockaddr *sa, socklen_t *len) {\n    int fd;\n    do {"
  },
  {
    "id" : "ae7d5936-6cf7-4e0f-bc15-555bfdc9a6d3",
    "prId" : 9177,
    "prUrl" : "https://github.com/redis/redis/pull/9177#pullrequestreview-696487595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8081be1-cfbe-4eca-a73b-e05c9798f349",
        "parentId" : null,
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "I would put the comment on anetTCPAccept and anetUnixAccept since they are the ones that are expose into Redis, and have behavior changes.",
        "createdAt" : "2021-06-30T15:04:52Z",
        "updatedAt" : "2021-06-30T15:06:23Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      },
      {
        "id" : "aad7e306-cfa6-40a9-a18c-1e9802f9405a",
        "parentId" : "b8081be1-cfbe-4eca-a73b-e05c9798f349",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i thought about it and didn't wanna clone the comment.\r\nsince our comments are in the C file anyway, i thought that whoever comes looking for it, will find it here.\r\nbut if you still feel i better clone these two lines, let me know.",
        "createdAt" : "2021-06-30T15:21:51Z",
        "updatedAt" : "2021-06-30T15:21:51Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "bf9b1068-ae2a-4de7-bdde-c16b996daf6c",
        "parentId" : "b8081be1-cfbe-4eca-a73b-e05c9798f349",
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "We generally don't document functional contracts very well. It's very non-obvious that this function (as well as the two higher level functions) also set up the connection to be non-blocking and set CLOEXEC. I would probably put it  the documentation on all 3 so that it's clear, but it's not something I feel strongly about. ",
        "createdAt" : "2021-06-30T16:24:26Z",
        "updatedAt" : "2021-06-30T16:24:26Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      },
      {
        "id" : "6a4747ef-9b8f-4ff9-9262-62385881add3",
        "parentId" : "b8081be1-cfbe-4eca-a73b-e05c9798f349",
        "authorId" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "body" : "I agree with @madolson here, better document the contract where it's used even if it's duplicate.",
        "createdAt" : "2021-06-30T18:22:21Z",
        "updatedAt" : "2021-06-30T18:42:43Z",
        "lastEditedBy" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ae7e90084367f4e60d01d873acb7e798e6d75dd",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +494,498 @@\n/* Accept a connection and also make sure the socket is non-blocking, and CLOEXEC.\n * returns the new socket FD, or -1 on error. */\nstatic int anetGenericAccept(char *err, int s, struct sockaddr *sa, socklen_t *len) {\n    int fd;"
  },
  {
    "id" : "96a485bb-447f-43f4-8bf8-084ba74d4ee1",
    "prId" : 7913,
    "prUrl" : "https://github.com/redis/redis/pull/7913#pullrequestreview-514636649",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "508b4636-80d6-46fd-8b69-cb5a9f76d40d",
        "parentId" : null,
        "authorId" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "body" : "While at it, the safety of this function should probably improved by using `snprintf()` instead of `strncpy()` and making sure we always end up with a null terminator.",
        "createdAt" : "2020-10-22T09:21:04Z",
        "updatedAt" : "2020-10-22T11:46:09Z",
        "lastEditedBy" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "tags" : [
        ]
      },
      {
        "id" : "6193cf10-0514-4031-b115-5781405a7b14",
        "parentId" : "508b4636-80d6-46fd-8b69-cb5a9f76d40d",
        "authorId" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "body" : "done",
        "createdAt" : "2020-10-22T11:46:12Z",
        "updatedAt" : "2020-10-22T11:46:13Z",
        "lastEditedBy" : "f8924c9c-b0b5-4c00-9cb1-95a042d1c159",
        "tags" : [
        ]
      }
    ],
    "commit" : "2de52c958e38eeb9ad7a834192025d69bc0663ed",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +589,593 @@}\n\nint anetFdToString(int fd, char *ip, size_t ip_len, int *port, int fd_to_str_type) {\n    struct sockaddr_storage sa;\n    socklen_t salen = sizeof(sa);"
  }
]