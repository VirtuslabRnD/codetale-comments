[
  {
    "id" : "43c9183e-fe5e-4d86-9bd6-362696fd6879",
    "prId" : 11564,
    "prUrl" : "https://github.com/nodejs/node/pull/11564#pullrequestreview-23915581",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65375929-d8ec-408a-bb38-f6be02688b79",
        "parentId" : null,
        "authorId" : "4b71aeaa-5376-4bc0-be81-0ae8df38206e",
        "body" : "I assume the old `PropertyAttribute`-based API is used rather than the ES5 `PropertyDescriptor`-based one for ease of backporting?",
        "createdAt" : "2017-02-27T02:07:42Z",
        "updatedAt" : "2017-03-02T20:33:29Z",
        "lastEditedBy" : "4b71aeaa-5376-4bc0-be81-0ae8df38206e",
        "tags" : [
        ]
      },
      {
        "id" : "bc00e530-f80b-464d-a9fa-53c65a683e24",
        "parentId" : "65375929-d8ec-408a-bb38-f6be02688b79",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "I just copied from the `READONLY_PROPERTY` macro in src/node.cc.",
        "createdAt" : "2017-02-27T02:11:15Z",
        "updatedAt" : "2017-03-02T20:33:29Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "5e4e4199-48fe-4b21-9f4d-4fc9381b0c6f",
        "parentId" : "65375929-d8ec-408a-bb38-f6be02688b79",
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "You could leave out the ReadOnly flag entirely since it's only a bindings object property.",
        "createdAt" : "2017-02-27T05:40:03Z",
        "updatedAt" : "2017-03-02T20:33:29Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e05952a8a75af6df625415db612d3a9a1322682",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +146,150 @@    OneByteString(env->isolate(), \"pushValToArrayMax\"),\n    Integer::NewFromUnsigned(env->isolate(), NODE_PUSH_VAL_TO_ARRAY_MAX),\n    v8::ReadOnly).FromJust();\n\n  env->SetMethod(target, \"getHiddenValue\", GetHiddenValue);"
  },
  {
    "id" : "d306e608-80a5-4bfa-bf84-b0c8feb910ca",
    "prId" : 12254,
    "prUrl" : "https://github.com/nodejs/node/pull/12254#pullrequestreview-31482148",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0158470-579d-4a73-a6f1-80059c43077b",
        "parentId" : null,
        "authorId" : "446f9a36-6e19-4bf2-afdc-d39dc6db0d4c",
        "body" : "might it be better to use Object and name the properties? might be easier if we want to extend with additional metadata, and would allow the JavaScript to be de-coupled from the order of items in the array.",
        "createdAt" : "2017-04-07T02:12:09Z",
        "updatedAt" : "2017-04-08T18:09:24Z",
        "lastEditedBy" : "446f9a36-6e19-4bf2-afdc-d39dc6db0d4c",
        "tags" : [
        ]
      },
      {
        "id" : "86cf7fad-adf9-4b56-9a49-24777f7c50c2",
        "parentId" : "e0158470-579d-4a73-a6f1-80059c43077b",
        "authorId" : "4b71aeaa-5376-4bc0-be81-0ae8df38206e",
        "body" : "Besides the fact that this is simpler to implement, it is also the approach taken by the existing `GetProxyDetails`. Plus, I don't think it is very likely for promises to change its internal properties anytime soon.",
        "createdAt" : "2017-04-07T05:13:32Z",
        "updatedAt" : "2017-04-08T18:09:24Z",
        "lastEditedBy" : "4b71aeaa-5376-4bc0-be81-0ae8df38206e",
        "tags" : [
        ]
      }
    ],
    "commit" : "a37273c1e4b93ed048e1d45818fe6c525480b121",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +53,57 @@\n  Local<Promise> promise = args[0].As<Promise>();\n  Local<Array> ret = Array::New(isolate, 2);\n\n  int state = promise->State();"
  },
  {
    "id" : "badaa120-7060-43ea-af8f-ab04f4b976d5",
    "prId" : 12442,
    "prUrl" : "https://github.com/nodejs/node/pull/12442#pullrequestreview-33950010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bea6ce40-1d95-4521-86e2-eb33e58659d5",
        "parentId" : null,
        "authorId" : "4b71aeaa-5376-4bc0-be81-0ae8df38206e",
        "body" : "Is this function basically equivalent to passing a dummy function to the Promise constructor?",
        "createdAt" : "2017-04-16T18:00:43Z",
        "updatedAt" : "2017-05-09T13:02:10Z",
        "lastEditedBy" : "4b71aeaa-5376-4bc0-be81-0ae8df38206e",
        "tags" : [
        ]
      },
      {
        "id" : "a4a4e67d-cb99-4097-9c11-30c817a8183b",
        "parentId" : "bea6ce40-1d95-4521-86e2-eb33e58659d5",
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "I *think* so. It’s using V8s internal promise creation mechanism instead of the full Promise constructor … I would assume the latter is built upon the former, but I haven’t checked that. If you want, I can try to look it up.",
        "createdAt" : "2017-04-16T18:07:51Z",
        "updatedAt" : "2017-05-09T13:02:10Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      },
      {
        "id" : "16947fb4-81a8-4335-953e-e6c2503bdcfd",
        "parentId" : "bea6ce40-1d95-4521-86e2-eb33e58659d5",
        "authorId" : "7822a1bb-db68-40ef-9644-e2e3fde8700a",
        "body" : "This is internally implemented by basically calling `new Promise()` with no closure argument. However, the great thing is that, since you're using the V8 API, you can still resolve and reject it, even though no closures are allocated (because they won't leak).",
        "createdAt" : "2017-04-21T06:56:45Z",
        "updatedAt" : "2017-05-09T13:02:10Z",
        "lastEditedBy" : "7822a1bb-db68-40ef-9644-e2e3fde8700a",
        "tags" : [
        ]
      }
    ],
    "commit" : "faf6654ff75e0f275afddfd980387235c3ddf103",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +155,159 @@  if (!maybe_resolver.IsEmpty())\n    args.GetReturnValue().Set(maybe_resolver.ToLocalChecked());\n}\n\n"
  },
  {
    "id" : "72017e7e-748e-40a2-b072-dc576890fa4b",
    "prId" : 12442,
    "prUrl" : "https://github.com/nodejs/node/pull/12442#pullrequestreview-32949166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b13e544-b2a6-41f0-9b9b-353081e356be",
        "parentId" : null,
        "authorId" : "b5634520-1776-44d8-b06b-105c83374f81",
        "body" : "Nice, this looks better than the throwing to me. Thanks :)",
        "createdAt" : "2017-04-16T18:40:00Z",
        "updatedAt" : "2017-05-09T13:02:10Z",
        "lastEditedBy" : "b5634520-1776-44d8-b06b-105c83374f81",
        "tags" : [
        ]
      }
    ],
    "commit" : "faf6654ff75e0f275afddfd980387235c3ddf103",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +162,166 @@  Local<Value> promise = args[0];\n  CHECK(promise->IsPromise());\n  if (promise.As<Promise>()->State() != Promise::kPending) return;\n  Local<Promise::Resolver> resolver = promise.As<Promise::Resolver>();  // sic\n  Maybe<bool> ret = resolver->Resolve(context, args[1]);"
  },
  {
    "id" : "82c42ed1-e1e3-4f5a-86de-9b00e3d79bfb",
    "prId" : 12442,
    "prUrl" : "https://github.com/nodejs/node/pull/12442#pullrequestreview-34132220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef6edeb3-7ea3-4c02-ba2f-ce964e69eb62",
        "parentId" : null,
        "authorId" : "7822a1bb-db68-40ef-9644-e2e3fde8700a",
        "body" : "An alternative, which could avoid the jump to and from C++ here and in the constructor, would be to do the same using V8 extras. extras exposes `extrasUtils.resolvePromise` which does basically the same thing here.",
        "createdAt" : "2017-04-21T06:57:44Z",
        "updatedAt" : "2017-05-09T13:02:10Z",
        "lastEditedBy" : "7822a1bb-db68-40ef-9644-e2e3fde8700a",
        "tags" : [
        ]
      },
      {
        "id" : "34d0f3eb-68c7-401a-be5f-c9a059cbcc58",
        "parentId" : "ef6edeb3-7ea3-4c02-ba2f-ce964e69eb62",
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "Yea, but I’d say this doesn’t need to happen right now. It should be fine deferring that discussion until later (for example, it might be something we’d want to coordinate with node-chakracore etc.).",
        "createdAt" : "2017-04-21T22:04:30Z",
        "updatedAt" : "2017-05-09T13:02:10Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      }
    ],
    "commit" : "faf6654ff75e0f275afddfd980387235c3ddf103",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +164,168 @@  if (promise.As<Promise>()->State() != Promise::kPending) return;\n  Local<Promise::Resolver> resolver = promise.As<Promise::Resolver>();  // sic\n  Maybe<bool> ret = resolver->Resolve(context, args[1]);\n  args.GetReturnValue().Set(ret.FromMaybe(false));\n}"
  }
]