[
  {
    "id" : "a1d1848d-3ba8-4661-b15b-92c587cf7c94",
    "prId" : 9012,
    "prUrl" : "https://github.com/redis/redis/pull/9012#pullrequestreview-678425529",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "441eeaeb-fad1-49bc-90e5-b04ff09b5920",
        "parentId" : null,
        "authorId" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "body" : "The function's top comment is not updated with the new behavior/return codes.",
        "createdAt" : "2021-06-07T18:07:50Z",
        "updatedAt" : "2021-06-07T19:09:26Z",
        "lastEditedBy" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "tags" : [
        ]
      },
      {
        "id" : "ea4db964-b62d-4e4b-a3a1-0ad1842cc3df",
        "parentId" : "441eeaeb-fad1-49bc-90e5-b04ff09b5920",
        "authorId" : "7771fdb3-77a5-4020-a4d6-c5f249a2184d",
        "body" : "fixed",
        "createdAt" : "2021-06-08T12:03:11Z",
        "updatedAt" : "2021-06-08T12:03:12Z",
        "lastEditedBy" : "7771fdb3-77a5-4020-a4d6-c5f249a2184d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd98a07d84986a8826cb1b91e7f294063032575",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +763,767 @@    off_t valid_up_to = 0; /* Offset of latest well-formed command loaded. */\n    off_t valid_before_multi = 0; /* Offset before MULTI command loaded. */\n    int ret;\n\n    if (fp == NULL) {"
  },
  {
    "id" : "72a1910b-6df8-45ee-9d01-b759fa9730df",
    "prId" : 8975,
    "prUrl" : "https://github.com/redis/redis/pull/8975#pullrequestreview-670117304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8618e15f-cdac-47ee-8b0b-83d5d0a270eb",
        "parentId" : null,
        "authorId" : "98e31153-705f-4299-a152-78c428055d23",
        "body" : "hi @oranagra here, i should let you know, if we want to get aof rewrite buffer more accurate, we maybe use `zmalloc_size` to get every `aof_rewrite_buf_block`, but as you said, it costs much time, so I actually cumulate all `aof_rewrite_buf_blocks` zmalloc_usable_size, of course, they(zmalloc_size and zmalloc_usable_size) have no difference if allocator has MALLOC SIZE.",
        "createdAt" : "2021-05-27T12:30:11Z",
        "updatedAt" : "2021-05-27T12:38:09Z",
        "lastEditedBy" : "98e31153-705f-4299-a152-78c428055d23",
        "tags" : [
        ]
      }
    ],
    "commit" : "69344eaddd6d0ff7d192e8ac5b848a684ce8986c",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +98,102 @@ * we should also count all other fields(except 'buf') of aofrwblock and the\n * last block's free size. */\nunsigned long aofRewriteBufferMemoryUsage(void) {\n    unsigned long size = aofRewriteBufferSize();\n"
  },
  {
    "id" : "4df6c5f9-9497-4466-93c5-a8d70dcdebb1",
    "prId" : 8666,
    "prUrl" : "https://github.com/redis/redis/pull/8666#pullrequestreview-619480309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b190db81-e431-402d-9655-263ecac184d5",
        "parentId" : null,
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "Do you think it would be better to follow the original coding rules(without space between param)?",
        "createdAt" : "2021-03-22T01:32:35Z",
        "updatedAt" : "2021-03-22T01:32:38Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "969ea926-8c95-4fbc-b339-a19875d5cf74",
        "parentId" : "b190db81-e431-402d-9655-263ecac184d5",
        "authorId" : "923f0482-b8b2-486e-aea3-d56720913631",
        "body" : "I think leaving a space between the parameters makes the code more readable and less crammed. ",
        "createdAt" : "2021-03-22T04:33:56Z",
        "updatedAt" : "2021-03-22T04:33:57Z",
        "lastEditedBy" : "923f0482-b8b2-486e-aea3-d56720913631",
        "tags" : [
        ]
      },
      {
        "id" : "76df74c4-ccf2-4aea-b47a-2cc2d7cc44f0",
        "parentId" : "b190db81-e431-402d-9655-263ecac184d5",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "It's the style of Redis that function calls don't have spaces between arguments(@madolson reminded me).\r\nI used to be inclined to add spaces, just like you.",
        "createdAt" : "2021-03-22T05:22:25Z",
        "updatedAt" : "2021-03-22T05:22:25Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "6127ad99-bcaa-4bf7-b66e-8d34cd51d79d",
        "parentId" : "b190db81-e431-402d-9655-263ecac184d5",
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "I used to push on this, but no one does it consistently so I gave up.",
        "createdAt" : "2021-03-22T18:26:16Z",
        "updatedAt" : "2021-03-22T18:26:17Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      },
      {
        "id" : "dbba3ae1-b2be-444f-9b70-e21a95aed855",
        "parentId" : "b190db81-e431-402d-9655-263ecac184d5",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "as far as i can tell, the majority of the function calls in redis **do** have spaces, although also many don't.\r\ni wouldn't want to destroy the blame log by fixing that to be consistent, but if we already change that line, adding spaces seems like the right thing to me.",
        "createdAt" : "2021-03-24T09:14:37Z",
        "updatedAt" : "2021-03-24T09:14:38Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb9218cecd669b858c26100e6da1c7ec2a47bd70",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +219,223 @@        (long) server.child_pid);\n    if (kill(server.child_pid,SIGUSR1) != -1) {\n        while(waitpid(-1, &statloc, 0) != server.child_pid);\n    }\n    /* Reset the buffer accumulating changes while the child saves. */"
  },
  {
    "id" : "cbd83efb-779a-4900-9993-1a5a85b1926b",
    "prId" : 8419,
    "prUrl" : "https://github.com/redis/redis/pull/8419#pullrequestreview-625921921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edc00fc3-ebe9-4607-8bd6-299a1b31aae3",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "why do we want to log the last status? we're gonna start with a clean one anyway?",
        "createdAt" : "2021-03-24T09:00:49Z",
        "updatedAt" : "2021-04-01T07:08:32Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "880dcde7-0951-4416-92c6-c82ed8144639",
        "parentId" : "edc00fc3-ebe9-4607-8bd6-299a1b31aae3",
        "authorId" : "98e31153-705f-4299-a152-78c428055d23",
        "body" : "Just like the following `aof_last_write_status`, i am not sure we need",
        "createdAt" : "2021-03-25T06:38:31Z",
        "updatedAt" : "2021-04-01T07:08:32Z",
        "lastEditedBy" : "98e31153-705f-4299-a152-78c428055d23",
        "tags" : [
        ]
      },
      {
        "id" : "027e5474-253b-4fc4-beab-84eda640ed6b",
        "parentId" : "edc00fc3-ebe9-4607-8bd6-299a1b31aae3",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "well, i don't see why either of them is needed, but ok, no harm in one more log message on very rare cases.",
        "createdAt" : "2021-04-01T05:58:10Z",
        "updatedAt" : "2021-04-01T07:08:32Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "647363185b8bfd28f57c06bce8fe134895294630",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +302,306 @@        atomicSet(server.aof_bio_fsync_status,C_OK);\n    }\n\n    /* If AOF was in error state, we just ignore it and log the event. */\n    if (server.aof_last_write_status == C_ERR) {"
  },
  {
    "id" : "c6dadbd9-7dec-4031-95c5-0f3f4c18129f",
    "prId" : 8327,
    "prUrl" : "https://github.com/redis/redis/pull/8327#pullrequestreview-571991310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88a60523-13d6-4786-8892-36e6da2c5e42",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "this `if` heavily relies on the fact the order is known since the command vector is re-written in the command, and we know the index of `px`. i think that's bad.\r\nif we keep it this way, i think a comment is needed here to explain that, and also comment in setGenericCommand next to the argument rewriting, to mention that we have code here that relies on the order.",
        "createdAt" : "2021-01-19T13:03:29Z",
        "updatedAt" : "2021-01-26T05:24:15Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "78d1c9e8-5caf-45e1-919c-7c84c942b451",
        "parentId" : "88a60523-13d6-4786-8892-36e6da2c5e42",
        "authorId" : "c97141c3-9d37-4d7e-baf7-61a38708d727",
        "body" : "I added comment about the index, I tried to add the `for` loop but it had some issues when comparing the `millisecond` object with `strcasecmp`",
        "createdAt" : "2021-01-20T08:47:54Z",
        "updatedAt" : "2021-01-26T05:24:15Z",
        "lastEditedBy" : "c97141c3-9d37-4d7e-baf7-61a38708d727",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c7abe89c3ec8ed4f20976019914ba3cb513876e",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +601,605 @@        /* When SET is used with EX/PX argument setGenericCommand propagates them with PX millisecond argument.\n         * So since the command arguments are re-written there, we can rely here on the index of PX being 3. */\n        if (!strcasecmp(argv[3]->ptr, \"px\")) {\n            pxarg = argv[4];\n        }"
  },
  {
    "id" : "10247fe3-49f2-4ccd-a0ce-26667e19bee5",
    "prId" : 7919,
    "prUrl" : "https://github.com/redis/redis/pull/7919#pullrequestreview-511707031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12416918-539d-4f79-9bca-7b643fdf5f7e",
        "parentId" : null,
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "I saw that Oran was okay with this in the previous CR, but it seems very inconsistent to have multiple statements on the same line.  ",
        "createdAt" : "2020-10-16T02:32:43Z",
        "updatedAt" : "2020-10-16T02:32:44Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      },
      {
        "id" : "b1e961da-ebfe-4b98-9a9f-90e7775fa58a",
        "parentId" : "12416918-539d-4f79-9bca-7b643fdf5f7e",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "I generally don't even like code statements that change the code flow (return, goto, break, continue, etc) being at the same line with the `if`. \nHowever, when writing error handling code, I don't like it to consume too many lines and make it harder to read the actual code. So a boilerplate repatriation checking a condition and doing goto or return if each action fails, is ok with me to be on the same line with the action..\n\nRegarding multiple statements in the same line, as you can tell by defrag.c, I'm actually a big fan of these (even without curly braces (not possible in this case). \n\nSo with regards to the above two concerns, I actually prefer the way @hwware wrote it. \n\nHowever, I'm not necessarily the one who decides, and I think that 1) we should try to be consistent with the rest of the code in Redis, and 2) try to style each piece of code in a way that it's most readable (no strict rules), so a compromise between these two. \n\nwow.. So much text about a damn white space... LOL. ",
        "createdAt" : "2020-10-16T13:09:57Z",
        "updatedAt" : "2020-10-16T13:09:58Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "ccee7d9d-c510-407b-b18f-c76a849af3ba",
        "parentId" : "12416918-539d-4f79-9bca-7b643fdf5f7e",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "since there's already one of these in the code base, we need to decide if we can merge that one, or (considering the other one is recent), reformat both.\r\n\r\ni did a search in the project to see if this pattern was used elsewhere and found only two other cases (added by Salvatore a year ago):\r\n```c\r\nif (tio_debug) { printf(\"E\"); fflush(stdout); }\r\n```\r\ni suppose being a debug code that's rarely executed, he didn't want to pollute many lines with it.\r\nsimilarly, in our case, trivial error handling code.\r\npersonally i think we can keep using this pattern.",
        "createdAt" : "2020-10-19T12:29:36Z",
        "updatedAt" : "2020-10-19T12:29:36Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "668d897470284c1b2f3b25e6bab9d4410b11a94c",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1529,1533 @@    if (fflush(fp)) goto werr;\n    if (fsync(fileno(fp))) goto werr;\n    if (fclose(fp)) { fp = NULL; goto werr; }\n    fp = NULL;\n"
  },
  {
    "id" : "78522700-8f82-4890-af84-ca283db93581",
    "prId" : 7532,
    "prUrl" : "https://github.com/redis/redis/pull/7532#pullrequestreview-451337044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "342e9a19-a352-49a8-a1e5-b4524fe096ab",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "I don't like how the error handling changed that code from being short and easy to read to be bloated with error handling code.\r\n\r\ni see 3 options:\r\n1. use a single `if` with many `||` so we'll end up with just 6 lines of writes, followed by 3 lines of error handling.\r\n2. use 2 `goto` statements\r\n3. remove the newlines and do `if () {raxStop(); return 0;}` all in one line\r\n4. keep it like you did.\r\n\r\ni feel 1 is the best one, let me know if you see other options.",
        "createdAt" : "2020-07-20T06:51:24Z",
        "updatedAt" : "2020-07-20T13:44:39Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "4daf064ac3bd1f89a235c9ece0ec68ab6ed9e391",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1254,1258 @@                raxStop(&ri);\n                return 0;\n            }\n\n            /* Generate XCLAIMs for each consumer that happens to"
  }
]