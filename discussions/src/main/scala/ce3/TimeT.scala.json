[
  {
    "id" : "cb220593-7266-4801-9a6c-fcc7c85eb870",
    "prId" : 866,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/866#pullrequestreview-409575712",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7003f365-c641-4bf6-8b66-044d7d21079d",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "So TimeT is going into core? Are we going to use it for all time-based operations (so IO itself won't have any knowledge of time) or is it just going to be a tool for testing?",
        "createdAt" : "2020-05-11T01:36:13Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "57664d46-32e9-4bc5-b0d1-1bea6dfed5d6",
        "parentId" : "7003f365-c641-4bf6-8b66-044d7d21079d",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "`IO` is definitely going to have knowledge of time. :-)\r\n\r\n`TimeT` is intended to serve two purposes. First, it provides a free `Temporal` which allows us to test the laws deterministically (when composed with `PureConc`). Additionally, it provides a mechanism for mocking time in user tests. It probably would be more in `cats-effect-testkit` or something rather than in core itself, but you get the idea. It's more generally applicable than `PureConc` is.",
        "createdAt" : "2020-05-11T02:14:21Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "9b37dee6-2fd9-4213-a8ed-d3badb4eefda",
        "parentId" : "7003f365-c641-4bf6-8b66-044d7d21079d",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Okay, so if it's going to be used for tests, do we need the mutability? Could we get away without it without adding a lot of extra... stuff to handle the concurrency?",
        "createdAt" : "2020-05-11T02:24:20Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "bf92fe20-e12b-46f2-b3a3-af795a9d9eb2",
        "parentId" : "7003f365-c641-4bf6-8b66-044d7d21079d",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Well, what I mean by \"tests\" is \"not just tests in Cats Effect\". So `PureConc` is probably only ever useful in the CE tests. Maybe if people want to get fancy and test their libraries with multiple effect types, they could use it there, but that seems unlikely. `TimeT`, though, is *definitely* something that is useful in non-CE tests where the inner `F` is a proper production effect.\r\n\r\nAlso we would need the mutability *anyway* even just working with `PureConc`, since all the same problems apply. The only thing we wouldn't need is `@volatile` (and you can actually make a pretty tricky argument that we don't need it for production `IO`s either).",
        "createdAt" : "2020-05-11T14:45:13Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "834742d3-9bf4-4cac-9008-4ec8f188af60",
        "parentId" : "7003f365-c641-4bf6-8b66-044d7d21079d",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Sure, I'm aware that it'd be exposed to users. Still, as long as it's in testing I'd aim for simpler code and something harder to break if possible. I suppose we can get back to this when we have `Ref` and try to use it instead of the var :) ",
        "createdAt" : "2020-05-11T22:29:16Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc98d745673740f5a2bb1ffc67d2ea7516bbf8b0",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@ */\n\npackage ce3\n\nimport cats.{~>, Functor, Group, Monad, Monoid}"
  },
  {
    "id" : "33607a2d-efc2-4269-981e-308bdb901fe8",
    "prId" : 866,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/866#pullrequestreview-408821682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8070d7dd-4577-4e26-8e05-92eec4a9cff1",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "I'll trust you about that one...",
        "createdAt" : "2020-05-11T01:36:29Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "a00ef790-cb37-4daa-aa94-841544dcd202",
        "parentId" : "8070d7dd-4577-4e26-8e05-92eec4a9cff1",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Watch and it turns out I'm wrong in some very weird edge casesâ€¦",
        "createdAt" : "2020-05-11T02:14:42Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc98d745673740f5a2bb1ffc67d2ea7516bbf8b0",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +31,35 @@ * unique per-fiber. Thus, a volatile var is sufficient.\n */\nfinal class Time private[ce3] (@volatile private[ce3] var now: FiniteDuration) {\n  private[ce3] def fork(): Time =\n    new Time(now)"
  },
  {
    "id" : "aaa44f02-bf2f-44c1-8883-6e15bc3b64c2",
    "prId" : 866,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/866#pullrequestreview-408822087",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30954f5e-cc8e-4eb2-b056-b95994612add",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "I'd consider putting the methods that do non-trivial things (i.e. not just liftF / run but actually mutating the times) together so it's easier to distinguish them from the really pure ones.",
        "createdAt" : "2020-05-11T01:42:28Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "6c70c447-af4e-4008-b8df-a9aa4198f620",
        "parentId" : "30954f5e-cc8e-4eb2-b056-b95994612add",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Agreed",
        "createdAt" : "2020-05-11T02:16:30Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc98d745673740f5a2bb1ffc67d2ea7516bbf8b0",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +130,134 @@      }\n\n    def start[A](fa: TimeT[F, A]): TimeT[F, Fiber[TimeT[F, ?], E, A]] =\n      for {\n        time <- Kleisli.ask[F, Time]"
  }
]