[
  {
    "id" : "77fedbc2-7441-4345-9490-6bbfc2207407",
    "prId" : 866,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/866#pullrequestreview-408822530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3704618e-cf86-4368-a69f-65dc41c4f973",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Not sure if we need it, unless it's just here for completeness... the instance isn't used...\r\n\r\nBy the way, this file seems to compile for around 20 seconds ðŸ˜­",
        "createdAt" : "2020-05-11T01:51:36Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "406236c9-0ffc-456a-879c-0af406deed32",
        "parentId" : "3704618e-cf86-4368-a69f-65dc41c4f973",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Yeah we definitely don't need it.\r\n\r\nAlso yeah, I've leveraged type inference more than I *should* in this file and it's starting to cost. I want to go through and reorganize things a bit, which will also involve adding some proper ascriptions where they should have always been.",
        "createdAt" : "2020-05-11T02:18:18Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc98d745673740f5a2bb1ffc67d2ea7516bbf8b0",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +491,495 @@    }\n\n  implicit def groupPureConc[E, A: Group]: Group[PureConc[E, A]] =\n    new Group[PureConc[E, A]] {\n"
  },
  {
    "id" : "1cd7693c-16cc-4a8a-a569-bf3c9d5b4138",
    "prId" : 861,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/861#pullrequestreview-404652409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b3e80f0-ad9a-468c-a02b-9b6bb036c4a5",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Since Concurrent knows about Outcome, could `onCancel` be implemented there?",
        "createdAt" : "2020-05-03T19:34:44Z",
        "updatedAt" : "2020-05-03T19:38:27Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "070d133d-b1c1-48a3-bbd2-95d5fa872d39",
        "parentId" : "8b3e80f0-ad9a-468c-a02b-9b6bb036c4a5",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Ah but `Concurrent` *doesn't* know about `Bracket`. It can be implemented as implicit syntax via the companion though.",
        "createdAt" : "2020-05-03T19:44:41Z",
        "updatedAt" : "2020-05-03T19:44:41Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "4716855e-1d4f-4953-b722-23dbfe2ea0ab",
        "parentId" : "8b3e80f0-ad9a-468c-a02b-9b6bb036c4a5",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "ah, makes sense. ConcurrentBracket, then?",
        "createdAt" : "2020-05-03T19:49:51Z",
        "updatedAt" : "2020-05-03T19:49:52Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "aa7c7a54-1bb3-423b-bae7-19902a96db2d",
        "parentId" : "8b3e80f0-ad9a-468c-a02b-9b6bb036c4a5",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Well, `ConcurrentBracket` is an alias though, not a real type. The problem (maybe a problem, anyway) is that the split goes all the way down the hierarchy until you get to `Effect`/`Managed`. So for example, `Async` doesn't know about `Bracket` *either*, which is why `ConcurrentBracket` can't be a class.",
        "createdAt" : "2020-05-03T19:53:24Z",
        "updatedAt" : "2020-05-03T19:53:25Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "50b8f527-4fbd-4674-b362-4ffe44fa268b",
        "parentId" : "8b3e80f0-ad9a-468c-a02b-9b6bb036c4a5",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "hmm, I find it a bit strange that we have ConcurrentBracketLaws then. I was almost sure it's a trait... but I think I see what you're saying.",
        "createdAt" : "2020-05-03T20:01:27Z",
        "updatedAt" : "2020-05-03T20:01:28Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2be8da41a3c2d4a9125417d420a4b1e9b9c5330",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +222,226 @@        }\n\n      def onCancel[A](fa: PureConc[E, A], body: PureConc[E, Unit]): PureConc[E, A] =\n        onCase(fa) { case Outcome.Canceled => body }\n"
  },
  {
    "id" : "68e104f7-2c7f-4db3-ba00-e8f4df869b07",
    "prId" : 861,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/861#pullrequestreview-404651147",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1df0c38d-acee-4cc8-8178-fb802355a489",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Actually, why do we need to override it?",
        "createdAt" : "2020-05-03T19:38:23Z",
        "updatedAt" : "2020-05-03T19:38:27Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "e918a96e-419b-45a1-a339-60c98747f0e8",
        "parentId" : "1df0c38d-acee-4cc8-8178-fb802355a489",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Ah, I see, it's used in bracket :) ",
        "createdAt" : "2020-05-03T19:41:11Z",
        "updatedAt" : "2020-05-03T19:41:12Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "ae5753ed-a1de-4104-9335-2cb105661fa7",
        "parentId" : "1df0c38d-acee-4cc8-8178-fb802355a489",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Yeah this is another manifestation of the fact that `Bracket` would just be merged with `Concurrent` if `Region` didn't exist.",
        "createdAt" : "2020-05-03T19:45:15Z",
        "updatedAt" : "2020-05-03T19:45:15Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2be8da41a3c2d4a9125417d420a4b1e9b9c5330",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +225,229 @@        onCase(fa) { case Outcome.Canceled => body }\n\n      override def onCase[A](\n          fa: PureConc[E, A])(\n          pf: PartialFunction[Outcome[PureConc[E, ?], E, A], PureConc[E, Unit]])"
  },
  {
    "id" : "b0de325a-7a64-4947-803a-0ee9d015675f",
    "prId" : 855,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/855#pullrequestreview-404548092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27260352-9f7d-491f-b1da-f2c2e0c7796a",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "I should probably add a comment so that `OtherFiber` isn't confused with the result of the other fiber (it's really the whole fiber)",
        "createdAt" : "2020-05-02T17:59:51Z",
        "updatedAt" : "2020-05-02T17:59:52Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "3349dd497c8b5ad8edcc4ddc33e7caf07c0757e2",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +273,277 @@        def apply[L, OtherFiber](\n          that: PureConc[E, L],\n          getOtherFiber: PureConc[E, OtherFiber]\n        )(\n          toResult: (L, OtherFiber) => Result"
  },
  {
    "id" : "103fdddf-edf3-453b-b12d-533587454fa7",
    "prId" : 805,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/805#pullrequestreview-368962755",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b07d1425-48b8-4ed2-84e7-d0279c138222",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "I thought it's fixed now?",
        "createdAt" : "2020-03-02T18:06:22Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "ebc2ae2e-45bf-490e-9093-59c61db2a3df",
        "parentId" : "b07d1425-48b8-4ed2-84e7-d0279c138222",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "It is. I haven't yet updated but I should.",
        "createdAt" : "2020-03-02T21:04:47Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "7ff66a10-7fb8-4ce0-9e3b-836e813700ca",
        "parentId" : "b07d1425-48b8-4ed2-84e7-d0279c138222",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Updating to cats 2.1.1 and removing this implicit actually breaks the laws! I'm not entirely sure why yet.",
        "createdAt" : "2020-03-04T17:07:19Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "28ec09e1-6d1b-48ac-86b1-14ae6ee4852b",
        "parentId" : "b07d1425-48b8-4ed2-84e7-d0279c138222",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Oh, it's because 2.1.1 doesn't include my fix!",
        "createdAt" : "2020-03-04T17:08:56Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "81c052af94857a5947895b361034cf4c70772a6f",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +152,156 @@  }\n\n  // the one in Free is broken: typelevel/cats#3240\n  implicit def catsFreeMonadErrorForFreeT2[\n      S[_],"
  },
  {
    "id" : "cba5222c-f826-4a04-8d69-8f61f835509d",
    "prId" : 805,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/805#pullrequestreview-367548114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73bf2f8b-ce7f-423a-a12d-76a6986921c4",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Is `onCancel` meaningful outside `poll`? I was under the impression you'd listen for cancelation within poll:\r\n\r\n```scala\r\npoll(onCancel(use(a), ...))\r\n```",
        "createdAt" : "2020-03-02T18:07:35Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "99b855d9-c5d4-4c8e-aa29-419fcf40d8fa",
        "parentId" : "73bf2f8b-ce7f-423a-a12d-76a6986921c4",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Other way around! You want the `poll` around the thing to which you're listening, which is to say, the first argument. Putting the `poll` around the `onCancel` also works, but it's a bit less obvious how this interacts with the finalizer (it interacts *correctly*, but I wouldn't want to confuse anyone).",
        "createdAt" : "2020-03-02T21:06:38Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "086c59d0-f7ca-4cdd-8c60-a1502bcea888",
        "parentId" : "73bf2f8b-ce7f-423a-a12d-76a6986921c4",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "That's already confusing to me - I was under the impression cancelation can only hit you within `poll` and it could only be observable in it too... if both are possible, I'd rather catch inside if that's the semantics we want to have (it probably doesn't matter from a user's point of view)",
        "createdAt" : "2020-03-02T21:13:01Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "6ea61eb5-e7bd-4c90-8913-6fc08671d053",
        "parentId" : "73bf2f8b-ce7f-423a-a12d-76a6986921c4",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "So remember that `onCancel` takes two arguments, the first of which is the thing it is watching for cancelation. So in `onCancel(fa, fb)`, the cancelability of `fa` is the relevant thing. Now, that can be assured in this case by putting a `poll` around it (e.g. `onCancel(poll(fa), fb)`), which is exactly what we do here, or by putting a `poll` around the *whole thing*. Either one works.",
        "createdAt" : "2020-03-02T21:19:37Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "e9119dc0-c5da-4cd3-91e5-749b21a08fdc",
        "parentId" : "73bf2f8b-ce7f-423a-a12d-76a6986921c4",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Right, so `poll` makes it possible for `fa` to complete with a canceled Outcome. And if we have a canceled Outcome, we can do something in `onCancel`?",
        "createdAt" : "2020-03-02T21:21:32Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "26c2fe6a-4c70-434c-98bc-fdf13a44697f",
        "parentId" : "73bf2f8b-ce7f-423a-a12d-76a6986921c4",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Yep! Or at least, `poll` makes that possible so long as we're already in a scope where that's possible. Can't hard-guarantee it.",
        "createdAt" : "2020-03-02T21:39:34Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "9c4417f8-d84b-44b4-bc55-6ff5650a3bf6",
        "parentId" : "73bf2f8b-ce7f-423a-a12d-76a6986921c4",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Yes, exactly :)",
        "createdAt" : "2020-03-02T21:40:28Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "81c052af94857a5947895b361034cf4c70772a6f",
    "line" : 230,
    "diffHunk" : "@@ -1,1 +216,220 @@        uncancelable { poll =>\n          acquire flatMap { a =>\n            val finalized = onCancel(poll(use(a)), release(a, Outcome.Canceled))\n            val handled = finalized onError { case e => release(a, Outcome.Errored(e)).attempt.void }\n            handled.flatMap(b => release(a, Outcome.Completed(pure(b))).attempt.as(b))"
  },
  {
    "id" : "bf93ad2b-8a34-4eb0-ad9f-dfbedbd1ec6f",
    "prId" : 805,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/805#pullrequestreview-367534456",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ded81c0e-0438-410a-9256-a7462f593c23",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Why do we need to reimplement `onCase` instead of using the default impl based on bracketCase?",
        "createdAt" : "2020-03-02T18:14:14Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "0a05cc9c-3f41-4f1e-b69d-9efb7e0aad02",
        "parentId" : "ded81c0e-0438-410a-9256-a7462f593c23",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Because the default implementation based on `bracketCase` is based on `bracketCase`. :-) So there's a bit of chicken-or-egg issue here, because `bracketCase` isn't *really* really primitive, `onCase` and `uncancelable` are. If `Region` weren't a thing, then `Bracket` would just be part of `Concurrent` and `onCase` would be the abstract one. However, because `Region` exists, `Bracket` has to be its own thing and can't know about `uncancelable.` However, because `Bracket` cannot know about `uncancelable`, it is unable to implement a sound `bracketCase` in terms of `onCase` and any other primitive, meaning that, in `Bracket`, `bracketCase` needs to be primitive and `onCase` needs to be derived. Down in `Concurrent with Bracket` though, the inverse makes the most sense (since `uncancelable` exists).",
        "createdAt" : "2020-03-02T21:12:38Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "8a2a1774-e12b-45a0-98a5-71b339c05bf2",
        "parentId" : "ded81c0e-0438-410a-9256-a7462f593c23",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "uh, yeah, I didn't notice it was reused in bracketCase via onCancel...",
        "createdAt" : "2020-03-02T21:18:45Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "81c052af94857a5947895b361034cf4c70772a6f",
    "line" : 248,
    "diffHunk" : "@@ -1,1 +225,229 @@        onCase(fa, body)(Outcome.Canceled ==)\n\n      override def onCase[A](fa: PureConc[E, A], body: PureConc[E, Unit])(p: Outcome[PureConc[E, ?], E, A] => Boolean): PureConc[E, A] = {\n        def pbody(oc: Outcome[PureConc[E, ?], E, A]) =    // ...and Sherman\n          if (p(oc)) body.attempt.void else unit"
  },
  {
    "id" : "14aa494c-e357-46ac-a492-9210ac31184d",
    "prId" : 805,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/805#pullrequestreview-367532098",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7beace2d-790a-4f26-af9b-43661a9d804c",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "It'll take me a while to swallow this for :P",
        "createdAt" : "2020-03-02T19:19:20Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "137277a4-3fd1-46aa-8064-2d1669cfd237",
        "parentId" : "7beace2d-790a-4f26-af9b-43661a9d804c",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Yeah this one is chunky.",
        "createdAt" : "2020-03-02T21:14:47Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "81c052af94857a5947895b361034cf4c70772a6f",
    "line" : 308,
    "diffHunk" : "@@ -1,1 +281,285 @@          type Result = Either[(A, Fiber[PureConc[E, ?], E, B]), (Fiber[PureConc[E, ?], E, A], B)]\n\n          for {\n            results0 <- MVar.empty[PureConc[E, ?], Outcome[Id, E, Result]]\n            results = results0[PureConc[E, ?]]"
  }
]