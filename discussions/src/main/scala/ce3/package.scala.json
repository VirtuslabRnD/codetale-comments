[
  {
    "id" : "4bcc95f0-680c-43cc-89e3-3e1b6de5ac4e",
    "prId" : 873,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/873#pullrequestreview-414515788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74e7c905-74e7-45a0-8f2f-600a5fef9f43",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "So Sync and Async don't know they can be brackets... interesting.",
        "createdAt" : "2020-05-19T01:04:53Z",
        "updatedAt" : "2020-05-19T14:45:29Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "6d4da9ef-dda3-4e7a-99b1-8fd5e26d60e6",
        "parentId" : "74e7c905-74e7-45a0-8f2f-600a5fef9f43",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Yep! This is how we can have an `Async` for `Resource`.",
        "createdAt" : "2020-05-19T14:39:37Z",
        "updatedAt" : "2020-05-19T14:45:29Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1607fdc0639386b7341dbb1eb8db5bf11e27ba2",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +49,53 @@  }\n\n  type AsyncBracket[F[_]] = Async[F] with Bracket[F, Throwable]\n\n  object AsyncBracket {"
  },
  {
    "id" : "f29c8735-cfc2-4a14-90b0-ac2ff96336d6",
    "prId" : 866,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/866#pullrequestreview-409238884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "276d1e2d-53d6-4304-b12d-8149885cdf01",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "I feel super weird about having a mutable structure in Kleisli...",
        "createdAt" : "2020-05-11T01:38:24Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "4a54723e-d2ec-48e1-9420-f97484942098",
        "parentId" : "276d1e2d-53d6-4304-b12d-8149885cdf01",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Embrace the weird!\r\n\r\nThis is actually super-common in Haskell (using refs inside of `Kleisli` rather than `State`) and I used it here for exactly the same reason: `F` forms a `MonadError`, so I can't trust it to propagate state changes sanely. I do think we should hide this away more in a newtype so people can't expose `Time`, even though it is entirely private.",
        "createdAt" : "2020-05-11T02:16:16Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "db8b630e-485b-4a65-96b2-059fc2511ee3",
        "parentId" : "276d1e2d-53d6-4304-b12d-8149885cdf01",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "right, refs! That's probably what I want here ;) ",
        "createdAt" : "2020-05-11T02:24:59Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "80bf0214-ca74-4f95-b03b-0c1ffd4c1539",
        "parentId" : "276d1e2d-53d6-4304-b12d-8149885cdf01",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "> That's probably what I want here\r\n\r\nI think it's what we *all* want. :-)",
        "createdAt" : "2020-05-11T14:42:08Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc98d745673740f5a2bb1ffc67d2ea7516bbf8b0",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +46,50 @@  }\n\n  type TimeT[F[_], A] = Kleisli[F, Time, A]\n}"
  },
  {
    "id" : "b56040d1-3270-4c52-8883-960fa20b7a55",
    "prId" : 866,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/866#pullrequestreview-409238634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7964061d-a9b2-4cd8-8e6f-764c1b5826ba",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "`TemporalThrow`? That `E` doesn't really ring a Throwable bell for me",
        "createdAt" : "2020-05-11T01:44:50Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "2b4c9318-f44e-4d01-9597-83c32978823b",
        "parentId" : "7964061d-a9b2-4cd8-8e6f-764c1b5826ba",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Yeah I prefer `TemporalThrow` as well. It was just weird because we also have `TemporalBracket` and `TemporalRegion`.",
        "createdAt" : "2020-05-11T02:16:51Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "ed3b4de6-810d-4162-a820-3b40c1ec7997",
        "parentId" : "7964061d-a9b2-4cd8-8e6f-764c1b5826ba",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "`ThrowTemporal` is my other option...",
        "createdAt" : "2020-05-11T02:25:26Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "be1466a1-1772-4f83-910e-0f65cb654eeb",
        "parentId" : "7964061d-a9b2-4cd8-8e6f-764c1b5826ba",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Let's just go with `TemporalThrow` (and correspondingly, `ConcurrentThrow`, `BracketThrow`, and `RegionThrow`) and see if anyone complains.",
        "createdAt" : "2020-05-11T14:41:52Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc98d745673740f5a2bb1ffc67d2ea7516bbf8b0",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +32,36 @@  }\n\n  type TemporalE[F[_]] = Temporal[F, Throwable]\n\n  type TemporalBracket[F[_], E] = Temporal[F, E] with Bracket[F, E]"
  },
  {
    "id" : "465b7816-85e5-4873-b9c1-8aa99ad9c611",
    "prId" : 866,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/866#pullrequestreview-408822327",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5178024f-373b-4658-9dbd-f132e8ab40f5",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Random thought, we could probably get nice things by having e.g. `Region`'s and `Temporal`'s `apply` return the implicit without widening - `R.type`, sort of like shapeless's `the` or `summon` in Dotty. We would probably not need these anymore, since you'd get the specific type in scope anyway",
        "createdAt" : "2020-05-11T01:46:23Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "507ce245-fb3e-41a0-880d-916a405d0fbf",
        "parentId" : "5178024f-373b-4658-9dbd-f132e8ab40f5",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "`Concurrent` already does this! And I most definitely want it to apply to all of them.",
        "createdAt" : "2020-05-11T02:17:28Z",
        "updatedAt" : "2020-05-14T19:45:54Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc98d745673740f5a2bb1ffc67d2ea7516bbf8b0",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +43,47 @@\n  object TemporalRegion {\n    def apply[R[_[_], _], F[_], E](implicit R: TemporalRegion[R, F, E]): TemporalRegion[R, F, E] = R\n  }\n"
  }
]