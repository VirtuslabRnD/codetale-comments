[
  {
    "id" : "7f1a5d89-e168-40bb-9985-2693a6e40cbb",
    "prId" : 805,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/805#pullrequestreview-367535472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35f1ee19-33a8-4dcc-adc7-dec6647b371d",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "In the case of streaming types, this will be a single-element stream with an outcome that potentially has a stream of results?",
        "createdAt" : "2020-03-02T17:58:34Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "f6c5ab5f-f87c-4877-a503-0baf8d5e9b73",
        "parentId" : "35f1ee19-33a8-4dcc-adc7-dec6647b371d",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Yep! I believe so anyway. I haven't totally puzzled through how that fits together, but at the very least, that seems correct to me.",
        "createdAt" : "2020-03-02T21:02:02Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "2c637654-fe5d-49ac-b208-3bc1a7e9f085",
        "parentId" : "35f1ee19-33a8-4dcc-adc7-dec6647b371d",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "that's one option, although I think in fs2 you'd rather get something like what `attempt` gives you: `Stream(succ(...), succ(...), error(e))`",
        "createdAt" : "2020-03-02T21:03:36Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "1bcbb7ac-ba21-4a0b-99b5-2a4600afbeaf",
        "parentId" : "35f1ee19-33a8-4dcc-adc7-dec6647b371d",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "It feels like there's probably a law here which should relate these things. I haven't quite put my finger on it.",
        "createdAt" : "2020-03-02T21:20:08Z",
        "updatedAt" : "2020-03-04T21:10:15Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "81c052af94857a5947895b361034cf4c70772a6f",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +24,28 @@trait Fiber[F[_], E, A] {\n  def cancel: F[Unit]\n  def join: F[Outcome[F, E, A]]\n}\n"
  },
  {
    "id" : "81c5e5e2-95a6-4563-9cf6-3cf8096cdaad",
    "prId" : 738,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/738#pullrequestreview-343478141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ba6a632-e847-4aec-a800-d61678bf438f",
        "parentId" : null,
        "authorId" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "body" : "I really like this 👍 ",
        "createdAt" : "2020-01-15T19:50:21Z",
        "updatedAt" : "2020-01-15T19:50:21Z",
        "lastEditedBy" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6ef9870a7eac1edb4b78f7d856dd4dc0a2e9582",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +48,52 @@  //\n  // uncancelable(_ => canceled(a)) <-> pure(a)\n  // (canceled(a) >> never).start.void <-> pure(a).start.flatMap(_.cancel)\n  def canceled[A](fallback: A): F[A]\n"
  },
  {
    "id" : "8c00b2e2-a5e9-4acc-979d-155d10e68048",
    "prId" : 738,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/738#pullrequestreview-344136718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cd6dd47-a58e-48d2-88c4-c850b986d067",
        "parentId" : null,
        "authorId" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "body" : "Maybe this should be by-name?",
        "createdAt" : "2020-01-15T19:50:59Z",
        "updatedAt" : "2020-01-15T19:51:00Z",
        "lastEditedBy" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "tags" : [
        ]
      },
      {
        "id" : "913ce424-f0bd-42d4-8cdc-716c0e57f711",
        "parentId" : "4cd6dd47-a58e-48d2-88c4-c850b986d067",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "`pure` isn't. The idea here is basically that you're inserting a cancelation if not masked. `fallback` is what you get if you *are* masked. So it's exactly the same as the following (if we could push the `.start` et al *outside* whatever context we're in):\r\n\r\n```scala\r\npure(fallback).start.flatMap(_.cancel)\r\n```\r\n\r\n…with the guarantee that the `cancel` hits the bind either immediately before or after the `pure`. Making the argument by-name would mean that `canceled` is more analogous to `delay`, with the tighter bound that the cancel is checked *before* it runs. That seems like unnecessary added complexity.",
        "createdAt" : "2020-01-16T16:54:05Z",
        "updatedAt" : "2020-01-16T17:08:18Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "5e429bab-a0e4-4620-b350-11b001cf23f9",
        "parentId" : "4cd6dd47-a58e-48d2-88c4-c850b986d067",
        "authorId" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "body" : "I understand your sentiment, but I'm not really sure it has to be analogous to `delay` which is an FFI entry point and has totally different semantics. In this case it'd be simply about evaluation, staying as lazy as possible. ",
        "createdAt" : "2020-01-16T17:56:01Z",
        "updatedAt" : "2020-01-16T17:56:01Z",
        "lastEditedBy" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "tags" : [
        ]
      },
      {
        "id" : "06497c9a-6393-4473-9f77-4903bfcd8a16",
        "parentId" : "4cd6dd47-a58e-48d2-88c4-c850b986d067",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Cats very consistently avoids these kinds of things though in favor of `Eval`, except when almost straight-up mandatory (e.g. `ifM`). It also breaks the `pure`-related laws, since `pure` itself is eager. If you can show me a compelling example, I'm open to being convinced (a la `ifM`). :-) Absent a really compelling rationale for laziness here though, I'm strongly leaning towards keeping it eager, at the very least to maintain equivalence with `pure`.",
        "createdAt" : "2020-01-16T18:50:20Z",
        "updatedAt" : "2020-01-16T18:50:21Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6ef9870a7eac1edb4b78f7d856dd4dc0a2e9582",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +49,53 @@  // uncancelable(_ => canceled(a)) <-> pure(a)\n  // (canceled(a) >> never).start.void <-> pure(a).start.flatMap(_.cancel)\n  def canceled[A](fallback: A): F[A]\n\n  // produces an effect which never returns"
  },
  {
    "id" : "aaa1459d-7dce-4766-be2e-1b0d431b3baa",
    "prId" : 632,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/632#pullrequestreview-287746980",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "013f8294-dd30-4503-a237-19f163ad2809",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Bikeshed:\r\n\r\n- `yielding`\r\n- `yielded`\r\n- `yieldd` (just kidding)",
        "createdAt" : "2019-09-12T21:48:18Z",
        "updatedAt" : "2019-09-12T21:48:18Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "11a5bdd1-dc4b-4305-9326-a8a7a390446e",
        "parentId" : "013f8294-dd30-4503-a237-19f163ad2809",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "`yielded` seems like a fine choice... What are your thoughts on `surrender`?",
        "createdAt" : "2019-09-12T21:56:03Z",
        "updatedAt" : "2019-09-12T21:56:03Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "dd9e537b-37ec-4d27-a003-1ecfcf014c9d",
        "parentId" : "013f8294-dd30-4503-a237-19f163ad2809",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "LOL. `surrender` actually isn't bad. I think I kinda like `yielded` better, but I guess we should be consistent about active vs passive voice in these operators.",
        "createdAt" : "2019-09-12T21:59:52Z",
        "updatedAt" : "2019-09-12T21:59:52Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "addba42d-7f08-41c1-8176-71b94702df82",
        "parentId" : "013f8294-dd30-4503-a237-19f163ad2809",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "...or `fairnessBoundary` :)\r\n\r\nI like `surrender` though.",
        "createdAt" : "2019-09-12T22:06:46Z",
        "updatedAt" : "2019-09-12T22:06:46Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "151bb546-f7ac-4356-87e7-4585c27d73c4",
        "parentId" : "013f8294-dd30-4503-a237-19f163ad2809",
        "authorId" : "a680c99b-0d47-47f6-a175-cad1562111ac",
        "body" : "`abdicate` :D \r\n\r\nIMO it would be nice to have something close to `yield` to take advantage of connection with other ecosystems, it's even on wikipedia https://en.wikipedia.org/wiki/Yield_(multithreading)",
        "createdAt" : "2019-09-12T22:31:41Z",
        "updatedAt" : "2019-09-12T22:31:42Z",
        "lastEditedBy" : "a680c99b-0d47-47f6-a175-cad1562111ac",
        "tags" : [
        ]
      },
      {
        "id" : "9eb191df-ca18-4efa-bbc8-a70926c1ac6e",
        "parentId" : "013f8294-dd30-4503-a237-19f163ad2809",
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "Second using something close to `yield`, it's common terminology in the concurrency literature",
        "createdAt" : "2019-09-12T22:44:29Z",
        "updatedAt" : "2019-09-12T22:44:30Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "b9c651e1-d4ce-4559-8470-eb0dd1d86c84",
        "parentId" : "013f8294-dd30-4503-a237-19f163ad2809",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "> `abdicate` :D\r\n> \r\n> IMO it would be nice to have something close to `yield` to take advantage of connection with other ecosystems, it's even on wikipedia [en.wikipedia.org/wiki/Yield_(multithreading)](https://en.wikipedia.org/wiki/Yield_(multithreading))\r\n\r\nI'd use `abdicate` for #633 😂 \r\n\r\n> Second using something close to `yield`, it's common terminology in the concurrency literature\r\n\r\nOf course. It's sadly also taken as a keyword in two JVM languages...",
        "createdAt" : "2019-09-12T22:59:08Z",
        "updatedAt" : "2019-09-12T22:59:08Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "33472d90ea11884c0eaee823fee964096b6face7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +50,54 @@\n  // introduces a fairness boundary by yielding control to the underlying dispatcher\n  def yielding: F[Unit]\n\n  def racePair[A, B](fa: F[A], fb: F[B]): F[Either[(A, Fiber[F, E, B]), (Fiber[F, E, A], B)]]"
  }
]