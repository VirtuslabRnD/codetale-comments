[
  {
    "id" : "ed938df8-291b-4a86-aa5b-cb05bc931354",
    "prId" : 873,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/873#pullrequestreview-414551461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09cae199-d95c-4055-8094-0a2c6f8623ba",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "I really wonder how you're debugging diverging expansions in these...",
        "createdAt" : "2020-05-19T01:11:29Z",
        "updatedAt" : "2020-05-19T14:45:29Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "985321ee-6d99-4f1b-9bcc-de3dbaa21f95",
        "parentId" : "09cae199-d95c-4055-8094-0a2c6f8623ba",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Ah! That I can answer: I ignore the error. It seems that NSC just defaults to \"diverging implicit expansion\" whenever it's trying to resolve a zillion things and any of them fails. So I debug the errors by manually materializing things that I expect might be problematic until I find one that doesn't materialize, mostly because I haven't defined it. I've only found one case where I *really* had to help the compiler along (the `Tolerance` implicit).",
        "createdAt" : "2020-05-19T14:42:42Z",
        "updatedAt" : "2020-05-19T14:45:29Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "744c98cd-c920-4c60-89b8-ecb02b2082c2",
        "parentId" : "09cae199-d95c-4055-8094-0a2c6f8623ba",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Yeah, that's pretty much how I do it... and it hurts!",
        "createdAt" : "2020-05-19T15:13:36Z",
        "updatedAt" : "2020-05-19T15:13:36Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1607fdc0639386b7341dbb1eb8db5bf11e27ba2",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@  def asyncRegion[A: Arbitrary: Eq, B: Arbitrary: Eq, C: Arbitrary: Eq](tolerance: FiniteDuration)(\n    implicit\n      ArbRFA: Arbitrary[R[F, A]],\n      ArbFA: Arbitrary[F[A]],\n      ArbRFB: Arbitrary[R[F, B]],"
  }
]