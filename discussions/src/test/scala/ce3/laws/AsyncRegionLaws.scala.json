[
  {
    "id" : "043a18f9-c3c1-43f9-a10d-8e3111ea6efd",
    "prId" : 873,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/873#pullrequestreview-414550894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73be3311-d8a8-4430-871c-fcd849758193",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "I have a weird feeling this will need a more concrete type, eventually... but that's fine for now",
        "createdAt" : "2020-05-19T01:10:52Z",
        "updatedAt" : "2020-05-19T14:45:29Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "e0111a7e-c7bd-49b9-8ad3-71c30b36a132",
        "parentId" : "73be3311-d8a8-4430-871c-fcd849758193",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Oh you mean rather than the aliases? Technically we *could* build little shim traits which are concrete variants of things like `AsyncRegion`, but I'm not sure what we would gain.",
        "createdAt" : "2020-05-19T14:41:13Z",
        "updatedAt" : "2020-05-19T14:45:29Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "55c324ca-271e-4c6a-93b8-0ef518a9bd5e",
        "parentId" : "73be3311-d8a8-4430-871c-fcd849758193",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "I mostly meant using more specific types (aux pattern or with the type members provided), as sometimes we need to know these types outside to pass some typeclass instances (this happened in Resource with region laws)",
        "createdAt" : "2020-05-19T15:13:02Z",
        "updatedAt" : "2020-05-19T15:13:02Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1607fdc0639386b7341dbb1eb8db5bf11e27ba2",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@      F0: Async[R[F, ?]] with Region[R, F, Throwable],\n      B0: Bracket.Aux[F, Throwable, Outcome[R[F, ?], Throwable, ?]])\n      : AsyncRegionLaws[R, F] =\n    new AsyncRegionLaws[R, F] {\n      val F = F0"
  }
]