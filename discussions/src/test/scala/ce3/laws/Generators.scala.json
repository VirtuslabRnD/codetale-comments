[
  {
    "id" : "8f97564f-518c-458c-914c-c9d07e30c3b9",
    "prId" : 859,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/859#pullrequestreview-404651433",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecac7467-f1a9-44d1-9258-7167da0a80df",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Wouldn't this also be with Unit?",
        "createdAt" : "2020-05-03T18:56:21Z",
        "updatedAt" : "2020-05-03T18:56:21Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "7ac5a826-d4f2-4a83-ae8c-6005c0cc314c",
        "parentId" : "ecac7467-f1a9-44d1-9258-7167da0a80df",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "The generators all return `A` so they can be folded into the big `choose`. This is like, the one place where `canceled` producing `F[Unit]` was a bit weird, because the generator now produces `canceled.as(a)`.",
        "createdAt" : "2020-05-03T19:30:48Z",
        "updatedAt" : "2020-05-03T19:30:48Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "21078df9-411e-404a-8927-ed800a47adfa",
        "parentId" : "ecac7467-f1a9-44d1-9258-7167da0a80df",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "gotchu. I still wish there was a Nothing in the signature, but I guess Unit isn't that bad üòÖ ",
        "createdAt" : "2020-05-03T19:49:10Z",
        "updatedAt" : "2020-05-03T19:49:10Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c72de6d7b08174a184c6b73c1db3810cf164567",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +83,87 @@    genPureConc[E, A](depth).map(pc => F[E].uncancelable(_ => pc))\n\n  def genCanceled[E, A: Arbitrary]: Gen[PureConc[E, A]] =\n    arbitrary[A].map(F[E].canceled.as(_))\n"
  },
  {
    "id" : "206be5b8-bf5e-45f7-88d3-5c0fea358017",
    "prId" : 856,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/856#pullrequestreview-404668825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "522a8608-91c5-40f4-a068-3d865fd9d8f6",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "One relatively huge (in theory) problem is that if we ever need any more instances than Arbitrary / Cogen to generate a value of `F[A]`, we'll have to change all of this. But somehow I don't see that happening, at least not in Cats / CE type classes, as everything is usually polymorphic and the only implicits we need are for the `F` itself. Which is still something that doesn't usually happen in type classes but functions on concrete types.",
        "createdAt" : "2020-05-03T23:36:38Z",
        "updatedAt" : "2020-05-11T23:59:12Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "042544d3217c4d9e1d9a9b4e5e66933903e75402",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +46,50 @@  private def gen[A: Arbitrary: Cogen](depth: Int): Gen[F[A]] = {\n    val genK: GenK[F] = new GenK[F] {\n      def apply[B: Arbitrary: Cogen]: Gen[F[B]] = Gen.delay(gen(depth + 1))\n    }\n    "
  },
  {
    "id" : "4eef352f-5274-4ee0-b032-7bd5395df39d",
    "prId" : 856,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/856#pullrequestreview-410235525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53fca065-c468-42d9-a995-5a7d2f9870d8",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "üëç I wish scalacheck had this",
        "createdAt" : "2020-05-12T16:52:53Z",
        "updatedAt" : "2020-05-12T16:56:07Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "042544d3217c4d9e1d9a9b4e5e66933903e75402",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +27,31 @@import scala.collection.immutable.SortedMap\n\ntrait GenK[F[_]] {\n  def apply[A: Arbitrary: Cogen]: Gen[F[A]]\n}"
  },
  {
    "id" : "04200f56-32b4-4432-9642-5ade321787b9",
    "prId" : 856,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/856#pullrequestreview-410341830",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87e80fb5-88e6-4367-a16b-8002dc07f8ff",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "I'm starting to feel like this should be its own library. :-) I've wanted this type of functionality a *lot*, not just in the context of CE.",
        "createdAt" : "2020-05-12T16:54:27Z",
        "updatedAt" : "2020-05-12T16:56:07Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "68e3d710-dd94-42da-ae79-0c535298c619",
        "parentId" : "87e80fb5-88e6-4367-a16b-8002dc07f8ff",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "It should, let's just make this a test bed first and see what we might be missing :) ",
        "createdAt" : "2020-05-12T17:49:26Z",
        "updatedAt" : "2020-05-12T17:49:27Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "fd53be90-fce3-4f7f-a63e-19257352f927",
        "parentId" : "87e80fb5-88e6-4367-a16b-8002dc07f8ff",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Sounds perfect!",
        "createdAt" : "2020-05-12T19:08:38Z",
        "updatedAt" : "2020-05-12T19:08:38Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "042544d3217c4d9e1d9a9b4e5e66933903e75402",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +102,106 @@}\n\ntrait ApplicativeErrorGenerators[F[_], E] extends ApplicativeGenerators[F] {\n  implicit val arbitraryE: Arbitrary[E]\n  implicit val cogenE: Cogen[E]"
  }
]