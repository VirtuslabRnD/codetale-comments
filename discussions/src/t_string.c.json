[
  {
    "id" : "9194f702-d171-4da0-b912-178a2983c8ca",
    "prId" : 8474,
    "prUrl" : "https://github.com/redis/redis/pull/8474#pullrequestreview-586074733",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bde064d8-b744-4ebc-8527-22aed1ba6f75",
        "parentId" : null,
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "I think there was some discussion that expire could overflow during this multiplication. Might want to check it's still positive at the end.",
        "createdAt" : "2021-02-09T00:16:03Z",
        "updatedAt" : "2021-03-22T20:44:08Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      },
      {
        "id" : "d06aec7d-aca8-47e2-82eb-d84cd2e10d37",
        "parentId" : "bde064d8-b744-4ebc-8527-22aed1ba6f75",
        "authorId" : "a7523b65-8529-42c4-98e3-0da55c83b66a",
        "body" : "Good point. Done.",
        "createdAt" : "2021-02-09T01:29:09Z",
        "updatedAt" : "2021-03-22T20:44:08Z",
        "lastEditedBy" : "a7523b65-8529-42c4-98e3-0da55c83b66a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9b8f3af0c6718bb9ae7efb3835d41511c3cbb0e",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +155,159 @@    }\n\n    if (unit == UNIT_SECONDS) *milliseconds *= 1000;\n\n    if ((flags & OBJ_PX) || (flags & OBJ_EX)) {"
  },
  {
    "id" : "3c57e6bc-cd55-46a5-b7d0-f33a6509006e",
    "prId" : 8474,
    "prUrl" : "https://github.com/redis/redis/pull/8474#pullrequestreview-612431537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c7db21e-ed21-4ecf-a6d8-f0d79a517539",
        "parentId" : null,
        "authorId" : "923f0482-b8b2-486e-aea3-d56720913631",
        "body" : "nitpick: don't need to move this method call down from where it was for better code locality :)",
        "createdAt" : "2021-03-12T23:58:36Z",
        "updatedAt" : "2021-03-22T20:44:08Z",
        "lastEditedBy" : "923f0482-b8b2-486e-aea3-d56720913631",
        "tags" : [
        ]
      },
      {
        "id" : "ddfd6eda-4305-493a-be01-d5e213c676a5",
        "parentId" : "0c7db21e-ed21-4ecf-a6d8-f0d79a517539",
        "authorId" : "a7523b65-8529-42c4-98e3-0da55c83b66a",
        "body" : "all other `notifyKeyspaceEvent(NOTIFY_GENERIC,\"expire\"` invocations in other command processing funtions happen after command rewriting. I was trying to unify that. Examples:\r\n1. https://github.com/redis/redis/blob/92bde124caaedef0e1572765854b2deb9aa22a35/src/t_string.c#L387\r\n2. https://github.com/redis/redis/blob/92bde124caaedef0e1572765854b2deb9aa22a35/src/expire.c#L543",
        "createdAt" : "2021-03-15T16:58:55Z",
        "updatedAt" : "2021-03-22T20:44:08Z",
        "lastEditedBy" : "a7523b65-8529-42c4-98e3-0da55c83b66a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9b8f3af0c6718bb9ae7efb3835d41511c3cbb0e",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +104,108 @@        rewriteClientCommandVector(c, 5, shared.set, key, val, shared.pxat, milliseconds_obj);\n        decrRefCount(milliseconds_obj);\n        notifyKeyspaceEvent(NOTIFY_GENERIC,\"expire\",key,c->db->id);\n    }\n"
  },
  {
    "id" : "662e0240-dbcd-41ff-9604-24557721ea25",
    "prId" : 8327,
    "prUrl" : "https://github.com/redis/redis/pull/8327#pullrequestreview-570731013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2de42470-a91c-478b-be50-2d4e9ed2ac1f",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "please add a top comment that explains the inputs and outputs.",
        "createdAt" : "2021-01-18T19:31:41Z",
        "updatedAt" : "2021-01-26T05:24:15Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c7abe89c3ec8ed4f20976019914ba3cb513876e",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +166,170 @@ * EX/EXAT/PX/PXAT arguments. Unit is updated to millisecond if PX/PXAT is set.\n */\nint parseExtendedStringArgumentsOrReply(client *c, int *flags, int *unit, robj **expire, int command_type) {\n\n    int j = command_type == COMMAND_GET ? 2 : 3;"
  },
  {
    "id" : "1fe32b0c-5f62-449f-90cf-ef3798b863d0",
    "prId" : 8327,
    "prUrl" : "https://github.com/redis/redis/pull/8327#pullrequestreview-571188265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6c7f61c-3a95-4d82-b7e7-1ec24aa3bc5c",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "Ohh, i now realize that this function already had a top comment, it's just not glued to the top of the function.\r\nthe comment seems to be glued to the bottom of the previous function (missing blank line) rather than the next function.\r\ni think it should be moved to after the defines below.",
        "createdAt" : "2021-01-19T12:31:44Z",
        "updatedAt" : "2021-01-26T05:24:15Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c7abe89c3ec8ed4f20976019914ba3cb513876e",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +150,154 @@#define COMMAND_GET 0\n#define COMMAND_SET 1\n/*\n * The parseExtendedStringArgumentsOrReply() function performs the common validation for extended\n * string arguments used in SET and GET command."
  },
  {
    "id" : "d557d8ef-15ea-4633-9135-ccd7fb1df9a0",
    "prId" : 8327,
    "prUrl" : "https://github.com/redis/redis/pull/8327#pullrequestreview-575965965",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6aee0acb-2aba-4e15-8551-bc0119f229ae",
        "parentId" : null,
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "This can never fail right? We just got the item successfully, so we must be able to delete it then. I think a server assert on the delete and remove the if is cleaner. ",
        "createdAt" : "2021-01-26T02:38:42Z",
        "updatedAt" : "2021-01-26T05:24:15Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c7abe89c3ec8ed4f20976019914ba3cb513876e",
    "line" : 370,
    "diffHunk" : "@@ -1,1 +394,398 @@    int deleted = server.lazyfree_lazy_user_del ? dbAsyncDelete(c->db, c->argv[1]) :\n                  dbSyncDelete(c->db, c->argv[1]);\n    if (deleted) {\n        /* Propagate as DEL/UNLINK command */\n        robj *aux = server.lazyfree_lazy_user_del ? shared.unlink : shared.del;"
  },
  {
    "id" : "c0feb72e-d1fb-4e77-8ef0-87dae6598321",
    "prId" : 8287,
    "prUrl" : "https://github.com/redis/redis/pull/8287#pullrequestreview-564059888",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0085e20-c576-4e9a-9fe3-44e9fe09ef8d",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "this can back fire too.\r\nif the input was negative, multiplying it by 1000 can make it positive.\r\ni think the intent of verifying the input may be enough, but if we want to a hermetic check, we probably need a range check, or two negative checks.",
        "createdAt" : "2021-01-07T10:51:45Z",
        "updatedAt" : "2021-02-18T15:42:49Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "56482184-042a-46ab-bcab-80e43d11f91a",
        "parentId" : "a0085e20-c576-4e9a-9fe3-44e9fe09ef8d",
        "authorId" : "0c5d9044-067b-4cde-9567-8e40bae1497f",
        "body" : "I guess two negative checks are fine. wdyt?",
        "createdAt" : "2021-01-07T11:18:20Z",
        "updatedAt" : "2021-02-18T15:42:49Z",
        "lastEditedBy" : "0c5d9044-067b-4cde-9567-8e40bae1497f",
        "tags" : [
        ]
      },
      {
        "id" : "e350acdb-b4c6-420b-95e6-eb02018441f2",
        "parentId" : "a0085e20-c576-4e9a-9fe3-44e9fe09ef8d",
        "authorId" : "0c5d9044-067b-4cde-9567-8e40bae1497f",
        "body" : "Added additional negative check for overflow detection. Here's the result:\r\n```\r\n127.0.0.1:6379> SET A B EX -9999999999999999\r\n(error) ERR invalid expire time in set\r\n127.0.0.1:6379> SET A B EX 10000000000000000\r\n(error) ERR invalid expire time in set\r\n```",
        "createdAt" : "2021-01-08T07:49:46Z",
        "updatedAt" : "2021-02-18T15:42:49Z",
        "lastEditedBy" : "0c5d9044-067b-4cde-9567-8e40bae1497f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4f7ed11b44d59cb9cab29dd2c2f0b7c36b67ace",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +84,88 @@            return;\n        }\n        if (unit == UNIT_SECONDS) milliseconds *= 1000;\n        when = milliseconds;\n        if ((flags & OBJ_PX) || (flags & OBJ_EX))"
  },
  {
    "id" : "9d3ab8e2-56bf-44ed-879d-e25a5d578e5e",
    "prId" : 7957,
    "prUrl" : "https://github.com/redis/redis/pull/7957#pullrequestreview-517365450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e4333aa-f3ef-4c7c-a7b4-e576a96f1b64",
        "parentId" : null,
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "A minor comment, redis flags usually can be duplicated. So SET A B GET GET (More likely a typo like SET A B GET EX 5 GET) is valid, but will get replicated as a SET A B GET. ",
        "createdAt" : "2020-10-26T18:11:10Z",
        "updatedAt" : "2020-10-27T06:05:15Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      },
      {
        "id" : "f51296e6-e021-4514-b7d9-2eb732fb4e8d",
        "parentId" : "4e4333aa-f3ef-4c7c-a7b4-e576a96f1b64",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "good catch. i'm guessing we may be ok to let it slide (the concern about not replicating the GET is not that important).\r\nBut let me try to fix it and see how much uglier it makes the code.\r\none option is to allocate the argv and accumulate to it right at the top of the function (don't like it), and the other option is to do another string matching check inside the loop here. i think i'll take the second one.",
        "createdAt" : "2020-10-27T05:52:37Z",
        "updatedAt" : "2020-10-27T06:05:15Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fd592c9dd4e93e640efda8c4016037ffb5b4f65",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +165,169 @@    if (flags & OBJ_SET_GET) {\n        int argc = 0;\n        robj **argv = zmalloc((c->argc-1)*sizeof(robj*));\n        for (j=0; j < c->argc; j++) {\n            char *a = c->argv[j]->ptr;"
  },
  {
    "id" : "84f278bc-6e4a-4c8c-9ea0-df4a9be00fa7",
    "prId" : 7852,
    "prUrl" : "https://github.com/redis/redis/pull/7852#pullrequestreview-498826790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72eacf53-e12d-40bd-ab46-e36d764cb4f4",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i think the right thing would be **not** to avoid setting the flag, and then check for conflicting types at the end and responding with syntax error.",
        "createdAt" : "2020-09-28T07:42:23Z",
        "updatedAt" : "2020-09-29T20:37:39Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "557de8d8-f956-4659-9bf7-84ee08613d14",
        "parentId" : "72eacf53-e12d-40bd-ab46-e36d764cb4f4",
        "authorId" : "5212bd1e-3b2d-4374-bcd5-b1deb62abc58",
        "body" : "The `nx`, `xx` and `ex` parameters are using the same approach of not setting the flag:\r\nhttps://github.com/redis/redis/blob/unstable/src/t_string.c#L109\r\nhttps://github.com/redis/redis/blob/unstable/src/t_string.c#L114\r\nhttps://github.com/redis/redis/blob/unstable/src/t_string.c#L123\r\n\r\nAlso using the `GET` parameter with `NX` parameter will result in a syntax error, as tested by this test: https://github.com/redis/redis/pull/7852/files#diff-b8aa159a8e8eaff88807628299c63f05R408",
        "createdAt" : "2020-09-29T17:41:22Z",
        "updatedAt" : "2020-09-29T20:37:39Z",
        "lastEditedBy" : "5212bd1e-3b2d-4374-bcd5-b1deb62abc58",
        "tags" : [
        ]
      },
      {
        "id" : "3251d157-a3e3-44cf-85bd-4ccad8c4ff55",
        "parentId" : "72eacf53-e12d-40bd-ab46-e36d764cb4f4",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "ohh, i get it. by not entering this `if` it reaches the final `else` and returns an error.\r\nmaybe it's indeed better than setting multiple flags and then checking for collisions...\r\nmaybe not... but it's already like that and it works, so let's keep it.",
        "createdAt" : "2020-09-29T19:49:26Z",
        "updatedAt" : "2020-09-29T20:37:39Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "6094b42a9db7ff2e38d919aca071fe0aacf6ae97",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +115,119 @@        if ((a[0] == 'n' || a[0] == 'N') &&\n            (a[1] == 'x' || a[1] == 'X') && a[2] == '\\0' &&\n            !(flags & OBJ_SET_XX) && !(flags & OBJ_SET_GET))\n        {\n            flags |= OBJ_SET_NX;"
  }
]