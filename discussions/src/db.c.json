[
  {
    "id" : "a40b2a98-668b-43fa-914c-66d56bc7f8bd",
    "prId" : 8108,
    "prUrl" : "https://github.com/redis/redis/pull/8108#pullrequestreview-542569343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3464183-7b85-46bc-be2a-d90784ac7085",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "```suggestion\r\n/* Store a backup of the database for later use, and put an empty one\r\n * instead of it. */\r\ndbBackup *backupDb(void) {\r\n```",
        "createdAt" : "2020-12-02T07:59:50Z",
        "updatedAt" : "2020-12-02T11:39:40Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "a09917202d1d21c324090fd3c513b77b3e118446",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +457,461 @@/* Store a backup of the database for later use, and put an empty one\n * instead of it. */\ndbBackup *backupDb(void) {\n    dbBackup *backup = zmalloc(sizeof(dbBackup));\n"
  },
  {
    "id" : "3f2196bb-94a2-4530-b152-99d7461e7e51",
    "prId" : 8108,
    "prUrl" : "https://github.com/redis/redis/pull/8108#pullrequestreview-542569343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70028ae9-5fb2-4977-aaf6-076c8dfe6976",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "```suggestion\r\n/* Discard a previously created backup, this can be slow (similar to FLUSHALL)\r\n * Arguments are similar to the ones of emptyDb, see EMPTYDB_ flags. */\r\nvoid discardDbBackup(dbBackup *buckup, int flags, void(callback)(void*)) {\r\n```",
        "createdAt" : "2020-12-02T08:02:02Z",
        "updatedAt" : "2020-12-02T11:39:40Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "a09917202d1d21c324090fd3c513b77b3e118446",
    "line" : 176,
    "diffHunk" : "@@ -1,1 +483,487 @@/* Discard a previously created backup, this can be slow (similar to FLUSHALL)\n * Arguments are similar to the ones of emptyDb, see EMPTYDB_ flags. */\nvoid discardDbBackup(dbBackup *buckup, int flags, void(callback)(void*)) {\n    int async = (flags & EMPTYDB_ASYNC);\n"
  },
  {
    "id" : "09686bf2-6ad4-4c9f-a6ba-9c260b65e1a9",
    "prId" : 8108,
    "prUrl" : "https://github.com/redis/redis/pull/8108#pullrequestreview-542569343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "269d25f1-a7df-4682-b4ab-a5fcd6ef6642",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "```suggestion\r\n/* Restore the previously created backup (discarding what currently resides\r\n * in the db).\r\n * This function should be called after the current contents of the database\r\n * was emptied with a previous call to emptyDb (possibly using the async mode). */\r\nvoid restoreDbBackup(dbBackup *buckup) {\r\n```",
        "createdAt" : "2020-12-02T08:05:39Z",
        "updatedAt" : "2020-12-02T11:39:40Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "a09917202d1d21c324090fd3c513b77b3e118446",
    "line" : 206,
    "diffHunk" : "@@ -1,1 +505,509 @@ * This function should be called after the current contents of the database\n * was emptied with a previous call to emptyDb (possibly using the async mode). */\nvoid restoreDbBackup(dbBackup *buckup) {\n    /* Restore main DBs. */\n    for (int i=0; i<server.dbnum; i++) {"
  },
  {
    "id" : "3361329c-4a3f-4f10-9a16-c2bd473ef161",
    "prId" : 8108,
    "prUrl" : "https://github.com/redis/redis/pull/8108#pullrequestreview-542754476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89cf8e18-2f4d-4dbf-9528-18073ae3721b",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "maybe we wanna put here an assertion that these are indeed empty?\r\notherwise, if someone forgets to call emptyDb, they can either block or leak.\r\np.s. there's some inefficiency here (emptyDb creates a dict that we immediately release here), but i suppose that's not a real concern in this context.",
        "createdAt" : "2020-12-02T08:25:23Z",
        "updatedAt" : "2020-12-02T11:39:40Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "e566d40e-f191-4753-bfac-71896bdac095",
        "parentId" : "89cf8e18-2f4d-4dbf-9528-18073ae3721b",
        "authorId" : "98e31153-705f-4299-a152-78c428055d23",
        "body" : "I add assertions that can help us find problems earlier, and you also add comments that we should call emptyDb firstly.",
        "createdAt" : "2020-12-02T11:44:38Z",
        "updatedAt" : "2020-12-02T11:44:38Z",
        "lastEditedBy" : "98e31153-705f-4299-a152-78c428055d23",
        "tags" : [
        ]
      }
    ],
    "commit" : "a09917202d1d21c324090fd3c513b77b3e118446",
    "line" : 212,
    "diffHunk" : "@@ -1,1 +511,515 @@        serverAssert(dictSize(server.db[i].expires) == 0);\n        dictRelease(server.db[i].dict);\n        dictRelease(server.db[i].expires);\n        server.db[i] = buckup->dbarray[i];\n    }"
  },
  {
    "id" : "6d083d37-de48-47bf-a518-adc9e33a0748",
    "prId" : 8085,
    "prUrl" : "https://github.com/redis/redis/pull/8085#pullrequestreview-538107283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19d40420-51c9-4427-bcd3-72c707d09ca3",
        "parentId" : null,
        "authorId" : "98e31153-705f-4299-a152-78c428055d23",
        "body" : "I am not sure we should do that.\r\n\r\nFor error message, I think we should respect before.",
        "createdAt" : "2020-11-24T12:13:24Z",
        "updatedAt" : "2020-11-24T13:12:25Z",
        "lastEditedBy" : "98e31153-705f-4299-a152-78c428055d23",
        "tags" : [
        ]
      },
      {
        "id" : "0e98767a-b5c1-44b0-b4ba-3ff5e6f9eced",
        "parentId" : "19d40420-51c9-4427-bcd3-72c707d09ca3",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "I think the previous error message was wrong, if I pass a non-number and the error is \"invalid DB index\", I think it should explicitly tell the non-number. You can see the changes I made to the unittest.",
        "createdAt" : "2020-11-24T12:27:30Z",
        "updatedAt" : "2020-11-24T13:12:25Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "cd747655-ae57-40ba-924c-c6680c47476e",
        "parentId" : "19d40420-51c9-4427-bcd3-72c707d09ca3",
        "authorId" : "98e31153-705f-4299-a152-78c428055d23",
        "body" : "Yes, it seems you are right",
        "createdAt" : "2020-11-24T12:32:35Z",
        "updatedAt" : "2020-11-24T13:12:25Z",
        "lastEditedBy" : "98e31153-705f-4299-a152-78c428055d23",
        "tags" : [
        ]
      },
      {
        "id" : "fde696f4-dc5f-4a24-8457-8c45f0871b94",
        "parentId" : "19d40420-51c9-4427-bcd3-72c707d09ca3",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "the changes to the error messages are in some way breaking backwards compatibility, so although they are better, we might want to avoid that.\r\n\r\non the other hand, these errors are on invalid use, not a runtime error like type mismatch, so maybe there's no application that actually relies on matching these strings.",
        "createdAt" : "2020-11-24T19:35:23Z",
        "updatedAt" : "2020-11-24T19:35:24Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "7071b7e5-604d-4e2f-9d7f-4bc1221ee893",
        "parentId" : "19d40420-51c9-4427-bcd3-72c707d09ca3",
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "I think as long as we emit the same error type, the actual wording is okay. ",
        "createdAt" : "2020-11-24T21:21:59Z",
        "updatedAt" : "2020-11-24T21:21:59Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      },
      {
        "id" : "b2532c8a-1393-4e92-b21f-c332a0219cf8",
        "parentId" : "19d40420-51c9-4427-bcd3-72c707d09ca3",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "@oranagra I think the original error message didn't represent the error message very well, and while it's not backwards compatible, I think it's worth doing in the long run, and is much more user friendly!",
        "createdAt" : "2020-11-25T02:17:11Z",
        "updatedAt" : "2020-11-25T02:17:12Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b971e02f761d594dbd50eb3325c0b85e1c36b3d",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +600,604 @@    int id;\n\n    if (getIntFromObjectOrReply(c, c->argv[1], &id, NULL) != C_OK)\n        return;\n"
  },
  {
    "id" : "0de3caf0-0efe-409d-b565-9e76935bd2d8",
    "prId" : 7953,
    "prUrl" : "https://github.com/redis/redis/pull/7953#pullrequestreview-518238530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65e2078c-8686-4713-b8b2-9742e261a249",
        "parentId" : null,
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "Would prefer to error instead of silently ignoring bad arguments. ",
        "createdAt" : "2020-10-28T00:28:04Z",
        "updatedAt" : "2020-11-12T01:30:52Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a562f6c7fdf818836d4d9c60a34421a0fbbcc95",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +1103,1107 @@            addReply(c, shared.syntaxerr);\n            return;\n        }\n    }\n"
  },
  {
    "id" : "0a49e33e-b610-4c55-b278-fe2d8eae64ce",
    "prId" : 7953,
    "prUrl" : "https://github.com/redis/redis/pull/7953#pullrequestreview-518651434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c91d271d-2865-45db-b71f-b1dd761b543e",
        "parentId" : null,
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "Not sure how I feel about this specifically, but we maybe should retain the LRU information. We could also document the fact we just don't do that. ",
        "createdAt" : "2020-10-28T00:47:18Z",
        "updatedAt" : "2020-11-12T01:30:52Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      },
      {
        "id" : "b7273619-62fc-42f9-923e-d172c35f934b",
        "parentId" : "c91d271d-2865-45db-b71f-b1dd761b543e",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "we recently made an effort to replace many of the dbDelete+dbAdd pairs with setKey (see SUNIONSTORE and alike).\r\nThe difference is that `setKey` retains the LRU of the destination key.\r\n\r\nHowever, my above note is actually unrelated since we're talking of the LRU of the source key.\r\nfrom what i can tell, both MOVE and RENAME, retain the LRU of the source key, so i'm guessing COPY should do the same?\r\n\r\nOr if we consider that a new object (unlike MOVE and RENAME), we should behave similarly to RESTORE REPLACE (create a fresh new key)?\r\nor maybe this is in some way similar to SUNIONSTORE being called with one input (clones a set and keeps the destination LRU)?\r\n\r\n@redis/core-team @guybe7 please share your thoughts. (i'm leaning towards the RESTORE REPLACE behavior)",
        "createdAt" : "2020-10-28T08:16:33Z",
        "updatedAt" : "2020-11-12T01:30:52Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "1104634c-9e68-44c5-ad37-46a12f0d7a85",
        "parentId" : "c91d271d-2865-45db-b71f-b1dd761b543e",
        "authorId" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "body" : "i vote for:\r\nsrc's LRU should remain unchanged (like MOVE)\r\ndst's LRU should be changed (like RESTORE REPLACE)",
        "createdAt" : "2020-10-28T13:21:36Z",
        "updatedAt" : "2020-11-12T01:30:52Z",
        "lastEditedBy" : "7402f6bd-2c90-4674-a864-35e134c36574",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a562f6c7fdf818836d4d9c60a34421a0fbbcc95",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +1170,1174 @@\n    server.dirty++;\n    addReply(c,shared.cone);\n}\n"
  },
  {
    "id" : "5404c749-cc4e-4b7f-a46d-b321bfa39e36",
    "prId" : 7953,
    "prUrl" : "https://github.com/redis/redis/pull/7953#pullrequestreview-528249164",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd598922-2806-4952-95f2-46ce6e04d943",
        "parentId" : null,
        "authorId" : "99372f0e-10c0-44d7-a1cc-8d4d027b3fa8",
        "body" : "Ref: the `REPLACE` logic in `RESTORE`\r\n\r\n```suggestion\r\n    if (delete && dbDelete(dst,newkey)) {\r\n        notifyKeyspaceEvent(NOTIFY_GENERIC,\"del\",c->argv[2],dst->id);\r\n    }\r\n```",
        "createdAt" : "2020-11-10T18:50:09Z",
        "updatedAt" : "2020-11-12T01:30:52Z",
        "lastEditedBy" : "99372f0e-10c0-44d7-a1cc-8d4d027b3fa8",
        "tags" : [
        ]
      },
      {
        "id" : "fe6ecdd1-6b78-4609-b390-e1c9a9775d61",
        "parentId" : "bd598922-2806-4952-95f2-46ce6e04d943",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "@itamarhaber are you sure?\r\nthe \"del\" notification in restore is only in case the new key is expired, and restore deleted the old key.\r\nit's something i recently copied from EXPIREAT (when ttl is in the past).\r\n\r\nin the case restore succeeds it only does:\r\n```\r\n    notifyKeyspaceEvent(NOTIFY_GENERIC,\"restore\",key,c->db->id);\r\n```\r\n\r\ntaking another example, SINTERSTORE it does:\r\n```\r\n   notifyKeyspaceEvent(NOTIFY_SET,\"sinterstore\", dstkey,c->db->id);\r\n```\r\nor (only in case a key was deleted, and the stored key is empty):\r\n```\r\n   notifyKeyspaceEvent(NOTIFY_GENERIC,\"del\", dstkey,c->db->id);\r\n```\r\n\r\nso i think in this case we just want the \"copy_to\" notification, not the \"del\" one\r\n",
        "createdAt" : "2020-11-11T12:52:53Z",
        "updatedAt" : "2020-11-12T01:30:52Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "b6d52746-bf4f-41a0-b7e4-3e4dc4ab8b14",
        "parentId" : "bd598922-2806-4952-95f2-46ce6e04d943",
        "authorId" : "99372f0e-10c0-44d7-a1cc-8d4d027b3fa8",
        "body" : "@oranagra You are of course correct - the `del` isn't needed here.",
        "createdAt" : "2020-11-11T14:59:57Z",
        "updatedAt" : "2020-11-12T01:30:52Z",
        "lastEditedBy" : "99372f0e-10c0-44d7-a1cc-8d4d027b3fa8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a562f6c7fdf818836d4d9c60a34421a0fbbcc95",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +1160,1164 @@    if (delete) {\n        dbDelete(dst,newkey);\n    }\n\n    dbAdd(dst,newkey,newobj);"
  },
  {
    "id" : "2b12469c-3199-42dc-9de1-c735c4b8cb3d",
    "prId" : 7953,
    "prUrl" : "https://github.com/redis/redis/pull/7953#pullrequestreview-528481475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d8092a3-8c0c-4da6-9305-e0a2adc2b978",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "this trick of using `selectDb` to check if the dbid is in range is not very good.\r\nif we exit with syntax error on the next argument, the selected db remains the dest db.\r\neither re-select the original db right away, or just match the dbid range manually.",
        "createdAt" : "2020-11-11T19:43:21Z",
        "updatedAt" : "2020-11-12T01:30:52Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a562f6c7fdf818836d4d9c60a34421a0fbbcc95",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1092,1096 @@            if (getLongLongFromObject(c->argv[j+1], &dbid) == C_ERR ||\n                dbid < INT_MIN || dbid > INT_MAX ||\n                selectDb(c, dbid) == C_ERR)\n            {\n                addReplyError(c,\"invalid DB index\");"
  },
  {
    "id" : "ba3f8b3c-f4af-4011-8fae-e827ad87a13c",
    "prId" : 7912,
    "prUrl" : "https://github.com/redis/redis/pull/7912#pullrequestreview-525808396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dfa28f45-43a4-419f-b894-ac198ffc20c2",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i now realize that we're missing a call to moduleNotifyKeyUnlink here (better be done before calling `dictSetVal`).\r\n\r\nwhich makes me wonder what else are we missing?",
        "createdAt" : "2020-11-08T13:34:20Z",
        "updatedAt" : "2020-11-12T06:23:10Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "494ba0f131d1c3e66e275affeb04a04e5160ab44",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +225,229 @@\n    if (server.lazyfree_lazy_server_del) {\n        freeObjAsync(key,old);\n        dictSetVal(db->dict, &auxentry, NULL);\n    }"
  }
]