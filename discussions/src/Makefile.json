[
  {
    "id" : "9ba4ed87-e0b4-4d02-914b-1c20a10347b3",
    "prId" : 7707,
    "prUrl" : "https://github.com/redis/redis/pull/7707#pullrequestreview-490484120",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcdab05a-5ebf-4246-8025-25b7309ab774",
        "parentId" : null,
        "authorId" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "body" : "Do we want to persist the `C11_ATOMIC` settings in `.make-settings` and run this only once, when it is not yet defined? We had some issues in the past with inconsistencies between different make runs.",
        "createdAt" : "2020-09-15T14:18:56Z",
        "updatedAt" : "2020-09-16T07:14:59Z",
        "lastEditedBy" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "tags" : [
        ]
      },
      {
        "id" : "508d1519-5554-4b27-b23a-62bbcc860802",
        "parentId" : "dcdab05a-5ebf-4246-8025-25b7309ab774",
        "authorId" : "98e31153-705f-4299-a152-78c428055d23",
        "body" : "Oh, I missed it. Does it matter?  We has persisted `STD` in `.make-setting`. ",
        "createdAt" : "2020-09-16T09:38:47Z",
        "updatedAt" : "2020-09-16T09:38:47Z",
        "lastEditedBy" : "98e31153-705f-4299-a152-78c428055d23",
        "tags" : [
        ]
      },
      {
        "id" : "703f1aad-f652-45c1-a2d0-63e29031965f",
        "parentId" : "dcdab05a-5ebf-4246-8025-25b7309ab774",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "@yossigo on a second thought, since this is not controlled by a user argument (unlike `noopt`, `32bit` or other targets / arguments), and is actually defined by the toolchain. we'll get issues only when the toolchain is changed, and in that case the persisted setting may not help (build may be bound to fail).\r\n\r\nby reading the makefile it seems like it is persisted (modifying `STD` before being saved or overwritten), but maybe indeed we want to avoid running this detection when the outcome is already known (optimization)?",
        "createdAt" : "2020-09-17T06:58:58Z",
        "updatedAt" : "2020-09-17T06:58:58Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "1612ce2f-e165-4d32-ad9f-d11911c9dece",
        "parentId" : "dcdab05a-5ebf-4246-8025-25b7309ab774",
        "authorId" : "98e31153-705f-4299-a152-78c428055d23",
        "body" : "I truly don't know much about `Makefile`, actually I did a test, firstly, i compiled by gcc4.8 and used gcc8.2 at second time without `make distclean`, i didn't find i can change `c99` into `c11`.  If you reach an agreement that i should persist `C11_ATOMIC`, I will do it. @oranagra @yossigo ",
        "createdAt" : "2020-09-17T07:18:03Z",
        "updatedAt" : "2020-09-17T07:48:53Z",
        "lastEditedBy" : "98e31153-705f-4299-a152-78c428055d23",
        "tags" : [
        ]
      },
      {
        "id" : "ddb81f86-57e7-4770-9cdd-891a109bcfc7",
        "parentId" : "dcdab05a-5ebf-4246-8025-25b7309ab774",
        "authorId" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "body" : "@oranagra It is indirectly controlled by the user (choosing which toolchain to use), and my main concern is some inconsistency (e.g. compilation starts with one compiler/flags, aborted, then continues with another compiler/flags). But you're right, persisting may not make a difference.\r\n\r\nI'm okay with leaving it like this, and addressing any issues if/when they show up.",
        "createdAt" : "2020-09-17T11:11:47Z",
        "updatedAt" : "2020-09-17T11:11:48Z",
        "lastEditedBy" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "tags" : [
        ]
      }
    ],
    "commit" : "37546c456485380d1d0697113357a2f731a35101",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +38,42 @@else\n\tSTD+=-std=c99\nendif\n\nPREFIX?=/usr/local"
  },
  {
    "id" : "6932691d-6cf0-4d28-81db-f53875e3c28a",
    "prId" : 7707,
    "prUrl" : "https://github.com/redis/redis/pull/7707#pullrequestreview-489455365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32b1338a-09f4-4fc9-8432-ffa5b938391b",
        "parentId" : null,
        "authorId" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "body" : "Is this intentional or a leftover?",
        "createdAt" : "2020-09-15T14:19:23Z",
        "updatedAt" : "2020-09-16T07:14:59Z",
        "lastEditedBy" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "tags" : [
        ]
      },
      {
        "id" : "b26bfda4-47b2-4948-9070-f784ee8cc4b2",
        "parentId" : "32b1338a-09f4-4fc9-8432-ffa5b938391b",
        "authorId" : "98e31153-705f-4299-a152-78c428055d23",
        "body" : "Intentional. \r\nIn 'atomicvar.h', I say we use macros in helgrind.h to tell Helgrind inter-thread happens-before relationship explicitly for avoiding false positives. To simple, i assume users install valgrind in the default configuration path.",
        "createdAt" : "2020-09-16T09:44:32Z",
        "updatedAt" : "2020-09-16T09:44:33Z",
        "lastEditedBy" : "98e31153-705f-4299-a152-78c428055d23",
        "tags" : [
        ]
      }
    ],
    "commit" : "37546c456485380d1d0697113357a2f731a35101",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +378,382 @@\nhelgrind:\n\t$(MAKE) OPTIMIZATION=\"-O0\" MALLOC=\"libc\" CFLAGS=\"-D__ATOMIC_VAR_FORCE_SYNC_MACROS\" REDIS_CFLAGS=\"-I/usr/local/include\" REDIS_LDFLAGS=\"-L/usr/local/lib\"\n\nsrc/help.h:"
  },
  {
    "id" : "cd681fe4-5841-43b1-a3ef-d38860c48a3a",
    "prId" : 7707,
    "prUrl" : "https://github.com/redis/redis/pull/7707#pullrequestreview-492208917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cff803ca-5a0d-4b65-99e6-eb314669e840",
        "parentId" : null,
        "authorId" : "42355b05-6d27-48a8-8dec-4ebfa0c25ee7",
        "body" : "@ShooterIT  / @oranagra - This test does not actually work (at least not on Debian)  -- it always causes CC errors on missing the foo.c  file (which are subsequently ignored) and the code gets compiled with std=c99.\r\nYou can see this failure in the CI run: https://github.com/redis/redis/runs/1117499989",
        "createdAt" : "2020-09-20T12:03:06Z",
        "updatedAt" : "2020-09-20T12:03:06Z",
        "lastEditedBy" : "42355b05-6d27-48a8-8dec-4ebfa0c25ee7",
        "tags" : [
        ]
      },
      {
        "id" : "3bdd9756-0f46-4928-a0f9-b00742d09cd2",
        "parentId" : "cff803ca-5a0d-4b65-99e6-eb314669e840",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "@ushachar thanks!\r\nwe already noticed, but still trying to figure it out.\r\nit seems to work on MacOS, but fail on Ubuntu.\r\nfrom what i've seen so far if we remove the `rm foo.c` at the end, it works.\r\nand if i put instead:\r\n```\r\necho \"pwd: `pwd`\" >&2\r\n```\r\ni notice that it runs twice.\r\nmaybe there's some kind of a race where one delete's the files before the other one uses it.\r\nmaybe you have good enough make skills to figure it out?",
        "createdAt" : "2020-09-20T12:26:49Z",
        "updatedAt" : "2020-09-20T12:30:42Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "64b3f17e-86a0-4541-8259-fba76ffcde66",
        "parentId" : "cff803ca-5a0d-4b65-99e6-eb314669e840",
        "authorId" : "42355b05-6d27-48a8-8dec-4ebfa0c25ee7",
        "body" : "Reason for the failure is that in Debian, 'sh' is Dash -- not Bash/Zsh.\r\nSimply replacing 'sh' with /bin/bash fixes the issue on Debian, and should work on OSX/RHEL as well. ",
        "createdAt" : "2020-09-20T12:56:23Z",
        "updatedAt" : "2020-09-20T12:56:23Z",
        "lastEditedBy" : "42355b05-6d27-48a8-8dec-4ebfa0c25ee7",
        "tags" : [
        ]
      },
      {
        "id" : "c6a28ec7-bcb5-48b8-9a99-5494f4f8798b",
        "parentId" : "cff803ca-5a0d-4b65-99e6-eb314669e840",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "found it.. it wasn't a race condition in the makefile, but a race in the short bash script: https://github.com/redis/redis/pull/7822. (Dash was faster than GCC)",
        "createdAt" : "2020-09-20T14:08:17Z",
        "updatedAt" : "2020-09-20T14:08:17Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "c3937bfd-cccd-4c14-af82-ebf46db90535",
        "parentId" : "cff803ca-5a0d-4b65-99e6-eb314669e840",
        "authorId" : "42355b05-6d27-48a8-8dec-4ebfa0c25ee7",
        "body" : "That's not a race - It's a syntax difference (around &>)\r\n\r\nIn bash, that redirects both stdout and err\r\nIn dash, it probably spawns a subshell\r\n(fix in #7822 is good...)",
        "createdAt" : "2020-09-20T17:18:53Z",
        "updatedAt" : "2020-09-20T17:18:53Z",
        "lastEditedBy" : "42355b05-6d27-48a8-8dec-4ebfa0c25ee7",
        "tags" : [
        ]
      }
    ],
    "commit" : "37546c456485380d1d0697113357a2f731a35101",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +31,35 @@\n# Detect if the compiler supports C11 _Atomic\nC11_ATOMIC := $(shell sh -c 'echo \"\\#include <stdatomic.h>\" > foo.c; \\\n\t$(CC) -std=c11 -c foo.c -o foo.o &> /dev/null; \\\n\tif [ -f foo.o ]; then echo \"yes\"; rm foo.o; fi; rm foo.c')"
  },
  {
    "id" : "5024ff1b-e195-438d-9011-c1abb3a8b19f",
    "prId" : 3718,
    "prUrl" : "https://github.com/redis/redis/pull/3718#pullrequestreview-688862515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db6e0147-4bd5-4726-852b-e24d7b8f31f0",
        "parentId" : null,
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "Nice, however slightly unrelated to the bugfix.",
        "createdAt" : "2021-02-04T10:11:24Z",
        "updatedAt" : "2021-02-04T10:12:22Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      },
      {
        "id" : "78018ee6-71a9-4485-b255-a6e1a192dbe3",
        "parentId" : "db6e0147-4bd5-4726-852b-e24d7b8f31f0",
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "I appreciate it",
        "createdAt" : "2021-06-21T21:08:18Z",
        "updatedAt" : "2021-06-21T21:08:19Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      }
    ],
    "commit" : "65e100f43d217f981fb1d270a9dc43b9a39b53c0",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +387,391 @@test-modules: $(REDIS_SERVER_NAME)\n\t@(cd ..; ./runtest-moduleapi)\n\ntest-sentinel: $(REDIS_SENTINEL_NAME) $(REDIS_CLI_NAME)\n\t@(cd ..; ./runtest-sentinel)"
  }
]