[
  {
    "id" : "e08d5325-ea2b-4de9-b63b-1b816f5406d7",
    "prId" : 42592,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42592#pullrequestreview-583650441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0f6b0c8-5720-4dea-853b-3dc54070321b",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "We could also make this conditional upon `argumentIndex >= firstRest` if we wanted parameter highlighting to work up until the first rest, where the ambiguity begins. But maybe that would be a worse experience than consistently seeing no highlighting. I personally feel like parameter highlighting is pretty useful when parameters have JSDoc description, and it might be worthwhile to show them as often as we can. But it might be pretty confusing for it to stop working halfway through typing call arguments. Donâ€™t have a super strong opinion here.",
        "createdAt" : "2021-02-04T17:39:54Z",
        "updatedAt" : "2021-02-04T17:39:58Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "88e83d1a3de8ea3eeb68b4ae2d876cfcdeda683b",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +547,551 @@            if (-1 < firstRest && firstRest < selected.parameters.length - 1) {\n                // We don't have any code to get this correct; instead, don't highlight a current parameter AT ALL\n                help.argumentIndex = selected.parameters.length;\n            }\n            else {"
  },
  {
    "id" : "2479de95-54e6-402a-84b0-e8925cc5c69f",
    "prId" : 30299,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30299#pullrequestreview-212609001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c798d128-eb66-4c91-be3a-d69add2830d9",
        "parentId" : null,
        "authorId" : "ab15ed9e-363f-447f-850d-c2bd363aebf4",
        "body" : "Not sure if this matters or not, but `isVariadic` will be true for functions with expanded parameters even though the expanded signature will not always be.  Not sure if this will be an issue, in my similar [PR](https://github.com/Microsoft/TypeScript/pull/30084/files#diff-77414312b9c8809bd4ba9e31e0c5f940L577), I reevaluated whether the signature is variadic based on the last argument. I found this with the fourslash test I added, don't know if any clients of the API will suffer from  `isVariadic` not being entirely acurate in this case. ",
        "createdAt" : "2019-03-10T06:43:22Z",
        "updatedAt" : "2019-03-10T06:43:22Z",
        "lastEditedBy" : "ab15ed9e-363f-447f-850d-c2bd363aebf4",
        "tags" : [
        ]
      },
      {
        "id" : "48d69f3d-abcc-40a4-8c94-79f4e085a6e4",
        "parentId" : "c798d128-eb66-4c91-be3a-d69add2830d9",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "We don't use the `isVariadic` property ourselves but it is part of the public API so we should make sure it is set correctly.",
        "createdAt" : "2019-03-10T15:49:12Z",
        "updatedAt" : "2019-03-10T15:49:13Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "79813b8ece591987e3a71f21b9635f361c12348b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +575,579 @@            }\n        });\n        const parameters = checker.getExpandedParameters(candidateSignature).map(p => createSignatureHelpParameterForParameter(p, checker, enclosingDeclaration, sourceFile, printer));\n        return { isVariadic, parameters, prefix: [...typeParameterParts, punctuationPart(SyntaxKind.OpenParenToken)], suffix: [punctuationPart(SyntaxKind.CloseParenToken)] };\n    }"
  },
  {
    "id" : "9e2e6ecd-88e8-47d3-9f3f-f0d590245deb",
    "prId" : 26022,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26022#pullrequestreview-143766852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cdfe5df-32c4-43b2-ae92-2fa527cc2ac7",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Why not inline this function, as we would avoid unnecessary object creation and destructuring then.",
        "createdAt" : "2018-08-06T19:37:46Z",
        "updatedAt" : "2018-08-06T19:37:46Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "f1b56c85-4ba3-4f52-82e2-a1d74285e9bf",
        "parentId" : "4cdfe5df-32c4-43b2-ae92-2fa527cc2ac7",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "It's called in two places -- inlining it twice would increase code size which could also hurt performance..",
        "createdAt" : "2018-08-06T21:26:46Z",
        "updatedAt" : "2018-08-06T21:26:47Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6708fb2fc49f36b2614c6d22ce8856dbc88f87c",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +135,139 @@\n    function getArgumentOrParameterListInfo(node: Node, sourceFile: SourceFile): { readonly list: Node, readonly argumentIndex: number, readonly argumentCount: number, readonly argumentsSpan: TextSpan } | undefined {\n        const info = getArgumentOrParameterListAndIndex(node, sourceFile);\n        if (!info) return undefined;\n        const { list, argumentIndex } = info;"
  },
  {
    "id" : "2426a47d-669c-4379-a6e8-68545aaafdba",
    "prId" : 24915,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24915#pullrequestreview-133810321",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "080b2858-db44-4642-92e7-3ed9b2d2be9c",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "just inline this function",
        "createdAt" : "2018-07-02T23:41:33Z",
        "updatedAt" : "2018-07-02T23:41:33Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "e56a5c1b35efe1828bb5340268554f7280fa19f0",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +58,62 @@    }\n\n    function shouldCarefullyCheckContext(reason: SignatureHelpTriggerReason | undefined) {\n        // Only need to be careful if the user typed a character and signature help wasn't showing.\n        return !!reason && reason.kind === \"characterTyped\";"
  },
  {
    "id" : "e62e1a1c-0502-423b-81e4-478ffad4066f",
    "prId" : 24915,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24915#pullrequestreview-133810774",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e085207-f3e4-4472-b8b0-198ac3451675",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "we still need to do some additional checks here.",
        "createdAt" : "2018-07-02T23:42:28Z",
        "updatedAt" : "2018-07-02T23:42:28Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "90882f81-4a4d-439e-9c1e-1a1b3be929b2",
        "parentId" : "0e085207-f3e4-4472-b8b0-198ac3451675",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "e.g.:\r\n(: in a parenthesized expression\r\n,: not in an object literal, array literal, or comma expression\r\ndefault: instring | incomment | injsxtext, ",
        "createdAt" : "2018-07-02T23:44:18Z",
        "updatedAt" : "2018-07-02T23:44:18Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "e56a5c1b35efe1828bb5340268554f7280fa19f0",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +32,36 @@        if (shouldCarefullyCheckContext(triggerReason)) {\n            // In the middle of a string, don't provide signature help unless the user explicitly requested it.\n            if (isInString(sourceFile, position, startingToken)) {\n                return undefined;\n            }"
  },
  {
    "id" : "ac776e61-b510-49e0-829f-bff3853f3f28",
    "prId" : 24138,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24138#pullrequestreview-121127783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef545dbb-2319-4c84-aa2e-a43711de510b",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "what about new expressions?",
        "createdAt" : "2018-05-17T16:51:15Z",
        "updatedAt" : "2018-05-23T14:54:40Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "208076a1b42c01ab478f732ddd77ab640e55cbc4",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +53,57 @@    function getCandidateInfo(argumentInfo: ArgumentListInfo, checker: TypeChecker): { readonly candidates: ReadonlyArray<Signature>, readonly resolvedSignature: Signature } | undefined {\n        const { invocation } = argumentInfo;\n        if (invocation.kind === InvocationKind.Call) {\n            const candidates: Signature[] = [];\n            const resolvedSignature = checker.getResolvedSignature(invocation.node, candidates, argumentInfo.argumentCount)!; // TODO: GH#18217"
  },
  {
    "id" : "82758bbe-9cd2-4ff4-9548-c6dd191c7831",
    "prId" : 8428,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "162ecc97-ef12-4a30-9dae-ead42733cd7f",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "nit: can you invert conditions to reduce nesting?\n",
        "createdAt" : "2016-05-07T04:52:32Z",
        "updatedAt" : "2016-06-08T20:22:20Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "38a7dfe0-b6b2-410a-92bc-d2a8f547f7ea",
        "parentId" : "162ecc97-ef12-4a30-9dae-ead42733cd7f",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "this is actually code that was there before, i just moved it around. i can get that cleaned in a future PR.\n",
        "createdAt" : "2016-06-08T20:20:26Z",
        "updatedAt" : "2016-06-08T20:22:20Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5dd5bf797dddb75304eedff9fd9aa61d39d7b1",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +240,244 @@            const declarations = getProperty(nameToDeclarations, name.text);\n\n            if (declarations) {\n                for (const declaration of declarations) {\n                    const symbol = declaration.symbol;"
  },
  {
    "id" : "2bacfebd-c510-42e0-87ca-637045daacbf",
    "prId" : 1204,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60a863b3-0950-4988-aa7a-221c3dc16bb8",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "leave the comment why you do +1\n",
        "createdAt" : "2014-11-21T00:01:48Z",
        "updatedAt" : "2014-11-25T00:34:11Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad39bdfb012ec8604664b3e028c499a97cf30525",
    "line" : null,
    "diffHunk" : "@@ -1,1 +346,350 @@            var argumentCount = tagExpression.template.kind === SyntaxKind.NoSubstitutionTemplateLiteral\n                ? 1\n                : (<TemplateExpression>tagExpression.template).templateSpans.length + 1;\n\n            return {"
  },
  {
    "id" : "ee33728b-2787-4919-ab6e-6c4fb6ad059b",
    "prId" : 1204,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2441c983-d7a2-4c58-b298-16cf2d2cb7ff",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Assert its TemplateExpressionHood\n",
        "createdAt" : "2014-11-24T23:28:41Z",
        "updatedAt" : "2014-11-25T00:34:11Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad39bdfb012ec8604664b3e028c499a97cf30525",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +282,286 @@            }\n            else if (node.kind === SyntaxKind.TemplateHead && node.parent.parent.kind === SyntaxKind.TaggedTemplateExpression) {\n                var templateExpression = <TemplateExpression>node.parent;\n                var tagExpression = <TaggedTemplateExpression>templateExpression.parent;\n                Debug.assert(templateExpression.kind === SyntaxKind.TemplateExpression);"
  },
  {
    "id" : "4f0f3cd4-9fb1-439a-aa99-16c8bb9928b1",
    "prId" : 1204,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "146e0761-4617-40b3-bd8c-a93570be56f6",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Comment explaining why this is necessary in contrast to the call/new case.\n",
        "createdAt" : "2014-11-24T23:57:26Z",
        "updatedAt" : "2014-11-25T00:34:11Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad39bdfb012ec8604664b3e028c499a97cf30525",
    "line" : null,
    "diffHunk" : "@@ -1,1 +387,391 @@            if (template.kind === SyntaxKind.TemplateExpression) {\n                var lastSpan = lastOrUndefined((<TemplateExpression>template).templateSpans);\n                if (lastSpan.literal.kind === SyntaxKind.Missing) {\n                    applicableSpanEnd = skipTrivia(sourceFile.text, applicableSpanEnd, /*stopAfterLineBreak*/ false);\n                }"
  },
  {
    "id" : "71bc1692-4d1e-4201-a507-d457954b7235",
    "prId" : 760,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a70bec37-c355-42cb-9873-281f5258f919",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "This could be made simpler by computing this data (argIndex and argCount) as we go through the process of finding the argument list given our position.  However, that was not the concern of this change.  What i wanted to do here was remove the multiple entrypoints for SigHelp and move us to teh single entrypoint that matches the host side of things.\n\nIf anyone wants to go and clean up sig help now that there is no longer multiple entrypoints, feel free :)\n",
        "createdAt" : "2014-09-26T18:35:13Z",
        "updatedAt" : "2014-09-26T18:35:13Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "42f162ec835cf945a6cdd96942169ba3474dcf8d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +339,343 @@            var applicableSpan = new TypeScript.TextSpan(applicableSpanStart, applicableSpanEnd - applicableSpanStart);\n\n            var state = getSignatureHelpCurrentArgumentState(sourceFile, position, applicableSpanStart);\n            return {\n                items: items,"
  },
  {
    "id" : "fab47301-2864-4ed8-996b-ad3eaebc09c9",
    "prId" : 726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23198dbd-c14b-48a3-b206-114870cb9990",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Will clarify why I'm using full start, and skipping trivia at the end.\n",
        "createdAt" : "2014-09-23T00:25:01Z",
        "updatedAt" : "2014-09-24T17:47:50Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "22e989795d98df98e77f9dddeb15c8ad56767619",
    "line" : null,
    "diffHunk" : "@@ -1,1 +289,293 @@            // The applicable span is from the first bar to the second bar (inclusive,\n            // but not including parentheses)\n            var applicableSpanStart = argumentListOrTypeArgumentList.getFullStart();\n            var applicableSpanEnd = skipTrivia(sourceFile.text, argumentListOrTypeArgumentList.end, /*stopAfterLineBreak*/ false);\n            var applicableSpan = new TypeScript.TextSpan(applicableSpanStart, applicableSpanEnd - applicableSpanStart);"
  },
  {
    "id" : "f5d9142a-c38a-4786-aa28-4b91ab555dc8",
    "prId" : 726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b88f74f-93c9-42e0-8395-084dad1de669",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Will check that the parent is actually a CallExpression\n",
        "createdAt" : "2014-09-23T00:26:37Z",
        "updatedAt" : "2014-09-24T17:47:50Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "44a6b535-e6fe-48e8-9143-902830362de8",
        "parentId" : "5b88f74f-93c9-42e0-8395-084dad1de669",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Actually there is an assert down below that I could move up.\n",
        "createdAt" : "2014-09-23T00:32:15Z",
        "updatedAt" : "2014-09-24T17:47:50Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "22e989795d98df98e77f9dddeb15c8ad56767619",
    "line" : null,
    "diffHunk" : "@@ -1,1 +308,312 @@\n        var tokenPrecedingCurrentPosition = findPrecedingToken(position, sourceFile);\n        var call = <CallExpression>tokenPrecedingSpanStart.parent;\n        Debug.assert(call.kind === SyntaxKind.CallExpression || call.kind === SyntaxKind.NewExpression, \"wrong call kind \" + SyntaxKind[call.kind]);\n        if (tokenPrecedingCurrentPosition.kind === SyntaxKind.CloseParenToken || tokenPrecedingCurrentPosition.kind === SyntaxKind.GreaterThanToken) {"
  },
  {
    "id" : "363b5e4e-ed35-4dba-8fbb-1c5d242131ab",
    "prId" : 726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc6fc47b-a182-4d35-add7-09ec1d6746ee",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "i will comment the cases that cause each of these to happen.\n",
        "createdAt" : "2014-09-23T21:16:46Z",
        "updatedAt" : "2014-09-24T17:47:50Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "22e989795d98df98e77f9dddeb15c8ad56767619",
    "line" : null,
    "diffHunk" : "@@ -1,1 +214,218 @@            //    Case 3:\n            //          foo<T$, U$>(a$, $b$) -> The token is buried inside a list, and should give sig help\n            var parent = <CallExpression>node.parent;\n            // Find out if 'node' is an argument, a type argument, or neither\n            if (node.kind === SyntaxKind.LessThanToken || node.kind === SyntaxKind.OpenParenToken) {"
  },
  {
    "id" : "422cde1c-d2ba-4a0d-aa07-70cf21f20d5d",
    "prId" : 726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d370f5be-c98a-4358-9e12-d50f4c6d59fd",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Check with Sheetal on the Quick info work she id doing, we do not need different serializes for method signatures\n",
        "createdAt" : "2014-09-23T23:59:16Z",
        "updatedAt" : "2014-09-24T17:47:50Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "bc69607e-571e-455a-b5f1-6c8455c47763",
        "parentId" : "d370f5be-c98a-4358-9e12-d50f4c6d59fd",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Once I port this to use DisplayParts, I will switch it over to an existing method\n",
        "createdAt" : "2014-09-24T00:07:44Z",
        "updatedAt" : "2014-09-24T17:47:50Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "22e989795d98df98e77f9dddeb15c8ad56767619",
    "line" : 254,
    "diffHunk" : "@@ -1,1 +252,256 @@            var items = map(candidates, candidateSignature => {\n                var parameters = candidateSignature.parameters;\n                var parameterHelpItems = parameters.length === 0 ? emptyArray : map(parameters, p => {\n                    var display = p.name;\n                    if (candidateSignature.hasRestParameter && parameters[parameters.length - 1] === p) {"
  }
]