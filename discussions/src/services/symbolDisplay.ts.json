[
  {
    "id" : "662f0067-99ca-404b-8d4f-2fec5fe82138",
    "prId" : 30253,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30253#pullrequestreview-257626670",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dfb0ba2-e978-43e7-9e21-f0377703f19e",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I think you should add the same code here.",
        "createdAt" : "2019-07-03T17:09:01Z",
        "updatedAt" : "2020-01-01T19:53:49Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "376acadc2df270014b808d832b0eee5f9e2fde65",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +504,508 @@\n        if (documentation.length === 0 && !hasMultipleSignatures) {\n            documentation = symbol.getDocumentationComment(typeChecker);\n        }\n"
  },
  {
    "id" : "b4a98cb0-e0a7-4d85-8a5d-fcfc3838d3a8",
    "prId" : 23478,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23478#pullrequestreview-112996951",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b851832c-2c1b-4bbc-b69c-b3b226e98577",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "might want to handel get/set accessors the same way as well.",
        "createdAt" : "2018-04-17T18:45:32Z",
        "updatedAt" : "2018-04-17T18:45:55Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "6af13477-2a90-433c-a455-6388e35d967e",
        "parentId" : "b851832c-2c1b-4bbc-b69c-b3b226e98577",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "It doesn't look like being a get/set accessor affects symbol display normally anyway -- at `class C { get x() { return 0 }; } new C().x` I just see `(property) C.x: number`. It might be useful to see `(get) C.x: number` instead -- do you think we should add that?",
        "createdAt" : "2018-04-17T19:05:51Z",
        "updatedAt" : "2018-04-17T19:05:51Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "7058af28-38bb-4e6f-b33a-a21b4c436f23",
        "parentId" : "b851832c-2c1b-4bbc-b69c-b3b226e98577",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "it does have a different `ScriptElementKind` kind.. so the IDE could show it using a different icon. just checked in VS and we are not treating them differently, we use the same icon for getters, setters and properties. so might not be that important after all.",
        "createdAt" : "2018-04-17T21:02:29Z",
        "updatedAt" : "2018-04-17T21:02:30Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "f68789d589964f57dbb4c766e1d8fb08c91fed60",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +33,37 @@            // Ensure the mapped version is still a method, as opposed to `{ [K in keyof I]: number }`.\n            && typeChecker.getTypeOfSymbolAtLocation(symbol, location).getNonNullableType().getCallSignatures().length !== 0) {\n            return ScriptElementKind.memberFunctionElement;\n        }\n"
  },
  {
    "id" : "98f9c70b-8377-42d4-8bed-c1bf6728f1a8",
    "prId" : 20545,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20545#pullrequestreview-82028056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a9edafb-ac0e-434d-a1c0-29d69cb98405",
        "parentId" : null,
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "So if `symbol === undefined` we will just leave the name blank? Is that desirable behavior? Should we perhaps instead fail to build the display completely?",
        "createdAt" : "2017-12-07T23:20:27Z",
        "updatedAt" : "2017-12-07T23:22:19Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "9b15282c-24e4-4258-8e5d-a46d19637846",
        "parentId" : "2a9edafb-ac0e-434d-a1c0-29d69cb98405",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "This code path builds either anonymous or non-anonymous declarations (e.g. `function (x)` or `function y(x)`), so it's already regularly producing non-named symbol displays. In the case where the originating type doesn't have a symbol, it's sort of de facto anonymous anyway so it seems like this won't ever produce any particularly weird output.",
        "createdAt" : "2017-12-07T23:25:54Z",
        "updatedAt" : "2017-12-07T23:25:54Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "92c3b23a32344037828e407bfc82818136c7d6bc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +497,501 @@            if (symbolKind) {\n                pushTypePart(symbolKind);\n                if (symbol && !some(symbol.declarations, d => isArrowFunction(d) || (isFunctionExpression(d) || isClassExpression(d)) && !d.name)) {\n                    displayParts.push(spacePart());\n                    addFullSymbolName(symbol);"
  },
  {
    "id" : "72ddf47b-1824-4ae4-bd6e-cac5b46e5fe1",
    "prId" : 19669,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19669#pullrequestreview-73931274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42d22a50-1516-45c5-8acf-fe476dcbf630",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "`(d => !d.name)` ?",
        "createdAt" : "2017-11-01T21:25:53Z",
        "updatedAt" : "2017-11-02T20:55:55Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "af3a8f80-28d3-4653-a02a-cf1118d5be4a",
        "parentId" : "42d22a50-1516-45c5-8acf-fe476dcbf630",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "A few declarations don't have a `name` property but will still have a name when written out by the checker.",
        "createdAt" : "2017-11-02T20:37:36Z",
        "updatedAt" : "2017-11-02T20:55:55Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "33ace79ddace05454b0e95feca58a0c04607059b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +490,494 @@            if (symbolKind) {\n                pushTypePart(symbolKind);\n                if (!some(symbol.declarations, d => isArrowFunction(d) || (isFunctionExpression(d) || isClassExpression(d)) && !d.name)) {\n                    displayParts.push(spacePart());\n                    addFullSymbolName(symbol);"
  }
]