[
  {
    "id" : "76b58afa-85a8-4929-8f4a-e4a5cdf47701",
    "prId" : 40987,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40987#pullrequestreview-505244378",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5299e5c-9a97-43d8-9b18-e458664e9b2e",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This was, until now, the only consumer of `getSynthesizedDeepCloneWithRenames`, so I moved the bits that had poor reusability out to here.",
        "createdAt" : "2020-10-08T00:08:16Z",
        "updatedAt" : "2020-10-09T18:59:06Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "45288506-c58a-4c6c-8005-f4552c158723",
        "parentId" : "d5299e5c-9a97-43d8-9b18-e458664e9b2e",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "weird that it had an unused optional `callback` parameter",
        "createdAt" : "2020-10-08T22:13:14Z",
        "updatedAt" : "2020-10-09T18:59:06Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "5cdec28a-16c7-475b-91f7-4fbd4f03f851",
        "parentId" : "d5299e5c-9a97-43d8-9b18-e458664e9b2e",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "It was used originally, but I stopped using it a few months back when I greatly simplified convertToAsyncFunction.",
        "createdAt" : "2020-10-08T23:29:32Z",
        "updatedAt" : "2020-10-09T18:59:06Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b7e98bedbfa31a3e88b86cf09cde6a5f42f2f63",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +200,204 @@        });\n\n        return getSynthesizedDeepCloneWithReplacements(nodeToRename, /*includeTrivia*/ true, original => {\n            if (isBindingElement(original) && isIdentifier(original.name) && isObjectBindingPattern(original.parent)) {\n                const symbol = checker.getSymbolAtLocation(original.name);"
  },
  {
    "id" : "fee18212-fd80-4a45-9c95-3de5fd831996",
    "prId" : 36858,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36858#pullrequestreview-360579734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54fe5092-343b-4572-bcac-a01ae016c708",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This was used for determining whether to declare variables with `let` or `const`, but I determined the only time `let` ever occurred was after generating code like\r\n\r\n```ts\r\nlet x: string | number;\r\ntry {\r\n  x = await getString();\r\n} catch {\r\n  x = await getNumber();\r\n}\r\n```\r\n\r\nand `numberOfAssignmentsOriginal` was being explicitly set to `2`. In every other code path, the number was always `0`. So, the property became a more descriptively-named boolean.",
        "createdAt" : "2020-02-18T18:41:06Z",
        "updatedAt" : "2020-02-18T19:04:35Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "045cb4b491d310820c84f950803a3b184f8baec2",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +34,38 @@        readonly types: Type[];\n        /** A declaration for this identifier has already been generated */\n        hasBeenDeclared: boolean;\n    }\n"
  },
  {
    "id" : "2338ae86-31b8-4c26-8f53-c99b702dbfb1",
    "prId" : 36858,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36858#pullrequestreview-360579734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca113a63-f47c-44fe-b655-00edf3b9918f",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This condition on `node.original.parent` always holds in the existing tests, but Iâ€™m not 100% sure why.",
        "createdAt" : "2020-02-18T18:59:07Z",
        "updatedAt" : "2020-02-18T19:04:35Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "045cb4b491d310820c84f950803a3b184f8baec2",
    "line" : 299,
    "diffHunk" : "@@ -1,1 +250,254 @@        if (nodeType && transformer.checker.getPromisedTypeOfPromise(nodeType)) {\n            Debug.assertNode(node.original!.parent, isPropertyAccessExpression);\n            return transformPromiseExpressionOfPropertyAccess(node, transformer, prevArgName);\n        }\n"
  },
  {
    "id" : "e87628e6-c8f7-4155-9e6c-93f82fefd633",
    "prId" : 36858,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36858#pullrequestreview-367640550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8bca3e5-a9f5-49e8-b0eb-ebbd6bcca338",
        "parentId" : null,
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "I guess I'm a little surprised this always comes out `const`, but if nothing breaks...",
        "createdAt" : "2020-03-03T01:08:30Z",
        "updatedAt" : "2020-03-03T01:08:31Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      }
    ],
    "commit" : "045cb4b491d310820c84f950803a3b184f8baec2",
    "line" : 460,
    "diffHunk" : "@@ -1,1 +366,370 @@                        /*type*/ undefined,\n                        rightHandSide)],\n                    NodeFlags.Const))];\n    }\n"
  },
  {
    "id" : "4b3b4395-0daf-45f9-99dc-3b4017918881",
    "prId" : 27156,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27156#pullrequestreview-156158853",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7487c18-ff8e-4112-ae42-22dadb03ff53",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Unrelated, but there's currently a doc comment `At the end of the refactor, numberOfUsesOriginal should === numberOfUsesSynthesized`, but neither of those variables exists.",
        "createdAt" : "2018-09-17T20:54:57Z",
        "updatedAt" : "2018-09-17T23:43:09Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "0a66c37b-1712-4251-82b9-86e28792ef61",
        "parentId" : "d7487c18-ff8e-4112-ae42-22dadb03ff53",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "Fixed.",
        "createdAt" : "2018-09-17T23:38:26Z",
        "updatedAt" : "2018-09-17T23:43:09Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cb9fd62bae285b160d8dbe855397c014ae7a30f",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +389,393 @@\n        if (prevArgName.types.length < prevArgName.numberOfAssignmentsOriginal) {\n            // if the variable has already been declared, we don't need \"let\" or \"const\"\n            return createNodeArray([createStatement(createAssignment(getSynthesizedDeepClone(prevArgName.identifier), rightHandSide))]);\n        }"
  },
  {
    "id" : "310231d9-c4dd-4ad1-9d7a-498093138f63",
    "prId" : 27156,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27156#pullrequestreview-156431568",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ebc36f5-9881-42c1-9767-5d1f26bc4e83",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">originalTypeMap [](start = 41, length = 15)\r\n\r\nI thought `originalTypeMap` existed because the checked might return undefined (e.g. if `func` were synthesized).",
        "createdAt" : "2018-09-17T21:06:38Z",
        "updatedAt" : "2018-09-17T23:43:09Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "06e574aa-1502-418d-95c4-3010f24ace91",
        "parentId" : "0ebc36f5-9881-42c1-9767-5d1f26bc4e83",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I guess you ended up deciding this was safe?",
        "createdAt" : "2018-09-18T03:02:38Z",
        "updatedAt" : "2018-09-18T03:02:39Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "a02f023a-6351-4477-b019-55bd2c987a19",
        "parentId" : "0ebc36f5-9881-42c1-9767-5d1f26bc4e83",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "I thought I left a comment, but looks like it was deleted or I forgot to submit it...\r\nYeah, in the worst case, `getTypeAtLocation` will return an `errorType` with no call signatures and the code action will fail to be reported (and won't delete code or anything of that nature).",
        "createdAt" : "2018-09-18T15:33:36Z",
        "updatedAt" : "2018-09-18T15:33:37Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cb9fd62bae285b160d8dbe855397c014ae7a30f",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +413,417 @@                }\n\n                const type = transformer.originalTypeMap.get(getNodeId(func).toString()) || transformer.checker.getTypeAtLocation(func);\n                const callSignatures = transformer.checker.getSignaturesOfType(type, SignatureKind.Call);\n                if (!callSignatures.length) {"
  },
  {
    "id" : "fc3bb1e3-ce04-4ece-8069-f356df67e8f1",
    "prId" : 26930,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26930#pullrequestreview-155587659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad8c96b2-74bc-4374-81b4-9fc31de3c455",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">codeActionSucceeded [](start = 8, length = 19)\r\n\r\nI assume this is the thing you were talking about when you asked about exceptions.  It's not what I would have done, but it sounds like you've already checked the local conventions.  I might change it to `codeActionFailed` though.  As long as we're going down this path, would it make sense to have an error code indicating how it went wrong and then send a telemetry event when we see a failure?",
        "createdAt" : "2018-09-14T02:35:19Z",
        "updatedAt" : "2018-09-14T15:58:43Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "11eb54cd-dec8-4242-9749-6fffdad9d77a",
        "parentId" : "ad8c96b2-74bc-4374-81b4-9fc31de3c455",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "I'm not sure this is an appropriate place to bubble up an error code given the change to be more conservative about offering the diagnostic. That is, we won't show the diagnostic if we know the code fix is going to fail.",
        "createdAt" : "2018-09-14T15:48:32Z",
        "updatedAt" : "2018-09-14T15:58:43Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "ee4b7024-a56c-43e4-8d0c-0177c14178de",
        "parentId" : "ad8c96b2-74bc-4374-81b4-9fc31de3c455",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Sorry, I think I was unclear.  I didn't mean a diagnostic error code, I meant an enum or something that would tell you the reason the code action didn't succeed.  And bubbling up would be to us, via telemetry, not to the user.",
        "createdAt" : "2018-09-14T17:21:47Z",
        "updatedAt" : "2018-09-14T17:21:48Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "57a6dbd6fa7715e3176339743b30c1de7ed55d73",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3,7 @@    const fixId = \"convertToAsyncFunction\";\n    const errorCodes = [Diagnostics.This_may_be_converted_to_an_async_function.code];\n    let codeActionSucceeded = true;\n    registerCodeFix({\n        errorCodes,"
  }
]