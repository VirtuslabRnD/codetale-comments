[
  {
    "id" : "dae7034e-e8e4-4a42-949a-1138f380e2c4",
    "prId" : 44713,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44713#pullrequestreview-693075353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfcb1864-17b2-494b-b0b0-058372738938",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Transient symbols should never have been in this cache, but this isn’t new, it’s just moved and renamed. I’m working on a follow-up to restructure this cache to be safer and less kludgy.",
        "createdAt" : "2021-06-25T18:04:15Z",
        "updatedAt" : "2021-06-25T18:04:15Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad4238d201e80fd258ef8e84316ae0f173122c4e",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +389,393 @@            return wrapped;\n\n            function replaceTransientSymbols(info: SymbolExportInfo, checker: TypeChecker) {\n                if (info.symbol.flags & SymbolFlags.Transient) {\n                    info.symbol = checker.getMergedSymbol(info.symbol.declarations?.[0]?.symbol || info.symbol);"
  },
  {
    "id" : "1f9711de-a1cf-4834-bdf4-f59e33b153eb",
    "prId" : 44713,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44713#pullrequestreview-693218703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dde67a3-f83a-43a1-9b6c-0d8df8aff702",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Boolean -> Number is a liiitle too clever for my taste (but might be great in practice I don't know)",
        "createdAt" : "2021-06-25T21:58:18Z",
        "updatedAt" : "2021-06-25T22:26:23Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad4238d201e80fd258ef8e84316ae0f173122c4e",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +566,570 @@        const fixes = flatMap(moduleSymbols, exportInfo => {\n            const { computedWithoutCache, moduleSpecifiers } = getModuleSpecifiers(exportInfo.moduleSymbol);\n            computedWithoutCacheCount += Number(computedWithoutCache);\n            return moduleSpecifiers?.map((moduleSpecifier): FixAddNewImport | FixUseImportType =>\n                // `position` should only be undefined at a missing jsx namespace, in which case we shouldn't be looking for pure types."
  },
  {
    "id" : "836cd439-29ec-449d-b23b-18460568fff3",
    "prId" : 43149,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43149#pullrequestreview-612462852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "578dc0fe-5b8d-4a7d-80bd-b49e4126d552",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "At the moment, the contents of the map are not meant to be looked up by keying into it; rather, the key serves to manage grouping. Each key maps to a group of exports/re-exports of the same symbol by the same name from a set of modules that are effectively interchangeable until we need to calculate what the best module specifier to use is. In other words, if we’re generating a completions list of auto imports, we should get exactly one completion entry per key, even if that key maps to many re-exports.",
        "createdAt" : "2021-03-15T17:45:01Z",
        "updatedAt" : "2021-03-26T21:29:28Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "badcd839b2359138d0e8262a4cce4f6f4251b8c9",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +325,329 @@            const moduleName = stripQuotes(moduleSymbol.name);\n            const moduleKey = isExternalModuleNameRelative(moduleName) ? \"/\" : moduleName;\n            return `${name}|${getSymbolId(skipAlias(alias, checker))}|${moduleKey}`;\n        }\n    }"
  },
  {
    "id" : "f0ed32da-8847-4c60-b2cb-e534f4b64d5c",
    "prId" : 42583,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42583#pullrequestreview-583683645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "445d8eb7-0b51-44b0-85f2-5c089141145c",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Does this comment still matter?",
        "createdAt" : "2021-02-04T00:49:56Z",
        "updatedAt" : "2021-02-04T00:52:52Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "f318cc70-f81e-4e33-83af-15ce0329a08e",
        "parentId" : "445d8eb7-0b51-44b0-85f2-5c089141145c",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yes; this is a separate case where something is missing a parent.",
        "createdAt" : "2021-02-04T18:17:36Z",
        "updatedAt" : "2021-02-04T18:17:36Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "174ec4759e8101414d57ffc57be81b9f9be690ae",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +649,653 @@                // - `aliased` will be undefined if the module is exporting an unresolvable name,\n                //    but we can still offer completions for it.\n                // - `aliased.parent` will be undefined if the module is exporting `globalThis.something`,\n                //    or another expression that resolves to a global.\n                return getDefaultExportInfoWorker(aliased, checker, compilerOptions);"
  },
  {
    "id" : "b631a57b-e745-42b2-a7ef-18f623c6dc19",
    "prId" : 41955,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41955#pullrequestreview-554119654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62dbe7f6-b642-4b28-a22c-1dd9aff38bb2",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "so this asserts if the host can't produce an auto import provider can't be produced or a type checker?",
        "createdAt" : "2020-12-15T00:51:40Z",
        "updatedAt" : "2020-12-18T22:44:16Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "1d097432-3719-489d-9f10-5dff505603f0",
        "parentId" : "62dbe7f6-b642-4b28-a22c-1dd9aff38bb2",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Not exactly; it asserts that the exported symbol was in fact found to be exported by its module symbol, according to either the main program checker or the AutoImportProvider checker. This is basically redoing work during the completions _details_ request that was done during the previous completions _list_ request, so it should always be found, but of course there’s no guarantee of that in the types, hence the assertion. (It’s also the sort of assumption that could plausibly be violated by a bizarre sequence of edits triggering some race condition, or just wrong code, so we do see assertions like this come up in telemetry every once in a while.)",
        "createdAt" : "2020-12-16T22:00:48Z",
        "updatedAt" : "2020-12-18T22:44:16Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "c638208ececfc55c99fce0f60f3f57dda0264bc8",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +238,242 @@        }\n        const autoImportProvider = host.getPackageJsonAutoImportProvider?.()?.getTypeChecker();\n        return Debug.checkDefined(autoImportProvider && getInfoWithChecker(autoImportProvider), `Could not find symbol in specified module for code actions`);\n\n        function getInfoWithChecker(checker: TypeChecker): SymbolExportInfo | undefined {"
  },
  {
    "id" : "4c1964ef-260f-4245-b4a3-a12ffc7a9edb",
    "prId" : 40879,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40879#pullrequestreview-502298625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a7ddd2c-757f-4a1b-a2d8-6d8769600edd",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "```suggestion\r\n        // 5. Literally nothing to go on, why not zoidberg?\r\n```",
        "createdAt" : "2020-10-05T18:07:34Z",
        "updatedAt" : "2020-10-05T18:09:21Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e414691cdf268f88bb9a90ec2704ceb8f40d231",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +386,390 @@        }\n\n        // 5. Literally nothing to go on\n        return true;\n    }"
  },
  {
    "id" : "3f23f953-ad6f-44b6-b2e3-9c949c472452",
    "prId" : 40845,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40845#pullrequestreview-503137074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7579cdf6-e5b5-4e43-9986-ee5492ac9b64",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "We need the same change on line 242",
        "createdAt" : "2020-10-06T16:14:13Z",
        "updatedAt" : "2020-10-06T16:32:46Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f72c76eb50e73e404758a6778d5afd95aeb1463",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +538,542 @@            const compilerOptions = program.getCompilerOptions();\n            const defaultInfo = getDefaultLikeExportInfo(sourceFile, moduleSymbol, checker, compilerOptions);\n            if (defaultInfo && (defaultInfo.name === symbolName || moduleSymbolToValidIdentifier(moduleSymbol, compilerOptions.target) === symbolName) && symbolHasMeaning(defaultInfo.symbolForMeaning, currentTokenMeaning)) {\n                addSymbol(moduleSymbol, defaultInfo.symbol, defaultInfo.kind, checker);\n            }"
  },
  {
    "id" : "31275296-86fb-4d1f-8531-004101cdb109",
    "prId" : 40843,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40843#pullrequestreview-498926927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "feebe6f1-7211-4f87-a375-90926a874f2d",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "When there’s an AutoImportProviderProject, these modules can come from different programs, but this was always asking for exports of module symbols with the same checker instance, which would be missing resolved exports cached on symbol links if the module was checked by a different checker. That’s why a `program` is passed to this callback, but I missed this usage of it in the original refactor.",
        "createdAt" : "2020-09-29T22:04:46Z",
        "updatedAt" : "2020-09-29T22:04:46Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ce2da979316994fc9760c25b8051422a639c7ee",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +533,537 @@        }\n        forEachExternalModuleToImportFrom(program, host, sourceFile, /*filterByPackageJson*/ true, useAutoImportProvider, (moduleSymbol, _, program) => {\n            const checker = program.getTypeChecker();\n            cancellationToken.throwIfCancellationRequested();\n"
  },
  {
    "id" : "8c297e3c-2990-42fa-9218-22598af81ebc",
    "prId" : 37027,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37027#pullrequestreview-364500106",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24f26741-a4e4-4420-8280-492585810e34",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This is the fundamental conceptual change in this file, and everything else is basically just implementation details. This enum used to represent final syntax; now it’s more a representation of where the symbol can be found in the module. Whether or not to use JS is then calculated and stored elsewhere, so that\r\n\r\n- `CommonJS` can mean `import foo = require('mod')` or `const foo = require('mod')`\r\n- `Namespace` can mean `import * as foo from 'mod'` or `const foo = require('mod')`\r\n- `Default` can mean `import foo from 'mod'` or `const { default: foo } = require('mod')`\r\n- `Named` can mean `import { foo } from 'mod'` or `const { foo } = require('mod')`",
        "createdAt" : "2020-02-25T22:34:52Z",
        "updatedAt" : "2020-02-27T23:22:34Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "7344478dc88e03adc6e7a626530f06a6457a0efc",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +175,179 @@        Default,\n        Namespace,\n        CommonJS,\n    }\n"
  },
  {
    "id" : "be865384-2836-42ba-af20-eb2c76dea6fb",
    "prId" : 37027,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37027#pullrequestreview-366031990",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15df7a47-cd09-4331-ac48-14325e495ca6",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : ":+1: cond-style formatting",
        "createdAt" : "2020-02-27T23:02:57Z",
        "updatedAt" : "2020-02-27T23:22:34Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "7344478dc88e03adc6e7a626530f06a6457a0efc",
    "line" : 308,
    "diffHunk" : "@@ -1,1 +412,416 @@\n    function newImportInfoFromExistingSpecifier({ declaration, importKind }: FixAddToExistingImportInfo, preferTypeOnlyImport: boolean, useRequire: boolean): FixAddNewImport | undefined {\n        const moduleSpecifier = declaration.kind === SyntaxKind.ImportDeclaration ? declaration.moduleSpecifier :\n            declaration.kind === SyntaxKind.VariableDeclaration ? declaration.initializer.arguments[0] :\n            declaration.moduleReference.kind === SyntaxKind.ExternalModuleReference ? declaration.moduleReference.expression :"
  },
  {
    "id" : "15c40295-0915-44c1-bd90-26b09fcdb3da",
    "prId" : 36615,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36615#pullrequestreview-356287274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91ee75e3-b07a-46ef-8211-50c6c96d0a38",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "maybe `getFixForImport` should be renamed `getImportFix`",
        "createdAt" : "2020-02-07T00:16:22Z",
        "updatedAt" : "2020-02-10T21:46:08Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "6e314903-7d25-480e-ad93-b2aab92020e3",
        "parentId" : "91ee75e3-b07a-46ef-8211-50c6c96d0a38",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "The names in this file are, at least to me, confusing, repetitive, and unexpressive, but they’re roughly consistent in including an unnecessary “for.” Someday I’d like to do some housekeeping in here, but I think renaming just one function now might not be a useful step forward.",
        "createdAt" : "2020-02-10T21:45:43Z",
        "updatedAt" : "2020-02-10T21:46:09Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "7de6c0346270caf46607cc5978e197651bca7b5a",
    "line" : 230,
    "diffHunk" : "@@ -1,1 +211,215 @@        Debug.assert(exportInfos.some(info => info.moduleSymbol === moduleSymbol), \"Some exportInfo should match the specified moduleSymbol\");\n        // We sort the best codefixes first, so taking `first` is best.\n        return first(getFixForImport(exportInfos, symbolName, position, preferTypeOnlyImport, program, sourceFile, host, preferences));\n    }\n"
  },
  {
    "id" : "b288fcd1-ce21-4409-85ec-2a961f4760f4",
    "prId" : 32531,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32531#pullrequestreview-266182106",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba8d2bd5-c6a8-4472-8cb0-9bd08d13f5bb",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I'd also check that that name `isIdentifierText`, just in case the name comes from, say, a jsdoc typedef or a js property assignment where the original declaration's name wasn't an identifier.",
        "createdAt" : "2019-07-23T23:50:29Z",
        "updatedAt" : "2019-07-23T23:50:30Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "c52a7119-9539-4bdf-b7ed-0f58e0383410",
        "parentId" : "ba8d2bd5-c6a8-4472-8cb0-9bd08d13f5bb",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "@weswigham we don't need to check that since this is the name just to compare the defaultExportSymbol ==== symbol we are looking for and that symbol's name does default to symbol.name if its not `export=` or `default`. The actual text to be displayed is calculated later.",
        "createdAt" : "2019-07-24T17:46:42Z",
        "updatedAt" : "2019-07-24T17:46:42Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b8e779d89ad939d1740542e8f01347670b116cb0",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +448,452 @@\n        if (defaultExport.escapedName !== InternalSymbolName.Default &&\n            defaultExport.escapedName !== InternalSymbolName.ExportEquals) {\n            return { symbolForMeaning: defaultExport, name: defaultExport.getName() };\n        }"
  },
  {
    "id" : "eb3caeb5-d948-44b8-825f-3bebaf8918c5",
    "prId" : 31893,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31893#pullrequestreview-254838561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edbb80a7-9014-47f6-b2db-20dc16865fd5",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think from tsserver perspective caching packageJson should be fairely ok since we do watch failed lookup locations and any changes in there result in recomputing program. But that's not guaranteed with other hosts since they can have their own module resolution or use the default resolution cache which doesn't watch these locations.",
        "createdAt" : "2019-06-26T18:53:06Z",
        "updatedAt" : "2019-07-12T00:10:59Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "8f7e3d44-36be-4611-95ff-97531a87072c",
        "parentId" : "edbb80a7-9014-47f6-b2db-20dc16865fd5",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "> we do watch failed lookup locations and any changes in there result in recomputing program\r\n\r\nJust to make sure I’ve interpreted this correctly: you’re saying that if a user runs `npm install new-package` which changes the package.json, `synchronizeHostData` will be called so I could update the cache there?\r\n\r\n> But that's not guaranteed with other hosts\r\n\r\nMaybe we can implement a fast check to determine whether the cache is up-to-date (last modified timestamp? content hash?). Actually, that might be better than reading eagerly on recomputing the program, since the program will change more often than the package.json.",
        "createdAt" : "2019-06-26T19:55:22Z",
        "updatedAt" : "2019-07-12T00:10:59Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "de8ef3265310344a23c206be1933d123545ee7e0",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +670,674 @@\n    function createLazyPackageJsonDependencyReader(fromFile: SourceFile, host: LanguageServiceHost) {\n        const packageJsonPaths = findPackageJsons(getDirectoryPath(fromFile.fileName), host);\n        const dependencyIterator = readPackageJsonDependencies(host, packageJsonPaths);\n        let seenDeps: Map<true> | undefined;"
  },
  {
    "id" : "bbe4b2aa-7449-4d65-99a5-6fa0c80e6987",
    "prId" : 31893,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31893#pullrequestreview-260406140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d86be779-7e0c-43c3-87a7-399633fd58dc",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "same: this is about twice as long as my 1440px minotaur.",
        "createdAt" : "2019-07-10T23:32:17Z",
        "updatedAt" : "2019-07-12T00:10:59Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "de8ef3265310344a23c206be1933d123545ee7e0",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +577,581 @@    }\n\n    export function forEachExternalModuleToImportFrom(checker: TypeChecker, host: LanguageServiceHost, preferences: UserPreferences, redirectTargetsMap: RedirectTargetsMap, from: SourceFile, allSourceFiles: ReadonlyArray<SourceFile>, cb: (module: Symbol) => void) {\n        const { allowsImporting } = createLazyPackageJsonDependencyReader(from, host);\n        const compilerOptions = host.getCompilationSettings();"
  },
  {
    "id" : "0cc1e23a-f377-4857-a14d-d2612b3bd378",
    "prId" : 31893,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31893#pullrequestreview-260406140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b830955-3873-4222-b72a-890e85926d3c",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "can you move this declaration closer to its usage like you did with `usesNodeCoreModules`?",
        "createdAt" : "2019-07-10T23:32:59Z",
        "updatedAt" : "2019-07-12T00:10:59Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "de8ef3265310344a23c206be1933d123545ee7e0",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +672,676 @@        const packageJsonPaths = findPackageJsons(getDirectoryPath(fromFile.fileName), host);\n        const dependencyIterator = readPackageJsonDependencies(host, packageJsonPaths);\n        let seenDeps: Map<true> | undefined;\n        let usesNodeCoreModules: boolean | undefined;\n        return { allowsImporting };"
  },
  {
    "id" : "8ab1beb4-5e9a-486b-9a03-3d8c1452b863",
    "prId" : 25852,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25852#pullrequestreview-140932755",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5239df4-efa1-4cac-b0d9-200a37231caf",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Why not exit early here when position is undefined ? without doing any of the work. ",
        "createdAt" : "2018-07-23T18:17:00Z",
        "updatedAt" : "2018-07-26T22:32:20Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "309bed89-77fe-442c-b497-ecf7ea02978c",
        "parentId" : "e5239df4-efa1-4cac-b0d9-200a37231caf",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "We actually might return a result if we don't need to add a qualifier to the use. We would add an import at the top of the file and not need `position`.",
        "createdAt" : "2018-07-26T22:33:02Z",
        "updatedAt" : "2018-07-26T22:33:02Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef7542ca86ef137c33504e67cc21ce20ab24893a",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +202,206 @@        preferences: UserPreferences,\n    ): ReadonlyArray<ImportFix> {\n        const checker = program.getTypeChecker();\n        const existingImports = flatMap(exportInfos, info => getExistingImportDeclarations(info, checker, sourceFile));\n        const useNamespace = position === undefined ? undefined : tryUseExistingNamespaceImport(existingImports, symbolName, position, checker);"
  },
  {
    "id" : "3e6cec3f-0cbb-4193-bce2-f8adedbf6361",
    "prId" : 25622,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25622#pullrequestreview-149940548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9443e97e-18d4-414f-aaa9-23e8b08c7666",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Drop `commands` too?",
        "createdAt" : "2018-07-13T01:29:54Z",
        "updatedAt" : "2018-08-27T22:49:20Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "e9e0cc17-20e2-4415-806a-61e94653c010",
        "parentId" : "9443e97e-18d4-414f-aaa9-23e8b08c7666",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Currently `protocol.ts` `CompletionEntryDetails` contains a `CodeAction[]` and `CodeAction` has `commands` on it. I could make a `CodeActionWithoutCommands` interface if you think it's important that a completion never has commands (which it probably shouldn't since they're easy to trigger on accident).",
        "createdAt" : "2018-07-13T15:54:24Z",
        "updatedAt" : "2018-08-27T22:49:20Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "f5f989b2-4c92-4261-b80d-31710a1c67ab",
        "parentId" : "9443e97e-18d4-414f-aaa9-23e8b08c7666",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "@amcasey Please open a new issue if you would like `CodeActionWithoutCommands`.",
        "createdAt" : "2018-08-27T23:03:13Z",
        "updatedAt" : "2018-08-27T23:03:13Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "ddcb9375-c73d-4d9f-aba2-bb26fdbc21f4",
        "parentId" : "9443e97e-18d4-414f-aaa9-23e8b08c7666",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Not very important.  Thanks for following up though!",
        "createdAt" : "2018-08-28T01:40:30Z",
        "updatedAt" : "2018-08-28T01:40:30Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "47aac9c0e232db5f4c9f29339a1848df90d58291",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +173,177 @@\n    function codeFixActionToCodeAction({ description, changes, commands }: CodeFixAction): CodeAction {\n        return { description, changes, commands };\n    }\n"
  },
  {
    "id" : "89e58d60-f989-4e76-96b8-abe9ecb1aa86",
    "prId" : 21755,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21755#pullrequestreview-95176887",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32ab8377-8635-48bd-92ae-2378c8ae4a99",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "It looks like this is the same in both UMD and non-UMD cases.",
        "createdAt" : "2018-02-08T15:43:28Z",
        "updatedAt" : "2018-02-08T18:18:44Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "2ff01e61-3a27-4e8f-bc4e-435cc3269dc1",
        "parentId" : "32ab8377-8635-48bd-92ae-2378c8ae4a99",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "yes. but i wanted to defer the call to convertContext untill i had the name.",
        "createdAt" : "2018-02-08T18:10:33Z",
        "updatedAt" : "2018-02-08T18:18:44Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b283cd486f273b9f2e1d5b628386ec28c87f530",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +708,712 @@        const { sourceFile, span, program, cancellationToken } = context;\n        const checker = program.getTypeChecker();\n        const symbolToken = getTokenAtPosition(sourceFile, span.start, /*includeJsDocComment*/ false);\n        const isJsxNamespace = isJsxOpeningLikeElement(symbolToken.parent) && symbolToken.parent.tagName === symbolToken;\n        if (!isJsxNamespace && !isIdentifier(symbolToken)) {"
  },
  {
    "id" : "6c00cc55-7186-407e-812e-fb0bafb13563",
    "prId" : 19572,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19572#pullrequestreview-74779507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c15f04ee-7be6-413a-9ef1-b4b3c6c52b94",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This will never be the parent of a `LiteralExpression`. Removing in #19667.",
        "createdAt" : "2017-11-07T15:03:33Z",
        "updatedAt" : "2017-11-07T15:03:33Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3800b46350de91cf9b51405218ef9e05c1e0b97a",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +238,242 @@            case SyntaxKind.ExternalModuleReference:\n                return (parent as ExternalModuleReference).parent;\n            case SyntaxKind.ImportEqualsDeclaration:\n                return parent as ImportEqualsDeclaration;\n            default:"
  },
  {
    "id" : "c0a38f83-7f17-4142-bfa9-98654807f1e5",
    "prId" : 14441,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14441#pullrequestreview-27195800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c8d8bbd-e78b-4421-839b-4bfde990231e",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Commented out line?",
        "createdAt" : "2017-03-15T20:48:04Z",
        "updatedAt" : "2017-03-15T20:48:04Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "f79e2fde-7946-4d88-bb3e-dc9c2aa4ef02",
        "parentId" : "8c8d8bbd-e78b-4421-839b-4bfde990231e",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "forgot to remove, will delete",
        "createdAt" : "2017-03-15T20:54:16Z",
        "updatedAt" : "2017-03-15T20:54:16Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d2e19bebd0d82c98709a06987e88c44fda314bb",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +302,306 @@\n                    function getTextChangeForImportClause(importClause: ImportClause): FileTextChanges[] {\n                        //const newImportText = isDefault ? `default as ${name}` : name;\n                        const importList = <NamedImports>importClause.namedBindings;\n                        const newImportSpecifier = createImportSpecifier(/*propertyName*/ undefined, createIdentifier(name));"
  },
  {
    "id" : "9e101706-7373-410c-86f3-e6644c4c16f4",
    "prId" : 11768,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11768#pullrequestreview-8158582",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3910e292-71d1-44b1-935a-63e174d3133f",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i would rather we add a new import defalcation regardless.\n",
        "createdAt" : "2016-11-09T21:33:19Z",
        "updatedAt" : "2016-11-16T22:03:15Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "36cd0567-eb69-4a76-9c36-650bae651c8f",
        "parentId" : "3910e292-71d1-44b1-935a-63e174d3133f",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "I ended up providing two code actions to the user, and he/she can do either one. I think C# has the same behavior.\n",
        "createdAt" : "2016-11-11T07:59:38Z",
        "updatedAt" : "2016-11-16T22:03:15Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "11ea6b3ff1e174492b52b631ffc7b41d54c18572",
    "line" : 359,
    "diffHunk" : "@@ -1,1 +357,361 @@                         * Because there is no import list, we alter the reference to include the\n                         * namespace instead of altering the import declaration. For example, \"foo\" would\n                         * become \"ns.foo\"\n                         */\n                        return createCodeAction("
  },
  {
    "id" : "c08263c9-8291-4bc7-8812-9df7c2260ffa",
    "prId" : 11768,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11768#pullrequestreview-8159846",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e0c9b3a-1950-4341-985f-ed2d27245e5c",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "I don't understand what the above few lines do. Can you add some explanatory comments? In what scenario can we detect that you need to import a default export? It has no name to match on, as the local name for the 'default' export is provided by the import statement.\n",
        "createdAt" : "2016-11-10T00:56:42Z",
        "updatedAt" : "2016-11-16T22:03:15Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "41a25b81-b47b-4a7b-bfd7-fc17609993ba",
        "parentId" : "9e0c9b3a-1950-4341-985f-ed2d27245e5c",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "(I think I see the scenario in the `*ImportDefault0.ts` test-case, but is that a real scenario? How often is a default export a named function, and how often is that the identifier you just happened to try and refer to it as?)\n",
        "createdAt" : "2016-11-10T00:58:49Z",
        "updatedAt" : "2016-11-16T22:03:15Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "addd2ac7-aae1-4527-9f98-6ea3d33e91c4",
        "parentId" : "9e0c9b3a-1950-4341-985f-ed2d27245e5c",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "I don't have data, but a quick search in the DefinitelyTyped repo did give me some library files with named `export default`, for example the [`material-ui` library](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/23d8466f82f9397d4d5e7cfe709439def66e8a39/material-ui/index.d.ts#L1913). And in the latest implementation I return multiple code fixes to the user, so that he/she can choose which one he/she likes the best.\n",
        "createdAt" : "2016-11-11T08:13:20Z",
        "updatedAt" : "2016-11-16T22:03:15Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "11ea6b3ff1e174492b52b631ffc7b41d54c18572",
    "line" : null,
    "diffHunk" : "@@ -1,1 +147,151 @@                        const symbolId = getUniqueSymbolId(localSymbol);\n                        symbolIdActionMap.addActions(symbolId, getCodeActionForImport(moduleSymbol, /*isDefaultExport*/ true));\n                    }\n                }\n"
  },
  {
    "id" : "0a9c5877-86bd-4a5e-95d4-1cda1d4d90ab",
    "prId" : 11768,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11768#pullrequestreview-8519625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9f81824-1f38-48c2-ab30-8404021962f5",
        "parentId" : null,
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "They are used to filter the code actions later. For example, inserting new item to an existing import list should take higher priority to adding a new import statement. In reality it is possible that we can get both kinds of code actions if the code has multiple existing imports\n",
        "createdAt" : "2016-11-15T01:01:28Z",
        "updatedAt" : "2016-11-16T22:03:15Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      },
      {
        "id" : "e008231a-f77d-4e25-a5ef-95bff2913d24",
        "parentId" : "b9f81824-1f38-48c2-ab30-8404021962f5",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "They are only used internally for sorting / filtering. So no need to expose them\n",
        "createdAt" : "2016-11-15T01:01:57Z",
        "updatedAt" : "2016-11-16T22:03:15Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "11ea6b3ff1e174492b52b631ffc7b41d54c18572",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2,6 @@namespace ts.codefix {\n\n    type ImportCodeActionKind = \"CodeChange\" | \"InsertingIntoExistingImport\" | \"NewImport\";\n    interface ImportCodeAction extends CodeAction {\n        kind: ImportCodeActionKind,"
  },
  {
    "id" : "daeddd64-5d82-44dc-aff8-f5c8a07660fd",
    "prId" : 11768,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11768#pullrequestreview-8725655",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1d0b15e-1d46-4982-a8c7-5269535e1e0d",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "this does not seem to be needed. you do pass the module specifier if it is an ambient module any ways.\n",
        "createdAt" : "2016-11-15T19:59:31Z",
        "updatedAt" : "2016-11-16T22:03:15Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "6e0661b0-c6dd-4a22-866e-a64a679aabba",
        "parentId" : "c1d0b15e-1d46-4982-a8c7-5269535e1e0d",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "The module specifier is passed only when there is already an existing import declaration in this file, otherwise this is still needed.\n",
        "createdAt" : "2016-11-16T00:04:28Z",
        "updatedAt" : "2016-11-16T22:03:15Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "11ea6b3ff1e174492b52b631ffc7b41d54c18572",
    "line" : 421,
    "diffHunk" : "@@ -1,1 +419,423 @@                            removeFileExtension(getRelativePath(moduleFileName, sourceDirectory));\n\n                        function tryGetModuleNameFromAmbientModule(): string {\n                            if (moduleSymbol.valueDeclaration.kind !== SyntaxKind.SourceFile) {\n                                return moduleSymbol.name;"
  },
  {
    "id" : "cfa7ac6e-8f71-41f0-a9b0-69a863adf800",
    "prId" : 11768,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11768#pullrequestreview-8725126",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e187fde-f6c5-4a5a-86b8-bac3b9236b88",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "mm... i am not sure why this would be better than just picking the \"best\" one.\n",
        "createdAt" : "2016-11-15T20:50:06Z",
        "updatedAt" : "2016-11-16T22:03:15Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "9c36e066-86c0-4a6b-b3e1-3cf23f276486",
        "parentId" : "1e187fde-f6c5-4a5a-86b8-bac3b9236b88",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "when would the user need to choose one over the other?\n",
        "createdAt" : "2016-11-15T20:50:21Z",
        "updatedAt" : "2016-11-16T22:03:15Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "2f204dae-23df-46d3-9f1b-29f9dc55fc38",
        "parentId" : "1e187fde-f6c5-4a5a-86b8-bac3b9236b88",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "Say the user already has a `import * as ns` in his code, which means he intends to use it somewhere, then the first choice might be good. And as you previously suggested, the second option might solve more errors because it addresses all identifiers with the same name in this file. It all comes down to personal preferences. However, I feel there are really no objective criteria regarding which one is \"always\" better, just provide two choices might be better than enforcing our own understanding.\n",
        "createdAt" : "2016-11-16T00:00:27Z",
        "updatedAt" : "2016-11-16T22:03:15Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "11ea6b3ff1e174492b52b631ffc7b41d54c18572",
    "line" : 232,
    "diffHunk" : "@@ -1,1 +230,234 @@                    //     1. change \"member3\" to \"ns.member3\"\n                    //     2. add \"member3\" to the second import statement's import list\n                    // and it is up to the user to decide which one fits best.\n                    let namespaceImportDeclaration: ImportDeclaration | ImportEqualsDeclaration;\n                    let namedImportDeclaration: ImportDeclaration;"
  }
]