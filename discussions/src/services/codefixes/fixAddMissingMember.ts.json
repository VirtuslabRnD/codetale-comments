[
  {
    "id" : "5eab999b-cdc6-4a7a-b4de-399fa72ce6c6",
    "prId" : 44576,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44576#pullrequestreview-684474388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5247f2b3-4dd4-44e3-b370-d9e30983252a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Sorry, what I meant is that not only will you potentially get `undefined` (which might not be the case anymore anyway), but you might also get the result of `createUndefined()` even if another result might be more appropriate. For example, with `undefined | number`.\r\n\r\nHowever, thinking about it some more, maybe that's okay.",
        "createdAt" : "2021-06-15T17:41:05Z",
        "updatedAt" : "2021-06-15T17:46:01Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "929f07c4-a833-4bbc-becf-b660ee271f76",
        "parentId" : "5247f2b3-4dd4-44e3-b370-d9e30983252a",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "For the similar case `j: undefined | \"special-string\"` in `codeFixAddMissingProperties1` we will get `\"special-string\"`. Is that what you mean?",
        "createdAt" : "2021-06-15T18:44:33Z",
        "updatedAt" : "2021-06-15T18:45:20Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      },
      {
        "id" : "c1112524-0f7f-473c-bc3f-169f78ce0710",
        "parentId" : "5247f2b3-4dd4-44e3-b370-d9e30983252a",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Yeah, that's the case I had in mind. Both are fine, we should just be intentional in the behavior and ensure it's tested.",
        "createdAt" : "2021-06-15T20:50:03Z",
        "updatedAt" : "2021-06-15T20:50:03Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "839e72ea210d6bf3a79aef00779e12ffdc5e721b",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +480,484 @@        if (type.flags & TypeFlags.Union) {\n            const expression = firstDefined((type as UnionType).types, t => tryGetInitializerValueFromType(context, checker, importAdder, quotePreference, t));\n            return expression ?? createUndefined();\n        }\n        if (checker.isArrayLikeType(type)) {"
  },
  {
    "id" : "ca946052-e1d2-4e79-9cc2-8b0bd861cc5a",
    "prId" : 44576,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44576#pullrequestreview-686600497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89a54758-6b61-4c7a-bc45-c874dd8e9902",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Need a case for `TypeFlags.TemplateLiteral`?",
        "createdAt" : "2021-06-16T19:37:59Z",
        "updatedAt" : "2021-06-16T19:38:20Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "3984c9b6-5554-4f92-82a1-d2c8fca18445",
        "parentId" : "89a54758-6b61-4c7a-bc45-c874dd8e9902",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "@andrewbranch Thanks for the feedback. Could you help with an example to cover the case with the `TemplateLiteral`?",
        "createdAt" : "2021-06-16T20:10:56Z",
        "updatedAt" : "2021-06-16T20:10:57Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      },
      {
        "id" : "b7aafaa9-0fb5-4eff-aa17-a18daa46feaf",
        "parentId" : "89a54758-6b61-4c7a-bc45-c874dd8e9902",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "```ts\r\ninterface I1 {\r\n   cssVariable: `--${string}`;\r\n}\r\n\r\nconst a: I1 = {};\r\n```\r\n\r\nI would probably just throw that into the `string` case and seed it with an empty string. No need to try to come up with a placeholder that actually fits the template ðŸ˜„ ",
        "createdAt" : "2021-06-17T16:39:14Z",
        "updatedAt" : "2021-06-17T16:39:14Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "9cbf9959-725a-49e6-a360-e9ac446dd963",
        "parentId" : "89a54758-6b61-4c7a-bc45-c874dd8e9902",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "@andrewbranch Oke. Thanks. I've added a case for `TemplateLiteral ` and a test that covers the strings quote option.",
        "createdAt" : "2021-06-17T17:16:57Z",
        "updatedAt" : "2021-06-17T17:16:58Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      }
    ],
    "commit" : "839e72ea210d6bf3a79aef00779e12ffdc5e721b",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +512,516 @@            return factory.createNewExpression(factory.createIdentifier(type.symbol.name), /*typeArguments*/ undefined, /*argumentsArray*/ undefined);\n        }\n        return createUndefined();\n    }\n"
  },
  {
    "id" : "fedaa476-b930-42c3-b4c2-801a18089bfb",
    "prId" : 41215,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41215#pullrequestreview-564224668",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "665e1af9-cf28-4a03-985a-38c9022fb2e3",
        "parentId" : null,
        "authorId" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "body" : "Why doesn't it work for common JS modules?",
        "createdAt" : "2021-01-05T20:17:00Z",
        "updatedAt" : "2021-01-08T12:22:57Z",
        "lastEditedBy" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "tags" : [
        ]
      },
      {
        "id" : "1f12a4a2-6e11-4090-8a51-f53b2f9f6c32",
        "parentId" : "665e1af9-cf28-4a03-985a-38c9022fb2e3",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "@jessetrinity The issue description contains only samples with modules, https://github.com/microsoft/TypeScript/issues/26217, I decided that this is a limitation for common js. I think just need to check if `importAdder` supports common JS modules.",
        "createdAt" : "2021-01-08T12:30:38Z",
        "updatedAt" : "2021-01-08T12:30:39Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3aec1be1a481bb58059933de490d96ec8320ca59",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +153,157 @@\n            const moduleSourceFile = find(symbol.declarations, isSourceFile);\n            if (sourceFile.commonJsModuleIndicator) {\n                return;\n            }"
  },
  {
    "id" : "615c11c2-eab2-47c4-b926-89e78dc12b45",
    "prId" : 37806,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37806#pullrequestreview-395746659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3982dbda-8ebd-4e6b-8ac3-612e42cd02fc",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "`isPrivateIdentifier`?",
        "createdAt" : "2020-04-17T01:14:52Z",
        "updatedAt" : "2020-05-06T21:45:14Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "dbdb0774-3cc1-4e25-b46a-bbcbef532dcb",
        "parentId" : "3982dbda-8ebd-4e6b-8ac3-612e42cd02fc",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "@amcasey Thanks for the feedback. No, we need to add an action for a name which starts from `_` and make it `private`, \r\n\r\n```ts\r\nclass Foo {\r\n  foo() {\r\n     this._bar();\r\n       // Need to show \r\n         // - Declare private method _bar\r\n         // - Declare method bar\r\n         // ...\r\n  }\r\n}\r\n```\r\n",
        "createdAt" : "2020-04-17T06:19:46Z",
        "updatedAt" : "2020-05-06T21:45:14Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      },
      {
        "id" : "077495e4-27f9-4c74-92cb-a08e91ef53f6",
        "parentId" : "3982dbda-8ebd-4e6b-8ac3-612e42cd02fc",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "> It seems like it was already possible to add a method, public property, or private property - just not a private property\r\n\r\nBefore \r\n\r\n1. add a method\r\n2. public property, private property if a name starts from `_`\r\n\r\nAfter these changes\r\n\r\n1. add a method, private method  if a name starts from `_`\r\n2. public property, private property if a name starts from `_`\r\n\r\nWhat I did in this PR\r\n\r\n1. Combined logic for using it for properties and methods\r\n2. Added modifiers flags to avoid creating a new variable for each modifier, like `makeStatic` etc.\r\n3. Simplified methods signatures, instead of passing all properties as separate parameters we can use one parameter with `Info` type\r\nhttps://github.com/microsoft/TypeScript/blob/deb5bac520a1134e188fc6f01fa4f52b66d2899b/src/services/codefixes/fixAddMissingMember.ts#L23-L24\r\n4. Added `createModifiersFromModifierFlags` to create modifiers instead of create `Tokens` based on the variables\r\nhttps://github.com/microsoft/TypeScript/blob/deb5bac520a1134e188fc6f01fa4f52b66d2899b/src/services/codefixes/helpers.ts#L247\r\n5. Moved the following logic to two separate methods - `getActionsForMissingMethodDeclaration` and `getActionsForMissingMemberDeclaration`\r\nhttps://github.com/microsoft/TypeScript/blob/deb5bac520a1134e188fc6f01fa4f52b66d2899b/src/services/codefixes/fixAddMissingMember.ts#L23-L28\r\n6. Added new diagnostic message for `private` method\r\n",
        "createdAt" : "2020-04-17T06:44:04Z",
        "updatedAt" : "2020-05-06T21:45:14Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      },
      {
        "id" : "cfa31a8d-af4f-4a26-81b9-a9b61204c8ce",
        "parentId" : "3982dbda-8ebd-4e6b-8ac3-612e42cd02fc",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Thanks!  I find that sort of logical breakdown very helpful.",
        "createdAt" : "2020-04-17T20:18:04Z",
        "updatedAt" : "2020-05-06T21:45:14Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ef56a358bb562f58a12f9fb2cd0c92308b0f88a",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +140,144 @@\n            const declSourceFile = classOrInterface.getSourceFile();\n            const modifierFlags = (makeStatic ? ModifierFlags.Static : 0) | (startsWithUnderscore(token.text) ? ModifierFlags.Private : 0);\n            const isJSFile = isSourceFileJS(declSourceFile);\n            const call = tryCast(parent.parent, isCallExpression);"
  },
  {
    "id" : "f6c76f34-6bc9-4921-85a9-d659a81783fe",
    "prId" : 28163,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28163#pullrequestreview-200839002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a283eb6e-aa2a-4286-97be-312895b6df97",
        "parentId" : null,
        "authorId" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "body" : "Using `useNonAdjustedEndPosition: true` here will cause comments after the enum declaration to be duplicated.\r\n```\r\nconst x = 2; // this is x\r\n\r\n// this is E\r\nenum E {\r\n} // this was E\r\nE.a;\r\n```\r\nwill become\r\n```\r\nconst x = 2; // this is x\r\n\r\n// this is E\r\nenum E {\r\n    a\r\n} // this was E\r\n // this was E\r\nE.a;\r\n```\r\nHowever, using `useNonAdjustedEndPosition: false` will cause trailing whitespace and line breaks to disappear. Example:\r\n```\r\nconst x = 2; // this is x\r\n\r\n// this is E\r\nenum E {\r\n    a\r\n}\r\nE.a;\r\n```\r\nafter the codefix becomes:\r\n```const x = 2; // this is x\r\n\r\n// this is E\r\nenum E {\r\n    a\r\n}E.a;\r\n```",
        "createdAt" : "2019-02-06T22:28:52Z",
        "updatedAt" : "2019-02-06T22:28:52Z",
        "lastEditedBy" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8c324919507808bd8f80203eee6fb27912da391",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +298,302 @@            enumDeclaration.name,\n            concatenate(enumDeclaration.members, singleElementArray(enumMember))\n        ), { useNonAdjustedStartPosition: false, useNonAdjustedEndPosition: true });\n    }\n}"
  },
  {
    "id" : "6dd579bc-a20c-4783-972d-5db0258ac703",
    "prId" : 25182,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25182#pullrequestreview-132655356",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7776cbec-6ece-4ba3-b793-e877d5f1a482",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "So... this is not really caused by your change, but was already there, but i think this is wrong.. the key to addToSeen should not be the name of the property, but rather the the pair [container symbol, property Name]. e.g. today this fails:\r\n\r\n```ts\r\nclass C {\r\n    method() { \r\n        this.a = 0;\r\n    }\r\n}\r\n\r\n\r\nclass D {\r\n    method() {\r\n        this.a = 0;\r\n    } \r\n}   \r\n```\r\n\r\nit gets a bit more involved if one of the two classes inherit from each other.",
        "createdAt" : "2018-06-28T00:41:02Z",
        "updatedAt" : "2018-06-28T01:36:43Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "a742740f-c62b-4531-92f7-f89983a638dd",
        "parentId" : "7776cbec-6ece-4ba3-b793-e877d5f1a482",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I think we can handle that in a different change since it was not introduced by your change.",
        "createdAt" : "2018-06-28T00:41:22Z",
        "updatedAt" : "2018-06-28T01:36:43Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8cdd7552e57ea159866d946255cbcbe49565998",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +32,36 @@                const checker = program.getTypeChecker();\n                const info = getInfo(diag.file, diag.start, checker);\n                if (!info || !addToSeen(seenNames, info.token.text)) {\n                    return;\n                }"
  },
  {
    "id" : "5a4c3c70-ea00-49ef-8ccd-80701214de06",
    "prId" : 22987,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22987#pullrequestreview-108134239",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3318b8d7-fde0-46ba-b1f9-be97b3d83a23",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i would check this early on and return undefined if not the case. just to avoid the cases where VSCode calls us on stale snapshots.",
        "createdAt" : "2018-03-29T17:18:44Z",
        "updatedAt" : "2018-03-29T17:29:23Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "909b458a-8f8d-4761-bae7-db8118f95fe8",
        "parentId" : "3318b8d7-fde0-46ba-b1f9-be97b3d83a23",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This is supposed to be optional (might be a property instead of a method), though I should update the type.",
        "createdAt" : "2018-03-29T17:21:57Z",
        "updatedAt" : "2018-03-29T17:29:23Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "21df4f806a266bc2aaadf5c1bc4e3db6318f8f64",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +68,72 @@        const classDeclarationSourceFile = classDeclaration.getSourceFile();\n        const inJs = isSourceFileJavaScript(classDeclarationSourceFile);\n        const call = tryCast(parent.parent, isCallExpression);\n\n        return { token, classDeclaration, makeStatic, classDeclarationSourceFile, inJs, call };"
  },
  {
    "id" : "bf5640f0-55eb-459c-adbf-daa52a5f6895",
    "prId" : 22987,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22987#pullrequestreview-108136772",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3678a389-f5ab-48e1-9040-6dc1cf050193",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "@sandersn Is there a better way to detect whether the type was for the static/instance side of the class?",
        "createdAt" : "2018-03-29T17:29:44Z",
        "updatedAt" : "2018-03-29T17:29:44Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "21df4f806a266bc2aaadf5c1bc4e3db6318f8f64",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +65,69 @@        if (!classDeclaration) return undefined;\n\n        const makeStatic = (leftExpressionType as TypeReference).target !== checker.getDeclaredTypeOfSymbol(symbol);\n        const classDeclarationSourceFile = classDeclaration.getSourceFile();\n        const inJs = isSourceFileJavaScript(classDeclarationSourceFile);"
  },
  {
    "id" : "a875e72e-726f-42dd-a30a-c133a8a04a05",
    "prId" : 14276,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14276#pullrequestreview-26895032",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "825ae362-49f5-4b82-b6ca-1629f006de03",
        "parentId" : null,
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "`token.getFullText` should probably be `token.getText`.",
        "createdAt" : "2017-03-14T18:32:10Z",
        "updatedAt" : "2017-03-14T18:32:10Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "91571f05d31b968d30ef358f505ae2c837c30faf",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +50,54 @@                    textChanges: [{\n                        span: { start: startPos, length: 0 },\n                        newText: `${token.getFullText(sourceFile)}: ${typeString};`\n                    }]\n                }]"
  }
]