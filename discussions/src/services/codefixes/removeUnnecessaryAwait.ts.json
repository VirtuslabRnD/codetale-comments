[
  {
    "id" : "1e74acf0-773d-47d3-bf62-57ce971b8bff",
    "prId" : 32363,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32363#pullrequestreview-261453035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09646bf7-89a1-4629-883e-ccd4ee272f8e",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "@andrewbranch it seems you dropped the code necessary to avoid changing the parsing of NewExpression.\r\n\r\nHowever, there's a whole category of exceptions that's not handled here: if the parenthesized AwaitExpression is at the start of the statement, the fixed code could parse as declaration instead of expression:\r\n\r\n```ts\r\n(await function(){}());\r\n(await class {static fn(){}}.fn());\r\n(await {fn() {}}.fn());\r\n```\r\n\r\nThese cases are already handled in factory.ts, see the uses of `getLeftmostExpression`",
        "createdAt" : "2019-07-12T20:08:00Z",
        "updatedAt" : "2019-07-12T20:08:00Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "f22dc9d6c23fab2c190e23c27f81ab4efee4163b",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@\n        const parenthesizedExpression = tryCast(awaitExpression.parent, isParenthesizedExpression);\n        const removeParens = parenthesizedExpression && (isIdentifier(awaitExpression.expression) || isCallExpression(awaitExpression.expression));\n        changeTracker.replaceNode(sourceFile, removeParens ? parenthesizedExpression || awaitExpression : awaitExpression, awaitExpression.expression);\n    }"
  }
]