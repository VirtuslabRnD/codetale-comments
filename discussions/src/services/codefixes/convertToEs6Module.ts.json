[
  {
    "id" : "19d7395f-db05-476a-bfc4-d9783b2b5571",
    "prId" : 40987,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40987#pullrequestreview-505246161",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1059e2ab-e03d-472a-b861-74f03392ae0b",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "is a change to convertAssignment already in this PR? Or did it already take a map of use sites to unqualify?",
        "createdAt" : "2020-10-08T22:19:44Z",
        "updatedAt" : "2020-10-09T18:59:06Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "55f294d3-fb45-4b92-985b-0c38ffccd0d1",
        "parentId" : "1059e2ab-e03d-472a-b861-74f03392ae0b",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "It’s here, GitHub folded over it: https://github.com/microsoft/TypeScript/pull/40987/files#diff-d91b63cfe65f0adf550d61fede06a78dR213",
        "createdAt" : "2020-10-08T23:34:52Z",
        "updatedAt" : "2020-10-09T18:59:06Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b7e98bedbfa31a3e88b86cf09cde6a5f42f2f63",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +140,144 @@                    case SyntaxKind.BinaryExpression: {\n                        const { operatorToken } = expression as BinaryExpression;\n                        return operatorToken.kind === SyntaxKind.EqualsToken && convertAssignment(sourceFile, checker, expression as BinaryExpression, changes, exports, useSitesToUnqualify);\n                    }\n                }"
  },
  {
    "id" : "4ad410af-f46d-471b-a5fc-4f9124b23580",
    "prId" : 40987,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40987#pullrequestreview-505245176",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "908eddc0-ca16-4a72-8459-c4939836dff0",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "This function seems a bit superfluous to me; there's only one call with a second argument.\r\nI guess it lets you avoid writing casts or explicit return types in some places?",
        "createdAt" : "2020-10-08T22:26:33Z",
        "updatedAt" : "2020-10-09T18:59:06Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "25d8df16-42cb-4f28-ad23-b0221eb76c04",
        "parentId" : "908eddc0-ca16-4a72-8459-c4939836dff0",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "It was because of all the places that _didn’t_ have the second argument that I added this; all those were one-liner returns that would have become four lines in order to add the object literal with `useSitesToUnqualify: undefined` on a line.",
        "createdAt" : "2020-10-08T23:31:52Z",
        "updatedAt" : "2020-10-09T18:59:06Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b7e98bedbfa31a3e88b86cf09cde6a5f42f2f63",
    "line" : 334,
    "diffHunk" : "@@ -1,1 +589,593 @@    }\n\n    function convertedImports(newImports: readonly Node[], useSitesToUnqualify?: ESMap<Node, Node>): ConvertedImports {\n        return {\n            newImports,"
  },
  {
    "id" : "40fad658-a7dc-42dd-895c-5ecf8b711ff4",
    "prId" : 40987,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40987#pullrequestreview-505247869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34ef20be-becb-450a-9756-697df00fa7ae",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I don't know this code at all, but it seems like there are a lot of potential places that need to be threaded through with `useSitesToUnqualify`. Are you confident you didn't miss any?",
        "createdAt" : "2020-10-08T22:42:51Z",
        "updatedAt" : "2020-10-09T18:59:06Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "ee7d725f-fd98-44c8-954a-7935a52c7e9d",
        "parentId" : "34ef20be-becb-450a-9756-697df00fa7ae",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yep, pretty confident. I had never seen this code before either, but I ended up reading pretty much all the parts that actually perform text changes.",
        "createdAt" : "2020-10-08T23:40:13Z",
        "updatedAt" : "2020-10-09T18:59:06Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b7e98bedbfa31a3e88b86cf09cde6a5f42f2f63",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +234,238 @@            }\n            else {\n                const replacement = isObjectLiteralExpression(right) ? tryChangeModuleExportsObject(right, useSitesToUnqualify)\n                    : isRequireCall(right, /*checkArgumentIsStringLiteralLike*/ true) ? convertReExportAll(right.arguments[0], checker)\n                    : undefined;"
  },
  {
    "id" : "4f52c433-48ed-41f0-b701-8be81ae6597a",
    "prId" : 24652,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24652#pullrequestreview-125721592",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ace49091-9a59-4d1a-87e9-7646ff476b9f",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "what about the other preferences? why aren't we pass the other ones too?",
        "createdAt" : "2018-06-04T17:43:49Z",
        "updatedAt" : "2018-06-04T17:43:49Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "dfbc1dda-921a-4518-a3de-3a798e4f9c5e",
        "parentId" : "ace49091-9a59-4d1a-87e9-7646ff476b9f",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "We're currently not using any other preferences; if we did we would need to create a `ProcessedPreferences` interface since we don't want to pass raw preferences, we want preferences with quote style inferred.",
        "createdAt" : "2018-06-04T17:52:49Z",
        "updatedAt" : "2018-06-04T17:52:49Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "d921e906-d996-4cca-864b-fc14d4317eca",
        "parentId" : "ace49091-9a59-4d1a-87e9-7646ff476b9f",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "so shouldn't it be :\r\n\r\n```ts\r\n{...preferences, quotePreference: getQuotePreference(prefrences)} \r\n```",
        "createdAt" : "2018-06-04T19:15:08Z",
        "updatedAt" : "2018-06-04T19:15:08Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "87465439-e493-4e7c-9841-8fcfbef9dbc8",
        "parentId" : "ace49091-9a59-4d1a-87e9-7646ff476b9f",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`quotePreference` in `UserPreferences` is a different type than `QuotePreference` -- and it should be, because we want the type checker to ensure that we've processed the preferences.",
        "createdAt" : "2018-06-04T19:43:12Z",
        "updatedAt" : "2018-06-04T19:43:13Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "4157dbcf-1581-483f-b87b-c6510a58241d",
        "parentId" : "ace49091-9a59-4d1a-87e9-7646ff476b9f",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "but we are leaving behind all other preferences.. the next user preference we add will not be passed through.",
        "createdAt" : "2018-06-04T19:59:49Z",
        "updatedAt" : "2018-06-04T19:59:49Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "b593580b-71a4-4aaf-b0e6-b2005376cfde",
        "parentId" : "ace49091-9a59-4d1a-87e9-7646ff476b9f",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "That's true, which means we would have to change the code to pass more parameters if that turned out to be necessary. Or I could create `ProcessedPreferences` interface right now if you prefer?",
        "createdAt" : "2018-06-04T20:02:40Z",
        "updatedAt" : "2018-06-04T20:02:40Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc4cfe69375ddc107899d5140873ace396070fbc",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +9,13 @@                if (moduleExportsChangedToDefault) {\n                    for (const importingFile of program.getSourceFiles()) {\n                        fixImportOfModuleExports(importingFile, sourceFile, changes, getQuotePreference(importingFile, preferences));\n                    }\n                }"
  },
  {
    "id" : "f8e6bf66-e179-4a0d-9e4e-0b10f793ea57",
    "prId" : 22507,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22507#pullrequestreview-111743369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "949798b5-be86-4c86-80d7-26513ed98ba0",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Will this clobber trailing trivia on the semicolon?",
        "createdAt" : "2018-04-12T18:04:48Z",
        "updatedAt" : "2018-04-16T19:59:34Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "5a41bdfa-af3b-4438-a7ee-cb90cad8e2a4",
        "parentId" : "949798b5-be86-4c86-80d7-26513ed98ba0",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "#23373",
        "createdAt" : "2018-04-12T18:35:46Z",
        "updatedAt" : "2018-04-16T19:59:34Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2415f2f97dea0579820b6b7b0b0e63c67cb9d1ac",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +310,314 @@\n            const semi = findChildOfKind(parent, SyntaxKind.SemicolonToken, sourceFile);\n            if (semi) changes.deleteNode(sourceFile, semi, { useNonAdjustedEndPosition: true });\n        }\n        else {"
  }
]