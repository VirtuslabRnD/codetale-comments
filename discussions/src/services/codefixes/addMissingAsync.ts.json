[
  {
    "id" : "cf959bcd-8c16-4b95-b349-df2df02383af",
    "prId" : 36342,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36342#pullrequestreview-346309484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c57ce950-74d4-43de-b006-51b8960306aa",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Can this code be shared with `isMissingAwaitError` in `addMissingAwait.ts`?  It seems like finding a diagnostic with particular related information might be a general utility.",
        "createdAt" : "2020-01-22T01:42:04Z",
        "updatedAt" : "2020-02-15T01:02:15Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "f85000a1-f597-4a07-9c08-9fa79e10db08",
        "parentId" : "c57ce950-74d4-43de-b006-51b8960306aa",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Not quite! In the other quick fix, we're checking if the diagnostic's span matches the input span, then returning the diagnostic if it matches and has the target related span code. In this quick fix, we don't do the filtering on related span at the matching step, because we're looking to `find` the span of the related span (so we can use that instead). So, yes, there's a common iteration bit, but to handle the bits variable between the two is essentially just a `some` with variable condition, onto which we then append an optional extra filter/map on the final result. Which seems like a bit too multifunctional for a single helper for my tastes.\r\n\r\nBut it should totally feel similar, since I started  writing this quick fix by copying the `addMissingAwait` quick fix, which is why the span-matching check is almost identical in structure.",
        "createdAt" : "2020-01-22T02:07:45Z",
        "updatedAt" : "2020-02-15T01:02:15Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b0ea9450b0e7badfb2fb4c0a24d63239156196a",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +14,18 @@        getCodeActions: context => {\n            const { sourceFile, errorCode, cancellationToken, program, span } = context;\n            const diagnostic = find(program.getDiagnosticsProducingTypeChecker().getDiagnostics(sourceFile, cancellationToken), getIsMatchingAsyncError(span, errorCode));\n            const directSpan = diagnostic && diagnostic.relatedInformation && find(diagnostic.relatedInformation, r => r.code === Diagnostics.Did_you_mean_to_mark_this_function_as_async.code) as TextSpan | undefined;\n"
  }
]