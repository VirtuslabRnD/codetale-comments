[
  {
    "id" : "0abba870-4e62-4425-8236-5665f8c90014",
    "prId" : 41561,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41561#pullrequestreview-542624893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f607969c-a782-4452-a788-483283a6feef",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I'm not sure if it's better, but you could also generate:\r\n\r\n```ts\r\nreturn names.filter(/** \r\n * @param {string} name\r\n * @param {number} index\r\n */ (string, index ) => ....)\r\n```\r\n\r\nThat's probably what a human would write, but it's way harder to format properly.\r\n\r\nDid you consider that option? Do you think it would work?\r\n```",
        "createdAt" : "2020-11-30T22:50:46Z",
        "updatedAt" : "2020-12-02T09:06:42Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "d998156a-f2ca-4eb3-bed7-f1152e597b33",
        "parentId" : "f607969c-a782-4452-a788-483283a6feef",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "No, I didn't. I just used the option from the `Expected behavior` section. If the proposed option better, I can try to change. I think we can ask the author of the issue if it is an acceptable option for him.\r\n\r\nMaybe comment should be formatted like so\r\n\r\n```ts\r\nreturn names.filter(\r\n    /**\r\n     * @param {string} name\r\n     * @param {number} index\r\n     */\r\n    (string, index) => index\r\n);\r\n```\r\n\r\n",
        "createdAt" : "2020-12-01T10:43:28Z",
        "updatedAt" : "2020-12-02T09:06:42Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      },
      {
        "id" : "ca5f1fcb-ceaf-4094-93f0-4e0f19e53f43",
        "parentId" : "f607969c-a782-4452-a788-483283a6feef",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I commented on the bug, but let's proceed with what you have now.",
        "createdAt" : "2020-12-02T01:01:48Z",
        "updatedAt" : "2020-12-02T09:06:42Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "e44f2435-6a29-470f-ace4-e5886f75394d",
        "parentId" : "f607969c-a782-4452-a788-483283a6feef",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "Oke",
        "createdAt" : "2020-12-02T09:07:07Z",
        "updatedAt" : "2020-12-02T09:07:07Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5d96b251933ad250ee3746d5cf02c05b9a5a153",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +363,367 @@            }\n\n            forEach(inferences, ({ typeNode, param }) => {\n                const typeTag = factory.createJSDocTypeTag(/*tagName*/ undefined, factory.createJSDocTypeExpression(typeNode));\n                const jsDoc = factory.createJSDocComment(/*comment*/ undefined, [typeTag]);"
  },
  {
    "id" : "7e203823-19d7-4b0f-a7dd-e693b2b66597",
    "prId" : 33915,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33915#pullrequestreview-300400666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2eac0f77-a252-4854-a749-9d1663fbe28b",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Is this the first codefix to run another codefix and merge its actions? Seems like something that would have a common utility inside the codefox folder.",
        "createdAt" : "2019-10-10T21:19:09Z",
        "updatedAt" : "2019-10-10T23:20:00Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "3aafc83f-7cd6-4494-b191-f295a44a34f4",
        "parentId" : "2eac0f77-a252-4854-a749-9d1663fbe28b",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Completions calls functions from importFixes, but AFAIK no other codefix has called another codefix.",
        "createdAt" : "2019-10-10T23:15:04Z",
        "updatedAt" : "2019-10-10T23:20:00Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "052a9b29571b77b62e9bf15d16dca7597dfb9d05",
    "line" : 198,
    "diffHunk" : "@@ -1,1 +332,336 @@                    for (const change of action.codeAction.changes) {\n                        const file = sourceFile.fileName === change.fileName ? sourceFile : Debug.assertDefined(program.getSourceFile(change.fileName));\n                        changes.pushRaw(file, change);\n                    }\n                    return true;"
  },
  {
    "id" : "a3dcca73-2041-4e5e-a5b7-b19743203634",
    "prId" : 33263,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33263#pullrequestreview-284376223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "448aa65e-43ad-4af1-8e39-04ed3ce60f88",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "cleanup: all Usage properties are now required and Usages are created with createEmptyUsage.",
        "createdAt" : "2019-09-05T16:07:15Z",
        "updatedAt" : "2019-09-23T23:00:57Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "84e857b6f3624fcb01db807affa49ca8d9580f3b",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +419,423 @@\n        interface Usage {\n            isNumber: boolean | undefined;\n            isString: boolean | undefined;\n            /** Used ambiguously, eg x + ___ or object[___]; results in string | number if no other evidence exists */"
  },
  {
    "id" : "e3b0a2b5-adb7-47a2-84c3-1e03290656fa",
    "prId" : 33263,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33263#pullrequestreview-284376223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18ffcbe5-cf9e-4a41-901a-25adb56034b6",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "driveby fix (2a)",
        "createdAt" : "2019-09-05T16:07:46Z",
        "updatedAt" : "2019-09-23T23:00:57Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "84e857b6f3624fcb01db807affa49ca8d9580f3b",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +697,701 @@                        usage.isString = true;\n                    }\n                    else if (otherOperandType.flags & TypeFlags.Any) {\n                        // do nothing, maybe we'll learn something elsewhere\n                    }"
  },
  {
    "id" : "779315c2-df11-4f6c-83bf-16a6a055b13d",
    "prId" : 33263,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33263#pullrequestreview-284376223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f789575c-e1be-4d9f-9916-031f1dcf243b",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "driveby fix (2b)",
        "createdAt" : "2019-09-05T16:07:56Z",
        "updatedAt" : "2019-09-23T23:00:57Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "84e857b6f3624fcb01db807affa49ca8d9580f3b",
    "line" : 231,
    "diffHunk" : "@@ -1,1 +850,854 @@                good.push(combineAnonymousTypes(anons));\n            }\n            return checker.getWidenedType(checker.getUnionType(good.map(checker.getBaseTypeOfLiteralType), UnionReduction.Subtype));\n        }\n"
  },
  {
    "id" : "2a5984fc-8efd-4aec-9bb5-055c1694a1e0",
    "prId" : 33263,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33263#pullrequestreview-285032764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f91619e9-d3e2-49f2-90ec-f45d3f77f3c4",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "driveby fix (2c)",
        "createdAt" : "2019-09-06T18:35:04Z",
        "updatedAt" : "2019-09-23T23:00:57Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "84e857b6f3624fcb01db807affa49ca8d9580f3b",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +553,557 @@            switch (node.parent.kind) {\n                case SyntaxKind.ExpressionStatement:\n                    addCandidateType(usage, checker.getVoidType());\n                    break;\n                case SyntaxKind.PostfixUnaryExpression:"
  },
  {
    "id" : "3e94fd84-eddf-43d7-a8a9-60e2726ad31b",
    "prId" : 33263,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33263#pullrequestreview-287598596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b13d495-c443-4899-b44f-4667d4255290",
        "parentId" : null,
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "What is a `return_`?",
        "createdAt" : "2019-09-10T18:53:31Z",
        "updatedAt" : "2019-09-23T23:00:57Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      },
      {
        "id" : "6ada9ef0-81dc-4433-902d-0d4b5cb6fae7",
        "parentId" : "3b13d495-c443-4899-b44f-4667d4255290",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "`return_: Usage`, which is the information we inferred about a signature's return type from calls.\r\n\r\nThe old name, `returnType`, implies that it's a type already, which it's not; that comes from inferring a usage and unifying the resulting list of types.\r\n\r\nUnifying is a bad name too, it should probably be reconcile or aggregate.",
        "createdAt" : "2019-09-12T17:46:44Z",
        "updatedAt" : "2019-09-23T23:00:57Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "84e857b6f3624fcb01db807affa49ca8d9580f3b",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +754,758 @@            }\n\n            calculateUsageOfNode(parent, call.return_);\n            if (parent.kind === SyntaxKind.CallExpression) {\n                (usage.calls || (usage.calls = [])).push(call);"
  },
  {
    "id" : "ccf119de-f1db-445b-8951-1410d5b8fd8c",
    "prId" : 33263,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33263#pullrequestreview-286364264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f4f3ebf-883c-494a-a435-646c7d59e415",
        "parentId" : null,
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "Yeah, this feels nicer to me 👍 ",
        "createdAt" : "2019-09-10T18:53:50Z",
        "updatedAt" : "2019-09-23T23:00:57Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "84e857b6f3624fcb01db807affa49ca8d9580f3b",
    "line" : 195,
    "diffHunk" : "@@ -1,1 +768,772 @@                usage.properties = createUnderscoreEscapedMap<Usage>();\n            }\n            const propertyUsage = usage.properties.get(name) || createEmptyUsage();\n            calculateUsageOfNode(parent, propertyUsage);\n            usage.properties.set(name, propertyUsage);"
  },
  {
    "id" : "234a1ae3-0ad5-4449-800a-8d5f83a6ee7e",
    "prId" : 33263,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33263#pullrequestreview-292099226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0700957c-12a8-4363-b5f8-73e56b07cc15",
        "parentId" : null,
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "I'm impressed we can do this 👍 - I assume it's use by the promise and array implementations",
        "createdAt" : "2019-09-10T18:57:04Z",
        "updatedAt" : "2019-09-23T23:00:57Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      },
      {
        "id" : "72fa2ab0-c93e-4d7c-9ce6-69a286092cd6",
        "parentId" : "0700957c-12a8-4363-b5f8-73e56b07cc15",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Yep, plus I intend to expand this to other types later.",
        "createdAt" : "2019-09-23T23:01:48Z",
        "updatedAt" : "2019-09-23T23:01:49Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "84e857b6f3624fcb01db807affa49ca8d9580f3b",
    "line" : 352,
    "diffHunk" : "@@ -1,1 +965,969 @@        /**\n         * inference is limited to\n         * 1. generic types with a single parameter\n         * 2. inference to/from calls with a single signature\n         */"
  },
  {
    "id" : "d844a0e9-e493-4cf5-a425-ea6d6829ee2f",
    "prId" : 31138,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31138#pullrequestreview-244642592",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "486d3288-4c48-4e74-9455-36977c0c4290",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "what happens with no inferences? Can you add a test?\r\n\r\nI want to make sure the generated code is not broken at least. The refactor should do **something**, or else it looks like it failed. (we need to fix that general problem, but for now, inferring `any` works pretty well for this refactoring.)",
        "createdAt" : "2019-05-30T19:53:46Z",
        "updatedAt" : "2019-06-17T23:15:28Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "eb1a8933-52d4-4cac-bb97-dc8932d09242",
        "parentId" : "486d3288-4c48-4e74-9455-36977c0c4290",
        "authorId" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "body" : "👍  codeFixInferFromFunctionThisUsageNoUses.ts to verify it adds `any`.",
        "createdAt" : "2019-06-02T21:11:02Z",
        "updatedAt" : "2019-06-17T23:15:28Z",
        "lastEditedBy" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad86efbfb88cc32cccba2d8c56de51f8286a496e",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +185,189 @@            case Diagnostics.this_implicitly_has_type_any_because_it_does_not_have_a_type_annotation.code:\n                if (textChanges.isThisTypeAnnotatable(containingFunction) && markSeen(containingFunction)) {\n                    annotateThis(changes, sourceFile, containingFunction, program, host, cancellationToken);\n                    return containingFunction;\n                }"
  },
  {
    "id" : "c9d4c3ad-a9a1-4c35-bb7a-8f4e2bedec50",
    "prId" : 31138,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31138#pullrequestreview-250748298",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e808aa3c-741e-4d77-be2a-8941d5fd8e56",
        "parentId" : null,
        "authorId" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "body" : "If a function is used as the initializer of a static property declaration, should the type include `typeof`?\r\n\r\n```ts\r\nconst returnThisMember = function ([| |]) {\r\n    return this.member;\r\n}\r\n\r\nclass Container {\r\n    member = \"sample\";\r\n    static returnThisMember = returnThisMember;\r\n};\r\n```\r\n\r\nRight now it just becomes `this: Container`. If that's desirable, could you give me a pointer on how to get the `typeof` equivalent type from `declaration.parent`? I haven't figured it out 🙁 ",
        "createdAt" : "2019-06-05T21:43:35Z",
        "updatedAt" : "2019-06-17T23:15:28Z",
        "lastEditedBy" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "tags" : [
        ]
      },
      {
        "id" : "268286ac-6079-482e-9052-f9c64a56f858",
        "parentId" : "e808aa3c-741e-4d77-be2a-8941d5fd8e56",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "In your example, did you mean to say `static returnThisMember = ...`? Otherwise I need more clarification.",
        "createdAt" : "2019-06-05T23:34:23Z",
        "updatedAt" : "2019-06-17T23:15:28Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "8f9f7a05-ef4b-494f-9aad-85f9b3871aec",
        "parentId" : "e808aa3c-741e-4d77-be2a-8941d5fd8e56",
        "authorId" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "body" : "Sorry, yes, that's correct.",
        "createdAt" : "2019-06-06T00:14:03Z",
        "updatedAt" : "2019-06-17T23:15:28Z",
        "lastEditedBy" : "3d76da9c-316b-4f38-a104-935b1d718f1d",
        "tags" : [
        ]
      },
      {
        "id" : "f2fee6fd-a214-4d5e-9a9d-dd0a94fc9739",
        "parentId" : "e808aa3c-741e-4d77-be2a-8941d5fd8e56",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Inside the checker it's `getTypeOfSymbol` vs `getDeclaredTypeOfSymbol` -- both types live on the same symbol. Outside the checker I think it's `getTypeAtLocation` vs `getDeclaredTypeOfSymbol`, so you'll have to get the symbol for the latter function.",
        "createdAt" : "2019-06-17T21:14:46Z",
        "updatedAt" : "2019-06-17T23:15:28Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad86efbfb88cc32cccba2d8c56de51f8286a496e",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +728,732 @@        }\n\n        function inferTypeFromPropertyDeclaration(declaration: PropertyDeclaration, checker: TypeChecker, usageContext: UsageContext) {\n            addCandidateThisType(usageContext, checker.getTypeAtLocation(declaration.parent));\n        }"
  },
  {
    "id" : "9133f91e-4c2b-449d-a2ed-2cbd62baa256",
    "prId" : 28381,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28381#pullrequestreview-172250272",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62499ee3-8f24-4921-90bb-4491c6c33880",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "So, something can be high and low, or neither high nor low?",
        "createdAt" : "2018-11-06T19:43:31Z",
        "updatedAt" : "2018-11-06T21:32:20Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "dd19d39a-7118-46cd-b79b-680a6a4fc525",
        "parentId" : "62499ee3-8f24-4921-90bb-4491c6c33880",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Yes. I'm not sure priority is the right name, and not sure whether high/low are the right names. Ideas?",
        "createdAt" : "2018-11-06T20:54:39Z",
        "updatedAt" : "2018-11-06T21:32:20Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "83743402-3cbf-4cd3-be11-9f3eeb944981",
        "parentId" : "62499ee3-8f24-4921-90bb-4491c6c33880",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "To answer your question, an inference can be high, low or neither. If there is a mistake in the specification, it can be low and high.  I'll add an assert.",
        "createdAt" : "2018-11-06T21:30:14Z",
        "updatedAt" : "2018-11-06T21:32:20Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "517718dd-595d-44b8-8739-27b9d8859db4",
        "parentId" : "62499ee3-8f24-4921-90bb-4491c6c33880",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Maybe this could be one function returning an enum.",
        "createdAt" : "2018-11-06T21:36:32Z",
        "updatedAt" : "2018-11-06T21:36:32Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "42946128-4f45-46c3-8322-af01899b4483",
        "parentId" : "62499ee3-8f24-4921-90bb-4491c6c33880",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Hm. I tried it and it simplified removeLowPriorityInferences a bit, made the vacuous/non-vacuous check simpler, and made the other two checks harder to read. I think it's a wash and I prefer the interface structure.",
        "createdAt" : "2018-11-06T21:51:36Z",
        "updatedAt" : "2018-11-06T21:51:36Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "29c2e23714f0493a50ea39792de8c8758d6e5820",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +673,677 @@\n        interface Priority {\n            high: (t: Type) => boolean;\n            low: (t: Type) => boolean;\n        }"
  },
  {
    "id" : "41b95cba-921a-41d9-85ea-ba3151e19c9c",
    "prId" : 28342,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28342#pullrequestreview-171693845",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cad7357-0236-4326-a808-de73b6eb5e83",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Seems like we could combine `inferTypesFromReferences` and `unifyFromContext` to avoid exposing two different functions?",
        "createdAt" : "2018-11-05T17:43:20Z",
        "updatedAt" : "2018-11-05T17:45:43Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "9b639d10-af38-442d-b752-7935023a944e",
        "parentId" : "5cad7357-0236-4326-a808-de73b6eb5e83",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Well, the two are decoupled in inferTypeForParametersFromReferences; I decided to do the same here instead of keeping a function named `inferTypeFromReferences` around, which would just be the compose of `inferTypesFromRefences >>> unifyFromContext`.\r\n\r\nIf the pair were called together more than once I think a function like that would make sense. Right now it doesn't.",
        "createdAt" : "2018-11-05T18:25:35Z",
        "updatedAt" : "2018-11-05T18:25:35Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "3651793cf699709555487bd7f26ec01c3c3ac121",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +339,343 @@        const references = getReferences(token, program, cancellationToken);\n        const checker = program.getTypeChecker();\n        const types = InferFromReference.inferTypesFromReferences(references, checker, cancellationToken);\n        return InferFromReference.unifyFromContext(types, checker);\n    }"
  },
  {
    "id" : "094da0c4-c5ad-4b5d-8475-eec0ce6720c5",
    "prId" : 28342,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28342#pullrequestreview-171690071",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "983729a2-9002-440a-bae3-170f7f5411f8",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Do we have a constructor test?",
        "createdAt" : "2018-11-05T17:44:32Z",
        "updatedAt" : "2018-11-05T17:45:43Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "4c23995f-a28b-4277-a9ef-8a5d1f167e2a",
        "parentId" : "983729a2-9002-440a-bae3-170f7f5411f8",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "codeFixInferFromUsageMember3",
        "createdAt" : "2018-11-05T18:07:12Z",
        "updatedAt" : "2018-11-05T18:07:12Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "45be93cd-6f45-4222-8acc-da6577b93ed9",
        "parentId" : "983729a2-9002-440a-bae3-170f7f5411f8",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "In other words, coverage is not great. I'm going to improve typing of JS constructor functions next, so I'll plan to add equivalent TS tests for each new JS test.",
        "createdAt" : "2018-11-05T18:16:34Z",
        "updatedAt" : "2018-11-05T18:16:34Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "3651793cf699709555487bd7f26ec01c3c3ac121",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +347,351 @@        switch (containingFunction.kind) {\n            case SyntaxKind.Constructor:\n                searchToken = findChildOfKind<Token<SyntaxKind.ConstructorKeyword>>(containingFunction, SyntaxKind.ConstructorKeyword, sourceFile);\n                break;\n            case SyntaxKind.FunctionExpression:"
  },
  {
    "id" : "53134db9-0293-41e9-80e1-38b147bc0a30",
    "prId" : 28244,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28244#pullrequestreview-170502158",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cd7ad90-e373-4984-9df9-0785ede90d06",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Could use some tests of combining different object inferences.",
        "createdAt" : "2018-10-31T22:18:05Z",
        "updatedAt" : "2018-10-31T23:17:58Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "8af5841f-4c4e-4813-8e83-07f4095cb6e6",
        "parentId" : "5cd7ad90-e373-4984-9df9-0785ede90d06",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I added one, and now I'm taking a look at the user tests for more examples.",
        "createdAt" : "2018-10-31T22:44:57Z",
        "updatedAt" : "2018-10-31T23:17:58Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "5138b421ca75912f77d725b6348351023c09dc07",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +708,712 @@                }\n            }\n            const members = mapEntries(props, (name, types) => {\n                const isOptional = types.length < anons.length ? SymbolFlags.Optional : 0;\n                const s = checker.createSymbol(SymbolFlags.Property | isOptional, name as __String);"
  },
  {
    "id" : "198815fc-12e7-4c67-8b95-89d99ca5c8fe",
    "prId" : 28206,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28206#pullrequestreview-169457801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98a69fac-e4cc-4996-96a0-064f1a50648b",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Would it be better to use `type.flags & TypeFlags.Any` here?",
        "createdAt" : "2018-10-29T17:50:26Z",
        "updatedAt" : "2018-10-29T19:56:35Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "d1001a49-03f8-4869-8918-0c84a7f7c9f5",
        "parentId" : "98a69fac-e4cc-4996-96a0-064f1a50648b",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Short answer: no.\r\nLong answer: here we are checking for *exactly* the fallback type produced inside inferFromUsage.ts, not other types that come from the checker like errorType. Those types are already filtered out in addCandidateType, which does use TypeFlags.Any.",
        "createdAt" : "2018-10-29T18:38:35Z",
        "updatedAt" : "2018-10-29T19:56:35Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "7920a9fe8829bb19888a8b837c1a7140b89a203a",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +228,232 @@        if (param && isIdentifier(setAccessorDeclaration.name) && isIdentifier(param.name)) {\n            let type = inferTypeForVariableFromUsage(setAccessorDeclaration.name, program, cancellationToken);\n            if (type === program.getTypeChecker().getAnyType()) {\n                type = inferTypeForVariableFromUsage(param.name, program, cancellationToken);\n            }"
  },
  {
    "id" : "2554f006-5235-47c3-8db8-13d7d7cc9a0f",
    "prId" : 28115,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28115#pullrequestreview-168146265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53260485-0610-4d2c-8422-1358dfe42e9c",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Return types don't get a contextual type. (Is there an issue for that?) This made it look like `isOptional` was unused. Currently it's write-only but that should change in #27978.",
        "createdAt" : "2018-10-24T22:28:27Z",
        "updatedAt" : "2018-10-24T22:28:39Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8326b5c76f7c3b6fc901ad8d4b3a11925e2cf5e1",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +309,313 @@            const isConstructor = declaration.kind === SyntaxKind.Constructor;\n            const callContexts = isConstructor ? usageContext.constructContexts : usageContext.callContexts;\n            return callContexts && declaration.parameters.map((parameter, parameterIndex): ParameterInference => {\n                const types: Type[] = [];\n                const isRest = isRestParameter(parameter);"
  },
  {
    "id" : "52b8a4eb-ce7e-414c-80fa-83c362a563cc",
    "prId" : 27610,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27610#pullrequestreview-162625014",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48336070-9904-4a2d-a973-f95ebf700c7a",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Why do we have both of these -- `isSetAccessor` and `isSetAccessorDeclaration`?",
        "createdAt" : "2018-10-08T18:12:30Z",
        "updatedAt" : "2018-10-09T17:12:58Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "b0e7ccc5-1722-464b-abd8-504b1802761d",
        "parentId" : "48336070-9904-4a2d-a973-f95ebf700c7a",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "No reason, but removing one would change the public API, so I decided not do it in this PR.",
        "createdAt" : "2018-10-08T20:20:06Z",
        "updatedAt" : "2018-10-09T17:12:58Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "5066880828c48e6e1233338b318c274f49de1909",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +48,52 @@        switch (errorCode) {\n            case Diagnostics.Parameter_0_implicitly_has_an_1_type.code:\n                return isSetAccessorDeclaration(getContainingFunction(token)!) ? Diagnostics.Infer_type_of_0_from_usage : Diagnostics.Infer_parameter_types_from_usage; // TODO: GH#18217\n            case Diagnostics.Rest_parameter_0_implicitly_has_an_any_type.code:\n                return Diagnostics.Infer_parameter_types_from_usage;"
  },
  {
    "id" : "7def878d-28ee-49a7-af5f-b923255d8f07",
    "prId" : 27610,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27610#pullrequestreview-162642701",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bed53b6-bcc3-4240-8175-89050dc84a72",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Should `isOptional` be set here?",
        "createdAt" : "2018-10-08T18:23:01Z",
        "updatedAt" : "2018-10-09T17:12:58Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "476e6ed8-cc92-4378-b674-2d1c0dd9ce09",
        "parentId" : "9bed53b6-bcc3-4240-8175-89050dc84a72",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "If it's not set, then it's falsy, meaning required. I briefly had `isOptional: boolean`, but requiring its specification in all 4 construction locations seemed needless given that it's usually falsy.",
        "createdAt" : "2018-10-08T21:16:31Z",
        "updatedAt" : "2018-10-09T17:12:58Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "5066880828c48e6e1233338b318c274f49de1909",
    "line" : 193,
    "diffHunk" : "@@ -1,1 +330,334 @@                }\n                if (!types.length) {\n                    return { declaration: parameter };\n                }\n                const type = checker.getWidenedType(checker.getUnionType(types, UnionReduction.Subtype));"
  },
  {
    "id" : "3f0d4cd4-b5fd-40de-b609-8d9463bddb47",
    "prId" : 27610,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27610#pullrequestreview-163024233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "810b3518-b435-4b15-aa61-61f8be364a16",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">    [](start = 0, length = 3)\r\n\r\nThis looks unintentional.",
        "createdAt" : "2018-10-09T18:06:11Z",
        "updatedAt" : "2018-10-09T18:06:11Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5066880828c48e6e1233338b318c274f49de1909",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +210,214 @@    }\n\n   function getTypeNodeIfAccessible(type: Type, enclosingScope: Node, program: Program, host: LanguageServiceHost): TypeNode | undefined {\n        const checker = program.getTypeChecker();\n        let typeIsAccessible = true;"
  },
  {
    "id" : "3af8ac80-7229-4d2c-a82c-90a57d906c44",
    "prId" : 27610,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27610#pullrequestreview-163025523",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fda1474a-02e0-443c-85c1-16ead50e1678",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">isOptional [](start = 20, length = 10)\r\n\r\nI don't understand this flag.  I'll drop by.",
        "createdAt" : "2018-10-09T18:09:16Z",
        "updatedAt" : "2018-10-09T18:09:16Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5066880828c48e6e1233338b318c274f49de1909",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +313,317 @@                const types: Type[] = [];\n                const isRest = isRestParameter(parameter);\n                let isOptional = false;\n                for (const callContext of callContexts) {\n                    if (callContext.argumentTypes.length <= parameterIndex) {"
  },
  {
    "id" : "44334b8a-4ff9-4379-b184-7248b0923dbf",
    "prId" : 27610,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27610#pullrequestreview-163033339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51d5cad6-a871-49ef-829a-efe74db7fdb3",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">isInJSFile [](start = 37, length = 10)\r\n\r\nI assume `isInJSFile` is very cheap but I would habitually have either pulled it out of the loop or checked `isOptional ||`.",
        "createdAt" : "2018-10-09T18:27:56Z",
        "updatedAt" : "2018-10-09T18:27:56Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5066880828c48e6e1233338b318c274f49de1909",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +316,320 @@                for (const callContext of callContexts) {\n                    if (callContext.argumentTypes.length <= parameterIndex) {\n                        isOptional = isInJSFile(declaration);\n                        continue;\n                    }"
  },
  {
    "id" : "640ad1c4-f536-4ca1-8bdd-ad97f35586ea",
    "prId" : 20545,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20545#pullrequestreview-82007423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a4c95e1-74cc-4e3a-9495-870dd663e54f",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Is the `references.length !== 1` required? Seems weird to expect an array of exactly 1 object. If there are 2, is it better to return an empty array than ignore the 2nd unexpected element? Is it guaranteed/expected to always return 1 element in this context?",
        "createdAt" : "2017-12-07T21:26:07Z",
        "updatedAt" : "2017-12-07T22:27:54Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "7115400c-e63c-49c8-99d6-b4db06b95260",
        "parentId" : "4a4c95e1-74cc-4e3a-9495-870dd663e54f",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "This variable is probably badly named. `references` is not an array of references to a symbol, it's (effectively) an array of arrays; each element of the outer array refers to a different symbol (as could occur if you had a type and a value with the same name used in a position where either meaning might be valid, such as an `import` statement), and each subelement is the references to that symbol. In this case it would be very unusual (IOW we have no idea what's going on or what the right thing to do is) if we found *more than one symbol* matching a certain property.",
        "createdAt" : "2017-12-07T21:32:58Z",
        "updatedAt" : "2017-12-07T22:27:54Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "2606fb25-b035-4120-9ef2-18e37e97d956",
        "parentId" : "4a4c95e1-74cc-4e3a-9495-870dd663e54f",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "Is it better to remove the asserts or leave them? There is minimal user impact either way (though throwing errors probably isn't good for perf), since we merely end up swallowing the error and writing it as part of the failure response.",
        "createdAt" : "2017-12-07T23:15:34Z",
        "updatedAt" : "2017-12-07T23:22:19Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "92c3b23a32344037828e407bfc82818136c7d6bc",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +203,207 @@            token.getStart(sourceFile));\n\n        if (!references || references.length !== 1) {\n            return [];\n        }"
  },
  {
    "id" : "2d87b24b-1254-4092-9cec-1a183e09ced6",
    "prId" : 14786,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14786#pullrequestreview-67825537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd6c1865-a70b-4f6e-a6dc-afe9f7de039c",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I feel like there should be assertions when you cast based on the error code you're matching on.",
        "createdAt" : "2017-05-09T05:09:58Z",
        "updatedAt" : "2017-10-12T00:34:48Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "04835867-f928-4600-a61f-0e9d09932645",
        "parentId" : "dd6c1865-a70b-4f6e-a6dc-afe9f7de039c",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "We asserted a few lines earlier that it has to be an identifier, DotDotDotToken, PublicKeyword, ProtectedKeyword, or ReadonlyKeyword. since this is a variable declaration error, we know it can not be anything that is not an identifier (i.e. binding pattern).",
        "createdAt" : "2017-10-07T05:05:22Z",
        "updatedAt" : "2017-10-12T00:34:48Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e39d48f6515345f2433607141531b9a14e25413",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@                return getCodeActionForVariableDeclaration(<PropertyDeclaration | PropertySignature | VariableDeclaration>token.parent);\n            case Diagnostics.Variable_0_implicitly_has_an_1_type.code:\n                return getCodeActionForVariableUsage(<Identifier>token);\n\n            // Parameter declarations"
  },
  {
    "id" : "4ef806c0-2f01-4f11-9720-bc500f5f69b3",
    "prId" : 14786,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14786#pullrequestreview-75251549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a0ea8f3-4b18-4fd3-9b24-53b79913e86f",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "so it's either from usage from calls or from intra-function usages, but not both? Why have inferences from call sites win?",
        "createdAt" : "2017-10-10T21:24:47Z",
        "updatedAt" : "2017-10-12T00:34:48Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "6e688b45-57b9-4872-b199-7e2a8220068a",
        "parentId" : "9a0ea8f3-4b18-4fd3-9b24-53b79913e86f",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "If we do the function body first we are guranteed to manifacture something that the makes the funciton happy, but it usually will be too general. giving usage precedence allows us to get more specific types.. e.g.:\r\n\r\n```ts\r\nfunction length(a) { return a.length; }\r\n\r\nlength([1,2,3]);\r\n```\r\n\r\ninferring from function body will give `a` a type `{ length: any}`. which is accurate, but rarely what the user would write manually.\r\n\r\ninferring from the call site gives us `number[]` which is more like it..",
        "createdAt" : "2017-10-11T20:49:57Z",
        "updatedAt" : "2017-10-12T00:34:48Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "a07b9bbd-1cf9-4f16-99af-bc9cb9217dd9",
        "parentId" : "9a0ea8f3-4b18-4fd3-9b24-53b79913e86f",
        "authorId" : "a87d80b7-41de-4730-8937-7bebba1fc058",
        "body" : "Perhaps you should infer `<T extends { length }>(a: T) => ...` instead. In combination with return type inference, this should yield `<T extends { length }>(a: T) => T[\"length\"]`, which will work correctly when applied to arrays (or indeed anything with a `length` property).",
        "createdAt" : "2017-11-08T19:04:09Z",
        "updatedAt" : "2017-11-08T19:04:09Z",
        "lastEditedBy" : "a87d80b7-41de-4730-8937-7bebba1fc058",
        "tags" : [
        ]
      },
      {
        "id" : "606e7080-72ec-47a3-a623-14620b2de938",
        "parentId" : "9a0ea8f3-4b18-4fd3-9b24-53b79913e86f",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I tried that.. the types get unwieldy very fast.. and you have this structural type that has `length`, `push`, `splice`, with an element that is has `kind`, instead of just `Node[]`. the call sites provided the more user-identifiable name.. though the first one is more correct.",
        "createdAt" : "2017-11-08T21:15:21Z",
        "updatedAt" : "2017-11-08T21:15:21Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e39d48f6515345f2433607141531b9a14e25413",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +116,120 @@            }\n\n            const types = inferTypeForParametersFromUsage(containingFunction) ||\n                map(containingFunction.parameters, p => isIdentifier(p.name) && inferTypeForVariableFromUsage(p.name));\n"
  },
  {
    "id" : "661c34b4-2633-4474-86a5-e011b1a565fc",
    "prId" : 14786,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14786#pullrequestreview-68748451",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd05c278-9f43-47be-9093-6e8c12a484f5",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "references might be in jsdoc comments, so getTokenAtPosition might not be an identifier. and might in fact be undefined? (probably not in typescript, but perhaps in Javascript)",
        "createdAt" : "2017-10-10T22:01:02Z",
        "updatedAt" : "2017-10-12T00:34:48Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "95ac32fa-452b-4ab2-b6f0-744f51016168",
        "parentId" : "fd05c278-9f43-47be-9093-6e8c12a484f5",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can not get this to barf in a .ts file. i will have to revisit that when i add the .js part to it. Added a check to the top of the function to ensure we are do not offer the quickfix in a .js file",
        "createdAt" : "2017-10-11T20:54:12Z",
        "updatedAt" : "2017-10-12T00:34:48Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e39d48f6515345f2433607141531b9a14e25413",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +197,201 @@            Debug.assert(references.length === 1, \"Found more references than expected\");\n\n            return map(references[0].references, r => <Identifier>getTokenAtPosition(program.getSourceFile(r.fileName), r.textSpan.start, /*includeJsDocComment*/ false));\n        }\n"
  },
  {
    "id" : "f5c56557-063d-46ad-b1b9-9314a5a0983b",
    "prId" : 14786,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14786#pullrequestreview-68748612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6032c032-7273-46e9-99cf-9b2a3d4dd7eb",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "this code looks copied from somewhere. is it too hard to export it?",
        "createdAt" : "2017-10-10T22:03:27Z",
        "updatedAt" : "2017-10-12T00:34:48Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "6e0aa818-f46d-4c2d-b23e-c5acc869c10c",
        "parentId" : "6032c032-7273-46e9-99cf-9b2a3d4dd7eb",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I need to move this to a change tracker and use typeToTypeNode, but waiting on Wesley's changes.",
        "createdAt" : "2017-10-11T20:54:46Z",
        "updatedAt" : "2017-10-12T00:34:48Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e39d48f6515345f2433607141531b9a14e25413",
    "line" : 228,
    "diffHunk" : "@@ -1,1 +226,230 @@\n                const writeText: (text: string) => void = text => str += text;\n                writer = {\n                    string: () => typeIsAccessible ? str : undefined,\n                    writeKeyword: writeText,"
  }
]