[
  {
    "id" : "6fa28fd9-c22f-414e-8e5c-e026f5a708a2",
    "prId" : 41105,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41105#pullrequestreview-508801138",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d653a4a8-0eb3-4392-b314-e005713e5d32",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "suggestions for reducing duplication are welcome here",
        "createdAt" : "2020-10-14T22:01:43Z",
        "updatedAt" : "2020-10-14T22:01:43Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "04e7190d96e3c3af8127d904e7affb616c559d41",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +40,44 @@                if (deletion.length) {\n                    return [createCodeFixAction(fixName, deletion, [Diagnostics.Remove_unused_declaration_for_Colon_0, token.getText(sourceFile)], fixIdDeleteImports, Diagnostics.Delete_all_unused_imports)];\n                }\n            }\n"
  },
  {
    "id" : "385189af-3539-485e-8e80-c76b13ee3dd9",
    "prId" : 40299,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40299#pullrequestreview-485125634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "173e75c3-7f9d-4d6e-b3ba-6fa47dc537c0",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "don't constructors have the same constraints as functions? I don't understand why the new restriction only applies to named functions used \"like a callback\".",
        "createdAt" : "2020-09-08T23:05:02Z",
        "updatedAt" : "2020-09-08T23:13:28Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "cbb2c6f5-d1a8-47b8-aff2-09cfbab506b8",
        "parentId" : "173e75c3-7f9d-4d6e-b3ba-6fa47dc537c0",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "```ts\r\ndeclare function fn(cb: (x: number, y: string) => void): void;\r\n```\r\n\r\n```ts\r\nfn((a, b) => b);\r\n```\r\n`a` will not be removed, because there is a condition to handle that. however, this condition is not applying to `FunctionDeclaration` which can be used as a callback too.\r\n\r\nhttps://github.com/microsoft/TypeScript/blob/2b0278a88f766e87bd0fb839b1048d1e17894969/src/services/codefixes/fixUnusedIdentifier.ts#L254-L263\r\n\r\n```ts\r\nfunction callback(a: number, b: number) { b; };\r\nfn(callback); \r\n```\r\n`a` will be removed because when the QF checks the possibility to remove parameters for `FunctionDeclaration` it \r\nalways allows that \r\n\r\nhttps://github.com/microsoft/TypeScript/blob/2b0278a88f766e87bd0fb839b1048d1e17894969/src/services/codefixes/fixUnusedIdentifier.ts#L251-L252\r\n\r\nas a result,  \r\n\r\n```ts\r\nfunction callback(b: number) { b; };\r\nfn(callback); \r\n```\r\nHowever, deleting `a` has to be disallowed for that case. About constructors, not sure, maybe there are some cases where we need to apply the same logic as for `FunctionDeclaration`.\r\n\r\n\r\n\r\n\r\n",
        "createdAt" : "2020-09-09T08:00:29Z",
        "updatedAt" : "2020-09-09T08:00:29Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      },
      {
        "id" : "ea8f5a11-9041-453e-9961-b91efadeea80",
        "parentId" : "173e75c3-7f9d-4d6e-b3ba-6fa47dc537c0",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "ok, that makes sense. I think that eventually we'll want to expand the restrictions, or make parameter deletion smarter.",
        "createdAt" : "2020-09-09T15:23:41Z",
        "updatedAt" : "2020-09-09T15:23:41Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "b10d7bf776cabfd69db758385fc01dc3c75ba2f1",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +245,249 @@                if (isMemberSymbolInBaseType(symbol, checker)) return false;\n                // falls through\n            case SyntaxKind.Constructor:\n                return true;\n            case SyntaxKind.FunctionDeclaration: {"
  },
  {
    "id" : "600a9171-1243-4ef4-b397-6e68382b313b",
    "prId" : 36152,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36152#pullrequestreview-395746177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9fd5faf-5e47-4cb7-b20d-a706dec11fd8",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Donâ€™t you need to do this only for the JSDoc parameter tags whose name is the same as `token.text`? Try adding this test:\r\n\r\n```ts\r\n/**\r\n * @param a\r\n * @param b\r\n */\r\nfunction f(a, b) {\r\n    const x = a;\r\n}\r\n```\r\n\r\nto ensure that `b` gets renamed but `a` does not.",
        "createdAt" : "2020-04-16T16:36:15Z",
        "updatedAt" : "2020-04-17T18:26:11Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "8ec87674-b753-4e64-b85c-c9582e9663f9",
        "parentId" : "e9fd5faf-5e47-4cb7-b20d-a706dec11fd8",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Ah, I see `getJSDocParameterTags` already handles that. My bad. Thanks for adding the test anyway.",
        "createdAt" : "2020-04-17T20:17:14Z",
        "updatedAt" : "2020-04-17T20:17:18Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "a74d4594ad5a75cba18bc1778305ad2c8ea88eed",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +156,160 @@            changes.replaceNode(sourceFile, token, createIdentifier(`_${token.text}`));\n            if (isParameter(token.parent)) {\n                getJSDocParameterTags(token.parent).forEach((tag) => {\n                    if (isIdentifier(tag.name)) {\n                        changes.replaceNode(sourceFile, tag.name, createIdentifier(`_${tag.name.text}`));"
  },
  {
    "id" : "835511ee-ecc9-40f2-a8d4-89398e5a610a",
    "prId" : 24207,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24207#pullrequestreview-121207953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f52921d-477c-4d88-9039-b220595d5776",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "should we do this in the chanetracker instead, and have deleteRange filter out deletions if they are already subsumed with other ones?",
        "createdAt" : "2018-05-17T19:07:55Z",
        "updatedAt" : "2018-05-17T19:07:55Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "e0006e89-6b83-4070-9c39-574fcafa7bf6",
        "parentId" : "2f52921d-477c-4d88-9039-b220595d5776",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I think that indicates a genuine error though, that we might want to know about. There's also one case where we `replaceNode` instead that would presumably still be seen as an error by `ChangeTracker`.",
        "createdAt" : "2018-05-17T19:41:34Z",
        "updatedAt" : "2018-05-17T19:41:34Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "d47c3bf5-d0bf-4269-9805-2ac9dc93b2f8",
        "parentId" : "2f52921d-477c-4d88-9039-b220595d5776",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "so every quick fix/refactor that needs to remove things will need to do this book keeping?",
        "createdAt" : "2018-05-17T19:53:13Z",
        "updatedAt" : "2018-05-17T19:53:13Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "bd873c8f-2cac-400b-bb35-f19b4f4f3afc",
        "parentId" : "2f52921d-477c-4d88-9039-b220595d5776",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "As far as I can tell, this is the only code fix that *should* potentially delete a node and one of its children. In other cases that would be a bug that we would want to catch..",
        "createdAt" : "2018-05-17T20:41:23Z",
        "updatedAt" : "2018-05-17T20:41:23Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "544569e1ed2b632dae7b9f54c261e1a26127bf8c",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +43,47 @@        getAllCodeActions: context => {\n            // Track a set of deleted nodes that may be ancestors of other marked for deletion -- only delete the ancestors.\n            const deleted = new NodeSet();\n            return codeFixAll(context, errorCodes, (changes, diag) => {\n                const { sourceFile } = context;"
  },
  {
    "id" : "9371a6ac-9a74-46bc-8836-48e6535e791f",
    "prId" : 23805,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23805#pullrequestreview-118479471",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f885fb11-7e1a-4ca6-8926-0b73103e0a26",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "add a test for `for(var {} of o) ;`",
        "createdAt" : "2018-05-08T18:25:10Z",
        "updatedAt" : "2018-05-08T19:49:14Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "36237ca208a6e2e442181d22718ca6e016399146",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +73,77 @@    }\n\n    function tryDeleteFullDestructure(changes: textChanges.ChangeTracker, sourceFile: SourceFile, pos: number): boolean {\n        const startToken = getTokenAtPosition(sourceFile, pos, /*includeJsDocComment*/ false);\n        if (startToken.kind !== SyntaxKind.OpenBraceToken || !isObjectBindingPattern(startToken.parent)) return false;"
  },
  {
    "id" : "3df290d0-4d11-4fc6-b390-c3cfbf4fd154",
    "prId" : 20373,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20373#pullrequestreview-80326108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30356e5d-f792-4a4b-9f5a-b670998998d1",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "`isParameterPropertyDeclaration(identifier)` instead of looking at the code.",
        "createdAt" : "2017-11-30T19:32:00Z",
        "updatedAt" : "2017-11-30T19:32:00Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "dada8a6d-48a8-40d6-a2ca-8990c4dd501a",
        "parentId" : "30356e5d-f792-4a4b-9f5a-b670998998d1",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "My feeling was that the code might be applied to other symbols in the future but that it's inherently about properties so it was a valid way to perform the check.",
        "createdAt" : "2017-11-30T20:53:38Z",
        "updatedAt" : "2017-11-30T20:53:38Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7da7d48d3de8a95322186df9aaf9a99ad6b3584",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +78,82 @@                        const functionDeclaration = <FunctionDeclaration>parent.parent;\n                        const deleteAction = functionDeclaration.parameters.length === 1 ? deleteNode(parent) : deleteNodeInList(parent);\n                        return errorCode === Diagnostics.Property_0_is_declared_but_its_value_is_never_read.code\n                            ? [deleteAction]\n                            : [deleteAction, prefixIdentifierWithUnderscore(identifier)];"
  },
  {
    "id" : "8790f895-3c3c-4312-bd80-3d990819a2a5",
    "prId" : 17078,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17078#pullrequestreview-49345443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "911f923c-9492-4e1c-85ab-5c233d879661",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Thanks for fixing this!",
        "createdAt" : "2017-07-11T22:19:21Z",
        "updatedAt" : "2017-07-12T18:14:58Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "abb229e91b83c06799d2f51200ff364afdc989b3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +26,30 @@\n                default:\n                    return deleteDefault();\n            }\n"
  }
]