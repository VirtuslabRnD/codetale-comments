[
  {
    "id" : "c6ee613a-8843-4d71-bcb6-f5b617b223bc",
    "prId" : 36615,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36615#pullrequestreview-354862276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de1edd8a-6a41-47c3-ac0d-3b3f8ff53efe",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "This pattern feels like dynamic scope (or, a specialisation of the state monad) that's not enforced by the compiler. I'm not a fan, although I don't know an easy way to improve it. Is it really necessary to be able to write the fixes out at the end? \r\n\r\n (the code in inferFromUsage is an uglier example of this, this is just the first occurrence)",
        "createdAt" : "2020-02-06T23:39:27Z",
        "updatedAt" : "2020-02-10T21:46:08Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "8928f417-34e8-44e0-a294-620df9ee2fdb",
        "parentId" : "de1edd8a-6a41-47c3-ac0d-3b3f8ff53efe",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "> Is it really necessary to be able to write the fixes out at the end?\r\n\r\nYes—the whole point of this PR is the acknowledgment that to auto-import more than one name at a time, you have to consider them together in order to combine and deduplicate them properly. I think part of the problem is that `changeTracker` is _also_ a state container that gets passed around getting state incrementally tacked onto it, so we’re already operating in a mode where deep call stacks mutate shared state and return nothing. And what’s more, that existing state lacks any semantic meaning that would let us derive the necessary imports changes from it (i.e., ChangeTracker works only in strings and nodes, not in symbols or types, which are needed for auto imports). Hence, another mutable state container to complement `ChangeTracker`.",
        "createdAt" : "2020-02-07T00:18:18Z",
        "updatedAt" : "2020-02-10T21:46:08Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "7de6c0346270caf46607cc5978e197651bca7b5a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +42,46 @@        const abstractAndNonPrivateExtendsSymbols = checker.getPropertiesOfType(instantiatedExtendsType).filter(symbolPointsToNonPrivateAndAbstractMember);\n\n        const importAdder = createImportAdder(sourceFile, context.program, preferences, context.host);\n        createMissingMemberNodes(classDeclaration, abstractAndNonPrivateExtendsSymbols, context, preferences, importAdder, member => changeTracker.insertNodeAtClassStart(sourceFile, classDeclaration, member));\n        importAdder.writeFixes(changeTracker);"
  },
  {
    "id" : "24cc26fd-f594-46b0-9aac-e2df4721aaa9",
    "prId" : 22073,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22073#pullrequestreview-98297924",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1b3ab98-c6f7-4ac6-8a1a-6cbf33bd3310",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I'm probably missing something obvious, but I would have guessed that the solution was to give all the fixes for the same derived-base pair the same fixId.",
        "createdAt" : "2018-02-21T00:32:41Z",
        "updatedAt" : "2018-02-21T00:33:01Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "dbb2687c-ff1a-417c-9893-1c7b83d7ca91",
        "parentId" : "d1b3ab98-c6f7-4ac6-8a1a-6cbf33bd3310",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "When we get a combined code fix, we want to get the fix for all classes in the file. The fixId is used only for asking for combined code fixes.",
        "createdAt" : "2018-02-21T15:26:34Z",
        "updatedAt" : "2018-02-21T15:26:34Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "04048b38-77e0-4ebe-a382-bce85c7af9d0",
        "parentId" : "d1b3ab98-c6f7-4ac6-8a1a-6cbf33bd3310",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Makes sense.  Thanks!",
        "createdAt" : "2018-02-21T17:58:08Z",
        "updatedAt" : "2018-02-21T17:58:08Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b04895b2ba72e8e205c41ad66a0cb1f92b58cab6",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +14,18 @@            return changes.length === 0 ? undefined : [{ description: getLocaleSpecificMessage(Diagnostics.Implement_inherited_abstract_class), changes, fixId }];\n        },\n        fixIds: [fixId],\n        getAllCodeActions: context => {\n            const seenClassDeclarations = createMap<true>();"
  }
]