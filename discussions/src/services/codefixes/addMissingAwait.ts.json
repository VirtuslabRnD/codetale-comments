[
  {
    "id" : "d859e7aa-e86b-4b75-b3f8-9901af1f7040",
    "prId" : 34627,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/34627#pullrequestreview-318679344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe4c94a7-325a-4ad4-8644-aac8e1312cdd",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "```suggestion\r\n                insertLeadingSemicolonIfNeeded(changeTracker, insertionSite.parent.expression, sourceFile);\r\n```",
        "createdAt" : "2019-11-18T22:36:09Z",
        "updatedAt" : "2019-11-18T22:36:10Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "3794b5b5-ff98-4ca0-a4c6-7eb37ec21ccd",
        "parentId" : "fe4c94a7-325a-4ad4-8644-aac8e1312cdd",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "The current indentation is correct (the preceding three lines are arguments to `replaceNode`; this is not)",
        "createdAt" : "2019-11-18T22:40:50Z",
        "updatedAt" : "2019-11-18T22:45:33Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "d743f0dd532d26acac502b9a9333b9f793681926",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +258,262 @@                insertionSite.parent.expression,\n                createParen(createAwait(insertionSite.parent.expression)));\n            insertLeadingSemicolonIfNeeded(changeTracker, insertionSite.parent.expression, sourceFile);\n        }\n        else if (contains(callableConstructableErrorCodes, errorCode) && isCallOrNewExpression(insertionSite.parent)) {"
  },
  {
    "id" : "df4e7e77-e877-44c0-8982-89657b892c4a",
    "prId" : 32922,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32922#pullrequestreview-275904961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bc4ca23-81ab-4d42-9dd2-da3e1e670167",
        "parentId" : null,
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "wow, this is quite the if statement",
        "createdAt" : "2019-08-16T11:40:40Z",
        "updatedAt" : "2019-08-20T20:51:28Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "124201935f75bdcc6b0b0d949c38c2de068812d9",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +153,157 @@                !isInsideAwaitableBody(declaration.initializer)) {\n                isCompleteFix = false;\n                continue;\n            }\n"
  },
  {
    "id" : "81d629bb-a9b9-4f24-8a6c-e1e14451d45c",
    "prId" : 32356,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32356#pullrequestreview-260970769",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72732f86-e7ff-4f86-b529-48212036e493",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "why inline getAllCodeActions but not getCodeActions? They should probably be the same.\r\n\r\n(I'd vote for both inline, but don't care too much.)",
        "createdAt" : "2019-07-11T21:28:25Z",
        "updatedAt" : "2019-07-11T22:02:43Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "7eb5d506-4f5d-4ec0-b3a6-3f769fd2d187",
        "parentId" : "72732f86-e7ff-4f86-b529-48212036e493",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I think there was a transient reason which later got refactored away. Good call.",
        "createdAt" : "2019-07-11T21:46:06Z",
        "updatedAt" : "2019-07-11T22:02:43Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "09853bec9b2e42e00e2359bff79ec1b30c1ab55d",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@                getUseSiteFix(context, expression, errorCode, checker, trackChanges)]);\n        },\n        getAllCodeActions: context => {\n            const { sourceFile, program, cancellationToken } = context;\n            const checker = context.program.getTypeChecker();"
  },
  {
    "id" : "4ad3442f-c514-4476-9565-228ff7ef40e1",
    "prId" : 32356,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32356#pullrequestreview-260972233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24ba9d63-53ed-4557-b521-86331c9f8fd8",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "This will show for any old type combination, like `number + Event`, right? What happens in that case? Does it just fail to do anything when you try to \"add missing await\"?",
        "createdAt" : "2019-07-11T21:30:17Z",
        "updatedAt" : "2019-07-11T22:02:43Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "dd192463-ad8b-473a-bc7f-f61ceb886ca5",
        "parentId" : "24ba9d63-53ed-4557-b521-86331c9f8fd8",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "It's supposed to be filtered out further in `getCodeActions` (it doesn’t show anything if you return undefined / empty array in there). This is back to the tradeoffs we were discussing about using related info as a “bonus error message” vs. copying and pasting all these into new, unique messages. I wrote this down as a larger LS design/API change to consider at some later point.",
        "createdAt" : "2019-07-11T21:50:13Z",
        "updatedAt" : "2019-07-11T22:02:43Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "09853bec9b2e42e00e2359bff79ec1b30c1ab55d",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +11,15 @@        Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_bigint_or_an_enum_type.code,\n        Diagnostics.The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type.code,\n        Diagnostics.The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type.code,\n        Diagnostics.Operator_0_cannot_be_applied_to_type_1.code,\n        Diagnostics.Operator_0_cannot_be_applied_to_types_1_and_2.code,"
  }
]