[
  {
    "id" : "f64977fb-8017-458a-931d-f3b05d008558",
    "prId" : 16697,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16697#pullrequestreview-47267283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4df3aa7-c98c-404d-bdae-fe01466fb17e",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Can you add a test for this?",
        "createdAt" : "2017-06-29T21:11:51Z",
        "updatedAt" : "2017-06-29T22:14:34Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "85ef7984-b97f-4979-bed0-4816766332ae",
        "parentId" : "b4df3aa7-c98c-404d-bdae-fe01466fb17e",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Not related to comments, but do we preserve the binding to the `this` of the outer scope if the arrow contains a `this`? What happens if we refactor:\r\n\r\n```js\r\nfunction C() {}\r\nC.prototype.x = () => this;\r\n```",
        "createdAt" : "2017-06-29T22:22:10Z",
        "updatedAt" : "2017-06-29T22:28:36Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "277f4592c1674d4ca5c7314ed08e189210206d54",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +187,191 @@                            bodyBlock = createBlock([createReturn(expression)]);\n                        }\n                        const method = createMethod(/*decorators*/ undefined, modifiers, /*asteriskToken*/ undefined, memberDeclaration.name, /*questionToken*/ undefined,\n                            /*typeParameters*/ undefined, arrowFunction.parameters, /*type*/ undefined, bodyBlock);\n                        copyComments(assignmentBinaryExpression, method);"
  },
  {
    "id" : "6ab6a334-9d25-419c-8b98-ab638b3bf44d",
    "prId" : 16697,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16697#pullrequestreview-47266638",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "584413fd-b5bc-4621-b54a-88c68af5c047",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Can you add a test for this?",
        "createdAt" : "2017-06-29T21:12:09Z",
        "updatedAt" : "2017-06-29T22:14:34Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "548f74df-9746-442a-b317-8a8ef00b1959",
        "parentId" : "584413fd-b5bc-4621-b54a-88c68af5c047",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "https://github.com/Microsoft/TypeScript/pull/16697/files#diff-5cfc913717c53d115c9368927495ac25R6",
        "createdAt" : "2017-06-29T21:18:53Z",
        "updatedAt" : "2017-06-29T22:14:34Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "0e23d3e0-975d-45ac-9824-7373f62b3801",
        "parentId" : "584413fd-b5bc-4621-b54a-88c68af5c047",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "That only hits the code path on [L167](https://github.com/Microsoft/TypeScript/pull/16697/files#diff-77ef55c503714939dff4c55944ea08ffL167). It doesn't cover the cases on L186 and L189. ",
        "createdAt" : "2017-06-29T21:27:50Z",
        "updatedAt" : "2017-06-29T22:14:34Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "603ad5d0-2d36-44a8-9cad-c996c95490d5",
        "parentId" : "584413fd-b5bc-4621-b54a-88c68af5c047",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "This is actually currently unreachable since this refactor doesn't light up in non-JS files",
        "createdAt" : "2017-06-29T22:13:48Z",
        "updatedAt" : "2017-06-29T22:14:34Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "3e7942f4-69bb-4426-8e4f-5ff12b5b45f9",
        "parentId" : "584413fd-b5bc-4621-b54a-88c68af5c047",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Fair point regarding the property declaration, but arrow functions are still fair game.",
        "createdAt" : "2017-06-29T22:19:22Z",
        "updatedAt" : "2017-06-29T22:19:22Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "277f4592c1674d4ca5c7314ed08e189210206d54",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +198,202 @@                            return;\n                        }\n                        const prop = createProperty(/*decorators*/ undefined, modifiers, memberDeclaration.name, /*questionToken*/ undefined,\n                            /*type*/ undefined, assignmentBinaryExpression.right);\n                        copyComments(assignmentBinaryExpression.parent, prop);"
  },
  {
    "id" : "bbc490a3-2f17-4387-9df7-91773d755dab",
    "prId" : 15569,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15569#pullrequestreview-38223996",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fda470e-d381-4316-83df-7e4a70cd36cc",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "we should not be here, isApplicable should check for this.",
        "createdAt" : "2017-05-15T20:47:00Z",
        "updatedAt" : "2017-05-19T17:46:06Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6fbe617188ac28648aef55a20e18345e6a8986f",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +181,185 @@        function createClassFromVariableDeclaration(node: VariableDeclaration): ClassDeclaration {\n            const initializer = node.initializer as FunctionExpression;\n            if (!initializer || initializer.kind !== SyntaxKind.FunctionExpression) {\n                return undefined;\n            }"
  },
  {
    "id" : "7ac5e14f-4bcf-4404-833e-ab22e2d87e23",
    "prId" : 15569,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15569#pullrequestreview-38223996",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39928121-6dea-4c3b-b7bc-61da9e624393",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "and this as well.",
        "createdAt" : "2017-05-15T20:47:07Z",
        "updatedAt" : "2017-05-19T17:46:06Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6fbe617188ac28648aef55a20e18345e6a8986f",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +185,189 @@            }\n\n            if (node.name.kind !== SyntaxKind.Identifier) {\n                return undefined;\n            }"
  },
  {
    "id" : "31fad9d7-1cb6-4b8c-ac83-2e8ffd798f73",
    "prId" : 15569,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15569#pullrequestreview-38805400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4e3e9f9-c987-4198-9fe2-fbdeeb0a153b",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Is this intended for a .ts or a .js file? \r\n\r\nI think it is a .js file, since the binding for the special properties do not work in .ts files any way.  \r\n\r\nIf my understanding is correct, then for static members we can not just add declarations for them, this will result in invalid .js class.\r\n\r\nthis also applies to the property declarations and assignments..\r\n\r\nIf we want this to work in a .ts file, then we need to do something with the inference to make it work first.\r\n\r\n\r\nI would also recommend adding a check at the top of isApplicable to return if `!inJavaScriptFile(node)`",
        "createdAt" : "2017-05-15T20:57:40Z",
        "updatedAt" : "2017-05-19T17:46:06Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "fa9f8007-2ffb-4131-b942-f9d3c2305b13",
        "parentId" : "c4e3e9f9-c987-4198-9fe2-fbdeeb0a153b",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "also for member initialization, I wounder if we can even do these correctellly... \r\n\r\n```ts\r\nvar c = function() { this.list.push(1); }\r\nc.prototype.list = [];\r\n``` \r\nis not the same as:\r\n\r\n```ts\r\nclass c {\r\n    constructor() { this.list.push(1); }\r\n    list = [];\r\n```\r\n\r\nlet a side that it is not valid JS strictly speaking.",
        "createdAt" : "2017-05-15T21:06:25Z",
        "updatedAt" : "2017-05-19T17:46:06Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "95069f4c-4a85-46e7-8fa3-1d9b3569e1d2",
        "parentId" : "c4e3e9f9-c987-4198-9fe2-fbdeeb0a153b",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Fixed these up. Non-func-expr things remain as assignments following the class body",
        "createdAt" : "2017-05-17T22:33:10Z",
        "updatedAt" : "2017-05-19T17:46:06Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6fbe617188ac28648aef55a20e18345e6a8986f",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +105,109 @@\n            // all static members are stored in the \"exports\" array of symbol\n            if (symbol.exports) {\n                symbol.exports.forEach(member => {\n                    const memberElement = createClassElement(member, [createToken(SyntaxKind.StaticKeyword)]);"
  }
]