[
  {
    "id" : "799cbc1c-040b-4028-b090-a277fa7c90e3",
    "prId" : 40306,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40306#pullrequestreview-482815946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9895da39-3a08-4323-9a16-dff69f77fbe4",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "```suggestion\r\n        const prologueDirectives = filter(oldFile.statements, isPrologueDirective);\r\n```",
        "createdAt" : "2020-09-04T16:56:38Z",
        "updatedAt" : "2020-09-10T19:01:01Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "69b9328cce4b055e32161360f19c88abfb4aa7f1",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +118,122 @@    ) {\n        const checker = program.getTypeChecker();\n        const prologueDirectives = takeWhile(oldFile.statements, isPrologueDirective);\n        if (!oldFile.externalModuleIndicator && !oldFile.commonJsModuleIndicator) {\n            deleteMovedStatements(oldFile, toMove.ranges, changes);"
  },
  {
    "id" : "9f9d8595-3e0d-455c-bbbc-8ba10a219cf7",
    "prId" : 40306,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40306#pullrequestreview-486228539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "356ee5de-bd8a-4d23-9258-2efc16e76b3c",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "On a second thought this is not a good check.. The prologue directives are marked as expression statement with string literal as the text so we need test which with this change will fail:\r\n\r\n```ts\r\n////\"use strict\";\r\n////[|function b() {\r\n////    return this;\r\n////}|]\r\n////\"something that should not be copied to new file\";\r\n////b();\r\n```\r\nYou would want something like to get statements to move to get start index keeping original condition\r\n```\r\nconst index = findIndex(statements, statement => !isPrologueDirective(statement));\r\n```",
        "createdAt" : "2020-09-04T17:24:30Z",
        "updatedAt" : "2020-09-10T19:01:01Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "966652d7-f6ab-49a2-af5e-cc046169d9e5",
        "parentId" : "356ee5de-bd8a-4d23-9258-2efc16e76b3c",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "I used `takeWhile` instead of filter to copy only prologue directives from a top of a file and ignore other, similar to the following `find*`.\r\n\r\nhttps://github.com/microsoft/TypeScript/blob/ea842c411e190b306bad7c7e0aefe61ab67da7c8/src/compiler/factory/utilities.ts#L332-L344\r\n\r\nThe following test\r\n\r\n```ts\r\n////\"use strict\";\r\n////[|function b() {\r\n////    return this;\r\n////}|]\r\n////\"something that should not be copied to new file\";\r\n////b();\r\n```\r\n\r\nThe new file will look like so\r\n\r\n```ts\r\n////\"use strict\";\r\n////export function b() {\r\n////    return this;\r\n////}\r\n```\r\n\r\nor \r\n\r\nhttps://github.com/microsoft/TypeScript/blob/8cc90b723383d4e8f828f6e555a6420d29f772df/tests/cases/fourslash/moveToNewFile_prologueDirectives6.ts#L1-L38\r\n\r\n",
        "createdAt" : "2020-09-04T18:03:08Z",
        "updatedAt" : "2020-09-10T19:01:01Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      },
      {
        "id" : "320bcdbf-246e-422b-840e-4cf8e91b9cf8",
        "parentId" : "356ee5de-bd8a-4d23-9258-2efc16e76b3c",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "👍 bringing back `takeWhile`, or just slicing with `findIndex` sounds like a good plan",
        "createdAt" : "2020-09-10T17:41:07Z",
        "updatedAt" : "2020-09-10T19:01:01Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "aa9812c2-ea1f-43af-aac7-531066c3dd43",
        "parentId" : "356ee5de-bd8a-4d23-9258-2efc16e76b3c",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "@andrewbranch Thanks for the review. Oke.",
        "createdAt" : "2020-09-10T19:02:14Z",
        "updatedAt" : "2020-09-10T19:02:14Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      }
    ],
    "commit" : "69b9328cce4b055e32161360f19c88abfb4aa7f1",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +72,76 @@        const ranges: StatementRange[] = [];\n        const { toMove, afterLast } = rangeToMove;\n        getRangesWhere(toMove, isAllowedStatementToMove, (start, afterEndIndex) => {\n            for (let i = start; i < afterEndIndex; i++) all.push(toMove[i]);\n            ranges.push({ first: toMove[start], afterLast });"
  },
  {
    "id" : "5aa34e29-f876-46a1-ae91-f18b1b591cf4",
    "prId" : 38377,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38377#pullrequestreview-407804817",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3747319b-7f60-4ccd-834f-aa0772208ba6",
        "parentId" : null,
        "authorId" : "1e789298-f9d6-4b64-b80b-206f2f8fbd2a",
        "body" : "I thought about adding a comment given that `NamespaceImport` is in this list but `NamedImports`, but I'm half-guessing that it would be semi-obvious for most people, and I don't know if there's any reference for the list of syntax kinds.",
        "createdAt" : "2020-05-06T23:33:08Z",
        "updatedAt" : "2020-05-06T23:33:08Z",
        "lastEditedBy" : "1e789298-f9d6-4b64-b80b-206f2f8fbd2a",
        "tags" : [
        ]
      },
      {
        "id" : "b391fe73-f092-44c8-a611-4a9fdb55fcbb",
        "parentId" : "3747319b-7f60-4ccd-834f-aa0772208ba6",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I actually don't know why this is - is it because it's somehow handled by `ImportClause`?",
        "createdAt" : "2020-05-07T07:25:34Z",
        "updatedAt" : "2020-05-07T07:25:34Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "597eee1c-a78b-48fe-85ac-46a4fadca45e",
        "parentId" : "3747319b-7f60-4ccd-834f-aa0772208ba6",
        "authorId" : "1e789298-f9d6-4b64-b80b-206f2f8fbd2a",
        "body" : "@DanielRosenwasser, my guess is that one of `NamedImports` or `ImportClause` is for the whole import and the other is for each name in the import, or something similar (since the first is plural).  But I don't want to add a comment with a guess...  I did see that adding `NamedImports` doesn't break any tests, but went with the smaller change.",
        "createdAt" : "2020-05-07T15:53:47Z",
        "updatedAt" : "2020-05-07T15:53:47Z",
        "lastEditedBy" : "1e789298-f9d6-4b64-b80b-206f2f8fbd2a",
        "tags" : [
        ]
      },
      {
        "id" : "fb750a25-bccc-49db-8651-e8155cf9659a",
        "parentId" : "3747319b-7f60-4ccd-834f-aa0772208ba6",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "That decision makes sense, thanks!",
        "createdAt" : "2020-05-07T20:18:00Z",
        "updatedAt" : "2020-05-07T20:18:07Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4baff1b241479caf8e6f0219d8043fc15769aa39",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +534,538 @@            case SyntaxKind.ImportSpecifier:\n            case SyntaxKind.ImportClause:\n            case SyntaxKind.NamespaceImport:\n                return true;\n            case SyntaxKind.VariableDeclaration:"
  },
  {
    "id" : "033ca3c3-7c8c-4402-a816-121d56fe0438",
    "prId" : 23726,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23726#pullrequestreview-116421155",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "912767fc-7f7e-4203-b106-b68bfb702b3e",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "so that means that if i select a nested function to move, we will move the containing function instead.. would not it be better to not make the refactoring available at this case?\r\n",
        "createdAt" : "2018-04-28T19:01:00Z",
        "updatedAt" : "2018-05-08T19:45:07Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "3dae709a-4738-415d-a3d0-f8428d5d926a",
        "parentId" : "912767fc-7f7e-4203-b106-b68bfb702b3e",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "See `moveToNewFile_rangeInvalid.ts`.",
        "createdAt" : "2018-04-30T20:14:05Z",
        "updatedAt" : "2018-05-08T19:45:07Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "662e93c45c8360a1cd25d8fdf41f9daf7712ae76",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +21,25 @@        const { statements } = file;\n\n        const startNodeIndex = findIndex(statements, s => s.end > range.pos);\n        if (startNodeIndex === -1) return undefined;\n        // Can't only partially include the start node or be partially into the next node"
  },
  {
    "id" : "59c46f1f-3d4d-4a4d-9a0f-ac86a82fbfae",
    "prId" : 23726,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23726#pullrequestreview-116476675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a85a28c6-6ab6-446c-b71b-f14fecae88e9",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "what if it is not in movedSymbols just case we have not visited it yet, e.g. a forward reference to a type or an interface.. or even a class, that exists later on in the selected range?",
        "createdAt" : "2018-05-01T00:11:42Z",
        "updatedAt" : "2018-05-08T19:45:07Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "662e93c45c8360a1cd25d8fdf41f9daf7712ae76",
    "line" : 354,
    "diffHunk" : "@@ -1,1 +352,356 @@                        oldImportsNeededByNewFile.add(symbol);\n                    }\n                    else if (isTopLevelDeclaration(decl) && !movedSymbols.has(symbol)) {\n                        newFileImportsFromOldFile.add(symbol);\n                    }"
  },
  {
    "id" : "f17e6c05-bb60-4d38-abf0-bc87e13fdd74",
    "prId" : 23726,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23726#pullrequestreview-116477324",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1d6a37f-9257-4e9c-9c0a-af9560b8bd66",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "also `export import A = N`",
        "createdAt" : "2018-05-01T00:16:40Z",
        "updatedAt" : "2018-05-08T19:45:07Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "662e93c45c8360a1cd25d8fdf41f9daf7712ae76",
    "line" : 575,
    "diffHunk" : "@@ -1,1 +573,577 @@        const modifiers = concatenate([createModifier(SyntaxKind.ExportKeyword)], d.modifiers);\n        switch (d.kind) {\n            case SyntaxKind.FunctionDeclaration:\n                return updateFunctionDeclaration(d, d.decorators, modifiers, d.asteriskToken, d.name, d.typeParameters, d.parameters, d.type, d.body);\n            case SyntaxKind.ClassDeclaration:"
  },
  {
    "id" : "58ce744f-1720-46d0-8c59-95cccba148d0",
    "prId" : 23726,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23726#pullrequestreview-118476261",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3dd43a06-2be4-405e-8027-cb55ac1e1f2b",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Could/should this logic be shared with extract function/constant?",
        "createdAt" : "2018-05-08T01:55:41Z",
        "updatedAt" : "2018-05-08T19:45:07Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "4e44d378-509e-4790-91bc-42f3dce83abe",
        "parentId" : "3dd43a06-2be4-405e-8027-cb55ac1e1f2b",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "The corresponding function there would be `getRangeToExtract`. That seems to have a lot of extract-symbol-specific logic in it, though. And here we should only be moving top-level statements.",
        "createdAt" : "2018-05-08T18:16:45Z",
        "updatedAt" : "2018-05-08T19:45:07Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "662e93c45c8360a1cd25d8fdf41f9daf7712ae76",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +16,20 @@    });\n\n    function getStatementsToMove(context: RefactorContext): ReadonlyArray<Statement> | undefined {\n        const { file } = context;\n        const range = createTextRangeFromSpan(getRefactorContextSpan(context));"
  },
  {
    "id" : "af2ae3fb-b710-4f88-ac16-55b8a4043adc",
    "prId" : 23726,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23726#pullrequestreview-118475954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d1376b8-b462-4463-89ea-bebab33badda",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I think the goal of this function is to remove the imports that were only needed for the code being moved.  It seems though, like it might also remove imports that were unused to begin with.  Personally, I think it seems strange to do a partial Organize Imports as part of this operation.  If we are going to do so, then my preference would be to have the editor trigger (unless the server has some extra knowledge?) so that it can appear separately on the undo stack.",
        "createdAt" : "2018-05-08T02:01:20Z",
        "updatedAt" : "2018-05-08T19:45:07Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "991835ce-b39a-4873-b55e-ab2f10db3d5f",
        "parentId" : "5d1376b8-b462-4463-89ea-bebab33badda",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`unusedImportsFromOldFile` will be a subset of `oldImportsNeededByNewFile`, so we won't remove purely-unused imports.",
        "createdAt" : "2018-05-08T18:15:58Z",
        "updatedAt" : "2018-05-08T19:45:07Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "662e93c45c8360a1cd25d8fdf41f9daf7712ae76",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +89,93 @@    }\n\n    function deleteUnusedOldImports(oldFile: SourceFile, toMove: ReadonlyArray<Statement>, changes: textChanges.ChangeTracker, toDelete: ReadonlySymbolSet, checker: TypeChecker) {\n        for (const statement of oldFile.statements) {\n            if (contains(toMove, statement)) continue;"
  }
]