[
  {
    "id" : "6ce2f1c0-e6c2-414b-9bb1-c49f71f4ca6a",
    "prId" : 40379,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40379#pullrequestreview-563298038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "939e9349-2b55-4cd4-8b94-4bebd8620b9a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why not just pass in `modifiers`?\r\n\r\n```suggestion\r\n        const newNode = factory.createFunctionDeclaration(func.decorators, modifiers, func.asteriskToken, name, func.typeParameters, func.parameters, func.type, body);\r\n```",
        "createdAt" : "2020-09-04T06:26:42Z",
        "updatedAt" : "2021-01-07T08:42:07Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "53bc001e-712c-4cb3-a741-bc7513656f2b",
        "parentId" : "939e9349-2b55-4cd4-8b94-4bebd8620b9a",
        "authorId" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "body" : "Actually if i pass `modifiers` in, the `textChanges` does not happy and break an assert.",
        "createdAt" : "2020-09-04T06:30:16Z",
        "updatedAt" : "2021-01-07T08:42:08Z",
        "lastEditedBy" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "tags" : [
        ]
      },
      {
        "id" : "82f9845c-2fcb-4ef9-827a-ca4b0307b367",
        "parentId" : "939e9349-2b55-4cd4-8b94-4bebd8620b9a",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Out of curiosity, which assert? We probably should consider converting an empty modifier list into `undefined` in the factory, since our parser never produces an empty modifier list (if it fails to parse modifiers, it returns `undefined`).",
        "createdAt" : "2021-01-05T00:21:39Z",
        "updatedAt" : "2021-01-07T08:42:08Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "536c45d7-73bb-4812-9c6c-8e62bae75c86",
        "parentId" : "939e9349-2b55-4cd4-8b94-4bebd8620b9a",
        "authorId" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "body" : "```\r\nError: Debug Failure. False expression.\r\n      at getPos (src\\services\\textChanges.ts:10:15)\r\n      at assignPositionsToNodeArray (src\\services\\textChanges.ts:1030:39)\r\n      at Object.visitEachChild (src\\compiler\\visitorPublic.ts:876:21)\r\n      at assignPositionsToNode (src\\services\\textChanges.ts:1016:25)\r\n      at getNonformattedText (src\\services\\textChanges.ts:999:52)\r\n      at getFormattedTextOfNode (src\\services\\textChanges.ts:973:36)\r\n      at format (src\\services\\textChanges.ts:951:41)\r\n      at computeNewText (src\\services\\textChanges.ts:954:19)\r\n```",
        "createdAt" : "2021-01-07T08:40:32Z",
        "updatedAt" : "2021-01-07T08:42:08Z",
        "lastEditedBy" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f5b0c3057e1ae056914b93bcb090e6ac3be6cd0",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +212,216 @@        const modifiersFlags = (getCombinedModifierFlags(variableDeclaration) & ModifierFlags.Export) | getEffectiveModifierFlags(func);\n        const modifiers = factory.createModifiersFromModifierFlags(modifiersFlags);\n        const newNode = factory.createFunctionDeclaration(func.decorators, length(modifiers) ? modifiers : undefined, func.asteriskToken, name, func.typeParameters, func.parameters, func.type, body);\n\n        if (variableDeclarationList.declarations.length === 1) {"
  },
  {
    "id" : "ae37a463-103e-4182-9078-26d993ede454",
    "prId" : 45116,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45116#pullrequestreview-721523347",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23abec1e-87a8-4eb6-9bd9-06133cd81e2e",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Do these walk the function twice? Probably not a huge deal right now, but it would be smarter to use our find-all-references logic long-term.",
        "createdAt" : "2021-08-03T18:31:41Z",
        "updatedAt" : "2021-08-03T18:31:41Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "f9d26e8d-051f-42c7-9560-32b916b18550",
        "parentId" : "23abec1e-87a8-4eb6-9bd9-06133cd81e2e",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "Oke. Will check it later.",
        "createdAt" : "2021-08-03T18:33:57Z",
        "updatedAt" : "2021-08-03T18:33:57Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      }
    ],
    "commit" : "31f00f630330e828e77e101bf5a82518d28c23d9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +142,146 @@        const typeChecker = program.getTypeChecker();\n        const func = tryGetFunctionFromVariableDeclaration(file, typeChecker, token.parent);\n        if (func && !containingThis(func.body) && !typeChecker.containsArgumentsReference(func)) {\n            return { selectedVariableDeclaration: true, func };\n        }"
  }
]