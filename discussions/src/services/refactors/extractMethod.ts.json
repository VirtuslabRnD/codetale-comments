[
  {
    "id" : "83e928b7-d76f-404b-b2c9-3a2d5bd09628",
    "prId" : 18448,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18448#pullrequestreview-63468064",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e169e7e3-f5e4-4241-a97e-803b954640f7",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This would be simpler to just have `visitor` take a parameter, is there a performance concern?",
        "createdAt" : "2017-09-18T19:55:59Z",
        "updatedAt" : "2017-09-18T19:55:59Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d94a2922a605fa14f6ae3864595d084d362540",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +856,860 @@        }\n        let returnValueProperty: string;\n        let ignoreReturns = false;\n        const statements = createNodeArray(isBlock(body) ? body.statements.slice(0) : [isStatement(body) ? body : createReturn(<Expression>body)]);\n        // rewrite body if either there are writes that should be propagated back via return statements or there are substitutions"
  },
  {
    "id" : "12355336-af98-4d43-8cef-a13f0c00081e",
    "prId" : 18165,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18165#pullrequestreview-63468392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "809f31ce-1e93-4bdf-8e42-d4dd477bad11",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This function now switches on `node.kind` four different times, is there any way it could be simplified or broken up?",
        "createdAt" : "2017-09-18T19:37:01Z",
        "updatedAt" : "2017-09-18T19:37:02Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "f4459312-12e6-4949-aa4b-e08296cc89f9",
        "parentId" : "809f31ce-1e93-4bdf-8e42-d4dd477bad11",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I'm not sure I understand your concern.  The switches don't appear to overlap (I didn't check exhaustively) and different kinds are interesting at different times.  I imagine that parts of the method could be split out into helpers but I don't see much advantage to doing so.",
        "createdAt" : "2017-09-18T19:57:04Z",
        "updatedAt" : "2017-09-18T19:57:04Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "baefdd2ccb21542b7aeab8b6f825e45c516566da",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +354,358 @@                const savedPermittedJumps = permittedJumps;\n\n                switch (node.kind) {\n                    case SyntaxKind.IfStatement:\n                        permittedJumps = PermittedJumps.None;"
  },
  {
    "id" : "9cebc45c-a03d-4583-b094-e34414dc934a",
    "prId" : 18121,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18121#pullrequestreview-59404546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6c11ae5-ec01-433c-9d96-42e6d1a62eaf",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "With the other changes, I don't think this argument is used anywhere anymore.",
        "createdAt" : "2017-08-29T22:41:17Z",
        "updatedAt" : "2017-08-29T22:41:25Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "e2ece1a4-9915-419f-bd1c-8d80d0cc73c5",
        "parentId" : "a6c11ae5-ec01-433c-9d96-42e6d1a62eaf",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "If you mean `cancellationToken`, I believe it is closed over in the accept lambda below.",
        "createdAt" : "2017-08-29T22:43:14Z",
        "updatedAt" : "2017-08-29T22:43:14Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "1a4df45c-fd5f-451d-8543-057fb046d6ce",
        "parentId" : "a6c11ae5-ec01-433c-9d96-42e6d1a62eaf",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "@amcasey Ack, sorry, thought I was reading a different file here. Nevermind. All good.",
        "createdAt" : "2017-08-29T22:53:34Z",
        "updatedAt" : "2017-08-29T22:53:38Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "19c3a150e747fd9ecc01a122fc752510abb4c4db",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +935,939 @@        sourceFile: SourceFile,\n        checker: TypeChecker,\n        cancellationToken: CancellationToken) {\n\n        const allTypeParameterUsages = createMap<TypeParameter>(); // Key is type ID"
  },
  {
    "id" : "38769aab-f0a7-4f37-8df2-214e7ba4fe8b",
    "prId" : 17988,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17988#pullrequestreview-59339564",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbffd297-33db-4520-96c4-d9a9f160a5da",
        "parentId" : null,
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : ">This is potentially very expensive [](start = 21, length = 34)\r\n\r\nIs this a good point to check for cancellation then?",
        "createdAt" : "2017-08-24T22:45:54Z",
        "updatedAt" : "2017-08-29T18:34:33Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      },
      {
        "id" : "ccb465ad-5e05-4108-a14b-415e03d9fd4b",
        "parentId" : "bbffd297-33db-4520-96c4-d9a9f160a5da",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I think cancellation would need to be pushed down into the walker to make it useful.  That's a big enough change that I'd prefer to make it separately.",
        "createdAt" : "2017-08-29T18:34:08Z",
        "updatedAt" : "2017-08-29T18:34:33Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a816079ddad974b7d62c1368767e60d72371311b",
    "line" : 215,
    "diffHunk" : "@@ -1,1 +1043,1047 @@\n        function recordTypeParameterUsages(type: Type) {\n            // PERF: This is potentially very expensive.  `type` could be a library type with\n            // a lot of properties, each of which the walker will visit.  Unfortunately, the\n            // solution isn't as trivial as filtering to user types because of (e.g.) Array."
  },
  {
    "id" : "492af273-b481-4f2c-90a3-aeecc1feda80",
    "prId" : 17625,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17625#pullrequestreview-55381547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e61ea03-0087-47b6-9db4-6486a8d6ac77",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Cute. :)",
        "createdAt" : "2017-08-09T21:36:44Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a923151719a1092134ef318ae37d795dd60b5e7",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +137,141 @@            readonly targetRange: TargetRange;\n            readonly errors?: never;\n        };\n\n    /*"
  },
  {
    "id" : "91fe2377-ba39-4052-b7d2-4eeac3229da9",
    "prId" : 17625,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17625#pullrequestreview-55388858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16f0e692-bc9f-42e2-9603-4a9eef61c93d",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">isValidExtractionTarget [](start = 37, length = 23)\r\n\r\nI'm assuming this rules out lambdas.  FWIW, I'm probably going to have to tweak it to allow lambdas for Extract Local.",
        "createdAt" : "2017-08-09T22:09:47Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a923151719a1092134ef318ae37d795dd60b5e7",
    "line" : 491,
    "diffHunk" : "@@ -1,1 +489,493 @@            //  * Class declaration or expression\n            //  * Module/namespace or source file\n            if (current !== start && isValidExtractionTarget(current)) {\n                (scopes = scopes || []).push(current);\n            }"
  },
  {
    "id" : "40c3dd18-de7e-4f41-9a27-f7198427e978",
    "prId" : 17625,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17625#pullrequestreview-55389535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69222f35-9380-45d0-b171-4b1f58bfe9d1",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">extractFunctionInScope [](start = 20, length = 22)\r\n\r\nWe're doing this work up-front in case the user previews it?",
        "createdAt" : "2017-08-09T22:13:19Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a923151719a1092134ef318ae37d795dd60b5e7",
    "line" : 539,
    "diffHunk" : "@@ -1,1 +537,541 @@                return undefined;\n            }\n            return [extractFunctionInScope(target, scopes[requestedChangesIndex], usagesPerScope[requestedChangesIndex], targetRange, context)];\n        }\n        else {"
  },
  {
    "id" : "144bd5d3-0dc5-4e44-a239-f971a96c7d49",
    "prId" : 17625,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17625#pullrequestreview-55390229",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d78b982d-e861-482a-9ee7-b1dec7319b2c",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">errors.length [](start = 20, length = 13)\r\n\r\nDidn't we return `undefined` for the error case above?",
        "createdAt" : "2017-08-09T22:17:07Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a923151719a1092134ef318ae37d795dd60b5e7",
    "line" : 544,
    "diffHunk" : "@@ -1,1 +542,546 @@            return scopes.map((scope, i) => {\n                const errors = errorsPerScope[i];\n                if (errors.length) {\n                    return {\n                        scope,"
  },
  {
    "id" : "6dd26d48-1221-47f0-bc05-f0413c6153aa",
    "prId" : 17625,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17625#pullrequestreview-55393071",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7ecd949-e106-4e37-932b-b088105d79b7",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I would have guessed there was a family of such type guards in a shared location.",
        "createdAt" : "2017-08-09T22:32:47Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a923151719a1092134ef318ae37d795dd60b5e7",
    "line" : 833,
    "diffHunk" : "@@ -1,1 +831,835 @@    }\n\n    function isModuleBlock(n: Node): n is ModuleBlock {\n        return n.kind === SyntaxKind.ModuleBlock;\n    }"
  },
  {
    "id" : "be660d9d-68f9-4a91-90b5-c2098adbd564",
    "prId" : 17625,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17625#pullrequestreview-55393466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91d6b654-c452-4136-99c2-9ad97a988cdc",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "The parent should probably also not be an export.",
        "createdAt" : "2017-08-09T22:35:02Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a923151719a1092134ef318ae37d795dd60b5e7",
    "line" : 1110,
    "diffHunk" : "@@ -1,1 +1108,1112 @@            case SyntaxKind.StringLiteral:\n                return node.parent.kind !== SyntaxKind.ImportDeclaration &&\n                    node.parent.kind !== SyntaxKind.ImportSpecifier;\n\n            case SyntaxKind.SpreadElement:"
  },
  {
    "id" : "c5b9768c-ffaa-4158-b0d7-92f1e17ecc5b",
    "prId" : 17625,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17625#pullrequestreview-55393922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d22e832-1727-4186-bf5b-9895ff4174f6",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">textSpanContainsPosition(span, node.getStart(file))  [](start = 15, length = 52)\r\n\r\nWhy not just compare the start positions?  (Both for symmetry and to avoid the unnecessary comparison between the node start and the span end.)",
        "createdAt" : "2017-08-09T22:37:11Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a923151719a1092134ef318ae37d795dd60b5e7",
    "line" : 1090,
    "diffHunk" : "@@ -1,1 +1088,1092 @@\n    function spanContainsNode(span: TextSpan, node: Node, file: SourceFile): boolean {\n        return textSpanContainsPosition(span, node.getStart(file)) &&\n            node.getEnd() <= textSpanEnd(span);\n    }"
  },
  {
    "id" : "39c6dc1a-67a1-4659-9807-4d2c6a13a3ae",
    "prId" : 17625,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17625#pullrequestreview-55395051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c5bc1f2-185f-4e79-92e7-2d703069fea6",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">/*typeParameters*/[] [](start = 16, length = 20)\r\n\r\nDon't we need to have type parameters if they're consumed by the extracted code and not in scope in the new method?",
        "createdAt" : "2017-08-09T22:44:06Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a923151719a1092134ef318ae37d795dd60b5e7",
    "line" : 677,
    "diffHunk" : "@@ -1,1 +675,679 @@                functionName,\n                /*questionToken*/ undefined,\n                /*typeParameters*/[],\n                parameters,\n                returnType,"
  },
  {
    "id" : "56fdc76a-fbc3-4506-9b42-df4787769dea",
    "prId" : 17625,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17625#pullrequestreview-55395744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e36ab61-55e9-4804-95db-541ecdaa98bd",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">createKeywordTypeNode(SyntaxKind.AnyKeyword) [](start = 68, length = 44)\r\n\r\nWhy not use `returnType`?",
        "createdAt" : "2017-08-09T22:47:57Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a923151719a1092134ef318ae37d795dd60b5e7",
    "line" : 718,
    "diffHunk" : "@@ -1,1 +716,720 @@                newNodes.push(createVariableStatement(\n                    /*modifiers*/ undefined,\n                    [createVariableDeclaration(returnValueProperty, createKeywordTypeNode(SyntaxKind.AnyKeyword))]\n                ));\n            }"
  },
  {
    "id" : "49c6dd6f-e237-4f4e-a94b-bfe20716b7fd",
    "prId" : 17625,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17625#pullrequestreview-55396125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fd41a09-a531-4a2a-8303-67b8f84bbc23",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">\"__return\" [](start = 19, length = 10)\r\n\r\nDoes this have to be made unique?",
        "createdAt" : "2017-08-09T22:50:25Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a923151719a1092134ef318ae37d795dd60b5e7",
    "line" : 779,
    "diffHunk" : "@@ -1,1 +777,781 @@\n        function generateReturnValueProperty() {\n            return \"__return\";\n        }\n"
  },
  {
    "id" : "964c4e17-c040-4d4c-bb69-ab23b5034bba",
    "prId" : 17625,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17625#pullrequestreview-55397015",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0da2d8b1-00ae-42c2-ab68-bd7fd271b2e9",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "This sentence has some extra words in it.",
        "createdAt" : "2017-08-09T22:55:51Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a923151719a1092134ef318ae37d795dd60b5e7",
    "line" : 794,
    "diffHunk" : "@@ -1,1 +792,796 @@                if (writes && !(range.facts & RangeFacts.HasReturn) && isStatement(body)) {\n                    // add return at the end to propagate writes back in case if control flow falls out of the function body\n                    // it is ok to know that range has at least one return since it we only allow unconditional returns\n                    const assignments = getPropertyAssignmentsForWrites(writes);\n                    if (assignments.length === 1) {"
  },
  {
    "id" : "9f84e563-d58b-4bce-9bd0-190a9c7b2a04",
    "prId" : 17625,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17625#pullrequestreview-55397203",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3cf3f1d-6855-41d3-8e76-d85781b735b7",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">isReadonlyArray [](start = 13, length = 15)\r\n\r\nI suspect this could replace some of the `isArray` calls above.",
        "createdAt" : "2017-08-09T22:56:53Z",
        "updatedAt" : "2017-08-11T00:05:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a923151719a1092134ef318ae37d795dd60b5e7",
    "line" : 837,
    "diffHunk" : "@@ -1,1 +835,839 @@    }\n\n    function isReadonlyArray(v: any): v is ReadonlyArray<any> {\n        return isArray(v);\n    }"
  }
]