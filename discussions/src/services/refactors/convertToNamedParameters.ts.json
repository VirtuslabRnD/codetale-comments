[
  {
    "id" : "646af01b-e4e3-4ffd-942d-5f3319f1356a",
    "prId" : 30089,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30089#pullrequestreview-208867981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81e01534-263b-4917-9d46-bd1138f635f7",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "One thing I noticed while playing with this refactoring is that it's not offered on \"f\" in `const f = (x, y) => {};` - only on the parameter list.  I don't know whether there's a precedent we're following, but I found it a bit surprising.",
        "createdAt" : "2019-02-26T22:24:02Z",
        "updatedAt" : "2019-03-06T00:56:42Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "07063a05-83d2-4f4c-9b66-92dd0b0806f0",
        "parentId" : "81e01534-263b-4917-9d46-bd1138f635f7",
        "authorId" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "body" : "I thought about that. I followed what the `addOrRemoveBracesToArrowFunction` was doing. This refactor is also not offered on the variable name. Do you think it is better to offer it on the variable name as well? ",
        "createdAt" : "2019-02-27T00:35:57Z",
        "updatedAt" : "2019-03-06T00:56:42Z",
        "lastEditedBy" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "tags" : [
        ]
      },
      {
        "id" : "9b86eddb-94ae-4b01-8391-9bde66ce23b2",
        "parentId" : "81e01534-263b-4917-9d46-bd1138f635f7",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "No, the parameter list seems like a sensible place to offer it.",
        "createdAt" : "2019-02-28T02:41:42Z",
        "updatedAt" : "2019-03-06T00:56:42Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b2d6a2f5488c279f957bfca518b8591a15358a",
    "line" : 235,
    "diffHunk" : "@@ -1,1 +233,237 @@    function getFunctionDeclarationAtPosition(file: SourceFile, startPosition: number, checker: TypeChecker): ValidFunctionDeclaration | undefined {\n        const node = getTouchingToken(file, startPosition);\n        const functionDeclaration = getContainingFunction(node);\n        if (functionDeclaration\n            && isValidFunctionDeclaration(functionDeclaration, checker)"
  },
  {
    "id" : "19c483a5-7c2d-41c7-b733-1038c6ab6ff2",
    "prId" : 30089,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30089#pullrequestreview-208062170",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77ea170f-9562-475c-9d38-d8cdf1f87397",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "can you `assertNever` on the outer switch too? I spent a lot of time worrying about undefined before realising that `functionDeclaration: ValidFunctionDeclaration` and not `: FunctionDeclaration`.",
        "createdAt" : "2019-02-26T23:22:52Z",
        "updatedAt" : "2019-03-06T00:56:42Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b2d6a2f5488c279f957bfca518b8591a15358a",
    "line" : 465,
    "diffHunk" : "@@ -1,1 +463,467 @@            default:\n                return Debug.assertNever(functionDeclaration);\n        }\n    }\n"
  },
  {
    "id" : "ff0f6a08-15a0-4c3f-9439-eeb00eff4452",
    "prId" : 30089,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30089#pullrequestreview-208839930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e4a63cd-ce15-43ad-8ee9-6a20bed02cd0",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Can you explain why we need to suppress trivia and then copy comments instead of just using `newThisParameter.name` as-is?",
        "createdAt" : "2019-02-27T17:24:42Z",
        "updatedAt" : "2019-03-06T00:56:42Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "8958f25a-b686-4a8d-a299-6eca7e3baeae",
        "parentId" : "4e4a63cd-ce15-43ad-8ee9-6a20bed02cd0",
        "authorId" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "body" : "If we don't suppress trivia, trailing comments will be emitted but leading comments will disappear. In essence, I do not know what behavior to expect from trivia when reusing nodes. So I am suppressing both leading and trailing and explicitly copying the comments.",
        "createdAt" : "2019-02-28T00:33:31Z",
        "updatedAt" : "2019-03-06T00:56:42Z",
        "lastEditedBy" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b2d6a2f5488c279f957bfca518b8591a15358a",
    "line" : 347,
    "diffHunk" : "@@ -1,1 +345,349 @@                thisParameter.type);\n\n            suppressLeadingAndTrailingTrivia(newThisParameter.name);\n            copyComments(thisParameter.name, newThisParameter.name);\n            if (thisParameter.type) {"
  },
  {
    "id" : "ad4e917d-08b0-42ff-aa07-f590b184342a",
    "prId" : 30089,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30089#pullrequestreview-209684496",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49fdac79-f5e3-426f-9abd-3a1d93abe981",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Why do we need the class name if there's a variable name?  Is that for ctor calls within the class itself?",
        "createdAt" : "2019-02-28T03:02:29Z",
        "updatedAt" : "2019-03-06T00:56:42Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "d6d6d4ee-f553-41ba-afa6-f75d167a5918",
        "parentId" : "49fdac79-f5e3-426f-9abd-3a1d93abe981",
        "authorId" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "body" : "yes, that's for checking the references to the class within the class expression itself.",
        "createdAt" : "2019-03-01T16:58:04Z",
        "updatedAt" : "2019-03-06T00:56:42Z",
        "lastEditedBy" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b2d6a2f5488c279f957bfca518b8591a15358a",
    "line" : 441,
    "diffHunk" : "@@ -1,1 +439,443 @@                const variableDeclaration = constructorDeclaration.parent.parent;\n                const className = classExpression.name;\n                if (className) return [className, variableDeclaration.name];\n                return [variableDeclaration.name];\n        }"
  },
  {
    "id" : "5484ce6f-6ae7-406d-9135-2576f4a1bdd3",
    "prId" : 30089,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30089#pullrequestreview-209688628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "964eed11-2f4a-4d92-bcc4-09afef4f1eea",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I'm not sure I understand why there would be duplicates.",
        "createdAt" : "2019-03-01T02:12:44Z",
        "updatedAt" : "2019-03-06T00:56:42Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "b83a408b-e7e7-40c0-a012-9a48f221f20f",
        "parentId" : "964eed11-2f4a-4d92-bcc4-09afef4f1eea",
        "authorId" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "body" : "when refactoring the constructor of a class expression, the variable name to which the class is assigned is both a function name and a class name.",
        "createdAt" : "2019-03-01T17:07:32Z",
        "updatedAt" : "2019-03-06T00:56:42Z",
        "lastEditedBy" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b2d6a2f5488c279f957bfca518b8591a15358a",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +76,80 @@        const functionNames = getFunctionNames(functionDeclaration);\n        const classNames = isConstructorDeclaration(functionDeclaration) ? getClassNames(functionDeclaration) : [];\n        const names = deduplicate([...functionNames, ...classNames], equateValues);\n        const checker = program.getTypeChecker();\n"
  }
]