[
  {
    "id" : "428ff660-fe13-4ecb-a3a1-818b21e7b621",
    "prId" : 41975,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41975#pullrequestreview-552985934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0a42e88-8aca-4515-a7ca-8d442066e882",
        "parentId" : null,
        "authorId" : "65426241-927a-48c7-8d6a-617ccfb90020",
        "body" : "```suggestion\r\n        return known.startsWith(requested);\r\n\r\n```",
        "createdAt" : "2020-12-15T21:31:23Z",
        "updatedAt" : "2020-12-22T21:57:54Z",
        "lastEditedBy" : "65426241-927a-48c7-8d6a-617ccfb90020",
        "tags" : [
        ]
      },
      {
        "id" : "c79d4a6f-af86-4d36-b858-bc62f2669a45",
        "parentId" : "c0a42e88-8aca-4515-a7ca-8d442066e882",
        "authorId" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "body" : "I think I probably can't change this?\r\n![image](https://user-images.githubusercontent.com/42591254/102279648-9a76b780-3ee0-11eb-93f0-b63310f67067.png)\r\n",
        "createdAt" : "2020-12-15T22:20:01Z",
        "updatedAt" : "2020-12-22T21:57:54Z",
        "lastEditedBy" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "tags" : [
        ]
      }
    ],
    "commit" : "647db269b51f295642f74439d328fa3dc9366e86",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +21,25 @@    export function refactorKindBeginsWith(known: string, requested: string | undefined): boolean {\n        if(!requested) return true;\n        return known.substr(0, requested.length) === requested;\n    }\n}"
  },
  {
    "id" : "1bb42b9a-73f4-4e18-ad5c-3a42ba66d7d7",
    "prId" : 41975,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41975#pullrequestreview-552970968",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05d24fc4-6583-4c23-86cb-250006d83dfb",
        "parentId" : null,
        "authorId" : "65426241-927a-48c7-8d6a-617ccfb90020",
        "body" : "```suggestion\r\n        return 'error' in info;\r\n```",
        "createdAt" : "2020-12-15T21:36:04Z",
        "updatedAt" : "2020-12-22T21:57:54Z",
        "lastEditedBy" : "65426241-927a-48c7-8d6a-617ccfb90020",
        "tags" : [
        ]
      },
      {
        "id" : "f5465721-11c5-43a4-9f27-ff4c7862b473",
        "parentId" : "05d24fc4-6583-4c23-86cb-250006d83dfb",
        "authorId" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "body" : "This is what I wanted to do, but for some reason we forbid it though a lint rule:\r\n`Error: C:\\Repos\\TypeScript-GH\\src\\services\\refactors\\helpers.ts:14:16 no-in-operator            Don't use the 'in' keyword - use 'hasProperty' to check for key presence instead`",
        "createdAt" : "2020-12-15T22:10:29Z",
        "updatedAt" : "2020-12-22T21:57:54Z",
        "lastEditedBy" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "tags" : [
        ]
      }
    ],
    "commit" : "647db269b51f295642f74439d328fa3dc9366e86",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@     */\n    export function isRefactorErrorInfo(info: unknown): info is RefactorErrorInfo {\n        return (info as RefactorErrorInfo).error !== undefined;\n    }\n"
  },
  {
    "id" : "fb7bb651-9e39-4d74-849e-04884c150ae6",
    "prId" : 41975,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41975#pullrequestreview-557346508",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "144cbf4d-5d2e-4fe9-9c47-f8464cd39169",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Just to confirm, this doesn't require matching full hierarchy levels, right?  So I can get all the extractions with \"refactor.e\"?",
        "createdAt" : "2020-12-17T17:55:40Z",
        "updatedAt" : "2020-12-22T21:57:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "7619318b-f306-4814-8d81-ef440a440281",
        "parentId" : "144cbf4d-5d2e-4fe9-9c47-f8464cd39169",
        "authorId" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "body" : "Yep. I experimented with something fancier but it didn't seem to add anything except code complexity.\r\n\r\nit would be sorta nice if we could provide string completions for the refactor kinds, but I couldn't think of anything besides just listing them all out in a big union in the `refactorKind` type.",
        "createdAt" : "2020-12-22T20:24:24Z",
        "updatedAt" : "2020-12-22T21:57:54Z",
        "lastEditedBy" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "tags" : [
        ]
      }
    ],
    "commit" : "647db269b51f295642f74439d328fa3dc9366e86",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +19,23 @@     * Used to match requested kinds with a known kind.\n     */\n    export function refactorKindBeginsWith(known: string, requested: string | undefined): boolean {\n        if(!requested) return true;\n        return known.substr(0, requested.length) === requested;"
  }
]