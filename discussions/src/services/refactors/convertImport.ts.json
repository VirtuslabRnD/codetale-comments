[
  {
    "id" : "80e928ae-c1aa-4217-a0ca-087e9f2688c5",
    "prId" : 45019,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45019#pullrequestreview-705757926",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a040383-a476-45ca-afe4-53f2c74c5140",
        "parentId" : null,
        "authorId" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "body" : "Old code disregarded named export clauses that aliased the reference to the named import, so code such as \r\n```ts\r\nimport { a } from \"m\";\r\nexport { a as b };\r\n```\r\nwas in fact incorrectly refactored into\r\n```ts\r\nimport { a } from \"m\";\r\nexport { m.a as b };\r\n```\r\n\r\n",
        "createdAt" : "2021-07-14T00:52:30Z",
        "updatedAt" : "2021-07-14T00:52:30Z",
        "lastEditedBy" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e103f91d65197db038cb8c5dddbbe1fda683b21e",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +177,181 @@                    changes.replaceNode(sourceFile, id.parent, factory.createPropertyAssignment(id.text, access));\n                }\n                else if (isExportSpecifier(id.parent)) {\n                    neededNamedImports.add(element);\n                }"
  },
  {
    "id" : "075191e2-8296-4c53-9186-d94bca085acd",
    "prId" : 45019,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45019#pullrequestreview-705762583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa78a312-ca40-4f94-962f-ab296db89a38",
        "parentId" : null,
        "authorId" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "body" : "Changed to use a set instead of an array. The old code used the array as a set by comparing the named imports' `name` properties (of type `Identifiers`) (`element.name` in for loop below), but it pushed into the array a node with a newly-created `Identifier` as `name`, so in fact this new node's `name` would never be equal to the named imports' `name`, and therefore the same named import could be repeated, as in:\r\n```ts\r\nimport { a, b } from \"m\";\r\nexport { b };\r\nexport { b as c };\r\n```\r\nwould become\r\n```ts\r\nimport * as m from \"m\";\r\nimport { b, b } from \"m\"; // Duplicate b import\r\nexport { b };\r\nexport { b as c };\r\n```\r\n\r\n\r\n",
        "createdAt" : "2021-07-14T01:05:56Z",
        "updatedAt" : "2021-07-14T01:05:56Z",
        "lastEditedBy" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e103f91d65197db038cb8c5dddbbe1fda683b21e",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +168,172 @@        // Imports that need to be kept as named imports in the refactored code, to avoid changing the semantics.\n        // More specifically, those are named imports that appear in named exports in the original code, e.g. `a` in `import { a } from \"m\"; export { a }`.\n        const neededNamedImports: Set<ImportSpecifier> = new Set();\n\n        for (const element of toConvert.elements) {"
  },
  {
    "id" : "95798bca-919d-44af-88c5-7266a738ab55",
    "prId" : 37871,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37871#pullrequestreview-435263262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7f8af8e-9e47-4f96-a674-658af9c738da",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "How is `.message` different from `getLocaleSpecificMessage`?",
        "createdAt" : "2020-06-22T21:02:46Z",
        "updatedAt" : "2020-06-22T21:09:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf992adf4bc5ee923a93b51bcaf230ec713f2086",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +26,30 @@            if (context.preferences.provideRefactorNotApplicableReason) {\n                return [\n                    { name: refactorName, description: Diagnostics.Convert_namespace_import_to_named_imports.message, actions: [{ name: actionNameNamespaceToNamed, description: Diagnostics.Convert_namespace_import_to_named_imports.message, notApplicableReason: i.error }] },\n                    { name: refactorName, description: Diagnostics.Convert_named_imports_to_namespace_import.message, actions: [{ name: actionNameNamedToNamespace, description: Diagnostics.Convert_named_imports_to_namespace_import.message, notApplicableReason: i.error }] }\n                ];"
  },
  {
    "id" : "0e3e34b9-5479-4ae8-be89-f4a342f043a2",
    "prId" : 37871,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37871#pullrequestreview-435263262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2316ec84-d131-4a00-bf1b-9e860b741371",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Why no error in this case?",
        "createdAt" : "2020-06-22T21:03:59Z",
        "updatedAt" : "2020-06-22T21:09:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf992adf4bc5ee923a93b51bcaf230ec713f2086",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +47,51 @@        const importDecl = considerPartialSpans ? findAncestor(token, isImportDeclaration) : getParentNodeInSpan(token, file, span);\n        if (!importDecl || !isImportDeclaration(importDecl)) return { error: \"Selection is not an import declaration.\" };\n        if (importDecl.getEnd() < span.start + span.length) return undefined;\n\n        const { importClause } = importDecl;"
  },
  {
    "id" : "d284f3aa-807c-48c2-b6e7-175c2fa69e9b",
    "prId" : 24469,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24469#pullrequestreview-124458417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c1d955a-8bb5-468d-967e-96e018d4235b",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "should we verify that the namedBindings is within the span..\r\n\r\ne.g. selecting `d` in `import d, * as ns from \"./mod\"` should not trigger any action..\r\n",
        "createdAt" : "2018-05-30T00:28:37Z",
        "updatedAt" : "2018-05-30T20:27:39Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "07efb486-5efc-4c4a-8fa1-1fca0817f80f",
        "parentId" : "8c1d955a-8bb5-468d-967e-96e018d4235b",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Added a test. If just `d` is selected, `getParentNodeInSpan` will return just `d` and not the entire import declaration.",
        "createdAt" : "2018-05-30T15:22:23Z",
        "updatedAt" : "2018-05-30T20:27:39Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bab662d16f6cab46efbab2ea868deeb37b67fc78",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +27,31 @@        if (!importDecl || !isImportDeclaration(importDecl)) return undefined;\n        const { importClause } = importDecl;\n        return importClause && importClause.namedBindings;\n    }\n"
  }
]