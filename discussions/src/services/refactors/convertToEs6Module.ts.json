[
  {
    "id" : "45c10c7a-e2b5-43a9-ab4a-9dbcc5ddc7b0",
    "prId" : 21739,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21739#pullrequestreview-95171240",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6b123ea-f0d3-4a0c-9907-83deb13d0e4a",
        "parentId" : null,
        "authorId" : "f6f9f6e7-b6dc-4ac7-9d04-3df732edd35b",
        "body" : "Why not `export { g as f }; function g() {}`?\r\n\r\nThough I guess this would be converting an expression into declaration.",
        "createdAt" : "2018-02-08T07:46:05Z",
        "updatedAt" : "2018-02-08T07:46:05Z",
        "lastEditedBy" : "f6f9f6e7-b6dc-4ac7-9d04-3df732edd35b",
        "tags" : [
        ]
      },
      {
        "id" : "5a974e88-52c4-4759-a734-fe43bdaa0e7b",
        "parentId" : "e6b123ea-f0d3-4a0c-9907-83deb13d0e4a",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "That would introduce `g` into module scope, where before it was only accessible inside of its own body.",
        "createdAt" : "2018-02-08T17:53:43Z",
        "updatedAt" : "2018-02-08T17:53:43Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d5fd85efa556c361c1bf16ff42afbc14a66aa1f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +379,383 @@                const { name: expressionName } = exported as FunctionExpression;\n                if (expressionName && expressionName.text !== name) {\n                    // `exports.f = function g() {}` -> `export const f = function g() {}`\n                    return exportConst();\n                }"
  },
  {
    "id" : "adda90fe-7e73-448b-85a3-7efd61c416f3",
    "prId" : 19916,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19916#pullrequestreview-76486782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3969732b-db4d-4d13-bbda-885d97054022",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Out of curiosity, why alias boolean like this?",
        "createdAt" : "2017-11-13T20:50:13Z",
        "updatedAt" : "2018-01-09T21:01:12Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "e2c28dab-f965-4494-b2d0-c6dcbfbc7655",
        "parentId" : "3969732b-db4d-4d13-bbda-885d97054022",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "So I don't have to keep documenting what the return value means -- `convertAssignment(...): boolean` doesn't really indicate that well.",
        "createdAt" : "2017-11-14T15:45:43Z",
        "updatedAt" : "2018-01-09T21:01:12Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d67ef009c0ea63416675289f5d7b245d34aa3a8f",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +169,173 @@\n    /** Whether `module.exports =` was changed to `export default` */\n    type ModuleExportsChanged = boolean;\n\n    function convertStatement(sourceFile: SourceFile, statement: Statement, checker: TypeChecker, changes: textChanges.ChangeTracker, identifiers: Identifiers, target: ScriptTarget, exports: ExportRenames): ModuleExportsChanged {"
  },
  {
    "id" : "b2c0476c-0f46-4165-847a-879917dbae2e",
    "prId" : 19916,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19916#pullrequestreview-76487241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb010d09-ff1d-4c39-826b-5198634c9c69",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I'm not sure I understand what work remains to be done here.",
        "createdAt" : "2017-11-13T20:53:03Z",
        "updatedAt" : "2018-01-09T21:01:12Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "d0e69d4a-852d-41b8-9988-8b8b2a10557f",
        "parentId" : "fb010d09-ff1d-4c39-826b-5198634c9c69",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "We could transpile that test to just `export function f() {}` instead of `function f() {} export default { f };`. But it would be work, since we would have to go backwards from the `module.exports =` statement to get a set of nodes that need to be changed, and I don't know how common it is to write a module like that.",
        "createdAt" : "2017-11-14T15:46:48Z",
        "updatedAt" : "2018-01-09T21:01:12Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d67ef009c0ea63416675289f5d7b245d34aa3a8f",
    "line" : 293,
    "diffHunk" : "@@ -1,1 +291,295 @@                case SyntaxKind.GetAccessor:\n                case SyntaxKind.SetAccessor:\n                // TODO: Maybe we should handle this? See fourslash test `refactorConvertToEs6Module_export_object_shorthand.ts`.\n                case SyntaxKind.ShorthandPropertyAssignment:\n                case SyntaxKind.SpreadAssignment:"
  },
  {
    "id" : "3d06f562-daab-4e71-a266-1e66e16af2b3",
    "prId" : 19916,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19916#pullrequestreview-76484083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e41e7e2-f5e4-4d89-97d2-72b1cb21e89e",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I would have guessed there was a constant for `\"default\"` somewhere.",
        "createdAt" : "2017-11-13T20:54:00Z",
        "updatedAt" : "2018-01-09T21:01:12Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "4ea72595-980f-4724-b05b-1134b6bacac6",
        "parentId" : "1e41e7e2-f5e4-4d89-97d2-72b1cb21e89e",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Doesn't look like it, `\"default\"` occurs 67 times in our code. You could make a separate PR for that.",
        "createdAt" : "2017-11-14T15:39:04Z",
        "updatedAt" : "2018-01-09T21:01:12Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d67ef009c0ea63416675289f5d7b245d34aa3a8f",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +103,107 @@                    const call = parent as CallExpression;\n                    if (isRequireCall(call, /*checkArgumentIsStringLiteral*/ false)) {\n                        changes.replaceNode(importingFile, parent, createPropertyAccess(getSynthesizedDeepClone(call), \"default\"));\n                    }\n                    break;"
  },
  {
    "id" : "20802c55-2a04-4d9d-b32c-97fee382a968",
    "prId" : 19916,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19916#pullrequestreview-76487621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fe4c249-1d9d-4d6d-b5cd-19e2f67069bd",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Does this cover a reasonably short list of kinds?  It would be nice if we could have the compiler notify us when a new case requires coverage.",
        "createdAt" : "2017-11-13T21:10:38Z",
        "updatedAt" : "2018-01-09T21:01:12Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "d086ef47-c446-45f9-8224-676ae9688111",
        "parentId" : "4fe4c249-1d9d-4d6d-b5cd-19e2f67069bd",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Unfortunately `Expression` is a huge list of kinds. But only function/class expressions can be converted to declarations, all others should be left as expressions.",
        "createdAt" : "2017-11-14T15:47:43Z",
        "updatedAt" : "2018-01-09T21:01:12Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d67ef009c0ea63416675289f5d7b245d34aa3a8f",
    "line" : 392,
    "diffHunk" : "@@ -1,1 +390,394 @@                // `exports.C = class {}` --> `export class C {}`\n                return classExpressionToDeclaration(name, modifiers, exported as ClassExpression);\n            default:\n                // `exports.x = 0;` --> `export const x = 0;`\n                return makeConst(modifiers, createIdentifier(name), exported);"
  }
]