[
  {
    "id" : "cd17c090-4e55-4edb-9484-7365dbff3f20",
    "prId" : 38255,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38255#pullrequestreview-404721394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec7f00ef-b33a-460c-b0df-3adc013ea4b0",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Array? ",
        "createdAt" : "2020-04-30T18:43:34Z",
        "updatedAt" : "2020-04-30T18:43:41Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "16898504-f2bf-4def-af70-23eba1c843f7",
        "parentId" : "ec7f00ef-b33a-460c-b0df-3adc013ea4b0",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "@sheetalkamat I think it can be a new feature, however, in the current implementation Array elements are not available in NavigationBar for both cases not only for default exported arrays. \r\n<img width=\"706\" alt=\"Screenshot 2020-05-04 at 08 49 07\" src=\"https://user-images.githubusercontent.com/509265/80939211-83b5a180-8de4-11ea-920f-b1fdcb4fb0b6.png\">\r\n",
        "createdAt" : "2020-05-04T05:54:44Z",
        "updatedAt" : "2020-05-04T05:54:44Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      }
    ],
    "commit" : "800fa72571d61a8326543e64548d39ca2986738c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +310,314 @@            case SyntaxKind.ExportAssignment: {\n                const expression = (<ExportAssignment>node).expression;\n                if (isObjectLiteralExpression(expression)) {\n                    startNode(node);\n                    addChildrenRecursively(expression);"
  },
  {
    "id" : "47d44dcf-eba2-4eb1-8761-5de359652c05",
    "prId" : 35477,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35477#pullrequestreview-346135367",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64792af0-c979-4f3c-9c62-9b9dbfebdf31",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think it would be better to have `export=` as the name when using `export = abc` statement and `default` in the export default assignments?",
        "createdAt" : "2019-12-06T01:01:51Z",
        "updatedAt" : "2020-01-21T21:46:38Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "fcab500c-0f59-4db1-b44f-731aaea61269",
        "parentId" : "64792af0-c979-4f3c-9c62-9b9dbfebdf31",
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "This is in - thanks",
        "createdAt" : "2020-01-21T19:31:24Z",
        "updatedAt" : "2020-01-21T21:46:38Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "de849b9a6be003357b3a078893c361e8b2963cd3",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +683,687 @@                    ? `\"${escapeString(getBaseFileName(removeFileExtension(normalizePath(sourceFile.fileName))))}\"`\n                    : \"<global>\";\n            case SyntaxKind.ExportAssignment:\n                return isExportAssignment(node) && node.isExportEquals ? InternalSymbolName.ExportEquals : InternalSymbolName.Default;\n"
  },
  {
    "id" : "d7fbc7f8-3ae8-43e4-aef2-aa513f30d4f2",
    "prId" : 32782,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32782#pullrequestreview-275565579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1c3e9af-7850-4511-9883-68a556adc127",
        "parentId" : null,
        "authorId" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "body" : "```ts\r\nfoo = function () { };\r\nfoo.prototype = {};\r\n```\r\n\r\nThis ends up being undefined in the above case and breaks badly enough to drop the whole nav tree.",
        "createdAt" : "2019-08-15T16:12:29Z",
        "updatedAt" : "2019-08-25T21:04:17Z",
        "lastEditedBy" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "tags" : [
        ]
      },
      {
        "id" : "e61e4393-fa29-48d7-8c56-a44b100e7469",
        "parentId" : "e1c3e9af-7850-4511-9883-68a556adc127",
        "authorId" : "ab15ed9e-363f-447f-850d-c2bd363aebf4",
        "body" : "Fixed it.",
        "createdAt" : "2019-08-15T17:33:21Z",
        "updatedAt" : "2019-08-25T21:04:17Z",
        "lastEditedBy" : "ab15ed9e-363f-447f-850d-c2bd363aebf4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f852f002a20835e1fa367a5e7fe48b9f22949fa2",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +328,332 @@                        // If we see a prototype assignment, start tracking the target as a class\n                        // This is only done for simple classes not nested assignments.\n                        if (isIdentifier(prototypeAccess.expression)) {\n                            addTrackedEs5Class(prototypeAccess.expression.text);\n                            className = prototypeAccess.expression;"
  },
  {
    "id" : "b6cb89f3-b87d-4556-8247-c82b914529d0",
    "prId" : 32672,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32672#pullrequestreview-272777667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c1fd268-48cb-468f-8f8b-d20d469b51c2",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I think you were planning to add a comment to help consumers decide whether or not to call this helper.",
        "createdAt" : "2019-08-08T01:52:44Z",
        "updatedAt" : "2019-08-23T20:52:05Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "751c5b06-17e5-442a-8ee2-8bfda89dd2ca",
        "parentId" : "1c1fd268-48cb-468f-8f8b-d20d469b51c2",
        "authorId" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "body" : "This method should be called for every string that is returned. I think the comment is unnecessary, as the method is to small to describe itself. Let me know if you think otherwise.",
        "createdAt" : "2019-08-08T19:03:19Z",
        "updatedAt" : "2019-08-23T20:52:05Z",
        "lastEditedBy" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f76e3b59b2dc44c975df346a6fc1cb898ca9fe63",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +705,709 @@    }\n\n    function cleanText(text: string): string {\n        // Truncate to maximum amount of characters as we don't want to do a big replace operation.\n        text = text.length > maxLength ? text.substring(0, maxLength) + \"...\" : text;"
  },
  {
    "id" : "69702ed7-e587-4d94-830a-cdc22fa7f603",
    "prId" : 32672,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32672#pullrequestreview-272849489",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff3f4b3a-6aae-419d-a937-8c1b770493ea",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Even if we're not going to call this in a single location, can we assert in a single location that the navbar item text never contains newlines?",
        "createdAt" : "2019-08-08T01:54:54Z",
        "updatedAt" : "2019-08-23T20:52:05Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "3e9666cc-edef-494e-becd-b3fcf476a158",
        "parentId" : "ff3f4b3a-6aae-419d-a937-8c1b770493ea",
        "authorId" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "body" : "I feel like checking again should be solved by the tests instead of asserting. I have updated an existing test and added a couple more for avoiding introducing the same issues.",
        "createdAt" : "2019-08-08T21:32:15Z",
        "updatedAt" : "2019-08-23T20:52:05Z",
        "lastEditedBy" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f76e3b59b2dc44c975df346a6fc1cb898ca9fe63",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +705,709 @@    }\n\n    function cleanText(text: string): string {\n        // Truncate to maximum amount of characters as we don't want to do a big replace operation.\n        text = text.length > maxLength ? text.substring(0, maxLength) + \"...\" : text;"
  },
  {
    "id" : "cb0c29f9-97e1-4fc3-b84c-57a60f8502bc",
    "prId" : 11268,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11268#pullrequestreview-2499067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9273c2c0-2c47-4d61-b6a3-4b9a40c7f3fb",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Incomplete check, `typeof null===\"object\"` too.\n\nI'll submit a PR.\n",
        "createdAt" : "2016-10-03T10:34:02Z",
        "updatedAt" : "2016-10-03T10:45:02Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a83a692c40dabf3c813a329737c1574dea74403b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +327,331 @@\n    // More efficient to create a collator once and use its `compare` than to call `a.localeCompare(b)` many times.\n    const collator: { compare(a: string, b: string): number } = typeof Intl === \"object\" && typeof Intl.Collator === \"function\" ? new Intl.Collator() : undefined;\n    // Intl is missing in Safari, and node 0.10 treats \"a\" as greater than \"B\".\n    const localeCompareIsCorrect = collator && collator.compare(\"a\", \"B\") < 0;"
  },
  {
    "id" : "0157d754-e95a-47c7-8375-caa769944e5a",
    "prId" : 7178,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff72e80b-7c0f-43d7-9ccd-159f7efc6345",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Explicitly return false\n",
        "createdAt" : "2016-03-25T06:27:09Z",
        "updatedAt" : "2016-03-26T18:43:50Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7c3547937c700d207c01831eae2b0798a759385",
    "line" : null,
    "diffHunk" : "@@ -1,1 +204,208 @@            }\n            return false;\n        }\n\n        function isTopLevelFunctionDeclaration(functionDeclaration: FunctionLikeDeclaration): boolean {"
  },
  {
    "id" : "42428294-cabf-4482-943d-86da4a323cfd",
    "prId" : 826,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a38baebf-cf41-401e-9a1c-7ce92805a48a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I think you should be testing on the `name` field of a declaration, not `____.name.text`.\n",
        "createdAt" : "2014-10-06T06:06:15Z",
        "updatedAt" : "2014-10-06T06:47:52Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "a42f49dc-75fb-4531-94ab-3687ac978229",
        "parentId" : "a38baebf-cf41-401e-9a1c-7ce92805a48a",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "When would a declaration not have a name?\n",
        "createdAt" : "2014-10-06T06:41:50Z",
        "updatedAt" : "2014-10-06T06:47:52Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "e9c346dc-3094-4996-923e-26902dd541eb",
        "parentId" : "a38baebf-cf41-401e-9a1c-7ce92805a48a",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "So you can either have an anonymous function expression, or you can have a declaration with a missing name. In either case, you only need to check the `name` property, not the text.\n\nA subtlety I've realized from you asking this: you can have a property with an empty name (using the string literals `\"\"`/`''` are totally fair game for property names); so the way you call this from `getNavigationBarItem` is incorrect because you are dropping empty-named properties, methods, etc. Add a test case for this.\n",
        "createdAt" : "2014-10-06T07:01:23Z",
        "updatedAt" : "2014-10-06T07:02:32Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "9e4b6feb-fc52-4ef1-af9b-0c2a4122d680",
        "parentId" : "a38baebf-cf41-401e-9a1c-7ce92805a48a",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "1) We can't ever run into a function expression in this code.  \n2) if we have a declaration with a missing name, you still have a `name` field.  \n\n```\n        function parseFunctionDeclaration(pos?: number, flags?: NodeFlags): FunctionDeclaration {\n            var node = <FunctionDeclaration>createNode(SyntaxKind.FunctionDeclaration, pos);\n            if (flags) node.flags = flags;\n            parseExpected(SyntaxKind.FunctionKeyword);\n            node.name = parseIdentifier();\n```\n",
        "createdAt" : "2014-10-06T07:13:05Z",
        "updatedAt" : "2014-10-06T07:13:29Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "5bc586cb-f9fc-44ec-8332-87cd7a55e82e",
        "parentId" : "a38baebf-cf41-401e-9a1c-7ce92805a48a",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Right, so (1) is out, but (2) can be covered with a check for `SyntaxKind.Missing` on the kind, right? Checking the `text` field seems incorrect for the reason that I mentioned regarding string literals.\n",
        "createdAt" : "2014-10-06T07:33:32Z",
        "updatedAt" : "2014-10-06T07:33:32Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "744cd9c3-a351-40fc-a7f8-0e763ad25460",
        "parentId" : "a38baebf-cf41-401e-9a1c-7ce92805a48a",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "String literals should be fine.  That's why we use getTextOfNode.  A property with a string literal name will show up as \"\" in the navbar.  This is _good_. This is how we want these members to be displayed :)\n\nWhat we're trying to avoid is when we would actually not have a name for an item (which is different than the name being the literal string &lt;quote&gt;&lt;quote&gt;)\n",
        "createdAt" : "2014-10-06T07:37:53Z",
        "updatedAt" : "2014-10-06T07:38:51Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "b6b5552e-adc8-4d4c-9162-feba26a3313a",
        "parentId" : "a38baebf-cf41-401e-9a1c-7ce92805a48a",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Ah, right, we pass in the source text, never mind. :smiley: \n",
        "createdAt" : "2014-10-06T08:00:04Z",
        "updatedAt" : "2014-10-06T08:00:04Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "521f64be-83f2-4d75-aed7-176daa909a8a",
        "parentId" : "a38baebf-cf41-401e-9a1c-7ce92805a48a",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Though if you could still write a test, that would be ideal.\n",
        "createdAt" : "2014-10-06T08:01:15Z",
        "updatedAt" : "2014-10-06T08:01:15Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "904f71bb-2070-4f24-a1d7-c9c7e20994a9",
        "parentId" : "a38baebf-cf41-401e-9a1c-7ce92805a48a",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Sure.  I can do that.\n",
        "createdAt" : "2014-10-06T10:51:06Z",
        "updatedAt" : "2014-10-06T10:51:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a48da9c94caef0eb9e908b58964af8407d011d5",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +235,239 @@        }\n\n        function isEmpty(text: string) {\n            return !text || text.trim() === \"\";\n        }"
  },
  {
    "id" : "8390adae-894a-405f-aeda-6baf73809725",
    "prId" : 826,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c06f5779-7c58-4d2b-b58f-257eba78cfcb",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I'd rather you did this at the `create_Item` level, but I guess it doesn't really matter.\n",
        "createdAt" : "2014-10-06T06:08:43Z",
        "updatedAt" : "2014-10-06T06:47:52Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a48da9c94caef0eb9e908b58964af8407d011d5",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +240,244 @@\n        function getNavigationBarItem(text: string, kind: string, kindModifiers: string, spans: TypeScript.TextSpan[], childItems: ts.NavigationBarItem[] = [], indent: number = 0): ts.NavigationBarItem {\n            if (isEmpty(text)) {\n                return undefined;\n            }"
  },
  {
    "id" : "4c7873e2-fde0-410f-bba7-5b474536da90",
    "prId" : 826,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d62d3384-0010-44b4-9bdb-d28e155851ef",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why are we sorting nodes? Is this not a view-level concern?\n",
        "createdAt" : "2014-10-06T06:23:40Z",
        "updatedAt" : "2014-10-06T06:47:52Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "2ce80c17-243f-4fec-8118-b07ba0d252ae",
        "parentId" : "d62d3384-0010-44b4-9bdb-d28e155851ef",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "1) No.  Because it's up to the language if it wants to be sorted or not.  The navbars are just a list of items.\n2) Even if it was, there is no way for view to know how to sort this.  Recall that you have something akin to\n\n```\n<global>\n    class C\n    interface I\n```\n\nJust trying to sort that by text would be <global> at the bottom as both of the 'child' items start with spaces/indents. \n",
        "createdAt" : "2014-10-06T06:41:13Z",
        "updatedAt" : "2014-10-06T06:47:52Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a48da9c94caef0eb9e908b58964af8407d011d5",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +71,75 @@        }\n         \n        function sortNodes(nodes: Node[]): Node[] {\n            return nodes.slice(0).sort((n1: Declaration, n2: Declaration) => {\n                if (n1.name && n2.name) {"
  }
]