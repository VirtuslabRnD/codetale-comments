[
  {
    "id" : "a455201e-d508-4c72-b014-70ae1b8d2698",
    "prId" : 45138,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45138#pullrequestreview-712187921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3773117e-6c12-415d-83d6-c6e3268663c5",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I wouldn't expect the condition to be necessary, since I believe cancellationToken already uses a time-based cache.",
        "createdAt" : "2021-07-21T18:44:38Z",
        "updatedAt" : "2021-07-21T18:44:45Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "2aa5d704-40aa-4cdc-91f5-3926d91d9534",
        "parentId" : "3773117e-6c12-415d-83d6-c6e3268663c5",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I’ve definitely heard advice against checking the cancellation token repeatedly, but it could have been outdated or ill-advised. I’ll do a quick perf comparison.",
        "createdAt" : "2021-07-21T20:29:57Z",
        "updatedAt" : "2021-07-21T20:29:57Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "799814e4-4cf1-4f8f-bad5-4cec2f671ba5",
        "parentId" : "3773117e-6c12-415d-83d6-c6e3268663c5",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "TS Server implements a throttled cancellation token, but a LS host could provide a less efficient implementation. I don’t know if we care about that?",
        "createdAt" : "2021-07-21T20:35:02Z",
        "updatedAt" : "2021-07-21T20:35:02Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "a8722b09-04df-4391-8ada-6bbd1ebb25b7",
        "parentId" : "3773117e-6c12-415d-83d6-c6e3268663c5",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I care in principle, but we'd need to review all of our usages to address that (potential) problem.",
        "createdAt" : "2021-07-21T20:37:28Z",
        "updatedAt" : "2021-07-21T20:37:29Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "2a6f1f84-fa0d-4190-8732-a0c4e0676ffd",
        "parentId" : "3773117e-6c12-415d-83d6-c6e3268663c5",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I know a lot of tree walking functions that switch on node kind select only a few container kinds to check, e.g.\r\n\r\n```ts\r\n        function checkExpressionWorker(node: Expression | QualifiedName, checkMode: CheckMode | undefined, forceTuple?: boolean): Type {\r\n            const kind = node.kind;\r\n            if (cancellationToken) {\r\n                // Only bother checking on a few construct kinds.  We don't want to be excessively\r\n                // hitting the cancellation token on every node we check.\r\n                switch (kind) {\r\n                    case SyntaxKind.ClassExpression:\r\n                    case SyntaxKind.FunctionExpression:\r\n                    case SyntaxKind.ArrowFunction:\r\n                        cancellationToken.throwIfCancellationRequested();\r\n                }\r\n            }\r\n```",
        "createdAt" : "2021-07-21T20:54:24Z",
        "updatedAt" : "2021-07-21T20:54:24Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "244cdbfe-a906-4be4-83de-0d58d750792d",
        "parentId" : "3773117e-6c12-415d-83d6-c6e3268663c5",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "In fact, I’m confident that this comment is the reason I had it in my head that I should not check the cancellation token tens of thousands of times in a row in a loop.",
        "createdAt" : "2021-07-21T20:55:06Z",
        "updatedAt" : "2021-07-21T20:55:06Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "48ddf492-b03f-4a7b-8490-d4d4f702af9d",
        "parentId" : "3773117e-6c12-415d-83d6-c6e3268663c5",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Fair enough",
        "createdAt" : "2021-07-21T21:01:39Z",
        "updatedAt" : "2021-07-21T21:01:39Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a761a62b4a70e881380379a3c0f859cbd61eac20",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +326,330 @@        let moduleCount = 0;\n        forEachExternalModuleToImportFrom(program, host, /*useAutoImportProvider*/ true, (moduleSymbol, moduleFile, program, isFromPackageJson) => {\n            if (++moduleCount % 100 === 0) cancellationToken?.throwIfCancellationRequested();\n            const seenExports = new Map<Symbol, true>();\n            const checker = program.getTypeChecker();"
  },
  {
    "id" : "e81638dc-d06c-4503-876a-af05b31d3be4",
    "prId" : 44816,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44816#pullrequestreview-700162718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75aac538-b6b6-4004-b9a6-3b6811331988",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "`exportInfo` is more persistent than `symbols` because the former never stores transient symbols. `symbols` stores transient symbols only during the life of the current program, and it gets cleared with every `updateGraph()`.",
        "createdAt" : "2021-06-29T20:58:51Z",
        "updatedAt" : "2021-06-29T22:08:18Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "d86b7c3e-f413-4083-a807-0a9632de482d",
        "parentId" : "75aac538-b6b6-4004-b9a6-3b6811331988",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "This isn't stored as an array because we want the id to persist across clears?",
        "createdAt" : "2021-07-01T21:37:04Z",
        "updatedAt" : "2021-07-01T21:56:20Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "0e6e0dc0-63cd-44dd-afef-827f96f9791a",
        "parentId" : "75aac538-b6b6-4004-b9a6-3b6811331988",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Right, and subsequent cache sets could happen in essentially random order, and I believe that Maps are better-performing than sparse arrays.",
        "createdAt" : "2021-07-06T16:32:26Z",
        "updatedAt" : "2021-07-06T16:32:26Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "df938164d4096059d646945605ed00baa6e7d2a4",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +63,67 @@        let exportInfoId = 1;\n        const exportInfo = createMultiMap<string, CachedSymbolExportInfo>();\n        const symbols = new Map<number, [symbol: Symbol, moduleSymbol: Symbol]>();\n        let usableByFileName: Path | undefined;\n        const cache: ExportInfoMap = {"
  },
  {
    "id" : "87c97f92-5cee-4662-9d74-aa67ba035d58",
    "prId" : 44816,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44816#pullrequestreview-695488483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91cfec7a-4ac9-4766-8de4-ace53930e18a",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This function, wrapped by the `get` and `forEach` methods of the returned cache, turn `CachedSymbolExportInfo`, which might be missing `symbol` or `moduleSymbol` if they were transient, by pulling those from the short-term `symbols` cache, or falling back to fetching fresh versions of them from the current program.",
        "createdAt" : "2021-06-29T21:03:37Z",
        "updatedAt" : "2021-06-29T22:08:18Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "df938164d4096059d646945605ed00baa6e7d2a4",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +142,146 @@        return cache;\n\n        function rehydrateCachedInfo(info: CachedSymbolExportInfo): SymbolExportInfo {\n            if (info.symbol && info.moduleSymbol) return info as SymbolExportInfo;\n            const { id, exportKind, isTypeOnly, isFromPackageJson, moduleFileName } = info;"
  },
  {
    "id" : "5f83b8a8-95e5-4d7f-926f-d34c349cad62",
    "prId" : 44816,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44816#pullrequestreview-695544550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24af853b-d333-42b8-ba94-6d11fc8a66da",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Symbols stored in `symbols` if transient, `exportInfo` if not. I tried never storing _any_ symbols, but the performance hit was too great.",
        "createdAt" : "2021-06-29T22:11:34Z",
        "updatedAt" : "2021-06-29T22:11:34Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "df938164d4096059d646945605ed00baa6e7d2a4",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +97,101 @@                    symbol: storedSymbol,\n                    moduleSymbol: storedModuleSymbol,\n                });\n            },\n            get: (importingFile, importedName, symbol, moduleName, checker) => {"
  }
]