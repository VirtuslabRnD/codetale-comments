[
  {
    "id" : "8b3e4b0f-6650-48d2-8a3f-5512f0a1bac1",
    "prId" : 29214,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29214#pullrequestreview-188543581",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1d80d71-48ca-4a2e-a0ef-b76d0bd01cc3",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "does this mean getTransformationBody needs to change too?",
        "createdAt" : "2018-12-31T23:19:07Z",
        "updatedAt" : "2019-01-01T00:25:38Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "06d5da71-110a-4b10-97f0-1c21e4e60a97",
        "parentId" : "f1d80d71-48ca-4a2e-a0ef-b76d0bd01cc3",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "No change necessary in this case.",
        "createdAt" : "2019-01-01T00:02:40Z",
        "updatedAt" : "2019-01-01T00:25:38Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb57f17aba3d6d5a5e1cb9e2e9ba4d78f4736b7b",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +175,179 @@    }\n\n    // should be kept up to date with getTransformationBody in convertToAsyncFunction.ts\n    function isFixablePromiseArgument(arg: Expression): boolean {\n        switch (arg.kind) {"
  },
  {
    "id" : "6153ccc0-9b2e-491c-9706-3bd205fe4a84",
    "prId" : 26930,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26930#pullrequestreview-155568512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0bdadd5-7b59-4d85-a152-62a5eea7d2da",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">node is CallExpression [](start = 43, length = 22)\r\n\r\nI remember being told not to do this if it didn't accept all CallExpressions, but I may have misunderstood.",
        "createdAt" : "2018-09-14T02:27:18Z",
        "updatedAt" : "2018-09-14T15:58:43Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "a06eed0b-0811-43a0-8b21-fac9356f555c",
        "parentId" : "f0bdadd5-7b59-4d85-a152-62a5eea7d2da",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "I'm not sure why that would be true...",
        "createdAt" : "2018-09-14T15:44:09Z",
        "updatedAt" : "2018-09-14T15:58:43Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "c88b6867-0a3b-4e1f-b69c-54020741687f",
        "parentId" : "f0bdadd5-7b59-4d85-a152-62a5eea7d2da",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "It is technically unsound since it filters that type out of unions:\r\n```ts\r\nclass A { constructor(readonly a: number) {} }\r\nclass B { constructor(readonly b: number) {} }\r\n\r\nfunction isA42(ab: A | B): ab is A {\r\n    return ab instanceof A && ab.a === 42;\r\n}\r\n\r\nfunction f(ab: A | B): number {\r\n    if (isA42(ab)) {\r\n        return ab.a;\r\n    } else {\r\n        return ab.b; // TS thinks this must be `B`\r\n    }\r\n}\r\n\r\nf(new A(43)).toFixed();\r\n```\r\n\r\nHowever, TypeScript doesn't give us a way to declare that a function accepts *only* inputs of some type but not *all* inputs of some type. And without the type guard you'll need casts elsewhere, which are also unsound. So I think this is fine.",
        "createdAt" : "2018-09-14T16:24:53Z",
        "updatedAt" : "2018-09-14T16:24:53Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "57a6dbd6fa7715e3176339743b30c1de7ed55d73",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +189,193 @@    }\n\n    function isPromiseHandler(node: Node): node is CallExpression {\n        return isCallExpression(node) && (hasPropertyAccessExpressionWithName(node, \"then\") || hasPropertyAccessExpressionWithName(node, \"catch\"));\n    }"
  },
  {
    "id" : "3bdf26bc-5438-4bd0-b68c-41501966b1a7",
    "prId" : 26930,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26930#pullrequestreview-155597539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c546d51e-f70e-47fb-a243-709251520665",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">NullKeyword [](start = 28, length = 11)\r\n\r\nNull but not undefined?",
        "createdAt" : "2018-09-14T02:27:50Z",
        "updatedAt" : "2018-09-14T15:58:43Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "a16fbbf1-5c0e-407f-ab52-d6f676e3d073",
        "parentId" : "c546d51e-f70e-47fb-a243-709251520665",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "Nope. From what I understand, `SyntaxKind.UndefinedKeyword` refers to only the `undefined` type keyword. `undefined` in the value space is an `Identifier` with the name `undefined`.",
        "createdAt" : "2018-09-14T15:45:02Z",
        "updatedAt" : "2018-09-14T15:58:43Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "600637e9-dc41-47b3-9ffe-6cbf1e56a5e4",
        "parentId" : "c546d51e-f70e-47fb-a243-709251520665",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Weird.",
        "createdAt" : "2018-09-14T17:49:29Z",
        "updatedAt" : "2018-09-14T17:49:29Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "57a6dbd6fa7715e3176339743b30c1de7ed55d73",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +196,200 @@    function isFixablePromiseArgument(arg: Expression): boolean {\n        switch (arg.kind) {\n            case SyntaxKind.NullKeyword:\n            case SyntaxKind.Identifier: // identifier includes undefined\n            case SyntaxKind.FunctionDeclaration:"
  },
  {
    "id" : "bf2db2e7-f46d-4bc8-9679-cf0c21ff24d1",
    "prId" : 26930,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26930#pullrequestreview-155597479",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d09533bc-7089-4aae-8bd1-981c8b3c65a7",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">isFixablePromiseArgument [](start = 13, length = 24)\r\n\r\nI don't feel strongly about it but I thought we had concluded this belonged in the code fix (i.e. we could make suggestions more often than we offered fixes).  Did something change?",
        "createdAt" : "2018-09-14T02:29:58Z",
        "updatedAt" : "2018-09-14T15:58:43Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "42fd8f98-0686-4558-9fa3-5481b1a990cb",
        "parentId" : "d09533bc-7089-4aae-8bd1-981c8b3c65a7",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "Yeah, I spoke to @RyanCavanaugh who felt strongly that the suggestion diagnostic should be equally conservative as the code fix.",
        "createdAt" : "2018-09-14T15:46:17Z",
        "updatedAt" : "2018-09-14T15:58:43Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "22d987ff-287c-437c-86b6-2a959f65b311",
        "parentId" : "d09533bc-7089-4aae-8bd1-981c8b3c65a7",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Suits me.",
        "createdAt" : "2018-09-14T17:49:19Z",
        "updatedAt" : "2018-09-14T17:49:19Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "57a6dbd6fa7715e3176339743b30c1de7ed55d73",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +194,198 @@\n    // should be kept up to date with getTransformationBody in convertToAsyncFunction.ts\n    function isFixablePromiseArgument(arg: Expression): boolean {\n        switch (arg.kind) {\n            case SyntaxKind.NullKeyword:"
  }
]