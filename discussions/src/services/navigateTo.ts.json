[
  {
    "id" : "292bfefa-09f1-4b09-b22e-4b9a14eb0401",
    "prId" : 23237,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23237#pullrequestreview-110232881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d14d32a-df7c-48ad-9d81-0f1773be2aa1",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "should return ReadonlyArray then.",
        "createdAt" : "2018-04-06T22:55:06Z",
        "updatedAt" : "2018-04-06T23:18:37Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "4c09255f-1661-4681-ba48-525928a32c08",
        "parentId" : "5d14d32a-df7c-48ad-9d81-0f1773be2aa1",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This is exposed as a service, so must wait on #16312 to turn these all to `ReadonlyArray` (e.g. `ReadonlyArray<DefinitionInfo>`, `ReadonlyArray<ReferenceEntry>`...)",
        "createdAt" : "2018-04-06T23:19:17Z",
        "updatedAt" : "2018-04-06T23:19:17Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "03b4949d1f4444e8308ba2fca035b40835f74d11",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +9,13 @@    }\n\n    export function getNavigateToItems(sourceFiles: ReadonlyArray<SourceFile>, checker: TypeChecker, cancellationToken: CancellationToken, searchValue: string, maxResultCount: number, excludeDtsFiles: boolean): NavigateToItem[] {\n        const patternMatcher = createPatternMatcher(searchValue);\n        if (!patternMatcher) return emptyArray;"
  },
  {
    "id" : "b4810373-4da3-491d-9ea4-040b4b4930ea",
    "prId" : 19452,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19452#pullrequestreview-72348261",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b06f443b-6bfa-4e52-9d76-2016c8cdf781",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This may run inside of a unit test, causing that test to fail for developers from other countries...",
        "createdAt" : "2017-10-26T14:13:38Z",
        "updatedAt" : "2017-11-04T06:53:22Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "b6a454db-7b13-4f28-abe1-684e53d945aa",
        "parentId" : "b06f443b-6bfa-4e52-9d76-2016c8cdf781",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I've added a `beforeEach`/`afterEach` that explicitly sets the UI locale to `\"en-US\"` before running each test.",
        "createdAt" : "2017-10-26T21:33:00Z",
        "updatedAt" : "2017-11-04T06:53:22Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed914a8d4755d8152040648faf25f8c65e01f1b9",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +176,180 @@    function compareNavigateToItems(i1: RawNavigateToItem, i2: RawNavigateToItem) {\n        // TODO(cyrusn): get the gamut of comparisons that VS already uses here.\n        return compareValues(i1.matchKind, i2.matchKind)\n            || compareStringsCaseSensitiveUI(i1.name, i2.name);\n    }"
  },
  {
    "id" : "cc2ef826-1a89-412f-a09b-136fb66099fc",
    "prId" : 2111,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4235fd9-0bb2-4574-ac38-f2e0d9c10015",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "What makes it raw?\n",
        "createdAt" : "2015-02-23T22:14:22Z",
        "updatedAt" : "2015-02-23T23:41:55Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "f90f8e80615fe301bb7cd0de784f53b86a205243",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +0,4 @@module ts.NavigateTo {\n    type RawNavigateToItem = { name: string; fileName: string; matchKind: PatternMatchKind; isCaseSensitive: boolean; declaration: Declaration };\n\n    export function getNavigateToItems(program: Program, cancellationToken: CancellationTokenObject, searchValue: string, maxResultCount: number): NavigateToItem[] {"
  },
  {
    "id" : "39db1d72-1096-44c7-b750-4501bfb30a4b",
    "prId" : 2111,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a7886a7-55a2-4baa-90f9-08a82cf938bb",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "This will crash on a computed property that is not a well known symbol. Either check for that first, or remove the assert inside.\n",
        "createdAt" : "2015-02-23T22:16:09Z",
        "updatedAt" : "2015-02-23T23:41:55Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "6a8823a4-7cab-4d72-b597-d25c16d5aae4",
        "parentId" : "0a7886a7-55a2-4baa-90f9-08a82cf938bb",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Oops, I'm thinking of the wrong getDeclarationName, nvm\n",
        "createdAt" : "2015-02-23T22:20:34Z",
        "updatedAt" : "2015-02-23T23:41:55Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "f90f8e80615fe301bb7cd0de784f53b86a205243",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +13,17 @@            for (var i = 0, n = declarations.length; i < n; i++) {\n                var declaration = declarations[i];\n                var name = getDeclarationName(declaration);\n                if (name !== undefined) {\n"
  },
  {
    "id" : "66375b5a-3252-44a1-b377-8ad137bcf82f",
    "prId" : 2111,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed5f9a12-2af1-48de-8d0f-4dcb54c20469",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Doesn't getMatches in the pattern matcher already do this?\n",
        "createdAt" : "2015-02-23T22:16:36Z",
        "updatedAt" : "2015-02-23T23:41:55Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "155e4479-2960-46d4-a072-03a20c87106d",
        "parentId" : "ed5f9a12-2af1-48de-8d0f-4dcb54c20469",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "As per discussion, the pattern matcher is concerned only with the domain of strings.  It can't know the candidate container unless it is given it.  And we don't want to compute the container if we can avoid it.\n",
        "createdAt" : "2015-02-23T22:31:05Z",
        "updatedAt" : "2015-02-23T23:41:55Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "f90f8e80615fe301bb7cd0de784f53b86a205243",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +18,22 @@                    // First do a quick check to see if the name of the declaration matches the \n                    // last portion of the (possibly) dotted name they're searching for.\n                    var matches = patternMatcher.getMatchesForLastSegmentOfPattern(name);\n\n                    if (!matches) {"
  }
]