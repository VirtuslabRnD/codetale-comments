[
  {
    "id" : "9ba2322a-033d-42ae-a1c5-4e48e32ea3e4",
    "prId" : 1109,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da592bbc-0db3-4dcd-b34d-558782f2a50a",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "can you doc what the difference is between indentation and delta?  I never really understaood that bit.\n",
        "createdAt" : "2014-11-10T08:10:32Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "1c273d55-dc42-43e7-b92f-8c5336ae4eb2",
        "parentId" : "da592bbc-0db3-4dcd-b34d-558782f2a50a",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "will comment it\n",
        "createdAt" : "2014-11-10T19:45:00Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "23e35bcfc1bd6bf8b469b77ea42d6e64fa4b6c7f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +41,45 @@          *      ____ - delta\n          **/\n        getIndentation(): number;\n        /**\n          * Prefered relative indentation for child nodes."
  },
  {
    "id" : "d544b6b8-86fc-4a3f-8219-7309a2760052",
    "prId" : 1109,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fea591ce-771e-4f4c-8d74-7c1f1d33c52c",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "can you doc why you go all the way to the start of the line, but not all the way to the end of the line?\n",
        "createdAt" : "2014-11-10T08:11:58Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "68b3bc93-42cf-4a17-95cf-ed2238aa985a",
        "parentId" : "fea591ce-771e-4f4c-8d74-7c1f1d33c52c",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "here new formatter preserves behavior of the old implementation\n",
        "createdAt" : "2014-11-10T19:45:58Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "23e35bcfc1bd6bf8b469b77ea42d6e64fa4b6c7f",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +99,103 @@        // format from the beginning of the line\n        var span = {\n            pos: getStartLinePositionForPosition(start, sourceFile),\n            end: end\n        };"
  },
  {
    "id" : "8abcb27b-151b-4cd1-8ae9-c1ffbe9ff5d8",
    "prId" : 1109,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3f43078-dcb5-4da2-9c34-8ffa6a35eb25",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "why the !isListElement check?\n",
        "createdAt" : "2014-11-10T08:12:41Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "70708ad4-c3ea-4fd2-928e-7a22dd2a9e7f",
        "parentId" : "d3f43078-dcb5-4da2-9c34-8ffa6a35eb25",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "for cases like this\n\n```\n    var x = 1;\nwhile (true) {\n} \n```\n\nafter typing close curly in while statement we want to reformat just the while statement. however if we just walk upwards searching for the parent that has the same `end` value - we'll end up with the whole source file. `isListElement` allows to stop on the list element level\n",
        "createdAt" : "2014-11-10T20:04:55Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "922a64e6-3a7d-49b8-9ef9-d4d761e9c445",
        "parentId" : "d3f43078-dcb5-4da2-9c34-8ffa6a35eb25",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "good example to add as a comment.\n",
        "createdAt" : "2014-11-10T20:36:57Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "434a7697-5357-4455-8541-fe15a6b05e09",
        "parentId" : "d3f43078-dcb5-4da2-9c34-8ffa6a35eb25",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "ok\n",
        "createdAt" : "2014-11-10T20:50:03Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "23e35bcfc1bd6bf8b469b77ea42d6e64fa4b6c7f",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +136,140 @@            current.parent &&\n            current.parent.end === precedingToken.end &&\n            !isListElement(current.parent, current)) {\n            current = current.parent;\n        }"
  },
  {
    "id" : "1b9c5370-881d-4df5-aff6-dc2587eb6e64",
    "prId" : 1109,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c486df4-7681-42f5-a15f-c2b779618dd4",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "just to verify, you are intentionally leaving 'index' in the outer scope, and capturing in this lambda?  I feel like that's what the comment is trying to make explicit, but i just want to be sure.\n",
        "createdAt" : "2014-11-10T08:15:26Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "6b5dee57-70b9-4e84-9619-d23443aa89ea",
        "parentId" : "2c486df4-7681-42f5-a15f-c2b779618dd4",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "yes, that is right. index is captured from the outer scope so it can preserve its value between calls\n",
        "createdAt" : "2014-11-10T20:51:59Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "23e35bcfc1bd6bf8b469b77ea42d6e64fa4b6c7f",
    "line" : 205,
    "diffHunk" : "@@ -1,1 +203,207 @@\n        return r => {\n            // in current implementation sequence of arguments [r1, r2...] is monotonically increasing.\n            // 'index' tracks the index of the most recent error that was checked.\n            while (true) {"
  },
  {
    "id" : "bd4343eb-dfb3-43ca-b8f1-782447017ed0",
    "prId" : 1109,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a7fb306-8d13-429f-bd98-9a88404d0e6c",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "i would think a block in a case/default clause would not be indentded.  i.e. i would expect to see:\n\n```\ncase 0: {\n\n}\n```\n\nNot:\n\n```\ncase 0: {\n    }\n```\n",
        "createdAt" : "2014-11-10T08:17:57Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "73ba8e06-ac4d-48e5-a5d4-9381bda8f8c4",
        "parentId" : "8a7fb306-8d13-429f-bd98-9a88404d0e6c",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "this is for cases like:\n\n```\ncase  0:\n    {\n    ....\n    }\n    break;\n```\n\nbraces are indented on the same level as `break`\n",
        "createdAt" : "2014-11-10T21:02:27Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "23e35bcfc1bd6bf8b469b77ea42d6e64fa4b6c7f",
    "line" : 335,
    "diffHunk" : "@@ -1,1 +333,337 @@                    if (isSomeBlock(parent.kind) ||\n                        parent.kind === SyntaxKind.SourceFile ||\n                        parent.kind === SyntaxKind.CaseClause ||\n                        parent.kind === SyntaxKind.DefaultClause) {\n"
  },
  {
    "id" : "202e9ac1-ade8-448c-a4c2-188456f58f73",
    "prId" : 1109,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77a433b4-913a-4b84-ad38-4aa032b52c33",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "You might actually be able to make this faster if you fed in the optional `cbNodes` argument to perform a binary search.\n",
        "createdAt" : "2014-11-10T22:19:29Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "23e35bcfc1bd6bf8b469b77ea42d6e64fa4b6c7f",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +170,174 @@\n        function find(n: Node): Node {\n            var candidate = forEachChild(n, c => startEndContainsRange(c.getStart(sourceFile), c.end, range) && c);\n            if (candidate) {\n                var result = find(candidate);"
  },
  {
    "id" : "96ec4f74-446c-4a60-bbdc-414c3c60ca21",
    "prId" : 1109,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbde10ff-e979-4455-b3e5-b59c1ac2b3f9",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Use `ts.filter`.\n",
        "createdAt" : "2014-11-10T22:22:56Z",
        "updatedAt" : "2014-11-14T19:02:09Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "23e35bcfc1bd6bf8b469b77ea42d6e64fa4b6c7f",
    "line" : 195,
    "diffHunk" : "@@ -1,1 +193,197 @@        // pick only errors that fall in range\n        var sorted = errors\n            .filter(d => d.isParseError && rangeOverlapsWithStartEnd(originalRange, d.start, d.start + d.length))\n            .sort((e1, e2) => e1.start - e2.start);\n"
  }
]