[
  {
    "id" : "ff98b07a-35fa-430c-8437-5f653c378f9d",
    "prId" : 38240,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38240#pullrequestreview-406806129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a42fea96-d091-45c3-9b39-0bc7184cb31f",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Add ArrayBindingPattern as well?",
        "createdAt" : "2020-05-06T16:51:13Z",
        "updatedAt" : "2020-05-06T16:51:13Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "07966bd0-7528-4736-91f3-4537cee40e00",
        "parentId" : "a42fea96-d091-45c3-9b39-0bc7184cb31f",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "@sheetalkamat I added `ArrayBindingPattern` in this PR https://github.com/microsoft/TypeScript/pull/38191",
        "createdAt" : "2020-05-06T16:55:21Z",
        "updatedAt" : "2020-05-06T16:55:21Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef72e8431487dbe2eb158d1975c8e78a4c0aecab",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +201,205 @@            case SyntaxKind.CaseBlock:\n            case SyntaxKind.TypeLiteral:\n            case SyntaxKind.ObjectBindingPattern:\n                return spanForNode(n);\n            case SyntaxKind.CaseClause:"
  },
  {
    "id" : "cce60321-86d9-4f38-b9d3-46088f17481a",
    "prId" : 29218,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29218#pullrequestreview-188543479",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c07680fb-ca17-4fdb-b17c-8f756832c86b",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "can you use utilities from the compiler proper? There's almost certainly one there that is exactly like this, or perhaps a slight superset.",
        "createdAt" : "2018-12-31T23:23:10Z",
        "updatedAt" : "2018-12-31T23:57:12Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "8643adb4-89d8-4924-97a0-a912301ac63e",
        "parentId" : "c07680fb-ca17-4fdb-b17c-8f756832c86b",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "getJSDocHost + getSingleInitializerOfVariableStatementOrPropertyDeclaration might be the right combination.",
        "createdAt" : "2018-12-31T23:29:13Z",
        "updatedAt" : "2018-12-31T23:57:12Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "39c9b4f3-482c-4b16-8b17-8896b3a79e6c",
        "parentId" : "c07680fb-ca17-4fdb-b17c-8f756832c86b",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "Changed to use existing util functions. `getJSDocHost` only works for nodes that are themselves within a jsdoc comment.",
        "createdAt" : "2018-12-31T23:58:04Z",
        "updatedAt" : "2018-12-31T23:58:04Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      }
    ],
    "commit" : "048d04684bd79722c83c42ccf2530e491cde54a9",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +60,64 @@        }\n\n        function isFunctionExpressionAssignedToVariable(n: Node) {\n            if (!isFunctionExpression(n) && !isArrowFunction(n)) {\n                return false;"
  },
  {
    "id" : "60374493-fdb9-46ea-a3e7-5b01801a6843",
    "prId" : 22842,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22842#pullrequestreview-106692140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb71cd50-2e2a-4e9e-95ec-8cf4d0d49c43",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Is it necessary to match the rest of the line? Could the regex just stop at `region`?",
        "createdAt" : "2018-03-23T22:05:38Z",
        "updatedAt" : "2018-03-23T22:05:38Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "19331a13-a4f3-4000-9962-597018e5aaa6",
        "parentId" : "eb71cd50-2e2a-4e9e-95ec-8cf4d0d49c43",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "It is necessary, I need the label to display when folded.",
        "createdAt" : "2018-03-23T22:09:51Z",
        "updatedAt" : "2018-03-23T22:09:51Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "c0061e99-545d-4e8c-962f-90b14e27de8f",
        "parentId" : "eb71cd50-2e2a-4e9e-95ec-8cf4d0d49c43",
        "authorId" : "a1ec4ba6-1d73-41c2-811a-8b117347a64a",
        "body" : "I think @andy-ms meant `/^\\s*\\/\\/\\s*#(end)?region(?:\\s+(.*))?/` which still captures the label, right?",
        "createdAt" : "2018-03-24T07:31:01Z",
        "updatedAt" : "2018-03-24T07:31:01Z",
        "lastEditedBy" : "a1ec4ba6-1d73-41c2-811a-8b117347a64a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ba4dbeae4617e2644d3a5128572c575cf590128",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +34,38 @@            const lineEnd = i + 1 === lineStarts.length ? sourceFile.getEnd() : lineStarts[i + 1] - 1;\n            const lineText = sourceFile.text.substring(currentLineStart, lineEnd);\n            const result = lineText.match(/^\\s*\\/\\/\\s*#(end)?region(?:\\s+(.*))?(?:\\r)?$/);\n            if (!result || isInComment(sourceFile, currentLineStart)) {\n                continue;"
  },
  {
    "id" : "b24c2a37-da84-4fa0-84a4-816f3a380a87",
    "prId" : 20143,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20143#pullrequestreview-78135447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d765009f-71e2-4e4a-bba3-d767ed8a437e",
        "parentId" : null,
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "Won't this not properly find the open and close brace tokens? They're children of the block itself, but we want to pass the parent to `createOutliningSpan`.",
        "createdAt" : "2017-11-20T22:36:59Z",
        "updatedAt" : "2017-11-21T14:54:31Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "13682c72-f230-4fc4-909e-c3bfa37bf519",
        "parentId" : "d765009f-71e2-4e4a-bba3-d767ed8a437e",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`spanForNode` closes over `n` and uses that to find tokens. The argument is `hintSpanNode` which is only used for its own span, not for its tokens.",
        "createdAt" : "2017-11-21T14:47:58Z",
        "updatedAt" : "2017-11-21T14:54:31Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e7a989e84d62098e610cc2ced22b57ce1c28086",
    "line" : 324,
    "diffHunk" : "@@ -1,1 +130,134 @@                }\n            case SyntaxKind.ModuleBlock:\n                return spanForNode(n.parent);\n            case SyntaxKind.ClassDeclaration:\n            case SyntaxKind.InterfaceDeclaration:"
  },
  {
    "id" : "d46963c9-c54e-4c90-876d-051f4b253f1e",
    "prId" : 20143,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20143#pullrequestreview-78138244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7348f5b3-f45c-4272-9716-508ec46b0fc8",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "We are calling this on every single node -- we should come up with a way to call this less often.",
        "createdAt" : "2017-11-21T14:55:41Z",
        "updatedAt" : "2017-11-21T14:55:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e7a989e84d62098e610cc2ced22b57ce1c28086",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +12,16 @@        sourceFile.forEachChild(function walk(n) {\n            if (depthRemaining === 0) return;\n            cancellationToken.throwIfCancellationRequested();\n\n            if (isDeclaration(n)) {"
  },
  {
    "id" : "9b11936a-1995-4501-b5fc-f7021247cb54",
    "prId" : 17709,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17709#pullrequestreview-57083448",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e6f8202-0abe-4cd7-8d58-6f0ffa7129cc",
        "parentId" : null,
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "nit: consider renaming `n` to `node`.",
        "createdAt" : "2017-08-17T23:50:50Z",
        "updatedAt" : "2017-08-18T22:59:38Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6c1afb4a0b8f04f6202a7dd1f39d7cdffeaf096",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +90,94 @@        }\n\n        function walk(n: Node): void {\n            cancellationToken.throwIfCancellationRequested();\n            if (depth > maxDepth) {"
  },
  {
    "id" : "d5820e76-c8dc-422d-bbef-3631cc4467e6",
    "prId" : 14214,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14214#pullrequestreview-23844604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2b0b46d-13dc-4c39-9433-bfa49583e56e",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "We'll need to measure the cost here. Seems like a really heavily hit code path to add extra checks in.",
        "createdAt" : "2017-02-21T22:13:49Z",
        "updatedAt" : "2017-03-27T21:50:02Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "394a725d-d5e0-4a9c-8892-a73231821c1a",
        "parentId" : "c2b0b46d-13dc-4c39-9433-bfa49583e56e",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "we already have a [ThrottledCancellationToken](https://github.com/Microsoft/TypeScript/blob/master/src/services/shims.ts#L473) in `shims.ts`, we can move to `services.ts` and use here",
        "createdAt" : "2017-02-21T22:19:07Z",
        "updatedAt" : "2017-03-27T21:50:02Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "7876db1b-45ce-41e9-8785-c776e977db1d",
        "parentId" : "c2b0b46d-13dc-4c39-9433-bfa49583e56e",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "thanks for pointing me to this!",
        "createdAt" : "2017-02-22T00:41:10Z",
        "updatedAt" : "2017-03-27T21:50:02Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      },
      {
        "id" : "80431c6f-8b62-4d5c-8ed6-bf403f58f285",
        "parentId" : "c2b0b46d-13dc-4c39-9433-bfa49583e56e",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "as an option instead of ThrottledCancellationToken we can do checks only for top level declarations",
        "createdAt" : "2017-02-22T23:39:50Z",
        "updatedAt" : "2017-03-27T21:50:02Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "f4821b14-f016-40a9-91aa-ed5019f986f0",
        "parentId" : "c2b0b46d-13dc-4c39-9433-bfa49583e56e",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "I've removed the throttling until I can prove it is required as it adds overhead to deal with test failures.  Will confirm it is necessary before adding it back in.",
        "createdAt" : "2017-02-23T02:05:00Z",
        "updatedAt" : "2017-03-27T21:50:02Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      },
      {
        "id" : "8b85b2b3-802c-4fc3-988c-cca3139530e7",
        "parentId" : "c2b0b46d-13dc-4c39-9433-bfa49583e56e",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "Added throttle back in as discussed in perf result findings in internal thread",
        "createdAt" : "2017-02-25T01:16:41Z",
        "updatedAt" : "2017-03-27T21:50:02Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d20cebf998b94da403a6060d74c1bc721f8a6354",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +86,90 @@        const maxDepth = 20;\n        function walk(n: Node): void {\n            cancellationToken.throwIfCancellationRequested();\n            if (depth > maxDepth) {\n                return;"
  },
  {
    "id" : "534834c5-222e-411e-a404-3c224ec4a048",
    "prId" : 851,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "025747c7-7801-4e10-90c6-a16ddec46f0e",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Move this into the 'then' block of the following if\n",
        "createdAt" : "2014-10-07T22:19:21Z",
        "updatedAt" : "2014-10-07T22:19:21Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "01533905355a41edb585aaaa0e788a8ffffef00a",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +70,74 @@                        var parent = n.parent;\n                        var openBrace = findChildOfKind(n, SyntaxKind.OpenBraceToken, sourceFile);\n                        var closeBrace = findChildOfKind(n, SyntaxKind.CloseBraceToken, sourceFile);\n\n                        // Check if the block is standalone, or 'attached' to some parent statement."
  },
  {
    "id" : "874eb338-aaed-462c-b6c5-f4c7712c36db",
    "prId" : 808,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "177965da-a2ab-46e5-ba13-2839b704297f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Are you sure that this is desired? Our enums are sort of massive, though, we are a pretty unique case.\n",
        "createdAt" : "2014-10-03T00:38:44Z",
        "updatedAt" : "2014-10-03T00:38:44Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "81cc6ccf-06c6-4257-83d5-a1b10ee41b76",
        "parentId" : "177965da-a2ab-46e5-ba13-2839b704297f",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "They are the definitions.  The idea is to see the shape of hte stuff you can access from elsewhere.  What you hide are the implementations.\n",
        "createdAt" : "2014-10-03T00:43:47Z",
        "updatedAt" : "2014-10-03T00:43:47Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "183bed1bb8b19ff1138ec1f2780ef7c7f5a0a62d",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +52,56 @@                    case SyntaxKind.ClassDeclaration:\n                    case SyntaxKind.InterfaceDeclaration:\n                    case SyntaxKind.EnumDeclaration:\n                        return false;\n                }"
  },
  {
    "id" : "a7ffd2cf-e957-4178-9ee9-b157e1d44b1e",
    "prId" : 772,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e59c70e9-a9f1-44d9-a0c6-00f3f662ce09",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "do these functions handle the case where either open or close is missing?  Thanks!\n",
        "createdAt" : "2014-09-29T08:55:19Z",
        "updatedAt" : "2014-09-29T08:55:19Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "dd8aa8a7-20be-4883-a274-49b584f1c795",
        "parentId" : "e59c70e9-a9f1-44d9-a0c6-00f3f662ce09",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "Yes, `addOutliningRange` function takes care of it\n",
        "createdAt" : "2014-09-29T17:07:43Z",
        "updatedAt" : "2014-09-29T17:07:43Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "222e1d83656e85963f230d34a6a7765bfa9fd5c0",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +72,76 @@                        var openBrace = findChildOfKind(n, SyntaxKind.OpenBraceToken, sourceFile);\n                        var closeBrace = findChildOfKind(n, SyntaxKind.CloseBraceToken, sourceFile);\n                        addOutlineRange(n, openBrace, closeBrace);\n                        break;\n                    case SyntaxKind.ArrayLiteral:"
  },
  {
    "id" : "7dc11130-d6d4-49fd-896a-0000dfc545bc",
    "prId" : 430,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "636c3d04-f2f9-42e3-abb9-baa8bf831517",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Note: teh original code has this:\n\n```\n            this.elements.push(new OutliningSpan(\n                /*textSpan:*/ TextSpan.fromBounds(end(startElementPreviousToken), end(endElement)),\n                /*hintSpan:*/ TextSpan.fromBounds(start(node), end(node)),\n```\n\nspecifically we use start(node)   not fullStart(node).  Let's keep that logic.\n",
        "createdAt" : "2014-08-12T05:14:26Z",
        "updatedAt" : "2014-08-12T05:57:37Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "a409ec9790b5f2abf5f5f3c28df7344c33228d5c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +42,46 @@                        textSpan: TypeScript.TextSpan.fromBounds(startElement.pos, endElement.end),\n                        hintSpan: TypeScript.TextSpan.fromBounds(node.getStart(), node.end),\n                        bannerText: \"...\",\n                        autoCollapse: false\n                    };"
  }
]