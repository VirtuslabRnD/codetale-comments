[
  {
    "id" : "95982477-1914-49ae-a448-f56fda0bd7d1",
    "prId" : 43228,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43228#pullrequestreview-618178013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ce0be35-10cd-4280-a3a0-0868220cf714",
        "parentId" : null,
        "authorId" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "body" : "This warrants a test example.",
        "createdAt" : "2021-03-16T21:53:33Z",
        "updatedAt" : "2021-04-19T21:05:50Z",
        "lastEditedBy" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "tags" : [
        ]
      },
      {
        "id" : "06402635-127e-4b30-973e-74f940d3b7f6",
        "parentId" : "2ce0be35-10cd-4280-a3a0-0868220cf714",
        "authorId" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "body" : "Done.",
        "createdAt" : "2021-03-23T03:34:11Z",
        "updatedAt" : "2021-04-19T21:05:50Z",
        "lastEditedBy" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b99c0094d7a32b9f0d4a980b12eee68a793ae10d",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +233,237 @@                    // Single line can break the loop as trivia will only be this line.\n                    // Comments on subsequest lines are also ignored.\n                    if (comment.kind === SyntaxKind.SingleLineCommentTrivia || getLineOfLocalPosition(sourceFile, comment.pos) > nodeEndLine) {\n                        break;\n                    }"
  },
  {
    "id" : "25e04e73-0366-4708-bb51-f58a2f205f68",
    "prId" : 43228,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43228#pullrequestreview-619203591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "504260e5-6972-4a06-8e71-8076518e07ed",
        "parentId" : null,
        "authorId" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "body" : "This seems pretty specific to import declaration nodes. What happens when a node with a trailing multiline comment is between two import statements? for example:\r\n```ts\r\nimport * as b from \"b\";\r\nconsole.log();/**\r\n * what happens to me?\r\n */\r\nimport * as a from \"a\"\r\n```",
        "createdAt" : "2021-03-16T21:58:50Z",
        "updatedAt" : "2021-04-19T21:05:50Z",
        "lastEditedBy" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "tags" : [
        ]
      },
      {
        "id" : "1232f792-b99e-4b19-ad08-4a9bfa0217d5",
        "parentId" : "504260e5-6972-4a06-8e71-8076518e07ed",
        "authorId" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "body" : "Unfortunately, the result would be `console.log();/**` as we have no way of recognizing what the previous node is about. \r\n\r\nI think this is a design flaw and suggest addressing it on another ticket. So far this PR will not break that scenario.",
        "createdAt" : "2021-03-24T00:32:08Z",
        "updatedAt" : "2021-04-19T21:05:50Z",
        "lastEditedBy" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b99c0094d7a32b9f0d4a980b12eee68a793ae10d",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +352,356 @@        public deleteNodes(sourceFile: SourceFile, nodes: readonly Node[], options: ConfigurableStartEnd = { leadingTriviaOption: LeadingTriviaOption.IncludeAll }, hasTrailingComment: boolean): void {\n            // When deleting multiple nodes we need to track if the end position is including multiline trailing comments.\n            for (const node of nodes) {\n                const pos = getAdjustedStartPosition(sourceFile, node, options, hasTrailingComment);\n                const end = getAdjustedEndPosition(sourceFile, node, options);"
  },
  {
    "id" : "34414765-fa71-40f9-9bd9-df7808f73104",
    "prId" : 36751,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36751#pullrequestreview-357976297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b996ecb9-4307-4044-8ea1-b8da334d93c8",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "When would\r\n\r\n```\r\nsourceFile.imports.length && node === first(sourceFile.imports).parent\r\n```\r\n\r\nbe true, but not the following?\r\n\r\n```ts\r\nnode === find(sourceFile.statements, isImportDeclaration)\r\n```",
        "createdAt" : "2020-02-12T18:13:23Z",
        "updatedAt" : "2020-02-12T18:13:23Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "e463ee3c-6bb1-41ef-80df-3d0172d96f2c",
        "parentId" : "b996ecb9-4307-4044-8ea1-b8da334d93c8",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "@DanielRosenwasser \r\n\r\n> When would sourceFile.imports.length && node === first(sourceFile.imports).parent\r\n\r\n\r\n```ts\r\nimport { a } from \"./b\";\r\nimport { b } from \"./c\";\r\n```\r\nwhen each import statemnt has path\r\n\r\n> be true, but not the following? node === find(sourceFile.statements, isImportDeclaration)\r\n\r\n```ts\r\nimport a from \"\";\r\nimport { a } from \"./b\";\r\nimport { b } from \"./c\";\r\n```\r\n\r\nwhen there is an import statement with the empty path  \r\n\r\nDoes that make sense?",
        "createdAt" : "2020-02-12T18:32:32Z",
        "updatedAt" : "2020-02-12T18:32:51Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      },
      {
        "id" : "2ba56bd6-4104-4524-9ff1-11664464c575",
        "parentId" : "b996ecb9-4307-4044-8ea1-b8da334d93c8",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "It sounds like it won't work correctly when\r\n\r\n```ts\r\nimport { a } from \"./b\";\r\n// try to remove the following import\r\nimport a from \"\";\r\nimport { b } from \"./c\";\r\n```\r\n\r\nDoes that still exhibit the same error?",
        "createdAt" : "2020-02-12T22:22:10Z",
        "updatedAt" : "2020-02-12T22:36:34Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "d0814c15-71c7-4f60-afcf-db03d4613309",
        "parentId" : "b996ecb9-4307-4044-8ea1-b8da334d93c8",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "@DanielRosenwasser Sorry for the delay with the response, sometimes different time zones matter :). There is a test for a similar case only with leading comment \r\n\r\n![1](https://user-images.githubusercontent.com/509265/74406559-aadd8200-4e38-11ea-869c-a26cbb645dce.png)\r\n![2](https://user-images.githubusercontent.com/509265/74406557-aa44eb80-4e38-11ea-90b0-5556ee49761e.png)\r\n![3](https://user-images.githubusercontent.com/509265/74406554-a9ac5500-4e38-11ea-929b-d43a87b46c8f.png)\r\n\r\nIs it an answer to your question?",
        "createdAt" : "2020-02-13T06:17:55Z",
        "updatedAt" : "2020-02-13T06:17:55Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebbba5bd8fa71057c5f213cafa53b6cf3e02eb20",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1239,1243 @@\n                case SyntaxKind.ImportDeclaration:\n                    const isFirstImport = sourceFile.imports.length && node === first(sourceFile.imports).parent || node === find(sourceFile.statements, isImportDeclaration);\n                    deleteNode(changes, sourceFile, node,\n                        // For first import, leave header comment in place"
  },
  {
    "id" : "b55c0280-8706-4440-9ae1-63289b2b9b00",
    "prId" : 27610,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27610#pullrequestreview-163019107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7480eb1b-b8a1-4a18-abf4-49b01f86c1c5",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">character [](start = 64, length = 9)\r\n\r\n\"character\" seems like a confusing name for this.  Perhaps something about indentation?",
        "createdAt" : "2018-10-09T17:54:07Z",
        "updatedAt" : "2018-10-09T17:54:07Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5066880828c48e6e1233338b318c274f49de1909",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +346,350 @@        }\n\n        public insertCommentThenNewline(sourceFile: SourceFile, character: number, position: number, commentText: string): void {\n            const token = getTouchingToken(sourceFile, position);\n            const text = \"/**\" + commentText + \"*/\" + this.newLineCharacter + repeatString(\" \", character);"
  },
  {
    "id" : "b9ca3170-494c-4c04-9a4f-4426f24e42ba",
    "prId" : 27610,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27610#pullrequestreview-163022001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dee334d-2d77-46e3-bbb2-ea31188f765f",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">\" \" [](start = 91, length = 3)\r\n\r\nWill the formatting done after the fix is applied convert this to tabs if that's what the user prefers?",
        "createdAt" : "2018-10-09T17:54:29Z",
        "updatedAt" : "2018-10-09T17:54:29Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "c4412e48-5227-4682-98ea-ec9766db06bf",
        "parentId" : "7dee334d-2d77-46e3-bbb2-ea31188f765f",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "What we do for other fixes is to copy exactly the indentation string that they were using -- if their preferred indentation is tab, space, space, tab, space, space, we should copy that. I'll make a new PR unifying our comment code since #27565 has its own separate jsdoc-adding helpers.",
        "createdAt" : "2018-10-09T17:58:45Z",
        "updatedAt" : "2018-10-09T17:58:45Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "4947a93e-571e-44ad-8d2d-6b69c3f6d73a",
        "parentId" : "7dee334d-2d77-46e3-bbb2-ea31188f765f",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "There are cases where we need to make to new indentation, though, as in the single-line test case that needs to annotate `class C {m(x) {return x;}}`",
        "createdAt" : "2018-10-09T18:00:53Z",
        "updatedAt" : "2018-10-09T18:00:53Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "5066880828c48e6e1233338b318c274f49de1909",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +348,352 @@        public insertCommentThenNewline(sourceFile: SourceFile, character: number, position: number, commentText: string): void {\n            const token = getTouchingToken(sourceFile, position);\n            const text = \"/**\" + commentText + \"*/\" + this.newLineCharacter + repeatString(\" \", character);\n            this.insertText(sourceFile, token.getStart(sourceFile), text);\n        }"
  },
  {
    "id" : "b875c5c5-844d-4160-bfbe-897d14109260",
    "prId" : 27610,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27610#pullrequestreview-163020759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24fc35fc-6333-4487-9c7a-ddd2d4c351b8",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">commentText += repeatString(\" \", indent + 1); [](start = 12, length = 45)\r\n\r\nThis seems like it belongs in `insertCommentThenNewline` (which would then either need to check for newlines in the text or accept a flag indicating whether or not the `*/` should be indented).",
        "createdAt" : "2018-10-09T17:57:49Z",
        "updatedAt" : "2018-10-09T17:57:49Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5066880828c48e6e1233338b318c274f49de1909",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +373,377 @@                }\n            }\n            commentText += repeatString(\" \", indent + 1);\n            this.insertCommentThenNewline(sourceFile, indent, parent.getStart(), commentText);\n        }"
  },
  {
    "id" : "1d5d3a57-1717-4841-8470-832f34e3f34f",
    "prId" : 27610,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27610#pullrequestreview-163021546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8f61ce1-5df0-487f-9a51-c8f2a60100c1",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">repeatString(\" \", indent) [](start = 19, length = 25)\r\n\r\nHaving these scattered through the code seems fragile.  What about passing an array of lines to `insertCommentThenNewline` and letting it handle breaks and indentation?",
        "createdAt" : "2018-10-09T17:59:44Z",
        "updatedAt" : "2018-10-09T17:59:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5066880828c48e6e1233338b318c274f49de1909",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +413,417 @@                printName = `[${printName}]`;\n            }\n            return repeatString(\" \", indent) + ` * @param {${printed}} ${printName}\\n`;\n        }\n"
  },
  {
    "id" : "c01e5b23-3352-441b-bae5-95c3037d1717",
    "prId" : 27610,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27610#pullrequestreview-163022153",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f7891b8-cd5c-4985-bef7-0793a25f0298",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">export [](start = 8, length = 6)\r\n\r\nWhy is this exported?",
        "createdAt" : "2018-10-09T18:01:11Z",
        "updatedAt" : "2018-10-09T18:01:11Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5066880828c48e6e1233338b318c274f49de1909",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +857,861 @@\n        /** Note: output node may be mutated input node. */\n        export function getNonformattedText(node: Node, sourceFile: SourceFile | undefined, newLineCharacter: string): { text: string, node: Node } {\n            const writer = new Writer(newLineCharacter);\n            const newLine = newLineCharacter === \"\\n\" ? NewLineKind.LineFeed : NewLineKind.CarriageReturnLineFeed;"
  },
  {
    "id" : "f9465e9b-d072-4497-a157-e98d7c78de12",
    "prId" : 27610,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27610#pullrequestreview-163023803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c65419c2-d7a7-4f87-bbda-68ee79cda9af",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">tryInsertJSDocType [](start = 15, length = 18)\r\n\r\nI feel like I'm missing something obvious, but why \"try\"?",
        "createdAt" : "2018-10-09T18:05:08Z",
        "updatedAt" : "2018-10-09T18:05:08Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5066880828c48e6e1233338b318c274f49de1909",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +395,399 @@        }\n\n        public tryInsertJSDocType(sourceFile: SourceFile, node: Node, type: TypeNode): void {\n            const printed = changesToText.getNonformattedText(type, sourceFile, this.newLineCharacter).text;\n            let commentText;"
  },
  {
    "id" : "5f3172d5-4e89-42fa-8291-6b74140ca74e",
    "prId" : 27565,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27565#pullrequestreview-174543259",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b603228-1bcc-4a91-9414-6d7fe6141bfa",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I could be miscounting the scopes, but why would `deleteDeclaration` be called on a semicolon?",
        "createdAt" : "2018-10-09T23:32:32Z",
        "updatedAt" : "2020-03-17T18:40:58Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "575f7f97-3e7f-4533-a1b8-375d48329281",
        "parentId" : "2b603228-1bcc-4a91-9414-6d7fe6141bfa",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`convertToEs6Module` deletes semicolons when changing an assignment statement to a function declaration.",
        "createdAt" : "2018-11-13T19:22:01Z",
        "updatedAt" : "2020-03-17T18:40:58Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fb1bd2ee6e64b4af84a69c9e0b0c0022d7d456b",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +1289,1293 @@                    break;\n\n                case SyntaxKind.SemicolonToken:\n                    deleteNode(changes, sourceFile, node, { trailingTriviaOption: TrailingTriviaOption.Exclude });\n                    break;"
  },
  {
    "id" : "8449cd5a-e4a0-4815-903f-e5046a14f665",
    "prId" : 23726,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23726#pullrequestreview-116014323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a76dd939-34e2-4f7d-ad77-44609cd3253b",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Can you check with @mjbvz and @amcasey that sending edits for non-existing files are ok on the editor sides.",
        "createdAt" : "2018-04-27T17:11:19Z",
        "updatedAt" : "2018-05-08T19:45:07Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "662e93c45c8360a1cd25d8fdf41f9daf7712ae76",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +718,722 @@        }\n\n        export function newFileChanges(oldFile: SourceFile, fileName: string, statements: ReadonlyArray<Statement>, newLineCharacter: string): FileTextChanges {\n            const text = statements.map(s => getNonformattedText(s, oldFile, newLineCharacter).text).join(newLineCharacter);\n            return { fileName, textChanges: [createTextChange(createTextSpan(0, 0), text)] };"
  },
  {
    "id" : "7c887c44-d663-4d5f-b551-3d6e5d297666",
    "prId" : 23342,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23342#pullrequestreview-111746429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d18a86e-f833-480d-9274-050e3794bb1b",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Does the number of members matter?  It seems like you want to omit the linebreak as long as the class is on a single line.",
        "createdAt" : "2018-04-12T18:24:22Z",
        "updatedAt" : "2018-04-12T18:49:13Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "52616c0c-13c7-4b82-9ca3-383c28a6634c",
        "parentId" : "3d18a86e-f833-480d-9274-050e3794bb1b",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "It's the opposite -- if the class *is* on a single line I want to add line breaks on both sides to get `{\\n \r\n   member\\n}`; if the class is already multiline I only want the first line break.",
        "createdAt" : "2018-04-12T18:44:40Z",
        "updatedAt" : "2018-04-12T18:49:13Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8af64d3c4524b26e951b48d951bd426f7c8338a",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +440,444 @@                prefix = this.newLineCharacter;\n                // For `class C {\\n}`, don't add the trailing \"\\n\"\n                if (cls.members.length === 0 && !(positionsAreOnSameLine as any)(...getClassBraceEnds(cls, sourceFile), sourceFile)) { // TODO: GH#4130 remove 'as any'\n                    suffix = \"\";\n                }"
  },
  {
    "id" : "a67cf75c-5de1-45f0-9075-4e366a12d0d3",
    "prId" : 23342,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23342#pullrequestreview-111746486",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edbee2cb-abc5-4eb1-95b8-8af219707c40",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Should the indentation be omitted if the class is on a single line?",
        "createdAt" : "2018-04-12T18:25:22Z",
        "updatedAt" : "2018-04-12T18:49:13Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "8ed906af-eda3-47d0-89e8-6a8f78c91c31",
        "parentId" : "edbee2cb-abc5-4eb1-95b8-8af219707c40",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "It's about to be multiline since we're adding a member, and that new member should be indented.",
        "createdAt" : "2018-04-12T18:44:51Z",
        "updatedAt" : "2018-04-12T18:49:13Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8af64d3c4524b26e951b48d951bd426f7c8338a",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +445,449 @@            }\n\n            const indentation = formatting.SmartIndenter.findFirstNonWhitespaceColumn(getLineStartPositionForPosition(clsStart, sourceFile), clsStart, sourceFile, this.formatContext.options)\n                + this.formatContext.options.indentSize;\n            this.insertNodeAt(sourceFile, cls.members.pos, newElement, { indentation, prefix, suffix });"
  },
  {
    "id" : "b7655240-98ce-4c75-bb18-62df3b9d9f29",
    "prId" : 23342,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23342#pullrequestreview-111746563",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "479f1676-f531-4d73-b849-c275c66b1bc9",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : " 1) Why?  I like having a space there.\r\n 2) Shouldn't this be handled by the formatter (or at least consume the formatting options)?\r\n",
        "createdAt" : "2018-04-12T18:26:57Z",
        "updatedAt" : "2018-04-12T18:49:13Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "438368a9-d75e-4f85-8263-eee9b86e953b",
        "parentId" : "479f1676-f531-4d73-b849-c275c66b1bc9",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Leaving the space would result in the class ending in `\\n }` instead of just `\\n}` The formatter won't handle this since it only formats the new nodes we're adding, not the existing whitespace surrounding them.",
        "createdAt" : "2018-04-12T18:45:05Z",
        "updatedAt" : "2018-04-12T18:49:13Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8af64d3c4524b26e951b48d951bd426f7c8338a",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +603,607 @@                const sourceFile = cls.getSourceFile();\n                const [openBraceEnd, closeBraceEnd] = getClassBraceEnds(cls, sourceFile);\n                // For `class C { }` remove the whitespace inside the braces.\n                if (positionsAreOnSameLine(openBraceEnd, closeBraceEnd, sourceFile) && openBraceEnd !== closeBraceEnd - 1) {\n                    this.deleteRange(sourceFile, createTextRange(openBraceEnd, closeBraceEnd - 1));"
  },
  {
    "id" : "53ecbb33-da58-4e00-a4cc-74a46f48fe01",
    "prId" : 22813,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22813#pullrequestreview-107092364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5cce167-5131-4e17-ba90-542057ba19a2",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "As before, I personally find it strange to change parameter types of some, but not all, members of this family of functions.",
        "createdAt" : "2018-03-26T22:09:35Z",
        "updatedAt" : "2018-03-26T22:10:05Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "8e04958d-7e78-4541-8962-be12b15bc428",
        "parentId" : "f5cce167-5131-4e17-ba90-542057ba19a2",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`interface ChangeNodeOptions extends ConfigurableStartEnd, InsertNodeOptions {}`. `ConfigurableStartEnd` determines how the start and end positions of the node parameter are adjusted. This function doesn't take a node as a parameter, so those options would be unused.",
        "createdAt" : "2018-03-26T22:13:23Z",
        "updatedAt" : "2018-03-26T22:13:23Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3629bc85904d6b064821b8e98876b9434cc67fa5",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +282,286 @@\n        // TODO (https://github.com/Microsoft/TypeScript/issues/21246): default should probably be useNonAdjustedPositions\n        public replaceRange(sourceFile: SourceFile, range: TextRange, newNode: Node, options: InsertNodeOptions = {}) {\n            this.changes.push({ kind: ChangeKind.ReplaceWithSingleNode, sourceFile, range, options, node: newNode });\n            return this;"
  },
  {
    "id" : "8c3c92e5-5a34-4b89-815e-0a0050f5c9fd",
    "prId" : 22519,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22519#pullrequestreview-105532305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53db63b0-462c-49df-a6da-b06beb7deaa9",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I'm surprised that we need to compute line numbers for this operation (I would have guessed, perhaps incorrectly, that that was expensive), but I see that this is just a refactoring.",
        "createdAt" : "2018-03-20T17:17:25Z",
        "updatedAt" : "2018-03-26T22:45:11Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "b9a0f832-e4d2-4f31-93cd-a122d4e0c105",
        "parentId" : "53db63b0-462c-49df-a6da-b06beb7deaa9",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "It could probably be done without the line numbers by counting back to the beginning of the line. Though, getting the line number is just a binary search given that `sourceFile.lineMap` is cached.",
        "createdAt" : "2018-03-20T20:54:57Z",
        "updatedAt" : "2018-03-26T22:45:11Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb590204f8fca27dedfda6c0bc5baad37cdf1b36",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +344,348 @@        }\n\n        public insertCommentBeforeLine(sourceFile: SourceFile, lineNumber: number, position: number, commentText: string): void {\n            const lineStartPosition = getStartPositionOfLine(lineNumber, sourceFile);\n            const startPosition = getFirstNonSpaceCharacterPosition(sourceFile.text, lineStartPosition);"
  },
  {
    "id" : "ccc9364b-c1b1-41d3-a7f0-b51f40b306be",
    "prId" : 22507,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22507#pullrequestreview-111743204",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1196f5d1-4468-4ee3-9058-bc8996245f10",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Will this destroy any trivia?  Does it matter?",
        "createdAt" : "2018-04-12T17:54:08Z",
        "updatedAt" : "2018-04-16T19:59:34Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "067c88a9-fe43-4d71-830d-c59b378afe5c",
        "parentId" : "1196f5d1-4468-4ee3-9058-bc8996245f10",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This is a bug already, see #23373",
        "createdAt" : "2018-04-12T18:35:19Z",
        "updatedAt" : "2018-04-16T19:59:34Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2415f2f97dea0579820b6b7b0b0e63c67cb9d1ac",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +490,494 @@                    // `() => {}` --> `function f() {}`\n                    this.insertNodesAt(sourceFile, lparen.getStart(sourceFile), [createToken(SyntaxKind.FunctionKeyword), createIdentifier(name)], { joiner: \" \" });\n                    this.deleteNode(sourceFile, arrow);\n                }\n                else {"
  },
  {
    "id" : "489c9417-9ad0-4501-8a5c-8c24121dcd25",
    "prId" : 22507,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22507#pullrequestreview-111743215",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3810af2-d999-4443-bbf3-78e3fa039add",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Does this work for `() => true`?",
        "createdAt" : "2018-04-12T17:55:03Z",
        "updatedAt" : "2018-04-16T19:59:34Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "b62c4e3e-ee0a-4e4e-80a8-66bc53961bc9",
        "parentId" : "e3810af2-d999-4443-bbf3-78e3fa039add",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "(Or is there some reason that's impossible here?)",
        "createdAt" : "2018-04-12T17:55:33Z",
        "updatedAt" : "2018-04-16T19:59:34Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "7584dfd9-572c-4b49-afa1-55040c655ac9",
        "parentId" : "e3810af2-d999-4443-bbf3-78e3fa039add",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "See `if (node.body.kind !== SyntaxKind.Block)` below",
        "createdAt" : "2018-04-12T18:35:21Z",
        "updatedAt" : "2018-04-16T19:59:34Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2415f2f97dea0579820b6b7b0b0e63c67cb9d1ac",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +488,492 @@                const lparen = findChildOfKind(node, SyntaxKind.OpenParenToken, sourceFile);\n                if (lparen) {\n                    // `() => {}` --> `function f() {}`\n                    this.insertNodesAt(sourceFile, lparen.getStart(sourceFile), [createToken(SyntaxKind.FunctionKeyword), createIdentifier(name)], { joiner: \" \" });\n                    this.deleteNode(sourceFile, arrow);"
  },
  {
    "id" : "6ef58ddd-85ed-4215-8fe7-b5f79753f799",
    "prId" : 21832,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21832#pullrequestreview-95607589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4daf1a4-e101-4c41-ba7b-c3b4ba082dd6",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "No longer needs to be exported",
        "createdAt" : "2018-02-10T01:16:00Z",
        "updatedAt" : "2018-02-10T01:16:00Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "6bcecf34-3197-4c69-a214-37b44b0f079a",
        "parentId" : "b4daf1a4-e101-4c41-ba7b-c3b4ba082dd6",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I left it exported because I'll be consuming it in another PR.",
        "createdAt" : "2018-02-10T01:48:45Z",
        "updatedAt" : "2018-02-10T01:48:45Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d1f316414f05f4446a7a2fae7b5331a39465ed5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +73,77 @@    export type ConfigurableStartEnd = ConfigurableStart & ConfigurableEnd;\n\n    export const useNonAdjustedPositions: ConfigurableStartEnd = {\n        useNonAdjustedStartPosition: true,\n        useNonAdjustedEndPosition: true,"
  },
  {
    "id" : "c911cf1e-3e30-4064-b8b9-c5e82a15339a",
    "prId" : 21306,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21306#pullrequestreview-95246044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a5dce7d-4c4b-403a-9079-f78da0bd3cbc",
        "parentId" : null,
        "authorId" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "body" : "Is this name the intended one? On other files the method is creatTextSpanFromStartEnd.",
        "createdAt" : "2018-01-19T21:45:55Z",
        "updatedAt" : "2018-02-08T21:00:12Z",
        "lastEditedBy" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "tags" : [
        ]
      },
      {
        "id" : "7a8d9f68-1ebf-49e0-baa5-8be50d868f4d",
        "parentId" : "2a5dce7d-4c4b-403a-9079-f78da0bd3cbc",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This and `createTextSpanFromStartEnd` are basically the same functions, only some data structures use `{ start, end }` and others use `{ pos, end }` for some reason.",
        "createdAt" : "2018-01-19T22:02:37Z",
        "updatedAt" : "2018-02-08T21:00:12Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "b54ea090-3cd6-47be-99ff-1a5643653513",
        "parentId" : "2a5dce7d-4c4b-403a-9079-f78da0bd3cbc",
        "authorId" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "body" : "If both methods (FromStartEnd and FromRange) achieves the same goal, is it preferable to instead refactor to use the FromRange and not introduce a new method?",
        "createdAt" : "2018-01-19T22:10:01Z",
        "updatedAt" : "2018-02-08T21:00:12Z",
        "lastEditedBy" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "tags" : [
        ]
      },
      {
        "id" : "6eda7f8f-9330-42c7-989d-58f4f68338ba",
        "parentId" : "2a5dce7d-4c4b-403a-9079-f78da0bd3cbc",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : ":+1: Changed this so that they call it `pos` consistently",
        "createdAt" : "2018-02-08T21:51:07Z",
        "updatedAt" : "2018-02-08T21:51:07Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c21ce01dffa1e1282d9083a4aa38a0b56dd48bc4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +630,634 @@\n        private computeSpan(change: Change, _sourceFile: SourceFile): TextSpan {\n            return createTextSpanFromRange(change.range);\n        }\n"
  },
  {
    "id" : "824e5d60-33db-4eb7-ba97-77614cb73306",
    "prId" : 14441,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14441#pullrequestreview-27132665",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5acd0224-2315-479d-a2d3-0ef561378a22",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why is it a commaToken here?",
        "createdAt" : "2017-03-15T00:08:31Z",
        "updatedAt" : "2017-03-15T18:33:01Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "317443ce-ff74-4985-bc31-09e6cb565b13",
        "parentId" : "5acd0224-2315-479d-a2d3-0ef561378a22",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i see.. if we do not have a better guess default to comma.",
        "createdAt" : "2017-03-15T00:09:37Z",
        "updatedAt" : "2017-03-15T18:33:01Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "a78ae4f1-b492-4f8e-b2f8-ad67651eb269",
        "parentId" : "5acd0224-2315-479d-a2d3-0ef561378a22",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "default separator that works in most of lists",
        "createdAt" : "2017-03-15T00:10:23Z",
        "updatedAt" : "2017-03-15T18:33:01Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "3b338d4e-7606-4aeb-8402-c97000f8f760",
        "parentId" : "5acd0224-2315-479d-a2d3-0ef561378a22",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "probably we should do differently for statement lists",
        "createdAt" : "2017-03-15T00:10:44Z",
        "updatedAt" : "2017-03-15T18:33:01Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "81a4df97-99fc-4160-b49d-1ff1715f64c7",
        "parentId" : "5acd0224-2315-479d-a2d3-0ef561378a22",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "What about if this in a class, and we have no semicolon on the line before? comma would not be right here..",
        "createdAt" : "2017-03-15T00:11:56Z",
        "updatedAt" : "2017-03-15T18:33:01Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "c2e21dbe-36ff-4228-9115-208aae834d14",
        "parentId" : "5acd0224-2315-479d-a2d3-0ef561378a22",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "yes, I agree, will change",
        "createdAt" : "2017-03-15T00:20:52Z",
        "updatedAt" : "2017-03-15T18:33:01Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "361d843a-1b90-43c7-93e9-6dc352b4463b",
        "parentId" : "5acd0224-2315-479d-a2d3-0ef561378a22",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "One note though that `insertNodeInListAfter` is intended to be used for lists (arguments, parameters, type arguments, type parameters, variable declarations, import and export specifiers etc...) where separator is not accounted inside the range of the node and thus should be handled separately. Members in classes and statements usually include separator in its range and so whenever we i.e. add new or delete old member in class it will take care of semicolons. Will add test for this",
        "createdAt" : "2017-03-15T05:33:36Z",
        "updatedAt" : "2017-03-15T18:33:01Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "1397c169-78d9-45fc-9287-5c92dc0e7c02",
        "parentId" : "5acd0224-2315-479d-a2d3-0ef561378a22",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "We should add a comment on the insertNodeInListAfter to make it clear when it should/should not be used.",
        "createdAt" : "2017-03-15T16:51:44Z",
        "updatedAt" : "2017-03-15T18:33:01Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d2e19bebd0d82c98709a06987e88c44fda314bb",
    "line" : 369,
    "diffHunk" : "@@ -1,1 +367,371 @@                    // i.e. var x = 1 // this is x\n                    //     | new element will be inserted at this position\n                    separator = SyntaxKind.CommaToken;\n                }\n                else {"
  }
]