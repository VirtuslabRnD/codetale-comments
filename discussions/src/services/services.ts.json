[
  {
    "id" : "8869ba22-6a03-4299-bd08-76f075a92fe4",
    "prId" : 43165,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43165#pullrequestreview-607704830",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "786406d3-f9e2-43aa-9cf7-fa9b74a1be17",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "This function is only called here, and is short, so I wanted to inline it, but it was non-trivial so I skipped it to keep the diff smaller. I couldn't help myself simplifying out the unused `declarations: Declaration[]` to `declaration: Declaration`, though.",
        "createdAt" : "2021-03-09T18:02:16Z",
        "updatedAt" : "2021-03-09T18:02:20Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "e53b274ab510ab4d0bb122db45b024eed4a15829",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +566,570 @@    }\n\n    function getJsDocTagsOfSignature(declaration: Declaration, checker: TypeChecker): JSDocTagInfo[] {\n        let tags = JsDoc.getJsDocTagsFromDeclarations([declaration]);\n        if (tags.length === 0 || hasJSDocInheritDocTag(declaration)) {"
  },
  {
    "id" : "6b5da06f-02cc-4bb9-a889-8ec6a2c05c9e",
    "prId" : 42890,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42890#pullrequestreview-599043156",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90247ab5-1e31-4f6f-adf3-60f4be1f1981",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think this should be `data: unknown` here or or in server you would need to convert it to this type with verification of type?",
        "createdAt" : "2021-02-25T19:42:28Z",
        "updatedAt" : "2021-02-26T23:14:54Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "a5609f2e-b42c-4554-9da3-f72e03336019",
        "parentId" : "90247ab5-1e31-4f6f-adf3-60f4be1f1981",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yeah, verifying in the server is probably a good idea. Iâ€™ll add that.",
        "createdAt" : "2021-02-25T21:16:48Z",
        "updatedAt" : "2021-02-26T23:14:54Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "62db7d04628ab3c68df8f21226bf8a394ab59805",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1559,1563 @@        }\n\n        function getCompletionEntryDetails(fileName: string, position: number, name: string, formattingOptions: FormatCodeSettings | undefined, source: string | undefined, preferences: UserPreferences = emptyOptions, data?: CompletionEntryData): CompletionEntryDetails | undefined {\n            synchronizeHostData();\n            return Completions.getCompletionEntryDetails("
  },
  {
    "id" : "ad7ae198-bc3d-4ead-8760-ce19bd061b53",
    "prId" : 41374,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41374#pullrequestreview-522136863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49757f71-939c-47ce-bc34-3a4e9e83c66d",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "This might be a premature optimization.  Happy to roll it back if people have concerns.",
        "createdAt" : "2020-11-03T01:08:54Z",
        "updatedAt" : "2020-11-12T21:04:11Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "dad4ad04ec7b8d7a84f1376104605ec565b7702b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1127,1131 @@    }\n\n    const NoopCancellationToken: CancellationToken = {\n        isCancellationRequested: returnFalse,\n        throwIfCancellationRequested: noop,"
  },
  {
    "id" : "d00c898a-2467-45bb-9e30-022817ab1f52",
    "prId" : 39735,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39735#pullrequestreview-457936086",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e73a04b4-4111-4e53-945b-a7c0bdcc4cea",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I think it might be more helpful to say something like `not allowed in LanguageServiceMode.ApproximateSemanticOnly`, so that it's explicitly connected to the option.",
        "createdAt" : "2020-07-29T22:21:12Z",
        "updatedAt" : "2020-08-03T00:45:51Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "dca0b019b3627f375c9a64fe0ccd12dfe9f6296c",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +2549,2553 @@                invalidOperationsOnApproximateSemanticOnly.forEach(key =>\n                    ls[key] = () => {\n                        throw new Error(`LanguageService Operation: ${key} not allowed on approximate semantic only server`);\n                    }\n                );"
  },
  {
    "id" : "b80ebbfd-d201-430a-aea6-d27eb999ad8e",
    "prId" : 38561,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38561#pullrequestreview-431085279",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29a3a2f4-962d-458f-acfe-ab56090008e7",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "How does this relate to the list in session.ts?  Do they need to stay in sync?  Is one redundant?",
        "createdAt" : "2020-06-16T00:51:04Z",
        "updatedAt" : "2020-06-16T20:05:38Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "901cfc35e4af680eff69eda607b86f444f24872d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1172,1176 @@    }\n\n    const invalidOperationsOnSyntaxOnly: readonly (keyof LanguageService)[] = [\n        \"getSyntacticDiagnostics\",\n        \"getSemanticDiagnostics\","
  },
  {
    "id" : "20221e40-c0ff-4c7d-bec6-1cde6c27c077",
    "prId" : 37596,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37596#pullrequestreview-382177145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f441f1c-aaac-4679-9619-f5e49c16714d",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Is this a new approach or just a bug fix?  Is the key already used when the document is added to the registry?",
        "createdAt" : "2020-03-26T01:25:05Z",
        "updatedAt" : "2020-03-26T01:25:05Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "2d5573ac-961e-4dd9-b641-1880d18334bf",
        "parentId" : "0f441f1c-aaac-4679-9619-f5e49c16714d",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This is not new approach as you see the method already exists and if you browse of other usages of methods of DocumentRegistry you would notice that they all use path and key.",
        "createdAt" : "2020-03-26T16:20:01Z",
        "updatedAt" : "2020-03-26T16:20:01Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd02d802ffc28405f2a3bd28db7bdf7d4aba0044",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1409,1413 @@                const key = documentRegistry.getKeyForCompilationSettings(program.getCompilerOptions());\n                forEach(program.getSourceFiles(), f =>\n                    documentRegistry.releaseDocumentWithKey(f.resolvedPath, key));\n                program = undefined!; // TODO: GH#18217\n            }"
  },
  {
    "id" : "e813277d-d4d6-4755-acb6-6c668e4bd0f6",
    "prId" : 37029,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37029#pullrequestreview-446741233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4eb583db-bdab-4419-8df4-330c958c43ab",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Possibly a dumb question, but doesn't the line end at `lineStarts[i+1] - 1`?",
        "createdAt" : "2020-07-10T17:46:10Z",
        "updatedAt" : "2020-07-13T23:59:21Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "4f0bb2f0-8fc1-4f40-8494-52757573dd26",
        "parentId" : "4eb583db-bdab-4419-8df4-330c958c43ab",
        "authorId" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "body" : "Technically yes, but there are some considerations that the method already implements. e.g. the array is out of bounds.",
        "createdAt" : "2020-07-10T22:59:04Z",
        "updatedAt" : "2020-07-13T23:59:21Z",
        "lastEditedBy" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "tags" : [
        ]
      }
    ],
    "commit" : "635ee24a3c58db454bcf7ed39f7ae91739abca41",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +2017,2021 @@            // Check each line before any text changes.\n            for (let i = firstLine; i <= lastLine; i++) {\n                const lineText = sourceFile.text.substring(lineStarts[i], sourceFile.getLineEndOfPosition(lineStarts[i]));\n\n                // Find the start of text and the left-most character. No-op on empty lines."
  },
  {
    "id" : "6b62d4f3-c3df-4c70-95b6-ba13079aa888",
    "prId" : 37029,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37029#pullrequestreview-446742703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "943da41b-a020-4102-a52c-f0893a48597f",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Can you please double-check the second argument of `substr`?  I'm pretty sure `substr` and `substring` actually do the same thing and treat the second argument as `end` (though I believe sighelp says otherwise).",
        "createdAt" : "2020-07-10T17:49:39Z",
        "updatedAt" : "2020-07-13T23:59:21Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "811a9c26-7705-4865-9baa-db9c2c030472",
        "parentId" : "943da41b-a020-4102-a52c-f0893a48597f",
        "authorId" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "body" : "`substr` uses the second argument as length. Confirmed.",
        "createdAt" : "2020-07-10T23:04:37Z",
        "updatedAt" : "2020-07-13T23:59:21Z",
        "lastEditedBy" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "tags" : [
        ]
      }
    ],
    "commit" : "635ee24a3c58db454bcf7ed39f7ae91739abca41",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +2049,2053 @@                        });\n                    }\n                    else if (sourceFile.text.substr(lineStarts[i] + lineTextStart, openComment.length) === openComment) {\n                        textChanges.push({\n                            newText: \"\","
  },
  {
    "id" : "86ae47a9-2940-472d-81d0-cbcf9a5de4bf",
    "prId" : 30215,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30215#pullrequestreview-211375194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61dae11b-ad44-4ba8-96ab-c2336c6c46fe",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Is this type parameter addition required? Seems strange to now need it.",
        "createdAt" : "2019-03-06T14:00:37Z",
        "updatedAt" : "2019-03-07T15:07:21Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "80fafdcf-d763-40ef-8e83-65b1014b87bf",
        "parentId" : "61dae11b-ad44-4ba8-96ab-c2336c6c46fe",
        "authorId" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "body" : "Here's what's happening: Previously we'd infer `number` from `errorCodes`, then fix that inference as we contextually typed `equateValues`, and finally _ignore_ inferences from `compareValues` because of fixing. Now we defer processing of `equateValues` to get the best possible contextual type, which means we'll infer from both `errorCodes` and `compareValues`. And from `compareValues` we get the candidate `number | undefined` which is technically contravariant, but we ignore that because we're not in `--strictFunctionTypes` mode. So, we end up with a worse inference. The real fix here would be for us to do the work to use `--strictFunctionTypes` in the compiler, the legacy rules just aren't right but it is a breaking change (in other places) to fix them.",
        "createdAt" : "2019-03-06T17:15:40Z",
        "updatedAt" : "2019-03-07T15:07:21Z",
        "lastEditedBy" : "bdee90d3-fa06-43ed-8bf1-d381c3d69e0b",
        "tags" : [
        ]
      },
      {
        "id" : "75f42fd1-8763-47d7-b1c8-42d7242e2e18",
        "parentId" : "61dae11b-ad44-4ba8-96ab-c2336c6c46fe",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "It's probably too far gone to change; but is there a good compat reason we can't perform inferences the same way outside and inside `strictFunctionTypes` mode?\r\n\r\nBut aight, if that's the case I guess it can't be avoided. :(",
        "createdAt" : "2019-03-06T17:41:50Z",
        "updatedAt" : "2019-03-07T15:07:21Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9e924b6f0edb02c719a77f6d11fbae4704574e7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1799,1803 @@            const formatContext = formatting.getFormatContext(formatOptions);\n\n            return flatMap(deduplicate<number>(errorCodes, equateValues, compareValues), errorCode => {\n                cancellationToken.throwIfCancellationRequested();\n                return codefix.getFixes({ errorCode, sourceFile, span, program, host, cancellationToken, formatContext, preferences });"
  },
  {
    "id" : "4258ca91-acfd-401c-b640-c3383f2447be",
    "prId" : 25813,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25813#pullrequestreview-139141891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd4f5ff2-a8c2-43da-973c-33a7f95a77ac",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "this is purely stylistic. but i think it read better before. in general refactoring inner pieces of logic that are rather specific to a certain code path makes it harder to understand the flow.",
        "createdAt" : "2018-07-20T16:59:52Z",
        "updatedAt" : "2018-07-20T16:59:52Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "3eac125a-eb9f-41ff-83ae-a6e24125acf9",
        "parentId" : "fd4f5ff2-a8c2-43da-973c-33a7f95a77ac",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Previously we used switch-case fallthrough to determine whether to reach the last case. That was possible with only two cases, but it's not possible any more when we need two cases to both goto the same third case.",
        "createdAt" : "2018-07-20T17:18:37Z",
        "updatedAt" : "2018-07-20T17:18:38Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4198c83f19467457155799f52e50e84e3e62df46",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +1473,1477 @@        }\n\n        function shouldGetType(sourceFile: SourceFile, node: Node, position: number): boolean {\n            switch (node.kind) {\n                case SyntaxKind.Identifier:"
  },
  {
    "id" : "fa975f2e-4bf6-4005-980c-7aa68a8392b7",
    "prId" : 21909,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21909#pullrequestreview-96319969",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5ac461d-6c1b-44f7-8294-427be9dcb9a7",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I think these changes are substantial enough to deserve an `organizeImports.ts` file, just like we have for breakpoints/classifier/etc.",
        "createdAt" : "2018-02-13T22:10:54Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c278cee17008877f3805f70a214e17ba3f37949",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1850,1854 @@        }\n\n        function organizeImports(scope: OrganizeImportsScope, formatOptions: FormatCodeSettings): ReadonlyArray<FileTextChanges> {\n            synchronizeHostData();\n            Debug.assert(scope.type === \"file\");"
  },
  {
    "id" : "58d76c94-9325-4223-b073-96cc8a87719f",
    "prId" : 17415,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17415#pullrequestreview-52210498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07ff52e0-741a-4d5d-869c-26045054ba93",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "All these white-space changes are interesting. Is it passing the linter? (Was it before?)",
        "createdAt" : "2017-07-25T21:35:53Z",
        "updatedAt" : "2017-09-14T19:48:17Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "00405a7b-dd3c-4962-a1dd-a27bdafafc33",
        "parentId" : "07ff52e0-741a-4d5d-869c-26045054ba93",
        "authorId" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "body" : "Yes it is passing linter (before and after). This was done by VS Code formatting, I thought it should be pushed.",
        "createdAt" : "2017-07-25T22:01:10Z",
        "updatedAt" : "2017-09-14T19:48:17Z",
        "lastEditedBy" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ab67c0f222f79e4e380febcd7bd8988aa3c92d5",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +738,742 @@    class SourceMapSourceObject implements SourceMapSource {\n        lineMap: number[];\n        constructor(public fileName: string, public text: string, public skipTrivia?: (pos: number) => number) { }\n\n        public getLineAndCharacterOfPosition(pos: number): LineAndCharacter {"
  },
  {
    "id" : "8a519fe5-586e-4669-a498-85ca6989069d",
    "prId" : 17415,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17415#pullrequestreview-56244146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be5a6aa4-faca-4d3f-88c6-c8819013a4c7",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Will this block renaming a symbol declared in a default library? I would think that if a symbol is declared in a default library then we shouldn't allow the rename to proceed at all, rather than renaming it in a user's source files and resulting in possible compile time errors.",
        "createdAt" : "2017-08-08T20:38:54Z",
        "updatedAt" : "2017-09-14T19:48:17Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "b14f9846-23b1-4318-8861-2a43f689a275",
        "parentId" : "be5a6aa4-faca-4d3f-88c6-c8819013a4c7",
        "authorId" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "body" : "There's already a feature for that. This will avoid renaming anything on the default library, like comments or strings.",
        "createdAt" : "2017-08-15T01:16:37Z",
        "updatedAt" : "2017-09-14T19:48:17Z",
        "lastEditedBy" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ab67c0f222f79e4e380febcd7bd8988aa3c92d5",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1534,1538 @@            synchronizeHostData();\n\n            // Exclude default library when renaming as commonly user don't want to change that file.\n            let sourceFiles: SourceFile[] = [];\n            if (options && options.isForRename) {"
  },
  {
    "id" : "6ca7d72f-c1fd-4ba0-8683-2506a1e8f8ee",
    "prId" : 17257,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17257#pullrequestreview-51711145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6788f325-b841-417b-b6fb-45bd795151ef",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "This is simply a peeve of mine, but I don't think that checking for `-1`, specifically, makes sense.  Why not rule out any negative value (i.e. `>= 0`)?  This specific API may be documented to return exactly `-1` (I haven't checked), but many others are not.",
        "createdAt" : "2017-07-18T23:41:00Z",
        "updatedAt" : "2017-07-19T22:42:15Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "e6e2616a-1019-4a38-962e-26163eeadab5",
        "parentId" : "6788f325-b841-417b-b6fb-45bd795151ef",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "My favorite is:\r\n\r\n```javascript\r\n  return !!~path.indexOf(somevar); // Note: Overly cute hack. Do not use! :-)\r\n```\r\n\r\nTake your time.... I'll wait :wink:\r\n\r\nNote in JavaScript it is explicitly a result of -1 if not found (http://es5.github.io/#x15.5.4.7). Simply checking for < 0 seems less correct, in the unlikely event they add other negative values for other scenarios.",
        "createdAt" : "2017-07-18T23:58:05Z",
        "updatedAt" : "2017-07-19T22:42:15Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "c8440e60-eb90-4fe8-a065-0d9958fbe66e",
        "parentId" : "6788f325-b841-417b-b6fb-45bd795151ef",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "While I agree that the meanings of other negative values are unspecified, it seems borderline inconceivable that they could eventually be defined as success cases.  Ruling them out now seems more forward (and slightly-non-compliant implementation) compatible.",
        "createdAt" : "2017-07-19T00:19:23Z",
        "updatedAt" : "2017-07-19T22:42:15Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "96580185-f7c4-43ca-9c01-199c47dcd076",
        "parentId" : "6788f325-b841-417b-b6fb-45bd795151ef",
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "From the point of readability `path.indexOf(node_modulesFolderName) !== -1` sucks.\r\n\r\nAs with any double-negative, you're forced to pause and do some mental calculations: *\"ah, it's checking for position, then asserts that position is not good; no wait it asserts that it's not wrong, then proceeds â€” therefore this statement checks that the substring exists in the path string! Phew....\"*\r\n\r\nRules are academic. In the end what counts is cost of maintenance. Replacing `!==-1` with `>=0` improves readability and reduces possibility of bugs.",
        "createdAt" : "2017-07-24T09:06:56Z",
        "updatedAt" : "2017-07-24T09:06:57Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bdd17e842ed39b4a5d6b8a6b48053b6b55abd51",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1964,1968 @@                const node_modulesFolderName = \"/node_modules/\";\n\n                return path.indexOf(node_modulesFolderName) !== -1;\n            }\n        }"
  },
  {
    "id" : "13418a03-84bf-421b-b0dc-a8ac7151d43f",
    "prId" : 17257,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17257#pullrequestreview-51714012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bff1c378-4b5b-465d-96a7-2d0d746d7570",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "What if the whole project is situated nested inside node_modules somewhere? Will all TODOs suddenly disappear?\r\n\r\n/myDir1/node_modules/myOtherDirectory/**myProjectRoot**/src/blablaFile.ts\r\n\r\n1) People do put temporary junk in their node_modules for the purpose of quick-checking someething and avoiding erroneous commit.\r\n\r\n2) Additionally, in complex large projects there may be a legitimate need to keep projects in node_modules due to some process optimisation.\r\n\r\nAll in all, the check should only turn true if node_modules appear after the project root in full path, not before it.",
        "createdAt" : "2017-07-24T09:18:51Z",
        "updatedAt" : "2017-07-24T09:19:10Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bdd17e842ed39b4a5d6b8a6b48053b6b55abd51",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1962,1966 @@\n            function isNodeModulesFile(path: string): boolean {\n                const node_modulesFolderName = \"/node_modules/\";\n\n                return path.indexOf(node_modulesFolderName) !== -1;"
  },
  {
    "id" : "79629b37-2741-4829-8b49-3f55d209a3c3",
    "prId" : 16433,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16433#pullrequestreview-43580234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d828af4-e79a-488c-ad8f-b40fe6fd5507",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Which brace completions do we still provide and why?",
        "createdAt" : "2017-06-12T17:16:32Z",
        "updatedAt" : "2017-06-12T22:36:46Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "8b72dbf5-9cdb-4185-8b7e-4a7e9aea7076",
        "parentId" : "4d828af4-e79a-488c-ad8f-b40fe6fd5507",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Indeed. I've never liked any completions when typing inside a comment (including braces). Is there a rationale for what we do provide and what we don't?",
        "createdAt" : "2017-06-12T18:01:07Z",
        "updatedAt" : "2017-06-12T22:36:46Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "57e7d2a7-8732-4546-8354-ad71b59a981f",
        "parentId" : "4d828af4-e79a-488c-ad8f-b40fe6fd5507",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "This behavior mirrors that of CSharp editing in VS. But we can just as easily suppress all completions in comments.",
        "createdAt" : "2017-06-12T22:28:15Z",
        "updatedAt" : "2017-06-12T22:38:31Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "70bace78a0cb486c9cf7a1e14e3ba5ed84b86cf9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1824,1828 @@\n            switch (openingBrace) {\n                case CharacterCodes.singleQuote:\n                case CharacterCodes.doubleQuote:\n                case CharacterCodes.backtick:"
  },
  {
    "id" : "a07f101c-5f50-41da-9b8d-6f3cc4ab4097",
    "prId" : 16385,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16385#pullrequestreview-56471984",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06d2331c-a47a-4bd1-91df-71324417d0d2",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Would it be worthwhile to test this change?",
        "createdAt" : "2017-08-09T20:19:42Z",
        "updatedAt" : "2017-08-18T03:07:02Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "f8f4f744-6d33-4f37-bff5-5b15ccfb4b14",
        "parentId" : "06d2331c-a47a-4bd1-91df-71324417d0d2",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "Adding a test to fourslash and will add an integration test on the managed side to make sure the experience works end-to-end.",
        "createdAt" : "2017-08-15T21:13:26Z",
        "updatedAt" : "2017-08-18T03:07:02Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4e969a210325190097c963cc3e4023682125c4a",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1761,1765 @@            const settings = toEditorSettings(options);\n\n            if (!isInComment(sourceFile, position)) {\n                if (key === \"{\") {\n                    return formatting.formatOnOpeningCurly(position, sourceFile, getRuleProvider(settings), settings);"
  },
  {
    "id" : "97121ff9-c8ee-4cd5-b61d-02ccb2612166",
    "prId" : 16380,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16380#pullrequestreview-43040671",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d2ce02a-a272-4767-af47-723a09306650",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "We don't need a special jsdoc scanner if `!isJSDocCommentContainingNode`.",
        "createdAt" : "2017-06-08T23:41:59Z",
        "updatedAt" : "2017-06-08T23:47:17Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cfba78509ebcea5b8a4f64c19f16d70f6adcd911",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +104,108 @@        }\n\n        private addSyntheticNodes(nodes: Node[], pos: number, end: number): number {\n            scanner.setTextPos(pos);\n            while (pos < end) {"
  },
  {
    "id" : "859815ad-cd9f-4206-9526-8e5eccb93dc9",
    "prId" : 16380,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16380#pullrequestreview-43040671",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cb442d5-a6ff-43cd-8c75-66a326475c7c",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "We will now create children normally for inner jsdoc nodes such as `JSDocTypeExpression`.",
        "createdAt" : "2017-06-08T23:45:11Z",
        "updatedAt" : "2017-06-08T23:47:17Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cfba78509ebcea5b8a4f64c19f16d70f6adcd911",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +148,152 @@                this._children = children;\n                return;\n            }\n\n            const children: Node[] = [];"
  },
  {
    "id" : "88fc79b8-cb3a-401b-9799-ac2f81aad9c5",
    "prId" : 14214,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14214#pullrequestreview-23384565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e30eb6d7-8883-410b-a6ef-1347aa13537a",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "use `cancellationToken` instead",
        "createdAt" : "2017-02-22T23:42:45Z",
        "updatedAt" : "2017-03-27T21:50:02Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "494f7245-143f-4c58-a297-066d1432aef2",
        "parentId" : "e30eb6d7-8883-410b-a6ef-1347aa13537a",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "done",
        "createdAt" : "2017-02-23T02:10:32Z",
        "updatedAt" : "2017-03-27T21:50:02Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d20cebf998b94da403a6060d74c1bc721f8a6354",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +1623,1627 @@        }\n\n        function getOutliningSpans(fileName: string): OutliningSpan[] {\n            // doesn't use compiler - no need to synchronize with host\n            const sourceFile = syntaxTreeCache.getCurrentSourceFile(fileName);"
  },
  {
    "id" : "d40f25cf-d6fb-427b-a807-79d57b615575",
    "prId" : 12856,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12856#pullrequestreview-12628659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4507347-d2cc-453b-86a0-f61feee7cb22",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Empty array is expensive here.\r\n\r\nMost of `SignatureObject` instances will have no JSDoc comments. Allocating empty arrays will add bunch of fluff to GC. Would be best to avoid that.",
        "createdAt" : "2016-12-13T08:49:13Z",
        "updatedAt" : "2016-12-13T09:03:30Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "2875d5bc707661638adfecd661c900f980a745cc",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +419,423 @@        // Undefined is used to indicate the value has not been computed. If, after computing, the\n        // symbol has no doc comment, then the empty array will be returned.\n        jsDocTags: JSDocTagInfo[];\n\n        constructor(checker: TypeChecker) {"
  },
  {
    "id" : "bae11652-4d9c-498f-84f3-cfee777be322",
    "prId" : 12856,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12856#pullrequestreview-12628659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "170493b3-10a6-4567-9830-cbd6fd73d5a4",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "How about using `undefined` for storing un-computed state and `null` for computed and empty?",
        "createdAt" : "2016-12-13T08:51:55Z",
        "updatedAt" : "2016-12-13T09:03:30Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "2875d5bc707661638adfecd661c900f980a745cc",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +448,452 @@            if (this.jsDocTags === undefined) {\n                this.jsDocTags = this.declaration ? JsDoc.getJsDocTagsFromDeclarations([this.declaration]) : [];\n            }\n\n            return this.jsDocTags;"
  },
  {
    "id" : "8f168a90-73b1-47a7-8c90-4a11d1e3bdcb",
    "prId" : 12856,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12856#pullrequestreview-12628659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38524a76-7541-4b3b-a485-009553333bcf",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Here too the check would need to change to avoid empty array allocation for the default no-JSDoc case.\r\n(to mark the difference between un-computed value and empty value in `this.tags` -- `undefined` versus `null` can be used)",
        "createdAt" : "2016-12-13T08:56:58Z",
        "updatedAt" : "2016-12-13T09:03:30Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "2875d5bc707661638adfecd661c900f980a745cc",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +325,329 @@            if (this.tags === undefined) {\n                this.tags = JsDoc.getJsDocTagsFromDeclarations(this.declarations);\n            }\n\n            return this.tags;"
  },
  {
    "id" : "79b9ab40-b06c-49b9-bc98-ee8e5261d3af",
    "prId" : 12856,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12856#pullrequestreview-12628659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31292fcc-7aaa-40be-94df-6dcc9e6acebf",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Note that the API may return `undefined` here, so returning `null` or `undefined` instead of an empty array shouldn't break expectations.",
        "createdAt" : "2016-12-13T09:00:47Z",
        "updatedAt" : "2016-12-13T09:03:30Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "2875d5bc707661638adfecd661c900f980a745cc",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +1341,1345 @@                                displayParts: typeToDisplayParts(typeChecker, type, getContainerNode(node)),\n                                documentation: type.symbol ? type.symbol.getDocumentationComment() : undefined,\n                                tags: type.symbol ? type.symbol.getJsDocTags() : undefined\n                            };\n                        }"
  },
  {
    "id" : "5b4bc757-5242-47f2-b7b5-b2a5228b367f",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-40138065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eea0f5a5-689e-403a-af98-fffbede559bc",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why do we store the configfile on the options again? should not be possible to get the soruceFile in the program to do the checking without putting it on the getCompilerOptions ?",
        "createdAt" : "2017-05-24T23:38:42Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "f6d2a05d-9773-44a2-b46f-92d45f4c03f8",
        "parentId" : "eea0f5a5-689e-403a-af98-fffbede559bc",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can we pass it through createProgram instead?",
        "createdAt" : "2017-05-25T00:48:51Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1309,1313 @@                // If everything matches but the text of config file is changed,\n                // error locations can change for program options, so update the program\n                if (currentOptions.configFile && newOptions.configFile) {\n                    return currentOptions.configFile.text === newOptions.configFile.text;\n                }"
  },
  {
    "id" : "e69fe11d-9c3f-4f18-bbaf-14cfa627c9a6",
    "prId" : 10593,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "165509f2-bba2-42d1-9a18-5fbc0305f07b",
        "parentId" : null,
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "Seems you are checking `callLike` twice\n",
        "createdAt" : "2016-09-01T19:27:38Z",
        "updatedAt" : "2016-09-01T19:45:16Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      },
      {
        "id" : "0d6055c0-8803-469f-b7ce-c7a2683d4f06",
        "parentId" : "165509f2-bba2-42d1-9a18-5fbc0305f07b",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "First one is checking whether it exists. Last one is returning it from the function.\n",
        "createdAt" : "2016-09-01T19:42:30Z",
        "updatedAt" : "2016-09-01T19:45:16Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3eadbf6c962427a7761252bcbad353a23e3ba543",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +2811,2815 @@        const target = climbPastManyPropertyAccesses(node);\n        const callLike = target.parent;\n        return callLike && isCallLikeExpression(callLike) && getInvokedExpression(callLike) === target && callLike;\n    }\n"
  },
  {
    "id" : "ff4d803f-6744-4fbb-bbe8-43834f6e2bc4",
    "prId" : 10540,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "132733f7-e665-4607-b056-28ab6883bb82",
        "parentId" : null,
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "`kind: SyntaxKind.CallExpression | SyntaxKind.NewExpression`\n",
        "createdAt" : "2016-09-01T18:59:01Z",
        "updatedAt" : "2016-09-01T20:03:19Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      },
      {
        "id" : "d4524804-c9f2-4040-a0c0-186b1e3ceb11",
        "parentId" : "132733f7-e665-4607-b056-28ab6883bb82",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I think this would require us to do a new LKG to get that feature.\n",
        "createdAt" : "2016-09-01T19:54:14Z",
        "updatedAt" : "2016-09-01T20:03:19Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab753652facf8a3a620b609159329cc5772db434",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +2810,2814 @@    }\n\n    function isCallOrNewExpressionTarget(node: Node, kind: SyntaxKind) {\n        const target = climbPastPropertyAccess(node);\n        return target && target.parent && target.parent.kind === kind && (<CallExpression>target.parent).expression === target;"
  },
  {
    "id" : "76f74578-9fd3-4ead-ac8f-541fce206d70",
    "prId" : 10540,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2408eb76-2d15-4a4d-abb6-7db822105d37",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "you should not decent in nested classes or functions, as `this` would have a different meaning.\n",
        "createdAt" : "2016-09-01T22:19:46Z",
        "updatedAt" : "2016-09-01T22:19:46Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab753652facf8a3a620b609159329cc5772db434",
    "line" : 207,
    "diffHunk" : "@@ -1,1 +6539,6543 @@                            const body = (<MethodDeclaration>decl).body;\n                            if (body) {\n                                forEachDescendantOfKind(body, SyntaxKind.ThisKeyword, thisKeyword => {\n                                    if (isNewExpressionTarget(thisKeyword)) {\n                                        result.push(thisKeyword);"
  },
  {
    "id" : "5b94e141-7e97-4470-973d-5c8150f3c992",
    "prId" : 10540,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49330b38-47e6-4eb5-89df-e70bbb428bb0",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i think a better approach here is to call the main routine `getReferencesInNode` with the class node, or the decedent class node, and look for the text \"this\" or \"super\". this way you do not need to have a different method to search by walking trees.\n",
        "createdAt" : "2016-09-01T22:22:18Z",
        "updatedAt" : "2016-09-01T22:22:18Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "72ca612a-db6e-418f-b501-38e71d7cf9e2",
        "parentId" : "49330b38-47e6-4eb5-89df-e70bbb428bb0",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "come grab me tomorrow if you want to talk about this more.\n",
        "createdAt" : "2016-09-01T22:22:38Z",
        "updatedAt" : "2016-09-01T22:22:38Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab753652facf8a3a620b609159329cc5772db434",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +6496,6500 @@\n                /** Adds references when a constructor is used with `new this()` in its own class and `super()` calls in subclasses.  */\n                function findAdditionalConstructorReferences(referenceSymbol: Symbol, referenceLocation: Node): void {\n                    Debug.assert(isClassLike(searchSymbol.valueDeclaration));\n"
  },
  {
    "id" : "d5676aca-db55-405f-8917-e8c291274919",
    "prId" : 10402,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1396b6ca-4783-48c9-b701-0aa9cd3bcf1c",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "this should be optional, otherwise all users of the API have to specify it.\n",
        "createdAt" : "2016-09-13T21:12:06Z",
        "updatedAt" : "2016-09-13T21:12:06Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b72751de91512c193bc59fb674a407c5398020d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1357,1361 @@        InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: boolean;\n        InsertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces?: boolean;\n        InsertSpaceAfterTypeAssertion: boolean;\n        PlaceOpenBraceOnNewLineForFunctions: boolean;\n        PlaceOpenBraceOnNewLineForControlBlocks: boolean;"
  },
  {
    "id" : "b8fa1bbf-9ad1-43b4-8d1c-4ebdc79ce6c9",
    "prId" : 10185,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/10185#pullrequestreview-3232365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de04d680-a3f1-47d4-b759-2950573898a5",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "check the cancellation token for every iteration.\n",
        "createdAt" : "2016-10-07T00:24:11Z",
        "updatedAt" : "2016-10-12T00:35:40Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "7eb9e107-503d-4743-abf8-b7f0db8e3a41",
        "parentId" : "de04d680-a3f1-47d4-b759-2950573898a5",
        "authorId" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "body" : "done\n",
        "createdAt" : "2016-10-07T01:00:44Z",
        "updatedAt" : "2016-10-12T00:35:40Z",
        "lastEditedBy" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b98d00155674ff746143357b226d762bcacc33a",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +1681,1685 @@                };\n\n                const fixes = codefix.getFixes(context);\n                if (fixes) {\n                    allFixes = allFixes.concat(fixes);"
  },
  {
    "id" : "b3daac42-7a2f-4cd2-8923-d21b00afd798",
    "prId" : 10035,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d51a3fc-14ff-491c-b3fb-34426534b8d0",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "can you rename `changesInCompilationSettingsAffectSyntax` to `shouldCreateNewSourceFiles`?\n",
        "createdAt" : "2016-08-01T17:24:53Z",
        "updatedAt" : "2016-08-01T23:50:32Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "f78b9094be5697d2a14b9e2384c0cc1acfceea47",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +3098,3102 @@                 oldSettings.jsx !== newSettings.jsx ||\n                 oldSettings.allowJs !== newSettings.allowJs ||\n                 oldSettings.disableSizeLimit !== oldSettings.disableSizeLimit ||\n                 oldSettings.baseUrl !== newSettings.baseUrl ||\n                 !mapIsEqualTo(oldSettings.paths, newSettings.paths));"
  },
  {
    "id" : "1c1cde54-2d41-473d-b643-f9cd8cedc279",
    "prId" : 9529,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf247718-7eed-4be3-8f4e-169d391714c6",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`public kind`\n",
        "createdAt" : "2016-07-06T20:47:47Z",
        "updatedAt" : "2016-07-11T21:05:11Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "78a1ca7d5009b3d361df7822971bf546827e7718",
    "line" : null,
    "diffHunk" : "@@ -1,1 +423,427 @@    class TokenObject extends TokenOrIdentifierObject {\n        public kind: SyntaxKind;\n        constructor(kind: SyntaxKind, pos: number, end: number) {\n            super(pos, end);\n            this.kind = kind;"
  },
  {
    "id" : "5254b274-cc05-460a-81c5-2bffcd6e0c31",
    "prId" : 9353,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f60cb79-54c8-4d80-97f2-163b109dc150",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "if `options.rootDirs` is specified, we should enumerate other directories mapped to this directory. @vladima can explain how this works on the module resolution side.\n",
        "createdAt" : "2016-07-22T23:38:32Z",
        "updatedAt" : "2016-09-06T19:49:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "c7cb0e0c-914d-46e2-911d-48d0cb04afd6",
        "parentId" : "7f60cb79-54c8-4d80-97f2-163b109dc150",
        "authorId" : "da779ea9-f350-4137-9132-97b9396586db",
        "body" : "Done! See the poorly named `getCompletionEntriesForDirectoryFragmentWithRootDirs()` above\n",
        "createdAt" : "2016-07-28T22:56:28Z",
        "updatedAt" : "2016-09-06T19:49:05Z",
        "lastEditedBy" : "da779ea9-f350-4137-9132-97b9396586db",
        "tags" : [
        ]
      }
    ],
    "commit" : "548e143ee05036af7f253bf88f838d31e701f1b7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3820,3824 @@\n                    // If possible, get folder completion as well\n                    if (host.getDirectories) {\n                        const directories = host.getDirectories(baseDirectory);\n                        for (const directory of directories) {"
  },
  {
    "id" : "90fc9644-5911-48fc-a319-ceb8d76c4b2e",
    "prId" : 9353,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e7c5ca4-0876-4c48-b143-43faadbad4c3",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "How expensive is this to do for each keypress in a project like Angular? Do we need to employ some type of caching mechanism rather than recalculate this each time?\n",
        "createdAt" : "2016-08-18T18:01:07Z",
        "updatedAt" : "2016-09-06T19:49:05Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "904f8dee-ad8a-4875-ad15-255eeccd0dd1",
        "parentId" : "9e7c5ca4-0876-4c48-b143-43faadbad4c3",
        "authorId" : "da779ea9-f350-4137-9132-97b9396586db",
        "body" : "I did some quick measurements to get an idea about whether this is too much IO. I generated a project with 200 node modules and 150 @ types modules and timed the completions for non-relative (e.g. \"some-module-name\") and relative (e.g. \"../node-modules/\") paths. In general, the time for completions was always sub 200 ms. For more reasonably sized directories, the completions are more or less instantaneous. There are rare spikes (up to about 600-700 ms) and I think those are likely due to accessing storage that has fallen out of memory or when the hard drive is in a cold state. Those are pretty rare, however, and after a spike happens you don't see another for a while. For the record, I was timing end-to-end (not just the IO).\n\nCompletions shouldn't be triggered on each keypress, just after trigger characters like \"/\". The caller should handle the filtering of the results until the next trigger character.\n",
        "createdAt" : "2016-08-18T20:02:05Z",
        "updatedAt" : "2016-09-06T19:49:05Z",
        "lastEditedBy" : "da779ea9-f350-4137-9132-97b9396586db",
        "tags" : [
        ]
      }
    ],
    "commit" : "548e143ee05036af7f253bf88f838d31e701f1b7",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +3753,3757 @@             */\n            function getBaseDirectoriesFromRootDirs(rootDirs: string[], basePath: string, scriptPath: string, ignoreCase: boolean): string[] {\n                // Make all paths absolute/normalized if they are not already\n                rootDirs = map(rootDirs, rootDirectory => normalizePath(isRootedDiskPath(rootDirectory) ? rootDirectory : combinePaths(basePath, rootDirectory)));\n"
  },
  {
    "id" : "2a0b5eab-8171-4b3a-b140-dfa52426d968",
    "prId" : 9353,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04500ba7-7b37-431e-8c30-d04415c799d6",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Would `isExternalModuleNameRelative` (in utilities.ts) work in place of this function? \n",
        "createdAt" : "2016-08-25T22:05:45Z",
        "updatedAt" : "2016-09-06T19:49:05Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "af577ad3-0d17-429c-bad5-eb4c48bec927",
        "parentId" : "04500ba7-7b37-431e-8c30-d04415c799d6",
        "authorId" : "da779ea9-f350-4137-9132-97b9396586db",
        "body" : "Mine is different because it requires the `'.'` characters to be followed by a `'/'`. I could redo mine as a regex though.\n",
        "createdAt" : "2016-08-25T23:57:05Z",
        "updatedAt" : "2016-09-06T19:49:05Z",
        "lastEditedBy" : "da779ea9-f350-4137-9132-97b9396586db",
        "tags" : [
        ]
      }
    ],
    "commit" : "548e143ee05036af7f253bf88f838d31e701f1b7",
    "line" : 505,
    "diffHunk" : "@@ -1,1 +4145,4149 @@\n            // Returns true if the path is explicitly relative to the script (i.e. relative to . or ..)\n            function isPathRelativeToScript(path: string) {\n                if (path && path.length >= 2 && path.charCodeAt(0) === CharacterCodes.dot) {\n                    const slashIndex = path.length >= 3 && path.charCodeAt(1) === CharacterCodes.dot ? 2 : 1;"
  },
  {
    "id" : "9ed27eae-0e08-439a-b1b4-fd1065ce74bb",
    "prId" : 9353,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24070acc-ce10-4a2f-a735-dd92b19879ce",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "if the paths come absolute consider using `normalizeSlashes` instead here to avoid the garbage created by `normalizePath`.\n",
        "createdAt" : "2016-08-25T23:48:37Z",
        "updatedAt" : "2016-09-06T19:49:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "548e143ee05036af7f253bf88f838d31e701f1b7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3802,3806 @@                        const foundFiles = createMap<boolean>();\n                        for (let filePath of files) {\n                            filePath = normalizePath(filePath);\n                            if (exclude && comparePaths(filePath, exclude, scriptPath, ignoreCase) === Comparison.EqualTo) {\n                                continue;"
  },
  {
    "id" : "82881e51-0812-4c5d-ab24-c635d9616890",
    "prId" : 9295,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fff2097-b79a-48aa-936c-c5e7dbc3d35e",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Nit: method syntax\n",
        "createdAt" : "2016-06-21T21:41:26Z",
        "updatedAt" : "2016-06-21T21:41:26Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "25da96561a0893de65d5b6dd0d227310a114aaa9",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +3183,3187 @@            let currentCompilerOptions: CompilerOptions;\n            return {\n                getCurrentSourceFile: function (fileName: string) {\n                    const scriptSnapshot = host.getScriptSnapshot(fileName);\n                    if (!scriptSnapshot) {"
  },
  {
    "id" : "ae5e1d58-a23f-4c22-b87a-1c4d2973cf93",
    "prId" : 9236,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b76bc011-9276-4d6a-b7c0-c3bb3ed3f29f",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Why does this structure have a different shape (optionality) to the EditorOptions above in protocol.d.ts? (Not your code, but the existing fields).\n",
        "createdAt" : "2016-06-23T16:08:24Z",
        "updatedAt" : "2016-06-24T20:27:39Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "6188be4b-22e4-4037-9c77-ae77a61f9518",
        "parentId" : "b76bc011-9276-4d6a-b7c0-c3bb3ed3f29f",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "There are default editor options that are applied for TS server so these are all defined as optional in protocol.d.ts in case the user wants to override the defaults. For TS services there are no defaults so the editor options are all required except for the new BaseIndentSizeâ€”optional for hosts that want to support base indentation. These two shapes (including differences in case) are reconciled in editorServices.mergeFormatOptions.  @vladima mentioned he is going to make the case consistent with his changes to ts server.\n",
        "createdAt" : "2016-06-23T18:30:20Z",
        "updatedAt" : "2016-06-24T20:27:39Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c503207be8d54a828cb8209d6620362c87f79ef",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1245,1249 @@\n    export interface EditorOptions {\n        BaseIndentSize?: number;\n        IndentSize: number;\n        TabSize: number;"
  },
  {
    "id" : "b43062f3-dadd-4681-b123-eda02dac760b",
    "prId" : 9010,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1a4470d-3b69-41ea-a705-68994990c67c",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "There must be a function like `isFunctionExpressionLike`\n",
        "createdAt" : "2016-06-07T23:30:51Z",
        "updatedAt" : "2016-06-08T18:07:45Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "39c34e14-bbe9-453c-87ee-201735d591a9",
        "parentId" : "a1a4470d-3b69-41ea-a705-68994990c67c",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "There is `isFunctionLike`, but that includes tons of other things like methods. The problem is that  we seem to need (almost) all combinations of the function-like kinds, so we'd end up with one function for each, each with its own very-long name.\n",
        "createdAt" : "2016-06-08T16:06:11Z",
        "updatedAt" : "2016-06-08T18:07:45Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fe6626efa3d2bf6e2a0060d5560d07161489f0d",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +434,438 @@                    if (declaration.kind === SyntaxKind.VariableDeclaration) {\n                        const init = (declaration as VariableDeclaration).initializer;\n                        if (init && (init.kind === SyntaxKind.FunctionExpression || init.kind === SyntaxKind.ArrowFunction)) {\n                            // Get the cleaned js doc comment text from the initializer\n                            addCommentParts(init, sourceFileOfDeclaration, getCleanedJsDocComment);"
  },
  {
    "id" : "71e82e2f-38b0-414d-ac1d-9bd5d1d1c239",
    "prId" : 8576,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91b7f092-fa20-4cfe-9aeb-9fee7462d955",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why not just `if (type.symbol)`?\n",
        "createdAt" : "2016-05-12T17:21:13Z",
        "updatedAt" : "2016-05-12T17:21:13Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "3501f148-8ccb-4a3c-84da-f3042eb7d860",
        "parentId" : "91b7f092-fa20-4cfe-9aeb-9fee7462d955",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "If we allow anything with `.symbol`, anonymous function tooltips will look like `var lambdaFoo: (Anonymous function)(a: number, b: number) => number` instead of `var lambdaFoo: (a: number, b: number) => number`.\n",
        "createdAt" : "2016-05-12T17:25:47Z",
        "updatedAt" : "2016-05-12T17:26:22Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "52c541e4-6324-4886-8f4a-07a5d857fde3",
        "parentId" : "91b7f092-fa20-4cfe-9aeb-9fee7462d955",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i see.\n",
        "createdAt" : "2016-05-12T17:33:49Z",
        "updatedAt" : "2016-05-12T17:33:49Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "33341342430153eacfc09a507307d433a295b0ec",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4350,4354 @@                                        displayParts.push(spacePart());\n                                    }\n                                    if (!(type.flags & TypeFlags.Anonymous) && type.symbol) {\n                                        addRange(displayParts, symbolToDisplayParts(typeChecker, type.symbol, enclosingDeclaration, /*meaning*/ undefined, SymbolFormatFlags.WriteTypeParametersOrArguments));\n                                    }"
  },
  {
    "id" : "111b60f9-dfbe-40d4-a0a2-2ff7492cd28c",
    "prId" : 8560,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0a6704c-7d0f-48be-a1c6-4b67537b60de",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "path as the first argument.\n",
        "createdAt" : "2016-05-11T21:02:06Z",
        "updatedAt" : "2016-05-11T21:02:06Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e94c761905f51fcf1d6c23e14ad500835483092",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +1810,1814 @@        }\n\n        public getOrCreateEntryByPath(fileName: string, path: Path): HostFileInformation {\n            return this.contains(path)\n                ? this.getEntry(path)"
  },
  {
    "id" : "ce819f7a-8fdf-456b-a1c5-ee95c7fc1f33",
    "prId" : 8456,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "829a78fb-be56-4466-8480-83bebb9a8d35",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Thanks for the comment and example!\n",
        "createdAt" : "2016-05-04T21:25:37Z",
        "updatedAt" : "2016-05-08T22:59:27Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0de410627e1c2acafc0f73e97ec521a2c5befc2b",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2595,2599 @@\n    /** \n     * Returns the containing object literal property declaration given a possible name node, e.g. \"a\" in x = { \"a\": 1 }\n     */\n    function getContainingObjectLiteralElement(node: Node): ObjectLiteralElement {"
  },
  {
    "id" : "78fd42f8-27a9-465d-898f-83ea6470a42c",
    "prId" : 8428,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c31f218d-3ac9-463b-a30b-5ca54b463f8e",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I think we can eventually generalize this logic to other types as well\n",
        "createdAt" : "2016-05-03T06:06:10Z",
        "updatedAt" : "2016-06-08T20:22:20Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "3e1741b5-2ee4-4614-9541-2c96c20b5113",
        "parentId" : "c31f218d-3ac9-463b-a30b-5ca54b463f8e",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i suppose if we do pre-selecting of completion entries based on contextual type.\n",
        "createdAt" : "2016-05-03T19:20:00Z",
        "updatedAt" : "2016-06-08T20:22:20Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5dd5bf797dddb75304eedff9fd9aa61d39d7b1",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +4178,4182 @@            }\n\n            function getStringLiteralCompletionEntriesFromCallExpression(argumentInfo: SignatureHelp.ArgumentListInfo) {\n                const typeChecker = program.getTypeChecker();\n                const candidates: Signature[] = [];"
  },
  {
    "id" : "9a52141d-33bf-4d29-aa05-509aac5e8ee0",
    "prId" : 8428,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52404256-0ba7-4ead-abc0-f7caa4264356",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This seems like a slightly weird sort of dependency. Ideally there would be an API on the type checker like `getPossibleContextualTypes`\n",
        "createdAt" : "2016-05-03T06:14:19Z",
        "updatedAt" : "2016-06-08T20:22:20Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "ba8bd224-79d9-4fe6-8779-efad9c337c3b",
        "parentId" : "52404256-0ba7-4ead-abc0-f7caa4264356",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "this is not contextual type per se. but sure. If there is another use case for such API we can push it into the checker, but this is the only one, i would keep it at the use site. \n",
        "createdAt" : "2016-05-03T18:47:07Z",
        "updatedAt" : "2016-06-08T20:22:20Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5dd5bf797dddb75304eedff9fd9aa61d39d7b1",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +4163,4167 @@                }\n\n                const argumentInfo = SignatureHelp.getContainingArgumentInfo(node, position, sourceFile);\n                if (argumentInfo) {\n                    // Get string literal completions from specialized signatures of the target"
  },
  {
    "id" : "7c044444-9518-425a-a95b-9033361677fe",
    "prId" : 8428,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "562afd10-bb96-46d8-8380-b38ab3ecd34f",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Why you have to check this \"node.parent.argumentExpression === node\"?\n",
        "createdAt" : "2016-05-03T20:23:53Z",
        "updatedAt" : "2016-06-08T20:22:20Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "02b72d7a-4eb7-4234-8fb4-84497ba54c88",
        "parentId" : "562afd10-bb96-46d8-8380-b38ab3ecd34f",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "`\"expression\"[\"index\"]` want to make sure we are on `\"index\"`\n",
        "createdAt" : "2016-05-03T22:08:20Z",
        "updatedAt" : "2016-06-08T20:22:20Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5dd5bf797dddb75304eedff9fd9aa61d39d7b1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4168,4172 @@                    return getStringLiteralCompletionEntriesFromCallExpression(argumentInfo);\n                }\n                else if (isElementAccessExpression(node.parent) && node.parent.argumentExpression === node) {\n                    // Get all names of properties on the expression\n                    return getStringLiteralCompletionEntriesFromElementAccess(node.parent);"
  },
  {
    "id" : "e12cef4b-cfde-4d5d-9dca-db2c4701f8d2",
    "prId" : 8428,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80783f81-b400-4b78-b020-802fc4f8d08e",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Minor: could you add comments from the PR description here. so we know what cases are covered\n",
        "createdAt" : "2016-05-03T20:30:39Z",
        "updatedAt" : "2016-06-08T20:22:20Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "31620d65-e641-4540-9c4f-753735b611bc",
        "parentId" : "80783f81-b400-4b78-b020-802fc4f8d08e",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "sure.\n",
        "createdAt" : "2016-05-03T22:08:35Z",
        "updatedAt" : "2016-06-08T20:22:20Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5dd5bf797dddb75304eedff9fd9aa61d39d7b1",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +4164,4168 @@\n                const argumentInfo = SignatureHelp.getContainingArgumentInfo(node, position, sourceFile);\n                if (argumentInfo) {\n                    // Get string literal completions from specialized signatures of the target\n                    return getStringLiteralCompletionEntriesFromCallExpression(argumentInfo);"
  },
  {
    "id" : "2a0e0bc9-2b21-495e-b16c-846ada4d847a",
    "prId" : 8366,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f14651ad-31aa-4ecc-95e8-6c8145e91d89",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "variableElement?\n",
        "createdAt" : "2016-04-29T15:04:49Z",
        "updatedAt" : "2016-05-02T17:21:09Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "53762094-20a1-4745-833b-d0251fb124a9",
        "parentId" : "f14651ad-31aa-4ecc-95e8-6c8145e91d89",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "ideally a new element \"stringElement\", but will need some handling on the VS side, so can get that done first.\n",
        "createdAt" : "2016-04-29T23:34:22Z",
        "updatedAt" : "2016-05-02T17:21:09Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c507747c89bd01d183b8d82c55fefa1fcbda104",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +6178,6182 @@                        containerName: \"\",\n                        fileName: node.getSourceFile().fileName,\n                        kind: ScriptElementKind.variableElement,\n                        name: type.text,\n                        textSpan: createTextSpanFromBounds(node.getStart(), node.getEnd())"
  },
  {
    "id" : "3ce0f79e-bf85-4c63-b384-faca7da6df3d",
    "prId" : 8366,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a957d0c-70c5-40fb-9d53-9cdfb1f325a2",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "pass sourceFile to `getStart`\n",
        "createdAt" : "2016-04-29T15:05:02Z",
        "updatedAt" : "2016-05-02T17:21:09Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "fd999af8-bf89-49f6-be56-b0897e331da6",
        "parentId" : "0a957d0c-70c5-40fb-9d53-9cdfb1f325a2",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "more or less the same impact, i do not have the source file handy anyways.\n",
        "createdAt" : "2016-04-29T23:36:51Z",
        "updatedAt" : "2016-05-02T17:21:09Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c507747c89bd01d183b8d82c55fefa1fcbda104",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +6180,6184 @@                        kind: ScriptElementKind.variableElement,\n                        name: type.text,\n                        textSpan: createTextSpanFromBounds(node.getStart(), node.getEnd())\n                    },\n                    references: references"
  },
  {
    "id" : "9e34298d-7cd2-4ad5-a1ca-806e6360d6e9",
    "prId" : 8366,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b76da60e-c2bf-4686-9374-57edaf669d63",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "So this won't work within the blank space in a string literal, right?\n",
        "createdAt" : "2016-04-29T15:09:41Z",
        "updatedAt" : "2016-05-02T17:21:09Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "e46f55b3-f6de-4780-b9dd-061f56586ac5",
        "parentId" : "b76da60e-c2bf-4686-9374-57edaf669d63",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "no it should. the literal is one token.\n",
        "createdAt" : "2016-04-29T16:34:53Z",
        "updatedAt" : "2016-05-02T17:21:09Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "a22cdb3a-ba7e-46f2-a75a-e0560aa23303",
        "parentId" : "b76da60e-c2bf-4686-9374-57edaf669d63",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Right, it's not as granular as characters, just tokens\n",
        "createdAt" : "2016-04-29T16:57:15Z",
        "updatedAt" : "2016-05-02T17:21:09Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c507747c89bd01d183b8d82c55fefa1fcbda104",
    "line" : null,
    "diffHunk" : "@@ -1,1 +6189,6193 @@                        cancellationToken.throwIfCancellationRequested();\n\n                        const node = getTouchingWord(sourceFile, position);\n                        if (!node || node.kind !== SyntaxKind.StringLiteral) {\n                            return;"
  },
  {
    "id" : "aca875bf-0969-4cde-9f88-e54457ac2434",
    "prId" : 8366,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f48a344-a7ff-4f5b-8081-632dc306ea12",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "You should just do a pass at the end for all the references you get, instead of doing this logic here and below\n",
        "createdAt" : "2016-05-01T23:17:55Z",
        "updatedAt" : "2016-05-02T17:21:09Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c507747c89bd01d183b8d82c55fefa1fcbda104",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +7754,7758 @@                        if (declarations && declarations.length > 0) {\n                            // Disallow rename for elements that are defined in the standard TypeScript library.\n                            if (forEach(declarations, isDefinedInLibraryFile)) {\n                                return getRenameInfoError(getLocaleSpecificMessage(Diagnostics.You_cannot_rename_elements_that_are_defined_in_the_standard_TypeScript_library));\n                            }"
  },
  {
    "id" : "e93153e2-489a-40b6-ae1a-72ba515ba5f4",
    "prId" : 8210,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61621578-4207-4ae1-aacc-8b92341ae68c",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I thought we were avoiding this pattern because there can often be many elements in the list - though I guess in practice this probably doesn't come up all that often.\n",
        "createdAt" : "2016-04-20T15:14:48Z",
        "updatedAt" : "2016-04-20T15:14:48Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b85f34ba59bafa443a8f97b3fee7c202f1c488c4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +6287,6291 @@                            const propertySymbol = typeChecker.getPropertyOfType(type, propertyName);\n                            if (propertySymbol) {\n                                result.push(...typeChecker.getRootSymbols(propertySymbol));\n                            }\n"
  },
  {
    "id" : "5b52c5e7-17ce-4efa-ae23-d685d152bdc3",
    "prId" : 7945,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "598a6c02-bdea-41cd-bea2-70219eb1b6f4",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Use an explicit return\n",
        "createdAt" : "2016-04-11T21:20:56Z",
        "updatedAt" : "2016-04-13T21:54:38Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c492fc6369f1319003695f8c0d8302fb3bc39f1d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +5647,5651 @@                            typeChecker.getExportSpecifierLocalTargetSymbol(importOrExportSpecifier);\n                    }\n                }\n                return undefined;\n            }"
  },
  {
    "id" : "7a637a25-97fb-40e7-946d-9510983b74a1",
    "prId" : 7945,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "460202ea-341f-490f-89d7-411291c1a706",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Explicit returns\n",
        "createdAt" : "2016-04-11T21:22:03Z",
        "updatedAt" : "2016-04-13T21:54:38Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c492fc6369f1319003695f8c0d8302fb3bc39f1d",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +5668,5672 @@                    const typeOfPattern = typeChecker.getTypeAtLocation(bindingElement.parent);\n                    return typeOfPattern && typeChecker.getPropertyOfType(typeOfPattern, (<Identifier>bindingElement.name).text);\n                }\n                return undefined;\n            }"
  },
  {
    "id" : "33b7d685-46cd-4fe0-9c6c-4adb75e2b107",
    "prId" : 7587,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a74bcdfa-61a1-4591-bed7-db44eada16c9",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I don't understand, why wouldn't you want to complete a curly brace following a `${`?\n",
        "createdAt" : "2016-03-18T22:15:57Z",
        "updatedAt" : "2016-03-28T21:33:37Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "a0eb6503-b4c0-4ca2-aa20-51b2b65caaa9",
        "parentId" : "a74bcdfa-61a1-4591-bed7-db44eada16c9",
        "authorId" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "body" : "We don't support brace completion in an existing brace completion session. This is a VS limitation, and the required additional effort doesn't seem worth it (at the moment).\n",
        "createdAt" : "2016-03-21T22:46:20Z",
        "updatedAt" : "2016-03-28T21:33:37Z",
        "lastEditedBy" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "tags" : [
        ]
      },
      {
        "id" : "6d502a56-35b1-416e-9082-d36715026c7f",
        "parentId" : "a74bcdfa-61a1-4591-bed7-db44eada16c9",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "(as discussed offline)\n",
        "createdAt" : "2016-03-21T22:55:20Z",
        "updatedAt" : "2016-03-28T21:33:37Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7228797878a5da87cc9cc655f9da7d813688a74",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +7337,7341 @@\n            if (isInTemplateString(sourceFile, position)) {\n                return false;\n            }\n"
  },
  {
    "id" : "fe4956b9-666e-48a3-9694-6bddb8b996a6",
    "prId" : 7587,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5b41c77-37fa-40d4-82f4-cb91f4ecb924",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Why not always complete, even in the `var y = 3 < {` case? If it's just a typo, then the user will just backspace immediately, which should delete both the `{` and the `}`.\n",
        "createdAt" : "2016-03-22T17:05:58Z",
        "updatedAt" : "2016-03-28T21:33:37Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "c96443b3-ff41-49f2-baac-9f9cad405c40",
        "parentId" : "a5b41c77-37fa-40d4-82f4-cb91f4ecb924",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "That's a very unpleasant experience for if you're just trying to write `<`. You shouldn't make the user do more work to undo the language service's mistakes.\n",
        "createdAt" : "2016-03-22T17:36:50Z",
        "updatedAt" : "2016-03-28T21:33:37Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "a48c4c4c-1db4-449a-b0b8-4fe8f5e58c79",
        "parentId" : "a5b41c77-37fa-40d4-82f4-cb91f4ecb924",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Discussed with Paul offline. This is for completion of '<' with '>'. I thought it was for completion of '{' with '}'.\n",
        "createdAt" : "2016-03-22T17:39:16Z",
        "updatedAt" : "2016-03-28T21:33:37Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7228797878a5da87cc9cc655f9da7d813688a74",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +7320,7324 @@            //      var x = new foo<| ( with class foo<T>{} )\n            // or \n            //      var y = 3 <|\n            if (openingBrace === CharacterCodes.lessThan) {\n                return false;"
  },
  {
    "id" : "bf4d3aa6-f3fb-4009-b60d-01be8608a414",
    "prId" : 7440,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e0041ff-7de6-4bf2-aa70-02f9a096c321",
        "parentId" : null,
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "Why the version change?\n",
        "createdAt" : "2016-04-14T08:56:19Z",
        "updatedAt" : "2016-04-14T08:56:19Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe9da694b2c21b41247e0e9b685a190285773729",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +14,18 @@namespace ts {\n    /** The version of the language service API */\n    export const servicesVersion = \"0.5\";\n\n    export interface Node {"
  },
  {
    "id" : "c765e0e2-ac6d-4648-b056-6688099efc31",
    "prId" : 7107,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdb862fa-34c0-48ea-b088-8fe5264a8053",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "I think we need to include scriptKind to the key in the bucket\n",
        "createdAt" : "2016-02-18T00:26:36Z",
        "updatedAt" : "2016-02-19T22:21:28Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "5a82fc7e-fd12-40ce-bce0-0619661feab0",
        "parentId" : "cdb862fa-34c0-48ea-b088-8fe5264a8053",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "How so? Isn't the bucket key based on the project compilation settings, whereas ScriptKind would be per file? I assume files still need to have unique paths (i.e. we couldn't have 2 files with the same path but different ScriptKinds).\n",
        "createdAt" : "2016-02-18T18:20:20Z",
        "updatedAt" : "2016-02-19T22:21:28Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "4bee9948-84ce-4f97-bda4-d3ad8a1618a5",
        "parentId" : "cdb862fa-34c0-48ea-b088-8fe5264a8053",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "just for the sake of brainstorming: is it possible / legal scenario for host to start treating some existing file differently, i.e. in one project some file is treated as `.ts` and in another - as `.js`. Previously it was not possible since we derive script kind from extension which is the part of file's unique id which stays the same what project includes the file - its path. Currently from the API perspective this situation is possible...\n",
        "createdAt" : "2016-02-18T18:53:43Z",
        "updatedAt" : "2016-02-19T22:21:28Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "0f6678ae-ae24-49db-bead-d1f9ee247868",
        "parentId" : "cdb862fa-34c0-48ea-b088-8fe5264a8053",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "Question is: do we think if this scenario is valid? if no then we can just an extra check that file with some name  should be queried from the register using the same script kind all the time and move on. If yes then we need a way to distinguish such files.\n",
        "createdAt" : "2016-02-18T19:20:59Z",
        "updatedAt" : "2016-02-19T22:21:28Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "7e606391-0f80-47e8-a591-ebf846b4fa9e",
        "parentId" : "cdb862fa-34c0-48ea-b088-8fe5264a8053",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "I'm having a hard time seeing where this would occur, but I can see it's possible, and imagine this could be really hard to figure out the bug if it did :wink: \n\nHow would we easiest handle this? We could mangle the filename, but that seems ugly. Key the file off of two properties (filename and kind)?\n",
        "createdAt" : "2016-02-18T19:31:41Z",
        "updatedAt" : "2016-02-19T22:21:28Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "3e196e45-cc97-4a04-b92b-a596e366dab8",
        "parentId" : "cdb862fa-34c0-48ea-b088-8fe5264a8053",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "Discussed with Vlad - for the moment we won't support the above scenario. I'll add an assert with an appropriate message to make sure if this does occur it will be apparent what is going on.\n",
        "createdAt" : "2016-02-18T19:41:39Z",
        "updatedAt" : "2016-02-19T22:21:28Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2da73b334054b8c93efcf74bbfd3802086cd03fe",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +2084,2088 @@            scriptKind?: ScriptKind): SourceFile {\n\n            const bucket = getBucketForCompilationSettings(compilationSettings, /*createIfMissing*/ true);\n            const path = toPath(fileName, currentDirectory, getCanonicalFileName);\n            let entry = bucket.get(path);"
  },
  {
    "id" : "308cfb7f-df41-4e89-a5de-a0807beb05a7",
    "prId" : 6952,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2aab7ad-8c20-41bf-a248-84d0e22cc1d5",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "I'm curious if we need this condition at all. It used to be necessary to distinguish when we to GotoDef on use-site of import vs its declaration. If we are saying that we always want to go to the ultimate location I think that condition is unnecessary.\n",
        "createdAt" : "2016-02-08T22:58:21Z",
        "updatedAt" : "2016-02-08T22:58:21Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "ed881886-9257-464c-9731-9a3fb2c362ea",
        "parentId" : "b2aab7ad-8c20-41bf-a248-84d0e22cc1d5",
        "authorId" : "3ae23f38-5f1a-4286-b485-a4c470edce21",
        "body" : "@vladima we only want to go to the ultimate location on named import and not all the time? Otherwise, I think this is not needed.\n\nDo you expect to go to the ultimate location on this cases as well:\n\n``` typescript\nimport a from './a';\nlet test = /*1*/a;\n```\n\n``` typescript\nimport a = require('./a');\nlet test = /*1*/a;\n```\n\nMaybe just add another rule that only on implicit alias(an alias you have to put the same name as the exported one), you go to the ultimate location?\n\nSo for instance:\n\n``` typescript\nimport { a as b } from './a';\nlet c = b; // this will not go to ultimate.\n```\n\n``` typescript\nimport { a } from './a';\nlet c = a; // this will go to ultimate.\n```\n\n``` typescript\nimport a = require('./a');\nlet test = /*1*/a; // this will not go to ultimate.\n```\n\nThen we got more consistency.\n",
        "createdAt" : "2016-02-09T02:11:35Z",
        "updatedAt" : "2016-02-09T02:17:08Z",
        "lastEditedBy" : "3ae23f38-5f1a-4286-b485-a4c470edce21",
        "tags" : [
        ]
      }
    ],
    "commit" : "43d2054eaca403fb2eebd5fe784b925e75f5d7c6",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +4646,4650 @@                //   (2) when the aliased symbol is originating from a named import.\n                //\n                if (node.kind === SyntaxKind.Identifier &&\n                    (node.parent === declaration ||\n                    (declaration.kind === SyntaxKind.ImportSpecifier && declaration.parent && declaration.parent.kind === SyntaxKind.NamedImports))) {"
  },
  {
    "id" : "5213d059-b73e-4167-ad36-15138529e37f",
    "prId" : 6707,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "940f2d7b-696c-4beb-8593-5826c6fc6e4d",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Isn't this too order-dependent? What happens if you add code prior to another usage? For instance, I start out with:\n\n``` ts\nif (Person.blah) {\n    doSomething();\n}\n```\n\nI'd want to also get completion for if I added a use of `Person.blah` before the `if` statement:\n\n```\nPerson.blah/**/\n\nif (Person.blah) {\n    doSomething();\n}\n```\n",
        "createdAt" : "2016-01-29T00:01:51Z",
        "updatedAt" : "2016-01-29T00:05:09Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "09e8acc0-97eb-41fd-87b4-d6079e0d0140",
        "parentId" : "940f2d7b-696c-4beb-8593-5826c6fc6e4d",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "If you have multiple uses, the value in the table becomes `-1` and no filtering occurs\n",
        "createdAt" : "2016-01-29T00:05:57Z",
        "updatedAt" : "2016-01-29T00:05:57Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "32ce63aa-22ad-428f-8125-8d5bba2337ff",
        "parentId" : "940f2d7b-696c-4beb-8593-5826c6fc6e4d",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Ah, okay. I misunderstood.\n\nWhy don't you use an enum that would make this explicit?\n\n``` ts\nconst name = (node as Identifier).text;\nnameTable[name] = hasProperty(nameTable, name) ? NameTableState.Once : NameTableState.Many;\n```\n\nor at the very least, leave a nice big comment explaining what you're doing here and what `-1` means.\n",
        "createdAt" : "2016-01-29T01:55:13Z",
        "updatedAt" : "2016-01-29T01:55:13Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "0054bb64-dcec-463f-a3e1-5eef95101995",
        "parentId" : "940f2d7b-696c-4beb-8593-5826c6fc6e4d",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Because we need the position in the case where it's Once.\n",
        "createdAt" : "2016-01-29T18:08:09Z",
        "updatedAt" : "2016-01-29T18:08:09Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "312682e0-18db-40cd-bac1-9d37409290a6",
        "parentId" : "940f2d7b-696c-4beb-8593-5826c6fc6e4d",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Ah, right. You're not checking the current identifier and asking \"should I actually show this\", you're just grabbing up identifiers. I'm not sure why I missed that.\n",
        "createdAt" : "2016-01-30T08:38:13Z",
        "updatedAt" : "2016-01-30T08:38:13Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1231c9e145ef65cf51d5f582abfb71929892c48a",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +7534,7538 @@            switch (node.kind) {\n                case SyntaxKind.Identifier:\n                    nameTable[(<Identifier>node).text] = nameTable[(<Identifier>node).text] === undefined ? node.pos : -1;\n                    break;\n                case SyntaxKind.StringLiteral:"
  },
  {
    "id" : "775131bf-c915-43e6-93e3-1ed22304645d",
    "prId" : 6202,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "128fb6a4-7b34-4045-9f78-21117b76bf6e",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Not that this should necessarily be a part of this change, but we should separately consider changing `Nonempty` to `NonEmpty`\n",
        "createdAt" : "2015-12-23T06:10:53Z",
        "updatedAt" : "2015-12-23T06:10:53Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "44269c0e-6d95-4ac6-9bfe-bf82bbfed8ae",
        "parentId" : "128fb6a4-7b34-4045-9f78-21117b76bf6e",
        "authorId" : "1c5d8e1e-e1db-4d80-8ca6-745f98c8216f",
        "body" : "Will that be a breaking change?\n",
        "createdAt" : "2015-12-23T06:14:18Z",
        "updatedAt" : "2015-12-23T06:14:18Z",
        "lastEditedBy" : "1c5d8e1e-e1db-4d80-8ca6-745f98c8216f",
        "tags" : [
        ]
      },
      {
        "id" : "4612b8b5-fb10-4f23-82b8-e77996456d01",
        "parentId" : "128fb6a4-7b34-4045-9f78-21117b76bf6e",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Yyyyes :cry: \n\nNever mind I suppose\n",
        "createdAt" : "2015-12-23T08:26:08Z",
        "updatedAt" : "2015-12-23T08:26:19Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e97118e5698a9bd0518d96a67447417fb6a9c758",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1218,1222 @@        InsertSpaceAfterFunctionKeywordForAnonymousFunctions: boolean;\n        InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: boolean;\n        InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: boolean;\n        InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: boolean;\n        PlaceOpenBraceOnNewLineForFunctions: boolean;"
  },
  {
    "id" : "ea6e6d9a-d339-4353-a5fa-3178a1314ed4",
    "prId" : 6140,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8a55aec-6a54-4d4f-950d-406b731b46a7",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "To answer the comment: When you've fooled the language service by injecting a declaration node which is not parented to anything, yet is associated with a symbol returned by `getSymbolAtLocation` - which could conceivably happen if you wrapped the language service and injected declarations for templated components, but have not rewritten the `getSourceFile` implementation to do something other than walk up the tree? TBH, it probably never happens under normal conditions and is likely exceptional - every node should be nested within a source file in a well-behaved program. Maybe it would be more correct to toss in a `Debug.fail` here, despite that not being the old behavior?\n",
        "createdAt" : "2015-12-18T21:42:55Z",
        "updatedAt" : "2015-12-18T21:43:05Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "75678de6d99ecffec583804fd6ce52cc83c46618",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +7338,7342 @@                            for (const current of declarations) {\n                                const sourceFile = current.getSourceFile();\n                                // TODO (drosen): When is there no source file?\n                                if (!sourceFile) {\n                                    continue;"
  },
  {
    "id" : "01e83621-c1cf-411d-983a-e84c017f5f0f",
    "prId" : 6084,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6428d9c6-1b90-4794-8652-4e9696b9091d",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I wonder if it's permissible to repeat the same symbol, but I think it should be fine.\n",
        "createdAt" : "2015-12-16T22:31:30Z",
        "updatedAt" : "2015-12-18T05:29:53Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "1b824cc7-ec5b-4a2a-9499-8430a29a20dc",
        "parentId" : "6428d9c6-1b90-4794-8652-4e9696b9091d",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "How can it be the same symbol though?\n",
        "createdAt" : "2015-12-16T23:14:35Z",
        "updatedAt" : "2015-12-18T05:29:53Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5c632cd5a104935a737b58eb41adb79e57cbc84",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +5973,5977 @@                if (symbol.valueDeclaration && symbol.valueDeclaration.kind === SyntaxKind.Parameter &&\n                    isParameterPropertyDeclaration(<ParameterDeclaration>symbol.valueDeclaration)) {\n                    result = result.concat(typeChecker.getSymbolsOfParameterPropertyDeclaration(<ParameterDeclaration>symbol.valueDeclaration, symbol.name));\n                }\n"
  },
  {
    "id" : "25763ac1-0fb6-424e-9370-7260f590a67b",
    "prId" : 5781,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4021783-310a-44d5-b61c-756f7471484e",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "When can declaration be undefined? Would it suffice to assert instead ? \n",
        "createdAt" : "2015-11-25T20:30:15Z",
        "updatedAt" : "2015-11-30T17:10:22Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "781a6a8b-e8dc-480b-8434-f6166adbc7de",
        "parentId" : "b4021783-310a-44d5-b61c-756f7471484e",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "I agree that it probably should be assert instead. I will update it\n",
        "createdAt" : "2015-11-26T01:05:39Z",
        "updatedAt" : "2015-11-30T17:10:22Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cc7a7904ac932f3d2fce7afc1d2b16b1723527a",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +4249,4253 @@                else {\n                    // Method/function type parameter\n                    let declaration = <Node>getDeclarationOfKind(symbol, SyntaxKind.TypeParameter);\n                    Debug.assert(declaration !== undefined);\n                    declaration = declaration.parent;"
  },
  {
    "id" : "cc9b4639-7f86-4421-99ea-e8ae2ae0bc81",
    "prId" : 5184,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23bb9cc7-605b-4aa6-a5e3-1a32fa0bebde",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Will we always have this level of nesting with certainty?\n",
        "createdAt" : "2015-10-08T22:37:00Z",
        "updatedAt" : "2015-10-13T20:16:53Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "c9b14c22-0d02-432d-aeed-42e38e12f19a",
        "parentId" : "23bb9cc7-605b-4aa6-a5e3-1a32fa0bebde",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "The nesting structure of closing elements relative to their Element parents is fixed, if that's the question\n",
        "createdAt" : "2015-10-08T22:40:15Z",
        "updatedAt" : "2015-10-13T20:16:53Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bbfe56dca0aa814af957bc46763cf87c3f86f48",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +3342,3346 @@\n                    if (contextToken.parent.kind === SyntaxKind.JsxClosingElement || contextToken.parent.kind === SyntaxKind.JsxSelfClosingElement) {\n                        return contextToken.parent.parent && contextToken.parent.parent.kind === SyntaxKind.JsxElement;\n                    }\n                }"
  },
  {
    "id" : "639dfbc2-b6e8-4d0b-a0ef-9760888b10f8",
    "prId" : 5169,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4f994f2-bd24-4935-8fdf-6551ec7e44a2",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Explain why you need to check both\n",
        "createdAt" : "2015-10-08T19:17:32Z",
        "updatedAt" : "2015-10-09T16:06:22Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f19a2f54ed9186d866350d53ed6341d95645c869",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4106,4110 @@                        let allSignatures = useConstructSignatures ? type.getConstructSignatures() : type.getCallSignatures();\n\n                        if (!contains(allSignatures, signature.target) && !contains(allSignatures, signature)) {\n                            // Get the first signature if there is one -- allSignatures may contain\n                            // either the original signature or its target, so check for either"
  },
  {
    "id" : "eb11bc8c-8100-4eb1-b0ad-e35cfb6775a3",
    "prId" : 5065,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19cd7795-fd2b-4381-8ac5-820e9c5074b7",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "since the other parameter is primitive, i would name this \"readRequire\" or \"includeRequireCalls\"\n",
        "createdAt" : "2015-10-02T00:29:10Z",
        "updatedAt" : "2015-10-02T17:19:06Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "d13599f2-49e9-48bf-ac87-db2da9468614",
        "parentId" : "19cd7795-fd2b-4381-8ac5-820e9c5074b7",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "since `define` calls should also be counted then name should be smth like `includeDepencendiesFromRequireOrDefine` which is a bit too long. I'll stick with `detectJavaScriptImports` for now\n",
        "createdAt" : "2015-10-02T04:58:49Z",
        "updatedAt" : "2015-10-02T17:19:06Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "7032ab525995ae8e71065c3f7ad4c5635d3bceb1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2103,2107 @@\n    export function preProcessFile(sourceText: string, readImportFiles = true, detectJavaScriptImports = false): PreProcessedFileInfo {\n        let referencedFiles: FileReference[] = [];\n        let importedFiles: FileReference[] = [];\n        let ambientExternalModules: string[];"
  },
  {
    "id" : "99474813-6719-4583-82e7-005f683e100c",
    "prId" : 5065,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2bc1fca-91e1-4493-926a-758d8ed78c86",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "what about define calls?\n\n``` js\ndefine(\"myMod\", [\"require\", \"exports\", \"mod1\", \"mod2\"], function f(require, exports, mod1, mod2) { ... });\n```\n",
        "createdAt" : "2015-10-02T00:32:33Z",
        "updatedAt" : "2015-10-02T17:19:06Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "5c0abc21-0b8c-45ed-bddf-64bedf128986",
        "parentId" : "d2bc1fca-91e1-4493-926a-758d8ed78c86",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "this is work in progress, will be added in next commit\n",
        "createdAt" : "2015-10-02T04:55:17Z",
        "updatedAt" : "2015-10-02T17:19:06Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "7c21d2cd-0c9c-42c4-b74c-c90a4c79a68e",
        "parentId" : "d2bc1fca-91e1-4493-926a-758d8ed78c86",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "added in c53f81e \n",
        "createdAt" : "2015-10-02T06:21:22Z",
        "updatedAt" : "2015-10-02T17:19:06Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "7032ab525995ae8e71065c3f7ad4c5635d3bceb1",
    "line" : 283,
    "diffHunk" : "@@ -1,1 +2294,2298 @@            return false;\n        }\n\n        function tryConsumeRequireCall(skipCurrentToken: boolean): boolean {\n            let token = skipCurrentToken ? scanner.scan() : scanner.getToken();"
  },
  {
    "id" : "e58d6bdc-d5f4-4bf8-aef2-f130d0a52f14",
    "prId" : 5019,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "495471b9-f726-408f-a90b-8c0b9b033da7",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Would be nice if our linter told us about side effect-free statements!\n",
        "createdAt" : "2015-09-29T19:24:26Z",
        "updatedAt" : "2015-09-29T19:24:26Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "b4b63465-3a3b-44c6-9747-8fc68ae5c3fe",
        "parentId" : "495471b9-f726-408f-a90b-8c0b9b033da7",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`no-unused-expression` - I'll add it.\n",
        "createdAt" : "2015-09-29T19:33:12Z",
        "updatedAt" : "2015-09-29T19:34:52Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "662e98b3-0d1a-44be-9094-f275342a29b1",
        "parentId" : "495471b9-f726-408f-a90b-8c0b9b033da7",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Actually we use this pattern in the checker to short-circuit error reporting. Also, apparently the services sources aren't linted?\n",
        "createdAt" : "2015-09-29T19:47:03Z",
        "updatedAt" : "2015-09-29T19:47:03Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "090b36fc-ff5c-4e06-b1a3-689c2326fe7b",
        "parentId" : "495471b9-f726-408f-a90b-8c0b9b033da7",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "> Actually we use this pattern in the checker to short-circuit error reporting\n\nWhat's an example of this? Just curious\n",
        "createdAt" : "2015-09-29T21:02:58Z",
        "updatedAt" : "2015-09-29T21:02:58Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "86368956-e71f-4efe-95f4-1321ad598d50",
        "parentId" : "495471b9-f726-408f-a90b-8c0b9b033da7",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "``` TypeScript\n// Grammar checking; stop grammar-checking if checkGrammarTypeArguments return true\ncheckGrammarTypeArguments(node, node.typeArguments) || checkGrammarArguments(node, node.arguments);\n```\n",
        "createdAt" : "2015-09-29T21:09:19Z",
        "updatedAt" : "2015-09-29T21:09:19Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "6b2169dd-b418-4a4c-8007-45a3ceceddce",
        "parentId" : "495471b9-f726-408f-a90b-8c0b9b033da7",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "That should be fine -- I want a rule that says every expression statement must contain a function call or assignment operation.\n",
        "createdAt" : "2015-09-29T21:12:58Z",
        "updatedAt" : "2015-09-29T21:12:58Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "974aab1e-a451-4d07-97c0-da7bd6ca03a3",
        "parentId" : "495471b9-f726-408f-a90b-8c0b9b033da7",
        "authorId" : "062f3bee-c17a-4517-ad46-ba1c73ac0962",
        "body" : "@DanielRosenwasser  Yeah I tried that rule and it wasn't usable with some of our patterns. And yeah services is not linted because I didn't turn on linting for any files I didn't clean up yet.\n",
        "createdAt" : "2015-09-29T21:36:35Z",
        "updatedAt" : "2015-09-29T21:36:35Z",
        "lastEditedBy" : "062f3bee-c17a-4517-ad46-ba1c73ac0962",
        "tags" : [
        ]
      }
    ],
    "commit" : "141813ca09f7333665d56c3cccbbf9bccb1616ee",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +3660,3664 @@\n                    case SyntaxKind.AsKeyword:\n                        return containingNodeKind === SyntaxKind.ImportSpecifier ||\n                            containingNodeKind === SyntaxKind.ExportSpecifier ||\n                            containingNodeKind === SyntaxKind.NamespaceImport;"
  },
  {
    "id" : "b45e307b-acb1-4899-8d61-a0305d428c33",
    "prId" : 4978,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4217649c-2bfe-4185-9429-a608753e1d48",
        "parentId" : null,
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "If the `commentOwner` is a `VariableStatement` that contains a function expression, shouldn't we provide parameters too? E.g.\n\n```\nvar foo = function (p0, p1, p2) { };\n```\n",
        "createdAt" : "2015-09-25T22:26:34Z",
        "updatedAt" : "2015-09-25T22:26:34Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      },
      {
        "id" : "6f1fc45d-ed41-481b-973d-245465d5e7b2",
        "parentId" : "4217649c-2bfe-4185-9429-a608753e1d48",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Yes, but I think we'll do that in a separate pull request.\n",
        "createdAt" : "2015-09-25T22:28:25Z",
        "updatedAt" : "2015-09-25T22:28:25Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a458d4b2f4a5c7a19ee12fcf4f13c79c0400999f",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +7060,7064 @@            }\n\n            let parameters = isFunctionLike(commentOwner) ? commentOwner.parameters : emptyArray;\n            let posLineAndChar = sourceFile.getLineAndCharacterOfPosition(position);\n            let lineStart = sourceFile.getLineStarts()[posLineAndChar.line];"
  },
  {
    "id" : "e9e37ad1-12ae-4a02-992a-b87ebbbc590d",
    "prId" : 4962,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8853ec76-f38e-4bcd-b7f0-4d7791fab2be",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "update comment about valid position preceding a function declaration.\n",
        "createdAt" : "2015-09-25T01:01:41Z",
        "updatedAt" : "2015-09-25T21:00:01Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a458d4b2f4a5c7a19ee12fcf4f13c79c0400999f",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +7030,7034 @@\n            // TODO: add support for:\n            // - enums/enum members\n            // - interfaces\n            // - property declarations"
  },
  {
    "id" : "2a097bd5-9c16-4564-8b71-6d21bc257971",
    "prId" : 4962,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1c23607-cb65-498a-af38-63074aa44cfb",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "including 'a' ?\n",
        "createdAt" : "2015-09-25T03:08:01Z",
        "updatedAt" : "2015-09-25T21:00:01Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "26bb794a-d996-4d92-adbf-426aabcf29ae",
        "parentId" : "e1c23607-cb65-498a-af38-63074aa44cfb",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "No, if we hit one of the nested namespace declarations, then the position given is _within_ the span of dotted names. But otherwise, we definitely want to include `a`\n\nCheck out `tests/cases/fourslash/docCommentTemplateNamespacesAndModules01.ts`\n",
        "createdAt" : "2015-09-25T06:32:33Z",
        "updatedAt" : "2015-09-25T21:00:01Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a458d4b2f4a5c7a19ee12fcf4f13c79c0400999f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +7049,7053 @@                        // then we must be somewhere within a dotted namespace name; however we don't\n                        // want to give back a JSDoc template for the 'b' or 'c' in 'namespace a.b.c { }'.\n                        if (commentOwner.parent.kind === SyntaxKind.ModuleDeclaration) {\n                            return undefined;\n                        }"
  },
  {
    "id" : "5cbbac67-820e-48f3-bd8a-d820efeb6a1d",
    "prId" : 4962,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d80155d3-5a4c-447c-980e-a8bb9b59f8e8",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Should we try add type annotation in to the @param ?\n",
        "createdAt" : "2015-09-25T18:25:12Z",
        "updatedAt" : "2015-09-25T21:00:01Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a458d4b2f4a5c7a19ee12fcf4f13c79c0400999f",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +7069,7073 @@            const newLine = host.getNewLine ? host.getNewLine() : \"\\r\\n\";\n\n            let docParams = \"\";\n            for (let i = 0, numParams = parameters.length; i < numParams; i++) {\n                const currentName = parameters[i].name;"
  },
  {
    "id" : "5d673c48-fbaa-4776-9194-f95e7d72f65a",
    "prId" : 4730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bba7dbdd-0caa-4254-9d9d-5d0757c5d333",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "It would be great if you had a helper function like\n\n``` TypeScript\nfunction scanYieldsSequence(scanner: Scanner, seq: (SyntaxKind | ((kind: SyntaxKind) => boolean))[]) {\n    for (let item of seq) {\n        let passes = item instanceof Function ?\n            item(scanner.scan()) :\n            item === scanner.scan()\n        if (!passes) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```\n\nbut it might be overkill\n",
        "createdAt" : "2015-09-10T20:36:24Z",
        "updatedAt" : "2015-09-10T20:36:24Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "b0420574-1bcc-4013-b0d6-375176dc26f5",
        "parentId" : "bba7dbdd-0caa-4254-9d9d-5d0757c5d333",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "yes, and yes :)\n",
        "createdAt" : "2015-09-10T20:37:36Z",
        "updatedAt" : "2015-09-10T20:37:36Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e1739604a81b9f18ee43b96b1801e9cbfda10bb",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +2290,2294 @@                                        if (token === SyntaxKind.StringLiteral) {\n                                            //  export import i = require(\"mod\");\n                                            recordModuleName();\n                                        }\n                                    }"
  },
  {
    "id" : "5196b438-c2de-4fa0-b2f4-bd713bd7e2b1",
    "prId" : 4730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01832f38-5575-410c-a4af-2d503b380725",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why `isKeyword`?\n",
        "createdAt" : "2015-09-10T20:42:11Z",
        "updatedAt" : "2015-09-10T20:42:11Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "aa7fe69b-dd1b-4800-a482-d09b75c84aec",
        "parentId" : "01832f38-5575-410c-a4af-2d503b380725",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "contextual keyword. `export import of = require..`\n",
        "createdAt" : "2015-09-10T20:46:18Z",
        "updatedAt" : "2015-09-10T20:46:18Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e1739604a81b9f18ee43b96b1801e9cbfda10bb",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2280,2284 @@                    else if (token === SyntaxKind.ImportKeyword) {\n                        token = scanner.scan();\n                        if (token === SyntaxKind.Identifier || isKeyword(token)) {\n                            token = scanner.scan();\n                            if (token === SyntaxKind.EqualsToken) {"
  },
  {
    "id" : "06abcae3-214e-4956-b135-50d27d45bfd7",
    "prId" : 4283,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48ba4254-e9c2-411c-b435-d4da4f53e07e",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "These branches are identical, just let each fall through and use a variable `typeTagOrParamTag` of type `JSDocTypeTag | JSDocParamTag`.\n",
        "createdAt" : "2015-08-13T07:52:39Z",
        "updatedAt" : "2015-08-21T20:07:58Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "582b0aa31e2e17ca9634a87e00ab1c7359d5ae99",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2995,2999 @@                                insideJsDocTagExpression = tagWithExpression.typeExpression.pos < position && position < tagWithExpression.typeExpression.end;\n                            }\n                            break;\n                    }\n                }"
  },
  {
    "id" : "7afc907e-c77b-4c59-89cc-180081877580",
    "prId" : 4283,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ebb8fc0-ace9-402b-9fb5-9726e2a8f743",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i think this logic should be in getJsDocCompletionEntries instead.\n",
        "createdAt" : "2015-08-13T18:40:21Z",
        "updatedAt" : "2015-08-21T20:07:58Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "d64556f0-da79-47ea-b9e6-4481e5487c3f",
        "parentId" : "9ebb8fc0-ace9-402b-9fb5-9726e2a8f743",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Why not just get the previous token and see if it's the @ token.  Similar to how we look back to see if we're after a dot token?\n",
        "createdAt" : "2015-08-13T19:49:11Z",
        "updatedAt" : "2015-08-21T20:07:58Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "88452c24-5fc5-4b62-abdb-80d7c5d8195f",
        "parentId" : "9ebb8fc0-ace9-402b-9fb5-9726e2a8f743",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "As the previous token I got was the one in code, not in the comment. Or I can modify the `getChildren` and other related functions, if that is preferred solution\n",
        "createdAt" : "2015-08-13T19:52:56Z",
        "updatedAt" : "2015-08-21T20:07:58Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      },
      {
        "id" : "8ad3513e-d55a-4c1e-8c7e-988896b03bf4",
        "parentId" : "9ebb8fc0-ace9-402b-9fb5-9726e2a8f743",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "That might be preferred, though I'll defer to Cyrus on this one.\n",
        "createdAt" : "2015-08-13T20:56:22Z",
        "updatedAt" : "2015-08-21T20:07:58Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "582b0aa31e2e17ca9634a87e00ab1c7359d5ae99",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +2981,2985 @@                // Completion should work in the brackets\n                let insideJsDocTagExpression = false;\n                let tag = getJsDocTagAtPosition(sourceFile, position);\n                if (tag) {\n                    if (tag.tagName.pos <= position && position <= tag.tagName.end) {"
  },
  {
    "id" : "ccea51a8-8141-453c-b583-f5b629323166",
    "prId" : 4283,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a659bf6-d7d7-4494-8ced-eab1e3962c4b",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I think we want normal intellisense here.\n",
        "createdAt" : "2015-08-13T19:52:15Z",
        "updatedAt" : "2015-08-21T20:07:58Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "cb2faf78-3115-4e7c-95b8-f78a4e028c3b",
        "parentId" : "3a659bf6-d7d7-4494-8ced-eab1e3962c4b",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "Why? It is inside either a normal comment or the plain text part of a JsDoc\n",
        "createdAt" : "2015-08-13T20:01:42Z",
        "updatedAt" : "2015-08-21T20:07:58Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      },
      {
        "id" : "8eb4607b-9ad1-4c01-9255-20859fa615ea",
        "parentId" : "3a659bf6-d7d7-4494-8ced-eab1e3962c4b",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "``` ts\n/**\n  * @type { | } \n  */\n```\n\ncompletion there should show you all global types, e.g. string.\n",
        "createdAt" : "2015-08-13T20:15:41Z",
        "updatedAt" : "2015-08-21T20:07:58Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "1db60a17-4119-4f50-8997-e7bd623a760e",
        "parentId" : "3a659bf6-d7d7-4494-8ced-eab1e3962c4b",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "Right, though that is when `insideJsDocTagExpression` is true. The commented line is when the cursor is out of the braces, e.g.\n\n```\n/**\n * @type { } |\n */\n```\n",
        "createdAt" : "2015-08-13T21:04:33Z",
        "updatedAt" : "2015-08-21T20:07:58Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "582b0aa31e2e17ca9634a87e00ab1c7359d5ae99",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3006,3010 @@                    // Proceed if the current position is in jsDoc tag expression; otherwise it is a normal \n                    // comment or the plain text part of a jsDoc comment, so no completion should be available\n                    log(\"Returning an empty list because completion was inside a regular comment or plain text part of a JsDoc comment.\");\n                    return undefined;\n                }"
  },
  {
    "id" : "bfa7889b-b034-4125-ae1d-b85b5756b46c",
    "prId" : 4283,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3adce230-2833-4318-8c44-399bbf4bf879",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I wonder if you could just calculate it regardless of whether you're in a `.js` file. Check with @mhegazy and @CyrusNajmabadi.\n",
        "createdAt" : "2015-08-18T01:02:50Z",
        "updatedAt" : "2015-08-21T20:07:58Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "4549e28d-1684-4e0d-9cd9-1116188654db",
        "parentId" : "3adce230-2833-4318-8c44-399bbf4bf879",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "What do you mean \"calculate\" it? For now the main difference between js file and ts file is that `node.jsDocComment` is only useful in js files\n",
        "createdAt" : "2015-08-18T01:12:31Z",
        "updatedAt" : "2015-08-21T20:07:58Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      },
      {
        "id" : "35b5b941-187b-437c-ba40-cf710acabcee",
        "parentId" : "3adce230-2833-4318-8c44-399bbf4bf879",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I mean that if you're going to just map over it once, do it here regardless of whether it's in a TypeScript or JavaScript file. It would be easier to read than the current lazy initialization, but the way it's done here is fine too.\n",
        "createdAt" : "2015-08-18T05:40:47Z",
        "updatedAt" : "2015-08-21T20:07:58Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "582b0aa31e2e17ca9634a87e00ab1c7359d5ae99",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +171,175 @@        \"version\"\n    ];\n    let jsDocCompletionEntries: CompletionEntry[];\n\n    function createNode(kind: SyntaxKind, pos: number, end: number, flags: NodeFlags, parent?: Node): NodeObject {"
  },
  {
    "id" : "9d3df8e4-3833-4219-b5ae-7eaac4b1c22d",
    "prId" : 4006,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e87ee716-4f2a-4cb4-91ee-a9787aacab57",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "why only for functions?  What about methods, etc.  What about classes?\n",
        "createdAt" : "2015-08-03T22:34:10Z",
        "updatedAt" : "2015-08-10T19:57:23Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "e68672a9-7fb9-4e89-a276-c4df47d97d2a",
        "parentId" : "e87ee716-4f2a-4cb4-91ee-a9787aacab57",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "Just starting with functions. I'll extend it in a separate PR.\n",
        "createdAt" : "2015-08-03T22:56:37Z",
        "updatedAt" : "2015-08-10T19:57:23Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "425cc2b8-435b-4841-b6c4-dba7d9ae102c",
        "parentId" : "e87ee716-4f2a-4cb4-91ee-a9787aacab57",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "ok.  add a note.\n",
        "createdAt" : "2015-08-05T20:12:25Z",
        "updatedAt" : "2015-08-10T19:57:23Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3f0a2a2e41c594f26e35676bdb1ad7bddc67dc7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +6844,6848 @@            // - constructors\n            // - class decls\n            let containingFunction = <FunctionDeclaration>getAncestor(tokenAtPos, SyntaxKind.FunctionDeclaration);\n\n            if (!containingFunction || containingFunction.getStart() < position) {"
  },
  {
    "id" : "e7cc0c31-59f4-480b-bef9-2f3e357a30e0",
    "prId" : 4006,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b19dc5be-faeb-4f5c-922e-23b61e8890e8",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "do we not do this elsewhere?  can we extract this out as a helper for all features to use?\n",
        "createdAt" : "2015-08-05T20:13:19Z",
        "updatedAt" : "2015-08-10T19:57:23Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "60707a24-a687-4e84-a63b-e8f122951ed0",
        "parentId" : "b19dc5be-faeb-4f5c-922e-23b61e8890e8",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "There is a separate PR out for making the helper (#4133). Once that get's merged I'll just call the helper.\n",
        "createdAt" : "2015-08-05T21:36:23Z",
        "updatedAt" : "2015-08-10T19:57:23Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3f0a2a2e41c594f26e35676bdb1ad7bddc67dc7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +6857,6861 @@\n            // TODO: call a helper method instead once PR #4133 gets merged in.\n            const newLine = host.getNewLine ? host.getNewLine() : \"\\r\\n\";\n\n            let docParams = parameters.reduce((prev, cur, index) =>"
  },
  {
    "id" : "95f4d4f0-6b75-4be7-bb27-1a7843e8c050",
    "prId" : 4006,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "857a48d9-6f6d-4811-8cd1-5312632ba950",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "It would be interesting if this was actually a range so that the user could just start typing over a default region.\n",
        "createdAt" : "2015-08-05T21:35:16Z",
        "updatedAt" : "2015-08-10T19:57:23Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "b75e9131-ea1f-40b1-a262-31b67591763e",
        "parentId" : "857a48d9-6f6d-4811-8cd1-5312632ba950",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Actually it would potentially be interesting if this was a series of ranges that one could tab through.\n",
        "createdAt" : "2015-08-05T21:35:41Z",
        "updatedAt" : "2015-08-10T19:57:23Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "b720e827-7775-42b0-8639-ba7e569bb8cb",
        "parentId" : "857a48d9-6f6d-4811-8cd1-5312632ba950",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "YAGNI. But when you do need it, by all means change it up.\n",
        "createdAt" : "2015-08-05T23:28:40Z",
        "updatedAt" : "2015-08-10T19:57:23Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "51d91957-871a-4f92-9f9a-c1473e521220",
        "parentId" : "857a48d9-6f6d-4811-8cd1-5312632ba950",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "> YAGNI\n\nYAGNI implies I'm trying to cover us for when/if we adopt that model. I'm suggesting that we just adopt that model. Maybe @CyrusNajmabadi can weigh in.\n",
        "createdAt" : "2015-08-06T04:30:40Z",
        "updatedAt" : "2015-08-10T19:57:23Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "1f3e74aa-de21-41ce-9c76-97cc8d1e7733",
        "parentId" : "857a48d9-6f6d-4811-8cd1-5312632ba950",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "I suppose I just don't see how those functionalities are relevant to this PR or feature. \n\nDo you want us to emit something like\n\n``` ts\n/**\n * <+function_description+>\n * @param a <+param_description+>\n * @param b <+param_description+>\n */\n```\n\nand then we can iterate between them by tabbing or some hotkey (eg: C-j)?\n\n(My understanding of the functionality is inspired by the Latex-Suite plugin for vim)\n",
        "createdAt" : "2015-08-06T21:18:14Z",
        "updatedAt" : "2015-08-10T19:57:23Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3f0a2a2e41c594f26e35676bdb1ad7bddc67dc7",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1092,1096 @@        newText: string;\n        /** The position in newText the caret should point to after the insertion. */\n        caretOffset: number;\n    }\n"
  },
  {
    "id" : "50e2c672-dade-472a-ab7a-2e80cc07c99e",
    "prId" : 4006,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cf58059-1a4b-40ba-b8bd-31c008ee9d77",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Is it possible for this comment operation to be triggered in the same keystroke as formatting? If so, is this the sourceFile's text before or after the formatting edits have taken effect? If it is before, then would indentationStr still be correct?\n",
        "createdAt" : "2015-08-06T22:06:55Z",
        "updatedAt" : "2015-08-10T19:57:23Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "7df73047-eea2-4274-8a6e-a4f9b95dc512",
        "parentId" : "0cf58059-1a4b-40ba-b8bd-31c008ee9d77",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "Not that I'm aware of.\n\nI think our handling of doc-comment formatting, while distinct from this PR, could be improved. If the comment has the shape of a JSDoc comment, then there appears to be an idiomatic way to format them.\n",
        "createdAt" : "2015-08-06T22:26:20Z",
        "updatedAt" : "2015-08-10T19:57:23Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3f0a2a2e41c594f26e35676bdb1ad7bddc67dc7",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +6854,6858 @@            let lineStart = sourceFile.getLineStarts()[posLineAndChar.line];\n\n            let indentationStr = sourceFile.text.substr(lineStart, posLineAndChar.character);\n\n            // TODO: call a helper method instead once PR #4133 gets merged in."
  },
  {
    "id" : "3d8ecab0-29b0-407d-9db6-4fe6331f5880",
    "prId" : 3846,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea809019-58d8-4d07-983a-90d65dcfaadf",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "These are testing the same thing. I think you mean `ClassExpression`? But then you can't make a class expression abstract. Please add a test for that.\n",
        "createdAt" : "2015-07-13T22:24:25Z",
        "updatedAt" : "2015-07-13T23:40:05Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "f258c02e-ca84-4db4-a9a7-453251dd5285",
        "parentId" : "ea809019-58d8-4d07-983a-90d65dcfaadf",
        "authorId" : "653c1a3f-9d47-48c5-8f19-f894f1744d89",
        "body" : "Don't think these are the same or am I wrong here? On members of a class the `container.kind`  is the ClassDeclaration, on the abstract keyword of the class the container is actually a source file so that is why I added the `declaration.kind` check.\n\nWill do some test for ClassExpressions. Thanks for the feedback!\n",
        "createdAt" : "2015-07-13T22:28:02Z",
        "updatedAt" : "2015-07-13T23:40:05Z",
        "lastEditedBy" : "653c1a3f-9d47-48c5-8f19-f894f1744d89",
        "tags" : [
        ]
      },
      {
        "id" : "97257b80-91e8-4e7a-a2bc-b714946bd93b",
        "parentId" : "ea809019-58d8-4d07-983a-90d65dcfaadf",
        "authorId" : "653c1a3f-9d47-48c5-8f19-f894f1744d89",
        "body" : "Btw: This is what you meant with `ClassExpression` right?\n\n```\nfunction yolo() {\n    abstract class test {\n        foo: number;\n    }\n}\n```\n\nI get an error that `Modifiers cannot appear here`\n",
        "createdAt" : "2015-07-13T22:30:56Z",
        "updatedAt" : "2015-07-13T23:40:05Z",
        "lastEditedBy" : "653c1a3f-9d47-48c5-8f19-f894f1744d89",
        "tags" : [
        ]
      }
    ],
    "commit" : "2718539588b425fe743bd40adaa7c22527c2eda2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4697,4701 @@                    }\n                    else if (modifier === SyntaxKind.AbstractKeyword) {\n                        if (!(container.kind === SyntaxKind.ClassDeclaration || declaration.kind === SyntaxKind.ClassDeclaration)) {\n                            return undefined;\n                        }"
  },
  {
    "id" : "f1d4b59e-a29d-47c4-a625-664e805306ea",
    "prId" : 3846,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73f5c314-f609-4958-b5f3-946faf1bf47f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "~~How does this work? `declaration` is not an array.~~ Sorry I didn't realize there was an overload.\n",
        "createdAt" : "2015-07-13T22:34:54Z",
        "updatedAt" : "2015-07-13T23:40:05Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "ea0f9b5b-d7f5-4894-b8f5-b49787516be4",
        "parentId" : "73f5c314-f609-4958-b5f3-946faf1bf47f",
        "authorId" : "653c1a3f-9d47-48c5-8f19-f894f1744d89",
        "body" : "Why would it not work? According to MDN concat accepts either a value or an array. [mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)\nI'm fine with changing it though\n",
        "createdAt" : "2015-07-13T22:37:25Z",
        "updatedAt" : "2015-07-13T23:40:05Z",
        "lastEditedBy" : "653c1a3f-9d47-48c5-8f19-f894f1744d89",
        "tags" : [
        ]
      },
      {
        "id" : "a1ad7ed4-8d86-42c4-9bef-a66f509ca945",
        "parentId" : "73f5c314-f609-4958-b5f3-946faf1bf47f",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Sorry I didn't know about the overload. This is fine.\n",
        "createdAt" : "2015-07-13T22:40:41Z",
        "updatedAt" : "2015-07-13T23:40:05Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2718539588b425fe743bd40adaa7c22527c2eda2",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +4715,4719 @@                            // Container is either a class declaration or the declaration is a classDeclaration\n                            if (modifierFlag & NodeFlags.Abstract) {\n                                nodes = (<Node[]>(<ClassDeclaration>declaration).members).concat(declaration);\n                            }\n                            else {"
  },
  {
    "id" : "c2a5ed3b-c919-4653-b17f-6df716001905",
    "prId" : 3797,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac49b932-6acb-4c0d-b680-4944d9c12245",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "We were never even setting scriptSnapshot to undefined?\n",
        "createdAt" : "2015-07-09T18:51:36Z",
        "updatedAt" : "2015-07-09T20:13:57Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "622280cf-3ff9-4359-864b-f4dfa8cd0c81",
        "parentId" : "ac49b932-6acb-4c0d-b680-4944d9c12245",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "Yes\n",
        "createdAt" : "2015-07-09T20:09:49Z",
        "updatedAt" : "2015-07-09T20:13:57Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "e190761d96beaa0aa39e84de010695c63b05e64d",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1884,1888 @@                        }\n\n                        sourceFile.scriptSnapshot = undefined;\n                    }\n"
  },
  {
    "id" : "a7907d8a-00a6-4281-acc9-04f03d10b4ab",
    "prId" : 3727,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47650273-f13c-4e83-b374-7e55a6314825",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "consider moving the check to the top of the function along with other completion blocking checks.\n",
        "createdAt" : "2015-07-06T18:29:23Z",
        "updatedAt" : "2015-07-06T23:40:06Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "15962e0bb114e0c73e7263d2620ce51a801c300d",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +2921,2925 @@                        // There is nothing that precedes the dot, so this likely just a stray character\n                        // or leading into a '...' token. Just bail out instead.\n                        return undefined;\n                    }\n                }"
  },
  {
    "id" : "2d7764e4-db50-451d-ad8b-e584992ac0b5",
    "prId" : 3727,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82644bdb-c9f3-4bf0-87d0-faefa2cba6c6",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "also jsx spread expression should be in this list.. somthing like `<div {.../*here*/`\n",
        "createdAt" : "2015-07-06T18:34:54Z",
        "updatedAt" : "2015-07-06T23:40:06Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "15962e0bb114e0c73e7263d2620ce51a801c300d",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +2914,2918 @@                        isRightOfDot = true;\n                    }\n                    else if (parent.kind === SyntaxKind.QualifiedName) {\n                        node = (<QualifiedName>contextToken.parent).left;\n                        isRightOfDot = true;"
  },
  {
    "id" : "01ce0115-abdd-4134-ae18-7437b1301db4",
    "prId" : 3698,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf9afe10-1e83-4230-b859-cc105732e97c",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I would call this tryGetContextualPropertyNameOrNameInScope. If that's too long, it's because the function is trying to do too many unrelated things.\n",
        "createdAt" : "2015-07-03T00:08:31Z",
        "updatedAt" : "2015-07-03T00:08:31Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "422a405c016787a582d43baf12936346004ea496",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +3008,3012 @@            }\n\n            function tryGetGlobalSymbols(): boolean {\n                let objectLikeContainer = tryGetObjectLikeCompletionContainer(contextToken);\n                if (objectLikeContainer) {"
  },
  {
    "id" : "7d67a8f3-0c77-449d-a5a7-35e313f38478",
    "prId" : 3698,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e80c4b5-879b-4ebb-9e51-3bde57f9051f",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "This should only be true if it's not an assignmentPattern\n",
        "createdAt" : "2015-07-03T00:10:21Z",
        "updatedAt" : "2015-07-03T00:10:21Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "19c84c6c-1ed9-4233-8d44-e934d69fd565",
        "parentId" : "9e80c4b5-879b-4ebb-9e51-3bde57f9051f",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I'd file a different bug for this.\n",
        "createdAt" : "2015-07-03T00:22:54Z",
        "updatedAt" : "2015-07-03T00:22:54Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "422a405c016787a582d43baf12936346004ea496",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +3020,3024 @@                        // We are completing on contextual types, but may also include properties\n                        // other than those within the declared type.\n                        isNewIdentifierLocation = true;\n\n                        typeForObject = typeChecker.getContextualType(<ObjectLiteralExpression>objectLikeContainer);"
  },
  {
    "id" : "e7470f43-88e7-442f-b085-03dfa7920593",
    "prId" : 3698,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0edf91c0-93bd-4434-a475-43f30c9a0dc9",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "For an assignment pattern, you do not get the contextual type. You get the type from the type annotation or the initializer.\n",
        "createdAt" : "2015-07-03T00:22:42Z",
        "updatedAt" : "2015-07-03T00:22:42Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "422a405c016787a582d43baf12936346004ea496",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +3022,3026 @@                        isNewIdentifierLocation = true;\n\n                        typeForObject = typeChecker.getContextualType(<ObjectLiteralExpression>objectLikeContainer);\n                        existingMembers = (<ObjectLiteralExpression>objectLikeContainer).properties;\n                    }"
  },
  {
    "id" : "988c0aa9-b39c-4e6d-be79-8758518a16c2",
    "prId" : 3643,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dd23e9a-ccc9-4380-b8e1-cc4185e839c9",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "note. you need to handle this on the managed side as well.\n",
        "createdAt" : "2015-06-26T17:43:06Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "e902607a-3c8a-4159-a8ba-a7a8ec028c34",
        "parentId" : "5dd23e9a-ccc9-4380-b8e1-cc4185e839c9",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "What you mean be handling in the managed side?\n",
        "createdAt" : "2015-06-26T19:43:32Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "dc076c70-ed44-4df2-8a76-92b71649b833",
        "parentId" : "5dd23e9a-ccc9-4380-b8e1-cc4185e839c9",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Probably best to discuss this in person with someone but I believe the idea is that VS needs to handle styles differently depending on what comes in to the managed side.\n",
        "createdAt" : "2015-06-29T16:38:05Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "f9897496-8647-4f40-8496-4b93b6dce057",
        "parentId" : "5dd23e9a-ccc9-4380-b8e1-cc4185e839c9",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "what do you see in navbar when you do this?\n",
        "createdAt" : "2015-07-01T22:37:20Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "e3c036ba-8d6b-4ec7-a97d-ca8cc439a19a",
        "parentId" : "5dd23e9a-ccc9-4380-b8e1-cc4185e839c9",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : ":cactus: file a bug\n",
        "createdAt" : "2015-07-06T20:47:05Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f16f9d129a4ffa17723930de208f563894a4ddb8",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1431,1435 @@        // var x = class X {}\n        export const localClassElement = \"local class\";\n\n        // interface Y {}\n        export const interfaceElement = \"interface\";"
  },
  {
    "id" : "12b5ecdb-c875-4ec4-bb24-c0b475f6179c",
    "prId" : 3643,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bd79229-410f-4e74-ab84-4e326c3305ec",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Can you not just use `getDeclaredName`?\n",
        "createdAt" : "2015-07-01T22:33:04Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "16da2b6c-71ad-41d2-9e0d-b9838321e115",
        "parentId" : "4bd79229-410f-4e74-ab84-4e326c3305ec",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "You can't use `getDeclaredName`. For example: `\"/u0042\"` will be store on its symbol as \"B\" while if you use `getDeclaredName` it will get the unicode escape sequences\n",
        "createdAt" : "2015-07-02T05:06:24Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "e964314c-2dde-42d7-b33e-ce2e09880980",
        "parentId" : "4bd79229-410f-4e74-ab84-4e326c3305ec",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Perhaps `getDeclaredName` should be amended then.\n",
        "createdAt" : "2015-07-02T05:18:48Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "db321998-87ad-4af4-86b0-2d0efc823203",
        "parentId" : "4bd79229-410f-4e74-ab84-4e326c3305ec",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "I feel the same and I had some debate with myself about that. I also consider moving logic to check the external module name into `getDeclaredName` all together.\n",
        "createdAt" : "2015-07-02T05:28:08Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "dde2beab-0ad0-4cd5-9f3d-e9fd557bc0f6",
        "parentId" : "4bd79229-410f-4e74-ab84-4e326c3305ec",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "As per our discussion, there is another way to fix the case of classExpression and functionExpression which is to change bindAnonymouseDeclaration to bind classExpression or functionExpression to its declared name if it has one. I will experiment with that in a separate PR\n",
        "createdAt" : "2015-07-06T18:48:19Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f16f9d129a4ffa17723930de208f563894a4ddb8",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +2808,2812 @@         * @return undefined if the name is of external module otherwise a name with striped of any quote\n         */\n        function getCompletionEntryDisplayNameForSymbol(symbol: Symbol, target: ScriptTarget, performCharacterChecks: boolean, location: Node): string {\n            let displayName: string = getDeclaredName(program.getTypeChecker(), symbol, location);\n"
  },
  {
    "id" : "af807b7f-c6eb-4930-871c-2ac87de6468b",
    "prId" : 3643,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea7ad25f-61b5-48fe-a75c-3c4d5271ec33",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Why do we have a separate tag for this?\n",
        "createdAt" : "2015-07-06T23:01:59Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "c182c067-0347-43a4-b150-5b19c45232f5",
        "parentId" : "ea7ad25f-61b5-48fe-a75c-3c4d5271ec33",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : " To be consistent with function expression which has kind of \"local function\":cactus:\n",
        "createdAt" : "2015-07-07T00:04:40Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "671feefe-2d56-4bfa-8663-5ac54f759923",
        "parentId" : "ea7ad25f-61b5-48fe-a75c-3c4d5271ec33",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Not sure why we do it for either one then.\n",
        "createdAt" : "2015-07-07T00:05:42Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "2a4b10d7-c13b-4cc8-80dc-40af0499dafd",
        "parentId" : "ea7ad25f-61b5-48fe-a75c-3c4d5271ec33",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i agree. let's take them both out.\n",
        "createdAt" : "2015-07-09T18:33:35Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "f16f9d129a4ffa17723930de208f563894a4ddb8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1430,1434 @@\n        // var x = class X {}\n        export const localClassElement = \"local class\";\n\n        // interface Y {}"
  },
  {
    "id" : "c209ccd5-a4a6-4045-bf4c-8afe457cf848",
    "prId" : 3564,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96623d36-21e6-4ddc-b338-cffc21d04da0",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I don't think you have to use `!!` but I don't mind it\n",
        "createdAt" : "2015-06-22T20:03:59Z",
        "updatedAt" : "2015-06-29T17:39:59Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "005b268b-082a-48a8-bb4f-c1a8c1e9cffb",
        "parentId" : "96623d36-21e6-4ddc-b338-cffc21d04da0",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "It's required by the type system (filter needs `boolean`, `&` is `number`)\n",
        "createdAt" : "2015-06-22T20:25:10Z",
        "updatedAt" : "2015-06-29T17:39:59Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "3402f3556c3ceb12be8506116e15d65e5a761928",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2936,2940 @@                let tagSymbols = typeChecker.getJsxIntrinsicTagNames();\n                if (tryGetGlobalSymbols()) {\n                    symbols = tagSymbols.concat(symbols.filter(s => !!(s.flags & SymbolFlags.Value)));\n                }\n                else {"
  },
  {
    "id" : "4aa1fb8c-7823-4e43-93ec-481a8eed854d",
    "prId" : 3561,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e59f0486-7b4f-4da7-a0d4-82f7dc665ce8",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Is this a shim?\n",
        "createdAt" : "2015-06-29T21:33:58Z",
        "updatedAt" : "2015-07-06T22:31:26Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "23351bbd-f50a-4ac8-8fca-e798a031f202",
        "parentId" : "e59f0486-7b4f-4da7-a0d4-82f7dc665ce8",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "No.  It just represents the API we need from the host for the cancellation tokens it provides.\n",
        "createdAt" : "2015-07-06T22:29:31Z",
        "updatedAt" : "2015-07-06T22:31:26Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "de453021-55fe-4e1e-a4a9-7936dd6558cb",
        "parentId" : "e59f0486-7b4f-4da7-a0d4-82f7dc665ce8",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "We're calling it \"HostCancellationToken\" to distinguish it from CancellationToken.  The latter is what we use internally with all our features.  The former is what we get from the host, and what the latter uses to actually make its determinations.\n\nThey're not hte same object because the former is used purely for knowing if something should cancel.  The latter is actually responsible for doing the checking _and_ throwing the appropriate script side exception (something the host knows nothing about).\n",
        "createdAt" : "2015-07-06T22:30:55Z",
        "updatedAt" : "2015-07-06T22:31:26Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "53bd5ac2-8820-428e-b78e-bdd0c8b21df4",
        "parentId" : "e59f0486-7b4f-4da7-a0d4-82f7dc665ce8",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Got it.\n",
        "createdAt" : "2015-07-06T22:51:43Z",
        "updatedAt" : "2015-07-06T22:51:43Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a26cd21f99771258f257d183bdfc389e780614c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +945,949 @@    }\n\n    export interface HostCancellationToken {\n        isCancellationRequested(): boolean;\n    }"
  },
  {
    "id" : "e9a0b500-7326-4b59-aafa-150a2e7bbac5",
    "prId" : 3558,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9efe5735-70ce-47df-8c36-5dac12f41fc4",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "How long do we foresee this TODO sticking around?\n",
        "createdAt" : "2015-06-18T17:14:59Z",
        "updatedAt" : "2015-06-18T18:00:54Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "8a329b37-9dc1-4281-8ff9-29c50f19f547",
        "parentId" : "9efe5735-70ce-47df-8c36-5dac12f41fc4",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Until i can make the change on the managed side and deprecate this entrypoint :)\n",
        "createdAt" : "2015-06-18T17:41:47Z",
        "updatedAt" : "2015-06-18T18:00:54Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4f65f8bbf0b9d54311af782d989144c47cc2417",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +975,979 @@        getSemanticDiagnostics(fileName: string): Diagnostic[];\n\n        // TODO: Rename this to getProgramDiagnostics to better indicate that these are any\n        // diagnostics present for the program level, and not just 'options' diagnostics.\n        getCompilerOptionsDiagnostics(): Diagnostic[];"
  },
  {
    "id" : "c40aec18-4556-4345-b3d6-7f87f188b17e",
    "prId" : 3556,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dae5307-a89f-4b62-bf0d-91f00d37c658",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "We could set an interval instead and query if the interval has not elapsed since last query.\n",
        "createdAt" : "2015-06-19T00:05:35Z",
        "updatedAt" : "2015-07-06T21:25:21Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "d5a9d861-37e2-477d-9b27-237d45ee91f3",
        "parentId" : "5dae5307-a89f-4b62-bf0d-91f00d37c658",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Will do!\n",
        "createdAt" : "2015-07-06T20:24:37Z",
        "updatedAt" : "2015-07-06T21:25:21Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "370372e043dacde018f0689c1f4b836116e4260d",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +6072,6076 @@            // interval.\n            //\n            // For example, in checker.ts (around 750k) we only have around 600 of these constructs.\n            // That means we're calling back into the host around every 1.2k of the file we process.\n            // Lib.d.ts has similar numbers."
  },
  {
    "id" : "eb69174e-d94e-40b2-bcaf-e352b94940ce",
    "prId" : 3368,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0af30e88-a59d-46c0-bb89-93de3606bb7b",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "this looks repeated, yet different.. is there a way to simplify this whole thing without a host.. if we can ask the host about whether to use casesenseitivity all the time instead of the function.. this would be a breaking API change though.\n",
        "createdAt" : "2015-06-03T21:27:24Z",
        "updatedAt" : "2015-06-03T22:30:25Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef54047a65c963201d972bccec5d5e08d53f6091",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +1871,1875 @@    }\n\n    function createGetCanonicalFileName(useCaseSensitivefileNames: boolean): (fileName: string) => string {\n        return useCaseSensitivefileNames\n            ? ((fileName) => fileName)"
  },
  {
    "id" : "42b975fb-4edb-4abc-976f-b5082dde7cff",
    "prId" : 3367,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d79b4c44-c7eb-4c46-ae72-5614e5f8a1ae",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "What you mean by normalization? stripping quotes in `getDeclaredName`? if so could you mention this in the comment\n",
        "createdAt" : "2015-06-27T01:21:12Z",
        "updatedAt" : "2015-06-29T15:11:31Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "cdc8c3b5fb10ae6cb9fa43045b4717b9b8593ad4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4968,4972 @@            // Get the text to search for.\n            // Note: if this is an external module symbol, the name doesn't include quotes.\n            let declaredName = getDeclaredName(typeChecker, symbol, node);\n\n            // Try to get the smallest valid scope that we can limit our search to;"
  },
  {
    "id" : "97d859b1-6c32-4431-b2b2-fb100766e2bc",
    "prId" : 3296,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01a2da1d-c02e-45b3-9e39-83031b31ad16",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "What is this check for?\n",
        "createdAt" : "2015-05-29T00:42:09Z",
        "updatedAt" : "2015-06-02T22:00:42Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fcd29f843f1948b967678f62bc6a1d539f0f2eb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +6170,6174 @@                    // As we walk through each tag, classify the portion of text from the end of\n                    // the last tag (or the start of the entire doc comment) as 'comment'.  \n                    if (tag.pos !== pos) {\n                        pushCommentRange(pos, tag.pos - pos);\n                    }"
  },
  {
    "id" : "38971910-7d80-40f1-b3b1-c77efc2c6f90",
    "prId" : 3274,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11b812b3-5804-4637-a334-d45dbdf3e2f2",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "not sure what this comment means.\n",
        "createdAt" : "2015-05-27T09:39:58Z",
        "updatedAt" : "2015-06-03T01:04:51Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "bb38d163-efcb-426b-b868-8659e312aa28",
        "parentId" : "11b812b3-5804-4637-a334-d45dbdf3e2f2",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "not sure how to explain this more.. i updated the comment message, the reference here is to getSourceFile method in the host implementation.. see:\n\n``` ts\n getSourceFile: (fileName, target) => fileName === inputFileName ? sourceFile : undefined,\n```\n",
        "createdAt" : "2015-05-27T17:12:42Z",
        "updatedAt" : "2015-06-03T01:04:51Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "6902b050ca9cb94ba494d0900ad48a0780850ef4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1777,1781 @@        // We are not returning a sourceFile for lib file when asked by the program, \n        // so pass --noLib to avoid reporting a file not found error.\n        options.noLib = true;\n\n        // We are not doing a full typecheck, we are not resolving the whole context,"
  },
  {
    "id" : "2be253de-619d-4926-b6ec-660d60f4c52f",
    "prId" : 3183,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92cf32f3-efba-476a-8554-6921fbd86a36",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Are we not feeling confident enough that `\"\"  + blah + \"\"` ends up returning `blah`?\n",
        "createdAt" : "2015-05-15T21:59:19Z",
        "updatedAt" : "2015-05-15T23:37:09Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "2b2fdb15-4234-4d79-a03e-eadbebe889ae",
        "parentId" : "92cf32f3-efba-476a-8554-6921fbd86a36",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "I'd prefer to keep the amount of string concatenations as small as possible\n",
        "createdAt" : "2015-05-15T22:10:38Z",
        "updatedAt" : "2015-05-15T23:37:09Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "dbf75308-d1e2-487c-a8a9-93ff9914edeb",
        "parentId" : "92cf32f3-efba-476a-8554-6921fbd86a36",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "i'm skeptical we need to go to this degree of over optimization.  This really only helps when you're literally at the start or the end of the file.  That's such a narrow case.  And presumes hte engines aren't already smart enough to do the right thing here.\n",
        "createdAt" : "2015-05-15T22:42:43Z",
        "updatedAt" : "2015-05-15T23:37:09Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "19719291-eda3-4fe7-9161-8193fca2ff1f",
        "parentId" : "92cf32f3-efba-476a-8554-6921fbd86a36",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "based on the presentation that  we've seen recently I can reliably say only that I cannot trust engines at all. \n",
        "createdAt" : "2015-05-15T22:47:31Z",
        "updatedAt" : "2015-05-15T23:37:09Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "66a91c33fb8df028c253fde6471509a8e834ad76",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1850,1854 @@                        let changedText = scriptSnapshot.getText(textChangeRange.span.start, textChangeRange.span.start + textChangeRange.newLength);\n                        // combine prefix, changed text and suffix\n                        newText = prefix && suffix \n                            ? prefix + changedText + suffix\n                            : prefix"
  },
  {
    "id" : "18fdba0d-86c0-4dbd-9277-ec4652e41292",
    "prId" : 3183,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41ca650a-6a61-4fc5-8e73-cab9f586ad49",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Cute.  But ideally unnecessary.  I would hope that the engines would optimize concats of zero-length strings to be no-ops with no allocations.\n",
        "createdAt" : "2015-05-15T22:41:45Z",
        "updatedAt" : "2015-05-15T23:37:09Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "66a91c33fb8df028c253fde6471509a8e834ad76",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1844,1848 @@                    if (textChangeRange.newLength === 0) {\n                        // edit was a deletion - just combine prefix and suffix\n                        newText = prefix && suffix ? prefix + suffix : prefix || suffix;\n                    }\n                    else {"
  },
  {
    "id" : "33531e14-7b5e-4d8d-ae6a-34a985aeff5a",
    "prId" : 3183,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "809cc36f-fa72-42e1-af97-54c821f78bf0",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Still odd that it's called twice but I'm fine with this.\n",
        "createdAt" : "2015-05-16T00:06:49Z",
        "updatedAt" : "2015-05-16T00:06:49Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "66a91c33fb8df028c253fde6471509a8e834ad76",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1838,1842 @@                    \n                    // grab the fragment from the end of the span till the end of the original text\n                    let suffix = textSpanEnd(textChangeRange.span) !== sourceFile.text.length\n                        ? sourceFile.text.substr(textSpanEnd(textChangeRange.span))\n                        : \"\";"
  },
  {
    "id" : "c8766d0f-5e43-4351-905c-05616bec00b0",
    "prId" : 3131,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "462d2053-6e19-4c0d-99cf-bfc60fec630d",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`hostProjectVersion` can be `\"\"`, does that matter?\n",
        "createdAt" : "2015-05-12T20:12:40Z",
        "updatedAt" : "2015-05-12T20:12:40Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "2ae2a89e-38b0-4a3d-8d46-9e70bee0e554",
        "parentId" : "462d2053-6e19-4c0d-99cf-bfc60fec630d",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Also, can you just do\n\n``` TypeScript\nlet hostProjectVersion = host.getProjectVersion && host.getProjectVersion();\n```\n\n?\n",
        "createdAt" : "2015-05-12T20:13:33Z",
        "updatedAt" : "2015-05-12T20:13:33Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "664b7bfd-8214-4911-8b56-505b0cd29e5b",
        "parentId" : "462d2053-6e19-4c0d-99cf-bfc60fec630d",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "I can but don't think that squeezing a few lines of code into one line buys us much. Also I'd like to be explicit about what is happening\n",
        "createdAt" : "2015-05-12T20:34:56Z",
        "updatedAt" : "2015-05-12T20:34:56Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "6febc29e-7d6e-4f64-a631-86bcb3bf1b6a",
        "parentId" : "462d2053-6e19-4c0d-99cf-bfc60fec630d",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "> hostProjectVersion can be \"\", does that matter?\n\nno, I think it is safe to assume that valid version should be non-empty string\n",
        "createdAt" : "2015-05-12T20:36:17Z",
        "updatedAt" : "2015-05-12T20:36:17Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "e07c3c30-03d0-4498-a64a-bfd9227f6010",
        "parentId" : "462d2053-6e19-4c0d-99cf-bfc60fec630d",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "> no, I think it is safe to assume that valid version should be non-empty string\n\nIf this is the case, please document it.\n",
        "createdAt" : "2015-05-12T22:01:47Z",
        "updatedAt" : "2015-05-12T22:01:47Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "af342382ededd6e1bafae9a8ca82a15c18885135",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +2398,2402 @@            if (host.getProjectVersion) {\n                let hostProjectVersion = host.getProjectVersion();\n                if (hostProjectVersion) {\n                    if (lastProjectVersion === hostProjectVersion) {\n                        return;"
  },
  {
    "id" : "83d3ee1d-2685-48c6-9e8f-f8fd2e3dd3c6",
    "prId" : 2981,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff2f572f-8a44-48f3-99d0-254fa173ce27",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "unneeded empty lines\n",
        "createdAt" : "2015-05-01T18:01:20Z",
        "updatedAt" : "2015-05-01T18:01:20Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c7600b4f5faac0504415dc1944b174c24f740c1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +198,202 @@            list._children = [];\n            let pos = nodes.pos;\n\n            \n            "
  },
  {
    "id" : "7ccacaac-ae5b-49f8-a091-eb00f7162d78",
    "prId" : 2966,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da1a9a11-552b-47ac-9fed-3a4bfafaa1bb",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "We should review for a common name with other LS teams.\n",
        "createdAt" : "2015-04-30T09:00:26Z",
        "updatedAt" : "2015-05-04T17:02:51Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fc6142def80554c9be15757a9fd29234cbfc778",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1002,1006 @@\n        getDefinitionAtPosition(fileName: string, position: number): DefinitionInfo[];\n        getTypeDefinitionAtPosition(fileName: string, position: number): DefinitionInfo[];\n\n        getReferencesAtPosition(fileName: string, position: number): ReferenceEntry[];"
  },
  {
    "id" : "1878174f-72b1-40fd-9b8c-4243e4c9b794",
    "prId" : 2747,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da3ea39b-d367-49df-86d9-4df753b3a3dc",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "instead, just call normalizeSlashes up here and store the result into fileName.  Then you can use that fileName as written in the below code to keep things simple.\n",
        "createdAt" : "2015-04-13T20:58:42Z",
        "updatedAt" : "2015-04-13T20:58:42Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "5ee57a68-b949-4092-804e-77314cbd85f1",
        "parentId" : "da3ea39b-d367-49df-86d9-4df753b3a3dc",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "that does not work as getCanonicalFileName changes the case. which seems the right thing to do if you are comparing two paths on a case-insensitive system\n",
        "createdAt" : "2015-04-13T22:43:43Z",
        "updatedAt" : "2015-04-13T22:43:43Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "a72a22edbeed96a6c51f73c0d6300140b2d4f412",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +3985,3989 @@            if (results) {\n                let sourceFile = getCanonicalFileName(normalizeSlashes(fileName));\n\n                // Get occurrences only supports reporting occurrences for the file queried.  So \n                // filter down to that list."
  },
  {
    "id" : "65c168f0-4c3d-4fed-bab2-efdddc7e86f9",
    "prId" : 2731,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "187c1ec8-c492-4825-9b74-c8d99f9b8c9b",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I don't feel like this should be necessary.  If this node has a type, we'd want to display it.\n",
        "createdAt" : "2015-04-13T05:44:43Z",
        "updatedAt" : "2015-04-13T05:44:43Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "ada482f0-72b4-4aff-a78f-fcf8298a0085",
        "parentId" : "187c1ec8-c492-4825-9b74-c8d99f9b8c9b",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Put a space after the `if` and before the `{` @GuillaumeSalles.\n\n@CyrusNajmabadi why? There is no type for a label name.\n",
        "createdAt" : "2015-04-13T06:15:08Z",
        "updatedAt" : "2015-04-13T06:15:08Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "400bd2bc-6783-4d56-80b8-fecf021ccf6f",
        "parentId" : "187c1ec8-c492-4825-9b74-c8d99f9b8c9b",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "If there is no type, then \"getTypeAtLocation\" should not return anything.  if \"getTypeAtLocation\" returns something, we should show it.\n",
        "createdAt" : "2015-04-13T07:38:00Z",
        "updatedAt" : "2015-04-13T07:38:00Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "77af807a-d884-4d15-9a54-1b2eb77ab605",
        "parentId" : "187c1ec8-c492-4825-9b74-c8d99f9b8c9b",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Fair enough; @GuillaumeSalles, you should move this check towards the bottom of `getTypeOfNode` in `checker.ts`.\n",
        "createdAt" : "2015-04-13T07:44:13Z",
        "updatedAt" : "2015-04-13T07:44:13Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "d2cf2d1a-5a0f-4c52-9e58-0c5a0964c9b8",
        "parentId" : "187c1ec8-c492-4825-9b74-c8d99f9b8c9b",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "all label checks are in the services layer. Let's keep it this way. the checker functions do not expect calls to labels. so @GuillaumeSalles did the right thing here.\n\nI agree with @CyrusNajmabadi that labels should have symbols, and should be tracked by the checker. This way the services layer does not have to worry about it, and we remove all isLable checks from different LS functions; but that is a different change.\n",
        "createdAt" : "2015-04-13T17:14:48Z",
        "updatedAt" : "2015-04-13T17:14:48Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "7119165bd0313917ce647e46a8e34cebccc09927",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3799,3803 @@                switch (node.kind) {\n                    case SyntaxKind.Identifier:\n                        if(isLabelName(node)){\n                            return undefined;\n                        }"
  },
  {
    "id" : "637994e3-63c4-4caf-8264-478eba3b495c",
    "prId" : 2731,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6308a1d2-218f-4d35-8da7-ab8f2f85660c",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "instead of undefined, we could return a label quick info:\n\n``` ts\nreturn {\n    kind: ScriptElementKind.label,\n    kindModifiers: ScriptElementKindModifier.none,\n    textSpan: createTextSpan(node.getStart(), node.getWidth()),\n    displayParts: textPart((<Identifier>Node).text),\n    documentation: undefined\n};\n```\n",
        "createdAt" : "2015-04-13T17:21:15Z",
        "updatedAt" : "2015-04-13T17:21:15Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "7119165bd0313917ce647e46a8e34cebccc09927",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3800,3804 @@                    case SyntaxKind.Identifier:\n                        if(isLabelName(node)){\n                            return undefined;\n                        }\n                    // Fall through."
  },
  {
    "id" : "36306509-6e58-4753-8bc6-b88149d7262b",
    "prId" : 2682,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07ab77ea-873d-4bff-b178-ff83e02c7a9f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Can you pass `sourceFile` into `getStart()`?\n",
        "createdAt" : "2015-04-09T05:43:53Z",
        "updatedAt" : "2015-04-09T22:11:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc512b284bf5f4104aa2b90a433115502e8eaeea",
    "line" : 279,
    "diffHunk" : "@@ -1,1 +4005,4009 @@\n            function getHighlightSpanForNode(node: Node): HighlightSpan {\n                let start = node.getStart();\n                let end = node.getEnd();\n"
  },
  {
    "id" : "8a3b0f7f-e221-4e81-b6c6-a392dc5a2a9d",
    "prId" : 2682,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66b05988-3ec6-48eb-9368-1826cb3c16b1",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`convertReferencedSymbolsToDocumentHighlights`\n",
        "createdAt" : "2015-04-09T05:45:13Z",
        "updatedAt" : "2015-04-09T22:11:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "81d87133-9d03-4749-b0aa-eba69561dc2b",
        "parentId" : "66b05988-3ec6-48eb-9368-1826cb3c16b1",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Isn't that sort of redundant? :)\n",
        "createdAt" : "2015-04-09T06:18:20Z",
        "updatedAt" : "2015-04-09T22:11:31Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "e69b6e22-5ee3-4bb2-ac6f-0d4d394e4c8d",
        "parentId" : "66b05988-3ec6-48eb-9368-1826cb3c16b1",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Well I think the clear naming would be useful, and making the name obvious brings a lot of utility. ;)\n\nMaybe just `referencedSymbolsToDocumentHighlights` if you want to trim letters off. It doesn't really matter.\n",
        "createdAt" : "2015-04-09T07:24:34Z",
        "updatedAt" : "2015-04-09T22:11:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc512b284bf5f4104aa2b90a433115502e8eaeea",
    "line" : 321,
    "diffHunk" : "@@ -1,1 +4028,4032 @@                return undefined;\n\n                function convertReferencedSymbols(referencedSymbols: ReferencedSymbol[]): DocumentHighlights[] {\n                    if (!referencedSymbols) {\n                        return undefined;"
  },
  {
    "id" : "15a3fb28-3f3c-4b53-928b-797524d78f68",
    "prId" : 2682,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "579047f3-f161-43da-9368-da4482d42ea6",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I could have just gotten the full start and iterated forwards...\n",
        "createdAt" : "2015-04-09T05:55:46Z",
        "updatedAt" : "2015-04-09T22:11:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc512b284bf5f4104aa2b90a433115502e8eaeea",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4570,4574 @@\n                            // Avoid recalculating getStart() by iterating backwards.\n                            for (let j = ifKeyword.getStart() - 1; j >= elseKeyword.end; j--) {\n                                if (!isWhiteSpace(sourceFile.text.charCodeAt(j))) {\n                                    shouldCombindElseAndIf = false;"
  },
  {
    "id" : "9cfbaa07-0581-4ac4-9b99-80fb755f0772",
    "prId" : 2682,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8bd1a0a-dc1b-4fbd-baf7-1f84e1ce2ea2",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "It's actually kind of odd that a HighlightSpan has a TextSpan instead of just being a TextSpan itself.\n",
        "createdAt" : "2015-04-09T21:42:23Z",
        "updatedAt" : "2015-04-09T22:11:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "0af53973-5478-42fd-842d-9521ce405ff9",
        "parentId" : "a8bd1a0a-dc1b-4fbd-baf7-1f84e1ce2ea2",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "That's a good point.  I'm trying to be 1:1 with the Roslyn API here.  They can't make HighlightSpan be a subtype of TextSpan as these are value types in the .net world and there is no value type subtypeing.\n",
        "createdAt" : "2015-04-09T22:12:11Z",
        "updatedAt" : "2015-04-09T22:12:11Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc512b284bf5f4104aa2b90a433115502e8eaeea",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1028,1032 @@\n    export interface HighlightSpan {\n        textSpan: TextSpan;\n        kind: string;\n    }"
  },
  {
    "id" : "fd4b88cc-7310-477e-98bd-0f6e4be7a332",
    "prId" : 2641,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7c87c44-8217-40d6-98dd-75aa5ffc0d88",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "its\n",
        "createdAt" : "2015-04-06T22:22:40Z",
        "updatedAt" : "2015-04-14T21:23:02Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e757c044ef3c3f40f092bba903d95eea0ea46d8",
    "line" : 193,
    "diffHunk" : "@@ -1,1 +2474,2478 @@\n        function cleanupSemanticCache(): void {\n            // TODO: Should we jettison the program (or it's type checker) here?\n        }\n"
  },
  {
    "id" : "4ae12463-374e-42f3-8704-42c7cb66a958",
    "prId" : 2640,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34d80b29-106e-448e-87fd-b807c7cec514",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Compute this once by introducing `compilerHostNewLine` - also, can you declare `compilerHost` and `program` with `let` instead of `var`?\n",
        "createdAt" : "2015-04-06T22:15:01Z",
        "updatedAt" : "2015-04-06T22:15:13Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "32889d24-d41f-4222-b465-4a13289b0005",
        "parentId" : "34d80b29-106e-448e-87fd-b807c7cec514",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "the emitter already does that. it is not called on every call to writeLine()\n",
        "createdAt" : "2015-04-06T22:27:23Z",
        "updatedAt" : "2015-04-06T22:27:23Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "84abfdd0-3a56-41bf-aab6-30414466406c",
        "parentId" : "34d80b29-106e-448e-87fd-b807c7cec514",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I guess that's more or less fine then.\n",
        "createdAt" : "2015-04-06T22:31:10Z",
        "updatedAt" : "2015-04-06T22:31:10Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccb562385dc816893d1ba8fd38b7a200be6733b3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1681,1685 @@            getCanonicalFileName: fileName => fileName,\n            getCurrentDirectory: () => \"\",\n            getNewLine: () => (sys && sys.newLine) || \"\\r\\n\"\n        };\n"
  },
  {
    "id" : "91a1107b-5568-4e77-b4bb-0e30ea51e755",
    "prId" : 2550,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f92b1aa-a260-47c5-a431-47c9c2efa943",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "u do not need the ts\n",
        "createdAt" : "2015-03-30T20:27:53Z",
        "updatedAt" : "2015-03-31T20:55:15Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bdcaa3d43db6a44bed574f93de3d422bb47bf04",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1654,1658 @@        var inputFileName = fileName || \"module.ts\";\n        var sourceFile = createSourceFile(inputFileName, input, options.target);\n\n        // Store syntactic diagnostics\n        if (diagnostics && sourceFile.parseDiagnostics) {"
  },
  {
    "id" : "feb3bc5a-8a49-4486-a014-89c1cf4621ee",
    "prId" : 2550,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d3d090c-8aa0-4aab-bf0b-a93232613da7",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "As per our discussion today, for transpile function:\nsourceMap == true // should be an error\ndeclaration  == true // should be an error\nnoEmitOnError == true // should be an error\nperserveConstEnum == false // should be an error\nout == true // should be an error\n\nNow we need a good name for the flag :)\n",
        "createdAt" : "2015-03-30T22:09:27Z",
        "updatedAt" : "2015-03-31T20:55:15Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "cb6d5d37-cdcc-47b5-86ae-553d187bb4bd",
        "parentId" : "9d3d090c-8aa0-4aab-bf0b-a93232613da7",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "done except for the flag name\n",
        "createdAt" : "2015-03-31T00:06:27Z",
        "updatedAt" : "2015-03-31T20:55:15Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bdcaa3d43db6a44bed574f93de3d422bb47bf04",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1651,1655 @@        options.allowNonTsExtensions = true;\n\n        // Parse\n        var inputFileName = fileName || \"module.ts\";\n        var sourceFile = createSourceFile(inputFileName, input, options.target);"
  },
  {
    "id" : "237fff0a-416a-4475-aef1-89333028964a",
    "prId" : 2475,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8c0b5bb-1e8d-47c1-8421-ef1e0f0caee0",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Consider a `switch`\n",
        "createdAt" : "2015-03-24T08:20:30Z",
        "updatedAt" : "2015-03-24T23:50:14Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "69ff9b3c1348ec330c639de03fca986adf483313",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3392,3396 @@                        displayParts.push(punctuationPart(SyntaxKind.CloseParenToken));\n                        return;\n                }\n            }\n"
  },
  {
    "id" : "1e3ca08f-d48b-4a80-a19e-633a6047fd4d",
    "prId" : 2475,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05a87bc9-5030-4b70-8fef-1a719e900d5e",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Explain that you don't need to perform the validation check because `entryName` is anticipated to be a valid name.\n",
        "createdAt" : "2015-03-24T23:42:49Z",
        "updatedAt" : "2015-03-24T23:50:14Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "69ff9b3c1348ec330c639de03fca986adf483313",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2952,2956 @@                // name against 'entryName' (which is known to be good), not building a new \n                // completion entry.\n                let symbol = forEach(symbols, s => getCompletionEntryDisplayName(s, target, /*performCharacterChecks:*/ false) === entryName ? s : undefined);\n\n                if (symbol) {"
  },
  {
    "id" : "0a83e063-0695-43f8-beee-10dc3f9c1c19",
    "prId" : 2446,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "981f106e-d0b2-462a-9dd6-3719cef05206",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`@deprecated`\n",
        "createdAt" : "2015-03-20T22:10:25Z",
        "updatedAt" : "2015-03-24T21:15:42Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "927e60d592a0672b9754d073095302cec5a1a8b3",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +936,940 @@\n        getDefinitionAtPosition(fileName: string, position: number): DefinitionInfo[];\n        getReferencesAtPosition(fileName: string, position: number): ReferenceEntry[];\n        getOccurrencesAtPosition(fileName: string, position: number): ReferenceEntry[];\n        findReferences(fileName: string, position: number): ReferencedSymbol[];"
  },
  {
    "id" : "7e4a8be3-e48a-408c-af94-6ea46e810c81",
    "prId" : 2446,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91d21de5-0b6d-4ed5-98e7-8bbc8ca9e761",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Explain that the only caller who cares is rename. It doesn't use definitions, and it doesn't mind if multiple definitions are undefined.\n",
        "createdAt" : "2015-03-20T23:15:50Z",
        "updatedAt" : "2015-03-24T21:15:42Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "927e60d592a0672b9754d073095302cec5a1a8b3",
    "line" : 375,
    "diffHunk" : "@@ -1,1 +4537,4541 @@                                // 'FindReferences' will just filter out these results.\n                                result.push({\n                                    definition: undefined,\n                                    references: [{\n                                        fileName: sourceFile.fileName,"
  },
  {
    "id" : "0c5a3ee4-725b-4989-9d1c-a79ed8a5a0f3",
    "prId" : 2446,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a12c3707-f94e-41c1-8014-9f80f8e85df9",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Instead of using the id of relatedSymbol, use its index from searchSymbols, and preallocate all the entries from searchSymbols.\n",
        "createdAt" : "2015-03-20T23:19:58Z",
        "updatedAt" : "2015-03-24T21:15:42Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "927e60d592a0672b9754d073095302cec5a1a8b3",
    "line" : 393,
    "diffHunk" : "@@ -1,1 +4559,4563 @@\n                            if (relatedSymbol) {\n                                var referencedSymbol = getReferencedSymbol(relatedSymbol);\n                                referencedSymbol.references.push(getReferenceEntryFromNode(referenceLocation));\n                            }"
  },
  {
    "id" : "c0b1ecb3-fe6c-48dd-8908-398ea7b2ed50",
    "prId" : 2446,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7a59e7a-32e0-488a-b923-99db3e984ad6",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "shorthand prop\n",
        "createdAt" : "2015-03-20T23:22:25Z",
        "updatedAt" : "2015-03-24T21:15:42Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "927e60d592a0672b9754d073095302cec5a1a8b3",
    "line" : 500,
    "diffHunk" : "@@ -1,1 +4730,4734 @@                        textSpan: createTextSpanFromBounds(node.getStart(), node.getEnd())\n                    },\n                    references: references\n                }];\n"
  },
  {
    "id" : "a7edf26a-be4a-45fb-bfd6-fc1d0c36cfe4",
    "prId" : 2396,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4898a470-3180-4c0b-9b52-34ba5498072e",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "love it :D\n",
        "createdAt" : "2015-03-17T20:12:03Z",
        "updatedAt" : "2015-03-18T19:27:32Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee073e19f08c623e22f51e3bc557d1286d960111",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2598,2602 @@\n                    /// TODO filter meaning based on the current context\n                    let scopeNode = getScopeNode(previousToken, position, sourceFile);\n                    let symbolMeanings = SymbolFlags.Type | SymbolFlags.Value | SymbolFlags.Namespace | SymbolFlags.Alias;\n                    let symbols = typeInfoResolver.getSymbolsInScope(scopeNode, symbolMeanings);"
  },
  {
    "id" : "e6aedc14-fb8e-4348-887c-033ca19b9965",
    "prId" : 2396,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85ae9d36-0363-4dc2-b045-d906b3702e4d",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Debug assert that scope is not undefined\n",
        "createdAt" : "2015-03-18T18:54:44Z",
        "updatedAt" : "2015-03-18T19:27:32Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "04391a65-fd27-4371-84e8-ea680a14af81",
        "parentId" : "85ae9d36-0363-4dc2-b045-d906b3702e4d",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "We actually don't need to since `undefined` is an acceptable value for `getSymbolsInScope` (i.e. there was no given token, so it will default to the file's globals.\n",
        "createdAt" : "2015-03-18T19:25:50Z",
        "updatedAt" : "2015-03-18T19:27:32Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee073e19f08c623e22f51e3bc557d1286d960111",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2628,2632 @@                    scope = scope.parent;\n                }\n                return scope;\n            }\n"
  },
  {
    "id" : "11153ab8-d310-4643-9e75-67af8b0f8cb6",
    "prId" : 2379,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29653f66-da8f-4c41-a515-0d1ffd548f89",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can we just filter instead. this is going to fail anyways. just remove the entries.\n",
        "createdAt" : "2015-03-17T19:34:08Z",
        "updatedAt" : "2015-03-30T20:50:36Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "84809c5a-cf24-4851-92bc-4791667a125d",
        "parentId" : "29653f66-da8f-4c41-a515-0d1ffd548f89",
        "authorId" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "body" : "This won't crash VS, and I rather have this fixed in the script side to prevent we do unnecessary work there.\n",
        "createdAt" : "2015-03-17T22:29:53Z",
        "updatedAt" : "2015-03-30T20:50:36Z",
        "lastEditedBy" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "tags" : [
        ]
      },
      {
        "id" : "3db1956f-075b-4b2d-b4fd-8b8e1bbbd57a",
        "parentId" : "29653f66-da8f-4c41-a515-0d1ffd548f89",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i meant to filter on the script side. you know the caller asked for a specific file, so just filter results that are not there.\n",
        "createdAt" : "2015-03-18T23:54:43Z",
        "updatedAt" : "2015-03-30T20:50:36Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "340fca79-bf8e-4b83-ab2d-6e806a4a832b",
        "parentId" : "29653f66-da8f-4c41-a515-0d1ffd548f89",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I think the idea is that we shouldn't be finding more results anyways.  It represents a bug in our code that we should not be trying to workaround.  Instead, we should track down the actual bug and fix it.\n",
        "createdAt" : "2015-03-19T00:35:33Z",
        "updatedAt" : "2015-03-30T20:50:36Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "359648e74b4b9b0eb7bc808d86fb0c0fa32377d9",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +3659,3663 @@\n        /// References and Occurrences\n        function getOccurrencesAtPositionCore(fileName: string, position: number): ReferenceEntry[] {\n            synchronizeHostData();\n"
  },
  {
    "id" : "c7bac2b5-c808-445f-836e-f33e69017c35",
    "prId" : 2177,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4786d092-f88d-46cb-81b7-301a9cd39e98",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Wouldn't you be more curious as to whether the element access is part of the LHS of an assignment?\n",
        "createdAt" : "2015-03-02T00:45:17Z",
        "updatedAt" : "2015-03-02T22:08:52Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "60dd8bdc-6dfa-46d7-8aba-758a9862895e",
        "parentId" : "4786d092-f88d-46cb-81b7-301a9cd39e98",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "No.  For example, if you have:\n\n```\nfoo(a['propname'])\n```\n\nwe simply want to add 'propname' into the name table any time we see this, so we can effectively do 'Find All Refs' on a property called 'propname'.\n",
        "createdAt" : "2015-03-02T01:54:42Z",
        "updatedAt" : "2015-03-02T22:08:52Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "e452cff5a7125e6045f419a0e2833824db4f736a",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +5780,5784 @@                    if (isDeclarationName(node) ||\n                        node.parent.kind === SyntaxKind.ExternalModuleReference ||\n                        isArgumentOfElementAccessExpression(node)) {\n\n                        nameTable[(<LiteralExpression>node).text] = (<LiteralExpression>node).text;"
  },
  {
    "id" : "e9aff6c2-9cec-4256-998d-d51b7908538f",
    "prId" : 2134,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e452197e-28d1-4f88-97ac-2b382466f08f",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Shouldn't this be `previousToken.kind === SyntaxKind.AsKeyword`?\n",
        "createdAt" : "2015-02-26T05:52:37Z",
        "updatedAt" : "2015-02-26T05:52:42Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "151e1e94-5fd2-4b52-8148-b68fcbb5b85a",
        "parentId" : "e452197e-28d1-4f88-97ac-2b382466f08f",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Also, shouldn't isMemberCompletion be `previousToken.kind !== SyntaxKind.AsKeyword`?\n",
        "createdAt" : "2015-02-26T18:34:24Z",
        "updatedAt" : "2015-02-26T18:34:24Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d781d8b29d529d4000563c9d047f02b9a2ad8a8",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2408,2412 @@                    // try to show exported member for imported module\n                    isMemberCompletion = true;\n                    isNewIdentifierLocation = true;\n                    if (showCompletionsInImportsClause(previousToken)) {\n                        var importDeclaration = <ImportDeclaration>getAncestor(previousToken, SyntaxKind.ImportDeclaration);"
  },
  {
    "id" : "f394ce7c-cee0-42df-936c-bb0a6ac9c270",
    "prId" : 2111,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29025433-ed97-4088-9583-52634939492c",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "What is this used for?\n",
        "createdAt" : "2015-02-23T22:12:36Z",
        "updatedAt" : "2015-02-23T23:41:55Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "2d216b71-357d-4ade-a3fc-a98321f76f0b",
        "parentId" : "29025433-ed97-4088-9583-52634939492c",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "To tell the host if a match is case sensitive or not.  Case sensitive matches of the same kind are considered 'better'.  This is used in VS for sorting items appropriately.\n",
        "createdAt" : "2015-02-23T22:20:50Z",
        "updatedAt" : "2015-02-23T23:41:55Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "f90f8e80615fe301bb7cd0de784f53b86a205243",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +971,975 @@        kindModifiers: string;\n        matchKind: string;\n        isCaseSensitive: boolean;\n        fileName: string;\n        textSpan: TextSpan;"
  },
  {
    "id" : "0ad7850d-b75f-4942-bf48-9f8097900749",
    "prId" : 2111,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abb56eea-1c04-4c95-989c-edb4d3346ce3",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "A source file is a declaration?\n",
        "createdAt" : "2015-02-23T22:13:12Z",
        "updatedAt" : "2015-02-23T23:41:55Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "3549559d-c73c-4b23-b848-aebce85ef072",
        "parentId" : "abb56eea-1c04-4c95-989c-edb4d3346ce3",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I guess it has a name\n",
        "createdAt" : "2015-02-23T22:13:21Z",
        "updatedAt" : "2015-02-23T23:41:55Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "f929ebbe-0498-44b2-bcec-2e5238560455",
        "parentId" : "abb56eea-1c04-4c95-989c-edb4d3346ce3",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Yup.  And we make a symbol for it.\n",
        "createdAt" : "2015-02-23T22:32:58Z",
        "updatedAt" : "2015-02-23T23:41:55Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "f90f8e80615fe301bb7cd0de784f53b86a205243",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +2006,2010 @@                case SyntaxKind.EnumDeclaration:\n                case SyntaxKind.ModuleDeclaration:\n                    return <Declaration>node;\n            }\n        }"
  },
  {
    "id" : "85b06861-245e-4e24-a741-34396ae160a4",
    "prId" : 2097,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13f45f75-5880-45cf-87b8-6c096dc52b58",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Huh. For some reason I expected we'd use it more here; we should totally have getOccurrences support for binops\n",
        "createdAt" : "2015-02-21T09:12:34Z",
        "updatedAt" : "2015-02-21T22:29:20Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "e78ed89a-b91d-4cc7-9471-6588e36bda80",
        "parentId" : "13f45f75-5880-45cf-87b8-6c096dc52b58",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Sure!  That exists in C# and VB today.  Although they get it just by leveraging 'find references'.\n",
        "createdAt" : "2015-02-21T22:29:45Z",
        "updatedAt" : "2015-02-21T22:29:45Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ae0a6fa4394c1d3710bea46620a25f69ad8ae9a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4649,4653 @@                }\n                else if (parent.kind === SyntaxKind.BinaryExpression && (<BinaryExpression>parent).left === node) {\n                    var operator = (<BinaryExpression>parent).operatorToken.kind;\n                    return SyntaxKind.FirstAssignment <= operator && operator <= SyntaxKind.LastAssignment;\n                }"
  },
  {
    "id" : "3611937a-f0e4-436b-9d93-5bcb7c59fb49",
    "prId" : 2026,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f1e508b-d642-46a7-b0d6-08624e2427d4",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "templateStack.length = 0\n",
        "createdAt" : "2015-02-13T19:28:38Z",
        "updatedAt" : "2015-02-13T21:33:16Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "9b9a8cd0-5ec6-4844-9749-ad1a1fc6bf13",
        "parentId" : "3f1e508b-d642-46a7-b0d6-08624e2427d4",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "It's actually faster to do it this way.\n",
        "createdAt" : "2015-02-13T20:12:25Z",
        "updatedAt" : "2015-02-13T21:33:16Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1b90f0e323a93de4e28f2bdcab3b4e15cb0593d",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +5704,5708 @@\n            // Empty out the template stack for reuse.\n            while (templateStack.length > 0) {\n                templateStack.pop();\n            }"
  },
  {
    "id" : "4ecd57f0-ec7a-4b25-8415-b78b54944af5",
    "prId" : 2026,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1a75dde-c8f2-49cf-8125-60f4421a522e",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Explain that rudimentary means 'inexact' and give example of where template classification will be wrong.\n",
        "createdAt" : "2015-02-13T19:29:36Z",
        "updatedAt" : "2015-02-13T21:33:16Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1b90f0e323a93de4e28f2bdcab3b4e15cb0593d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +5660,5664 @@        //     Where on the second line, you will get the 'return' keyword,\n        //     a string literal, and a template end consisting of '} } `'.\n        var templateStack: SyntaxKind[] = [];\n\n        function isAccessibilityModifier(kind: SyntaxKind) {"
  },
  {
    "id" : "c7957ce4-3210-412f-84b2-11723861b6a3",
    "prId" : 2026,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4508193f-0f12-471a-88eb-dc25b6de95b4",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "i don't understand your comment wrapping.\n",
        "createdAt" : "2015-02-13T19:31:18Z",
        "updatedAt" : "2015-02-13T21:33:16Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1b90f0e323a93de4e28f2bdcab3b4e15cb0593d",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +5812,5816 @@                    }\n                    else if (token === SyntaxKind.OpenBraceToken) {\n                        // If we don't have anything on the template stack,\n                        // then we aren't trying to keep track of a previously scanned template head.\n                        if (templateStack.length > 0) {"
  },
  {
    "id" : "4643935f-6898-4524-9d30-6aa64a9486fe",
    "prId" : 2026,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f8853f8-437a-4130-a1dd-6cc509c3d937",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "```\nreturn isTemplate(...)\n    ? ...StringLiteral\n    : ...Identifier\n```\n",
        "createdAt" : "2015-02-13T19:32:42Z",
        "updatedAt" : "2015-02-13T21:33:16Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1b90f0e323a93de4e28f2bdcab3b4e15cb0593d",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +6003,6007 @@                case SyntaxKind.Identifier:\n                default:\n                    if (isTemplateLiteralKind(token)) {\n                        return TokenClass.StringLiteral;\n                    }"
  },
  {
    "id" : "f23ff55f-feee-40c9-baab-68e58a0e80e2",
    "prId" : 1782,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7d572d1-7956-4678-9d16-e5dcb526db17",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can we turn this into a method getNameTable on SouceFileObject class?\n",
        "createdAt" : "2015-01-23T06:17:38Z",
        "updatedAt" : "2015-01-23T23:40:02Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "e031ea6a-80ce-417f-8690-917dd3c71744",
        "parentId" : "e7d572d1-7956-4678-9d16-e5dcb526db17",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "+1\n",
        "createdAt" : "2015-01-23T21:42:41Z",
        "updatedAt" : "2015-01-23T23:40:02Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "1f9d003e-d2dd-495c-afc6-31957a88cdee",
        "parentId" : "e7d572d1-7956-4678-9d16-e5dcb526db17",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "discussed offline: this property will be promoted to method later as a part of general effort to revise API\n",
        "createdAt" : "2015-01-23T23:21:30Z",
        "updatedAt" : "2015-01-23T23:40:02Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "da6070bcf755e1f36cb8b61f8658f0d08a41c7ce",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +3885,3889 @@                        cancellationToken.throwIfCancellationRequested();\n\n                        if (!sourceFile.nameTable) {\n                            initializeNameTable(sourceFile)\n                        }"
  },
  {
    "id" : "84bac538-8bc1-43bc-8884-99e701416c4d",
    "prId" : 1782,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16d4ebef-877c-4b38-9ca6-d7f3737c260a",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Isn't it called visitNodes now? Is there a difference between forEachChild and visitNodes?\n",
        "createdAt" : "2015-01-23T21:41:21Z",
        "updatedAt" : "2015-01-23T23:40:02Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "bd5823c0-c66a-4ec4-bb1e-b8ebf8d00dca",
        "parentId" : "16d4ebef-877c-4b38-9ca6-d7f3737c260a",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "no, `forEachChild` is still an entrypoint to a traversal routine. `visitNodes` and `visitEachNode` are just helpers that were lifted to a higher scope in order to avoid unnecesary allocations\n",
        "createdAt" : "2015-01-23T23:24:31Z",
        "updatedAt" : "2015-01-23T23:40:02Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "da6070bcf755e1f36cb8b61f8658f0d08a41c7ce",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +3814,3818 @@                        break;\n                    default:\n                        forEachChild(node, walk);\n                }\n            } "
  },
  {
    "id" : "6d262d95-09b3-4816-9554-ec3268a8283a",
    "prId" : 1779,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d0f9a0f-c2b6-4bc7-a055-986b8ab375ea",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This seems inappropriate; if we're in a union type, don't we want the union of scopes?\n",
        "createdAt" : "2015-01-23T01:47:00Z",
        "updatedAt" : "2015-01-23T01:47:00Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "daa41fdd-f068-4f0e-809d-ebc422f8225e",
        "parentId" : "6d0f9a0f-c2b6-4bc7-a055-986b8ab375ea",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "I've considered this and decided not to do so - it will make things more complicated and we will not win a lot\n",
        "createdAt" : "2015-01-23T02:01:33Z",
        "updatedAt" : "2015-01-23T02:02:33Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "ae7d4388-ed49-4e6b-83c3-78ae2057242b",
        "parentId" : "6d0f9a0f-c2b6-4bc7-a055-986b8ab375ea",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Alright; seems like a good short term strategy. Something to experiment with down the road.\n",
        "createdAt" : "2015-01-23T06:38:55Z",
        "updatedAt" : "2015-01-23T06:38:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "26618139-0025-4bfb-b8aa-29f53ccea1d0",
        "parentId" : "6d0f9a0f-c2b6-4bc7-a055-986b8ab375ea",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Why is symbol.parent not defined here? Doesn't the checker give union properties a parent?\n",
        "createdAt" : "2015-01-24T02:03:29Z",
        "updatedAt" : "2015-01-24T02:03:29Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "6f6b62c8-4b29-45f7-80c4-0d0a1313aebc",
        "parentId" : "6d0f9a0f-c2b6-4bc7-a055-986b8ab375ea",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "no, it does not\n",
        "createdAt" : "2015-01-24T02:12:31Z",
        "updatedAt" : "2015-01-24T02:12:31Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "21063564-9dba-40dd-b8f8-7fefe8548b4e",
        "parentId" : "6d0f9a0f-c2b6-4bc7-a055-986b8ab375ea",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Why? Maybe it should (for a long term fix).\n",
        "createdAt" : "2015-01-24T02:55:38Z",
        "updatedAt" : "2015-01-24T02:55:38Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "d93c23b2-41fe-49d1-bd26-a640ac148772",
        "parentId" : "6d0f9a0f-c2b6-4bc7-a055-986b8ab375ea",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "I believe because union property consists of multiple components (where every component might have a parent) and it makes no sense to speak about a single parent (unless it will be something new to represent union of parents for all constituents)\n",
        "createdAt" : "2015-01-24T03:46:08Z",
        "updatedAt" : "2015-01-24T03:46:08Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "e89f8819-3fff-49a6-98ed-f6c8762ab24c",
        "parentId" : "6d0f9a0f-c2b6-4bc7-a055-986b8ab375ea",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I thought the parent should just be the union type.\n",
        "createdAt" : "2015-01-25T10:59:00Z",
        "updatedAt" : "2015-01-25T10:59:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "60a17dbd-086a-4f7a-9392-05e48f5cdebf",
        "parentId" : "6d0f9a0f-c2b6-4bc7-a055-986b8ab375ea",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "parent should be symbol and union type does not have associated symbol\n",
        "createdAt" : "2015-01-26T18:27:07Z",
        "updatedAt" : "2015-01-26T18:27:07Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "7cc7e5ed-71fd-4ad2-b9cf-e554b2005b83",
        "parentId" : "6d0f9a0f-c2b6-4bc7-a055-986b8ab375ea",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Ah, you're right, the property I was thinking of was SymbolLinks.unionType\n",
        "createdAt" : "2015-01-26T18:30:46Z",
        "updatedAt" : "2015-01-26T18:30:46Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "0940d3bb3b923615568f5cc56d876b4a6576cf79",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +3905,3909 @@                // if this symbol is visible from its parent container, e.g. exported, then bail out\n                // if symbol correspond to the union property - bail out\n                if (symbol.parent || (symbol.getFlags() & SymbolFlags.UnionProperty)) {\n                    return undefined;\n                }"
  },
  {
    "id" : "e8d1f26f-a104-4efe-a320-193be94a0f17",
    "prId" : 1767,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66948e83-abd8-4800-b43c-bec9b08553b8",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "static as well?\n",
        "createdAt" : "2015-01-22T21:51:48Z",
        "updatedAt" : "2015-02-05T00:40:31Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "dc0fe80c-32f2-4586-92dc-71e776818a1b",
        "parentId" : "66948e83-abd8-4800-b43c-bec9b08553b8",
        "authorId" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "body" : "There is no valid keyword to show after static, so no completion list.\n",
        "createdAt" : "2015-02-03T01:54:15Z",
        "updatedAt" : "2015-02-05T00:40:31Z",
        "lastEditedBy" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "40824ed8a58bede88cc9ab59b5e29ff70d4597a3",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +2483,2487 @@                    // Previous token may have been a keyword that was converted to an identifier.\n                    switch (previousToken.getText()) {\n                        case \"public\":\n                        case \"protected\":\n                        case \"private\":"
  },
  {
    "id" : "1ca82dc3-5dd4-46f9-9e03-120c397353ac",
    "prId" : 1767,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f49967af-599c-47c9-b50e-af498f7c1c56",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This seems like the wrong indentation\n",
        "createdAt" : "2015-02-03T22:51:15Z",
        "updatedAt" : "2015-02-05T00:40:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "6e9a73fb-373a-495a-b4d4-71faca7120eb",
        "parentId" : "f49967af-599c-47c9-b50e-af498f7c1c56",
        "authorId" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "body" : "Now it aligns with the t in token instead of the second (\n",
        "createdAt" : "2015-02-03T22:55:11Z",
        "updatedAt" : "2015-02-05T00:40:31Z",
        "lastEditedBy" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "tags" : [
        ]
      },
      {
        "id" : "3b9599f9-089f-496a-a4b2-9afcbaf2ccc0",
        "parentId" : "f49967af-599c-47c9-b50e-af498f7c1c56",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Just stick to a standard 4 per new block\n",
        "createdAt" : "2015-02-03T23:13:58Z",
        "updatedAt" : "2015-02-05T00:40:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "40824ed8a58bede88cc9ab59b5e29ff70d4597a3",
    "line" : 323,
    "diffHunk" : "@@ -1,1 +5733,5737 @@                         if (scanner.reScanSlashToken() === SyntaxKind.RegularExpressionLiteral) {\n                             token = SyntaxKind.RegularExpressionLiteral;\n                         }\n                    }\n                    else if (lastNonTriviaToken === SyntaxKind.DotToken && isKeyword(token)) {"
  },
  {
    "id" : "d5a9c65a-d661-493e-9528-9a4ae86c41a7",
    "prId" : 1767,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8e987d8-b9e7-41c3-a54d-552daf465d0c",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "What's with these?\n",
        "createdAt" : "2015-02-03T22:53:30Z",
        "updatedAt" : "2015-02-05T00:40:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "965a2f8d-b9b3-400e-8ba0-338b35ec8db1",
        "parentId" : "a8e987d8-b9e7-41c3-a54d-552daf465d0c",
        "authorId" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "body" : "fix allignement to be the same as the rest of the function\n",
        "createdAt" : "2015-02-03T22:57:41Z",
        "updatedAt" : "2015-02-05T00:40:31Z",
        "lastEditedBy" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "tags" : [
        ]
      },
      {
        "id" : "0bc634dd-81a9-48d3-a919-c56d56447031",
        "parentId" : "a8e987d8-b9e7-41c3-a54d-552daf465d0c",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Also stick with 4 per block here as well.\n",
        "createdAt" : "2015-02-03T23:14:40Z",
        "updatedAt" : "2015-02-05T00:40:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "40824ed8a58bede88cc9ab59b5e29ff70d4597a3",
    "line" : 327,
    "diffHunk" : "@@ -1,1 +5736,5740 @@                    }\n                    else if (lastNonTriviaToken === SyntaxKind.DotToken && isKeyword(token)) {\n                             token = SyntaxKind.Identifier;\n                    }\n                    else if (isKeyword(lastNonTriviaToken) && isKeyword(token) && !canFollow(lastNonTriviaToken, token)) {"
  },
  {
    "id" : "5e08108b-edc9-4e4f-9ac2-acc636ea107f",
    "prId" : 1767,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5d8a453-f5ea-46ce-846d-696b6a66ebc6",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "set it to true for preceding if block also.\n",
        "createdAt" : "2015-02-04T22:23:22Z",
        "updatedAt" : "2015-02-05T00:40:31Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "40824ed8a58bede88cc9ab59b5e29ff70d4597a3",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +2388,2392 @@                    // Get scope members\n                    isMemberCompletion = false;\n                    isNewIdentifierLocation = isNewIdentifierDefinitionLocation(previousToken);\n\n                    /// TODO filter meaning based on the current context"
  },
  {
    "id" : "b5bef693-4773-4cb4-b0c4-302e5789dbe7",
    "prId" : 1767,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93b19bdf-e431-4e80-b0a4-74fa593c7ad4",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Add NewExpression\n\n``` ts\nnew C(a, |\n```\n",
        "createdAt" : "2015-02-04T22:28:52Z",
        "updatedAt" : "2015-02-05T00:40:31Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "40824ed8a58bede88cc9ab59b5e29ff70d4597a3",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +2440,2444 @@                    switch (previousToken.kind) {\n                        case SyntaxKind.CommaToken:\n                            return containingNodeKind === SyntaxKind.CallExpression                         // func( a, |\n                                || containingNodeKind === SyntaxKind.Constructor                            // constructor( a, |   public, protected, private keywords are allowed here, so show completion\n                                || containingNodeKind === SyntaxKind.NewExpression                          // new C(a, |"
  },
  {
    "id" : "0398c616-94cb-4766-975f-056337fa9bfe",
    "prId" : 1767,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f5d22ea-d1d0-4881-ba6f-3848dec75c2a",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Put a note that we don't currently show completion here, but want to\n",
        "createdAt" : "2015-02-04T22:33:05Z",
        "updatedAt" : "2015-02-05T00:40:31Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "40824ed8a58bede88cc9ab59b5e29ff70d4597a3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2457,2461 @@\n                        case SyntaxKind.ModuleKeyword:                               // module | \n                            return true;\n\n                        case SyntaxKind.DotToken:"
  },
  {
    "id" : "53d0aee9-8021-46e8-91b3-02b74702c936",
    "prId" : 1767,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdfc6786-6a6f-49dc-a9cc-8c9bbe02303e",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "This could also be a template span:\n\n``` ts\n`${a |\n```\n",
        "createdAt" : "2015-02-04T22:34:08Z",
        "updatedAt" : "2015-02-05T00:40:31Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "40824ed8a58bede88cc9ab59b5e29ff70d4597a3",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +2462,2466 @@                            return containingNodeKind === SyntaxKind.ModuleDeclaration; // module A.|\n\n                        case SyntaxKind.OpenBraceToken:\n                            return containingNodeKind === SyntaxKind.ClassDeclaration;  // class A{ |\n"
  },
  {
    "id" : "a6e7b018-2fb7-41ae-a701-6c4508f999ae",
    "prId" : 1767,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d8690c0-6d01-4a50-9cbd-fee7e5773343",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Add let, const, yield, etc\n",
        "createdAt" : "2015-02-04T22:47:05Z",
        "updatedAt" : "2015-02-05T00:40:31Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "40824ed8a58bede88cc9ab59b5e29ff70d4597a3",
    "line" : 249,
    "diffHunk" : "@@ -1,1 +2602,2606 @@                        case SyntaxKind.PublicKeyword:\n                        case SyntaxKind.PrivateKeyword:\n                        case SyntaxKind.ProtectedKeyword:\n                            return containingNodeKind === SyntaxKind.Parameter;\n"
  },
  {
    "id" : "8d2d1995-11ba-4925-8f6b-a894a0a7fdc4",
    "prId" : 1568,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f2a38a9-bdad-4d68-b461-3369cd277a76",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Super anticlimactic for this review, but could we rename this to `enableIncrementalParsing`?\n\nI think it's only referenced in `tests/cases/unittests/incrementalParser.ts` and `src/harness/fourslash.ts`.\n",
        "createdAt" : "2014-12-27T13:29:43Z",
        "updatedAt" : "2014-12-27T13:32:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "a598efc0-2df0-4be5-b597-952c221fd01d",
        "parentId" : "7f2a38a9-bdad-4d68-b461-3369cd277a76",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Also, there's a comment on line 1575:\n\n```\n// Once incremental parsing is ready, then just call into this function.\n```\n\nSo just remove that.\n",
        "createdAt" : "2014-12-27T13:33:04Z",
        "updatedAt" : "2014-12-27T13:33:04Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "f979dc83-183e-423f-8462-326b65918bed",
        "parentId" : "7f2a38a9-bdad-4d68-b461-3369cd277a76",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I thought about that, but I prefer this.  You are now choosing to opt out of incremental parsing by saying 'yes/true' I would like to disable incremental parsing.\n\n```\n-- Cyrus\n```\n\n---\n\nFrom: Daniel Rosenwassermailto:notifications@github.com\nSent: Ã½12/Ã½27/Ã½2014 8:29 AM\nTo: Microsoft/TypeScriptmailto:TypeScript@noreply.github.com\nCc: Cyrus Najmabadimailto:cyrusn@microsoft.com\nSubject: Re: [TypeScript] Enable incremental parsing by default. (#1568)\n\nIn src/services/services.tshttps://github.com/Microsoft/TypeScript/pull/1568#discussion-diff-22292557:\n\n> @@ -1548,7 +1548,7 @@ module ts {\n>          return sourceFile;\n>      }\n> -    export var disableIncrementalParsing = true;\n> -    export var disableIncrementalParsing = false;\n\nSuper anticlimactic for this review, but could we rename this to enableIncrementalParsing?\n\nâ€”\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/TypeScript/pull/1568/files#r22292557.\n",
        "createdAt" : "2014-12-27T19:46:56Z",
        "updatedAt" : "2014-12-27T19:46:56Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "52e15e7bee6aa6d2db755c62e172ce350da74806",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1549,1553 @@    }\n\n    export var disableIncrementalParsing = false;\n\n    export function updateLanguageServiceSourceFile(sourceFile: SourceFile, scriptSnapshot: IScriptSnapshot, version: string, isOpen: boolean, textChangeRange: TextChangeRange): SourceFile {"
  },
  {
    "id" : "a80603d0-52b8-4d23-8dc7-12565ee808e8",
    "prId" : 1535,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "191b82b1-d359-4db4-9564-d8e82a6db76c",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Is the cost of creating a scanner negligible? I feel like it's pretty uncommon to need this, and you could make it load lazily.\n",
        "createdAt" : "2014-12-29T18:10:05Z",
        "updatedAt" : "2014-12-30T00:23:27Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "8813d81e-0b2f-472e-8fb8-33eaaaaccc21",
        "parentId" : "191b82b1-d359-4db4-9564-d8e82a6db76c",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I'm not a fan of lazy loading.  I only really want to do it if there is any actual cost that you need to avoid.  A scanner is pretty much no-cost to create, so i'm fine with just making these up front.\n",
        "createdAt" : "2014-12-30T00:09:25Z",
        "updatedAt" : "2014-12-30T00:23:27Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "12cb284e5da01fc5fcb483a8fae1ed4487d319da",
    "line" : 162,
    "diffHunk" : "@@ -1,1 +4864,4868 @@            // Make a scanner we can get trivia from.\n            var triviaScanner = createScanner(ScriptTarget.Latest, /*skipTrivia:*/ false, sourceFile.text);\n            var mergeConflictScanner = createScanner(ScriptTarget.Latest, /*skipTrivia:*/ false, sourceFile.text);\n\n            var result: ClassifiedSpan[] = [];"
  },
  {
    "id" : "f816df1c-9d24-4007-b4c2-bd01028e056e",
    "prId" : 1535,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97b79ac7-d889-492a-934e-b36fe8570b1f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Seems like you could pass in tokenParent, though it doesn't really matter.\n",
        "createdAt" : "2014-12-29T18:16:09Z",
        "updatedAt" : "2014-12-30T00:23:27Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "62556df6-5eda-4e9d-8b53-505017e0d073",
        "parentId" : "97b79ac7-d889-492a-934e-b36fe8570b1f",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Leave a note that while in the common case we need the actual node for correct classifications, in some contexts like the merge conflict scanner, we can use it as what is effectively a multiline lexical classifier.\n",
        "createdAt" : "2014-12-29T18:25:35Z",
        "updatedAt" : "2014-12-30T00:23:27Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "65731b27-ca66-4880-b621-e5d5f32c98c3",
        "parentId" : "97b79ac7-d889-492a-934e-b36fe8570b1f",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "will do.\n",
        "createdAt" : "2014-12-30T00:12:32Z",
        "updatedAt" : "2014-12-30T00:23:27Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "12cb284e5da01fc5fcb483a8fae1ed4487d319da",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4973,4977 @@            // cases like 'disabled merge code' classification, we just get the token kind and\n            // classify based on that instead.\n            function classifyTokenType(tokenKind: SyntaxKind, token?: Node): string {\n                if (isKeyword(tokenKind)) {\n                    return ClassificationTypeNames.keyword;"
  },
  {
    "id" : "cffa3ce6-202b-42b5-9ec0-4f91e31c1900",
    "prId" : 1333,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a383205-88a3-403a-b2c8-52b46c98816a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Maybe we should add an `else` clause and bail out? Is it better to crash and hope to catch in dogfooding, or let it gracefully do nothing?\n",
        "createdAt" : "2014-12-02T08:33:56Z",
        "updatedAt" : "2014-12-03T05:08:28Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a318bb73dbeb6ffb2b4cda9e4a9113daf7b4fc4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3811,3815 @@                    // unsupported modifier\n                    return undefined;\n                }\n\n                var keywords: Node[] = [];"
  },
  {
    "id" : "532bce44-9dfe-4143-a5e3-4c31a6012e98",
    "prId" : 1240,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64bfd9b4-28bd-4400-8b89-6eaf85182ebd",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "interesting, I would not expect names of function expressions to be so special. Why symbol name does not match name in declaration (looks very suspicious to me)?\n",
        "createdAt" : "2014-11-22T01:32:47Z",
        "updatedAt" : "2014-11-23T20:33:19Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "25b3ccce-a29b-447c-b573-d9d5443ca438",
        "parentId" : "64bfd9b4-28bd-4400-8b89-6eaf85182ebd",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "We bind the symbol name as `\"__function\"`. Using the symbol is more for convenience. To be quite frank, I'm not sure why we don't just always grab the first declaration with a (non-computed property) name and use that.\n",
        "createdAt" : "2014-11-22T01:49:08Z",
        "updatedAt" : "2014-11-23T20:33:19Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "e4df36f5-65c3-449e-b248-4083a9694b3d",
        "parentId" : "64bfd9b4-28bd-4400-8b89-6eaf85182ebd",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "Discussed offline\n",
        "createdAt" : "2014-11-22T02:26:23Z",
        "updatedAt" : "2014-11-23T20:33:19Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2eec0e15c5bc6c3ff5614fbf2878ab92297b0d0",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +3922,3926 @@                var functionExpression = forEach(declarations, d => d.kind === SyntaxKind.FunctionExpression ? <FunctionExpression>d : undefined);\n\n                // When a name gets interned into a SourceFile's 'identifiers' Map,\n                // its name is escaped and stored in the same way its symbol name/identifier\n                // name should be stored. Function expressions, however, are a special case,"
  },
  {
    "id" : "f8289b69-767d-4bf2-916d-028981c02c43",
    "prId" : 1217,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "294d3a45-dee2-4297-b2f2-104e0d198a04",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Does a `SourceFile` really have a `Value` meaning? Why is that?\n",
        "createdAt" : "2014-11-19T22:33:42Z",
        "updatedAt" : "2014-11-19T23:05:26Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "604bb74a-dd88-44e7-82ec-b2be9a420bd6",
        "parentId" : "294d3a45-dee2-4297-b2f2-104e0d198a04",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "external module. we could check if it is an external module. a comment would be ok as well.\n",
        "createdAt" : "2014-11-19T22:49:17Z",
        "updatedAt" : "2014-11-19T23:05:26Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "44a5c65e-2b8c-4f1a-abe0-9cd51e7c1186",
        "parentId" : "294d3a45-dee2-4297-b2f2-104e0d198a04",
        "authorId" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "body" : "I'll add a comment.\n",
        "createdAt" : "2014-11-19T22:54:24Z",
        "updatedAt" : "2014-11-19T23:05:26Z",
        "lastEditedBy" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "629ea860430c58d7054a31c5cf75c05cc7d1a2cc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4696,4700 @@                // An external module can be a Value\n                case SyntaxKind.SourceFile:\n                    return SemanticMeaning.Namespace | SemanticMeaning.Value;\n            }\n            Debug.fail(\"Unknown declaration type\");"
  },
  {
    "id" : "a2a509d7-d257-4fea-99d7-7feed278fc6d",
    "prId" : 1217,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f3d8c12-588e-44fb-b1ff-734046fe1295",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Still feels weird that we're not conditionally saying it's a value unless we specifically check if it's a SourceFile, but if we run into it later down the road, we'll deal with it then.\n",
        "createdAt" : "2014-11-19T23:25:32Z",
        "updatedAt" : "2014-11-19T23:25:32Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "629ea860430c58d7054a31c5cf75c05cc7d1a2cc",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +4696,4700 @@                // An external module can be a Value\n                case SyntaxKind.SourceFile:\n                    return SemanticMeaning.Namespace | SemanticMeaning.Value;\n            }\n            Debug.fail(\"Unknown declaration type\");"
  },
  {
    "id" : "8c4d203a-dba6-49cb-a754-e4e8b10cdc04",
    "prId" : 1134,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "783d815a-1a66-480f-83f6-d1bea042060c",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "IsLet ?\n",
        "createdAt" : "2014-11-13T01:44:30Z",
        "updatedAt" : "2014-11-21T05:07:08Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "28c41e869abd2db010c3375aaafb776906bfa22b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2837,2841 @@                    ? ScriptElementKind.constElement\n                    : node.flags & NodeFlags.Let\n                        ? ScriptElementKind.letElement\n                        : ScriptElementKind.variableElement;\n                case SyntaxKind.FunctionDeclaration: return ScriptElementKind.functionElement;"
  },
  {
    "id" : "e66c5ac5-0a6c-424f-9427-9897d5bc2dc4",
    "prId" : 1134,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9dbe35b-67ad-4482-a732-af94ed30035f",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Should not this be a new kind consEnumElment\n",
        "createdAt" : "2014-11-13T01:50:09Z",
        "updatedAt" : "2014-11-21T05:07:08Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "68f60e16-875c-4e0a-9e7a-7f19e49f28d8",
        "parentId" : "b9dbe35b-67ad-4482-a732-af94ed30035f",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I modified the enum to show in display info as const enum the icon is same.. Will investigate if we can have different icon for constness\n",
        "createdAt" : "2014-11-13T02:26:36Z",
        "updatedAt" : "2014-11-21T05:07:08Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "28c41e869abd2db010c3375aaafb776906bfa22b",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +2833,2837 @@                case SyntaxKind.InterfaceDeclaration: return ScriptElementKind.interfaceElement;\n                case SyntaxKind.TypeAliasDeclaration: return ScriptElementKind.typeElement;\n                case SyntaxKind.EnumDeclaration: return ScriptElementKind.enumElement;\n                case SyntaxKind.VariableDeclaration: return isConst(node)\n                    ? ScriptElementKind.constElement"
  },
  {
    "id" : "69b11328-cba8-4317-b56c-7382ed48784b",
    "prId" : 952,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7299987-cf9d-47b1-991c-a9d8cf9dc601",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`getContainingObjectLiteral*If*ApplicableForCompletion`\n\nor\n\n`tryGetContainingObjectLiteral`.\n",
        "createdAt" : "2014-10-28T01:58:14Z",
        "updatedAt" : "2014-10-28T16:13:09Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d3fa047d6d1e56b62bfb40c5653ff09e27fa208",
    "line" : 486,
    "diffHunk" : "@@ -1,1 +2521,2525 @@            }\n\n            function getContainingObjectLiteralApplicableForCompletion(previousToken: Node): ObjectLiteral {\n                // The locations in an object literal expression that are applicable for completion are property name definition locations.\n"
  },
  {
    "id" : "45c82362-afdf-4272-bddd-c36baeab8a38",
    "prId" : 861,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "417051cc-f46b-4d7a-b8e3-be9d544aa6f1",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "again, this seems weird that you need to manually do this search.  \n",
        "createdAt" : "2014-10-10T10:08:27Z",
        "updatedAt" : "2014-10-11T00:55:47Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "9e93b24d-b43e-4676-911d-532358d928ea",
        "parentId" : "417051cc-f46b-4d7a-b8e3-be9d544aa6f1",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "This one is different. Consider this example:\n\n```\ninterface A { a; }\ninterface B { b; }\n\nvar v : A|B = { a: 0, b: 0 };\n```\n\nWe are going around the type System here. we are asking does this type (A|B) has a property \"a\". The answer is no, which is correct. but we want to go one step further, and say you probably meant the \"b\" in \"B\" since you have a contextual type \"A|B\" so to do that we need to ask all types of the union type if they have that property.\n",
        "createdAt" : "2014-10-10T17:58:47Z",
        "updatedAt" : "2014-10-11T00:55:47Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "04e53091359917349be09f512c2fcce2e5723ef4",
    "line" : 366,
    "diffHunk" : "@@ -1,1 +3641,3645 @@                    var name = (<Identifier>node).text;\n                    if (contextualType) {\n                        if (contextualType.flags & TypeFlags.Union) {\n                            // This is a union type, first see if the property we are looking for is a union property (i.e. exists in all types)\n                            // if not, search the constituent types for the property"
  },
  {
    "id" : "aec3823d-2760-409d-b7a5-a711a29489fe",
    "prId" : 853,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "869493a0-2bfc-4a49-b37f-91915d9adf66",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "It's not really clear what is going on for someone running into the code for the first time. I didn't figure it out until I read the assertion. Please add a quick comment.\n",
        "createdAt" : "2014-10-08T06:39:10Z",
        "updatedAt" : "2014-10-09T00:33:50Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "7e7db0e1-69ef-4ed4-8721-e59ccdcceb4a",
        "parentId" : "869493a0-2bfc-4a49-b37f-91915d9adf66",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Is there a particular question you want answered? Basically, we start with a Fidelity node, and we have to find the corresponding AST node. @mhegazy said he is working on removing the Fidelity part, so that might make it clearer.\n",
        "createdAt" : "2014-10-08T08:45:10Z",
        "updatedAt" : "2014-10-09T00:33:50Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "19d2fe1f-1dce-44f9-9041-20699396623e",
        "parentId" : "869493a0-2bfc-4a49-b37f-91915d9adf66",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Right, I just mean a quick comment explaining that we are trying to find corresponding AST nodes for fidelity nodes.\n",
        "createdAt" : "2014-10-08T08:57:13Z",
        "updatedAt" : "2014-10-09T00:33:50Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "29c5b402a3dd15b575dfac5690bbbb5083312888",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +2162,2166 @@            }\n\n            // TODO: this is a hack for now, we need a proper walking mechanism to verify that we have the correct node\n            var precedingToken = findTokenOnLeftOfPosition(sourceFile, TypeScript.end(node));\n            var mappedNode: Node;"
  },
  {
    "id" : "4bdfeca9-5df5-4d2c-a533-82a3b10277c8",
    "prId" : 853,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b71771a1-4669-49bd-96f5-07562961ca44",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Does this not need to be specialized at all?\n",
        "createdAt" : "2014-10-08T06:41:48Z",
        "updatedAt" : "2014-10-09T00:33:50Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "fb6d5c67-4dc8-464a-b638-00d18b841714",
        "parentId" : "b71771a1-4669-49bd-96f5-07562961ca44",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "It may need to be specialized. One interesting case that may break with this code is:\n\n``` TS\nvar v: { x: number } = { }/*cursor*/\n```\n\nWe would certainly not want to get member completion there.\n",
        "createdAt" : "2014-10-08T08:49:50Z",
        "updatedAt" : "2014-10-09T00:33:50Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "361534d1-28cb-4ea8-97c7-c23f63876419",
        "parentId" : "b71771a1-4669-49bd-96f5-07562961ca44",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Might worth writing a helper function\n\n``` TypeScript\nfunction isClosingPunctuation(kind: SyntaxKind) {\n    switch (kind) {\n        case SyntaxKind.CloseBraceToken:\n        case SyntaxKind.CloseParenToken:\n        case SyntaxKind.CloseBracketToken:\n            return true;\n        }\n    return false;\n}\n```\n\nor maybe\n\n``` TypeScript\nfunction isNonClosingPunctuation(kind: SyntaxKind) {\n    switch (kind) {\n        case SyntaxKind.CloseBraceToken:\n        case SyntaxKind.CloseParenToken:\n        case SyntaxKind.CloseBracketToken:\n            return false;\n        }\n    return isPunctuation(kind);\n}\n```\n\nand special casing this.\n",
        "createdAt" : "2014-10-08T09:04:25Z",
        "updatedAt" : "2014-10-09T00:33:50Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "da1275dd-1bb8-4a5a-9085-805f34538555",
        "parentId" : "b71771a1-4669-49bd-96f5-07562961ca44",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I think this is related to #764. I will get this fixed next.\n",
        "createdAt" : "2014-10-08T22:49:51Z",
        "updatedAt" : "2014-10-09T00:33:50Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "29c5b402a3dd15b575dfac5690bbbb5083312888",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +2169,2173 @@            }\n            else if (isPunctuation(precedingToken.kind)) {\n                mappedNode = precedingToken.parent;\n            }\n            else {"
  },
  {
    "id" : "77026703-6c9e-4d52-9667-450cff06189e",
    "prId" : 816,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddf57b3c-af64-48a5-80c4-ed9d69b72bfd",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "We are getting this set already in getPossibleSymbolReferencePositions, we can make find all refs add the additional locations in a list(s) to be analyzed later instead of doing two extra passes over all the files.\nin addition we need to add the check for the cancellation token.\n",
        "createdAt" : "2014-10-03T23:00:54Z",
        "updatedAt" : "2014-10-03T23:00:54Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "a39064457ed23101366e5b22b0006c7afc4106e1",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +3104,3108 @@            var tripleSlashDirectivePrefixRegex = /^\\/\\/\\/\\s*</\n\n            if (findInStrings) {\n                forEach(program.getSourceFiles(), addStringReferences);\n            }"
  },
  {
    "id" : "6501fca4-b326-47e2-9885-becb965a620c",
    "prId" : 813,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6034a368-77dd-436a-b001-7ee7f87a0bc4",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Fold into one line.\n",
        "createdAt" : "2014-10-03T20:28:34Z",
        "updatedAt" : "2014-10-03T22:06:18Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "ba4892b3-951b-422f-9e38-982ab951f6df",
        "parentId" : "6034a368-77dd-436a-b001-7ee7f87a0bc4",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "What about `<<`?\n",
        "createdAt" : "2014-10-03T20:34:03Z",
        "updatedAt" : "2014-10-03T22:06:18Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "bf8f5ad9-9528-4ffd-b69a-9c6507f0f8ef",
        "parentId" : "6034a368-77dd-436a-b001-7ee7f87a0bc4",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "We actually don't recognize << as a less than token for generics. We _do_ recognize >> however.\n",
        "createdAt" : "2014-10-03T20:35:18Z",
        "updatedAt" : "2014-10-03T22:06:18Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "5240a89b-61e9-4d7d-a74a-ecc419710325",
        "parentId" : "6034a368-77dd-436a-b001-7ee7f87a0bc4",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Ah, right; you'll need a case for `>>` and `>>>`.\n",
        "createdAt" : "2014-10-03T21:01:40Z",
        "updatedAt" : "2014-10-03T22:06:18Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "5c899bd9-8608-4a1f-a2f2-640a99db528a",
        "parentId" : "6034a368-77dd-436a-b001-7ee7f87a0bc4",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "The lexer doesn't return those as tokens.  It returns the individual > tokens.  It's up to the parser to call abck into the scanner to ask it to reScanGreaterThan to get those tokens.\n",
        "createdAt" : "2014-10-03T21:56:41Z",
        "updatedAt" : "2014-10-03T22:06:18Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "422324f0af459438e60e2e31b38715b207addf48",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +4734,4738 @@                    }\n                    else if (lastNonTriviaToken === SyntaxKind.Identifier &&\n                             token === SyntaxKind.LessThanToken) {\n                        // Could be the start of something generic.  Keep track of that by bumping \n                        // up the current count of generic contexts we may be in."
  },
  {
    "id" : "c6677f42-5086-45c9-aa54-d60eb4e0ff92",
    "prId" : 804,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a138d9c7-2c4d-479c-8952-1ab6778be48d",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "We are not walking the body of the function declaration this way, correct? If so we are missing inner functions.\n",
        "createdAt" : "2014-10-02T03:38:17Z",
        "updatedAt" : "2014-10-03T22:56:54Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "38e1e6ef-e3ea-4573-be2c-56a9aadc213a",
        "parentId" : "a138d9c7-2c4d-479c-8952-1ab6778be48d",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Right, this isn't finished, I was thinking about finishing this at home but I think I need to think out some of the semantics when dealing with incorrect code.\n",
        "createdAt" : "2014-10-02T03:52:54Z",
        "updatedAt" : "2014-10-03T22:56:54Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "18c99923-62db-4fc0-b889-c5479d4d2c05",
        "parentId" : "a138d9c7-2c4d-479c-8952-1ab6778be48d",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "This is going to get the first overload, not the last one. I think we should get the last one.\n",
        "createdAt" : "2014-10-02T17:29:40Z",
        "updatedAt" : "2014-10-03T22:56:54Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "4069e0a0d00a1bed4654a9c252a895e8ae4b8bf2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +532,536 @@                            }\n                            break;\n\n                        case SyntaxKind.ClassDeclaration:\n                        case SyntaxKind.InterfaceDeclaration:"
  },
  {
    "id" : "4fc6a289-7f3c-4993-9121-42c080a9da5d",
    "prId" : 804,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "870ab238-803f-4a58-a467-3af80249857e",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "I would pull the visit function out \n",
        "createdAt" : "2014-10-07T00:11:30Z",
        "updatedAt" : "2014-10-07T00:11:30Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4069e0a0d00a1bed4654a9c252a895e8ae4b8bf2",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +506,510 @@                var namedDeclarations: Declaration[] = [];\n\n                forEachChild(sourceFile, function visit(node: Node): void {\n                    switch (node.kind) {\n                        case SyntaxKind.FunctionDeclaration:"
  },
  {
    "id" : "1577fe08-14db-4a4a-97a9-aebb3af56858",
    "prId" : 804,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "542ba5dd-d9bb-4c72-9a1c-ddd671b712b8",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Why do we have to recurse here? \n",
        "createdAt" : "2014-10-07T00:17:02Z",
        "updatedAt" : "2014-10-07T00:17:02Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "9aca4cf7-fead-4167-a473-f061c6d8918f",
        "parentId" : "542ba5dd-d9bb-4c72-9a1c-ddd671b712b8",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Because we need to continue to aggregate things like functions within other functions, and eventually things like class expressions.\n",
        "createdAt" : "2014-10-07T06:00:16Z",
        "updatedAt" : "2014-10-07T06:00:16Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4069e0a0d00a1bed4654a9c252a895e8ae4b8bf2",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +529,533 @@                                }\n\n                                forEachChild(node, visit);\n                            }\n                            break;"
  },
  {
    "id" : "4a1143ae-76d3-4721-b848-4862f0be911a",
    "prId" : 804,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6fd2a1e-4cb3-4fa2-9aa9-ddce54cd4490",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "we only fall through in certain condition. Could you comment more on this?\n",
        "createdAt" : "2014-10-07T00:24:19Z",
        "updatedAt" : "2014-10-07T00:24:19Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "3a342960-9010-488f-9532-e69a46ff36da",
        "parentId" : "e6fd2a1e-4cb3-4fa2-9aa9-ddce54cd4490",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I think this is explained decently by the preceding comment about constructor parameters.\n",
        "createdAt" : "2014-10-07T06:01:58Z",
        "updatedAt" : "2014-10-07T06:01:58Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4069e0a0d00a1bed4654a9c252a895e8ae4b8bf2",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +557,561 @@                                break;\n                            }\n                            // fall through\n                        case SyntaxKind.VariableDeclaration:\n                        case SyntaxKind.EnumMember:"
  },
  {
    "id" : "40a4ec9e-d60b-47cd-b3fe-152047455c88",
    "prId" : 804,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d4b15a6-c5da-43e1-9470-2483218e53ea",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "? and : should be on the next line.\n",
        "createdAt" : "2014-10-07T22:32:27Z",
        "updatedAt" : "2014-10-07T22:32:27Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "4069e0a0d00a1bed4654a9c252a895e8ae4b8bf2",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +513,517 @@\n                            if (functionDeclaration.name && functionDeclaration.name.kind !== SyntaxKind.Missing) {\n                                var lastDeclaration = namedDeclarations.length > 0 ?\n                                    namedDeclarations[namedDeclarations.length - 1] :\n                                    undefined;"
  },
  {
    "id" : "eb5cb335-f108-4bd3-9ea0-9811efa84dbb",
    "prId" : 787,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77938b07-7c75-44e1-ac7d-affb670d3734",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I would fold this with the previous condition and move it to the canFollow as well\n",
        "createdAt" : "2014-09-30T21:59:52Z",
        "updatedAt" : "2014-09-30T21:59:52Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "f09971f10b8ce23af146c83836a65d11ea9a4b8a",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +4671,4675 @@                        token = SyntaxKind.Identifier;\n                    }\n                    else if (isKeyword(lastNonTriviaToken) && isKeyword(token) && !canFollow(lastNonTriviaToken, token)) {\n                        // We have two keywords in a row.  Only treat the second as a keyword if \n                        // it's a sequence that could legally occur in the language.  Otherwise"
  },
  {
    "id" : "a83603cb-918a-4982-9f40-9535101cdcdb",
    "prId" : 776,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "629f3b5b-3d81-4121-8ddc-c79cbcb2c940",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "this code looks duplicated.\n",
        "createdAt" : "2014-09-29T19:30:01Z",
        "updatedAt" : "2014-09-30T20:49:46Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc469538da2c58063e4aaa0e98edfcc48865b14a",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +2794,2798 @@                // ability to \"jump out\" of the function, and include occurrences for both.\n                if (owner.kind === SyntaxKind.FunctionBlock) {\n                    forEachReturnStatement(<Block>owner, returnStatement => {\n                        pushKeywordIf(keywords, returnStatement.getFirstToken(), SyntaxKind.ReturnKeyword);\n                    });"
  },
  {
    "id" : "e150aa8c-e633-4e87-9f61-4015180fc808",
    "prId" : 776,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9eb40a13-f07a-46a2-9331-0fb9ade1845b",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "this looks like duplciated code.\n",
        "createdAt" : "2014-09-29T19:30:07Z",
        "updatedAt" : "2014-09-30T20:49:46Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc469538da2c58063e4aaa0e98edfcc48865b14a",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +2787,2791 @@                var keywords: Node[] = [];\n                \n                forEach(aggregateOwnedThrowStatements(owner), throwStatement => {\n                    pushKeywordIf(keywords, throwStatement.getFirstToken(), SyntaxKind.ThrowKeyword);\n                });"
  },
  {
    "id" : "7379df6a-0343-4522-9eea-3a246afdb5bf",
    "prId" : 776,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a84df7a-bde6-44eb-90b4-08912ecc91e4",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "comment that you are explicitly not going into the try block part.\n",
        "createdAt" : "2014-09-29T19:31:23Z",
        "updatedAt" : "2014-09-30T20:49:46Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc469538da2c58063e4aaa0e98edfcc48865b14a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2818,2822 @@                        var tryStatement = <TryStatement>node;\n\n                        if (tryStatement.catchBlock) {\n                            aggregate(tryStatement.catchBlock);\n                        }"
  },
  {
    "id" : "ca79ba40-43b9-4d39-9ed3-a58f63d7e96a",
    "prId" : 743,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40876d7c-6cdd-4797-b208-c155c50feb12",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Wherever we do this sort of thing, we need an explicit return type annotation, or maybe a type assertion. I strongly prefer the former.\n",
        "createdAt" : "2014-09-24T22:04:19Z",
        "updatedAt" : "2014-09-25T05:07:18Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "384450b4-eb34-4d8a-841f-ba7ef2eb5e08",
        "parentId" : "40876d7c-6cdd-4797-b208-c155c50feb12",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why? we already have a type annotation in the function return type definition.\n",
        "createdAt" : "2014-09-24T22:08:58Z",
        "updatedAt" : "2014-09-25T05:07:18Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "0374d2bc-fc98-4a69-b48f-1684edc7a3d6",
        "parentId" : "40876d7c-6cdd-4797-b208-c155c50feb12",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I'm personally just bigger on explicit over implicit. Plus, not having that there adds mental overhead of trying to figure out the specific type I'm dealing with.\n",
        "createdAt" : "2014-09-24T22:33:59Z",
        "updatedAt" : "2014-09-25T05:07:18Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "27e233e595b972bfd640e41c3be4e5d8e1441b0f",
    "line" : 418,
    "diffHunk" : "@@ -1,1 +2535,2539 @@                var targetFilename = normalizePath(combinePaths(getDirectoryPath(filename), comment.filename));\n                if (program.getSourceFile(targetFilename)) {\n                    return [{\n                        fileName: targetFilename,\n                        textSpan: TypeScript.TextSpan.fromBounds(0, 0),"
  },
  {
    "id" : "6dad6bcf-8156-4cde-ad98-eec937b2d02b",
    "prId" : 743,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13a0e728-fd6d-46d5-8dbb-45957ae595e3",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "You might not be big on it, but what do you think of turning these into multiline JSDoc comments?\n\nI think you should be able to find/replace easily with:\nVS Search Regex: `(\\s+)\\*\\* (.+) \\*/`\nVS Replacement String: `$1/**\\r\\n$1 * $2\\r\\n$1*/`\n",
        "createdAt" : "2014-09-24T22:24:33Z",
        "updatedAt" : "2014-09-25T05:07:18Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "27e233e595b972bfd640e41c3be4e5d8e1441b0f",
    "line" : 318,
    "diffHunk" : "@@ -1,1 +1531,1535 @@    }\n\n    /** Returns true if node is a name of an object literal property, e.g. \"a\" in x = { \"a\": 1 } */\n    function isNameOfPropertyAssignment(node: Node): boolean {\n        return (node.kind === SyntaxKind.Identifier || node.kind === SyntaxKind.StringLiteral || node.kind === SyntaxKind.NumericLiteral) &&"
  },
  {
    "id" : "09fc1447-f925-45da-8c6f-e284b09b87f6",
    "prId" : 732,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "317a2129-ef11-4526-b101-c8259e8df59e",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Is this really the only way to ask this question?  Is there an easier way to do this, just by asking hte the symbol itself?  For example, does the symbol have any sort of flag indicating it is an External Module?\n\nAlternatively, check if any of the declarations of the symbol have an identifier whose kind is SyntaxKind.StringLiteral.\n",
        "createdAt" : "2014-09-24T08:41:56Z",
        "updatedAt" : "2014-09-24T22:11:03Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "c1958f52-9394-4b83-9c1c-0dadf7fc067a",
        "parentId" : "317a2129-ef11-4526-b101-c8259e8df59e",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "SyntaxKind.StringLiteral would also include string-keyed property names, which you do want to show in completion (see the block directly below this).\n\nIn terms of asking for whether something is an external module, there is only a function isExternalModule, which takes a SourceFile, so that will not help you here. You could write a similar utility for ambient external modules (with quoted names). In order for it to work on a Symbol, you'd want to ask if an arbitrary declaration is an external module, based on whether it is a module and its name has quotes. Why is it sufficient to just ask one declaration? Well, external modules can merge, but only with other external modules. So if one declaration is an external module, they are all external modules.\n",
        "createdAt" : "2014-09-24T18:15:25Z",
        "updatedAt" : "2014-09-24T22:11:03Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "e8d2a0bd-16f2-4262-b6fe-b50104e9511a",
        "parentId" : "317a2129-ef11-4526-b101-c8259e8df59e",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "@CyrusNajmabadi There is no external module flag in the symbol. Another way to check would be to check if one of the declaration of the symbol has kind of module and its name has kind of string literal with double-quoted name. @JsonFreeman I like the idea of having utility for ambient external module\n",
        "createdAt" : "2014-09-24T18:36:58Z",
        "updatedAt" : "2014-09-24T22:11:03Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "f0f61713-aadd-458d-bc19-cabab5259b12",
        "parentId" : "317a2129-ef11-4526-b101-c8259e8df59e",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Turned out the text of declaration name get stripped off its double-quote so the only way to check is through symbol\n",
        "createdAt" : "2014-09-24T21:36:04Z",
        "updatedAt" : "2014-09-24T22:11:03Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "5330dcff-b3ff-40b5-ac90-d38cf8d37bd4",
        "parentId" : "317a2129-ef11-4526-b101-c8259e8df59e",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Fair enough\n",
        "createdAt" : "2014-09-24T22:00:04Z",
        "updatedAt" : "2014-09-24T22:11:03Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5b34090589e91f7d71a8ab5a70efcf860d6dce1",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1857,1861 @@                var firstCharCode = displayName.charCodeAt(0);\n                // First check of the displayName is not external module; if it is an external module, it is not valid entry\n                if ((symbol.flags & SymbolFlags.Namespace) && (firstCharCode === CharacterCodes.singleQuote || firstCharCode === CharacterCodes.doubleQuote)) {\n                    // If the symbol is external module, don't show it in the completion list\n                    // (i.e declare module \"http\" { var x; } | // <= request completion here, \"http\" should not be there)"
  },
  {
    "id" : "b1cc6534-67d8-471a-836a-d9aa40eee08f",
    "prId" : 731,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4d1b4f6-0641-4717-a188-85d2747b3d3b",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I would add a unit test with a keyword after a dot and a space \" x . var\" to test this\n",
        "createdAt" : "2014-09-23T19:39:57Z",
        "updatedAt" : "2014-09-23T21:14:34Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "25170ef5dd009e85e9a2cbe6687033ecc7c3851a",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +4120,4124 @@                }\n\n                // Only recall the token if it was *not* trivia.\n                if (!(SyntaxKind.FirstTriviaToken <= token && token <= SyntaxKind.LastTriviaToken)) {\n                    lastNonTriviaToken = token;"
  },
  {
    "id" : "252240c6-98d8-409d-a339-8f676b471e1b",
    "prId" : 731,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d63dabe-fa33-4881-b52f-61aa71ae3718",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "since you are looking into this, can we lose the onError as well and check the last two characters like we do with stringLiteral to know if it is terminated or not?\n",
        "createdAt" : "2014-09-23T19:42:18Z",
        "updatedAt" : "2014-09-23T21:14:34Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "25170ef5dd009e85e9a2cbe6687033ecc7c3851a",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +4137,4141 @@                // add the token\n                addResult(end - start, classFromKind(token));\n\n                if (end >= text.length) {\n                    // We're at the end."
  },
  {
    "id" : "31afbdbb-1ec2-43f4-b1cb-85521d48d063",
    "prId" : 726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78e347b6-fccd-410c-b910-80399ca1bb80",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Will comment that this is on the syntactic thread\n",
        "createdAt" : "2014-09-23T00:13:30Z",
        "updatedAt" : "2014-09-24T17:47:50Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "22e989795d98df98e77f9dddeb15c8ad56767619",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3743,3747 @@         */\n        function getSignatureHelpCurrentArgumentState(fileName: string, position: number, applicableSpanStart: number): SignatureHelpState {\n            fileName = TypeScript.switchToForwardSlashes(fileName);\n            var sourceFile = getCurrentSourceFile(fileName);\n"
  },
  {
    "id" : "3637b697-8775-493b-8419-d991dd6c0959",
    "prId" : 699,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6137e5f7-2448-4b2f-baf2-655fcd76d410",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "this seems wrong.  A more appropriate pattern would be:\n\n```\nvar savedWriter = writer;\nallDiagnostics ...\nwriter = savedWriter;\n```\n",
        "createdAt" : "2014-09-18T20:05:12Z",
        "updatedAt" : "2014-09-18T21:08:58Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3721382933b363c51c1b177fdf7666f0cddbcc76",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1669,1673 @@                // Get emitter-diagnostics requires calling TypeChecker.emitFiles so we have to define CompilerHost.writer which does nothing because emitFiles function has side effects defined by CompilerHost.writer\n                var savedWriter = writer;\n                writer = (filename: string, data: string, writeByteOrderMark: boolean) => { };\n                allDiagnostics = allDiagnostics.concat(checker.emitFiles(targetSourceFile).errors);\n                writer = savedWriter;"
  },
  {
    "id" : "f61caed4-4846-49e1-98a4-9720a9ef7475",
    "prId" : 689,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fcc5f3b-00ff-4d6c-b939-06565fc1ee0c",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "moving code is unpleasant for code reviews :)   Can you make your moves as separate commits in the future?  Thanks!\n",
        "createdAt" : "2014-09-17T22:26:47Z",
        "updatedAt" : "2014-09-18T21:00:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "831d26f3dd9b31df0a633501f8b84778307fef8a",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +3608,3612 @@            return result;\n\n            function escapeRegExp(str: string): string {\n                return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n            }"
  },
  {
    "id" : "e879a570-1984-4835-8ddb-46ea627857a4",
    "prId" : 689,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1787dec-a0ae-49c0-b57c-0aeab009f4f7",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Might be clearer if you still took the descriptors instead of closing over it, but I don't really mind too much.\n",
        "createdAt" : "2014-09-18T19:08:15Z",
        "updatedAt" : "2014-09-18T21:00:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "831d26f3dd9b31df0a633501f8b84778307fef8a",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +3612,3616 @@            }\n\n            function getTodoCommentsRegExp(): RegExp {\n                // NOTE: ?:  means 'non-capture group'.  It allows us to have groups without having to\n                // filter them out later in the final result array."
  },
  {
    "id" : "462db372-3a77-4d63-9b05-f9e416cd7bae",
    "prId" : 676,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e723147-6ca6-43eb-a10e-1ac060526c3d",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "this looks like isPunctuation, not isToken.\n",
        "createdAt" : "2014-09-16T21:58:53Z",
        "updatedAt" : "2014-09-18T00:31:05Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "09d03dff-f521-4060-845a-503c17f6827d",
        "parentId" : "4e723147-6ca6-43eb-a10e-1ac060526c3d",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "good point. done.\n",
        "createdAt" : "2014-09-17T00:01:07Z",
        "updatedAt" : "2014-09-18T00:31:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e00693163e7198f694161be62c92a7dd94b479e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1840,1844 @@\n            function isPunctuation(kind: SyntaxKind) {\n                return (SyntaxKind.FirstPunctuation <= kind && kind <= SyntaxKind.LastPunctuation);\n            }\n"
  },
  {
    "id" : "93a42380-11ff-459e-a3af-a8f7ce833cf5",
    "prId" : 672,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e29bcb6c-a872-4951-a056-c553abe82f51",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I'd put `classifySymol` after `processNode` just because it throws me off after not seeing `classifySymbol` being used\n",
        "createdAt" : "2014-09-13T01:37:48Z",
        "updatedAt" : "2014-09-16T01:52:36Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "38d29249a4b883e027a66247fd714c0ba129c315",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +3183,3187 @@                    return ClassificationTypeNames.typeParameterName;\n                }\n            }\n\n            function processNode(node: Node) {"
  },
  {
    "id" : "8d622177-c278-40d7-865b-0c5669b312bd",
    "prId" : 672,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad0cb432-6cc5-4493-8e36-e49e2725644e",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Why don't we use compiler in this case?\n",
        "createdAt" : "2014-09-15T22:50:37Z",
        "updatedAt" : "2014-09-16T01:52:36Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "bcfad34d-cc89-4f4c-917d-bbed9efc0983",
        "parentId" : "ad0cb432-6cc5-4493-8e36-e49e2725644e",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Because it's a purely syntactic feature.  The comment isn't great (it was copied from elsewhere).  What we should be saying is \"doesn't use semantics.\"\n",
        "createdAt" : "2014-09-16T01:49:49Z",
        "updatedAt" : "2014-09-16T01:52:36Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "38d29249a4b883e027a66247fd714c0ba129c315",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +3206,3210 @@\n        function getSyntacticClassifications(fileName: string, span: TypeScript.TextSpan): ClassifiedSpan[] {\n            // doesn't use compiler - no need to synchronize with host\n            fileName = TypeScript.switchToForwardSlashes(fileName);\n            var sourceFile = getCurrentSourceFile(fileName);"
  },
  {
    "id" : "f03d473a-2443-481d-8ea2-11e328bf8d2e",
    "prId" : 672,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3d00f2d-ac3d-4651-8968-a8b7f3e9a49f",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Does this mean that we perform classification over comment text as well? if so why we need to do that\n",
        "createdAt" : "2014-09-15T22:53:25Z",
        "updatedAt" : "2014-09-16T01:52:36Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "dcbb194a-c09d-4894-b09f-46d785017ef5",
        "parentId" : "c3d00f2d-ac3d-4651-8968-a8b7f3e9a49f",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Because we want comments to be green :)\n",
        "createdAt" : "2014-09-16T01:49:59Z",
        "updatedAt" : "2014-09-16T01:52:36Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "38d29249a4b883e027a66247fd714c0ba129c315",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +3223,3227 @@            }\n\n            function classifyTriviaList(trivia: TypeScript.ISyntaxTriviaList) {\n                for (var i = 0, n = trivia.count(); i < n; i++) {\n                    classifyTrivia(trivia.syntaxTriviaAt(i));"
  },
  {
    "id" : "ed8f90c3-9220-4a14-bc3b-b62881fd3d1a",
    "prId" : 672,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fcfc7ee-f5fb-4e35-a11d-fdcc07549f7c",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "spelling : should\n",
        "createdAt" : "2014-09-15T22:56:09Z",
        "updatedAt" : "2014-09-16T01:52:36Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "38d29249a4b883e027a66247fd714c0ba129c315",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +3279,3283 @@                }\n                else if (tokenKind === TypeScript.SyntaxKind.RegularExpressionLiteral) {\n                    // TODO: we shoudl get another classification type for these literals.\n                    return ClassificationTypeNames.stringLiteral;\n                }"
  },
  {
    "id" : "35d868e9-113a-4a9c-894c-c8196cf70af3",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d6ab3d2-2136-4c96-b403-25707a44a34a",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Why do we need sourceFile for input?\n",
        "createdAt" : "2014-09-14T17:03:41Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "c6b78b2a-a5e6-40db-a3b7-b3be74d6a61f",
        "parentId" : "2d6ab3d2-2136-4c96-b403-25707a44a34a",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "This function (as well as some others) might require scanning the original text (usually stored in the `SourceFile`) to give the answer. In general `SourceFile` can be found by walking the tree upwards, however passing it explicitly allows not to pay the price of extra walk.If `SourceFile` is not available at callsite it still can be obtained but usually action at the callsite starts with `SourceFile` so there is not point to have penalty that can be easily avoided.\n",
        "createdAt" : "2014-09-14T23:41:40Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +29,33 @@    export interface Node {\n        getSourceFile(): SourceFile;\n        getChildCount(sourceFile?: SourceFile): number;\n        getChildAt(index: number, sourceFile?: SourceFile): Node;\n        getChildren(sourceFile?: SourceFile): Node[];"
  },
  {
    "id" : "2890356a-eeaa-49bc-aa55-519b50e8d443",
    "prId" : 637,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a85ad9d5-12a6-45e4-a006-0e4cbe667bb9",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Is it possible to have a break/continue keyword not parented by a break/continue statement?\n",
        "createdAt" : "2014-09-09T23:14:16Z",
        "updatedAt" : "2014-09-11T02:20:19Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "80e81e26-3da2-4675-bb73-a90cf4427aa2",
        "parentId" : "a85ad9d5-12a6-45e4-a006-0e4cbe667bb9",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "The general pattern is to always ensure that the token is not part of a \"stray\" parse, so that we can be resilient.\n",
        "createdAt" : "2014-09-09T23:19:29Z",
        "updatedAt" : "2014-09-11T02:20:19Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e8772c7a570d55cdc4404e9efe78fa9f2178aee",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +2204,2208 @@                    break;\n                case SyntaxKind.BreakKeyword:\n                case SyntaxKind.ContinueKeyword:\n                    if (hasKind(node.parent, SyntaxKind.BreakStatement) || hasKind(node.parent, SyntaxKind.ContinueStatement)) {\n                        return getBreakOrContinueStatementOccurences(<BreakOrContinueStatement>node.parent);"
  },
  {
    "id" : "fcc6bb9a-7fb3-43ee-92a3-ad1fae4cbf2f",
    "prId" : 637,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f69ac27e-6747-4510-be79-4c7d3a6ffe5b",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Why not combine this group with the ForKeyword group\n",
        "createdAt" : "2014-09-09T23:15:24Z",
        "updatedAt" : "2014-09-11T02:20:19Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "d4590de8-67d9-4aa3-ab95-e93294957bcc",
        "parentId" : "f69ac27e-6747-4510-be79-4c7d3a6ffe5b",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I considered it, but then the `if` gets too long, and technically you don't need to check if the kind is a for-in/for statement if you have a `do` or `while`.\n",
        "createdAt" : "2014-09-09T23:21:27Z",
        "updatedAt" : "2014-09-11T02:20:19Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "0d707783-c923-4ff8-9a94-078c0228b6ac",
        "parentId" : "f69ac27e-6747-4510-be79-4c7d3a6ffe5b",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Then I guess each one can be separate.\n",
        "createdAt" : "2014-09-09T23:23:20Z",
        "updatedAt" : "2014-09-11T02:20:19Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e8772c7a570d55cdc4404e9efe78fa9f2178aee",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +2215,2219 @@                    break;\n                case SyntaxKind.WhileKeyword:\n                case SyntaxKind.DoKeyword:\n                    if (hasKind(node.parent, SyntaxKind.WhileStatement) || hasKind(node.parent, SyntaxKind.DoStatement)) {\n                        return getLoopBreakContinueOccurrences(<IterationStatement>node.parent);"
  },
  {
    "id" : "a9f74a4e-0231-4d55-89d8-e4c559c450ba",
    "prId" : 637,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0e1b763-4022-463a-b6b7-98c943cd8a45",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I'm not a huge fan of checking `node !== undefined` inside this function. I'd rather force the caller to do it.\n",
        "createdAt" : "2014-09-09T23:44:50Z",
        "updatedAt" : "2014-09-11T02:20:19Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "8dfa02da-0fc5-492c-ac55-eb234e3cc07b",
        "parentId" : "c0e1b763-4022-463a-b6b7-98c943cd8a45",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This is an `undefined`-propagating helper function that's used quite a bit above. It's local to the function and I'd rather keep it.\n",
        "createdAt" : "2014-09-10T00:41:13Z",
        "updatedAt" : "2014-09-11T02:20:19Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e8772c7a570d55cdc4404e9efe78fa9f2178aee",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2457,2461 @@            // returns true if 'node' is defined and has a matching 'kind'.\n            function hasKind(node: Node, kind: SyntaxKind) {\n                return node !== undefined && node.kind === kind;\n            }\n"
  },
  {
    "id" : "d8e90c03-b06c-426d-9546-120cbbeb0ebe",
    "prId" : 600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cee3c2fe-d543-495a-8b01-1ced9a07c25a",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "why are you searching many different source files for 'this'?\n",
        "createdAt" : "2014-09-04T23:02:44Z",
        "updatedAt" : "2014-09-05T22:58:30Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "6f3a7c2b-6fe9-4e91-9b56-2d04467fc608",
        "parentId" : "cee3c2fe-d543-495a-8b01-1ced9a07c25a",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Because at the top level, `this` refers to the same `this` across source files.\n",
        "createdAt" : "2014-09-04T23:25:34Z",
        "updatedAt" : "2014-09-05T22:58:30Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "024ca6d6ac9bb4ddbef628a7d4e0d22d5c84c7f5",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +2662,2666 @@\n                if (searchSpaceNode.kind === SyntaxKind.SourceFile) {\n                    forEach(sourceFiles, sourceFile => {\n                        var possiblePositions = getPossibleSymbolReferencePositions(sourceFile, \"this\", sourceFile.getStart(), sourceFile.getEnd());\n                        getThisReferencesInFile(sourceFile, sourceFile, possiblePositions, result);"
  },
  {
    "id" : "d4764de1-5048-41a5-a764-c27378308758",
    "prId" : 600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf892bb0-8f21-4484-b278-a80175214003",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "The name searchSpaceNode is confusing in this context. Namely, I can't tell between searchSpaceNode and container, which one is the original occurrence, and which one is the occurrence currently being considered.\n",
        "createdAt" : "2014-09-05T22:11:10Z",
        "updatedAt" : "2014-09-05T22:58:30Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "a88c1235-d23f-4f54-98cd-946e32cbd830",
        "parentId" : "bf892bb0-8f21-4484-b278-a80175214003",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I can give a comment explaining what `searchSpaceNode` is, but beyond that I don't have a better name.\n",
        "createdAt" : "2014-09-05T22:13:14Z",
        "updatedAt" : "2014-09-05T22:58:30Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "024ca6d6ac9bb4ddbef628a7d4e0d22d5c84c7f5",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +2675,2679 @@                return result;\n\n                function getThisReferencesInFile(sourceFile: SourceFile, searchSpaceNode: Node, possiblePositions: number[], result: ReferenceEntry[]): void {\n                    forEach(possiblePositions, position => {\n                        cancellationToken.throwIfCancellationRequested();"
  },
  {
    "id" : "185fe64c-fe63-4a60-b89e-56c36d80c4b0",
    "prId" : 600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95acbc42-8baa-4aa7-86e9-78e7820e3ca5",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Not needed\n",
        "createdAt" : "2014-09-05T22:15:34Z",
        "updatedAt" : "2014-09-05T22:58:30Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "919c9076-3fe4-4dec-8f1e-d38668a3a9c3",
        "parentId" : "95acbc42-8baa-4aa7-86e9-78e7820e3ca5",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "@mhegazy what do you think of removing this?\n",
        "createdAt" : "2014-09-05T22:24:57Z",
        "updatedAt" : "2014-09-05T22:58:30Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "f03e1317-f7e8-489b-8476-9add554a00f7",
        "parentId" : "95acbc42-8baa-4aa7-86e9-78e7820e3ca5",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "this is needed by rename. if we do not trim it, renaming foo to bar we will replace a[\"foo\"] with a[bar], which is wrong.\n",
        "createdAt" : "2014-09-05T22:43:42Z",
        "updatedAt" : "2014-09-05T22:58:30Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "bdd6c317-0a29-4a3b-8a8a-ac72e1b7eb90",
        "parentId" : "95acbc42-8baa-4aa7-86e9-78e7820e3ca5",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Oh... sneaky!\n",
        "createdAt" : "2014-09-05T22:50:54Z",
        "updatedAt" : "2014-09-05T22:58:30Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "024ca6d6ac9bb4ddbef628a7d4e0d22d5c84c7f5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2958,2962 @@                start += 1;\n                end -= 1;\n            }\n\n            return new ReferenceEntry(node.getSourceFile().filename, TypeScript.TextSpan.fromBounds(start, end), isWriteAccess(node));"
  },
  {
    "id" : "06910da9-4aed-450e-9af9-28c0effed776",
    "prId" : 600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b52e683-2247-414e-8e34-20484f511f1e",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "When would there not be a parent? I guess only if you called isWriteAccess on a SourceFile. I feel like this check shouldn't be necessary.\n",
        "createdAt" : "2014-09-05T22:20:14Z",
        "updatedAt" : "2014-09-05T22:58:30Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "024ca6d6ac9bb4ddbef628a7d4e0d22d5c84c7f5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2970,2974 @@\n            var parent = node.parent;\n            if (parent) {\n                if (parent.kind === SyntaxKind.PostfixOperator || parent.kind === SyntaxKind.PrefixOperator) {\n                    return true;"
  },
  {
    "id" : "4a7612bc-6b1d-47b8-8e65-b9e1bd32e3b7",
    "prId" : 600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55f7f541-eed4-44da-af3f-836ac59f1ed0",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "this will break rename, allowing you to rename \"this\".\n",
        "createdAt" : "2014-09-06T00:29:37Z",
        "updatedAt" : "2014-09-06T00:29:37Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "6ad12f2d-971f-4162-9cb7-a7ccf7baa7fa",
        "parentId" : "55f7f541-eed4-44da-af3f-836ac59f1ed0",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Oh true!!\n",
        "createdAt" : "2014-09-06T00:36:07Z",
        "updatedAt" : "2014-09-06T00:36:07Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "2647005a-804b-4986-a0ee-ef5db012ed44",
        "parentId" : "55f7f541-eed4-44da-af3f-836ac59f1ed0",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "i would remove this for now.  Until we're ready to decide what it means to both findrefs on 'this' as well as what 'rename this' means.\n",
        "createdAt" : "2014-09-08T20:46:30Z",
        "updatedAt" : "2014-09-08T20:46:30Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "f010c144-3d18-4b60-a74b-9d3949d08d1d",
        "parentId" : "55f7f541-eed4-44da-af3f-836ac59f1ed0",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "@ahejlsberg and I felt like renaming `this` isn't so unheard of, but yes, it is currently broken in this implementation - rename will populate the initial text with the symbol name in VS.\n\nWhat semantics did you have for findAllRefs on `this`? While we don't go out of our way to match `this` across merged declarations, we certainly have fairly predictable results. Thoughts @mhegazy, as we discussed this offline?\n",
        "createdAt" : "2014-09-08T21:46:20Z",
        "updatedAt" : "2014-09-08T21:46:20Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "024ca6d6ac9bb4ddbef628a7d4e0d22d5c84c7f5",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +2379,2383 @@\n            if (node.kind !== SyntaxKind.Identifier &&\n                node.kind !== SyntaxKind.ThisKeyword &&\n                !isLiteralNameOfPropertyDeclarationOrIndexAccess(node) &&\n                !isNameOfExternalModuleImportOrDeclaration(node)) {"
  },
  {
    "id" : "e1eb5ebd-5149-411b-8036-ec3ea34d0ec4",
    "prId" : 593,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43cf397f-58e8-47e9-bc7a-00af7ffefc4a",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "how do you know it's safe to cast this to a FunctionDeclaration?  What if it's something else (like an accessor)?\n",
        "createdAt" : "2014-09-04T19:04:31Z",
        "updatedAt" : "2014-09-04T19:44:37Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "a2d8ea9b-14ca-4ba4-97c2-28bca69f9344",
        "parentId" : "43cf397f-58e8-47e9-bc7a-00af7ffefc4a",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "They all inherit from `FunctionDeclaration`.\n\n``` TypeScript\n    export interface MethodDeclaration extends FunctionDeclaration { }\n\n    export interface ConstructorDeclaration extends FunctionDeclaration { }\n\n    export interface AccessorDeclaration extends FunctionDeclaration { }\n\n    export interface FunctionExpression extends Expression, FunctionDeclaration {\n```\n",
        "createdAt" : "2014-09-04T19:19:30Z",
        "updatedAt" : "2014-09-04T19:44:37Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b5440bb8dda9135bb24c844448f3463f8ea7502",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +2254,2258 @@\n            function getReturnOccurrences(returnStatement: ReturnStatement): ReferenceEntry[]{\n                var func = <FunctionDeclaration>getContainingFunction(returnStatement);\n\n                // If we didn't find a containing function with a block body, bail out."
  },
  {
    "id" : "c8e02801-a2c1-4565-8236-9ddd707f76c8",
    "prId" : 549,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "401411b4-6084-4236-a4c5-edf42b168bfc",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "please wrap this.  if it's too long to fit in a CR, it's too long :)\n",
        "createdAt" : "2014-08-27T12:03:37Z",
        "updatedAt" : "2014-08-28T00:28:51Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "813f28d865e0d816d8700c63aedf3198a31878e7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2164,2168 @@            }\n\n            if (node.kind === SyntaxKind.Identifier || isLiteralNameOfPropertyDeclarationOrIndexAccess(node) || isNameOfExternalModuleImportOrDeclaration(node)) {\n                return getReferencesForNode(node, [sourceFile]);\n            }"
  },
  {
    "id" : "5c9ba675-7a12-4029-a306-b571ec4ad666",
    "prId" : 549,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1a52605-1edb-4a14-a1e0-937086005dfc",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "this comment should be on the actual parent/hasKind functions.\n",
        "createdAt" : "2014-08-28T00:04:16Z",
        "updatedAt" : "2014-08-28T00:28:51Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "813f28d865e0d816d8700c63aedf3198a31878e7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2168,2172 @@            }\n\n            switch (node.kind) {\n                case SyntaxKind.TryKeyword:\n                case SyntaxKind.CatchKeyword:"
  },
  {
    "id" : "ea8a9bad-f57c-4d63-b425-d792d8e8c0ab",
    "prId" : 525,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "717f38fa-a0fa-426e-9955-5f53fbf19863",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "i still think it's appropriate for you to verify that the node.parent.parent is actually a TryStatement.  Blind casting can lead to some very bad results in the future.\n",
        "createdAt" : "2014-08-27T12:01:58Z",
        "updatedAt" : "2014-08-27T12:01:58Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ab4df0e256cf76df8e698e60f4b9abe2fdeaef7",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +2173,2177 @@                case SyntaxKind.CatchKeyword:\n                case SyntaxKind.FinallyKeyword:\n                    return getTryCatchFinallyOccurrences(<TryStatement>(node.parent && node.parent.parent));\n            }\n"
  },
  {
    "id" : "3edfd20d-060a-42a4-bf11-ffcbc7798ae6",
    "prId" : 525,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed02f83f-20ea-422c-a689-c43aac33cf38",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "having the check here seems _very very strange_.  It is already typed as a TryStatement, but you're now putting in code that indicates that you may not actually have a TryStatement.  \n",
        "createdAt" : "2014-08-27T12:02:07Z",
        "updatedAt" : "2014-08-27T12:02:07Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ab4df0e256cf76df8e698e60f4b9abe2fdeaef7",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +2179,2183 @@\n            function getTryCatchFinallyOccurrences(tryStatement: TryStatement): ReferenceEntry[]{\n                if (!tryStatement || tryStatement.kind !== SyntaxKind.TryStatement) {\n                    return undefined;\n                }"
  },
  {
    "id" : "2abab97d-3f93-42d3-a153-d260b3ef6e37",
    "prId" : 525,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a5a80bb-d91c-49e7-8286-ffef18249f7c",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "i would check that it's actually the keyword you expect.  \n",
        "createdAt" : "2014-08-27T12:02:39Z",
        "updatedAt" : "2014-08-27T12:02:39Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ab4df0e256cf76df8e698e60f4b9abe2fdeaef7",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +2199,2203 @@\n            function pushIfKeyword(keywordList: Node[], token: Node) {\n                if (token && isKeyword(token.kind)) {\n                    keywordList.push(token);\n                }"
  },
  {
    "id" : "85907858-f690-415b-a6aa-a8b5e2723a3b",
    "prId" : 473,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae9a9e15-be06-48a9-9019-b9595a03a8d2",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Comment that this is only used for object literal properties.\n",
        "createdAt" : "2014-08-19T19:19:45Z",
        "updatedAt" : "2014-08-29T22:59:29Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc0560ae596815838a67606a57b40d4f78a5de76",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1333,1337 @@\n    /// Returns true if node is a name of an object literal property, e.g. \"a\" in x = { \"a\": 1 }\n    function isNameOfPropertyAssignment(node: Node): boolean {\n        return (node.kind === SyntaxKind.Identifier || node.kind === SyntaxKind.StringLiteral || node.kind === SyntaxKind.NumericLiteral) &&\n            node.parent.kind === SyntaxKind.PropertyAssignment && (<PropertyDeclaration>node.parent).name === node;"
  },
  {
    "id" : "fba89171-51bd-4992-8371-216a6a898c65",
    "prId" : 473,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2326fc3-9022-48fd-8192-42f41c0fc52a",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I prefer without the +1\n",
        "createdAt" : "2014-08-19T19:59:02Z",
        "updatedAt" : "2014-08-29T22:59:29Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc0560ae596815838a67606a57b40d4f78a5de76",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2466,2470 @@                        positions.push(position);\n                    }\n                    position = text.indexOf(symbolName, position + symbolNameLength + 1);\n                }\n"
  },
  {
    "id" : "d1fff0fa-d7f7-426a-83b3-6134aa84088f",
    "prId" : 473,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3317d09-a92b-4ddc-8dac-85967b2e30c6",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Assert that this is an expression?\n",
        "createdAt" : "2014-08-19T22:35:29Z",
        "updatedAt" : "2014-08-29T22:59:29Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc0560ae596815838a67606a57b40d4f78a5de76",
    "line" : 907,
    "diffHunk" : "@@ -1,1 +2771,2775 @@                }\n                else {\n                    return SearchMeaning.Value;\n                }\n            }"
  },
  {
    "id" : "b90b2704-c101-442d-83e0-9ec050a0f7a0",
    "prId" : 473,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4b2febc-f317-4af5-a7a1-381ee1a5f110",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Interesting!\n",
        "createdAt" : "2014-08-19T22:36:11Z",
        "updatedAt" : "2014-08-29T22:59:29Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc0560ae596815838a67606a57b40d4f78a5de76",
    "line" : 923,
    "diffHunk" : "@@ -1,1 +2787,2791 @@                        // we need to consider both as they initialMeaning intersects with the module in the namespace space, and the module\n                        // intersects with the class in the value space.\n                        // To achieve that we will keep iterating until the result stabilizes.\n\n                        // Remeber the last meaning"
  },
  {
    "id" : "792ce78e-da74-4778-bd7b-07d92ca69b25",
    "prId" : 456,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "079749d2-5bf6-40f6-827a-ba57a45348a8",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Can we move these back to interfaces.\n",
        "createdAt" : "2014-08-15T00:15:31Z",
        "updatedAt" : "2014-08-22T21:23:37Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "9aee22b9437fa6c17869a0e02a6a26db65e18d27",
    "line" : 229,
    "diffHunk" : "@@ -1,1 +581,585 @@\n    export class DefinitionInfo {\n        constructor(public fileName: string,\n                    public textSpan: TypeScript.TextSpan,\n                    public kind: string,"
  },
  {
    "id" : "2ffe9833-4461-4027-8043-8ddad045d072",
    "prId" : 450,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "505c118f-d477-4e75-ad5c-ce669fea6e10",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i do not really care for the name that much. and this is used in only one place, so the extra layer of abstraction, is not really useful, i would just put it in getSemanticDiagnostics, to recreate if it does not exist and forget about it.\n",
        "createdAt" : "2014-08-15T18:13:10Z",
        "updatedAt" : "2014-08-15T19:07:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "d8c4d3b7-98cc-4014-889a-9e7e32c6d611",
        "parentId" : "505c118f-d477-4e75-ad5c-ce669fea6e10",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "My preference in avoiding errors is to leave only one way that will do things right. Since accessing variable directly might fail without prior check - then this only was should be \"always use function, do not touch the variable\"\n",
        "createdAt" : "2014-08-15T19:14:39Z",
        "updatedAt" : "2014-08-15T19:14:39Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "a271b94b9d4c64568fc691838e8a740c4940891a",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1261,1265 @@        // the sole purpose of this checkes is to reutrn semantic diagnostics\n        // creation is deferred - use getFullTypeCheckChecker to get instance\n        var fullTypeCheckChecker_doNotAccessDirectly: TypeChecker;\n        var useCaseSensitivefilenames = false;\n        var sourceFilesByName: Map<SourceFile> = {};"
  },
  {
    "id" : "e46c93d7-320a-4a19-af65-00f82d249db5",
    "prId" : 430,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df41fd7a-691b-4e01-9ac7-54f7c54328a6",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "i somewhat feel like this is the wrong place for this.  We shoudln't ever really get a source file without set parents.  So perhaps we should fix up the .update and createSourceFileFromScriptSnapshot calls to do this instead.  what do you think?\n",
        "createdAt" : "2014-08-12T05:19:20Z",
        "updatedAt" : "2014-08-12T05:57:37Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "a409ec9790b5f2abf5f5f3c28df7344c33228d5c",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +1009,1013 @@            }\n\n            function fixupParentReferences(sourceFile: SourceFile) {\n                // normally parent references are set during binding.\n                // however here SourceFile data is used only for syntactic features so running the whole binding process is an overhead."
  },
  {
    "id" : "d5bb6f51-edca-413b-887c-ac299e5d221a",
    "prId" : 405,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c1f18e3-a67f-4f7d-87e0-469840eac336",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "thse don't feel right here.  there should be a general place for these questions.  This should be part of our compiler API after all.\n",
        "createdAt" : "2014-08-08T19:13:02Z",
        "updatedAt" : "2014-08-18T21:36:54Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "83e8b812-caae-4d5a-b22e-4d6a96a85bcb",
        "parentId" : "2c1f18e3-a67f-4f7d-87e0-469840eac336",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I agree.. any suggestion with the place?\nI do not think the typechecker is the right place, I can leave them on the global ts namespace..\n",
        "createdAt" : "2014-08-08T20:02:52Z",
        "updatedAt" : "2014-08-18T21:36:54Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "c7de8b85-e63b-49c4-b75d-9d3210ff3dc7",
        "parentId" : "2c1f18e3-a67f-4f7d-87e0-469840eac336",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "These are general syntax helpers.  So they should be in parser, scanner, or some low level file that contains helpers.\n",
        "createdAt" : "2014-08-10T04:32:30Z",
        "updatedAt" : "2014-08-18T21:36:54Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "54d8722189243392b7c5a0b8483c4a893e87c582",
    "line" : 231,
    "diffHunk" : "@@ -1,1 +2398,2402 @@\n                // Remeber the end of the last token\n                lastTokenOrCommentEnd = end;\n            }\n"
  },
  {
    "id" : "29888824-5430-4d49-9582-fad3db2a1454",
    "prId" : 358,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "404fc2d9-abbf-4e0c-9119-73156f4c2dca",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "\"create\" -> \"created\"\n",
        "createdAt" : "2014-08-04T23:36:20Z",
        "updatedAt" : "2014-08-04T23:57:04Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "93a48a314e4c425f30335f06129080e6f5623697",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1270,1274 @@\n        function programUpToDate(): boolean {\n            // If we haven't create a program yet, then it is not up-to-date\n            if (!program) {\n                return false;"
  },
  {
    "id" : "76526ee8-74d6-44d6-accb-a5ce171b4913",
    "prId" : 353,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a502bb3-e039-4f7e-9b3d-611ed425af33",
        "parentId" : null,
        "authorId" : "653c1a3f-9d47-48c5-8f19-f894f1744d89",
        "body" : "soruceFiles --> SourceFiles?\n",
        "createdAt" : "2014-08-04T22:06:10Z",
        "updatedAt" : "2014-08-04T22:06:10Z",
        "lastEditedBy" : "653c1a3f-9d47-48c5-8f19-f894f1744d89",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d26599811f9c8432b3c782f90f264d9255cf49d",
    "line" : 361,
    "diffHunk" : "@@ -1,1 +1116,1120 @@            var bucketInfoArray = Object.keys(buckets).filter(name => name && name.charAt(0) === '_').map(name => {\n                var entries = lookUp(buckets, name);\n                var soruceFiles: { name: string; refCount: number; references: string[]; }[] = [];\n                for (var i in entries) {\n                    var entry = entries[i];"
  },
  {
    "id" : "6a28fde9-8e46-434d-94d6-428260961415",
    "prId" : 353,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b7fa18b-87a4-42b8-81eb-c8c30b350d8e",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Is this merging with the other `SourceFile`? Why not put this all in a different namespace, have this extend `ts.SourceFile` and avoid having to suffix type names with `Object`?\n",
        "createdAt" : "2014-08-04T22:07:19Z",
        "updatedAt" : "2014-08-04T22:07:19Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d26599811f9c8432b3c782f90f264d9255cf49d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +68,72 @@    }\n\n    export interface SourceFile {\n        getSourceUnit(): TypeScript.SourceUnitSyntax;\n        getSyntaxTree(): TypeScript.SyntaxTree;"
  },
  {
    "id" : "aeea8215-7b20-4c82-9530-3e9dc7817efc",
    "prId" : 326,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1673fa5a-dc6c-4b8f-88f8-15cb27e4200e",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Don't you need the type name in the containeNode context eg. qualifying typeof expression?\n",
        "createdAt" : "2014-08-04T20:34:01Z",
        "updatedAt" : "2014-08-04T22:11:41Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ae143264468fa2c6b5bd7a5611beed75e09816b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1818,1822 @@            if (type) {\n                return {\n                    memberName: new TypeScript.MemberNameString(typeChecker.typeToString(type)),\n                    docComment: \"\",\n                    fullSymbolName: typeChecker.symbolToString(symbol, getContainerNode(node)),"
  },
  {
    "id" : "ecd9fe37-65a8-4a9e-b1c2-88f45c0604da",
    "prId" : 326,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9088d424-1f26-46ba-b8c6-3748a08128b3",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Why is symbolKind based on symbol and not declaration? eg. if it is fundule you want the 2 definitions with the correct function and module declaration kind?\n",
        "createdAt" : "2014-08-04T20:38:15Z",
        "updatedAt" : "2014-08-04T22:11:41Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "89fc5a46-476f-4d47-82cf-19539e6f5738",
        "parentId" : "9088d424-1f26-46ba-b8c6-3748a08128b3",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Cause I was just lazy.. will fix that a different change. \n",
        "createdAt" : "2014-08-04T20:40:27Z",
        "updatedAt" : "2014-08-04T22:11:41Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ae143264468fa2c6b5bd7a5611beed75e09816b",
    "line" : 819,
    "diffHunk" : "@@ -1,1 +1978,1982 @@            var declarations = symbol.getDeclarations();\n            var symbolName = typeChecker.symbolToString(symbol, node);\n            var symbolKind = getSymbolKind(symbol);\n            var containerSymbol = symbol.parent;\n            var containerName = containerSymbol ? typeChecker.symbolToString(containerSymbol, node) : \"\";"
  }
]