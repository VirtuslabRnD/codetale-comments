[
  {
    "id" : "d97ead63-c9d1-44f4-a096-1eab90e5ab0b",
    "prId" : 45168,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45168#pullrequestreview-713974774",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59cf96da-0bdc-419b-8f1a-803a634f1abf",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This is a slightly simpler, cheaper, more permissive copy of some filtering that runs on _all_ completions near the end of the pipeline in `shouldIncludeSymbol`. We theoretically should see no difference in behavior from this change because it filters out strictly less than what the later filter will remove. Replicating it sooner in the pipeline just means that we avoid doing module specifier resolution work for symbols that are going to get filtered out later. It does let through value-only modules/namespaces in type positions, which will be filtered out later, because I thought it wasn’t worthwhile to duplicate the check for whether a module/namespace contains any exported types.",
        "createdAt" : "2021-07-23T17:41:25Z",
        "updatedAt" : "2021-07-23T17:41:25Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a1484ba1d843eff1fd9281ddf92cf53210ddede",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +1934,1938 @@                        // `targetFlags` should be the same for each `info`\n                        if (!isTypeOnlyLocation && !importCompletionNode && !(info[0].targetFlags & SymbolFlags.Value)) return;\n                        if (isTypeOnlyLocation && !(info[0].targetFlags & (SymbolFlags.Module | SymbolFlags.Type))) return;\n                        const isCompletionDetailsMatch = detailsEntryId && some(info, i => detailsEntryId.source === stripQuotes(i.moduleSymbol.name));\n                        if (isCompletionDetailsMatch || !detailsEntryId && charactersFuzzyMatchInString(symbolName, lowerCaseTokenText)) {"
  },
  {
    "id" : "89b14ccb-a615-4f6e-89af-d6cb70a323f1",
    "prId" : 44713,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44713#pullrequestreview-694453529",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71bd06e2-361c-43c4-b45e-c1560838e385",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "future work: maybe use general unicode categories to detect lower -> uppercase transition",
        "createdAt" : "2021-06-25T22:15:29Z",
        "updatedAt" : "2021-06-25T22:26:23Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "8406f0e7-579b-46e5-986b-bb73538a7dd7",
        "parentId" : "71bd06e2-361c-43c4-b45e-c1560838e385",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "This seems important, e.g. for languages with accents (I assume languages without lettercase use snake case?).",
        "createdAt" : "2021-06-28T22:51:29Z",
        "updatedAt" : "2021-06-28T22:53:14Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad4238d201e80fd258ef8e84316ae0f173122c4e",
    "line" : 620,
    "diffHunk" : "@@ -1,1 +3333,3337 @@                matchedFirstCharacter ||=\n                    prevChar === undefined || // Beginning of word\n                    CharacterCodes.a <= prevChar && prevChar <= CharacterCodes.z && CharacterCodes.A <= strChar && strChar <= CharacterCodes.Z || // camelCase transition\n                    prevChar === CharacterCodes._ && strChar !== CharacterCodes._; // snake_case transition\n                if (matchedFirstCharacter) {"
  },
  {
    "id" : "2364e2b6-211a-4abd-a4d2-0dcb6928197c",
    "prId" : 44713,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44713#pullrequestreview-694453529",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccc9947e-9bfa-4244-a220-325db18a10f8",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Could have been \"sate\". 😛 ",
        "createdAt" : "2021-06-28T22:48:58Z",
        "updatedAt" : "2021-06-28T22:53:14Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad4238d201e80fd258ef8e84316ae0f173122c4e",
    "line" : 597,
    "diffHunk" : "@@ -1,1 +3310,3314 @@     * True:\n     * 'state' in 'useState'\n     * 'sae' in 'useState'\n     * 'viable' in 'ENVIRONMENT_VARIABLE'\n     *"
  },
  {
    "id" : "7a431a5e-a487-4f88-b852-b321e0edaa0f",
    "prId" : 44713,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44713#pullrequestreview-694453529",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "996dcfee-9a0a-41ac-9a70-31cc4a928a21",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I think we usually use toLower, though I don't know whether that was to improve the behavior.",
        "createdAt" : "2021-06-28T22:52:34Z",
        "updatedAt" : "2021-06-28T22:53:14Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad4238d201e80fd258ef8e84316ae0f173122c4e",
    "line" : 636,
    "diffHunk" : "@@ -1,1 +3349,3353 @@    }\n\n    function toUpperCharCode(charCode: number) {\n        if (CharacterCodes.a <= charCode && charCode <= CharacterCodes.z) {\n            return charCode - 32;"
  },
  {
    "id" : "08cfc8d4-61a0-4c13-8847-79d7f044b2ee",
    "prId" : 44259,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44259#pullrequestreview-669214150",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35b2f470-881e-4c31-889b-daa050273cef",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I discovered this was missing only because I added fourslash server tests... unrelated to main change",
        "createdAt" : "2021-05-26T15:56:14Z",
        "updatedAt" : "2021-05-26T15:56:15Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c439fab4b3c1274ed931f4edf84accc5507518a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1595,1599 @@        function tryGetImportCompletionSymbols(): GlobalsSearch {\n            if (!importCompletionNode) return GlobalsSearch.Continue;\n            isNewIdentifierLocation = true;\n            collectAutoImports(/*resolveModuleSpecifiers*/ true);\n            return GlobalsSearch.Success;"
  },
  {
    "id" : "d1bf320e-c032-49af-99fd-3d9fc9487775",
    "prId" : 44125,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44125#pullrequestreview-661298343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95e02fd6-6400-42e6-8177-e01f79aafddd",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Making a way to return specific keywords is extra credit beyond just fixing the obvious regression; the behavior in 4.2 was not great:\r\n\r\n<img width=\"561\" alt=\"image\" src=\"https://user-images.githubusercontent.com/3277153/118540802-d15a2f00-b705-11eb-8581-8709376135f6.png\">\r\n",
        "createdAt" : "2021-05-17T18:49:21Z",
        "updatedAt" : "2021-05-17T18:49:21Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "afa4d051a9f1878bedd004103acfe6d68d7023ad",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +186,190 @@    }\n\n    function specificKeywordCompletionInfo(keywords: readonly SyntaxKind[]): CompletionInfo {\n        return {\n            isGlobalCompletion: false,"
  },
  {
    "id" : "778c792d-f860-44f8-af26-f973db53c616",
    "prId" : 43880,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43880#pullrequestreview-653945182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e73c27a-5a40-4d0e-b593-fc2deac00142",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "```ts\r\n    const DeprecatedSortTextStart = SortTextId.AutoImportSuggestion; + 2; // for Javascript identifiers since with this change they are preferred over deprecated symbols\r\n```",
        "createdAt" : "2021-05-06T22:34:44Z",
        "updatedAt" : "2021-05-06T22:38:28Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb5ed6d06c8c135ccd9c4b971d901e1b0e6649d7",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +30,34 @@        AutoImportSuggestions\n    }\n\n    // for JavaScript identifiers since they are preferred over deprecated symbols\n    const DeprecatedSortTextStart = SortTextId.AutoImportSuggestions + 2;"
  },
  {
    "id" : "84ab16ec-0d4a-477c-824b-eaab6703d23b",
    "prId" : 43654,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43654#pullrequestreview-645441937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb10d31a-d305-4ae2-a959-721756552fcd",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Do we even know that the current location is in a class right here?",
        "createdAt" : "2021-04-26T16:26:56Z",
        "updatedAt" : "2021-04-27T05:08:27Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "d62bbdd6-9bfb-4616-8f1d-913bb121b9ed",
        "parentId" : "eb10d31a-d305-4ae2-a959-721756552fcd",
        "authorId" : "9f364307-2e28-4740-9fa0-9ceb8079469e",
        "body" : "Agree. Narrowing this fix to inside a `ClassLike` should be more reliable. I've edited the code.",
        "createdAt" : "2021-04-27T05:07:57Z",
        "updatedAt" : "2021-04-27T05:41:30Z",
        "lastEditedBy" : "9f364307-2e28-4740-9fa0-9ceb8079469e",
        "tags" : [
        ]
      }
    ],
    "commit" : "939285c8751fa39328b48ddb9ee807281790a629",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2375,2379 @@            const ancestorClassLike = findAncestor(contextToken.parent, isClassLike);\n            if (ancestorClassLike && contextToken === previousToken && isPreviousPropertyDeclarationTerminated(contextToken, position)) {\n                return false; // Don't block completions.\n            }\n"
  },
  {
    "id" : "6df6ec8f-3ec7-40fb-a78f-85c730028c0f",
    "prId" : 43149,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43149#pullrequestreview-612462852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f726220-c9e1-4786-b642-07d7c6a3e074",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "A semi-related bug that became apparent in the process here was that the same symbol can have multiple origins (e.g., one symbol exported from two different ambient module declarations is allowed to show up as two separate auto import completions), and keying by symbol id didn’t allow that.",
        "createdAt" : "2021-03-15T17:55:28Z",
        "updatedAt" : "2021-03-26T21:29:28Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "badcd839b2359138d0e8262a4cce4f6f4251b8c9",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +101,105 @@\n    /**\n     * Map from symbol index in `symbols` -> SymbolOriginInfo.\n     * Only populated for symbols that come from other modules.\n     */"
  },
  {
    "id" : "4016841f-a328-4941-8e60-7e2dd39a711c",
    "prId" : 43149,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43149#pullrequestreview-612462852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b27feeb-16b4-4ebb-9c6f-f7a196081d8f",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This was just moved from a separate filter statement elsewhere into this spot where we already iterate through the whole list. Should be a small performance improvement, but I moved it because of some order-of-operations change that I honestly don’t remember anymore.",
        "createdAt" : "2021-03-15T18:00:16Z",
        "updatedAt" : "2021-03-26T21:29:28Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "badcd839b2359138d0e8262a4cce4f6f4251b8c9",
    "line" : 371,
    "diffHunk" : "@@ -1,1 +623,627 @@        };\n\n        function shouldIncludeSymbol(symbol: Symbol, symbolToSortTextMap: SymbolSortTextMap): boolean {\n            if (!isSourceFile(location)) {\n                // export = /**/ here we want to get all meanings, so any symbol is ok"
  },
  {
    "id" : "6a0f8e21-be22-4ca9-8d99-e18f2854b761",
    "prId" : 43149,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43149#pullrequestreview-612462852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ccb48fd-eaac-477a-8620-9f067d484674",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "AFAICT this `completionKind` had no effect prior to me moving the aforementioned filtering code, but was conceptually wrong, and changing it to be conceptually right allowed me to move the filter.",
        "createdAt" : "2021-03-15T18:03:47Z",
        "updatedAt" : "2021-03-26T21:29:28Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "badcd839b2359138d0e8262a4cce4f6f4251b8c9",
    "line" : 602,
    "diffHunk" : "@@ -1,1 +1254,1258 @@            tryGetGlobalSymbols();\n            symbols = tagSymbols.concat(symbols);\n            completionKind = CompletionKind.Global;\n            keywordFilters = KeywordCompletionFilters.None;\n        }"
  },
  {
    "id" : "605f6bae-56ef-47bb-a315-7dba2267a5f3",
    "prId" : 43149,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43149#pullrequestreview-612462852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6567bced-110d-40a4-a634-5a254833145a",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Small tweaks here due to changing the origin info map to be keyed by index instead of by symbol id—we now need a Map for deduplication here, since symbol duplication is explicitly allowed in other cases.",
        "createdAt" : "2021-03-15T18:07:02Z",
        "updatedAt" : "2021-03-26T21:29:28Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "badcd839b2359138d0e8262a4cce4f6f4251b8c9",
    "line" : 637,
    "diffHunk" : "@@ -1,1 +1451,1455 @@                // If this is nested like for `namespace N { export const sym = Symbol(); }`, we'll add the completion for `N`.\n                const firstAccessibleSymbol = nameSymbol && getFirstSymbolInChain(nameSymbol, contextToken, typeChecker);\n                if (firstAccessibleSymbol && addToSeen(seenPropertySymbols, getSymbolId(firstAccessibleSymbol))) {\n                    const index = symbols.length;\n                    symbols.push(firstAccessibleSymbol);"
  },
  {
    "id" : "59075f6b-337e-4558-8ef9-2c4ee36dcb56",
    "prId" : 42890,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42890#pullrequestreview-598894668",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "015502be-9d4e-4b8f-b18c-0a447399d710",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "If this is just used as a disambiguator, I think there's a better name than CompletionEntry `-Data`, like CompletionEntry -key, --handle, -identifier, -reference, -lookup.\r\n\r\nLater: After reading the rest of the changes, I still think there's a better name somewhere, but I don't know what it is.",
        "createdAt" : "2021-02-25T18:03:02Z",
        "updatedAt" : "2021-02-26T23:14:54Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "d1eae7b8-cb66-4eba-a120-8ae4b6b2f85e",
        "parentId" : "015502be-9d4e-4b8f-b18c-0a447399d710",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "It’s named to match the LSP spec.",
        "createdAt" : "2021-02-25T18:49:57Z",
        "updatedAt" : "2021-02-26T23:14:54Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "0fdc9b14-98a5-4b63-82d2-523b2123a524",
        "parentId" : "015502be-9d4e-4b8f-b18c-0a447399d710",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I guess the type name could be more indicative of what we’re using it for, but the property name should remain `data`.",
        "createdAt" : "2021-02-25T18:51:18Z",
        "updatedAt" : "2021-02-26T23:14:54Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "62db7d04628ab3c68df8f21226bf8a394ab59805",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +476,480 @@\n        if (originIsExport(origin)) {\n            data = {\n                exportName: origin.exportName,\n                fileName: origin.fileName,"
  },
  {
    "id" : "5e2f9116-842f-4e5e-a6cf-d581519c30f8",
    "prId" : 42890,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42890#pullrequestreview-600015726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5793dbb-1814-433d-9e3c-b4dde64e829f",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think given that this is passed around we need to handle cases where data doesnt match what was passed around so instead of asserting we probably want to ensure that we handle if things are absent",
        "createdAt" : "2021-02-25T19:48:09Z",
        "updatedAt" : "2021-02-26T23:14:54Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "2e7d8945-1d11-463a-99b4-b53b7a201700",
        "parentId" : "c5793dbb-1814-433d-9e3c-b4dde64e829f",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I don’t think that would make much difference—we already have an assertion later that `getCompletionDetails` can successfully find the completion by `entryId`. Even in master, if a bad client passed an incorrect `name` and `source` combination, we would trigger that assertion. We could easily return `undefined` here, but an assertion would be triggered a little bit later when we couldn’t find the module in question. I could replace some of this with a `Debug.checkDefined` but I think it’s generally better to fail fast if `data` violates the assumptions we hold.",
        "createdAt" : "2021-02-26T23:04:00Z",
        "updatedAt" : "2021-02-26T23:14:54Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "62db7d04628ab3c68df8f21226bf8a394ab59805",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +1760,1764 @@\n        function getAutoImportSymbolFromCompletionEntryData(data: CompletionEntryData): { symbol: Symbol, origin: SymbolOriginInfoExport } | undefined {\n            const containingProgram = data.isPackageJsonImport ? host.getPackageJsonAutoImportProvider!()! : program;\n            const checker = containingProgram.getTypeChecker();\n            const moduleSymbol ="
  },
  {
    "id" : "96180056-d119-471d-852c-d2f93fce8447",
    "prId" : 42850,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42850#pullrequestreview-593504856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74f20ac5-5286-43eb-a89f-7914b7de332c",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "initial question: Is `type SymbolId = number`? Why do all the previous updates switch string to number, but this one goes to SymbolId?\r\n\r\nIf it's just `symbol.id`, can you just use the symbol itself as the key instead? The hashed key is likely to be *some* globally unique number either way.",
        "createdAt" : "2021-02-18T17:48:54Z",
        "updatedAt" : "2021-02-18T18:00:33Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "850d88d2-e924-49f4-bd8c-5aa8c72c2cde",
        "parentId" : "74f20ac5-5286-43eb-a89f-7914b7de332c",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yes, `SymbolId` is just `number`. Most of the other keys are _node_ ids, which are also `number`, but don’t have a cute type alias. And yeah, we could use the Symbol itself as the key these days, but I was just making the minimal change needed to work with my update to `addToSeen`.",
        "createdAt" : "2021-02-18T18:05:16Z",
        "updatedAt" : "2021-02-18T18:05:17Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e03b0633c5c8337909187b18d4bfc5d4426f0d1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1610,1614 @@\n        /** True if symbol is a type or a module containing at least one type. */\n        function symbolCanBeReferencedAtTypeLocation(symbol: Symbol, seenModules = new Map<SymbolId, true>()): boolean {\n            const sym = skipAlias(symbol.exportSymbol || symbol, typeChecker);\n            return !!(sym.flags & SymbolFlags.Type) ||"
  },
  {
    "id" : "81e106bf-c799-4d2e-a810-e6d1c616df38",
    "prId" : 42850,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42850#pullrequestreview-593505072",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe509278-1b5e-4ab7-8e55-3c127716cbee",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "side question: is `flatten` a one-level array flatten `: T[][] => T[]`?",
        "createdAt" : "2021-02-18T17:54:04Z",
        "updatedAt" : "2021-02-18T18:00:33Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "8f4e84a5-8271-4fa8-8e55-3c3e4aedaba2",
        "parentId" : "fe509278-1b5e-4ab7-8e55-3c127716cbee",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yep 👍 ",
        "createdAt" : "2021-02-18T18:05:33Z",
        "updatedAt" : "2021-02-18T18:05:33Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e03b0633c5c8337909187b18d4bfc5d4426f0d1",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +1668,1672 @@\n            log(`getSymbolsFromOtherSourceFileExports: ${timestamp() - startTime}`);\n            return flatten(arrayFrom(results.values()));\n\n            function pushSymbol(symbol: Symbol, moduleSymbol: Symbol, isFromPackageJson: boolean, skipFilter: boolean) {"
  },
  {
    "id" : "22a7655d-7e7a-42df-8315-694fd8660ee9",
    "prId" : 42612,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42612#pullrequestreview-581817955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f20d0c5-1f85-446a-9d5a-8ba041057ea8",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "The playground doesn't seem to use commit characters for completions, so it's a bit harder to test, but it looks like this might need to be done for CommaTokens as well",
        "createdAt" : "2021-02-02T20:08:17Z",
        "updatedAt" : "2021-02-02T23:49:42Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "cf46148c-bcf4-4263-a222-a84d3387be1b",
        "parentId" : "7f20d0c5-1f85-446a-9d5a-8ba041057ea8",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Donezo",
        "createdAt" : "2021-02-02T22:10:25Z",
        "updatedAt" : "2021-02-02T23:49:42Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "d158c25b1ed131487d28ce22b345ff188aff9adb",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +1885,1889 @@                    case SyntaxKind.OpenBraceToken:\n                        return containingNodeKind === SyntaxKind.ClassDeclaration             // class A { |\n                            || containingNodeKind === SyntaxKind.ObjectLiteralExpression;     // const obj = { |\n\n                    case SyntaxKind.EqualsToken:"
  },
  {
    "id" : "3fcf3d75-7df7-4a01-a554-44ed6f8f324f",
    "prId" : 42141,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42141#pullrequestreview-574672580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c2b103f-f1f9-4163-afa0-828b7d8269f8",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I don’t see you checking for whether the file is a module (`sourceFile.externalModuleIndicator`), so it looks like this will apply to scripts as well, which I think we don’t want. You should add another test for that (completions in a file with no imports or exports).",
        "createdAt" : "2021-01-21T17:50:14Z",
        "updatedAt" : "2021-01-22T23:14:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "9e3362be-96cf-4c1f-974c-749c8ed169fb",
        "parentId" : "0c2b103f-f1f9-4163-afa0-828b7d8269f8",
        "authorId" : "b4616077-7f3f-4889-8dce-244af46520c7",
        "body" : "It seems if the file is a script we never offer auto import at all by running `shouldOfferImportCompletions()`. I'll add the test.",
        "createdAt" : "2021-01-22T02:02:39Z",
        "updatedAt" : "2021-01-22T23:14:50Z",
        "lastEditedBy" : "b4616077-7f3f-4889-8dce-244af46520c7",
        "tags" : [
        ]
      },
      {
        "id" : "08b93faa-b68a-4e8f-8df0-3717c57df311",
        "parentId" : "0c2b103f-f1f9-4163-afa0-828b7d8269f8",
        "authorId" : "b4616077-7f3f-4889-8dce-244af46520c7",
        "body" : "What other case should we cover? I tried something like the example below and there was no Auto Import provided\r\n```ts\r\nconst el = class/*1*/\r\n```",
        "createdAt" : "2021-01-22T02:49:40Z",
        "updatedAt" : "2021-01-22T23:14:50Z",
        "lastEditedBy" : "b4616077-7f3f-4889-8dce-244af46520c7",
        "tags" : [
        ]
      },
      {
        "id" : "6dd5ac18-8599-4038-9782-6b269875f5e4",
        "parentId" : "0c2b103f-f1f9-4163-afa0-828b7d8269f8",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "> It seems if the file is a script we never offer auto import at all by running `shouldOfferImportCompletions()`\r\n\r\nYou’ll want to add some other way of making that function return true, like setting `module` to `es2015`.",
        "createdAt" : "2021-01-22T17:50:42Z",
        "updatedAt" : "2021-01-22T23:14:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "a3301b54-166e-4c41-9aa2-e6935251e21a",
        "parentId" : "0c2b103f-f1f9-4163-afa0-828b7d8269f8",
        "authorId" : "b4616077-7f3f-4889-8dce-244af46520c7",
        "body" : "Ya thanks for pointing that out. It should be ok now with the last commit. Please review that",
        "createdAt" : "2021-01-22T22:35:12Z",
        "updatedAt" : "2021-01-22T23:14:50Z",
        "lastEditedBy" : "b4616077-7f3f-4889-8dce-244af46520c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab4dab1c3c5970d3cb6ae3e96babd5b42e1c55de",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1523,1527 @@                    // External modules can have global export declarations that will be\n                    // available as global keywords in all scopes. But if the external module\n                    // already has an explicit export and user only wants to user explicit\n                    // module imports then the global keywords will be filtered out so auto\n                    // import suggestions will win in the completion"
  },
  {
    "id" : "d9b3cf75-f882-4324-89e7-544d5411188a",
    "prId" : 40976,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40976#pullrequestreview-505115627",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40e9d04b-5b90-4ee1-a706-4a29c0a33ce1",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Technically we're relying on the fact that there will be a contextual type on the RHS of an `=`, so that we must be on the left side of the `=`. Not sure if that's an issue long-term.",
        "createdAt" : "2020-10-08T19:27:31Z",
        "updatedAt" : "2020-10-08T19:27:32Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "cdd472a7-9743-464f-af5c-d6bb0537d9d7",
        "parentId" : "40e9d04b-5b90-4ee1-a706-4a29c0a33ce1",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "You are right. I can change to `typeChecker.getTypeAtLocation(node.parent.right);`. Do I need to do it?",
        "createdAt" : "2020-10-08T19:32:02Z",
        "updatedAt" : "2020-10-08T19:32:03Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      },
      {
        "id" : "a62573e2-39d9-41eb-b8a4-174722aabf2b",
        "parentId" : "40e9d04b-5b90-4ee1-a706-4a29c0a33ce1",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "It's not so much that - the `=` will always return the type of the right operand. It's more that you want to check that `node.parent.left === node`, but it's up to you. I don't think it'll be a problem long-term.",
        "createdAt" : "2020-10-08T19:51:05Z",
        "updatedAt" : "2020-10-08T19:51:05Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "181a3372fd47fac8a080abe0064364f1fbd1b3b7",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +2841,2845 @@        if (isBinaryExpression(node.parent) && node.parent.operatorToken.kind === SyntaxKind.EqualsToken) {\n            return typeChecker.getTypeAtLocation(node.parent);\n        }\n        return undefined;\n    }"
  },
  {
    "id" : "0fe00ecd-67ef-455d-8e85-0d2437ef94b7",
    "prId" : 40428,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40428#pullrequestreview-486175281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7419939b-7132-4bce-815f-e04e933ceebb",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "@uniqueiniquity is this change something that would impact IntelliCode/VS tooling?",
        "createdAt" : "2020-09-08T19:13:07Z",
        "updatedAt" : "2020-09-08T19:13:07Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "d2ce4239-93c8-4f81-9b2a-706b8e2e83fe",
        "parentId" : "7419939b-7132-4bce-815f-e04e933ceebb",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "Yep 😫 let me see if I can characterize what will need to change and I'll circle back.",
        "createdAt" : "2020-09-08T19:29:52Z",
        "updatedAt" : "2020-09-08T19:29:52Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "1d75a427-24a4-4b39-80f7-39420ead890f",
        "parentId" : "7419939b-7132-4bce-815f-e04e933ceebb",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "Good to go on the VS side for this change 👍 ",
        "createdAt" : "2020-09-10T17:51:46Z",
        "updatedAt" : "2020-09-10T17:51:46Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "e8f0c377-14fd-4268-a0ac-f9e47d07362e",
        "parentId" : "7419939b-7132-4bce-815f-e04e933ceebb",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Thanks!",
        "createdAt" : "2020-09-10T17:53:25Z",
        "updatedAt" : "2020-09-10T17:53:25Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c3d11f2fb9129f1a2aaeff0c743856ca6a755a2",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +9,13 @@        GlobalsOrKeywords = \"5\",\n        AutoImportSuggestions = \"6\",\n        JavascriptIdentifiers = \"7\"\n    }\n    export type Log = (message: string) => void;"
  },
  {
    "id" : "a9a6824f-a075-4539-bb9d-2ed4344ada6a",
    "prId" : 39379,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39379#pullrequestreview-443333348",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01fb3503-b07a-49fe-9a4a-db824a70be91",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Oof",
        "createdAt" : "2020-07-06T18:59:22Z",
        "updatedAt" : "2020-07-06T18:59:22Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d137e4a23b75730cf83c31350127aa8942d5ce25",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2433,2437 @@                !!propertySymbol.declarations &&\n                !(getDeclarationModifierFlagsFromSymbol(propertySymbol) & ModifierFlags.Private) &&\n                !(propertySymbol.valueDeclaration && isPrivateIdentifierPropertyDeclaration(propertySymbol.valueDeclaration)));\n        }\n"
  },
  {
    "id" : "bd4cbe16-ddc2-4405-9681-a044de2b41b6",
    "prId" : 37652,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37652#pullrequestreview-383255968",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81bf82c5-be56-4976-81e5-5764dfb2c595",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This change also fixes another round of duplication in JS, the “last-resort random identifiers” entries. They weren’t mutually exclusive with globals, so this is what I was seeing before:\r\n\r\n<img width=\"612\" alt=\"Screen Shot 2020-03-27 at 3 18 46 PM\" src=\"https://user-images.githubusercontent.com/3277153/77809216-0ca22600-704c-11ea-97ed-23386d832ebb.png\">\r\n\r\nand after:\r\n\r\n<img width=\"610\" alt=\"Screen Shot 2020-03-27 at 3 20 11 PM\" src=\"https://user-images.githubusercontent.com/3277153/77809227-13309d80-704c-11ea-9eca-d6cfdd8e74a1.png\">\r\n\r\n😅 ",
        "createdAt" : "2020-03-27T23:58:17Z",
        "updatedAt" : "2020-03-31T18:37:56Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "c078a81474e7772b12f86a8f438fc1617e8bd4fb",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +482,486 @@        // true otherwise. Based on the order we add things we will always see locals first, then globals, then module exports.\n        // So adding a completion for a local will prevent us from adding completions for external module exports sharing the same name.\n        const uniques = createMap<boolean>();\n        for (const symbol of symbols) {\n            const origin = symbolToOriginInfoMap ? symbolToOriginInfoMap[getSymbolId(symbol)] : undefined;"
  },
  {
    "id" : "c2a04d40-1661-4a19-a1eb-e1b6a66ad7ff",
    "prId" : 37652,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37652#pullrequestreview-384092624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3feab08c-98cd-47e3-ac22-12bab5529bdc",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Some collection types return a boolean from insertion indicating whether the collection was updated.  This has the advantage that you can add-if-not-present in a single call.",
        "createdAt" : "2020-03-28T01:29:20Z",
        "updatedAt" : "2020-03-31T18:37:56Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "3310ca87-c193-4de2-9817-05a494cf2d33",
        "parentId" : "3feab08c-98cd-47e3-ac22-12bab5529bdc",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "The purpose of this type is just to obscure the value type and prevent consumers from testing the result of the underlying Map’s `get` method for truthiness, since `false` indicates something very different from `undefined`. I was actually hoping to just _use_ the Map object and obscure its value type with this interface, but I couldn’t do that because the `set` method needs two arguments, one of which is a value.",
        "createdAt" : "2020-03-30T17:50:55Z",
        "updatedAt" : "2020-03-31T18:37:57Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "c078a81474e7772b12f86a8f438fc1617e8bd4fb",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +70,74 @@\n    interface UniqueNameSet {\n        add(name: string): void;\n        has(name: string): boolean;\n    }"
  },
  {
    "id" : "bc9fbad6-2aa0-450a-b4fd-5873aee8f7f7",
    "prId" : 37652,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37652#pullrequestreview-385047319",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e62324f-5b05-4b8f-9fbe-e4a108945fc9",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "is \"/\" intentional at the end?",
        "createdAt" : "2020-03-31T19:23:49Z",
        "updatedAt" : "2020-03-31T19:23:50Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "bcbca24d-6327-4774-9108-b16a7822d86a",
        "parentId" : "0e62324f-5b05-4b8f-9fbe-e4a108945fc9",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yeah, it’s explained in the comment—we need these values to be impossible values for an auto-import specifier. If someone had a folder named `ThisProperty` and a `baseUrl` set, we could conceivably generate an auto-import suggestion whose `source` is `ThisProperty`.",
        "createdAt" : "2020-03-31T19:40:42Z",
        "updatedAt" : "2020-03-31T19:40:42Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "c078a81474e7772b12f86a8f438fc1617e8bd4fb",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +25,29 @@    export enum CompletionSource {\n        /** Completions that require `this.` insertion text */\n        ThisProperty = \"ThisProperty/\"\n    }\n"
  },
  {
    "id" : "e5bbcd92-9baf-4c0f-b61e-67f19030f841",
    "prId" : 34958,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/34958#pullrequestreview-312786233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7db80ab-264e-45b1-b805-579ea895277b",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Is `/**/` an existing convention for cursor location?  I missed it until I got to the explanatory text (I'd usually expect a `|` somewhere).",
        "createdAt" : "2019-11-06T22:05:20Z",
        "updatedAt" : "2019-11-06T22:35:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "8fd7ee14-a417-4566-9dda-3e250ea2863c",
        "parentId" : "d7db80ab-264e-45b1-b805-579ea895277b",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yeah, because it’s working fourslash syntax, and it doesn’t mess up syntax highlighting in a markdown codeblock.",
        "createdAt" : "2019-11-06T22:24:34Z",
        "updatedAt" : "2019-11-06T22:35:44Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "d27b008a9aff0f4eeb357ee2b254c8a9e63b5d73",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1690,1694 @@                if (contextToken.parent.kind === SyntaxKind.JsxOpeningElement) {\n                    // Two possibilities:\n                    //   1. <div>/**/\n                    //      - contextToken: GreaterThanToken (before cursor)\n                    //      - location: JSXElement"
  },
  {
    "id" : "d8f48288-4c45-49b5-add8-cc63bd5781b9",
    "prId" : 34822,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/34822#pullrequestreview-320229395",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "408117b2-fdd3-407e-b219-07ede6be9954",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "May be do this only when `if (getObjectFlags(typeForObject) & ObjectFlags.Class)`   ?",
        "createdAt" : "2019-11-20T19:49:38Z",
        "updatedAt" : "2019-11-22T14:03:04Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "29e111307b92c96c12374c836d0510fa21d89a3a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1829,1833 @@                    // In a binding pattern, get only known properties (unless in the same scope).\n                    // Everywhere else we will get all possible properties.\n                    const containerClass = getContainingClass(objectLikeContainer);\n                    typeMembers = typeChecker.getPropertiesOfType(typeForObject).filter(symbol =>\n                        // either public"
  },
  {
    "id" : "b99e1753-7992-42ae-9069-ab590fa5e4d1",
    "prId" : 34524,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/34524#pullrequestreview-303414551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8510ca81-7673-4c7f-af4d-3d16b560a8df",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "🤷‍♂ \r\n\r\n![image](https://user-images.githubusercontent.com/3277153/67031415-56aed500-f0c6-11e9-9ab3-2b2b69958e27.png)\r\n",
        "createdAt" : "2019-10-17T17:10:39Z",
        "updatedAt" : "2019-10-17T17:11:31Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "984ae7ff-ed4a-43c7-bd56-441009d9fa3b",
        "parentId" : "8510ca81-7673-4c7f-af4d-3d16b560a8df",
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "Haha, I guess code-spell check doesn't have it ",
        "createdAt" : "2019-10-17T17:11:59Z",
        "updatedAt" : "2019-10-17T17:11:59Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      },
      {
        "id" : "fb002626-1f80-4935-9041-a9b92150f591",
        "parentId" : "8510ca81-7673-4c7f-af4d-3d16b560a8df",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I make up a lot of words but this wasn’t one of them! 😛 ",
        "createdAt" : "2019-10-17T17:14:06Z",
        "updatedAt" : "2019-10-17T17:14:06Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "85010fa6fefae471f6b70959deea81239195f46e",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1466,1470 @@\n        /**\n         * Gathers symbols that can be imported from other files, de-duplicating along the way. Symbols can be \"duplicates\"\n         * if re-exported from another module, e.g. `export { foo } from \"./a\"`. That syntax creates a fresh symbol, but\n         * it’s just an alias to the first, and both have the same name, so we generally want to filter those aliases out,"
  },
  {
    "id" : "133c2b35-5514-4088-991b-05084a91f8b4",
    "prId" : 33294,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33294#pullrequestreview-293969633",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "071eb358-b8e3-4604-a7e7-5dce22f7a316",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Need tests for these scenarios..",
        "createdAt" : "2019-09-25T16:43:03Z",
        "updatedAt" : "2019-09-30T19:11:29Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "ad4a1b4c-6625-4615-8d09-a962163b5027",
        "parentId" : "071eb358-b8e3-4604-a7e7-5dce22f7a316",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I've added some tests for completions following `?.` and following `.` when a `?.` could be inserted. Are these sufficient, are there any other test cases you would recommend?",
        "createdAt" : "2019-09-26T20:01:00Z",
        "updatedAt" : "2019-09-30T19:11:29Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfc798fc64e142d0640424b58afdd8bcdf93b359",
    "line" : 232,
    "diffHunk" : "@@ -1,1 +1219,1223 @@\n            function getNullableSymbolOriginInfoKind(kind: SymbolOriginInfoKind) {\n                return insertQuestionDot ? kind | SymbolOriginInfoKind.Nullable : kind;\n            }\n        }"
  },
  {
    "id" : "226f95f2-afe4-4eef-9d2d-cd9f6379e6fa",
    "prId" : 32726,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32726#pullrequestreview-274260119",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f20c2c62-d601-458f-b6b4-b7c1cb343db9",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Is this the right fix? I get the sense that `contextToken.parent.parent` isn't actually a useful node, since the point of the check is simply to do nothing if you're not in the middle of the current class element.",
        "createdAt" : "2019-08-13T08:25:02Z",
        "updatedAt" : "2019-08-13T08:25:02Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "eeffb61b-dfa9-4b22-ba8c-a134d8e2c9e1",
        "parentId" : "f20c2c62-d601-458f-b6b4-b7c1cb343db9",
        "authorId" : "b428e185-edf8-46ba-b5ca-8da3e63be207",
        "body" : "But the `contextToken.parent.parent` is a `ClassDeclaration` when `context.kind === SyntaxKind.SemicolonToken`. What I attempt to do is making the /\\*1\\*/ and /\\*2\\*/ should be in the same context.\r\n```ts\r\nclass C {\r\n\t/*1*/ // `contextToken.parent` is `ClassDeclaration`\r\n\tprivate a = 1;\r\n\t/*2*/ // `contextToken.parent` is `PropertyDeclaration`, `contextToken.parent.parent` is `ClassDeclaration`\r\n}\r\n```\r\nDo I miss something else?",
        "createdAt" : "2019-08-13T12:54:11Z",
        "updatedAt" : "2019-08-13T13:24:32Z",
        "lastEditedBy" : "b428e185-edf8-46ba-b5ca-8da3e63be207",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1bca8ff2a077931e6fdd569663118782378adc3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1567,1571 @@            if (!isClassLike(decl)) return GlobalsSearch.Success;\n\n            const classElement = contextToken.kind === SyntaxKind.SemicolonToken ? contextToken.parent.parent : contextToken.parent;\n            let classElementModifierFlags = isClassElement(classElement) ? getModifierFlags(classElement) : ModifierFlags.None;\n            // If this is context token is not something we are editing now, consider if this would lead to be modifier"
  },
  {
    "id" : "a4152491-b54b-40f2-a186-817ee6941b26",
    "prId" : 32243,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32243#pullrequestreview-257757680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0adfb2f-51fb-4572-96b0-0b25a8e25ccc",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Adding the `isObjectTypeDeclaration(location)` miiiight have been overly conservative, but I suggested it to err on the side of caution—the smallest reasonable net I could think of that would catch the repros provided.",
        "createdAt" : "2019-07-03T22:14:18Z",
        "updatedAt" : "2019-07-08T18:43:29Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "e55f97ec282d720f9bf58792ece0acc048202f93",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +2188,2192 @@                if (!isFromObjectTypeDeclaration(contextToken)) {\n                    // class c extends React.Component { a: () => 1\\n| }\n                    if (getLineAndCharacterOfPosition(sourceFile, contextToken.getEnd()).line !== getLineAndCharacterOfPosition(sourceFile, position).line && isObjectTypeDeclaration(location)) {\n                        return location;\n                    }"
  },
  {
    "id" : "b23e71a9-3a6d-4702-84c3-d50ebb291f83",
    "prId" : 32243,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32243#pullrequestreview-259100866",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad920585-7898-4720-ae6d-48993b48ac6e",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Can you please reverse the order of checks here (that is checking `isObjectTypeDeclaration(location)` before line?",
        "createdAt" : "2019-07-08T18:50:54Z",
        "updatedAt" : "2019-07-08T18:50:55Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "cb134c01-0235-4f9c-bd46-89c40843cc38",
        "parentId" : "ad920585-7898-4720-ae6d-48993b48ac6e",
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "Switching the if ordering changes the behavior from what it previously was, and starts to trigger behavior which I think we don't want.\r\n\r\n[This fourslash](https://github.com/Microsoft/TypeScript/blob/e55f97ec282d720f9bf58792ece0acc048202f93/tests/cases/fourslash/completionsGeneratorFunctions.ts)  test fails:\r\n```\r\n/// <reference path=\"fourslash.ts\" />\r\n\r\n////function /*a*/ ;\r\n////function* /*b*/ ;\r\n////interface I {\r\n////    abstract baseMethod(): Iterable<number>;\r\n////}\r\n////class C implements I {\r\n////    */*c*/ ;\r\n////    public */*d*/\r\n////}\r\n////const o: I = {\r\n////    */*e*/\r\n////};\r\n////1 * /*f*/\r\n\r\nverify.completions(\r\n    { marker: [\"a\", \"b\"], exact: undefined, isNewIdentifierLocation: true },\r\n    { marker: [\"c\", \"d\"], exact: [\"baseMethod\"], isNewIdentifierLocation: true },\r\n    { marker: \"e\", exact: [\"baseMethod\"] },\r\n    { marker: \"f\", includes: [{ name: \"Number\", sortText: completion.SortText.GlobalsOrKeywords }] },\r\n);\r\n```\r\n\r\nWith \r\n\r\n```\r\n  1) fourslash tests\r\n       tests/cases/fourslash/completionsGeneratorFunctions.ts\r\n         fourslash test completionsGeneratorFunctions.ts runs correctly:\r\n     Error: At f: Expected 'isNewIdentifierLocation' to be false, got true\r\n```\r\n\r\nWhich is returning an empty array of completions",
        "createdAt" : "2019-07-08T19:07:05Z",
        "updatedAt" : "2019-07-08T19:07:05Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "e55f97ec282d720f9bf58792ece0acc048202f93",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +2188,2192 @@                if (!isFromObjectTypeDeclaration(contextToken)) {\n                    // class c extends React.Component { a: () => 1\\n| }\n                    if (getLineAndCharacterOfPosition(sourceFile, contextToken.getEnd()).line !== getLineAndCharacterOfPosition(sourceFile, position).line && isObjectTypeDeclaration(location)) {\n                        return location;\n                    }"
  },
  {
    "id" : "2a028175-8efb-4b2d-ab7d-45511789e45a",
    "prId" : 32101,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32101#pullrequestreview-260278505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef628696-57eb-40f2-a402-2a1717b3f869",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I don't think you want to push symbol to completions at all if `preferences.includeCompletionsWithInsertText` is false. Your tests don't have anything that tests this with`preferences.includeCompletionsWithInsertText`  as `false`. Please add test for with that preference as false as well. Thanks",
        "createdAt" : "2019-07-10T18:29:32Z",
        "updatedAt" : "2019-07-18T05:07:58Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f527388021867905e2e05bbcab04e5871121a579",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +1069,1073 @@\n            function addPromiseSymbolOriginInfo (symbol: Symbol) {\n                if (insertAwait && preferences.includeCompletionsWithInsertText && !symbolToOriginInfoMap[getSymbolId(symbol)]) {\n                    symbolToOriginInfoMap[getSymbolId(symbol)] = { kind: SymbolOriginInfoKind.Promise };\n                }"
  },
  {
    "id" : "8b6d5a32-1dae-49f2-93c5-c2b72eba7dc3",
    "prId" : 31893,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31893#pullrequestreview-257646280",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0343ab6-939e-4211-a8e4-7e33e9cbcd1e",
        "parentId" : null,
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "👌 ",
        "createdAt" : "2019-07-03T17:48:17Z",
        "updatedAt" : "2019-07-12T00:10:59Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "de8ef3265310344a23c206be1933d123545ee7e0",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +1305,1309 @@         * Note: Bucket A is passed in as the parameter `symbols` and mutated.\n         */\n        function getSymbolsFromOtherSourceFileExports(/** Bucket A */ symbols: Symbol[], tokenText: string, target: ScriptTarget, host: LanguageServiceHost): void {\n            const tokenTextLowerCase = tokenText.toLowerCase();\n            const seenResolvedModules = createMap<true>();"
  },
  {
    "id" : "f49f8adb-e300-4ff8-bf54-fd58d52f96a1",
    "prId" : 31893,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31893#pullrequestreview-260807327",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba68bc06-be3f-4d11-8907-891b0bcde78b",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I would add a short note that the function operates by side-effect on Bucket A, the parameter `symbols`.",
        "createdAt" : "2019-07-11T16:19:16Z",
        "updatedAt" : "2019-07-12T00:10:59Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "de8ef3265310344a23c206be1933d123545ee7e0",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +1301,1305 @@         * 4. After we’ve iterated through every symbol of every module, any symbol left in Bucket C means that step 3 didn’t\n         *    occur for that symbol---that is, the original symbol is not in Bucket A, so we should include the alias. Move\n         *    everything from Bucket C to Bucket A.\n         *\n         * Note: Bucket A is passed in as the parameter `symbols` and mutated."
  },
  {
    "id" : "523fab6a-9193-49e6-941f-f7cee04a0527",
    "prId" : 31290,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31290#pullrequestreview-236227242",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98bbae19-82e3-44ce-bac7-fcca24775fa5",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Seems like you could just have a `symbols.push(symbol)` at the end and use an early return in the inner-most `if`",
        "createdAt" : "2019-05-10T17:13:10Z",
        "updatedAt" : "2019-05-24T15:39:46Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "8854aa11-1581-413b-a2aa-b6eea0464e0b",
        "parentId" : "98bbae19-82e3-44ce-bac7-fcca24775fa5",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "@DanielRosenwasser done.",
        "createdAt" : "2019-05-10T17:36:05Z",
        "updatedAt" : "2019-05-24T15:39:46Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8dba4d64677dc3e19e6d73ed5c14d345daef3cd5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1036,1040 @@                }\n                else if (preferences.includeCompletionsWithInsertText) {\n                    symbols.push(symbol);\n                }\n            }"
  },
  {
    "id" : "3b2b81ac-73b7-4e50-b40b-80fafa3b37fb",
    "prId" : 31290,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31290#pullrequestreview-240792843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83875109-cd21-4ff4-a40e-f63c8c2c1e19",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think in the else part you want to check `includeInsertTextCompletions` to be true and only then add symbol",
        "createdAt" : "2019-05-22T16:18:29Z",
        "updatedAt" : "2019-05-24T15:39:46Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "adf09236-bfad-44f4-9bd8-08e3825ea308",
        "parentId" : "83875109-cd21-4ff4-a40e-f63c8c2c1e19",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "@samelhusseini do you mean `preferences.includeInsertTextCompletions`?\r\n\r\n```typescript\r\nif (preferences.includeCompletionsWithInsertText) {\r\n   symbols.push(symbol);\r\n}\r\n```",
        "createdAt" : "2019-05-22T17:45:03Z",
        "updatedAt" : "2019-05-24T15:39:46Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      },
      {
        "id" : "7758dd76-0d9e-4ce7-9344-9ba872f24e26",
        "parentId" : "83875109-cd21-4ff4-a40e-f63c8c2c1e19",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Yes",
        "createdAt" : "2019-05-22T17:56:43Z",
        "updatedAt" : "2019-05-24T15:39:46Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "524ad9b3-b304-4dc9-803c-f6e278d19c6e",
        "parentId" : "83875109-cd21-4ff4-a40e-f63c8c2c1e19",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "@sheetalkamat oke, thanks 👍",
        "createdAt" : "2019-05-22T18:05:14Z",
        "updatedAt" : "2019-05-24T15:39:46Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8dba4d64677dc3e19e6d73ed5c14d345daef3cd5",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1037,1041 @@                else if (preferences.includeCompletionsWithInsertText) {\n                    symbols.push(symbol);\n                }\n            }\n            else {"
  },
  {
    "id" : "82d6a0a3-7916-4bee-9839-371d6bf55f03",
    "prId" : 30414,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30414#pullrequestreview-215261343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a8023f8-b3c9-4219-aa2e-b37ddea8ddd5",
        "parentId" : null,
        "authorId" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "body" : "what about `implements`?",
        "createdAt" : "2019-03-15T21:45:15Z",
        "updatedAt" : "2019-03-15T22:21:54Z",
        "lastEditedBy" : "fda8894a-88d1-42dd-a55e-7a8592225c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "34a7b7bbd84cef305d86a59345a9bd5572251b05",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +1992,1996 @@            case SyntaxKind.ImplementsKeyword:\n            case SyntaxKind.InferKeyword:\n            case SyntaxKind.InterfaceKeyword:\n            case SyntaxKind.IsKeyword:\n            case SyntaxKind.KeyOfKeyword:"
  },
  {
    "id" : "4ca2147c-eb30-4158-bf8e-666a8bad9c7c",
    "prId" : 30414,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30414#pullrequestreview-216874052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf86baec-b6a0-4416-a2e8-8c1b9e472930",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Can this list be sourced from a single place, so this and the similar list in `getInJsKeywords` don't drift?  IIRC we have a function for converting from keyword string to kind and another for the reverse.",
        "createdAt" : "2019-03-20T07:03:51Z",
        "updatedAt" : "2019-03-20T07:04:12Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "38967bac-cd7d-49d3-adc4-763a0ee1187b",
        "parentId" : "cf86baec-b6a0-4416-a2e8-8c1b9e472930",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "The `getInJsKeywords` is for test and we don't want to mix that but have that list explicit just like any other keyword filter tests that we have.",
        "createdAt" : "2019-03-20T17:30:21Z",
        "updatedAt" : "2019-03-20T17:30:21Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "34a7b7bbd84cef305d86a59345a9bd5572251b05",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +1983,1987 @@    function isTypeScriptOnlyKeyword(kind: SyntaxKind) {\n        switch (kind) {\n            case SyntaxKind.AbstractKeyword:\n            case SyntaxKind.AnyKeyword:\n            case SyntaxKind.BigIntKeyword:"
  },
  {
    "id" : "38af8f0a-367b-4c5e-860b-b4d22732de2d",
    "prId" : 28818,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28818#pullrequestreview-181437726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f54ac1ab-4f6d-4be8-99c6-0149bd542820",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I don't think this is right fix. You want to create `AsyncFunctionLikeBodyKeywords` and add await in there to ensure that await is offered only in `async` functions? Also remove it from global completions?",
        "createdAt" : "2018-12-04T16:50:07Z",
        "updatedAt" : "2018-12-04T16:50:08Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "0aa26c09-3025-4006-acac-b2a7e2925af8",
        "parentId" : "f54ac1ab-4f6d-4be8-99c6-0149bd542820",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Also please add a test case.",
        "createdAt" : "2018-12-04T16:50:23Z",
        "updatedAt" : "2018-12-04T16:50:23Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "a20f2cab-6a14-4b98-ae9c-d1ca32f7ea79",
        "parentId" : "f54ac1ab-4f6d-4be8-99c6-0149bd542820",
        "authorId" : "181ee19d-ae5e-47f8-86da-9407f6afe565",
        "body" : "I dont think i have enough skill to remove `await` from global keywords and create `AsyncFunctionLikeBodyKeywords`.\r\nI had no idea about how to adding `AsyncFunctionLikeBodyKeywords`",
        "createdAt" : "2018-12-04T17:33:55Z",
        "updatedAt" : "2018-12-04T17:34:31Z",
        "lastEditedBy" : "181ee19d-ae5e-47f8-86da-9407f6afe565",
        "tags" : [
        ]
      },
      {
        "id" : "d36aad2d-0400-457d-8fc2-8a8ca1b04f54",
        "parentId" : "f54ac1ab-4f6d-4be8-99c6-0149bd542820",
        "authorId" : "181ee19d-ae5e-47f8-86da-9407f6afe565",
        "body" : "BTW, For now that maybe a shortcut way to adding `await` keyword to inside of function. \r\nI am working so smooth with that fix by local build.",
        "createdAt" : "2018-12-04T17:39:34Z",
        "updatedAt" : "2018-12-04T18:26:30Z",
        "lastEditedBy" : "181ee19d-ae5e-47f8-86da-9407f6afe565",
        "tags" : [
        ]
      },
      {
        "id" : "c44a6224-6311-4aff-9bb1-cee562d35b11",
        "parentId" : "f54ac1ab-4f6d-4be8-99c6-0149bd542820",
        "authorId" : "181ee19d-ae5e-47f8-86da-9407f6afe565",
        "body" : "I really want that...\r\n\r\n- Typescript 3.2.2 (Quick Fix)\r\n\r\n  1. Add `await` inside of function for quick fix\r\n  2. At least people can use it as quickly as possible\r\n\r\nThen\r\n\r\n- Typescript 3.3.0 (Deep Fix)\r\n\r\n  1. Create `AsyncFunctionLikeBodyKeywords`\r\n  2. Remove `await` from `globalKeywords`\r\n  3. Remove `await` from `normal function`\r\n  4. Add `await` inside of `async function` only\r\n  5. Modify test to fit those fixes\r\n",
        "createdAt" : "2018-12-04T18:19:14Z",
        "updatedAt" : "2018-12-04T18:25:50Z",
        "lastEditedBy" : "181ee19d-ae5e-47f8-86da-9407f6afe565",
        "tags" : [
        ]
      },
      {
        "id" : "3295d20b-afb7-4da4-8d8d-df1f49822d2d",
        "parentId" : "f54ac1ab-4f6d-4be8-99c6-0149bd542820",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "@DanielRosenwasser To triage on if  we want this fix as suggested by @Cow258 for 3.2.2?",
        "createdAt" : "2018-12-04T18:22:45Z",
        "updatedAt" : "2018-12-04T18:22:45Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "db653d33-8c2f-4fab-82f5-0e35457b85b1",
        "parentId" : "f54ac1ab-4f6d-4be8-99c6-0149bd542820",
        "authorId" : "181ee19d-ae5e-47f8-86da-9407f6afe565",
        "body" : "> Also please add a test case.\r\n\r\nAfter this fix `await` keyword will be offered global and inside of function.\r\n![await](https://user-images.githubusercontent.com/14261588/49464834-02e12780-f837-11e8-9c6f-0eeac2759749.gif)\r\n",
        "createdAt" : "2018-12-04T18:39:52Z",
        "updatedAt" : "2018-12-04T18:39:52Z",
        "lastEditedBy" : "181ee19d-ae5e-47f8-86da-9407f6afe565",
        "tags" : [
        ]
      },
      {
        "id" : "a935744e-8799-41fd-b307-af9fe0e076d6",
        "parentId" : "f54ac1ab-4f6d-4be8-99c6-0149bd542820",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "It sounds like you already have the right direction for the fix, so let's just do that today and get it into 3.2.2.",
        "createdAt" : "2018-12-04T18:57:21Z",
        "updatedAt" : "2018-12-04T18:57:21Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "73be0ef9-1aa1-4568-8a72-61efb444575e",
        "parentId" : "f54ac1ab-4f6d-4be8-99c6-0149bd542820",
        "authorId" : "181ee19d-ae5e-47f8-86da-9407f6afe565",
        "body" : "Thanks! ",
        "createdAt" : "2018-12-04T19:27:57Z",
        "updatedAt" : "2018-12-04T19:27:57Z",
        "lastEditedBy" : "181ee19d-ae5e-47f8-86da-9407f6afe565",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2851d2ddc6e61c9c6f106816ab36d655ce1676f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1958,1962 @@\n    function isFunctionLikeBodyKeyword(kind: SyntaxKind) {\n        return kind === SyntaxKind.AsyncKeyword || kind === SyntaxKind.AwaitKeyword || !isContextualKeyword(kind) && !isClassMemberCompletionKeyword(kind);\n    }\n"
  },
  {
    "id" : "557a003c-ee00-4d0c-aae4-52dd72a2dd47",
    "prId" : 27912,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27912#pullrequestreview-181172516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b69dc0d-e4d1-4370-bcf5-f8c3d31a66c2",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This was definitely a typo.",
        "createdAt" : "2018-12-04T10:01:20Z",
        "updatedAt" : "2018-12-04T10:01:20Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7a26e2a559d1457840c54b4c5fabdcb96c7656c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2151,2155 @@                    return false;\n                case KeywordCompletionFilters.All:\n                    return kind === SyntaxKind.AsyncKeyword || SyntaxKind.AwaitKeyword || !isContextualKeyword(kind) && !isClassMemberCompletionKeyword(kind) || kind === SyntaxKind.DeclareKeyword || kind === SyntaxKind.ModuleKeyword\n                        || isTypeKeyword(kind) && kind !== SyntaxKind.UndefinedKeyword;\n                case KeywordCompletionFilters.ClassElementKeywords:"
  },
  {
    "id" : "0a1a6bec-fe3e-4363-8d78-e8bb3d583367",
    "prId" : 26640,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26640#pullrequestreview-149493423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1667b2be-da47-4820-89a2-4d605989af42",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Funny enough, it shouldn't be in a method\r\n\r\n```ts\r\nclass C {\r\n  *foo() {\r\n      yield 10;\r\n  }\r\n}\r\n\r\nclass D extends C {\r\n  */*1*/\r\n}\r\n\r\nlet x: C = {\r\n    */*2*/\r\n}\r\n```\r\n\r\nEven though we don't provide anything, these should be new definition locations.",
        "createdAt" : "2018-08-25T00:52:17Z",
        "updatedAt" : "2018-08-28T22:11:01Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0238a7d1b18debfe79822ee80483dd7c5df3fe74",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +1881,1885 @@                    return true;\n\n                case SyntaxKind.AsteriskToken:\n                    return isFunctionLike(contextToken.parent) && !isMethodDeclaration(contextToken.parent);\n            }"
  },
  {
    "id" : "b462c2c5-5753-463a-8c2f-9cac0970fa26",
    "prId" : 26640,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26640#pullrequestreview-150330825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7de0ae2b-38f1-4a18-8aef-7c53d16edcf5",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Why is this none? If its in class/method you want to add no keywords at all and otherwise(for function) you want to have KeywordCompletionFilters.None?",
        "createdAt" : "2018-08-28T20:09:06Z",
        "updatedAt" : "2018-08-28T22:11:01Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "284187f3-7362-4a8c-a6bf-21681bcd767e",
        "parentId" : "7de0ae2b-38f1-4a18-8aef-7c53d16edcf5",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Apparently we're using `KeywordCompletionFilters.None` to alternately mean \"None\" or \"All\" depending on whether it's a member completion. :man_facepalming:",
        "createdAt" : "2018-08-28T21:47:50Z",
        "updatedAt" : "2018-08-28T22:11:01Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0238a7d1b18debfe79822ee80483dd7c5df3fe74",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +1642,1646 @@            // Declaring new property/method/accessor\n            isNewIdentifierLocation = true;\n            keywordFilters = contextToken.kind === SyntaxKind.AsteriskToken ? KeywordCompletionFilters.None :\n                isClassLike(decl) ? KeywordCompletionFilters.ClassElementKeywords : KeywordCompletionFilters.InterfaceElementKeywords;\n"
  },
  {
    "id" : "86329e07-2485-447f-bc22-1120ea14a7a2",
    "prId" : 25886,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25886#pullrequestreview-171259249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc3c9b76-3c8d-40a7-9475-41377f1c42ca",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Need to add SyntaxKind.BigIntLiteral to services/classifier.ts wherever its handling numeric literal",
        "createdAt" : "2018-11-02T20:27:30Z",
        "updatedAt" : "2018-11-05T20:24:02Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb99c4123003ade3e471cf17472be6d3f72d96ff",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +170,174 @@    function createCompletionEntryForLiteral(literal: string | number | PseudoBigInt): CompletionEntry {\n        return { name: completionNameForLiteral(literal), kind: ScriptElementKind.string, kindModifiers: ScriptElementKindModifier.none, sortText: \"0\" };\n    }\n\n    function createCompletionEntry("
  },
  {
    "id" : "7bbcc3a9-002f-47f1-a6f3-7594f5846427",
    "prId" : 25886,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25886#pullrequestreview-171259249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83eb51b6-ebdb-4608-8ae3-8680fd2eef57",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Need to add `BigIntLiteral` switch in `getPossibleTypeArgumentsInfo`",
        "createdAt" : "2018-11-02T20:31:06Z",
        "updatedAt" : "2018-11-05T20:24:02Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb99c4123003ade3e471cf17472be6d3f72d96ff",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +340,344 @@    function getSymbolCompletionFromEntryId(program: Program, log: Log, sourceFile: SourceFile, position: number, entryId: CompletionEntryIdentifier,\n    ): SymbolCompletion | { type: \"request\", request: Request } | { type: \"literal\", literal: string | number | PseudoBigInt } | { type: \"none\" } {\n        const compilerOptions = program.getCompilerOptions();\n        const completionData = getCompletionData(program, log, sourceFile, isUncheckedFile(sourceFile, compilerOptions), position, { includeCompletionsForModuleExports: true, includeCompletionsWithInsertText: true }, entryId);\n        if (!completionData) {"
  },
  {
    "id" : "b57826b5-c1d7-4552-9f16-2221cf58f4cb",
    "prId" : 25886,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25886#pullrequestreview-171259249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ef29020-c300-406c-979e-11f9b31717c6",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Need to add `BigIntLiteral` in `unaryPrefixExpressions` in `service/formatting/rules.ts`",
        "createdAt" : "2018-11-02T20:32:20Z",
        "updatedAt" : "2018-11-05T20:24:02Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb99c4123003ade3e471cf17472be6d3f72d96ff",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +502,506 @@        readonly propertyAccessToConvert: PropertyAccessExpression | undefined;\n        readonly isNewIdentifierLocation: boolean;\n        readonly location: Node | undefined;\n        readonly keywordFilters: KeywordCompletionFilters;\n        readonly literals: ReadonlyArray<string | number | PseudoBigInt>;"
  },
  {
    "id" : "c14e432e-832f-4cf5-8450-ec8f627071d9",
    "prId" : 23632,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23632#pullrequestreview-116683140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66fd2742-edfb-47f6-9d0b-cbbf4d209aa1",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "isPossiblyTypeArgumentPosition we have this function to check for type argument location",
        "createdAt" : "2018-04-24T18:42:10Z",
        "updatedAt" : "2018-04-24T18:42:10Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "99f0bf1d-d7cc-499f-a987-583ad23f0e3b",
        "parentId" : "66fd2742-edfb-47f6-9d0b-cbbf4d209aa1",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Thanks, added a note to #23631",
        "createdAt" : "2018-05-01T20:01:48Z",
        "updatedAt" : "2018-05-01T20:01:49Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a33f86c5e0ad8cc5ceba9d2b832fbdf92b9a633",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2060,2064 @@            switch (keywordFilter) {\n                case KeywordCompletionFilters.None:\n                    // TODO: GH#23631 Includes type keywords because `Array<numb/**/` is treaded as a value location currently.\n                    return !isContextualKeyword(kind) && !isClassMemberCompletionKeyword(kind) || kind === SyntaxKind.DeclareKeyword || kind === SyntaxKind.ModuleKeyword\n                        || isTypeKeyword(kind) && kind !== SyntaxKind.UndefinedKeyword;"
  },
  {
    "id" : "3da1edb6-f324-46f2-bc2c-98d4b719a0b8",
    "prId" : 22961,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22961#pullrequestreview-107852020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26afa9f0-ee1e-42da-b7d8-a9cd9d4993a1",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This will create entry in the set with \"undefined\"  if there is currently editing node?",
        "createdAt" : "2018-03-28T21:01:33Z",
        "updatedAt" : "2018-03-28T21:10:40Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "c63fa22a-f0d0-46f4-a52f-8979d143d057",
        "parentId" : "26afa9f0-ee1e-42da-b7d8-a9cd9d4993a1",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Fixed, we will now skip `undefined` keys",
        "createdAt" : "2018-03-28T21:10:51Z",
        "updatedAt" : "2018-03-28T21:10:52Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8cd966a8e210d1543bf29861991b865f84c3bb2",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1537,1541 @@            isNewIdentifierLocation = false;\n            const exports = typeChecker.getExportsAndPropertiesOfModule(moduleSpecifierSymbol);\n            const existing = arrayToSet<ImportOrExportSpecifier>(namedImportsOrExports.elements, n => isCurrentlyEditingNode(n) ? undefined : (n.propertyName || n.name).escapedText);\n            symbols = exports.filter(e => e.escapedName !== InternalSymbolName.Default && !existing.get(e.escapedName));\n            return GlobalsSearch.Success;"
  },
  {
    "id" : "55bc01e8-28aa-4769-8ccb-ab5ced8fb9a3",
    "prId" : 22718,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22718#pullrequestreview-105422636",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79931f27-ad22-4823-bf93-c40a0a97e7f3",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "The change to use `Private` all the time instead of `NonPublicAccessibilityMOdifier` is technically a change in behavior in the following situation (simplification of `completionEntryForClassMembers2.ts`):\r\n\r\n```ts\r\nclass C {\r\n    protected m(): void {}\r\n}\r\ninterface I extends C {}\r\nclass D implements I {\r\n    /**/\r\n}\r\n```\r\n\r\nPreviously we would not provide a completion for `m`, now we will. But I don't think this matters because the situation is impossible to implement -- you can't override `m` because it's private, but you have to implement it to implement the interface, so it's just illegal to implement `C` without extending from it anyway.",
        "createdAt" : "2018-03-20T16:11:40Z",
        "updatedAt" : "2018-03-28T20:01:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "141f50a059732315d255844927be670c303c69e1",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +1994,1998 @@                !existingMemberNames.has(propertySymbol.escapedName) &&\n                    !!propertySymbol.declarations &&\n                    !(getDeclarationModifierFlagsFromSymbol(propertySymbol) & ModifierFlags.Private));\n        }\n"
  },
  {
    "id" : "e610c27a-4fcb-4209-8c52-7ca1d32b7d6f",
    "prId" : 22074,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22074#pullrequestreview-98302670",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1e3defc-abb5-471f-adcb-aad587d3d0fb",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "should not this default to `true` then? it used to default to `Global` before. we do not want to change the behavior really since we have no test coverage here.",
        "createdAt" : "2018-02-21T17:54:06Z",
        "updatedAt" : "2018-02-21T18:11:28Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "1a493819-544c-4196-a65f-2ed1929fc733",
        "parentId" : "f1e3defc-abb5-471f-adcb-aad587d3d0fb",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I think this is correct -- we only assigned `completionKind = CompletionKind.Global;` in one place before, and that location is now the only assignment to `isInSnippetScope`.",
        "createdAt" : "2018-02-21T18:12:40Z",
        "updatedAt" : "2018-02-21T18:12:40Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c8e9c9293ee7c8aa4589c63cfb244195e2caae8",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +754,758 @@\n        let insideJsDocTagTypeExpression = false;\n        let isInSnippetScope = false;\n        if (insideComment) {\n            if (hasDocComment(sourceFile, position)) {"
  },
  {
    "id" : "80069355-822d-4625-9894-06e4912970e1",
    "prId" : 21834,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21834#pullrequestreview-95561440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb277c42-c797-4e26-bd28-4ad430deac77",
        "parentId" : null,
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "If `symbol.parent === undefined`, then we recursively call `getFirstSymbolInChain` with first argument `undefined`. Are you sure this won't just trigger an error that we can't get `parent` from dotting off `undefined` in the next recursive call?\r\n\r\nDoes the test you added cover this case?",
        "createdAt" : "2018-02-09T20:51:15Z",
        "updatedAt" : "2018-02-09T20:51:33Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "9ee618b0-691a-4fdb-a66f-76cfb1c8994a",
        "parentId" : "eb277c42-c797-4e26-bd28-4ad430deac77",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Entire rest of the expression is in parentheses, meaning we do nothing if `symbol.parent === undefined`.",
        "createdAt" : "2018-02-09T21:02:25Z",
        "updatedAt" : "2018-02-09T21:02:25Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3634a3ced82e8afd698ae18bbb3d768267531c97",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +713,717 @@        const chain = checker.getAccessibleSymbolChain(symbol, enclosingDeclaration, /*meaning*/ SymbolFlags.All, /*useOnlyExternalAliasing*/ false);\n        if (chain) return first(chain);\n        return symbol.parent && (isModuleSymbol(symbol.parent) ? symbol : getFirstSymbolInChain(symbol.parent, enclosingDeclaration, checker));\n    }\n"
  },
  {
    "id" : "638a0344-6dc3-4647-bc5a-41864c21c4d8",
    "prId" : 21257,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21257#pullrequestreview-90285933",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5465a06-f37a-4107-a014-cda89a31cb06",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "is not that just `!isClassMemberCompletionKeywordText(text)` ?",
        "createdAt" : "2018-01-20T00:09:55Z",
        "updatedAt" : "2018-01-20T00:09:56Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "87698d64-8313-4acd-ab62-3892a4ebb289",
        "parentId" : "e5465a06-f37a-4107-a014-cda89a31cb06",
        "authorId" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "body" : "'async' keyword is not included",
        "createdAt" : "2018-01-20T00:53:53Z",
        "updatedAt" : "2018-01-20T00:53:53Z",
        "lastEditedBy" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "tags" : [
        ]
      },
      {
        "id" : "a647014f-7733-4cb4-80a8-85e48126299e",
        "parentId" : "e5465a06-f37a-4107-a014-cda89a31cb06",
        "authorId" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "body" : "and in my opinion they should be orthogonal",
        "createdAt" : "2018-01-20T00:56:56Z",
        "updatedAt" : "2018-01-20T00:56:56Z",
        "lastEditedBy" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "077c427ff878501fc0e4c0da0ee52b66c9cd9fc5",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +2189,2193 @@\n    function isFunctionLikeBodyCompletionKeywordText(text: string) {\n        return isFunctionLikeBodyCompletionKeyword(stringToToken(text));\n    }\n"
  },
  {
    "id" : "d5a1631b-bc9c-4836-b2ca-41bbd0dc53f8",
    "prId" : 21231,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21231#pullrequestreview-89567921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68b5d1fe-5e40-4e10-96b0-56f5936d5f92",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "do you not need replacement span eg. if refering to property x and you want to replace it with this.x ?",
        "createdAt" : "2018-01-17T19:40:36Z",
        "updatedAt" : "2018-01-17T19:40:36Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "89e4457f-b37a-45f3-b166-3cc3eca5a700",
        "parentId" : "68b5d1fe-5e40-4e10-96b0-56f5936d5f92",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "The default replacement span should already be the identifier itself. We only need to set `replacementSpan` if we are replacing something else, too, such as replacing `.x` with `[\"x\"]`.",
        "createdAt" : "2018-01-17T19:45:19Z",
        "updatedAt" : "2018-01-17T19:45:19Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b37cc289c83f17921f5c3e4f82c405c122bf4fe",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +177,181 @@        let replacementSpan: TextSpan | undefined;\n        if (kind === CompletionKind.Global && origin && origin.type === \"this-type\") {\n            insertText = needsConvertPropertyAccess ? `this[\"${name}\"]` : `this.${name}`;\n        }\n        else if (needsConvertPropertyAccess) {"
  },
  {
    "id" : "eb682721-a702-482a-8142-dbda5972302e",
    "prId" : 19917,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19917#pullrequestreview-76224409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9d495fa-2fe1-421d-8d0b-803e90ac6156",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Is it possible to pass in the getCanonicalFileName instead of creating it all the time? services has already created one.",
        "createdAt" : "2017-11-13T19:40:54Z",
        "updatedAt" : "2017-11-13T21:13:15Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7c461b56a3bb5d34002152e800402837d32bcf9",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +494,498 @@            formatContext,\n            symbolName: getSymbolName(symbol, symbolOriginInfo, compilerOptions.target),\n            getCanonicalFileName,\n            symbolToken: undefined,\n            kind: isDefaultExport ? codefix.ImportKind.Default : codefix.ImportKind.Named,"
  },
  {
    "id" : "cf68601c-e636-4e3f-8d6a-8316c91e6e24",
    "prId" : 19685,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19685#pullrequestreview-74125518",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66f34675-652d-453e-8979-846d12062afe",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "not sure why is this better than what was there before?",
        "createdAt" : "2017-11-03T00:09:13Z",
        "updatedAt" : "2017-11-03T15:49:41Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "6ff25e9f-1fd3-4db6-844b-6419028e4c26",
        "parentId" : "66f34675-652d-453e-8979-846d12062afe",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Makes it so `PathCompletions` do less work related to `CompletionInfo` so it can focus on just getting the paths.",
        "createdAt" : "2017-11-03T15:49:27Z",
        "updatedAt" : "2017-11-03T15:49:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c31895dabe6873a1085606ad1ec2375c14a00897",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +31,35 @@    ): CompletionInfo | undefined {\n        if (isInReferenceComment(sourceFile, position)) {\n            const entries = PathCompletions.getTripleSlashReferenceCompletion(sourceFile, position, compilerOptions, host);\n            return entries && pathCompletionsInfo(entries);\n        }"
  },
  {
    "id" : "2a3648a3-3da8-492c-b22a-fd7bde924d11",
    "prId" : 19401,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19401#pullrequestreview-71342619",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70e742c0-ab01-450a-8e0c-65357674a7c9",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I don't think internal names are specific to `ClassMember`s?",
        "createdAt" : "2017-10-23T21:25:25Z",
        "updatedAt" : "2017-10-23T21:55:34Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "87865501-531f-4aaa-a426-bb2b3a8e0fd5",
        "parentId" : "70e742c0-ab01-450a-8e0c-65357674a7c9",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "ESSymbol named members are. `ClassMember` is a misnomer. It includes `Property`, `Method`, and `Accessor`, which are all of the ESSymbol-nameable members.",
        "createdAt" : "2017-10-23T21:56:47Z",
        "updatedAt" : "2017-10-23T21:56:47Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0412da4face224bbece6fe4253a9b32d0aa8afa",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1779,1783 @@        // If the symbol is for a member of an object type and is the internal name of an ES\n        // symbol, it is not a valid entry. Internal names for ES symbols start with \"__@\"\n        if (symbol.flags & SymbolFlags.ClassMember) {\n            const escapedName = symbol.escapedName as string;\n            if (escapedName.length >= 3 &&"
  },
  {
    "id" : "4bbbb2f4-e786-412a-89b4-20724d9a8ee0",
    "prId" : 19401,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19401#pullrequestreview-71350377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c23e43b-9946-42ba-ac17-a357e9ad6e76",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "There's a `isReservedMemberName` inside `checker.ts` that we should just move to utilities and reuse (the negation of) here.",
        "createdAt" : "2017-10-23T21:26:01Z",
        "updatedAt" : "2017-10-23T21:55:34Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "69cc9544-9936-4984-81f6-3e1db79b7b39",
        "parentId" : "5c23e43b-9946-42ba-ac17-a357e9ad6e76",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "`isReservedMemberName` explicitly *does not* remove ES symbols, only `__call`, `__new`, etc. since those aren't actually members. ES symbols, however, *are* members. Also, `isReservedMemberName` is already executed as part of the call to `getApparentProperties` on line 287.",
        "createdAt" : "2017-10-23T21:30:49Z",
        "updatedAt" : "2017-10-23T21:55:34Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "104f0e4a-f588-4a6e-866a-6550c8b13c56",
        "parentId" : "5c23e43b-9946-42ba-ac17-a357e9ad6e76",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I wonder if `SymbolObject.prototype.name` should return undefined for internal names, though I'm not sure if that would have other undesirable effects.",
        "createdAt" : "2017-10-23T21:32:33Z",
        "updatedAt" : "2017-10-23T21:55:34Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "6074b368-a357-4a3d-bdbc-c4f6df7549d1",
        "parentId" : "5c23e43b-9946-42ba-ac17-a357e9ad6e76",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "> `isReservedMemberName` explicitly does not remove ES symbols\r\n\r\nI misread it, OK. Would still be nice to have all these escaped name inspection snippets in one place... doesn't _really_ matter, though.\r\n\r\n> I wonder if `SymbolObject.prototype.name` should return undefined for internal names, though I'm not sure if that would have other undesirable effects.\r\n\r\nIdeally we (internally) should never use `.name` on an internally named symbol, since we (internally) swapped everything to `.__escapedName` before re-implementing `.name` (with proper escaping) for external compatibility. Would making it return `undefined` on internal symbol names likely break any external consumers? If no, I'm all for it.",
        "createdAt" : "2017-10-23T22:00:27Z",
        "updatedAt" : "2017-10-23T22:00:27Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "81cd635f-0509-4e1a-aaf4-817a893caaa0",
        "parentId" : "5c23e43b-9946-42ba-ac17-a357e9ad6e76",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "I might look at the `.name` thing some other time.",
        "createdAt" : "2017-10-23T22:33:35Z",
        "updatedAt" : "2017-10-23T22:33:35Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0412da4face224bbece6fe4253a9b32d0aa8afa",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1781,1785 @@        if (symbol.flags & SymbolFlags.ClassMember) {\n            const escapedName = symbol.escapedName as string;\n            if (escapedName.length >= 3 &&\n                escapedName.charCodeAt(0) === CharacterCodes._ &&\n                escapedName.charCodeAt(1) === CharacterCodes._ &&"
  },
  {
    "id" : "84e00390-eb5b-414e-842e-56c13cd11396",
    "prId" : 16768,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16768#pullrequestreview-47000922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c63cb86-ebf8-492b-bd78-46f7d95cf612",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "It isn't possible to merge enum with anything else right so adding ! might be useful to not enumerate through the declarations?",
        "createdAt" : "2017-06-29T00:02:38Z",
        "updatedAt" : "2017-07-13T14:23:42Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "2cc42f46-8e00-4538-b455-228494e1e39d",
        "parentId" : "1c63cb86-ebf8-492b-bd78-46f7d95cf612",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "It's possible to merge enums and namespaces. But we could handle enums separately, and assert that `getExportsOfModule` is only called for modules.",
        "createdAt" : "2017-06-29T00:13:23Z",
        "updatedAt" : "2017-07-13T14:23:42Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b07fa2027ff6a3d53ae02cc7fd8097c531c569f",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +620,624 @@\n                        // If the module is merged with a value, we must get the type of the class and add its propertes (for inherited static methods).\n                        if (!isTypeLocation && symbol.declarations.some(d => d.kind !== SyntaxKind.SourceFile && d.kind !== SyntaxKind.ModuleDeclaration && d.kind !== SyntaxKind.EnumDeclaration)) {\n                            addTypeProperties(typeChecker.getTypeOfSymbolAtLocation(symbol, node));\n                        }"
  },
  {
    "id" : "3b5cf945-795c-4651-be64-9c7ada9b9713",
    "prId" : 16206,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16206#pullrequestreview-43593297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "685ddee5-691e-4ac3-a18d-460ca90bedf4",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "if this is a `NamespaceModule`, why can not we just return true?",
        "createdAt" : "2017-06-06T01:04:26Z",
        "updatedAt" : "2017-06-13T18:16:47Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "e0fbce68-dd3e-4731-aecc-837626219278",
        "parentId" : "685ddee5-691e-4ac3-a18d-460ca90bedf4",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Would show \"m\" in the completion even if it doesn't contain type or doesn't have any exported type. And user will get error with typing just m and there is nothing that can be dotted off. eg. ```namespace m { interface I {} }```",
        "createdAt" : "2017-06-06T18:16:23Z",
        "updatedAt" : "2017-06-13T18:16:47Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "80b781d1-1794-4c4f-8d6f-330aaff4c786",
        "parentId" : "685ddee5-691e-4ac3-a18d-460ca90bedf4",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "if it is un-instantiated, why cannot it be referenced in a type location? if it is, i understand we need to do the work to verify.",
        "createdAt" : "2017-06-06T18:43:10Z",
        "updatedAt" : "2017-06-13T18:16:47Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "3307f4a9-6915-4ad2-8c99-e6efdf6bbf2a",
        "parentId" : "685ddee5-691e-4ac3-a18d-460ca90bedf4",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "because after typing ```var x : m.``` in above example there is nothing that can be shown so m is also not part of completion at ```var x:/*here*/ ```",
        "createdAt" : "2017-06-13T00:01:40Z",
        "updatedAt" : "2017-06-13T18:16:47Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f167786ad0d86fbaa911fecff2cdbd371b10f97",
    "line" : 228,
    "diffHunk" : "@@ -1,1 +804,808 @@            }\n\n            if (symbol.flags & (SymbolFlags.ValueModule | SymbolFlags.NamespaceModule)) {\n                const exportedSymbols = typeChecker.getExportsOfModule(symbol);\n                // If the exported symbols contains type,"
  },
  {
    "id" : "1320ed8d-6754-49df-ad2f-e26683544871",
    "prId" : 16206,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16206#pullrequestreview-42409199",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c30be80f-8d21-4ced-8aa8-ec08be113e57",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why not constructors?",
        "createdAt" : "2017-06-06T01:05:38Z",
        "updatedAt" : "2017-06-13T18:16:47Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "9d70b2b4-ca60-4c14-b5da-e9024027f1cc",
        "parentId" : "c30be80f-8d21-4ced-8aa8-ec08be113e57",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Because that's not solely new identifier location (you can write modifiers etc)",
        "createdAt" : "2017-06-06T18:40:31Z",
        "updatedAt" : "2017-06-13T18:16:47Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f167786ad0d86fbaa911fecff2cdbd371b10f97",
    "line" : 266,
    "diffHunk" : "@@ -1,1 +1250,1254 @@                        containingNodeKind === SyntaxKind.VariableStatement ||\n                        containingNodeKind === SyntaxKind.EnumDeclaration ||                        // enum a { foo, |\n                        isFunctionLikeButNotConstructor(containingNodeKind) ||\n                        containingNodeKind === SyntaxKind.ClassDeclaration ||                       // class A<T, |\n                        containingNodeKind === SyntaxKind.ClassExpression ||                        // var C = class D<T, |"
  },
  {
    "id" : "840e78ad-111f-4c9d-9913-5aeb599132ba",
    "prId" : 16206,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16206#pullrequestreview-42403485",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4362bd75-4314-449f-94ef-6b522aeeb2fe",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "what about the other type assertion syntax?",
        "createdAt" : "2017-06-06T01:14:04Z",
        "updatedAt" : "2017-06-13T18:16:47Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "9d20cd27-c90e-4112-9ce3-8aa767977c68",
        "parentId" : "4362bd75-4314-449f-94ef-6b522aeeb2fe",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "The TypeAssertion is anyways type node and the token < will have parent as type assertion and hence it will be type location any which ways. The tokens in as and var/property declarations are different because the parent declarations are value and hence need special handling",
        "createdAt" : "2017-06-06T18:21:19Z",
        "updatedAt" : "2017-06-13T18:16:47Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f167786ad0d86fbaa911fecff2cdbd371b10f97",
    "line" : 213,
    "diffHunk" : "@@ -1,1 +789,793 @@\n                    case SyntaxKind.AsKeyword:\n                        return parentKind === SyntaxKind.AsExpression;\n                }\n            }"
  },
  {
    "id" : "95e2fc86-e970-42de-87fc-7209101c0b5e",
    "prId" : 15614,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15614#pullrequestreview-37112992",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef698504-9aeb-4889-a73d-a42b1b83e419",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "async",
        "createdAt" : "2017-05-09T18:24:53Z",
        "updatedAt" : "2017-05-12T22:39:38Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "303d7b209e1129e2a57e740e9a23649f1955c6c6",
    "line" : 345,
    "diffHunk" : "@@ -1,1 +1494,1498 @@            case SyntaxKind.ReadonlyKeyword:\n            case SyntaxKind.GetKeyword:\n            case SyntaxKind.SetKeyword:\n            case SyntaxKind.AsyncKeyword:\n                return true;"
  },
  {
    "id" : "c4d807ae-4e6c-4cdb-9728-94afc3fb0360",
    "prId" : 15614,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15614#pullrequestreview-37112992",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5df41fd-2145-4cdb-bd64-84af8b8f028b",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "index signature, and computed property name:\r\n```ts \r\nclass c {\r\n   |  [\"foo\"]  // <- i would expect the keywords at least\r\n}\r\n```",
        "createdAt" : "2017-05-09T18:28:49Z",
        "updatedAt" : "2017-05-12T22:39:38Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "303d7b209e1129e2a57e740e9a23649f1955c6c6",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +1032,1036 @@            if (contextToken) {\n                switch (contextToken.kind) {\n                    case SyntaxKind.OpenBraceToken:  // class c { |\n                        if (isClassLike(contextToken.parent)) {\n                            return contextToken.parent;"
  },
  {
    "id" : "f19169e5-a2aa-4d11-b10b-84c20292dc9f",
    "prId" : 13806,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/13806#pullrequestreview-19482914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd1d2660-1eae-43b7-b229-76700373a9a2",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Will this give completions if you have a string literal as a statement in a `case` or `default` clause? In other words, if you're in the `statements` instead of the `expression`.",
        "createdAt" : "2017-02-01T04:52:40Z",
        "updatedAt" : "2017-02-01T05:34:39Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "110aa063-45fc-46d1-9011-f63ccb1852a2",
        "parentId" : "bd1d2660-1eae-43b7-b229-76700373a9a2",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "there is another parent in the chain. so no.",
        "createdAt" : "2017-02-01T05:01:08Z",
        "updatedAt" : "2017-02-01T05:34:39Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "a39c14ec2e85bd61cd9c1820232e6840a5ffe07d",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +181,185 @@            return getStringLiteralCompletionEntriesFromType(typeChecker.getTypeAtLocation(node.parent.left === node ? node.parent.right : node.parent.left), typeChecker);\n        }\n        else if (isCaseOrDefaultClause(node.parent)) {\n            // Get completions from the type of the switch expression\n            // i.e. x === '/*completion position'"
  },
  {
    "id" : "adf3c633-120a-475f-8b52-b2590b0219fe",
    "prId" : 12543,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12543#pullrequestreview-10433374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "553a1766-3181-4fb6-9cd6-58cac1d3ba17",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "If you get the type constraint and the type is a `keyof` type, where is that handled below?",
        "createdAt" : "2016-11-28T22:47:51Z",
        "updatedAt" : "2016-11-29T03:41:58Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "aaf87735cce8df134c4c515890f7fb82a13948ac",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +245,249 @@\n        function addStringLiteralCompletionsFromType(type: Type, result: CompletionEntry[]): void {\n            if (type && type.flags & TypeFlags.TypeParameter) {\n                type = typeChecker.getApparentType(type);\n            }"
  },
  {
    "id" : "869a98ea-6bcb-4afd-b5ac-ec42c3763603",
    "prId" : 11328,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11328#pullrequestreview-2831227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41fed222-bba1-4c9e-b5b8-58ca8152d0ea",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Isn't this doing the same thing as line 330?\n",
        "createdAt" : "2016-10-04T23:30:15Z",
        "updatedAt" : "2016-10-05T22:22:24Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "e8c9fa81-eba3-40d8-b11a-6e809586100b",
        "parentId" : "41fed222-bba1-4c9e-b5b8-58ca8152d0ea",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "This function really should never get `undefined` as an argument for fragment, but I don't know of a way to assert that. So the check on line 330 is really a matter of null-checking. In particular, `normalizeSlashes()` on line 332 dereferences its argument without null-checking.\n\nRegarding line 340, consider the case when `fragment` is `\"foo\"`. Then `getDirectoryPath(fragment) === \"\"` because it removes the basename part of the path. So we need to check again.\n\nReally, `fragment` no longer refers to a path fragment after the assignment on line 337. Perhaps a new variable called `relativeOrAbsolutePath` should be initialized on the LHS of line 337. I didn't make the change because I was trying to minimize the changes I was making to the codebase to get a fix in (with mixed success).\n\nShould I add a new declaration?\n",
        "createdAt" : "2016-10-04T23:56:05Z",
        "updatedAt" : "2016-10-05T22:22:24Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "e830f208-78fb-44e9-b91a-b0c4f7fd3dc6",
        "parentId" : "41fed222-bba1-4c9e-b5b8-58ca8152d0ea",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "No, the comment was specifically about the fact that line 330 uses `\"./\"` while line 340 uses `\".\" + directorySeparator\"`, though they do the same thing. Perhaps you should initialize `fragment` to `\"\"` on 330 rather than repeat yourself on 340.\n",
        "createdAt" : "2016-10-05T00:12:30Z",
        "updatedAt" : "2016-10-05T22:22:24Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "14b31b60-7587-416e-b714-eb7436b29286",
        "parentId" : "41fed222-bba1-4c9e-b5b8-58ca8152d0ea",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "Changed.\n",
        "createdAt" : "2016-10-05T00:49:16Z",
        "updatedAt" : "2016-10-05T22:22:24Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "af833aa761b32622cd7742e5d393d615baed27b0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +341,345 @@\n            if (fragment === \"\") {\n                fragment = \".\" + directorySeparator;\n            }\n"
  },
  {
    "id" : "4d29d6b7-9a31-491b-9a37-94235f79d97a",
    "prId" : 45128,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45128#pullrequestreview-711057141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24fb7d40-d356-44b0-a3e6-f4cb5d37fabd",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Drive by fix: tabstop is unnecessary in this snippet because you can’t add a comma and import more things after `import * as whatever`",
        "createdAt" : "2021-07-20T20:55:00Z",
        "updatedAt" : "2021-07-20T20:55:01Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "337a2cbea368792804c9e798615073a3ebe54503",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +717,721 @@            case ImportKind.CommonJS: return { replacementSpan, insertText: `import ${name}${tabStop} = require(${quotedModuleSpecifier})${suffix}` };\n            case ImportKind.Default: return { replacementSpan, insertText: `import ${name}${tabStop} from ${quotedModuleSpecifier}${suffix}` };\n            case ImportKind.Namespace: return { replacementSpan, insertText: `import * as ${name} from ${quotedModuleSpecifier}${suffix}` };\n            case ImportKind.Named: return { replacementSpan, insertText: `import { ${name}${tabStop} } from ${quotedModuleSpecifier}${suffix}` };\n        }"
  },
  {
    "id" : "3fb268c1-da53-4272-8f7c-6d530f155874",
    "prId" : 45323,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45323#pullrequestreview-722315294",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26d6371b-05a1-449d-8703-c1228216ec0d",
        "parentId" : null,
        "authorId" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "body" : "@andrewbranch I think you worked on this and related functions not long ago.  As far as I can tell it's all looking good, but if you want to take a look, this change impacts the caller functions `getTypeScriptMemberSymbols` and `shouldIncludeSymbol` (called by `getCompletionEntriesFromSymbols` to filter out symbols), in completions. ",
        "createdAt" : "2021-08-04T13:55:08Z",
        "updatedAt" : "2021-08-04T13:55:09Z",
        "lastEditedBy" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0218f33384150edbd06754c70351b65e2120b7b",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +3308,3312 @@\n    /** True if symbol is a type or a module containing at least one type. */\n    function symbolCanBeReferencedAtTypeLocation(symbol: Symbol, checker: TypeChecker, seenModules = new Map<SymbolId, true>()): boolean {\n        const sym = skipAlias(symbol.exportSymbol || symbol, checker);\n        return !!(sym.flags & SymbolFlags.Type) || checker.isUnknownSymbol(sym) ||"
  },
  {
    "id" : "9de126b3-b389-4cfe-96ed-2c658df10402",
    "prId" : 45128,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/45128#pullrequestreview-711057141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5acf3928-d2c0-49ef-b193-b9149be6f571",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Drive by fix: tabstop is unnecessary in this snippet because you can’t add a comma and import more things after `import * as whatever`",
        "createdAt" : "2021-07-20T20:55:00Z",
        "updatedAt" : "2021-07-20T20:55:01Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "337a2cbea368792804c9e798615073a3ebe54503",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +717,721 @@            case ImportKind.CommonJS: return { replacementSpan, insertText: `import ${name}${tabStop} = require(${quotedModuleSpecifier})${suffix}` };\n            case ImportKind.Default: return { replacementSpan, insertText: `import ${name}${tabStop} from ${quotedModuleSpecifier}${suffix}` };\n            case ImportKind.Namespace: return { replacementSpan, insertText: `import * as ${name} from ${quotedModuleSpecifier}${suffix}` };\n            case ImportKind.Named: return { replacementSpan, insertText: `import { ${name}${tabStop} } from ${quotedModuleSpecifier}${suffix}` };\n        }"
  }
]