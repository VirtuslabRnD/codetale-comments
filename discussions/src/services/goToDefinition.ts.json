[
  {
    "id" : "04e5d98b-0c95-4ac3-b94b-7ee9d041661e",
    "prId" : 44740,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44740#pullrequestreview-694030977",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "847cbf80-26bd-46e5-a5b4-ba1e74cf6151",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Does this work through two levels of inheritance?\r\n\r\n```ts\r\nclass Bottom {\r\n  /*2*/m() {}\r\n}\r\n\r\nclass Middle extends Bottom {}\r\n\r\nclass Top extends Middle {\r\n  /*1*/override m() {}\r\n}\r\n```",
        "createdAt" : "2021-06-28T13:44:51Z",
        "updatedAt" : "2021-06-28T13:45:09Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "b9cac609-f8e7-4596-aa8b-7ce775c05087",
        "parentId" : "847cbf80-26bd-46e5-a5b4-ba1e74cf6151",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "I've added `goToDefinitionOverriddenMember14`, `goToDefinitionOverriddenMember15` to cover that case",
        "createdAt" : "2021-06-28T14:31:48Z",
        "updatedAt" : "2021-06-28T14:31:48Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f75b53bf528f7566797b82658fbd72f54d026412",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +131,135 @@        const name = unescapeLeadingUnderscores(getTextOfPropertyName(classElement.name));\n        const symbol = hasStaticModifier(classElement)\n            ? typeChecker.getPropertyOfType(typeChecker.getTypeOfSymbolAtLocation(baseType.symbol, baseDeclaration), name)\n            : typeChecker.getPropertyOfType(baseType, name);\n        if (!symbol) return;"
  },
  {
    "id" : "3adcee86-374b-4ae8-bdb1-082a5f9df25a",
    "prId" : 43851,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43851#pullrequestreview-648671985",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cd96406-16ae-44ce-b315-d8247b4753f7",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "This is for cases like `const c = function() { ... }`, where `isDefinitionVisible` is called on the function expression?",
        "createdAt" : "2021-04-29T21:29:08Z",
        "updatedAt" : "2021-04-29T23:52:31Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "c702de6a-3fd9-4059-96e4-48177cff818e",
        "parentId" : "7cd96406-16ae-44ce-b315-d8247b4753f7",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Maybe \"assignments to variables\" would be clearer as \"variable initializers\"?",
        "createdAt" : "2021-04-29T21:39:39Z",
        "updatedAt" : "2021-04-29T23:52:31Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "1057f0c5aa80e76cdf857b580b675862f2ecf922",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +336,340 @@\n        // Variable initializers are visible if variable is visible\n        if (hasInitializer(declaration.parent) && declaration.parent.initializer === declaration) return isDefinitionVisible(checker, declaration.parent as Declaration);\n\n        // Handle some exceptions here like arrow function, members of class and object literal expression which are technically not visible but we want the definition to be determined by its parent"
  },
  {
    "id" : "9654367c-db86-49b3-b0d5-8879b23e0660",
    "prId" : 42539,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42539#pullrequestreview-625850643",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0dc624eb-cab9-4c20-a42f-a2bdcf9581c0",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "@andrewbranch just realised that we are not passing this on in the through server even though we added this property to protocol.\r\n[tsserver37220.log](https://github.com/microsoft/TypeScript/files/6240528/tsserver37220.log)\r\n",
        "createdAt" : "2021-04-01T02:15:47Z",
        "updatedAt" : "2021-04-01T02:15:48Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "280926fe491ece4f27c73669af95642f92e0d2ef",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +147,151 @@                        fileName: node.text\n                    },\n                    unverified: !!verifiedFileName,\n                };\n            }"
  },
  {
    "id" : "1ffe222c-6551-48cb-9244-14428b73b984",
    "prId" : 40835,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40835#pullrequestreview-502250905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aadd6c0c-4f82-4552-9867-9d4482c02073",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "when does this happen?",
        "createdAt" : "2020-10-05T15:47:39Z",
        "updatedAt" : "2020-10-05T16:56:44Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "dca6d8b8-a9c4-4c8a-9561-a37b239eb83b",
        "parentId" : "aadd6c0c-4f82-4552-9867-9d4482c02073",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This is just the converse of the previous code, but I think it could happen in certain error cases where the checker falls back to `unknownSymbol`. Not sure if thatâ€™s actually possible in `getAliasedSymbol`, but I feel like our assumption that symbols always have declarations is a frequent source of crashes, particularly in error-ridden code.",
        "createdAt" : "2020-10-05T17:01:13Z",
        "updatedAt" : "2020-10-05T17:01:14Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "f07771c7625ec9ba7d4a150a554598fd23540697",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +213,217 @@            if (symbol.flags & SymbolFlags.Alias && shouldSkipAlias(node, symbol.declarations[0])) {\n                const aliased = checker.getAliasedSymbol(symbol);\n                if (!aliased.declarations) {\n                    break;\n                }"
  },
  {
    "id" : "35e654dc-9af1-4382-a840-437c59c2fb90",
    "prId" : 38567,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38567#pullrequestreview-412809041",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddf03f9a-b0f8-4d58-97fb-7e86d5d369b2",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Is this just a whitespace change?",
        "createdAt" : "2020-05-14T18:29:54Z",
        "updatedAt" : "2020-05-15T22:00:20Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "9d7a8027-2f28-4a88-9c2e-2d08498a4801",
        "parentId" : "ddf03f9a-b0f8-4d58-97fb-7e86d5d369b2",
        "authorId" : "1e789298-f9d6-4b64-b80b-206f2f8fbd2a",
        "body" : "Yeah, sorry, late night push, and I forgot to add a comment about this just breaking the long line.  I'll remove it if you prefer not touching other parts.",
        "createdAt" : "2020-05-15T16:47:51Z",
        "updatedAt" : "2020-05-15T22:00:20Z",
        "lastEditedBy" : "1e789298-f9d6-4b64-b80b-206f2f8fbd2a",
        "tags" : [
        ]
      }
    ],
    "commit" : "68c9b990e7d8ce4c359f7290fd2e1156d7509d46",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +250,254 @@        // we want to strip those extra properties.\n        // For deduping purposes, we also want to exclude any declarationNodes if provided.\n        const filteredDeclarations =\n            filter(symbol.declarations, d => d !== declarationNode && (!isAssignmentDeclaration(d) || d === symbol.valueDeclaration))\n            || undefined;"
  },
  {
    "id" : "8b727712-94bd-427d-8a55-139452f9b34d",
    "prId" : 38567,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38567#pullrequestreview-412809629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59669cbc-54e1-4a22-bc41-2ca89fa9bc64",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Is this related to the bug?",
        "createdAt" : "2020-05-14T18:30:16Z",
        "updatedAt" : "2020-05-15T22:00:20Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "3aeb583d-f543-4ea0-b119-5302f5744ac6",
        "parentId" : "59669cbc-54e1-4a22-bc41-2ca89fa9bc64",
        "authorId" : "1e789298-f9d6-4b64-b80b-206f2f8fbd2a",
        "body" : "Also a leftover when I was trying a different approach, and thought that it might be good to leave it.  (Same as above, I'll remove it if preferred.)",
        "createdAt" : "2020-05-15T16:48:47Z",
        "updatedAt" : "2020-05-15T22:00:20Z",
        "lastEditedBy" : "1e789298-f9d6-4b64-b80b-206f2f8fbd2a",
        "tags" : [
        ]
      }
    ],
    "commit" : "68c9b990e7d8ce4c359f7290fd2e1156d7509d46",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +336,340 @@    /** Returns a CallLikeExpression where `node` is the target being invoked. */\n    function getAncestorCallLikeExpression(node: Node): CallLikeExpression | undefined {\n        const target = findAncestor(node, n => !isRightSideOfPropertyAccess(n));\n        const callLike = target?.parent;\n        return callLike && isCallLikeExpression(callLike) && getInvokedExpression(callLike) === target ? callLike : undefined;"
  },
  {
    "id" : "f0e7281b-3855-455d-8533-97392b02a779",
    "prId" : 33124,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33124#pullrequestreview-281703599",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3affffc6-0ac0-4aa3-affc-e7ec47a3dbf1",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "the test doesn't seem to cover this change. doesn't it need a new test? I would expect to see existing tests lose some duplicates if we already have coverage of this case.\r\n",
        "createdAt" : "2019-08-29T18:20:21Z",
        "updatedAt" : "2019-08-29T18:22:51Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "b912c6a5-10ed-4ec2-8b1d-4c60c132206e",
        "parentId" : "3affffc6-0ac0-4aa3-affc-e7ec47a3dbf1",
        "authorId" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "body" : "This was not a new fix added. I just have refactored a little bit the code to make it readable. There's couple of tests that already check this `goToDefinitionFunctionOverloads` and `goToDefinitionFunctionOverloadsInClass` are some of them.",
        "createdAt" : "2019-08-29T20:27:50Z",
        "updatedAt" : "2019-08-29T20:27:59Z",
        "lastEditedBy" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "tags" : [
        ]
      }
    ],
    "commit" : "09a5b68a856a2a22fae10f4606bf3840f38a0599",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +260,264 @@            }\n            const declarations = signatureDeclarations.filter(selectConstructors ? isConstructorDeclaration : isFunctionLike);\n            const declarationsWithBody = declarations.filter(d => !!(<FunctionLikeDeclaration>d).body);\n\n            // declarations defined on the global scope can be defined on multiple files. Get all of them."
  }
]