[
  {
    "id" : "5af91dd1-d99d-4f4f-80ff-7dc3213ce4e9",
    "prId" : 31482,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31482#pullrequestreview-240808837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae88906b-1764-4f78-beb9-fa645aef5879",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "cc @ajafff ☝️ ",
        "createdAt" : "2019-05-22T18:39:16Z",
        "updatedAt" : "2019-05-22T18:39:16Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "60d0bb9b199e76974cdc65647663267e9fcf75b1",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +138,142 @@                // If we’re not in a declaration file, we can’t remove the import clause even though\n                // the imported symbols are unused, because removing them makes it look like the import\n                // declaration has side effects, which will cause it to be preserved in the JS emit.\n                else {\n                    usedImports.push(importDecl);"
  },
  {
    "id" : "eef38f39-e5ee-4f45-b803-bbcd0d386849",
    "prId" : 31482,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31482#pullrequestreview-240821160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11b36fb7-ccd6-47bf-93e1-280f47bdbb61",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Does this need to be instead `updateImportDeclarationAndClause`",
        "createdAt" : "2019-05-22T18:47:11Z",
        "updatedAt" : "2019-05-22T18:47:11Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "716ee17f-37ac-40fc-9d99-0b68e985f144",
        "parentId" : "11b36fb7-ccd6-47bf-93e1-280f47bdbb61",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "No, that adds an empty import clause instead of leaving it off.",
        "createdAt" : "2019-05-22T19:04:45Z",
        "updatedAt" : "2019-05-22T20:05:46Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "60d0bb9b199e76974cdc65647663267e9fcf75b1",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +135,139 @@                        /*importClause*/ undefined,\n                        moduleSpecifier));\n                }\n                // If we’re not in a declaration file, we can’t remove the import clause even though\n                // the imported symbols are unused, because removing them makes it look like the import"
  },
  {
    "id" : "2ef44dd3-7731-4a01-adf1-20a1d523d9f8",
    "prId" : 22087,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22087#pullrequestreview-99006042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c76c7bc-5624-42fd-a299-60a74eaa703e",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Nit: use `.length` since this `oldImportDecls` should always be defined.",
        "createdAt" : "2018-02-23T18:26:38Z",
        "updatedAt" : "2018-02-23T18:27:20Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ead7ab29c2f7e5dc6b05f7087076b3e9f6657d7",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +29,33 @@\n        function organizeImportsWorker(oldImportDecls: ReadonlyArray<ImportDeclaration>) {\n            if (length(oldImportDecls) === 0) {\n                return;\n            }"
  },
  {
    "id" : "1a4b3cf3-541b-40cd-a4e8-3c2143ec0ba8",
    "prId" : 22007,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22007#pullrequestreview-98037062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03298ebd-c27c-48d1-b97a-49e2dfeeafe6",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I have a repro where this returns entries from other files.  I have yet to figure out why.",
        "createdAt" : "2018-02-17T02:20:53Z",
        "updatedAt" : "2018-02-20T22:35:12Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "4ec45a27-d650-4d39-a93d-67735e9214fd",
        "parentId" : "03298ebd-c27c-48d1-b97a-49e2dfeeafe6",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I can just add `.filter(e => e.type === \"node\" && e.node.getSourceFile() === sourceFile)`, but first I'd like to confirm that this isn't a bug in FAR.",
        "createdAt" : "2018-02-17T02:25:54Z",
        "updatedAt" : "2018-02-20T22:35:12Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "c7ce6874-40a2-4fa3-8578-cb602b9fb8fb",
        "parentId" : "03298ebd-c27c-48d1-b97a-49e2dfeeafe6",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "It's coming in as a related symbol.   @mhegazy @andy-ms Would it be preferable to filter at the call site (as above) or add a property to `ts.FindAllReferences.Options`?",
        "createdAt" : "2018-02-20T19:29:21Z",
        "updatedAt" : "2018-02-20T22:35:12Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "00c00fdc-ec70-45b3-8709-31642c0cddec",
        "parentId" : "03298ebd-c27c-48d1-b97a-49e2dfeeafe6",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Per our offline discussion, I've added filtering at the call site.",
        "createdAt" : "2018-02-21T00:07:55Z",
        "updatedAt" : "2018-02-21T00:07:56Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc386d25a40e55bacc6f40fd937e08862d055c2c",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +117,121 @@            }\n\n            const entries = FindAllReferences.getReferenceEntriesForNode(identifier.pos, identifier, program, [sourceFile], {\n                isCancellationRequested: () => false,\n                throwIfCancellationRequested: () => { /*noop*/ },"
  },
  {
    "id" : "9440d832-bae1-451a-b967-286166a9a022",
    "prId" : 22007,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22007#pullrequestreview-98354127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4e05529-96d4-4397-abee-2c26daddea7b",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`return !!program.getTypeChecker().getSymbolAtLocation(identifier)!.isReferenced;`, and at top, `program.getSemanticDiagnostics(sourceFile); // Ensure we've checked this file so 'isReferenced' is defined on symbols.`. Also must change check `isUse && result && nameNotFoundMessage && noUnusedIdentifiers` in `checker.ts` to not include `&& noUnusedIdentifiers`, so we always set `isReferenced` accurately.",
        "createdAt" : "2018-02-20T21:02:02Z",
        "updatedAt" : "2018-02-20T22:35:12Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "9f44ca78-989e-45b2-acdd-0f14550196d1",
        "parentId" : "d4e05529-96d4-4397-abee-2c26daddea7b",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I'll defer to @mhegazy, who asked me to do it this way.",
        "createdAt" : "2018-02-20T22:09:55Z",
        "updatedAt" : "2018-02-20T22:35:12Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "42159021-d017-40cb-bb40-d3c43ba1a512",
        "parentId" : "d4e05529-96d4-4397-abee-2c26daddea7b",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Any progress towards reaching a consensus on how to identify unused imports?",
        "createdAt" : "2018-02-21T20:47:49Z",
        "updatedAt" : "2018-02-21T20:47:49Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc386d25a40e55bacc6f40fd937e08862d055c2c",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +104,108 @@        return usedImports;\n\n        function isDeclarationUsed(identifier: Identifier) {\n            const symbol = typeChecker.getSymbolAtLocation(identifier);\n"
  },
  {
    "id" : "b989d77b-5001-439b-955b-9ba387d8cd94",
    "prId" : 22007,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22007#pullrequestreview-98009852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca924031-f6c5-4385-98dc-b7a04feaa6bd",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "return `mapDefined(oldImports, importDecl => <<<importDecl, updated import, or undefined>>>)`",
        "createdAt" : "2018-02-20T21:02:30Z",
        "updatedAt" : "2018-02-20T22:35:12Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "bf82c13d-f20d-4974-9e4f-1e8924354490",
        "parentId" : "ca924031-f6c5-4385-98dc-b7a04feaa6bd",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I'm not sure I understand the advantage of doing it that way.",
        "createdAt" : "2018-02-20T22:12:10Z",
        "updatedAt" : "2018-02-20T22:35:12Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc386d25a40e55bacc6f40fd937e08862d055c2c",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +63,67 @@        const usedImports: ImportDeclaration[] = [];\n\n        for (const importDecl of oldImports) {\n            const {importClause} = importDecl;\n"
  },
  {
    "id" : "cff8c75c-75b9-4865-835f-4d1c4810ab0a",
    "prId" : 21909,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21909#pullrequestreview-96662145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e1aa86a-5bcb-4760-82d1-6c40209124d3",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "You already tested for length at the top of `organizeImports`, and sorting wouldn't have changed the length.",
        "createdAt" : "2018-02-14T20:43:22Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "a5e31d3a-9c13-4f85-9410-b1e9d6523697",
        "parentId" : "4e1aa86a-5bcb-4760-82d1-6c40209124d3",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I believe this also runs after unused import removal.",
        "createdAt" : "2018-02-14T21:24:36Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c278cee17008877f3805f70a214e17ba3f37949",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +104,108 @@     */\n    export function coalesceImports(sortedImports: ReadonlyArray<ImportDeclaration>) {\n        if (sortedImports.length === 0) {\n            return sortedImports;\n        }"
  },
  {
    "id" : "28eac2d4-b8a0-4980-a7b6-09e3ff9a374c",
    "prId" : 21909,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21909#pullrequestreview-97043172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27e50312-cfb8-4811-bc92-b7bfbfb5eded",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "```ts\r\nfunction groupSortedImports(sortedImports: ReadonlyArray<ImportDeclaration>): ReadonlyArray<ReadonlyArray<ImportDeclaration>> {\r\n    return groupBy(sortedImports, i => getExternalModuleName(i.moduleSpecifier));\r\n}\r\n\r\nfunction groupBy<T>(values: ReadonlyArray<T>, by: (value: T) => string): ReadonlyArray<ReadonlyArray<T>> {\r\n    Debug.assert(values.length !== 0);\r\n    const groups: T[][] = [];\r\n    let groupName = by(values[0]);\r\n    let group: T[] = [];\r\n    for (const value of values) {\r\n        const b = by(value);\r\n        if (b === groupName) {\r\n            group.push(value);\r\n        }\r\n        else {\r\n            if (group.length) {\r\n                groups.push(group);\r\n            }\r\n            groupName = b;\r\n            group = [value];\r\n        }\r\n    }\r\n    if (group.length) {\r\n        groups.push(group);\r\n    }\r\n    return groups;\r\n}\r\n```",
        "createdAt" : "2018-02-14T20:49:47Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "c165da60-17ce-41be-8554-b1501ad55799",
        "parentId" : "27e50312-cfb8-4811-bc92-b7bfbfb5eded",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Maybe better:\r\n```ts\r\nfunction groupSortedImports(sortedImports: ReadonlyArray<ImportDeclaration>): ReadonlyArray<ReadonlyArray<ImportDeclaration>> {\r\n    return groupBy(sortedImports, (a, b) => getExternalModuleName(a.moduleSpecifier) === getExternalModuleName(b.moduleSpecifier));\r\n}\r\n\r\nfunction groupBy<T>(values: ReadonlyArray<T>, areSameGroup: (a: T, b: T) => boolean): ReadonlyArray<ReadonlyArray<T>> {\r\n    Debug.assert(values.length !== 0);\r\n    const groups: T[][] = [];\r\n    let group: T[] = [];\r\n    for (const value of values) {\r\n        if (group.length && !areSameGroup(value, group[0])) {\r\n            groups.push(group);\r\n            group = [];\r\n        }\r\n        group.push(value);\r\n    }\r\n    if (group.length) {\r\n        groups.push(group);\r\n    }\r\n    return groups;\r\n}\r\n```",
        "createdAt" : "2018-02-14T21:17:41Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "6d81689c-a184-433b-8e0e-7ef50515e6d4",
        "parentId" : "27e50312-cfb8-4811-bc92-b7bfbfb5eded",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Just to confirm, your improvement was pulling out a generic helper?  The actual behavior is the same?",
        "createdAt" : "2018-02-14T21:42:14Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "f61ed36b-0702-48c5-bc3a-4efab55ea669",
        "parentId" : "27e50312-cfb8-4811-bc92-b7bfbfb5eded",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Yes, assuming invalid imports are filtered out (so `getExternalModuleName` returns a defined result).",
        "createdAt" : "2018-02-14T21:45:43Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "4afec4cd-0887-4d3d-9c88-eaaad5dab8ec",
        "parentId" : "27e50312-cfb8-4811-bc92-b7bfbfb5eded",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Just noticed we don't need `Debug.assert(values.length !== 0);` in the \"maybe better\" version.",
        "createdAt" : "2018-02-14T21:47:59Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "d122edbe-b31f-42b5-afaa-5dfeb1f33c1e",
        "parentId" : "27e50312-cfb8-4811-bc92-b7bfbfb5eded",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Note that this isn't true group-by - it requires that the input be sorted.  Is it still worth pulling out a generic helper for specialized functionality?",
        "createdAt" : "2018-02-15T00:42:33Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "9c3741af-baa8-4276-a984-40285edf31a8",
        "parentId" : "27e50312-cfb8-4811-bc92-b7bfbfb5eded",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Actually, this doesn't *just* rely on it being sorted, but on it being sorted by the same mechanism as `areSameGroup`. Maybe it would be better to group first (not relying on sorting) and then sort the groups?",
        "createdAt" : "2018-02-15T01:49:02Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "b0bbfd29-29e0-4cc7-a5f3-c1c30ef04b3e",
        "parentId" : "27e50312-cfb8-4811-bc92-b7bfbfb5eded",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Yes, that's why it's a private helper function.  At the moment, there doesn't seem to be a need for something more general, does there?",
        "createdAt" : "2018-02-15T18:33:20Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "bcf6fc00-0327-4240-a002-9782304bce8d",
        "parentId" : "27e50312-cfb8-4811-bc92-b7bfbfb5eded",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "As you requested, we are now grouping before performing the other operations.",
        "createdAt" : "2018-02-15T23:25:53Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c278cee17008877f3805f70a214e17ba3f37949",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +70,74 @@     */\n    function groupSortedImports(sortedImports: ReadonlyArray<ImportDeclaration>): ReadonlyArray<ReadonlyArray<ImportDeclaration>> {\n        Debug.assert(length(sortedImports) > 0);\n\n        const groups: ImportDeclaration[][] = [];"
  },
  {
    "id" : "1534d0ad-9967-4fd9-9e06-b8a375b84d96",
    "prId" : 21909,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21909#pullrequestreview-96966789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a592f1ee-c14a-4983-b95f-f08b21ad375d",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Not sure this is needed -- we're basically just deleting these and adding them back, could just ignore them entirely and make `oldImportDecls` only be the valid ones.",
        "createdAt" : "2018-02-15T16:26:40Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "89fc1095-d95d-413a-b2ef-d1fa1b6b6c41",
        "parentId" : "a592f1ee-c14a-4983-b95f-f08b21ad375d",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "If they are scattered throughout the file, this will group them together at the top.",
        "createdAt" : "2018-02-15T18:35:16Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "94cafa87-0713-4666-b297-6bb5c2b37bba",
        "parentId" : "a592f1ee-c14a-4983-b95f-f08b21ad375d",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "OK. For the case where you do keep the invalid ones, could use a helper function and write `const [oldValidImportDecls, oldInvalidImportDecls] = partition(oldImportDecls, isValidImportDeclaration);`",
        "createdAt" : "2018-02-15T19:01:28Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c278cee17008877f3805f70a214e17ba3f37949",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +16,20 @@\n        const oldValidImportDecls = oldImportDecls.filter(importDecl => getExternalModuleName(importDecl.moduleSpecifier));\n        const oldInvalidImportDecls = oldImportDecls.filter(importDecl => !getExternalModuleName(importDecl.moduleSpecifier));\n\n        // All of the new ImportDeclarations in the file, in sorted order."
  }
]