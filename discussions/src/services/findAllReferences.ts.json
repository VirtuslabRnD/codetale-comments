[
  {
    "id" : "deaa3480-cb16-4bd1-bad2-56e065cebc04",
    "prId" : 43511,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43511#pullrequestreview-635015932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e97294c-d22e-4875-bc83-0c6d0442c18d",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "`referenceLocation.parent` canâ€™t be both a `BindingElement` and a `RequireVariableDeclaration`, right?\r\n\r\n_Checks that function..._\r\n\r\nOh no, someone added\r\n\r\n```ts\r\nif (node.kind === SyntaxKind.BindingElement) {\r\n   node = node.parent.parent;\r\n}\r\n```\r\n\r\nwithout noticing that the return type of the function is `node is RequireVariableDeclaration` ðŸ¤¦ \r\n\r\nThat function is now wrong but youâ€™re not relying on the incorrect results of it, so this is fine.",
        "createdAt" : "2021-04-13T20:52:20Z",
        "updatedAt" : "2021-04-13T20:52:31Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "24544584e0beecaf6423b9dafc5de3debea5fcad",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1514,1518 @@\n            // Use the parent symbol if the location is commonjs require syntax on javascript files only.\n            referenceSymbol = isInJSFile(referenceLocation) && referenceLocation.parent.kind === SyntaxKind.BindingElement && isRequireVariableDeclaration(referenceLocation.parent)\n                ? referenceLocation.parent.symbol\n                : referenceSymbol;"
  },
  {
    "id" : "fbd1aad3-9f87-4924-acc1-ddfc97fb687c",
    "prId" : 41805,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41805#pullrequestreview-545288070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49bbe9f3-14b6-42e3-a160-ac8d93908108",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "dont you need to use fileRefMap if this is not module.. esp if file is not module ?",
        "createdAt" : "2020-12-03T19:52:18Z",
        "updatedAt" : "2020-12-11T20:11:07Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "d3c7cf21-3cbd-47f8-9495-c2cf02bd7719",
        "parentId" : "49bbe9f3-14b6-42e3-a160-ac8d93908108",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "To start with, I just wanted to get this working as well as find-all-refs on module specifiers, which only does a string search. It seems like we should use fileRefMap for that case too.",
        "createdAt" : "2020-12-03T20:03:52Z",
        "updatedAt" : "2020-12-11T20:11:07Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "e0a7298e-7c23-4059-b4a2-3d315e8bb54a",
        "parentId" : "49bbe9f3-14b6-42e3-a160-ac8d93908108",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This is done",
        "createdAt" : "2020-12-04T20:52:05Z",
        "updatedAt" : "2020-12-11T20:11:07Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "b40cf6bed108f9e84cf5434cdc86c831f5fa6472",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +658,662 @@\n        export function getReferencesForFileName(fileName: string, program: Program, sourceFiles: readonly SourceFile[], sourceFilesSet: ReadonlySet<string> = new Set(sourceFiles.map(f => f.fileName))): readonly Entry[] {\n            const moduleSymbol = program.getSourceFile(fileName)?.symbol;\n            if (moduleSymbol) {\n                return getReferencedSymbolsForModule(program, moduleSymbol, /*excludeImportTypeOfExportEquals*/ false, sourceFiles, sourceFilesSet)[0]?.references || emptyArray;"
  },
  {
    "id" : "cfbd268b-9c02-47a0-8d36-2af7fd4bc38e",
    "prId" : 41805,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41805#pullrequestreview-550511346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43eb643d-23c1-41bd-b6af-0d803d750c4e",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "do you need to check <reference types=``/> and <reference path=\"\"/> as well and get the reference file locations as well? I am not sure those string literals end up in this path but if its not here where does that happen ?",
        "createdAt" : "2020-12-11T00:30:51Z",
        "updatedAt" : "2020-12-11T20:11:07Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "7bf3c204-c598-4320-bdb4-968b47b67344",
        "parentId" : "43eb643d-23c1-41bd-b6af-0d803d750c4e",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "As long as the triple-slash reference is a module, it happens on line 606. It has never worked for scripts. I have already fixed it but I have it in a separate branch for follow-up because I felt like the scope of this PR was ballooning.",
        "createdAt" : "2020-12-11T19:19:02Z",
        "updatedAt" : "2020-12-11T20:11:07Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "b40cf6bed108f9e84cf5434cdc86c831f5fa6472",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +635,639 @@                        // test that expects this to happen (fourslash/cases/untypedModuleImport.ts).\n                    }\n                    return getReferencesForStringLiteral(node, sourceFiles, checker, cancellationToken);\n                }\n                return undefined;"
  },
  {
    "id" : "ab1c3fce-80ec-481e-ac5e-48f96b045cea",
    "prId" : 41555,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41555#pullrequestreview-531605279",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fde328b-4558-4926-b46c-f4293a5c4278",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "that's because, currently, constructor declarations *do* have a symbol, but\r\n\r\n1. it's useless for find-all-refs\r\n2. getSymbolAtLocation doesn't return it anyway.",
        "createdAt" : "2020-11-16T18:44:34Z",
        "updatedAt" : "2020-11-18T17:35:55Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "8399397a7c9286c1102b6a050e60f1e59c9c4482",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +617,621 @@\n            const checker = program.getTypeChecker();\n            // constructors should use the class symbol, detected by name, if present\n            const symbol = checker.getSymbolAtLocation(isConstructorDeclaration(node) && node.parent.name || node);\n"
  },
  {
    "id" : "c4b60471-e0a4-4dc2-b72f-b68d60702846",
    "prId" : 35887,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35887#pullrequestreview-337813163",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df814a79-1b5f-411f-96f6-acd994a9e456",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think this could be \r\n```\r\ncase SyntaxKind.PrivateIdentifier:\r\ncase SyntaxKind.Identifier:\r\n      return (node as Identifier | PrivateIdentifier).text.length === searchSymbolName.length;\r\n```",
        "createdAt" : "2020-01-02T19:22:04Z",
        "updatedAt" : "2020-01-02T20:23:41Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ace882259575be85196d6c5a7f70bb6c5e69a463",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1232,1236 @@            // Compare the length so we filter out strict superstrings of the symbol we are looking for\n            switch (node.kind) {\n                case SyntaxKind.PrivateIdentifier:\n                case SyntaxKind.Identifier:\n                    return (node as PrivateIdentifier | Identifier).text.length === searchSymbolName.length;"
  },
  {
    "id" : "7476b9d4-96f8-4b0b-bd70-8eaba28eaddd",
    "prId" : 29532,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29532#pullrequestreview-195647472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3745c78c-baae-4e93-a19a-56dacecd1ba2",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "A brief comment explaining more precisely what this does would be nice",
        "createdAt" : "2019-01-23T17:27:07Z",
        "updatedAt" : "2019-01-23T18:48:29Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "d42185373aed23049f2efb64843c13c74e92ab9e",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +426,430 @@     * Merges the references by sorting them (by file index in sourceFiles and their location in it) that point to same definition symbol\n     */\n    function mergeReferences(program: Program, ...referencesToMerge: (SymbolAndEntries[] | undefined)[]): SymbolAndEntries[] | undefined {\n        let result: SymbolAndEntries[] | undefined;\n        for (const references of referencesToMerge) {"
  },
  {
    "id" : "b9c6a2f9-5fce-4ebc-8474-bb06a8c53e1f",
    "prId" : 24814,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24814#pullrequestreview-127344488",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "038c2647-78c1-4d70-baad-d2787579e244",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Looks clear that this is buggy #24818",
        "createdAt" : "2018-06-09T00:19:15Z",
        "updatedAt" : "2018-06-09T00:19:15Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "013d766fcb7a8f48a424ded5b4d43c46f01df373",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1041,1045 @@                        addRef(node);\n                    }\n                    else if (!isFunctionLike(node)) {\n                        node.forEachChild(cb);\n                    }"
  },
  {
    "id" : "d1ba8bb9-6085-4daf-a103-dd30611ccb1e",
    "prId" : 23998,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23998#pullrequestreview-119142481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3206956-ae9c-4201-b5f4-e6010a3c3e50",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Uhhhh, isn't `reference.literal.parent` just `reference`?",
        "createdAt" : "2018-05-09T23:12:23Z",
        "updatedAt" : "2018-05-10T15:50:59Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "1c9e9a99-6e23-439e-b48d-df3db57ab96a",
        "parentId" : "f3206956-ae9c-4201-b5f4-e6010a3c3e50",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`reference` isn't a node, it's a `ModuleReference`.",
        "createdAt" : "2018-05-10T15:51:34Z",
        "updatedAt" : "2018-05-10T15:51:34Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "4daaa968-55ad-4d37-956a-f5223221bc33",
        "parentId" : "f3206956-ae9c-4201-b5f4-e6010a3c3e50",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Ahhhhh, ok",
        "createdAt" : "2018-05-10T15:55:20Z",
        "updatedAt" : "2018-05-10T15:55:20Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "57ef7143dde5629ff93e6fb57bba831a07706dbb",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +279,283 @@        const references = mapDefined<ModuleReference, Entry>(findModuleReferences(program, sourceFiles, symbol), reference => {\n            if (reference.kind === \"import\") {\n                const parent = reference.literal.parent;\n                if (isLiteralTypeNode(parent)) {\n                    const importType = cast(parent.parent, isImportTypeNode);"
  },
  {
    "id" : "cc032891-6b58-435b-9fea-da31f2dbcc07",
    "prId" : 22102,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22102#pullrequestreview-98770339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b18c97c0-c18c-40b9-bce4-3dcdb45054f4",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "It probably wouldn't hurt to test this method.",
        "createdAt" : "2018-02-22T18:05:44Z",
        "updatedAt" : "2018-02-22T23:51:48Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "b7a213d6-d3d6-4ce7-b678-655d14a0e94f",
        "parentId" : "b18c97c0-c18c-40b9-bce4-3dcdb45054f4",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "#22134",
        "createdAt" : "2018-02-22T23:42:49Z",
        "updatedAt" : "2018-02-22T23:51:48Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7a9b9633c82b49dacfbc22f460384fdc645bdcc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +711,715 @@\n    /** Used as a quick check for whether a symbol is used at all in a file (besides its definition). */\n    export function isSymbolReferencedInFile(definition: Identifier, checker: TypeChecker, sourceFile: SourceFile) {\n        const symbol = checker.getSymbolAtLocation(definition);\n        if (!symbol) return true; // Be lenient with invalid code."
  },
  {
    "id" : "97f85d50-e44f-443b-9b9d-5280b763c7e8",
    "prId" : 22004,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22004#pullrequestreview-97349084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbf8c4df-6be2-4761-92af-6f0706e51da2",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Would make the `|| symbol` in that function unnecessary, and its return type should be updated to include `undefined`.",
        "createdAt" : "2018-02-16T23:46:10Z",
        "updatedAt" : "2018-02-16T23:50:23Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b64eefdb2059648f4c186842f8c611699710fe44",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +357,361 @@    /** Core find-all-references algorithm for a normal symbol. */\n    function getReferencedSymbolsForSymbol(symbol: Symbol, node: Node, sourceFiles: ReadonlyArray<SourceFile>, checker: TypeChecker, cancellationToken: CancellationToken, options: Options): SymbolAndEntries[] {\n        symbol = skipPastExportOrImportSpecifierOrUnion(symbol, node, checker) || symbol;\n\n        // Compute the meaning from the location and the symbol it references"
  },
  {
    "id" : "15486da3-877d-4321-bc1f-c6c686753a12",
    "prId" : 16413,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16413#pullrequestreview-43265911",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "442ee356-905a-4762-a927-838094acb113",
        "parentId" : null,
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Wouldn't this have been `true` if `container.jsDoc !== undefined`, or are we opening this up to all comments of the container because we need to find it on a node where we don't currently parse JSDoc comments in the parser?",
        "createdAt" : "2017-06-09T20:29:28Z",
        "updatedAt" : "2017-06-09T20:39:58Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "b70f3a3b-cb26-452c-b1fb-d05defa219c7",
        "parentId" : "442ee356-905a-4762-a927-838094acb113",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "That was a bad test in the first place, because if you `container` is the SourceFile, `container.jsDoc` will always be undefined, but calling `.getStart()` on the SourceFile could still skip past jsdoc comments of its children.\r\nWe should probably never even bother with calling `.getStart()` in `getPossibleSymbolReferencePositions` anyway, because scanning to the start of a node is probably more expensive than just doing text search on the full range.",
        "createdAt" : "2017-06-09T20:39:06Z",
        "updatedAt" : "2017-06-09T20:40:37Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "c12335db-11a2-431a-8dd6-ac7eff93ccc2",
        "parentId" : "442ee356-905a-4762-a927-838094acb113",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I made a PR for that: #16420",
        "createdAt" : "2017-06-09T21:29:11Z",
        "updatedAt" : "2017-06-09T21:29:11Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "23f1ddf0bf8f65003ac9d0ba5fa32b49a36ceee1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +786,790 @@\n        // Need to search in the full start of the node in case there is a reference inside JSDoc.\n        for (const position of getPossibleSymbolReferencePositions(sourceFile, search.text, container, /*fullStart*/ true)) {\n            getReferencesAtLocation(sourceFile, position, search, state);\n        }"
  },
  {
    "id" : "fd9b88e8-e027-4976-be06-2687876d4839",
    "prId" : 13643,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/13643#pullrequestreview-18041840",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2e024e0-57b4-4cb7-8879-ad8882ccbcce",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Moved these out of `getReferencesInNode` to avoid recomputing.",
        "createdAt" : "2017-01-23T22:28:30Z",
        "updatedAt" : "2017-01-26T17:50:55Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bf9b30c5d596037a10bdf78213b711fac20efbf",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +48,52 @@        const result: ReferencedSymbol[] = [];\n        // Maps from a symbol ID to the ReferencedSymbol entry in 'result'.\n        const symbolToIndex: number[] = [];\n        const inheritsFromCache: Map<boolean> = createMap<boolean>();\n"
  },
  {
    "id" : "4a32900a-d642-4df1-af09-dca61a25dd48",
    "prId" : 13643,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/13643#pullrequestreview-18289616",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fe29d2b-6a19-4724-a67f-aeaafa9f525a",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "the additonal indirection does not seem to be worth it. ",
        "createdAt" : "2017-01-24T22:56:48Z",
        "updatedAt" : "2017-01-26T17:50:55Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bf9b30c5d596037a10bdf78213b711fac20efbf",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +59,63 @@        const scope = getSymbolScope(symbol);\n        if (scope) {\n            getRefs(scope, declaredName);\n        }\n        else {"
  }
]