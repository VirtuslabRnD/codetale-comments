[
  {
    "id" : "abd75f30-23fa-4bb6-8987-bb8e59a44d07",
    "prId" : 28340,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28340#pullrequestreview-173494444",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c100af2-3686-4cfd-b42d-9ac7cbe6d810",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "You could create a closure so you don't have to repeat the arguments `start, end, node, sourceFile` everywhere.",
        "createdAt" : "2018-11-09T16:43:25Z",
        "updatedAt" : "2018-11-09T16:43:25Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7995f9153aa79334d3809bf19f6b1c8bfdf6c4c5",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +359,363 @@            switch (node.kind) {\n                case SyntaxKind.TypeReference:\n                    return getListIfVisualStartEndIsInListRange((<TypeReferenceNode>node).typeArguments, start, end, node, sourceFile);\n                case SyntaxKind.ObjectLiteralExpression:\n                    return getListIfVisualStartEndIsInListRange((<ObjectLiteralExpression>node).properties, start, end, node, sourceFile);"
  },
  {
    "id" : "bf470c10-bd05-4251-8eda-360618a84636",
    "prId" : 16695,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16695#pullrequestreview-46324276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b8ff644-43a2-4792-99cd-98b73df76dff",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "What is the alternative to being called on \"text from a real source file\"?",
        "createdAt" : "2017-06-22T22:56:47Z",
        "updatedAt" : "2017-09-20T17:23:46Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "ae6211d3-ec22-4402-9eca-881af139dc35",
        "parentId" : "6b8ff644-43a2-4792-99cd-98b73df76dff",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "Being called with a synthesized AST. The code-fixes in particular do this, and invoke the API's in `textChanges.ts`.",
        "createdAt" : "2017-06-26T17:11:16Z",
        "updatedAt" : "2017-09-20T17:23:46Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc8770390c8419a14d8563407a368a6f63eb3aef",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +11,15 @@        /**\n         * @param assumeNewLineBeforeCloseBrace\n         * `false` when called on text from a real source file.\n         * `true` when we need to assume `position` is on a newline.\n         *"
  },
  {
    "id" : "b34415cd-f55f-4daa-9cb8-aa175071e02d",
    "prId" : 16695,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16695#pullrequestreview-63844304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dda5896-9437-4d4e-bf64-5918afe0c4f1",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Would a similar issue arise for an index expression in an array access?",
        "createdAt" : "2017-06-22T23:36:12Z",
        "updatedAt" : "2017-09-20T17:23:46Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "e80360bb-4d2e-4ee0-8298-e79b424b76cf",
        "parentId" : "5dda5896-9437-4d4e-bf64-5918afe0c4f1",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "I have similar concerns around any other areas this change in logic may impact. What other constructs could be impacted and format differently?",
        "createdAt" : "2017-08-18T17:58:23Z",
        "updatedAt" : "2017-09-20T17:23:46Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "a027b896-241a-43f4-baf2-f3c00623328d",
        "parentId" : "5dda5896-9437-4d4e-bf64-5918afe0c4f1",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "We could keep looking into awkward situations ad infinitum, but we would increasingly approach patterns that don't resemble code user write. To avoid a rabbit hole, I'd prefer to keep this change conservative and get it in. If we run into issues in the course of use or get customer feedback, we can adjust our indentation then.\r\n\r\nThis change was designed to minimally effect indentation except for the args-in-iife case described in the issue. The supplementary tests add (which pass unchanged from master) provide some confirmation this actually holds.",
        "createdAt" : "2017-09-20T01:02:11Z",
        "updatedAt" : "2017-09-20T17:23:46Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc8770390c8419a14d8563407a368a6f63eb3aef",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +306,310 @@\n        export function isArgumentAndStartLineOverlapsExpressionBeingCalled(parent: Node, child: Node, childStartLine: number, sourceFile: SourceFileLike): boolean {\n            if (!(isCallExpression(parent) && contains(parent.arguments, child))) {\n                return false;\n            }"
  },
  {
    "id" : "eb7f8648-afbb-430b-936d-6947edae3abb",
    "prId" : 4757,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72a1cbc7-4dcb-421e-892f-039bbc7f4d98",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "this should be marked as /_@internal_/\n",
        "createdAt" : "2015-12-09T00:35:46Z",
        "updatedAt" : "2015-12-09T00:35:46Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "34b303a9c5caad182f0fafd5b60302333bcd4dce",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +467,471 @@        }\n        \n        export function nodeWillIndentChild(parent: TextRangeWithKind, child: TextRangeWithKind, indentByDefault: boolean) {\n            let childKind = child ? child.kind : SyntaxKind.Unknown;\n            switch (parent.kind) {"
  },
  {
    "id" : "9ba4033e-f20c-4116-b6b8-749ef2e9d6d9",
    "prId" : 4442,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "944d0a9b-0847-46c6-819e-c01f3e02cf16",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "we should also add:\n- ConstructorType\n- ConstructSignature\n- CallSignature\n- ParenthesizedType\n- TaggedTemplateExpression\n- AwaitExpression\n- YieldExpression\n",
        "createdAt" : "2015-08-25T19:23:59Z",
        "updatedAt" : "2015-08-27T13:59:34Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "026d100a-646a-4be1-91d0-5b596edf3a35",
        "parentId" : "944d0a9b-0847-46c6-819e-c01f3e02cf16",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "and add tests for theses :)\n",
        "createdAt" : "2015-08-25T19:24:14Z",
        "updatedAt" : "2015-08-27T13:59:34Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "96174ba1a75f0fbab827b942c6eaa7a639c68619",
    "line" : null,
    "diffHunk" : "@@ -1,1 +435,439 @@                case SyntaxKind.ConstructSignature:\n                case SyntaxKind.Parameter:\n                case SyntaxKind.FunctionType:\n                case SyntaxKind.ConstructorType:\n                case SyntaxKind.UnionType:"
  },
  {
    "id" : "bcd2f0fd-5de5-44cc-a17d-8ba5c56ab30c",
    "prId" : 3179,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88ddab67-356d-4424-a8b0-6284b8c8558c",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "wrap loop body in curlies and add a check that `Node.kind` is equal to `PropertyAccess` / `ElementAccess` / `CallExpression`\n",
        "createdAt" : "2015-06-23T23:39:40Z",
        "updatedAt" : "2015-06-23T23:39:40Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "0c6a332c-7f96-4b79-ae36-d28e2e00f20b",
        "parentId" : "88ddab67-356d-4424-a8b0-6284b8c8558c",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "add tests for that will touch all codepaths\n",
        "createdAt" : "2015-06-23T23:41:13Z",
        "updatedAt" : "2015-06-23T23:41:13Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d91fff856d92ed69858db7f6b6d8e69a9aacf52",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +325,329 @@            \n            function getStartingExpression(expression: PropertyAccessExpression | CallExpression | ElementAccessExpression) {\n                while (expression.expression)\n                    expression = <PropertyAccessExpression | CallExpression | ElementAccessExpression>expression.expression;\n                return expression;"
  },
  {
    "id" : "96f54220-d2c2-44d1-aaba-09c5d0542e0f",
    "prId" : 3179,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ea6ea16-f617-40e9-9e61-7c45e16f08c0",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "`CallExpression` case is not covered by tests\n",
        "createdAt" : "2015-06-23T23:41:42Z",
        "updatedAt" : "2015-06-23T23:41:42Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d91fff856d92ed69858db7f6b6d8e69a9aacf52",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +304,308 @@                node.parent && (\n                node.parent.kind === SyntaxKind.CallExpression ||\n                node.parent.kind === SyntaxKind.NewExpression)) {\n\n                let parentExpression = (<CallExpression | NewExpression>node.parent).expression;"
  },
  {
    "id" : "9fee6487-acec-442a-8392-62eccabdec84",
    "prId" : 2291,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b6fa39f-b1c8-4a4b-b9e8-9d4b6be151fc",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "~~`CaseClause`~~ Never mind\n",
        "createdAt" : "2015-03-11T01:01:09Z",
        "updatedAt" : "2015-03-11T01:18:02Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "59c71acae8e6cc0dcf2bcef19a249bc143fcf20a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +358,362 @@                case SyntaxKind.ObjectLiteralExpression:\n                case SyntaxKind.TypeLiteral:\n                case SyntaxKind.CaseBlock:\n                case SyntaxKind.DefaultClause:\n                case SyntaxKind.CaseClause:"
  },
  {
    "id" : "70bda72b-6a38-489c-9639-b2924700323d",
    "prId" : 2134,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "007aa3de-09fd-4135-a7a6-1a6b0d372e22",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Possibly `export const Unkown = -1;` after your let/const PR gets in\n",
        "createdAt" : "2015-02-26T05:50:37Z",
        "updatedAt" : "2015-02-26T05:50:37Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "1323bfc3-a65d-4aa3-846d-8148bbcd7c83",
        "parentId" : "007aa3de-09fd-4135-a7a6-1a6b0d372e22",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Oh the PR inlines consts?\n",
        "createdAt" : "2015-02-26T18:35:22Z",
        "updatedAt" : "2015-02-26T18:35:22Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "ad0045be-df07-44d9-9e4d-466110431be8",
        "parentId" : "007aa3de-09fd-4135-a7a6-1a6b0d372e22",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "no, we don't inline consts (though we can do this in some cases)\n",
        "createdAt" : "2015-02-26T19:13:57Z",
        "updatedAt" : "2015-02-26T19:13:57Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d781d8b29d529d4000563c9d047f02b9a2ad8a8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4,8 @@    export module SmartIndenter {\n\n        const enum Value {\n            Unknown = -1\n        }"
  },
  {
    "id" : "8495b581-944a-425b-940e-2fae5d348b62",
    "prId" : 2117,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a45e2f67-d5cd-4423-8047-248b0b738711",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Might be worth explaining the difference between a character and a column\n",
        "createdAt" : "2015-02-23T23:25:55Z",
        "updatedAt" : "2015-02-24T06:21:23Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3119839d55d1d4569d001e67f4e4185b3478f73e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +314,318 @@            value of 'column' for '$' is 6 (assuming that tab size is 4)\n        */\n        export function findFirstNonWhitespaceCharacterAndColumn(startPos: number, endPos: number, sourceFile: SourceFile, options: EditorOptions) {\n            var character = 0;\n            var column = 0;"
  },
  {
    "id" : "8d2f4e63-09cb-4d68-ae96-f1bd45d375ac",
    "prId" : 1746,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c6e07cd-4b19-4a7e-9bc4-8f20baa0f0d5",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Use `isTemplateKind`\n",
        "createdAt" : "2015-01-21T01:48:19Z",
        "updatedAt" : "2015-01-21T01:48:19Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8497667f33164943b6fca032bb8216af978a1f3c",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +20,24 @@                precedingToken.kind === SyntaxKind.TemplateHead ||\n                precedingToken.kind === SyntaxKind.TemplateMiddle ||\n                precedingToken.kind === SyntaxKind.TemplateTail;\n            if (precedingTokenIsLiteral && precedingToken.getStart(sourceFile) <= position &&  precedingToken.end > position) {\n                return 0;"
  },
  {
    "id" : "831b74fe-028d-4ee3-ae99-4549748435da",
    "prId" : 890,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "185d012d-2f52-4ad2-8096-5d8db355b776",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Just curious, who listening to this assert? and If we only use them in debug, should we remove them?\n",
        "createdAt" : "2014-10-14T17:16:57Z",
        "updatedAt" : "2014-10-14T18:45:16Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b4bbb9311cb193ed1e310668c78da47d103078b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +109,113 @@            // previous token is comma that separates items in list - find the previous item and try to derive indentation from it\n            var commaItemInfo = findListItemInfo(commaToken);\n            Debug.assert(commaItemInfo && commaItemInfo.listItemIndex > 0);\n            // The item we're interested in is right before the comma\n            return deriveActualIndentationFromList(commaItemInfo.list.getChildren(), commaItemInfo.listItemIndex - 1, sourceFile, options);"
  },
  {
    "id" : "08f499be-b6bf-4b05-9c13-aa31f162c6b8",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c889c46-2c27-447f-a5d9-57e7245fd90f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "What about function parameters on different lines?\n",
        "createdAt" : "2014-09-13T00:00:08Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "04518807-2a2c-4034-9f2f-76d0151dba5b",
        "parentId" : "6c889c46-2c27-447f-a5d9-57e7245fd90f",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "covered by the list case\n",
        "createdAt" : "2014-09-13T00:09:29Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +411,415 @@                case SyntaxKind.Constructor:\n                    // FunctionBlock should take care of indentation\n                    return false;\n                case SyntaxKind.DoStatement:\n                case SyntaxKind.WhileStatement:"
  },
  {
    "id" : "0ea63f9e-6257-4b8c-9d41-380a521ecabd",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84b71996-7da7-4ffe-b0b5-fcd01a7d551f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "When is this possible?\n",
        "createdAt" : "2014-09-13T00:32:49Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "eabc180f-68f9-43c3-847a-f05ca9c4f10b",
        "parentId" : "84b71996-7da7-4ffe-b0b5-fcd01a7d551f",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "defensive check\n",
        "createdAt" : "2014-09-13T00:33:40Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +7,11 @@            if (position > sourceFile.text.length) {\n                return 0; // past EOF\n            }\n\n            var precedingToken = findPrecedingToken(position, sourceFile);"
  },
  {
    "id" : "0a848047-da6b-4add-a039-f71ff59337f6",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae9ca5d1-cbad-4af1-8ccd-93953d24b133",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Might be ideal to document the `-1` sentinel value for these functions.\n",
        "createdAt" : "2014-09-13T01:14:01Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +131,135 @@            \n            if (!useActualIndentation) {\n                return -1;\n            }\n"
  },
  {
    "id" : "b11faf2e-99a2-49df-8c81-3dcdef56b6c0",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a71c4ab7-95e3-4d0e-bcef-e3e07ef1db39",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Don't need the type annotation, but I don't actually mind it.\n",
        "createdAt" : "2014-09-13T23:42:19Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +68,72 @@\n\n            var parent: Node = current.parent;\n            var parentStart: LineAndCharacter;\n"
  },
  {
    "id" : "9de9d532-9a4c-450f-aa07-b7f8378580d8",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20a8bfd1-d703-4273-b65f-ae5f72415be5",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Shouldn't this already be caught in above clause in line 59-63?\n",
        "createdAt" : "2014-09-15T18:02:19Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "095ef8ee-9f3c-4884-b55f-48b4a023f541",
        "parentId" : "20a8bfd1-d703-4273-b65f-ae5f72415be5",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "No, because the final iteration of the previous loop did not include getActualIndentationForListItem. The only way to have exited the loop and ended up here is to break on line 51, and that is before getActualIndentationForListItem.\n",
        "createdAt" : "2014-09-15T20:10:43Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +75,79 @@            while (parent) {\n                // check if current node is a list item - if yes, take indentation from it\n                var actualIndentation = getActualIndentationForListItem(current, sourceFile, options);\n                if (actualIndentation !== -1) {\n                    return actualIndentation + indentationDelta;"
  },
  {
    "id" : "69ab8d2d-3210-4a13-a344-20f2456cb9fe",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bde15cd4-5ae7-4f79-ab5c-fad72fdddad1",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "do you need the extra module? i think it is superfluous \n",
        "createdAt" : "2014-09-15T18:02:54Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "b5312a74-3ccc-4de2-a90e-a5251aa75f11",
        "parentId" : "bde15cd4-5ae7-4f79-ab5c-fad72fdddad1",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "I think it's good to segment it like this. In fact, I wish we did it more. The alternative is to have a createSmartIndenter function\n",
        "createdAt" : "2014-09-15T18:39:42Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "c909029e-deae-4571-9a8f-cca45659549d",
        "parentId" : "bde15cd4-5ae7-4f79-ab5c-fad72fdddad1",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "I would really prefer if we can group functionality module-wise and use namespaces more as now content of completion list is a bit messy. \n",
        "createdAt" : "2014-09-15T19:05:48Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2,6 @@\nmodule ts.formatting {\n    export module SmartIndenter {\n\n        export function getIndentation(position: number, sourceFile: SourceFile, options: TypeScript.FormattingOptions): number {"
  },
  {
    "id" : "bd86f957-867f-4e87-ba2a-1e245b15cdc5",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0a586de-711e-48ce-9189-5a74bda7387d",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "what about multiline comments?\n",
        "createdAt" : "2014-09-15T18:12:28Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "226c7bbb-17c8-4503-ab48-f4de35b88db6",
        "parentId" : "d0a586de-711e-48ce-9189-5a74bda7387d",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "In the old language service, I believe we had indentation within multiline comments. Namely, it matches the actual indentation of the previous line.\n",
        "createdAt" : "2014-09-15T18:51:44Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "62a42d60-f908-4b21-b746-66fe17dbae85",
        "parentId" : "d0a586de-711e-48ce-9189-5a74bda7387d",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "yes, that is right. Old language service applied smart indentation inside multiline comments.\n",
        "createdAt" : "2014-09-15T18:55:49Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +14,18 @@            }\n\n            // no indentation in string \\regex literals\n            if ((precedingToken.kind === SyntaxKind.StringLiteral || precedingToken.kind === SyntaxKind.RegularExpressionLiteral) && \n                precedingToken.getStart(sourceFile) <= position && "
  },
  {
    "id" : "0232a098-97aa-4be7-a456-dd951ffdf656",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa19551c-7646-4a75-846c-2adf49a5a6c8",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "getter, setter, constructor\n",
        "createdAt" : "2014-09-15T19:42:30Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +484,488 @@                case SyntaxKind.ConstructSignature:\n                    return nodeEndsWith(n, SyntaxKind.CloseParenToken, sourceFile);\n                case SyntaxKind.FunctionDeclaration:\n                case SyntaxKind.FunctionExpression:\n                case SyntaxKind.Method:"
  },
  {
    "id" : "36591fe4-1468-4159-9a17-ebae30b12865",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "217b59bb-f1e6-440d-964f-17ad19263ce0",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Really? I would think you only want to do that if you know you are starting a new list item. Maybe I am missing something...\n",
        "createdAt" : "2014-09-15T20:18:51Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@                var actualIndentation = getActualIndentationForListItem(current, sourceFile, options);\n                if (actualIndentation !== -1) {\n                    return actualIndentation;\n                }\n"
  },
  {
    "id" : "dc9a78bb-080c-450b-a480-5c1fe33b1acc",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4d153ca-5917-4f2a-abdb-e4ce4ecdc15a",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Interesting that you have an explicit check for if...else. I would think that nodeContentIsIndented should just return false for this case.\n",
        "createdAt" : "2014-09-15T20:32:30Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +83,87 @@                var parentAndChildShareLine = \n                    parentStart.line === currentStart.line || \n                    childStartsOnTheSameLineWithElseInIfStatement(parent, current, currentStart.line, sourceFile);\n\n                // try to fetch actual indentation for current node from source text"
  },
  {
    "id" : "d9d12d40-d11f-465d-a2a6-da5749597744",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6126a03b-e981-42aa-b284-a289210f512a",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Does it perhaps make sense to collapse this with the previous call to getActualIndentationForListItem?\n",
        "createdAt" : "2014-09-15T20:33:50Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +89,93 @@                if (actualIndentation !== -1) {\n                    return actualIndentation + indentationDelta;\n                }\n\n                // increase indentation if parent node wants its content to be indented and parent and child nodes don't start on the same line"
  },
  {
    "id" : "0b98bcf3-e456-4e0d-8e10-660beb21e091",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "438c9ff9-540d-493d-8a03-3dd859daaca3",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Please comment the intuition behind this. It is not quite clear.\n",
        "createdAt" : "2014-09-15T20:39:48Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "f34ee9f0-f590-4bbd-b411-674c397face5",
        "parentId" : "438c9ff9-540d-493d-8a03-3dd859daaca3",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Also, it feels like the caller should be making this judgment\n",
        "createdAt" : "2014-09-15T20:41:08Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +128,132 @@            var useActualIndentation = \n                (isDeclaration(current) || isStatement(current)) &&\n                (parent.kind === SyntaxKind.SourceFile || !parentAndChildShareLine);\n            \n            if (!useActualIndentation) {"
  },
  {
    "id" : "7ef56121-3904-49e3-ab0a-587476164ed7",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfc5be79-2d08-483b-8b5b-9e99bfebbec8",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Wrap\n",
        "createdAt" : "2014-09-15T20:44:52Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "2772706d-cdf3-4b1c-b780-89b18b4f3d3a",
        "parentId" : "cfc5be79-2d08-483b-8b5b-9e99bfebbec8",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Also I thought synthetic nodes can have lists as parents, just the compiler's nodes would not\n",
        "createdAt" : "2014-09-15T20:46:22Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "0a183666-9a41-4511-b67f-af350aea540c",
        "parentId" : "cfc5be79-2d08-483b-8b5b-9e99bfebbec8",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "But considering we are planning to remove SyntaxLists from the tree, I guess it doesn't matter\n",
        "createdAt" : "2014-09-15T20:47:28Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +169,173 @@\n        function findPrecedingListItem(commaToken: Node): { listItemIndex: number; list: Node } {\n            // CommaToken node is synthetic and thus will be stored in SyntaxList, however parent of the CommaToken points to the container of the SyntaxList skipping the list.\n            // In order to find the preceding list item we first need to locate SyntaxList itself and then search for the position of CommaToken\n            var syntaxList = forEach(commaToken.parent.getChildren(), c => {"
  },
  {
    "id" : "9ba82466-7d28-451e-a2ec-64e9867e4860",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cffbeee2-a3e6-4978-9ce4-e3e369faf5a7",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "- Type argument list inside a generic type reference\n- Tuple type elements\n",
        "createdAt" : "2014-09-15T20:52:11Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "e6eb7df6-73ac-44ca-adff-aba0b613a511",
        "parentId" : "cffbeee2-a3e6-4978-9ce4-e3e369faf5a7",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "good point. I'll add support for type references and keep tuple types as a separate work item.\n",
        "createdAt" : "2014-09-15T21:11:04Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +235,239 @@                        \n                        return getActualIndentationFromList((<CallExpression>node.parent).arguments);\n                }\n            }\n"
  },
  {
    "id" : "01f4c291-ca18-4975-9e00-7e5f2c3e61cd",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f9b3495-9863-427e-9642-5d9428c66e13",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "For this one, I would check that child is not the else clause\n",
        "createdAt" : "2014-09-15T21:09:48Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : 420,
    "diffHunk" : "@@ -1,1 +418,422 @@                    return child && child.kind !== SyntaxKind.Block;\n                case SyntaxKind.IfStatement:\n                    return child && child.kind !== SyntaxKind.Block;\n                case SyntaxKind.TryStatement:\n                    // TryBlock\\CatchBlock\\FinallyBlock should take care of indentation"
  },
  {
    "id" : "24281831-c5b9-44bd-a7f3-c5fb38de6c1b",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a658b616-2825-40fc-a1e2-fa7e6081e91a",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Put a comment that this is for ASI\n",
        "createdAt" : "2014-09-15T21:11:09Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : 458,
    "diffHunk" : "@@ -1,1 +456,460 @@                    return true;\n                }\n                else if (last.kind === SyntaxKind.SemicolonToken && children.length !== 1) {\n                    return children[children.length - 2].kind === expectedLastToken;\n                }"
  },
  {
    "id" : "e6eb216f-b235-4472-a622-c0a2f5f1ea7b",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84ea43e7-9161-4286-bb12-ca272aed6b33",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "What if previousToken is the rightmost token of parent? Wouldn't you need to climb up the tree further?\n",
        "createdAt" : "2014-09-15T21:14:14Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +314,318 @@                return undefined;\n            }\n        }\n\n        function findPrecedingToken(position: number, sourceFile: SourceFile): Node {"
  },
  {
    "id" : "aa377b52-6c07-4590-939d-afca58868be1",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46371bbf-7b2f-4d23-aa84-f2dd41112604",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Why is this not the mirror image of findNextToken?\n",
        "createdAt" : "2014-09-15T21:14:35Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +363,367 @@                    return candidate && findRightmostToken(candidate);\n                }\n            }\n\n            /// finds last node that is considered as candidate for search (isCandidate(node) === true) starting from 'exclusiveStartPosition'"
  },
  {
    "id" : "b6f0a7a3-0f83-41bb-b145-f6de3bb6b338",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5baad6af-cc16-45d3-8fd2-998a7a553fc3",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Move this to services.ts since I plan to use it for signature help.\n",
        "createdAt" : "2014-09-15T21:17:02Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +316,320 @@        }\n\n        function findPrecedingToken(position: number, sourceFile: SourceFile): Node {\n            return find(sourceFile);\n"
  },
  {
    "id" : "fc83636d-9724-451d-8c40-6be7efb983c0",
    "prId" : 671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80ec2599-ea34-4f77-a648-e7ce37537df3",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "return undefined explicitly\n",
        "createdAt" : "2014-09-15T21:41:01Z",
        "updatedAt" : "2014-09-16T18:29:00Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f446ddf7e7514cda3a2aa4133e55e73b4473a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +313,317 @@\n                return undefined;\n            }\n        }\n"
  }
]