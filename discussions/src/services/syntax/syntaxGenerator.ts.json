[
  {
    "id" : "2eccbc9a-bf7d-4d6c-baef-51b37d0eafbf",
    "prId" : 1021,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5bdc467-dac2-4e66-8428-dccbbda936d4",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Are we planning to use this in the future? I don't get it right now. At least add a comment on why this is here.\n",
        "createdAt" : "2014-10-31T22:19:24Z",
        "updatedAt" : "2014-10-31T22:19:24Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "18af4fc1650a6f077ec37eefba81e8bfa416be0f",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +2039,2043 @@    result += \"\\r\\n\\r\\n\";\n\n    /*\n    result += \"    export var nodeMetadata: string[][] = [\";\n    for (var i = 0; i <= TypeScript.SyntaxKind.LastNode; i++) {"
  },
  {
    "id" : "e9ae5e5b-e2b7-4691-948b-63162db95a07",
    "prId" : 1021,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59915e01-e5d7-4213-9c4c-1b18c70044db",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Explain why you're commenting this out.\n",
        "createdAt" : "2014-10-31T22:19:38Z",
        "updatedAt" : "2014-10-31T22:19:38Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "18af4fc1650a6f077ec37eefba81e8bfa416be0f",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +2132,2136 @@        result += generateNode(definition, abstract);\n    }\n    /*\n    result += \"\\r\\n\\r\\n    \";\n"
  },
  {
    "id" : "cb3bfd38-656c-4612-b1ec-c582d46988e3",
    "prId" : 997,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce0e924e-8bf4-42da-9648-855686827da4",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This seems absurd, when we get the chance we should just add an `<any[]>` type assertion at the beginning of the list and remove these `<any>`s.\n",
        "createdAt" : "2014-10-30T09:46:07Z",
        "updatedAt" : "2014-10-30T19:38:22Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "64086133e993f34d2b2930d7b7ff5aa746df968f",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +367,371 @@        isTypeScriptSpecific: true\n    },\n    <any> {\n        name: 'UnionTypeSyntax',\n        baseType: 'ISyntaxNode',"
  },
  {
    "id" : "56cecb7b-ee74-4ff0-9cec-6503aba7374f",
    "prId" : 701,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a478614f-5d9c-491c-8278-4ed03a295493",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Just do `children: <any[]>[ /*...*/]`, although it is formatted kind of nicely.\n",
        "createdAt" : "2014-09-19T21:31:42Z",
        "updatedAt" : "2014-09-20T01:15:38Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4143c242b5c1b575bb4118319292cebaaa5c7060",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +362,366 @@            <any>{ name: 'openBracketToken', isToken: true, excludeFromAST: true },\n            <any>{ name: 'types', isSeparatedList: true, elementType: 'ITypeSyntax' },\n            <any>{ name: 'closeBracketToken', isToken: true, excludeFromAST: true }\n        ],\n        isTypeScriptSpecific: true"
  }
]