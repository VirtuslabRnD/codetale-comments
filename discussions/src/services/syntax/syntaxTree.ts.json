[
  {
    "id" : "6f912559-e50d-4e84-8538-cba0ca6fb4e7",
    "prId" : 1246,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce6717f8-8469-4777-9528-2bddb04b320b",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why don't we use a `Missing` node instead of `undefined`? Just for my own understanding.\n",
        "createdAt" : "2014-11-22T21:20:20Z",
        "updatedAt" : "2014-11-22T21:22:16Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "4a80b845-f903-4d12-a0e9-ae512ef86ec3",
        "parentId" : "ce6717f8-8469-4777-9528-2bddb04b320b",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Because a missing node would cause us to be unable to reuse the node in incremental scenarios.\n",
        "createdAt" : "2014-11-22T21:22:56Z",
        "updatedAt" : "2014-11-22T21:22:56Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "80366711d01d023baa8094a355fd7056da5d8027",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +1311,1315 @@\n            return false;\n        }\n\n        public visitTryStatement(node: TryStatementSyntax): void {"
  },
  {
    "id" : "4d07f0b0-b035-4670-905c-85297fbc0775",
    "prId" : 995,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6bde3b0-42af-4d17-a633-b7e225d26a30",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Why we don't use !== undefined? Though this is equivalent, I think it is a bit harder to read \n",
        "createdAt" : "2014-10-30T17:20:50Z",
        "updatedAt" : "2014-10-30T17:20:50Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd1a1dbfc54825f1590de07c5b931dc0afaca9a2",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +88,92 @@            var leadingTrivia = firstToken.leadingTrivia(this.text);\n\n            this._isExternalModule = !!externalModuleIndicatorSpanWorker(this, firstToken);\n\n            var amdDependencies: string[] = [];"
  }
]