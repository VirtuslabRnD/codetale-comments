[
  {
    "id" : "23d6d722-6347-499e-a186-710e53dedded",
    "prId" : 44708,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44708#pullrequestreview-708597774",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6e5bc23-7942-4823-b683-b9ab1a6094fd",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Is it all safe to put this new code into getContextualType? What happens if you put it there?",
        "createdAt" : "2021-07-16T17:14:25Z",
        "updatedAt" : "2021-07-16T17:15:13Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2be7d14fd9253ac4b03dc1b3ae831ccb819d908",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +803,807 @@        }\n\n        const parent = node.parent;\n        if (parent && isBinaryExpression(parent) && isEqualityOperatorKind(parent.operatorToken.kind)) {\n            return checker.getTypeAtLocation(node === parent.left ? parent.right : parent.left);"
  },
  {
    "id" : "204c210c-bc75-4644-b454-205002f7fe8c",
    "prId" : 44176,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44176#pullrequestreview-678683406",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c1b436d-757f-4fd2-a53f-ef54a5f45527",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Little concerned about adding and removing watches here.. since this cache is cleared between the open files it seems like we may need to create and remove and again create same kinds of watches over and over.. if there are no watches for that directory .. eg there are no closed script infos for that node_modules folder in any program or something, this may be costly on linux where every recursive directory watching needs to go traverse the directory and create watches since there is no native recurisve watching support... ",
        "createdAt" : "2021-05-21T19:13:27Z",
        "updatedAt" : "2021-05-21T19:13:27Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "21bfc6b6-7e52-4dcd-9ae6-0bb3f0ce5d35",
        "parentId" : "6c1b436d-757f-4fd2-a53f-ef54a5f45527",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Hm, that makes sense. In most cases this will only find one node_modules directory and it will be watched pretty much every time the cache is created. In some monorepo styles, there could commonly be two node_modules directories visible to any given file—one for the subproject and one at the monorepo root. In those situations, it seems like we would eventually want to clean up old watches—what do you think is a good point in the project lifecycle to do that?",
        "createdAt" : "2021-05-24T19:03:05Z",
        "updatedAt" : "2021-05-24T19:03:06Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "2e403f6e-2630-4630-8230-8ea1d1e98c48",
        "parentId" : "6c1b436d-757f-4fd2-a53f-ef54a5f45527",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "can you think of a case where closed script info is not used but we are watching for package.json in the node_modules directory?",
        "createdAt" : "2021-06-04T22:21:51Z",
        "updatedAt" : "2021-06-04T22:23:20Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "abad0a15-07a7-44ac-b5a9-0931f7419477",
        "parentId" : "6c1b436d-757f-4fd2-a53f-ef54a5f45527",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I don't know the full details of when closed script info watches happen, but since we only generate module specifiers for things in the program (or auto import provider), I believe we'll always have closed script info watches on directories in the cache. Does that seem right to you?",
        "createdAt" : "2021-06-04T23:14:41Z",
        "updatedAt" : "2021-06-04T23:14:41Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "493170b1-154e-4385-b2bc-a96ba0840e0c",
        "parentId" : "6c1b436d-757f-4fd2-a53f-ef54a5f45527",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Yes .. things in program will watch the node modules folder so we are good there ",
        "createdAt" : "2021-06-08T15:36:09Z",
        "updatedAt" : "2021-06-08T15:36:10Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4604dde1e7d905badde552c18bb19fafe07b2b85",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +3334,3338 @@            },\n            clear() {\n                containedNodeModulesWatchers?.forEach(watcher => watcher.close());\n                cache?.clear();\n                containedNodeModulesWatchers?.clear();"
  },
  {
    "id" : "00262105-f588-466f-8f53-e59481bcadb0",
    "prId" : 43149,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43149#pullrequestreview-617719635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a31c6bc-6fbd-4c3b-b67c-6f3a99b1b863",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "All this added stuff is just moved from completions.ts, importFixes.ts, or project.ts with very little change. The sharing between those three was ad-hoc and getting unwieldy.",
        "createdAt" : "2021-03-22T16:31:02Z",
        "updatedAt" : "2021-03-26T21:29:28Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "badcd839b2359138d0e8262a4cce4f6f4251b8c9",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2848,2852 @@    }\n\n    export interface PackageJsonImportFilter {\n        allowsImportingAmbientModule: (moduleSymbol: Symbol, moduleSpecifierResolutionHost: ModuleSpecifierResolutionHost) => boolean;\n        allowsImportingSourceFile: (sourceFile: SourceFile, moduleSpecifierResolutionHost: ModuleSpecifierResolutionHost) => boolean;"
  },
  {
    "id" : "50993304-b078-4032-bb4d-c79a7739381e",
    "prId" : 43149,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43149#pullrequestreview-617719635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f61146ad-b587-46c0-8d86-38e13c2401b1",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This function is somewhat changed in its move from importFixes.ts. It now takes advantage of the new module specifier cache, and combines the previously separate checks of “can I come up with a module specifier” and “do the package.jsons I can see let me use that module specifier.”",
        "createdAt" : "2021-03-22T16:34:53Z",
        "updatedAt" : "2021-03-26T21:29:28Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "badcd839b2359138d0e8262a4cce4f6f4251b8c9",
    "line" : 301,
    "diffHunk" : "@@ -1,1 +3269,3273 @@    }\n\n    export function isImportableFile(\n        program: Program,\n        from: SourceFile,"
  },
  {
    "id" : "f6e3a3e7-19f9-4d9f-9ce0-9154c4f258f2",
    "prId" : 41941,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41941#pullrequestreview-560164248",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7af1b9f-2b02-45fa-8b0f-7f48bdb3eccd",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "This shouldn't be done in this change, but it's pretty silly for getNodeModifiers to return a string only for some of its callers to split it again. Since I think this is part of the public API, a good future change would be to add a new function that returns a `ScriptElementKindModifier[]`.\r\n\r\nActually, getSymbolModifiers has the same problem, although none of its callers immediately split its result back into an array.",
        "createdAt" : "2020-12-30T18:38:05Z",
        "updatedAt" : "2020-12-30T18:42:24Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "ba08b397-3788-4af9-b7dd-d4370156550d",
        "parentId" : "f7af1b9f-2b02-45fa-8b0f-7f48bdb3eccd",
        "authorId" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "body" : "@sandersn You are right. I think we can create an issue for that. I have changes related to `getNodeModifiers`, I tried to use `Set`, in order to about `split`/`join`.",
        "createdAt" : "2020-12-30T18:53:47Z",
        "updatedAt" : "2020-12-30T18:53:48Z",
        "lastEditedBy" : "abcb489c-ecaa-43d7-a864-2305b3feb38c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f128330e0e06ba5f99a7926863afb3bfe9e309b0",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1566,1570 @@    }\n\n    export function getNodeModifiers(node: Node, excludeFlags = ModifierFlags.None): string {\n        const result: string[] = [];\n        const flags = isDeclaration(node)"
  },
  {
    "id" : "af85146c-8532-4f9e-839c-caddf02ba4b0",
    "prId" : 41924,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41924#pullrequestreview-549645556",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c24945f-8751-4be5-b4bc-5c636eedce3e",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "The changes to this function were able to bring the test runtime from ~36s to ~10s on my machine. Just looking for the likely token position using `lastIndexOf` gives a great improvement,",
        "createdAt" : "2020-12-10T22:11:34Z",
        "updatedAt" : "2020-12-15T23:27:57Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e983f4c9a9342502ce15c95735c3b84ffffa65f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1392,1396 @@    }\n\n    export function findPrecedingMatchingToken(token: Node, matchingTokenKind: SyntaxKind.OpenBraceToken | SyntaxKind.OpenParenToken | SyntaxKind.OpenBracketToken, sourceFile: SourceFile) {\n        const closeTokenText = tokenToString(token.kind)!;\n        const matchingTokenText = tokenToString(matchingTokenKind)!;"
  },
  {
    "id" : "58b5d1d8-57c2-48fd-92e9-34420ab321c9",
    "prId" : 41267,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41267#pullrequestreview-518077048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2093837-2d44-4348-a626-4377a2ca769b",
        "parentId" : null,
        "authorId" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "body" : "```suggestion\r\n            // ignore synthetic import added when importHelpers: true\r\n            const firstModuleSpecifier = sourceFile.imports &&\r\n```",
        "createdAt" : "2020-10-27T19:35:41Z",
        "updatedAt" : "2020-10-27T19:41:06Z",
        "lastEditedBy" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "tags" : [
        ]
      }
    ],
    "commit" : "a18b476f1bae8833fd9ad3248489e5851123bbf3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1829,1833 @@        else {\n            // ignore synthetic import added when importHelpers: true\n            const firstModuleSpecifier = sourceFile.imports &&\n                find(sourceFile.imports, n => isStringLiteral(n) && !nodeIsSynthesized(n.parent)) as StringLiteral;\n            return firstModuleSpecifier ? quotePreferenceFromString(firstModuleSpecifier, sourceFile) : QuotePreference.Double;"
  },
  {
    "id" : "930a4116-35e6-40f5-9974-3af72d968801",
    "prId" : 40953,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40953#pullrequestreview-503376362",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40c18f3f-83aa-461e-a00c-62edc7ebe5b0",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "A comparer that ignores one argument is definitely not more readable than what you started with.",
        "createdAt" : "2020-10-06T19:59:51Z",
        "updatedAt" : "2020-10-07T19:28:00Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "0eece543-bb53-4432-8a46-bf57f2911d56",
        "parentId" : "40c18f3f-83aa-461e-a00c-62edc7ebe5b0",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "So... that we call it a \"comparer\" is itself kinda a mistake on our part. Yes, you _can_ pass a comparer and it does what you might want, but we reliably pass the second argument to `binarySearchKey` as the second argument to the \"comparer\" - it never changes. I could choose to not ignore it, but there's no reason to - it's the same constant `position` value I close over.",
        "createdAt" : "2020-10-06T20:24:44Z",
        "updatedAt" : "2020-10-07T19:28:00Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "8ff31da0-7a4f-49e0-9ea8-365d5ffd3d1e",
        "parentId" : "40c18f3f-83aa-461e-a00c-62edc7ebe5b0",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "So it's more of a \"selector\" callback - it just needs to return if you \"select the pivot element\", \"select the left group\", or \"select the right group\". The `Comparison` values are just mapped to that.",
        "createdAt" : "2020-10-06T20:26:03Z",
        "updatedAt" : "2020-10-07T19:28:00Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "fe8ca216-d98d-4ce7-ba78-700dc58c4e9c",
        "parentId" : "40c18f3f-83aa-461e-a00c-62edc7ebe5b0",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I think a comment would be helpful here.",
        "createdAt" : "2020-10-06T21:35:01Z",
        "updatedAt" : "2020-10-07T19:28:00Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6af3222875fc63222b2587dbddc23d23cfbde47",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1174,1178 @@\n            const children = n.getChildren(sourceFile);\n            const i = binarySearchKey(children, position, (_, i) => i, (middle, _) => {\n                // This last callback is more of a selector than a comparator -\n                // `EqualTo` causes the `middle` result to be returned"
  },
  {
    "id" : "5cde3427-ed21-410f-943f-8d0bf0abfb2c",
    "prId" : 39394,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39394#pullrequestreview-444240119",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0b10ec1-71f0-45e2-8c4d-daaf65d136b3",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I don't remember ever seeing binary search used in a merge of two sorted lists and I'm having trouble wrapping my head around whether it helps.  Seems like, to come out ahead, you'd need to either be inserting a tiny list into a huge list or start each binary search at the previous insertion index.",
        "createdAt" : "2020-07-07T17:50:32Z",
        "updatedAt" : "2020-07-08T22:24:48Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "918a9015-f90c-45b8-a26b-8dec3ebd8b03",
        "parentId" : "e0b10ec1-71f0-45e2-8c4d-daaf65d136b3",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yeah, the binary search wasn’t intended to squeeze performance; it was just the first thing that came to mind noting that the existing imports would always be sorted. And when I wrote `getImportDeclarationInsertionIndex`, I was thinking about inserting a single import (which is the typical case—adding one import via a completion). So when I came around to this section, I was just using the APIs I had already written. There is definitely a way to do this with fewer iterations now that you mention it, but I’m not too concerned; I think the size of both lists will usually be small. I’m open to revisiting it if you feel strongly about it, though.",
        "createdAt" : "2020-07-07T20:40:05Z",
        "updatedAt" : "2020-07-08T22:24:48Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "baf6283b-d740-44d7-ad18-4e1e37974eb0",
        "parentId" : "e0b10ec1-71f0-45e2-8c4d-daaf65d136b3",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "No, I don't feel strongly about it - it just stood out as a departure from the usual merge technique.",
        "createdAt" : "2020-07-07T20:50:52Z",
        "updatedAt" : "2020-07-08T22:24:48Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b9407ef1ef4c3e0075f68d09d12946c7a9d204f",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1883,1887 @@        else if (existingImportStatements && OrganizeImports.importsAreSorted(existingImportStatements)) {\n            for (const newImport of sortedNewImports) {\n                const insertionIndex = OrganizeImports.getImportDeclarationInsertionIndex(existingImportStatements, newImport);\n                if (insertionIndex === 0) {\n                    changes.insertNodeBefore(sourceFile, existingImportStatements[0], newImport, /*blankLineBetween*/ false);"
  },
  {
    "id" : "145fbe4e-f153-4d50-8b5f-b069256b9d21",
    "prId" : 39394,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39394#pullrequestreview-444216227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ed7edc0-a11f-443d-b69a-47a7f75629b5",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "This function is not expected to do any coalescing of imports, right?",
        "createdAt" : "2020-07-07T17:52:03Z",
        "updatedAt" : "2020-07-08T22:24:48Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "bb9e06fd-5b4f-4024-ad6c-cc40d9896584",
        "parentId" : "6ed7edc0-a11f-443d-b69a-47a7f75629b5",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "That’s correct.",
        "createdAt" : "2020-07-07T20:13:47Z",
        "updatedAt" : "2020-07-08T22:24:48Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b9407ef1ef4c3e0075f68d09d12946c7a9d204f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1873,1877 @@    }\n\n    export function insertImports(changes: textChanges.ChangeTracker, sourceFile: SourceFile, imports: AnyImportOrRequireStatement | readonly AnyImportOrRequireStatement[], blankLineBetween: boolean): void {\n        const decl = isArray(imports) ? imports[0] : imports;\n        const importKindPredicate: (node: Node) => node is AnyImportOrRequireStatement = decl.kind === SyntaxKind.VariableStatement ? isRequireVariableStatement : isAnyImportSyntax;"
  },
  {
    "id" : "242d5ae3-1b54-4d76-bc95-c1e8f7cd2aea",
    "prId" : 37745,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37745#pullrequestreview-386044404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a091608-1e23-4fe3-9aae-c0ad782c421d",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "The rename was bailing because it was calling `getMeaningFromLocation` on the import specifier’s identifier, and it was making it all the way to the bottom of the function, returning `SemanticMeaning.Value`. Seems like identifier serving as an import alias should be `SemanticMeaning.All`.",
        "createdAt" : "2020-04-02T00:53:25Z",
        "updatedAt" : "2020-04-02T00:53:25Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ca617f9e4a24b024301cf8d0fa1ebdbb9f94a33",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +97,101 @@            || node.parent.kind === SyntaxKind.ImportSpecifier\n            || node.parent.kind === SyntaxKind.ImportClause\n            || isImportEqualsDeclaration(node.parent) && node === node.parent.name) {\n            return SemanticMeaning.All;\n        }"
  },
  {
    "id" : "2a3211be-78a7-4a05-83b9-bf98ba1ced20",
    "prId" : 37029,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37029#pullrequestreview-446667884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bedfc8a6-23d5-4e16-acbb-0d2bb4e851cb",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "These whitespace changes look unintentional (and worse?).",
        "createdAt" : "2020-07-10T17:33:46Z",
        "updatedAt" : "2020-07-13T23:59:21Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "7609375f-3535-49f3-95cd-49fa161f2f04",
        "parentId" : "bedfc8a6-23d5-4e16-acbb-0d2bb4e851cb",
        "authorId" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "body" : "It's unintentional in the sense that I didn't add them explicitly, it was added by the formatting command so I decided it was ok. Let me know if you thinkg otherwise.",
        "createdAt" : "2020-07-10T19:59:13Z",
        "updatedAt" : "2020-07-13T23:59:21Z",
        "lastEditedBy" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "tags" : [
        ]
      }
    ],
    "commit" : "635ee24a3c58db454bcf7ed39f7ae91739abca41",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +878,882 @@        if (isModifier(node) && (forRename || node.kind !== SyntaxKind.DefaultKeyword) ? contains(parent.modifiers, node) :\n            node.kind === SyntaxKind.ClassKeyword ? isClassDeclaration(parent) || isClassExpression(node) :\n                node.kind === SyntaxKind.FunctionKeyword ? isFunctionDeclaration(parent) || isFunctionExpression(node) :\n                    node.kind === SyntaxKind.InterfaceKeyword ? isInterfaceDeclaration(parent) :\n                        node.kind === SyntaxKind.EnumKeyword ? isEnumDeclaration(parent) :"
  },
  {
    "id" : "278abe01-9c34-4836-b10a-1f85e5ae94f9",
    "prId" : 35477,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35477#pullrequestreview-346215582",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cbbaeb1-1eea-4c3b-8452-9eb52dee7f73",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think this needs to handled similar to `AssignmentDeclarationKind.ModuleExports` so that export `default function foo()` shows the kind as function and not as const",
        "createdAt" : "2020-01-21T19:53:09Z",
        "updatedAt" : "2020-01-21T21:46:38Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "0f7b0e9a-1156-405b-96bd-ada045e2fbb6",
        "parentId" : "7cbbaeb1-1eea-4c3b-8452-9eb52dee7f73",
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "Yeah, makes sense - I've used `isFunctionLikeKind` to determine that and you can see some examples in the tests 👍 ",
        "createdAt" : "2020-01-21T20:50:53Z",
        "updatedAt" : "2020-01-21T21:46:38Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      },
      {
        "id" : "37c60a16-b72f-480e-af93-c99e8ca3cc37",
        "parentId" : "7cbbaeb1-1eea-4c3b-8452-9eb52dee7f73",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Need to also handle ClassExpression?",
        "createdAt" : "2020-01-21T20:56:40Z",
        "updatedAt" : "2020-01-21T21:46:38Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "d37a732e-6cd0-45eb-b740-806820629d15",
        "parentId" : "7cbbaeb1-1eea-4c3b-8452-9eb52dee7f73",
        "authorId" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "body" : "Instead of handling each case, I've switched to recurse in the `node.expression`\r\n\r\n```ts\r\ncase SyntaxKind.ExportAssignment:\r\n    const scriptKind = getNodeKind((node as ExportAssignment).expression);\r\n    // If the expression didn't come back with something (like it does for an identifiers)\r\n    return scriptKind === ScriptElementKind.unknown ? ScriptElementKind.constElement : scriptKind;\r\n```\r\n\r\nI'm open to this going a bit further and digging into the identifier and finding out out var/let/const, but I don't know how to pull out the declaration of a random identifier to check.",
        "createdAt" : "2020-01-21T21:49:00Z",
        "updatedAt" : "2020-01-21T21:49:00Z",
        "lastEditedBy" : "9302e396-f4ae-400e-962a-ed2cd3258fdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "de849b9a6be003357b3a078893c361e8b2963cd3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +439,443 @@            case SyntaxKind.Identifier:\n                return isImportClause(node.parent) ? ScriptElementKind.alias : ScriptElementKind.unknown;\n            case SyntaxKind.ExportAssignment:\n                const scriptKind = getNodeKind((node as ExportAssignment).expression);\n                // If the expression didn't come back with something (like it does for an identifiers)"
  },
  {
    "id" : "cdd86fa6-fe4d-4b33-a34f-b3e8e21ef6eb",
    "prId" : 35373,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35373#pullrequestreview-323866766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "963e1395-3c32-4111-a459-98cc63b8f498",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "does VS Code support `#region` ??",
        "createdAt" : "2019-11-27T17:00:50Z",
        "updatedAt" : "2019-11-27T21:16:31Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "91c07ef0-7889-4e33-a00f-c99d112c2a86",
        "parentId" : "963e1395-3c32-4111-a459-98cc63b8f498",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Yea",
        "createdAt" : "2019-11-27T18:17:13Z",
        "updatedAt" : "2019-11-27T21:16:31Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e5232c370f1ad2458c0af1ffa7ae6decb51572c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +12,16 @@namespace ts {\n    // These utilities are common to multiple language service features.\n    //#region\n    export const scanner: Scanner = createScanner(ScriptTarget.Latest, /*skipTrivia*/ true);\n"
  },
  {
    "id" : "6ff82a9f-a021-4507-8ad4-ff10049065ba",
    "prId" : 33040,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33040#pullrequestreview-286310060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92968485-db75-4b8f-b148-e8804e3f300b",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "`ShorthandPropertyAssignment` and `SpreadAssignment` look like they might be related, but I don't know the specifics of either one.",
        "createdAt" : "2019-08-29T22:28:42Z",
        "updatedAt" : "2019-09-11T22:04:18Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "48ba04c6-0ac8-439d-9565-384a2ad24a01",
        "parentId" : "92968485-db75-4b8f-b148-e8804e3f300b",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "`isVariableLike` shows a collection of related syntax kinds.",
        "createdAt" : "2019-08-29T22:35:20Z",
        "updatedAt" : "2019-09-11T22:04:18Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "8a157b49-dd69-4084-a5f8-7ac757dfe2c1",
        "parentId" : "92968485-db75-4b8f-b148-e8804e3f300b",
        "authorId" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "body" : "Currently spread assignments will just turn up the binding elements in the nav bar. e.g. `var [a, b, ...other]` will show `a`, `b`, and `...other`. If we want to do better I imagine we would have to resort to the sort of merging that is done elsewhere.\r\n\r\nchecker.ts has this comment on destructuring:\r\n```ts\r\n        //   let { x } = obj;  // BindingElement\r\n        //   let [ x ] = obj;  // BindingElement\r\n        //   { x } = obj;      // ShorthandPropertyAssignment\r\n        //   { x: v } = obj;   // PropertyAssignment\r\n        //   [ x ] = obj;      // Expression\r\n```\r\nAgain we would show the `BindingElement` in `let { x } = obj;` as `x`, but I'm having trouble figuring out in what case a `ShorthandPropertyAssignment` node would show up in the ` { x } = obj;` example. I just see it as separate `Block` and `ExpressionStatement` nodes.",
        "createdAt" : "2019-09-10T17:17:44Z",
        "updatedAt" : "2019-09-11T22:04:18Z",
        "lastEditedBy" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "tags" : [
        ]
      }
    ],
    "commit" : "81903e09fb2fb8c8d560c1da4dbdb9164b9285f4",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +354,358 @@            case SyntaxKind.MethodSignature:\n                return ScriptElementKind.memberFunctionElement;\n            case SyntaxKind.PropertyAssignment:\n                const {initializer} = node as PropertyAssignment;\n                return isFunctionLike(initializer) ? ScriptElementKind.memberFunctionElement : ScriptElementKind.memberVariableElement;"
  },
  {
    "id" : "de104232-d5c0-4f42-bcf9-7170e7328c5c",
    "prId" : 31008,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31008#pullrequestreview-228437883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e079ade-4122-4fbe-a66a-3d5fedb0f9f0",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Is `parent` actually intended to be safe to use here? Is there another way to distinguish a `BindingElement` between an array binding element and an object binding element?",
        "createdAt" : "2019-04-18T01:47:10Z",
        "updatedAt" : "2019-04-19T15:58:45Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "1cfa8231-d895-4530-85b3-48a74783d9e5",
        "parentId" : "3e079ade-4122-4fbe-a66a-3d5fedb0f9f0",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "I was under the impression that if you have a checker, then binding has occurred and it's safe to use `parent`. I might be missing something though.",
        "createdAt" : "2019-04-18T15:59:00Z",
        "updatedAt" : "2019-04-19T15:58:45Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "c09821f1-adc6-42fd-82a5-41a2c321f53f",
        "parentId" : "3e079ade-4122-4fbe-a66a-3d5fedb0f9f0",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "This is correct",
        "createdAt" : "2019-04-18T17:45:08Z",
        "updatedAt" : "2019-04-19T15:58:45Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "addc5416-6527-4097-9670-5cb5831a1908",
        "parentId" : "3e079ade-4122-4fbe-a66a-3d5fedb0f9f0",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Everytime you are using semantic operation (that is program exists the binding is done in services layer explicitly)",
        "createdAt" : "2019-04-18T18:23:35Z",
        "updatedAt" : "2019-04-19T15:58:45Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "95fb694eedb5465596ab0408f235f8f49bf7b6c5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1718,1722 @@    export function getSynthesizedDeepCloneWithRenames<T extends Node>(node: T, includeTrivia = true, renameMap?: Map<Identifier>, checker?: TypeChecker, callback?: (originalNode: Node, clone: Node) => any): T {\n        let clone;\n        if (renameMap && checker && isBindingElement(node) && isIdentifier(node.name) && isObjectBindingPattern(node.parent)) {\n            const symbol = checker.getSymbolAtLocation(node.name);\n            const renameInfo = symbol && renameMap.get(String(getSymbolId(symbol)));"
  },
  {
    "id" : "fb1eb1d2-fa8a-4efc-95a7-9b063f08eb3c",
    "prId" : 30089,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30089#pullrequestreview-210312243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4f75b16-99fc-4298-8d05-1be49b8a5cca",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Looks like this could share a helper function with `copyTrailingAsLeadingComments`.",
        "createdAt" : "2019-02-26T02:15:25Z",
        "updatedAt" : "2019-03-06T00:56:42Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "b6e00fdc-c0c2-4808-ab07-c8fe3a314ee2",
        "parentId" : "a4f75b16-99fc-4298-8d05-1be49b8a5cca",
        "authorId" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "body" : "I've created a helper function `getAddCommentsFunction` that is shared by the copy comments functions. Does this look better?",
        "createdAt" : "2019-02-27T00:29:19Z",
        "updatedAt" : "2019-03-06T00:56:42Z",
        "lastEditedBy" : "7c69145d-f707-4b28-988d-984954c5c07d",
        "tags" : [
        ]
      },
      {
        "id" : "7db557c9-fc5b-4d22-8e26-1c8505ceaf87",
        "parentId" : "a4f75b16-99fc-4298-8d05-1be49b8a5cca",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "@sandersn will be able to give you a better sense of what's idiomatic in TS, but I would have just used an `isTrailing` bool (because I don't see any other functions that could sensible be passed).",
        "createdAt" : "2019-02-28T02:45:37Z",
        "updatedAt" : "2019-03-06T00:56:42Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "89ae0e4e-83a1-4144-a905-40ebd60d2ef8",
        "parentId" : "a4f75b16-99fc-4298-8d05-1be49b8a5cca",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "I like the current state. :+1:",
        "createdAt" : "2019-03-04T19:01:21Z",
        "updatedAt" : "2019-03-06T00:56:42Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b2d6a2f5488c279f957bfca518b8591a15358a",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1839,1843 @@\n\n    export function copyTrailingComments(sourceNode: Node, targetNode: Node, sourceFile: SourceFile, commentKind?: CommentKind, hasTrailingNewLine?: boolean) {\n        forEachTrailingCommentRange(sourceFile.text, sourceNode.end, getAddCommentsFunction(targetNode, sourceFile, commentKind, hasTrailingNewLine, addSyntheticTrailingComment));\n    }"
  },
  {
    "id" : "fdeffba4-cd5e-4887-b79a-c5a77fe7eee5",
    "prId" : 29785,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29785#pullrequestreview-200873152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8564dd73-0ced-41bc-9c8c-927bce48a3fd",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Is this TODO tracked by a bug?",
        "createdAt" : "2019-02-07T00:17:23Z",
        "updatedAt" : "2019-02-07T00:17:23Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "30ec2a18-9021-4f40-bf8b-971a95b29a98",
        "parentId" : "8564dd73-0ced-41bc-9c8c-927bce48a3fd",
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : "No, it may be a good idea though",
        "createdAt" : "2019-02-07T00:19:15Z",
        "updatedAt" : "2019-02-07T00:19:15Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      },
      {
        "id" : "0688e225-4338-4fef-ad15-f6e7da0531e1",
        "parentId" : "8564dd73-0ced-41bc-9c8c-927bce48a3fd",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Probably tag the one above with the same ID.",
        "createdAt" : "2019-02-07T00:21:14Z",
        "updatedAt" : "2019-02-07T00:21:14Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fd1e62a63caec46cf2f52f99bdcbf453a1debab",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1873,1877 @@        const quoted = JSON.stringify(text);\n        switch (quotePreference) {\n            // TODO use getQuotePreference to infer the actual quote style.\n            case \"auto\":\n            case \"double\":"
  },
  {
    "id" : "1c9af5d8-55b5-4619-b0b5-61c9bb21fe25",
    "prId" : 27978,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27978#pullrequestreview-167027807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b449a717-faf2-4c13-bb90-53da1e2a74b8",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I find it confusing that this function might return `-1` and you unconditionally use `getPrecedingNonSpaceCharacterPosition(...) + 1` whenever you call it -- maybe this should just be returning one more than it currently does.",
        "createdAt" : "2018-10-22T18:08:17Z",
        "updatedAt" : "2018-10-24T22:47:17Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b4f14f5160dbd12f7003bfe123454fe553e47f3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1673,1677 @@    }\n\n    export function getPrecedingNonSpaceCharacterPosition(text: string, position: number) {\n        while (position > -1 && isWhiteSpaceSingleLine(text.charCodeAt(position))) {\n            position -= 1;"
  },
  {
    "id" : "4561b8a7-3a3a-4be2-a641-109c28240e6c",
    "prId" : 26373,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26373#pullrequestreview-145418023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c5d955b-51bd-4399-9554-c83fca4ec2d5",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">clone [](start = 12, length = 5)\r\n\r\nIf `clone` can be undefined, the next if should check it too.",
        "createdAt" : "2018-08-10T22:46:24Z",
        "updatedAt" : "2018-08-10T22:46:24Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "34b2880068dbe6b3fa6c5de47751498d767e22c7",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +1673,1677 @@        }\n\n        if (clone && !includeTrivia) suppressLeadingAndTrailingTrivia(clone);\n        if (callback && node) callback(node!, clone);\n"
  },
  {
    "id" : "cafb26e4-b480-4124-ba13-70bad8f48127",
    "prId" : 25043,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25043#pullrequestreview-132211332",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70ae918c-9496-4791-b542-9d208d7ff159",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "the whole purpose of this function was to do syntactic scan on tokens since the tree cant be guaranteed. Eg. what if someone was writing ```new Type<Type<```",
        "createdAt" : "2018-06-18T21:00:10Z",
        "updatedAt" : "2018-07-10T23:48:15Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "c02c8222-eea9-49e6-8f88-143dabc6e872",
        "parentId" : "70ae918c-9496-4791-b542-9d208d7ff159",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Isn't this still issue with generic signature help? Create a type that has construct and call signature and see that in case of new C<C< the signature help should return construct signature but this will return call signature?",
        "createdAt" : "2018-06-26T21:25:35Z",
        "updatedAt" : "2018-07-10T23:48:15Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8be30ef0ebc93826da3c9a7095f98b59014a31d2",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +927,931 @@    export function getPossibleGenericSignatures(called: Expression, typeArgumentCount: number, checker: TypeChecker): ReadonlyArray<Signature> {\n        const type = checker.getTypeAtLocation(called)!; // TODO: GH#18217\n        const signatures = isNewExpression(called.parent) ? type.getConstructSignatures() : type.getCallSignatures();\n        return signatures.filter(candidate => !!candidate.typeParameters && candidate.typeParameters.length >= typeArgumentCount);\n    }"
  },
  {
    "id" : "a5c23170-5ebe-46e2-bcb7-3e870078d405",
    "prId" : 24652,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24652#pullrequestreview-125676498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42644f63-6919-4be1-8305-ea57854d41b0",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "VS Code also lists `auto` as an option.  I asked @mhegazy about it and there seemed to be some confusion about how to distinguish between \"figure it out for me\" and \"keep it in its current state\".  I don't think sorting that out will require changes to this code, but it's something to keep in mind.",
        "createdAt" : "2018-06-04T17:46:58Z",
        "updatedAt" : "2018-06-04T17:48:59Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc4cfe69375ddc107899d5140873ace396070fbc",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1275,1279 @@    }\n\n    export const enum QuotePreference { Single, Double }\n\n    export function getQuotePreference(sourceFile: SourceFile, preferences: UserPreferences): QuotePreference {"
  },
  {
    "id" : "8be03e6e-8bea-42f9-90c0-5da652853701",
    "prId" : 22421,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22421#pullrequestreview-102711195",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3d7bd23-9cb9-47a4-984a-4785ad6ae150",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i would add a comment on what we are trying to do here and why looking at the AST will not work.",
        "createdAt" : "2018-03-09T16:45:10Z",
        "updatedAt" : "2018-03-09T21:58:11Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "73947f8990a835d92ebbf08f2b81de8caae29fa3",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +913,917 @@    }\n\n    export function isPossiblyTypeArgumentPosition(token: Node, sourceFile: SourceFile) {\n        // This function determines if the node could be type argument position\n        // Since during editing, when type argument list is not complete,"
  },
  {
    "id" : "fe53ec55-4246-4316-ad60-9c83ba22d1ad",
    "prId" : 16695,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16695#pullrequestreview-46324056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bf471ab-b896-408c-af91-299908db517e",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Does TS have asserts?  Can we assert this so that it doesn't get stale?",
        "createdAt" : "2017-06-22T22:48:47Z",
        "updatedAt" : "2017-09-20T17:23:46Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "71195f91-e659-4624-8a74-45a7a1d16a54",
        "parentId" : "9bf471ab-b896-408c-af91-299908db517e",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "We don't have any conditional compilation. That is, if we wrote `Debug.assert(...)`, the enclosed expression would be run every time.\r\n\r\nSince the assumed value isn't checked for performance reasons, it would defeat the purpose to add an assert that always runs.",
        "createdAt" : "2017-06-26T17:10:19Z",
        "updatedAt" : "2017-09-20T17:23:46Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc8770390c8419a14d8563407a368a6f63eb3aef",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +429,433 @@\n    /**\n     * Assumes `candidate.start <= position` holds.\n     */\n    export function positionBelongsToNode(candidate: Node, position: number, sourceFile: SourceFile): boolean {"
  },
  {
    "id" : "314993c5-b0f9-4ddb-9a89-1f65c9fe6e2e",
    "prId" : 16695,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16695#pullrequestreview-57271788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc91a82f-2d76-4312-89e8-e19984d08b15",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "I can tell you have a preference for ordering comparisons as I've seen you do this in several pull requests (probably based on your math background :wink:), but please don't go changing existing expressions unless you are re-writing that code anyway, they are unreadable as written, or they are incorrect.",
        "createdAt" : "2017-08-18T18:03:09Z",
        "updatedAt" : "2017-09-20T17:23:46Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc8770390c8419a14d8563407a368a6f63eb3aef",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +432,436 @@     */\n    export function positionBelongsToNode(candidate: Node, position: number, sourceFile: SourceFile): boolean {\n        return position < candidate.end || !isCompletedNode(candidate, sourceFile);\n    }\n"
  },
  {
    "id" : "9b365c76-984e-47f3-9aa0-c76707156c73",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b10be607-1254-4ec4-a4d3-d7ff645f080b",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Maybe we should just make sure `clone` correctly handles enumerability?",
        "createdAt" : "2017-06-06T21:57:37Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +983,987 @@    }\n\n    export function cloneCompilerOptions(options: CompilerOptions): CompilerOptions {\n        const result = clone(options);\n        setConfigFileInOptions(result, options && options.configFile);"
  },
  {
    "id" : "79ddaab6-891d-42e3-914d-7a07f8fda705",
    "prId" : 8428,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e85b144-f595-4289-ada7-171279165c5d",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "i thought there was a `LiteralLike`\n",
        "createdAt" : "2016-05-03T06:11:50Z",
        "updatedAt" : "2016-06-08T20:22:20Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5dd5bf797dddb75304eedff9fd9aa61d39d7b1",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +443,447 @@\n            if (position === end) {\n                return !!(<LiteralExpression>previousToken).isUnterminated;\n            }\n        }"
  },
  {
    "id" : "93c80fcc-06db-436d-b111-767897ff0a62",
    "prId" : 7587,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e3eee4e-4a19-4046-a0ed-2763afef197a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Still doesn't make sense to me that the token is considered a child of the JsxText. That should be the child of the closing JSX tag. So I can't imagine how you're hitting this.\n",
        "createdAt" : "2016-03-25T00:17:05Z",
        "updatedAt" : "2016-03-28T21:33:37Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "de4073fa-9a4e-47d9-8a75-e85cf7844ca7",
        "parentId" : "5e3eee4e-4a19-4046-a0ed-2763afef197a",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Agree, this should be unreachable. Log a bug with a repro if this line gets hit.\n",
        "createdAt" : "2016-03-28T22:44:03Z",
        "updatedAt" : "2016-03-28T22:44:03Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "8738c63c-fafa-4159-a0a1-3a7a77bba3b7",
        "parentId" : "5e3eee4e-4a19-4046-a0ed-2763afef197a",
        "authorId" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "body" : "This is the case where that happens at marker #1\n\n``` ts\ndeclare var react: any;\n\n var x = <div a=\"/*2*/\" b={/*3*/}>\n /*1*/\n </div>;\n```\n",
        "createdAt" : "2016-03-29T00:45:54Z",
        "updatedAt" : "2016-03-29T00:45:54Z",
        "lastEditedBy" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7228797878a5da87cc9cc655f9da7d813688a74",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +448,452 @@\n        // <div>Hello |</div>\n        if (token.kind === SyntaxKind.LessThanToken && token.parent.kind === SyntaxKind.JsxText) {\n            return true;\n        }"
  },
  {
    "id" : "1803efbf-a632-4f36-9b2f-a3ab872dbe90",
    "prId" : 7587,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94848d0d-aefa-4409-aeb8-961bdca35283",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "The comment here doesn't seem to reflect the logic? When does a less-than token have anything to do with the JSX Expression?\n",
        "createdAt" : "2016-03-25T00:18:18Z",
        "updatedAt" : "2016-03-28T21:33:37Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7228797878a5da87cc9cc655f9da7d813688a74",
    "line" : null,
    "diffHunk" : "@@ -1,1 +453,457 @@\n        // <div> { | </div> or <div a={| </div>\n        if (token.kind === SyntaxKind.LessThanToken && token.parent.kind === SyntaxKind.JsxExpression) {\n            return true;\n        }"
  },
  {
    "id" : "e7756c1b-a622-4d9e-ad98-714f2f491c75",
    "prId" : 7587,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "775e9f60-0e8d-431d-968f-aa6eec5e2626",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Where's the close brace in this comment?\n",
        "createdAt" : "2016-03-25T00:23:25Z",
        "updatedAt" : "2016-03-28T21:33:37Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7228797878a5da87cc9cc655f9da7d813688a74",
    "line" : null,
    "diffHunk" : "@@ -1,1 +460,464 @@        // |\n        // } < /div>\n        if (token && token.kind === SyntaxKind.CloseBraceToken && token.parent.kind === SyntaxKind.JsxExpression) {\n            return true;\n        }"
  },
  {
    "id" : "4028efb1-bb0b-400d-a367-96b2bf7856d4",
    "prId" : 5725,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9180c3cb-a6a1-493a-885f-540aee0093e9",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This `kind === SyntaxKind.StringLiteral || kind === SyntaxKind.StringLiteralType` thing comes up quite a few times. Can you add some sort of helper function sort of like this code is sitting within?\n",
        "createdAt" : "2015-11-20T01:50:18Z",
        "updatedAt" : "2015-11-20T01:50:34Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b0231d9b897b44b75d7828afe61bb1048beff38",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +566,570 @@    export function isStringOrRegularExpressionOrTemplateLiteral(kind: SyntaxKind): boolean {\n        if (kind === SyntaxKind.StringLiteral\n            || kind === SyntaxKind.StringLiteralType\n            || kind === SyntaxKind.RegularExpressionLiteral\n            || isTemplateLiteralKind(kind)) {"
  },
  {
    "id" : "a1ae78b0-97dd-4481-b299-d0e74f685001",
    "prId" : 4994,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4af467c2-0410-494c-822c-7bdad3aeac2d",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "can you also replace a bunch of checks [here](https://github.com/Microsoft/TypeScript/blob/master/src/services/formatting/smartIndenter.ts#L22) with call to this function?\n",
        "createdAt" : "2015-09-29T05:04:20Z",
        "updatedAt" : "2015-09-29T20:57:21Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "16762a4ff0db4c421c7b964bc2fa6315c546e49c",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +563,567 @@    }\n\n    export function isStringOrRegularExpressionOrTemplateLiteral(kind: SyntaxKind): boolean {\n        if (kind === SyntaxKind.StringLiteral\n            || kind === SyntaxKind.RegularExpressionLiteral"
  },
  {
    "id" : "604cf259-2106-448d-ac20-1bbc5224761f",
    "prId" : 3643,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cff8c70d-5ee6-4a7a-9ba8-071b20228f56",
        "parentId" : null,
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Nice, that is cute :)\n",
        "createdAt" : "2015-07-06T22:54:10Z",
        "updatedAt" : "2015-07-10T18:10:49Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      }
    ],
    "commit" : "f16f9d129a4ffa17723930de208f563894a4ddb8",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +686,690 @@        if (length >= 2 &&\n            name.charCodeAt(0) === name.charCodeAt(length - 1) &&\n            (name.charCodeAt(0) === CharacterCodes.doubleQuote || name.charCodeAt(0) === CharacterCodes.singleQuote)) {\n            return name.substring(1, length - 1);\n        };"
  },
  {
    "id" : "a9c2d3cd-53a8-4e33-9c07-6506f29e643b",
    "prId" : 2413,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "869b18b0-7545-49bd-95ba-11708f8a1e67",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "@internal\n",
        "createdAt" : "2015-03-18T22:23:03Z",
        "updatedAt" : "2015-03-18T22:23:03Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cbf667d787a18c09e762c2dbc77eb7e042ae6cd",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +321,325 @@    }\n\n    export function isAccessibilityModifier(kind: SyntaxKind) {\n        switch (kind) {\n            case SyntaxKind.PublicKeyword:"
  }
]