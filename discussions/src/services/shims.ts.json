[
  {
    "id" : "12405780-56f4-4635-b8ab-8af0ab4fba16",
    "prId" : 27558,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27558#pullrequestreview-161838776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84898eae-b939-47a5-be72-ea87eff05168",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "why?",
        "createdAt" : "2018-10-04T21:14:19Z",
        "updatedAt" : "2018-11-16T23:33:14Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "55effa96-3c23-4237-944a-4dc2dcef9fab",
        "parentId" : "84898eae-b939-47a5-be72-ea87eff05168",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`TypingResolutionHost` requires `directoryExists` to be non-optional. It's likely that `this.shimHost` always contains `directoryExists`, so it always gets defined. Currently putting in these `else` blocks as a place to hold the TODO.",
        "createdAt" : "2018-10-04T22:47:14Z",
        "updatedAt" : "2018-11-16T23:33:14Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "076f19d04efdfbfa1537b578c0f1b7be3247ddd7",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +495,499 @@                this.directoryExists = directoryName => this.shimHost.directoryExists(directoryName);\n            }\n            else {\n                this.directoryExists = undefined!; // TODO: GH#18217\n            }"
  },
  {
    "id" : "5f730e59-56d3-4ca5-9862-4a240eb9057f",
    "prId" : 17209,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17209#pullrequestreview-50682897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa4c8167-44d7-40d7-9ef8-e2faaf46e749",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Same comment as above.",
        "createdAt" : "2017-07-18T17:15:07Z",
        "updatedAt" : "2017-07-18T17:15:17Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "37393472-f821-4ea7-a39f-e93dc96ee498",
        "parentId" : "fa4c8167-44d7-40d7-9ef8-e2faaf46e749",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This is a private field and isn't exposed anywhere.",
        "createdAt" : "2017-07-18T17:22:18Z",
        "updatedAt" : "2017-07-18T17:22:18Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f822d548d1234603d9352169f64b4b8f213fb5c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1177,1181 @@        public close(): void {\n            // Forget all the registered shims\n            clear(this._shims);\n            this.documentRegistry = undefined;\n        }"
  },
  {
    "id" : "e095b370-26eb-4429-aacb-d004207408c6",
    "prId" : 16646,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16646#pullrequestreview-47405956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2599740-7934-447d-9526-9e0a0bbb0796",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Another seemingly unrelated change in this PR?\r\n\r\nIs this a driveby bugfix, or actually related to the `depth` issue?",
        "createdAt" : "2017-06-30T13:52:03Z",
        "updatedAt" : "2017-06-30T13:52:16Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "bbc950b4-f47b-40a0-b59b-1dd172620db0",
        "parentId" : "d2599740-7934-447d-9526-9e0a0bbb0796",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "It always implemented that interface. TypeScript's structural type system doesn't require us to declare these things, but it doesn't hurt.",
        "createdAt" : "2017-06-30T14:28:17Z",
        "updatedAt" : "2017-06-30T14:28:17Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9841bf7c054093fb6f302626c8a462114a462b76",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +468,472 @@    }\n\n    export class CoreServicesShimHostAdapter implements ParseConfigHost, ModuleResolutionHost, JsTyping.TypingResolutionHost {\n\n        public directoryExists: (directoryName: string) => boolean;"
  },
  {
    "id" : "78f6e2ee-b9b8-4bbd-9c46-7f59db9a9e21",
    "prId" : 9867,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1cdabfd-901f-4b3f-b853-ff9e20a0c4fb",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "most of these members were inherited from the `ModuleResolutionHost`. Is it really necessary to duplicate them?\n",
        "createdAt" : "2016-07-21T16:45:59Z",
        "updatedAt" : "2016-07-27T22:36:24Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "3779c207-56ce-45e9-ba36-d9037d695720",
        "parentId" : "b1cdabfd-901f-4b3f-b853-ff9e20a0c4fb",
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "The return type is actually different for \n\n``` typescript\ngetDirectories(path: string): string //CoreServicesShimHost\ngetDirectories(path: string): string[] // ModuleResolutionHost\n```\n",
        "createdAt" : "2016-07-25T20:21:59Z",
        "updatedAt" : "2016-07-27T22:36:24Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ee16bfd7a53bc178c57eedc30d90c02204a74e6",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +74,78 @@\n    /** Public interface of the core-services host instance used in managed side */\n    export interface CoreServicesShimHost extends Logger {\n        directoryExists(directoryName: string): boolean;\n        fileExists(fileName: string): boolean;"
  },
  {
    "id" : "bed1c26d-eae4-474d-bba7-39d5c6145dd2",
    "prId" : 7440,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec1d5317-a33a-4703-aa22-a6d7b8f15128",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "is this change in 1.8 on the managed side already?\n",
        "createdAt" : "2016-03-09T21:01:45Z",
        "updatedAt" : "2016-03-09T23:50:58Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "f708808c-f958-49c1-abc5-f0dd39d56019",
        "parentId" : "ec1d5317-a33a-4703-aa22-a6d7b8f15128",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "Yes - it is in Dev15 Preview but not in Dev14 Update 2 so I believe I still need this try/catch\n",
        "createdAt" : "2016-03-09T23:27:33Z",
        "updatedAt" : "2016-03-09T23:50:58Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      },
      {
        "id" : "fc81b9d5-ffe7-40f4-b401-58d49370c3b1",
        "parentId" : "ec1d5317-a33a-4703-aa22-a6d7b8f15128",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i am concerned about the perf. cause it is guaranteed to fail once every time. \n",
        "createdAt" : "2016-03-09T23:56:29Z",
        "updatedAt" : "2016-03-09T23:56:29Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "4891fa4c-8ab7-42a6-ad64-2082605cab1a",
        "parentId" : "ec1d5317-a33a-4703-aa22-a6d7b8f15128",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "Added the int? depth to the Update 2 managed side as well to avoid the throw\n",
        "createdAt" : "2016-03-10T00:38:00Z",
        "updatedAt" : "2016-03-10T00:38:00Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe9da694b2c21b41247e0e9b685a190285773729",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +427,431 @@            let encoded: string;\n            try {\n                encoded = this.shimHost.readDirectory(rootDir, extension, JSON.stringify(exclude), depth);\n            }\n            catch (e) {"
  },
  {
    "id" : "ea40adf1-fe6e-4563-b8cb-c6a5fc749ff0",
    "prId" : 7107,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be2316d9-8edb-41c0-9928-0890706a4c36",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "``` ts\nif (getScriptKind in this.shimHost) {\n    return this.shimHost.getScriptKind(fileName);\n}\nelse {\n    return ScriptKind.Unknown;\n}\n```\n",
        "createdAt" : "2016-02-18T00:33:14Z",
        "updatedAt" : "2016-02-19T22:21:28Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "ee83b2b2-a747-4ad6-959b-2bc60727353f",
        "parentId" : "be2316d9-8edb-41c0-9928-0890706a4c36",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "thanks - done\n",
        "createdAt" : "2016-02-18T02:35:58Z",
        "updatedAt" : "2016-02-19T22:21:28Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2da73b334054b8c93efcf74bbfd3802086cd03fe",
    "line" : null,
    "diffHunk" : "@@ -1,1 +350,354 @@        public getScriptKind(fileName: string): ScriptKind {\n            if (\"getScriptKind\" in this.shimHost) {\n                return this.shimHost.getScriptKind(fileName);\n            }\n            else {"
  },
  {
    "id" : "94b96eeb-5ad2-404e-8b7d-38d80586aa55",
    "prId" : 4279,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4819559-b63f-4215-83d9-e821f77a66dd",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "So you're just making this `getOccurencesAtPosition` - let's just call that.\n",
        "createdAt" : "2015-08-11T19:09:42Z",
        "updatedAt" : "2015-08-11T19:09:42Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce44d9511526c265a3d18b899017642251f1eb85",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +756,760 @@                    // workaround for VS document higlighting issue - keep only items from the initial file\n                    let normalizedName = normalizeSlashes(fileName).toLowerCase();\n                    return filter(results, r => normalizeSlashes(r.fileName).toLowerCase() === normalizedName);\n                });\n        }"
  },
  {
    "id" : "0321a494-bb3a-417f-af17-8b2f6b475804",
    "prId" : 3797,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7ba5e5b-bc48-4baa-b7dc-256b8192539e",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why do this instead of the property check in `services.ts`?\n",
        "createdAt" : "2015-07-09T18:45:02Z",
        "updatedAt" : "2015-07-09T20:13:57Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "18c346cd-01e3-4d33-8378-7edb425cbedf",
        "parentId" : "a7ba5e5b-bc48-4baa-b7dc-256b8192539e",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "Can you even do a property check on a COM object?\n",
        "createdAt" : "2015-07-09T18:49:46Z",
        "updatedAt" : "2015-07-09T20:13:57Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "e55e9ba3-2d8a-4d32-8dde-fcccdb69e83b",
        "parentId" : "a7ba5e5b-bc48-4baa-b7dc-256b8192539e",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "If this is a problem with COM objects, let's leave a comment explaining it.\n",
        "createdAt" : "2015-07-09T18:52:39Z",
        "updatedAt" : "2015-07-09T20:13:57Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "107c7560-92c4-4504-99a6-36657d7a71e1",
        "parentId" : "a7ba5e5b-bc48-4baa-b7dc-256b8192539e",
        "authorId" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "body" : "You mean a COMment\n",
        "createdAt" : "2015-07-09T18:54:35Z",
        "updatedAt" : "2015-07-09T20:13:57Z",
        "lastEditedBy" : "1b34783f-ccca-4b94-9373-cb3f0e0d8028",
        "tags" : [
        ]
      },
      {
        "id" : "0e7a2ad5-808c-4ad6-a170-15d792cb557d",
        "parentId" : "a7ba5e5b-bc48-4baa-b7dc-256b8192539e",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "property check here will effectively become method call with no arguments\n",
        "createdAt" : "2015-07-09T20:10:41Z",
        "updatedAt" : "2015-07-09T20:13:57Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "e190761d96beaa0aa39e84de010695c63b05e64d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +250,254 @@            // if scriptSnapshotShim is a COM object then property check becomes method call with no arguments\n            // 'in' does not have this effect\n            if (\"dispose\" in this.scriptSnapshotShim) {\n                this.scriptSnapshotShim.dispose();\n            }"
  },
  {
    "id" : "38c673bd-3ec2-4a14-8aaa-ef707acea73e",
    "prId" : 3546,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "633da500-0487-4b0f-b9c6-94648ba67ce8",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Do you actually need the `try`/`catch`? If your implementation of `readDirectory` doesn't expect an argument, it should silently ignore it. (I might be misunderstanding the fix)\n",
        "createdAt" : "2015-06-18T05:33:32Z",
        "updatedAt" : "2015-07-15T21:21:44Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "64ec4ffb-c4de-4d8f-8f9c-5c749226c424",
        "parentId" : "633da500-0487-4b0f-b9c6-94648ba67ce8",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "This is calling into the managed side from the script side.  It's not clear to me what will happen if we call managed from JS and pass too many arguments along.\n",
        "createdAt" : "2015-06-18T15:15:11Z",
        "updatedAt" : "2015-07-15T21:21:44Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "07b7b9db-4be7-438b-ac6b-08e9af752000",
        "parentId" : "633da500-0487-4b0f-b9c6-94648ba67ce8",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "If we pass too many arguments, and there is a CoreServicesHost mismatch,  it will throw. We then fallback to the old call without the JSON encoded exclude string array.  (This is a similar to the fallback we already have in place for getDefaultLibFileName)\n",
        "createdAt" : "2015-07-15T20:51:27Z",
        "updatedAt" : "2015-07-15T21:21:44Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dea66a66dc93118abdde6eec558d12d33c267829",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +398,402 @@            // the exclude param at this time.\n            var encoded: string;\n            try {\n                encoded = this.shimHost.readDirectory(rootDir, extension, JSON.stringify(exclude));\n            }"
  },
  {
    "id" : "ae00087e-5e7d-444c-9895-165a6f92a874",
    "prId" : 3529,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14e20525-77a8-4224-9ef0-640101d037c2",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "yes. please remove comment.\n",
        "createdAt" : "2015-06-18T04:37:33Z",
        "updatedAt" : "2015-06-18T04:37:33Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d5dcf0d0c2c5ba990d6dfa91cd2a45326b81a60",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +235,239 @@            var oldSnapshotShim = <ScriptSnapshotShimAdapter>oldSnapshot;\n            var encoded = this.scriptSnapshotShim.getChangeRange(oldSnapshotShim.scriptSnapshotShim);\n            // TODO: should this be '==='?\n            if (encoded == null) {\n                return null;"
  },
  {
    "id" : "a1b4d1af-c24d-4f4a-9779-9956d20b8341",
    "prId" : 3529,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd4cd590-736b-4dc9-8b43-a3888ba62dbc",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "same here.\n",
        "createdAt" : "2015-06-18T04:37:44Z",
        "updatedAt" : "2015-06-18T04:37:44Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d5dcf0d0c2c5ba990d6dfa91cd2a45326b81a60",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +285,289 @@        public getCompilationSettings(): CompilerOptions {\n            var settingsJson = this.shimHost.getCompilationSettings();\n            // TODO: should this be '==='?\n            if (settingsJson == null || settingsJson == \"\") {\n                throw Error(\"LanguageServiceShimHostAdapter.getCompilationSettings: empty compilationSettings\");"
  },
  {
    "id" : "ad11e913-8434-4666-9e82-7a66a290aaf7",
    "prId" : 3047,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cf4b6a6-c5c2-494d-acc0-03fc8738dc42",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "@paulvanbrenk how was that even working?\n",
        "createdAt" : "2015-05-05T22:04:28Z",
        "updatedAt" : "2015-05-05T22:04:28Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "db13aa38-0641-4b70-893e-524614c35ed2",
        "parentId" : "7cf4b6a6-c5c2-494d-acc0-03fc8738dc42",
        "authorId" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "body" : "how did that even compile?\n",
        "createdAt" : "2015-05-06T18:32:30Z",
        "updatedAt" : "2015-05-06T18:32:30Z",
        "lastEditedBy" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "tags" : [
        ]
      },
      {
        "id" : "4cbe3f19-6aa4-4833-9788-d7ae32946e7f",
        "parentId" : "7cf4b6a6-c5c2-494d-acc0-03fc8738dc42",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "forwardJSONCall takes a function that returns any. so it is not going to complain regardless what we put in there :)\n",
        "createdAt" : "2015-05-06T19:50:47Z",
        "updatedAt" : "2015-05-06T19:50:47Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "884ca4edbc949a9a175c0e4a66567c694c4d8c43",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +884,888 @@                        options: configFile.options,\n                        files: configFile.fileNames,\n                        errors: [realizeDiagnostics(configFile.errors, '\\r\\n')]\n                    };\n                });"
  },
  {
    "id" : "8894f021-b046-491b-91a3-63f32aa20992",
    "prId" : 2966,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afa6358d-8749-471c-8373-09ce03c364ef",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Remove this and the above line\n",
        "createdAt" : "2015-05-04T21:20:22Z",
        "updatedAt" : "2015-05-04T21:20:40Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "060de602-40fd-4888-a468-5fd683b6fd85",
        "parentId" : "afa6358d-8749-471c-8373-09ce03c364ef",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I added it to match the /// GOTO Definition above\n",
        "createdAt" : "2015-05-04T21:51:05Z",
        "updatedAt" : "2015-05-04T21:51:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fc6142def80554c9be15757a9fd29234cbfc778",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +598,602 @@        }\n\n        /// GOTO Type\n\n        /**"
  },
  {
    "id" : "baef1b65-47fd-4b0e-9d0f-31c9f8b3bf7f",
    "prId" : 2877,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7bde8b6-ff09-4431-aa53-3a43670235bb",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "getConfigFileInfo and lose the TS part\n",
        "createdAt" : "2015-04-23T02:00:01Z",
        "updatedAt" : "2015-04-23T20:54:01Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "42c1bdd6077d175642df46e8059d47f4f9800f10",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +195,199 @@    export interface CoreServicesShim extends Shim {\n        getPreProcessedFileInfo(fileName: string, sourceText: IScriptSnapshot): string;\n        getTSConfigFileInfo(fileName: string, sourceText: IScriptSnapshot): string;\n        getDefaultCompilationSettings(): string;\n    }"
  },
  {
    "id" : "a58f31e5-9050-4e87-9463-7c9c74162e78",
    "prId" : 1990,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b2a917b-a7c4-46f6-a338-7461f46c981d",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "you still need the comment, and you still need to shim it.\n\nthe problem is that the released 1.4 VS plugin do not have a function called \"getDefaultLibFileName\", it is called \"getDefaultLibFilename\" with lowercase \"n\". this if you use the latest from master on an existing 1.4 installation it will fail. this affects users who want to try the latest bits from master. \n\nso, to work around this, you need to shim it.. something like:\n\n``` TypeScript\nif (typeof this.shimHost.getDefaultLibFileName === \"function\") { \n   return this.shimHost.getDefaultLibFileName(JSON.stringify(options));\n}\nreturn \"\";\n```\n\nand i would give it a quick try in the shipped 1.4 VS as well.\n",
        "createdAt" : "2015-02-17T19:15:02Z",
        "updatedAt" : "2015-02-17T22:53:53Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "a23c4c83-d6b5-4148-8932-8a5a6971db2b",
        "parentId" : "1b2a917b-a7c4-46f6-a338-7461f46c981d",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "Just discussed with Mohamed. I was going to add the typeof check for getDefaultLibFileName to ensure it is backward compatible with the previous lower-cased version (getDefaultLibFilename). Case does not appear to matter for the shimHost though as both work (they return typeof \"unknown\"). Using a completely different method that isn't on shimHost would return typeof \"undefined\".\n",
        "createdAt" : "2015-02-17T22:52:25Z",
        "updatedAt" : "2015-02-17T22:53:53Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      }
    ],
    "commit" : "975f10c6a1bff1c1b71e8cac52ea81b4814615c0",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +275,279 @@\n        public getDefaultLibFileName(options: CompilerOptions): string {\n            return this.shimHost.getDefaultLibFileName(JSON.stringify(options));\n        }\n    }"
  },
  {
    "id" : "63d5cd6d-8bb3-4052-8d3d-a0c5520eaa89",
    "prId" : 1966,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89d42697-ab72-482e-a1eb-58586fe1b194",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "comment this is to shim things temporarily.\n",
        "createdAt" : "2015-02-06T22:22:06Z",
        "updatedAt" : "2015-02-06T22:22:39Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f3f2bcb566f5353da313c8c641dd2b2ce99e91e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +675,679 @@                    // Shim the API changes for 1.5 release. This should be removed once\n                    // TypeScript 1.5 has shipped.\n                    (<any>output).emitOutputStatus = output.emitSkipped ? 1 : 0;\n                    return output;\n                });"
  },
  {
    "id" : "d47eed11-6df1-455a-bddd-9b7bcd15a552",
    "prId" : 1087,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88e070d6-e6d7-4178-a94f-a79f0d60f06d",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i do not think realizeDiagnosticWithFileName is used anywhere else. if so, please remove it.\n",
        "createdAt" : "2014-11-07T18:45:34Z",
        "updatedAt" : "2014-11-07T18:45:34Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "fd0cbaeb-ecfe-403b-9d25-385530c6606c",
        "parentId" : "88e070d6-e6d7-4178-a94f-a79f0d60f06d",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I did remove it\n",
        "createdAt" : "2014-11-07T19:17:43Z",
        "updatedAt" : "2014-11-07T19:17:43Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "28fa6029eb319e235f5e1df2d1a77db801da9189",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +549,553 @@                () => {\n                    var errors = this.languageService.getCompilerOptionsDiagnostics();\n                    return errors.map(LanguageServiceShimObject.realizeDiagnostic)\n                });\n        }"
  },
  {
    "id" : "bf233718-a647-48d6-ace1-27ad4b89df1b",
    "prId" : 847,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ab3b6ba-3356-43f8-bdb6-2d627bbe8f5b",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Could you also address the `TODO`?\n",
        "createdAt" : "2014-10-07T20:32:32Z",
        "updatedAt" : "2014-10-07T20:32:32Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b7453b9d6475ffefa3f1dbd83e57d65a1416757",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +502,506 @@                start: diagnostic.start,\n                length: diagnostic.length,\n                /// TODO: no need for the tolowerCase call\n                category: DiagnosticCategory[diagnostic.category].toLowerCase(),\n                code: diagnostic.code"
  }
]