[
  {
    "id" : "51ca0670-3080-4ee1-af12-196049d80b21",
    "prId" : 8493,
    "prUrl" : "https://github.com/redis/redis/pull/8493#pullrequestreview-590727550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5645a3ef-70bf-4ef6-97f4-3cea7243fa0d",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i think it's a good idea to add coverage for both cases in the ziplist tests at the bottom of this file.\r\nbtw, does the test suite currently have coverage to hit both of these?",
        "createdAt" : "2021-02-15T11:39:48Z",
        "updatedAt" : "2021-02-16T06:20:02Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "905f874b-cde7-4f16-9e5a-00a775c38e72",
        "parentId" : "5645a3ef-70bf-4ef6-97f4-3cea7243fa0d",
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "Good idea. I will add unit tests for replace.\r\n\r\nYes, they are tested in unit/type/hash.tcl. There are tests for both same size (HINCRY 100 to 102, both 1 byte integer encoded) and different size (HINCRBYFLOAT from 100 (1 byte integer) to 102.5 (5 byte string)).\r\n\r\nBtw, is there a way to generate a coverage report?",
        "createdAt" : "2021-02-15T13:30:20Z",
        "updatedAt" : "2021-02-16T06:20:02Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      },
      {
        "id" : "284ce3c4-e984-4866-939d-5cde09e7eafb",
        "parentId" : "5645a3ef-70bf-4ef6-97f4-3cea7243fa0d",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i saw `make gcov`, never tried it",
        "createdAt" : "2021-02-15T14:40:28Z",
        "updatedAt" : "2021-02-16T06:20:02Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "0eaa6936-19f0-4bbc-8555-2bb7d2605ac9",
        "parentId" : "5645a3ef-70bf-4ef6-97f4-3cea7243fa0d",
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "Nice! I found out `make lcov` is the command to use. It compiles with gcov, runs the tests and produces HTML reports and very nice tables. I had to install `apt install lcov`. The `ziplistReplace` function is covered 388768 times, of which 338341 benefit from the optimization and only 18818 go into the fallback else clause (delete + insert), so if real data looks like the unit test data, this is pretty good.",
        "createdAt" : "2021-02-15T19:24:03Z",
        "updatedAt" : "2021-02-16T06:20:02Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      },
      {
        "id" : "1e5f7c07-d8e0-4d38-859d-34b6b3bcf084",
        "parentId" : "5645a3ef-70bf-4ef6-97f4-3cea7243fa0d",
        "authorId" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "body" : "I haven't found out how to run the unit tests inside ziplist.c yet though...",
        "createdAt" : "2021-02-15T19:52:00Z",
        "updatedAt" : "2021-02-16T06:20:02Z",
        "lastEditedBy" : "c6fac63b-ee5a-4181-b121-48bfacc74a59",
        "tags" : [
        ]
      },
      {
        "id" : "8770a1ff-7f1d-48f6-b7f0-c9ad28ce1dda",
        "parentId" : "5645a3ef-70bf-4ef6-97f4-3cea7243fa0d",
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "I don't think there is a build argument for it, but you need to define REDIS_TEST and this it can be executed with ```redis-server test ziplist```, ref: https://github.com/redis/redis/blob/unstable/src/server.c#L5906",
        "createdAt" : "2021-02-15T20:00:02Z",
        "updatedAt" : "2021-02-16T06:20:02Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fbf33b2ed2fa5b6f38bb55776116ea8dc47aff4",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1285,1289 @@    reqlen += zipStoreEntryEncoding(NULL,encoding,slen);\n\n    if (reqlen == entry.lensize + entry.len) {\n        /* Simply overwrite the element. */\n        p += entry.prevrawlensize;"
  },
  {
    "id" : "a7913892-4655-4090-a405-98ea29b0f39d",
    "prId" : 8444,
    "prUrl" : "https://github.com/redis/redis/pull/8444#pullrequestreview-585321273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0e00c0e-918e-4582-aa55-327164ed7ae4",
        "parentId" : null,
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "```suggestion\r\n        if(randomDouble <= threshold){\r\n```\r\n\r\nWhen (remaining == (total_size - index)), if rand() returns RAND_MAX, will result missing, In fact it should definitely be random to.",
        "createdAt" : "2021-02-04T05:51:24Z",
        "updatedAt" : "2021-02-05T18:20:09Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "943c2253-56da-48bb-a1d7-919dc9a5c08b",
        "parentId" : "f0e00c0e-918e-4582-aa55-327164ed7ae4",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "@oranagra I remember this was already modified, but it was reset again.",
        "createdAt" : "2021-02-08T01:48:58Z",
        "updatedAt" : "2021-02-08T01:48:58Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "4988c7bf-3b47-4089-9f01-52bd8f8bf750",
        "parentId" : "f0e00c0e-918e-4582-aa55-327164ed7ae4",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i must have messed up the conflict resolution when rebasing my PR.\r\nwould you like to submit a PR to fix this again?",
        "createdAt" : "2021-02-08T09:45:53Z",
        "updatedAt" : "2021-02-08T09:45:53Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "f8de9633-1512-45bc-9647-9e56a94f8f39",
        "parentId" : "f0e00c0e-918e-4582-aa55-327164ed7ae4",
        "authorId" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "body" : "Ok.",
        "createdAt" : "2021-02-08T09:50:32Z",
        "updatedAt" : "2021-02-08T09:50:32Z",
        "lastEditedBy" : "4c4e22a4-3f0d-4f25-9809-81320210dfb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "63940b557625799e937d3fc8a954025c6a17d3e3",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +1609,1613 @@        double randomDouble = ((double)rand()) / RAND_MAX;\n        double threshold = ((double)remaining) / (total_size - index);\n        if(randomDouble < threshold){\n            assert(ziplistGet(p, &key, &klen, &klval));\n            ziplistSaveValue(key, klen, klval, &keys[picked]);"
  },
  {
    "id" : "0800dcb1-f881-433e-8daf-09a7b59f9cc3",
    "prId" : 8297,
    "prUrl" : "https://github.com/redis/redis/pull/8297#pullrequestreview-578051324",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfe7a2cc-adde-4e00-88d8-7a41ea92724a",
        "parentId" : null,
        "authorId" : "992af734-3eac-4159-b634-0625f275b1a6",
        "body" : "a top comment indicates the result may contains duplicate elements would be appreciated. ",
        "createdAt" : "2021-01-28T07:41:41Z",
        "updatedAt" : "2021-01-29T08:33:17Z",
        "lastEditedBy" : "992af734-3eac-4159-b634-0625f275b1a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "c456e035bea6605b76f09769a331653a83496ffa",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +1548,1552 @@    /* create a pool of random indexes (some may be duplicate). */\n    for (int i = 0; i < count; i++) {\n        picks[i].index = (rand() % total_size) * 2; /* Generate even indexes */\n        /* keep track of the order we picked them */\n        picks[i].order = i;"
  },
  {
    "id" : "24e9b352-c2f6-48a4-b46d-7265a49fbbb6",
    "prId" : 6886,
    "prUrl" : "https://github.com/redis/redis/pull/6886#pullrequestreview-470242949",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1cfeb4f-ef07-4d5c-9f11-9869d68fc7cf",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "```suggestion\r\n        /* Update the tail offset in cases where the last entry we updated is not the tail. */\r\n        ZIPLIST_TAIL_OFFSET(zl) =\r\n```",
        "createdAt" : "2020-08-19T08:38:06Z",
        "updatedAt" : "2020-08-28T02:35:24Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "91890844988537d94c2cc7549b566180bb17157d",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +677,681 @@    } else {\n        /* Update the tail offset in cases where the last entry we updated is not the tail. */\n        ZIPLIST_TAIL_OFFSET(zl) =\n            intrev32ifbe(intrev32ifbe(ZIPLIST_TAIL_OFFSET(zl))+extra);\n    }"
  },
  {
    "id" : "5b86ba69-669c-4d6d-8e1b-6051616c3fb9",
    "prId" : 6886,
    "prUrl" : "https://github.com/redis/redis/pull/6886#pullrequestreview-476940648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a5bf74c-32b0-4cfc-b1a4-b202e67f08e7",
        "parentId" : null,
        "authorId" : "351cea45-3d66-4827-bbfb-0a2c2c79b24b",
        "body" : "@neal-zhu is this 'if' case redundant? I think the cur cannot be the first entry since we maintained the cnt for cascade update already ..",
        "createdAt" : "2020-08-23T06:19:03Z",
        "updatedAt" : "2020-08-28T02:35:24Z",
        "lastEditedBy" : "351cea45-3d66-4827-bbfb-0a2c2c79b24b",
        "tags" : [
        ]
      },
      {
        "id" : "7677a9b3-a25d-4145-a4c1-83884c81ab47",
        "parentId" : "4a5bf74c-32b0-4cfc-b1a4-b202e67f08e7",
        "authorId" : "4cd4ba6e-9ea1-4f5c-9418-a9434a4219eb",
        "body" : "No, it's not. cur.prevrawlen can be zero when we insert into a ziplist, which means \"cur\" is the head entry before the insertion. ",
        "createdAt" : "2020-08-23T15:23:22Z",
        "updatedAt" : "2020-08-28T02:35:24Z",
        "lastEditedBy" : "4cd4ba6e-9ea1-4f5c-9418-a9434a4219eb",
        "tags" : [
        ]
      },
      {
        "id" : "0abc64b1-e76d-42a2-b030-956a339a3a5f",
        "parentId" : "4a5bf74c-32b0-4cfc-b1a4-b202e67f08e7",
        "authorId" : "351cea45-3d66-4827-bbfb-0a2c2c79b24b",
        "body" : "thanks @neal-zhu , sorry I missed this edge cases.. the code logic is clear and looks good to me, also this is indeed a very good improvement.  Last thing is may I ask you did you run some functionaity tests for the cascade update? I think this is important to make sure we don't have any \"surprise\" in the future. If we can think about adding more tests in ziplist tests to cover this cascade update part, that would be nice.. ",
        "createdAt" : "2020-08-23T18:23:43Z",
        "updatedAt" : "2020-08-28T02:35:24Z",
        "lastEditedBy" : "351cea45-3d66-4827-bbfb-0a2c2c79b24b",
        "tags" : [
        ]
      },
      {
        "id" : "3c529fc0-6f33-4036-9f75-841ccfa26002",
        "parentId" : "4a5bf74c-32b0-4cfc-b1a4-b202e67f08e7",
        "authorId" : "4cd4ba6e-9ea1-4f5c-9418-a9434a4219eb",
        "body" : "@hwware I had run the test of ziplist and it's all good. I did add a new test to benchmark this function when keeping inserting at the head of a ziplist which leads to cascade updating. \r\nGiven that there is no semantics change, I think it may be enough to work with current tests?",
        "createdAt" : "2020-08-24T00:55:40Z",
        "updatedAt" : "2020-08-28T02:35:24Z",
        "lastEditedBy" : "4cd4ba6e-9ea1-4f5c-9418-a9434a4219eb",
        "tags" : [
        ]
      },
      {
        "id" : "b930dfaf-1b49-44d4-bda3-967d3c88e882",
        "parentId" : "4a5bf74c-32b0-4cfc-b1a4-b202e67f08e7",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "It doesn't look like the ziplist test is attempting to get to all the edge cases of the cascade (and other parts of the code).\nE.g. First recorded being updated, first record being the only one that's updated, etc. \nI do think that there's a good chance that the redis test suite covers them, but it's hard to be certain.\nI would feel better if you can add some tests, make sure they pass on both old and new implementations.",
        "createdAt" : "2020-08-24T04:49:08Z",
        "updatedAt" : "2020-08-28T02:35:24Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "a6dd40d2-0897-42a3-be29-3dd17d31ce91",
        "parentId" : "4a5bf74c-32b0-4cfc-b1a4-b202e67f08e7",
        "authorId" : "4cd4ba6e-9ea1-4f5c-9418-a9434a4219eb",
        "body" : "@oranagra @hwware All right, I will add some tests for all the edge cases of the cascade update",
        "createdAt" : "2020-08-24T06:46:55Z",
        "updatedAt" : "2020-08-28T02:35:24Z",
        "lastEditedBy" : "4cd4ba6e-9ea1-4f5c-9418-a9434a4219eb",
        "tags" : [
        ]
      },
      {
        "id" : "f4d2c8ae-dd2a-45a9-9a25-4e7ce596bcf4",
        "parentId" : "4a5bf74c-32b0-4cfc-b1a4-b202e67f08e7",
        "authorId" : "351cea45-3d66-4827-bbfb-0a2c2c79b24b",
        "body" : "@neal-zhu thanks a lot, I think the test it should looks like: \r\n1. create original ziplist which will cause cascade update if a insertion/delete or a merge operation happened.\r\n2. doing insertion/delete or a merge operation.\r\n3. check the ziplist fields (like the length, tail pos, entry field etc), make sure the new ziplist was updated correctly and no corruption.\r\nalso probably you may need to pay attention to some edge conditions, like what @oranagra  mentioned.. thanks",
        "createdAt" : "2020-08-24T14:42:35Z",
        "updatedAt" : "2020-08-28T02:35:24Z",
        "lastEditedBy" : "351cea45-3d66-4827-bbfb-0a2c2c79b24b",
        "tags" : [
        ]
      },
      {
        "id" : "ea9b9a52-214a-4513-ab5a-fdec40265b6c",
        "parentId" : "4a5bf74c-32b0-4cfc-b1a4-b202e67f08e7",
        "authorId" : "4cd4ba6e-9ea1-4f5c-9418-a9434a4219eb",
        "body" : "@oranagra @hwware Pls take a look at the new commit though it might not be thorough enough yet.",
        "createdAt" : "2020-08-26T02:55:44Z",
        "updatedAt" : "2020-08-28T02:35:24Z",
        "lastEditedBy" : "4cd4ba6e-9ea1-4f5c-9418-a9434a4219eb",
        "tags" : [
        ]
      },
      {
        "id" : "d307c990-ee32-479f-95c2-efb41d746329",
        "parentId" : "4a5bf74c-32b0-4cfc-b1a4-b202e67f08e7",
        "authorId" : "351cea45-3d66-4827-bbfb-0a2c2c79b24b",
        "body" : "thanks @neal-zhu for providing these tests, I loaded and test in my side did not see issue so far. Athough this is not 100% coverage for all the cases, maybe we can merge this into unstable branch and continusly test the behavior. At same time we can still improve the ziplist unit test. ",
        "createdAt" : "2020-08-27T17:36:07Z",
        "updatedAt" : "2020-08-28T02:35:24Z",
        "lastEditedBy" : "351cea45-3d66-4827-bbfb-0a2c2c79b24b",
        "tags" : [
        ]
      }
    ],
    "commit" : "91890844988537d94c2cc7549b566180bb17157d",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +698,702 @@                rawlen - cur.prevrawlensize);\n        p -= (rawlen + delta);\n        if (cur.prevrawlen == 0) {\n            /* \"cur\" is the previous head entry, update its prevlen with firstentrylen. */\n            zipStorePrevEntryLength(p, firstentrylen);"
  }
]