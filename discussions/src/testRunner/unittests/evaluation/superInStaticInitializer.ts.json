[
  {
    "id" : "3a8121ca-0b98-4d52-851c-d32db152c3a1",
    "prId" : 44878,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44878#pullrequestreview-698555218",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "843d11ea-c353-4689-9278-e1d492a3c749",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "... `super.x++` increments `this.x`, but not `Base.x`? OK, I guess.",
        "createdAt" : "2021-07-03T01:22:20Z",
        "updatedAt" : "2021-07-03T01:26:04Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "45a1bf90-3b67-4b3d-b698-4f66bd728587",
        "parentId" : "843d11ea-c353-4689-9278-e1d492a3c749",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Yeah, that's how it works :)\r\n\r\n`++` is two operations, a `[[Get]]` and a `[[Set]]`. The `[[Get]]` walks the prototype chain to read, the `[[Set]]` only walks the prototype chain to look for a setter. If it finds the setter, it calls it with `this` as the receiver. If there's no setter, it sets the property on `this` (not the base class).",
        "createdAt" : "2021-07-03T01:39:14Z",
        "updatedAt" : "2021-07-03T01:39:14Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "f3618020-12a0-4ee7-951a-5f652e5cd8d1",
        "parentId" : "843d11ea-c353-4689-9278-e1d492a3c749",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "That oddity is one of the reasons we don't downlevel `SuperProperty` in ES5 unless its a call, the helper necessary to emulate `Reflect.get` and `Reflect.set` isn't worth the overhead.",
        "createdAt" : "2021-07-03T01:40:33Z",
        "updatedAt" : "2021-07-03T01:40:33Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d8261a7778ff56802d42a345e0cd8fb58fa9b11",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +36,40 @@        const [Base, Derived] = result.main();\n        assert.strictEqual(Base.x, 1);\n        assert.strictEqual(Derived.x, 2);\n        assert.strictEqual(Derived.y, 1);\n    });"
  }
]