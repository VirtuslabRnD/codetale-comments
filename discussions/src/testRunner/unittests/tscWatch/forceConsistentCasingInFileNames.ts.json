[
  {
    "id" : "ab59feaf-ba7f-42b3-a70d-3e16c6bcbb27",
    "prId" : 41292,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41292#pullrequestreview-565843563",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3135ad3f-5698-4d26-ae01-d0689ac62948",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think the testcase missing that we discussed and is important change is when current directory is \"c:/temp\" but on disk it is \"C:/Temp\" and all realpath results with new API will differ in casing and give errors vs it wasn't giving earlier ? ",
        "createdAt" : "2021-01-04T20:12:29Z",
        "updatedAt" : "2021-01-04T20:12:29Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "b912d36c-656a-41e5-b093-fa94998584ae",
        "parentId" : "3135ad3f-5698-4d26-ae01-d0689ac62948",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "And may be it is ok for watch scenario but it is something that will impact tsserver and in turn vscode.. vscode keeps track of open files from previous session so not sure if that gets updated if you change the casing and restart vscode from directory but users will not be able to get rid of error easily unless they close all files if the casing is retained across sessions by vscode. You would need to experiment to figure that out.\r\n",
        "createdAt" : "2021-01-04T20:15:16Z",
        "updatedAt" : "2021-01-04T20:15:20Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "bd7fb5a4-e6c7-4d70-bb82-9c71a2b02bdf",
        "parentId" : "3135ad3f-5698-4d26-ae01-d0689ac62948",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "> when current directory is \"c:/temp\" but on disk it is \"C:/Temp\"\r\n\r\nI attempted to provide test coverage for drive root casing differences [here](https://github.com/microsoft/TypeScript/pull/41292/files#diff-742ed890d46f805d54cbcf33f4a6f2cd286a81ac5df890b0b20636445b464093R162).  It's entirely possible I misunderstood your concerns though - please let me know if there's something else you'd like me to test.\r\n\r\n> may be it is ok for watch scenario but it is something that will impact tsserver\r\n\r\nFrom our offline discussion (before the break), I thought I understood that the watch VFS was the best place to add these tests.  It sounds like you may be suggesting adding server tests as well.  If that's the case, can you please point me at an example I can model them on?\r\n\r\n> vscode keeps track of open files from previous session\r\n\r\nI think you're saying that the paths returned by the server to VS Code might reflect the casing returned by realpathSync, but I'm not sure I understand what consequences you expect from this.  If it's about re-opening files in a new session, I would have guessed VS Code used case-insensitive system calls to open them.  If it's about VS Code passing stale paths back to the server when it starts a fresh instance, I would have guessed they would be re-normalized with an additional realpathSync call.  Can you please elaborate on your concerns?",
        "createdAt" : "2021-01-11T19:04:40Z",
        "updatedAt" : "2021-01-11T19:04:40Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "4dd7258c-2738-4803-ae28-4e515fcbaffb",
        "parentId" : "3135ad3f-5698-4d26-ae01-d0689ac62948",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "> I attempted to provide test coverage for drive root casing differences here. It's entirely possible I misunderstood your concerns though - please let me know if there's something else you'd like me to test.\r\n\r\nThat test case also gives incorrect result? [This](https://github.com/microsoft/TypeScript/pull/41292/files#diff-a87a00c391bf2ad3ae44e4560646d9b8725590957f232578e15e0d6230e4477eR36) should have been earlier been error and should be error because on case sensitive file system the import will not resolve, which is what intention of `forceConsistentFileNames` is.. \r\nThe case that it doesnt verify is also when the files on disk and all imports are consistent, but you start with current directory = different casing and build the project. Previously that would not error now it will ? \r\n\r\n\r\n> From our offline discussion (before the break), I thought I understood that the watch VFS was the best place to add these tests. It sounds like you may be suggesting adding server tests as well. If that's the case, can you please point me at an example I can model them on?\r\n\r\nIf the above scenario breaks for watch there is a way to fix those errors by closing tsc and restarting from correct casing directory.  But what happens in vscode is question. vscode keeps list of open files, so is the solution to close all files and open editor again? Does restart work , depending on answers to that we may need coverage for some tests here to lock the expected behaviour for baselines. There are tests for these in `unittests\\tsserver\\forceConsistentCasingInFileNames.ts`",
        "createdAt" : "2021-01-11T22:11:23Z",
        "updatedAt" : "2021-01-11T22:11:24Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "4fd09743-47c2-4546-9c87-114e81295e7c",
        "parentId" : "3135ad3f-5698-4d26-ae01-d0689ac62948",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I had the impression that `forceConsistentFileNames` [ignored](https://github.com/microsoft/TypeScript/blob/c456bbd4665e361a7495c3a13fd1ca9bc1265230/src/compiler/program.ts#L2533) drive roots.  Sorry for not including a comment to that effect.\r\n\r\n> The case that it doesnt verify is also when the files on disk and all imports are consistent, but you start with current directory = different casing and build the project. Previously that would not error now it will ?\r\n\r\nI'm not sure I follow.  Where is the current directory specified in this case?\r\n\r\n> But what happens in vscode is question\r\n\r\nSo you'd just like me to manually verify that VS Code doesn't have obvious breaks if I close a folder, change the casing on disk, and re-open it?",
        "createdAt" : "2021-01-11T23:44:13Z",
        "updatedAt" : "2021-01-11T23:44:13Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "d629b778-b26d-4656-ac67-848e8962d513",
        "parentId" : "3135ad3f-5698-4d26-ae01-d0689ac62948",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "> I had the impression that forceConsistentFileNames ignored drive roots. Sorry for not including a comment to that effect.\r\n\r\nYes. But your import doesnt test import \"somethingsomething/a\" and  \"somethingsomething/A\" you would get error on either one of those and that was expected behavior which is not the current case.\r\n\r\n> I'm not sure I follow. Where is the current directory specified in this case?\r\n\r\nCurrent directory need to be specified as part of the https://github.com/microsoft/TypeScript/pull/41292/files#diff-742ed890d46f805d54cbcf33f4a6f2cd286a81ac5df890b0b20636445b464093R149 . We need test where current directory differs in casing from whats on the disk.\r\n\r\nThe bigger missing part is import in wrong casing should give error which it wont because the realpath will resolve to casing on the disk and then we will loose that info. But same code in case sensitive file system will give error because import will not be resolved.\r\n\r\nDisk file name: a.ts \r\n\r\nimport \"a\" > success\r\nimport \"A\" > will fail on case sensistive file systems... so it should error with forceConsistentFileCasing on case insensitive filesystem which it would not when realpath is invoked as part of this change.",
        "createdAt" : "2021-01-12T00:26:47Z",
        "updatedAt" : "2021-01-12T00:26:47Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "fca073b1dcc352ddc6cd738a7f1bac1b8d4f79c7",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +211,215 @@        verifyFileSymlink(\"when import matches disk but file symlink target does not\", `${projectRoot}/XY.ts`, `${projectRoot}/XY.ts`, `./Xy`);\n        verifyFileSymlink(\"when import and file symlink target agree but do not match disk\", `${projectRoot}/XY.ts`, `${projectRoot}/Xy.ts`, `./Xy`);\n        verifyFileSymlink(\"when import, file symlink target, and disk are all different\", `${projectRoot}/XY.ts`, `${projectRoot}/Xy.ts`, `./yX`);\n\n        function verifyDirSymlink(subScenario: string, diskPath: string, targetPath: string, importedPath: string) {"
  }
]