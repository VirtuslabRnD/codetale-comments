[
  {
    "id" : "3aaa6bdf-d299-432b-a8df-debb27ef6dae",
    "prId" : 529,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "188d3bcd-9d2a-43d3-8faa-49a1c4bfa877",
        "parentId" : null,
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "agreed. it's much easier to handle value coercion from JS. even if that means all there is is a minor wrapper that does a couple coercions and checks.\n",
        "createdAt" : "2015-01-20T23:09:30Z",
        "updatedAt" : "2015-01-20T23:12:26Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      },
      {
        "id" : "a2998e7e-f1df-4ece-b8af-73bce81f6b6d",
        "parentId" : "188d3bcd-9d2a-43d3-8faa-49a1c4bfa877",
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "Good, I'll address that in a follow-up PR.\n",
        "createdAt" : "2015-01-20T23:10:44Z",
        "updatedAt" : "2015-01-20T23:12:26Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "668420d1f7685f49843bbf81ee3b4733a1989852",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +593,597 @@  // FIXME(bnoordhuis) It's questionable to reject non-ints here but still\n  // allow implicit coercion from null or undefined to zero.  Probably best\n  // handled in lib/fs.js.\n  Local<Value> len_v(args[1]);\n  if (!len_v->IsUndefined() &&"
  },
  {
    "id" : "90fba074-34dd-413d-af2a-0429f130ad0d",
    "prId" : 1092,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95cfeae1-afc1-4565-9a3a-32336557bc47",
        "parentId" : null,
        "authorId" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "body" : "How does this work?\n",
        "createdAt" : "2015-03-07T18:22:03Z",
        "updatedAt" : "2015-03-07T19:23:23Z",
        "lastEditedBy" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "tags" : [
        ]
      },
      {
        "id" : "07869bf3-1d82-48b6-8a58-5b16fe3ab52d",
        "parentId" : "95cfeae1-afc1-4565-9a3a-32336557bc47",
        "authorId" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "body" : "Nvm, read http://en.wikipedia.org/wiki/C++11#Explicitly_defaulted_and_deleted_special_member_functions\n",
        "createdAt" : "2015-03-07T18:22:30Z",
        "updatedAt" : "2015-03-07T19:23:23Z",
        "lastEditedBy" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "tags" : [
        ]
      }
    ],
    "commit" : "528d8786ff75ab2a88e6bd0d4980cef96bdacb26",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +83,87 @@  ~FSReqWrap() { ReleaseEarly(); }\n\n  void* operator new(size_t size) = delete;\n  void* operator new(size_t size, char* storage) { return storage; }\n  char* inline_data() { return reinterpret_cast<char*>(this + 1); }"
  },
  {
    "id" : "ca26a5ea-8119-4143-a796-03042e580044",
    "prId" : 1092,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b1cf09a-768b-4035-a601-31aaa9c5b134",
        "parentId" : null,
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "Note to self: move the method body out of the class before landing.\n",
        "createdAt" : "2015-03-07T18:36:52Z",
        "updatedAt" : "2015-03-07T19:23:23Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "528d8786ff75ab2a88e6bd0d4980cef96bdacb26",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +65,69 @@      data_ = nullptr;\n    }\n  }\n\n  const char* syscall() const { return syscall_; }"
  },
  {
    "id" : "0fe24f0d-be2e-4717-9f84-2d083be797e3",
    "prId" : 1092,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a128924f-3589-401e-b1ab-5f5037dd4ce8",
        "parentId" : null,
        "authorId" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "body" : "So you pas `buf` here, where does it die?\n",
        "createdAt" : "2015-03-07T19:07:26Z",
        "updatedAt" : "2015-03-07T19:23:23Z",
        "lastEditedBy" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "tags" : [
        ]
      },
      {
        "id" : "4a1d36c6-4c53-4b35-9a2a-cc0c12992051",
        "parentId" : "a128924f-3589-401e-b1ab-5f5037dd4ce8",
        "authorId" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "body" : "Anyway it seems that the `buf` should be deallocated somewhere.\n",
        "createdAt" : "2015-03-07T19:09:02Z",
        "updatedAt" : "2015-03-07T19:23:23Z",
        "lastEditedBy" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "tags" : [
        ]
      },
      {
        "id" : "a39370fd-c4a9-4fe6-8283-d5635e2eddf3",
        "parentId" : "a128924f-3589-401e-b1ab-5f5037dd4ce8",
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "It's freed by FSReqWrap's destructor because `ownership == MOVE`.\n",
        "createdAt" : "2015-03-07T19:21:44Z",
        "updatedAt" : "2015-03-07T19:23:23Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "528d8786ff75ab2a88e6bd0d4980cef96bdacb26",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +866,870 @@\n  FSReqWrap* req_wrap =\n      FSReqWrap::New(env, req.As<Object>(), \"write\", buf, ownership);\n  int err = uv_fs_write(env->event_loop(),\n                        &req_wrap->req_,"
  },
  {
    "id" : "c9b03700-3278-45f8-94e1-8f1a0fbe9839",
    "prId" : 1092,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc2e5a5d-f05f-4213-b499-5611689cee6c",
        "parentId" : null,
        "authorId" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "body" : "Oh, I guess it becomes parts of FSReqWrap?\n",
        "createdAt" : "2015-03-07T19:08:25Z",
        "updatedAt" : "2015-03-07T19:23:23Z",
        "lastEditedBy" : "d47a8b61-a8ac-4504-809d-8432d9e75d95",
        "tags" : [
        ]
      },
      {
        "id" : "5909d5c0-2730-4987-8302-a6a1285216e9",
        "parentId" : "dc2e5a5d-f05f-4213-b499-5611689cee6c",
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "Exactly. :-)\n",
        "createdAt" : "2015-03-07T19:22:06Z",
        "updatedAt" : "2015-03-07T19:23:23Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "528d8786ff75ab2a88e6bd0d4980cef96bdacb26",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +104,108 @@  char* const storage = new char[sizeof(*that) + size];\n  that = new(storage) FSReqWrap(env, req, syscall, data);\n  if (copy)\n    that->data_ = static_cast<char*>(memcpy(that->inline_data(), data, size));\n  return that;"
  },
  {
    "id" : "848e192c-46bb-47bd-8fb6-902ed9917d98",
    "prId" : 15034,
    "prUrl" : "https://github.com/nodejs/node/pull/15034#pullrequestreview-61428065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6471c481-7efe-400f-8f88-05b84cf1bd19",
        "parentId" : null,
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "Since these are already being checked on the js side, perhaps just a `CHECK` in here?",
        "createdAt" : "2017-08-25T18:49:20Z",
        "updatedAt" : "2017-09-08T04:08:19Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      },
      {
        "id" : "4b6fe7eb-451a-4ccb-aeba-f4ed1a55a3d1",
        "parentId" : "6471c481-7efe-400f-8f88-05b84cf1bd19",
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "The JS layer checks don't actually verify this.",
        "createdAt" : "2017-08-25T18:58:23Z",
        "updatedAt" : "2017-09-08T04:08:19Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      },
      {
        "id" : "1b187d5c-ac78-45d7-b4e2-54f42162c21c",
        "parentId" : "6471c481-7efe-400f-8f88-05b84cf1bd19",
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "ugh.. that's right. hmmm. we should definitely fix that.\r\nwould much prefer any new errors to go through the `internal/errors` path.",
        "createdAt" : "2017-08-25T19:01:00Z",
        "updatedAt" : "2017-09-08T04:08:19Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      },
      {
        "id" : "13b19494-2209-4562-976c-85686759ff5f",
        "parentId" : "6471c481-7efe-400f-8f88-05b84cf1bd19",
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "I agree. `fs.js` in general needs some TLC.",
        "createdAt" : "2017-08-25T19:03:30Z",
        "updatedAt" : "2017-09-08T04:08:19Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      },
      {
        "id" : "09359447-4842-44b5-95ac-96cff183cff9",
        "parentId" : "6471c481-7efe-400f-8f88-05b84cf1bd19",
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "I'll see if I can schedule some time next week to work on that. The risk, of course, is that `fs` is one of the most-monkey-patched modules out there and we risk breaking a lot of people by being too aggressive. ",
        "createdAt" : "2017-08-25T19:28:46Z",
        "updatedAt" : "2017-09-08T04:08:19Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      },
      {
        "id" : "6d402bf8-b977-4915-810e-e63dc2023c3e",
        "parentId" : "6471c481-7efe-400f-8f88-05b84cf1bd19",
        "authorId" : "f97c5026-0831-4731-9e17-f785d5400b04",
        "body" : "> fs is one of the most-monkey-patched modules out there and we risk breaking a lot of people by being too aggressive.\r\n\r\nFor new methods in `fs` it might then make sense to be more aggressive rather than not. Personally, the more assertions the better. Keeps things sharp.",
        "createdAt" : "2017-09-08T07:17:45Z",
        "updatedAt" : "2017-09-08T07:17:46Z",
        "lastEditedBy" : "f97c5026-0831-4731-9e17-f785d5400b04",
        "tags" : [
        ]
      }
    ],
    "commit" : "11b7428832466dd6933e9c26deaf3a4ce1d33cef",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +967,971 @@\n  if (!args[0]->IsString())\n    return TYPE_ERROR(\"src must be a string\");\n  if (!args[1]->IsString())\n    return TYPE_ERROR(\"dest must be a string\");"
  }
]