[
  {
    "id" : "31e0036c-2eb2-4649-9234-844a3311a2c0",
    "prId" : 9096,
    "prUrl" : "https://github.com/redis/redis/pull/9096#pullrequestreview-687948494",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0415a169-a4bf-46ed-91e4-1c6f84f8a260",
        "parentId" : null,
        "authorId" : "473bc8a0-7ca7-405b-9794-3e9f874fb547",
        "body" : "You need also set `config.db_num`.\r\nBesides, I think `config.resp3` should also be reset.",
        "createdAt" : "2021-06-19T12:59:55Z",
        "updatedAt" : "2021-06-19T12:59:55Z",
        "lastEditedBy" : "473bc8a0-7ca7-405b-9794-3e9f874fb547",
        "tags" : [
        ]
      },
      {
        "id" : "79ccd693-1c48-4d19-b5d5-795a302a69e9",
        "parentId" : "0415a169-a4bf-46ed-91e4-1c6f84f8a260",
        "authorId" : "30b24df1-a7b6-4b68-869b-7b8b69de67da",
        "body" : "Thanks,\r\nThere is no `db_num` field I guess you meant `config.input_dbnum`.\r\n",
        "createdAt" : "2021-06-20T22:23:36Z",
        "updatedAt" : "2021-06-20T22:23:36Z",
        "lastEditedBy" : "30b24df1-a7b6-4b68-869b-7b8b69de67da",
        "tags" : [
        ]
      },
      {
        "id" : "d34def15-15d9-4bd1-975a-e87c949fde5e",
        "parentId" : "0415a169-a4bf-46ed-91e4-1c6f84f8a260",
        "authorId" : "473bc8a0-7ca7-405b-9794-3e9f874fb547",
        "body" : "Exactly. I made a typo.",
        "createdAt" : "2021-06-20T23:09:58Z",
        "updatedAt" : "2021-06-20T23:09:58Z",
        "lastEditedBy" : "473bc8a0-7ca7-405b-9794-3e9f874fb547",
        "tags" : [
        ]
      }
    ],
    "commit" : "37cc2232b8cf579020cb7d97e85e79ca1f281363",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1490,1494 @@                                     config.last_cmd_type != REDIS_REPLY_ERROR) {\n                config.in_multi = 0;\n                config.dbnum = 0;\n                config.input_dbnum = 0;\n                config.resp3 = 0;"
  },
  {
    "id" : "e9596cee-6db4-48b8-bf29-4e7b3dff05f4",
    "prId" : 8895,
    "prUrl" : "https://github.com/redis/redis/pull/8895#pullrequestreview-655202924",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ae1cd7c-06de-455b-b478-9cc95a422a45",
        "parentId" : null,
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "@huangzhw So unless you disagree, I guess we should also log the history here since we don't know if it's dangerous or not.",
        "createdAt" : "2021-05-10T03:04:58Z",
        "updatedAt" : "2021-05-10T04:42:03Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      },
      {
        "id" : "78d7b3d1-529e-470d-a02e-a01bf24295a3",
        "parentId" : "9ae1cd7c-06de-455b-b478-9cc95a422a45",
        "authorId" : "473bc8a0-7ca7-405b-9794-3e9f874fb547",
        "body" : "It's OK. But blank line should not log?",
        "createdAt" : "2021-05-10T03:08:09Z",
        "updatedAt" : "2021-05-10T04:42:03Z",
        "lastEditedBy" : "473bc8a0-7ca7-405b-9794-3e9f874fb547",
        "tags" : [
        ]
      },
      {
        "id" : "39565569-d848-4aba-bee9-a73b60e31d0e",
        "parentId" : "9ae1cd7c-06de-455b-b478-9cc95a422a45",
        "authorId" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "body" : "I would imagine no one would expect an empty line to log, the only time I can see that is just someone tapping enter a couple of times to move the cursor down.",
        "createdAt" : "2021-05-10T03:22:11Z",
        "updatedAt" : "2021-05-10T04:42:03Z",
        "lastEditedBy" : "3ca74ed4-ec73-427d-88cb-0c084b679a52",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ecfc904cfee11bb7b3f77ae98ab9406f78d6023",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +2167,2171 @@                if (history) linenoiseHistoryAdd(line);\n                if (historyfile) linenoiseHistorySave(historyfile);\n                linenoiseFree(line);\n                continue;\n            } else if (argc == 0) {"
  },
  {
    "id" : "2d6ce751-3db3-4554-ac10-afa043118637",
    "prId" : 8884,
    "prUrl" : "https://github.com/redis/redis/pull/8884#pullrequestreview-656715054",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcf8cc9c-ee69-4517-a831-90f63bacb9fb",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i see not all code paths in `cliConnect` print an error when they return REDIS_ERR.\r\nwe may want to either improve these, or add a print here (otherwise it may look as if we're hung, and these 1 second retries won't be visible)",
        "createdAt" : "2021-05-11T11:37:39Z",
        "updatedAt" : "2021-05-11T13:18:52Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "a8ae8d86-4a8c-4328-9dbc-4a20f6549287",
        "parentId" : "fcf8cc9c-ee69-4517-a831-90f63bacb9fb",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "well, i guess there's always room for improvement..\r\nbefore this fix it would have had an infinite busy loop (possibly flooding the console with prints).\r\nnow we at least throttled the prints, right?\r\n\r\nlooking further i now see the screenshot at the top mentions `(will sleep 1 second)` but i can't find that in the code.\r\nwhat am i missing?",
        "createdAt" : "2021-05-11T13:13:10Z",
        "updatedAt" : "2021-05-11T13:18:52Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "1ad2c897-1bf8-4a54-8940-bdbd64e3d7ec",
        "parentId" : "fcf8cc9c-ee69-4517-a831-90f63bacb9fb",
        "authorId" : "c54e672f-7b5e-4402-bd8f-fcb255f27420",
        "body" : "@oranagra \r\n`possibly flooding the console with prints` right\r\n\r\noh. `(will sleep 1 second)` That one is a debug print i added it before. Just for test(good looking)\r\n\r\nAlso I improve the error handing. Added some log. It is ok with?",
        "createdAt" : "2021-05-11T13:22:47Z",
        "updatedAt" : "2021-05-11T13:24:13Z",
        "lastEditedBy" : "c54e672f-7b5e-4402-bd8f-fcb255f27420",
        "tags" : [
        ]
      },
      {
        "id" : "34db3377-edc2-483e-968c-3a44d2adfbca",
        "parentId" : "fcf8cc9c-ee69-4517-a831-90f63bacb9fb",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "so am i right that before this PR it would have an endless busy loop, and now it's throttled?\r\nyour first screenshot suggest that there's another sleep in the existing code.",
        "createdAt" : "2021-05-11T13:27:35Z",
        "updatedAt" : "2021-05-11T13:27:35Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "d34fce57-52cd-47ab-b68e-4372fe6304ec",
        "parentId" : "fcf8cc9c-ee69-4517-a831-90f63bacb9fb",
        "authorId" : "c54e672f-7b5e-4402-bd8f-fcb255f27420",
        "body" : "@oranagra Yes. In the above example. It will have an endless busy loop (if we don't sleep. will flood the console with prints).  \r\nMy first screenshot the log i added i think it is in `context = redisConnect(config.hostip,config.hostport);` position\r\nThe sleep i think it has been handled in method `issueCommandRepeat`",
        "createdAt" : "2021-05-11T13:35:12Z",
        "updatedAt" : "2021-05-11T13:35:12Z",
        "lastEditedBy" : "c54e672f-7b5e-4402-bd8f-fcb255f27420",
        "tags" : [
        ]
      }
    ],
    "commit" : "b82a03f24ab5878f30180a03b04a4ea2de3377fe",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +2027,2031 @@            /* If cliConnect fails, sleep for a while and try again. */\n            if (cliConnect(CC_FORCE) != REDIS_OK)\n                sleep(1);\n        } else {\n            break;"
  },
  {
    "id" : "c61cec0a-9fc4-4a3f-aa67-cb5f4a5fb0f1",
    "prId" : 8740,
    "prUrl" : "https://github.com/redis/redis/pull/8740#pullrequestreview-627638170",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4097cfbc-d55e-4be3-86c2-21db096b9aa9",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "was there any specific reason for the extra newline?\r\n```suggestion\r\n        fprintf(stderr, \"Couldn't determine DBSIZE: I/O error\\n\");\r\n```",
        "createdAt" : "2021-04-04T14:33:26Z",
        "updatedAt" : "2021-04-04T14:33:27Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "717856b1-017d-4f09-bcb3-e8e64ecc1b6e",
        "parentId" : "4097cfbc-d55e-4be3-86c2-21db096b9aa9",
        "authorId" : "473bc8a0-7ca7-405b-9794-3e9f874fb547",
        "body" : "There are many occurrences of this in the file, I just want to keep this. If this is useless, I think we can remove it and make the `I/O error` more detailed",
        "createdAt" : "2021-04-04T14:43:57Z",
        "updatedAt" : "2021-04-04T14:46:34Z",
        "lastEditedBy" : "473bc8a0-7ca7-405b-9794-3e9f874fb547",
        "tags" : [
        ]
      },
      {
        "id" : "19aeeb49-2db9-4451-9179-8da9feb7ad26",
        "parentId" : "4097cfbc-d55e-4be3-86c2-21db096b9aa9",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "maybe in some of them the newline is needed, and in others it doesn't.\r\nit looks very odd that we have 3 failure prints, some have it and some doesn't.\r\nit means that in that specific case either the other two are missing it or this one is excessive.\r\n\r\nmaybe there's a difference when things are started from command line, like `redis-cli --bigkeys` and things that can be executed from the interactive prompt.\r\n\r\ncan you please look into it?",
        "createdAt" : "2021-04-04T14:51:17Z",
        "updatedAt" : "2021-04-04T14:51:17Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "b35116b1-487c-4857-9580-1fe3dea5cef8",
        "parentId" : "4097cfbc-d55e-4be3-86c2-21db096b9aa9",
        "authorId" : "473bc8a0-7ca7-405b-9794-3e9f874fb547",
        "body" : "All `I/O error` are in non interactive mode.  \r\nIn fact I think `I/O error` rarely happens. I never saw this output. So leave it as it is is OK.\r\nThe failure prints, some places do more strictly and some not. Like `COMMAND`, if it failed, It will not let user known.\r\nSome places check error and return type and some places just check type. The first thinks server is unreliable and the second thinks server is reliable. Maybe just by different people.\r\nIMHO I don't see this difference is  made by purpose.",
        "createdAt" : "2021-04-04T15:24:50Z",
        "updatedAt" : "2021-04-04T15:24:50Z",
        "lastEditedBy" : "473bc8a0-7ca7-405b-9794-3e9f874fb547",
        "tags" : [
        ]
      },
      {
        "id" : "60c40b06-8e33-4479-8159-61f081f749e8",
        "parentId" : "4097cfbc-d55e-4be3-86c2-21db096b9aa9",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "ok.. one small step at a time...",
        "createdAt" : "2021-04-05T05:27:19Z",
        "updatedAt" : "2021-04-05T05:27:19Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd4ce51beae7e3bf8f02b6b187b88148ab2d4772",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +7419,7423 @@\n    if (reply == NULL) {\n        fprintf(stderr, \"\\nI/O error\\n\");\n        exit(1);\n    } else if (reply->type == REDIS_REPLY_ERROR) {"
  },
  {
    "id" : "12fe46e7-5fd7-49b6-ab3c-87097247f160",
    "prId" : 8566,
    "prUrl" : "https://github.com/redis/redis/pull/8566#pullrequestreview-602454844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eed0126b-070f-4de9-b577-5f922aaf896d",
        "parentId" : null,
        "authorId" : "4de661ae-6a7b-447d-9b4d-c4d7742ff2d4",
        "body" : "```suggestion\r\n                s_free(res);\r\n                return NULL;\r\n```\r\nShall we also free the allocated array here?",
        "createdAt" : "2021-03-03T02:30:57Z",
        "updatedAt" : "2021-03-03T21:19:32Z",
        "lastEditedBy" : "4de661ae-6a7b-447d-9b4d-c4d7742ff2d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "edc900a2bb7c3159232f96379df9cc305ab91faa",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +1976,1980 @@                while (--j >= 0) sdsfree(res[j]);\n                sds_free(res);\n                return NULL;\n            }\n            res[j] = unquoted;"
  },
  {
    "id" : "bcc26c73-204d-4e4f-8539-1b77616707d7",
    "prId" : 8566,
    "prUrl" : "https://github.com/redis/redis/pull/8566#pullrequestreview-603069253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3080df3d-8a20-4f11-9c17-d287e56e2806",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "maybe in both cases (this help line and the one above), it would help to give an example like `\"bla \\0\\n\\xff\"`",
        "createdAt" : "2021-03-03T16:15:26Z",
        "updatedAt" : "2021-03-03T21:19:32Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "edc900a2bb7c3159232f96379df9cc305ab91faa",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +1907,1911 @@\"                     options (default: *).\\n\"\n\"  --quoted-pattern <pat> Same as --pattern, but the specified string can be\\n\"\n\"                         quoted, in order to pass an otherwise non binary-safe string.\\n\"\n\"  --intrinsic-latency <sec> Run a test to measure intrinsic system latency.\\n\"\n\"                     The test will run for the specified amount of seconds.\\n\""
  },
  {
    "id" : "83b101eb-a5f4-4991-a26a-5041d7f0bf71",
    "prId" : 8566,
    "prUrl" : "https://github.com/redis/redis/pull/8566#pullrequestreview-603354937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39c207a7-4d0a-48bc-adb7-5421368dfc8e",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i don't like the use of `sds_malloc`, is this done because you wanna use `sdsfreesplitres` to release it?\r\nmaybe it would be nicer to add a dedicated release function (and mention it in the top comment of this function)",
        "createdAt" : "2021-03-03T16:19:09Z",
        "updatedAt" : "2021-03-03T21:19:32Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "4931caae-9bea-448d-a3fd-0dd3c1f74a4d",
        "parentId" : "39c207a7-4d0a-48bc-adb7-5421368dfc8e",
        "authorId" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "body" : "Me neither, but also not a fan of duplicating this and I'm expecting sds to go away from hiredis at some point so we won't need to deal with that.",
        "createdAt" : "2021-03-03T21:12:21Z",
        "updatedAt" : "2021-03-03T21:19:32Z",
        "lastEditedBy" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "tags" : [
        ]
      }
    ],
    "commit" : "edc900a2bb7c3159232f96379df9cc305ab91faa",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +1968,1972 @@ */\nstatic sds *getSdsArrayFromArgv(int argc, char **argv, int quoted) {\n    sds *res = sds_malloc(sizeof(sds) * argc);\n\n    for (int j = 0; j < argc; j++) {"
  },
  {
    "id" : "47eafba0-dd22-4c4d-bb14-f2021355ac63",
    "prId" : 8566,
    "prUrl" : "https://github.com/redis/redis/pull/8566#pullrequestreview-603069253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "586566d4-0f83-4b60-88b6-e51306abc516",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "are you sue you can use `redisCommand` this way with binary strings?\r\ni see i recently did something different to support binary strings in `--bigkeys`:\r\n```c\r\n        const char* argv[] = {\"TYPE\", keys->element[i]->str};\r\n        size_t lens[] = {4, keys->element[i]->len};\r\n        redisAppendCommandArgv(context, 2, argv, lens);\r\n```\r\ni guess i wasn't familiar with `%b`",
        "createdAt" : "2021-03-03T16:25:33Z",
        "updatedAt" : "2021-03-03T21:19:32Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "edc900a2bb7c3159232f96379df9cc305ab91faa",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +7374,7378 @@    if (config.pattern)\n        reply = redisCommand(context, \"SCAN %llu MATCH %b\",\n            *it, config.pattern, sdslen(config.pattern));\n    else\n        reply = redisCommand(context,\"SCAN %llu\",*it);"
  },
  {
    "id" : "98239bae-582e-4674-9b91-2111a1d5c66d",
    "prId" : 8475,
    "prUrl" : "https://github.com/redis/redis/pull/8475#pullrequestreview-586267553",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "704d56b5-d1a8-448a-ace9-840e6e8813c6",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i think this one should move to the caller, it's confusing to see it here (you don't know how these arguments were created).",
        "createdAt" : "2021-02-09T06:41:42Z",
        "updatedAt" : "2021-02-09T10:11:01Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "d87f92bf-248f-4a12-8af6-233647bcb091",
        "parentId" : "704d56b5-d1a8-448a-ace9-840e6e8813c6",
        "authorId" : "3fd01224-49da-4442-b8fb-3e7fd805eb03",
        "body" : "We can't move it to the caller since there is a zrealloc in `noninteractive`.",
        "createdAt" : "2021-02-09T07:00:25Z",
        "updatedAt" : "2021-02-09T10:11:01Z",
        "lastEditedBy" : "3fd01224-49da-4442-b8fb-3e7fd805eb03",
        "tags" : [
        ]
      },
      {
        "id" : "b4901ab3-b16e-4639-b121-79a9a62226e2",
        "parentId" : "704d56b5-d1a8-448a-ace9-840e6e8813c6",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "so how about moving the call to `convertToSds` to be inside `noninteractive`?\r\n\r\neven then, this `realloc` still makes it a bit odd since it means `noninteractive` assumes it knows what `convertToSds` does, and that this pointer can be realloced, but at least all of it is inside that function, and it doesn't assume anything about how the caller uses it.",
        "createdAt" : "2021-02-09T07:27:32Z",
        "updatedAt" : "2021-02-09T10:11:01Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "b6483ac7-a951-4b49-b262-0dc03690dff8",
        "parentId" : "704d56b5-d1a8-448a-ace9-840e6e8813c6",
        "authorId" : "3fd01224-49da-4442-b8fb-3e7fd805eb03",
        "body" : "Fixed that.",
        "createdAt" : "2021-02-09T08:04:17Z",
        "updatedAt" : "2021-02-09T10:11:01Z",
        "lastEditedBy" : "3fd01224-49da-4442-b8fb-3e7fd805eb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "52f123b0513ef454c8de204dd1dc1860a4d6a062",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +2186,2190 @@        retval = issueCommand(argc, argv);\n    }\n    freeConvertedSds(argc, argv);\n    return retval;\n}"
  },
  {
    "id" : "37d1018f-3386-4304-af9c-4528517ecafe",
    "prId" : 8136,
    "prUrl" : "https://github.com/redis/redis/pull/8136#pullrequestreview-545046468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83b6e879-3e08-4b2b-927e-f1fd8901a9b5",
        "parentId" : null,
        "authorId" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "body" : "@hwware In addition to aborting with an error code, this also introduces other changes as the error is now sent to `stderr` rather than `stdout` and it does not conform to the `cliFormatReply` formatting. Is that intentional? We should consider maintaining compatibility here.",
        "createdAt" : "2020-12-04T14:49:04Z",
        "updatedAt" : "2020-12-04T15:49:53Z",
        "lastEditedBy" : "b35f6f04-eae9-4f88-8265-08b19050f11b",
        "tags" : [
        ]
      },
      {
        "id" : "b1d65923-7de1-46b8-bdca-5e57bb680569",
        "parentId" : "83b6e879-3e08-4b2b-927e-f1fd8901a9b5",
        "authorId" : "351cea45-3d66-4827-bbfb-0a2c2c79b24b",
        "body" : "hi @yossigo , thanks for your comments, yes this is intentional, since when cli abort with error code, the stderr will always been set based on other parts of code, for example when context error happens and we have to exit with an error: https://github.com/redis/redis/blob/unstable/src/redis-cli.c#L873 . the cliFormatReply based on my understanding is formatting reply for \"no error\", even though this function contains a error case we still don't consider the execution fails and the exit code is still 0. ",
        "createdAt" : "2020-12-04T15:15:06Z",
        "updatedAt" : "2020-12-04T15:49:53Z",
        "lastEditedBy" : "351cea45-3d66-4827-bbfb-0a2c2c79b24b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1718cb544623b5383cc72f9641fa4a413da1662",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1272,1276 @@    {\n        fprintf(stderr,\"%s\\n\",reply->str);\n        exit(1);\n        return REDIS_ERR; /* avoid compiler warning */\n    }"
  },
  {
    "id" : "0179c4b8-bdb4-4fbd-b963-b1999dd477c1",
    "prId" : 7994,
    "prUrl" : "https://github.com/redis/redis/pull/7994#pullrequestreview-521264304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54bec722-f9d0-446d-a426-d11e66ae2e90",
        "parentId" : null,
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "i don't understand... how is it used?\r\nthis help doesn't seem to reflect this code: `(!strcmp(argv[i],\"--cluster-from-user\")`\r\n@hwware can you update the top comment of the PR?",
        "createdAt" : "2020-11-01T20:43:24Z",
        "updatedAt" : "2020-11-01T20:43:24Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      },
      {
        "id" : "9bcd4699-e769-489e-9fef-7d827684dc0d",
        "parentId" : "54bec722-f9d0-446d-a426-d11e66ae2e90",
        "authorId" : "351cea45-3d66-4827-bbfb-0a2c2c79b24b",
        "body" : "Hi @oranagra , The cluster management related help is built in this function https://github.com/redis/redis/blob/unstable/src/redis-cli.c#L6548 .. It will automaticallly append the --cluster- prefix in the help. You can also try \"./redis-cli --cluster help\" to see that...  thanks! Also done for editing the top comments..",
        "createdAt" : "2020-11-01T21:27:17Z",
        "updatedAt" : "2020-11-01T21:29:13Z",
        "lastEditedBy" : "351cea45-3d66-4827-bbfb-0a2c2c79b24b",
        "tags" : [
        ]
      },
      {
        "id" : "21abed0b-86b0-4360-8115-2978ecdeed9b",
        "parentId" : "54bec722-f9d0-446d-a426-d11e66ae2e90",
        "authorId" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "body" : "ohh, thanks",
        "createdAt" : "2020-11-01T21:41:52Z",
        "updatedAt" : "2020-11-01T21:41:52Z",
        "lastEditedBy" : "02e243fa-aeed-4b15-9e9e-405ca1702d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "f55568f7cbab39ffbf99988039e6f4fe7f73955b",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +2438,2442 @@     \"host:port milliseconds\", NULL},\n    {\"import\", clusterManagerCommandImport, 1, \"host:port\",\n     \"from <arg>,from-user <arg>,from-pass <arg>,from-askpass,copy,replace\"},\n    {\"backup\", clusterManagerCommandBackup, 2,  \"host:port backup_directory\",\n     NULL},"
  },
  {
    "id" : "bf6b9399-e0ac-480d-b9f6-57618490b088",
    "prId" : 5528,
    "prUrl" : "https://github.com/redis/redis/pull/5528#pullrequestreview-171983192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "978b28fe-7ef1-4e6c-a7f8-d0407e5a787a",
        "parentId" : null,
        "authorId" : "9dc3e732-4796-451d-a98a-f5d306efb7b5",
        "body" : "Isn't it will delete data associated with slot?",
        "createdAt" : "2018-11-06T11:58:39Z",
        "updatedAt" : "2018-11-06T11:58:39Z",
        "lastEditedBy" : "9dc3e732-4796-451d-a98a-f5d306efb7b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a2d82ae8ef4f9b088bf8a2d43fec11ca8639729",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +3630,3634 @@                /* Ensure the slot is not already assigned. */\n                redisReply *r = CLUSTER_MANAGER_COMMAND(n,\n                    \"CLUSTER DELSLOTS %s\", slot);\n                if (r) freeReplyObject(r);\n                r = CLUSTER_MANAGER_COMMAND(n,"
  },
  {
    "id" : "3154508b-0e95-4977-ba25-e4cfbc08e51e",
    "prId" : 5528,
    "prUrl" : "https://github.com/redis/redis/pull/5528#pullrequestreview-172003118",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae336453-a397-42ff-b7e6-abd38ee856d7",
        "parentId" : null,
        "authorId" : "9dc3e732-4796-451d-a98a-f5d306efb7b5",
        "body" : "Same as in \"single\" case: doesn't it delete data?",
        "createdAt" : "2018-11-06T11:59:13Z",
        "updatedAt" : "2018-11-06T11:59:13Z",
        "lastEditedBy" : "9dc3e732-4796-451d-a98a-f5d306efb7b5",
        "tags" : [
        ]
      },
      {
        "id" : "b354f024-e6c8-43d8-9464-11259b4778ab",
        "parentId" : "ae336453-a397-42ff-b7e6-abd38ee856d7",
        "authorId" : "7ed7bb1e-125a-4b75-b96e-c05ee454edc0",
        "body" : "DELSLOTS just unassigns the slot in the node configuration. It's used before ADDSLOTS (in case the node must become the \"owner\") or before SETSLOT (when the node must update its own configuration after the \"owner\" changed) in order to avoid reply errors related to the fact the the slot is already assigned from the node's point of view.\r\n\r\nNo key will be deleted, it's just used to reassign the slot in the node's configuration.",
        "createdAt" : "2018-11-06T12:56:39Z",
        "updatedAt" : "2018-11-06T12:56:39Z",
        "lastEditedBy" : "7ed7bb1e-125a-4b75-b96e-c05ee454edc0",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a2d82ae8ef4f9b088bf8a2d43fec11ca8639729",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +3674,3678 @@                /* Ensure the slot is not already assigned. */\n                redisReply *r = CLUSTER_MANAGER_COMMAND(target,\n                    \"CLUSTER DELSLOTS %s\", slot);\n                if (r) freeReplyObject(r);\n                r = CLUSTER_MANAGER_COMMAND(target,"
  }
]