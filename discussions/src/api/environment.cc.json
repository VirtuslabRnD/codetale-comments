[
  {
    "id" : "fd764300-0d0c-474e-a31a-e390f0d1393e",
    "prId" : 23926,
    "prUrl" : "https://github.com/nodejs/node/pull/23926#pullrequestreview-239404017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5e62018-ba8b-4ea3-9d06-e25eb3e59521",
        "parentId" : null,
        "authorId" : "fd6121e5-716b-4d0d-aef4-eef51dd23a40",
        "body" : "Why do we need `TryCatchScope` and `Rethrow` here if it is not fatal? I think we can just return the empty `MaybeLocal` if the function throws an error?",
        "createdAt" : "2019-05-20T09:32:35Z",
        "updatedAt" : "2019-05-21T20:39:34Z",
        "lastEditedBy" : "fd6121e5-716b-4d0d-aef4-eef51dd23a40",
        "tags" : [
        ]
      },
      {
        "id" : "7399d415-d079-4dd4-bff1-60969c78ce47",
        "parentId" : "e5e62018-ba8b-4ea3-9d06-e25eb3e59521",
        "authorId" : "b9cce894-fffe-4a32-a85d-fba1f3348e30",
        "body" : "See https://crbug.com/v8/7848#c26 for context. The TryCatch + Rethrow is required by V8 due to details around exception handling there. For C++ callbacks, V8 expects a scheduled exception (which is what Rethrow gives us). Just returning the empty MaybeLocal would leave us with a pending exception.",
        "createdAt" : "2019-05-20T09:58:39Z",
        "updatedAt" : "2019-05-21T20:39:34Z",
        "lastEditedBy" : "b9cce894-fffe-4a32-a85d-fba1f3348e30",
        "tags" : [
        ]
      },
      {
        "id" : "c30925bb-f8e3-4c97-a9c1-9afd34fb6aea",
        "parentId" : "e5e62018-ba8b-4ea3-9d06-e25eb3e59521",
        "authorId" : "fd6121e5-716b-4d0d-aef4-eef51dd23a40",
        "body" : "Thanks for the pointer. Can we put a comment here referencing the link?",
        "createdAt" : "2019-05-20T10:05:37Z",
        "updatedAt" : "2019-05-21T20:39:34Z",
        "lastEditedBy" : "fd6121e5-716b-4d0d-aef4-eef51dd23a40",
        "tags" : [
        ]
      }
    ],
    "commit" : "b046bd193573faf89ac088076b223d5535fb4876",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +74,78 @@  // is what ReThrow gives us). Just returning the empty MaybeLocal would leave\n  // us with a pending exception.\n  TryCatchScope try_catch(env);\n  MaybeLocal<Value> result = prepare->Call(\n      context, Undefined(env->isolate()), arraysize(args), args);"
  }
]