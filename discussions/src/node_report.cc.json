[
  {
    "id" : "8fcfc5ae-2e43-457f-a97b-2b585ef522d9",
    "prId" : 22712,
    "prUrl" : "https://github.com/nodejs/node/pull/22712#pullrequestreview-153579079",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5ad77f4-1b23-47ac-bae6-88894fbfdcd1",
        "parentId" : null,
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "Btw, this is a good example of a well-scoped function – it prints out per-Isolate information, so it takes an `Isolate*` parameter and doesn’t read information from per-Environment or global state. (I realize that it’s not easy to do it this way for each piece of the report.)",
        "createdAt" : "2018-09-09T11:50:28Z",
        "updatedAt" : "2019-01-18T05:07:28Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      }
    ],
    "commit" : "55e0ad9ae690f6d73b0caff7b813eb4d61195b94",
    "line" : 524,
    "diffHunk" : "@@ -1,1 +522,526 @@static void PrintGCStatistics(JSONWriter* writer, Isolate* isolate) {\n  HeapStatistics v8_heap_stats;\n  isolate->GetHeapStatistics(&v8_heap_stats);\n  HeapSpaceStatistics v8_heap_space_stats;\n"
  },
  {
    "id" : "26ff9989-37b9-4b96-8c87-9907a1ed82d8",
    "prId" : 25781,
    "prUrl" : "https://github.com/nodejs/node/pull/25781#pullrequestreview-197373261",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "445773a2-d473-4706-b4db-7be230389bff",
        "parentId" : null,
        "authorId" : "d3bf7abd-5681-4b16-b1e7-beb89d57be65",
        "body" : "does this compile on Windows? I think it uses `GetProcAddress`.",
        "createdAt" : "2019-01-29T04:26:26Z",
        "updatedAt" : "2019-01-31T18:28:13Z",
        "lastEditedBy" : "d3bf7abd-5681-4b16-b1e7-beb89d57be65",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d4b085b1be6094317de536858c3e7d8cbbae848",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +329,333 @@  const char* (*libc_version)();\n  *(reinterpret_cast<void**>(&libc_version)) =\n      dlsym(RTLD_DEFAULT, \"gnu_get_libc_version\");\n  if (libc_version != nullptr)\n    writer->json_keyvalue(\"glibcVersionRuntime\", (*libc_version)());"
  },
  {
    "id" : "c896c21c-5cd3-4927-9202-6d9a0ba9c3ea",
    "prId" : 25900,
    "prUrl" : "https://github.com/nodejs/node/pull/25900#pullrequestreview-199398391",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f152209-e542-4761-a9fc-9c84e8b4a5d7",
        "parentId" : null,
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "Include `<netdb.h>` and `<sys/param.h>` to get the definition of `MAXHOSTNAMELEN`, see src/node_os.cc.",
        "createdAt" : "2019-02-03T18:16:24Z",
        "updatedAt" : "2019-02-05T13:57:14Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bbe29dcce8ee7830e5589a407e56e9cfcfc2129",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +55,59 @@#ifndef MAXHOSTNAMELEN\n# define MAXHOSTNAMELEN 256\n#endif  // MAXHOSTNAMELEN\n\nnamespace report {"
  },
  {
    "id" : "71b1cb39-c1e1-42c9-8448-82502a01ed3e",
    "prId" : 27029,
    "prUrl" : "https://github.com/nodejs/node/pull/27029#pullrequestreview-221117455",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8343c744-092a-4b2a-aa8f-ab2998a5375f",
        "parentId" : null,
        "authorId" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "body" : "This might overflow when `tv_sec` is a 32 bits long.\r\n\r\n(I kind of regret that we didn't use `int64_t` for `uv_timeval_t.tv_sec`...)",
        "createdAt" : "2019-04-01T07:09:59Z",
        "updatedAt" : "2019-04-22T21:11:31Z",
        "lastEditedBy" : "4224fcfe-ee22-4bd8-9ed5-4e8efd7a90bc",
        "tags" : [
        ]
      },
      {
        "id" : "ee1419f7-614e-4574-820a-484d8c0c32b3",
        "parentId" : "8343c744-092a-4b2a-aa8f-ab2998a5375f",
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "Maybe there's still time to change `uv_gettimeofday` to `uint64_t uv_gettimeofday()` (or `unsigned long long int`) and always return microseconds? Seems like `uv_timeval_t` is a little \"legacy\" for this API",
        "createdAt" : "2019-04-01T13:18:50Z",
        "updatedAt" : "2019-04-22T21:11:31Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      },
      {
        "id" : "a73cdef0-2277-435d-9336-3161f9ea9fea",
        "parentId" : "8343c744-092a-4b2a-aa8f-ab2998a5375f",
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "That's not a bad idea. Since `uv_gettimeofday()` hasn't been released yet, there is time.",
        "createdAt" : "2019-04-01T13:38:07Z",
        "updatedAt" : "2019-04-22T21:11:31Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      },
      {
        "id" : "db1841c1-8914-424e-b940-17c32d4b24e7",
        "parentId" : "8343c744-092a-4b2a-aa8f-ab2998a5375f",
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "We can discuss at https://github.com/libuv/libuv/issues/2243.",
        "createdAt" : "2019-04-01T13:41:36Z",
        "updatedAt" : "2019-04-22T21:11:31Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e1e9946a9f251fd943de1777fd9b598979e5a23",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +215,219 @@  if (uv_gettimeofday(&ts) == 0) {\n    writer.json_keyvalue(\"dumpEventTimeStamp\",\n                         std::to_string(ts.tv_sec * 1000 + ts.tv_usec / 1000));\n  }\n"
  },
  {
    "id" : "283d4ed3-210e-4dd9-ac27-263c51bb1c07",
    "prId" : 35940,
    "prUrl" : "https://github.com/nodejs/node/pull/35940#pullrequestreview-529164394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7ced489-95be-4ad0-b35c-99710f47f805",
        "parentId" : null,
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "Is `idle_time` in nanoseconds? I thought @trevnorris said it was milliseconds in https://github.com/nodejs/node/pull/35940#issuecomment-725051411.",
        "createdAt" : "2020-11-12T14:42:18Z",
        "updatedAt" : "2020-11-13T06:27:50Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      },
      {
        "id" : "b831d517-a058-47ce-9073-3a01d667f856",
        "parentId" : "a7ced489-95be-4ad0-b35c-99710f47f805",
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "The libuv code uses `uv_hrtime()` without any additional scaling, so, yes, nanoseconds.",
        "createdAt" : "2020-11-12T14:47:36Z",
        "updatedAt" : "2020-11-13T06:27:50Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      },
      {
        "id" : "29deb681-272d-466d-81bd-5cdecbd166f4",
        "parentId" : "a7ced489-95be-4ad0-b35c-99710f47f805",
        "authorId" : "d3bf7abd-5681-4b16-b1e7-beb89d57be65",
        "body" : "https://github.com/nodejs/node/blob/589b2a1244da2f04843652bda97ef55397cdf5b7/src/node_perf.cc#L446-L447 \r\n\r\nthis may make it very clear - the `nanoseconds` that comes is converted to `millis` if accessed through API.",
        "createdAt" : "2020-11-12T14:51:40Z",
        "updatedAt" : "2020-11-13T06:27:50Z",
        "lastEditedBy" : "d3bf7abd-5681-4b16-b1e7-beb89d57be65",
        "tags" : [
        ]
      },
      {
        "id" : "2280cbe0-ee15-482a-b4d4-e2bf939e4169",
        "parentId" : "a7ced489-95be-4ad0-b35c-99710f47f805",
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "That makes sense. I was just confused by https://github.com/nodejs/node/pull/35940#issuecomment-725051411. Thanks Anna and Gireesh.",
        "createdAt" : "2020-11-12T14:52:32Z",
        "updatedAt" : "2020-11-13T06:27:50Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      }
    ],
    "commit" : "74bd866d94aab61feb456bc68229278fbbc4be4b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +298,302 @@    // Report Event loop idle time\n    uint64_t idle_time = uv_metrics_idle_time(env->event_loop());\n    writer.json_keyvalue(\"loopIdleTimeSeconds\", 1.0 * idle_time / 1e9);\n    writer.json_end();\n  }"
  }
]