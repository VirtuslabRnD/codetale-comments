[
  {
    "id" : "68b9ef5d-d4e7-41d3-963a-e16ab74883b3",
    "prId" : 19864,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19864#pullrequestreview-75550107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cd6be80-8966-46b6-b624-8087d6762bc5",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Whats the purpose of setting canUseEvents as true all the time?",
        "createdAt" : "2017-11-09T17:26:51Z",
        "updatedAt" : "2017-11-18T03:49:10Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "dac7f9d2-a684-4fca-9dfb-bf0bc003af8e",
        "parentId" : "1cd6be80-8966-46b6-b624-8087d6762bc5",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "With this change, we can send events regardless of whether eventPort is set or not. If `eventPort === undefined` (ie: sending events through stdin/stdout), the behavior is unchanged. But now tsserver can send events through the event port, so if `eventPort !== undefined`, we can send events as well.",
        "createdAt" : "2017-11-09T18:59:20Z",
        "updatedAt" : "2017-11-18T03:49:10Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "98aabf81-a7cd-446f-8d75-9708ea29f503",
        "parentId" : "1cd6be80-8966-46b6-b624-8087d6762bc5",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "I kept the `canUseEvents` option available to avoid breaking the public API. As far as I am aware, @anstarovoyt is the only direct consumer of the IoSession API. Perhaps he can comment on whether `canUseEvents` is a useful option for him. And if not, we can consider deprecating and eventually removing `canUseEvents`.\r\n\r\nBut we should do this in a separate issue.",
        "createdAt" : "2017-11-09T19:03:01Z",
        "updatedAt" : "2017-11-18T03:49:10Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2cc4f15bec6cacaf6cc297acd870aaa5807a4bc",
    "line" : 376,
    "diffHunk" : "@@ -1,1 +961,965 @@        eventPort,\n        canUseEvents: true,\n        useSingleInferredProject,\n        useInferredProjectPerProjectRoot,\n        disableAutomaticTypingAcquisition,"
  },
  {
    "id" : "20b99679-0183-48d1-b274-b061222bf4b6",
    "prId" : 18491,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18491#pullrequestreview-62918103",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d44fe7fd-b3fe-4131-a2c1-3e3cde4885c9",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "This still seems like a hazard. You're effectively decrementing by one above to keep track of request/response pairings, yet in this loop you just shift off requests until you find the one you want (with a log \"info\" message that a request was skipped). Wouldn't this get the activeRequestCount out of sync if it skips them?",
        "createdAt" : "2017-09-14T23:35:40Z",
        "updatedAt" : "2017-09-14T23:35:41Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "4f1568f2-8bb2-4de5-b83e-8c5e69ba1fa2",
        "parentId" : "d44fe7fd-b3fe-4131-a2c1-3e3cde4885c9",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Oh, don't mind me. I see this is scheduling the next one from the queue, so should be good.",
        "createdAt" : "2017-09-14T23:39:33Z",
        "updatedAt" : "2017-09-14T23:39:33Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "25c179ed-6dae-4006-82dc-adde2c27deac",
        "parentId" : "d44fe7fd-b3fe-4131-a2c1-3e3cde4885c9",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Though one concern/hazard: This while loop previously was always entered to schedule the next request, other than for the 3 event types explicitly handled in the \"if\" blocks above. Now you only enter this loop to continue scheduling work \"if (response.kind === ActionSet)\". Shouldn't it continue to always enter this loop except for any events? (Even if only for future proofing?)",
        "createdAt" : "2017-09-14T23:50:26Z",
        "updatedAt" : "2017-09-14T23:50:26Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "647c23ff-8d2c-4610-9782-d4011905b1c1",
        "parentId" : "d44fe7fd-b3fe-4131-a2c1-3e3cde4885c9",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I can change the check to `!invalidate` if you think that would be more future proof.  Otherwise, it's one-in-one-out, so it doesn't make sense to pull anything off the queue if the message doesn't indicate the completion of a request.",
        "createdAt" : "2017-09-14T23:57:34Z",
        "updatedAt" : "2017-09-14T23:57:34Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "7e35aafa-a629-47be-9597-0dda89c741e9",
        "parentId" : "d44fe7fd-b3fe-4131-a2c1-3e3cde4885c9",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Seems like letting the type system verify exhaustive checks on the string literal types in \"TypingInstallerResponse\" would be safest to ensure any additions/changes to \"response.kind\" aren't missed (e.g. https://stackoverflow.com/questions/39419170/how-do-i-check-that-a-switch-block-is-exhaustive-in-typescript ). Possible here?",
        "createdAt" : "2017-09-14T23:58:38Z",
        "updatedAt" : "2017-09-14T23:58:38Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3411d4361300081151db3ba51fe706bfa97c347",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +451,455 @@\n                    if (this.logger.hasLevel(LogLevel.verbose)) {\n                        this.logger.info(`Skipping defunct request for: ${queuedRequest.operationId}`);\n                    }\n                }"
  },
  {
    "id" : "3d5bb802-f2f7-42c4-8105-6753b919dec3",
    "prId" : 17669,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17669#pullrequestreview-59989222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "857f9176-0aaf-402d-b56c-25d7db290e34",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "So we're using `new Date(0)` as a special sigil value? Why not use `undefined` for that purpose?",
        "createdAt" : "2017-08-22T18:35:13Z",
        "updatedAt" : "2017-08-31T00:34:53Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "5cba2a6d-9493-454d-b79a-9b8512271444",
        "parentId" : "857f9176-0aaf-402d-b56c-25d7db290e34",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "@sheetalkamat bump",
        "createdAt" : "2017-08-31T15:28:32Z",
        "updatedAt" : "2017-08-31T15:28:32Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "08f2e81a-1fe1-4ed5-8225-c28bf32613e6",
        "parentId" : "857f9176-0aaf-402d-b56c-25d7db290e34",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "hmm. I was using same logic that was already present. But I will look into it.",
        "createdAt" : "2017-08-31T20:59:39Z",
        "updatedAt" : "2017-08-31T20:59:39Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea95f3b4e564e2f0d9d7c9ddb0869c179783ee4f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +541,545 @@                    if (err.code === \"ENOENT\") {\n                        if (watchedFile.mtime.getTime() !== 0) {\n                            watchedFile.mtime = new Date(0);\n                            watchedFile.callback(watchedFile.fileName, FileWatcherEventKind.Deleted);\n                        }"
  },
  {
    "id" : "4e73cd1a-a79c-4a79-af6d-541de4bf167f",
    "prId" : 16374,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16374#pullrequestreview-43024796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3dd4afba-86b9-40f6-86e8-a116c3846046",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "So is each different version location going to have its own types registry and package.json? Seems like it. We should make sure this location is consistently used across installing and using these.",
        "createdAt" : "2017-06-08T21:56:41Z",
        "updatedAt" : "2017-06-08T21:56:41Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bd5df7577c1fd4fc8d3ff09a30638c57b3bb780",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +35,39 @@    } = require(\"os\");\n\n    function getGlobalTypingsCacheLocation() {\n        const versionMajorMinor = ts.version.match(/\\d+\\.\\d+/)[0];\n        switch (process.platform) {"
  },
  {
    "id" : "b85a99b9-8c5c-4b1b-8e66-e5d71fc967e5",
    "prId" : 16374,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16374#pullrequestreview-43050531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7be39e23-0365-47a5-9246-f7ebf87e7f9c",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Why not just create this at the source?\r\n```ts\r\nexport const versionMajorMinor = \"2.4\";\r\nexport const version = `${versionMajorMinor}.0`;\r\n```",
        "createdAt" : "2017-06-09T01:21:20Z",
        "updatedAt" : "2017-06-09T01:21:20Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bd5df7577c1fd4fc8d3ff09a30638c57b3bb780",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +36,40 @@\n    function getGlobalTypingsCacheLocation() {\n        const versionMajorMinor = ts.version.match(/\\d+\\.\\d+/)[0];\n        switch (process.platform) {\n            case \"win32\": {"
  },
  {
    "id" : "ba5ce4f5-b369-43a9-8b73-a8aad3feca9f",
    "prId" : 16084,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16084#pullrequestreview-40383734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e147024-fc1b-4846-9f98-cc0aa37f2356",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This was needlessly put in a nested block.",
        "createdAt" : "2017-05-25T20:28:50Z",
        "updatedAt" : "2017-05-25T21:57:12Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f8588bce53de81b380a077d0587850047a7a1ae",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +286,290 @@\n            const execArgv: string[] = [];\n            for (const arg of process.execArgv) {\n                const match = /^--(debug|inspect)(=(\\d+))?$/.exec(arg);\n                if (match) {"
  },
  {
    "id" : "074ffcae-d3cb-419a-8900-366908a28ff9",
    "prId" : 15060,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15060#pullrequestreview-32757000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03d82eb2-4a00-45f4-b01d-151551578cd8",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "you could write this as `constructor({ host, installerEventPort, globalTypingsCacheLocation, typingSafeListLocation, canUseEvents } : IOSessionOptions)`",
        "createdAt" : "2017-04-13T22:56:28Z",
        "updatedAt" : "2017-04-13T23:39:14Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "92eaf5dc9b97d80645d636f8243bc1455e10de5a",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +388,392 @@\n    class IOSession extends Session {\n        constructor(options: IOSessionOptions) {\n            const { host, installerEventPort, globalTypingsCacheLocation, typingSafeListLocation, canUseEvents } = options;\n            const typingsInstaller = disableAutomaticTypingAcquisition"
  },
  {
    "id" : "17223232-d271-4baf-9e35-42818eaa7e3c",
    "prId" : 14098,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14098#pullrequestreview-22178353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d580b386-9e40-4cb3-b2ba-e6621d705c01",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Any reason this might ever get a UNC path without the next separator (e.g. just \"//someshare\")? For safety, might want to check for indexOf returning -1 and return undefined (else below returns an empty string).",
        "createdAt" : "2017-02-16T05:12:27Z",
        "updatedAt" : "2017-02-16T18:16:49Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "4411e254-4412-47e7-8d97-9719fa4e1712",
        "parentId" : "d580b386-9e40-4cb3-b2ba-e6621d705c01",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "technically it might, will fix",
        "createdAt" : "2017-02-16T05:30:54Z",
        "updatedAt" : "2017-02-16T18:16:49Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "78085a0e-c6ef-4ba0-a8c2-04341d458572",
        "parentId" : "d580b386-9e40-4cb3-b2ba-e6621d705c01",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "✔️ ",
        "createdAt" : "2017-02-16T05:59:35Z",
        "updatedAt" : "2017-02-16T18:16:49Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa9d5b052d28573dcd98bdebb6dcc2a65969ab40",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +584,588 @@            // //server/location\n            //         ^ <- from 0 to this position\n            const firstSlash = path.indexOf(directorySeparator, 2);\n            return firstSlash !== -1 ? path.substring(0, firstSlash).toLowerCase() : path;\n        }"
  },
  {
    "id" : "70fed966-aa05-48f9-8990-b8c047963ec1",
    "prId" : 14098,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14098#pullrequestreview-22178225",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0ee3e59-7a74-451d-bea5-5f44e3719395",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Seems like it might be worth using the 'timeout' option on execFileSync. Seeing as 'fs.watch' by default will keep the process alive until 'close' has been called on the filewatcher, if the callback that calls 'close' in 'watchGuard' doesn't run for some reason, this would effectively hang tsserver. Seems like 1000ms should be a generous worst-case choice.",
        "createdAt" : "2017-02-16T05:41:02Z",
        "updatedAt" : "2017-02-16T18:16:49Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "f31ba247-f643-4454-a57a-1277da862ee3",
        "parentId" : "c0ee3e59-7a74-451d-bea5-5f44e3719395",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "`close` is not called inside the callback but rather on return value of `fs.watch`",
        "createdAt" : "2017-02-16T05:51:03Z",
        "updatedAt" : "2017-02-16T18:16:49Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "0c4dee07-e692-4725-9e79-7f3abfec1788",
        "parentId" : "c0ee3e59-7a74-451d-bea5-5f44e3719395",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Actually, looking at `watchGuard.js` again, seem like it will always exit. The only risk being if `fs.watch` itself blocks for some reason, but then that's the same call that's going to run in tsserver anyway, so probably no value in the timeout.",
        "createdAt" : "2017-02-16T05:57:51Z",
        "updatedAt" : "2017-02-16T18:16:49Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa9d5b052d28573dcd98bdebb6dcc2a65969ab40",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +627,631 @@                        logger.info(`Starting ${process.execPath} with args ${JSON.stringify(args)}`);\n                    }\n                    childProcess.execFileSync(process.execPath, args, { stdio: \"ignore\", env: { \"ELECTRON_RUN_AS_NODE\": \"1\" } });\n                    status = true;\n                    if (logger.hasLevel(LogLevel.verbose)) {"
  },
  {
    "id" : "68519fc1-dec2-4a6f-a75b-dfef5628a00a",
    "prId" : 12551,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12551#pullrequestreview-10592887",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fe4a4e0-b5e6-4e9b-a34c-9b5d6b27d5e6",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "why do we still need `TypingsInstalledTelemetryEvent*`?",
        "createdAt" : "2016-11-29T09:10:25Z",
        "updatedAt" : "2016-11-29T09:10:30Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "d0ffa0df-1f10-45a5-8975-9a4366e76d29",
        "parentId" : "4fe4a4e0-b5e6-4e9b-a34c-9b5d6b27d5e6",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "reasoning behind this was: these events are semantically different. one is intended to be consumed only in the editor, another - send by VSCode on our behalf. In theory the latter one can be sent by just grabbing the payload and sending it as is treating its content as opaque. Yes, in this case VSCode can reconstruct telemetry event from the content of `End` notification, however I'd prefer to keep them separate for simplify consumption. // cc @mjbvz for his opinion\r\n",
        "createdAt" : "2016-11-29T15:40:42Z",
        "updatedAt" : "2016-11-29T15:40:42Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "d48e03bd-e20f-476b-8bf2-3e3df34bb689",
        "parentId" : "4fe4a4e0-b5e6-4e9b-a34c-9b5d6b27d5e6",
        "authorId" : "1d4633b6-c940-4836-914c-864f47cc37f8",
        "body" : "Yes, I think that keeping both makes sense since they are used for different purposes.",
        "createdAt" : "2016-11-29T18:03:00Z",
        "updatedAt" : "2016-11-29T18:03:00Z",
        "lastEditedBy" : "1d4633b6-c940-4836-914c-864f47cc37f8",
        "tags" : [
        ]
      }
    ],
    "commit" : "35c343b4c5373a9cbccb79951f00fed2dc6a0505",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +315,319 @@                    return;\n                }\n                if (this.telemetryEnabled) {\n                    const body: protocol.TypingsInstalledTelemetryEventBody = {\n                        telemetryEventName: \"typingsInstalled\","
  },
  {
    "id" : "328e36c1-2544-4d84-b7ab-6f5f83a82de3",
    "prId" : 12369,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12369#pullrequestreview-9330628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "856091b3-9baa-47e0-ad21-cefbb79a911a",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "not sure that I get why do we need to call `validateLocaleAndSetLanguage` twice\n",
        "createdAt" : "2016-11-19T00:13:24Z",
        "updatedAt" : "2016-11-19T00:28:18Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "c47429503b7988afed6034a454b4e9c62a0b15da",
    "line" : null,
    "diffHunk" : "@@ -1,1 +580,584 @@    const localeStr = findArgument(\"--locale\");\n    if (localeStr) {\n        validateLocaleAndSetLanguage(localeStr, sys);\n    }\n"
  },
  {
    "id" : "2528bb6a-d9fd-444c-ae16-256c89dd87e8",
    "prId" : 6024,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f76fbf9-1a36-416f-8751-1e34a39e102b",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "All these edits to server.ts look like changes I made in my branch to help with debugging Sublime but hadn't pushed to 'master' (and are part of bigger changes on both Sublime and tsserver to use TCP over stdin/stdout if configured to do so via `TSS_DEBUG`). Any idea how the changes in this file got in this code review?\n",
        "createdAt" : "2016-01-21T19:09:34Z",
        "updatedAt" : "2016-01-21T19:09:34Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "36400bb8-6f47-4bb0-9aa3-206513eef2a3",
        "parentId" : "3f76fbf9-1a36-416f-8751-1e34a39e102b",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Undone.\n",
        "createdAt" : "2016-01-22T18:33:15Z",
        "updatedAt" : "2016-01-22T18:33:15Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "120fa190d22fda462df989ce04268c67c0523305",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +26,30 @@\n    // Use a socket for comms if defined\n    const tss_debug: string = process.env[\"TSS_DEBUG\"];\n    let tcp_port = 0;\n    if (tss_debug) {"
  },
  {
    "id" : "8ddb0dd5-57f1-42d1-925c-341bcbc82909",
    "prId" : 5354,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94935af6-c555-4e0b-8815-1433eec58a95",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "do we care about errors here?\n",
        "createdAt" : "2015-10-24T05:20:13Z",
        "updatedAt" : "2015-10-24T05:20:13Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "2d09d97c-46f6-455b-93e4-2fac385804bc",
        "parentId" : "94935af6-c555-4e0b-8815-1433eec58a95",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "We are retrying instead of handling the error anyway, it may only be used for printing error messages I think.\n",
        "createdAt" : "2015-10-24T22:56:56Z",
        "updatedAt" : "2015-10-24T22:56:56Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf1335b0e6a0161b95ecfdeb38cbd6146756e0b4",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +171,175 @@    function writeBuffer(buffer: Buffer, offset: number) {\n        const toWrite = buffer.length - offset;\n        fs.write(1, buffer, offset, toWrite, undefined, (err, written, buffer) => {\n            if (toWrite > written) {\n                writeBuffer(buffer, offset + written);"
  },
  {
    "id" : "1874e1f7-865f-4a78-8b79-72b34b73f56d",
    "prId" : 2258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "310a7517-41f8-457a-9b6f-5b88b6e76725",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`level` is too vague; do you mean logging level? I'd prefer this be an enum if there are known states.\n",
        "createdAt" : "2015-03-08T01:54:22Z",
        "updatedAt" : "2015-03-09T18:58:53Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "301acdab-80fd-43f1-9ac5-13f970042543",
        "parentId" : "310a7517-41f8-457a-9b6f-5b88b6e76725",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "+1\n",
        "createdAt" : "2015-03-08T17:36:55Z",
        "updatedAt" : "2015-03-09T18:58:53Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "37c6f69f015c3da3c709e2bae0786aa55a10a045",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +20,24 @@        firstInGroup = true;\n\n        constructor(public logFilename: string, public level: string) {\n        }\n"
  },
  {
    "id" : "da08d4eb-777e-484c-a547-e1c92776c485",
    "prId" : 2258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74a484b4-52f0-4880-9318-70a58f4a56c8",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I think you mean to be incrementing `i` by `2` each time, and need to check your bounds appropriately (i.e. `i < len - 1`).\n",
        "createdAt" : "2015-03-08T01:57:33Z",
        "updatedAt" : "2015-03-09T18:58:53Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "37c6f69f015c3da3c709e2bae0786aa55a10a045",
    "line" : null,
    "diffHunk" : "@@ -1,1 +202,206 @@        for (var i = 0, len = args.length; i < (len - 1); i += 2) {\n            var option = args[i];\n            var value = args[i + 1];\n            if (option && value) {\n                switch (option) {"
  },
  {
    "id" : "bc00e472-8620-4266-86b2-f99a5de19c53",
    "prId" : 2258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f49a4c50-3993-42c0-a348-22c1e20eb724",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Use `path.join` to join paths; you can also avoid the `toString()` call.\n",
        "createdAt" : "2015-03-08T02:06:27Z",
        "updatedAt" : "2015-03-09T18:58:53Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "c5ebb338-39be-4b51-8594-9e58c1ef4c57",
        "parentId" : "f49a4c50-3993-42c0-a348-22c1e20eb724",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Does this tie us tightly to node?  Can we expose something appropriate from Sys as well?\n",
        "createdAt" : "2015-03-09T07:54:28Z",
        "updatedAt" : "2015-03-09T18:58:53Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "f95e8110-ea84-4f8c-bf8b-065f72753405",
        "parentId" : "f49a4c50-3993-42c0-a348-22c1e20eb724",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Call to toString seems unnecessary.  \n",
        "createdAt" : "2015-03-09T07:54:43Z",
        "updatedAt" : "2015-03-09T18:58:53Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "37c6f69f015c3da3c709e2bae0786aa55a10a045",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +228,232 @@            }\n            else {\n                fileName = __dirname + \"/.log\" + process.pid.toString();\n            }\n            if (logEnv.detailLevel) {"
  }
]