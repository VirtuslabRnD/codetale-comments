[
  {
    "id" : "ea9c2008-19d6-4a40-886a-634185943232",
    "prId" : 43184,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43184#pullrequestreview-640150698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "291b5974-1bbe-4e5b-be76-588a5b10f3ce",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I don't think we have an actual convention, but it looks like we have a pattern of using positive names and, if necessary, treating undefined as true.  e.g. `UserPreferences.includeAutomaticOptionalChainCompletions` or `CompilerOptions.AllowUnreachableCode`.  I think @andrewbranch has also found this frustrating and might have suggestions?",
        "createdAt" : "2021-04-19T16:55:31Z",
        "updatedAt" : "2021-04-19T16:56:46Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "50ce8ee9-ef70-42cb-a19c-b2df564e4aa4",
        "parentId" : "291b5974-1bbe-4e5b-be76-588a5b10f3ce",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "No, I don’t really have a preference here. This looks fine to me.",
        "createdAt" : "2021-04-20T16:02:22Z",
        "updatedAt" : "2021-04-20T16:02:22Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "54a544d344e3009d56df46ee9363a1262ce3d2cc",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +682,686 @@    export interface OrganizeImportsRequestArgs {\n        scope: OrganizeImportsScope;\n        skipDestructiveCodeActions?: boolean;\n    }\n"
  },
  {
    "id" : "641652f6-2d31-40e7-b86d-b1cd91592544",
    "prId" : 43149,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43149#pullrequestreview-612462852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b14d8de-9101-48cf-968c-f3bf3ad9128f",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "The space, in combination with the `isIncomplete` property added, is a targeted fix for the problem described at https://github.com/microsoft/TypeScript/issues/31658#issuecomment-797009826.",
        "createdAt" : "2021-03-15T17:28:32Z",
        "updatedAt" : "2021-03-26T21:29:28Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "badcd839b2359138d0e8262a4cce4f6f4251b8c9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2143,2147 @@    }\n\n    export type CompletionsTriggerCharacter = \".\" | '\"' | \"'\" | \"`\" | \"/\" | \"@\" | \"<\" | \"#\" | \" \";\n\n    /**"
  },
  {
    "id" : "bb987834-128d-4fa0-9382-1ae2ebdaa09e",
    "prId" : 43149,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/43149#pullrequestreview-622454743",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7c8e8ca-9e26-47bb-b1d4-2df79c4c0f41",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Aiming to stop overloading the meaning of `source` between `CompletionEntry` and `CompletionEntryDetails`. In an ideal world, `source` is the machine-readable module name for the auto-import, and `sourceDisplay` is the human-readable module specifier for it, no matter whether you’re looking at `CompletionEntry` or `CompletionEntryDetails`. In reality, we will continue to set `CompletionEntryDetails[\"source\"]` to the human-readable module specifier for backward compatibility, but I’ve marked it as deprecated.",
        "createdAt" : "2021-03-22T16:22:08Z",
        "updatedAt" : "2021-03-26T21:29:28Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "aba955e3-8c20-4756-bd90-979d258600a2",
        "parentId" : "e7c8e8ca-9e26-47bb-b1d4-2df79c4c0f41",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "The editor only pulls on these one at a time right?",
        "createdAt" : "2021-03-26T19:02:43Z",
        "updatedAt" : "2021-03-26T21:29:28Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "badcd839b2359138d0e8262a4cce4f6f4251b8c9",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +2345,2349 @@         * Human-readable description of the `source` from the CompletionEntry.\n         */\n         sourceDisplay?: SymbolDisplayPart[];\n    }\n"
  },
  {
    "id" : "3bf655c0-3620-42b2-a422-a102c6d97e28",
    "prId" : 42890,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42890#pullrequestreview-599027361",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d30c4aa-000d-4ee7-830c-433808e610f3",
        "parentId" : null,
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : "Is the only reason to keep `source` around backward compatibility at this point? From what I gather, it was a previous attempt at having a unique identifier for the item, but a simple string wasn't enough, hence `data`. \r\n\r\nAnother question for backward compatibility - would it make sense, instead of creating a new property, to serialize `data` into some sort of string and send that data back in `source`? This way, clients may not have to make a code change to accommodate the new data. I can see that this would be super ugly though.",
        "createdAt" : "2021-02-19T21:31:48Z",
        "updatedAt" : "2021-02-26T23:14:54Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      },
      {
        "id" : "4d9bfd63-2d84-4be2-bbdb-062a3f3b6862",
        "parentId" : "9d30c4aa-000d-4ee7-830c-433808e610f3",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "> From what I gather, it was a previous attempt at having a unique identifier for the item, but a simple string wasn't enough, hence `data`.\r\n\r\nThis is correct.\r\n\r\n> Is the only reason to keep `source` around backward compatibility at this point?\r\n\r\nThis is not yet true, because we also use `source` to disambiguate `this.`-inserting property completions from locals/globals with the same name as that property. But, it would be easy to move that info from `source` to `data` if we wanted to, so basically yes, back compat is the main reason I’m keeping it for now.\r\n\r\n> Another question for backward compatibility - would it make sense, instead of creating a new property, to serialize `data` into some sort of string and send that data back in `source`?\r\n\r\nThis would have been an option had VS Code not started including `source` in their completion list UI (see https://github.com/microsoft/TypeScript/issues/42752#issuecomment-778519797). I believe if we were to change it to something JSON-like, it would disappear from the UI, which is of course better than rendering as raw JSON, but the current consensus is that showing an approximate path-like `source` for auto imports is better than showing nothing. So in short, VS Code has taken a dependency, for now, on the existing format of `source`.\r\n\r\nRegarding backward compatibility in general, I asked in #42871 how long we’d need to allow clients to send us `source` and not `data`, which you might be able to comment on.",
        "createdAt" : "2021-02-19T21:43:29Z",
        "updatedAt" : "2021-02-26T23:14:54Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "2891b489-0131-4a67-af1a-111d42d45ac8",
        "parentId" : "9d30c4aa-000d-4ee7-830c-433808e610f3",
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : "I see, thanks!\r\n\r\nI've been thinking about your last question since Friday and still don't have a satisfactory answer. Short answer: the de facto policy is \"forever\" - we don't have a formal versioning or compatibility story for the protocol. Many users decide to stay on older versions of VS for some reason or other, and many users always upgrade to the latest TS, and there's some overlap between the two, so we try to be as compatible as possible. If it becomes a big maintenance burden, it may be reasonable to introduce some breaking changes.\r\n\r\nNote that I think your question not only applies to the protocol (which has implications for editors), but also to the API as well (which has implications for plugin developers). Which Daniel would have more insight on.",
        "createdAt" : "2021-02-22T22:46:32Z",
        "updatedAt" : "2021-02-26T23:14:54Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      },
      {
        "id" : "f9665cc9-bce9-4a07-b216-184b42dfbdfd",
        "parentId" : "9d30c4aa-000d-4ee7-830c-433808e610f3",
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : "Changes look good. Thanks for answering my questions!",
        "createdAt" : "2021-02-25T21:01:21Z",
        "updatedAt" : "2021-02-26T23:14:54Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "62db7d04628ab3c68df8f21226bf8a394ab59805",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +2157,2161 @@    }\n\n    export interface CompletionEntryIdentifier {\n        name: string;\n        source?: string;"
  },
  {
    "id" : "70dfad67-7b41-47c1-b559-c0bc9f097cf0",
    "prId" : 41877,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41877#pullrequestreview-549723009",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55cd920d-c658-493f-8d3d-b2d60267971c",
        "parentId" : null,
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : "Are these meant to be duplicated with the types in `types.ts`? ",
        "createdAt" : "2020-12-11T00:40:37Z",
        "updatedAt" : "2021-03-16T18:20:25Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      },
      {
        "id" : "9d55f7bb-97f8-4612-bc24-0192fdfd2388",
        "parentId" : "55cd920d-c658-493f-8d3d-b2d60267971c",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Yes, the language service ones in `types.ts` use character offsets and the ones here use line+character offsets.",
        "createdAt" : "2020-12-11T00:44:19Z",
        "updatedAt" : "2021-03-16T18:20:25Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfdaee97195451f0a1947da5ec05f5df19f6aa8",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +982,986 @@    export interface JSDocTagInfo {\n        /** Name of the JSDoc tag */\n        name: string;\n        /**\n         * Comment text after the JSDoc tag -- the text after the tag name until the next tag or end of comment"
  },
  {
    "id" : "644cba73-8ea5-49d1-acbc-ab0eff843f4e",
    "prId" : 41877,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41877#pullrequestreview-612452224",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f076b5f-d522-48d2-9d71-9bbe181ad128",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Consider documenting when each type is expected.",
        "createdAt" : "2021-03-15T17:26:25Z",
        "updatedAt" : "2021-03-16T18:20:25Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfdaee97195451f0a1947da5ec05f5df19f6aa8",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1995,1999 @@\n        /**\n         * Documentation associated with symbol.\n         * Display parts when UserPreferences.displayPartsForJSDoc is true, flattened to string otherwise.\n         */"
  },
  {
    "id" : "43a7cccf-5b50-4a1d-abb8-f6a7dbc71f78",
    "prId" : 41614,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41614#pullrequestreview-535822211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "515399ef-5e6e-42ef-8a56-28da32dc77a8",
        "parentId" : null,
        "authorId" : "1d4633b6-c940-4836-914c-864f47cc37f8",
        "body" : "@orta Just want to check that this will also update the `protocol.d.ts` file that we consume. I didn't see the semantic APIs in the `d.ts` when I last checked",
        "createdAt" : "2020-11-20T22:36:24Z",
        "updatedAt" : "2020-11-20T22:36:35Z",
        "lastEditedBy" : "1d4633b6-c940-4836-914c-864f47cc37f8",
        "tags" : [
        ]
      }
    ],
    "commit" : "64da1bd0ce9a93c6d4def88256d1ab542a976ce8",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +855,859 @@         * Optional for backwards compat, use \"2020\" for modern LSP-like classifications\n         */\n        format?: ts.SemanticClassificationFormat\n    }\n"
  },
  {
    "id" : "457ee0fd-9b1f-44d9-a67e-c7c15cadeee1",
    "prId" : 38923,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38923#pullrequestreview-435201012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "811bea33-7353-4878-aabd-f886cee37a07",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This is sent so editors can report telemetry on how often this feature is actually useful. @uniqueiniquity, I heard you set something very similar up for IntelliCode completions? Does this seem like a reasonable approach, and would you be able to help me out with making the changes I need to make on the editor side?",
        "createdAt" : "2020-06-11T17:33:41Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "3f240a06-6906-4d3b-a84a-b096b23c37a8",
        "parentId" : "811bea33-7353-4878-aabd-f886cee37a07",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "yep, let's plan to discuss. happy to help with consuming this in both vs and vscode.",
        "createdAt" : "2020-06-12T18:45:22Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "3431eed7-e0b0-4a25-ad50-5b7492b666d9",
        "parentId" : "811bea33-7353-4878-aabd-f886cee37a07",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Maybe `packageJsonImportSource: \"dependencies\" | \"devDependencies\" | undefined`",
        "createdAt" : "2020-06-12T20:30:42Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "b1dbc31b-ab72-4e37-b809-0e47d4ac7e48",
        "parentId" : "811bea33-7353-4878-aabd-f886cee37a07",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Hmm, we don’t trivially know whether the module came from dependencies or devDependencies. It would have to be a separate lookup. Do the editors have telemetry on configuration settings?",
        "createdAt" : "2020-06-22T19:10:36Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "85c69385bb5d30c722685a0528f51c5b1ba0acf3",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +2168,2172 @@         * in the project package.json.\n         */\n        isPackageJsonImport?: true;\n    }\n"
  },
  {
    "id" : "fffd0ee3-3703-404a-9585-b353d133ee0d",
    "prId" : 36725,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36725#pullrequestreview-361249776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a16a23a4-6e1b-49e2-aff2-a28dd707c761",
        "parentId" : null,
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : "What about the `foo.js` case?",
        "createdAt" : "2020-02-11T00:31:10Z",
        "updatedAt" : "2020-02-19T16:41:40Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      },
      {
        "id" : "c8caba0d-61b2-4f52-b46b-6e66febdf9dc",
        "parentId" : "a16a23a4-6e1b-49e2-aff2-a28dd707c761",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Hmm, I just copied this comment from `services/types.ts`. But, now that you mention it, we do the wrong thing in this case 😱. I guess I’ll open a new bug.",
        "createdAt" : "2020-02-11T00:46:48Z",
        "updatedAt" : "2020-02-19T16:41:40Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "d3f96c8e-2681-4d0e-b4db-1a2ab6c351d8",
        "parentId" : "a16a23a4-6e1b-49e2-aff2-a28dd707c761",
        "authorId" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "body" : "Should we have an explicit \"auto\" setting in the protocol? ",
        "createdAt" : "2020-02-11T01:37:56Z",
        "updatedAt" : "2020-02-19T16:41:40Z",
        "lastEditedBy" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "tags" : [
        ]
      },
      {
        "id" : "05585fe4-bdff-49d3-ace2-0ef8ee5ba095",
        "parentId" : "a16a23a4-6e1b-49e2-aff2-a28dd707c761",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I know `importModuleSpecifierPreference` is doing that but I really dislike the redundancy with `undefined`. It makes it unclear what happens when the client doesn’t provide the option.",
        "createdAt" : "2020-02-11T17:51:25Z",
        "updatedAt" : "2020-02-19T16:41:40Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "338e7f73-f51c-4347-b131-1d69714f899a",
        "parentId" : "a16a23a4-6e1b-49e2-aff2-a28dd707c761",
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : "I think the argument for having an explicit `auto` was that the behavior of `undefined` is even less clear when you want to set the option _back_ to `auto` from a different setting. Does `undefined` mean keep the existing value, or change back to `auto`? Should/can there be a semantic difference between omitting the property and an explicit `undefined`?",
        "createdAt" : "2020-02-11T17:56:16Z",
        "updatedAt" : "2020-02-19T16:41:40Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      },
      {
        "id" : "a573af5e-f46f-4757-bde9-eb9e90eac098",
        "parentId" : "a16a23a4-6e1b-49e2-aff2-a28dd707c761",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Hmm, well, seeing as requests get serialized to JSON, there _is_ no explicit `undefined`, so you’re right, we need an `auto`. Good catch, thanks!",
        "createdAt" : "2020-02-19T16:39:58Z",
        "updatedAt" : "2020-02-19T16:41:40Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "9dc268bb65bc2e6280df2170a0105efb6df507e3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3132,3136 @@        readonly includeAutomaticOptionalChainCompletions?: boolean;\n        readonly importModuleSpecifierPreference?: \"auto\" | \"relative\" | \"non-relative\";\n        /** Determines whether we import `foo/index.ts` as \"foo\", \"foo/index\", or \"foo/index.js\" */\n        readonly importModuleSpecifierEnding?: \"auto\" | \"minimal\" | \"index\" | \"js\";\n        readonly allowTextChangesInNewFiles?: boolean;"
  },
  {
    "id" : "278cc254-f6db-4215-bad9-d298e0139785",
    "prId" : 35675,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35675#pullrequestreview-338970215",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85441ceb-62ec-40d8-895e-98f55fcbb04c",
        "parentId" : null,
        "authorId" : "65426241-927a-48c7-8d6a-617ccfb90020",
        "body" : "Consider making this property an object that has an updateGraphDurationMs in it. If we want to put in more per request diagnostics or metrics it would be easy to extend that. Currently it seems like a very specific property to have on an otherwise generic response object.",
        "createdAt" : "2019-12-14T01:51:23Z",
        "updatedAt" : "2019-12-14T01:53:08Z",
        "lastEditedBy" : "65426241-927a-48c7-8d6a-617ccfb90020",
        "tags" : [
        ]
      },
      {
        "id" : "72af78af-c45a-4d8b-a34d-0d8c691742f7",
        "parentId" : "85441ceb-62ec-40d8-895e-98f55fcbb04c",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Introduced `performanceData`.",
        "createdAt" : "2020-01-07T00:15:18Z",
        "updatedAt" : "2020-01-07T00:15:19Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "06528cfad12fb89d96b263e51f4828d1f4243e23",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +238,242 @@         */\n        /* @internal */\n        updateGraphDurationMs?: number;\n    }\n"
  },
  {
    "id" : "0cee0e87-e472-497b-9cc4-9ac14693feb1",
    "prId" : 33402,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33402#pullrequestreview-292743328",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fdaee2a-5da1-4932-8dca-902151ab9040",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Some of the other formatting settings have an auto value that attempts to infer an appropriate behavior from other text in the file. Would that make sense for semicolons?",
        "createdAt" : "2019-09-16T23:28:02Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "2f876538-12d4-439f-a513-b8d59fac64ec",
        "parentId" : "1fdaee2a-5da1-4932-8dca-902151ab9040",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Some of the _user preferences_ have “auto” settings, but none of the formatter settings do, as far as I’ve seen. The distinction is pretty confusing and my guess is the user preferences that deal with formatting arose from the limitations of the formatter. (Before this PR, the formatter dealt _exclusively_ with whitespace.) The distinction isn’t _really_ surfaced to users, so it may not matter much, but it would be nice if we had a more unified story around where this kind of functionality lives. As such, I thought about it, but I’m not sure a _formatter_ is the correct place for inference. That said, when writing new nodes (like auto imports), if you’ve chosen “ignore” (the default), we do make an attempt to match your current file contents. The idea is that when we generate new nodes, we _have_ to make a decision somehow: either the text is going to have semicolons or it’s not.\r\n\r\nThere’s theoretically nothing stopping us from introducing an “auto” setting for the formatter too, but I’d rather wait and see if people ask for it, purely because I wanted to avoid creating an unnecessarily confusing amount of choices.",
        "createdAt" : "2019-09-17T00:18:50Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "68eb17ca-a930-4b24-aace-9ce0ea716d1c",
        "parentId" : "1fdaee2a-5da1-4932-8dca-902151ab9040",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "My only concern with the wait-and-see approach is that VS has a per-user setting for this (vs per-project) so there's no way to disable it if the current TS version doesn't support \"auto\".  That means that we need to have a good default on the server and it's not clear to me what it would be - ignore?",
        "createdAt" : "2019-09-17T01:40:31Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "d2226eed-b837-49d8-8968-9386f90e401a",
        "parentId" : "1fdaee2a-5da1-4932-8dca-902151ab9040",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "VS Code’s setting is also per-user. The default is “ignore,” because that’s the pre-PR behavior. “Auto” would definitely be more disruptive than “ignore.” Am I understanding your concern correctly?",
        "createdAt" : "2019-09-23T16:36:43Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "4f3978e6-bf09-4db8-85a3-d59bcc56e612",
        "parentId" : "1fdaee2a-5da1-4932-8dca-902151ab9040",
        "authorId" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "body" : "That sounds right to me - the default setting should be to ignore any changes to semicolon formatting.",
        "createdAt" : "2019-09-23T16:58:54Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "bb7feee5-7089-4110-a20e-a163a6be1501",
        "tags" : [
        ]
      },
      {
        "id" : "d72fdcf9-f120-4555-ae40-20a3e9f75816",
        "parentId" : "1fdaee2a-5da1-4932-8dca-902151ab9040",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Sorry, \"default\" was confusing in that context.  What would the fallback setting be if the user specified \"auto\" and the server didn't support it?",
        "createdAt" : "2019-09-24T17:35:57Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "8f22cb2c-607a-4e57-90db-b51ffe0e7368",
        "parentId" : "1fdaee2a-5da1-4932-8dca-902151ab9040",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Oh, got it. The fallback would be “ignore.” There are a number of preferences/rules that have a disclaimer about what version of TypeScript they require. It’s not the end of the world, but it’s not ideal.\r\n\r\nIt just gives me an uncomfortable squirmy feeling thinking about an option that means, “I want you to fix up all my semicolons, but I _don’t_ want to tell you how I like them!”\r\n\r\nOf course, that has a highly practical application: “Please adapt my semicolon habits to match whatever project I happen to be working on right now.” But, that request may as well apply to _every_ formatter option, not just semicolon preference. As such, I think this is the wrong venue to try to solve the problem of “I work on a bunch of different projects with different formatting conventions.”",
        "createdAt" : "2019-09-24T17:47:04Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "07f69b23-415c-4702-ba8a-ed536c598b6f",
        "parentId" : "1fdaee2a-5da1-4932-8dca-902151ab9040",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I agree that it would make more sense to add \"auto\" everywhere at once and I don't think we're ready to do that, so I'm fine with omitting \"auto\" for now.",
        "createdAt" : "2019-09-24T22:30:59Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "61c3e61f3e56e2f570b2b6b478913c3878aaa17a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2957,2961 @@    }\n\n    export enum SemicolonPreference {\n        Ignore = \"ignore\",\n        Insert = \"insert\","
  },
  {
    "id" : "df6eb167-2c30-4bca-a015-78c65a04d515",
    "prId" : 33402,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33402#pullrequestreview-288964587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13b11fc3-a303-4ec4-b496-0f4f446186a5",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I assume we have to use ignore for this repo, but what does the diff look like if you choose insert?",
        "createdAt" : "2019-09-16T23:28:11Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "2ccdac5f-4328-4208-a376-4c3079fab15b",
        "parentId" : "13b11fc3-a303-4ec4-b496-0f4f446186a5",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Generally the same. I sampled some changes after auto-inserting semicolons, and I think the only pattern I saw was in single-line object types, `type X = { x: string };` becomes `type X = { x: string; };`",
        "createdAt" : "2019-09-17T00:20:33Z",
        "updatedAt" : "2019-09-26T19:04:29Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "61c3e61f3e56e2f570b2b6b478913c3878aaa17a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2958,2962 @@\n    export enum SemicolonPreference {\n        Ignore = \"ignore\",\n        Insert = \"insert\",\n        Remove = \"remove\","
  },
  {
    "id" : "47d7fbbe-ee0d-4851-8620-22f2b65ffad6",
    "prId" : 31988,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31988#pullrequestreview-254867776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7a90957-e5f6-48a3-855d-8ab43bd2d333",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This should be internal since command is internal",
        "createdAt" : "2019-06-24T19:21:32Z",
        "updatedAt" : "2019-06-26T22:09:39Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "0d31f1c8-fef2-439c-bbc0-4d26f5cef8ac",
        "parentId" : "e7a90957-e5f6-48a3-855d-8ab43bd2d333",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Can I update `EncodedSemanticClassificationsRequestArgs` or would that be a breaking change at this point?",
        "createdAt" : "2019-06-26T19:51:56Z",
        "updatedAt" : "2019-06-26T22:09:39Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "6ca6fd7b-10dc-4d15-8da1-ce263b3f9120",
        "parentId" : "e7a90957-e5f6-48a3-855d-8ab43bd2d333",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I am not sure if any one uses it (other than us) but since that method is internal too, its ok to make it internal in my opinion",
        "createdAt" : "2019-06-26T20:54:51Z",
        "updatedAt" : "2019-06-26T22:09:39Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d785c8c91fb1f770907fa3b14337349b82753df",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +779,783 @@     */\n    /** @internal */\n    export interface EncodedSyntacticClassificationsRequestArgs extends FileRequestArgs {\n        /**\n         * Start position of the span."
  },
  {
    "id" : "2915e346-1671-400f-a5d1-a45c2ac838b4",
    "prId" : 31028,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31028#pullrequestreview-228559331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f0a93c4-10d4-48ec-8fbc-f9b3e6d39608",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Thank you :smile:",
        "createdAt" : "2019-04-19T00:48:16Z",
        "updatedAt" : "2019-04-24T15:52:16Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "eff39600207df4817b3dceb7848bf858c86f4ca3",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +134,138 @@        SelectionRange = \"selectionRange\",\n        /* @internal */\n        SelectionRangeFull = \"selectionRange-full\",\n\n        // NOTE: If updating this, be sure to also update `allCommandNames` in `harness/unittests/session.ts`."
  },
  {
    "id" : "d35961a3-66f8-4c95-8159-057d98edc788",
    "prId" : 29385,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29385#pullrequestreview-192445361",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73d65e28-6b0e-4e46-9d3f-3eae2499b496",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">allowRenameOfImportPath [](start = 17, length = 23)\r\n\r\nIs this specific to import paths?  Maybe it should just be \"allowPathRename\"?",
        "createdAt" : "2019-01-14T18:37:53Z",
        "updatedAt" : "2019-01-15T01:05:42Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "745e4c2b-2b87-415d-88e6-c83f682be1d0",
        "parentId" : "73d65e28-6b0e-4e46-9d3f-3eae2499b496",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "Do we use paths anywhere else (besides triple slash references, which can't be renamed)?",
        "createdAt" : "2019-01-14T18:42:55Z",
        "updatedAt" : "2019-01-15T01:05:42Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "3387d080-b81e-4eb8-967d-6acec2b3d7f3",
        "parentId" : "73d65e28-6b0e-4e46-9d3f-3eae2499b496",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I can't think of any.  If some are added in the future, should they be covered by this option?\r\n\r\nWhy can't triple-slash references be renamed?",
        "createdAt" : "2019-01-14T18:47:19Z",
        "updatedAt" : "2019-01-15T01:05:42Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "a169d359-5be3-44b2-9c3a-2076da7ecbfd",
        "parentId" : "73d65e28-6b0e-4e46-9d3f-3eae2499b496",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think allowRenameOfImportPath is good because its explicit",
        "createdAt" : "2019-01-14T19:00:19Z",
        "updatedAt" : "2019-01-15T01:05:42Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "304c8e4d-2f5e-4e02-94b6-3dfbc44bbc36",
        "parentId" : "73d65e28-6b0e-4e46-9d3f-3eae2499b496",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "I'd like to leave it as is. `allowPathRename` feels a little too general to me, not inherently descriptive enough. Not sure why renaming triple-slash references doesn't work, I don't think there's a reason why they couldn't be able to. But I would say this flag adequately describes that behavior, should we add it in the future.",
        "createdAt" : "2019-01-15T01:07:30Z",
        "updatedAt" : "2019-01-15T01:07:30Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c50ed30890c46d2671894eda21dbf2882166e0a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2906,2910 @@        readonly allowTextChangesInNewFiles?: boolean;\n        readonly lazyConfiguredProjectsFromExternalProject?: boolean;\n        readonly allowRenameOfImportPath?: boolean;\n    }\n"
  },
  {
    "id" : "f3731ebc-162f-40d6-b40e-82e23a9c342b",
    "prId" : 27217,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27217#pullrequestreview-156991626",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f37e1a8-c997-4334-ae36-513b83229339",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Looks like there might also be a `version` property.",
        "createdAt" : "2018-09-19T17:50:07Z",
        "updatedAt" : "2018-09-19T17:50:08Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "b89f7211-b055-4179-ae3b-aae3c7a7225c",
        "parentId" : "9f37e1a8-c997-4334-ae36-513b83229339",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Where? I thought the properties only came from the interface itself.",
        "createdAt" : "2018-09-19T18:12:35Z",
        "updatedAt" : "2018-09-19T18:12:35Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "a75b1c10-92a1-4b7e-870a-d14fd035af66",
        "parentId" : "9f37e1a8-c997-4334-ae36-513b83229339",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "https://github.com/Microsoft/vscode/blob/34e7a220c87088afca5c57234c441b68576e8f77/extensions/typescript-language-features/src/utils/telemetry.ts#L42\r\n\r\nLooks like the correct fix would be to reference `TypeScriptCommonProperties`.",
        "createdAt" : "2018-09-19T18:18:18Z",
        "updatedAt" : "2018-09-19T18:18:18Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "5b7b0bce-e2a2-457d-9977-10260e3fab59",
        "parentId" : "9f37e1a8-c997-4334-ae36-513b83229339",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "(For the other comment as well.)",
        "createdAt" : "2018-09-19T18:18:37Z",
        "updatedAt" : "2018-09-19T18:18:37Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "ee0250c3-7a96-4c44-9ed1-fda088140047",
        "parentId" : "9f37e1a8-c997-4334-ae36-513b83229339",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Unfortunately, this doesn't work right now. Filed Microsoft/vscode-gdpr-tooling#6 to track. I think I'll merge this anyway since we have existing metadata to fall back on.",
        "createdAt" : "2018-09-19T19:47:33Z",
        "updatedAt" : "2018-09-19T19:47:33Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ee5790b7262c45c149a576e35fd5e8553cd0b1a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2739,2743 @@\n/* __GDPR__\n   \"typingsinstalled\" : {\n        \"installedPackages\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" },\n        \"installSuccess\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },"
  },
  {
    "id" : "9ea37999-ef4d-46ca-aa64-57f7a9958348",
    "prId" : 26197,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26197#pullrequestreview-145773475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a619ce8c-72c1-4ad9-bd67-469fe1275314",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "Why is this code duplicated? I guess that’s one public and the other private, but why aren’t they shared?",
        "createdAt" : "2018-08-13T15:54:09Z",
        "updatedAt" : "2018-08-13T15:57:57Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "d64dfde3-d687-47e7-90bf-c4bb8703a602",
        "parentId" : "a619ce8c-72c1-4ad9-bd67-469fe1275314",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "That's because we want to be able to build protocol.ts separately as a standalone to protocol.d.ts which editors consume.",
        "createdAt" : "2018-08-13T18:14:02Z",
        "updatedAt" : "2018-08-13T18:14:02Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e5e61873ddf520850154d4f879474818ad033da",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2437,2441 @@    }\n\n    export type LargeFileReferencedEventName = \"largeFileReferenced\";\n    export interface LargeFileReferencedEvent extends Event {\n        event: LargeFileReferencedEventName;"
  },
  {
    "id" : "79bf8c72-7f95-41eb-871e-0cf6afe37acf",
    "prId" : 25080,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25080#pullrequestreview-130180991",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3cca418-6de6-46be-b5de-ca313e4e0c8b",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i would add a comment on this and on Completions to state the difference and ask API users to use the new command moving forward.",
        "createdAt" : "2018-06-19T22:17:47Z",
        "updatedAt" : "2018-06-19T22:44:49Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ba5f2c2a7ca94cef0670a548638d185d504e3e6",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1955,1959 @@    }\n\n    export interface CompletionInfo {\n        readonly isGlobalCompletion: boolean;\n        readonly isMemberCompletion: boolean;"
  },
  {
    "id" : "2a155850-532c-4131-aeda-e58bca7fb192",
    "prId" : 21909,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21909#pullrequestreview-97312134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "356eb63d-367e-4c2c-bbe6-1efde478341f",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This comment might be better in `organizeImports.ts` (the non-test one).",
        "createdAt" : "2018-02-16T18:53:43Z",
        "updatedAt" : "2018-02-16T18:57:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "7dd7a844-36fe-4e65-ad94-5544282dc713",
        "parentId" : "356eb63d-367e-4c2c-bbe6-1efde478341f",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I can move it when I implement remove-unused.",
        "createdAt" : "2018-02-16T20:48:59Z",
        "updatedAt" : "2018-02-16T20:48:59Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c278cee17008877f3805f70a214e17ba3f37949",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +552,556 @@    }\n\n    /**\n     * Organize imports by:\n     *   1) Removing unused imports"
  },
  {
    "id" : "c342ab9c-b2ff-44eb-873e-a8267cc8e4ec",
    "prId" : 19689,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19689#pullrequestreview-74651731",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9ec5908-d6ef-4a89-960c-b1510c4ba216",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I think the usual convention is `-full`, rather than `Full`.",
        "createdAt" : "2017-11-06T23:51:51Z",
        "updatedAt" : "2017-11-06T23:51:51Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "5b6d252e-7c9f-4b2b-bb3c-0d086fa7c438",
        "parentId" : "a9ec5908-d6ef-4a89-960c-b1510c4ba216",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "that is an oversight, we should fix it.",
        "createdAt" : "2017-11-07T06:50:51Z",
        "updatedAt" : "2017-11-07T06:50:51Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "e62e23c05e22a18478d02d2d2cc16335f22c10a1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +17,21 @@        CompletionDetails = \"completionEntryDetails\",\n        /* @internal */\n        CompletionDetailsFull = \"completionEntryDetailsFull\",\n        CompileOnSaveAffectedFileList = \"compileOnSaveAffectedFileList\",\n        CompileOnSaveEmitFile = \"compileOnSaveEmitFile\","
  },
  {
    "id" : "d322e603-4770-440b-919a-d6c6dd2ed3ed",
    "prId" : 16385,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16385#pullrequestreview-57013376",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d687131-8f4e-44c1-8904-44cc395d3ee8",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Is this just here for the generality of the API?  We don't appear to actually use it.",
        "createdAt" : "2017-08-09T00:59:16Z",
        "updatedAt" : "2017-08-18T03:07:02Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "efcd1bfc-09f5-4da6-883c-ab1c6332f322",
        "parentId" : "1d687131-8f4e-44c1-8904-44cc395d3ee8",
        "authorId" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "body" : "We only ever pass in `onlyMultiLine: true` right now with the proposed change in the VS extension.",
        "createdAt" : "2017-08-15T19:30:19Z",
        "updatedAt" : "2017-08-18T03:07:02Z",
        "lastEditedBy" : "59507247-4932-40ea-95c5-8eabb0b1de63",
        "tags" : [
        ]
      },
      {
        "id" : "64f1d07d-cf1b-46c6-b72b-32157f272e1d",
        "parentId" : "1d687131-8f4e-44c1-8904-44cc395d3ee8",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I have mixed feeling about this but don't object as long as we have test coverage (which we do).",
        "createdAt" : "2017-08-17T18:24:35Z",
        "updatedAt" : "2017-08-18T03:07:02Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4e969a210325190097c963cc3e4023682125c4a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +255,259 @@         * Requires that the enclosing span be a multi-line comment, or else the request returns undefined.\n         */\n        onlyMultiLine: boolean;\n    }\n"
  },
  {
    "id" : "1012775f-21ff-4426-b319-fae1ea36319c",
    "prId" : 16307,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16307#pullrequestreview-42471065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1602b2f9-cc68-4f6f-9281-435249851fd2",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Is this semantically meaningful?",
        "createdAt" : "2017-06-06T22:36:46Z",
        "updatedAt" : "2017-06-07T00:43:39Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "d546cea3-eca4-47ac-ae17-3389d1092c0c",
        "parentId" : "1602b2f9-cc68-4f6f-9281-435249851fd2",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Yes, this changes .d.ts generation (see e.g. built\\local\\tsserverlibrary.d.ts line ~4620)",
        "createdAt" : "2017-06-06T23:04:30Z",
        "updatedAt" : "2017-06-07T00:43:39Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "f725d7de5f1709352ee712494b25ca5ec071ff41",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +100,104 @@        GetApplicableRefactors = \"getApplicableRefactors\",\n        GetEditsForRefactor = \"getEditsForRefactor\",\n        /* @internal */\n        GetEditsForRefactorFull = \"getEditsForRefactor-full\",\n"
  },
  {
    "id" : "94a6f862-5f64-4995-a07e-c9d91c4f7c90",
    "prId" : 16307,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16307#pullrequestreview-42471254",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c18d72c-d909-4d7b-91a5-d10cf6aa964e",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Would it make sense to use a negative name so that the default value aligns with the default initialization of the type?",
        "createdAt" : "2017-06-06T22:39:09Z",
        "updatedAt" : "2017-06-07T00:43:39Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "b4c8e40c-f054-4993-903e-76eb402f56f7",
        "parentId" : "8c18d72c-d909-4d7b-91a5-d10cf6aa964e",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Usually I would do this, but Roslyn has a parameter called \"inlineable\" we're going to pass this to so I aligned with that. Plus @paulvanbrenk doesn't like negative-named properties 😉 ",
        "createdAt" : "2017-06-06T23:05:42Z",
        "updatedAt" : "2017-06-07T00:43:39Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "f725d7de5f1709352ee712494b25ca5ec071ff41",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +440,444 @@         * their parent grouping.\n         *\n         * If not specified, this value is assumed to be 'true'\n         */\n        inlineable?: boolean;"
  },
  {
    "id" : "f2d084fb-91ed-4e9f-9b31-8094f9782638",
    "prId" : 16307,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16307#pullrequestreview-42471514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6355d0b7-4458-4182-b5ba-ec9a546c697f",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Is the `?` semantically meaningful or just for documentation?",
        "createdAt" : "2017-06-06T22:41:53Z",
        "updatedAt" : "2017-06-07T00:43:39Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "692c2a1e-edc8-4717-9dce-b08ecc9b02a4",
        "parentId" : "6355d0b7-4458-4182-b5ba-ec9a546c697f",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "It's meaningful - the value may be present, missing, or `undefined` (we don't distinguish between those last two states in the tsserver protocol)",
        "createdAt" : "2017-06-06T23:07:24Z",
        "updatedAt" : "2017-06-07T00:43:39Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "f725d7de5f1709352ee712494b25ca5ec071ff41",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +493,497 @@         * the refactoring edits have been applied\n         */\n        renameLocation?: Location;\n        renameFilename?: string;\n    };"
  },
  {
    "id" : "cbc8840e-a4cf-4292-ac2c-b6f034ec3446",
    "prId" : 15966,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15966#pullrequestreview-39546159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa3c218d-e97c-4686-b2e5-0169bde7ed94",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "missing the initialization here.",
        "createdAt" : "2017-05-22T18:00:58Z",
        "updatedAt" : "2017-05-23T14:02:46Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1e100e494cee76b352111c54624e36d522c6452",
    "line" : 331,
    "diffHunk" : "@@ -1,1 +2417,2421 @@    }\n\n    export const enum NewLineKind {\n        Crlf = \"Crlf\",\n        Lf = \"Lf\","
  },
  {
    "id" : "54ba865f-ff64-4347-8fea-4307e8191751",
    "prId" : 15569,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15569#pullrequestreview-39307143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd03a60a-7685-4ad4-bae3-1028da6ac9a1",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "This should be marked as `/* @internal */`",
        "createdAt" : "2017-05-19T21:47:02Z",
        "updatedAt" : "2017-05-19T21:47:07Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6fbe617188ac28648aef55a20e18345e6a8986f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +99,103 @@        export type GetApplicableRefactors = \"getApplicableRefactors\";\n        export type GetRefactorCodeActions = \"getRefactorCodeActions\";\n        export type GetRefactorCodeActionsFull = \"getRefactorCodeActions-full\";\n    }\n"
  },
  {
    "id" : "5d93286b-7fb9-4731-9948-f4ccc688f471",
    "prId" : 15569,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15569#pullrequestreview-39307270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "765fd41d-6d9b-4cc2-a85e-50b25f325589",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "A comment here would be good.",
        "createdAt" : "2017-05-19T21:47:45Z",
        "updatedAt" : "2017-05-19T21:47:45Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6fbe617188ac28648aef55a20e18345e6a8986f",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +429,433 @@    export type RefactorCodeActions = {\n        actions: protocol.CodeAction[];\n        renameLocation?: number\n    };\n"
  },
  {
    "id" : "79d75fb1-4b63-47b6-844c-01a966b31adf",
    "prId" : 12551,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12551#pullrequestreview-10560767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5beda25-ef10-44b1-9ed7-f042e6bed867",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "missing `typingsInstallerVersion`.",
        "createdAt" : "2016-11-29T09:06:31Z",
        "updatedAt" : "2016-11-29T09:10:30Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "75a0a3aa-c335-4b5f-8db7-323f722993de",
        "parentId" : "b5beda25-ef10-44b1-9ed7-f042e6bed867",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "this event should be consumed only by editor so this information is unnecessary. ",
        "createdAt" : "2016-11-29T15:41:32Z",
        "updatedAt" : "2016-11-29T15:41:32Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "35c343b4c5373a9cbccb79951f00fed2dc6a0505",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +2132,2136 @@\n    export interface InstallTypesEventBody {\n        /**\n         * correlation id to match begin and end events\n         */"
  },
  {
    "id" : "c3c934c9-76aa-4024-a513-076ff8c31b92",
    "prId" : 11550,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11550#pullrequestreview-3923276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8351b506-eb8b-48e8-9f0c-fb11c1780838",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "this should be internal too\n",
        "createdAt" : "2016-10-12T17:34:32Z",
        "updatedAt" : "2016-10-12T17:53:31Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0d1c3195e8c2b0a6abae8faf08c6178ac2e82ff",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1221,1225 @@         */\n        /* @internal */\n        endPosition?: number;\n        /**\n         * Format options to be used."
  }
]