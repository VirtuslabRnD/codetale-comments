[
  {
    "id" : "6c02a7d3-713a-4709-becd-a186de03b677",
    "prId" : 21982,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21982#pullrequestreview-97336356",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be3eaa0e-4795-41f2-9433-aa968247919b",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "you do not need this one either. the tsconfig.json already has `types: [ \"node\" ]`",
        "createdAt" : "2018-02-16T22:29:21Z",
        "updatedAt" : "2018-02-16T22:29:21Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ca26130b5bd71ba010f895c2fb57e102c4982fb",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +-1,3 @@/// <reference types=\"node\" />\n\nnamespace ts.server.typingsInstaller {"
  },
  {
    "id" : "66d9ed76-bcb7-4166-be21-8a55f3c8857c",
    "prId" : 16113,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16113#pullrequestreview-40627580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bce69c9-3995-4227-adb1-2b14d7913d7e",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Just for clarity, could you do this only for `npmLocation` and not for `getDefaultNpmLocation` where it's presumably irrelevant?",
        "createdAt" : "2017-05-26T21:18:42Z",
        "updatedAt" : "2017-05-26T21:18:42Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "a453997c-b1ba-4b58-b59f-c7ef8c23e7c5",
        "parentId" : "5bce69c9-3995-4227-adb1-2b14d7913d7e",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "This check is, current, a no-op if the default location was used, as currently that already wraps in quotes. It seems safer (and clearer to me) against any future changes though to just here always check if it needs wrapping, however it was obtained.",
        "createdAt" : "2017-05-26T21:58:03Z",
        "updatedAt" : "2017-05-26T21:58:03Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7555eda3b3df03b6d44e9cffcdbbeb4a4c02712",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +88,92 @@\n            // If the NPM path contains spaces and isn't wrapped in quotes, do so.\n            if (this.npmPath.indexOf(\" \") !== -1 && this.npmPath[0] !== `\"`) {\n                this.npmPath = `\"${this.npmPath}\"`;\n            }"
  },
  {
    "id" : "03115705-3011-4781-8452-d3740c387f98",
    "prId" : 12163,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12163#pullrequestreview-8131075",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ce1df08-64e6-45bc-9be7-e00b7ae0f2c6",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "I assume we've confirmed that \"npm install\" returns a non-0 error code across platforms/versions if a package fails to install (and always returns 0 on success, not like \"1\" if it succeeded with extra info).\n",
        "createdAt" : "2016-11-11T00:57:23Z",
        "updatedAt" : "2016-11-11T00:57:56Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "377a771b-1931-4da3-a5c9-cfcada59f55d",
        "parentId" : "1ce1df08-64e6-45bc-9be7-e00b7ae0f2c6",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "yes, that is correct\n",
        "createdAt" : "2016-11-11T01:02:32Z",
        "updatedAt" : "2016-11-11T01:02:32Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "eac7c576beb2802c05b8b5a0949eaea445cb6264",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +141,145 @@                }\n                // treat absence of error as success\n                onRequestCompleted(!err);\n            });\n        }"
  },
  {
    "id" : "e89a6196-64b6-4948-b574-95254d9e9dca",
    "prId" : 12014,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12014#pullrequestreview-6954647",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08ba1848-19f0-4303-8243-fa75b542d84e",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Does this need to be synchronous? Is it going to block while waiting? If there are network/DNS issues, this could take minutes (though I guess this runs in the typesInstaller and it can't do much without it, right?)\n",
        "createdAt" : "2016-11-03T06:10:40Z",
        "updatedAt" : "2016-11-03T19:55:34Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "ec6cea67-e9bf-4beb-8d0e-d4f4f6b24d32",
        "parentId" : "08ba1848-19f0-4303-8243-fa75b542d84e",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "this is separate process so tsserver will not be blocked\n",
        "createdAt" : "2016-11-03T06:12:03Z",
        "updatedAt" : "2016-11-03T19:55:34Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "4f128bdb-24fb-4f4f-9e92-bbc0a6c5970e",
        "parentId" : "08ba1848-19f0-4303-8243-fa75b542d84e",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Right, that's what I meant (updated my comment after I wrote it), but still - it does mean it may not receive commands like \"close\" for a while. I assume there's no/minimal harm in having one linger a little if tsserver restarts and spawns another before it closes?\n",
        "createdAt" : "2016-11-03T06:22:28Z",
        "updatedAt" : "2016-11-03T19:55:34Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c522f440255ef594fbaeeeb4961d5e3d70ccfd3",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +96,100 @@                    this.log.writeLine(`Updating ${TypesRegistryPackageName} npm package...`);\n                }\n                execSync(`${this.npmPath} install ${TypesRegistryPackageName}`, { cwd: globalTypingsCacheLocation, stdio: \"ignore\" });\n            }\n            catch (e) {"
  },
  {
    "id" : "dcd29b9a-fca8-4030-90d7-4a13153bfe0a",
    "prId" : 12014,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12014#pullrequestreview-6957438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41ce8544-5f80-4bb9-b42a-583eb3405161",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Note that I believe using `npm install` on an already installed package with loose versioning will not update it. You may want to use `npm update` (which will also install if not present). See http://stackoverflow.com/questions/12478679/npm-install-vs-update-whats-the-difference\n",
        "createdAt" : "2016-11-03T07:00:06Z",
        "updatedAt" : "2016-11-03T19:55:34Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "f3422e40-2ea2-4dd3-af86-43000ad7f6f6",
        "parentId" : "41ce8544-5f80-4bb9-b42a-583eb3405161",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Actually - scratch that. I just tested, and at least with the npm I have, `npm install` did actually update it (always - even if already up to date), and `npm update` did nothing. Perhaps because I'm not specifying it as a dependency with a version in package.json (I didn't --save or --save-dev so it's not listed, just as you haven't below). So this seems fine as is.\n",
        "createdAt" : "2016-11-03T07:14:34Z",
        "updatedAt" : "2016-11-03T19:55:34Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c522f440255ef594fbaeeeb4961d5e3d70ccfd3",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +94,98 @@            try {\n                if (this.log.isEnabled()) {\n                    this.log.writeLine(`Updating ${TypesRegistryPackageName} npm package...`);\n                }\n                execSync(`${this.npmPath} install ${TypesRegistryPackageName}`, { cwd: globalTypingsCacheLocation, stdio: \"ignore\" });"
  },
  {
    "id" : "45ac2091-17e8-4c26-a5d4-2b201f19add4",
    "prId" : 10673,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c674d53-8b55-4ce9-bd7f-7cdf1d020866",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "I would probably write it a bit differently to reduce nesting and code duplication, smth like below (warning, typed directly in browser, may contain ~~peanuts~~ errors)\n\n``` ts\nprivate execAsync(prefix: string, command: string, cwd: string, requestId: number, cb: (err: Error, stdout: string, stderr: string) => void) {\n    if (this.log.isEnabled()) {\n        this.log.writeLine(`#${requestId} running command '${command}'.`);\n    }\n    this.exec(command, { cwd }, (err, stdout, stderr) => {\n        if (this.log.isEnabled()) {\n            this.log.writeLine(`${prefix} #${requestId} stdout: ${stdout}`);\n            this.log.writeLine(`${prefix} #${requestId} stderr: ${stderr}`);\n        }\n        cb(err, stdout, stderr);\n    });\n}\n\nprotected runInstall(cachePath: string, typingsToInstall: string[], postInstallAction: (installedTypings: string[]) => void): void {\n    const id = this.installRunCount;\n    this.installRunCount++;\n    let execInstallCmdCount = 0;\n    let filteredTypings: string[] = [];\n\n    for (const typing of typingsToInstall) {\n        const command = `npm view @types/${typing} --silent name`;\n        this.execAsync(\"npm view @types\", command, cachePath, id, (err, stdout, stderr) => {\n            if (stdout) {\n                filteredTypings.push(stdout);\n            }\n            execInstallCmdCount++;\n            if (execInstallCmdCount === typingsToInstall.length) {\n                installFilteredTypings(this, filteredTypings);\n            }\n        })\n    }\n\n    function installFilteredTypings(self: NodeTypingsInstaller, filteredTypings: string[]) {\n        const command = `npm install ${filteredTypings.map(t => \"@types/\" + t).join(\" \")} --save-dev`;\n        self.execAsync(\"npm install\", command, cachePath, id, (err, stdout, stderr) => {\n            if (stdout) {\n                reportInstalledTypings(self)\n            }\n        })\n    }\n\n    function reportInstalledTypings(self: NodeTypingsInstaller) {\n        const command = \"npm ls -json\";\n        self.execAsync(\"npm ls\", command, cachePath, id, (err, stdout, stderr) => {\n            let installedTypings: string[];\n            try {\n                const response = JSON.parse(stdout);\n                if (response.dependencies) {\n                    installedTypings = getOwnKeys(response.dependencies);\n                }\n            }\n            catch (e) {\n                self.log.writeLine(`Error parsing installed @types dependencies. Error details: ${e.message}`);\n            }\n            postInstallAction(installedTypings || []);\n        });\n    }\n```\n",
        "createdAt" : "2016-09-01T22:00:19Z",
        "updatedAt" : "2016-09-02T22:37:56Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "3bbe42c7-51b4-46d1-8e70-a3e8175beda1",
        "parentId" : "9c674d53-8b55-4ce9-bd7f-7cdf1d020866",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "Thanks! much cleaner - will make this change - EpiPen is ready :)\n",
        "createdAt" : "2016-09-02T00:55:32Z",
        "updatedAt" : "2016-09-02T22:37:56Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d0fc648d8840a26a5aefa6bb07fab1fe1a10067",
    "line" : null,
    "diffHunk" : "@@ -1,1 +90,94 @@        }\n\n        protected runInstall(cachePath: string, typingsToInstall: string[], postInstallAction: (installedTypings: string[]) => void): void {\n            const id = this.installRunCount;\n            this.installRunCount++;"
  }
]