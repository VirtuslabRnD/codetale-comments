[
  {
    "id" : "60324eae-cc77-45f6-9420-0f6b550d45c7",
    "prId" : 23484,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23484#pullrequestreview-113411152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e515c391-e697-4dcd-a438-c2c4c87a95af",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Don't we have helpers for this?  E.g. `commonPackageFolders` in core.ts.",
        "createdAt" : "2018-04-18T21:14:23Z",
        "updatedAt" : "2018-04-18T21:55:31Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "c0f487b5-332c-4ac0-95bf-256dcf21b56b",
        "parentId" : "e515c391-e697-4dcd-a438-c2c4c87a95af",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "But TI uses only these two locations.",
        "createdAt" : "2018-04-18T22:13:36Z",
        "updatedAt" : "2018-04-18T22:13:36Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "56b618b9fcb92a1363fcf1cced19062bfd0c3129",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +71,75 @@\n    function getDirectoryExcludingNodeModulesOrBowerComponents(f: string) {\n        const indexOfNodeModules = f.indexOf(\"/node_modules/\");\n        const indexOfBowerComponents = f.indexOf(\"/bower_components/\");\n        const subStrLength = indexOfNodeModules === -1 || indexOfBowerComponents === -1 ?"
  },
  {
    "id" : "4ba0df2a-91f1-4ce1-9b47-6fea9b202552",
    "prId" : 23484,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23484#pullrequestreview-113410598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30d2041b-1bdd-46f1-8c13-720f567e455f",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Should this take a flag for case sensitivity?",
        "createdAt" : "2018-04-18T21:26:30Z",
        "updatedAt" : "2018-04-18T21:55:31Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "53a12909-7c9c-4d03-b7ca-f598450e6185",
        "parentId" : "30d2041b-1bdd-46f1-8c13-720f567e455f",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "the file here is always canonical file name",
        "createdAt" : "2018-04-18T22:11:08Z",
        "updatedAt" : "2018-04-18T22:11:08Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "56b618b9fcb92a1363fcf1cced19062bfd0c3129",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +67,71 @@    function isPackageOrBowerJson(fileName: string) {\n        const base = getBaseFileName(fileName);\n        return base === \"package.json\" || base === \"bower.json\";\n    }\n"
  },
  {
    "id" : "80c61908-1d7c-48d8-ab77-f0d0c4e6f690",
    "prId" : 23484,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23484#pullrequestreview-113410684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48ca5447-5edf-4cfd-b684-76bf88feeb32",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Is there a reason to prefer lambdas over functions or vice versa?",
        "createdAt" : "2018-04-18T21:40:48Z",
        "updatedAt" : "2018-04-18T21:55:31Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "b9c1edea-527b-437b-a29d-b1e7a572c856",
        "parentId" : "48ca5447-5edf-4cfd-b684-76bf88feeb32",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "lambdas are needed because we use ```this```",
        "createdAt" : "2018-04-18T22:11:30Z",
        "updatedAt" : "2018-04-18T22:11:30Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "56b618b9fcb92a1363fcf1cced19062bfd0c3129",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +415,419 @@                watchers.set(path, createWatch(path));\n            };\n            const createProjectFileWatcher = (file: string): FileWatcher => {\n                if (isLoggingEnabled) {\n                    this.log.writeLine(`FileWatcher:: Added:: WatchInfo: ${file}`);"
  },
  {
    "id" : "7d2bec1e-bb4a-4982-b592-3f39de0c176f",
    "prId" : 23484,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23484#pullrequestreview-113410929",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0599659c-ea2e-469d-a82d-08b9a40228f3",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "This is probably a dumb question, but isn't `watchers` a map?  Why would it have an `isInvoked` property?",
        "createdAt" : "2018-04-18T21:45:24Z",
        "updatedAt" : "2018-04-18T21:55:31Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "9401804f-68db-49eb-9b78-82936e318569",
        "parentId" : "0599659c-ea2e-469d-a82d-08b9a40228f3",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "its a expando on map.. This is so that we arent catching incorrect local variable. the state recides on the map (more on this https://github.com/Microsoft/TypeScript/pull/23438#discussion_r182237104)",
        "createdAt" : "2018-04-18T22:12:34Z",
        "updatedAt" : "2018-04-18T22:12:34Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "56b618b9fcb92a1363fcf1cced19062bfd0c3129",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +404,408 @@\n            // handler should be invoked once for the entire set of files since it will trigger full rediscovery of typings\n            watchers.isInvoked = false;\n\n            const isLoggingEnabled = this.log.isEnabled();"
  },
  {
    "id" : "5128fc97-8a72-48ea-b510-a1c5341271df",
    "prId" : 23438,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23438#pullrequestreview-113002284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb352239-43fd-440f-bfc1-56c890e5f6d6",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "so were we having same watchers in multiple projects? i am not sure i understand the change here.. ",
        "createdAt" : "2018-04-17T19:51:22Z",
        "updatedAt" : "2018-04-18T18:10:17Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "22b0845f-9122-4081-a459-ea8cc08e07eb",
        "parentId" : "eb352239-43fd-440f-bfc1-56c890e5f6d6",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Previously the isInvoked was local variable that was captured. If there were additional watches added to the project (because it has more files etc) the new isInvoked would be used for additional watchers, but the existing watches would still refer to the previous isInvoked thus invalidating the typing multiple times or ignoring the typings assuming it was already invalidating.",
        "createdAt" : "2018-04-17T21:19:21Z",
        "updatedAt" : "2018-04-18T18:10:17Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c5f5249ae0a7b5be78d4f3549860e532208073d",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +381,385 @@            }\n\n            watchers.isInvoked = false;\n            // handler should be invoked once for the entire set of files since it will trigger full rediscovery of typings\n            const isLoggingEnabled = this.log.isEnabled();"
  },
  {
    "id" : "6bacf3ee-7c71-494a-bf39-74e5818c84e5",
    "prId" : 23374,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23374#pullrequestreview-111800994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50a8885a-1efa-41f9-841a-57d144d8f259",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "This seems needlessly confusing. How about something like this?\r\n```ts\r\n    /*@internal*/\r\n    export function installNpmPackages(npmPath: string, tsVersion: string, packageNames: string[], install: (command: string) => boolean) {\r\n        let hasError = false;\r\n        const remaining = packageNames.slice();\r\n        while (!hasError && remaining.length > 0) {\r\n            const batch = takePackages(remaining);\r\n            const command = `${npmPath} install --ignore-scripts ${batch.join(\" \")} --save-dev --user-agent=\"typesInstaller/${tsVersion}\"`;\r\n            hasError = install(command) || hasError;\r\n        }\r\n        return hasError;\r\n}\r\n\r\n    function takePackages(packages: string[]): string[] {\r\n        let remainder = 7500;\r\n        const result: string[] = [];\r\n        while (packages.length > 0 && remainder > 0) {\r\n            const p = packages.pop();\r\n            remainder -= (p.length + 1); // +1 for space\r\n            result.push(p);\r\n        }        \r\n        return result;\r\n    }\r\n```",
        "createdAt" : "2018-04-12T21:23:40Z",
        "updatedAt" : "2018-04-12T21:23:40Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "33ce83f9-7909-444f-a481-5032a9231df9",
        "parentId" : "50a8885a-1efa-41f9-841a-57d144d8f259",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I dont want to create duplicate array if cmd is going to succeed. But let me see if i can infuse this with my approach and comeup with something better. ",
        "createdAt" : "2018-04-12T21:27:38Z",
        "updatedAt" : "2018-04-12T21:27:38Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3d83c81cc21e396ea107870a2d2eda6e9e0d12a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +31,35 @@    }\n\n    /*@internal*/\n    export function installNpmPackages(npmPath: string, tsVersion: string, packageNames: string[], install: (command: string) => boolean) {\n        let hasError = false;"
  },
  {
    "id" : "2c0ef029-205c-42ae-b008-5d1452ed7546",
    "prId" : 12163,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12163#pullrequestreview-8130958",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c02ea154-7c97-4817-9613-ef3c9aa0167c",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "It's interesting that we mark all the packages as missing. I assume that the npm install command could fail because one package failed, but the rest installed correctly? Or does NPM install in an \"all-or-nothing\" fashion?\n",
        "createdAt" : "2016-11-11T00:56:02Z",
        "updatedAt" : "2016-11-11T00:56:02Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "ec8c24b1-e591-4e1f-b48c-83c300da5dce",
        "parentId" : "c02ea154-7c97-4817-9613-ef3c9aa0167c",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "it is all or nothing\n",
        "createdAt" : "2016-11-11T01:01:25Z",
        "updatedAt" : "2016-11-11T01:01:25Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "eac7c576beb2802c05b8b5a0949eaea445cb6264",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +310,314 @@                    for (const typing of filteredTypings) {\n                        this.missingTypingsSet[typing] = true;\n                    }\n                    return;\n                }"
  }
]