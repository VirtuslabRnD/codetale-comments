[
  {
    "id" : "8de4712b-8d92-433e-8256-fd22a8339dfe",
    "prId" : 44859,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44859#pullrequestreview-704679315",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2760a760-10dd-4a2e-b3b2-f9aba2724b49",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "@sandersn Long-term, we might want to enable your just-do-it errors in this context.",
        "createdAt" : "2021-07-06T17:57:13Z",
        "updatedAt" : "2021-07-06T17:57:52Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "a0075b6d-b96a-4b10-abe1-1d83616ea5ec",
        "parentId" : "2760a760-10dd-4a2e-b3b2-f9aba2724b49",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "> Long-term, we might want to enable your just-do-it errors in this context.\r\n\r\nNot familiar with this.",
        "createdAt" : "2021-07-13T01:58:50Z",
        "updatedAt" : "2021-07-13T01:58:50Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c1024aa8976fce476ed046cc46a26943d12b3bf",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +1081,1085 @@                    }\n                    next.immediate(() => {\n                        this.suggestionCheck(fileName, project);\n                        goNext();\n                    });"
  },
  {
    "id" : "7ab6c375-a43c-4955-8104-d93e70bd06f5",
    "prId" : 42089,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42089#pullrequestreview-686479297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14638e99-f033-4f9d-855c-7b11eafbb876",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Same comment about object spread (#44260)",
        "createdAt" : "2021-06-17T15:50:27Z",
        "updatedAt" : "2021-06-17T16:13:40Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e9a8d8715f4c2b3961494cb5e3f3669ef363bd2",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1457,1461 @@            return hints.map(hint => ({\n                ...hint,\n                position: scriptInfo.positionToLineOffset(hint.position),\n            }));\n        }"
  },
  {
    "id" : "835336e0-5c18-4f1f-b6c9-fb3f0a3799d2",
    "prId" : 41805,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41805#pullrequestreview-547688106",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b380ff7d-e589-44dd-a8b8-9f310dddc62b",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Maybe it would be better to pull the filename from the SourceFile object? In the find-all-refs on a module specifier case, we populate this with the exact text of the module specifier that triggered the request. I kind of doubt this will be used for anything, but @mjbvz can let me know if he had something specific in mind for this field.",
        "createdAt" : "2020-12-03T19:15:26Z",
        "updatedAt" : "2020-12-11T20:11:07Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "36ca362c-7e70-4814-af70-1d556f76157c",
        "parentId" : "b380ff7d-e589-44dd-a8b8-9f310dddc62b",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Whats the decision on symbol name. if it cannot be file name like here esp if its global file since there wont be symbol for that file.",
        "createdAt" : "2020-12-07T19:18:37Z",
        "updatedAt" : "2020-12-11T20:11:07Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "f902891b-e24c-4314-a6af-242869410371",
        "parentId" : "b380ff7d-e589-44dd-a8b8-9f310dddc62b",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yeah, `symbolName` is going to be a misnomer, but I’m planning on assuming this is fine as is unless @mjbvz tells me otherwise.",
        "createdAt" : "2020-12-08T21:58:37Z",
        "updatedAt" : "2020-12-11T20:11:07Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "87e25393-8cac-4f31-a106-23bcb488f62d",
        "parentId" : "b380ff7d-e589-44dd-a8b8-9f310dddc62b",
        "authorId" : "1d4633b6-c940-4836-914c-864f47cc37f8",
        "body" : "Yes I think this makes sense. We currently don't use the top level symbol name at all ",
        "createdAt" : "2020-12-08T22:31:33Z",
        "updatedAt" : "2020-12-11T20:11:07Z",
        "lastEditedBy" : "1d4633b6-c940-4836-914c-864f47cc37f8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b40cf6bed108f9e84cf5434cdc86c831f5fa6472",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +1570,1574 @@            return {\n                refs,\n                symbolName: `\"${args.file}\"`\n            };\n        }"
  },
  {
    "id" : "f5801523-3092-4709-8ff6-22515049018c",
    "prId" : 41805,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41805#pullrequestreview-550535916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "127e44fd-4bec-4ba0-9f83-6fc19c805aa7",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Do we have test for this.. couldnt find any.",
        "createdAt" : "2020-12-11T00:34:17Z",
        "updatedAt" : "2020-12-11T20:11:07Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "b031b767-9c17-4a5c-8335-b919f3cc67c1",
        "parentId" : "127e44fd-4bec-4ba0-9f83-6fc19c805aa7",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Done 👍 ",
        "createdAt" : "2020-12-11T19:57:47Z",
        "updatedAt" : "2020-12-11T20:11:07Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "b40cf6bed108f9e84cf5434cdc86c831f5fa6472",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +1568,1572 @@            if (!simplifiedResult) return references;\n            const refs = references.map(entry => referenceEntryToReferencesResponseItem(this.projectService, entry));\n            return {\n                refs,\n                symbolName: `\"${args.file}\"`"
  },
  {
    "id" : "a9c36003-9668-422f-a864-da04e1e130d4",
    "prId" : 40348,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40348#pullrequestreview-480133675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4020cf2-8a1e-479b-92d3-10fc8eaeaefa",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "This line is the implementation fix. Other changes are fixes to test infrastructure that was never used before now.",
        "createdAt" : "2020-09-01T21:34:03Z",
        "updatedAt" : "2020-09-01T21:34:03Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b332792a6c010a92d54d1617f5eab5f53d6986c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2409,2413 @@                kindModifiers: item.kindModifiers,\n                file: item.file,\n                containerName: item.containerName,\n                span: toProtocolTextSpan(item.span, scriptInfo),\n                selectionSpan: toProtocolTextSpan(item.selectionSpan, scriptInfo)"
  },
  {
    "id" : "5c9dfbfa-785e-4e10-b21e-36cf16038c64",
    "prId" : 39656,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39656#pullrequestreview-546588797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01c05d58-ab7b-442c-bc14-ab83a4d7c40c",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Nit: It seems strange to mix type assertion syntaxes in a single expression. 😛 ",
        "createdAt" : "2020-11-24T17:46:32Z",
        "updatedAt" : "2020-12-02T02:25:52Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "f89adc46-0e74-472e-9cc4-fb406cc9a49b",
        "parentId" : "01c05d58-ab7b-442c-bc14-ab83a4d7c40c",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "i know because TMessage has default to string thats what it needs to be",
        "createdAt" : "2020-12-02T01:23:02Z",
        "updatedAt" : "2020-12-02T02:25:52Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "5c76c7b3-749d-40e9-b359-e280141def03",
        "parentId" : "01c05d58-ab7b-442c-bc14-ab83a4d7c40c",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I was actually just commenting on `<T>` vs `as T`.",
        "createdAt" : "2020-12-07T22:23:34Z",
        "updatedAt" : "2020-12-07T22:23:34Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "970473897beb70b660d081df8264cc9473b1ca5c",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +2980,2984 @@\n        protected parseMessage(message: TMessage): protocol.Request {\n            return <protocol.Request>JSON.parse(message as any as string);\n        }\n"
  },
  {
    "id" : "0d014c68-f7e5-40cb-adda-32147ad60442",
    "prId" : 38923,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38923#pullrequestreview-429162447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55bb0d81-6305-47e8-b340-d42ebd7a1aec",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "@amcasey, you might be interested in the minor changes to perf reporting I made in this file after our conversation",
        "createdAt" : "2020-06-11T17:37:43Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "89479877-f45a-4ff4-8e6b-f24ef53e7cd2",
        "parentId" : "55bb0d81-6305-47e8-b340-d42ebd7a1aec",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "LGTM.  You'll want to create bugs against the editors to start reporting corresponding telemetry.",
        "createdAt" : "2020-06-11T18:02:39Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "85c69385bb5d30c722685a0528f51c5b1ba0acf3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +645,649 @@        private changeSeq = 0;\n\n        private performanceData: protocol.PerformanceData | undefined;\n\n        private currentRequestId!: number;"
  },
  {
    "id" : "cc2df634-6935-4b77-9200-ec1d23c6f6c1",
    "prId" : 38561,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38561#pullrequestreview-430090032",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a6d700d-182f-41ad-b5f4-9a4afee3be59",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "SyntacticDiagnosticsSync: This is somewhat project setting dependent ? Atleast at some point parsing errors use to be different based on target .. eg target determines what unicode is considered identifier start...  So i am not sure if this should be enabled.. But if we do enable we i was wondering if GetErr should only do syntax checks and skip semantic and suggetion diagnostics on syntax server\r\n\r\nSome questionable which i have disabled for now\r\nReload \r\nReloadProjects\r\nPrepareCallHierarchy\r\nProvideCallHierarchyIncomingCalls\r\nProvideCallHierarchyOutgoingCalls\r\n",
        "createdAt" : "2020-06-13T00:07:19Z",
        "updatedAt" : "2020-06-16T20:05:38Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "901cfc35e4af680eff69eda607b86f444f24872d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +586,590 @@        CommandNames.CompilerOptionsDiagnosticsFull,\n        CommandNames.EncodedSemanticClassificationsFull,\n        CommandNames.SemanticDiagnosticsSync,\n        CommandNames.SyntacticDiagnosticsSync,\n        CommandNames.SuggestionDiagnosticsSync,"
  },
  {
    "id" : "1a60b7e5-1b16-4415-a3e5-7fe8808c69d4",
    "prId" : 36271,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36271#pullrequestreview-348287091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "470edc99-57e0-4882-8c08-bf78ad8e18fe",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "seems like there are places where index doesn't get incremented now that it's inside `goNext`. For example, when `!project.containsFile(fileName, requireOpen)`. Is this important?",
        "createdAt" : "2020-01-22T17:01:58Z",
        "updatedAt" : "2020-01-22T17:22:20Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "6a8d11a1-dbc5-44b9-9d3b-fd3addc2767b",
        "parentId" : "470edc99-57e0-4882-8c08-bf78ad8e18fe",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Since only goToNext is the only one that reschedules the next work item.. Thats the only one it needs to increment index.. Because in rest of the cases the we dont go to next work item at all.",
        "createdAt" : "2020-01-25T00:04:57Z",
        "updatedAt" : "2020-01-25T00:04:58Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d68aa70ca8867edb0ec87edcd3e388120c86cbb",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +877,881 @@            let index = 0;\n            const goNext = () => {\n                index++;\n                if (checkList.length > index) {\n                    next.delay(followMs, checkOne);"
  },
  {
    "id" : "57593d1a-61f5-4ed2-8f90-2d101ba83631",
    "prId" : 36271,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36271#pullrequestreview-348286595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b70d517-c022-4f3b-8617-61a45220f597",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "if `createCheckList` is deleted, is `updateErrorCheck` *ever* called with anything but `string[]`? If so, maybe the other callers should stop creating the check list ahead of time too?",
        "createdAt" : "2020-01-22T17:08:38Z",
        "updatedAt" : "2020-01-22T17:22:20Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "6f832a99-5120-4a8c-adfd-69b4954d3022",
        "parentId" : "4b70d517-c022-4f3b-8617-61a45220f597",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "The only reason it can be checklist ahead of time is when scheduling errors for a project.. Which is when we get file names in a project and create checklist that says get errors for all files in project if and only if that file is in project.. ",
        "createdAt" : "2020-01-25T00:02:28Z",
        "updatedAt" : "2020-01-25T00:02:29Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d68aa70ca8867edb0ec87edcd3e388120c86cbb",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +869,873 @@\n        /** It is the caller's responsibility to verify that `!this.suppressDiagnosticEvents`. */\n        private updateErrorCheck(next: NextStep, checkList: readonly string[] | readonly PendingErrorCheck[], ms: number, requireOpen = true) {\n            Debug.assert(!this.suppressDiagnosticEvents); // Caller's responsibility\n"
  },
  {
    "id" : "536b51bd-f805-4501-afbe-9f3b88d15117",
    "prId" : 32785,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32785#pullrequestreview-273369523",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edb4cc02-135d-4cad-acd5-02a53ddb266f",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This needs to be \r\n msg += `\\n\\nProgram files: ${JSON.stringify(error.ProgramFiles)}\\n`;",
        "createdAt" : "2019-08-09T21:28:05Z",
        "updatedAt" : "2019-08-09T21:28:06Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "772578f1-1df3-4ceb-873b-808649263687",
        "parentId" : "edb4cc02-135d-4cad-acd5-02a53ddb266f",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "That's what I get for inspecting the property in the debugger and not actually reading the log...",
        "createdAt" : "2019-08-09T21:30:46Z",
        "updatedAt" : "2019-08-09T21:30:46Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "00e316f5-4730-4eb1-bf48-055227a56452",
        "parentId" : "edb4cc02-135d-4cad-acd5-02a53ddb266f",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "#32789",
        "createdAt" : "2019-08-09T21:34:05Z",
        "updatedAt" : "2019-08-09T21:34:05Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c19c13094703fe00996e978dceb087e751c19f3",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +714,718 @@\n                if (err.ProgramFiles) {\n                    msg += `\\n\\nProgram files: {JSON.stringify(error.ProgramFiles}}\\n`;\n                    msg += `\\n\\nProjects::\\n`;\n                    let counter = 0;"
  },
  {
    "id" : "45b0cc04-05b3-4ed2-9e47-4c805613d993",
    "prId" : 30107,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/30107#pullrequestreview-208703767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5b35e05-f79b-4f83-b558-a321fa2905f1",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Can't the changes be in any order?  Would it be safer to sort them if we depend on some particular order?",
        "createdAt" : "2019-02-27T00:38:10Z",
        "updatedAt" : "2019-03-05T22:34:23Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "eaf09ec4-2635-4c27-a247-6691b81801fb",
        "parentId" : "f5b35e05-f79b-4f83-b558-a321fa2905f1",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Oh, this is the internal one - maybe this just retains the existing behavior?",
        "createdAt" : "2019-02-27T00:39:18Z",
        "updatedAt" : "2019-03-05T22:34:23Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "630d8193-84db-4735-b105-f8c77338b908",
        "parentId" : "f5b35e05-f79b-4f83-b558-a321fa2905f1",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This is internal one and retaining current behavior but I am also going to update the new api to update to reverse order. But I think like Roslyn code it would be good idea to verify the reverse is needed. Will update.",
        "createdAt" : "2019-02-27T18:56:29Z",
        "updatedAt" : "2019-03-05T22:34:23Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e55fbffed6e3a30331ab81ab5b84f486ea049c45",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +2126,2130 @@                        fileName: file.fileName,\n                        // apply changes in reverse order\n                        changes: arrayReverseIterator(file.changes)\n                    })),\n                    request.arguments.closedFiles"
  },
  {
    "id" : "01038030-4302-4550-ae55-585a754505eb",
    "prId" : 28258,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28258#pullrequestreview-170428144",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "893e9222-4d02-4ef7-8f6f-fff20d994a26",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Good idea to add `allScriptInfoFileNamesForDebug` in `doEnsureDefaultProjectForFile`, `getProjects` where we could throw because there is no script info?",
        "createdAt" : "2018-10-31T19:16:12Z",
        "updatedAt" : "2018-11-02T22:52:01Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe59b7ff67c2e60e9ca6934408805f4c97e46210",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +1923,1927 @@                ? { fileName: textChanges.fileName, textChanges: textChanges.textChanges.map(textChange => convertTextChangeToCodeEdit(textChange, scriptInfo)) }\n                : convertNewFileTextChangeToCodeEdit(textChanges);\n        }\n\n        private convertTextChangeToCodeEdit(change: TextChange, scriptInfo: ScriptInfo): protocol.CodeEdit {"
  },
  {
    "id" : "243ea40f-dca2-4edb-b0ac-6ff60c52a61a",
    "prId" : 27113,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27113#pullrequestreview-156113619",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69d6f576-07d3-42fd-97d0-1544d729a6cc",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Personally, I find it confusing that some callers pass a callback with a different goal (tryAddToTodo) and no intention of returning.  Maybe the return type should also be a type parameter?",
        "createdAt" : "2018-09-17T19:52:24Z",
        "updatedAt" : "2018-09-17T19:52:33Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "12890ca4-d302-4649-8b40-a883ec15d63e",
        "parentId" : "69d6f576-07d3-42fd-97d0-1544d729a6cc",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "You mean no intention of using the return value of `getMappedLocation`? Though every caller uses the return type of at least to test whether there was something added. It's true that they use it like a boolean but I don't think there's a type-safe way to have the return value be a type parameter that's either `boolean` or `sourcemaps.SourceMappableLocation | undefined`.",
        "createdAt" : "2018-09-17T20:52:13Z",
        "updatedAt" : "2018-09-17T20:52:13Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "050181380ba4cc98b8128be6deef10639c347c18",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +391,395 @@        initialLocation: TLocation,\n        projectService: ProjectService,\n        cb: CombineProjectOutputCallback<TLocation>,\n        getDefinition: (() => sourcemaps.SourceMappableLocation | undefined) | undefined,\n    ): void {"
  },
  {
    "id" : "6a10ae80-a578-4a2f-9069-2694cd9af735",
    "prId" : 25648,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25648#pullrequestreview-138893803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7280f8a4-cf40-430e-8e15-448780408fd2",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You also want to check if definingProject.languageServiceEnabled",
        "createdAt" : "2018-07-19T19:49:52Z",
        "updatedAt" : "2018-07-19T23:24:26Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "ef00690d-b812-4d47-84cf-4a65c14fd38e",
        "parentId" : "7280f8a4-cf40-430e-8e15-448780408fd2",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "That comes from `this.getDefaultProject`, shouldn't it always be enabled?",
        "createdAt" : "2018-07-20T00:08:02Z",
        "updatedAt" : "2018-07-20T00:08:02Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0aa17436cb9ad398e2b45c1bb2c38475e86e03af",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +418,422 @@    function getDefinitionInProject(definition: sourcemaps.SourceMappableLocation | undefined, definingProject: Project, project: Project): sourcemaps.SourceMappableLocation | undefined {\n        if (!definition || project.containsFile(toNormalizedPath(definition.fileName))) return definition;\n        const mappedDefinition = definingProject.getLanguageService().getSourceMapper().tryGetGeneratedLocation(definition);\n        return mappedDefinition && project.containsFile(toNormalizedPath(mappedDefinition.fileName)) ? mappedDefinition : undefined;\n    }"
  },
  {
    "id" : "fb67b020-7668-421e-bd6f-63862f60e366",
    "prId" : 25419,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25419#pullrequestreview-136051068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e0aeb1f-5c9e-4f31-aba9-32771e75f3a1",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "may be also add sourceFile && sourceFile.fileName in the log and textChanges.fileName",
        "createdAt" : "2018-07-10T23:44:14Z",
        "updatedAt" : "2018-07-10T23:44:14Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "e24cee7e-7eed-44c0-bff2-54046e385712",
        "parentId" : "6e0aeb1f-5c9e-4f31-aba9-32771e75f3a1",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I think that would be personally identifying though.",
        "createdAt" : "2018-07-10T23:55:27Z",
        "updatedAt" : "2018-07-10T23:55:28Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "70e45423ae1eea8e589e433ae36ad1f6e3f99d66",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +2359,2363 @@\n    function mapTextChangesToCodeEditsForFile(textChanges: FileTextChanges, sourceFile: SourceFile | undefined): protocol.FileCodeEdits {\n        Debug.assert(!!textChanges.isNewFile === !sourceFile, \"Expected isNewFile for (only) new files\", () => JSON.stringify({ isNewFile: textChanges.isNewFile, hasSourceFile: !!sourceFile }));\n        if (sourceFile) {\n            return {"
  },
  {
    "id" : "f5acb9ce-c9a7-4010-8f9a-e6efe01e59a1",
    "prId" : 25239,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25239#pullrequestreview-132158309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fa4c5e3-5a91-4ea7-ac64-dc28e501d461",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`\"none\"` wasn't a possible value (detected by changing the type to a string literal union), so in practice `matchKind` would always be set.",
        "createdAt" : "2018-06-26T18:51:36Z",
        "updatedAt" : "2018-07-03T01:57:32Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "acd604ecab6fff024884011097da845583d03582",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1600,1604 @@                            if (navItem.kindModifiers && (navItem.kindModifiers !== \"\")) {\n                                bakedItem.kindModifiers = navItem.kindModifiers;\n                            }\n                            if (navItem.containerName && (navItem.containerName.length > 0)) {\n                                bakedItem.containerName = navItem.containerName;"
  },
  {
    "id" : "3b5a630b-becd-4df7-add9-67d47d057e5a",
    "prId" : 25239,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25239#pullrequestreview-132158386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "daac9e9e-1d21-4395-9c8b-b0c787ef18c5",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`isCaseSensitive` was declared optional but we never set it anywhere.",
        "createdAt" : "2018-06-26T18:51:49Z",
        "updatedAt" : "2018-07-03T01:57:32Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "acd604ecab6fff024884011097da845583d03582",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1592,1596 @@                                name: navItem.name,\n                                kind: navItem.kind,\n                                isCaseSensitive: navItem.isCaseSensitive,\n                                matchKind: navItem.matchKind,\n                                file: navItem.fileName,"
  },
  {
    "id" : "585b305d-d62b-4fec-8e23-0f91330179e6",
    "prId" : 24548,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24548#pullrequestreview-125784967",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6fe517d-007c-4d7a-b1a8-820af282f7ea",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "no need to create an object just to inline it.. you can set `fileName` to `undefined`",
        "createdAt" : "2018-06-05T00:23:21Z",
        "updatedAt" : "2018-06-15T00:20:57Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "2251da1f2aff6c477b70aa58febca3e186b2ee41",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +121,125 @@        };\n        return includeFileName\n            ? { ...common, fileName: diag.file && diag.file.fileName }\n            : common;\n    }"
  },
  {
    "id" : "fa8dc1c5-a900-41ba-9849-2b9034e1a36d",
    "prId" : 24074,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/24074#pullrequestreview-120041727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1615182-ba3d-49d8-bda7-f9e8217b3264",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Lemme guess: excess property warning?",
        "createdAt" : "2018-05-12T00:39:17Z",
        "updatedAt" : "2018-05-15T01:27:36Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "27649603-6b4f-4ac6-b7db-c726096b9b47",
        "parentId" : "c1615182-ba3d-49d8-bda7-f9e8217b3264",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "\"Spread types may only be created from object types\" (even if `T` is constrained to `DocumentSpan & object`!)",
        "createdAt" : "2018-05-14T17:40:30Z",
        "updatedAt" : "2018-05-15T01:27:36Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "add09b47-21d1-4ec4-9e57-2882a472717f",
        "parentId" : "c1615182-ba3d-49d8-bda7-f9e8217b3264",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "This also requires `any` rather than a different cast because we don't believe that the returned object literal actually conforms to `T`",
        "createdAt" : "2018-05-14T17:55:12Z",
        "updatedAt" : "2018-05-15T01:27:36Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "59fd65cc-dcb1-4970-b1ad-f8746b86d636",
        "parentId" : "c1615182-ba3d-49d8-bda7-f9e8217b3264",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "So it's a symptom of how we don't have higher order spread types. :3",
        "createdAt" : "2018-05-14T23:14:41Z",
        "updatedAt" : "2018-05-15T01:27:36Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f01338fa338c3efdd628cc45970593a091de1b9f",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +712,716 @@                Debug.assert(def.originalTextSpan !== undefined, \"originalTextSpan should be present if originalFileName is\");\n                return {\n                    ...<any>def,\n                    fileName: def.originalFileName,\n                    textSpan: def.originalTextSpan,"
  },
  {
    "id" : "ef3fed5a-992a-4948-aaa3-ebf6ec97170e",
    "prId" : 19069,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19069#pullrequestreview-68715875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea8d7359-3b32-4f03-8013-0f9b6ce86ba3",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i would check if details.codeActions is not defined, and return details.",
        "createdAt" : "2017-10-10T19:58:36Z",
        "updatedAt" : "2017-10-16T21:11:46Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "2a8ee570-342a-4042-9d47-8bfaf9142c84",
        "parentId" : "ea8d7359-3b32-4f03-8013-0f9b6ce86ba3",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "or conisder:\r\n\r\n```ts\r\nif (details) {\r\n    details.codeActions = map(details.codeActions, action => this.mapCodeAction(action, scriptInfo));\r\n}\r\n```\r\n\r\nthis avoids the extra object allocation, and will not be marshaled to the caller, since JSON will not marshal undefined properties.",
        "createdAt" : "2017-10-10T20:25:53Z",
        "updatedAt" : "2017-10-16T21:11:46Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "9e0b32a7-e027-42a3-b2d6-dbb6ff8530a8",
        "parentId" : "ea8d7359-3b32-4f03-8013-0f9b6ce86ba3",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "There's no type-safe way to mutate an object of one type into an object of a different type -- I would have to use `any` and that would cause errors if we needed to transform some other part of `details` and forgot about it. I don't think the extra allocation is a big deal, since it's only a single object per `completionEntryDetails` call.",
        "createdAt" : "2017-10-10T21:33:10Z",
        "updatedAt" : "2017-10-16T21:11:46Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "c00f909e-7c88-4f16-91f8-499ab5f77853",
        "parentId" : "ea8d7359-3b32-4f03-8013-0f9b6ce86ba3",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "The ```getCodeFix``` and ```GetEditsForRefactor``` have option of  getting simplified result through those methods and full result through ```GetCodeFixesFull``` and ```GetEditsForRefactorFull```. Would we want something similar here too?",
        "createdAt" : "2017-10-11T18:10:58Z",
        "updatedAt" : "2017-10-16T21:11:46Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "31e8c19d-12df-4ccd-9e96-df0d1c2c4b3a",
        "parentId" : "ea8d7359-3b32-4f03-8013-0f9b6ce86ba3",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Also I agree with @mhegazy we shouldnt be allocating object if there is no need. Also looking at this method it looks like there could be multiple entries requested which means those many more new objects?",
        "createdAt" : "2017-10-11T18:12:04Z",
        "updatedAt" : "2017-10-16T21:11:46Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "e0a5b319-2097-410b-8d58-84bb21d7265c",
        "parentId" : "ea8d7359-3b32-4f03-8013-0f9b6ce86ba3",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "The simplified results appear to be trying to reduce the amount of JSON sent? That would be more important for \"completions\" (which has a simplified version) than for \"completionDetails\".\r\nThe `mapDefined` is in case the client makes multiple requests together, as in trying to get details on \"foo\" and \"fop\" at the same time. I don't think it would ever be in the thousands. I think there's a genuine need for a new object since it would have a different type -- see `decorateNavigationTree` for a similar function that returns an object of different type from its input.",
        "createdAt" : "2017-10-11T19:00:11Z",
        "updatedAt" : "2017-10-16T21:11:46Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c607e73d5b8cf167e954d4b20bef040f2855e02",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1202,1206 @@                const details = project.getLanguageService().getCompletionEntryDetails(file, position, entryName, formattingOptions);\n                if (details) {\n                    const mappedCodeActions = map(details.codeActions, action => this.mapCodeAction(action, scriptInfo));\n                    return { ...details, codeActions: mappedCodeActions };\n                }"
  },
  {
    "id" : "b56bbab4-7797-45ba-9e4d-985484a7096a",
    "prId" : 17781,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17781#pullrequestreview-56151973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0daa7121-b414-49e2-94ea-3e8c60fff15e",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">undefined [](start = 23, length = 9)\r\n\r\nThis was probably fine as `emptyArray`, but I have no problem with reverting it.",
        "createdAt" : "2017-08-14T17:51:37Z",
        "updatedAt" : "2017-08-14T20:05:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "630d90504d003f093d38b08b09a493bef2bc9152",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +602,606 @@            const definitions = project.getLanguageService().getDefinitionAtPosition(file, position);\n            if (!definitions) {\n                return undefined;\n            }\n"
  },
  {
    "id" : "d2650c76-5ae4-4cf9-b8a9-5b3ecc205648",
    "prId" : 17781,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17781#pullrequestreview-56202445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a3b5ac5-1b32-4e5f-aff2-090c68c32bf4",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">undefined [](start = 23, length = 9)\r\n\r\nWas probably fine.",
        "createdAt" : "2017-08-14T17:52:00Z",
        "updatedAt" : "2017-08-14T20:05:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "1ef11d16-100b-4f48-a192-63fe0306f7a8",
        "parentId" : "9a3b5ac5-1b32-4e5f-aff2-090c68c32bf4",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "So -- leave it, or change it like this PR does?",
        "createdAt" : "2017-08-14T20:42:41Z",
        "updatedAt" : "2017-08-14T20:42:41Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "dfab71d3-cee0-46b2-b116-4256e21b1b6a",
        "parentId" : "9a3b5ac5-1b32-4e5f-aff2-090c68c32bf4",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "In `master`, whichever is more consistent with the other requests.  My impression is that it's `undefined`.  In `release-2.5`, whichever it used to return (also `undefined`?).",
        "createdAt" : "2017-08-14T21:01:33Z",
        "updatedAt" : "2017-08-14T21:01:34Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "630d90504d003f093d38b08b09a493bef2bc9152",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +670,674 @@\n            if (!occurrences) {\n                return undefined;\n            }\n"
  },
  {
    "id" : "abf68951-33ec-403d-b9ce-04617e4f12c1",
    "prId" : 17728,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17728#pullrequestreview-55645166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd2a5b3d-3790-4f31-997c-fbd0f6f555e4",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "👍 ",
        "createdAt" : "2017-08-10T19:49:29Z",
        "updatedAt" : "2017-08-14T20:25:33Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "87a1a0ba586b736069ebf2b4ca043142f6237426",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +717,721 @@\n            if (!documentHighlights) {\n                return emptyArray;\n            }\n"
  },
  {
    "id" : "22bdb210-3df8-409a-a905-acb788e4c17b",
    "prId" : 17728,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17728#pullrequestreview-55645220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc426d21-a963-4bf1-a42a-10af37aa077c",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "👍 ",
        "createdAt" : "2017-08-10T19:49:40Z",
        "updatedAt" : "2017-08-14T20:25:33Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "87a1a0ba586b736069ebf2b4ca043142f6237426",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +627,631 @@            const definitions = project.getLanguageService().getTypeDefinitionAtPosition(file, position);\n            if (!definitions) {\n                return emptyArray;\n            }\n"
  },
  {
    "id" : "185d676c-7eed-4370-b3bf-0c09647c41f2",
    "prId" : 17728,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17728#pullrequestreview-56145902",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5543614-e274-4bbf-bd1b-014c6b45cb84",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "So we *are* okay with returning `undefined` on success?",
        "createdAt" : "2017-08-10T19:50:00Z",
        "updatedAt" : "2017-08-14T20:25:33Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "4e3046bf-a499-4529-8f57-d7b2c0ef66f5",
        "parentId" : "e5543614-e274-4bbf-bd1b-014c6b45cb84",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "We don't really have a way to return a `ReferencesResponseBody` if the cursor wasn't at a valid location. It would be nice if we had some way to indicate a non-result in a way that's distinguishable from a crash in services.",
        "createdAt" : "2017-08-14T17:29:35Z",
        "updatedAt" : "2017-08-14T20:25:33Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "87a1a0ba586b736069ebf2b4ca043142f6237426",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +904,908 @@        }\n\n        private getReferences(args: protocol.FileLocationRequestArgs, simplifiedResult: boolean): protocol.ReferencesResponseBody | undefined | ReadonlyArray<ReferencedSymbol> {\n            const file = toNormalizedPath(args.file);\n            const projects = this.getProjects(args);"
  },
  {
    "id" : "41b687b3-b74c-4c93-af3f-8cfedff65022",
    "prId" : 17728,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17728#pullrequestreview-56145295",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65987603-a661-459a-a98a-7b1edc84f27f",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I would have thought we'd want to return `emptyArray` when `!completions`.",
        "createdAt" : "2017-08-10T19:50:47Z",
        "updatedAt" : "2017-08-14T20:25:33Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "e6175576-12fa-47f0-931d-ef0b4d911c4e",
        "parentId" : "65987603-a661-459a-a98a-7b1edc84f27f",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`mapDefined` always returns a defined result.",
        "createdAt" : "2017-08-14T17:27:11Z",
        "updatedAt" : "2017-08-14T20:25:33Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "87a1a0ba586b736069ebf2b4ca043142f6237426",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +1177,1181 @@            const completions = project.getLanguageService().getCompletionsAtPosition(file, position);\n            if (simplifiedResult) {\n                return mapDefined(completions && completions.entries, entry => {\n                    if (completions.isMemberCompletion || (entry.name.toLowerCase().indexOf(prefix.toLowerCase()) === 0)) {\n                        const { name, kind, kindModifiers, sortText, replacementSpan } = entry;"
  },
  {
    "id" : "980952e4-11eb-42bb-8ee3-c470b8c24c7d",
    "prId" : 17165,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17165#pullrequestreview-55640610",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c986f32-b598-445a-9a89-8271b37f9493",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Missed one on line 812?",
        "createdAt" : "2017-08-10T19:31:02Z",
        "updatedAt" : "2017-08-10T19:31:02Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bf8ef74e5d00744c99cc051d29366da4ac8801f",
    "line" : 145,
    "diffHunk" : "@@ -1,1 +816,820 @@                    return {\n                        info: renameInfo,\n                        locs: emptyArray\n                    };\n                }"
  },
  {
    "id" : "8c892940-2828-4472-9f84-ee0d2fb61f32",
    "prId" : 17165,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17165#pullrequestreview-55640962",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd87c7c8-855a-403d-9e5b-b5295cdee918",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Line 627?",
        "createdAt" : "2017-08-10T19:32:29Z",
        "updatedAt" : "2017-08-10T19:32:29Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bf8ef74e5d00744c99cc051d29366da4ac8801f",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +618,622 @@        }\n\n        private getTypeDefinition(args: protocol.FileLocationRequestArgs): ReadonlyArray<protocol.FileSpan> {\n            const { file, project } = this.getFileAndProject(args);\n            const scriptInfo = project.getScriptInfoForNormalizedPath(file);"
  },
  {
    "id" : "67ca80c3-cc4f-43b7-af6c-d8b9192bdebf",
    "prId" : 17165,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17165#pullrequestreview-55641065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e237a671-1920-4a08-bb14-ba7463ec712f",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Line 717?",
        "createdAt" : "2017-08-10T19:33:01Z",
        "updatedAt" : "2017-08-10T19:33:01Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bf8ef74e5d00744c99cc051d29366da4ac8801f",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +708,712 @@        }\n\n        private getDocumentHighlights(args: protocol.DocumentHighlightsRequestArgs, simplifiedResult: boolean): ReadonlyArray<protocol.DocumentHighlightsItem> | ReadonlyArray<DocumentHighlights> {\n            const { file, project } = this.getFileAndProject(args);\n            const scriptInfo = project.getScriptInfoForNormalizedPath(file);"
  },
  {
    "id" : "92f328c5-adfa-4949-9412-a7bed1c4fe0a",
    "prId" : 15260,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/15260#pullrequestreview-33617621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a816df0-e7ee-4a64-b97e-60d7c7586b95",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "So this always returns false for configured projects (as the above `if` is only entered for inferred/external projects)?",
        "createdAt" : "2017-04-19T20:25:58Z",
        "updatedAt" : "2017-04-20T00:49:51Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "20d855ce-7cea-4852-9556-663be7b7ac3e",
        "parentId" : "5a816df0-e7ee-4a64-b97e-60d7c7586b95",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "yes. program.getSemanticDiagnostics should do the right thing for configured projects.",
        "createdAt" : "2017-04-19T20:33:25Z",
        "updatedAt" : "2017-04-20T00:49:51Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "c4fad2fa-f4c3-429a-9d28-73594665be6c",
        "parentId" : "5a816df0-e7ee-4a64-b97e-60d7c7586b95",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "OK. Again, maybe clarify in comments in the function then. It seems this only returns `true` for a narrow subset of files that may actually have semantic checking skipped eventually.",
        "createdAt" : "2017-04-19T20:57:10Z",
        "updatedAt" : "2017-04-20T00:49:51Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      }
    ],
    "commit" : "420908eb6300e39d276680f8bbcdde7a93913650",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +45,49 @@            return scriptInfo && !scriptInfo.isJavaScript();\n        }\n        return false;\n    }\n"
  },
  {
    "id" : "f68f4c84-48f4-42d2-bce9-47370a8cccf7",
    "prId" : 14716,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/14716#pullrequestreview-27916080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ac3181e-e8ea-4db8-830c-55b393b4741c",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "So if they're using a \"configured\" project (e.g. a lot of our solutions for issues such as \"too much JavaScript\" involve adding a tsconfig with `\"allowJs\": true` and settings some exclude dirs), will they get semantic diagnostics again? If its a configured project with \"allowJs\" set and it `isJsOnlyProject`, then it should also suppress semantic diagnostics.",
        "createdAt" : "2017-03-18T05:27:16Z",
        "updatedAt" : "2017-03-18T05:27:16Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "7e7abe1d-af7e-4276-ba7a-91bff0b7206f",
        "parentId" : "1ac3181e-e8ea-4db8-830c-55b393b4741c",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "correct. if you have configured project the check is `false`, and the normal checking for semantic errors proceed. this is only if you have external or inferred project, with only .js files.",
        "createdAt" : "2017-03-20T17:45:40Z",
        "updatedAt" : "2017-03-20T17:45:40Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "a710e9433b28c0c9b692ad6244415777ec3d565d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +27,31 @@\n    function shouldSkipSematicCheck(project: Project) {\n        return (project.projectKind === ProjectKind.Inferred || project.projectKind === ProjectKind.External) && project.isJsOnlyProject();\n    }\n"
  },
  {
    "id" : "6543f297-82b0-40ba-9741-3f81718eab3c",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b04f158a-06c9-4f0b-9c78-8d127358fc4f",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Casted object literal",
        "createdAt" : "2017-06-06T21:57:19Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +550,554 @@\n        private convertToDiagnosticsWithLinePositionFromDiagnosticFile(diagnostics: Diagnostic[]) {\n            return diagnostics.map(d => <protocol.DiagnosticWithLinePosition>{\n                message: flattenDiagnosticMessageText(d.messageText, this.host.newLine),\n                start: d.start,"
  },
  {
    "id" : "65084c5f-f439-41a0-aee2-22fcd1c91deb",
    "prId" : 10185,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/10185#pullrequestreview-3790440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ce74515-bb8c-4ad1-9fc1-901517f07100",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i do not see the definition of the request for this command in protocol.d.ts\n",
        "createdAt" : "2016-10-12T00:16:19Z",
        "updatedAt" : "2016-10-12T00:35:40Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "3cbedef6-dd92-4563-9d62-bdeeb1e8be19",
        "parentId" : "7ce74515-bb8c-4ad1-9fc1-901517f07100",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can you also add a test for it.\n",
        "createdAt" : "2016-10-12T00:19:34Z",
        "updatedAt" : "2016-10-12T00:35:40Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "e7094765-9533-410b-9fbb-89cd3c3e7e4e",
        "parentId" : "7ce74515-bb8c-4ad1-9fc1-901517f07100",
        "authorId" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "body" : "There are no arguments for the command so no need for a request\n",
        "createdAt" : "2016-10-12T00:24:24Z",
        "updatedAt" : "2016-10-12T00:35:40Z",
        "lastEditedBy" : "e6f79360-cd8f-4784-930e-45d1129a1eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b98d00155674ff746143357b226d762bcacc33a",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +138,142 @@        export const GetCodeFixes = \"getCodeFixes\";\n        export const GetCodeFixesFull = \"getCodeFixes-full\";\n        export const GetSupportedCodeFixes = \"getSupportedCodeFixes\";\n    }\n"
  },
  {
    "id" : "6f10ae5d-1a54-4c0a-9e0b-3c13adb55a82",
    "prId" : 9353,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f798026-2b1d-440f-9564-4ab135af73c7",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can we limit the creation of the new object to only if the replacement span exists. this avoids creating garbage in the common case (non-module name completion)\n",
        "createdAt" : "2016-09-02T22:42:37Z",
        "updatedAt" : "2016-09-06T19:49:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "548e143ee05036af7f253bf88f838d31e701f1b7",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +781,785 @@                    const { name, kind, kindModifiers, sortText, replacementSpan } = entry;\n\n                    let convertedSpan: protocol.TextSpan = undefined;\n                    if (replacementSpan) {\n                        convertedSpan = {"
  },
  {
    "id" : "d3b01093-8252-4cea-8a3e-3f980a2b81ff",
    "prId" : 7954,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9aeab18d-5cc2-4a74-8edc-f3f2aa2a63d1",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "~~use `ts.getScriptKindFromFileName` instead.~~\n",
        "createdAt" : "2016-04-19T19:03:01Z",
        "updatedAt" : "2016-04-19T22:20:51Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "1bb4e578-becc-4aec-998f-6479f6e64e87",
        "parentId" : "9aeab18d-5cc2-4a74-8edc-f3f2aa2a63d1",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "never mind.\n",
        "createdAt" : "2016-04-19T19:03:20Z",
        "updatedAt" : "2016-04-19T22:20:51Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc58e2d7eb144f0b2ff89e6a6685fb4deaa24fde",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +968,972 @@            [CommandNames.Open]: (request: protocol.Request) => {\n                const openArgs = <protocol.OpenRequestArgs>request.arguments;\n                let scriptKind: ScriptKind;\n                switch (openArgs.scriptKindName) {\n                    case \"TS\":"
  },
  {
    "id" : "0480879d-1aa7-41c7-81b7-76eea2ca9f21",
    "prId" : 7954,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b5eff1d-226d-48a9-bc0f-ea2d4930d67c",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Shouldn't this be like `scriptKind = ScriptKind[openArgs.scriptKindName]` ?\n\nI mean how many places will you need to touch if you create a new `ScriptKind`? You want to make it less error-prone.\n",
        "createdAt" : "2016-04-20T11:03:59Z",
        "updatedAt" : "2016-04-20T11:03:59Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc58e2d7eb144f0b2ff89e6a6685fb4deaa24fde",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +981,985 @@                    case \"JSX\":\n                        scriptKind = ScriptKind.JSX;\n                        break;\n                }\n                this.openClientFile(openArgs.file, openArgs.fileContent, scriptKind);"
  },
  {
    "id" : "f23de401-5dfc-4e81-b3cf-b6cc9bb3ef5c",
    "prId" : 7486,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a081f46-134d-4385-8e6a-f14b05e9ee7e",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "can we instead make getProjectForFile return undefined?\n",
        "createdAt" : "2016-06-09T23:44:20Z",
        "updatedAt" : "2016-06-15T23:52:18Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "d0616b2b-8d54-4988-a914-47155ae23e08",
        "parentId" : "5a081f46-134d-4385-8e6a-f14b05e9ee7e",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "We still need the `getProjectInfo` call to work, because the client needs to know what files are in the project and is the language service of the project disabled or not. So it's not good idea to never return the project when the language service was disabled.\n",
        "createdAt" : "2016-06-10T07:15:24Z",
        "updatedAt" : "2016-06-15T23:52:18Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "550d91249b1c4c72b6b0eef1fa275794c75b9faa",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +336,340 @@            const file = ts.normalizePath(fileName);\n            const project = this.projectService.getProjectForFile(file);\n            if (!project || project.languageServiceDiabled) {\n                throw Errors.NoProject;\n            }"
  },
  {
    "id" : "20b1bd9b-7e0f-438f-88ae-2b0df6846d09",
    "prId" : 7353,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "109cee25-c6a0-4667-892c-236399f3c4ce",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "When will one of these be undefined?\n",
        "createdAt" : "2016-04-07T22:56:00Z",
        "updatedAt" : "2016-04-21T21:58:21Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "4f29514c-96eb-4c59-a8b2-f99cee6a65ad",
        "parentId" : "109cee25-c6a0-4667-892c-236399f3c4ce",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "Originally it might be undefined when `getReferencesAtPosition` returns undefined. Now it is not likely, though this is just to be conservative. \n",
        "createdAt" : "2016-04-08T19:48:37Z",
        "updatedAt" : "2016-04-21T21:58:21Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "8709975f0bba68f4a53d0604c4e0cd0a4f72c3e6",
    "line" : 194,
    "diffHunk" : "@@ -1,1 +547,551 @@\n            function areReferencesResponseItemsForTheSameLocation(a: protocol.ReferencesResponseItem, b: protocol.ReferencesResponseItem) {\n                if (a && b) {\n                    return a.file === b.file &&\n                        a.start === b.start &&"
  },
  {
    "id" : "5364cfb0-4c53-482c-9185-9ab8ce311b26",
    "prId" : 7353,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d445275-c561-441e-8855-3eccf9e6a261",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Why deduplicate again?\n",
        "createdAt" : "2016-04-09T01:13:41Z",
        "updatedAt" : "2016-04-21T21:58:21Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "8709975f0bba68f4a53d0604c4e0cd0a4f72c3e6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +542,546 @@                refs,\n                symbolName: nameText,\n                symbolStartOffset: nameColStart,\n                symbolDisplayString: displayString\n            };"
  },
  {
    "id" : "0a4e93b1-7e1a-4ba1-93c9-76606f31787b",
    "prId" : 5047,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9137b6f-67a1-4b09-898d-c3c40eff54b2",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "could be \n\n``` ts\nreturn compareValues(a.sortText, b.sortText) || compareValues(a.name, b.name);\n```\n",
        "createdAt" : "2015-09-30T23:23:12Z",
        "updatedAt" : "2015-10-01T00:05:10Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "526ba80a-08e5-41c8-b8ce-b5a70fa6d75a",
        "parentId" : "f9137b6f-67a1-4b09-898d-c3c40eff54b2",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "currently it mimics comparison in [CompletionEntry](http://index/#Microsoft.CodeAnalysis.Features/Completion/CompletionItem.cs,178) in Roslyn: compare sorts texts (which are set to `name` if undefined), if they are equal - compare names. If you want it to become one liner like\n\n```\nreturh (a.sortText || a.name).localeCompare(a.sortText || a.name) || a.name.localeCompare(b.name)\n```\n\nI can certainly do it\n",
        "createdAt" : "2015-09-30T23:36:51Z",
        "updatedAt" : "2015-10-01T00:05:10Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "25b6b99584f30f8083aebe0a2301039b3121f37d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +675,679 @@                }\n                return result;\n            }, []).sort((a, b) => {\n                const sortText1 = a.sortText || a.name;\n                const sortText2 = b.sortText || b.name;"
  },
  {
    "id" : "6a6d3902-96aa-4f77-b922-1be9015fa668",
    "prId" : 5033,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "353e8b06-3efe-443a-ba0e-dfcf8874478b",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "we already have similar function [getIndentationString](https://github.com/Microsoft/TypeScript/blob/master/src/services/formatting/formatting.ts#L1071). Can it be used instead to avoid code duplication?\n",
        "createdAt" : "2015-09-30T16:43:10Z",
        "updatedAt" : "2015-09-30T16:43:10Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f8e4fa6bd1697c6ec82afc269ee7a51640ce78f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +22,26 @@    }\n\n    export function generateIndentString(n: number, editorOptions: EditorOptions): string {\n        if (editorOptions.ConvertTabsToSpaces) {\n            return generateSpaces(n);"
  },
  {
    "id" : "be2c91bf-6259-41bb-acaa-7f88ca04dbf6",
    "prId" : 5033,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e207654b-ae91-4966-a7e3-ac7c2074b220",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "we should already have something that is kind of doing the same thing [findFirstNonWhitespaceCharacterAndColumn](https://github.com/Microsoft/TypeScript/blob/master/src/services/formatting/smartIndenter.ts#L375). Can you check if it can be reused here?\n",
        "createdAt" : "2015-09-30T16:46:42Z",
        "updatedAt" : "2015-09-30T16:46:42Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f8e4fa6bd1697c6ec82afc269ee7a51640ce78f",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +625,629 @@                            var preferredIndent = compilerService.languageService.getIndentationAtPosition(file, position, editorOptions);\n                            var hasIndent = 0;\n                            for (var i = 0, len = lineText.length; i < len; i++) {\n                                if (lineText.charAt(i) == \" \") {\n                                    hasIndent++;"
  },
  {
    "id" : "f8a636fd-0547-4c76-9632-0434b7b7b260",
    "prId" : 2966,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a67b7d7e-1f08-4bb0-a81b-b92eb72c8058",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Space before `{`\n",
        "createdAt" : "2015-05-01T21:03:13Z",
        "updatedAt" : "2015-05-04T17:02:51Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fc6142def80554c9be15757a9fd29234cbfc778",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +309,313 @@        }\n\n        getOccurrences(line: number, offset: number, fileName: string): protocol.OccurrencesResponseItem[]{\n            fileName = ts.normalizePath(fileName);\n            let project = this.projectService.getProjectForFile(fileName);"
  },
  {
    "id" : "a1f9d02a-0a6e-4baf-9af3-8ec50e4ae80e",
    "prId" : 2666,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3423b3a2-5e5e-4ffd-ae36-ebd349f59f1a",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "looks like you are missing the actual handling of the command in onMessage\n",
        "createdAt" : "2015-04-08T07:02:36Z",
        "updatedAt" : "2015-04-09T00:02:47Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "d62330be-9396-4782-8faa-da59248cae5f",
        "parentId" : "3423b3a2-5e5e-4ffd-ae36-ebd349f59f1a",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Yup, just sent that part out. I'm not that familiar with the server so I'm still getting a feel for things.\n",
        "createdAt" : "2015-04-08T07:38:25Z",
        "updatedAt" : "2015-04-09T00:02:47Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "180f17d088215da098612f9f5b37d8ecc0ef058f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +90,94 @@        export var NavBar = \"navbar\";\n        export var Navto = \"navto\";\n        export var Occurrences = \"occurrences\";\n        export var Open = \"open\";\n        export var Quickinfo = \"quickinfo\";"
  },
  {
    "id" : "4935b1a0-9636-4fab-9a79-512c5c6c4b61",
    "prId" : 2666,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab907aa1-b675-45ed-9ddb-69c02f3ebc0d",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I feel like a lot of these names need cleaning up.  Certain names match VS, but do not match the casing there (like Quickinfo vs. QuickInfo).  Other names are inconsistently capitalized (\"NavBar\" vs \"Navto\").  Some names are abbreviated, some are not.   Some names match Roslyn, some do not (\"GetOccurrences\" vs \"GetHighlights\").  \n",
        "createdAt" : "2015-04-08T08:12:35Z",
        "updatedAt" : "2015-04-09T00:02:47Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "3e5a71de-87f5-43f1-bcf7-ac2b849cb277",
        "parentId" : "ab907aa1-b675-45ed-9ddb-69c02f3ebc0d",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : ":+1: I'd support fixing this up, but in a different PR.\n",
        "createdAt" : "2015-04-08T08:18:16Z",
        "updatedAt" : "2015-04-09T00:02:47Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "180f17d088215da098612f9f5b37d8ecc0ef058f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +92,96 @@        export var Occurrences = \"occurrences\";\n        export var Open = \"open\";\n        export var Quickinfo = \"quickinfo\";\n        export var References = \"references\";\n        export var Reload = \"reload\";"
  },
  {
    "id" : "0fc85fe1-78f4-48cb-91b3-923916408e10",
    "prId" : 2480,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3d0cd01-fb2b-4c85-9139-c86288004999",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "You guys seem to do something similar throughout the function, you might want to consider just making a helper that returns a `{start: number, end: number}`.\n",
        "createdAt" : "2015-03-24T17:32:13Z",
        "updatedAt" : "2015-03-25T11:32:39Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c66571b273e46769f33ad379801ff05c9c92f07f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +598,602 @@                applicableSpan: {\n                    start: compilerService.host.positionToLineOffset(file, span.start),\n                    end: compilerService.host.positionToLineOffset(file, span.start + span.length)\n                },\n                selectedItemIndex: helpItems.selectedItemIndex,"
  },
  {
    "id" : "9815103b-de05-48a4-8eb7-6292364c1f43",
    "prId" : 2480,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3ecc733-a3cd-427a-bd0a-7e0fc1592551",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "Put the comment on the wrong PR. so putting it here again :)\n\nCan you also update client.ts and add a test for signature help in tests\\cases\\fourslash\\server. I would copy a signature help test from tests\\cases\\fourslash to start.\n",
        "createdAt" : "2015-03-24T20:19:49Z",
        "updatedAt" : "2015-03-25T11:32:39Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "c66571b273e46769f33ad379801ff05c9c92f07f",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +821,825 @@                        break;\n                    }\n                    case CommandNames.SignatureHelp: {\n                        var signatureHelpArgs = <protocol.SignatureHelpRequestArgs>request.arguments;\n                        response = this.getSignatureHelpItems(signatureHelpArgs.line, signatureHelpArgs.offset, signatureHelpArgs.file);"
  },
  {
    "id" : "94772890-7a92-46e3-9de2-839bbb0c8e85",
    "prId" : 2450,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9288028c-bf98-4c7c-8d8e-86b74fd745ec",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "sort should be alphabetical but not case sensitive, `a.name.toLowerCase().localeCompare(b.name.toLowerCase())`\n",
        "createdAt" : "2015-03-24T01:12:20Z",
        "updatedAt" : "2015-03-24T21:11:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "48482071f6af1b7ae929bd3815afaef45e98e3c6",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +555,559 @@                }\n                return result;\n            }, []).sort((a, b) => a.name.localeCompare(b.name));\n        }\n"
  },
  {
    "id" : "3874b19d-e37f-4123-a536-4ea14c1c1671",
    "prId" : 2258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "217d6df4-e8d5-466c-af2d-7947ba76fbeb",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Factor this out into a conditional\n",
        "createdAt" : "2015-03-08T02:04:17Z",
        "updatedAt" : "2015-03-09T18:58:53Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "37c6f69f015c3da3c709e2bae0786aa55a10a045",
    "line" : null,
    "diffHunk" : "@@ -1,1 +843,847 @@                    var leader = \"Elapsed time (in milliseconds)\";\n                    if (!responseRequired) {\n                        leader = \"Async elapsed time (in milliseconds)\";\n                    }\n                    this.logger.msg(leader + \": \" + elapsedMs.toFixed(4).toString(), \"Perf\");"
  },
  {
    "id" : "b0366d45-d279-4682-a3e7-54713596c590",
    "prId" : 2258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99256e44-ad22-4e1b-a4c6-08372142769c",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Can we comment what these lines are doing?  It's not at all clear to me.\n",
        "createdAt" : "2015-03-09T07:55:37Z",
        "updatedAt" : "2015-03-09T18:58:53Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "37c6f69f015c3da3c709e2bae0786aa55a10a045",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +473,477 @@            // add edits necessary to properly indent the current line.\n            if ((key == \"\\n\") && ((!edits) || (edits.length == 0) || allEditsBeforePos(edits, position))) {\n                var scriptInfo = compilerService.host.getScriptInfo(file);\n                if (scriptInfo) {\n                    var lineInfo = scriptInfo.getLineInfo(line);"
  },
  {
    "id" : "3147471f-9a5a-4baa-ae2d-e443770de557",
    "prId" : 2258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a17c543-0925-48f3-b218-7bba050002a0",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Parens around subexpressions aren't necessary.\n",
        "createdAt" : "2015-03-09T07:55:46Z",
        "updatedAt" : "2015-03-09T18:58:53Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "8d06e84d-c4a8-4065-9d02-0d9574d6c8fc",
        "parentId" : "4a17c543-0925-48f3-b218-7bba050002a0",
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Why do you only need to do the below if you have a leaf for this line?  What would it mean if you didn't?\n",
        "createdAt" : "2015-03-09T08:01:17Z",
        "updatedAt" : "2015-03-09T18:58:53Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "37c6f69f015c3da3c709e2bae0786aa55a10a045",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +476,480 @@                if (scriptInfo) {\n                    var lineInfo = scriptInfo.getLineInfo(line);\n                    if (lineInfo && (lineInfo.leaf) && (lineInfo.leaf.text)) {\n                        var lineText = lineInfo.leaf.text;\n                        if (lineText.search(\"\\\\S\") < 0) {"
  },
  {
    "id" : "040fe14c-1222-4ba5-b55c-8e7e55662212",
    "prId" : 2258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77f73d40-7ffa-4a38-b12b-6620fb96134c",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "can we break these up into separate checks.  This is fairly confusing to read.\n",
        "createdAt" : "2015-03-09T07:56:52Z",
        "updatedAt" : "2015-03-09T18:58:53Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "37c6f69f015c3da3c709e2bae0786aa55a10a045",
    "line" : null,
    "diffHunk" : "@@ -1,1 +472,476 @@            // only to the previous line.  If all this is true, then\n            // add edits necessary to properly indent the current line.\n            if ((key == \"\\n\") && ((!edits) || (edits.length == 0) || allEditsBeforePos(edits, position))) {\n                var scriptInfo = compilerService.host.getScriptInfo(file);\n                if (scriptInfo) {"
  },
  {
    "id" : "2e1acce5-2702-4980-aaad-5bb793765265",
    "prId" : 2258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27ea0863-deb5-4239-92b9-d5932a064c27",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Can we add a 'logIfNecessary' helper.  Tihs pattern is repeated in several places it seems.\n",
        "createdAt" : "2015-03-09T07:57:40Z",
        "updatedAt" : "2015-03-09T18:58:53Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "37c6f69f015c3da3c709e2bae0786aa55a10a045",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +727,731 @@\n        onMessage(message: string) {\n            if (this.logger.isVerbose()) {\n                this.logger.info(\"request: \" + message);\n                var start = process.hrtime();                "
  },
  {
    "id" : "d4e61fba-242f-4d4e-bbe6-15f801fb756a",
    "prId" : 2258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fae31e14-7c0a-4ca2-adb0-ef8361182830",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "I'm not really understanding why 'getFormattingEditsAfterKeystroke' needs to know anything about an indent position.\n",
        "createdAt" : "2015-03-09T08:03:14Z",
        "updatedAt" : "2015-03-09T18:58:53Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "37c6f69f015c3da3c709e2bae0786aa55a10a045",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +486,490 @@                                ConvertTabsToSpaces: true,\n                            };\n                            var indentPosition =\n                                compilerService.languageService.getIndentationAtPosition(file, position, editorOptions);\n                            for (var i = 0, len = lineText.length; i < len; i++) {"
  },
  {
    "id" : "9c6077b3-594b-4ef5-9ecd-748a515bf793",
    "prId" : 2258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f035c0c1-6c10-45b6-b778-62b36bc66b43",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Hrmm.. This seems suspect.  Why munge with the formatting edits the LS already produced?  If the LS edits are correct, why touch them?  If they're not correct, why not have the LS itself produce them properly.  Otherwise, won't this affects hosts who call into the LS directly?\n",
        "createdAt" : "2015-03-09T08:04:22Z",
        "updatedAt" : "2015-03-09T18:58:53Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "37c6f69f015c3da3c709e2bae0786aa55a10a045",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +496,500 @@                                }\n                            }\n                            if (indentPosition > 0) {\n                                var spaces = generateSpaces(indentPosition);\n                                edits.push({ span: ts.createTextSpanFromBounds(position, position), newText: spaces });"
  },
  {
    "id" : "6b27d2a6-42f2-47ff-b8f5-4862df40a7b7",
    "prId" : 2125,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93847e84-d155-46bf-ae30-e3be6cdba859",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "We usually don't include parens around the parameter list for single-argument arrow functions. That occurs here, line 201, and 188.\n",
        "createdAt" : "2015-02-24T07:52:42Z",
        "updatedAt" : "2015-02-24T08:08:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "68049ea5035884216b45215d6d2dcfa37619e798",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +565,569 @@                    this.changeSeq++;\n                }\n                this.updateProjectStructure(this.changeSeq, (n) => n == this.changeSeq);\n            }\n        }"
  },
  {
    "id" : "cc402ad0-204a-4a0d-b775-2e2d7afd020c",
    "prId" : 2125,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb109120-1511-49c5-a98e-94fbe77c30a1",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`formattedDiagnostics` might be clearer, as well as `formatDiagnostic`\n",
        "createdAt" : "2015-02-24T07:53:28Z",
        "updatedAt" : "2015-02-24T08:08:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "68049ea5035884216b45215d6d2dcfa37619e798",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +199,203 @@                var diags = project.compilerService.languageService.getSyntacticDiagnostics(file);\n                if (diags) {\n                    var bakedDiags = diags.map((diag) => formatDiag(file, project, diag));\n                    this.event({ file: file, diagnostics: bakedDiags }, \"syntaxDiag\");\n                }"
  },
  {
    "id" : "7873d028-33df-4e8e-9058-8e08b332ba41",
    "prId" : 2125,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecc8794b-2452-48aa-bc5e-c4345b6488bc",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Condense `file: file` into a shorthand property assignment. If you renamed `diags` to `diagnostics`, you could do the same:\n\n``` TypeScript\nthis.event({ file, diagnostics }, \"syntaxDiag\")\n```\n",
        "createdAt" : "2015-02-24T08:02:55Z",
        "updatedAt" : "2015-02-24T08:08:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "68049ea5035884216b45215d6d2dcfa37619e798",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +200,204 @@                if (diags) {\n                    var bakedDiags = diags.map((diag) => formatDiag(file, project, diag));\n                    this.event({ file: file, diagnostics: bakedDiags }, \"syntaxDiag\");\n                }\n            }"
  },
  {
    "id" : "75233ec1-9f88-43d1-8a39-7a89daaf1cb2",
    "prId" : 2125,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a0c6c37-a23a-4bc4-8b4c-27409d1d97ac",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "you can use short-hand property assignment\n\n```\n{ file, diagnostics: bakedDiags }\n```\n",
        "createdAt" : "2015-02-25T18:51:42Z",
        "updatedAt" : "2015-02-25T18:51:42Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "68049ea5035884216b45215d6d2dcfa37619e798",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +187,191 @@                if (diags) {\n                    var bakedDiags = diags.map((diag) => formatDiag(file, project, diag));\n                    this.event({ file: file, diagnostics: bakedDiags }, \"semanticDiag\");\n                }\n            }"
  },
  {
    "id" : "1dd731c0-ffa6-41e4-9fc4-b67400b4605e",
    "prId" : 2125,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1131d0c6-7311-4c62-a2ec-6c95b95b8227",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "if you rename `bakedDiags` to `diagnostics` you can use it as a short-hand (see below)\n",
        "createdAt" : "2015-02-25T18:52:21Z",
        "updatedAt" : "2015-02-25T18:52:21Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "68049ea5035884216b45215d6d2dcfa37619e798",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +186,190 @@\n                if (diags) {\n                    var bakedDiags = diags.map((diag) => formatDiag(file, project, diag));\n                    this.event({ file: file, diagnostics: bakedDiags }, \"semanticDiag\");\n                }"
  },
  {
    "id" : "447a7d79-5ddd-4c99-b918-b75b185f1b1e",
    "prId" : 2125,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cb5dfee-19fb-4711-8b78-10ddca420169",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "I would prefer full name of the variable so that it is more consistent with other part of the codebase\n",
        "createdAt" : "2015-02-25T18:53:10Z",
        "updatedAt" : "2015-02-25T18:53:10Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "68049ea5035884216b45215d6d2dcfa37619e798",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +183,187 @@        semanticCheck(file: string, project: Project) {\n            try {\n                var diags = project.compilerService.languageService.getSemanticDiagnostics(file);\n\n                if (diags) {"
  },
  {
    "id" : "e533072b-09dc-406f-b468-e93b5953ea47",
    "prId" : 2106,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "099d54ca-54df-41a6-8642-3c1c782a5135",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i do not understand how this is diffrent from just throwing an error in getQuickInfo?\n",
        "createdAt" : "2015-02-23T17:40:50Z",
        "updatedAt" : "2015-02-23T17:40:50Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "47d265b20ba8020b4b2c8035bc2dae975bc5812c",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +715,719 @@                        var quickinfoArgs = <protocol.FileLocationRequestArgs>request.arguments;\n                        response = this.getQuickInfo(quickinfoArgs.line, quickinfoArgs.col, quickinfoArgs.file);\n                        if (!response) {\n                            errorMessage = \"No info at this location\";\n                        }"
  },
  {
    "id" : "88de4598-238b-4ab8-af14-ee147b58b528",
    "prId" : 2106,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb34f462-4659-4c89-836d-c96a4dd1f852",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "nit: can you spell out sequence in variable names\n",
        "createdAt" : "2015-02-23T18:20:03Z",
        "updatedAt" : "2015-02-23T18:20:03Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "47d265b20ba8020b4b2c8035bc2dae975bc5812c",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +203,207 @@        }\n\n        updateProjectStructure(seq: number, matchSeq: (seq: number) => boolean, ms = 1500) {\n            setTimeout(() => {\n                if (matchSeq(seq)) {"
  },
  {
    "id" : "e3c87930-1cdf-499d-9758-c8dab3649f04",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbc196f0-bee3-4a70-a070-b8c4a8d69d36",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "return compareNumber(...) || compareNumber(...)\n",
        "createdAt" : "2015-02-16T22:52:15Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@        }\n        else if (a.file == b.file) {\n            var n = compareNumber(a.start.line, b.start.line);\n            if (n == 0) {\n                return compareNumber(a.start.col, b.start.col);"
  },
  {
    "id" : "4a2f9539-614a-4905-b7b9-e2e41075c697",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afd89b5b-c8a9-4dbb-862e-652cbadd1baf",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Why are we sorting items here?  \n",
        "createdAt" : "2015-02-16T22:52:28Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +54,58 @@    }\n\n    function sortNavItems(items: ts.NavigateToItem[]) {\n        return items.sort((a, b) => {\n            if (a.matchKind < b.matchKind) {"
  },
  {
    "id" : "609455a3-66ca-4204-8480-195386a8ff9a",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e34b740a-cd15-439d-a22b-326309778129",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Change what\n",
        "createdAt" : "2015-02-16T22:52:36Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +101,105 @@\n    export module CommandNames {\n        export var Change = \"change\";\n        export var Close = \"close\";\n        export var Completions = \"completions\";"
  },
  {
    "id" : "53860f96-c921-41ce-b13d-c1f10d24c505",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "473e2abd-3e0e-4061-82c9-d941fa2beec0",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Why not name thse as per our own API?  i.e.  getCompletionsAtPosition?\n",
        "createdAt" : "2015-02-16T22:52:58Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +103,107 @@        export var Change = \"change\";\n        export var Close = \"close\";\n        export var Completions = \"completions\";\n        export var CompletionDetails = \"completionEntryDetails\";\n        export var Definition = \"definition\";"
  }
]