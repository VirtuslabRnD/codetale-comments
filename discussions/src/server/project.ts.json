[
  {
    "id" : "70e78705-6355-43b5-bf9c-bba5440a50f7",
    "prId" : 40890,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40890#pullrequestreview-500810668",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fd28f25-d21b-4dc5-b678-539eae2bdb8a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Slightly afraid of all the places that are going to need to be patched up in the future to check like this, but I guess that's programming",
        "createdAt" : "2020-10-02T01:13:26Z",
        "updatedAt" : "2020-10-02T01:13:26Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ede213dcea149e3eabf21c79b47974b7dc2b070",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1623,1627 @@        /*@internal*/\n        getPackageJsonsVisibleToFile(fileName: string, rootDir?: string): readonly PackageJsonInfo[] {\n            if (this.projectService.serverMode !== LanguageServiceMode.Semantic) return emptyArray;\n            return this.projectService.getPackageJsonsVisibleToFile(fileName, rootDir);\n        }"
  },
  {
    "id" : "4cec99ce-a181-46bf-ad49-660a087aedc4",
    "prId" : 40620,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/40620#pullrequestreview-492868499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8dc5a208-0817-458a-b14c-508226944335",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "internal please. also update the api baseline. thanks",
        "createdAt" : "2020-09-21T18:18:57Z",
        "updatedAt" : "2020-09-21T19:35:42Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b7c089a54f95936843f2944986ae3aa747e5d2b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1937,1941 @@\n        /*@internal*/\n        isEmpty() {\n            return !some(this.rootFileNames);\n        }"
  },
  {
    "id" : "9044b9ca-033d-4695-ac1d-cc768eaeb077",
    "prId" : 38923,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38923#pullrequestreview-433432517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d6a6028-7590-4d52-8e4f-2f66612a51d9",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Instead of hasNewProgram, should you be doing this if program hasAddedorRemovedFiles  instead? hasNewProgram = program structure not used completely which is almost always with the edits etc",
        "createdAt" : "2020-06-17T23:42:10Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "7c67e0d7-228e-42d3-8bb3-f3302fb0d0b6",
        "parentId" : "4d6a6028-7590-4d52-8e4f-2f66612a51d9",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I think that would work, good idea üëç ",
        "createdAt" : "2020-06-18T16:04:12Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "85c69385bb5d30c722685a0528f51c5b1ba0acf3",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +1011,1015 @@            if (hasAddedorRemovedFiles) {\n                if (!this.autoImportProviderHost) this.autoImportProviderHost = undefined;\n                this.autoImportProviderHost?.markAsDirty();\n            }\n            if (isFirstLoad) {"
  },
  {
    "id" : "9ee1c283-8730-483c-ba15-2669477c26e5",
    "prId" : 38923,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38923#pullrequestreview-433703564",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed28508a-d146-418a-a31a-1f2d333af625",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Instead of doing this why not set options.types = dependencyNames here for this project so program constructution auto includes them ? ",
        "createdAt" : "2020-06-18T00:10:56Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "d3bae53c-7078-4b09-b957-02d55ae6c30d",
        "parentId" : "ed28508a-d146-418a-a31a-1f2d333af625",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You can modify program's getAutoTypeDirectiveNames to this instead..\r\n```ts\r\n// Thats correct solution project\r\nconst typeReferences: string[] = !rootNames.length && projectReferences ?  emptyArray : getAutomaticTypeDirectiveNames(options, host) ;\r\n```",
        "createdAt" : "2020-06-18T00:16:07Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "a51a63fc-3421-4cc9-ad34-9a425f6b206e",
        "parentId" : "ed28508a-d146-418a-a31a-1f2d333af625",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Oh, I had to use this approach back when I was trying a single program for all projects‚Äô dependencies because there was no suitable `currentDirectory` that could resolve types in sibling projects with their own node_modules. But now that there‚Äôs one program per project, I think this will work.",
        "createdAt" : "2020-06-18T16:08:39Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "a1733aef-b7b2-4c1b-a190-cf08bb9149ac",
        "parentId" : "ed28508a-d146-418a-a31a-1f2d333af625",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Well... I think I would still need to resolve them here, because I need to check if the main program already contains that dependency, which is really easy when you have a resolved fileName (this happens just a few lines below your comment). Is there a better way to do that?",
        "createdAt" : "2020-06-18T17:46:01Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "08542d01-1892-4a59-b025-9e5e7b99caf0",
        "parentId" : "ed28508a-d146-418a-a31a-1f2d333af625",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "On AutoImportProvider Projhect override resolveTypeReferenceDirective to do `super.` thing and then if file is in main project return unresolved result otherwise return actual result?",
        "createdAt" : "2020-06-18T17:49:31Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "c0b4de5f-dcf2-4b20-8c4b-997b00c2fe16",
        "parentId" : "ed28508a-d146-418a-a31a-1f2d333af625",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You want to do it only for inferredTypeContainingFile though... if depA has typeReferenceDirective to depB and depB is already in project, you still want depA in the auto import provider to get correct types for depA as it probably depends on it",
        "createdAt" : "2020-06-18T17:53:17Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "da33219d-cc18-483a-bc9a-31ddcf380f97",
        "parentId" : "ed28508a-d146-418a-a31a-1f2d333af625",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "The reason I initially stopped using `Project.resolveTypeReferenceDirective` was because it created a weird watch state via the resolution cache, which ended up breaking things. When I switched to these utility methods it only slowed down by a couple ms per package.json and the watch issues were fixed. This approach seems to be working well, so I‚Äôm hesitant to reintroduce that complexity.",
        "createdAt" : "2020-06-18T18:09:56Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "4c55f504-68b6-4773-a3fc-3dd4b742abfa",
        "parentId" : "ed28508a-d146-418a-a31a-1f2d333af625",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think it was because you were watching at wrong time.. Infact resolutionCache is suppose to handle the caching/updates so i think its worth the try for cleaner approach. I dont think we should use main project to do resolutions for this as it may have some additional logics on when and what to resolve or which files to assume as present etc and that shouldnt play role into it.. If it shoiuld, it needs to be more explicit",
        "createdAt" : "2020-06-18T19:07:35Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "beca8d48-751d-44a6-9961-501d72e0d96d",
        "parentId" : "ed28508a-d146-418a-a31a-1f2d333af625",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "The next problem with this is that it means we can‚Äôt skip creating the AutoImportProviderProject if the main program already contains the dependencies, because we need a project instance to call `resolveTypeReferenceDirectives` from, but if it ends up returning an array of all `undefined` because the main program contained everything, we just wasted a lot of allocations creating the project in the first place üòï ",
        "createdAt" : "2020-06-18T23:07:17Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "85c69385bb5d30c722685a0528f51c5b1ba0acf3",
    "line" : 336,
    "diffHunk" : "@@ -1,1 +1824,1828 @@            }\n\n            if (dependencyNames) {\n                const resolutions = map(arrayFrom(dependencyNames.keys()), name => resolveTypeReferenceDirective(\n                    name,"
  },
  {
    "id" : "1ea9adfe-b264-4bee-9cb1-d5b6ba6f35bc",
    "prId" : 38923,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38923#pullrequestreview-433431010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c17585c-198a-4064-b905-ee0ef6b78ea6",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Wonder if its good idea to keep list of autoImportProviderProjects just like inferred projects so we know whats going on and what projects exist and easy debugging?",
        "createdAt" : "2020-06-18T00:45:58Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "49d69ce7-af61-429c-b25c-799a63d73b52",
        "parentId" : "6c17585c-198a-4064-b905-ee0ef6b78ea6",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I thought about this at first, but you can easily get them from the list of other projects, and I didn‚Äôt end up needing to use it anyway. I think the logs already show the presence of the projects. But I‚Äôm not against it if it‚Äôs useful.",
        "createdAt" : "2020-06-18T16:02:24Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "85c69385bb5d30c722685a0528f51c5b1ba0acf3",
    "line" : 380,
    "diffHunk" : "@@ -1,1 +1868,1872 @@            }\n\n            return new AutoImportProviderProject(hostProject, rootNames, documentRegistry, compilerOptions);\n        }\n"
  },
  {
    "id" : "34820a3b-13e2-4a22-9b78-6c12745ea2dd",
    "prId" : 38923,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38923#pullrequestreview-435246507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "900bcccc-5177-4a99-8c87-4d0f887ca492",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think this is too aggressive.. You should do it in updateGraphWorker if program has new Files Added or removed (if it depends on just files in this program or hasNewProgram if it just depends on program not being completely reused)",
        "createdAt" : "2020-06-22T19:56:49Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "b74ad818-e2dd-4de3-a84e-1f2d5fc05944",
        "parentId" : "900bcccc-5177-4a99-8c87-4d0f887ca492",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "It depends on more that just that. In the unit test for this, I simply rename an exported class, which I believe would still be `StructureIsReused.Completely`. Keep in mind this `updateGraph()` will realistically only ever be run after a package.json change and/or `npm install`. It will also be run when people edit declaration files inside node_modules, but that‚Äôs not a common scenario‚Äîit needs to work, but it doesn‚Äôt need to be optimized with an auto-import cache.",
        "createdAt" : "2020-06-22T20:24:11Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "85c69385bb5d30c722685a0528f51c5b1ba0acf3",
    "line" : 423,
    "diffHunk" : "@@ -1,1 +1911,1915 @@            this.projectService.setFileNamesOfAutoImportProviderProject(this, rootFileNames);\n            this.rootFileNames = rootFileNames;\n            this.hostProject.getImportSuggestionsCache().clear();\n            return super.updateGraph();\n        }"
  },
  {
    "id" : "cd651cd7-6820-4202-8e6f-584ceaf74346",
    "prId" : 38923,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38923#pullrequestreview-435225346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48aa6ee1-1d7e-4add-ba3b-183012cb4962",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think instead of setting this as undefined here you want to set it to false or something so that next time some one asks for project, you dont have to go through dependencies, resolving type references etc unless there is some change. So you want this to autoImportProviderHost to be undefined if not calculated, false if calculated but shouldnt use and Actual project if it should",
        "createdAt" : "2020-06-22T20:03:11Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "85c69385bb5d30c722685a0528f51c5b1ba0acf3",
    "line" : 253,
    "diffHunk" : "@@ -1,1 +1640,1644 @@                if (!this.autoImportProviderHost.hasRoots()) {\n                    this.autoImportProviderHost.close();\n                    this.autoImportProviderHost = undefined;\n                    return undefined;\n                }"
  },
  {
    "id" : "2dee1bdb-cfe8-4b49-a6d5-e3ee6ca62e0b",
    "prId" : 38923,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38923#pullrequestreview-436039284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0f17529-65f9-45e7-917e-9c6c79cfccbc",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You dont need to pass moduleResolutionHost here but instead you want this to also handle trace (if logging enabled going to log) and currentDIrectory\r\nModuleResolutionHost = hostProject.projectService ?",
        "createdAt" : "2020-06-22T22:24:58Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "37d4ac3a-865b-45f9-85de-a0db1c0380bd",
        "parentId" : "b0f17529-65f9-45e7-917e-9c6c79cfccbc",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I don‚Äôt think I understand the suggestion‚Äî`ProjectService` isn‚Äôt assignable to `ModuleResolutionHost`.",
        "createdAt" : "2020-06-22T22:32:55Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "079856d5-115d-4657-86fb-25034e963835",
        "parentId" : "b0f17529-65f9-45e7-917e-9c6c79cfccbc",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Merging for the beta, feel free to follow up with me",
        "createdAt" : "2020-06-22T23:34:22Z",
        "updatedAt" : "2020-06-22T23:34:23Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "41efdb47-b9dd-4614-95ac-e40a3ca78391",
        "parentId" : "b0f17529-65f9-45e7-917e-9c6c79cfccbc",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You want it to be {\r\nboundMethods from hostProject.projectService.host\r\ngetCurrentDirectory : () => hostProject.getCurrentDirectory(),\r\ntrace: mayBeBind(hostProject, hostProject.trace)\r\n}",
        "createdAt" : "2020-06-23T18:02:03Z",
        "updatedAt" : "2020-06-23T18:02:04Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "6a96a0b5-41a0-4346-891d-5220f0f6ebd5",
        "parentId" : "b0f17529-65f9-45e7-917e-9c6c79cfccbc",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Is there a realistic example of why `hostProject` itself wouldn‚Äôt work? If it wants to mimic the existence of some files, why shouldn‚Äôt it be allowed to do that during type directive resolution?",
        "createdAt" : "2020-06-23T18:16:45Z",
        "updatedAt" : "2020-06-23T18:16:46Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "85c69385bb5d30c722685a0528f51c5b1ba0acf3",
    "line" : 341,
    "diffHunk" : "@@ -1,1 +1829,1833 @@                    rootFileName,\n                    compilerOptions,\n                    moduleResolutionHost));\n\n                for (const resolution of resolutions) {"
  },
  {
    "id" : "d0aacad5-ba41-49c2-ac39-b33363753cae",
    "prId" : 37239,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37239#pullrequestreview-372992155",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3dd6301-b49f-430f-bead-af9c1b16d42f",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">getDefaultChildProjectFromSolution [](start = 8, length = 34)\r\n\r\nI'm not sure I understand what this does.  I think it returns the first loaded (?) project (in tsconfig project-reference-list order?) that contains the ScriptInfo directly (i.e. not because it was pulled in from a referenced project?).",
        "createdAt" : "2020-03-06T02:04:52Z",
        "updatedAt" : "2020-03-11T23:53:43Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "6bb7a1f6-0485-4372-adc6-b2b82c8bf4f7",
        "parentId" : "e3dd6301-b49f-430f-bead-af9c1b16d42f",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Does the answer change as more projects are loaded?\r\n\r\n---\r\nIn reply to: [388677179](https://github.com/microsoft/TypeScript/pull/37239#discussion_r388677179) [](ancestors = 388677179)",
        "createdAt" : "2020-03-06T02:05:12Z",
        "updatedAt" : "2020-03-11T23:53:43Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "7bcb5343-c89f-4d91-aa17-8b0e7f7d3b9a",
        "parentId" : "e3dd6301-b49f-430f-bead-af9c1b16d42f",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This tries to find the project that is a referenced project from the solution where the script info belongs (and not just referenced) eg. from project `src\\tsconfig.json` for file `src\\compiler.ts` it will find `src\\compiler\\tsconfig.json` and not `src\\services\\tsconfig.json`",
        "createdAt" : "2020-03-10T18:59:18Z",
        "updatedAt" : "2020-03-11T23:53:43Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "6bebc627-efd8-4102-b667-dfa045aba820",
        "parentId" : "e3dd6301-b49f-430f-bead-af9c1b16d42f",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "And does the answer depend on which projects are loaded when the question is asked?",
        "createdAt" : "2020-03-11T17:47:31Z",
        "updatedAt" : "2020-03-11T23:53:43Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "a2ee66f6-1051-4169-9bba-811516628c66",
        "parentId" : "e3dd6301-b49f-430f-bead-af9c1b16d42f",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Yes. Because it only finds the projects..  Its also called to only find the existing default project for the file",
        "createdAt" : "2020-03-11T17:51:07Z",
        "updatedAt" : "2020-03-11T23:53:43Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ef1ef2d3efea440ad675eceb70158cd436f7d3",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2173,2177 @@        /* @internal */\n        /** Find the configured project from the project references in this solution which contains the info directly */\n        getDefaultChildProjectFromSolution(info: ScriptInfo) {\n            Debug.assert(this.isSolution());\n            return forEachResolvedProjectReferenceProject("
  },
  {
    "id" : "3b0e7cc8-590f-404a-a723-7b1ac28d1dd6",
    "prId" : 36383,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36383#pullrequestreview-348275948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "999944f0-12ec-4fc3-9f04-3b302c464873",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Shouldn't you include file in updated if it was already reported but whether it is source of project reference redirect or not has changed?",
        "createdAt" : "2020-01-23T23:40:48Z",
        "updatedAt" : "2020-01-28T19:30:43Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "692dd5d6-5e84-4fc5-900b-3e9fbb7de017",
        "parentId" : "999944f0-12ec-4fc3-9f04-3b302c464873",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "That is an excellent point that I would never have thought of.",
        "createdAt" : "2020-01-24T00:39:28Z",
        "updatedAt" : "2020-01-28T19:30:43Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "ecbc261e-8007-4b98-b1fc-4459670c5c29",
        "parentId" : "999944f0-12ec-4fc3-9f04-3b302c464873",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "Now tracking in additional response property `updatedRedirects`.\r\nIt didn't make sense to combine into `updated` because the only way to determine from the editor which members of `updated` were present due to a redirect info change and which were present due to the existing meaning was to rely on the implicit invariant that the latter category had non-traditional file extensions. In short... it was clearer this way. :)",
        "createdAt" : "2020-01-24T23:17:23Z",
        "updatedAt" : "2020-01-28T19:30:43Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dd89ca57bc7dd93b8772ef1927777d6e63e9d3d",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +1375,1379 @@                this.lastReportedFileNames = currentFiles;\n                this.lastReportedVersion = this.projectProgramVersion;\n                return {\n                    info,\n                    changes: {"
  },
  {
    "id" : "09e0c92a-969e-405a-a81e-517e174c5bdb",
    "prId" : 33771,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33771#pullrequestreview-435286062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2891715e-5616-4f5b-8462-fb3b65432bb2",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Key is NormalizedPath",
        "createdAt" : "2020-06-22T18:46:08Z",
        "updatedAt" : "2020-06-25T22:54:19Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "58741a6c-4d2e-4672-ab92-d836167ad0dc",
        "parentId" : "2891715e-5616-4f5b-8462-fb3b65432bb2",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "This change breaks `forEachPotentialProjectReference` in editorServices.ts as the callback is typed to accept a `Path`, not a `NormalizedPath`.",
        "createdAt" : "2020-06-22T21:26:57Z",
        "updatedAt" : "2020-06-25T22:54:19Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "661fa61decb5d014b3cacd5430aac427de8c7230",
    "line" : 227,
    "diffHunk" : "@@ -1,1 +1977,1981 @@        /** Potential project references before the project is actually loaded (read config file) */\n        /*@internal*/\n        potentialProjectReferences: Set<string> | undefined;\n\n        /*@internal*/"
  },
  {
    "id" : "c8414606-0892-4800-ba51-b20a5188123e",
    "prId" : 32517,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32517#pullrequestreview-294438185",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d422f534-553d-43f4-94b6-beefa3d2d985",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "why do we need to track these ? Can we not clean cache right here instead ?",
        "createdAt" : "2019-09-05T19:54:48Z",
        "updatedAt" : "2019-09-27T17:46:45Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "63e553b5-255f-442d-bdb1-7e8b1a8af777",
        "parentId" : "d422f534-553d-43f4-94b6-beefa3d2d985",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I believe at this point we don‚Äôt have the new source file parsed yet. To determine if the cache needs to be cleared after editing a source file, we need to have both the old source file and the new one together so we can run `this.sourceFileHasChangedOwnImportSuggestions(oldSourceFile, sourceFile)`. Also, that analysis can be skipped for some values of `oldProgram.structureIsReused`, so we really have to wait until we have a new program.",
        "createdAt" : "2019-09-05T20:15:48Z",
        "updatedAt" : "2019-09-27T17:46:45Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "82ff55c7-0e1b-4066-98bd-f9df540a64a3",
        "parentId" : "d422f534-553d-43f4-94b6-beefa3d2d985",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "So currently we have `finishRecordingFilesWithChangedResolutions` that gets you result of changed unresolved imports.. You could similarly create and get result of files with changed resolution from resolutionCache instead of doing this work again.. If fact you need `boolean` so you can clear import cache.. ",
        "createdAt" : "2019-09-23T16:39:56Z",
        "updatedAt" : "2019-09-27T17:46:45Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "47f62cad-4f73-47a7-91f8-87f5db871c6d",
        "parentId" : "d422f534-553d-43f4-94b6-beefa3d2d985",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Changed resolutions isn‚Äôt quite the same thing we‚Äôre detecting here. For example, given two files:\r\n\r\n```ts\r\n// a.ts\r\nimport { useContext } from 'react';\r\n```\r\n\r\n```ts\r\n// b.ts\r\nuseContext/**/ // Auto-import from 'react'\r\n```\r\n\r\nIf the user accepts an auto-import from 'react' in b.ts, that file has changed resolution, but the program didn‚Äôt change in a way that could possibly affect the auto-imports available in b.ts. _Most_ changes to a given file don‚Äôt affect its _own_ auto-imports. The ones that do are\r\n\r\n- Importing something that causes a change to the program structure (typically bringing new files into the program)\r\n- Creating or changing a module augmentation or ambient module declaration\r\n- Adding the first or removing the last import of any node core module in a file, when ATA is enabled\r\n\r\nI‚Äôm not 100% sure if I‚Äôm understanding your suggestion correctly, but as to the concern about doing work again, I found no measurable impact on the time reported by `updateGraphWorker`.",
        "createdAt" : "2019-09-23T18:03:23Z",
        "updatedAt" : "2019-09-27T17:46:45Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "8c832867-e12d-4bef-a279-be942613e5e9",
        "parentId" : "d422f534-553d-43f4-94b6-beefa3d2d985",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "What i mean is dirtyFilesForSuggestions array isnt it same or subset of filesWithChangedResolution? So there is no need to keep this array is all i am saying.. ",
        "createdAt" : "2019-09-26T16:34:50Z",
        "updatedAt" : "2019-09-27T17:46:45Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "267760ac-24dc-4f35-822d-61e83ae2e88e",
        "parentId" : "d422f534-553d-43f4-94b6-beefa3d2d985",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "> isnt it same or subset of filesWithChangedResolution\r\n\r\nNo, it‚Äôs a superset. I tried your suggestion just to make sure, and three cache invalidation tests failed. One example is `importSuggestionsCache_ambient.ts`:\r\n\r\n```ts\r\ndeclare module 'ambient' {\r\n  export const ambient = 0;\r\n}\r\na/**/\r\n```\r\n\r\nAfter an edit that deletes `export const ambient = 0;`, it still shows up in completions.\r\n\r\nI would be happy to consider another way of getting the list of changed files, but it really has to be all files that changed at all.",
        "createdAt" : "2019-09-26T17:37:04Z",
        "updatedAt" : "2019-09-27T17:46:45Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "f536e47f-dc99-412b-a408-2b2528ad43fb",
        "parentId" : "d422f534-553d-43f4-94b6-beefa3d2d985",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "what about all files with `oldProgram.getSourceFIle().version !== newProgram.getSourceFile().version` => These should definitely be all dirtyFiles?",
        "createdAt" : "2019-09-26T18:11:19Z",
        "updatedAt" : "2019-09-27T17:46:45Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "bec3462f-b275-48c8-a7e1-82b261e42d6a",
        "parentId" : "d422f534-553d-43f4-94b6-beefa3d2d985",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Yeah, that would definitely work, I was just trying to avoid iterating over all source files again when there‚Äôs already a callback from ScriptInfo to Project every time a file changes.",
        "createdAt" : "2019-09-26T18:27:11Z",
        "updatedAt" : "2019-09-27T17:46:45Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "67035810-7b48-47b7-8a1b-a1640c425b14",
        "parentId" : "d422f534-553d-43f4-94b6-beefa3d2d985",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I measured this and iterating through all source files on a large real-world project adds ~10 ms to updateGraphWorker, which accounts for about 10%. That doesn‚Äôt seem worth it.",
        "createdAt" : "2019-09-27T16:36:35Z",
        "updatedAt" : "2019-09-27T17:46:45Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "213a370aa94ca3c29356a7a451523315238cf26f",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +878,882 @@            this.markAsDirty();\n            if (!this.importSuggestionsCache.isEmpty()) {\n                (this.dirtyFilesForSuggestions || (this.dirtyFilesForSuggestions = createMap())).set(changedFile, true);\n            }\n        }"
  },
  {
    "id" : "751073f1-d324-45e8-9ffd-51e0ed3d6991",
    "prId" : 32147,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32147#pullrequestreview-256462782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c86ae39-161a-43a3-bd32-66af1bd9a3a7",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I'm not really understanding the connection between `outFile`/`out` and the single watcher vs. multi watcher scenario. Can you give me a little background?",
        "createdAt" : "2019-06-27T23:22:50Z",
        "updatedAt" : "2019-06-28T17:17:59Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "342dde67-ed7f-445a-a329-c059ac7358ea",
        "parentId" : "8c86ae39-161a-43a3-bd32-66af1bd9a3a7",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "If options specify `outFile` or `out` there is going to be single generated file for all source files in the program. Otherwise 1:1 mapping between source and generated files",
        "createdAt" : "2019-06-28T16:33:56Z",
        "updatedAt" : "2019-06-28T17:17:59Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "d82fbb1c-8e07-4042-bccc-443c15b5dd94",
        "parentId" : "8c86ae39-161a-43a3-bd32-66af1bd9a3a7",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "I was definitely reading this as `outFile`/`outDir` in my head, and was confused how it could apply to `outDir`‚Äîand the answer is it doesn‚Äôt. Makes sense now, thanks ü§¶‚Äç‚ôÇ ",
        "createdAt" : "2019-07-01T17:13:42Z",
        "updatedAt" : "2019-07-01T17:13:42Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ae091fa9ef3c4043530908d03525aca108fdd54",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +1054,1058 @@        /* @internal */\n        addGeneratedFileWatch(generatedFile: string, sourceFile: string) {\n            if (this.compilerOptions.outFile || this.compilerOptions.out) {\n                // Single watcher\n                if (!this.generatedFilesMap) {"
  },
  {
    "id" : "122ae0f5-09a5-4ed8-9ee1-c39f17b7a2c4",
    "prId" : 32028,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32028#pullrequestreview-291928243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3aecc9e4-3f2e-4df8-be3a-e75acb15c985",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "It feels a little scary that these (public API) methods might do something fairly different from what the name implies. Are there a lot of callers to them or is it mostly the ProjectService? Since it‚Äôs publicly exposed, maybe at least add a note in the JSDoc that it might un-redirect declaration files?",
        "createdAt" : "2019-09-19T21:48:18Z",
        "updatedAt" : "2019-09-24T19:23:47Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "90800615-8034-41dc-bc86-055514c3a203",
        "parentId" : "3aecc9e4-3f2e-4df8-be3a-e75acb15c985",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This is public method since this is method for LanguageServiceHost and should result in answer `yes file exists` for .d.ts files even if they are not there to ensure that we can use source file instead..  Will add comment",
        "createdAt" : "2019-09-23T17:13:29Z",
        "updatedAt" : "2019-09-24T19:23:47Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd3ba679ec174180acac5c89e572a8ccba97870b",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +1558,1562 @@            // Project references go to source file instead of .d.ts file\n            if (this.useSourceOfProjectReferenceRedirect() && this.projectReferenceCallbacks) {\n                const source = this.projectReferenceCallbacks.getSourceOfProjectReferenceRedirect(file);\n                if (source) return isString(source) ? super.fileExists(source) : true;\n            }"
  },
  {
    "id" : "f5ae899a-6339-4d63-b0f7-1be68a8e83c7",
    "prId" : 31685,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31685#pullrequestreview-244456599",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4fec428-991b-4686-aed5-b29f588ecb1c",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You want to also check this in `watchWildCardDirectory` in the `editorServices.ts`",
        "createdAt" : "2019-05-31T00:11:31Z",
        "updatedAt" : "2019-05-31T21:46:28Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "6d16a6e7-0302-440a-a3b6-ce162b3e476d",
        "parentId" : "d4fec428-991b-4686-aed5-b29f588ecb1c",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Also need test for that scenario since the log you showed me was hitting this scenario.",
        "createdAt" : "2019-05-31T00:12:33Z",
        "updatedAt" : "2019-05-31T21:46:28Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "08f89982-94d7-45c4-862b-3ecb9875293c",
        "parentId" : "d4fec428-991b-4686-aed5-b29f588ecb1c",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "I'm happy to do that, but the case I was specifically trying to avoid was the resolution cache invalidation, which doesn't happen in the wild card directory case (as far as I can tell). If you think it's appropriate to not trigger an `updateGraph` in the wild card directory scenario at all, then I can definitely make the change, but I just wanted to make sure since that's a more substantial change than I was planning on making.",
        "createdAt" : "2019-05-31T00:25:07Z",
        "updatedAt" : "2019-05-31T21:46:28Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "e675da12-d47a-46a3-a748-27ffe52cfbfd",
        "parentId" : "d4fec428-991b-4686-aed5-b29f588ecb1c",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Yes we should definitely do that in the watchwildcard directory as in your repro that‚Äôs what caused the issue",
        "createdAt" : "2019-05-31T01:02:26Z",
        "updatedAt" : "2019-05-31T21:46:28Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "60b3490e-addf-4655-a744-f599f0ab4f5d",
        "parentId" : "d4fec428-991b-4686-aed5-b29f588ecb1c",
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "I've added the wild card scenario. I don't necessarily agree that the wild card directory watcher is what caused the issue in my repro; rather, the issue occurs when at least one of the directory watchers triggered from a file save operation is a failed lookup watcher, and it just so happens that it usually (always?) happens in conjunction with a wild card watcher being triggered.  However, I agree that it seems fine, even beneficial, to not schedule a graph update when the wild card watcher is triggered by an open file being saved, so I've added that.",
        "createdAt" : "2019-05-31T18:28:08Z",
        "updatedAt" : "2019-05-31T21:46:28Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3b6ba557ac97837ed1c419887dec39cc9acb834",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +462,466 @@            return this.projectService.openFiles.has(filePath);\n        }\n\n        /*@internal*/\n        writeLog(s: string) {"
  },
  {
    "id" : "827c3b51-5a54-45c4-bfdf-2e7ed1f07cef",
    "prId" : 31588,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/31588#pullrequestreview-241968179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f2ed6fa-c98d-4d9c-8fec-be4e84a7a1d0",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "how bad is an API break? it would be less confusing just to require `logErrors`.",
        "createdAt" : "2019-05-24T22:37:02Z",
        "updatedAt" : "2019-05-24T22:39:02Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "2cf9105e-0d19-40ca-843f-17c4d216f885",
        "parentId" : "5f2ed6fa-c98d-4d9c-8fec-be4e84a7a1d0",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I am not sure who we will break so its better to just have it optional I think",
        "createdAt" : "2019-05-24T22:46:08Z",
        "updatedAt" : "2019-05-24T22:46:08Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "57d9ecc39f588917c3c587795dea739f740b066b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +199,203 @@        }\n\n        public static resolveModule(moduleName: string, initialDir: string, host: ServerHost, log: (message: string) => void, logErrors?: (message: string) => void): {} | undefined {\n            const resolvedPath = normalizeSlashes(host.resolvePath(combinePaths(initialDir, \"node_modules\")));\n            log(`Loading ${moduleName} from ${initialDir} (resolved to ${resolvedPath})`);"
  },
  {
    "id" : "9c3378f3-19b1-4f81-906a-518d40603b4e",
    "prId" : 28106,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/28106#pullrequestreview-168952993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98fc1a82-7da1-4958-aefd-37860393f7de",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Are you sure this needs to be exposed and not internal?",
        "createdAt" : "2018-10-25T18:32:00Z",
        "updatedAt" : "2018-10-29T19:44:34Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "b2a4336d-c142-4892-967a-faac2b7ee14e",
        "parentId" : "98fc1a82-7da1-4958-aefd-37860393f7de",
        "authorId" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "body" : "Thanks I'll make it internal. Wasn't sure about the logic behind what's internal and what's public.",
        "createdAt" : "2018-10-26T18:43:26Z",
        "updatedAt" : "2018-10-29T19:44:34Z",
        "lastEditedBy" : "b2271d8e-c891-40a3-9f31-5d00a14b32ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bb87ecf2ed6f0101ab0fe9a432c08215e2a5850",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +1199,1203 @@\n        /*@internal*/\n        onPluginConfigurationChanged(pluginName: string, configuration: any) {\n            this.plugins.filter(plugin => plugin.name === pluginName).forEach(plugin => {\n                if (plugin.module.onConfigurationChanged) {"
  },
  {
    "id" : "a5da50b3-5ac4-44b1-b634-489cade6d7b0",
    "prId" : 21665,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/21665#pullrequestreview-94570131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc91c9a2-4545-4359-a8a2-5ad4b29fc66a",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You need to set exceededFileName to undefined here.",
        "createdAt" : "2018-02-06T17:30:30Z",
        "updatedAt" : "2018-02-07T21:28:21Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "ad928f7d-3eeb-4e18-a477-fdfd9d9217b5",
        "parentId" : "cc91c9a2-4545-4359-a8a2-5ad4b29fc66a",
        "authorId" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "body" : "Added. Good catch.",
        "createdAt" : "2018-02-07T01:50:51Z",
        "updatedAt" : "2018-02-07T21:28:21Z",
        "lastEditedBy" : "2c931dbc-99ca-47e2-8c61-01d41737933a",
        "tags" : [
        ]
      }
    ],
    "commit" : "e176533f6db41a49ff557df53f2f2944f8526321",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +501,505 @@            this.languageServiceEnabled = true;\n            this.lastFileExceededProgramSize = undefined;\n            this.projectService.onUpdateLanguageServiceStateForProject(this, /*languageServiceEnabled*/ true);\n        }\n"
  },
  {
    "id" : "05e07f62-ec82-4b49-bfb1-4c0b24d6269c",
    "prId" : 20464,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20464#pullrequestreview-81635625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b04f1abb-4b71-4011-b5e3-c8d4ae0fd8ad",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Is this right? `if (!something) return something` always reads a bit fishy.",
        "createdAt" : "2017-12-06T19:14:57Z",
        "updatedAt" : "2017-12-06T21:17:51Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c15470595f7651fc962e47c6f10572d8833a539e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +508,512 @@\n        protected removeLocalTypingsFromTypeAcquisition(newTypeAcquisition: TypeAcquisition): TypeAcquisition {\n            if (!newTypeAcquisition || !newTypeAcquisition.include) {\n                // Nothing to filter out, so just return as-is\n                return newTypeAcquisition;"
  },
  {
    "id" : "ccfaf72b-7a0f-45eb-85d0-00272e678c82",
    "prId" : 20048,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20048#pullrequestreview-76946211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8ec4dc8-0b8a-44b0-a4a3-1e37343a046f",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "If only we had a type system that could check these kind of things... ü§î ",
        "createdAt" : "2017-11-15T20:58:56Z",
        "updatedAt" : "2017-11-16T20:52:44Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "39e3c28a-b55a-42fb-862b-1eb22fd97599",
        "parentId" : "e8ec4dc8-0b8a-44b0-a4a3-1e37343a046f",
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Did you check this holds if the tsconfig.json just has `\"typeAcquistion\": {\"enable\": true}` (i..e include & exclude are still set to defaults).",
        "createdAt" : "2017-11-15T21:08:34Z",
        "updatedAt" : "2017-11-16T20:52:44Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "93a128a9-860f-4ba1-a864-536164bfbe65",
        "parentId" : "e8ec4dc8-0b8a-44b0-a4a3-1e37343a046f",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Isn't this code specific to external projects?  It looks like configured projects have their own `setTypeAcquisition`.",
        "createdAt" : "2017-11-15T21:19:22Z",
        "updatedAt" : "2017-11-16T20:52:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "4218c300-e636-4318-8456-d5e5e3771ac0",
        "parentId" : "e8ec4dc8-0b8a-44b0-a4a3-1e37343a046f",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "Right, this is in `ExternalProject` so there can't (?) be a tsconfig.json",
        "createdAt" : "2017-11-15T22:03:59Z",
        "updatedAt" : "2017-11-16T20:52:44Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "a416826b6453afa9bb447dd416a4013bb5db6019",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +1445,1449 @@            Debug.assert(!!newTypeAcquisition.include, \"newTypeAcquisition.include may not be null/undefined\");\n            Debug.assert(!!newTypeAcquisition.exclude, \"newTypeAcquisition.exclude may not be null/undefined\");\n            Debug.assert(typeof newTypeAcquisition.enable === \"boolean\", \"newTypeAcquisition.enable may not be null/undefined\");\n            this.typeAcquisition = newTypeAcquisition;\n        }"
  },
  {
    "id" : "97374f1b-9a13-48d3-8484-803641817a35",
    "prId" : 18605,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/18605#pullrequestreview-64072201",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d1fbbca-c324-4e86-a1aa-f27a908e8454",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Does this mean inside the language service methods that are being put directly onto the proxy, `this` will now refer to the proxy rather than language service instance?",
        "createdAt" : "2017-09-20T18:27:45Z",
        "updatedAt" : "2017-09-20T18:27:45Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ed9badb564aa5e37e46695838264b3dd27f221b",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +1047,1051 @@                    if (!(k in newLS)) {\n                        this.projectService.logger.info(`Plugin activation warning: Missing proxied method ${k} in created LS. Patching.`);\n                        (newLS as any)[k] = (this.languageService as any)[k];\n                    }\n                }"
  },
  {
    "id" : "42a2b219-3316-4815-b4c9-d7d3a83b0a3e",
    "prId" : 17469,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17469#pullrequestreview-52954716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f898e519-8ac9-45d5-bf48-fa25a31e78d5",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This property should have `| undefined` in its declaration then?",
        "createdAt" : "2017-07-28T14:59:31Z",
        "updatedAt" : "2017-07-28T21:53:39Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "88b8b67af42214d611f56588f464036d9afaeef5",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1060,1064 @@            }\n\n            if (this.directoriesWatchedForWildcards) {\n                this.directoriesWatchedForWildcards.forEach(watcher => {\n                    watcher.close();"
  },
  {
    "id" : "deb0d7c3-3d01-4032-bf9d-b384d3059d5d",
    "prId" : 16684,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/16684#pullrequestreview-47451277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fa837b9-0c70-495b-b7ad-eace82bdbb09",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "`host.watchFile` is actually optional. We could make it non-optional and mark it as a breaking change. See also #16776.",
        "createdAt" : "2017-06-30T17:35:01Z",
        "updatedAt" : "2017-06-30T17:35:01Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "569ecabb0a6c83f8c0eb9249dd79cfa3e4e91231",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +626,630 @@                for (const missingFilePath of missingFilePaths) {\n                    if (!this.missingFilesMap.has(missingFilePath)) {\n                        const fileWatcher = this.projectService.host.watchFile(missingFilePath, (_filename: string, eventKind: FileWatcherEventKind) => {\n                            if (eventKind === FileWatcherEventKind.Created && this.missingFilesMap.has(missingFilePath)) {\n                                fileWatcher.close();"
  },
  {
    "id" : "ea69d806-2ef1-4393-b1da-f2251113ceba",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7c9750a-b81f-4150-b608-0364a072798e",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "I would prefer `isConfigFile` -- it doesn't return whether the project has a config file, it returns whether the *parameter* is the path to one of the project's config files.",
        "createdAt" : "2017-06-06T21:55:46Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +408,412 @@        }\n\n        hasConfigFile(configFilePath: NormalizedPath) {\n            if (this.program && this.languageServiceEnabled) {\n                const configFile = this.program.getCompilerOptions().configFile;"
  },
  {
    "id" : "7cf15693-6334-4d1e-8468-ad19562e7a96",
    "prId" : 12336,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12336#pullrequestreview-42455503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "204fbbf1-6fe6-4339-be44-4cd3c32d6aa0",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Can you explain the change here? It's gone from erporting every error to returning only errors with no associated file. (What errors would those be?)",
        "createdAt" : "2017-06-06T21:56:06Z",
        "updatedAt" : "2017-06-15T17:00:05Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f0b3471a84e5d4de844b1378f85f737d42ec21",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +701,705 @@                // if current structure version is the same - return info without any changes\n                if (this.projectStructureVersion === this.lastReportedVersion && !updatedFileNames) {\n                    return { info, projectErrors: this.getGlobalProjectErrors() };\n                }\n                // compute and return the difference"
  },
  {
    "id" : "fb6ffb58-246a-4ea9-9c72-25de3cfd2023",
    "prId" : 12231,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12231#pullrequestreview-14624971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3e6a9e8-37cd-4363-b9a8-d3190a444815",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "Why not just reuse the module resolver the TS compiler uses [elsewhere](https://github.com/Microsoft/TypeScript/blob/master/src/compiler/moduleNameResolver.ts#L296)? I understand that the module resolver is a lot more complicated thanks to its exposure the the compiler options, but it _should_ be configurable to load just JS, right? At least, it'd probably be better not to duplicate the folder traversal/lookup logic in two places?\n",
        "createdAt" : "2016-11-15T03:59:10Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "664abfbc-01d5-4c5d-8fd6-d128ed190152",
        "parentId" : "a3e6a9e8-37cd-4363-b9a8-d3190a444815",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "I considered this but didn't think it was worthwhile given that we'd have to mock out a `CompilerOptions` guaranteed to behave the same as NodeJS's resolution (which still differs from our own given how we crack open package.jsons and other stuff). I'm actually going to switch this to just use `require` directly anyway now that I've learned how to set up a different initial search path.",
        "createdAt" : "2016-11-22T23:24:22Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "82c97c85-d0ad-43a5-8253-1ce7def3d9b1",
        "parentId" : "a3e6a9e8-37cd-4363-b9a8-d3190a444815",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "@RyanCavanaugh Shouldn't `require` at least be abstracted behind a call to `sys`?",
        "createdAt" : "2016-11-23T00:08:11Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "9fb4ec5a-6a6e-4a46-b09a-0b828601e0ee",
        "parentId" : "a3e6a9e8-37cd-4363-b9a8-d3190a444815",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "@weswigham I don't really see a point - is anyone plausibly going to write a plugin that works under a host that's not node?",
        "createdAt" : "2016-11-23T00:48:25Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "0ee47f52-abe9-4ecc-af61-9938db998706",
        "parentId" : "a3e6a9e8-37cd-4363-b9a8-d3190a444815",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "what about substituting `require` in unit tests? ",
        "createdAt" : "2016-11-23T01:04:05Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "528b1679-4aef-4ca4-94aa-c3c006e668c7",
        "parentId" : "a3e6a9e8-37cd-4363-b9a8-d3190a444815",
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "And I'm sure someone like @basart would like to support angular and other plugins in his cloud IDE.",
        "createdAt" : "2016-11-23T05:07:30Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "1abdc29f-5edb-45d5-8d4e-92d5c6ed52a1",
        "parentId" : "a3e6a9e8-37cd-4363-b9a8-d3190a444815",
        "authorId" : "d028362c-70f3-4a60-b6bc-f80ee67fc04b",
        "body" : "üåπ",
        "createdAt" : "2016-11-30T23:49:51Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "d028362c-70f3-4a60-b6bc-f80ee67fc04b",
        "tags" : [
        ]
      },
      {
        "id" : "7eae258c-e45c-4df4-99b0-9b64de5cdf05",
        "parentId" : "a3e6a9e8-37cd-4363-b9a8-d3190a444815",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "> I don't really see a point - is anyone plausibly going to write a plugin that works under a host that's not node?\r\n\r\n@RyanCavanaugh Isn't there an intent for this to work in Visual Studio? Our Chakra host would need to implement its own `require` logic in that case.",
        "createdAt" : "2016-12-29T00:53:26Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "5c8c8c7f-2f03-4de1-91c5-9dda22610870",
        "parentId" : "a3e6a9e8-37cd-4363-b9a8-d3190a444815",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "@DanielRosenwasser VS17 uses tsserver + node so it won't be a problem",
        "createdAt" : "2016-12-29T01:01:49Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "2e10aa69-5d25-469e-864d-59491c57769d",
        "parentId" : "a3e6a9e8-37cd-4363-b9a8-d3190a444815",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "It's already been refactored into `sys` as suggested.",
        "createdAt" : "2016-12-29T01:42:20Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "86cc40528668793cfb49cf977bed2d77f84b2f5e",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +170,174 @@        }\n\n        public static resolveModule(moduleName: string, initialDir: string, host: ServerHost, log: (message: string) => void): {} {\n            const resolvedPath = normalizeSlashes(host.resolvePath(combinePaths(initialDir, \"node_modules\")));\n            log(`Loading ${moduleName} from ${initialDir} (resolved to ${resolvedPath})`);"
  },
  {
    "id" : "aa4e58c8-63d8-498e-927b-8482cea057cf",
    "prId" : 12231,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12231#pullrequestreview-21868611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6ced643-6bd1-4bf1-8673-141db264d895",
        "parentId" : null,
        "authorId" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "body" : "I'm not sure if this is still a priority, but should plugins be given the opportunity to be well-behaved with respect to a cancellation token?\n",
        "createdAt" : "2016-11-15T04:27:55Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "f7813195-22a2-4200-9f53-7aadb83a2cc9",
        "tags" : [
        ]
      },
      {
        "id" : "b1821dcf-8fa5-41f0-abef-79fd0f9bd775",
        "parentId" : "b6ced643-6bd1-4bf1-8673-141db264d895",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "+1, plugins should be monitoring cancellation requests similar to normal LS methods",
        "createdAt" : "2017-02-14T21:28:35Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "86cc40528668793cfb49cf977bed2d77f84b2f5e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +92,96 @@    }\n\n    export interface PluginCreateInfo {\n        project: Project;\n        languageService: LanguageService;"
  },
  {
    "id" : "acfdbd8b-4d42-40bd-952b-5189e7e5be9b",
    "prId" : 12231,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12231#pullrequestreview-21869230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "736af1cb-be28-4411-8ee9-c233058d1ced",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i would wrap this in a try/catch block and log the exception",
        "createdAt" : "2017-02-09T22:00:44Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "a7655d2d-e639-4c98-9bc0-1e393359f933",
        "parentId" : "736af1cb-be28-4411-8ee9-c233058d1ced",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "or just do this in enableProxy",
        "createdAt" : "2017-02-09T22:04:11Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "08474b5f-d293-487f-8b2a-f599900790a6",
        "parentId" : "736af1cb-be28-4411-8ee9-c233058d1ced",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "`require` can't throw. It returns a module or an error.",
        "createdAt" : "2017-02-13T18:57:01Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "ecae27f5-5628-4589-ae6e-8d61a1cd920c",
        "parentId" : "736af1cb-be28-4411-8ee9-c233058d1ced",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "can you please put it as a comment to `ServerHost.require` since we don't have any other ways to declare/enforce this contract?",
        "createdAt" : "2017-02-14T21:31:23Z",
        "updatedAt" : "2017-02-14T21:45:26Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "86cc40528668793cfb49cf977bed2d77f84b2f5e",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +173,177 @@            const resolvedPath = normalizeSlashes(host.resolvePath(combinePaths(initialDir, \"node_modules\")));\n            log(`Loading ${moduleName} from ${initialDir} (resolved to ${resolvedPath})`);\n            const result = host.require(resolvedPath, moduleName);\n            if (result.error) {\n                log(`Failed to load module: ${JSON.stringify(result.error)}`);"
  },
  {
    "id" : "774f0641-4f9c-43cc-8c3b-2c3fb8ef42d0",
    "prId" : 12153,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/12153#pullrequestreview-12323260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea24c26c-17d3-40b4-a7bd-3c408f84a6e1",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "I would make it more like\r\n```ts\r\nlet updatedFileNames = this.updatedFileNames;\r\nthis.updatedFileNames = undefined;\r\n/// use local updatedFileNames - this way we'll know that set of names is definitely cleared\r\n```",
        "createdAt" : "2016-12-09T22:14:27Z",
        "updatedAt" : "2016-12-10T00:33:03Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "7a22bfb3-b7f1-4da7-af98-349cca9d06f0",
        "parentId" : "ea24c26c-17d3-40b4-a7bd-3c408f84a6e1",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "Yes - good idea",
        "createdAt" : "2016-12-09T22:39:26Z",
        "updatedAt" : "2016-12-10T00:33:03Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c40508cf1cbe8e8a5f361a20ce6ab5220d6f106c",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +678,682 @@            const updatedFileNames = this.updatedFileNames;\n            this.updatedFileNames = undefined;\n            // check if requested version is the same that we have reported last time\n            if (this.lastReportedFileNames && lastKnownVersion === this.lastReportedVersion) {\n                // if current structure version is the same - return info without any changes"
  },
  {
    "id" : "1e38be20-5bc7-4d54-9bcb-800c13eed12d",
    "prId" : 10848,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cc80936-17d4-4b17-a710-d5d1b3ceb5d3",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "that might not be correct in case of single inferred project\n",
        "createdAt" : "2016-09-13T16:58:31Z",
        "updatedAt" : "2016-09-13T23:10:35Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3e2ae334fa13e2acc318a8079207e1673e9fdf2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +544,548 @@                return undefined;\n            }\n            const rootFiles = this.getRootFiles();\n            return getDirectoryPath(rootFiles[0]);\n        }"
  },
  {
    "id" : "744af7c4-a8c7-41f0-b84a-adcf2b56b7ff",
    "prId" : 10848,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff39d861-48b6-4377-b6c1-b3263390596e",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "add a comment\n",
        "createdAt" : "2016-09-13T16:59:05Z",
        "updatedAt" : "2016-09-13T23:10:35Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3e2ae334fa13e2acc318a8079207e1673e9fdf2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +689,693 @@            // is the path of the project file. AS the project name is provided by VS, we need to\n            // normalize slashes before using it as a file name.\n            return getDirectoryPath(normalizeSlashes(this.externalProjectName));\n        }\n"
  }
]