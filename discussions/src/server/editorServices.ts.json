[
  {
    "id" : "8977948e-adc8-4053-ade5-53ece7797c55",
    "prId" : 44291,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44291#pullrequestreview-671439848",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2678b15-256e-4192-bfae-a1a28d9e7f68",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Please add type parameters to the options as well as Project service please with same default as session <TMessage = string>`",
        "createdAt" : "2021-05-28T15:51:51Z",
        "updatedAt" : "2021-05-28T15:53:55Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2c8ea45190fa889954bac47b73d3f8dd5aa8a9b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +412,416 @@        syntaxOnly?: boolean;\n        serverMode?: LanguageServiceMode;\n        session: Session<unknown> | undefined;\n    }\n"
  },
  {
    "id" : "bdf0725e-8058-4575-9489-d37b6c800dc2",
    "prId" : 44291,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/44291#pullrequestreview-677610727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7efb3f16-b600-45f7-9877-7994e8bfa415",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think you should wire TMessage thing here and PluginCreateInfo too, ",
        "createdAt" : "2021-06-01T17:42:55Z",
        "updatedAt" : "2021-06-01T17:45:10Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "b30d7fa9-186a-4776-bc63-93841382762d",
        "parentId" : "7efb3f16-b600-45f7-9877-7994e8bfa415",
        "authorId" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "body" : "I thought the `unknown` is better:\r\n\r\nIf we add type parameter `TMessage ` into `editorService`, We should also add the type parameter into `Project` and etc. Too many changes.\r\n\r\nAnd we are not really care about the type of message in `editorService`. We just forward session into pluin.\r\n\r\nAnd the `handlers` or `addProtocolHandler` does not have `TMessage ` too. Thay are raw string.",
        "createdAt" : "2021-06-06T16:10:15Z",
        "updatedAt" : "2021-06-06T16:10:15Z",
        "lastEditedBy" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "tags" : [
        ]
      },
      {
        "id" : "04b55388-4f4c-45e5-b4db-9fc241305aa4",
        "parentId" : "7efb3f16-b600-45f7-9877-7994e8bfa415",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "If that’s the case we shouldn’t add it to project service options either ",
        "createdAt" : "2021-06-06T19:32:04Z",
        "updatedAt" : "2021-06-06T19:32:04Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "db4608db-7a83-4f36-87ce-cb6a829d3666",
        "parentId" : "7efb3f16-b600-45f7-9877-7994e8bfa415",
        "authorId" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "body" : "Agreed.",
        "createdAt" : "2021-06-07T16:01:52Z",
        "updatedAt" : "2021-06-07T16:01:52Z",
        "lastEditedBy" : "b34d84f4-89ab-4dd2-92e3-8e7d670020b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2c8ea45190fa889954bac47b73d3f8dd5aa8a9b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +786,790 @@\n        /*@internal*/\n        readonly session: Session<unknown> | undefined;\n\n"
  },
  {
    "id" : "8ce5aea0-0d19-4253-9252-88a8a6a1af71",
    "prId" : 42463,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/42463#pullrequestreview-574618911",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e907ef3b-3a99-49d1-9d34-26154aab0da8",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Just made this inline but the actual change is this line.",
        "createdAt" : "2021-01-22T21:04:09Z",
        "updatedAt" : "2021-01-22T21:04:09Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e779e4ec75955116d3d545a387d6d7e2dde3a8a5",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1983,1987 @@                if (totalNonTsFileSize > maxProgramSizeForNonTsFiles || totalNonTsFileSize > availableSpace) {\n                    const top5LargestFiles = fileNames.map(f => propertyReader.getFileName(f))\n                        .filter(name => !hasTSFileExtension(name))\n                        .map(name => ({ name, size: this.host.getFileSize!(name) }))\n                        .sort((a, b) => b.size - a.size)"
  },
  {
    "id" : "b550408a-578e-431f-8c02-4bb932b2179a",
    "prId" : 41126,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41126#pullrequestreview-510858620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bec03f56-cfb4-46b2-ad5a-3a9e67572dda",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "It's a little unfortunate that \"project\" refers to a `ConfiguredProject` in the first parameter, a `string` in the second, and a `NormalizedPath` in the third.",
        "createdAt" : "2020-10-16T22:34:44Z",
        "updatedAt" : "2020-10-16T22:50:01Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "d2af89b2-fa5c-4947-a86e-3d1bfb73bae2",
        "parentId" : "bec03f56-cfb4-46b2-ad5a-3a9e67572dda",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "forProjects can contain not configured projects and hence its not NormalizedPath. this just avoids having to filter out non configured project by doing this. In practice most of the time its going to be configured project itself but string represents correct type for `forProjects` seenProjects is always going to be configured project hence the type for the key is correct.\r\n",
        "createdAt" : "2020-10-17T00:02:04Z",
        "updatedAt" : "2020-10-17T00:02:04Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "b0997c1c-378f-4144-98f1-4f0b105edf1f",
        "parentId" : "bec03f56-cfb4-46b2-ad5a-3a9e67572dda",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Sorry, I didn't mean that I thought there was a bug - I meant that variable names frequently convey something about the type of objects they're expected to contain and that one might, therefore, expect these three parameters to have similar types.\r\n\r\nOne way to address this (which isn't necessary - this is just an example) would be to rename \"forProjects\" to \"forProjectPaths\", etc.",
        "createdAt" : "2020-10-17T00:46:45Z",
        "updatedAt" : "2020-10-17T00:46:45Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "421ea3bbc12f4472649262f4daad07adf5416120",
    "line" : 227,
    "diffHunk" : "@@ -1,1 +3217,3221 @@        }\n\n        private ensureProjectChildren(project: ConfiguredProject, forProjects: ReadonlyCollection<string>, seenProjects: Set<NormalizedPath>) {\n            if (!tryAddToSet(seenProjects, project.canonicalConfigFilePath)) return;\n"
  },
  {
    "id" : "25d2266d-0d54-4b9c-b322-c60514d3f60a",
    "prId" : 41126,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41126#pullrequestreview-561300952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "992010f7-72c9-42b1-ae37-4d8360ee968a",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I had trouble reasoning about which flag to check the flag on.  This is the project in which f12 was pressed?",
        "createdAt" : "2020-10-16T22:35:51Z",
        "updatedAt" : "2020-10-16T22:50:01Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "50209ec4-8ed7-492b-97f8-5d37bbc14bbb",
        "parentId" : "992010f7-72c9-42b1-ae37-4d8360ee968a",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This the project whose children as being explored for loading. Not the project in which definition is found.",
        "createdAt" : "2020-10-16T23:56:48Z",
        "updatedAt" : "2020-10-16T23:56:48Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "48f6d1fe-59c9-4424-82e9-216a70b1170d",
        "parentId" : "992010f7-72c9-42b1-ae37-4d8360ee968a",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "So, suppose I have projects A, B, and C.  A references both B and C.  I have project B open and I invoke find-all-references on a declaration in B.  Which, if any, flags does the LS look at when deciding whether to load A (which depends on B and may, therefore, have a reference to the declaration)?  Same question for C.\r\n\r\nI think the answer is that B's flag determines whether or not A is loaded and C is loaded unconditionally (assuming A is loaded) because A depends on it?",
        "createdAt" : "2020-10-17T00:44:19Z",
        "updatedAt" : "2020-10-17T00:44:19Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "ab9a199a-8817-4462-ae58-428bfe98194e",
        "parentId" : "992010f7-72c9-42b1-ae37-4d8360ee968a",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "A is loaded only if B doesnt have `disableSolutionSearching` is enabled. C is loaded if A is allowed to load and doesnt have `disableReferencedProjectLoad`",
        "createdAt" : "2020-10-19T17:06:24Z",
        "updatedAt" : "2020-10-19T17:06:24Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "5bf7279c-47b9-4c25-9c7c-5c18e85dac3f",
        "parentId" : "992010f7-72c9-42b1-ae37-4d8360ee968a",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "With this PR C is loaded only if it references B btw and not otherwise",
        "createdAt" : "2020-10-19T17:06:54Z",
        "updatedAt" : "2020-10-19T17:06:54Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "cf3e7107-7df2-4169-990d-65c489fcfffb",
        "parentId" : "992010f7-72c9-42b1-ae37-4d8360ee968a",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I suspect we're stuck with it now, but I find it confusing having these settings apply per-project and not to the whole workspace (e.g. as editor settings).",
        "createdAt" : "2020-10-21T00:51:08Z",
        "updatedAt" : "2020-10-21T00:51:08Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "23466e93-672e-42ab-878b-5dc786358797",
        "parentId" : "992010f7-72c9-42b1-ae37-4d8360ee968a",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "@sheetalkamat I think your responses assumed that A was in a parent directory.  If A, B, and C are in sibling directories, it looks like `disableSolutionSearching` has no effect on whether A is loaded.",
        "createdAt" : "2020-12-14T23:45:53Z",
        "updatedAt" : "2020-12-14T23:45:53Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "2d7e6370-aebe-4eb4-9312-1ba593693a32",
        "parentId" : "992010f7-72c9-42b1-ae37-4d8360ee968a",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "`disableSolutionSearching` only affects in finding solution in parent directory... (just like we find configured project in parent directory) `disableReferencedProjectLoad` affects loading referenced projects from solution/project the setting is in,",
        "createdAt" : "2021-01-04T19:55:01Z",
        "updatedAt" : "2021-01-04T19:55:01Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "421ea3bbc12f4472649262f4daad07adf5416120",
    "line" : 241,
    "diffHunk" : "@@ -1,1 +3221,3225 @@\n            // If this project disables child load ignore it\n            if (project.getCompilerOptions().disableReferencedProjectLoad) return;\n\n            const children = project.getCurrentProgram()?.getResolvedProjectReferences();"
  },
  {
    "id" : "20450172-31cf-4d78-a692-10ad9a944115",
    "prId" : 41126,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/41126#pullrequestreview-510851367",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2d4d16c-f25d-4bae-a49a-1c495231071a",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Is `forProjects` the set of open projects?  If so, it seems like it might include projects that don't have definitions for the symbol of interest.",
        "createdAt" : "2020-10-16T22:42:32Z",
        "updatedAt" : "2020-10-16T22:50:01Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "5f9e6c3b-eb51-4044-9aa5-1aee36c74e8a",
        "parentId" : "c2d4d16c-f25d-4bae-a49a-1c495231071a",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "forProjects is projects in which definition is present..",
        "createdAt" : "2020-10-16T23:55:15Z",
        "updatedAt" : "2020-10-16T23:55:16Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "421ea3bbc12f4472649262f4daad07adf5416120",
    "line" : 219,
    "diffHunk" : "@@ -1,1 +3210,3214 @@                // If this project has potential project reference for any of the project we are loading ancestor tree for\n                // load this project first\n                if (forEachPotentialProjectReference(project, potentialRefPath => forProjects!.has(potentialRefPath))) {\n                    updateProjectIfDirty(project);\n                }"
  },
  {
    "id" : "81ff865b-28a1-4ba6-907a-1c590b83a13b",
    "prId" : 39937,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39937#pullrequestreview-462702492",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a6bb913-9188-499e-98f8-ee5909278a36",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "All the changes in this file are just to eliminate the `.bind(this)` which you noticed were `any`.",
        "createdAt" : "2020-08-06T16:57:56Z",
        "updatedAt" : "2020-08-06T16:57:56Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b9b321b0c21cca7b9988490ecc80edf54591ac4",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +3778,3782 @@            const filePath = this.toPath(fileName);\n            const result: PackageJsonInfo[] = [];\n            const processDirectory = (directory: Path): boolean | undefined => {\n                switch (packageJsonCache.directoryHasPackageJson(directory)) {\n                    // Sync and check same directory again"
  },
  {
    "id" : "35c971be-6d39-42fe-a31c-d3f9527aff83",
    "prId" : 39735,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39735#pullrequestreview-457936086",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86cb4525-10e7-4aa6-9442-0c95baa30eb9",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Probably an issue for a future PR, but I think the assumption here was that syntax server telemetry would be uninteresting.  I'm not sure the same is true for the partial semantic server.",
        "createdAt" : "2020-07-29T22:15:27Z",
        "updatedAt" : "2020-08-03T00:45:51Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "dca0b019b3627f375c9a64fe0ccd12dfe9f6296c",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +3341,3345 @@\n        private telemetryOnOpenFile(scriptInfo: ScriptInfo): void {\n            if (this.serverMode !== LanguageServiceMode.Semantic || !this.eventHandler || !scriptInfo.isJavaScript() || !addToSeen(this.allJsFilesForOpenFileTelemetry, scriptInfo.path)) {\n                return;\n            }"
  },
  {
    "id" : "02422e0b-9b4e-4f02-ae2f-b14f4a053e36",
    "prId" : 39721,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39721#pullrequestreview-455102359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f34ad58-1921-4d89-9814-e32ec0f97a19",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Is the `isOpenScriptInfo` check just for clarify/symmetry?  It seems like it would be sufficient to just check the cache, since there shouldn't be closed files in it.",
        "createdAt" : "2020-07-23T23:34:20Z",
        "updatedAt" : "2020-07-24T01:22:18Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "7b5674f0-21bf-459f-acb9-e13f964610fb",
        "parentId" : "2f34ad58-1921-4d89-9814-e32ec0f97a19",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "As the parameter indicates that info can be `OpenScriptInfoOrClosedOrConfigFileInfo` = Open ScriptInfo, originalFileInfo (can be closed) or ConfigFile. Given we already check to assert that script info called is open, it made sense to do it in this block.",
        "createdAt" : "2020-07-24T18:32:28Z",
        "updatedAt" : "2020-07-24T18:32:28Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "90c1414dbb2dd99e8526651ed703d5aad8ee6993",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1795,1799 @@         */\n        private getConfigFileNameForFile(info: OpenScriptInfoOrClosedOrConfigFileInfo) {\n            if (isOpenScriptInfo(info)) {\n                Debug.assert(info.isScriptOpen());\n                const result = this.configFileForOpenFiles.get(info.path);"
  },
  {
    "id" : "9bb40327-e493-42b9-9267-b6ad23313b54",
    "prId" : 39721,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39721#pullrequestreview-455103699",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a7bd4dc-158b-479e-9d96-3fb742e3f80c",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Is this different from clearing the map?",
        "createdAt" : "2020-07-23T23:38:26Z",
        "updatedAt" : "2020-07-24T01:22:18Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "bb99dfe8-7c98-4f80-9384-007fea1dc9ad",
        "parentId" : "6a7bd4dc-158b-479e-9d96-3fb742e3f80c",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Yes, we dont clear whole map, we only clear the configFile for open script info which the project needs to be reloaded. (its stored in configFileExistenceCache that determines which open files will affect because of change/creation or deletion of config file)",
        "createdAt" : "2020-07-24T18:34:42Z",
        "updatedAt" : "2020-07-24T18:34:42Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "90c1414dbb2dd99e8526651ed703d5aad8ee6993",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +2812,2816 @@            openFiles.forEach((openFileValue, path) => {\n                // Invalidate default config file name for open file\n                this.configFileForOpenFiles.delete(path);\n                // Filter out the files that need to be ignored\n                if (!shouldReloadProjectFor(openFileValue)) {"
  },
  {
    "id" : "bd91928b-d3a1-4add-a6d0-89a70349ec98",
    "prId" : 39721,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39721#pullrequestreview-455102898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6b27933-393d-4765-8eca-39851769e3e2",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Were people reading server logs and getting confused?",
        "createdAt" : "2020-07-23T23:38:42Z",
        "updatedAt" : "2020-07-24T01:22:18Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "fecd0a30-a032-4ad7-9961-342860eceac6",
        "parentId" : "b6b27933-393d-4765-8eca-39851769e3e2",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I got confused from the logs so its for our better understanding as well and will help debugging issues with loading.",
        "createdAt" : "2020-07-24T18:33:23Z",
        "updatedAt" : "2020-07-24T18:33:23Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "90c1414dbb2dd99e8526651ed703d5aad8ee6993",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +2189,2193 @@            host.clearCache();\n            const configFileName = project.getConfigFilePath();\n            this.logger.info(`${isInitialLoad ? \"Loading\" : \"Reloading\"} configured project ${configFileName}`);\n\n            // Load project from the disk"
  },
  {
    "id" : "20c80b9b-c6d4-49f4-a593-9c11608978fb",
    "prId" : 39243,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/39243#pullrequestreview-488083859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ff3e107-1fac-4918-8105-4feaf26e3fe8",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I'm missing something about the overall change - when are watch errors reported?  It seems like the changes here and in Project.ts are in support of doing validation well after command line parsing.  Or maybe they're computed up-front and just need to be surfaced through the project?",
        "createdAt" : "2020-09-05T00:55:46Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "f630b5e2-74a2-4aa2-8444-e0fd2902c368",
        "parentId" : "2ff3e107-1fac-4918-8105-4feaf26e3fe8",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Thsese are inferred project/external project watch option errors and are reported as part of project errors",
        "createdAt" : "2020-09-14T19:39:03Z",
        "updatedAt" : "2020-11-04T20:04:44Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "90bcea54378021ae39bf197edeb322d54484b174",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +253,257 @@    }\n\n    export function convertWatchOptions(protocolOptions: protocol.ExternalProjectCompilerOptions, currentDirectory?: string): WatchOptionsAndErrors | undefined {\n        let watchOptions: WatchOptions | undefined;\n        let errors: Diagnostic[] | undefined;"
  },
  {
    "id" : "d97f53c1-6b92-4e7a-af72-27cc75a7ae11",
    "prId" : 38923,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38923#pullrequestreview-423993585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f971d5ac-98eb-4dbf-9d1d-2dc8e61b8b10",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "All this package.json searching and watching code has moved, almost entirely unchanged, from project.ts, because it’s not actually 1:1 with a project.",
        "createdAt" : "2020-06-03T22:58:55Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "85c69385bb5d30c722685a0528f51c5b1ba0acf3",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +3692,3696 @@\n        /*@internal*/\n        getPackageJsonsVisibleToFile(fileName: string, rootDir?: string): readonly PackageJsonInfo[] {\n            const packageJsonCache = this.packageJsonCache;\n            const watchPackageJsonFile = this.watchPackageJsonFile.bind(this);"
  },
  {
    "id" : "82d45171-4fd0-4c8c-8c6f-db1c7b2f0fcc",
    "prId" : 38923,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38923#pullrequestreview-433683217",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "515c9ad2-e1bf-467f-859c-4ac7de17ef77",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Do  you think getImportSuggestionsCache should clear from AutoImportProviderProject::markAsDirty instead? \r\nAlso do you think it should clear if there is program change in AutoImportProvider instead.",
        "createdAt" : "2020-06-18T00:53:42Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "225e1693-6bc3-4a9b-a267-6ecf0f55a64f",
        "parentId" : "515c9ad2-e1bf-467f-859c-4ac7de17ef77",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "No, because `AutoImportProvider` only includes files from `node_modules` that aren’t in the main program, whereas the completions cache contains all auto imports, including from local files.",
        "createdAt" : "2020-06-18T16:00:56Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "922c4152-6ff0-415f-bcc6-086b430e2952",
        "parentId" : "515c9ad2-e1bf-467f-859c-4ac7de17ef77",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "So it main project contains auto import suggestions from auto import provider too? If yes when we souvenir file in auto import provider changes or say resolved module changes, shouldn’t it clear the cache of main project ? If not what do we need to clear it from invalidate when host config changes for the import preferences ",
        "createdAt" : "2020-06-18T16:35:55Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "d34298fc-99b4-4881-a719-9211767183d2",
        "parentId" : "515c9ad2-e1bf-467f-859c-4ac7de17ef77",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "If the structure of the main program changes, we already clear the cache. The only way the structure of the auto import program can change is if the structure of the main program changes (which is handled), a change occurs in node_modules or a package.json (which is handled right here), or if project/user settings change—there could possibly be a bug there, but it would be a year-old bug that no one has ever reported.",
        "createdAt" : "2020-06-18T18:15:45Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "7a23432b-c9f7-4b6e-92e6-c05908fdb4a5",
        "parentId" : "515c9ad2-e1bf-467f-859c-4ac7de17ef77",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "WatchFailedLookupLocations, onSourceFileChanged, WatchMissingFile, watchTypeRootsDirectory, dont call this though.. which is why i think probably you want to clear importSuggestionCache whenever there is program update in the AutoImportProvider.. Again if it depends on only fileNames in the program then you can use filesAddedOrRemoved in updateGraphWorker otherwise hasNewProgram",
        "createdAt" : "2020-06-18T18:49:03Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "47b20ba1-2f5b-4742-b184-1820a0f1a862",
        "parentId" : "515c9ad2-e1bf-467f-859c-4ac7de17ef77",
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Ah, I see what you mean. Ok, I think that makes sense then.",
        "createdAt" : "2020-06-18T22:14:36Z",
        "updatedAt" : "2020-06-22T23:33:50Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      }
    ],
    "commit" : "85c69385bb5d30c722685a0528f51c5b1ba0acf3",
    "line" : 219,
    "diffHunk" : "@@ -1,1 +3775,3779 @@            function invalidate(project: Project) {\n                if (!packageJsonPath || project.packageJsonsForAutoImport?.has(packageJsonPath)) {\n                    project.markAutoImportProviderAsDirty();\n                }\n            }"
  },
  {
    "id" : "1f27b8d3-4a68-47b9-a25d-4a2cf488bde5",
    "prId" : 38429,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/38429#pullrequestreview-409415944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a7fd4bc-5e90-4706-8908-301190261aee",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Do the other callers of `getConfigFileNameForFile` and `findConfiguredProjectByProjectName` need this check too?",
        "createdAt" : "2020-05-08T22:25:21Z",
        "updatedAt" : "2020-05-08T22:25:21Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "5b998768-52aa-4986-abcd-d2b99eb18c64",
        "parentId" : "2a7fd4bc-5e90-4706-8908-301190261aee",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "No.. this is the change to determine default project for the file... ",
        "createdAt" : "2020-05-08T22:49:28Z",
        "updatedAt" : "2020-05-08T22:49:28Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "91547c59-60a6-4aa8-87c8-5aceeb324fc8",
        "parentId" : "2a7fd4bc-5e90-4706-8908-301190261aee",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I'm not sure I follow.  Why is direct containment more important for the default project than for other projects?",
        "createdAt" : "2020-05-08T23:13:08Z",
        "updatedAt" : "2020-05-08T23:13:08Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "2b7fecd2-303b-4932-86d9-9bc80b6ffec0",
        "parentId" : "2a7fd4bc-5e90-4706-8908-301190261aee",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "findConfiguredProjectByProjectName  project finds the configured project by the given name and has nothing to do with scriptinfo. \r\nSimilary getConfigFileNameForFile  finds config file name by traversing directories for tsconfig/jsconfig json files. Nothing else matters.\r\n\r\nThis function is what determines the default project for given script info and hence the additional logic ",
        "createdAt" : "2020-05-11T18:18:42Z",
        "updatedAt" : "2020-05-11T18:18:42Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e3c1d1c1b95da506070110f615f2b7c6f8be670",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1744,1748 @@            return project?.isSolution() ?\n                project.getDefaultChildProjectFromSolution(info) :\n                project && projectContainsInfoDirectly(project, info) ?\n                    project :\n                    undefined;"
  },
  {
    "id" : "9452af3d-2d52-4a92-8c4d-1bf2fb548d40",
    "prId" : 37563,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37563#pullrequestreview-381594620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f01cffb6-95b5-4320-924e-5b430bde3289",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "I usually think of `{}` as the simplest tsconfig.  What does `parseJsonText` return when it's empty?  I some sort of diagnostic produced?",
        "createdAt" : "2020-03-25T17:15:04Z",
        "updatedAt" : "2020-03-25T17:15:21Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "b0a8766b-72de-4369-b27c-4a6061a393d0",
        "parentId" : "f01cffb6-95b5-4320-924e-5b430bde3289",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "It will create source file with no statements and parseJsonSourceFileConfigFileContent will take that to mean `{}`",
        "createdAt" : "2020-03-25T17:19:30Z",
        "updatedAt" : "2020-03-25T17:19:31Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "08e271fe-aba2-4e5e-84d2-0a5ca5b98cbd",
        "parentId" : "f01cffb6-95b5-4320-924e-5b430bde3289",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Cool.  Will some sort of diagnostic be produced for the failed read?",
        "createdAt" : "2020-03-25T17:27:32Z",
        "updatedAt" : "2020-03-25T17:27:32Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "b8ade5ec-3cfe-433e-a5ab-b8de74f442fc",
        "parentId" : "f01cffb6-95b5-4320-924e-5b430bde3289",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "created #37611",
        "createdAt" : "2020-03-25T22:52:15Z",
        "updatedAt" : "2020-03-25T22:52:16Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "82f86c2605c2cafa1188ea2015d9b92015b7c9f7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1975,1979 @@            const configFilename = normalizePath(project.getConfigFilePath());\n\n            const configFileContent = this.host.readFile(configFilename) || \"\";\n\n            const result = parseJsonText(configFilename, configFileContent);"
  },
  {
    "id" : "0eaf9f4a-86f4-4841-ac17-c358b16614e8",
    "prId" : 37239,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37239#pullrequestreview-372236605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9536335d-dac5-453e-b3e0-00b633193cac",
        "parentId" : null,
        "authorId" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "body" : "I'm still trying to understand the implementation, so this might be a silly question... but here, it seems for a given file `f`, we start at a project and reload it. Then, if it's a solution project, we start looking for the project `f`'s actually in, reloading projects as we go. Then, once we find it, we reload that project and stop looking. Why do we reload the projects `f`'s not in before we find it, but not reload any other projects?",
        "createdAt" : "2020-03-06T01:41:41Z",
        "updatedAt" : "2020-03-11T23:53:43Z",
        "lastEditedBy" : "a954cad1-2428-49ae-ad5b-caef29f1f30c",
        "tags" : [
        ]
      },
      {
        "id" : "74001a46-24ba-42ea-b9e4-ce7d209ef9d5",
        "parentId" : "9536335d-dac5-453e-b3e0-00b633193cac",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "This is method that reloads the projects for open files (eg because user invoked that operation in vscode) \r\nWhat this does is, it finds config file for each open file.. which if turns out to be solution, we need to reload all projects till we find the project that open file belongs to.. (just like when we do for open file as part of this change) ",
        "createdAt" : "2020-03-10T18:57:18Z",
        "updatedAt" : "2020-03-11T23:53:43Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ef1ef2d3efea440ad675eceb70158cd436f7d3",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +2789,2793 @@                                        if (!updatedProjects.has(child.canonicalConfigFilePath)) {\n                                            updatedProjects.set(child.canonicalConfigFilePath, true);\n                                            this.reloadConfiguredProject(child, reason);\n                                        }\n                                        return projectContainsInfoDirectly(child, info);"
  },
  {
    "id" : "a86f73a3-0f1b-4561-b1a9-b64a89f0febe",
    "prId" : 37239,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37239#pullrequestreview-370040125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2760323f-cdc3-4239-b3f3-cf4eef346ca3",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">ProjectReferenceProjectLoadKind [](start = 16, length = 31)\r\n\r\nI would find explanatory comments helpful.",
        "createdAt" : "2020-03-06T02:02:54Z",
        "updatedAt" : "2020-03-11T23:53:43Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ef1ef2d3efea440ad675eceb70158cd436f7d3",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +427,431 @@    /*@internal*/\n    /** Kind of operation to perform to get project reference project */\n    export enum ProjectReferenceProjectLoadKind {\n        /** Find existing project for project reference */\n        Find,"
  },
  {
    "id" : "db297b18-bd7c-4f8f-a43b-2ff5f0633b2d",
    "prId" : 37239,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37239#pullrequestreview-372992225",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8e3f1a6-60af-45b8-8226-c35dffd0af5e",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">retainProjects [](start = 8, length = 14)\r\n\r\nSingleton and undefined are included because they're cheaper to store than the corresponding lists?  If so, we don't already have a helper type for that?",
        "createdAt" : "2020-03-06T02:07:01Z",
        "updatedAt" : "2020-03-11T23:53:43Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "c673e908-76fe-4a8d-9e09-40c1f1f1dd68",
        "parentId" : "a8e3f1a6-60af-45b8-8226-c35dffd0af5e",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Havent found it in core so far",
        "createdAt" : "2020-03-10T18:44:41Z",
        "updatedAt" : "2020-03-11T23:53:43Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "07a569c3-9f04-4b73-84cc-e3efb1d31b4d",
        "parentId" : "a8e3f1a6-60af-45b8-8226-c35dffd0af5e",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "There are helpers that operate on `T | readonly T[]`, but I also can't find an attempt to formalize the pattern.",
        "createdAt" : "2020-03-11T17:51:13Z",
        "updatedAt" : "2020-03-11T23:53:43Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ef1ef2d3efea440ad675eceb70158cd436f7d3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +309,313 @@\n    interface AssignProjectResult extends OpenConfiguredProjectResult {\n        retainProjects: readonly ConfiguredProject[] | ConfiguredProject | undefined;\n    }\n"
  },
  {
    "id" : "1279cffd-5cac-44a2-b20f-74b2feec3575",
    "prId" : 37239,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37239#pullrequestreview-372230349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9754e07-06bc-4b3d-8823-29b94bf5bd6b",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">Creating project referenced in solution ${project.projectName} to find possible configured project for ${info.fileName} to open [](start = 29, length = 127)\r\n\r\nDoes this message ever find its way into telemetry or error messages?",
        "createdAt" : "2020-03-06T02:09:09Z",
        "updatedAt" : "2020-03-11T23:53:43Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "6a3a8076-db13-4c42-a454-e273785d4562",
        "parentId" : "b9754e07-06bc-4b3d-8823-29b94bf5bd6b",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Dont think so.. It is a part of event for `ProjectLoadStart` which helps display loading configured project.. ",
        "createdAt" : "2020-03-10T18:48:44Z",
        "updatedAt" : "2020-03-11T23:53:43Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ef1ef2d3efea440ad675eceb70158cd436f7d3",
    "line" : 224,
    "diffHunk" : "@@ -1,1 +2998,3002 @@                            },\n                            ProjectReferenceProjectLoadKind.FindCreateLoad,\n                            `Creating project referenced in solution ${project.projectName} to find possible configured project for ${info.fileName} to open`\n                        );\n                    }"
  },
  {
    "id" : "19cda426-64ee-4f9e-84a8-ebd6ab81036a",
    "prId" : 37239,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37239#pullrequestreview-373218630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbc55d57-1748-4b7b-99c1-bcf754dec72c",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : ">existing [](start = 17, length = 8)\r\n\r\nDoes \"existing\" imply \"loaded\"?",
        "createdAt" : "2020-03-11T23:36:16Z",
        "updatedAt" : "2020-03-11T23:53:43Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "bc604521-1db9-4ae9-a657-0688f9c2bd0c",
        "parentId" : "bbc55d57-1748-4b7b-99c1-bcf754dec72c",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "existing means present\r\n",
        "createdAt" : "2020-03-11T23:46:23Z",
        "updatedAt" : "2020-03-11T23:53:43Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "1f19bb4e-8ef9-4490-aaf6-b63a7f0955c2",
        "parentId" : "bbc55d57-1748-4b7b-99c1-bcf754dec72c",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "What does \"present\" mean?  On disk?  Which, if any parts, have been loaded into memory?",
        "createdAt" : "2020-03-12T00:57:13Z",
        "updatedAt" : "2020-03-12T01:09:26Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ef1ef2d3efea440ad675eceb70158cd436f7d3",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +428,432 @@    /** Kind of operation to perform to get project reference project */\n    export enum ProjectReferenceProjectLoadKind {\n        /** Find existing project for project reference */\n        Find,\n        /** Find existing project or create one for the project reference */"
  },
  {
    "id" : "17091f38-5ca5-42aa-b903-f255658e3ccc",
    "prId" : 37239,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37239#pullrequestreview-373766445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "702ae6d8-15d8-4021-bd49-018c29102b85",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "This is to cover the case where the containing child project was not found when walking up the directory hierarchy?",
        "createdAt" : "2020-03-12T00:59:01Z",
        "updatedAt" : "2020-03-12T01:09:26Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "9537e3f0-1281-456f-8113-7eae4154772a",
        "parentId" : "702ae6d8-15d8-4021-bd49-018c29102b85",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Yes.. this is when the project found by default config for a file is solution",
        "createdAt" : "2020-03-12T17:37:53Z",
        "updatedAt" : "2020-03-12T17:37:53Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ef1ef2d3efea440ad675eceb70158cd436f7d3",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +1743,1747 @@\n            return project?.isSolution() ?\n                project.getDefaultChildProjectFromSolution(info) :\n                project;\n        }"
  },
  {
    "id" : "80f04eab-c95b-4ebc-9d2a-19e230faacaa",
    "prId" : 37239,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37239#pullrequestreview-373769150",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7b15da8-59a7-4912-a0bb-3ccf32950460",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Should `reason` be updated to reflect that it's a child project of a solution?",
        "createdAt" : "2020-03-12T01:01:02Z",
        "updatedAt" : "2020-03-12T01:09:26Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "7df2d847-9165-499d-a935-50387a39db80",
        "parentId" : "f7b15da8-59a7-4912-a0bb-3ccf32950460",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I think its fine.. Since its still loading project for that file and reason for now isnt specific to file or project",
        "createdAt" : "2020-03-12T17:41:25Z",
        "updatedAt" : "2020-03-12T17:41:25Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ef1ef2d3efea440ad675eceb70158cd436f7d3",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +2789,2793 @@                                        if (!updatedProjects.has(child.canonicalConfigFilePath)) {\n                                            updatedProjects.set(child.canonicalConfigFilePath, true);\n                                            this.reloadConfiguredProject(child, reason);\n                                        }\n                                        return projectContainsInfoDirectly(child, info);"
  },
  {
    "id" : "9703ff2c-c418-4b01-b135-62c8ed88d6b5",
    "prId" : 37239,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/37239#pullrequestreview-373767435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a4c2746-7559-47d2-8050-d4cb4726b984",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Not `FindCreateLoad` because the callback's going to load it?",
        "createdAt" : "2020-03-12T01:02:13Z",
        "updatedAt" : "2020-03-12T01:09:26Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "20b70edd-9dee-46b1-b6a1-471c0cdb3c55",
        "parentId" : "1a4c2746-7559-47d2-8050-d4cb4726b984",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Because we are reloading it anyways.. so createAndLoad is not needed",
        "createdAt" : "2020-03-12T17:39:12Z",
        "updatedAt" : "2020-03-12T17:39:12Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ef1ef2d3efea440ad675eceb70158cd436f7d3",
    "line" : 145,
    "diffHunk" : "@@ -1,1 +2793,2797 @@                                        return projectContainsInfoDirectly(child, info);\n                                    },\n                                    ProjectReferenceProjectLoadKind.FindCreate\n                                );\n                            }"
  },
  {
    "id" : "6c125cd2-9907-4c2b-85be-7bc0093ff28e",
    "prId" : 36808,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36808#pullrequestreview-363689916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7605edb1-8de2-47f7-a919-1a18391def51",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "what will be the performance impact of clearing the cache more often?",
        "createdAt" : "2020-02-19T18:38:15Z",
        "updatedAt" : "2020-02-24T20:58:39Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "6c4a9491-5a5f-4185-827e-1c40e0363524",
        "parentId" : "7605edb1-8de2-47f7-a919-1a18391def51",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "We need to do this for correctness so its question of accuracy.. Note that from perf perspective things are still reused since we watch .map files, .d.ts files etc and use the script info to track it.. So its contents and snapshots etc are updated only on change.. This ensures that if .d.ts file has changed, it remaps the mappings correctly.. ",
        "createdAt" : "2020-02-24T20:48:38Z",
        "updatedAt" : "2020-02-24T20:58:39Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "252ba7f1cdb847d0bb936c16593c7cd23143c912",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +878,882 @@                for (const project of projects) {\n                    // Even if program doesnt change, clear the source mapper cache\n                    if (clearSourceMapperCache) project.clearSourceMapperCache();\n                    this.delayUpdateProjectGraph(project);\n                }"
  },
  {
    "id" : "e502b9f5-c2de-4a55-a17a-577c26898983",
    "prId" : 36271,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/36271#pullrequestreview-348286131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2ba18ca-fd6f-4bbe-9929-2140330b1d04",
        "parentId" : null,
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "this new code is similar to existing code at the end of this function. not sure if that suggests any changes to the structure or not.",
        "createdAt" : "2020-01-22T16:58:05Z",
        "updatedAt" : "2020-01-22T17:22:20Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "6774a769-2aa0-4981-a347-1c050f1838a7",
        "parentId" : "f2ba18ca-fd6f-4bbe-9929-2140330b1d04",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Yes .,. we don't want to restructure that part but essentially we are shortcutting to that part which is to delay update the program root file names and update the graph",
        "createdAt" : "2020-01-25T00:00:19Z",
        "updatedAt" : "2020-01-25T00:00:19Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d68aa70ca8867edb0ec87edcd3e388120c86cbb",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1116,1120 @@                            }\n                            else {\n                                project.pendingReload = ConfigFileProgramReloadLevel.Partial;\n                                this.delayUpdateProjectGraphAndEnsureProjectStructureForOpenFiles(project);\n                            }"
  },
  {
    "id" : "7a6f1aec-31ee-4606-b308-f78fbf658ef7",
    "prId" : 35011,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/35011#pullrequestreview-368219934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bd1e383-7ca6-49c6-87ba-14e336787e6f",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Can you please add tests so we have coverage for this.",
        "createdAt" : "2020-03-03T18:16:07Z",
        "updatedAt" : "2020-03-03T18:16:08Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "3f829576-42d1-4cd2-ac09-9e33161f97a5",
        "parentId" : "0bd1e383-7ca6-49c6-87ba-14e336787e6f",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Sorry, this was originally a draft PR to get feedback and I forgot to add them when I promoted it.  Will do.",
        "createdAt" : "2020-03-03T18:28:44Z",
        "updatedAt" : "2020-03-03T18:28:44Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb4a0a5f074fc77095ff27e7a582fd0c1297a56c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1666,1670 @@                    if (result) return jsconfigFileName;\n\n                    // If we started within node_modules, don't look outside node_modules.\n                    // Otherwise, we might pick up a very large project and pull in the world,\n                    // causing an editor delay."
  },
  {
    "id" : "7112e98d-e812-416f-ab61-51a963f5c536",
    "prId" : 33771,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/33771#pullrequestreview-436914453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11abc167-07e2-4c3e-b88c-9fc491ee1643",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "key is `NormalizedPath`",
        "createdAt" : "2020-06-22T18:38:29Z",
        "updatedAt" : "2020-06-25T22:54:19Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "5b5d8840-f2ef-49c1-affe-a22391d3fb0d",
        "parentId" : "11abc167-07e2-4c3e-b88c-9fc491ee1643",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Should `configuredProjects` be a `Map<NormalizedPath, ...>`? If not then this change results in a number of type errors. If so, changing `configuredProjects` to use `NormalizedPath` results in its a number of different type errors.",
        "createdAt" : "2020-06-22T21:21:12Z",
        "updatedAt" : "2020-06-25T22:54:19Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "6429e65d-c21c-42b3-ae0b-74fe70285d5f",
        "parentId" : "11abc167-07e2-4c3e-b88c-9fc491ee1643",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "To further clarify:\r\n- The type of `configuredProjects` is currently `Map<string, ...>`\r\n- The type of `potentialRefPath` just below this line is `Path`, not `NormalizedPath`.\r\n- The type of `resolvedPath` just below this line is `Path`, not `NormalizedPath`.",
        "createdAt" : "2020-06-22T21:23:24Z",
        "updatedAt" : "2020-06-25T22:54:19Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "989f4fee-61d4-42c2-aea9-c65de9febf21",
        "parentId" : "11abc167-07e2-4c3e-b88c-9fc491ee1643",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "This also ties into my comment about `DocumentPosition`: https://github.com/microsoft/TypeScript/pull/33771#discussion_r443837400, as the `fileName` property is what feeds the `forProjects` collection that is passed to this method.",
        "createdAt" : "2020-06-22T21:58:29Z",
        "updatedAt" : "2020-06-25T22:54:19Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      },
      {
        "id" : "3471680c-a458-411c-8ae5-745b700513a6",
        "parentId" : "11abc167-07e2-4c3e-b88c-9fc491ee1643",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "You are right on this one.. Sorry for confusing on this one.",
        "createdAt" : "2020-06-24T18:46:31Z",
        "updatedAt" : "2020-06-25T22:54:19Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "661fa61decb5d014b3cacd5430aac427de8c7230",
    "line" : 228,
    "diffHunk" : "@@ -1,1 +3086,3090 @@\n        /*@internal*/\n        loadAncestorProjectTree(forProjects?: ReadonlyCollection<string>) {\n            forProjects = forProjects || mapDefinedEntries(\n                this.configuredProjects,"
  },
  {
    "id" : "8c9ed2f4-569f-4f55-acda-ec1ae2d72b26",
    "prId" : 32561,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/32561#pullrequestreview-267362140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e818dfe-5419-4f17-ac58-16f8275009e2",
        "parentId" : null,
        "authorId" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "body" : "Suggestion:\r\n\r\n```ts\r\nif (toRetainConfiguredProjects) {\r\n  toArray(toRetainConfiguredProjects).forEach(retainConfiguredProject);\r\n}\r\n```",
        "createdAt" : "2019-07-26T18:10:25Z",
        "updatedAt" : "2019-07-26T18:11:17Z",
        "lastEditedBy" : "7b7aae27-4774-41a7-bce2-94c871708547",
        "tags" : [
        ]
      },
      {
        "id" : "211528c4-fe03-465e-bcff-efb39ef409aa",
        "parentId" : "3e818dfe-5419-4f17-ac58-16f8275009e2",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Would rather not create array just to iterate and call function.",
        "createdAt" : "2019-07-26T19:17:55Z",
        "updatedAt" : "2019-07-26T19:17:56Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "10ee85c98c9027321bc88fc8e42f4d759c7c0c63",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +2726,2730 @@                else {\n                    retainConfiguredProject(toRetainConfiguredProjects);\n                }\n            }\n"
  },
  {
    "id" : "b73c41c9-95d3-4fa8-977e-299ae167ea7d",
    "prId" : 29421,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/29421#pullrequestreview-192464551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a62a4dc7-0646-446a-b620-407491c5e88a",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "How is this change for syntax only when we do early exit on syntaxOnly server at https://github.com/Microsoft/TypeScript/pull/29421/files#diff-efa731ca7c6279501f903db87403d2beL2776 ",
        "createdAt" : "2019-01-15T02:25:22Z",
        "updatedAt" : "2019-01-15T18:55:44Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "26e59556-423c-49a9-b72e-882cfe399699",
        "parentId" : "a62a4dc7-0646-446a-b620-407491c5e88a",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Oh wait, now I re-read and its \"like syntax Only server\".. Sorry.",
        "createdAt" : "2019-01-15T02:26:42Z",
        "updatedAt" : "2019-01-15T18:55:44Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fb09630a82c3f94e47ec37515cb0733b6cfcdb5",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +2775,2779 @@        private telemetryOnOpenFile(scriptInfo: ScriptInfo): void {\n            if (this.syntaxOnly || !this.eventHandler || !scriptInfo.isJavaScript() || !addToSeen(this.allJsFilesForOpenFileTelemetry, scriptInfo.path)) {\n                return;\n            }\n"
  },
  {
    "id" : "1065c21d-c493-4d60-adc7-3435965057ac",
    "prId" : 27242,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/27242#pullrequestreview-157789692",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "940d8181-6e24-40a6-b0a2-4d18fca8bc40",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Did we figure out how this interacts with `version` below?",
        "createdAt" : "2018-09-21T01:09:44Z",
        "updatedAt" : "2018-09-21T17:02:54Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "b79f20c6-eb95-4d58-9cc6-1fceb42df232",
        "parentId" : "940d8181-6e24-40a6-b0a2-4d18fca8bc40",
        "authorId" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "body" : "The included one overrides the local one. I think I'll leave it in since TypeScriptCommonProperties could (in theory) also *remove* properties over time as well as add more.",
        "createdAt" : "2018-09-21T16:50:53Z",
        "updatedAt" : "2018-09-21T17:02:54Z",
        "lastEditedBy" : "2b0d3f17-3eae-4173-ad8a-73c9440bf608",
        "tags" : [
        ]
      },
      {
        "id" : "02b769ce-2f93-47a0-8053-0800937068b6",
        "parentId" : "940d8181-6e24-40a6-b0a2-4d18fca8bc40",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Weird that the local one wouldn't win, but I agree that keeping both makes sense.",
        "createdAt" : "2018-09-21T17:35:12Z",
        "updatedAt" : "2018-09-21T17:35:43Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "31c6a1a755c16c75265980aea43e53b7bf1b2ef8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +47,51 @@/* __GDPR__\n   \"projectInfo\" : {\n        \"${include}\": [\"${TypeScriptCommonProperties}\"],\n        \"projectId\": { \"classification\": \"EndUserPseudonymizedInformation\", \"purpose\": \"FeatureInsight\", \"endpoint\": \"ProjectId\" },\n        \"fileStats\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },"
  },
  {
    "id" : "2aa016b4-baaf-438d-9693-ad785728d4f4",
    "prId" : 26137,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/26137#pullrequestreview-142616066",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1681f53d-7757-4a0b-a3ef-aa7a34a0bb7e",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Why not put this check directly in `updateGraph`?  Are there cases where we want to force an update regardless?",
        "createdAt" : "2018-08-01T23:43:51Z",
        "updatedAt" : "2018-08-01T23:44:04Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "770e8af9-d4bd-456d-a992-5056f47ea0c7",
        "parentId" : "1681f53d-7757-4a0b-a3ef-aa7a34a0bb7e",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "There are cases we already know that project is dirty.. \r\nUpdategraph is also overridden to do extra things depending on project type so update graph is not place where you want to do this check",
        "createdAt" : "2018-08-02T00:08:01Z",
        "updatedAt" : "2018-08-02T00:08:01Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "0742a753-98c6-4bb7-b715-d44b93563ecf",
        "parentId" : "1681f53d-7757-4a0b-a3ef-aa7a34a0bb7e",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "As a caller, how do I know whether I should call `updateProjectIfDirty` or `updateGraph`?",
        "createdAt" : "2018-08-02T01:13:30Z",
        "updatedAt" : "2018-08-02T01:13:30Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "d74d8613bd2fbf9542e1c43da1cc7ec4f117b455",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +340,344 @@    /*@internal*/\n    export function updateProjectIfDirty(project: Project) {\n        return project.dirty && project.updateGraph();\n    }\n"
  },
  {
    "id" : "99452b1a-92e4-475e-a404-6d6251d3760b",
    "prId" : 25884,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25884#pullrequestreview-147055546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f192013-1bcb-4824-bc90-74f16d8225e5",
        "parentId" : null,
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "@amcasey is this OK?",
        "createdAt" : "2018-08-16T00:02:24Z",
        "updatedAt" : "2018-08-16T00:02:24Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      },
      {
        "id" : "6efc8d1b-bee8-4c35-a8ac-7c8b986ead3b",
        "parentId" : "9f192013-1bcb-4824-bc90-74f16d8225e5",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Since projects are not 1:1 with users or devices and the hash function is cryptographically secure, I understand that this is okay.",
        "createdAt" : "2018-08-16T00:21:27Z",
        "updatedAt" : "2018-08-16T00:21:27Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      },
      {
        "id" : "d01914ad-291b-41ec-a559-b80f62c2fce7",
        "parentId" : "9f192013-1bcb-4824-bc90-74f16d8225e5",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Note that this isnt a real change since project key was project.projectName (configFile name for configured projects and external project name ) so this is just instead of passing it through the calls uses it directly through the key, hence no changes in the tests as well.",
        "createdAt" : "2018-08-16T23:14:37Z",
        "updatedAt" : "2018-08-16T23:14:37Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f67bdd429a3d16313eefaf3bb33d697b33241faf",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +1469,1473 @@            setProjectOptionsUsed(project);\n            const data: ProjectInfoTelemetryEventData = {\n                projectId: this.host.createSHA256Hash(project.projectName),\n                fileStats: countEachFileTypes(project.getScriptInfos()),\n                compilerOptions: convertCompilerOptionsForTelemetry(project.getCompilationSettings()),"
  },
  {
    "id" : "e713717c-732a-4869-aad4-18ec7f38914a",
    "prId" : 25851,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/25851#pullrequestreview-141651419",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dfe848e-a650-49f7-b47b-be8a2e3c59df",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "concat?",
        "createdAt" : "2018-07-28T00:35:11Z",
        "updatedAt" : "2018-07-28T00:35:12Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "6b7bafae-0952-4635-9f80-723619d1af6c",
        "parentId" : "4dfe848e-a650-49f7-b47b-be8a2e3c59df",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "using same array since gets a new array so we can just use same one.",
        "createdAt" : "2018-07-30T18:06:59Z",
        "updatedAt" : "2018-07-30T18:06:59Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9d497a008c8f2f423fd0186d4128401abb997c1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1675,1679 @@                return;\n            }\n            const diagnostics = project.getLanguageService().getCompilerOptionsDiagnostics();\n            diagnostics.push(...project.getAllProjectErrors());\n"
  },
  {
    "id" : "0e6a865f-4eb2-4c6a-aafe-1a0e6bdbad63",
    "prId" : 23833,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23833#pullrequestreview-118527461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7119fade-08fc-4563-8f86-b4b780e8954b",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "dont you need to send the open file name so that at vscode side they can create a map of seen files and get correct count instead of count = 3 when opening same file 3 times?",
        "createdAt" : "2018-05-08T20:13:01Z",
        "updatedAt" : "2018-05-08T20:52:46Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "83b08353-b4d2-46eb-b232-0ef5c01237fb",
        "parentId" : "7119fade-08fc-4563-8f86-b4b780e8954b",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "If we open the same file 3 times we should still only send one event, thanks to `this.allJsFilesForOpenFileTelemetry`.",
        "createdAt" : "2018-05-08T20:47:51Z",
        "updatedAt" : "2018-05-08T20:52:46Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d6b09353d8cec2f8eef0341e77ac3abd77fa886",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +2128,2132 @@\n            const info: OpenFileInfo = { checkJs: !!scriptInfo.getDefaultProject().getSourceFile(scriptInfo.path).checkJsDirective };\n            this.eventHandler({ eventName: OpenFileInfoTelemetryEvent, data: { info } });\n        }\n"
  },
  {
    "id" : "0455f24f-9390-4fce-8a78-419933805708",
    "prId" : 23169,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23169#pullrequestreview-109807077",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4114325-da4a-4d68-b37b-056e482fd78e",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Just chatted with @mhegazy, and we need to ensure we arent regressing perf wise using lambda instead of for loop. Noting here so as to track this.",
        "createdAt" : "2018-04-05T17:35:30Z",
        "updatedAt" : "2018-04-05T17:35:30Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0456779b31ad10c37aa527f3aa28722933c6629",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1997,2001 @@        }\n\n        private findExternalProjectContainingOpenScriptInfo(info: ScriptInfo): ExternalProject | undefined {\n            return find(this.externalProjects, proj => {\n                // Ensure project structure is up-to-date to check if info is present in external project"
  },
  {
    "id" : "6dd52233-f66c-4a1d-84a6-29843e25a8ca",
    "prId" : 23128,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/23128#pullrequestreview-109476323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "446baebe-7d0d-4c62-834f-0b6e9f2c4932",
        "parentId" : null,
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I thought the idea was to create program but not bind it. Are we not going to do that. This means if file opened is from configured project, it wont pick its compiler options?",
        "createdAt" : "2018-04-04T18:38:42Z",
        "updatedAt" : "2018-04-04T23:48:37Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "16febfb1-bd21-4924-884e-5d93194a97e9",
        "parentId" : "446baebe-7d0d-4c62-834f-0b6e9f2c4932",
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "What does the program provide if we are not binding it?\r\n\r\nYes, I think we want to disregard the compiler options of configured projects - we specifically don't want to (e.g.) emit, load lib files, resolve, download types, etc.",
        "createdAt" : "2018-04-04T19:55:46Z",
        "updatedAt" : "2018-04-04T23:48:37Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "855171bde55f645885e311d728a26d7e453f66d5",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1204,1208 @@\n            if (this.syntaxOnly) {\n                return undefined;\n            }\n"
  },
  {
    "id" : "0c5b8e8e-8842-4b29-98fb-648679c1742a",
    "prId" : 22088,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/22088#pullrequestreview-115244022",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c61639f5-95c6-459d-9c1b-12c0d91e23ba",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "That function should work for undefined inputs.",
        "createdAt" : "2018-04-25T15:52:31Z",
        "updatedAt" : "2018-05-22T21:27:07Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "4f519c1b-de30-45ea-a022-6a18ba3aed4e",
        "parentId" : "c61639f5-95c6-459d-9c1b-12c0d91e23ba",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "We do not allow undefined in `for (... in x)`. we should.",
        "createdAt" : "2018-04-25T15:57:58Z",
        "updatedAt" : "2018-05-22T21:27:07Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0672e2bb3d1a4a9410a2b41d9e91120fe99debf",
    "line" : 219,
    "diffHunk" : "@@ -1,1 +1367,1371 @@                configHasIncludeProperty: parsedCommandLine.raw.include !== undefined,\n                configHasExcludeProperty: parsedCommandLine.raw.exclude !== undefined,\n                wildcardDirectories: createMapFromTemplate(parsedCommandLine.wildcardDirectories!), // TODO: GH#18217\n                typeAcquisition: parsedCommandLine.typeAcquisition,\n                compileOnSave: parsedCommandLine.compileOnSave,"
  },
  {
    "id" : "830b1865-f6e0-474d-9f6a-3c1d996cd326",
    "prId" : 20664,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/20664#pullrequestreview-83040735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bb5d89a-d9f9-41ac-9626-67163aeec8a6",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Nothing needs to happen on a `PackageInstalledResponse`? (Not specific to your code, I just see there is nothing specific for it generally).",
        "createdAt" : "2017-12-13T01:31:25Z",
        "updatedAt" : "2017-12-13T17:23:00Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "e6defdbd-dd68-442c-98ef-06999c91cd86",
        "parentId" : "7bb5d89a-d9f9-41ac-9626-67163aeec8a6",
        "authorId" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "body" : "That response happens as a result of the codefix being invoked; as far as I know the \"install types\" codefix is working as expected so we don't need to clear the cache here. If that's bugged then we can make this nonconditional on the command type",
        "createdAt" : "2017-12-13T01:45:26Z",
        "updatedAt" : "2017-12-13T17:23:00Z",
        "lastEditedBy" : "8ef7dcc8-4842-40e3-9f9a-182aa5f9b120",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e122d030586dadbaf41f60a93c85816a027bbd7",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +555,559 @@                    this.typingsCache.deleteTypingsForProject(response.projectName);\n                    break;\n            }\n            this.delayUpdateProjectGraphAndInferredProjectsRefresh(project);\n        }"
  },
  {
    "id" : "aa8eab36-8e12-442b-9c2c-44efdc5c16e1",
    "prId" : 19730,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19730#pullrequestreview-74538761",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcfd40b8-6666-41a6-b110-1944ba5ca1ef",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "`this.currentDirectory` on the editor service as a whole seems wrong to me.. when do you ever want the server directory to resolve a file reference... do not know what to do about it though.. I think the reason it works is that the editors always send us absolute paths. but it just seems wrong",
        "createdAt" : "2017-11-03T23:15:38Z",
        "updatedAt" : "2017-11-06T18:57:06Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "70343c4c-9bc3-4604-891b-0ebf12625132",
        "parentId" : "dcfd40b8-6666-41a6-b110-1944ba5ca1ef",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I agree.. But I think for now we should let it sit that way and later just get rid of this.currentDirectory from projectService and ensure all the file paths are absolute?",
        "createdAt" : "2017-11-03T23:30:11Z",
        "updatedAt" : "2017-11-06T18:57:06Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "01453d6f-ec53-4996-9786-7451ff646bd9",
        "parentId" : "dcfd40b8-6666-41a6-b110-1944ba5ca1ef",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Also i dont know what to do if non rooted file is opened without providing projectRootPath? which was one of the reason I let it be that way.. (what do we use as current directory then?) \r\nPS: I am updating the current test to run both with and without projectRootPath when opening the file. \r\nHave noticed that if you openFolder in vscode the projectRootPath is sent as that folder path,",
        "createdAt" : "2017-11-03T23:32:25Z",
        "updatedAt" : "2017-11-06T18:57:06Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "42e0aff8-c0f2-46f1-b6bc-81a00081555d",
        "parentId" : "dcfd40b8-6666-41a6-b110-1944ba5ca1ef",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I think we should just assume that anything that comes from the editor is a `Path`. do not mess up with it. only closed files, or files that we have generated by resolution should be converted to a `Path` by us, and for these we always have a directory to resolve the path against. \r\n\r\nin other words, if the editor gives us a file name, we should not change it.",
        "createdAt" : "2017-11-06T19:48:26Z",
        "updatedAt" : "2017-11-06T19:48:26Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "163e40cde68d945dda726a93b748fa900e0b782e",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +1761,1765 @@                    this.watchClosedScriptInfo(info);\n                }\n                else if (!isRootedDiskPath(fileName) && currentDirectory !== this.currentDirectory) {\n                    // File that is opened by user but isn't rooted disk path\n                    this.openFilesWithNonRootedDiskPath.set(this.toCanonicalFileName(fileName), info);"
  },
  {
    "id" : "04deb28a-d84a-4992-b427-82586af4d832",
    "prId" : 19228,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/19228#pullrequestreview-69701652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bdb0648-6993-43b0-b6f9-4b9ac1d9cc8a",
        "parentId" : null,
        "authorId" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "body" : "Would it be more natural to write this with `find`?",
        "createdAt" : "2017-10-16T21:12:35Z",
        "updatedAt" : "2017-10-16T21:12:35Z",
        "lastEditedBy" : "4fe07f9f-2018-4a29-969c-e58ed20233c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "7566760911f932c2cf639e254c15d5a571b063ad",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +244,248 @@                const fileExtension = getAnyExtensionFromPath(fileName);\n                if (fileExtension) {\n                    some(extraFileExtensions, info => {\n                        if (info.extension === fileExtension) {\n                            result = info.scriptKind;"
  },
  {
    "id" : "c865276c-d3de-43ef-9b30-0a69cd5c9bd1",
    "prId" : 17602,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17602#pullrequestreview-55101555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f64d3af-ca4c-48fc-a56c-c2f72d0104c3",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Will this property not be used if `compilerOptionsForInferredProjectsPerProjectRoot` is? Or do we sometimes use both?",
        "createdAt" : "2017-08-08T16:59:15Z",
        "updatedAt" : "2017-08-11T23:06:32Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "8a7f27aa-e1f0-4077-b907-ae682d3a5278",
        "parentId" : "2f64d3af-ca4c-48fc-a56c-c2f72d0104c3",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "We would sometimes use both. `complierOptionsForInferredProjects` would be used for any workspace root that does not have its own distinct workspace settings in your _*.code-workspace_ file.",
        "createdAt" : "2017-08-08T23:39:05Z",
        "updatedAt" : "2017-08-11T23:06:32Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c272c3c5cd153499ca7d80f5ef114f47f9d938ee",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +365,369 @@        readonly openFiles: ScriptInfo[] = [];\n\n        private compilerOptionsForInferredProjects: CompilerOptions;\n        private compilerOptionsForInferredProjectsPerProjectRoot = createMap<CompilerOptions>();\n        private readonly projectToSizeMap: Map<number> = createMap<number>();"
  },
  {
    "id" : "4f8cdda9-a7cb-4296-894a-f2f8e9c5618b",
    "prId" : 17602,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17602#pullrequestreview-55102603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12a0ea18-3ff2-4b51-86cc-0499eb79addc",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "This looks like a filter.",
        "createdAt" : "2017-08-08T17:00:29Z",
        "updatedAt" : "2017-08-11T23:06:32Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "e68d885f-6de3-4185-8f90-5d3ff645a7ac",
        "parentId" : "12a0ea18-3ff2-4b51-86cc-0499eb79addc",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "It's a bit more complex than what I'd want to put in a filter. Also a filter would introduce an unnecessary closure.",
        "createdAt" : "2017-08-08T23:45:39Z",
        "updatedAt" : "2017-08-11T23:06:32Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c272c3c5cd153499ca7d80f5ef114f47f9d938ee",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +484,488 @@\n            const updatedProjects: Project[] = [];\n            for (const project of this.inferredProjects) {\n                // Only update compiler options in the following cases:\n                // - Inferred projects without a projectRootPath, if the new options do not apply to"
  },
  {
    "id" : "389e48ff-8091-4e36-81c7-3e0503459017",
    "prId" : 17306,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17306#pullrequestreview-51483796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2943580f-2452-44cd-993a-69f64610bf31",
        "parentId" : null,
        "authorId" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "body" : "Would it make sense to lift it to const variable outside the class?",
        "createdAt" : "2017-07-21T06:09:29Z",
        "updatedAt" : "2017-07-21T06:09:29Z",
        "lastEditedBy" : "6feba8ca-0b6a-496c-83fb-5fdd3b4e56f3",
        "tags" : [
        ]
      },
      {
        "id" : "616668fc-1c5a-44d9-806c-e993722f5d8c",
        "parentId" : "2943580f-2452-44cd-993a-69f64610bf31",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Could be. PRs accepted.",
        "createdAt" : "2017-07-21T14:07:33Z",
        "updatedAt" : "2017-07-21T14:07:33Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9343ee05be566d38a14969d6d8fa18fcbaaebc32",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1615,1619 @@\n        /** Makes a filename safe to insert in a RegExp */\n        private static readonly filenameEscapeRegexp = /[-\\/\\\\^$*+?.()|[\\]{}]/g;\n        private static escapeFilenameForRegex(filename: string) {\n            return filename.replace(this.filenameEscapeRegexp, \"\\\\$&\");"
  },
  {
    "id" : "790e49a4-b817-4cdd-85bc-f3397ba9ef0a",
    "prId" : 17269,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17269#pullrequestreview-55112903",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0812ae46-ec47-4f00-a96d-a712f66ed99e",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Would be useful to specify what the key is supposed to be. Same for `mapOfConfigFilePresense` and `pendingProjectUpdates`.",
        "createdAt" : "2017-07-18T20:08:23Z",
        "updatedAt" : "2017-10-03T00:17:02Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "cefe5b66-a71a-4391-bf78-4a2c1edaf0c3",
        "parentId" : "0812ae46-ec47-4f00-a96d-a712f66ed99e",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Actually it isnt same key..  Added comment to mapOfConfigFilePresence as:\r\n```TypeScript\r\n/**\r\n         * This is a map of config file paths existance that doesnt need query to disk\r\n         * - The entry can be present because there is inferred project that needs to watch addition of config file to folder\r\n         *   In this case the exists could be true/false based on config file is present or not\r\n         * - Or it is present if we have configured project open with config file at that location\r\n         *   In this case the exists property is always true\r\n         */\r\n```",
        "createdAt" : "2017-08-09T01:08:18Z",
        "updatedAt" : "2017-10-03T00:17:02Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ac01d76f531661229e183a3490797f2a09ad4bb",
    "line" : 223,
    "diffHunk" : "@@ -1,1 +334,338 @@        readonly inferredProjects: InferredProject[] = [];\n        /**\n         * projects specified by a tsconfig.json file\n         */\n        readonly configuredProjects = createMap<ConfiguredProject>();"
  },
  {
    "id" : "1acddbf1-55c2-4ea0-bde3-ed2e730906d9",
    "prId" : 17269,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17269#pullrequestreview-55114053",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a06b0d1d-f946-48b9-97ae-3ccafd72a0e3",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "When this is called with `projects = this.inferredProjects` (at the end of the method immediately below this), doesn't `delayInferredProjectsRefresh` update all the inferred projects anyway? Wouldn't that update twice?",
        "createdAt" : "2017-07-18T21:05:14Z",
        "updatedAt" : "2017-10-03T00:17:02Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "852d8189-6809-43a8-84e3-bfad0c218cb7",
        "parentId" : "a06b0d1d-f946-48b9-97ae-3ccafd72a0e3",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Not really. RefreshInferredProjects goes through all open files and assign them to inferred project if they are not part of any project. Updating graph of the inferred projects after that will ensure that inferred projects are upto date. \r\n\r\nWe want to update graphs of existing inferred projects (when projects === this.inferrredProjects  when called (eg. to ensure that inferred project graphs take effect of updated compiler options and files are removed from these projects/ added to them) after that we want to refresh inferred project to actually make sure all the open files have correct project assignment ",
        "createdAt" : "2017-08-09T01:18:19Z",
        "updatedAt" : "2017-10-03T00:17:02Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ac01d76f531661229e183a3490797f2a09ad4bb",
    "line" : 394,
    "diffHunk" : "@@ -1,1 +561,565 @@        }\n\n        private delayUpdateProjectGraphs(projects: Project[]) {\n            for (const project of projects) {\n                this.delayUpdateProjectGraph(project);"
  },
  {
    "id" : "b6c7ebb7-7ee8-40c4-83f2-f4ffce9e66c1",
    "prId" : 17269,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17269#pullrequestreview-55666596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8bb4cee-017f-4bee-81ff-bd9a6d7e45ba",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Typo: \"up to\"\r\nThe documentation for `refreshInferredProjects` is confusing; the name of the method implies that this method ensures that all inferred projects are definitely up to date, then we have a parameter for making really sure?",
        "createdAt" : "2017-07-18T21:08:52Z",
        "updatedAt" : "2017-10-03T00:17:02Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "3bd5960d-2467-47e5-a382-00df499c0640",
        "parentId" : "b8bb4cee-017f-4bee-81ff-bd9a6d7e45ba",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Will rename refreshInferredProjects  to forceRefreshInferredProjects. The difference being that even if the project graphs for the changed files/project update graphs pending do not update any structure, you want to ensure that inferred projects are upto date no matter what.",
        "createdAt" : "2017-08-09T01:20:53Z",
        "updatedAt" : "2017-10-03T00:17:02Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "5fb0a686-a798-40ee-8d54-1a07f590174b",
        "parentId" : "b8bb4cee-017f-4bee-81ff-bd9a6d7e45ba",
        "authorId" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "body" : "Perhaps `applyPendingProjectStructureChanges(refreshInferredProjects?: boolean)`?",
        "createdAt" : "2017-08-10T23:32:23Z",
        "updatedAt" : "2017-10-03T00:17:02Z",
        "lastEditedBy" : "1eec7f68-de25-4f88-827c-00769c75a2d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ac01d76f531661229e183a3490797f2a09ad4bb",
    "line" : 467,
    "diffHunk" : "@@ -1,1 +637,641 @@\n        /**\n         * Ensures the project structures are upto date\n         * This means,\n         * - if there are changedFiles (the files were updated but their containing project graph was not upto date),"
  },
  {
    "id" : "ebf517b0-b584-4bba-8988-055157aed68a",
    "prId" : 17269,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17269#pullrequestreview-55604709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74124d39-8a4c-4676-b754-fcf14e6e1935",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "We only test `eventKind` against one of the 3 event kinds. Would be more straightforward for this to take a boolean `isDelete`.",
        "createdAt" : "2017-07-18T21:15:09Z",
        "updatedAt" : "2017-10-03T00:17:02Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "c604d81e-62b0-4827-afd2-0a199a479224",
        "parentId" : "74124d39-8a4c-4676-b754-fcf14e6e1935",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "I like it better because caller doesnt need to do the checks on events.",
        "createdAt" : "2017-08-10T17:19:09Z",
        "updatedAt" : "2017-10-03T00:17:02Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ac01d76f531661229e183a3490797f2a09ad4bb",
    "line" : 523,
    "diffHunk" : "@@ -1,1 +704,708 @@        }\n\n        private onSourceFileChanged(fileName: NormalizedPath, eventKind: FileWatcherEventKind) {\n            const info = this.getScriptInfoForNormalizedPath(fileName);\n            if (!info) {"
  },
  {
    "id" : "145bacbf-24fa-4780-9fc4-82d790991729",
    "prId" : 17269,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17269#pullrequestreview-55619440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05209d6d-e3d1-4cdf-a140-2b4c002ee728",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Why do we use `canonicalSearchPath` in some places and `searchPath` in others?\r\nWhy do we have a function `normalizedPathToPath`? Why would we want a non-normalized path?",
        "createdAt" : "2017-07-18T21:38:46Z",
        "updatedAt" : "2017-10-03T00:17:02Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "36e5ee7a-378f-4908-96aa-e83b9c87a8b1",
        "parentId" : "05209d6d-e3d1-4cdf-a140-2b4c002ee728",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "The canonicalSearchPath needs to be of type Path. ( I think the reason normalizedPathToPath exists so that we can do correct comparisons for the file names based on case sensitivity) normazedPath retains the casing even in non case sensitive files so that user gets to see file names the way it was asked. \r\n\r\nThe right thing to do here would be to have projectRootPath be of type Path instead and always compare paths and things will be right. ",
        "createdAt" : "2017-08-10T17:58:53Z",
        "updatedAt" : "2017-10-03T00:17:02Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      },
      {
        "id" : "5192c5c1-2676-4ec6-8bf9-6688ee43763b",
        "parentId" : "05209d6d-e3d1-4cdf-a140-2b4c002ee728",
        "authorId" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "body" : "Created https://github.com/Microsoft/TypeScript/issues/17726 to track this just to ensure that we can change this later (i am using same logic for search as before here and would like to change that in separate PR)",
        "createdAt" : "2017-08-10T18:11:45Z",
        "updatedAt" : "2017-10-03T00:17:02Z",
        "lastEditedBy" : "cb16561c-58c1-4f0a-a738-613be01155c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ac01d76f531661229e183a3490797f2a09ad4bb",
    "line" : 1225,
    "diffHunk" : "@@ -1,1 +1202,1206 @@\n            while (!projectRootPath || searchPath.indexOf(projectRootPath) >= 0) {\n                const canonicalSearchPath = normalizedPathToPath(searchPath, this.currentDirectory, this.toCanonicalFileName);\n                const tsconfigFileName = asNormalizedPath(combinePaths(searchPath, \"tsconfig.json\"));\n                let result = action(tsconfigFileName, combinePaths(canonicalSearchPath, \"tsconfig.json\"));"
  },
  {
    "id" : "edc8e2e9-00f2-4eab-9b8b-ca52aefd76cc",
    "prId" : 17269,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/17269#pullrequestreview-55622575",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eef13512-fc56-4f72-9917-da19a11efe13",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Why would `searchPath.indexOf(projectRootPath)` by something other than `0` or `-1`?",
        "createdAt" : "2017-07-18T21:41:22Z",
        "updatedAt" : "2017-10-03T00:17:02Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "a184d0fc-aeba-44d8-9621-53166426c81c",
        "parentId" : "eef13512-fc56-4f72-9917-da19a11efe13",
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "(could use `startsWith`?)",
        "createdAt" : "2017-08-10T18:23:05Z",
        "updatedAt" : "2017-10-03T00:17:02Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ac01d76f531661229e183a3490797f2a09ad4bb",
    "line" : 1224,
    "diffHunk" : "@@ -1,1 +1201,1205 @@            let searchPath = asNormalizedPath(getDirectoryPath(info.fileName));\n\n            while (!projectRootPath || searchPath.indexOf(projectRootPath) >= 0) {\n                const canonicalSearchPath = normalizedPathToPath(searchPath, this.currentDirectory, this.toCanonicalFileName);\n                const tsconfigFileName = asNormalizedPath(combinePaths(searchPath, \"tsconfig.json\"));"
  },
  {
    "id" : "6d5f030c-3d45-4a81-9624-3f81c1855806",
    "prId" : 11651,
    "prUrl" : "https://github.com/microsoft/TypeScript/pull/11651#pullrequestreview-4722013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b332b817-a9d4-448b-ae1a-253db9395d8b",
        "parentId" : null,
        "authorId" : "39105c25-586e-496a-9515-4fce35443a7c",
        "body" : "Why use the lowercase names here and call `protocolOptions.indentStyle.toLowerCase()` later? Why not just use \"None\" etc.?\n",
        "createdAt" : "2016-10-18T15:26:47Z",
        "updatedAt" : "2016-10-18T15:26:47Z",
        "lastEditedBy" : "39105c25-586e-496a-9515-4fce35443a7c",
        "tags" : [
        ]
      },
      {
        "id" : "e66d0b65-e6f5-4bdc-b7a9-4db1294928b9",
        "parentId" : "b332b817-a9d4-448b-ae1a-253db9395d8b",
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "because we cannot guarantee that all callers will use proper casing for these values. It can be enforced for `.ts` sources but other consumers cannot be checked so we try to be tolerant\n",
        "createdAt" : "2016-10-18T17:41:26Z",
        "updatedAt" : "2016-10-18T17:41:27Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d84245ba295097a0003e69c1d696e57aa236be6",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +35,39 @@    const compilerOptionConverters = prepareConvertersForEnumLikeCompilerOptions(optionDeclarations);\n    const indentStyle = createMap({\n        \"none\": IndentStyle.None,\n        \"block\": IndentStyle.Block,\n        \"smart\": IndentStyle.Smart"
  },
  {
    "id" : "f6e23a6a-cac3-486c-9f2a-97e87a7d96f1",
    "prId" : 7513,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c8b0eb0-87df-48b6-b22f-45976f4827f6",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Is the intent to just stop loading files at this point without issuing an error, and to let `createProgram` issue the error when it adds up the file sizes? If so, add a comment here to explain this, so that future readers know why you are just breaking out of the loop without any kind of error.\n",
        "createdAt" : "2016-03-15T04:48:27Z",
        "updatedAt" : "2016-03-15T22:50:16Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "aa5548c1-978b-4399-a9c2-5dfd4535e938",
        "parentId" : "0c8b0eb0-87df-48b6-b22f-45976f4827f6",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "Exactly, as I can't create a diagnostic within `editorServices.ts`, the error returned here would be only used for logging. Adding a comment\n",
        "createdAt" : "2016-03-15T04:57:29Z",
        "updatedAt" : "2016-03-15T22:50:16Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0fc9e0468133a956c28a5ee89bf7cb5d00e7eed",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1255,1259 @@                            // The project size is too large. Stop loading the files on the server,\n                            // and let the compiler issue an diagnostic via `createProgram`.\n                            break;\n                        }\n                    }"
  },
  {
    "id" : "408bb9d4-840d-4e14-a039-03cd07d8c53b",
    "prId" : 7513,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b18d83eb-365b-4f29-b2ef-7d78b9ac640c",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Just because `projectOptions` were specified, does this mean the files were listed? Or is this different to the `files` setting in the config file? (I may just be confused).\n",
        "createdAt" : "2016-03-15T04:50:47Z",
        "updatedAt" : "2016-03-15T22:50:16Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "d7f18af5-c25b-4759-bf9e-318609ab47e8",
        "parentId" : "b18d83eb-365b-4f29-b2ef-7d78b9ac640c",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "This `files` is the parsed file list for a project, not just what the user specified in `files` list in tsconfig.json. All `projectOptions` are obtained from calling `configFileToProjectOptions`, and in that function [it is guaranteed to have a `files` array](https://github.com/zhengbli/TypeScript/blob/projectSizeLimitFor18-2/src/server/editorServices.ts#L1204). So it should be safe to call `projectOptions.files`  \n",
        "createdAt" : "2016-03-15T05:31:18Z",
        "updatedAt" : "2016-03-15T22:50:16Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0fc9e0468133a956c28a5ee89bf7cb5d00e7eed",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1290,1294 @@                    // program size reached the upper limit. In that case project.projectOptions.files should\n                    // be more precise. However this would only happen for configured project.\n                    const oldFileNames = project.projectOptions ? project.projectOptions.files : project.compilerService.host.roots.map(info => info.fileName);\n                    const newFileNames = projectOptions.files;\n                    const fileNamesToRemove = oldFileNames.filter(f => newFileNames.indexOf(f) < 0);"
  },
  {
    "id" : "b27e4073-3cb2-4613-8e3c-be5dbbb3afc1",
    "prId" : 7440,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0120c725-54f5-4530-bcba-41da3f387799",
        "parentId" : null,
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "Why does it always return Unknown here? I may have missed the part in the original PR to master\n",
        "createdAt" : "2016-03-09T04:45:57Z",
        "updatedAt" : "2016-03-09T23:50:58Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      },
      {
        "id" : "02080aa8-86af-4188-88c7-dfb78a1a0676",
        "parentId" : "0120c725-54f5-4530-bcba-41da3f387799",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "getScriptKind() is a way to retrieve the script kind from the host when it cannot be determined by the file name.  For example, the VS host supports script block files which can have the following extensions (.html, .htm, .aspx, .ascx, etc).The VS host returns ScriptKind.JS for these file extensions. For other hosts that do not currently require support for script block files ScriptKind.Unknown is returned. For these hosts if the script kind cannot be determined from the file name and ScriptKind.Unknown is encountered, the default ScriptKind.TS will be used.   \n",
        "createdAt" : "2016-03-09T07:48:48Z",
        "updatedAt" : "2016-03-09T23:50:58Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      },
      {
        "id" : "06ae0dc5-fb55-4efb-ba02-a5b19a5459ce",
        "parentId" : "0120c725-54f5-4530-bcba-41da3f387799",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "here we should ask the editor about the kind. this way we can support in memory buffers that does not have a name or a file on disk\n",
        "createdAt" : "2016-03-09T21:00:51Z",
        "updatedAt" : "2016-03-09T23:50:58Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "c60a8377-21d0-431e-bac9-48ddb701f5e6",
        "parentId" : "0120c725-54f5-4530-bcba-41da3f387799",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "but that is a different change.\n",
        "createdAt" : "2016-03-09T21:01:03Z",
        "updatedAt" : "2016-03-09T23:50:58Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "d59df8fb-ac96-49a3-b958-ac91e0fbc973",
        "parentId" : "0120c725-54f5-4530-bcba-41da3f387799",
        "authorId" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "body" : "sounds good\n",
        "createdAt" : "2016-03-09T23:29:07Z",
        "updatedAt" : "2016-03-09T23:50:58Z",
        "lastEditedBy" : "e0c67da9-6211-4aa1-bd66-75846c68c91c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe9da694b2c21b41247e0e9b685a190285773729",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +193,197 @@        }\n\n        getScriptKind() {\n            return ScriptKind.Unknown;\n        }"
  },
  {
    "id" : "3cb3e4e6-9e22-4cba-a42c-16d8459244ef",
    "prId" : 6545,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f86d9e2-4bc6-4a66-9901-3e731cdc6638",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "There's a findConfigFile function in program.ts also which only looks for tsconfig.json currently. This appear to only be used by the tsc command-line compiler though, so not needed for this review. Please add an issue to fix it though for the effort to compiler JavaScript at the command line (issue #4792). \n",
        "createdAt" : "2016-01-21T16:33:39Z",
        "updatedAt" : "2016-01-22T00:13:23Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "8007c0f8-4163-4900-b724-eb7c4f06ac73",
        "parentId" : "0f86d9e2-4bc6-4a66-9901-3e731cdc6638",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "Opened issue #6561 for further discussion\n",
        "createdAt" : "2016-01-21T18:22:58Z",
        "updatedAt" : "2016-01-22T00:13:23Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "31f5502f2b4ae4e4ad1253c0f63b5e0241c8447f",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +1025,1029 @@        // The server must start searching from the directory containing\n        // the newly opened file.\n        findConfigFile(searchPath: string): string {\n            while (true) {\n                const tsconfigFileName = ts.combinePaths(searchPath, \"tsconfig.json\");"
  },
  {
    "id" : "752df374-33d0-4be3-9438-4564cc760857",
    "prId" : 6545,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7b32b33-796e-4311-9ad7-80f2caa25284",
        "parentId" : null,
        "authorId" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "body" : "Do you need to make a similar change at https://github.com/Microsoft/TypeScript/blob/master/src/services/shims.ts#L949 ?\n",
        "createdAt" : "2016-01-21T16:49:07Z",
        "updatedAt" : "2016-01-22T00:13:23Z",
        "lastEditedBy" : "d70b5be0-1cc6-43f7-b8db-3c51654d174d",
        "tags" : [
        ]
      },
      {
        "id" : "7745ff75-ad2b-4f20-8152-bf06ef1a85bc",
        "parentId" : "e7b32b33-796e-4311-9ad7-80f2caa25284",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "Yes I should, Visual Studio should get the same support with this PR. Will update.\n",
        "createdAt" : "2016-01-21T18:10:41Z",
        "updatedAt" : "2016-01-22T00:13:23Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "31f5502f2b4ae4e4ad1253c0f63b5e0241c8447f",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +1187,1191 @@            }\n            else {\n                const parsedCommandLine = ts.parseJsonConfigFileContent(rawConfig.config, this.host, dirPath, /*existingOptions*/ {}, configFilename);\n                Debug.assert(!!parsedCommandLine.fileNames);\n"
  },
  {
    "id" : "7ffc1da9-9f00-4d1b-9efb-74ab1eff7374",
    "prId" : 6140,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2d326c9-0794-416a-9841-142d9af1b192",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "what is this Todo for? you already ignore error and succeeded?\n",
        "createdAt" : "2015-12-18T05:25:35Z",
        "updatedAt" : "2015-12-18T05:28:20Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      },
      {
        "id" : "789dcc36-5b6c-4003-b693-5e8649d81d7d",
        "parentId" : "d2d326c9-0794-416a-9841-142d9af1b192",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I guess if there's a problem, it'll get fixed at that point. No sense leaving the comment.\n",
        "createdAt" : "2015-12-18T05:56:31Z",
        "updatedAt" : "2015-12-18T05:56:31Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "75678de6d99ecffec583804fd6ce52cc83c46618",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +556,560 @@\n        handleProjectFilelistChanges(project: Project) {\n            // TODO: Ignoring potentially returned 'error' and 'succeeded' condition\n            const { projectOptions } = this.configFileToProjectOptions(project.projectFilename);\n"
  },
  {
    "id" : "94829c87-8ca5-480e-8cdc-feb886b8b28b",
    "prId" : 5436,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99e940da-e882-48cb-a736-65d9cbedfba1",
        "parentId" : null,
        "authorId" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "body" : "Should stay as `let`.\n",
        "createdAt" : "2015-10-28T17:29:09Z",
        "updatedAt" : "2015-10-28T17:29:09Z",
        "lastEditedBy" : "ebe500ea-e2a7-4d57-a65b-c50e7640b049",
        "tags" : [
        ]
      },
      {
        "id" : "4cfc960e-49b0-481e-bdb0-a883666cdf06",
        "parentId" : "99e940da-e882-48cb-a736-65d9cbedfba1",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "i will get this in a different change in master.\n",
        "createdAt" : "2015-10-28T18:50:09Z",
        "updatedAt" : "2015-10-28T18:50:09Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "616b0d79394ad564f3b57d9268125e81d483617f",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +385,389 @@\n        getFileNames() {\n            var sourceFiles = this.program.getSourceFiles();\n            return sourceFiles.map(sourceFile => sourceFile.fileName);\n        }"
  },
  {
    "id" : "400b0e6f-d047-4846-ac66-d6d6667415c1",
    "prId" : 5127,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eaa52f2a-1636-476c-8c7e-c3ce3b3695e7",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "possibly use delete\n",
        "createdAt" : "2015-10-15T00:35:11Z",
        "updatedAt" : "2015-10-15T00:35:11Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcfc25eeb040390492716626757274c945ebd47f",
    "line" : 293,
    "diffHunk" : "@@ -1,1 +736,740 @@                        this.log(\"Close directory watcher for: \" + directory);\n                        project.projectService.directoryWatchersForTsconfig[directory].close();\n                        project.projectService.directoryWatchersForTsconfig[directory] = undefined;\n                    }\n                }"
  },
  {
    "id" : "2fcbf5aa-7c7f-461b-93d1-8b19a7735ccf",
    "prId" : 3542,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20e7971f-a0ae-4c8e-91e1-cee862ea10f7",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "ServerHost\n",
        "createdAt" : "2015-06-18T00:27:44Z",
        "updatedAt" : "2015-06-18T05:06:35Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cc97f1fc5777d461e780ac37b30ca366c02f6eb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1362,1366 @@\n        static fromString(host: ServerHost, script: string) {\n            var svc = new ScriptVersionCache();\n            var snap = new LineIndexSnapshot(0, svc);\n            svc.versions[svc.currentVersion] = snap;"
  },
  {
    "id" : "5951f96d-cf1e-4c7e-97cb-67d9edf1dcf1",
    "prId" : 3047,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15c734ef-44e3-4f91-b74f-bfebfd0ec104",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "@zhengbli can you give this a test on latest sublime plugin. i think this is related to https://github.com/Microsoft/TypeScript-Sublime-Plugin/issues/180\n",
        "createdAt" : "2015-05-05T22:05:26Z",
        "updatedAt" : "2015-05-05T22:05:26Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      },
      {
        "id" : "adeded90-63d4-4abe-bcce-b0c6d3ffd39d",
        "parentId" : "15c734ef-44e3-4f91-b74f-bfebfd0ec104",
        "authorId" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "body" : "The root issue of Microsoft/TypeScript-Sublime-Plugin#180 seems to be I accidentally uploaded a locally built tsserver.js, and the problem went away with the official 1.5 beta one, so it may not apply here.\n",
        "createdAt" : "2015-05-05T23:16:56Z",
        "updatedAt" : "2015-05-05T23:16:56Z",
        "lastEditedBy" : "369b80dc-e364-41b0-b447-7b9bba064064",
        "tags" : [
        ]
      }
    ],
    "commit" : "884ca4edbc949a9a175c0e4a66567c694c4d8c43",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +907,911 @@            // file references will be relative to dirPath (or absolute)\n            var dirPath = ts.getDirectoryPath(configFilename);\n            var rawConfig: { config?: ProjectOptions; error?: Diagnostic; } = ts.readConfigFile(configFilename);\n            if (rawConfig.error) {\n                return rawConfig.error;"
  },
  {
    "id" : "08d8691d-7c7d-4afd-bd2d-1c6a69fd3e6e",
    "prId" : 2450,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d53f743-fb4d-4699-a635-1b3ae42f1c3b",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Use `===`\n",
        "createdAt" : "2015-03-21T08:52:51Z",
        "updatedAt" : "2015-03-24T21:11:05Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "48482071f6af1b7ae929bd3815afaef45e98e3c6",
    "line" : 356,
    "diffHunk" : "@@ -1,1 +883,887 @@                        var rootFilename = parsedCommandLine.fileNames[i];\n                        if (ts.sys.fileExists(rootFilename)) {\n                            var info = this.openFile(rootFilename, clientFileName == rootFilename);\n                            proj.addRoot(info);\n                        }"
  },
  {
    "id" : "2b6d5891-8bcc-4a82-82ae-7b89bcd4ad5e",
    "prId" : 2450,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c20e64b-524f-4365-92bb-90376ef17897",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Leave a comment for the parameter (i.e. `/*openedByClient*/ true`.\n",
        "createdAt" : "2015-03-21T08:54:33Z",
        "updatedAt" : "2015-03-24T21:11:05Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "48482071f6af1b7ae929bd3815afaef45e98e3c6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +773,777 @@                }\n            }\n            var info = this.openFile(fileName, true);\n            this.addOpenFile(info);\n            this.printProjects();"
  },
  {
    "id" : "3222245d-169e-485b-aa76-29bb33367b83",
    "prId" : 2450,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fc3e541-8e2f-4fc8-8c3d-c98d2522097c",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Use `!==`\n",
        "createdAt" : "2015-03-21T08:55:48Z",
        "updatedAt" : "2015-03-24T21:11:05Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "48482071f6af1b7ae929bd3815afaef45e98e3c6",
    "line" : 205,
    "diffHunk" : "@@ -1,1 +639,643 @@                var inferredProject = this.inferredProjects[i];\n                inferredProject.updateGraph();\n                if (inferredProject != excludedProject) {\n                    if (inferredProject.getSourceFile(info)) {\n                        info.defaultProject = inferredProject;"
  },
  {
    "id" : "95c699a8-37db-46d4-aeb8-ff8564980782",
    "prId" : 2450,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9382fec0-e96b-4825-8933-d0c9c5a6d872",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "You could use `filter` for this. Also, `copyListRemovingItem` uses `==` instead of `===`.\n",
        "createdAt" : "2015-03-21T09:02:56Z",
        "updatedAt" : "2015-03-24T21:11:05Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "48482071f6af1b7ae929bd3815afaef45e98e3c6",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +604,608 @@                }\n                else {\n                    this.inferredProjects = copyListRemovingItem(removedProject, this.inferredProjects);\n                }\n                var openFilesReferenced: ScriptInfo[] = [];"
  },
  {
    "id" : "3096e963-21bf-4df0-8b4c-ae6aed537284",
    "prId" : 2450,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f2e8989-a452-44e6-a3a3-f4def9c0421f",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "do we want to kill the whole process here cause there is an unknown configuration option, or should we just log the issue and use what we have?\n",
        "createdAt" : "2015-03-24T01:07:02Z",
        "updatedAt" : "2015-03-24T21:11:05Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "48482071f6af1b7ae929bd3815afaef45e98e3c6",
    "line" : 339,
    "diffHunk" : "@@ -1,1 +872,876 @@                var parsedCommandLine = ts.parseConfigFile(rawConfig, dirPath);\n                if (parsedCommandLine.errors && (parsedCommandLine.errors.length > 0)) {\n                    return { errorMsg: \"tsconfig option errors\" };\n                }\n                else if (parsedCommandLine.fileNames) {"
  },
  {
    "id" : "d5ee27a1-848b-4af8-b174-c384e2df264f",
    "prId" : 2376,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e480927-cd09-42e7-9086-2bfd56c11517",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Is this changing the data that the host gave us?  If so, won't our lines/characters be off in the responses we send the host?\n\nHow does this work wrt editors that allow tabs and spaces to be mixed (like VS)?\n",
        "createdAt" : "2015-03-17T00:55:50Z",
        "updatedAt" : "2015-03-17T00:58:59Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "f7c5edd7-aff2-4687-9575-ecf1986c9629",
        "parentId" : "4e480927-cd09-42e7-9086-2bfd56c11517",
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "I think this goes to show that loading the file from disk does not seem to be the right way. Ideally the openfile message to send the contents. the issue is perf when doing the reload, assuming that this is a common occurrence.\n",
        "createdAt" : "2015-03-17T03:39:55Z",
        "updatedAt" : "2015-03-17T03:39:55Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c60cf96dd8a76fd0e8302b2213b174fd7805e94",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +638,642 @@                }\n                if (content !== undefined) {\n                    content = this.expandTabs(content);\n                    info = new ScriptInfo(this.host, fileName, content, openedByClient);\n                    this.filenameToScriptInfo[fileName] = info;"
  },
  {
    "id" : "b888e27d-dcec-467a-8dd5-997fd9ea9161",
    "prId" : 2258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ebed74b-85bb-4b66-8c0d-c905547198d9",
        "parentId" : null,
        "authorId" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "body" : "these will require changes on the VS side as well to implement the new APIs. alternativelly you can use one of the methods of the old Logger interface that VS still implements:\n\n``` ts\n        bool information();\n        bool debug();\n        bool warning();\n        bool error();\n        bool fatal();\n```\n\nalternatively you can make them optional, and add a comment.\n",
        "createdAt" : "2015-03-08T17:36:30Z",
        "updatedAt" : "2015-03-09T18:58:53Z",
        "lastEditedBy" : "7a428a65-3bd3-41f2-b899-b42dc7177963",
        "tags" : [
        ]
      }
    ],
    "commit" : "37c6f69f015c3da3c709e2bae0786aa55a10a045",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +6,10 @@    export interface Logger {\n        close(): void;\n        isVerbose(): boolean;\n        loggingEnabled(): boolean;\n        perftrc(s: string): void;"
  },
  {
    "id" : "722feed5-eaa3-4748-a0f3-d71aba1f8618",
    "prId" : 2125,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51794997-264f-421a-bbae-2ee70c9c8845",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Looks like this might be an incomplete addition\n",
        "createdAt" : "2015-02-24T07:55:02Z",
        "updatedAt" : "2015-02-24T08:08:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "68049ea5035884216b45215d6d2dcfa37619e798",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +570,574 @@                }\n                else {\n                    // remove project from inferred projects list because root captured\n                    this.inferredProjects = copyListRemovingItem(rootedProject, this.inferredProjects);\n                    this.openFilesReferenced.push(rootFile);"
  },
  {
    "id" : "52c08782-c2b4-447e-9d71-39d6ed31b87c",
    "prId" : 2125,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4b6fdcd-d59a-4073-bee6-eb845a5a5494",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Add a newline above this declaration\n",
        "createdAt" : "2015-02-24T07:56:38Z",
        "updatedAt" : "2015-02-24T08:08:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "68049ea5035884216b45215d6d2dcfa37619e798",
    "line" : null,
    "diffHunk" : "@@ -1,1 +560,564 @@            // inferred projects list (since it is no longer a root) and add\n            // the file to the open, referenced file list.\n            var openFileRoots: ScriptInfo[] = [];\n            for (var i = 0, len = this.openFileRoots.length; i < len; i++) {\n                var rootFile = this.openFileRoots[i];"
  },
  {
    "id" : "2b025b16-60f6-430b-8b2d-ff134b5dcdf7",
    "prId" : 2125,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1ac2b1c-284c-4122-b2e8-9ea9703f81ee",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Newline above this declaration\n",
        "createdAt" : "2015-02-24T07:57:06Z",
        "updatedAt" : "2015-02-24T08:08:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "68049ea5035884216b45215d6d2dcfa37619e798",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +543,547 @@                var referencedFile = this.openFilesReferenced[i];\n                referencedFile.defaultProject.updateGraph();\n                var sourceFile = referencedFile.defaultProject.getSourceFile(referencedFile);\n                if (sourceFile) {\n                    openFilesReferenced.push(referencedFile);"
  },
  {
    "id" : "f04a49d7-77fe-4222-9e5f-d9dc80129322",
    "prId" : 2125,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a1608f6-fca3-45d3-be7a-d73cf16ebd8f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "I think a comment above this logic would be helpful; at a glance, I'm a little unsure what the motive is behind separating referenced files and opened files.\n",
        "createdAt" : "2015-02-24T07:58:44Z",
        "updatedAt" : "2015-02-24T08:08:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "68049ea5035884216b45215d6d2dcfa37619e798",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +541,545 @@\n            for (var i = 0, len = this.openFilesReferenced.length; i < len; i++) {\n                var referencedFile = this.openFilesReferenced[i];\n                referencedFile.defaultProject.updateGraph();\n                var sourceFile = referencedFile.defaultProject.getSourceFile(referencedFile);"
  },
  {
    "id" : "faee8bc1-57e3-44e9-95aa-06ac2fca184c",
    "prId" : 2125,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7ce03e7-7994-4232-a09a-8bac357a74ad",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Consider calling this `updatedReferencedFiles` to disambiguate between it and `this.updatedReferencedFiles`. I actually thought we were mutating the original list at first.\n",
        "createdAt" : "2015-02-24T08:00:23Z",
        "updatedAt" : "2015-02-24T08:08:55Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "68049ea5035884216b45215d6d2dcfa37619e798",
    "line" : null,
    "diffHunk" : "@@ -1,1 +537,541 @@            // If not, add the file to an unattached list, to be rechecked later.\n\n            var openFilesReferenced: ScriptInfo[] = [];\n            var unattachedOpenFiles: ScriptInfo[] = [];\n"
  },
  {
    "id" : "77a7b140-dfc9-45c9-bc89-7f1e324ebd14",
    "prId" : 2125,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89fb5e75-7d40-4623-a0ce-147f61e6d01f",
        "parentId" : null,
        "authorId" : "26699569-4335-45b0-a775-bfd0a044730b",
        "body" : "Some comment on why calling updateGraph or what it does  will be helpful in this context\n",
        "createdAt" : "2015-02-25T18:42:28Z",
        "updatedAt" : "2015-02-25T18:42:42Z",
        "lastEditedBy" : "26699569-4335-45b0-a775-bfd0a044730b",
        "tags" : [
        ]
      }
    ],
    "commit" : "68049ea5035884216b45215d6d2dcfa37619e798",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +542,546 @@            for (var i = 0, len = this.openFilesReferenced.length; i < len; i++) {\n                var referencedFile = this.openFilesReferenced[i];\n                referencedFile.defaultProject.updateGraph();\n                var sourceFile = referencedFile.defaultProject.getSourceFile(referencedFile);\n                if (sourceFile) {"
  },
  {
    "id" : "91cc3a0e-9542-405a-80fe-cbffe8e1fa01",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e459c216-1ed9-473e-ba86-d34a0150ed4d",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "this should be performanceTrace.\n",
        "createdAt" : "2015-02-16T22:40:13Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +6,10 @@    export interface Logger {\n        close(): void;\n        perftrc(s: string): void;\n        info(s: string): void;\n        startGroup(): void;"
  },
  {
    "id" : "742bc3a6-90b9-453a-9c07-f08e8b9f0145",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c9c2463-d843-4eaa-922d-02fec161e04d",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "message.\n",
        "createdAt" : "2015-02-16T22:40:19Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +10,14 @@        startGroup(): void;\n        endGroup(): void;\n        msg(s: string, type?: string): void;\n    }\n"
  },
  {
    "id" : "281cf79a-bba7-4a13-bc5f-9afdfa291250",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b575ecb-19c9-4cb9-ac71-b2e0f565ff23",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "svc?  Also, make these fields privat.e\n",
        "createdAt" : "2015-02-16T22:40:37Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +16,20 @@\n    class ScriptInfo {\n        svc: ScriptVersionCache;\n        children: ScriptInfo[] = [];     // files referenced by this file\n"
  },
  {
    "id" : "bb2198df-c792-45ce-8e90-ab586ed7d57c",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccb261bb-1f15-43af-95f3-5b54f12bceea",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "snap?\n",
        "createdAt" : "2015-02-16T22:40:54Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@        }\n\n        snap() {\n            return this.svc.getSnapshot();\n        }"
  },
  {
    "id" : "55a57c25-e290-4e56-a069-8fe75020b5ba",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f14c448-7d14-4b6a-8020-8946d9f2f09b",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "make private.\n",
        "createdAt" : "2015-02-16T22:41:05Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +63,67 @@\n    class LSHost implements ts.LanguageServiceHost {\n        ls: ts.LanguageService = null;\n        compilationSettings: ts.CompilerOptions;\n        filenameToScript: ts.Map<ScriptInfo> = {};"
  },
  {
    "id" : "73c91f34-b49f-4242-9e9f-b94f1c8d2587",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c53d40b0-a4e6-4b03-86f6-c9f4bddedfcc",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "is this bad?\n",
        "createdAt" : "2015-02-16T22:41:30Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +136,140 @@                }\n            }\n            else {\n            }\n            return scriptInfo;"
  },
  {
    "id" : "31615a03-cda9-4814-a3aa-27c24702664a",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39b87cb7-4ef1-4de8-8741-a97e4266bc1d",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "fileName everywhere.\n",
        "createdAt" : "2015-02-16T22:41:43Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +149,153 @@        }\n\n        saveTo(filename: string, tmpfilename: string) {\n            var script = this.getScriptInfo(filename);\n            if (script) {"
  },
  {
    "id" : "1c391713-7ace-4ab0-a96d-04c5bad6ed94",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3de84d4-ea89-4dfb-a145-5a3ed513d091",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "if line is 1-based, why are we addeing 1 here...\n",
        "createdAt" : "2015-02-16T22:42:04Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +197,201 @@            var index = script.snap().index;\n\n            var lineInfo = index.lineNumberToInfo(line + 1);\n            var len: number;\n            if (lineInfo.leaf) {"
  },
  {
    "id" : "8dc5def9-397f-41ba-87d0-28f7bd2fc167",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61dfa626-05e4-46f3-8e3c-56cc7b313a80",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "filter(list, v => v != item); \n\n?\n",
        "createdAt" : "2015-02-16T22:42:35Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 352,
    "diffHunk" : "@@ -1,1 +350,354 @@    }\n\n    function copyListRemovingItem<T>(item: T, list: T[]) {\n        var copiedList: T[] = [];\n        for (var i = 0, len = list.length; i < len; i++) {"
  },
  {
    "id" : "c4afe818-f292-4b1a-b8aa-7e7c80303692",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1297815a-0e34-4e52-8712-443382e0d470",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "private\n",
        "createdAt" : "2015-02-16T22:42:45Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      },
      {
        "id" : "e99c9e52-660d-4fde-bfd2-44541e301d9e",
        "parentId" : "1297815a-0e34-4e52-8712-443382e0d470",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "fileNameToScriptInfo\n",
        "createdAt" : "2015-02-17T21:46:24Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 367,
    "diffHunk" : "@@ -1,1 +365,369 @@\n    export class ProjectService {\n        filenameToScriptInfo: ts.Map<ScriptInfo> = {};\n        // open, non-configured files in two lists\n        openFileRoots: ScriptInfo[] = [];"
  },
  {
    "id" : "b3bb34a5-e930-4c8c-9e89-b31f91054e52",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7988f7c2-db6e-436f-a688-714d6608b3be",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "iproj?\n",
        "createdAt" : "2015-02-16T22:43:01Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 405,
    "diffHunk" : "@@ -1,1 +403,407 @@\n        createInferredProject(root: ScriptInfo) {\n            var iproj = new Project(this);\n            iproj.addRoot(root);\n            iproj.finishGraph();"
  },
  {
    "id" : "3735822c-5fa3-462c-b47a-7fb77dc3516d",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb0c0207-fe05-4191-90fa-4283dd8f8b19",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "psLogger?\n",
        "createdAt" : "2015-02-16T22:43:12Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 374,
    "diffHunk" : "@@ -1,1 +372,376 @@        inferredProjects: Project[] = [];\n\n        constructor(public host: ServerHost, public psLogger: Logger, public eventHandler?: ProjectServiceEventHandler) {\n            // ts.disableIncrementalParsing = true;\n        }"
  },
  {
    "id" : "3d002c57-52f3-4706-afe5-27b7482e1589",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38c50a4d-d27f-48ad-b2db-6bf09ee36292",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "this should likely not be optional.  Too easy to forget to pass this value.\n",
        "createdAt" : "2015-02-16T22:44:11Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 527,
    "diffHunk" : "@@ -1,1 +525,529 @@         * @param filename is absolute pathname\n         */\n        openFile(fileName: string, openedByClient = false) {\n            fileName = ts.normalizePath(fileName);\n            var info = ts.lookUp(this.filenameToScriptInfo, fileName);"
  },
  {
    "id" : "b706e8e2-d639-4675-9d2f-25840689e915",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1acc408a-b543-4c34-ba71-64ef20a014b2",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "all private.\n",
        "createdAt" : "2015-02-16T22:44:58Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 778,
    "diffHunk" : "@@ -1,1 +776,780 @@\n    class EditWalker extends BaseLineIndexWalker {\n        lineIndex = new LineIndex();\n        // path to start of range\n        startPath: LineCollection[];"
  },
  {
    "id" : "aab2b122-49e0-46e6-a3be-6ed3e1433b2e",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1b2ef91-36c2-40d3-9de7-9f629f3654a6",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "Can we put this all into its own text API or something?  I feel like this is all private implementation details that should not be exported or used by anything else.\n",
        "createdAt" : "2015-02-16T22:45:44Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 744,
    "diffHunk" : "@@ -1,1 +742,746 @@    }\n\n    export interface ILineInfo {\n        line: number;\n        col: number;"
  },
  {
    "id" : "3732621e-ef39-46c9-a561-415e498c3742",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ee4d261-da05-4f75-8532-9d6c9e592fa1",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "What do any of these mean?\n",
        "createdAt" : "2015-02-16T22:45:53Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 751,
    "diffHunk" : "@@ -1,1 +749,753 @@    }\n\n    enum CharRangeSection {\n        PreStart,\n        Start,"
  },
  {
    "id" : "9c6a32bd-19b4-4033-9ca3-8efe0941a194",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "129e4d56-4da8-4f82-92f9-fd19e8d60218",
        "parentId" : null,
        "authorId" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "body" : "start, length.\n",
        "createdAt" : "2015-02-16T22:46:35Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "d46620b3-5a79-45a1-96fd-76f5c2ababd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 987,
    "diffHunk" : "@@ -1,1 +985,989 @@    // text change information \n    class TextChange {\n        constructor(public pos: number, public deleteLen: number, public insertedText?: string) {\n        }\n"
  },
  {
    "id" : "425bdbae-4914-43ba-84b1-e86c5c27674a",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9abfad5e-918f-4c34-aa58-66308f01e885",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Remove parens, use `===`\n",
        "createdAt" : "2015-02-17T02:11:26Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 248,
    "diffHunk" : "@@ -1,1 +246,250 @@            var dirTail = 0;\n            var sflen = splitFilename.length;\n            while ((i < sflen) && (splitFilename[i].charAt(0) == '.')) {\n                var dots = splitFilename[i];\n                if (dots == '..') {"
  },
  {
    "id" : "5824fd88-0ea5-4d94-8cc4-2485f7bd3035",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b34dad06-d0ca-492b-935d-f353d343e1a9",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Use `===`\n",
        "createdAt" : "2015-02-17T02:11:30Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 250,
    "diffHunk" : "@@ -1,1 +248,252 @@            while ((i < sflen) && (splitFilename[i].charAt(0) == '.')) {\n                var dots = splitFilename[i];\n                if (dots == '..') {\n                    dirTail++;\n                }"
  },
  {
    "id" : "6691cc86-f618-4880-8e01-dfa0bedf3bbf",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "997c347a-4ca3-4f3d-911d-3f04c1f3f31c",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Use `!==`\n",
        "createdAt" : "2015-02-17T02:11:44Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 253,
    "diffHunk" : "@@ -1,1 +251,255 @@                    dirTail++;\n                }\n                else if (dots != '.') {\n                    return undefined;\n                }"
  },
  {
    "id" : "7b6d9362-007c-449b-9297-83b64c0e8598",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c4bae4d-d86f-487c-87c9-e3b06e9905bc",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "fileName\n",
        "createdAt" : "2015-02-17T02:12:53Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 237,
    "diffHunk" : "@@ -1,1 +235,239 @@\n    // assumes normalized paths\n    function getAbsolutePath(filename: string, directory: string) {\n        var rootLength = ts.getRootLength(filename);\n        if (rootLength > 0) {"
  },
  {
    "id" : "a08a709b-bdd2-482d-b3c2-dbc9f1def248",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "282f3967-b199-4bf4-8f22-2313bc2160c1",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Why does filename need to be split? Maybe it should be called `relativePath`?\n",
        "createdAt" : "2015-02-17T02:15:26Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 243,
    "diffHunk" : "@@ -1,1 +241,245 @@        }\n        else {\n            var splitFilename = filename.split('/');\n            var splitDir = directory.split('/');\n            var i = 0;"
  },
  {
    "id" : "da429127-9e65-424c-b505-4f7d2867591d",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77ddcd86-3e0e-4a38-a18b-19f4a52b866f",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Need a better name for `dirTail`\n",
        "createdAt" : "2015-02-17T02:16:05Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +244,248 @@            var splitDir = directory.split('/');\n            var i = 0;\n            var dirTail = 0;\n            var sflen = splitFilename.length;\n            while ((i < sflen) && (splitFilename[i].charAt(0) == '.')) {"
  },
  {
    "id" : "c0669d1a-8487-4b8f-8f50-730df14d5221",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "408dbe50-575b-4270-b71f-c2516ba3e827",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Unused.\n",
        "createdAt" : "2015-02-17T02:17:03Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "f1848a4a-4138-4da2-8b87-e4c099685388",
        "parentId" : "408dbe50-575b-4270-b71f-c2516ba3e827",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Use explicit modifiers.\n",
        "createdAt" : "2015-02-17T02:17:47Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 275,
    "diffHunk" : "@@ -1,1 +273,277 @@        program: ts.Program;\n        filenameToSourceFile: ts.Map<ts.SourceFile> = {};\n        updateGraphSeq = 0;\n\n        constructor(public projectService: ProjectService) {"
  },
  {
    "id" : "1e248c85-6317-4c4c-aac1-172e879854eb",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a034a729-d058-43ef-86d5-9a79e26b0b91",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Consider ts.forEachKey\n",
        "createdAt" : "2015-02-17T20:45:25Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +102,106 @@        getScriptFileNames() {\n            var filenames: string[] = [];\n            for (var filename in this.filenameToScript) {\n                if (this.filenameToScript[filename] && this.filenameToScript[filename].isOpen) {\n                    filenames.push(filename);"
  },
  {
    "id" : "7e32aeae-b8eb-4261-8ac6-46dd773031ad",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "def83f9a-5525-4aac-b003-5af2b82f4e2d",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Is this supposed to be a relative path?\n",
        "createdAt" : "2015-02-17T20:50:15Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +115,119 @@\n        getCurrentDirectory(): string {\n            return \"\";\n        }\n"
  },
  {
    "id" : "80a41096-4ad1-4876-9345-a7a4d9e25ccb",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae5b3e30-58f6-41ba-b74b-84fa60574c5d",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`fileName`/`tempFileName`\n\nAlso, make it `void`, not `any`\n",
        "createdAt" : "2015-02-17T20:51:15Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +157,161 @@        }\n\n        reloadScript(filename: string, tmpfilename: string, cb: () => any) {\n            var script = this.getScriptInfo(filename);\n            if (script) {"
  },
  {
    "id" : "ca6e7f87-6770-4cf8-a936-8a56cedda08e",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "446063f5-2704-4952-ab13-0a54a70c41f9",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "You already checked for undefinedness with `info`\n",
        "createdAt" : "2015-02-17T21:50:14Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 389,
    "diffHunk" : "@@ -1,1 +387,391 @@            }\n            else {\n                if (info && (!info.isOpen)) {\n                    info.svc.reloadFromFile(info.fileName);\n                }"
  },
  {
    "id" : "220b4aad-88ff-4124-8fc3-092efa44db6d",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94b6fc92-cce1-4beb-b83c-f6e61b8da60a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This is misleading, it implies that the service deleted it; it sounds more like you _detected_ a file getting deleted\n",
        "createdAt" : "2015-02-17T21:51:36Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 413,
    "diffHunk" : "@@ -1,1 +411,415 @@\n        fileDeletedInFilesystem(info: ScriptInfo) {\n            this.psLogger.info(info.fileName + \" deleted\");\n            \n            if (info.fileWatcher) {"
  },
  {
    "id" : "f818f0a1-cfcd-4e9f-bfe3-c623ad86ce5c",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d32eb845-5c14-483c-9d04-031608ff463a",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Get this onto the same line as the `=`\n",
        "createdAt" : "2015-02-17T21:52:35Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "3f280410-010e-4e9e-a330-cd542f2113a8",
        "parentId" : "d32eb845-5c14-483c-9d04-031608ff463a",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "This is awkward and a probably somewhat unnecessary.\n",
        "createdAt" : "2015-02-17T22:06:06Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 446,
    "diffHunk" : "@@ -1,1 +444,448 @@                        // remove project rooted at r\n                        this.inferredProjects =\n                        copyListRemovingItem(r.defaultProject, this.inferredProjects);\n                        // put r in referenced open file list\n                        this.openFilesReferenced.push(r);"
  },
  {
    "id" : "04bd2aef-4c7f-4325-9a5a-ae2f0391faa2",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54e380ff-ce6c-427e-83de-b9945a12b286",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`r` -> `root`\n",
        "createdAt" : "2015-02-17T21:52:44Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 441,
    "diffHunk" : "@@ -1,1 +439,443 @@                // for each inferred project root r\n                for (var i = 0, len = this.openFileRoots.length; i < len; i++) {\n                    var r = this.openFileRoots[i];\n                    // if r referenced by the new project\n                    if (info.defaultProject.getSourceFile(r)) {"
  },
  {
    "id" : "f7fb94ba-0f6c-4af2-9f1b-2ea144de9ae8",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ab730f2-8f5a-4aa3-be4d-15c2e513c2b8",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`r` -> `root`\n",
        "createdAt" : "2015-02-17T21:53:02Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 444,
    "diffHunk" : "@@ -1,1 +442,446 @@                    // if r referenced by the new project\n                    if (info.defaultProject.getSourceFile(r)) {\n                        // remove project rooted at r\n                        this.inferredProjects =\n                        copyListRemovingItem(r.defaultProject, this.inferredProjects);"
  },
  {
    "id" : "cbdf626f-5042-4df6-99ee-f6f43f3e273f",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7da3b6d6-72cd-494a-8555-5ebcf6629e51",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`r` -> `root`\n",
        "createdAt" : "2015-02-17T21:53:05Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 442,
    "diffHunk" : "@@ -1,1 +440,444 @@                for (var i = 0, len = this.openFileRoots.length; i < len; i++) {\n                    var r = this.openFileRoots[i];\n                    // if r referenced by the new project\n                    if (info.defaultProject.getSourceFile(r)) {\n                        // remove project rooted at r"
  },
  {
    "id" : "df079b8d-1081-40f8-9f87-4eb219a65222",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34699a09-3f54-408c-8414-63bc1c20ceaa",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`r` -> `root`\n",
        "createdAt" : "2015-02-17T21:53:12Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 439,
    "diffHunk" : "@@ -1,1 +437,441 @@                info.defaultProject = this.createInferredProject(info);\n                var openFileRoots: ScriptInfo[] = [];\n                // for each inferred project root r\n                for (var i = 0, len = this.openFileRoots.length; i < len; i++) {\n                    var r = this.openFileRoots[i];"
  },
  {
    "id" : "76b0df57-ec04-40c8-980f-09bc23c895ef",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e61db19b-0d47-40b0-8930-b235994420ac",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`r` -> `root`\n",
        "createdAt" : "2015-02-17T21:53:23Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 453,
    "diffHunk" : "@@ -1,1 +451,455 @@                    }\n                    else {\n                        // otherwise, keep r as root of inferred project\n                        openFileRoots.push(r);\n                    }"
  },
  {
    "id" : "c86352b0-f33c-4cd9-b3b0-4d536d120b8d",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17aa423d-cde3-47a2-af8c-707ece3a3d12",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "There is no `p`\n",
        "createdAt" : "2015-02-17T21:54:00Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "eb6ec5b6-15e2-4415-b531-fef46f7d15ce",
        "parentId" : "17aa423d-cde3-47a2-af8c-707ece3a3d12",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Maybe give a big-picture comment rather than a step-by-step comment for what's happening here.\n",
        "createdAt" : "2015-02-17T21:55:06Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 436,
    "diffHunk" : "@@ -1,1 +434,438 @@            }\n            else {\n                // create new inferred project p with the newly opened file as root\n                info.defaultProject = this.createInferredProject(info);\n                var openFileRoots: ScriptInfo[] = [];"
  },
  {
    "id" : "d5962edb-3d09-4a77-ac19-58cd1fd0db61",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d30b7226-ff66-4d82-ac13-8497a8280990",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Just make this `closeFile`\n",
        "createdAt" : "2015-02-17T22:07:17Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 462,
    "diffHunk" : "@@ -1,1 +460,464 @@        }\n\n        closeOpenFile(info: ScriptInfo) {\n            var openFileRoots: ScriptInfo[] = [];\n            var removedProject: Project;"
  },
  {
    "id" : "2c7264f8-3d96-48c7-beab-630075ade4cf",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef3eee3d-60a2-4290-9132-67a4c4847b5e",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Please explain with a few words why we need to remember it\n",
        "createdAt" : "2015-02-17T22:08:00Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 468,
    "diffHunk" : "@@ -1,1 +466,470 @@                // if closed file is root of project\n                if (info == this.openFileRoots[i]) {\n                    // remove that project and remember it\n                    removedProject = info.defaultProject;\n                }"
  },
  {
    "id" : "9bf93217-e213-4b51-aec3-cb7a33839102",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78ade09a-60b1-4e69-a3c5-40b30bcf8d6b",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "For \"remember it\" comments, I'd prefer if you said something above the logic like \"Find all files that were referenced from the removed project so that we can reinterpret them as newly opened.\"\n",
        "createdAt" : "2015-02-17T22:10:55Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 484,
    "diffHunk" : "@@ -1,1 +482,486 @@                for (var i = 0, len = this.openFilesReferenced.length; i < len; i++) {\n                    var f = this.openFilesReferenced[i];\n                    // if f was referenced by the removed project, remember it\n                    if (f.defaultProject == removedProject) {\n                        f.defaultProject = undefined;"
  },
  {
    "id" : "eb373d5a-114f-454d-a22e-a0b8ba83f78e",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23bac607-243c-411b-90b3-cfe0fd46acd1",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`f` -> `referencedFile`\n",
        "createdAt" : "2015-02-17T22:11:17Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 483,
    "diffHunk" : "@@ -1,1 +481,485 @@                // for all open, referenced files f\n                for (var i = 0, len = this.openFilesReferenced.length; i < len; i++) {\n                    var f = this.openFilesReferenced[i];\n                    // if f was referenced by the removed project, remember it\n                    if (f.defaultProject == removedProject) {"
  },
  {
    "id" : "cd215794-d396-4425-bea1-80a37c733679",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8d4cd36-5253-4bcd-b2f4-3c7c47b71746",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "If this is going to be private, stop doing filters and just remove it in place.\n",
        "createdAt" : "2015-02-17T22:12:14Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 478,
    "diffHunk" : "@@ -1,1 +476,480 @@            if (removedProject) {\n                // remove project from inferred projects list\n                this.inferredProjects = copyListRemovingItem(removedProject, this.inferredProjects);\n                var openFilesReferenced: ScriptInfo[] = [];\n                var orphanFiles: ScriptInfo[] = [];"
  },
  {
    "id" : "2b0d2bfe-7f60-4959-8fc3-13dd1ac01f5e",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ac89789-8e23-49b6-93fe-3eda013f5aa7",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`===`\n",
        "createdAt" : "2015-02-17T22:12:50Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 485,
    "diffHunk" : "@@ -1,1 +483,487 @@                    var f = this.openFilesReferenced[i];\n                    // if f was referenced by the removed project, remember it\n                    if (f.defaultProject == removedProject) {\n                        f.defaultProject = undefined;\n                        orphanFiles.push(f);"
  },
  {
    "id" : "596c907f-aa2d-465f-a0a9-990616f0cc04",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3dcdb497-e25d-43f2-a3cc-32b71255ffc3",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`content  === undefined`; otherwise you will always reassign `content` if `openedByClient` is `true`\n",
        "createdAt" : "2015-02-17T22:13:35Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "f5e25d9b-ce31-4498-ae5e-d924a5c0df4a",
        "parentId" : "3dcdb497-e25d-43f2-a3cc-32b71255ffc3",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Need a comment on the flow of this\n",
        "createdAt" : "2015-02-17T22:15:06Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      },
      {
        "id" : "4a396e9f-173b-4f23-9577-dbf493d1ba5d",
        "parentId" : "3dcdb497-e25d-43f2-a3cc-32b71255ffc3",
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Add newlines after each `if` block\n",
        "createdAt" : "2015-02-17T22:15:58Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 535,
    "diffHunk" : "@@ -1,1 +533,537 @@                    content = this.host.readFile(fileName);\n                }\n                if (!content) {\n                    if (openedByClient) {\n                        content = \"\";"
  },
  {
    "id" : "de39ae76-6a5b-4d4f-96cf-4fb586024736",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d52cf4b-885f-4798-a013-7b548d607496",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "are managed\n",
        "createdAt" : "2015-02-17T22:16:23Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 557,
    "diffHunk" : "@@ -1,1 +555,559 @@\n        /**\n         * Open file whose contents is managed by the client\n         * @param filename is absolute pathname\n         */"
  },
  {
    "id" : "280437ca-552b-4e5e-88f4-6ca1ec604840",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e4fc211-3ef3-4147-a644-b3914ee25f8e",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "`fileName`\n",
        "createdAt" : "2015-02-17T22:16:30Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 558,
    "diffHunk" : "@@ -1,1 +556,560 @@        /**\n         * Open file whose contents is managed by the client\n         * @param filename is absolute pathname\n         */\n"
  },
  {
    "id" : "6c8926ce-0f2c-4412-8a98-71e984193270",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a962f363-6fb8-497e-b427-1b4206779c00",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "is -> are\n",
        "createdAt" : "2015-02-17T22:16:43Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 570,
    "diffHunk" : "@@ -1,1 +568,572 @@\n        /**\n         * Close file whose contents is managed by the client\n         * @param filename is absolute pathname\n         */"
  },
  {
    "id" : "e4cf0160-fc5a-4a99-86c1-0333b44794ad",
    "prId" : 2041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84e8a609-4c83-4c2e-bd15-5e135a77f7ac",
        "parentId" : null,
        "authorId" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "body" : "Remove newline\n",
        "createdAt" : "2015-02-17T22:16:53Z",
        "updatedAt" : "2015-02-19T20:57:06Z",
        "lastEditedBy" : "cbc74313-e7e9-4313-b106-3e17fde5473d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d364f6110e2f43393377c97b474e2dd69d8ae2c5",
    "line" : 573,
    "diffHunk" : "@@ -1,1 +571,575 @@         * @param filename is absolute pathname\n         */\n\n        closeClientFile(filename: string) {\n            // TODO: tsconfig check"
  }
]