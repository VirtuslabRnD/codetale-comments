[
  {
    "id" : "977ca324-80eb-4839-bf86-55e01fd12cab",
    "prId" : 10070,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80aac325-f7cc-4e03-bc5e-8de5b068a71a",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "```suggestion\r\n  } extends Product with Serializable\r\n```\r\nI'm fairly sure @S11001001 wrote about it but I couldn't find his post, [this](https://typelevel.org/blog/2018/05/09/product-with-serializable.html) is what I found. No need to accept this if you don't think it adds anything here.",
        "createdAt" : "2021-06-21T21:43:05Z",
        "updatedAt" : "2021-06-21T21:44:53Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "258e238f-462c-4086-aa9e-07a9ea0659e1",
        "parentId" : "80aac325-f7cc-4e03-bc5e-8de5b068a71a",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I know about the pattern but I usually add it only when I actually use it in a way where type inference benefits from it. But I guess there is no harm in adding it prematurely.",
        "createdAt" : "2021-06-22T00:20:33Z",
        "updatedAt" : "2021-06-22T00:20:33Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dbf8ebad6630ef53f57d730ae25974f722f07ac",
    "line" : 188,
    "diffHunk" : "@@ -1,1 +448,452 @@    def ledger: ScenarioLedger\n    def traceLog: TraceLog\n  }\n\n  final case class CurrentSubmission("
  },
  {
    "id" : "f6eed966-d5ab-4cc7-a1ec-509bba45e07c",
    "prId" : 10039,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10039",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fae9954-807b-481b-8ad8-7eeca9feb0ba",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This is definitely not the desired endstate. I’d like to keep it for a separate PR though. Fixing this really only makes sense if we make the same change in Daml script (which currently does something similarly messy because it had to fit in what the scenario service did :facepalm:) and this PR is large enough.",
        "createdAt" : "2021-06-16T21:30:48Z",
        "updatedAt" : "2021-06-16T21:42:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "514dbd17b767eea0a80afff36d57a79b4f1ea579",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +97,101 @@            seed,\n          )\n          // TODO (MK) We copy the ptx & commit location and the trace\n          // log to the off-ledger machine as a temporary hack until\n          // the callsites have changed sufficiently to allow us to"
  },
  {
    "id" : "a3ea2d71-f6a1-48f1-9bde-5c47003fdb98",
    "prId" : 10039,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10039",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7b0cf1c-b2cf-4380-bcf9-f881dd4550cd",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I don’t particularly like any of the seed handling here and I’m almost certain the current behavior is not what anyone intended but for now this at least keeps the behavior.",
        "createdAt" : "2021-06-16T21:41:36Z",
        "updatedAt" : "2021-06-16T21:42:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "514dbd17b767eea0a80afff36d57a79b4f1ea579",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +54,58 @@\n  private[this] def nextSeed(submissionSeed: crypto.Hash): crypto.Hash =\n    crypto.Hash.deriveTransactionSeed(\n      submissionSeed,\n      Ref.ParticipantId.assertFromString(\"scenario-service\"),"
  },
  {
    "id" : "899d9cfb-f5ae-4a5c-ab80-40af85019a3e",
    "prId" : 10033,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10033",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91535c10-789c-4018-a40c-d94210ca18c5",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I think I asked you this before but I forgot: Why do you prefer `abstract class` over `trait`?",
        "createdAt" : "2021-06-17T15:24:47Z",
        "updatedAt" : "2021-06-17T15:31:51Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "28c70035-1db2-4038-a172-df5a35ec0bd1",
        "parentId" : "91535c10-789c-4018-a40c-d94210ca18c5",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "@S11001001 told me that it is in general more efficient. So I started to use it blindly. \r\n\r\nAfter using this pattern blindly for some time, I like that because it is a simple pattern to avoid multi-intermittency : i.e. \r\nI tried to use only `abstract class` as super type,  and I  tried to use `trait` only for mixin.  \r\n\r\n",
        "createdAt" : "2021-06-17T15:48:10Z",
        "updatedAt" : "2021-06-21T14:56:15Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "64a715c6-a146-4d1e-b388-55153077b76c",
        "parentId" : "91535c10-789c-4018-a40c-d94210ca18c5",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "> it is a simple pattern to avoid multi-intermittency\r\n\r\nThe best reason. It's like not using `var` when `val` will do.",
        "createdAt" : "2021-06-17T15:49:14Z",
        "updatedAt" : "2021-06-17T15:49:33Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "32ae6197-e7f3-45cc-9e9c-3eba108dd843",
        "parentId" : "91535c10-789c-4018-a40c-d94210ca18c5",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "seems reasonable, thanks for the explanation",
        "createdAt" : "2021-06-17T15:50:28Z",
        "updatedAt" : "2021-06-17T15:50:28Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f9521368dbed0a5d401fc4f4f47acd6bd605814",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +220,224 @@  // The interface we need from a ledger during submission. We allow abstracting over this so we can play\n  // tricks like caching all responses in some benchmarks.\n  abstract class LedgerApi[R] {\n    def lookupContract(\n        coid: ContractId,"
  },
  {
    "id" : "85558b97-da18-4c71-a4ef-5019aa2dd006",
    "prId" : 8240,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8240",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0ca699b-11ab-4662-93b3-d1363779febe",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "This is the visibility check for contract keys, right? I don't see any corresponding visibility check for contracts in this PR, is that by design?",
        "createdAt" : "2020-12-11T09:13:09Z",
        "updatedAt" : "2020-12-11T09:37:03Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "58ad0160-df40-4b1c-8c32-6856ad0de592",
        "parentId" : "c0ca699b-11ab-4662-93b3-d1363779febe",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "The visibility check for contract lookups happens in `lookupGlobalContract` via the `visibleIn` method of `ParticipantView` which did get modified in this PR.",
        "createdAt" : "2020-12-11T09:15:16Z",
        "updatedAt" : "2020-12-11T09:37:03Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "da853971-205a-49f5-b45d-8fcadf147c9f",
        "parentId" : "c0ca699b-11ab-4662-93b3-d1363779febe",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Ah I see :+1:",
        "createdAt" : "2020-12-11T10:00:30Z",
        "updatedAt" : "2020-12-11T10:00:30Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5363d86498c71bf0d5cef6aa3904e23f48bc211c",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +241,245 @@          acoid) match {\n          case ScenarioLedger.LookupOk(_, _, stakeholders) =>\n            if (!readers.intersect(stakeholders).isEmpty)\n              // We should always be able to continue with a SKeyLookupResult.Found.\n              // Run to get side effects and assert result."
  },
  {
    "id" : "80f6e833-cad8-4deb-8de1-ceab8d671c88",
    "prId" : 7666,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12c69ed5-c8c7-4f8c-95ae-3f77048c9325",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Should we attach a ticket to this so we don't forget it?",
        "createdAt" : "2020-10-14T10:45:03Z",
        "updatedAt" : "2020-10-14T10:45:27Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "e4883b38-b33c-4979-8a0d-b27aadc79058",
        "parentId" : "12c69ed5-c8c7-4f8c-95ae-3f77048c9325",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "You can’t implement multi-party submissions without this so I don’t think there is any danger of forgetting this.",
        "createdAt" : "2020-10-14T10:47:45Z",
        "updatedAt" : "2020-10-14T10:47:45Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff14695fd1fb3e46a09494fe7f0bdbb3256d4895",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +177,181 @@      cbPresent: ContractInst[Tx.Value[ContractId]] => Unit) = {\n\n    // Once we support multi-party reads, we can drop this restriction.\n    val committer =\n      if (committers.size == 1) committers.head else crashTooManyCommitters(committers)"
  },
  {
    "id" : "e13247d3-6c60-4057-8cbc-f700d6805a78",
    "prId" : 6433,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6433",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f40630a6-1e9d-4a6f-9e76-07046d7d6d12",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Wasn't `cb` clear enough? 😉\r\nDid you figure out what it stands for?",
        "createdAt" : "2020-06-22T08:07:09Z",
        "updatedAt" : "2020-06-22T08:13:47Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "a54f3a98-d0f3-4b2f-89b0-2b8d574efb29",
        "parentId" : "f40630a6-1e9d-4a6f-9e76-07046d7d6d12",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "`callback` presumably but that isn’t much more useful than `cb` so I’ve renamed it to what it actually does :slightly_smiling_face: ",
        "createdAt" : "2020-06-22T08:17:42Z",
        "updatedAt" : "2020-06-22T08:17:42Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "fc3be432-d24d-4816-9142-b4856f6df8cb",
        "parentId" : "f40630a6-1e9d-4a6f-9e76-07046d7d6d12",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Yeah, `callback` sounds very reasonable. Thanks. I haven't done enough JS yet to make the word omnipresent in my head. And I agree that `callback` carries almost as little information as `cb`.",
        "createdAt" : "2020-06-22T08:54:23Z",
        "updatedAt" : "2020-06-22T08:54:23Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "9dbb098cbf4f272279020897d81b39029f9b2d73",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +193,197 @@      gk: GlobalKey,\n      committers: Set[Party],\n      canContinue: SKeyLookupResult => Boolean,\n  ): Unit = {\n    val committer ="
  },
  {
    "id" : "9b95a84a-a3e2-46fc-add0-4814fba6fc3e",
    "prId" : 5814,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97b4751d-407b-4066-9e84-df55dca60312",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I don't see a consequence for this match branch.",
        "createdAt" : "2020-05-04T07:04:08Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "571be262-6390-4031-b213-d1fcb59d5b15",
        "parentId" : "97b4751d-407b-4066-9e84-df55dca60312",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "This is legal scala syntax. It means the same as having `()` on RHS of the `=>`\r\nIt's used all over the scala code base.\r\nBut I agree, I generally prefer when code is explicit with `()`, but I missed it here.",
        "createdAt" : "2020-05-04T10:02:59Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "89400155-2945-4b2a-926e-6555508ef285",
        "parentId" : "97b4751d-407b-4066-9e84-df55dca60312",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Since that code has changed anyway, can we please add the `()` here.",
        "createdAt" : "2020-05-04T12:38:36Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "eddcd9db-6566-44a5-852d-def712875169",
        "parentId" : "97b4751d-407b-4066-9e84-df55dca60312",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "ok",
        "createdAt" : "2020-05-04T13:46:21Z",
        "updatedAt" : "2020-05-04T13:46:21Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e68cc9359abaf460f448f09c616975c2935f54b",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +52,56 @@      val res: SResult = machine.run()\n      res match {\n        case SResultFinalValue(_) =>\n          ()\n        case SResultError(err) =>"
  }
]