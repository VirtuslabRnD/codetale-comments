[
  {
    "id" : "b3b4ad96-95cf-4b57-b59f-23d5c03ce729",
    "prId" : 3829,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3829",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52471f75-64b4-4fc4-b498-5c6b94f37087",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "```suggestion\r\n// A fully qualified reference to a type synonym name.\r\n// *Available in versions >=  1.dev*\r\n```",
        "createdAt" : "2019-12-12T13:33:45Z",
        "updatedAt" : "2019-12-13T11:43:28Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "91e36b522dfdac028317d379b5b7991fdef29483",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +113,117 @@}\n\n// A fully qualified reference to a type synonym name.\n// *Available in versions >= 1.dev*\nmessage TypeSynName {"
  },
  {
    "id" : "92f92489-50fc-4d56-9dfd-ac5253be0e9a",
    "prId" : 3829,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3829",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51b2071a-2080-4544-a063-120f60872a9a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We enforce that everything is interned for DAML-LF `>= 1.7` so we don’t need to have a non-interned version of this.",
        "createdAt" : "2019-12-12T13:34:54Z",
        "updatedAt" : "2019-12-13T11:43:28Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "91e36b522dfdac028317d379b5b7991fdef29483",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +120,124 @@  ModuleRef module = 1;\n\n  oneof name {\n    // type synonym name.\n    DottedName name_dname = 2;"
  },
  {
    "id" : "09e5981a-1e81-4359-9989-562e4a7a1c84",
    "prId" : 3703,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7b5ca49-fd9d-449d-956c-90b01f9d2026",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "As mentioned before, `DataCons` isn’t really a good name with this change anymore. Sadly, I don’t have a great suggestion for what to use instead. @remyhaemmerle-da and ideas? Otherwise, I’m also fine to just go with this for now and figure out better names in separate PRs.",
        "createdAt" : "2019-12-03T07:56:21Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e73edebb-7a49-4909-93e0-4b04af30970e",
        "parentId" : "d7b5ca49-fd9d-449d-956c-90b01f9d2026",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "You are right but I do not have a good idea right now. ",
        "createdAt" : "2019-12-03T08:46:45Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "99321f34-a075-46bc-804d-f365f353340d",
        "parentId" : "d7b5ca49-fd9d-449d-956c-90b01f9d2026",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Alright, then let’s keep the naming at least as part of this PR.",
        "createdAt" : "2019-12-03T09:28:59Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4c721953-da95-4a3b-853a-920a9be82f67",
        "parentId" : "d7b5ca49-fd9d-449d-956c-90b01f9d2026",
        "authorId" : "81b3e7a7-b582-41d2-9c57-f2af6c646110",
        "body" : "To be clear. We wont change the names in this PR.\r\nBut we might change the names (if we can think of better ones!) in a subsequent PR.",
        "createdAt" : "2019-12-03T12:33:11Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "81b3e7a7-b582-41d2-9c57-f2af6c646110",
        "tags" : [
        ]
      },
      {
        "id" : "b524c693-0a13-4db2-9532-58f43d2459b5",
        "parentId" : "d7b5ca49-fd9d-449d-956c-90b01f9d2026",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Fine with me.",
        "createdAt" : "2019-12-03T12:37:21Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e10f3d85f2547f8c6f1968d814c0ffeba77445b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1310,1314 @@    Fields variant = 4; // Variants without constructors are explicitly allowed.\n    EnumConstructors enum = 7; // *Available in versions >= 1.6*\n    Type synonym = 9; // *Available in versions >= 1.dev*\n  }\n"
  },
  {
    "id" : "5050bf88-fcf6-4f47-b4fc-51cfe66f72d7",
    "prId" : 3703,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e243b19-3401-402b-b728-2ad62d393bd0",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Given that we always require type synonyms to be fully applied it might be worth considering to have a separate case in `Type` for a fully applied type synonym. That might make it a bit easier to expand the type synonym in various places.",
        "createdAt" : "2019-12-03T08:07:34Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e4a54cbc-3dbd-44fd-ac26-62720192408b",
        "parentId" : "0e243b19-3401-402b-b728-2ad62d393bd0",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I prefer not to not have a special case in the encoding. \r\nWe already have the message `Type.Con` which encodes applied type in compact way. \r\n",
        "createdAt" : "2019-12-03T08:43:14Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e10f3d85f2547f8c6f1968d814c0ffeba77445b",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +1307,1311 @@\n  oneof DataCons {\n    Fields record = 3; // Records without fields are explicitly allowed.\n    Fields variant = 4; // Variants without constructors are explicitly allowed.\n    EnumConstructors enum = 7; // *Available in versions >= 1.6*"
  },
  {
    "id" : "53d1491e-01a3-4ea8-93e2-f6d98b79fff6",
    "prId" : 3326,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdfc2e4c-4f4a-476b-87d0-ec6cd7b0cd24",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Did you forget to add the equality primitive here?",
        "createdAt" : "2019-11-04T13:15:00Z",
        "updatedAt" : "2019-11-04T16:19:34Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "61000065-5701-4940-8c68-4d94885d1c20",
        "parentId" : "fdfc2e4c-4f4a-476b-87d0-ec6cd7b0cd24",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Indeed. ",
        "createdAt" : "2019-11-04T13:23:37Z",
        "updatedAt" : "2019-11-04T16:19:34Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "db25b1d9-05ea-4b51-aac8-4a1aea10e3fe",
        "parentId" : "fdfc2e4c-4f4a-476b-87d0-ec6cd7b0cd24",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Fixing that now. \r\n",
        "createdAt" : "2019-11-04T13:25:36Z",
        "updatedAt" : "2019-11-04T16:19:34Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "609c22d98f12f9cd4dc89a8e0d9f1cf0af882a2d",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +274,278 @@  // Builtin type 'Any'\n  // *Available in versions >= 1.dev*\n  ANY = 18;\n\n  // Builtin type 'TypeRep'"
  },
  {
    "id" : "1fdc7d61-9f7a-454b-8b40-4407555c5aba",
    "prId" : 3296,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3296",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d152f427-0a1d-4eb2-b2fd-07daaa9600ea",
        "parentId" : null,
        "authorId" : null,
        "body" : "why `_str` suffix for interned field? `field_str` and `field_interned` (or interned_id) would feel more natural to me. (not a strong opinion). EDIT: I change my mind, having `interned_str` is good as we might have other types of interned things and it might not always be obvious what the type is.",
        "createdAt" : "2019-11-01T15:14:04Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +128,132 @@\n      // *Must a valid interned identifier*\n      int32 field_interned_str = 3; // *Available in versions >= 1.dev*\n  }\n"
  }
]