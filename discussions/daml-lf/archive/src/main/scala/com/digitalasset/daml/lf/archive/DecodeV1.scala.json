[
  {
    "id" : "5f05f987-fbc3-4e6e-92c2-0d2319f4e5c6",
    "prId" : 8343,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "beac7729-5ea4-4c73-a1c3-a6708ef8f755",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "`Seq` is now an alias for `collection.immutable.Seq` and with that varargs also changed.",
        "createdAt" : "2020-12-18T17:38:59Z",
        "updatedAt" : "2021-01-04T08:09:50Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "536d836b9a25ce0551e8dea1ce5a5a3d6d14d893",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +35,39 @@  ): Package = {\n    val internedStrings: ImmArraySeq[String] = ImmArraySeq(\n      lfPackage.getInternedStringsList.asScala.toSeq: _*)\n    if (internedStrings.nonEmpty)\n      assertSince(LV.Features.internedPackageId, \"interned strings table\")"
  },
  {
    "id" : "0821c0ba-841a-4ec2-9677-1d3bcdd41a9b",
    "prId" : 8316,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a43ae04-e66f-4d89-9f80-e1277afe1e09",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n          // TODO: https://github.com/digital-asset/daml/issues/7709\r\n          // fix scala LF encoder before commenting the following line.\r\n          // assertUntil(LV.Features.choiceObservers, \"missing TemplateChoice.observers\")\r\n```",
        "createdAt" : "2020-12-16T12:38:16Z",
        "updatedAt" : "2020-12-16T13:11:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "400eec05d275d016cf1115f17b2f49d32e796f8d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +584,588 @@          Some(decodeExpr(lfChoice.getObservers, s\"$tpl:$chName:observers\"))\n        } else {\n          assertUntil(LV.Features.choiceObservers, \"missing TemplateChoice.observers\")\n          None\n        },"
  },
  {
    "id" : "c48c5433-f8a0-446c-a18a-01ad27b85b7d",
    "prId" : 8087,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8087",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a059128-6c97-47cc-90e0-57d6e154d5d2",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "please use the full url of the issue. \r\n``// FIXME: https://github.com/digital-asset/daml/issues/7788``",
        "createdAt" : "2020-11-30T13:28:02Z",
        "updatedAt" : "2020-11-30T13:28:15Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "be09f73da5e864a208b3886e2844f3bfb609f366",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +985,989 @@\n        case PLF.Expr.SumCase.MAKE_ANY_EXCEPTION =>\n          throw ParseError(\"Expr.MAKE_ANY_EXCEPTION\") // TODO #8020\n\n        case PLF.Expr.SumCase.FROM_ANY_EXCEPTION =>"
  },
  {
    "id" : "39d4d909-22ef-4b01-afe1-2276c393c3cd",
    "prId" : 8071,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8071",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb11b885-8900-40a9-b1bf-142e20560c70",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Wouldn't it make sense to check for the minimal supported version before we even start decoding a package?",
        "createdAt" : "2020-11-26T11:12:20Z",
        "updatedAt" : "2020-11-26T11:54:17Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "cfe602ea-c13b-46e7-8a57-81ddfb7c771e",
        "parentId" : "cb11b885-8900-40a9-b1bf-142e20560c70",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Good point. ",
        "createdAt" : "2020-11-26T11:38:05Z",
        "updatedAt" : "2020-11-26T11:54:17Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "c238ef866f7aede5dcef9fdbfd4dab745de1dc38",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1098,1102 @@\n        case PLF.Update.SumCase.EXERCISE =>\n          if (versionIsOlderThan(LV.Features.noExerciseActor)) {\n            throw ParseError(s\"DAML-LF {1.$minor} is not supported\")\n          }"
  },
  {
    "id" : "e9e207d6-ebc2-4ab8-820b-b8f8af1a9454",
    "prId" : 8069,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4485c48-21e6-41b0-ace6-bdcc2d0e6c47",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Just to confirm I understand this correctly: In DAML-LF 1.dev every type outside of the type interning table has to be a reference into the type interning table and types inside the type interning table can be arbitrarily complex and contain references into the table at any level.",
        "createdAt" : "2020-11-25T16:57:04Z",
        "updatedAt" : "2020-11-26T15:17:53Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "14322163-dba2-4b5c-aae0-dd20d6d508d0",
        "parentId" : "e4485c48-21e6-41b0-ace6-bdcc2d0e6c47",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Yes. \r\n* `decodeType` enforces (for 1.dev only) that `lfType` is a reference to the the type interning table. (should be use to decode type outside the interning table)\r\n* `uncheckedDecodeType` allows `lfType` to be arbitrarily complex and contain references into the table at any level.  (should be use to decode type inside the interning table)\r\n\r\n",
        "createdAt" : "2020-11-26T13:01:14Z",
        "updatedAt" : "2020-11-26T15:17:53Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "ab81ddfe-ab02-45c5-802a-e8ecca9ff556",
        "parentId" : "e4485c48-21e6-41b0-ace6-bdcc2d0e6c47",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Thanks for confirming.",
        "createdAt" : "2020-11-26T13:38:54Z",
        "updatedAt" : "2020-11-26T15:17:53Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "ceab255dd5f4d88608b42f9123cd5a833a67dd2c",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +620,624 @@            )\n          case otherwise =>\n            throw ParseError(s\"$otherwise is not supported outside type interning table\")\n        }\n"
  },
  {
    "id" : "de4d5fae-181d-4d5b-b3e9-ac1447fdd49a",
    "prId" : 7893,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18dd396b-b363-4933-a6ff-b5b86a6462f7",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "@remyhaemmerle-da @S11001001 This implementation is probably very bad Scala but I honestly don't know how to do better. The Scala collections library is just confusing me. I'd be interested to improve it under your guidance.",
        "createdAt" : "2020-11-12T13:56:43Z",
        "updatedAt" : "2020-11-17T16:02:54Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "87eb4fb0-390c-4131-812b-113f7acae98e",
        "parentId" : "18dd396b-b363-4933-a6ff-b5b86a6462f7",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "I would just do a fold.\r\n\r\n```scala\r\n    lfTypes.foldLeft(Vector.empty[Type]){ (internedTypes, lfType) =>\r\n      val typ = env.copy(internedTypes = internedTypes).decodeType(lfType)\r\n      internedTypes :+ typ\r\n    }\r\n```",
        "createdAt" : "2020-11-12T16:47:11Z",
        "updatedAt" : "2020-11-17T16:02:54Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "06e2a56a-4e30-41ac-bbfd-b85fcb23a5e7",
        "parentId" : "18dd396b-b363-4933-a6ff-b5b86a6462f7",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Thank you. I assume `Vector` is a mutable data structure with amortized `O(1)` pushing onto the end. Is that correct? If so, could I also take advantage of the fact that I know the final size by reserving that as the initial capacity?",
        "createdAt" : "2020-11-12T16:55:20Z",
        "updatedAt" : "2020-11-17T16:02:54Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "f48bb1c3-0d4b-4a0d-bf36-ec4ccc982895",
        "parentId" : "18dd396b-b363-4933-a6ff-b5b86a6462f7",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "No, `Vector` is immutable with cheap snoc. https://docs.scala-lang.org/overviews/collections/concrete-immutable-collection-classes.html#vectors",
        "createdAt" : "2020-11-12T16:58:25Z",
        "updatedAt" : "2020-11-17T16:02:54Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "f13e39fa-fd55-40b0-a0ff-ac69cea0fe5b",
        "parentId" : "18dd396b-b363-4933-a6ff-b5b86a6462f7",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "The fold is definitively a good idea. I am also inclined to use `Vector` as proposed by Stephen.  Like that we will not have bad surprise with side effect. In this case, it would be a good idea to change the type of the `Env's` field `internedTypes` from \r\n`scala.collection.IndexedSeq[Type]` to `scala.collection.immutable.IndexedSeq[Type]`\r\n\r\n\r\nIf you want to stick to the imperative version I will propose to simplify as follows:\r\n```scala\r\n  private[this] def decodeInternedTypes(\r\n      env: DecoderEnv,\r\n      lfTypes: Seq[PLF.Type],\r\n  ): IndexedSeq[Type] = {\r\n    if (lfTypes.nonEmpty)\r\n      assertSince(LV.Features.internedTypes, \"interned types table\")\r\n    lfTypes.foldLeft(new ArrayBuffer[Type]()) { (buf, typ) =>\r\n      buf += env.copy(internedTypes = buf).decodeType(typ)\r\n    }.toIndexedSeq\r\n  }\r\n```",
        "createdAt" : "2020-11-13T08:46:33Z",
        "updatedAt" : "2020-11-17T16:02:54Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "c317d901-a882-4fbf-acd8-508b9d11e6e3",
        "parentId" : "18dd396b-b363-4933-a6ff-b5b86a6462f7",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Would you still recommend using `Vector` even if I told you that there might be more than 300,000 different entries in the type interning table?",
        "createdAt" : "2020-11-13T10:12:59Z",
        "updatedAt" : "2020-11-17T16:02:54Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "71757dc7-e440-4784-911b-1bfba89356e0",
        "parentId" : "18dd396b-b363-4933-a6ff-b5b86a6462f7",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Yes.",
        "createdAt" : "2020-11-13T14:02:57Z",
        "updatedAt" : "2020-11-17T16:02:54Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "abe8093b-a581-41da-a456-c70331558e3d",
        "parentId" : "18dd396b-b363-4933-a6ff-b5b86a6462f7",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I don't really like the idea of using immutable data structures for this at that size and since the mutation is _very_ local, I've decided to use the `ArrayBuffer` solution proposed by @remyhaemmerle-da.",
        "createdAt" : "2020-11-17T10:08:25Z",
        "updatedAt" : "2020-11-17T16:02:54Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "5500373afafd8bfb0d8bf17d627d2b4f4eec2b00",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +160,164 @@      }\n      .toIndexedSeq\n  }\n  case class PackageDependencyTracker(self: PackageId) {\n    private val deps = mutable.Set.empty[PackageId]"
  },
  {
    "id" : "47ebe155-defb-4539-afae-7b593e07a2ed",
    "prId" : 7578,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "529ea843-000a-480f-91fe-7c314d6416bf",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Do we still support decoding DAML-LF 1.5 or older? If we do, wouldn't that mean that we still have to deal with both cases, `actors` present or absent, in the interpreter and this change would not really buy us anything?",
        "createdAt" : "2020-10-06T09:15:02Z",
        "updatedAt" : "2020-10-07T07:21:25Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "ca18e200-97cb-4160-92f0-e46f38e53e35",
        "parentId" : "529ea843-000a-480f-91fe-7c314d6416bf",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "DAML-LF 1.5 or latter are deprecated since #5321 that is before the release of SDK 1.0.0. \r\nWe will drop support of  DAML-LF 1.5 or older in the future however for the sake of consistency I prefer not to break reading older version.\r\n",
        "createdAt" : "2020-10-06T09:24:40Z",
        "updatedAt" : "2020-10-07T07:21:25Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2478ace645101483f34f6bc5e2c6ec8af2f19c37",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1075,1079 @@            ),\n            cidE = decodeExpr(exercise.getCid, definition),\n            actorsE = if (versionIsOlderThan(LV.Features.noExerciseActor)) {\n              if (!exercise.hasActor)\n                throw ParseError(s\"Update.Exercise.actors is required by DAML-LF {1.$minor}\")"
  },
  {
    "id" : "658dd559-0872-4efb-aec9-10e5472976f2",
    "prId" : 4101,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49185a49-5b32-4769-ad26-352fe395d3f0",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "We need to version lfModule.getSynonymsList with something like \r\n\r\n```\r\n   if (versionIsOlderThan(LV.Features.typeSynonyms)) {\r\n        assertEmpty(lfModule.getSynonymsList, \"Module.synonyms\"))\r\n      } else if (!onlySerializableDataDefs) {\r\n        if (versionIsOlderThan(LV.Features.internedStrings)) {\r\n        // collect type synonyms\r\n        ... \r\n```\r\nassuming the following line is added to `daml-lf/language/src/main/scala/com/digitalasset/daml/lf/language/LanguageVersion.scala`\r\n\r\n```\r\n    val typeSynonyms = v1_dev\r\n```\r\n\r\n",
        "createdAt" : "2020-01-20T09:56:15Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "09bd5be5-f770-46ff-8b54-627e68c9d104",
        "parentId" : "49185a49-5b32-4769-ad26-352fe395d3f0",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "ok, I'll have a look at what needs doing here...",
        "createdAt" : "2020-01-20T19:48:29Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "3efbb527-d398-4665-b303-a2cdb45a2eea",
        "parentId" : "49185a49-5b32-4769-ad26-352fe395d3f0",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "This is done now. Thank you.",
        "createdAt" : "2020-01-21T14:12:02Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9b7ff4849afb993cbda3dc7bea03b90e9dd9c19",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +150,154 @@      } else if (!onlySerializableDataDefs) {\n        // collect type synonyms\n        lfModule.getSynonymsList.asScala\n          .foreach { defn =>\n            val defName = handleDottedName("
  },
  {
    "id" : "48b0c3f8-d20c-486b-8712-0409f43e433b",
    "prId" : 3817,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3817",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "064aa109-236b-4c58-a043-06e6e6a771bd",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why do we not map this to `BEqual` with an implicit parameter?",
        "createdAt" : "2019-12-11T12:28:06Z",
        "updatedAt" : "2019-12-11T12:30:12Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d11a192d-d797-491b-a62e-25f9e8f35d2a",
        "parentId" : "064aa109-236b-4c58-a043-06e6e6a771bd",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "The type of ``EQUAL_CONTRACT_ID`` contains a universal quantifier (``∀a. ContractId a -> ContractId a -> Bool``). I cannot represent it, using implicit parameters. \r\nIt is the same for `EQUAL_NUMERIC`.\r\n\r\n I do not think it is worthwhile to extend the implicit parameter feature to handle those two cases. ",
        "createdAt" : "2019-12-11T12:38:20Z",
        "updatedAt" : "2019-12-11T12:44:51Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "0db5bd57-e0f5-477c-b693-d579681faa98",
        "parentId" : "064aa109-236b-4c58-a043-06e6e6a771bd",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Ah I see, thanks for the explanation! Might be worth capturing in a comment somewhere.",
        "createdAt" : "2019-12-11T12:39:04Z",
        "updatedAt" : "2019-12-11T12:39:05Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ec1c6953-38d5-433d-95cd-85bc03533202",
        "parentId" : "064aa109-236b-4c58-a043-06e6e6a771bd",
        "authorId" : null,
        "body" : "It's also the reason these two had separate representations in the Haskell AST 🙃 ",
        "createdAt" : "2019-12-12T08:51:00Z",
        "updatedAt" : "2019-12-12T08:51:00Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "7211a4fb244cd3ddf7a3e698e6b86f78f4e02e2e",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +1450,1454 @@        maxVersion = Some(genMap),\n        implicitParameters = List(TTypeRep)),\n      BuiltinFunctionInfo(EQUAL_CONTRACT_ID, BEqualContractId, maxVersion = Some(genMap)),\n      BuiltinFunctionInfo(TRACE, BTrace),\n      BuiltinFunctionInfo(COERCE_CONTRACT_ID, BCoerceContractId, minVersion = coerceContractId),"
  },
  {
    "id" : "07af1277-8cc4-41aa-a0fb-3dd87d3fa1cf",
    "prId" : 3817,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3817",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d93d84ca-b10c-4910-b1a5-c8bbdf0d7b5f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why do we not map this to `BEqual` with an implicit parameter?",
        "createdAt" : "2019-12-11T12:29:48Z",
        "updatedAt" : "2019-12-11T12:30:12Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "982c181b-3875-492f-8769-da3bc7396dd6",
        "parentId" : "d93d84ca-b10c-4910-b1a5-c8bbdf0d7b5f",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Same as ``EQUAL_CONTRACT_ID``",
        "createdAt" : "2019-12-11T12:38:48Z",
        "updatedAt" : "2019-12-11T12:38:48Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7211a4fb244cd3ddf7a3e698e6b86f78f4e02e2e",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1415,1419 @@      ),\n      BuiltinFunctionInfo(\n        EQUAL_NUMERIC,\n        BEqualNumeric,\n        minVersion = numeric,"
  },
  {
    "id" : "354e9f0e-8870-4edc-9348-79b925df56fa",
    "prId" : 3726,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f259b41b-5afa-43a2-b269-4cbc452510c7",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Very minor.  `ModuleDecoder` constructor starts to have to many arguments for my little brain. I would consider using parameter names, when it is called.",
        "createdAt" : "2019-12-04T13:22:46Z",
        "updatedAt" : "2019-12-04T13:28:20Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "172715cbea18231150b7d6276af1c3f63490bc2f",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +45,49 @@      modules = lfPackage.getModulesList.asScala\n        .map(\n          ModuleDecoder(\n            packageId,\n            internedStrings,"
  },
  {
    "id" : "3a6cecfa-3307-4c60-8767-9a96b4f877c5",
    "prId" : 3703,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e72bb55a-8132-42ca-a89b-a33551aad426",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Please add a reference to the issue. \r\nsomething like:\r\n```\r\n  // FIXME https://github.com/digital-asset/daml/issues/3616\r\n  // Comments\r\n```",
        "createdAt" : "2019-12-03T08:35:33Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "44b40602-4a80-45d4-9b3f-ac960ce40b01",
        "parentId" : "e72bb55a-8132-42ca-a89b-a33551aad426",
        "authorId" : "81b3e7a7-b582-41d2-9c57-f2af6c646110",
        "body" : "ok\r\n",
        "createdAt" : "2019-12-03T12:39:29Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : "81b3e7a7-b582-41d2-9c57-f2af6c646110",
        "tags" : [
        ]
      },
      {
        "id" : "edf4cec3-174a-4e5e-9550-abf21c3e60ad",
        "parentId" : "e72bb55a-8132-42ca-a89b-a33551aad426",
        "authorId" : "81b3e7a7-b582-41d2-9c57-f2af6c646110",
        "body" : "done\r\n",
        "createdAt" : "2019-12-03T12:42:26Z",
        "updatedAt" : "2019-12-03T12:42:26Z",
        "lastEditedBy" : "81b3e7a7-b582-41d2-9c57-f2af6c646110",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e10f3d85f2547f8c6f1968d814c0ffeba77445b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +251,255 @@          case PLF.DefDataType.DataConsCase.SYNONYM =>\n            // FIXME https://github.com/digital-asset/daml/issues/3616\n            //assertSince(LV.Features.type_syn, \"DefDataType.DataCons.Synonym\") //TODO(NICK)\n            throw ParseError(\"DefDataType.DataCons.Synonym\") //TODO(NICK)\n          case PLF.DefDataType.DataConsCase.RECORD =>"
  },
  {
    "id" : "9f3a1846-8cd7-437b-99db-08aaa40ed9ee",
    "prId" : 3296,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3296",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d218adaa-7f4c-44a4-b79c-b66f81252f50",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Does this case need an `assertSince(LV.Features.internedStrings)`?",
        "createdAt" : "2019-11-01T12:31:37Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "b22529be-dc8b-432b-a4aa-58f15541c025",
        "parentId" : "d218adaa-7f4c-44a4-b79c-b66f81252f50",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "the check is done inside `getInternedName`.",
        "createdAt" : "2019-11-01T13:30:21Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : 545,
    "diffHunk" : "@@ -1,1 +629,633 @@          EVar(toName(lfExpr.getVarStr))\n\n        case PLF.Expr.SumCase.VAR_INTERNED_STR =>\n          EVar(getInternedName(lfExpr.getVarInternedStr, \"Expr.var_interned_id\"))\n"
  },
  {
    "id" : "26c278c5-3689-4cb8-b3bb-be779bd5509c",
    "prId" : 3212,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a667f780-01d3-49de-aa30-8781c6741d2b",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "If we don't always use `info.typ`, you could consider making it lazy to not allocate it when creating a value of `BuiltinTypeInfo`.",
        "createdAt" : "2019-10-18T08:40:51Z",
        "updatedAt" : "2019-10-18T11:09:58Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "eb19a9a8-e8d8-4244-bf97-0aec27cce12a",
        "parentId" : "a667f780-01d3-49de-aa30-8781c6741d2b",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "There is a fix number of BuiltinTypeInfo allocated.",
        "createdAt" : "2019-10-18T10:02:00Z",
        "updatedAt" : "2019-10-18T11:09:58Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "18b7c13b-fcc0-4cf7-b3f3-ec1cf1aa26ef",
        "parentId" : "a667f780-01d3-49de-aa30-8781c6741d2b",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "one for each builtins. ",
        "createdAt" : "2019-10-18T10:03:10Z",
        "updatedAt" : "2019-10-18T11:09:58Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f2e6f9eaac76e01efa864c9029c02a47427ae63",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +1089,1093 @@      minVersion: LV = LV.Features.default\n  ) {\n    val typ = TBuiltin(bTyp)\n  }\n"
  },
  {
    "id" : "c4824094-a354-4793-8217-1409d0269dbd",
    "prId" : 3067,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f82e857-5bcd-4632-8af6-d4dc6a677ec7",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : ":+1: ",
        "createdAt" : "2019-10-02T18:51:48Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb8a3c63a39ce4715734e5fd8e994ef0f0490499",
    "line" : 743,
    "diffHunk" : "@@ -1,1 +1044,1048 @@    LV.ordering.lt(languageVersion, minVersion)\n\n  private def assertUntil(maxVersion: LV, description: => String): Unit =\n    if (!versionIsOlderThan(maxVersion))\n      throw ParseError(s\"$description is not supported by DAML-LF 1.$minor\")"
  },
  {
    "id" : "9a7759f2-5496-4043-80f5-f095e102ca8a",
    "prId" : 3067,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91af0d8e-b006-4a09-af74-a6a9a615e756",
        "parentId" : null,
        "authorId" : null,
        "body" : "should we consider memoizing some of these? At least the ones that actually wrap the string in something concrete rather than just type alias it.",
        "createdAt" : "2019-10-03T16:59:53Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "9a7cfa01-f6fc-435a-a801-e4525e130d96",
        "parentId" : "91af0d8e-b006-4a09-af74-a6a9a615e756",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I tried on spider model but only saw minor improvment.\r\nyou can tried yourself using https://github.com/digital-asset/daml/commit/58b9974d1364f2157ad3ed5af1fb4992a87bedc9.\r\n\r\nIf @hurryabit implement the sharing for expression, the memoization will be only an overhead.",
        "createdAt" : "2019-10-03T17:57:14Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb8a3c63a39ce4715734e5fd8e994ef0f0490499",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +173,177 @@    private[this] def getInternedParty(id: Int): PLParty = {\n      assertSince(LV.Features.internedStrings, \"interned Party\")\n      toPartyLiteral(getInternedString(id))\n    }\n"
  },
  {
    "id" : "ebd5c5f3-3680-4802-8b35-08e13a2bada4",
    "prId" : 2298,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2298",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "101a5252-faf0-42f5-9a03-3a2066653a83",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "```suggestion\r\n          throw ParseError(\"nat type not supported\")\r\n```",
        "createdAt" : "2019-07-29T18:26:50Z",
        "updatedAt" : "2019-07-29T18:42:15Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +289,293 @@        case PLF.Type.SumCase.NAT =>\n          // FixMe: https://github.com/digital-asset/daml/issues/2289\n          throw new Error(\"nat type not supported\")\n\n        case PLF.Type.SumCase.SUM_NOT_SET =>"
  },
  {
    "id" : "7edd0e4e-defc-460b-adfd-d65fe136c59b",
    "prId" : 2298,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2298",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0da97d7-7ed6-429e-beec-9b2e02635b2e",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "```suggestion\r\n          throw ParseError(\"nat kind not supported\")\r\n```",
        "createdAt" : "2019-07-29T18:27:20Z",
        "updatedAt" : "2019-07-29T18:42:16Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +247,251 @@        case PLF.Kind.SumCase.NAT =>\n          // FixMe: https://github.com/digital-asset/daml/issues/2289\n          throw new Error(\"nat kind not supported\")\n        case PLF.Kind.SumCase.SUM_NOT_SET =>\n          throw ParseError(\"Kind.SUM_NOT_SET\")"
  },
  {
    "id" : "4e55455e-f7ff-4180-9cdd-612265361b45",
    "prId" : 1937,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b2e47a1-1545-434a-8ce4-a9a5a840e6be",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "To accompany the `EncodeV1` suggestion.\r\n\r\n```suggestion\r\n  private[lf] val enumVersion: LanguageMinorVersion = \"6\"\r\n```",
        "createdAt" : "2019-07-11T15:06:01Z",
        "updatedAt" : "2019-07-12T17:22:08Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a9443ebd3345db86ae245d80d9ee2d9a5d9ab47",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +706,710 @@  import LanguageMinorVersion.Implicits._\n\n  private[archive] val enumVersion: LanguageMinorVersion = \"6\"\n  private val internedIdsVersion: LanguageMinorVersion = \"6\"\n"
  },
  {
    "id" : "05357c03-dd13-46c7-8caa-bda74461bd2b",
    "prId" : 1614,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1614",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7197d6b-d55e-4478-abf8-82acf354a014",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "We cannot really represent anything bigger than `In32`, so why do we define it as `Int64` in protobuf message?\r\nSee: https://github.com/digital-asset/daml/blob/8e144420c4bb23d7bdd01e22aed22f9b7136eb99/daml-lf/data/src/main/scala/com/digitalasset/daml/lf/data/ImmArray.scala#L64",
        "createdAt" : "2019-06-20T14:07:54Z",
        "updatedAt" : "2019-06-26T07:32:46Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "e47adf71-2236-48c5-8a94-e09ee6295213",
        "parentId" : "d7197d6b-d55e-4478-abf8-82acf354a014",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "That's specific to the restrictions of the particular collections library this particular implementation happens to be using; nothing to do with the context of the LF language definition.",
        "createdAt" : "2019-06-20T14:21:19Z",
        "updatedAt" : "2019-06-26T07:32:46Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "cdebfafb9ac009ed15ea8adb801c50def398bf27",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +305,309 @@          val iidl = lfRef.getPackageRef.getInternedId\n          def outOfRange = ParseError(s\"invalid package ID table index $iidl\")\n          val iid = iidl.toInt\n          if (iidl != iid.toLong) throw outOfRange\n          internedPackageIds.lift(iid).getOrElse(throw outOfRange)"
  }
]