[
  {
    "id" : "6570535a-53f9-4acb-aebd-6d070e5edf7f",
    "prId" : 10249,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edc34413-3058-433e-9831-c573fb0e0ba7",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Does this change the guarantees given to the callers with regards to cleaning up?",
        "createdAt" : "2021-07-13T06:58:24Z",
        "updatedAt" : "2021-07-13T06:58:27Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "e7247c5b-91b6-4e20-bda8-9c1bbc5deb84",
        "parentId" : "edc34413-3058-433e-9831-c573fb0e0ba7",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "There is no resource to cleanup. Previously, we opened the stream here and closed it here. Now `DarManifestReader.dalfNames` opens and closes the stream.",
        "createdAt" : "2021-07-13T07:06:58Z",
        "updatedAt" : "2021-07-13T07:07:04Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5ea0f34a-3448-4cab-aa74-52074be5aa68",
        "parentId" : "edc34413-3058-433e-9831-c573fb0e0ba7",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "`get(ManifestName)` returns a immutable value no need for clean up here anymore.\r\nThe creation of the `InputStream` (with its cleanup is done) in `DarManifestReader.scala` line 18.",
        "createdAt" : "2021-07-13T07:08:08Z",
        "updatedAt" : "2021-07-13T07:08:09Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6ce42e5003329e228aa7f7088219758897eeff4",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +89,93 @@\n    private[GenDarReader] def readDalfNames: Try[Dar[String]] =\n      get(ManifestName)\n        .flatMap(DarManifestReader.dalfNames)\n        .recoverWith { case NonFatal(e1) => Failure(Error.InvalidDar(this, e1)) }"
  },
  {
    "id" : "657d7a11-803a-4682-b027-326da0fd5657",
    "prId" : 10243,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f67217e1-0582-4950-9737-bc054017b15e",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "concatenation is constant time. ",
        "createdAt" : "2021-07-12T15:36:13Z",
        "updatedAt" : "2021-07-12T15:36:13Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2e68dc543a3334f158e6b16ecc976bb1c858998",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +48,52 @@    var output = Bytes.Empty\n    Iterator.continually(zip.read(buffer)).takeWhile(_ >= 0).foreach { size =>\n      output = output ++ Bytes.fromByteArray(buffer, 0, size)\n      if (output.length >= entrySizeThreshold) throw Error.ZipBomb()\n    }"
  },
  {
    "id" : "a6515ede-e5eb-41a0-b331-e44931b0f8f6",
    "prId" : 8343,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "908be48d-da72-475a-a42d-a2a9f3b59730",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "`java.io.Reader` otherwise takes priority.",
        "createdAt" : "2020-12-18T17:38:21Z",
        "updatedAt" : "2021-01-04T08:09:50Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "536d836b9a25ce0551e8dea1ce5a5a3d6d14d893",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4,8 @@package com.daml.lf.archive\n\nimport java.io.{ByteArrayInputStream, ByteArrayOutputStream, File, FileInputStream, InputStream}\nimport java.util.zip.ZipInputStream\n"
  },
  {
    "id" : "80c5a96a-6696-4cb9-81d8-9ab64290976d",
    "prId" : 4703,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83f12b5c-389b-4a3a-8782-08e6f41eb24d",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "If you simply injected this as a constructor parameter you could simplify your testing efforts immensely (i.e., you would not need to generate a real zip bomb using a Python script plus you could run the test case on all platforms as a simple unit test).",
        "createdAt" : "2020-02-27T10:13:06Z",
        "updatedAt" : "2020-02-27T10:13:06Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "14afc101-da34-4688-985b-eed82cee2b95",
        "parentId" : "83f12b5c-389b-4a3a-8782-08e6f41eb24d",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Good point, thanks.",
        "createdAt" : "2020-02-27T11:13:55Z",
        "updatedAt" : "2020-02-27T11:13:55Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "becea4ce17ce58b1a6d18fa35fdf012e80c54a20",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +110,114 @@\n  private val ManifestName = \"META-INF/MANIFEST.MF\"\n  private val EntrySizeThreshold = 1024 * 1024 * 1024 // 1 GB\n\n  private[archive] case class ZipEntries(name: String, entries: Map[String, (Long, InputStream)]) {"
  },
  {
    "id" : "b7781255-fd58-44ae-96f8-823972a5c5fb",
    "prId" : 2005,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d18ebcd5-f2f3-44d3-ad67-6d69b956194a",
        "parentId" : null,
        "authorId" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "body" : "I'd like to remove the `name` from here as it's only used for texts of errors. I think this module should not be aware of any dar files and if we need to log/return an error containing the dar file name, it should be done in the layer where the file is converted to an `InputStream`. What do you think?",
        "createdAt" : "2019-07-04T14:01:21Z",
        "updatedAt" : "2019-07-11T14:55:46Z",
        "lastEditedBy" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "tags" : [
        ]
      },
      {
        "id" : "a24c5594-80a2-4ca4-86c7-b3562b27b8dd",
        "parentId" : "d18ebcd5-f2f3-44d3-ad67-6d69b956194a",
        "authorId" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "body" : "We agreed with @gerolf-da to leave this for now as it is.",
        "createdAt" : "2019-07-08T08:49:52Z",
        "updatedAt" : "2019-07-11T14:55:46Z",
        "lastEditedBy" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "tags" : [
        ]
      },
      {
        "id" : "f83721e0-df48-40ff-881a-92e3756b59ef",
        "parentId" : "d18ebcd5-f2f3-44d3-ad67-6d69b956194a",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "There are a lot of use cases for loading a DAR from a disk. I would leave the original `readArchive(darFile: ZipFile): Try[Dar[A]] ` and implement it in terms of `readArchive(name: String, darStream: ZipInputStream): Try[Dar[A]]`:\r\n1. open `ZipInputStream`\r\n2. pass it to `readArchive(name: String, darStream: ZipInputStream): Try[Dar[A]]`\r\n3. close the `ZipInputStream` using `bracket`",
        "createdAt" : "2019-07-08T14:25:22Z",
        "updatedAt" : "2019-07-11T14:55:46Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ad17e497cfec277fb5878ad7865ec99b598053c",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +31,35 @@\n  /** Reads an archive from a ZipInputStream. The stream will be closed by this function! */\n  def readArchive(name: String, darStream: ZipInputStream): Try[Dar[A]] = {\n    for {\n      entries <- bracket(Try(darStream))(zis => Try(zis.close())).flatMap(zis =>"
  },
  {
    "id" : "48e652fa-304e-4e3b-bf54-89b7396d1684",
    "prId" : 2005,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3005b4f3-1953-44e1-b437-1f89431a9e51",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "What is the purpose of the type hints here?",
        "createdAt" : "2019-07-10T11:30:17Z",
        "updatedAt" : "2019-07-11T14:55:46Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "69be4441-b6fe-4c6a-aae2-99fa5826217b",
        "parentId" : "3005b4f3-1953-44e1-b437-1f89431a9e51",
        "authorId" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "body" : "what type hints do you mean?",
        "createdAt" : "2019-07-10T11:53:07Z",
        "updatedAt" : "2019-07-11T14:55:46Z",
        "lastEditedBy" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "tags" : [
        ]
      },
      {
        "id" : "13f0d9ac-2aac-4877-8bf1-82f68bbacc59",
        "parentId" : "3005b4f3-1953-44e1-b437-1f89431a9e51",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "`name: String` and `darInfo(entries): String`",
        "createdAt" : "2019-07-10T11:57:04Z",
        "updatedAt" : "2019-07-11T14:55:46Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "0f50fee4-688e-4246-b441-62f116aae966",
        "parentId" : "3005b4f3-1953-44e1-b437-1f89431a9e51",
        "authorId" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "body" : "This diagnostic failure has been already there before. I assume it helps debugging corrupted DAR files.",
        "createdAt" : "2019-07-10T12:03:48Z",
        "updatedAt" : "2019-07-11T14:55:46Z",
        "lastEditedBy" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "tags" : [
        ]
      },
      {
        "id" : "423ff5ef-022b-43fb-a2d6-e6487ed224f2",
        "parentId" : "3005b4f3-1953-44e1-b437-1f89431a9e51",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I was referring to the explicit `: String` after each value in the string interpolation.",
        "createdAt" : "2019-07-10T12:09:40Z",
        "updatedAt" : "2019-07-11T14:55:46Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "27dab616-8ea1-4816-834a-b138446ad065",
        "parentId" : "3005b4f3-1953-44e1-b437-1f89431a9e51",
        "authorId" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "body" : "Oh, sorry. Good point, I don't know actually. @leo-da why do we need them? they indeed seem to be unnecessary. ",
        "createdAt" : "2019-07-10T12:27:56Z",
        "updatedAt" : "2019-07-11T14:55:46Z",
        "lastEditedBy" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "tags" : [
        ]
      },
      {
        "id" : "ee78b1e8-0f7b-4b5d-b9bc-448daca98a58",
        "parentId" : "3005b4f3-1953-44e1-b437-1f89431a9e51",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "It's a safety measure; for example, suppose you change `darInfo`'s signature to return something else alongside the `String` or add some structure like `Option[String]`, or, I don't know, add a case class that wraps it? `toString` gets applied to everything silently and automatically, so your string interpolation just silently becomes wrong. The ascription assures that no type change has happened elsewhere that could have such an impact.\r\n\r\nI'd like to write a replacement macro for `s` or a wart that only permits members of a whitelist of types to be interpolated (`String`, maybe some other safe candidates like `Int`). I'd also like a wart that forbids `toString`, but let's leave that aside for now. In the meantime, `: String` ascription is a good stopgap measure.",
        "createdAt" : "2019-07-10T22:32:30Z",
        "updatedAt" : "2019-07-11T14:55:46Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "09db462c-7178-45ad-bc0f-13bf9d79e483",
        "parentId" : "3005b4f3-1953-44e1-b437-1f89431a9e51",
        "authorId" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "body" : "Got it. Thanks @stephencompall-DA!",
        "createdAt" : "2019-07-11T07:29:28Z",
        "updatedAt" : "2019-07-11T14:55:46Z",
        "lastEditedBy" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ad17e497cfec277fb5878ad7865ec99b598053c",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +84,88 @@  case class InvalidZipEntry(name: String, entries: ZipEntries)\n      extends RuntimeException(\n        s\"Invalid zip entryName: ${name: String}, DAR: ${darInfo(entries): String}\")\n\n  case class InvalidLegacyDar(entries: ZipEntries)"
  },
  {
    "id" : "b1a44414-ffb0-47f8-84b9-c50995046dee",
    "prId" : 2005,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8222117-2717-4e4e-8e54-0e9778b1ae2a",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "@gaboraranyossy-da we are leaking the `ZipInputStream` create here. It should be closed.",
        "createdAt" : "2019-07-11T13:52:59Z",
        "updatedAt" : "2019-07-11T14:55:46Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "a2f26fea-8be4-4847-b12e-0650a5a5bf19",
        "parentId" : "a8222117-2717-4e4e-8e54-0e9778b1ae2a",
        "authorId" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "body" : "good spot! it's addressed now.",
        "createdAt" : "2019-07-11T14:56:26Z",
        "updatedAt" : "2019-07-11T14:56:26Z",
        "lastEditedBy" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ad17e497cfec277fb5878ad7865ec99b598053c",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +28,32 @@  /** Reads an archive from a File. */\n  def readArchiveFromFile(darFile: File) =\n    readArchive(darFile.getName, new ZipInputStream(new FileInputStream(darFile)))\n\n  /** Reads an archive from a ZipInputStream. The stream will be closed by this function! */"
  },
  {
    "id" : "da8ae6ea-fd4e-46df-8241-6e7f7616699a",
    "prId" : 309,
    "prUrl" : "https://github.com/digital-asset/daml/pull/309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d895bd2d-afcf-4d2f-a8a1-3bc8acc2101f",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "This won't work for DARs that also contain the stdlib, which is now produced as a separate DALF file next to `daml-prim.dalf` and the DALF file for the actual model. Unless we never want to support a DAR file with no manifest but more than 2 DALF files.",
        "createdAt" : "2019-04-09T07:42:28Z",
        "updatedAt" : "2019-04-09T07:49:21Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "4062fb67-2587-4756-a5bb-93825d98889e",
        "parentId" : "d895bd2d-afcf-4d2f-a8a1-3bc8acc2101f",
        "authorId" : "8771fbb5-9692-4299-93c4-2fc945754229",
        "body" : "> Unless we never want to support a DAR file with no manifest but more than 2 DALF files.\r\n\r\nthat is my assumption here. @robin-da can you comment?",
        "createdAt" : "2019-04-09T08:00:30Z",
        "updatedAt" : "2019-04-09T08:00:37Z",
        "lastEditedBy" : "8771fbb5-9692-4299-93c4-2fc945754229",
        "tags" : [
        ]
      },
      {
        "id" : "61384a45-89a5-4f32-8dcb-9a7126b9e6f6",
        "parentId" : "d895bd2d-afcf-4d2f-a8a1-3bc8acc2101f",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "@francesco-da legacy DAR only contained main and prim dalfs, no stdlib. But again, specification for the DAR format would be nice to have",
        "createdAt" : "2019-04-09T11:58:30Z",
        "updatedAt" : "2019-04-09T11:58:30Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "fcd620a6-ccdd-4eb4-981d-c05fcb676e3d",
        "parentId" : "d895bd2d-afcf-4d2f-a8a1-3bc8acc2101f",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "```\r\nleo   [42 minutes ago]\r\nYep, that's what I remember. The old dar that didn't have Main-Dalf in the manifest could only have two dalfs, main and prim. So no reason to overcomplicate the dar reader. New dars with stdlib will always have Main-Dalf in the manifest. Am I right? @robin\r\nAnd yeah we need a spec, if format keeps changing (edited)\r\n\r\n\r\nrobin   [36 minutes ago]\r\nyes\r\n```",
        "createdAt" : "2019-04-09T13:19:06Z",
        "updatedAt" : "2019-04-09T13:19:06Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      }
    ],
    "commit" : "d645bda62fd50580fcb972f7f3ab728cfcfac074",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +49,53 @@    val entries: List[ZipEntry] = darFile.entries.asScala.toList\n    val dalfs: List[String] = entries.filter(isDalf).map(_.getName)\n    dalfs.partition(isPrimDalf) match {\n      case (List(prim), List(main)) => Success(Dar(main, List(prim)))\n      case (List(prim), List()) => Success(Dar(prim, List.empty))"
  },
  {
    "id" : "cd38f196-528f-4ca1-8c44-d93a16f9358f",
    "prId" : 309,
    "prUrl" : "https://github.com/digital-asset/daml/pull/309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "340f1cf2-b55a-4d3e-9b74-db5557ce7498",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "I wouldn't mention the legacy mode at all. If both \"modes\" fail to read the DAR file, we should just fail with the error message of the currently expected format (aka DAR with manifest). For most users the legacy mode should never come into action.",
        "createdAt" : "2019-04-09T07:48:58Z",
        "updatedAt" : "2019-04-09T07:49:21Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "73ba109f-d500-4853-b6db-dc8960bc9b38",
        "parentId" : "340f1cf2-b55a-4d3e-9b74-db5557ce7498",
        "authorId" : "8771fbb5-9692-4299-93c4-2fc945754229",
        "body" : "i'm happy for @leo-da to adjust the error message, i'll merge this in the meantime.",
        "createdAt" : "2019-04-09T08:34:24Z",
        "updatedAt" : "2019-04-09T08:34:28Z",
        "lastEditedBy" : "8771fbb5-9692-4299-93c4-2fc945754229",
        "tags" : [
        ]
      },
      {
        "id" : "c5c96520-df69-4b5d-a6f4-94b4de1392b7",
        "parentId" : "340f1cf2-b55a-4d3e-9b74-db5557ce7498",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "@gerolf-da why? I like the idea of legacy... you are telling your user that they need to upgrade.",
        "createdAt" : "2019-04-09T11:57:10Z",
        "updatedAt" : "2019-04-09T11:57:10Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      }
    ],
    "commit" : "d645bda62fd50580fcb972f7f3ab728cfcfac074",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +83,87 @@        s\"This DAR contains: [${dalfNames.mkString(\", \"): String}]\")\n\ncase class InvalidDar(cause1: Throwable, cause2: Throwable)\n    extends RuntimeException(\n      \"Both Contemporary and Legacy DAR reads failed with errors: \" +"
  }
]