[
  {
    "id" : "188fdb86-4db5-4a96-9d54-e34277c3be1d",
    "prId" : 2005,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78c897b3-a484-45b5-b1ce-34dfe2e77559",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "I might be missing something, but I believe we are not closing the above `inputStream`. In the original implementation, `bracket` was handling this.",
        "createdAt" : "2019-07-08T14:58:10Z",
        "updatedAt" : "2019-07-11T14:55:46Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "73c50acc-a496-49c6-8a8d-edf65b9ee1eb",
        "parentId" : "78c897b3-a484-45b5-b1ce-34dfe2e77559",
        "authorId" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "body" : "The only case I can think of which is not handled is when the InputStream is instantiated, the rest should be managed by the numerous decorating layers. I put something to handle issues at instantiation.",
        "createdAt" : "2019-07-09T07:29:07Z",
        "updatedAt" : "2019-07-11T14:55:46Z",
        "lastEditedBy" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "tags" : [
        ]
      },
      {
        "id" : "020930d1-d270-4972-b494-9b4cceb91db9",
        "parentId" : "78c897b3-a484-45b5-b1ce-34dfe2e77559",
        "authorId" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "body" : "You're right, I thought the parseDar/Dalf will eventually close the stream. Also, when the stream blows up at instantiation there is nothing to close.",
        "createdAt" : "2019-07-09T09:24:59Z",
        "updatedAt" : "2019-07-11T14:55:46Z",
        "lastEditedBy" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ad17e497cfec277fb5878ad7865ec99b598053c",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +36,40 @@    for {\n      fileType <- supportedFileType(file)\n      inputStream <- fileToInputStream(file)\n      dar <- readStream(file.getName, inputStream, fileType)\n    } yield dar"
  },
  {
    "id" : "1fd10140-493a-4d7b-af4e-ddf19a002089",
    "prId" : 359,
    "prUrl" : "https://github.com/digital-asset/daml/pull/359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f0e11b8-7c49-45d8-8d57-ed7454000e2f",
        "parentId" : null,
        "authorId" : "0419d1cd-6fa6-4fee-87dd-3293d8b694da",
        "body" : "Should this check be case-insensitive?",
        "createdAt" : "2019-04-10T14:05:42Z",
        "updatedAt" : "2019-04-10T14:06:11Z",
        "lastEditedBy" : "0419d1cd-6fa6-4fee-87dd-3293d8b694da",
        "tags" : [
        ]
      },
      {
        "id" : "cdd94a9c-e8ae-4d9e-84a5-c8b1697f9e6e",
        "parentId" : "7f0e11b8-7c49-45d8-8d57-ed7454000e2f",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "it can be... I actually thought about this initially. But I believe our tools create DARs and DALFs with `*.dar` and `*.dalf` extensions and that is how it is supposed to be. But if you think the case is important, it is easy to fix.",
        "createdAt" : "2019-04-10T14:08:27Z",
        "updatedAt" : "2019-04-10T14:09:31Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      }
    ],
    "commit" : "90355c1705aeacdc6ee627081dcdfeadbec76a81",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +77,81 @@\n  sealed abstract class SupportedFileType(fileExtension: String) extends Serializable with Product {\n    def matchesFileExtension(f: File): Boolean = f.getName.endsWith(fileExtension)\n  }\n  final case object DarFile extends SupportedFileType(\".dar\")"
  }
]