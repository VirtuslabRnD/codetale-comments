[
  {
    "id" : "5cd7ee21-1233-4e55-bfe2-f13590bd5099",
    "prId" : 9641,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "073af765-0f3f-4f45-8e44-d9b5c40f051f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "@remyhaemmerle-da can you please check if seems sensible? This was (understandably) necessary to fix the conformance tests.",
        "createdAt" : "2021-05-11T14:48:43Z",
        "updatedAt" : "2021-05-11T14:48:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "36810ea8-fb7a-43a6-959e-9e577627a60e",
        "parentId" : "073af765-0f3f-4f45-8e44-d9b5c40f051f",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "From a general point of view, we have to change this function. \r\nHowever : \r\n1.  I would prefer we do check for version, i.e. the transaction coder ensures already that `exe.byKey` is defined only if exe.version >= TransactionVersion.minByKey \r\n```suggestion\r\n                case Some(key) if exe.byKey =>\r\n```\r\n2. ~We have to do the same thing for Fetch node~.\r\n",
        "createdAt" : "2021-05-11T16:07:56Z",
        "updatedAt" : "2021-05-11T17:33:32Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "902fb2b6-755b-4abf-b66c-bcd5ccec5a1d",
        "parentId" : "073af765-0f3f-4f45-8e44-d9b5c40f051f",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "> I would prefer we do check for version, i.e. the transaction coder ensures already that exe.byKey is defined only if exe.version >= TransactionVersion.minByKey\r\n\r\nThat seems fragile. Now it matters if I first roundtrip via serialization & deserialization or whether I get a transaction directly out of the engine and pass it here. I don’t really see a usecase for the second case but I still feel slightly uneasy about breaking it.",
        "createdAt" : "2021-05-11T17:36:51Z",
        "updatedAt" : "2021-05-11T17:36:51Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5a23e7cd-c383-418f-b9bd-4b2e0e52c2a7",
        "parentId" : "073af765-0f3f-4f45-8e44-d9b5c40f051f",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "The validation was original designed to work only on deserialized transaction. I think  we should continue to assume this as: \r\n- it simplify reasoning about validation as transaction are somehow normalized by the serialization/deserialization process. \r\n- I do not see use case were we may want to validate non serialized transaction\r\n- The way we are distributing the versioning logic through the code seems to me very fragile, I really want to limit it to some very limited places. You introduce in this PR tow new places.  \r\n- why changing something that has proven to work. \r\n\r\n",
        "createdAt" : "2021-05-11T18:31:39Z",
        "updatedAt" : "2021-05-11T18:31:40Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "894e42ea-f3fe-4c57-8587-dca8dae947f0",
        "parentId" : "073af765-0f3f-4f45-8e44-d9b5c40f051f",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Fair enough I think my real complaint is that we use the same type for things that have been normalized via serialization & deserialization and things that come directly out of speedy. Yes that might work now (although we also had bugs caused by that iirc) but that’s super fragile under refactoring.",
        "createdAt" : "2021-05-11T18:43:11Z",
        "updatedAt" : "2021-05-11T18:43:12Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9721b78d-7cdd-4f33-99fa-1c2d35e23a77",
        "parentId" : "073af765-0f3f-4f45-8e44-d9b5c40f051f",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I would be fine with writing a transaction (version aware) normalize equivalent to the serialization-deserialization.  ",
        "createdAt" : "2021-05-11T18:58:05Z",
        "updatedAt" : "2021-05-11T18:58:06Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "3318bbdc-9954-4eb2-9958-8de0b498c9f6",
        "parentId" : "073af765-0f3f-4f45-8e44-d9b5c40f051f",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "That doesn’t really solve the issue unless you run that in `finish` in speedy which probably doesn’t work (e.g., canton needs `byKey` flags for older versions as well).\r\n\r\nWhat worries me is the mostly implicit assumptions about where we have already normalized and where we haven’t and thereby which checks we can skip and which we cannot skip. The only way to make that reasonably safe that I can see is to have separate types for transactions & nodes that have been normalized and those that come out of speedy. Otherwise this is going to blow up sooner or later.\r\n\r\nI agree randomly throwing version checks around like I do here isn’t solving anything. That’s shotgun validation.\r\n\r\nOn the other hand, the alternative seems to be to randomly throw around normalization like we already had to do for type erasure in a few places which just seems like a different incarnation of the same antipattern.",
        "createdAt" : "2021-05-11T19:08:17Z",
        "updatedAt" : "2021-05-11T19:08:17Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "7c52ab1f-5c43-42f9-b7de-d9ca84578d5e",
        "parentId" : "073af765-0f3f-4f45-8e44-d9b5c40f051f",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I was indeed thinking to apply it inside the finish. For canton I see several solution:\r\n - We add a config flag to normalize or not the `byKey` flag\r\n - We include the `byKey` flag info in the `Transaction.MetaData`\r\n - We force Canton to use only LF 1.14 (wish could be somehow possible as there is no Canton production).",
        "createdAt" : "2021-05-11T20:07:55Z",
        "updatedAt" : "2021-05-11T20:07:56Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "955b506ebe91726ecc8834cc3308150cccd25c24",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +98,102 @@              import scala.Ordering.Implicits.infixOrderingOps\n              val (cmd, newCids) = exe.key match {\n                case Some(key) if exe.byKey && exe.version >= TransactionVersion.minByKey =>\n                  commandPreprocessor.unsafePreprocessExerciseByKey(\n                    exe.templateId,"
  },
  {
    "id" : "a33c573e-aa9f-4251-90e3-0a05e3f97d44",
    "prId" : 9212,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "711b6df4-655e-4e7e-b34c-2d761bf3f9e8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What’s the issue with turning it into a catch?",
        "createdAt" : "2021-03-24T07:55:32Z",
        "updatedAt" : "2021-03-25T08:33:57Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5e6ec31e-0287-4f3f-98d9-7a4f5bc86d0c",
        "parentId" : "711b6df4-655e-4e7e-b34c-2d761bf3f9e8",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "it is a bit more tricky than other node: because we have to consider the chilren as well.\r\nThe naive idea would be to create a new `Catch` command that take as argument the list of commands obtained by translating the chidren. I will postpone that for later, since it would be used only by canton, and we are not completly clear how we will deal with that exactly.  ",
        "createdAt" : "2021-03-24T08:39:49Z",
        "updatedAt" : "2021-03-25T08:33:57Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ba678c3cf618bd612463d16bab59b75af863058",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +38,42 @@      case _: Node.NodeRollback[_] =>\n        // TODO https://github.com/digital-asset/daml/issues/8020\n        // how on earth can we turn a rollback node back into a speedy command?\n        sys.error(\"rollback nodes are not supported\")\n      case Node.NodeCreate("
  },
  {
    "id" : "c9890eb8-3de9-4c12-a1dd-df7fad37c822",
    "prId" : 5434,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f13ebdf-ab64-45c2-befb-e264ae919c6a",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Should this also fail for `Node.LookupByKey`?",
        "createdAt" : "2020-04-08T15:36:02Z",
        "updatedAt" : "2020-04-08T19:14:17Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "b8a51bdc-9be3-40ac-9609-b45a502e9070",
        "parentId" : "1f13ebdf-ab64-45c2-befb-e264ae919c6a",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Good catch ! This is a bug from the original code.",
        "createdAt" : "2020-04-08T19:08:40Z",
        "updatedAt" : "2020-04-08T19:14:17Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "15d20c06d3a28aa8099fedae3c1eaab0786182ae",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +99,103 @@        case Some(node) =>\n          node match {\n            case Node.NodeFetch(_, _, _, _, _, _, _) =>\n              fail(s\"Transaction contains a fetch root node $id\")\n            case Node.NodeLookupByKey(_, _, _, _) =>"
  }
]