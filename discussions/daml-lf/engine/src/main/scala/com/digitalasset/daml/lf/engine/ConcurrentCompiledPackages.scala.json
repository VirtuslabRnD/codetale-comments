[
  {
    "id" : "92ae1fbc-ed17-4bd4-8ad6-5028feeea75d",
    "prId" : 9980,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9980",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb2c514e-4a1d-41d5-9cad-ebead2497df8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I guess compilation errors are internal since typechecking should catch any errors arising during compilation?",
        "createdAt" : "2021-06-14T08:52:55Z",
        "updatedAt" : "2021-06-14T09:54:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5978508f-011c-4527-b479-91c67ddaf5d3",
        "parentId" : "eb2c514e-4a1d-41d5-9cad-ebead2497df8",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "added a comment",
        "createdAt" : "2021-06-14T10:15:58Z",
        "updatedAt" : "2021-06-15T07:12:49Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7230ae43f049a2592ef69717d97a3c86194310f6",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +120,124 @@                  )\n                case Compiler.CompilationError(msg) =>\n                  return ResultError(\n                    // compilation errors are internal since typechecking should\n                    // catch any errors arising during compilation"
  },
  {
    "id" : "f76ee12b-2612-4fa6-b6d5-bb1a0580d203",
    "prId" : 7577,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7577",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "954833d1-1a9d-4020-8973-68364759eabe",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This seems fairly inefficient. You are effectively building up a linear search afaict. Any reason not to throw this stuff in a map?",
        "createdAt" : "2020-10-08T08:44:10Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "cfa952ea-9c42-4258-892d-e3745c0a67fe",
        "parentId" : "954833d1-1a9d-4020-8973-68364759eabe",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```scala\r\nval signatureLookup: PartialFunction[PackageId, PackageSignature] = {\r\n  case `pkgId` => signature\r\n}\r\n```\r\nis syntactic sugar for\r\n```scala\r\nval signatureLookup: PartialFunction[PackageId, PackageSignature] =\r\n  new PartialFunction{\r\n    override def isDefinedAt(x: PackageId): Boolean = \r\n      x match {\r\n        case x if x == pkgId => true \r\n        case _ => false \r\n      }\r\n    override def apply(v1: PackageId): PackageSignature = \r\n      v1 match {\r\n        case v1 if v1 == pkgId => signature\r\n      }\r\n}\r\n```\r\n\r\nI think this is pretty constant\r\n",
        "createdAt" : "2020-10-08T08:59:49Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "07f27a93-7932-49c5-b326-70d3c9ad994f",
        "parentId" : "954833d1-1a9d-4020-8973-68364759eabe",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It’s constant for this one but if you are building up the whole function as a chain of `orElse` of this type of partial function, you end up doing a linear search instead of a lookup to see if a package id is in there.",
        "createdAt" : "2020-10-08T09:01:53Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a1cd59ab-f5e7-4f32-9e95-61d8a85db02f",
        "parentId" : "954833d1-1a9d-4020-8973-68364759eabe",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "In this case the lookup in  `signatureLookup orElse _signatures` is constant as `_signatures` is a Map (and not a chain of `orElse`).\r\nI prefer to not put the signature of `pkgId` into the mutable map `_signatures` before the compilation succeed. \r\n\r\n ",
        "createdAt" : "2020-10-08T09:21:19Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "7e803666-1f15-4f33-8864-cf2295c70595",
        "parentId" : "954833d1-1a9d-4020-8973-68364759eabe",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Ah I see, I missed the fact that `_signatures` was a map. I thought we incrementally build up `_signatures` as a composition of a bunch of partial functions. Makes sense :+1: ",
        "createdAt" : "2020-10-08T09:23:16Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6d8aeac74d12178596915f46b0e6afbe8a23966",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +88,92 @@            val signature = AstUtil.toSignature(pkg)\n            val signatureLookup: PartialFunction[PackageId, PackageSignature] = {\n              case `pkgId` => signature\n            }\n            // Compile the speedy definitions for this package."
  },
  {
    "id" : "c807bcda-7336-4267-9c19-6701e87959ef",
    "prId" : 6512,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05457afb-9fbd-424c-9564-8c6086db2317",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This is unrelated. I've just learnt about from @SamirTalwar-DA in the change below and though it might be a good idea to _immediately_ apply my lesson here as well, given how small the PR is.",
        "createdAt" : "2020-06-29T11:47:17Z",
        "updatedAt" : "2020-06-29T12:47:24Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ec8a59682399aa5dbac069527e4e9a52cdeb4e7",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +30,34 @@    Option(_defns.get(dref))\n\n  override def profilingMode = _profilingMode\n  def profilingMode_=(profilingMode: speedy.Compiler.ProfilingMode) = {\n    _profilingMode = profilingMode"
  },
  {
    "id" : "0efb77af-30be-4bc5-9d9c-c12586195410",
    "prId" : 6471,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6471",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ab573d1-0608-4343-9cfb-c636a94bb5ba",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Cannot you use `putIfAbsent` ?",
        "createdAt" : "2020-06-24T08:06:11Z",
        "updatedAt" : "2020-06-24T08:06:18Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "30bc3879-ec71-400a-9464-675d648a6e52",
        "parentId" : "4ab573d1-0608-4343-9cfb-c636a94bb5ba",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Isn’t `putIfAbsent` strict in the value and will therefore compute all the other stuff even if don’t end up putting?",
        "createdAt" : "2020-06-24T08:07:49Z",
        "updatedAt" : "2020-06-24T08:07:49Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5f1873a5-44d2-4a4c-b3c9-79755898ca2b",
        "parentId" : "4ab573d1-0608-4343-9cfb-c636a94bb5ba",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Yeah, unfortunately. Java's `Map` has `computeIfAbsent`, which is lazy, but there doesn't seem to be an equivalent in Scala.",
        "createdAt" : "2020-06-24T08:37:27Z",
        "updatedAt" : "2020-06-24T08:37:28Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "5296fedd-cb05-4dec-a7f0-3b3d822115d4",
        "parentId" : "4ab573d1-0608-4343-9cfb-c636a94bb5ba",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Oh, I see the original code used just that.",
        "createdAt" : "2020-06-24T08:55:38Z",
        "updatedAt" : "2020-06-24T08:55:38Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "06ae5baa-1134-4d3e-8d78-33fa6dda59bb",
        "parentId" : "4ab573d1-0608-4343-9cfb-c636a94bb5ba",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Could we not use `getOrElseUpdate` in this case ? ",
        "createdAt" : "2020-06-24T10:01:10Z",
        "updatedAt" : "2020-06-24T10:02:51Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fd38322da34579ce1dedba06f9f2fc9ef7c6cfa",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +85,89 @@          // package once. Other concurrent calls to add this package will block\n          // waiting for the first one to finish.\n          if (!_packages.contains(pkgId)) {\n            // Compile the speedy definitions for this package.\n            val defns ="
  },
  {
    "id" : "95b1f905-bbd0-4d16-939c-b68c561e41cc",
    "prId" : 3726,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9baa4257-728e-4699-9536-8f99a21c79c5",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It looks like the error for cyclical dependencies is gone. Is that intentional?",
        "createdAt" : "2019-12-04T09:46:33Z",
        "updatedAt" : "2019-12-04T12:11:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ee47f10a-83bf-4d7d-9658-885f11d27960",
        "parentId" : "9baa4257-728e-4699-9536-8f99a21c79c5",
        "authorId" : null,
        "body" : "Yes, the cyclic check didn't make sense anymore as we could've easily encountered the same package multiple times (A depends on (B, C), B depends on C). We don't really need to worry about this since we cannot construct cycles as package ids are content hashes.",
        "createdAt" : "2019-12-04T10:49:49Z",
        "updatedAt" : "2019-12-04T12:11:21Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "172715cbea18231150b7d6276af1c3f63490bc2f",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +58,62 @@          // Load dependencies of this package and transitively its dependencies.\n          for (dependency <- pkg.directDeps) {\n            if (!_packages.contains(dependency) && !state.seenDependencies.contains(dependency)) {\n              return ResultNeedPackage(\n                dependency, {"
  },
  {
    "id" : "24af46a4-95cb-478b-9217-7da3c230ddfc",
    "prId" : 3726,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "415d2a00-2a13-4726-a0da-2ca463ed43f0",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Nice! Looks even simpler than the code before!",
        "createdAt" : "2019-12-04T12:39:14Z",
        "updatedAt" : "2019-12-04T12:39:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "172715cbea18231150b7d6276af1c3f63490bc2f",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +77,81 @@          // package once. Other concurrent calls to add this package will block\n          // waiting for the first one to finish.\n          _packages.computeIfAbsent(\n            pkgId, { _ =>\n              // Compile the speedy definitions for this package."
  }
]