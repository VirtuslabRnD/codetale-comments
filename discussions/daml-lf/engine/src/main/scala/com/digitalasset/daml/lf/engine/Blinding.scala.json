[
  {
    "id" : "867b8f3a-0203-437b-92e4-7d65498e567d",
    "prId" : 7400,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "031056cb-e35a-4075-97b8-48b7b2a29f08",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Let's please do this straight afterward.",
        "createdAt" : "2020-09-16T08:57:49Z",
        "updatedAt" : "2020-09-17T13:03:20Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "c9115778-32e3-4f43-a3c2-c5c78ba63d9a",
        "parentId" : "031056cb-e35a-4075-97b8-48b7b2a29f08",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "ok",
        "createdAt" : "2020-09-16T16:48:21Z",
        "updatedAt" : "2020-09-17T13:03:20Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "a360635b966cdfe27bfd3cd6e156308321238660",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +27,31 @@    *  @param initialAuthorizers set of parties claimed to be authorizers of the transaction\n    */\n  def checkAuthorizationAndBlind( //TODO: remove this method. Authorization now performed when transaction is constructed\n      tx: Transaction.Transaction,\n      initialAuthorizers: Set[Party],"
  },
  {
    "id" : "76c22380-130a-4b78-891f-752bf435c2ee",
    "prId" : 7262,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0146ad7-9a4c-4db8-bc56-aac96f32c538",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Wouldn't it make more sense to calculate blinding only if we get here instead of doing it anyway?",
        "createdAt" : "2020-08-28T13:07:07Z",
        "updatedAt" : "2020-08-28T13:51:00Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "40b597b8-16bb-40e9-9a70-d5d9d5434ec4",
        "parentId" : "e0146ad7-9a4c-4db8-bc56-aac96f32c538",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Yes it would. Thanks.",
        "createdAt" : "2020-08-28T13:33:31Z",
        "updatedAt" : "2020-08-28T13:51:00Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "215dbf94-1cb1-4d87-8d89-8a974416ecf2",
        "parentId" : "e0146ad7-9a4c-4db8-bc56-aac96f32c538",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Someone's coming from lazy-land. :wink: ",
        "createdAt" : "2020-08-28T14:19:02Z",
        "updatedAt" : "2020-08-28T14:19:02Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b8ee278eed595ea2a951f0ce0821150593ee04d3",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +52,56 @@    if (failedAuthorizations.isEmpty) {\n      val blindingInfo = BlindingTransaction.calculateBlindingInfo(tx)\n      Right(blindingInfo)\n    } else {\n      Left("
  },
  {
    "id" : "60b8f371-3c12-40e9-aeab-dc732b65a491",
    "prId" : 7262,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16c5a110-cb26-4d8f-adee-ca7e963fe0bc",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Just for your information. \r\nTo build an either conditionally you could use `Either.cond` function.\r\nExplicit use of `if ... then ... else ...` is also fine",
        "createdAt" : "2020-09-01T09:20:09Z",
        "updatedAt" : "2020-09-01T09:22:40Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "14ac2c62-d8c5-44b5-ba3c-b09fe02b4398",
        "parentId" : "16c5a110-cb26-4d8f-adee-ca7e963fe0bc",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "ok. thanks\r\n\r\non a very slightly related issue (it's to do with conditional code!)\r\nI noticed a coding pattern which looks rather inefficient, and I wonder if we care.\r\n\r\nIn `AuthorizingTransaction.scala` (prev `EnrichedTransaction.scala` there are many calls to `authorize` of the form:\r\n```\r\n        .authorize(\r\n          nodeId = nodeId,\r\n          passIf = create.signatories subsetOf auth.authParties,\r\n          failWith = FailedAuthorization.CreateMissingAuthorization(\r\n            templateId = create.coinst.template,\r\n            optLocation = create.optLocation,\r\n            authorizingParties = auth.authParties,\r\n            requiredParties = create.signatories,\r\n          ),\r\n        )\r\n```\r\nwhich construct a `FailedAuthorization` object, even when `passIf` is false.\r\n\r\nMaybe this could be improved by using a non-strict/by-name argument to the `authorize` function.\r\nIs this regarded as good scala style?",
        "createdAt" : "2020-09-01T10:15:06Z",
        "updatedAt" : "2020-09-01T10:15:06Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "3ca0e52a-8149-4660-b315-ead5bcaa6ab4",
        "parentId" : "16c5a110-cb26-4d8f-adee-ca7e963fe0bc",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I do not really care ;). \r\nIn the case you are describing, call-by-name argument seem pretty reasonable.  \r\n",
        "createdAt" : "2020-09-01T11:48:05Z",
        "updatedAt" : "2020-09-01T11:48:06Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b8ee278eed595ea2a951f0ce0821150593ee04d3",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +50,54 @@        .mkString(\";\")\n    }\n    if (failedAuthorizations.isEmpty) {\n      val blindingInfo = BlindingTransaction.calculateBlindingInfo(tx)\n      Right(blindingInfo)"
  },
  {
    "id" : "49b2efd7-fd3f-4757-9616-576d947ea0c8",
    "prId" : 6507,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7abdd83-39ba-43e8-a1ca-238ea5c7d203",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I don't know if we could be more aggressively clean up here and would need some advice on this. If we can clean up more, I'd leave for a separate PR nevertheless.",
        "createdAt" : "2020-06-26T10:11:46Z",
        "updatedAt" : "2020-06-26T10:11:46Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "59cd1fae-a6e5-40c7-8dd8-b3e6629845c3",
        "parentId" : "b7abdd83-39ba-43e8-a1ca-238ea5c7d203",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I thinks @gerolf-da (or maybe @stefanobaghino-da) would be better at giving advice on this.  ",
        "createdAt" : "2020-06-26T10:55:13Z",
        "updatedAt" : "2020-06-26T10:55:13Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "c38e6eda-1243-4914-bf71-c44088d3f655",
        "parentId" : "b7abdd83-39ba-43e8-a1ca-238ea5c7d203",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I see only four lines that use `localDivulgence`. You can probably safely remove it and keep this PR very small. In any case, I would prefer if you could at least put this so that it's an invariant at construction, rather than a comment here where it's called.",
        "createdAt" : "2020-06-26T10:55:35Z",
        "updatedAt" : "2020-06-26T10:55:40Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "436cd2b1-56a5-4716-ad7c-88d9a7417a98",
        "parentId" : "b7abdd83-39ba-43e8-a1ca-238ea5c7d203",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Yes, with the removal of `RelativeContractId`, `localDivulgence` lost it's justification to be a thing.",
        "createdAt" : "2020-06-26T11:00:56Z",
        "updatedAt" : "2020-06-26T11:00:56Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "a6b8ac73-98a8-46ad-96bd-bf3f52a37ae3",
        "parentId" : "b7abdd83-39ba-43e8-a1ca-238ea5c7d203",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "[This](https://github.com/digital-asset/daml/pull/6509) looks like it would do it, testing if it doesn't breaking anything.",
        "createdAt" : "2020-06-26T11:04:05Z",
        "updatedAt" : "2020-06-26T11:04:06Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "123a3177-d36d-45c5-b3d3-b8d3669eeb18",
        "parentId" : "b7abdd83-39ba-43e8-a1ca-238ea5c7d203",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "@stefanobaghino-da I'm fine with merging your suggestion in once we've discussed my comment on it.",
        "createdAt" : "2020-06-26T11:09:39Z",
        "updatedAt" : "2020-06-26T11:09:39Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "31fe522e-9698-473b-a4b4-0c3d94fe4f58",
        "parentId" : "b7abdd83-39ba-43e8-a1ca-238ea5c7d203",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Ran all tests under `//daml-lf` and one conformance test, all good, unfortunately I cannot run the full thing on CI unless I'm trying to merge on `master`.",
        "createdAt" : "2020-06-26T11:25:59Z",
        "updatedAt" : "2020-06-26T11:26:00Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "3cfaad41-6f42-4bb1-a03c-85ef4bf99d81",
        "parentId" : "b7abdd83-39ba-43e8-a1ca-238ea5c7d203",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "> Yes, with the removal of `RelativeContractId`, `localDivulgence` lost it's justification to be a thing.\r\n\r\n@remyhaemmerle-da is crying of joy.",
        "createdAt" : "2020-06-26T11:49:40Z",
        "updatedAt" : "2020-06-26T11:49:40Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "7e91db64-1d95-4ca7-8f50-28578fe3479d",
        "parentId" : "b7abdd83-39ba-43e8-a1ca-238ea5c7d203",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Since it's still unclear if we can apply @stefanobaghino-da's suggestion without breaking backward compatibility, we merge this as is. Because of backward compatibility concerns, we can also not address\r\n> In any case, I would prefer if you could at least put this so that it's an invariant at construction, rather than a comment here where it's called.",
        "createdAt" : "2020-06-26T12:39:07Z",
        "updatedAt" : "2020-06-26T12:39:07Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "36d55559080ed0b0c660df3cf7b13847ecca25f9",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +54,58 @@          // NOTE(MH): Local divulgences are a thing of the past and are not\n          // produced by the current implementation anymore.\n          localDivulgence = Map.empty,\n          globalDivulgence = enrichedTx.globalImplicitDisclosure,\n        ))"
  },
  {
    "id" : "c2f4347a-c32c-45a3-9c3b-bbd94fec1350",
    "prId" : 4140,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "426b30ba-6ce5-4f66-be6c-8b13fb37f980",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Out of curiosity: why do you prefer `filter` over `filterKeys`?",
        "createdAt" : "2020-01-22T10:20:11Z",
        "updatedAt" : "2020-01-22T15:09:29Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "7884ec81-414a-4bff-8083-01522e67fb9e",
        "parentId" : "426b30ba-6ce5-4f66-be6c-8b13fb37f980",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "in this case, `filterKeys` returns a `Map` while `filter` returns a `HashMap`",
        "createdAt" : "2020-01-22T10:30:34Z",
        "updatedAt" : "2020-01-22T15:09:29Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce47083e96a3dbf6bb0c0bf69c86173751f13080",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +118,122 @@    // if an exercise node is divulged to A but some of its descendants\n    // aren't the resulting transaction will not be well formed.\n    val filteredNodes = tx.nodes.filter { case (k, _) => partyDivulgences.contains(k) }\n\n    @tailrec"
  },
  {
    "id" : "f5b633db-9d03-49dc-a6bf-141641af8b44",
    "prId" : 1967,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1967",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4213a9d-f191-4634-81c4-231a40bc25a9",
        "parentId" : null,
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "This change looks like noise. The inserted `,` is not really needed, is it?",
        "createdAt" : "2019-07-04T07:05:37Z",
        "updatedAt" : "2019-07-05T08:39:36Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ab26f081f43a184ed21982c7e26995630d1f49e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +81,85 @@  def checkAuthorizationAndBlind(\n      tx: Transaction.Transaction,\n      initialAuthorizers: Set[Party],\n  ): Either[AuthorizationError, BlindingInfo] =\n    maybeAuthorizeAndBlind(tx, Authorize(initialAuthorizers))"
  }
]