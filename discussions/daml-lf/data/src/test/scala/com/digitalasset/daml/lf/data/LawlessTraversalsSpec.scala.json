[
  {
    "id" : "d28dce89-f686-4804-b547-ec42c7b335c4",
    "prId" : 2053,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2053",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29938a52-ff40-4ddf-b8b1-42b142515939",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Noob Scala question, how does this work? The pattern does not seem exhaustive, and what does `case x =>` (without any value on the right hand side of `=>`) produce?",
        "createdAt" : "2019-07-16T13:31:06Z",
        "updatedAt" : "2019-07-16T13:50:20Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "dbe37710-6377-46b9-b2a5-f8758fcc1313",
        "parentId" : "29938a52-ff40-4ddf-b8b1-42b142515939",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "> The pattern does not seem exhaustive\r\n\r\nPattern lists (`{ case pat => expr; ...}`) get two different treatments in the two kinds of lambda context. If the expected type is `T => R`, they get Î·-expanded like `x => x match {...}`, and normal exhaustiveness checking applies.\r\n\r\nHowever, if the expected type is `T PartialFunction R`, exhaustiveness checking _does not_ apply, and the result gets a generated `isDefinedAt` (and compatible `applyOrElse` semantics) that returns true iff some `case` matching the argument is present. So the idiomatic way to write `catMaybes[A]: List[Option[A]] => List[A]` is `_ collect { case Some(x) => x }`.\r\n\r\n`inside` takes a `PartialFunction`; as with `collect`, the inexhaustiveness is deliberate.\r\n\r\n> what does `case x =>` (without any value on the right hand side of `=>`) produce?\r\n\r\n`()`. This is usual for scalatest when you have nothing further to assert, see [`matchPattern` example](http://doc.scalatest.org/3.0.0/org/scalatest/Matchers.html#matchingAPattern).",
        "createdAt" : "2019-07-16T15:05:59Z",
        "updatedAt" : "2019-07-16T15:05:59Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "1699d1a72a141e994b450b4078470a298e34bab3",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +27,31 @@      inside(classySeqs map (_ traverseEitherStrictly (Right(_)))) {\n        case Seq(_, Right(List(_)), _) => fail(\"lists are not vectors\")\n        case Seq(Right(List(1)), Right(Vector(2)), Right(ImmArraySeq(3))) =>\n      }\n    }"
  }
]