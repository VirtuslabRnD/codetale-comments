[
  {
    "id" : "af36aaf9-fc62-4cf5-b8e0-4d118e474de5",
    "prId" : 7220,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76d1fc38-fc47-46b7-aa62-5cbc2446636d",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "reminder to myself and others we used to do the linear lookup before as well.",
        "createdAt" : "2020-08-25T16:04:07Z",
        "updatedAt" : "2020-08-25T17:10:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd81ff2e34267fdcb710110ff30af3aa4fa0256f",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +10,14 @@\n  def lookup(name: Ref.Name): Option[X] =\n    sortedFields.find(_._1 == name).map(_._2)\n\n  def mapValue[Y](f: X => Y) = new Struct(sortedFields.map { case (k, v) => k -> f(v) })"
  },
  {
    "id" : "01bc54ef-9a04-43f2-ae15-b52371e33e41",
    "prId" : 7220,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "908521f2-c81e-4f73-b8d2-12269f17970a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This currently doesn’t appear to enforce uniqueness of fields. Given that we rely on this and have a lookup method, should it?",
        "createdAt" : "2020-08-25T16:10:27Z",
        "updatedAt" : "2020-08-25T17:10:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "73dd7278-a28d-42f9-ac5e-a896a5749974",
        "parentId" : "908521f2-c81e-4f73-b8d2-12269f17970a",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I was also wondering if I should enforce uniqueness. \r\n\r\nI preferred to not do so, in order to have a nicer constructor: `Struct.apply(fields: (Name, X)*): Struct[X]  that does not throw exception nor return an `Either`. \r\n\r\nThe lookup is used only in the type checker that verifies itself that fields are not duplicated.  \r\n",
        "createdAt" : "2020-08-25T16:23:00Z",
        "updatedAt" : "2020-08-25T17:16:28Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "d396f5e0-fb55-43fe-8ae1-191c3dbfd7bd",
        "parentId" : "908521f2-c81e-4f73-b8d2-12269f17970a",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I’ll leave it up to you, I don’t feel particularly strongly here.",
        "createdAt" : "2020-08-25T17:20:56Z",
        "updatedAt" : "2020-08-25T17:20:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd81ff2e34267fdcb710110ff30af3aa4fa0256f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +7,11 @@import com.daml.lf.data.Ref.Name\n\nfinal case class Struct[+X] private (sortedFields: ImmArray[(Ref.Name, X)]) extends NoCopy {\n\n  def lookup(name: Ref.Name): Option[X] ="
  }
]