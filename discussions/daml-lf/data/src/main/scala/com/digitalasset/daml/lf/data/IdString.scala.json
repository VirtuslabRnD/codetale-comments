[
  {
    "id" : "88814d72-51b3-4f83-9c2f-4b2fc0d77c45",
    "prId" : 9666,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d777383a-d7b4-4744-ae1a-042e5d727939",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : ":bow: \r\n",
        "createdAt" : "2021-05-12T15:51:54Z",
        "updatedAt" : "2021-05-12T15:51:54Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e81c214382c0031c5c550a277c0c99674a54a61",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +82,86 @@\n  /** Reference to a package via a package identifier. The identifier is the ascii7\n    * lowercase hex-encoded hash of the package contents found in the Daml-LF Archive.\n    */\n  type PackageId <: String"
  },
  {
    "id" : "4c10b25e-a5a3-4fcc-b75b-9bb45340ab7b",
    "prId" : 8086,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8086",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c20fa84e-3d2a-4cd8-921c-2f9376afa883",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "How often do we call this? I assume only once during the runtime of the participant node. Is that correct?",
        "createdAt" : "2020-11-27T16:10:24Z",
        "updatedAt" : "2020-11-27T16:13:06Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "55330e83-b452-42d2-84bc-a531ed2c6852",
        "parentId" : "c20fa84e-3d2a-4cd8-921c-2f9376afa883",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "This will be called once for each instance of `ConcatenableStringModule` (we have 4 of them) and twice for the object `Name` . That is a total of 6 times for a participant node. ",
        "createdAt" : "2020-11-27T16:28:22Z",
        "updatedAt" : "2020-11-27T16:42:39Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "38d4c81950c5d71144e795d58d03a230b60f3360",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +205,209 @@\n  private val disallowedChar =\n    IdString.asciiCharsToRejectionArray(IdString.letters ++ IdString.digits ++ extraAllowedChars)\n\n  @throws[IllegalArgumentException]"
  },
  {
    "id" : "b67fc416-7c93-428e-aa82-9e5552a1b40c",
    "prId" : 8086,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8086",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f19439c-d962-4381-8459-4b3d37cb5548",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Do you think it's worth investigating an alternative implementation with two 64-bit integers and C-style bit fiddling instead of an array of 128 booleans?",
        "createdAt" : "2020-11-27T16:12:46Z",
        "updatedAt" : "2020-11-27T16:13:06Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "89562efc-b72a-4e8c-956e-7ed7f902c6ae",
        "parentId" : "6f19439c-d962-4381-8459-4b3d37cb5548",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I do not think it is worth investigating. It will be more complex, probably slightly slower and will save us less than a KB of memory.",
        "createdAt" : "2020-11-27T16:39:06Z",
        "updatedAt" : "2020-11-27T18:32:28Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "56df59d6-7de7-430e-804a-1da08b2d91af",
        "parentId" : "6f19439c-d962-4381-8459-4b3d37cb5548",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I wasn't looking for memory improvements but rather for speedups. But if you don't anticipate great gains but plenty of complexity, let's not look into that now. If we ever get told again that checking names shows up big in profiling data, we can still have another look.",
        "createdAt" : "2020-11-30T11:07:17Z",
        "updatedAt" : "2020-11-30T11:07:17Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "9560bf83-278a-4994-bc67-462097693fb3",
        "parentId" : "6f19439c-d962-4381-8459-4b3d37cb5548",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I don't see how you can make it faster with bit manipulation. I am a bit curious about what I you have in mind. \r\nDon't think it is worthwhile to senp time to satisfy my curiosity. ",
        "createdAt" : "2020-11-30T12:14:46Z",
        "updatedAt" : "2020-11-30T12:20:21Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "8d0f4582-0926-4740-8824-71fb42d15bab",
        "parentId" : "6f19439c-d962-4381-8459-4b3d37cb5548",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "What we need here is basically a set of ASCII characters. The implementation in this PR uses an array of 128 bytes for this. My idea would be to use two 64-bit integers instead. My hope is that both of them will reside in registers during execution and we don't need to consult the memory at all to find out if a character is valid. I also hope that the compiler would inline all the bit fiddling.\r\n\r\nUnfortunately, I'm struggling to express my idea in Scala, so let me throw some Rust at you for the sake of illustration:\r\n```rust\r\nstruct AsciiCharSet {\r\n    lower: u64,\r\n    upper: u64,\r\n}\r\n\r\nimpl AsciiCharSet {\r\n    fn new() -> Self {\r\n        Self { lower: 0, upper: 0 }\r\n    }\r\n    \r\n    fn insert(&mut self, c: char) {\r\n        let c = u32::from(c);\r\n        assert!(c < 0x80);\r\n        if c < 0x40 {\r\n            self.lower |= 1 << c;\r\n        } else {\r\n            self.upper |= 1 << (c - 0x40);\r\n        }\r\n    }\r\n    \r\n    fn contains(&self, c: char) -> bool {\r\n        let c = u32::from(c);\r\n        assert!(c < 0x80);\r\n        if c < 0x40 {\r\n            self.lower & (1 << c) != 0\r\n        } else {\r\n            self.upper & (1 << (c - 0x40)) != 0\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nDoes that make sense?",
        "createdAt" : "2020-11-30T15:08:31Z",
        "updatedAt" : "2020-11-30T15:08:32Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "44579f66-bf03-437e-92e9-b1a404ac4247",
        "parentId" : "6f19439c-d962-4381-8459-4b3d37cb5548",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Thank you for elaborating, I understand you better now. You expect avoiding access to the memory will overcome the complexity of bit manipulation. \r\n\r\nIndeed I do not think it is worthwhile to investigate more. I think it will be very difficult to measure any difference of speed (specially in the JVM). \r\n\r\nAs a matter of comparison a lot of UTF8 validators/converters use a lookup table at some point (see for instance standard [standard go library](https://github.com/golang/go/blob/master/src/unicode/utf8/utf8.go) or [standard rust library](https://doc.rust-lang.org/src/core/str/validations.rs.html) or [C++ protobuf library](https://github.com/protocolbuffers/protobuf/blob/c0b79c5a398f4eec51ef92784e9d940febdccc52/src/google/protobuf/stubs/structurally_valid.cc).\r\n\r\nInterestingly, neither [Java standard Java library](https://github.com/openjdk/jdk15/) nor [Java protobuf library](https://github.com/protocolbuffers/protobuf/blob/46a48e49aa8357bbeee8040819a35e59880e329a/java/core/src/main/java/com/google/protobuf/Utf8.java) use a lookup table. \r\n\r\n",
        "createdAt" : "2020-11-30T16:32:35Z",
        "updatedAt" : "2020-11-30T16:34:03Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "fc79146c-2cf9-4526-b1ad-f180576cb9d5",
        "parentId" : "6f19439c-d962-4381-8459-4b3d37cb5548",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I still think the bit fiddling is faster because it can all be done in registers. Accessing the array needs to first compute a memory address, which is very likely itself already as expensive as the bit fiddling, and then retrieve data from memory, which is surprisingly slow.\r\n\r\nBut I don't think it will have a measurable impact on the system as a whole in the current state of affairs. I don't know which percentage of time of a request we spend validating identifiers with the current implementation but I doubt it's significant. Hence, no improvement to this validation will have a significant overall impact anyway. I don't believe we need to do anything here right now, I was just curious. ðŸ˜ƒ",
        "createdAt" : "2020-11-30T20:24:17Z",
        "updatedAt" : "2020-11-30T20:24:18Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "38d4c81950c5d71144e795d58d03a230b60f3360",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +114,118 @@\n  private[data] def asciiCharsToRejectionArray(s: Iterable[Char]): Array[Boolean] = {\n    val array = Array.fill(0x80)(true)\n    s.foreach { c =>\n      val i = c.toInt"
  },
  {
    "id" : "b77026de-2909-400f-aa14-2b285df21a65",
    "prId" : 4221,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5681bbd-102f-4b20-b914-cfe8dcaa6967",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "```suggestion\r\n  /** Identifier for a contractIds, union of `ContractIdStringV0` and `ContractIdStringV1` */\r\n```",
        "createdAt" : "2020-01-31T15:14:46Z",
        "updatedAt" : "2020-02-03T21:56:31Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "9012577c-4561-460b-ac3f-39fb37260f4b",
        "parentId" : "c5681bbd-102f-4b20-b914-cfe8dcaa6967",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "fixed",
        "createdAt" : "2020-02-03T10:43:25Z",
        "updatedAt" : "2020-02-03T21:56:31Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9233a4097ca730ce5db7e0b07a328048ff91a0cc",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +231,235 @@    new MatchingStringModule(\"\"\"\\$0[0-9a-f]{64}[A-Za-z0-9:\\-_]{189}\"\"\")\n\n  /** Identifier for a contractIs, union of `ContractIdStringV0` and `ContractIdStringV1` */\n  override type ContractIdString = String\n  override val ContractIdString"
  },
  {
    "id" : "c82b77a2-74ab-41e8-a8f0-d3ea235e1c16",
    "prId" : 4221,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a06883a0-b02f-4c7a-a4e1-449044254658",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "```suggestion\r\n  /** Identifier for a contractIds, union of `ContractIdStringV0` and `ContractIdStringV1` */\r\n```",
        "createdAt" : "2020-02-03T17:07:12Z",
        "updatedAt" : "2020-02-03T21:56:31Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "9233a4097ca730ce5db7e0b07a328048ff91a0cc",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +231,235 @@    new MatchingStringModule(\"\"\"\\$0[0-9a-f]{64}[A-Za-z0-9:\\-_]{189}\"\"\")\n\n  /** Identifier for a contractIs, union of `ContractIdStringV0` and `ContractIdStringV1` */\n  override type ContractIdString = String\n  override val ContractIdString"
  }
]