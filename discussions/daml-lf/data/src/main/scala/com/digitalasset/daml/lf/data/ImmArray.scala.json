[
  {
    "id" : "448f0f98-cb06-48b1-9003-c2b9d9e8aaf3",
    "prId" : 8321,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8321",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "018bbb50-a9af-4ad7-94cd-18c8ad0e4874",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Iâ€™m not super happy about the `Array[Any]` part but that seemed like the most reasonable option to make this work. Open to other suggestions.",
        "createdAt" : "2020-12-16T20:25:57Z",
        "updatedAt" : "2020-12-18T11:45:34Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad670adefda053c6149387936dca6202e3157607",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +144,148 @@  /** O(n) */\n  def map[B](f: A => B): ImmArray[B] = {\n    val newArray: Array[Any] = new Array(length)\n    for (i <- indices) {\n      newArray(i) = f(uncheckedGet(i))"
  },
  {
    "id" : "f0cd27b7-79be-4293-8461-755b9b30135c",
    "prId" : 3947,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "273a9493-5a56-4041-ae15-e7dea9928c2b",
        "parentId" : null,
        "authorId" : "271bdebc-b39f-48aa-b2cd-f3f0324314d5",
        "body" : "lifting is not very efficient here, it creates too many useless objects in the process",
        "createdAt" : "2020-01-06T03:06:22Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : "271bdebc-b39f-48aa-b2cd-f3f0324314d5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +260,264 @@    var i = 0\n    while (i < len) {\n      val a = uncheckedGet(i)\n      if (f.isDefinedAt(a)) builder += f(a)\n      i += 1"
  },
  {
    "id" : "c5e54d0b-e307-4238-b1b6-745bf4cd2b8a",
    "prId" : 2076,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2076",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e90e0890-2b25-4b61-84d1-111fabdb2448",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "@S11001001 what about `flatMap`.. we should also override it, applying the same approach.",
        "createdAt" : "2019-07-09T20:03:24Z",
        "updatedAt" : "2019-07-10T14:59:35Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "43d38450-24af-419f-ab3b-85673e0b4cbe",
        "parentId" : "e90e0890-2b25-4b61-84d1-111fabdb2448",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Not really; it can't quite benefit from this in the same way. We don't know the size of the output for flatMap, and the default implementation is already quite well-optimized for building a result ImmArraySeq of unknown size.\r\n\r\nNow, if you're talking about things where we know the output size, like `++`? Absolutely. The trick is \"is there a more optimal implementation _using the specific properties of ImmArray_\", as the ones we already have are quite good for efficiently indexable underlying stores that can be built up element-by-element from left to right. For example, there wouldn't be any point to collectFirst, or collect, and even the `iterator` that's there, we probably shouldn't have bothered.",
        "createdAt" : "2019-07-09T20:08:40Z",
        "updatedAt" : "2019-07-10T14:59:35Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "94513a5f3bcfaa27547ef56c07446b0da900b3bc",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +417,421 @@        case _ => super.map(f)(bf)\n      }\n\n    override def companion: GenericCompanion[ImmArraySeq] = ImmArraySeq\n"
  }
]