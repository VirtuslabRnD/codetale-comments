[
  {
    "id" : "3964eef6-bd79-497c-b99f-8b20da2b46f0",
    "prId" : 6960,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6960",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f00749a-3c90-4874-8e9a-e2f8bec9069a",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Can you add a test case for this?",
        "createdAt" : "2020-08-03T11:01:23Z",
        "updatedAt" : "2020-08-03T11:03:57Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "e00cbae8-9310-4a83-bd7d-45568ea40bf9",
        "parentId" : "4f00749a-3c90-4874-8e9a-e2f8bec9069a",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I don't see how I could test this in the given test structure. `FQPrepend` is a private implementation detail that seems to be unreachable from the tests.",
        "createdAt" : "2020-08-03T11:08:43Z",
        "updatedAt" : "2020-08-03T11:08:43Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "f25d64c4-d3b7-4c94-a608-9518863b77ee",
        "parentId" : "4f00749a-3c90-4874-8e9a-e2f8bec9069a",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Fair. ðŸ™‚ ",
        "createdAt" : "2020-08-03T12:11:53Z",
        "updatedAt" : "2020-08-03T12:11:53Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "10029badc3b30695ea343133f8b90a2a5770ff51",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +154,158 @@      new FrontStack(FQPrepend(xs, FQEmpty), length = xs.length)\n    } else {\n      empty\n    }\n"
  },
  {
    "id" : "086e4d8b-80d2-4e67-b5f6-5d22375f7bbf",
    "prId" : 2053,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2053",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c2b1928-08ea-4ccb-96e9-a0382ae83bcb",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Curiosity: do you know what's going to happen to `CanBuildFrom` in the upcoming Scala versions? I believe it's on its way out starting from 2.13, right?",
        "createdAt" : "2019-07-12T09:01:22Z",
        "updatedAt" : "2019-07-15T17:48:24Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "16f2bf41-0273-4c5e-ada6-1e1f93ac8d0b",
        "parentId" : "8c2b1928-08ea-4ccb-96e9-a0382ae83bcb",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "It still has its use cases and accordingly replacements in 2.13, which we would define, in fact they are even high-_er_ kinded; the idea of doing away with the typeclass entirely was never in the cards, practically speaking.",
        "createdAt" : "2019-07-12T16:29:36Z",
        "updatedAt" : "2019-07-15T17:48:24Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "39d89aea-bf8e-4880-bb18-8ad45d114ec1",
        "parentId" : "8c2b1928-08ea-4ccb-96e9-a0382ae83bcb",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Since most of your other suggestions are CanBuildFrom related, I'll expand:\r\n\r\nCanBuildFrom was used so ubiquitously to try to avoid having higher-kinded types permeate the library. So it was only natural that when they tried to reduce (not completely eliminate, as I already stated) its usage in 2.13, they ended up with...[ubiquitous higher-kinded types](https://github.com/scala/scala/blob/v2.13.0/src/library/scala/collection/immutable/List.scala#L85-L88). So, many cases that used to use CBF as an implicit-based method to do HK type application without HKs, instead just throw up their hands and directly use HKs. An outcome I'm perfectly satisfied with.\r\n\r\nSo when it comes to those operations that will be HK'd in 2.13, like map, collect, ++, I'm thinking about phasing out breakOut in new code. Not really having a rule against it, because it's still just too useful, but more thinking about making the 2.13 transition easier on us. For example, if we want to fuse some operations, it might be good to try putting them on `iterator` or `view`, terminating with `to`, all of which exist in 2.12 and 2.13 (though the pattern of usage is a little different for `to`).\r\n\r\n2.13 collections have a collection (sorry) of new type...classes to play some different roles of `CanBuildFrom`, like [the `*Factory` types](https://github.com/scala/scala/blob/v2.13.0/src/library/scala/collection/Factory.scala), and, er, [BuildFrom](https://github.com/scala/scala/blob/v2.13.0/src/library/scala/collection/BuildFrom.scala). A rose by any other name is a completely different type, you know. Among these are straightforward replacements for everything we currently define, so I'm not worried about the 2.13 transition for daml.",
        "createdAt" : "2019-07-12T16:51:17Z",
        "updatedAt" : "2019-07-15T17:48:24Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "75af2f7d-a6e1-4237-a535-24661aa0b27c",
        "parentId" : "8c2b1928-08ea-4ccb-96e9-a0382ae83bcb",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Great, thanks!",
        "createdAt" : "2019-07-15T08:09:23Z",
        "updatedAt" : "2019-07-15T17:48:24Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1699d1a72a141e994b450b4078470a298e34bab3",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +145,149 @@  def unapply[T](xs: FrontStack[T]): Boolean = xs.isEmpty\n\n  private[data] final class FSCanBuildFrom[A]\n      extends CanBuildFrom[FrontStack[_], A, FrontStack[A]] {\n    override def apply(from: FrontStack[_]) = apply()"
  },
  {
    "id" : "44870b42-61be-467d-8b80-9441646bec65",
    "prId" : 1641,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd0cac94-fb28-418e-8788-e72cb80b186a",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "we need the same fix for BackStack ",
        "createdAt" : "2019-06-13T14:00:34Z",
        "updatedAt" : "2019-06-13T17:57:10Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "406e7d89-676f-4d8f-bbdf-bf43fe3f202c",
        "parentId" : "fd0cac94-fb28-418e-8788-e72cb80b186a",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "We need tests for that as well. ",
        "createdAt" : "2019-06-13T14:02:53Z",
        "updatedAt" : "2019-06-13T17:57:10Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "f6789def-f2b0-4714-b862-2a0fe0efcb54",
        "parentId" : "fd0cac94-fb28-418e-8788-e72cb80b186a",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Yes, there are no tests at all yet for FrontStack and BackStack, at least as far as I can tell.",
        "createdAt" : "2019-06-13T15:24:04Z",
        "updatedAt" : "2019-06-13T17:57:10Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "08b1dfc9-8bfe-4932-a098-86fc11816c2f",
        "parentId" : "fd0cac94-fb28-418e-8788-e72cb80b186a",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "@remyhaemmerle-da: if you want to add tests, please feel free to take over the PR.",
        "createdAt" : "2019-06-13T15:25:40Z",
        "updatedAt" : "2019-06-13T17:57:10Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "cffe9b54d6989c9b9f1f9dbef08effcb0f43169a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +111,115 @@\n  override def hashCode(): Int = toImmArray.hashCode()\n\n  /** O(n) */\n  override def toString: String = \"FrontStack(\" + iterator.map(_.toString).mkString(\",\") + \")\""
  }
]