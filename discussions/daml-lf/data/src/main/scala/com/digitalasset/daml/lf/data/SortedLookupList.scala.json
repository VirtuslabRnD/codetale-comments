[
  {
    "id" : "4df23a6f-e840-4b9d-a139-4d54b8959b70",
    "prId" : 7334,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e6b2c3a-aac5-456d-a6a0-de19317f353e",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "You may want to flip these around so that you're not constructing an `ImmArray` which is immediately thrown away.\r\n\r\n`ImmArray#iterator` is basically free.",
        "createdAt" : "2020-09-08T09:28:09Z",
        "updatedAt" : "2020-09-08T18:04:37Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "b768f606-dc2c-4a99-a496-3235a21d48ae",
        "parentId" : "7e6b2c3a-aac5-456d-a6a0-de19317f353e",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "If you take an attentive look, you can see that the `ImmArray`  built in `SortedLookupList.fromOrderedIterator` function actually ends up in the contructor of the `SortedLookupList` in the body of `SortedLookupList.fromOrderedImmArray` function.\r\n\r\nThe only construction of `ImmArray` that can be avoid is done my `.map(_._1)` method call in the body of  `SortedLookupList.fromOrderedImmArray`. I will take care of that in another PR.",
        "createdAt" : "2020-09-08T17:26:51Z",
        "updatedAt" : "2020-09-08T18:04:37Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9287729a15d23b6de2b6a2cfb39e2d599b87085",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +71,75 @@\n  def fromOrderedIterator[X](entries: Iterator[(String, X)]): Either[String, SortedLookupList[X]] =\n    fromOrderedImmArray(entries.to[ImmArray])\n\n  def apply[X](entries: Map[String, X]): SortedLookupList[X] ="
  }
]