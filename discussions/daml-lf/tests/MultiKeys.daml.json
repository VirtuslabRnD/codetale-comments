[
  {
    "id" : "7a6557b6-b29c-48df-8b0a-130e0829ea69",
    "prId" : 9546,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23536674-72a5-48ad-83b8-1db6d16dae88",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "@andreaslochbihler-da no need to review the rest of this PR (of course you’re still welcome to), just an fyi that this changes archive semantics as you suggested which does imply a breaking change in multi-key semantics.",
        "createdAt" : "2021-05-04T17:33:12Z",
        "updatedAt" : "2021-05-06T11:50:46Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "bce7f56e-bdf2-4f4d-8774-192efa6ceab2",
        "parentId" : "23536674-72a5-48ad-83b8-1db6d16dae88",
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "Thanks for the heads-up.\r\n\r\n@oliverse-da FYI: It might be that we need to adjust the `ContractKeysutra` test case when this change lands in Canton, but I don't expect any changes there.",
        "createdAt" : "2021-05-05T07:40:40Z",
        "updatedAt" : "2021-05-06T11:50:46Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "678f0a8a-7d77-4057-b88c-618a98caf597",
        "parentId" : "23536674-72a5-48ad-83b8-1db6d16dae88",
        "authorId" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "body" : "Thanks for the heads up.",
        "createdAt" : "2021-05-05T07:42:22Z",
        "updatedAt" : "2021-05-06T11:50:46Z",
        "lastEditedBy" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "tags" : [
        ]
      }
    ],
    "commit" : "783e448d7fdc71561a865cd07f144bc877c0857d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +131,135 @@         assert (keyCid `elem` [cid1, cid2])\n         archive (fromSome (find (/= keyCid) [cid1, cid2]))\n         -- archive can only influence result for a contract fetched by key before.\n         Some keyCid' <- lookupByKey @Keyed p\n         keyCid' === keyCid"
  },
  {
    "id" : "8f2dbb2c-75da-4692-a85f-bb68e1d5241e",
    "prId" : 9472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fd737dd-e410-4aca-93cd-b5b4a3a69602",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This is the only test that currently fails. As described in the comments, my intuition is that consuming choices with a key basically have an implicit `fetchByKey` before (ignoring the visibility check that we don’t have for the exercise). That is a read so it isn’t rolled back so therefore the test should succeed.\r\n\r\nIf we treat consuming choices differently, we need something different from the current implementation.\r\n\r\nThat said, given the \"implicit by-key\" for consuming choices, I’m also not quite convinced that treating a non-consuming choice or a `fetch` differently is a good idea and I’m starting to warm up again to my earlier stance that those should also update & cause collisions.",
        "createdAt" : "2021-04-22T16:45:56Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "10640885-65e2-48f4-85ff-c6c629f6e759",
        "parentId" : "3fd737dd-e410-4aca-93cd-b5b4a3a69602",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "To make that example even more annoying, consider that we don’t know if the contract we see via the archive passes the visibility check for contract keys! This could mean that the `fetchByKey` has to fail here. instead of returning `cid2` which seems very confusing.",
        "createdAt" : "2021-04-22T17:34:01Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "8f0247b2-757c-4060-8682-2a612750be74",
        "parentId" : "3fd737dd-e410-4aca-93cd-b5b4a3a69602",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "One way out of this mess could be to limit the effect of consuming choices to those cases:\r\n1. Set `keys` to `None` if it was `Some(cid)` before and the choice was exercised on cid.\r\n2. Set `keys` to `None` if there was no entry in `keys`.\r\n\r\nOnly seems to be getting more convoluted though.",
        "createdAt" : "2021-04-22T17:45:09Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "311ac514-24f2-4867-a413-6109a498771e",
        "parentId" : "3fd737dd-e410-4aca-93cd-b5b4a3a69602",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "See comments above, if we modify 2 to still have a `SResultNeedKey` later we get something that seems sensible.",
        "createdAt" : "2021-04-26T08:45:54Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "71a04853-8a3e-4c7f-8109-b5e7a83e4a6a",
        "parentId" : "3fd737dd-e410-4aca-93cd-b5b4a3a69602",
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "What about the alternative where we do not update the key-map on consumption, but instead check for non-consumedness on read from the key-map?",
        "createdAt" : "2021-04-26T09:03:50Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      },
      {
        "id" : "63216071-e48e-422d-a365-09bcc93f2abb",
        "parentId" : "3fd737dd-e410-4aca-93cd-b5b4a3a69602",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "As discussed, this is what we’re going to do but not in this PR (and ignoring effects for multi-keys).",
        "createdAt" : "2021-04-27T19:25:40Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5ebf1cf76eea01e1e04890587ff3c6f2d20f3c4",
    "line" : 234,
    "diffHunk" : "@@ -1,1 +232,236 @@         catch\n           E -> pure ()\n         (cid', _) <- fetchByKey @Keyed p\n         cid1 === cid'"
  },
  {
    "id" : "42c6151a-276d-4200-ba4d-725658dd5942",
    "prId" : 9472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc22d407-4f1c-4337-951a-f80cacc09fae",
        "parentId" : null,
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "This assumption is generally not true on ledgers built from transactions in UCK mode. Do you plan to use a special ledger in tests for UCK that does contain two such contracts?",
        "createdAt" : "2021-04-26T07:46:39Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      },
      {
        "id" : "c799fdf6-30fb-49e4-9098-50efe03bd716",
        "parentId" : "dc22d407-4f1c-4337-951a-f80cacc09fae",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This is already done in this PR. I test at the engine level where I can absolutely throw different contracts with the same key in there.",
        "createdAt" : "2021-04-26T09:18:30Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5ebf1cf76eea01e1e04890587ff3c6f2d20f3c4",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +23,27 @@-- exists two global contracts with the same key `p` and one\n-- of those will always be returned by fetch/lookup-by-key at\n-- the beginning of the choice.\n-- All choices here are accepted in non-uck (unique contract key) mode.\n-- Behavior in uck-mode is documented in comments."
  },
  {
    "id" : "79237921-b969-4d19-99ca-aad7bf55baa8",
    "prId" : 9472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b9fe229-68cc-44fa-b80b-9577b4038f84",
        "parentId" : null,
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "assuming we have a UCK violation on the ledger.",
        "createdAt" : "2021-04-26T07:47:18Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      },
      {
        "id" : "4f5582f3-b7ba-4469-831f-b096dff5505d",
        "parentId" : "0b9fe229-68cc-44fa-b80b-9577b4038f84",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "again, engine-level tests. Only one of them is operated on by-key so my understanding was that the engine should not reject this.",
        "createdAt" : "2021-04-26T09:20:29Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "32234273-80ec-4158-8f17-8195cc596200",
        "parentId" : "0b9fe229-68cc-44fa-b80b-9577b4038f84",
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "OK, I misunderstood the meaning of 'uck' then. As @andreaslochbihler-da pointed out, there seems to be a 'ledger-level uck' and `transaction-level uck` mode. What do you think about referring to the latter one here to avoid the confusion?",
        "createdAt" : "2021-04-26T11:05:52Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      },
      {
        "id" : "5e8f3cd5-9cea-4b60-a539-d818918a364f",
        "parentId" : "0b9fe229-68cc-44fa-b80b-9577b4038f84",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Clarified the comment above..",
        "createdAt" : "2021-04-27T19:24:09Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5ebf1cf76eea01e1e04890587ff3c6f2d20f3c4",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +102,106 @@         pure ()\n\n    -- Should be accepted in uck\n    nonconsuming choice GlobalArchiveOverwritesUnknownGlobal : ()\n      with"
  },
  {
    "id" : "ca39bdfc-7451-47b4-af35-7ee656763d07",
    "prId" : 9472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "911fb102-3d05-44b7-9de7-80043a709d89",
        "parentId" : null,
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "Why do we expect that archiving the contract that has not been resolved should lead to a negative key lookup?",
        "createdAt" : "2021-04-26T07:50:50Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      },
      {
        "id" : "b0b82342-951c-4f38-b82c-2ad8f0769f17",
        "parentId" : "911fb102-3d05-44b7-9de7-80043a709d89",
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "That is probably input for the semantics changes.",
        "createdAt" : "2021-04-26T09:01:36Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5ebf1cf76eea01e1e04890587ff3c6f2d20f3c4",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +130,134 @@         (keyCid, _) <- fetchByKey @Keyed p\n         assert (keyCid `elem` [cid1, cid2])\n         archive (fromSome (find (/= keyCid) [cid1, cid2]))\n         None <- lookupByKey @Keyed p\n         pure ()"
  },
  {
    "id" : "4c5b1f65-f5bc-4fc1-ade7-ddfaeaf56d41",
    "prId" : 9472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be879fcc-5f3a-4a5c-92d2-47e648cb5e12",
        "parentId" : null,
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "What is \"uck-mode\" referring to here? Canton's uck mode will reject some of the choices as part of its contract key conflict detection. So is there a \"Daml engine uck mode\"?",
        "createdAt" : "2021-04-26T08:12:36Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "e9f4afdb-4aec-4144-8111-70147a97148c",
        "parentId" : "be879fcc-5f3a-4a5c-92d2-47e648cb5e12",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Once the Engine starts doing uniqueness checks, it also needs a uck and a non-uck mode. Otherwise, we’ll reject duplicate keys even in Canton’s non-uck mode. Currently this doesn’t exist but as discussed last week, the engine should at least do some form of uniqueness checks imho.",
        "createdAt" : "2021-04-26T08:35:20Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "14ad116b-65a8-4f91-ad82-8640c84efc90",
        "parentId" : "be879fcc-5f3a-4a5c-92d2-47e648cb5e12",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "clarified the comment.",
        "createdAt" : "2021-04-27T19:23:12Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5ebf1cf76eea01e1e04890587ff3c6f2d20f3c4",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@-- the beginning of the choice.\n-- All choices here are accepted in non-uck (unique contract key) mode.\n-- Behavior in uck-mode is documented in comments.\n-- Note that uck-mode here refers to the uck mode in the engine\n-- (not yet implemented, TODO(MK) remove this comment once it is) which only detects"
  },
  {
    "id" : "d0c1d05c-e4bd-4abc-94bf-e74b51d0b743",
    "prId" : 9472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fa89953-ef7b-486f-8b9f-88e8e07ab9d6",
        "parentId" : null,
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "I'm on the fence w.r.t. the one. `lookupByKey` returning `None` is pretty meaningless in non-uck mode. Thinking about projections, it is probably the right choice, though:\r\nThe create-archive-lookup steps could be witnessed by some party `q` other than `p` and `q` doesn't witness the `fetchByKey`. So to `q`, this looks the same as `LocalArchiveOverwritesUnknownGlobal`.",
        "createdAt" : "2021-04-26T08:19:27Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "e83488bc-7b11-4799-8d60-b1fe3f9383fe",
        "parentId" : "6fa89953-ef7b-486f-8b9f-88e8e07ab9d6",
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "I'd say we should carefully revisit this once we've agreed on the semantics of non-uck key lookups. To me `lookupByKey` does not really make sense in non-uck mode, as its not clear at all what guarantee reading a `None` provides.\r\n\r\nWe might want to just forbid `lookupByKey` in non-uck mode.",
        "createdAt" : "2021-04-26T11:20:09Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      },
      {
        "id" : "cfd12ab4-28b8-4b8b-b32b-42580e711acd",
        "parentId" : "6fa89953-ef7b-486f-8b9f-88e8e07ab9d6",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "As discussed, we’re postponing multikey semantics so resolving this comment for this PR.",
        "createdAt" : "2021-04-27T19:23:37Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5ebf1cf76eea01e1e04890587ff3c6f2d20f3c4",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +99,103 @@         local <- create (Keyed p)\n         archive local\n         None <- lookupByKey @Keyed p\n         pure ()\n"
  },
  {
    "id" : "8fc44ac8-2778-4b16-9e47-c445bd5538a7",
    "prId" : 9472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9c43686-26c6-4c98-9cf6-ab1324b75435",
        "parentId" : null,
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "I'd expect this to return `Some keyCid`, for the following reason:\r\n1. The `fetchByKey` brings the association `Key p -> Some keyCid` into knowledge.\r\n2. The `archive` acts on a different contract, so it should leave the key association unchanged.",
        "createdAt" : "2021-04-26T08:23:26Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "f88145b1-cc33-462b-8752-1ea5247c0369",
        "parentId" : "e9c43686-26c6-4c98-9cf6-ab1324b75435",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Agreed, see comment above",
        "createdAt" : "2021-04-26T08:41:23Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "0d4edb50-3657-415f-9921-02f473e03003",
        "parentId" : "e9c43686-26c6-4c98-9cf6-ab1324b75435",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "As discussed, we’re postponing multikey semantics so resolving this comment for this PR.",
        "createdAt" : "2021-04-27T19:24:39Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5ebf1cf76eea01e1e04890587ff3c6f2d20f3c4",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +131,135 @@         assert (keyCid `elem` [cid1, cid2])\n         archive (fromSome (find (/= keyCid) [cid1, cid2]))\n         None <- lookupByKey @Keyed p\n         pure ()\n"
  },
  {
    "id" : "c82fc940-c74a-42cc-af75-7636e5805b20",
    "prId" : 9472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "452bb826-87ef-4fc9-84c4-e69bcf9375bb",
        "parentId" : null,
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "I wonder why whether `None` is required here. I'd argue the following:\r\n1. Daml engine should ask the ledger `ResultNeedKey` at this point whether there is a contract for key `@Keyed p`.\r\n2. If the ledger responds with `cid1`, then the answer should be `None` because `cid1` has been archived before in the transaction.\r\n3. If the ledger responds with `cid2`, then the answer should be `Some cid2` because `cid2` has not been archived yet.",
        "createdAt" : "2021-04-26T08:27:54Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "8802fb41-e3d5-48ef-9813-da8e171d60f0",
        "parentId" : "452bb826-87ef-4fc9-84c4-e69bcf9375bb",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Yeah that’s the same question I have below with the `archive` in the rollback. The current behavior for `archive` is pretty broken imho.\r\n\r\nI think what you’re proposing boils down to “archive can only set `keys` to `None` if that cid would have been returned by a `fetchByKey` directly before”. This answers both the local archive (current behavior is correct) as well as this one (current behavior is incorrect).",
        "createdAt" : "2021-04-26T08:39:54Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "34783a85-6bde-473f-afa0-9010d92784f9",
        "parentId" : "452bb826-87ef-4fc9-84c4-e69bcf9375bb",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Does that match your mental model? Then I can add TODOs for the tests that are broken according to this atm and we can change the semantics in a separate PR.",
        "createdAt" : "2021-04-26T08:41:12Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "bb91811b-b90f-4e55-86cd-8b401be54787",
        "parentId" : "452bb826-87ef-4fc9-84c4-e69bcf9375bb",
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "Yes, that's my mental model that I settled upon.",
        "createdAt" : "2021-04-26T08:53:24Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "69d7b63a-e075-40b4-be95-e58a8189ab50",
        "parentId" : "452bb826-87ef-4fc9-84c4-e69bcf9375bb",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "As discussed, we’re postponing multikey semantics so resolving this comment for this PR.",
        "createdAt" : "2021-04-27T19:24:14Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5ebf1cf76eea01e1e04890587ff3c6f2d20f3c4",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +114,118 @@         key c2 === p\n         archive cid1\n         None <- lookupByKey @Keyed p\n         pure ()\n"
  },
  {
    "id" : "06afa09e-e4a0-4ae3-99b1-b13ecd81865e",
    "prId" : 9472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee1e5e3b-73ff-44d7-9244-5b2f77f1a290",
        "parentId" : null,
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "I agree that `None` is the only sensible choice here. `fetchByKey` brought the association `key -> Some keyCid` into scope, so it's `key -> None` after the archival.",
        "createdAt" : "2021-04-26T08:30:14Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "befa4e1d-ef76-4643-82d2-63f693e6f3e4",
        "parentId" : "ee1e5e3b-73ff-44d7-9244-5b2f77f1a290",
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "I'm not sure for non-uck mode. The other option would be to query the ledger again for another contract. See my comment above: https://github.com/digital-asset/daml/pull/9472/files#r620200392",
        "createdAt" : "2021-04-26T11:22:44Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      },
      {
        "id" : "57fbb77b-69e2-4383-844a-9240ba380298",
        "parentId" : "ee1e5e3b-73ff-44d7-9244-5b2f77f1a290",
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "If there's a chance that `lookupByKey` returns a different contract here, then we need to change the Canton implementation of contract keys, because Canton currently supports at most one input contract for a contract key.",
        "createdAt" : "2021-04-26T11:53:54Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "842c0f8e-9bd5-41d2-bb29-f212f9b40a67",
        "parentId" : "ee1e5e3b-73ff-44d7-9244-5b2f77f1a290",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "As discussed, we’re postponing multikey semantics so resolving this comment for this PR.",
        "createdAt" : "2021-04-27T19:24:49Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5ebf1cf76eea01e1e04890587ff3c6f2d20f3c4",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +148,152 @@         assert (keyCid `elem` [cid1, cid2])\n         archive keyCid\n         None <- lookupByKey @Keyed p\n         pure ()\n"
  },
  {
    "id" : "573c2acc-0772-4bce-929b-755aff99b7e3",
    "prId" : 9472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4313aec-c15e-496c-a71c-d44b89ebb46d",
        "parentId" : null,
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "I disagree here. Like for `GlobalArchiveOverwritesUnknownGlobal`, Daml engine has not yet seen a read of the key from the underlying ledger, so the outcome depends on the response to the `ResultNeedKey`:\r\n* If it's `Some cid`, then `None` is the `lookupByKey` result.\r\n* If it's `Some otherCid`, then `Some otherCid` is the result.",
        "createdAt" : "2021-04-26T08:36:30Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "ac700973-9941-408a-93a3-247d476d41fc",
        "parentId" : "d4313aec-c15e-496c-a71c-d44b89ebb46d",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "As discussed, we’re postponing multikey semantics so resolving this comment for this PR.",
        "createdAt" : "2021-04-27T19:25:11Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5ebf1cf76eea01e1e04890587ff3c6f2d20f3c4",
    "line" : 218,
    "diffHunk" : "@@ -1,1 +216,220 @@         key c === p\n         archive cid\n         None <- lookupByKey @Keyed p\n         pure ()\n"
  },
  {
    "id" : "458b6c59-3beb-4ccc-a86c-a14e46ed1da5",
    "prId" : 9472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8f2e117-9851-4a72-b02a-b696db42a8eb",
        "parentId" : null,
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "Can we transport the fetched cid out via the exception and test that it's contract actually has the key?",
        "createdAt" : "2021-04-26T08:43:15Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      },
      {
        "id" : "b12d36a7-4685-47bb-bbe6-499521161c07",
        "parentId" : "b8f2e117-9851-4a72-b02a-b696db42a8eb",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "70ec7a990b9d42501391f7d64ee7080783426ed4",
        "createdAt" : "2021-04-26T10:52:30Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c243c9a4-10d4-427c-8244-416c1bab5f90",
        "parentId" : "b8f2e117-9851-4a72-b02a-b696db42a8eb",
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "I'd also expect that\r\n```\r\n      do cid <- try do\r\n           cid <- fetchByKey @Keyed p\r\n           throw (E cid)\r\n           pure cid\r\n         catch (E cid) -> pure cid\r\n         cid' <- fetchByKey @Keyed p\r\n         assert $ cid == cid'\r\n```\r\n",
        "createdAt" : "2021-04-26T13:41:24Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      },
      {
        "id" : "f678a91d-16b8-456f-aed8-1df84470d44e",
        "parentId" : "b8f2e117-9851-4a72-b02a-b696db42a8eb",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "As discussed, we’re postponing multikey semantics so resolving this comment for this PR.",
        "createdAt" : "2021-04-27T19:25:04Z",
        "updatedAt" : "2021-04-27T19:40:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5ebf1cf76eea01e1e04890587ff3c6f2d20f3c4",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +170,174 @@           _ <- fetchByKey @Keyed p\n           throw E\n         catch E -> pure ()\n         cid <- create (Keyed p)\n         (cid', _) <- fetchByKey @Keyed p"
  }
]