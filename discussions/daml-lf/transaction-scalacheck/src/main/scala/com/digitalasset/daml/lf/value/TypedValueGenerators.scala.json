[
  {
    "id" : "68c9c2ca-340a-4981-8052-b571b0d28b82",
    "prId" : 2136,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2136",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd60cc49-8f2c-4f21-b238-991cb17d4b58",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "The name \"addend\" refers to how values of the type will be summed with other values to form a description of possible Values.",
        "createdAt" : "2019-07-16T18:02:07Z",
        "updatedAt" : "2019-07-16T19:07:50Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "5544cc39-c35e-4874-b799-ea27705c26ba",
        "parentId" : "cd60cc49-8f2c-4f21-b238-991cb17d4b58",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "`inj` and `prj` what do they stand for? Injection and what?",
        "createdAt" : "2019-07-16T19:54:32Z",
        "updatedAt" : "2019-07-16T20:05:27Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "3f8dc0d7-1e59-4036-aa44-be02b3627bea",
        "parentId" : "cd60cc49-8f2c-4f21-b238-991cb17d4b58",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Projection",
        "createdAt" : "2019-07-16T20:12:22Z",
        "updatedAt" : "2019-07-16T20:12:23Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "efb2080e2b5a2a0b5eb73e3493af263b896954ca",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@  */\nobject TypedValueGenerators {\n  sealed abstract class ValueAddend {\n    type Inj[Cid]\n    def t: Type"
  },
  {
    "id" : "485be029-fcd5-4e77-97cf-cc1ead9e2c22",
    "prId" : 2136,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2136",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2592d02f-83c5-43a8-918a-7d9d92e8b547",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "what about `PT.List` and `PT.Optional`",
        "createdAt" : "2019-07-16T20:03:22Z",
        "updatedAt" : "2019-07-16T20:05:27Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "2bcc8e95-e5cf-4514-aa16-d09d9aaefbf5",
        "parentId" : "2592d02f-83c5-43a8-918a-7d9d92e8b547",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "and also `PT.Map`",
        "createdAt" : "2019-07-16T20:03:51Z",
        "updatedAt" : "2019-07-16T20:05:27Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "c7c4b046-8d2c-4ef0-a0e2-6cfedcddd54d",
        "parentId" : "2592d02f-83c5-43a8-918a-7d9d92e8b547",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Not possible to do with `noCid`, scroll down for support for those three, and also contractId.",
        "createdAt" : "2019-07-16T20:10:30Z",
        "updatedAt" : "2019-07-16T20:10:30Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "efb2080e2b5a2a0b5eb73e3493af263b896954ca",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +66,70 @@    val bool = noCid(PT.Bool, ValueBool) { case ValueBool(b) => b }\n    val party = noCid(PT.Party, ValueParty) { case ValueParty(p) => p }\n\n    val contractId: Aux[Id] = new ValueAddend {\n      type Inj[Cid] = Cid"
  }
]