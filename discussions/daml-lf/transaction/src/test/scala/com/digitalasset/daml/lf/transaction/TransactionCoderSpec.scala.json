[
  {
    "id" : "1305704f-fcb5-43d2-9c23-6033ccac3469",
    "prId" : 9906,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9906",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a9892b5-a4b6-4cc9-94d5-237a1fd4a07c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "same here",
        "createdAt" : "2021-06-03T16:20:44Z",
        "updatedAt" : "2021-06-03T16:20:59Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "69e8f0e84bf51ce405733b47ec901acd20155df7",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +652,656 @@      } yield (ver, node)\n\n      forAll(gen) { case ((txVersion, nodeVersion), (nodeId, node)) =>\n        val normalizedNode = normalizeNode(updateVersion(node, nodeVersion))\n"
  },
  {
    "id" : "dbcdbcb5-944e-4367-8ece-9ac63e963e6c",
    "prId" : 9552,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1554b712-d813-4353-b021-ffc751c000ef",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "without the change in `ValueGenerator#transactionVersionGen` the two tests of this file do not have the expected coverage. ",
        "createdAt" : "2021-05-03T12:23:36Z",
        "updatedAt" : "2021-05-03T13:08:51Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "26be6219e17bf9ae3cce2f8128b9b3c531040d7d",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +354,358 @@      value.toBuilder.setVersion(version).build()\n\n    \"fail if try to encode a create node containing value with version different from node\" in {\n      forAll(\n        transactionVersionGen(maxVersion = Some(V11)),"
  },
  {
    "id" : "1e82f163-31c3-40a6-a2b6-0e2fba8cdc0b",
    "prId" : 9531,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9305b33a-60bb-429a-88f6-bf868f0f0a21",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What do we need this normalization for? The generator already takes the version into account so I don’t get when we will end up with one with a version that doesn’t support exceptions and this being `None` (outside of the tests where we disable the version check but those shouldn’t normalize afaict).",
        "createdAt" : "2021-04-29T08:03:58Z",
        "updatedAt" : "2021-04-29T08:04:13Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2facc036-3014-4b98-a53e-311dfb027496",
        "parentId" : "9305b33a-60bb-429a-88f6-bf868f0f0a21",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "This is necessary because various existing tests call `updateVersion` after generation. For example `\"do NodeExercises\"`\r\n",
        "createdAt" : "2021-04-29T09:31:55Z",
        "updatedAt" : "2021-04-29T09:31:55Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "463fcd3d878c61a05eebc0f0138d29ed742344e0",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +844,848 @@      exerciseResult = exe.exerciseResult match {\n        case None =>\n          if (exe.version >= minExceptions) {\n            None\n          } else {"
  },
  {
    "id" : "1a9a088f-1975-472b-bb81-bb121b027ea0",
    "prId" : 9531,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "718661df-a952-4c0d-9d66-5147747c0457",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "we do not want to override existing `exerciseResult`, i.e. \r\n```suggestion\r\n              exerciseResult = exe.exerciseResult.orEsle(Some(Value.ValueText(\"not-missing\"))),\r\n```",
        "createdAt" : "2021-05-03T12:18:33Z",
        "updatedAt" : "2021-05-03T12:25:03Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "463fcd3d878c61a05eebc0f0138d29ed742344e0",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +274,278 @@            exe.copy(\n              choiceObservers = node.choiceObservers,\n              exerciseResult = Some(Value.ValueText(\"not-missing\")),\n            )\n          case otherwise => otherwise"
  },
  {
    "id" : "c891fcf7-8119-44f1-a001-d0d4a456848c",
    "prId" : 9468,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07a2987e-86f3-437f-be9e-b8242559da4d",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Once we add the version checks we should also add some tests for the unhappy path. choice observers are probably another good example for that type of test.",
        "createdAt" : "2021-04-22T06:42:15Z",
        "updatedAt" : "2021-04-22T14:38:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5076ed50-7795-494f-800c-93261bfa629c",
        "parentId" : "07a2987e-86f3-437f-be9e-b8242559da4d",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "added a test for the unhappy encode path",
        "createdAt" : "2021-04-22T10:44:52Z",
        "updatedAt" : "2021-04-22T14:38:09Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0131daf6981a49c63b05b32a1722091ae39a1d6",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +136,140 @@    val fromRollbackVersions = TransactionVersion.All.filter(_ >= minExceptions)\n\n    \"do NodeRollback\" in {\n      forAll(danglingRefRollbackNodeGen, versionInIncreasingOrder(fromRollbackVersions)) {\n        case (node, (nodeVersion, txVersion)) =>"
  },
  {
    "id" : "d858e050-3da0-48bf-8799-b2a96a34469e",
    "prId" : 9468,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45266f54-d513-4721-af8e-6dddcef1ae2e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Please also add a test for decoding",
        "createdAt" : "2021-04-22T10:44:04Z",
        "updatedAt" : "2021-04-22T14:38:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d60dab58-806f-4b10-9f6b-fb0882a2a73c",
        "parentId" : "45266f54-d513-4721-af8e-6dddcef1ae2e",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "So what are we trying to test here? .. _that we cannot decode a rollback node as a transaction with version < `minExceptions`_\r\n\r\nBut I'm not sure how this can be tested:\r\n\r\n- We must create a proto with a rollback node\r\n- and this must be created with a tx-version `>= minExceptions`, or else the encode will fail.\r\n\r\n- Then we must attempt to decode that proto with a target version of `< minExceptions`.\r\n- But this will fail with the general check in `decodeNodeVersion`, that: _A transaction of version V-OLD cannot contain node of newer version (v-NEWER)_\r\n\r\n- So we never reach the code which fails if it find a rollback node in an old version.\r\n\r\n\r\nBy this logic, the version check for `ROLLBACK` in `decodeNode` is redundant.\r\n\r\nHowever, I remember in previous similar situations, Remy is keen we keep such checks even if that cannot be hit.\r\n",
        "createdAt" : "2021-04-22T11:30:40Z",
        "updatedAt" : "2021-04-22T14:38:09Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "204a1d06-32e4-4815-9c1e-2aa41b97af33",
        "parentId" : "45266f54-d513-4721-af8e-6dddcef1ae2e",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "If we assume that our code is correct, we don’t need any of those checks since we will never produce those nodes for the wrong version. The point of those checks is to be extra safeguards so encoding doesn’t make assumption about the producer that passes in the un-encoded version and decoding doesn’t make assumptions about the encoded version.\r\n\r\nFor your example, can we encode it, then tweak the version in the encoded protobuf and then decode it and see that it fails?",
        "createdAt" : "2021-04-22T11:38:08Z",
        "updatedAt" : "2021-04-22T14:38:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "15d78475-3987-48a4-bf64-e20fbf4e63e7",
        "parentId" : "45266f54-d513-4721-af8e-6dddcef1ae2e",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Makes sense.\r\nI coded this by disabling the check at encode time, thus allowing the bad proto to be created.",
        "createdAt" : "2021-04-22T14:41:47Z",
        "updatedAt" : "2021-04-22T14:41:47Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0131daf6981a49c63b05b32a1722091ae39a1d6",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +291,295 @@    }\n\n    \"fail if try encode rollback node in version < minExceptions\" in {\n      forAll(danglingRefRollbackNodeGen, versionInIncreasingOrder()) {\n        case (node, (nodeVersion, txVersion)) =>"
  },
  {
    "id" : "4c47040b-475b-4156-b5de-0cbc02b6d5ad",
    "prId" : 9468,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85de3bd8-1604-4d69-a9eb-36e524672630",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n              normalizedNode.updateVersion(v1 min TransactionVersion.minException),\r\n```",
        "createdAt" : "2021-05-03T10:04:41Z",
        "updatedAt" : "2021-05-03T10:11:12Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0131daf6981a49c63b05b32a1722091ae39a1d6",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +645,649 @@              NodeId(0),\n              normalizedNode,\n              disableVersionCheck = true, //so the bad proto can be created\n            )\n        val result ="
  },
  {
    "id" : "73bc4e4c-cbf1-477b-b725-3344d6602394",
    "prId" : 9468,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b7b359e-d6bc-4e71-8128-bf15184bddd4",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n              encodedNode.toBuilder.setVersion(v1.protoValue).build,\r\n```",
        "createdAt" : "2021-05-03T10:05:42Z",
        "updatedAt" : "2021-05-03T10:11:12Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0131daf6981a49c63b05b32a1722091ae39a1d6",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +653,657 @@              ValueCoder.CidDecoder,\n              v2,\n              encodedNode,\n            )\n        result.isLeft shouldBe (v1 < minExceptions)"
  },
  {
    "id" : "78cc95bd-ec2e-4aec-af41-4034529c0e1f",
    "prId" : 9468,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7c2aa2c-7c50-4dbf-9724-637d61fffd0f",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "We can avoid using `disableVersionCheck = true` as suggested bellow.",
        "createdAt" : "2021-05-03T10:07:57Z",
        "updatedAt" : "2021-05-03T10:11:12Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0131daf6981a49c63b05b32a1722091ae39a1d6",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +635,639 @@\n    \"fail if we try to decode a rollback node in a version < minExceptions\" in {\n      forAll(danglingRefRollbackNodeGen, versionInIncreasingOrder()) { case (node, (v1, v2)) =>\n        val normalizedNode = normalizeNode(node.updateVersion(v1))\n        val Right(encodedNode) ="
  },
  {
    "id" : "b4e14996-b0eb-4381-a876-763143966fe1",
    "prId" : 8512,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c94de13-d3a1-4510-9892-44a8c6ec800c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This sounds like we fail during encoding but that seems to work fine. What fails is decoding. Should we fail to encode such values already?",
        "createdAt" : "2021-01-15T08:09:56Z",
        "updatedAt" : "2021-01-15T08:39:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b4f9243d-5625-4ae3-a0ef-187ebdc714ec",
        "parentId" : "0c94de13-d3a1-4510-9892-44a8c6ec800c",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "In Scala land the Value in GenNode are not wrapped in VersionedValue any more, so we cannot generate such bad value.\r\n",
        "createdAt" : "2021-01-15T08:23:33Z",
        "updatedAt" : "2021-01-15T08:46:57Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "1d78050d-76db-4302-8a81-54b4a0e9332b",
        "parentId" : "0c94de13-d3a1-4510-9892-44a8c6ec800c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "ah I see, makes sense.",
        "createdAt" : "2021-01-15T08:24:38Z",
        "updatedAt" : "2021-01-15T08:39:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb40962d9656284c0d3a2211a4a864f064dc5936",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +347,351 @@      value.toBuilder.setVersion(version).build()\n\n    \"fail if try to encode a create node containing value with version different from node\" in {\n      forAll(malformedCreateNodeGen, transactionVersionGen(), minSuccessful(5)) { (node, version) =>\n        whenever(node.version != version) {"
  },
  {
    "id" : "882e7bf9-4dea-4272-a9a9-dcee29f89306",
    "prId" : 8512,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f863f5be-8d85-4e8b-ac26-9710abd881dd",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "same here, we also only fail during decoding",
        "createdAt" : "2021-01-15T08:10:15Z",
        "updatedAt" : "2021-01-15T08:39:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb40962d9656284c0d3a2211a4a864f064dc5936",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +389,393 @@    }\n\n    \"fail if try to encode a fetch node containing value with version different from node\" in {\n      forAll(fetchNodeGen, transactionVersionGen(), minSuccessful(5)) { (node, version) =>\n        whenever(node.version != version && node.key.isDefined) {"
  },
  {
    "id" : "205e7517-c8fc-48f5-9d85-51caed689465",
    "prId" : 8280,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8280",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "baf62293-7ff6-4a64-b660-237f35c9a5a4",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n    \"ignore observers field in version < 11\" in {\r\n```\r\n\"field observers\" sounds like a noun rather than \"the field named 'observers'\".",
        "createdAt" : "2020-12-14T17:27:35Z",
        "updatedAt" : "2020-12-18T15:01:12Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "caacd4dbb05b8ba6b44281736fdc109dc5f5841a",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +417,421 @@    }\n\n    \"ignore field observers in version < 11\" in {\n      val normalize = minimalistNode(V10)\n"
  }
]