[
  {
    "id" : "3032ce65-b7f7-4bfe-9b60-6bbf8b4d8b11",
    "prId" : 10214,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10214",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd1f6126-5900-4567-8eca-99ac7976f209",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "This also ought to be `forEvery`'d; nesting works fine. But no hurry anyway",
        "createdAt" : "2021-07-13T15:12:05Z",
        "updatedAt" : "2021-07-13T15:12:05Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4e13789284be3ab828fc205cb8f0e4ee5daab65",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +544,548 @@\n  \"Significant tweaks\" - {\n    significantTweaks.foreach { case (name, tweak) =>\n      val pairs = runTweak(tweak)\n      val n = pairs.length"
  },
  {
    "id" : "1787cd7e-800d-4ad4-9b79-3fe1098e8e3a",
    "prId" : 10167,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0b642f7-93e4-4174-9863-04dc7372e1de",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Just an alternative, not really better.\r\n\r\n```suggestion\r\n    case Some(x) => None :: List(samKWM1, samKWM2, samKWM3).collect{ case y if x != y => Some(y) }```",
        "createdAt" : "2021-07-06T08:12:42Z",
        "updatedAt" : "2021-07-06T09:07:37Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "79edb4995ccb6cbaeb2565091b4167d4e15c0407",
    "line" : 282,
    "diffHunk" : "@@ -1,1 +280,284 @@  private val tweakOptKeyMaintainersSome = Tweak[OKWM] {\n    case None => List() // don't tweak from None\n    case Some(x) => None :: List(samKWM1, samKWM2, samKWM3).filter(y => x != y).map(Some(_))\n  }\n"
  },
  {
    "id" : "e841958b-32a1-42d2-92a5-27df98c3e824",
    "prId" : 10167,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b721822c-f2ef-43f8-8dfc-22b143815d96",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I am perfectly fine with the current state of the Tweak object, but have you consider using `PartialFunction` ?  I find it fits particularly well your use case. \r\n\r\nSee the following suggestion together with the two suggestions I made line 259 and line 276 (and two others)\r\n\r\n```suggestion\r\nprivate object Tweak {\r\n  def single[X](f1: PartialFunction[X, X]): Tweak[X] = \r\n    Tweak(f1.andThen(List(_)))\r\n  def apply[X](f: PartialFunction[X, List[X]]): Tweak[X] = \r\n    new Tweak(f.applyOrElse(List.empty))\r\n}\r\n```",
        "createdAt" : "2021-07-06T08:27:29Z",
        "updatedAt" : "2021-07-06T09:07:37Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "040b582f-258e-454a-ab69-09bdca4dc65f",
        "parentId" : "b721822c-f2ef-43f8-8dfc-22b143815d96",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "partial function to list seems a bit odd. Afaict we have no difference between returning an empty list and the function not being defined.",
        "createdAt" : "2021-07-06T10:49:30Z",
        "updatedAt" : "2021-07-06T11:00:00Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "163e0034-0631-45e6-8673-7071a3118a15",
        "parentId" : "b721822c-f2ef-43f8-8dfc-22b143815d96",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "`new Tweak(f.orElse(_ => List.empty[X]))` may work better than ` new Tweak(f.applyOrElse(List.empty))`",
        "createdAt" : "2021-07-06T10:54:06Z",
        "updatedAt" : "2021-07-06T10:54:26Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "a01186e3-43bf-4079-bbf6-1597f5b7385c",
        "parentId" : "b721822c-f2ef-43f8-8dfc-22b143815d96",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Thank you for the suggestion about `PartialFunction`. I am aware of it, but to be honest it's not something that is in my everyday scala toolbox. Also, I would be a bit unhappy to loose exhaustiveness checking for pattern matches. However, perhaps it would be idiomatic for the use case here. I wont make the change in this PR. Let's discuss offline & you can try to persuade me. :)\r\n",
        "createdAt" : "2021-07-06T11:07:02Z",
        "updatedAt" : "2021-07-06T11:07:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "a583d32e-7b81-4a41-a716-791388008319",
        "parentId" : "b721822c-f2ef-43f8-8dfc-22b143815d96",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "I don't see any use for the `Tweak` class. A type synonym will serve equally well.\r\n\r\nWhen you write a function with partial function syntax, _and_ the _expected type_ is a _non_-partial function, you will still get exhaustiveness checking. Broadly speaking, this violates the Liskov Substitution Principle (because an expression that satisfies type `t` does not satisfy type `u >: t` if warnings are errors), but not in a way that violates soundness.\r\n\r\nSo that means you can write\r\n\r\n```scala\r\n\r\nprivate type Tweak[T] = T => List[T]\r\nprivate object Tweak {\r\n  def apply[T](f: Tweak[T]): Tweak[T] = f\r\n}\r\n\r\nTweak[Option[Location]] {\r\n  case None => //blah blah\r\n  // I get an exhaustiveness warning if I don't handle Some\r\n}\r\n```",
        "createdAt" : "2021-07-06T21:19:49Z",
        "updatedAt" : "2021-07-06T21:30:37Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "79edb4995ccb6cbaeb2565091b4167d4e15c0407",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +62,66 @@      new Tweak(f)\n    }\n  }\n\n  //--[types]--"
  },
  {
    "id" : "7bec98f5-a1fa-414c-bb34-77bc4d05ed0b",
    "prId" : 10167,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e01e0c7-12aa-47bc-a5a0-6f9fe98ed175",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "With the PartialFunction change made above:\r\n\r\n```suggestion\r\n  private val tweakCreateCoid = Tweak.single[Node] {\r\n    case nc: Node.NodeCreate[_] => nc.copy(coid = changeContractId(nc.coid))\r\n  }\r\n```",
        "createdAt" : "2021-07-06T08:28:25Z",
        "updatedAt" : "2021-07-06T09:07:37Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "b0666c0a-f721-41b1-b90c-514594cf0456",
        "parentId" : "1e01e0c7-12aa-47bc-a5a0-6f9fe98ed175",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "It is perfectly reasonable to have another method in `object Tweak` that takes a `PartialFunction` instead and adds the `Seq.empty` case with `orElse`, producing a total function. You are getting no exhaustiveness-checking value out of many of these tweak definitions, and defining them as @remyhaemmerle-da suggests would clean them up.",
        "createdAt" : "2021-07-06T21:25:16Z",
        "updatedAt" : "2021-07-06T21:30:37Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "79edb4995ccb6cbaeb2565091b4167d4e15c0407",
    "line" : 299,
    "diffHunk" : "@@ -1,1 +297,301 @@    case nc: Node.NodeCreate[_] => Some(nc.copy(coid = changeContractId(nc.coid)))\n    case _ => None\n  }\n  private val tweakCreateTemplateId = Tweak.single[Node] {\n    case nc: Node.NodeCreate[_] => Some(nc.copy(templateId = changeTemplateId(nc.templateId)))"
  },
  {
    "id" : "4adf9b17-afa5-4b45-a4ef-4968418fc09e",
    "prId" : 10167,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b45f124b-d4ef-494f-abfe-41cfd7b8394a",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "With the `PartialFunction` change above.\r\n\r\n```suggestion\r\n  private val tweakCreateOptLocation = Tweak[Node] { //insig\r\n    case nc: Node.NodeCreate[_] =>\r\n      tweakOptLocation.run(nc.optLocation).map { x => nc.copy(optLocation = x) }\r\n  }\r\n```",
        "createdAt" : "2021-07-06T08:29:11Z",
        "updatedAt" : "2021-07-06T09:07:37Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "79edb4995ccb6cbaeb2565091b4167d4e15c0407",
    "line" : 316,
    "diffHunk" : "@@ -1,1 +314,318 @@      tweakOptLocation.run(nc.optLocation).map { x => nc.copy(optLocation = x) }\n    case _ => Nil\n  }\n  private val tweakCreateSignatories = Tweak[Node] {\n    case nc: Node.NodeCreate[_] =>"
  },
  {
    "id" : "921c16c8-09a6-44fb-a964-7dbe922081dd",
    "prId" : 10167,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18e19932-7617-461d-a3f6-85886c65610f",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Again not a request for change.\r\n\r\nYou could consider using scala check `TableDrivenPropertyChecks` (See for example `SBuiltinTest`)\r\nThis as the following advantages:\r\n- it runs all the test cases (and not stop at the first failing one)\r\n- it reports slightly nicer errors \r\n@S11001001 are there other advantages ? ",
        "createdAt" : "2021-07-06T08:42:20Z",
        "updatedAt" : "2021-07-06T10:58:51Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "ab46d4e9-d9cc-4a93-bb0b-99429e34b6a6",
        "parentId" : "18e19932-7617-461d-a3f6-85886c65610f",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I'll have a look at this...",
        "createdAt" : "2021-07-06T11:07:35Z",
        "updatedAt" : "2021-07-06T11:07:35Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "2517a81d-a0f7-460f-aebe-55517b3ced62",
        "parentId" : "18e19932-7617-461d-a3f6-85886c65610f",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "`forEvery` is already doing a lot of the stuff for you so you don't have to do it yourself.  For example, a nested `forEvery` here would simply report the `txA` and `txB` in a nice way as part of the failure message, so you would not have to jam it into the `fail` string.\r\n\r\nAnd _that_ makes it so that you can simply use `shouldBe` or `inside` without using `fail` at all, and still getting all the stuff you might need to know to understand failures reported.",
        "createdAt" : "2021-07-06T21:30:15Z",
        "updatedAt" : "2021-07-06T21:30:37Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "79edb4995ccb6cbaeb2565091b4167d4e15c0407",
    "line" : 609,
    "diffHunk" : "@@ -1,1 +607,611 @@  \"Significant tweaks\" - {\n    var count = 0\n    significantTweaks.foreach { case (name, tweak) =>\n      val pairs = runTweak(tweak)\n      val n = pairs.length"
  },
  {
    "id" : "57220f4b-1f06-4b66-9351-ed108af0b03b",
    "prId" : 10167,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a194e0ce-2d1e-4824-bdcc-079f54212cf8",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "With the `PartialFunction` change for `Tweak.apply`\r\n\r\n```suggestion\r\n  private val tweakExerciseExerciseResultSome = Tweak[Node] { //sig\r\n    case ne: Node.NodeExercises[_, _] if ne.exerciseResult.isDefined =>\r\n          List(\r\n            ne.copy(exerciseResult = ne.exerciseResult.map(changeValue)),\r\n            ne.copy(exerciseResult = None),\r\n          )\r\n      }\r\n  }\r\n```",
        "createdAt" : "2021-07-06T09:03:12Z",
        "updatedAt" : "2021-07-06T09:07:37Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "79edb4995ccb6cbaeb2565091b4167d4e15c0407",
    "line" : 528,
    "diffHunk" : "@@ -1,1 +526,530 @@      }\n    case _ => Nil\n  }\n  private val tweakExerciseExerciseResultNone = Tweak.single[Node] { //insig\n    case ne: Node.NodeExercises[_, _] =>"
  },
  {
    "id" : "57642f89-3a3a-44c2-b6fc-fa792a2e2399",
    "prId" : 10167,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21d95893-6138-428b-8382-2078289ccc52",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "with the `PartialFunction` change in `Tweak.single`.\r\n\r\n```suggestion\r\n  private def tweakExerciseByKey(whenVersion: TransactionVersion => Boolean) = Tweak.single[Node] {\r\n    case ne: Node.NodeExercises[_, _] if whenVersion(ne.version) =>\r\n      ne.copy(byKey = changeBoolean(ne.byKey))\r\n  }\r\n```",
        "createdAt" : "2021-07-06T09:04:32Z",
        "updatedAt" : "2021-07-06T09:07:37Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "79edb4995ccb6cbaeb2565091b4167d4e15c0407",
    "line" : 547,
    "diffHunk" : "@@ -1,1 +545,549 @@      else None\n    case _ => None\n  }\n  private val tweakExerciseVersion = Tweak.single[Node] {\n    case ne: Node.NodeExercises[_, _] => Some(ne.copy(version = changeVersion(ne.version)))"
  },
  {
    "id" : "41755b20-a4fe-4543-b8f3-c4df556b3836",
    "prId" : 10167,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fec513d-f623-4538-8d9f-1ff144614b3c",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "This kind of code should broadly use `Seq` instead of `List`. It would probably be profitably idiomatic to replace every `List` with `Seq` here.\r\n\r\nThe only legitimate reasons to use `List` directly are\r\n\r\n1. you need to traverse or\r\n2. need a functor/monad instance, or\r\n3. you rely specifically on the structure of a list, i.e. cheap push/pop",
        "createdAt" : "2021-07-06T21:22:47Z",
        "updatedAt" : "2021-07-06T21:30:37Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "79edb4995ccb6cbaeb2565091b4167d4e15c0407",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +118,122 @@  private val samVersion2: TransactionVersion = TransactionVersion.maxVersion\n\n  private val someCreates: List[Node] =\n    for {\n      version <- List(samVersion1, samVersion2)"
  },
  {
    "id" : "d3a6638b-afbf-4c16-95f7-5ea56b95285c",
    "prId" : 10167,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f983132d-eef3-4532-9e65-8272de7bcc48",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "All `println`s should be removed.",
        "createdAt" : "2021-07-06T21:26:51Z",
        "updatedAt" : "2021-07-06T21:30:37Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "79edb4995ccb6cbaeb2565091b4167d4e15c0407",
    "line" : 625,
    "diffHunk" : "@@ -1,1 +623,627 @@      }\n    }\n    println(s\"**SIGNIFICANT tweaks checked: #$count\")\n  }\n"
  }
]