[
  {
    "id" : "e2399b74-123f-4255-9106-a3d7cfc9a5a6",
    "prId" : 9631,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9631",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71ce1c46-65eb-4f70-8196-99750c2b2b67",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : " #9632 introduces `byKey` flag. Should we use it here, meaning we consider the node only if  `nodeVersion < minByKey` or `byKey == true` ? ",
        "createdAt" : "2021-05-11T08:09:19Z",
        "updatedAt" : "2021-05-11T09:01:35Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "5c4fe5fd-a32a-465d-ae37-247eed3827c8",
        "parentId" : "71ce1c46-65eb-4f70-8196-99750c2b2b67",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "> #9632 introduces `byKey` flag. Should we use it here, meaning we consider the node only if `nodeVersion < minByKey` or `byKey == true` ?\r\n\r\nI thought about it but I think it ends up being more confusing than helpful. Then you have weird inconsistent semantics where for some stuff you look at a regular fetch and for others you don’t.",
        "createdAt" : "2021-05-11T08:13:44Z",
        "updatedAt" : "2021-05-11T09:01:35Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4dea4da0-5fd6-4923-91c6-6a47270d1759",
        "parentId" : "71ce1c46-65eb-4f70-8196-99750c2b2b67",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I am  a bit uncomfortable with the \"confusing semantics\" argument when dealing with backward compatibility:\r\n\"Of course it is confusing, we are dealing with backward compatibility\"\r\n\r\nThe question am I interested by is:  won't a ledger implementer that does not have to deal with version older than minByKey` tempted to implement that for byKey node only, hence defeating the purpose of this generic method ?  \r\n\r\nNot saying we should go this way, just trying to challenge you through process.  \r\nIf you persist please modify the comment with something like: \r\n```suggestion\r\n    * Because transaction serialization for LF <= 1.13 does not preserve byKey flags,\r\n    * this method will consider all operations with keys for conflicts\r\n    * rather than just by-key operations.\r\n```\r\n",
        "createdAt" : "2021-05-11T08:43:34Z",
        "updatedAt" : "2021-05-11T09:01:35Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "d784c1a8-0c77-4cc8-bcf3-d107a0eff058",
        "parentId" : "71ce1c46-65eb-4f70-8196-99750c2b2b67",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "> The question am I interested by is: won't a ledger implementer that does not have to deal with version older than minByKey` tempted to implement that for byKey node only, hence defeating the purpose of this generic method ?\r\n\r\nI don’t really see why they would. This method is perfectly fine even for newer versions and they should be able to use it safely. At worst, they get some extra checks or inputs that might not be required.\r\n\r\nI think what we might want to consider is to have a separate method that _only_ works for LF > 1.13 and does implement the `byKey` semantics. The nice thing about this is that at that point we will never get `Left` since the checks match up with Speedy.\r\n\r\nWhat I’d like to avoid is mixing the semantics. That gets pretty confusing and like an easy way to introduce bugs.\r\n\r\nAt worst, you might end up ",
        "createdAt" : "2021-05-11T08:52:54Z",
        "updatedAt" : "2021-05-11T09:01:35Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f897b91d-37af-4d4c-b89a-dd04421e0823",
        "parentId" : "71ce1c46-65eb-4f70-8196-99750c2b2b67",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : ">  This method is perfectly fine even for newer versions and they should be able to use it safely. \r\n\r\nIn this case I am fine.  \r\n",
        "createdAt" : "2021-05-11T08:55:35Z",
        "updatedAt" : "2021-05-11T09:01:35Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b2a08d4c58243d59105e68941ac69eef2df4f63",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +490,494 @@    * Because we do not preserve byKey flags across transaction serialization\n    * this method will consider all operations with keys for conflicts\n    * rather than just by-key operations.\n    */\n  @throws[IllegalArgumentException]("
  },
  {
    "id" : "71b846d3-fad8-4ffc-bee1-0f1f7c437a6a",
    "prId" : 9607,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f129b6d7-0f12-4f87-8426-2c432bedc476",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "`transaction, while leaving ...`",
        "createdAt" : "2021-05-17T10:07:47Z",
        "updatedAt" : "2021-05-17T10:09:02Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "c817ffbac25d2b3501bab9cfc31117847d957912",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +780,784 @@    * For ledger implementors this means that (for contract key uniqueness)\n    * it is sufficient to only look at the inputs and the outputs of the\n    * transaction whlie leaving all internal checks within the transaction\n    *  to the engine.\n    */"
  },
  {
    "id" : "d495a150-c523-40a5-83c0-67f2268ab6d3",
    "prId" : 9429,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdf5a354-51ad-4975-8a53-51f49b01faaf",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I'd find this a little prettier with some kind of `foldMap`. Is it worth implementing that?",
        "createdAt" : "2021-04-19T07:35:27Z",
        "updatedAt" : "2021-04-19T09:29:54Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "d215a7ac-b2e7-4177-84b5-df3b102df483",
        "parentId" : "bdf5a354-51ad-4975-8a53-51f49b01faaf",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Could be sensible but I’d prefer keeping it for a separate PR.",
        "createdAt" : "2021-04-19T07:40:21Z",
        "updatedAt" : "2021-04-19T09:29:54Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ace68268899e844262006a524355e4a0f13f4f2",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +392,396 @@      ev: HasTxNodes[Nid, Cid] <:< HasTxNodes[_, Value.ContractId]\n  ): Set[GlobalKey] = {\n    ev(this).fold(Set.empty[GlobalKey]) {\n      case (acc, (_, node: Node.NodeCreate[Value.ContractId])) =>\n        node.key.fold(acc)(key => acc + GlobalKey.assertBuild(node.templateId, key.key))"
  },
  {
    "id" : "0da94a00-d7c7-466a-a214-3bf43c932dfe",
    "prId" : 9429,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58a5ee16-1355-4b40-8369-1b713cebdcaa",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "What is an `ev`? Can you use meaningful parameter names, please?",
        "createdAt" : "2021-04-19T13:37:19Z",
        "updatedAt" : "2021-04-19T13:40:14Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "4ac1d81d-484b-46b1-b852-e65b2463b413",
        "parentId" : "58a5ee16-1355-4b40-8369-1b713cebdcaa",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "`ev` is pretty conventional in Scala-ese for \"evidence\".\r\n\r\nI prefer the latter, but I think it's quite common (kind of like \"i\" for an iterator or \"e\" for an exception).",
        "createdAt" : "2021-04-19T13:44:13Z",
        "updatedAt" : "2021-04-19T13:44:13Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "65575d54-3c08-4da6-ae7b-eb1ae21ff69a",
        "parentId" : "58a5ee16-1355-4b40-8369-1b713cebdcaa",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "https://github.com/digital-asset/daml/pull/9442",
        "createdAt" : "2021-04-19T13:51:27Z",
        "updatedAt" : "2021-04-19T13:51:27Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "33d663d4-fed2-4a82-bd90-e4c5bd35cb5f",
        "parentId" : "58a5ee16-1355-4b40-8369-1b713cebdcaa",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Thanks for the explanation, @SamirTalwar-DA.",
        "createdAt" : "2021-04-19T14:08:13Z",
        "updatedAt" : "2021-04-19T14:08:13Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "e6ded551-6a1f-40b3-a2a1-160e279f7aca",
        "parentId" : "58a5ee16-1355-4b40-8369-1b713cebdcaa",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "The method [Iterable#toMap](https://github.com/scala/scala/blob/8684ae833dcfeac6107343fcca5501301e509eef/src/library/scala/collection/GenTraversableOnce.scala#L648) is the standard example of method using such implicit (and syntax)  \r\n\r\n",
        "createdAt" : "2021-05-03T08:40:44Z",
        "updatedAt" : "2021-05-03T08:40:44Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ace68268899e844262006a524355e4a0f13f4f2",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +390,394 @@    */\n  final def contractKeys(implicit\n      ev: HasTxNodes[Nid, Cid] <:< HasTxNodes[_, Value.ContractId]\n  ): Set[GlobalKey] = {\n    ev(this).fold(Set.empty[GlobalKey]) {"
  },
  {
    "id" : "139965a3-8483-4800-9558-127ca699138b",
    "prId" : 9416,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9416",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6e2691c-b38e-4021-92b4-9ddef8ef0d4a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I thought the plan was to keep assuming that because the only case where this is not the case is projections and we handle those separately?",
        "createdAt" : "2021-04-14T16:21:25Z",
        "updatedAt" : "2021-04-14T17:06:00Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e083e835-fd86-4d6b-84c0-f8465570bc76",
        "parentId" : "f6e2691c-b38e-4021-92b4-9ddef8ef0d4a",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Yes. I just want to keep track of this and eventually reconsider it before releasing #8020. ",
        "createdAt" : "2021-04-14T16:50:14Z",
        "updatedAt" : "2021-04-14T17:06:00Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc50efb3b7ec6b716cdacb58e8dcee125fe5291a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +281,285 @@\n  // TODO: https://github.com/digital-asset/daml/issues/8020\n  //  for now we assume that rollback node cannot be a root of a transaction.\n  @throws[IllegalArgumentException]\n  def rootNodes: ImmArray[Node.GenActionNode[Nid, Cid]] ="
  },
  {
    "id" : "70a7a7f5-0e01-48c3-b6f7-2a05ea494455",
    "prId" : 9341,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8c9af53-6039-4f8b-a32c-855371295f69",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "@andreaslochbihler-da @oliverse-da are you fine with changing the signature of this method or do you prefer we create a separate method ? ",
        "createdAt" : "2021-04-07T09:14:22Z",
        "updatedAt" : "2021-04-07T09:53:45Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "f08242b3-ad25-4f01-b049-1112064bc224",
        "parentId" : "a8c9af53-6039-4f8b-a32c-855371295f69",
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "Should be fine and I'm always in favour of keeping interfaces small. If needed, we can implement the old signature using the new one.",
        "createdAt" : "2021-04-07T09:22:49Z",
        "updatedAt" : "2021-04-07T09:53:45Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e0ffa42ece6e0d594dad5bbfa67c5050b33e13e",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +375,379 @@      leaf: (Nid, Node.LeafOnlyNode[Cid]) => Unit,\n      exerciseEnd: (Nid, Node.NodeExercises[Nid, Cid]) => Unit,\n      rollbackEnd: (Nid, Node.NodeRollback[Nid]) => Unit,\n  ): Unit = {\n    @tailrec"
  },
  {
    "id" : "7a4be1df-f7ba-437b-b3d2-0c913c4832e2",
    "prId" : 9212,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "163880a1-20ae-456b-ab58-43daa56beaf8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why shouldn’t it be able to be a rollback?",
        "createdAt" : "2021-03-24T08:00:05Z",
        "updatedAt" : "2021-03-25T08:33:57Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6ba36bc8-0249-4df1-9a71-f9bf7136ca3f",
        "parentId" : "163880a1-20ae-456b-ab58-43daa56beaf8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Sorry, my comment was misleading.... It was a question about scala semantics.\r\nSpecifically, is there any semantic difference if we use an underscore instead of `Nid` here?\r\nThe sibling matches here use `Nid`, but other places in the code use `_`. Does it matter?",
        "createdAt" : "2021-03-24T10:22:24Z",
        "updatedAt" : "2021-03-25T08:33:57Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ba678c3cf618bd612463d16bab59b75af863058",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +182,186 @@          val node2 = other.nodes(nid2)\n          node1 match {\n            case nr1: Node.NodeRollback[Nid] => //TODO: can this be NodeRollback[_] ?\n              node2 match {\n                case nr2: Node.NodeRollback[Nid2] => //TODO: and here"
  },
  {
    "id" : "771c785c-1c28-480d-94fa-756a8bfca933",
    "prId" : 7835,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8d7c106-7c22-46ee-a08a-6e778a2c8fab",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "What made you change this?",
        "createdAt" : "2020-11-05T16:46:56Z",
        "updatedAt" : "2020-11-06T12:02:57Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "32d45ca1-2884-4e25-99fb-8d23bf490b53",
        "parentId" : "d8d7c106-7c22-46ee-a08a-6e778a2c8fab",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "that allows me to write: \r\n\r\n```scala\r\n override def nodes: Map[Nid, Node.GenNode.WithTxValue[Nid, Cid]] =\r\n    versionedNodes.mapValues(_.node)\r\n\r\n  def transaction: GenTransaction[Nid, Cid, Transaction.Value[Cid]] =\r\n    GenTransaction(nodes, roots)\r\n```\r\n\r\nBecause, the method `mapValues` \"wraps the original map without copying any elements\" it does not return a `HashMap`. \r\nIt is in general a bit dangerous because the values of the resulting map, are recomputed each time the map is looked up. In this case I think it is fine because the function `_.node` is very cheap. \r\nI will add a comment to the method `nodes`.\r\n\r\nWith the change the methods `transaction` are constant time. I could not achieve this if I did not change the type of `GenTransaction`'s  `nodes` field.",
        "createdAt" : "2020-11-05T17:21:37Z",
        "updatedAt" : "2020-11-06T12:02:57Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "50112d66-fe82-470b-91d3-c6a8981f6e02",
        "parentId" : "d8d7c106-7c22-46ee-a08a-6e778a2c8fab",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I understand. That makes sense to me. Thanks for the explanation.",
        "createdAt" : "2020-11-05T21:48:53Z",
        "updatedAt" : "2020-11-06T12:02:57Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "6de4bce9f809110175bee7753313dbe6aee8bbdb",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +90,94 @@  */\nfinal case class GenTransaction[Nid, +Cid, +Val](\n    nodes: Map[Nid, Node.GenNode[Nid, Cid, Val]],\n    roots: ImmArray[Nid],\n) extends HasTxNodes[Nid, Cid, Val]"
  },
  {
    "id" : "f0c784b0-1a83-4725-ad69-6ad085028217",
    "prId" : 7826,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e834ca8-7cd9-46ab-bd56-8195f7172a47",
        "parentId" : null,
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "You probably also want to have a case here if the streams have different lengths. Otherwise we get an exception instead of a `ReplayMismatch`.",
        "createdAt" : "2020-10-28T11:56:34Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "6fbd81cf-29c2-4b22-9a10-5f77c5778f1d",
        "parentId" : "5e834ca8-7cd9-46ab-bd56-8195f7172a47",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "good catch. I would have expected incomplete pattern matching warning. ",
        "createdAt" : "2020-10-28T12:16:09Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e75da66b69a5711804c967f6a973d4b35cfe2156",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +762,766 @@\n      }\n\n    loop(recorded.roots.iterator.toStream, replayed.roots.iterator.toStream)\n"
  },
  {
    "id" : "1d8a680b-09a3-4e19-a35a-9db404bc83a5",
    "prId" : 7826,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49859609-fbc5-4f84-8612-ab2dc76faf37",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Is `#::` for streams what `::` is for lists?",
        "createdAt" : "2020-11-03T09:31:50Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "50d1d696-9e52-43a2-aa34-aa342fd7800c",
        "parentId" : "49859609-fbc5-4f84-8612-ab2dc76faf37",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Yes.",
        "createdAt" : "2020-11-03T09:43:45Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e75da66b69a5711804c967f6a973d4b35cfe2156",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +630,634 @@    ): Either[ReplayMismatch[Nid, Cid, Val], Unit] =\n      (nids1, nids2) match {\n        case (nid1 #:: rest1, nid2 #:: rest2) =>\n          (recorded.nodes(nid1), replayed.nodes(nid2)) match {\n            case ("
  },
  {
    "id" : "9ce4e781-4142-4c52-86dc-0d3764d095bb",
    "prId" : 7826,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a088c94-e588-4360-a9fb-2c2d647ca879",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This condition looks asymmetric. Is that intended? Same question below for `key`.",
        "createdAt" : "2020-11-03T09:33:53Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "000e0c06-38ac-4ad0-9597-74d969a4bcbe",
        "parentId" : "0a088c94-e588-4360-a9fb-2c2d647ca879",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Yes, this is for backward compatibility. \r\nThe first transaction is the `recorded` one, (i.e the transaction generated by another node), while the second transaction is the `replayed` one.\r\nIn transaction version < 5, `actingParties1` is `None`, while in recent engines it is always `Some` of something. \r\n",
        "createdAt" : "2020-11-03T09:51:43Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "5aaaf096-02ca-4c33-a005-2076269043ed",
        "parentId" : "0a088c94-e588-4360-a9fb-2c2d647ca879",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "That makes sense. Thanks for the explanation. Could you please a comment somewhere towards to top of this function explaining that it is not as symmetric as it (mostly) looks like for these reasons?",
        "createdAt" : "2020-11-03T10:11:41Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "32aeda7c-e27a-426b-8b49-ac7de6c7a6a5",
        "parentId" : "0a088c94-e588-4360-a9fb-2c2d647ca879",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "sure. ",
        "createdAt" : "2020-11-03T10:18:54Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e75da66b69a5711804c967f6a973d4b35cfe2156",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +678,682 @@                if coid1 === coid2 &&\n                  templateId1 == templateId2 &&\n                  (actingParties1.isEmpty || actingParties1 == actingParties2) &&\n                  signatories1 == signatories2 &&\n                  stakeholders1 == stakeholders2 &&"
  },
  {
    "id" : "f1029698-5e1c-45ca-ac5e-371e52e7e65a",
    "prId" : 7826,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2053a7fd-97bd-439d-bc6a-ac0b1096e1ed",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Why do we use `==` here but `===` in the line above? It's probably a Scala thing but I haven't really come across it yet.",
        "createdAt" : "2020-11-03T09:34:40Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "797d2769-2f9c-4e96-9c03-cd27f348e5b6",
        "parentId" : "2053a7fd-97bd-439d-bc6a-ac0b1096e1ed",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "`==` is the standard scala equality, while `===` is the scalaz equality. \r\nHere we use `===` for values and contract IDs because it allows us to inject a specific comparison for those two (See the parameters `(implicit ECid: Equal[Cid2], EVal: Equal[Val2])`).\r\n\r\nThis will be very handy for the change of serialization we are doing with Simon, we would be able to make the transaction comparison ignore type constructors and record field labels. \r\n",
        "createdAt" : "2020-11-03T09:58:51Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "532fbb8a-2a6f-49c2-b582-9a0fc053451d",
        "parentId" : "2053a7fd-97bd-439d-bc6a-ac0b1096e1ed",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I see. Would it make sense to always use `===` then?",
        "createdAt" : "2020-11-03T10:12:35Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "a8b08a22-2768-48d7-a2a9-500aa11b1046",
        "parentId" : "2053a7fd-97bd-439d-bc6a-ac0b1096e1ed",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "We will have to defined a scalaz equality for `TemplateId`, `Party`, `ChoiceName` ..., not sure we want to do that. ",
        "createdAt" : "2020-11-03T10:18:20Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e75da66b69a5711804c967f6a973d4b35cfe2156",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +677,681 @@                ))\n                if coid1 === coid2 &&\n                  templateId1 == templateId2 &&\n                  (actingParties1.isEmpty || actingParties1 == actingParties2) &&\n                  signatories1 == signatories2 &&"
  },
  {
    "id" : "431e9048-1d82-437c-9b40-0043119dcc5e",
    "prId" : 7826,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa8f7f5e-0285-41d5-8a40-9f6a4f874a36",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not a big fan of default arguments. Do we _really_ need it here?\r\n```suggestion\r\n        stack: List[(Nid, Exe, Stream[Nid], Nid, Exe, Stream[Nid])],\r\n```",
        "createdAt" : "2020-11-03T09:36:46Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "494102af-5b1e-4ab0-87c9-bb2ab51d2651",
        "parentId" : "aa8f7f5e-0285-41d5-8a40-9f6a4f874a36",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I like using default arguments for accumulator of recursive function, specially for this kind of functions that are in the scope of another function and are called only once. This makes clear what is the base case of the recursion, without having to look at the call.  ",
        "createdAt" : "2020-11-03T10:06:06Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e75da66b69a5711804c967f6a973d4b35cfe2156",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +627,631 @@        nids1: Stream[Nid],\n        nids2: Stream[Nid],\n        stack: List[(Nid, Exe, Stream[Nid], Nid, Exe, Stream[Nid])] = List.empty,\n    ): Either[ReplayMismatch[Nid, Cid, Val], Unit] =\n      (nids1, nids2) match {"
  },
  {
    "id" : "4c945149-ae00-40e0-8cd3-2b9fb0d10fbd",
    "prId" : 7826,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30fff688-4244-4632-b821-9ddd82a51d55",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This is again asymmetric.",
        "createdAt" : "2020-11-03T09:37:54Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "156b0ded-0bd6-4ad4-ae5b-a8f7c13f88d6",
        "parentId" : "30fff688-4244-4632-b821-9ddd82a51d55",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "same thing than above, it is for backward compatibility.",
        "createdAt" : "2020-11-03T10:06:40Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e75da66b69a5711804c967f6a973d4b35cfe2156",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +726,730 @@                  signatories1 == signatories2 &&\n                  choiceObservers1 == choiceObservers2 &&\n                  (key1.isEmpty || key1 === key2) =>\n              loop(\n                children1.iterator.toStream,"
  },
  {
    "id" : "0f82ef84-4295-42d7-ac0e-1c9ecbf711ce",
    "prId" : 7826,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "747a9154-98a9-4fe9-a0e7-402a3a255e32",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This condition is symmetric in contrast to the others above. Now, I'm even more confused. 🤔",
        "createdAt" : "2020-11-03T09:39:13Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "cc106898-2866-4708-8e26-d6dd6d0c2372",
        "parentId" : "747a9154-98a9-4fe9-a0e7-402a3a255e32",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "There is not backward compatibility issue here. `NodeLookupByKey` was introduce after contract Key. ",
        "createdAt" : "2020-11-03T10:07:24Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "845af795-e745-4e2c-a3cd-08d0b4bdc9e4",
        "parentId" : "747a9154-98a9-4fe9-a0e7-402a3a255e32",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "That makes sense. Thanks.",
        "createdAt" : "2020-11-03T10:13:11Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "e75da66b69a5711804c967f6a973d4b35cfe2156",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +737,741 @@                )\n                if templateId1 == templateId2 &&\n                  key1 === key2 &&\n                  result1 === result2 =>\n              loop(rest1, rest2, stack)"
  },
  {
    "id" : "e47195ba-8ac6-4240-9dc3-27cf3b72082b",
    "prId" : 7826,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b22db1c-4022-46e0-840d-78231d05dfa4",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n    loop(recorded.roots.iterator.toStream, replayed.roots.iterator.toStream, List.empty)\r\n```",
        "createdAt" : "2020-11-03T10:08:24Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e75da66b69a5711804c967f6a973d4b35cfe2156",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +763,767 @@      }\n\n    loop(recorded.roots.iterator.toStream, replayed.roots.iterator.toStream)\n\n  }"
  },
  {
    "id" : "20c2ebb0-c5fe-4132-b891-de915f67050e",
    "prId" : 7826,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25d1027d-7a3a-432b-8e48-007b28d5e6e0",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n  /** Determines whether `replayed` is the result of reinterpreting `recorded`.\r\n```",
        "createdAt" : "2020-11-03T10:14:45Z",
        "updatedAt" : "2020-11-04T18:17:53Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "e75da66b69a5711804c967f6a973d4b35cfe2156",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +605,609 @@  ) extends TransactionError\n\n  /** Whether `other` is the result of reinterpreting this transaction.\n    *\n    * @param recorded : the transaction to be validated."
  },
  {
    "id" : "5ba068ab-1b94-49de-b820-dc84412c88ae",
    "prId" : 7617,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7617",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdbb8cc9-3d93-469a-a4e0-f789184138f0",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We need to improve this. A constructor pattern with so many positional arguments makes me cringe. Let's do it in a separate PR though.",
        "createdAt" : "2020-10-09T14:10:40Z",
        "updatedAt" : "2020-10-13T08:21:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "028bbced28b92a3143f68f3f65bf48954cba4025",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +504,508 @@            case Node.NodeExercises(_, tmplId, _, _, true, _, _, _, _, _, _, _, Some(key), _) =>\n              state.consumed(globalKey(tmplId, key.key.value))\n            case Node.NodeExercises(_, tmplId, _, _, false, _, _, _, _, _, _, _, Some(key), _) =>\n              state.referenced(globalKey(tmplId, key.key.value))\n            case Node.NodeFetch(_, tmplId, _, _, _, _, Some(key), _) =>"
  },
  {
    "id" : "9bfa27c2-4419-4097-bd7d-fe5d4527d9d4",
    "prId" : 6739,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7841e96c-8bf7-4f5d-91d6-ed9e504e2b98",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "So, which is it? 1.3.0 or 1.4.0?",
        "createdAt" : "2020-07-15T11:54:45Z",
        "updatedAt" : "2020-07-15T19:43:20Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "9dcb5bfa-d67f-40c5-a065-826b2dc4b718",
        "parentId" : "7841e96c-8bf7-4f5d-91d6-ed9e504e2b98",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "When I wrote my previous PR (#6714), I though it will go in the release of yesterday (1.3.0).\r\nI did not, so I take advantage of this PR, to fix the mistake. \r\n",
        "createdAt" : "2020-07-15T15:24:12Z",
        "updatedAt" : "2020-07-15T19:43:20Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "56f970d2f86437d6e9b09a51bc1648fd3ae8e4c8",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +471,475 @@object Transaction {\n\n  @deprecated(\"use com.daml.lf.transaction.NodeId\", since = \"1.4.0\")\n  type NodeId = transaction.NodeId\n  @deprecated(\"use com.daml.lf.transaction.NodeId\", since = \"1.4.0\")"
  },
  {
    "id" : "12ad5e33-d5ca-418e-b506-3c7614cb657b",
    "prId" : 5570,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5570",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab9e521a-9186-4b85-acad-59b5294d85fb",
        "parentId" : null,
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "Maybe not for this PR: Do you intend to add the nodeSeeds also to `TransactionMeta` used in the `TransactionAccepted` update that's sent over the read service?",
        "createdAt" : "2020-04-16T07:04:44Z",
        "updatedAt" : "2020-04-16T15:56:18Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "cb38667f-24d8-451f-a1ba-0442859483e4",
        "parentId" : "ab9e521a-9186-4b85-acad-59b5294d85fb",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Definitively not for this PR, but this kind of change is in the scope of #5500.\r\n",
        "createdAt" : "2020-04-16T12:08:47Z",
        "updatedAt" : "2020-04-16T15:56:18Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0131af72a15602be1889879e8178298a5cea4a63",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +397,401 @@      usedPackages: Set[PackageId],\n      dependsOnTime: Boolean,\n      nodeSeeds: ImmArray[(Value.NodeId, crypto.Hash)],\n  )\n"
  },
  {
    "id" : "8a9514c1-2447-4aec-9f39-205bd15d2676",
    "prId" : 4077,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4077",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ec8f7e8-a479-47b3-b6ce-b5ddfc9d9b68",
        "parentId" : null,
        "authorId" : null,
        "body" : "```suggestion\r\n  *                        discriminators. If it is unset, the discriminators will not be\r\n```",
        "createdAt" : "2020-01-22T10:29:09Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "b715411c8916b18ec1c64dcd871e8a0fd22b9adb",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +70,74 @@  *                     The used packages are not serialized using [[TransactionCoder]].\n  * @param transactionSeed master hash used to derived node and relative contractId\n  *                        discriminators. If it is undefined, the discriminators have not be\n  *                        generated and have be let undefined in the nodes and the relative\n  *                        contractIds of the transaction."
  },
  {
    "id" : "03c40677-8566-4831-8607-fc7f52cafefa",
    "prId" : 4077,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4077",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71973e82-50b0-4e6b-a94e-b884736ddb1a",
        "parentId" : null,
        "authorId" : null,
        "body" : "```suggestion\r\n  *                        generated and will be unset in the nodes and the relative\r\n```",
        "createdAt" : "2020-01-22T10:29:31Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "b715411c8916b18ec1c64dcd871e8a0fd22b9adb",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +71,75 @@  * @param transactionSeed master hash used to derived node and relative contractId\n  *                        discriminators. If it is undefined, the discriminators have not be\n  *                        generated and have be let undefined in the nodes and the relative\n  *                        contractIds of the transaction.\n  *"
  }
]