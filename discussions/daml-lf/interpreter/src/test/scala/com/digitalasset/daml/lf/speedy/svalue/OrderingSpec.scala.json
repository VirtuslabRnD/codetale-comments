[
  {
    "id" : "68f6df91-05b1-4273-aeb4-cb390665d9d8",
    "prId" : 8062,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e4889da-1f51-4a11-b8d2-1c66749f6834",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I assume we donâ€™t have instances to generate `Ast.Type` directly instead of first generating iface types and then converting back?",
        "createdAt" : "2021-01-14T15:48:17Z",
        "updatedAt" : "2021-01-27T12:46:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ea652c44-d24f-42a6-a984-a06dcc4ac5f8",
        "parentId" : "9e4889da-1f51-4a11-b8d2-1c66749f6834",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I am not 100% sure. \r\nWhat do you think @S11001001 ?",
        "createdAt" : "2021-01-14T18:53:33Z",
        "updatedAt" : "2021-01-27T12:46:56Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "012abde9-fa80-49e6-bf67-fc2c97e82696",
        "parentId" : "9e4889da-1f51-4a11-b8d2-1c66749f6834",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "We don't, and if `toAstType` is half an isomorphism we're better off not having one.",
        "createdAt" : "2021-01-15T13:07:31Z",
        "updatedAt" : "2021-01-27T12:46:56Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "007d7e88f565f9c5f41e6e2931c48f70403f5f84",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +38,42 @@    with ScalaCheckPropertyChecks {\n\n  private[lf] def toAstType(typ: iface.Type): Ast.Type = typ match {\n    case iface.TypeCon(name, typArgs) =>\n      typArgs.foldLeft[Ast.Type](Ast.TTyCon(name.identifier))((acc, typ) =>"
  },
  {
    "id" : "2d662141-1777-4447-b2b3-25dfb37a217b",
    "prId" : 6038,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ef51789-b137-477b-b358-6daf5eab18d6",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "`inj` gives us transaction library `Value`s for free, but not `SValue`s. We could go through the `translatePrimValue` conversion instead, or define an associated `injSvalue` paired with each `ValueAddend` constructor we care to use. Of course for a small number of cases it's sufficient and safe to hand-write as done above.",
        "createdAt" : "2020-05-19T21:44:29Z",
        "updatedAt" : "2020-05-27T23:17:58Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "c429d96b104ad601a23dec9fe0fc8eb6d1fe17c3",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +340,344 @@        r(\"Int64 Option List\", VA.list(VA.optional(VA.int64))) { loi =>\n          SList(loi.map(oi => SOptional(oi map SInt64)).to[FrontStack])\n        },\n      ) ++\n        comparableCoidsGen.zipWithIndex.map {"
  },
  {
    "id" : "80132108-824d-43cc-9fe3-ce1ebfe4f759",
    "prId" : 6038,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "557da7be-d4f0-4273-966f-0a2ab802baa1",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Includes reflexive, antisymmetric, transitive.",
        "createdAt" : "2020-05-19T21:48:25Z",
        "updatedAt" : "2020-05-27T23:17:58Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "c429d96b104ad601a23dec9fe0fc8eb6d1fe17c3",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +462,466 @@      implicit val svalueOrd: Order[SValue] = Order fromScalaOrdering Ordering\n      implicit val svalueArb: Arbitrary[SValue] = Arbitrary(svGen)\n      forEvery(Table((\"law\", \"prop\"), SzP.order.laws[SValue].properties: _*)) { (_, p) =>\n        check(p, minSuccessful(50))\n      }"
  },
  {
    "id" : "ffd086bb-d57b-474c-9615-951d2d78644b",
    "prId" : 5881,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29ff39df-e496-4da8-9fad-13ccd73d342c",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Can we please use named arguments for all the arguments here? The list is quite unwieldy already.",
        "createdAt" : "2020-05-07T07:39:38Z",
        "updatedAt" : "2020-05-07T07:58:26Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "e64d616c07b79eb94e74bcd9fdf26b01521b9b5c",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +480,484 @@    Time.Timestamp.now(),\n    InitialSeeding(Some(txSeed)),\n    Set.empty,\n  )\n"
  },
  {
    "id" : "4dc1c27d-ffe1-4733-b2df-ce1efdca8215",
    "prId" : 5881,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13d111d7-c53d-4bea-9880-e407164c72d0",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Let's keep it concise. ðŸ˜ƒ\r\n```suggestion\r\n    val machine = initMachine(SEImportValue(v))\r\n```",
        "createdAt" : "2020-05-07T07:40:19Z",
        "updatedAt" : "2020-05-07T07:58:26Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "e64d616c07b79eb94e74bcd9fdf26b01521b9b5c",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +485,489 @@  private def translatePrimValue(v: Value[Value.AbsoluteContractId]) = {\n    val expr = SEImportValue(v)\n    val machine = initMachine(expr)\n    machine.run() match {\n      case SResultFinalValue(value) => value"
  },
  {
    "id" : "415997d2-b73d-43ad-950b-415eaf3a5b4a",
    "prId" : 5526,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee19a99b-be54-41e1-8dd1-0db81a665171",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Good.",
        "createdAt" : "2020-04-14T08:00:07Z",
        "updatedAt" : "2020-04-24T20:58:40Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e1355a2c792b820752b3f4a7fe7b384b7ef174c",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +459,463 @@      }\n    }\n  }\n\n  private def ArrayList[X](as: X*): util.ArrayList[X] ="
  },
  {
    "id" : "76204304-fbf1-49b7-860c-706873121a5e",
    "prId" : 4808,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c495cb03-0ba0-4a86-ae89-1fa564e863bf",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Delete. ðŸš®",
        "createdAt" : "2020-03-04T15:53:24Z",
        "updatedAt" : "2020-03-09T11:33:56Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c04c19b740c0002bf5adf440310b440f2393af8",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +72,76 @@      .map(x => SContractId(Value.AbsoluteContractId(Ref.ContractIdString.assertFromString(x))))\n//  private val relativeContractId =\n//    List(0, 1).map(x => SContractId(Value.RelativeContractId(Value.NodeId(x))))\n  private val contractIds = absoluteContractId //++ relativeContractId\n"
  }
]