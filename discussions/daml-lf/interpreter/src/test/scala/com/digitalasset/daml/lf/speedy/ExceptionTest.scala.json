[
  {
    "id" : "864e8ee5-4e20-4864-8d24-2188f0ab1069",
    "prId" : 9866,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9866",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11e390a5-73be-448f-88d8-56a9bbd4d262",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "This is already tested in  `daml-lf/interpreter/src/test/scala/com/digitalasset/daml/lf/speedy/SBuiltinTest.scala` .\r\nOne more, in a slightly different context, do not harm. ",
        "createdAt" : "2021-06-01T12:27:59Z",
        "updatedAt" : "2021-06-01T12:28:05Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "979e4230-056b-4266-8452-340c3798ff29",
        "parentId" : "11e390a5-73be-448f-88d8-56a9bbd4d262",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Yeah I saw that. It seemed useful to have one case for this here but also happy to drop it if you prefer.",
        "createdAt" : "2021-06-01T12:29:13Z",
        "updatedAt" : "2021-06-01T12:29:13Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2a10058a-23d1-419d-9a1c-12a6d6796cef",
        "parentId" : "11e390a5-73be-448f-88d8-56a9bbd4d262",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : ":+1: \r\n",
        "createdAt" : "2021-06-01T12:36:20Z",
        "updatedAt" : "2021-06-01T12:36:20Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "89918980-3fa9-4ae8-8f7c-8975cb1fd89d",
        "parentId" : "11e390a5-73be-448f-88d8-56a9bbd4d262",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "meaning you can keep it. \r\n",
        "createdAt" : "2021-06-01T12:36:35Z",
        "updatedAt" : "2021-06-01T12:36:35Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2eb2ecfbc232de4f8f6fceb4e6e003bca702a62b",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +86,90 @@      (\"M:unhandled3\", SResultError(DamlEUnhandledException(e1))),\n      (\"M:unhandled4\", SResultError(DamlEUnhandledException(e2))),\n      (\"M:divZero\", SResultError(DamlEUnhandledException(divZeroE))),\n    )\n"
  },
  {
    "id" : "36cb9e58-f179-4569-87b9-bc3a8261be41",
    "prId" : 9679,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9679",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d027c010-ff12-4c66-8a8f-3015278b5617",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe throw some other node types in there as well, at least an exercise.",
        "createdAt" : "2021-05-14T08:49:46Z",
        "updatedAt" : "2021-05-14T08:49:51Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff8b8e15d8a523ce35a2fa17bee14e7bccbfa345",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +542,546 @@  }\n\n  \"rollback of creates\" should {\n\n    val party = Party.assertFromString(\"Alice\")"
  },
  {
    "id" : "4abfbb32-5247-47f5-9516-f1a70f1ebe46",
    "prId" : 8612,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30c5c8ce-6792-4c60-bd75-f35220f88b42",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Following my comment above, it would be nice to have test cases where `message` crashes. My current understanding is that in that case `to_any_exception` will not crash so ignoring the potential issue around unhandled exceptions that isn’t going to change the exception that gets thrown.",
        "createdAt" : "2021-02-11T09:15:39Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9a5c1ae4-8092-4ccd-8bfe-a6211e83f505",
        "parentId" : "30c5c8ce-6792-4c60-bd75-f35220f88b42",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "we do test this!",
        "createdAt" : "2021-02-12T13:34:13Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a7c69fbff2aaee6c8500bf0826a79cf0cd9f356",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +97,101 @@\n         record @serializable MyException1 = { message: Text } ;\n         exception MyException1 = {\n           message \\(e: M:MyException1) -> M:MyException1 {message} e\n         };"
  },
  {
    "id" : "59ca0b55-e67d-4e9e-b7b6-fd09616c9551",
    "prId" : 8612,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94d58997-7208-445b-95c7-92e18952a0e3",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "ah perfect, that’s exactly what I feared. We change the type of unhandled exceptions but not of handled exceptions if `message` crashes.",
        "createdAt" : "2021-02-11T09:16:55Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "80754710-56d6-416d-93ca-713277dae4a6",
        "parentId" : "94d58997-7208-445b-95c7-92e18952a0e3",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I'm not really sure what you mean by _change the type_ here.\r\nIs there anything to for now?",
        "createdAt" : "2021-02-12T13:34:45Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "0b111625-12fd-4278-afa7-0cf01148564d",
        "parentId" : "94d58997-7208-445b-95c7-92e18952a0e3",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "If I add a `catch` at the top-level I get the actual exception, if I don’t catch it, I get the one from `DamlEUnhandledException` which comes from the `message` function and can have a different type. I’m fine with ignoring this for now but we should add TODOs/issues and address this (perhaps in combination with exposing the type and value in `DamlEUhandledException` directly).",
        "createdAt" : "2021-02-12T13:52:10Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "cfad254c-c039-43b3-a506-73e7c029ef80",
        "parentId" : "94d58997-7208-445b-95c7-92e18952a0e3",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Yes. There is a TODO added.\r\n",
        "createdAt" : "2021-02-12T15:13:05Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a7c69fbff2aaee6c8500bf0826a79cf0cd9f356",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +175,179 @@      (\"M:unhandled2\", SResultError(DamlEUnhandledException(\"oops2\"))),\n      (\"M:unhandled3\", SResultError(DamlEUnhandledException(\"E1\"))),\n      (\"M:unhandled4\", SResultError(DamlEUnhandledException(\"E1\"))),\n    )\n"
  },
  {
    "id" : "0bd3431c-3721-487b-816c-fff15bf8f246",
    "prId" : 8612,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40bd84de-7abd-4271-b5f8-daf6da01b1e7",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "some comments on what the tests are supposed to check for would be super useful here. Decyphering hand-written daml-lf always is a bit tricky.",
        "createdAt" : "2021-02-11T09:26:02Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "81c879b3-3d42-400a-a96a-f8bff70ff746",
        "parentId" : "40bd84de-7abd-4271-b5f8-daf6da01b1e7",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "They were hard to write... they should be hard to read :)",
        "createdAt" : "2021-02-11T11:39:48Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "21736d91-6be3-4111-815c-e3992dd2203e",
        "parentId" : "40bd84de-7abd-4271-b5f8-daf6da01b1e7",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I added a bunch of comments which hopefully reveal the intent of the various tests.",
        "createdAt" : "2021-02-12T13:35:07Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a7c69fbff2aaee6c8500bf0826a79cf0cd9f356",
    "line" : 431,
    "diffHunk" : "@@ -1,1 +429,433 @@  }\n\n  \"throw/catch (control flow)\" should {\n\n    // Another example allowing dynamic control of different test paths. Novelty here:"
  }
]