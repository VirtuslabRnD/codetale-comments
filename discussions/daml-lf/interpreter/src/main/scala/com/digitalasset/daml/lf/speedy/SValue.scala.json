[
  {
    "id" : "2b5e9f7c-bf6c-464a-89d6-3f7271ddcb80",
    "prId" : 9790,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf55f36a-cbf4-4a59-b387-1eccebe46411",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Scala Q: Is this matching against the `typ` value?",
        "createdAt" : "2021-05-26T07:29:19Z",
        "updatedAt" : "2021-05-26T07:34:10Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "1ba31dcb-a9e3-45c1-bebf-2c7f74525f0b",
        "parentId" : "cf55f36a-cbf4-4a59-b387-1eccebe46411",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Yes",
        "createdAt" : "2021-05-26T07:41:25Z",
        "updatedAt" : "2021-05-26T07:45:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6a140471-4929-48c6-b34b-319624ce4ab9",
        "parentId" : "cf55f36a-cbf4-4a59-b387-1eccebe46411",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Thanks for the explanation :-)",
        "createdAt" : "2021-05-26T07:58:32Z",
        "updatedAt" : "2021-05-26T07:58:33Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b44f8b03f16664ba868f025a97a067557b8231e6",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +224,228 @@    def unapply(excep: SAnyException): Option[SValue] =\n      excep match {\n        case SAnyException(`typ`, SRecord(_, _, args)) =>\n          Some(args.get(0))\n        case _ =>"
  },
  {
    "id" : "f715e602-2ff0-4be6-aee0-793f3cf0a737",
    "prId" : 9790,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "beb890b2-6d38-4bd8-b1fe-4f8c37a4c88a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "maybe add a comment that this should be kept in sync with the generator or the tests.",
        "createdAt" : "2021-05-26T07:41:55Z",
        "updatedAt" : "2021-05-26T07:45:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "b44f8b03f16664ba868f025a97a067557b8231e6",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +210,214 @@    // See test compiler/damlc/tests/src/stable-packages.sh\n    val tyCon: Ref.TypeConName = Ref.Identifier.assertFromString(\n      \"f1cf1ff41057ce327248684089b106d0a1f27c2f092d30f663c919addf173981:DA.Exception.ArithmeticError:ArithmeticError\"\n    )\n    val typ: Type = TTyCon(tyCon)"
  },
  {
    "id" : "cb8eaf62-5db8-4d7c-af81-26a73e6eac65",
    "prId" : 9310,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2905e751-fdaf-4723-933f-a4488fe1e844",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Can we decrement the `scale` range down by 1, so it's:\r\n\r\n```\r\n    val MaxScale = MaxPrecision / 2 - 1\r\n    val MinScale = -MaxPrecision / 2\r\n```\r\n\r\nInstead? That way the `scale` range can be described exactly as the range of a signed 16-bit integer (`i16` in rust).  It's a range that most programmers are more familiar with.\r\n\r\n\r\n\r\n<img width=\"1233\" alt=\"image\" src=\"https://user-images.githubusercontent.com/63245722/113565913-b0c99000-9603-11eb-9985-5828754d1670.png\">\r\n",
        "createdAt" : "2021-04-05T10:41:31Z",
        "updatedAt" : "2021-04-06T10:23:49Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "25355aa4-e9d4-4a78-b2e0-9ef3e0f5f441",
        "parentId" : "2905e751-fdaf-4723-933f-a4488fe1e844",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I like it!",
        "createdAt" : "2021-04-06T06:47:49Z",
        "updatedAt" : "2021-04-06T10:23:49Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f3aad6c1-2d40-4cf2-a830-76f9ee08771e",
        "parentId" : "2905e751-fdaf-4723-933f-a4488fe1e844",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "We agree offline to keep \r\n```\r\n    val MaxScale = MaxPrecision / 2\r\n    val MinScale = -MaxPrecision / 2 + 1\r\n```\r\nas this preserves the nice symmetry: \r\nmax digits on the left hand side of the decimal point = max digits on the right side of the decimal point = `MaxPrecision / 2`",
        "createdAt" : "2021-04-06T09:28:47Z",
        "updatedAt" : "2021-04-06T10:23:49Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f30d27185ce2be5a3e6d9810655ff3dabba27a16",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +245,249 @@    val MaxPrecision = 1 << 16\n    val MaxScale = MaxPrecision / 2\n    val MinScale = -MaxPrecision / 2 + 1\n\n    def unapply(value: SBigNumeric): Some[java.math.BigDecimal] ="
  },
  {
    "id" : "425e0a19-f8b2-4fe5-b93b-ae0a301df072",
    "prId" : 9310,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bedaf1e8-05d2-43ec-9f77-f14742620258",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Apologies if I missed this somewhere else but it would be great to have a brief comment explaining the choice of this bound. No issue with the choice from my side but I think I’ve already forgot half of the reasoning behind it and it’ll be lost in slack history soon if it isn’t already.",
        "createdAt" : "2021-04-06T06:50:39Z",
        "updatedAt" : "2021-04-06T10:23:49Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4a734d8f-c668-4484-b76d-ce704690ee91",
        "parentId" : "bedaf1e8-05d2-43ec-9f77-f14742620258",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "The bound `2^16` has been choose for 2 reasons: \r\n- it let us test of BigNumeric builtins with the largest possible values (`//daml-lf/interpreter:test_bignumeric` tooks around 3 mins)\r\n- it is a nice power of 2\r\n\r\n  ",
        "createdAt" : "2021-04-06T09:48:33Z",
        "updatedAt" : "2021-04-06T10:23:49Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f30d27185ce2be5a3e6d9810655ff3dabba27a16",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +243,247 @@  }\n  object SBigNumeric {\n    val MaxPrecision = 1 << 16\n    val MaxScale = MaxPrecision / 2\n    val MinScale = -MaxPrecision / 2 + 1"
  },
  {
    "id" : "13809511-d430-47f0-bbd8-f0c26876b438",
    "prId" : 8612,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae56623a-d31c-4c77-8afe-d63f79b9fe97",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Builtin exceptions are serializable according to the LF spec and they should be imho? So this crash is wrong while the one for AnyException is fine. Perfectly fine to leave it out of this PR but let’s add a TODO in that case and maybe an issue.",
        "createdAt" : "2021-02-11T08:12:45Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b6405f59-bb3d-4d87-9172-a239e569e05d",
        "parentId" : "ae56623a-d31c-4c77-8afe-d63f79b9fe97",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "@remyhaemmerle-da\r\n\r\nDo we need to extend the LF Value type to allow representation of  builtin-exception values?",
        "createdAt" : "2021-02-11T16:25:54Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "e742c72c-ccb0-4fc7-b3aa-ccca3e6f3e82",
        "parentId" : "ae56623a-d31c-4c77-8afe-d63f79b9fe97",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I think we do need to extend LF Values. \r\nHowever, I think we could (and probably should) postpone that for latter. ",
        "createdAt" : "2021-02-12T10:38:55Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "530dc95c-0cb1-4124-a873-af4e9799c921",
        "parentId" : "ae56623a-d31c-4c77-8afe-d63f79b9fe97",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "fully agree on postponing it, just add a TODO here and/or open an issue.",
        "createdAt" : "2021-02-12T10:44:12Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "bb8177c6-3f3c-4be8-93c7-f6b90da068ff",
        "parentId" : "ae56623a-d31c-4c77-8afe-d63f79b9fe97",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "added TODO marker",
        "createdAt" : "2021-02-12T13:29:51Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a7c69fbff2aaee6c8500bf0826a79cf0cd9f356",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +67,71 @@      case SAnyException(_, _, _) =>\n        throw SErrorCrash(\"SValue.toValue: unexpected SAnyException\")\n      case SBuiltinException(_, _) =>\n        // TODO https://github.com/digital-asset/daml/issues/8020\n        // builtin exceptions values are serializable, so this should work"
  },
  {
    "id" : "b89e2ef9-594c-4e8a-8dcf-bf0e07433b9b",
    "prId" : 8612,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c9a392b-1b52-48ba-9012-f51b9d0ae677",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "can we turn the tag into a sealed trait + case objects instead? Seems easy to mess this up somewhere if it’s just a string. Or alternatively, just make separate `SValue`s for each exception type.",
        "createdAt" : "2021-02-11T08:18:47Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f6d76c86-780f-463d-b422-fae092bde8cf",
        "parentId" : "6c9a392b-1b52-48ba-9012-f51b9d0ae677",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I'm loathe to add any more structure here at the moment, because I am not convinced that this speedy-value tagging is required at all. It's not used by speedy execution in any place. And speedy-values should never escape the execution.\r\n\r\nWe can talk about this more later.\r\n",
        "createdAt" : "2021-02-12T13:40:06Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "19655bfd-6d8d-4141-b582-374f605f9a6b",
        "parentId" : "6c9a392b-1b52-48ba-9012-f51b9d0ae677",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "fair enough, then let’s add some todos/or issues. If we can kill it completely that’s also fine. I just want to get rid of the string tag.",
        "createdAt" : "2021-02-12T13:53:10Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a7c69fbff2aaee6c8500bf0826a79cf0cd9f356",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +200,204 @@  final case class SAnyException(ty: Type, messageFunction: SExpr, value: SValue) extends SValue\n\n  // A value of one of the builtin exception types: GeneralError, ArithmeticError, ContractError\n  final case class SBuiltinException(tag: String, value: SValue) extends SValue\n"
  },
  {
    "id" : "19513499-5328-4c14-b47f-65d4fcc47283",
    "prId" : 7334,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88e81447-0a86-440b-bfd2-8d91b97fbdf4",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Is that even syntactically valid?\r\n```suggestion\r\n      SGenMap(isTextMap, entries.iterator)\r\n```",
        "createdAt" : "2020-09-08T14:17:37Z",
        "updatedAt" : "2020-09-08T18:04:37Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9287729a15d23b6de2b6a2cfb39e2d599b87085",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +179,183 @@\n    def apply(isTextMap: Boolean, entries: (SValue, SValue)*): SGenMap =\n      SGenMap(isTextMap: Boolean, entries.iterator)\n  }\n"
  },
  {
    "id" : "d4fdcb63-b008-4a99-a245-fef4561d4a40",
    "prId" : 7319,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7319",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6310179-7ced-42bc-931c-cf95bc1af6a6",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Worth documenting that `values` must be orderd by name just like `fieldNames`?",
        "createdAt" : "2020-09-04T08:29:09Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b71671bd-f82b-4ac4-8cea-e41b85d16edd",
        "parentId" : "d6310179-7ced-42bc-931c-cf95bc1af6a6",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "done",
        "createdAt" : "2020-09-04T09:07:27Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +141,145 @@  @SuppressWarnings(Array(\"org.wartremover.warts.ArrayEquals\"))\n  // values must be ordered according fieldNames\n  final case class SStruct(fieldNames: Struct[Unit], values: util.ArrayList[SValue]) extends SValue\n\n  final case class SVariant("
  },
  {
    "id" : "a3e7bbab-0154-43f7-829c-dc626feb1caf",
    "prId" : 7319,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7319",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ed88bfb-11c8-474e-9bc0-fdefe0f2c460",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why the assertion here instead of changing `entry` to not care about the ordering like you did in other places?",
        "createdAt" : "2020-09-04T08:31:53Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5469e664-e319-4190-bc5d-474d101c6a42",
        "parentId" : "7ed88bfb-11c8-474e-9bc0-fdefe0f2c460",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I wanted to avoid dynamic check because this is used by the built-in `TEXTMAP_TO_LIST`.\r\n",
        "createdAt" : "2020-09-04T09:13:48Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "9d14d34d-b80f-4d45-a158-93b491a56079",
        "parentId" : "7ed88bfb-11c8-474e-9bc0-fdefe0f2c460",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I wasn’t thinking of a check. Currently you have\r\n```\r\n  private def entry(key: SValue, value: SValue) = {\r\n    val args = new util.ArrayList[SValue](2)\r\n    args.add(key)\r\n    args.add(value)\r\n    SStruct(entryFields, args)\r\n  }\r\n```\r\nIf you change that to\r\n```\r\n  private def entry(key: SValue, value: SValue) = {\r\n    val args = new util.ArrayList[SValue](2)\r\n    args.set(indexOfKeyField, key)\r\n    args.set(indexOfValueField, value)\r\n    SStruct(entryFields, args)\r\n  }\r\n```\r\nHowever, I just realized that this will of course throw an out of range and I couldn’t find a method to initialize an ArrayList with `size` 2 instead of `capacity` 2 so ignore my comment.",
        "createdAt" : "2020-09-04T09:21:44Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +235,239 @@\n  // we verify the fields are ordered as the `entry` method expects it.\n  assert(entryFields.indexOf(keyFieldName) == 0)\n  assert(entryFields.indexOf(valueFieldName) == 1)\n"
  },
  {
    "id" : "0f90b1e7-4c53-4e29-bc07-36dece868f58",
    "prId" : 7319,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7319",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1f83dc4-c7fe-4cb5-8edc-bccc4e465377",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Why don't we use `Struct[SValue]` as the only payload for `SStruct`?",
        "createdAt" : "2020-09-04T11:10:06Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "ddc4b1cd-8e0b-43b9-acf3-335b0a7be201",
        "parentId" : "e1f83dc4-c7fe-4cb5-8edc-bccc4e465377",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I think this would increase the cost of `SBStructUpd`. By separating names from values we do not need to copy the names when updating the `SStruct`.",
        "createdAt" : "2020-09-04T14:54:52Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +141,145 @@  @SuppressWarnings(Array(\"org.wartremover.warts.ArrayEquals\"))\n  // values must be ordered according fieldNames\n  final case class SStruct(fieldNames: Struct[Unit], values: util.ArrayList[SValue]) extends SValue\n\n  final case class SVariant("
  },
  {
    "id" : "1b1eed6c-44b8-4989-a2fb-3d0c64c6378c",
    "prId" : 6003,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00182b77-14e4-4f8e-9e17-8479da7f3e9b",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n  final case class PClosure(label: AnyRef, expr: SExpr, captured: Array[SValue])\r\n```",
        "createdAt" : "2020-05-19T18:02:21Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +132,136 @@    * [[AnyRef]] for the label.\n    */\n  final case class PClosure(label: AnyRef, expr: SExpr, fvs: Array[SValue])\n      extends Prim\n      with SomeArrayEquals {"
  },
  {
    "id" : "673e1668-77df-49e9-bc6f-2844ea0f3419",
    "prId" : 4893,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9b48a05-d05a-4c53-aa42-207366bc0ed8",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Similarly use the `iterator map to` pattern.",
        "createdAt" : "2020-03-12T22:03:18Z",
        "updatedAt" : "2020-03-13T08:47:05Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "6e133503-bd49-4070-b858-ee83926c2abc",
        "parentId" : "f9b48a05-d05a-4c53-aa42-207366bc0ed8",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "done",
        "createdAt" : "2020-03-13T08:47:37Z",
        "updatedAt" : "2020-03-13T08:47:38Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e034c77dcd97984f03bcd3890b2ea06272f908a",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +291,295 @@        SGenMap(\n          entries.iterator.map { case (k, v) => fromValue(k) -> fromValue(v) }\n        )\n\n      case V.ValueVariant(Some(id), variant, value) =>"
  },
  {
    "id" : "a99f0cd7-2c39-4676-9199-97cb4b2b26b3",
    "prId" : 4893,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "326e7f95-b538-46e0-bcc8-ef12aad3fcb3",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Somewhere in here\r\n\r\n```scala\r\n  implicit def ` ordering`: Ordering[SValue] = svalue.Ordering\r\n```\r\n\r\nThen you should be able to remove all the explicit references.",
        "createdAt" : "2020-03-12T22:05:08Z",
        "updatedAt" : "2020-03-13T08:47:05Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "7c422861-7e2b-42b7-936c-81e69dffaf7c",
        "parentId" : "326e7f95-b538-46e0-bcc8-ef12aad3fcb3",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "done",
        "createdAt" : "2020-03-13T08:47:31Z",
        "updatedAt" : "2020-03-13T08:47:31Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e034c77dcd97984f03bcd3890b2ea06272f908a",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +153,157 @@\n  final case class SGenMap(genMap: TreeMap[SValue, SValue]) extends SValue\n\n  object SGenMap {\n    implicit def `SGenMap Ordering`: Ordering[SValue] = svalue.Ordering"
  },
  {
    "id" : "6a4b79fd-76ed-425c-b09f-9e7645fe58d9",
    "prId" : 3453,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a0e684f-0b11-445b-89a8-622b9e0998c7",
        "parentId" : null,
        "authorId" : null,
        "body" : "Just to check, this will throw an exception if the key is not valid, right? e.g. if it contains a function.",
        "createdAt" : "2019-11-14T12:35:51Z",
        "updatedAt" : "2019-11-15T09:53:45Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "f349b92f-cd5d-4664-b3db-758431eadfbb",
        "parentId" : "4a0e684f-0b11-445b-89a8-622b9e0998c7",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I made that more explicit",
        "createdAt" : "2019-11-15T08:14:46Z",
        "updatedAt" : "2019-11-15T09:53:45Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "79777f3e5242b968e6ddaeabbd367f715b2cb5fa",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +153,157 @@\n  object SGenMap {\n    case class Key(v: SValue) {\n      override val hashCode: Int = svalue.Hasher.hash(v)\n      override def equals(obj: Any): Boolean = obj match {"
  },
  {
    "id" : "271752c5-0a65-459b-890c-d34d455b8437",
    "prId" : 2653,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2653",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97a2b7b7-7461-4354-8e3c-dfee6a440789",
        "parentId" : null,
        "authorId" : null,
        "body" : "add a comment explaining what this is for and how and where it is used.",
        "createdAt" : "2019-08-26T12:20:23Z",
        "updatedAt" : "2019-08-26T15:11:51Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "f6cbcd10-0470-4ff8-b7b6-e51eae70390c",
        "parentId" : "97a2b7b7-7461-4354-8e3c-dfee6a440789",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "done",
        "createdAt" : "2019-08-26T15:10:26Z",
        "updatedAt" : "2019-08-26T15:11:51Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fa6077c71edb857ab4a0a3851d841ea21acc8ef",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +186,190 @@  // Numeric builtin's arguments/output. Should never be translated\n  // back to DAML-LF expressions / values.\n  final case class STNat(n: Int) extends SValue\n\n  // NOTE(JM): We are redefining PrimLit here so it can be unified"
  },
  {
    "id" : "1876eb14-d9f4-409b-912d-6cb298f4c972",
    "prId" : 10370,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10370#pullrequestreview-712584132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d861e75c-df07-4fa8-8ddb-aa7ac02c1f53",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "should we have some unit tests for this?",
        "createdAt" : "2021-07-22T08:01:32Z",
        "updatedAt" : "2021-07-22T08:05:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "aed9a2e3-751f-40a4-9e18-4fba67302815",
        "parentId" : "d861e75c-df07-4fa8-8ddb-aa7ac02c1f53",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "added",
        "createdAt" : "2021-07-22T10:22:58Z",
        "updatedAt" : "2021-07-22T10:22:58Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "1ca3d53d-fccd-43a8-b4b3-b054224232ab",
        "parentId" : "d861e75c-df07-4fa8-8ddb-aa7ac02c1f53",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "9e21da583838c14d6581a950b15e9d10386543da",
        "createdAt" : "2021-07-22T10:25:41Z",
        "updatedAt" : "2021-07-22T10:25:41Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4c98400f4324788c61ac1166dd2f8733752731e",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +63,67 @@object SValue {\n\n  def toValue(v: SValue, maxNesting: Int = V.MAXIMUM_NESTING): V[V.ContractId] = {\n    if (maxNesting < 0)\n      throw SError.SErrorDamlException(interpretation.Error.ValueExceedsMaxNesting)"
  }
]