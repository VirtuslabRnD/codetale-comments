[
  {
    "id" : "fd497da3-0f78-4b36-8c76-de979fedb563",
    "prId" : 6440,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e58a23b3-3469-4512-9b2d-d1198fdf022f",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "`machine.ctrl` should never be `null` when `machine.returnValue` is `null`. If it is, we've f*cked up somewhere. Thus, let's rather add an `assert(machine.ctrl != null)` here.",
        "createdAt" : "2020-06-26T10:20:23Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "dc14db1e-891d-470d-8e54-271d2bf1ffc4",
        "parentId" : "e58a23b3-3469-4512-9b2d-d1198fdf022f",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "This is dev/debug code. I'd rather not crash here, but crash in the execute step.",
        "createdAt" : "2020-06-30T15:10:43Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +90,94 @@    } else {\n      counts.ctrlExpr += 1\n      if (machine.ctrl != null) {\n        classifyExpr(machine.ctrl, counts)\n      }"
  },
  {
    "id" : "435ee403-f8b6-432c-8b8a-12ea476baf28",
    "prId" : 6003,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "415cf6c2-a615-48c5-8a80-d3d3c0beb9f8",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I suggest we amend all the field declarations of the `Counts` class with a default value of `0` instead of having this seemingly infinite list of zeros. Would be a thing for a separate PR though.",
        "createdAt" : "2020-05-19T17:12:10Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "0156ba7d-c98d-4e5c-bccf-ffb9e73161b6",
        "parentId" : "415cf6c2-a615-48c5-8a80-d3d3c0beb9f8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "ok",
        "createdAt" : "2020-05-20T07:02:51Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "64993f11-fcdb-44fb-8700-569f28dc60da",
        "parentId" : "415cf6c2-a615-48c5-8a80-d3d3c0beb9f8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "> I'm confident enough that our existing tests would have caught any issues there. \r\n\r\nI wan to confirm this opinion. It is basically *impossible* to make this kind of mistake without having half the existing world of tests blow up in your face.\r\n",
        "createdAt" : "2020-05-20T07:40:17Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "c97b81e6-d73f-4393-b555-25de61bddc81",
        "parentId" : "415cf6c2-a615-48c5-8a80-d3d3c0beb9f8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "For example, when I changed to the caller-saves strategy, I confirmed experimentally that for every one of the 4 continuations in which we saved frame/env-size, if the restore of either was forgottten, then some test would blow.",
        "createdAt" : "2020-05-20T07:43:19Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +71,75 @@\n  def newEmptyCounts(): Counts = {\n    Counts(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n  }\n"
  },
  {
    "id" : "eedba0b5-181e-4cbd-a2c1-5a5e3e352e14",
    "prId" : 6003,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9d581ad-489e-451d-a853-4e5050ff2fa2",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "If we don't care about the payload, let's make that explicit. I suggest we change the whole `match` expression in a separate PR to this style.\r\n```suggestion\r\n      case _: KPushTo => counts.kpushto += 1\r\n```",
        "createdAt" : "2020-05-19T17:13:00Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "438415f2-8052-46b3-be70-341db20d83b0",
        "parentId" : "c9d581ad-489e-451d-a853-4e5050ff2fa2",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Yes. Totally agree. I also realised this would be a better coding idiom here.\r\nNearly made the change.\r\nHad to stop myself as it it clearly an unrelated refactoring.",
        "createdAt" : "2020-05-20T07:03:57Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +113,117 @@      case KArg(_, _, _) => counts.karg += 1\n      case KFun(_, _, _) => counts.kfun += 1\n      case KPushTo(_, _, _, _) => counts.kpushto += 1\n      case KCacheVal(_, _) => counts.kcacheval += 1\n      case KLocation(_) => counts.klocation += 1"
  }
]