[
  {
    "id" : "8948827f-f627-4cc8-ae5c-76b386b75dbc",
    "prId" : 10039,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10039",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ef3f211-45bb-400f-bf7e-0daad93e0599",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "we should be able to simplify this but I’ll leave that for a separate PR.",
        "createdAt" : "2021-06-16T21:28:20Z",
        "updatedAt" : "2021-06-16T21:42:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "514dbd17b767eea0a80afff36d57a79b4f1ea579",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1024,1028 @@              templateId,\n              onLedger.committers,\n              cbMissing = _ => false,\n              cbPresent = { case V.ContractInst(actualTmplId, V.VersionedValue(_, arg), _) =>\n                // Note that we cannot throw in this continuation -- instead"
  },
  {
    "id" : "be715ae3-4d87-4d3e-a6cb-aaa3af275212",
    "prId" : 9829,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9829",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1580904-8596-4ccf-9c72-65ff288df4be",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "any reason not to use `getSText` here?",
        "createdAt" : "2021-05-28T10:41:40Z",
        "updatedAt" : "2021-05-28T10:44:36Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "8a65be9d-c24d-4752-9388-5560186c3aa9",
        "parentId" : "a1580904-8596-4ccf-9c72-65ff288df4be",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "The signature of `getSText` is not adapted. Maybe will do it in later.",
        "createdAt" : "2021-05-28T11:04:19Z",
        "updatedAt" : "2021-05-28T11:14:35Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b73a68ed25858d72a39e28e90c30ee4c284da05",
    "line" : 219,
    "diffHunk" : "@@ -1,1 +374,378 @@    override private[speedy] def executePure(args: util.ArrayList[SValue]): SText = {\n      val xs = getSList(args, 0)\n      val ts = xs.map {\n        case SText(t) => t\n        case v => crash(s\"type mismatch implodeText: expected SText, got $v\")"
  },
  {
    "id" : "dc7b73fe-a48a-49ab-8e10-6cd23f818523",
    "prId" : 9757,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d18b906-5424-4f4c-85bb-d602bd270803",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n                    crash(s\"SBTryHandler, expected payload to be SException: $payload\")\r\n```",
        "createdAt" : "2021-05-20T13:38:23Z",
        "updatedAt" : "2021-05-20T13:38:24Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "833a72c7003ddb15cd46b4f1c890da5693048e8c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1543,1547 @@                    onLedger.ptx = onLedger.ptx.rollbackTry(ex)\n                  case _ =>\n                    crash(s\"SBTryHandler, expected payload to be SAnyException: $payload\")\n                }\n                machine.enterApplication(handler, Array(SEValue(token)))"
  },
  {
    "id" : "fc8651bd-94f9-41bc-8614-1ecc39267b01",
    "prId" : 9700,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d101f3a-cec8-45fa-8089-6c3ba709a4d3",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Have you considered adding a `getSException` similar to how we have `getSInt64`?",
        "createdAt" : "2021-05-17T09:23:35Z",
        "updatedAt" : "2021-05-17T09:27:05Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a7339d44-149b-4534-b016-93c07bd46f23",
        "parentId" : "0d101f3a-cec8-45fa-8089-6c3ba709a4d3",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Nice idea, thanks :) ",
        "createdAt" : "2021-05-17T09:38:15Z",
        "updatedAt" : "2021-05-17T09:38:15Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd11d47ca1e8424859019d04ae866bc0b7df7b97",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +1630,1634 @@    override private[speedy] final def executePure(args: util.ArrayList[SValue]): SValue = {\n      getSException(args, 0) match {\n        case SBuiltinException(ArithmeticError) =>\n          SBool(true)\n        case SBuiltinException(_) | SAnyException(_, _) =>"
  },
  {
    "id" : "e70d1612-f670-4260-ab80-ca9c75e89d7e",
    "prId" : 9572,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d509ce7-ff0a-4e40-82bc-ca4c2f07ca2c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "why does the operation need to store the template id?",
        "createdAt" : "2021-05-05T10:18:33Z",
        "updatedAt" : "2021-05-05T10:23:36Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "10ca7c06-3682-4c83-a604-5a19dc9ad115",
        "parentId" : "1d509ce7-ff0a-4e40-82bc-ca4c2f07ca2c",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "`SEImport` used it in the case of `handleInputKeyFound`, required the type. \r\nThe type is actually not used in the case of single contract ID, we could use a dummy (wrong !) type instead but I do not really like that.  ",
        "createdAt" : "2021-05-05T11:09:40Z",
        "updatedAt" : "2021-05-05T11:09:40Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "547cdddfd544f4d172840558388b408b9da7a788",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +1229,1233 @@\n  private[this] object KeyOperation {\n    final class Fetch(override val templateId: TypeConName) extends KeyOperation {\n      override def handleInputKeyNotFound(machine: Machine): Boolean =\n        machine.tryHandleSubmitMustFail()"
  },
  {
    "id" : "211a17bb-775e-447a-87cb-ee6149a737ec",
    "prId" : 9572,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d573e8a5-cc4d-453c-87e6-89d9aa37e738",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "where is this used?",
        "createdAt" : "2021-05-05T10:19:09Z",
        "updatedAt" : "2021-05-05T10:23:36Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "497adb7f-b1cb-49ac-b6e1-80c21cd6e98e",
        "parentId" : "d573e8a5-cc4d-453c-87e6-89d9aa37e738",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "in `cidImport`, just 2 lines under.",
        "createdAt" : "2021-05-05T11:07:17Z",
        "updatedAt" : "2021-05-05T11:07:17Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "547cdddfd544f4d172840558388b408b9da7a788",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1204,1208 @@  private[this] abstract class KeyOperation {\n    val templateId: TypeConName\n    private[this] val typ = AstUtil.TContractId(Ast.TTyCon(templateId))\n\n    final protected def importCid(cid: V.ContractId): SEImportValue ="
  },
  {
    "id" : "211c821c-9b5a-4fc7-a6ce-794623d57dc1",
    "prId" : 9537,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ad1ef69-a1cc-43d7-8ab7-bd37ae1516ed",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n    abstract class KeyOperation\r\n```",
        "createdAt" : "2021-05-03T13:33:12Z",
        "updatedAt" : "2021-05-03T13:34:17Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "4015a800-7be8-4099-b271-1788bb1ca54e",
        "parentId" : "8ad1ef69-a1cc-43d7-8ab7-bd37ae1516ed",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why is that better?",
        "createdAt" : "2021-05-03T13:36:27Z",
        "updatedAt" : "2021-05-03T13:36:27Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9ddb434cf0a7428d7a45fd74994043ae750b748",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +1218,1222 @@    private[this] val typ = AstUtil.TContractId(Ast.TTyCon(templateId))\n\n    sealed trait KeyOperation {\n      // Callback from the engine returned NotFound\n      def handleKeyNotFound(machine: Machine): Boolean"
  },
  {
    "id" : "36e535f9-8d7a-4490-8510-537bb296a5e8",
    "prId" : 9470,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9470",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6aa81b44-753e-4326-b5bb-a02a3c5e875e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Note that this is not cached, I’ll implement caching on top of #9451 which provides the necessary infrastructure.",
        "createdAt" : "2021-04-22T06:32:28Z",
        "updatedAt" : "2021-04-22T16:40:42Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c9e2aa5036c7c7e1e1607be33f9ce9a33af26dc",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1189,1193 @@          val stakeholders = cachedContract.signatories union cachedContract.observers\n          throw SpeedyHungry(\n            SResultNeedLocalKeyVisible(\n              stakeholders,\n              onLedger.committers,"
  },
  {
    "id" : "116b93ea-be52-4580-952d-662536a28149",
    "prId" : 9328,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9328",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb6e3cbd-20b0-4c7d-bbeb-502232a88536",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I don’t like computing this at runtime all that much. I’m not really worried about performance and it seems nicer than what we had before but if someone has a better proposal I’m all ears.",
        "createdAt" : "2021-04-06T14:32:13Z",
        "updatedAt" : "2021-04-06T14:32:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "efcc6bbc-f680-4369-9cda-4e9c987c5db0",
        "parentId" : "eb6e3cbd-20b0-4c7d-bbeb-502232a88536",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "This function should be called really infrequently, so I think it should be fine.",
        "createdAt" : "2021-04-07T12:36:13Z",
        "updatedAt" : "2021-04-07T12:36:40Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "3f09425e-bca3-4cae-a81a-1ff2cf4aa8b8",
        "parentId" : "eb6e3cbd-20b0-4c7d-bbeb-502232a88536",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I agree. Can't imagine there is any perf issue here.",
        "createdAt" : "2021-04-07T13:12:46Z",
        "updatedAt" : "2021-04-07T13:13:06Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "700b611fa57756023bccfe4aa09ce6ab16a3a5c2",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1564,1568 @@      args.get(0) match {\n        case SAnyException(ty, innerValue) =>\n          machine.ctrl = SEApp(exceptionMessage(ty), Array(SEValue(innerValue)))\n        case v =>\n          crash(s\"AnyExceptionMessage applied to non-AnyException: $v\")"
  },
  {
    "id" : "2488157a-de79-4680-8d0a-a5741d17a9df",
    "prId" : 9242,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9242",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4b0239b-ee4a-4ae7-8a0f-5d06687229db",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "same here.",
        "createdAt" : "2021-03-25T13:59:32Z",
        "updatedAt" : "2021-03-25T17:33:00Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f83996b9f4da8fbbcfb3c2dd9f3c37769d5b506",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +631,635 @@  final case object SBMapDelete extends SBuiltinPure(2) {\n    override private[speedy] final def executePure(args: util.ArrayList[SValue]): SValue =\n      getSMap(args, 1).delete(getSMapKey(args, 0))\n  }\n"
  },
  {
    "id" : "679d27df-8b6a-416f-9351-135fc940cbc4",
    "prId" : 9241,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1233ccf0-e6a9-4094-acb3-bf43562dfbd7",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "seems like we should be able to factor something out of the form `getX[T: ClassTig](args: util.ArrayList[SValue], i: Int): T`. Not sure if it’s worth doing but maybe at least worth considering.",
        "createdAt" : "2021-03-25T12:59:26Z",
        "updatedAt" : "2021-03-25T13:43:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "acfba289-b179-4ca4-9db9-1fbb4244cdfc",
        "parentId" : "1233ccf0-e6a9-4094-acb3-bf43562dfbd7",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "for another PR.",
        "createdAt" : "2021-03-25T13:22:36Z",
        "updatedAt" : "2021-03-25T13:43:30Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7864993b6179d37e9312ad8411612a028aa7aedc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +45,49 @@  private[speedy] def execute(args: util.ArrayList[SValue], machine: Machine): Unit\n\n  final protected def getSBool(args: util.ArrayList[SValue], i: Int): Boolean =\n    args.get(i) match {\n      case SBool(value) => value"
  },
  {
    "id" : "40fad651-2b3b-4786-a80b-a9d2f3c66e0c",
    "prId" : 9241,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2b5db68-fb57-47ea-80c9-1dc76099a3b5",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This is a change in semantic, you now won’t crash if this is used incorrectly in on-ledger mode. I don’t really see an issue with this but was this intentional?",
        "createdAt" : "2021-03-25T13:01:44Z",
        "updatedAt" : "2021-03-25T13:43:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "27f59bd6-e377-4fc9-b74a-2fdb12ec5e31",
        "parentId" : "c2b5db68-fb57-47ea-80c9-1dc76099a3b5",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "It was intentional. i will revert it as it is not really in the general scope of the PR. ",
        "createdAt" : "2021-03-25T13:23:20Z",
        "updatedAt" : "2021-03-25T13:43:30Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "08e6a2af-e047-42ab-9ce3-1787e59d491f",
        "parentId" : "c2b5db68-fb57-47ea-80c9-1dc76099a3b5",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "fine to keep it as well, just wanted to doublecheck",
        "createdAt" : "2021-03-25T13:25:41Z",
        "updatedAt" : "2021-03-25T13:43:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "7864993b6179d37e9312ad8411612a028aa7aedc",
    "line" : 298,
    "diffHunk" : "@@ -1,1 +450,454 @@          machine.returnValue = SOptional(Some(SText(coid)))\n        case _ =>\n          machine.returnValue = SValue.SValue.None\n      }\n    }"
  },
  {
    "id" : "99e3e4dc-7277-4e83-b1c5-3b490328990c",
    "prId" : 9241,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1d925a4-5eb4-4c37-8e8b-207fc2e7b800",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "```suggestion\r\n      for (i <- 0 until updateFields.length) {\r\n        values2.set(updateFields(i), args.get(i + 1))\r\n```",
        "createdAt" : "2021-03-25T13:16:43Z",
        "updatedAt" : "2021-03-25T13:43:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "044a0d6c-925f-408a-9913-85600ec553a2",
        "parentId" : "b1d925a4-5eb4-4c37-8e8b-207fc2e7b800",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "maybe for another PR. ",
        "createdAt" : "2021-03-25T13:43:38Z",
        "updatedAt" : "2021-03-25T13:43:39Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7864993b6179d37e9312ad8411612a028aa7aedc",
    "line" : 676,
    "diffHunk" : "@@ -1,1 +793,797 @@      while (i < updateFields.length) {\n        values2.set(updateFields(i), args.get(i + 1))\n        i += 1\n      }\n      record.copy(values = values2)"
  },
  {
    "id" : "25cbe354-f9fa-4c61-a76f-07a6f29f327f",
    "prId" : 9220,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ae8c4ff-ef7d-4dd0-89c5-dac17987319a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Does this strip trailing zeroes or do we rely on `SBigNumeric` already being in a form where we don’t have trailing zeros?",
        "createdAt" : "2021-03-24T10:28:32Z",
        "updatedAt" : "2021-03-24T16:33:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a50fe8a8-58b1-4edd-bf33-cd347e6f5780",
        "parentId" : "6ae8c4ff-ef7d-4dd0-89c5-dac17987319a",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "`x` is always without trailing.  It is normalized in the constructor.\r\n",
        "createdAt" : "2021-03-24T13:20:40Z",
        "updatedAt" : "2021-03-24T16:33:01Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "4e8f4689-680b-49d0-8e55-d04491ea3164",
        "parentId" : "6ae8c4ff-ef7d-4dd0-89c5-dac17987319a",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```\r\n  final def toString(x: BigDecimal): String = {\r\n    val s = x.toPlainString\r\n    if (x.scale <= 0) s + \".\" else s\r\n```",
        "createdAt" : "2021-03-24T13:38:34Z",
        "updatedAt" : "2021-03-24T16:33:01Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b3bc6f9c9b2c09833ea1ab5f430d116c499dafa",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +316,320 @@        case SUnit => s\"<unit>\"\n        case SDate(date) => date.toString\n        case SBigNumeric(x) => Numeric.toString(x)\n        case SContractId(_) | SNumeric(_) => crash(\"litToText: literal not supported\")\n      })"
  },
  {
    "id" : "48c11812-25c0-45c0-a4b6-e5668398f5de",
    "prId" : 9220,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd07d74c-5903-4d89-af04-d5f9091576e6",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Do we have any policy around using `asInstanceOf` over pattern matching in builtins? It seems to be a bit of a mix between different builtins and I don’t really know when we use one over the other.",
        "createdAt" : "2021-03-24T10:29:57Z",
        "updatedAt" : "2021-03-24T16:33:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9be63fb4-e33a-4ed6-ade3-1d1c610aa375",
        "parentId" : "fd07d74c-5903-4d89-af04-d5f9091576e6",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "No real policy. If you prefer pattern matching, I will change it. ",
        "createdAt" : "2021-03-24T13:22:11Z",
        "updatedAt" : "2021-03-24T16:33:01Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "9c545af0-4151-44f9-bcc4-e1df296af5df",
        "parentId" : "fd07d74c-5903-4d89-af04-d5f9091576e6",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I don’t (in this instance), I’m perfectly fine keeping it. I was more curious if I should keep something in mind for when I touch this next.",
        "createdAt" : "2021-03-24T13:24:45Z",
        "updatedAt" : "2021-03-24T16:33:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b3bc6f9c9b2c09833ea1ab5f430d116c499dafa",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +856,860 @@  final object SBScaleBigNumeric extends SBuiltinPure(1) {\n    override private[speedy] def executePure(args: util.ArrayList[SValue]): SInt64 = {\n      val x = args.get(0).asInstanceOf[SBigNumeric].value\n      SInt64(x.scale().toLong)\n    }"
  },
  {
    "id" : "4446e0d1-b5f7-4a2e-a190-341090a7db60",
    "prId" : 9220,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "751c207d-1333-4aa7-87d8-7fef7ca682bf",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What happens for invalid scales? Does this crash or default to something weird?",
        "createdAt" : "2021-03-24T12:40:22Z",
        "updatedAt" : "2021-03-24T16:33:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ed69509e-9456-46eb-bdb6-c717b8d19445",
        "parentId" : "751c207d-1333-4aa7-87d8-7fef7ca682bf",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "If scale is invalid, it crashes.",
        "createdAt" : "2021-03-24T13:22:58Z",
        "updatedAt" : "2021-03-24T16:33:01Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b3bc6f9c9b2c09833ea1ab5f430d116c499dafa",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +896,900 @@      val scale = rightOrCrash(SBigNumeric.checkScale(args.get(0).asInstanceOf[SInt64].value))\n      val roundingMode =\n        java.math.RoundingMode.valueOf(args.get(1).asInstanceOf[SInt64].value.toInt)\n      val x = args.get(2).asInstanceOf[SBigNumeric].value\n      val y = args.get(3).asInstanceOf[SBigNumeric].value"
  },
  {
    "id" : "1192747f-ef0a-4776-b958-0fad6df377a1",
    "prId" : 9192,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1572ddfa-1581-486b-82e6-7025ae295f85",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "We need to check the that coid has the proper type. \r\n \r\n",
        "createdAt" : "2021-03-22T08:27:55Z",
        "updatedAt" : "2021-03-22T12:25:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "7bd50717-23cb-4a36-89a8-0c08e95064d5",
        "parentId" : "1572ddfa-1581-486b-82e6-7025ae295f85",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Added in 5d3a7eb2274f0cebbc499e768391ae94113502c0 and added a test in cee52077c3a510f6e4e713bfd5af0db284363a87 which fails without this change.",
        "createdAt" : "2021-03-22T10:33:38Z",
        "updatedAt" : "2021-03-22T12:25:07Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "220e52fb3b287fd25f626355bc15755008ca9467",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +1009,1013 @@            machine.returnValue = contract\n        case None =>\n          onLedger.cachedContracts.get(coid) match {\n            case Some(cached) =>\n              if (cached.templateId != templateId) {"
  },
  {
    "id" : "b71591f3-24ac-4701-9081-48b329c0e919",
    "prId" : 8983,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "559288cc-34d0-4ed1-90b3-36614fbfe90e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "is there a reason why we cannot extend `OnLedgerBuiltin`?",
        "createdAt" : "2021-03-05T11:36:53Z",
        "updatedAt" : "2021-03-05T11:37:11Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b17d4fce-caca-4be6-bde6-401bceee6b46",
        "parentId" : "559288cc-34d0-4ed1-90b3-36614fbfe90e",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Yes, probably could here.",
        "createdAt" : "2021-03-05T13:45:32Z",
        "updatedAt" : "2021-03-05T13:45:33Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3c1cdcd72586caaf1a68ac712450bf8d94ebe0f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1396,1400 @@      args.get(0) match {\n        case SOptional(opt) =>\n          machine.withOnLedger(\"SBTryHandler\") { onLedger =>\n            opt match {\n              case None =>"
  },
  {
    "id" : "1f93a14c-5ffe-4f6e-8c2d-c95fca8ad7a5",
    "prId" : 8612,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acdc5628-8ef3-461d-befa-3b9c76637550",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "As far as I can tell, the only reason why `SAnyException` is different from `SAny` is the reference to the message function. But we already have the type here which afaict, is sufficient to get a reference to the message function. Should we aim to unify the two?",
        "createdAt" : "2021-02-11T08:50:15Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "abfa59aa-a266-4557-8108-fcd22b6b79f2",
        "parentId" : "acdc5628-8ef3-461d-befa-3b9c76637550",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I don't know what the mechanism would be to access the message function from the type at speedy runtime.",
        "createdAt" : "2021-02-11T11:31:26Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "141cd728-b1b4-45e4-946a-1e415ddf8353",
        "parentId" : "acdc5628-8ef3-461d-befa-3b9c76637550",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I don't think we would get anything from unifying SAny and SAnyException. But I also think it's strange to be carrying around a `messageFunction` when the type field should tell you how to find that function. (Indeed messageFunction seems to just be `compileExceptionType(ty)`? I'm sure I'm missing something...)\r\n",
        "createdAt" : "2021-02-11T12:33:23Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a7c69fbff2aaee6c8500bf0826a79cf0cd9f356",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +1467,1471 @@    ): Unit = {\n      args.get(0) match {\n        case SAnyException(_, messageFunction, innerValue) =>\n          machine.ctrl = SEApp(messageFunction, Array(SEValue(innerValue)))\n        case v =>"
  },
  {
    "id" : "22da0dfd-7446-46c6-8a1f-108a34c22074",
    "prId" : 8036,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8036",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "385bd7c3-7d09-48a8-98c8-1ce635562d47",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I really like that we can put trailing commas here. That often helps with keeping diffs smaller and in this particular case it does indeed make the diff one line shorter. 😃\r\n```suggestion\r\n                machine.actuals,\r\n```",
        "createdAt" : "2020-11-24T15:49:13Z",
        "updatedAt" : "2020-11-25T12:00:43Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "da175325464f7d811e228324f060b59a15d43897",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +513,517 @@                init,\n                machine.frame,\n                machine.actuals\n              ))\n            machine.enterApplication(func, Array(SEValue(head)))"
  },
  {
    "id" : "9f76dbbb-35c3-43b2-bb12-b93861e7c7aa",
    "prId" : 8036,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8036",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51a2d85b-c460-45c6-a47c-7d961efe7568",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Don't we need to pop from the environment here as well to enable tail call optimization for `foldl`? Either way, let's make sure we add a test to ensure that `foldl` does indeed not consume stack in the follow-up PR containing the tests for TCO.",
        "createdAt" : "2020-11-24T17:44:40Z",
        "updatedAt" : "2020-11-25T12:00:43Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "6c016ba4-913f-4b7b-8f93-14512482f507",
        "parentId" : "51a2d85b-c460-45c6-a47c-7d961efe7568",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I dont think so.\r\n- The pop will occur when we process the return value `machine.returnValue = init` in the top level `run` loop, on the next step.\r\n- (And we didn't call `markBase` when we pushed this continuation.)\r\n",
        "createdAt" : "2020-11-25T11:50:33Z",
        "updatedAt" : "2020-11-25T12:00:43Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "c6117db1-9683-4828-add4-7754b2cbdd8b",
        "parentId" : "51a2d85b-c460-45c6-a47c-7d961efe7568",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Either way. Let's make sure we have tests showing this runs in constant stack space.",
        "createdAt" : "2020-11-25T13:24:17Z",
        "updatedAt" : "2020-11-25T13:24:17Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "37963e74-9948-4722-82f3-6f9bb0d1da74",
        "parentId" : "51a2d85b-c460-45c6-a47c-7d961efe7568",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : ":+1: ",
        "createdAt" : "2020-11-25T13:52:49Z",
        "updatedAt" : "2020-11-25T13:52:49Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "da175325464f7d811e228324f060b59a15d43897",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +444,448 @@      val init = args.get(1)\n      val list = args.get(2).asInstanceOf[SList].list\n      machine.pushKont(\n        KFoldl(\n          func,"
  },
  {
    "id" : "60ba731f-6d7c-4437-98d8-e88b2c7b81fd",
    "prId" : 7778,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf16cecb-eb9c-480e-9cbe-15d2a27ebbdd",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Why not adding a comment to explicate that this is a non-optimize form of `SBStructProj`",
        "createdAt" : "2020-10-22T12:04:03Z",
        "updatedAt" : "2020-10-23T11:11:16Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "d476fab3-9a79-4cbf-bb17-cb67c8de1104",
        "parentId" : "cf16cecb-eb9c-480e-9cbe-15d2a27ebbdd",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Good idea. I'll do that.",
        "createdAt" : "2020-10-22T12:18:53Z",
        "updatedAt" : "2020-10-23T11:11:16Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ef549582f052ca0d9abd09ff2f154d159b01849",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +801,805 @@  // This is a slower version of `SBStructProj` for the case when we didn't run\n  // the DAML-LF type checker and hence didn't infer the field index.\n  final case class SBStructProjByName(field: Ast.FieldName) extends SBuiltinPure(1) {\n    override private[speedy] final def executePure(args: util.ArrayList[SValue]): SValue = {\n      args.get(0) match {"
  },
  {
    "id" : "93eccbd5-ae64-4488-af33-9b9ae3449597",
    "prId" : 7501,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0fe4d16-a30c-4178-b731-faf4efd9a280",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n        onLedger: OnLedger,\r\n    ): Unit =\r\n```",
        "createdAt" : "2020-09-29T07:42:32Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "84b849bd-321f-4f0d-be1b-1ef427fe09b2",
        "parentId" : "a0fe4d16-a30c-4178-b731-faf4efd9a280",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "You really love your trailing commas :slightly_smiling_face: ",
        "createdAt" : "2020-09-29T07:52:47Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "b25c1c36b2946c9654397dda20c730c43a9168fc",
    "line" : 394,
    "diffHunk" : "@@ -1,1 +1280,1284 @@        args: util.ArrayList[SValue],\n        machine: Machine,\n        onLedger: OnLedger): Unit =\n      onLedger.ptx\n        .finish("
  },
  {
    "id" : "6cc52de1-2fa6-43e2-800f-35a56116d9ae",
    "prId" : 7319,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7319",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4376bc2e-4372-488a-b526-e8f3a7839657",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe worth adding a comment that the reason we need to preserve the order is to preserve evaluation order?",
        "createdAt" : "2020-09-04T08:26:51Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "de382b21-c221-4a2a-95fe-6f37257b817f",
        "parentId" : "4376bc2e-4372-488a-b526-e8f3a7839657",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "done",
        "createdAt" : "2020-09-04T09:07:15Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +820,824 @@  // evaluation order of unordered fields.\n  /** $tcon[fields] :: a -> b -> ... -> Struct */\n  final case class SBStructCon(inputFieldsOrder: Struct[Int])\n      extends SBuiltinPure(inputFieldsOrder.size) {\n    private[this] val fieldNames = inputFieldsOrder.mapValues(_ => ())"
  },
  {
    "id" : "a181d4a8-c555-4ada-b7ab-91c6cc64456f",
    "prId" : 7319,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7319",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5aadead1-8995-403d-addd-00a531902355",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I like how we pushed the sorting to compile time and keep it cheap at runtime.\r\n\r\nI'm wondering if there's a way to avoid allocating a second array and reuse the `args` array instead? I couldn't come up quickly with a simple way myself though.",
        "createdAt" : "2020-09-04T11:01:58Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "bc5f294f-f930-4cfa-b4f4-1f8eb48b5666",
        "parentId" : "5aadead1-8995-403d-addd-00a531902355",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "The simplest I could find (while keeping runtime cheap) is as follow. I am not sure it is worthwhile.\r\n\r\n```scala\r\n  // SBStructCon sorts the field after evaluation of its arguments to preserve\r\n  // evaluation order of unordered fields.\r\n  /** $tcon[fields] :: a -> b -> ... -> Struct */\r\n  final case class SBStructCon(inputFieldsOrder: Struct[Int])\r\n      extends SBuiltinPure(inputFieldsOrder.size) {\r\n\r\n    override private[speedy] final def executePure(args: util.ArrayList[SValue]): SValue = {\r\n      order(args)\r\n      SStruct(fieldNames, args)\r\n    }\r\n\r\n    private[this] val fieldNames = inputFieldsOrder.mapValues(_ => ())\r\n\r\n    private[this] val permutations: List[(Int, List[Int])] = {\r\n\r\n      val mapping = Array.ofDim[Int](inputFieldsOrder.size)\r\n      mapping.indices.foreach { i =>\r\n        mapping(inputFieldsOrder.toImmArray(i)._2) = i\r\n      }\r\n\r\n      @tailrec\r\n      def loop1(toVisit: Set[Int], acc: List[(Int, List[Int])]): List[(Int, List[Int])] =\r\n        if (toVisit.isEmpty)\r\n          acc\r\n        else {\r\n          val next = toVisit.head\r\n          val (nextToVisit, perm @ (_, others)) = loop2(toVisit - next, next, List.empty)\r\n          val nextAcc = if (others.isEmpty) acc else perm :: acc\r\n          loop1(nextToVisit, nextAcc)\r\n        }\r\n\r\n      @tailrec\r\n      def loop2(toVisit: Set[Int], curr: Int, previous: List[Int]): (Set[Int], (Int, List[Int])) = {\r\n        val next = mapping(curr)\r\n        if (toVisit(next))\r\n          loop2(toVisit - next, next, curr :: previous)\r\n        else\r\n          (toVisit, (curr, previous))\r\n      }\r\n\r\n      loop1(mapping.toSet, List.empty)\r\n    }\r\n\r\n    @inline\r\n    private[this] def order[X](a: util.ArrayList[X]): Unit =\r\n      permutations.foreach {\r\n        case (first, others) =>\r\n          var i = first\r\n          val tmp = a.get(i)\r\n          others.foreach { j =>\r\n            a.set(i, a.get(j))\r\n            i = j\r\n          }\r\n          a.set(i, tmp)\r\n      }\r\n  }\r\n```",
        "createdAt" : "2020-09-04T14:47:18Z",
        "updatedAt" : "2020-09-04T17:38:52Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "ea42150c-84d8-4bae-9c18-ca082996c619",
        "parentId" : "5aadead1-8995-403d-addd-00a531902355",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This seems to be a lot of complexity for a gain we can't properly quantify yet. Thus, I'd say it's not worthwhile for now.",
        "createdAt" : "2020-09-07T13:15:54Z",
        "updatedAt" : "2020-09-07T13:15:54Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +826,830 @@      val sortedFields = new util.ArrayList[SValue](inputFieldsOrder.size)\n      inputFieldsOrder.values.foreach(i => sortedFields.add(args.get(i)))\n      SStruct(fieldNames, sortedFields)\n    }\n  }"
  },
  {
    "id" : "109bc4a8-6921-4ac1-b1aa-742ca4079a3b",
    "prId" : 6996,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6996",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80ea8101-7a3f-40f8-8119-ca859711e831",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n  protected def executePure(args: util.ArrayList[SValue]): SValue\r\n```",
        "createdAt" : "2020-08-05T08:07:59Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "54a5b734-7792-4403-ba9c-e2d3eb631645",
        "parentId" : "80ea8101-7a3f-40f8-8119-ca859711e831",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : " We can't make this change, because we need `executePure` to be called from `SExpr` (in the coming ANF PR).\r\n",
        "createdAt" : "2020-08-05T08:29:43Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "51580e2c2216065e1c811d4b06d34b142c5cc6d2",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +57,61 @@  /** Execute the (pure) builtin with 'arity' number of arguments in 'args'.\n    Returns the resulting value */\n  private[speedy] def executePure(args: util.ArrayList[SValue]): SValue\n}\n"
  },
  {
    "id" : "e03bc7bf-376f-490a-ae14-ebcdbe57e96d",
    "prId" : 6996,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6996",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d01f03ec-bcc1-4219-bbd1-5390a38d0734",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n    override protected final def executePure(args: util.ArrayList[SValue]): SValue = {\r\n```",
        "createdAt" : "2020-08-05T08:08:34Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "51580e2c2216065e1c811d4b06d34b142c5cc6d2",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +179,183 @@  sealed abstract class SBBinaryOpNumeric(op: (Numeric, Numeric) => Numeric)\n      extends SBuiltinPure(3) {\n    override private[speedy] final def executePure(args: util.ArrayList[SValue]): SValue = {\n      val scale = args.get(0).asInstanceOf[STNat].n\n      val a = args.get(1).asInstanceOf[SNumeric].value"
  },
  {
    "id" : "dc358cc1-0489-4bbd-a8b9-4f91406bda3f",
    "prId" : 6996,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6996",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70ae4f91-813b-4387-9934-c4248fc9cfea",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n    override protected final def executePure(args: util.ArrayList[SValue]): SValue = {\r\n```",
        "createdAt" : "2020-08-05T08:09:30Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "51580e2c2216065e1c811d4b06d34b142c5cc6d2",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +207,211 @@\n  final case object SBRoundNumeric extends SBuiltinPure(3) {\n    override private[speedy] final def executePure(args: util.ArrayList[SValue]): SValue = {\n      val scale = args.get(0).asInstanceOf[STNat].n\n      val prec = args.get(1).asInstanceOf[SInt64].value"
  },
  {
    "id" : "9f770b4e-3ba1-4a91-81ac-5756159cf181",
    "prId" : 6996,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6996",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5c1453a-743f-470c-9528-9ee68dd3f72d",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Would it make sense to put some sort of inlining annotation here?",
        "createdAt" : "2020-08-05T08:30:04Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "40654467-a378-4cbc-84d6-eee24a0bb43c",
        "parentId" : "e5c1453a-743f-470c-9528-9ee68dd3f72d",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "my earlier experience is that this kind of attempted micro optimization has no benefit.\r\n",
        "createdAt" : "2020-08-05T08:36:24Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "51580e2c2216065e1c811d4b06d34b142c5cc6d2",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +48,52 @@private[speedy] sealed abstract class SBuiltinPure(val arity1: Int) extends SBuiltin(arity1) {\n\n  override private[speedy] final def execute(\n      args: util.ArrayList[SValue],\n      machine: Machine,"
  },
  {
    "id" : "4e8de249-9eeb-49c1-bdc7-6563a14a8344",
    "prId" : 6828,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6828",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "860b92f3-1e1d-488e-9df0-9f80314b55fd",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This will be run on every value we get from the ledger and should hence rather be fast. Do we have any idea how expensive `contains` is? Does it get more expensive as we add more versions?",
        "createdAt" : "2020-08-10T13:47:30Z",
        "updatedAt" : "2020-08-13T18:22:56Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "5be349f3-c21a-4e38-99f3-b70a312b870a",
        "parentId" : "860b92f3-1e1d-488e-9df0-9f80314b55fd",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "This is not particularly optimized. However I think this should be pretty negligible in comparison of the three passes of translations the value traverses (proto to java, java to LF Value, LF Value to Speedy values).\r\n\r\nThis gets also more expensive as we add more versions. If this becomes an issue,  we could just add a cache in `VersionRange#contains` ",
        "createdAt" : "2020-08-10T14:16:41Z",
        "updatedAt" : "2020-08-13T18:22:56Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "8480af25-365e-48e8-baa4-1869867b8ddd",
        "parentId" : "860b92f3-1e1d-488e-9df0-9f80314b55fd",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I see. Thanks for the explanation.",
        "createdAt" : "2020-08-10T15:04:23Z",
        "updatedAt" : "2020-08-13T18:22:56Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0a8ac29dc0000fb043ddb635bc6d6a3895606ba",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1028,1032 @@                    if (actualTmplId != templateId)\n                      SEDamlException(DamlEWronglyTypedContract(coid, templateId, actualTmplId))\n                    else if (!machine.inputValueVersions.contains(version))\n                      SEDamlException(\n                        DamlEDisallowedInputValueVersion(machine.inputValueVersions, version),"
  },
  {
    "id" : "2c775934-c1dd-41a3-b966-55557775433f",
    "prId" : 6613,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6613",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00957048-9616-4246-92cf-c23085e87364",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n      machine: Machine,\r\n    ): Unit = {\r\n```\r\n\r\nNot a big deal, though. This syntax for multi line arguments helps future diff/merge.\r\n",
        "createdAt" : "2020-07-07T07:23:58Z",
        "updatedAt" : "2020-07-07T07:30:42Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "95e4b016-4ff8-4f37-829e-74e9fedcb33c",
        "parentId" : "00957048-9616-4246-92cf-c23085e87364",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Thanks\r\nShould this be the style output by `scalafmt` then?\r\n(Or can that not happen because it requires the programmer to write the trailing `,` ?)",
        "createdAt" : "2020-07-07T07:39:34Z",
        "updatedAt" : "2020-07-07T07:46:11Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "9e03fa50-0b33-4fc2-9a42-57f89cec4642",
        "parentId" : "00957048-9616-4246-92cf-c23085e87364",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "We had some issues with IntelliJ making scalafmt output a trailing comma before. This might now be fixed in the latest version of IntelliJ 2019; haven't tested it. I expect we'll need to upgrade to IntelliJ 2020 before we can, though, which means waiting for the Bazel plugin to support it.",
        "createdAt" : "2020-07-07T07:51:42Z",
        "updatedAt" : "2020-07-07T07:51:42Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae8c8d81c4420164bf92141b4a2b1110c3bf8f16",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +50,54 @@  override private[speedy] final def executeEffect(\n      args: util.ArrayList[SValue],\n      machine: Machine): Unit = {\n    machine.returnValue = execute(args)\n  }"
  },
  {
    "id" : "5d76aa4e-ab63-4739-9ee3-24a97ced4384",
    "prId" : 6440,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a128e45-8a39-46bd-b83f-8a23c685ce71",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Is this `TODO` crucial for this PR to work or something you want to address in a follow-up PR?",
        "createdAt" : "2020-06-26T11:15:52Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "faf84fa6-267c-411b-ab19-0dbb542898ee",
        "parentId" : "6a128e45-8a39-46bd-b83f-8a23c685ce71",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Yup, we made this issue #6523",
        "createdAt" : "2020-06-30T15:00:56Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +49,53 @@\nsealed abstract class SBuiltin(val arity1: Int) extends SBuiltinMaybeHungry(arity1) {\n  // TODO: define evaluate, and convert all subclasses to this simpler form\n  // def evaluate(args: util.ArrayList[SValue]): SValue\n  // Then execute can be defined in terms of evaluate. Like how it is done in `SExprAtomic`."
  },
  {
    "id" : "abd996b6-7308-42de-90aa-9de98c050933",
    "prId" : 6440,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f2fb40b-a358-4c57-9262-d1e8589f9ccd",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Does the `1` in `arity1` have a meaning? To me it looks just like `arity`.",
        "createdAt" : "2020-06-26T11:16:18Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "b0da6762-aa02-4334-ba2f-c77fa698179f",
        "parentId" : "1f2fb40b-a358-4c57-9262-d1e8589f9ccd",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Scala wont let this variable be named `arity`. I assume because it already in scope in a parent class. Hence the suffix `1`",
        "createdAt" : "2020-06-30T15:01:45Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "dd72af91-9ae0-4b36-9ac2-be6bef35d92c",
        "parentId" : "1f2fb40b-a358-4c57-9262-d1e8589f9ccd",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I sadly understand.",
        "createdAt" : "2020-06-30T16:45:02Z",
        "updatedAt" : "2020-06-30T16:46:27Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +48,52 @@}\n\nsealed abstract class SBuiltin(val arity1: Int) extends SBuiltinMaybeHungry(arity1) {\n  // TODO: define evaluate, and convert all subclasses to this simpler form\n  // def evaluate(args: util.ArrayList[SValue]): SValue"
  },
  {
    "id" : "547ab1b3-9f12-4afb-8246-39ca1bfc57fe",
    "prId" : 5811,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "134684dc-f0a6-4d9f-8027-5c357ba75f9a",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "@nickchapman-da @remyhaemmerle-da What's _operational_ the difference between\r\n```scala\r\nmbCoid.map(SContractId)\r\n```\r\nand\r\n```scala\r\nmbCoid.map { coid => SContractId(coid) }\r\n```\r\nIn other words, why would you eta-expand? I've seen changes like this in other places too.",
        "createdAt" : "2020-05-06T09:22:19Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "eef4e311-ddf8-432c-8d26-10e5eb255d17",
        "parentId" : "134684dc-f0a6-4d9f-8027-5c357ba75f9a",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I do not think there is any operational difference. \r\nHowever  `machine.returnValue = SOptional(mbCoid.map(SContractId))` is more idiomatic. ",
        "createdAt" : "2020-05-06T11:41:25Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c2135df19e6e634bb3ec4f79f8e5a9f72018f96",
    "line" : 765,
    "diffHunk" : "@@ -1,1 +980,984 @@          machine.returnValue = SOptional(mbCoid.map { coid =>\n            SContractId(coid)\n          })\n        case None =>\n          // if we cannot find it here, send help, and make sure to update [[PartialTransaction.key]] after"
  },
  {
    "id" : "ca649605-1c0a-473c-9b58-29cba486f3d3",
    "prId" : 5811,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a0daed9-24ae-4262-9816-6c5e877df3a7",
        "parentId" : null,
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "should this be: `machine.returnValue = SV.None` ?",
        "createdAt" : "2020-05-06T12:19:18Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "8dda8a8c-2a58-4448-be84-7bd81b6a37cc",
        "parentId" : "4a0daed9-24ae-4262-9816-6c5e877df3a7",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "and some other places",
        "createdAt" : "2020-05-06T12:20:43Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "b4d7afd4-f441-4084-be2b-5f4945735839",
        "parentId" : "4a0daed9-24ae-4262-9816-6c5e877df3a7",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "The `machine.returnValue = ` is in line 343.",
        "createdAt" : "2020-05-06T12:23:30Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c2135df19e6e634bb3ec4f79f8e5a9f72018f96",
    "line" : 252,
    "diffHunk" : "@@ -1,1 +355,359 @@            SOptional(Some(SNumeric(Numeric.assertFromBigDecimal(scale, BigDecimal(newString)))))\n          } else {\n            SV.None\n          }\n        case _ =>"
  },
  {
    "id" : "011d771f-c99b-4c88-9868-299500dca4db",
    "prId" : 5361,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5361",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7de4117-f2a0-476d-838f-ea9653ed7885",
        "parentId" : null,
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "I wonder whether you want to check here that the contract ID in `args0` does not clash w.r.t. discriminators. If we reinterpret a tree, the contract ID might come from a `fetchByKey` construct which is translated into a fetch node only. So the fetched contract ID might come out of nowhere. But I'm not sure whether this can happen on this code path.",
        "createdAt" : "2020-04-02T10:23:47Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "613c1fd5-3a54-4ccb-93c6-baf1781a1d1e",
        "parentId" : "c7de4117-f2a0-476d-838f-ea9653ed7885",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Here I do not want to check the contract in `args0`. \r\nThe check of contract gathering by contract key should be done in  `SBULookupKey` (done) and in `SBUFetchKey` (currently missing) ",
        "createdAt" : "2020-04-02T10:45:21Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "33e121173bce232d87fb34d60de0cb851f4511a9",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +919,923 @@        case SContractId(coid) => coid\n        case v => crash(s\"expected contract id, got: $v\")\n      }\n\n      machine.localContracts.get(coid) match {"
  },
  {
    "id" : "30c6f8a9-2cb7-4fd2-99bb-fa07270ee26b",
    "prId" : 5048,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6adc3c1b-bdea-424a-a901-4e62c1908d8c",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Is the \"positive\" `ValueEnum(Some(id), ...)` missing?\r\n\r\nEdit: Ah no, it's further down. Maybe colocate the two cases?",
        "createdAt" : "2020-03-18T07:09:37Z",
        "updatedAt" : "2020-03-18T12:46:43Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "a58b8b64400741795af304d763a8e244b07dcb09",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +947,951 @@        case V.ValueVariant(None, _variant @ _, _value @ _) =>\n          crash(\"SValue.fromValue: variant without identifier\")\n        case V.ValueEnum(None, constructor @ _) =>\n          crash(\"SValue.fromValue: enum without identifier\")\n        case V.ValueOptional(mbV) =>"
  },
  {
    "id" : "498b5f6f-138b-4fd9-98e9-e0e0fe7c879d",
    "prId" : 3947,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "129fd1ae-48af-4c09-901d-ca35405c60da",
        "parentId" : null,
        "authorId" : "271bdebc-b39f-48aa-b2cd-f3f0324314d5",
        "body" : "this Set is immutable, not sure why `toList.toSet` was there",
        "createdAt" : "2020-01-06T03:10:01Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : "271bdebc-b39f-48aa-b2cd-f3f0324314d5",
        "tags" : [
        ]
      },
      {
        "id" : "2a42d945-47b0-4cbd-805d-cbf309e56f4d",
        "parentId" : "129fd1ae-48af-4c09-901d-ca35405c60da",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : ":+1: \r\n\r\nThe explanation is very simple. If you looked the history of `committer(s)`, you could saw that  it used to be an `Option[Party]`. This line was forgotten when `committer(s)` become a Set.",
        "createdAt" : "2020-01-06T08:39:27Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1008,1012 @@      val contextActors = machine.ptx.context match {\n        case ContextExercises(ctx) => ctx.actingParties union ctx.signatories\n        case ContextRoot => machine.committers\n      }\n"
  },
  {
    "id" : "90247bb8-3473-49ec-9963-fc37aceeed57",
    "prId" : 3734,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "184fa6ca-80e3-4023-bec2-205d5f26615f",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : ":+1: ",
        "createdAt" : "2019-12-04T18:14:51Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +1434,1438 @@              } else {\n                val rn = n.min(Int.MaxValue.toLong).toInt\n                machine.ctrl = CtrlValue(SText(t * rn))\n              }\n            case x =>"
  },
  {
    "id" : "8a77bcf6-40f9-497b-971e-61da4811c223",
    "prId" : 3734,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5747dc3-4afd-4d96-8543-30fa0f7f6b1f",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : ":+1: ",
        "createdAt" : "2019-12-04T18:15:34Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +1452,1456 @@          args.get(1) match {\n            case SText(t) =>\n              val seq : Seq[SValue] = t.split(pattern).map(SText).toSeq\n              machine.ctrl = CtrlValue(SList(FrontStack(seq)))\n            case x =>"
  },
  {
    "id" : "a2a8b59a-0840-4e7d-ae66-d871abd99826",
    "prId" : 3734,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "995adf6a-6c19-4e6a-81c7-dc5dceaea75a",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : ":+1: ",
        "createdAt" : "2019-12-04T18:15:58Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +1477,1481 @@                }\n              }\n              machine.ctrl = CtrlValue(SText(xs.iterator.mkString(sep)))\n            case x =>\n              throw SErrorCrash(s\"type mismatch SBTextIntercalate, expected List got $x\")"
  },
  {
    "id" : "cb92ba92-5546-4d2a-9975-04d6967ba837",
    "prId" : 2905,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccff2e82-f766-43f6-a523-197788ba2d7d",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Shouldn't `SB(To|From)Template` also get a comment like the primitives above have? E.g.\r\n```\r\n/** $error :: Text -> a */\r\n```",
        "createdAt" : "2019-09-16T08:14:40Z",
        "updatedAt" : "2019-09-16T08:56:32Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "c54894c3-d1b3-4cb9-b97e-fe24305b3afb",
        "parentId" : "ccff2e82-f766-43f6-a523-197788ba2d7d",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Good catch, thanks! I’ve added comments.",
        "createdAt" : "2019-09-16T08:25:37Z",
        "updatedAt" : "2019-09-16T08:56:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "758775bac71c51faf20e2552396373a57eb59af9",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1208,1212 @@    *    -> AnyTemplate\n    */\n  final case object SBToAnyTemplate extends SBuiltin(1) {\n    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n      machine.ctrl = CtrlValue(args.get(0) match {"
  },
  {
    "id" : "232bd9c1-6b26-4d1e-bc49-2a57c9bb9dde",
    "prId" : 2681,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f08d9fc-c2b0-42a0-927b-7519b29bacb0",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Doesn't this filter out all `0` characters of the decimal part, also those in `1.0001`?",
        "createdAt" : "2019-08-28T11:39:50Z",
        "updatedAt" : "2019-08-28T13:06:48Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "c8af2b75-f56d-4f2a-9435-48b5508c5b22",
        "parentId" : "4f08d9fc-c2b0-42a0-927b-7519b29bacb0",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "`filter` is called on  `Option[String]` not in `String`. That is two say it is idempotent all inputs except `Some(\"0\")`.",
        "createdAt" : "2019-08-28T12:20:28Z",
        "updatedAt" : "2019-08-28T13:06:48Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "a701b031-7747-41a3-8702-2c144255878c",
        "parentId" : "4f08d9fc-c2b0-42a0-927b-7519b29bacb0",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "D'oh, of course. Thank you.",
        "createdAt" : "2019-08-28T12:26:38Z",
        "updatedAt" : "2019-08-28T13:06:48Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a1c94ccb2d1f055e16c314d83381a9c11948792",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +306,310 @@      val result = string match {\n        case validFormat(signPart, intPart, _, decPartOrNull) =>\n          val decPart = Option(decPartOrNull).filterNot(_ == \"0\").getOrElse(\"\")\n          // First, we count the number of significant digits to avoid the conversion attempts that\n          // are doomed to failure."
  },
  {
    "id" : "224ad20c-e4ee-45f7-9fb4-d862cecb0e4f",
    "prId" : 1429,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a80f34c-956b-4157-8e99-371de0405197",
        "parentId" : null,
        "authorId" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "body" : "BTW, are you sure that doesn't allow unicode digits?",
        "createdAt" : "2019-05-28T13:12:16Z",
        "updatedAt" : "2019-05-28T19:41:27Z",
        "lastEditedBy" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "tags" : [
        ]
      },
      {
        "id" : "ef2be205-088e-4675-bbdd-4b5c5e5bcdb9",
        "parentId" : "6a80f34c-956b-4157-8e99-371de0405197",
        "authorId" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "body" : "The answer is that it doesn't allow unicode digits: https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html",
        "createdAt" : "2019-05-28T13:19:28Z",
        "updatedAt" : "2019-05-28T19:41:27Z",
        "lastEditedBy" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "tags" : [
        ]
      }
    ],
    "commit" : "233f17b7c23f16739aafae61ee77cfd643a0fa62",
    "line" : 197,
    "diffHunk" : "@@ -1,1 +318,322 @@\n  final case object SBFromTextDecimal extends SBuiltin(1) {\n    private val pattern = \"\"\"[+-]?\\d+(\\.\\d+)?\"\"\".r.pattern\n\n    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {"
  },
  {
    "id" : "4dab3940-ea1e-46d5-994e-f36a6df81564",
    "prId" : 1407,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1407",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b340361-c8d1-4146-a6c2-169d47f0756e",
        "parentId" : null,
        "authorId" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "body" : "allowing the leading `+` has the slight disadvantage that we do not have a canonical representation for `Int64` -- the same numbers can be represented in multiple ways. i'm on the fence on whether this is a good thing or not.",
        "createdAt" : "2019-05-27T14:27:40Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "tags" : [
        ]
      },
      {
        "id" : "1ca2a9ef-7da6-4d99-9709-15f5130bc894",
        "parentId" : "5b340361-c8d1-4146-a6c2-169d47f0756e",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "If we allow leading zeros, we have the same problem.",
        "createdAt" : "2019-05-27T14:36:43Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "cf736c3b-05b8-4116-9e01-022c0d6bf2c7",
        "parentId" : "5b340361-c8d1-4146-a6c2-169d47f0756e",
        "authorId" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "body" : "Yes, see my own comment below.",
        "createdAt" : "2019-05-27T14:37:34Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "tags" : [
        ]
      },
      {
        "id" : "bbffce81-dea3-4c54-9a96-1edffdeb46a8",
        "parentId" : "5b340361-c8d1-4146-a6c2-169d47f0756e",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I believe we should not restrict parsing to canonical representation. For instance, the final user probably want to parse \"1\" and \"01\" in the same way.\r\nBoth Haskell and java (and any other languages I can think of) parse \"01\" and \"1\" in the same way.\r\n\r\nFurthermore, this has no impact on determinism.   \r\n\r\n\r\n \r\n\r\n",
        "createdAt" : "2019-05-27T14:46:50Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea16d985a1397393fa2f0e0f0f3c58f1b23bb4ab",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +235,239 @@\n  final case object SBFromTextInt64 extends SBuiltin(1) {\n    private val pattern = \"\"\"[+-]?\\d+\"\"\".r.pattern\n\n    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {"
  },
  {
    "id" : "5c503143-3091-42b0-be06-1af065506a47",
    "prId" : 1407,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1407",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26c462ea-bc79-48c5-9648-4ecc24fa3fdd",
        "parentId" : null,
        "authorId" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "body" : "do you allow trailing / leading 0s? this regexp does. do we know what that means when parsing?",
        "createdAt" : "2019-05-27T14:28:09Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "tags" : [
        ]
      },
      {
        "id" : "14058e61-5e1f-49ca-a2e4-810940cc6a24",
        "parentId" : "26c462ea-bc79-48c5-9648-4ecc24fa3fdd",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Please see tests \r\nhttps://github.com/digital-asset/daml/pull/1407/files#diff-ae9014deee9be354b39ebd26faa0150b\r\n",
        "createdAt" : "2019-05-27T14:46:17Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "bfcb01a3-12be-493c-8f98-bd4c79da6181",
        "parentId" : "26c462ea-bc79-48c5-9648-4ecc24fa3fdd",
        "authorId" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "body" : "OK, so the answer is \"yes\". I'm really on the fence regarding canonical representation. For users it's clearly worse... so going with the current implementation is probably the right thing.\r\n\r\n@hurryabit what do you think?",
        "createdAt" : "2019-05-27T14:48:46Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "tags" : [
        ]
      },
      {
        "id" : "08189fa5-9728-4433-91c0-912083ff78fd",
        "parentId" : "26c462ea-bc79-48c5-9648-4ecc24fa3fdd",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not sure there's value in having a canonical representation for _parsing_. Being lenient seems fine to me.",
        "createdAt" : "2019-05-27T14:50:23Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "a3ee80cf-721b-4065-b665-2cfc34090260",
        "parentId" : "26c462ea-bc79-48c5-9648-4ecc24fa3fdd",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Note, we are already lenient (though a bit less than here) when parsing decimals from protobu. We accept anything that matches \r\n``[+-]?[0-9]{1,28}(\\.[0-9]{1,10})?``",
        "createdAt" : "2019-05-27T15:00:14Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea16d985a1397393fa2f0e0f0f3c58f1b23bb4ab",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +253,257 @@\n  final case object SBFromTextDecimal extends SBuiltin(1) {\n    private val pattern = \"\"\"[+-]?[0-9]+(\\.[0-9]+)?\"\"\".r.pattern\n\n    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {"
  },
  {
    "id" : "8aae79df-6fd6-4e85-8f55-96d2f172a59b",
    "prId" : 1377,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10cb3f38-d0be-4f26-b68a-da19174f2e54",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "@remyhaemmerle-da @bitonic Can you please confirm whether this is the right place to fill in the controllers for missing actors.",
        "createdAt" : "2019-05-24T11:40:11Z",
        "updatedAt" : "2019-05-24T11:53:03Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "fb05f5bb-0e87-4063-aac3-a145916e2fe7",
        "parentId" : "10cb3f38-d0be-4f26-b68a-da19174f2e54",
        "authorId" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "body" : "looks good.",
        "createdAt" : "2019-05-24T12:28:28Z",
        "updatedAt" : "2019-05-24T12:28:28Z",
        "lastEditedBy" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "tags" : [
        ]
      }
    ],
    "commit" : "d935e42734257440c114828dab523a7f4df325d2",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +715,719 @@          optLocation = machine.lastLocation,\n          consuming = consuming,\n          actingParties = optActors.getOrElse(ctrls),\n          signatories = sigs,\n          stakeholders = sigs union obs,"
  }
]