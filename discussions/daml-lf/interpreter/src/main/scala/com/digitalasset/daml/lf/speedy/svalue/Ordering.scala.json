[
  {
    "id" : "763f3f21-583e-41f9-bf5b-1a98d0681d83",
    "prId" : 7329,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e14d4e02-2fc9-4fb2-a6ea-7d18f4904c69",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I know this is not necessary but it makes the code easier to read for people with limited Scala experience, of which we have many.\r\n```suggestion\r\n        case (SUnit, SUnit) =>\r\n          ()\r\n```",
        "createdAt" : "2020-09-08T11:24:33Z",
        "updatedAt" : "2020-09-08T11:40:43Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "62fb32a4dcf13c3e6444a134bc27819bc6b990e3",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +40,44 @@    def step(tuple: (SValue, SValue)) =\n      tuple match {\n        case (SUnit, SUnit) =>\n          ()\n        case (SBool(x), SBool(y)) =>"
  },
  {
    "id" : "ce2897cf-3856-45ff-8852-ecc9a89e47c5",
    "prId" : 7329,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0fc7562-502f-45e1-ae94-33be68707ee2",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I assume `STextMap` is backed by an ordered tree map. Is that correct? If so, this gives us complexity `O(n log n)`. Is there a way to get an iterator over the key/value pairs in the order of the keys? This should leave us with complexity `O(n)` then.\r\n\r\nSame for generic map below.",
        "createdAt" : "2020-09-08T11:30:10Z",
        "updatedAt" : "2020-09-08T11:40:43Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "27c5f564-92be-4eff-98e8-13654e9629c8",
        "parentId" : "d0fc7562-502f-45e1-ae94-33be68707ee2",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Inside Speedy, `STextMap` is based on HashMap, so there is no way to get linear complexity here.\r\nNote that #7334, replaces  `STextMap` by `SGenMap` (based on TreeMap) so we will get linear complexity. ",
        "createdAt" : "2020-09-08T11:39:53Z",
        "updatedAt" : "2020-09-08T11:41:19Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "a176a4bb-3a51-4cad-8374-39751c9fb48f",
        "parentId" : "d0fc7562-502f-45e1-ae94-33be68707ee2",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "That's good to know. Thanks a lot for the explanation.",
        "createdAt" : "2020-09-08T14:01:26Z",
        "updatedAt" : "2020-09-08T14:01:26Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "62fb32a4dcf13c3e6444a134bc27819bc6b990e3",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +74,78 @@          val yKeys = yMap.keys.toSeq.sorted\n          push(\n            new InterlacedIterator(xKeys.iterator.map(SText), xKeys.iterator.map(xMap)),\n            new InterlacedIterator(yKeys.iterator.map(SText), yKeys.iterator.map(yMap)),\n          )"
  },
  {
    "id" : "ded80a11-0d78-43c6-95d3-be182fb2f588",
    "prId" : 4893,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49c54117-4b38-4f53-ac6e-76d311052cfd",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "When are we planning to switch the default in sandbox to use absolute contract ids everywhere? I expect that having maps indexed by contract ids will be one of the major usecases for genmaps.",
        "createdAt" : "2020-03-09T13:04:26Z",
        "updatedAt" : "2020-03-13T08:47:05Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "3e124c99-b38a-4cd8-8596-17dffa4df2b0",
        "parentId" : "49c54117-4b38-4f53-ac6e-76d311052cfd",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I am not sure, I will change the default in the sandbox ever. \r\nIn kvutils (and then in next gen sandbox) it is already the only possible mode. \r\nDAML-LF 1.9 will require the new contract ids scheme to be enable. \r\nThe old scheme will simply die together the legacy sandbox.  ",
        "createdAt" : "2020-03-12T10:05:25Z",
        "updatedAt" : "2020-03-13T08:47:05Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e034c77dcd97984f03bcd3890b2ea06272f908a",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +236,240 @@              compareType(t1, t2) -> ImmArray((v1, v2))\n          }\n          case SContractId(RelativeContractId(_)) => {\n            case SContractId(RelativeContractId(_)) =>\n              throw SErrorCrash(\"relative contract id are not comparable\")"
  }
]