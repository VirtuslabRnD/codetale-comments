[
  {
    "id" : "01b2cb85-a03a-4877-bf91-4544d49759dd",
    "prId" : 6151,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "682dad2f-1b4e-484a-9703-a7b3c8016b0e",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I think `java.nio.file.Files` is your friend here.\r\n\r\n```suggestion\r\n        Files.write(path, Seq(toJson.compactPrint).asJava)\r\n```",
        "createdAt" : "2020-05-29T11:53:33Z",
        "updatedAt" : "2020-05-29T12:04:10Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "488e7a05-3933-4f4c-9fe5-ce07a1077069",
        "parentId" : "682dad2f-1b4e-484a-9703-a7b3c8016b0e",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Cool. I didn't know about that. I'll apply it in a follow-up PR.",
        "createdAt" : "2020-05-29T13:02:48Z",
        "updatedAt" : "2020-05-29T13:02:48Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa42faf4fffb4e6c0891d323b87bdf1cb115576f",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +95,99 @@        val writer = new BufferedWriter(new FileWriter(path.toFile()))\n        writer.write(this.toJson.compactPrint)\n        writer.close()\n      }\n    }"
  },
  {
    "id" : "cceaa041-ea3c-4692-88e7-f38421d4b503",
    "prId" : 5957,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5957",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8da9f78-78c5-47b0-80e1-efc459c056e2",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Perhaps you could use an unboxed newtype or `scalaz.Tag` for the `AnyRef` here? This would not entail any allocations. In the former case (bespoke newtype) we could also use it to proscribe the set of types permitted to be used for labels to those supported by `Event#label`, again without implying any allocation. To carry the latter to its conclusion,\r\n\r\n```scala\r\ntype Label = LabelModule.Module.T\r\n\r\nsealed abstract class LabelModule {\r\n  type T <: AnyRef\r\n  private def apply(t: AnyRef): T\r\n}\r\nobject LabelModule {\r\n  val Module: LabelModule = new LabelModule {\r\n    type T = AnyRef\r\n    override private def apply(t: T) = t\r\n  }\r\n\r\n  // assumes -Xsource:2.13 in clients, which we should just do always,\r\n  // this is in scope wherever the expected type is `Label`\r\n  implicit def fromAllowed[T: Allowed](t: T): Label = Module(t)\r\n\r\n  @implicitNotFound(msg = \"Values of type ${T} are not known, renderable Labels\")\r\n  final class Allowed[-T] private()\r\n  object Allowed {\r\n    private[this] val allowAll = new Allowed[Any]\r\n    implicit val anonClosure: Allowed[AnonymousClosure.type] = allowAll\r\n    implicit val str: Allowed[String] = allowAll\r\n    // and so on for other permitted labels\r\n  }\r\n}\r\n```",
        "createdAt" : "2020-05-15T20:26:42Z",
        "updatedAt" : "2020-05-18T16:23:38Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "b7e384d1-9ed9-4ac4-b7ee-f5a01cb2e5df",
        "parentId" : "c8da9f78-78c5-47b0-80e1-efc459c056e2",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I don't fully understand all the details of this. I'll play around with it and put it in a follow-up PR.",
        "createdAt" : "2020-05-18T16:21:58Z",
        "updatedAt" : "2020-05-18T16:23:38Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "e217d2de-bfb7-4f10-84b2-ff0f1283e345",
        "parentId" : "c8da9f78-78c5-47b0-80e1-efc459c056e2",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "#6371",
        "createdAt" : "2020-06-16T19:03:35Z",
        "updatedAt" : "2020-06-16T19:03:35Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b07b9b6bb0bb079c6a380804dc18a83f562c379",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@  * since this might skew the profile. Instead, we convert the labels to strings\n  * when we write out the profile.\n  */\nfinal class Profile {\n  import Profile._"
  },
  {
    "id" : "0042fd89-63df-4147-bf5d-48bc3f4a13f1",
    "prId" : 5957,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5957",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c76c16b-ae94-40a6-9cd3-a5f531771d80",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "@S11001001 @remyhaemmerle-da Is this `x.asScala.toList` construction alright or is there something better?",
        "createdAt" : "2020-05-18T16:19:59Z",
        "updatedAt" : "2020-05-18T16:23:38Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "0c729e0c-a2b2-45c8-b8ec-c8bb1263353c",
        "parentId" : "3c76c16b-ae94-40a6-9cd3-a5f531771d80",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "It is perfectly sensible. If your goal type is not `List`, then use whatever goal type you want instead with `to[...]` (we even support `ImmArray`).",
        "createdAt" : "2020-05-18T16:24:54Z",
        "updatedAt" : "2020-05-18T16:27:35Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b07b9b6bb0bb079c6a380804dc18a83f562c379",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +106,110 @@        val frameIndices = new HashMap[String, Int]()\n        var endValue = 0L\n        val events = profile.events.asScala.toList.map { event =>\n          val eventType = if (event.open) \"O\" else \"C\"\n          val label = event.label"
  }
]