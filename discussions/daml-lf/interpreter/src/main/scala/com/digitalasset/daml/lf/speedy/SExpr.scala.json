[
  {
    "id" : "3071871e-3b45-48d7-84c7-7b8cbf6e7925",
    "prId" : 8983,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e2f9f83-abbc-48a8-b8b1-6a4a412b08ec",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "same here",
        "createdAt" : "2021-03-05T11:37:00Z",
        "updatedAt" : "2021-03-05T11:37:11Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "042eee27-eb16-4ec5-a4f4-faa65f65635e",
        "parentId" : "5e2f9f83-abbc-48a8-b8b1-6a4a412b08ec",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "But not here (without some reorganisation) because this is an expression, not a builtin.",
        "createdAt" : "2021-03-05T13:46:12Z",
        "updatedAt" : "2021-03-05T13:46:12Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3c1cdcd72586caaf1a68ac712450bf8d94ebe0f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +379,383 @@      machine.pushKont(KTryCatchHandler(machine, handler))\n      machine.ctrl = body\n      machine.withOnLedger(\"SETryCatch\") { onLedger =>\n        onLedger.ptx = onLedger.ptx.beginTry\n      }"
  },
  {
    "id" : "4fe3b470-afce-40fd-8b9f-b5ca09c2ee5f",
    "prId" : 8036,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8036",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcab7217-a440-4d54-a56e-986ec449fd7a",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This line scares the crap out of me. `machine.markBase()` changes components of the machine related the to environment size and `machine.env.size` reads something related to that. I know that they don't interact _now_ but I'm still scared. If they would interact, the semantics would depend on the order in which arguments are evaluated. I'd be more comfortable if we made the intended evaluation order explicit using `val` bindings.\r\n\r\nAlso, why do we need to store both `machine.markBase()` and `machine.env.size` in the continuation? That might deserve a comment.",
        "createdAt" : "2020-11-24T17:41:57Z",
        "updatedAt" : "2020-11-25T12:00:43Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "41be8ac4-1bf0-40db-954a-f9117c837164",
        "parentId" : "fcab7217-a440-4d54-a56e-986ec449fd7a",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I added a comment.\r\n\r\nI have a future cleanup PR in prep which relocates all calls to `markBase` to the definition code of the continuations. It makes `val` bindings as you suggest, and is much nicer!",
        "createdAt" : "2020-11-25T11:40:57Z",
        "updatedAt" : "2020-11-25T12:00:43Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "bbcf81ea-bd3b-4ae0-9113-5dc15df1b059",
        "parentId" : "fcab7217-a440-4d54-a56e-986ec449fd7a",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Nice. Thank you.",
        "createdAt" : "2020-11-25T13:23:40Z",
        "updatedAt" : "2020-11-25T13:23:40Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "da175325464f7d811e228324f060b59a15d43897",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +341,345 @@      // env-stack to be unwound correctly when an exception is thrown.\n      machine.pushKont(\n        KCatch(machine.markBase(), handler, fin, machine.frame, machine.actuals, machine.env.size))\n      machine.ctrl = body\n    }"
  },
  {
    "id" : "08866eb1-1c79-42cb-935a-75d85d60fd40",
    "prId" : 7540,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "461e1114-0f7c-43e3-aa20-9405bbbccc18",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "\"not implemented\" sounds to me like we'll implement it in the future.\r\n```suggestion\r\n      crash(\"unexpected SELet during execution\")\r\n```",
        "createdAt" : "2020-10-01T11:53:26Z",
        "updatedAt" : "2020-10-01T13:51:34Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "e55637f913c36a84131d8d78a5fd33c7acea709e",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +314,318 @@  final case class SELet(bounds: List[SExpr], body: SExpr) extends SExpr {\n    def execute(machine: Machine): Unit =\n      crash(\"not implemented\")\n  }\n"
  },
  {
    "id" : "d94bd264-5c92-493a-ab95-05a0b4d90726",
    "prId" : 7472,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94027144-dad0-40c6-b2e5-5a8a262014f4",
        "parentId" : null,
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Does `Profile.scala` need to be extended to handle `ChoiceByKeyDefRef` and friends (as is done for `ChoiceDefRef`) ?\r\n",
        "createdAt" : "2020-09-24T13:02:55Z",
        "updatedAt" : "2020-09-28T17:01:45Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f87982ebeaafdd21277c2bc4c42b1f7319643a1",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +448,452 @@  // references to definitions generated by the Speedy compiler\n  final case class ChoiceDefRef(ref: DefinitionRef, choiceName: ChoiceName) extends SDefinitionRef\n  final case class ChoiceByKeyDefRef(ref: DefinitionRef, choiceName: ChoiceName)\n      extends SDefinitionRef\n  final case class CreateDefRef(ref: DefinitionRef) extends SDefinitionRef"
  },
  {
    "id" : "92a01f09-886a-4088-9f19-c5a137ba8e0c",
    "prId" : 6918,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6918",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b1bd309-0277-48d1-a8ac-b2928f3b9905",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Note to self: This should be a `while` loop to avoid allocating the sequence object.",
        "createdAt" : "2020-08-12T07:47:27Z",
        "updatedAt" : "2020-08-12T08:04:23Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "a92f961786f34509dbaa09fc380a83b8561bc236",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +150,154 @@      val arity = builtin.arity\n      val actuals = new util.ArrayList[SValue](arity)\n      for (i <- 0 to arity - 1) {\n        val arg = args(i)\n        val v = arg.lookupValue(machine)"
  },
  {
    "id" : "3213bed8-fc08-4d68-82af-8633d4a97632",
    "prId" : 6918,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6918",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12e389ea-d620-4935-8240-9c93d2e23241",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Note to self: See if we can share code with `SEAppAtomicSaturatedBuiltin#execute`.",
        "createdAt" : "2020-08-12T07:50:01Z",
        "updatedAt" : "2020-08-12T08:04:23Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "a92f961786f34509dbaa09fc380a83b8561bc236",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +283,287 @@      val arity = builtin.arity\n      val actuals = new util.ArrayList[SValue](arity)\n      for (i <- 0 to arity - 1) {\n        val arg = args(i)\n        val v = arg.lookupValue(machine)"
  },
  {
    "id" : "e81ef8fe-efa2-49da-9053-16124be54173",
    "prId" : 6918,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6918",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ade09dad-10cc-46fd-b53f-e4cddd736088",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Note to self: Should we merge this with `SEApp` and use it as a smart constructor?",
        "createdAt" : "2020-08-12T07:51:35Z",
        "updatedAt" : "2020-08-12T08:04:23Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "a92f961786f34509dbaa09fc380a83b8561bc236",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +159,163 @@  }\n\n  object SEAppAtomic {\n    // smart constructor: detect special case of saturated builtin application\n    def apply(func: SExprAtomic, args: Array[SExprAtomic]): SExpr = {"
  },
  {
    "id" : "6b5f099f-b1cc-4470-8436-35ab582499c3",
    "prId" : 6440,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e04b252-553a-4298-a787-e35f8a7145b9",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Once this PR has landed, let's please benchmark if passing the `args` directly to `builtin.execute` and letting the latter do the lookups makes a significant difference. This should avoid the allocation of lots of very short-lived arrays. This applies in quite a few other places too.",
        "createdAt" : "2020-06-26T12:06:50Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "39761912-28a7-4500-80f1-cafe60761da8",
        "parentId" : "2e04b252-553a-4298-a787-e35f8a7145b9",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I made a issue for this: #6522\r\n",
        "createdAt" : "2020-06-29T13:57:31Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "648ab24a-1137-403f-aaa3-863efb983a26",
        "parentId" : "2e04b252-553a-4298-a787-e35f8a7145b9",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Merci.",
        "createdAt" : "2020-06-30T08:18:26Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +151,155 @@        actuals.add(v)\n      }\n      builtin.execute(actuals, machine)\n    }\n  }"
  },
  {
    "id" : "ffb55bba-23d5-425a-87d5-4ae168020699",
    "prId" : 6440,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6f3846b-6aa1-4fce-840a-cc48b1de5115",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "After this has landed, let's consider changing `execute` for (at least non-hungry) builtins to return the result rather than return via mutable state.",
        "createdAt" : "2020-06-26T12:13:41Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "0de0ab24-1184-4d60-9ea7-5dc192bb9ccf",
        "parentId" : "d6f3846b-6aa1-4fce-840a-cc48b1de5115",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Yes. This is what this TODO says.\r\nAnd the matching TODO in `SBuiltin` continues:\r\n```\r\n  // TODO: define evaluate, and convert all subclasses to this simpler form\r\n  // def evaluate(args: util.ArrayList[SValue]): SValue\r\n```",
        "createdAt" : "2020-06-29T12:08:44Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "a841fb00-5c4f-425b-8017-05f00f7bb319",
        "parentId" : "d6f3846b-6aa1-4fce-840a-cc48b1de5115",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "See issue: #6523",
        "createdAt" : "2020-06-29T13:57:43Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 262,
    "diffHunk" : "@@ -1,1 +271,275 @@      // TODO: define/call builtin.evaluate() to get the SValue directly\n      // Every non-hungry SBuiltin assigns an SValue to returnValue when we call execute()\n      builtin.execute(actuals, machine)\n      if (machine.returnValue == null) {\n        crash(\"SELet1Builtin, called SBuiltin.execute(), but didn't get returnValue\")"
  },
  {
    "id" : "f9590d14-18b0-47ab-a431-a482728305ce",
    "prId" : 6440,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c90ffaa-df1e-4c8d-b0c7-a124b26410b8",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "The old implementation batched nested `let` bindings together. This saved us a trip through the main loop for each binding after the first one. What's the reason for not doing this anymore?",
        "createdAt" : "2020-06-26T12:18:20Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "55613816-ae5b-44a9-92a7-f8a9a7b3b9f6",
        "parentId" : "2c90ffaa-df1e-4c8d-b0c7-a124b26410b8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Because we have a special case for the subclass `SELet1Builtin` for performance.",
        "createdAt" : "2020-06-29T12:09:21Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "7fea82e8-378e-4b52-a34a-dc3a50a407d1",
        "parentId" : "2c90ffaa-df1e-4c8d-b0c7-a124b26410b8",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Is that stopping us from batching in the not so special cases?",
        "createdAt" : "2020-06-29T13:35:27Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "6d878702-3ff7-464d-bdef-f70d2b89bed3",
        "parentId" : "2c90ffaa-df1e-4c8d-b0c7-a124b26410b8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "it would make the code way more complicated",
        "createdAt" : "2020-06-30T09:01:14Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "1b60ed51-895a-4f42-96d5-6b93235891a9",
        "parentId" : "2c90ffaa-df1e-4c8d-b0c7-a124b26410b8",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I don't see how it would make the code significantly more complicated. A smart constructor for `SELet1General` could solve the problem quite easily, couldn't it?",
        "createdAt" : "2020-06-30T10:24:14Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "186a4241-19a3-43c0-ac79-464f2f8402c9",
        "parentId" : "2c90ffaa-df1e-4c8d-b0c7-a124b26410b8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I will take a look...",
        "createdAt" : "2020-06-30T10:35:52Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "ea23c5b0-3c56-4766-9a54-e7244110cabc",
        "parentId" : "2c90ffaa-df1e-4c8d-b0c7-a124b26410b8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "So if I understand, you want `SELetBuiltin` to be a smart constructor which would combine separate lets into a multi-let, constructing the expression form: `SELet(bounds: Array[SExpr], body: SExpr)`.\r\n\r\nThe trouble with this is that the special case of `SEAppAtomicSaturatedBuiltin` would be detected at run time instead of compile time as it is now.\r\n\r\nBut worse: the execution of  `SELet1General` and `SELet1Builtin` are very different - one pushes continuations, the other doesn't - one sets `machine.control` to `rhs`, the other to `body`.\r\n\r\nI'm having trouble seeing this two different ways to execute a single-let can be easily reconciled/combined as the loop-body code for a multi `SELet` execution. I think it would involve constructing new `SELet1` expressions with suffixes of the rhss-list.\r\n",
        "createdAt" : "2020-06-30T11:16:16Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "5219ab71-c594-40f4-a60b-e39421437e28",
        "parentId" : "2c90ffaa-df1e-4c8d-b0c7-a124b26410b8",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I only meant batching `SELet1General` and leaving `SELet1Builtin` as is. Would that work? Either way, let's leave it for a separate PR in order to move forward with this.",
        "createdAt" : "2020-06-30T11:37:34Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "5e98cd16-4ef5-477d-b61d-a95ca2a6f407",
        "parentId" : "2c90ffaa-df1e-4c8d-b0c7-a124b26410b8",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Can you please make a ticket for this.",
        "createdAt" : "2020-06-30T11:37:50Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "136bb564-73d1-4e73-a173-52b12bd6fb9b",
        "parentId" : "2c90ffaa-df1e-4c8d-b0c7-a124b26410b8",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I think this ticket is still missing.",
        "createdAt" : "2020-06-30T16:45:52Z",
        "updatedAt" : "2020-06-30T16:46:27Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "8ce3c969-230e-46c6-9fc4-dd29e0d571db",
        "parentId" : "2c90ffaa-df1e-4c8d-b0c7-a124b26410b8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "https://github.com/digital-asset/daml/issues/6557",
        "createdAt" : "2020-07-01T08:02:08Z",
        "updatedAt" : "2020-07-01T08:02:08Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 234,
    "diffHunk" : "@@ -1,1 +250,254 @@\n  /** A let-expression with a single RHS */\n  final case class SELet1General(rhs: SExpr, body: SExpr) extends SExpr with SomeArrayEquals {\n    def execute(machine: Machine): Unit = {\n      machine.pushKont(KPushTo(machine.env, body, machine.frame, machine.actuals, machine.env.size))"
  },
  {
    "id" : "37fe176b-25c0-4e30-a626-42085feb5542",
    "prId" : 6104,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f586fd2c-a7f9-451e-baaa-94091f413770",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "It would be great to have doc comments for both `SEAppA` and `SEAppE` and a few words about how they differ. Maybe we could also find slightly more descriptive names, something like `SEAppKnown` and `SEAppUnknown`.",
        "createdAt" : "2020-06-02T09:27:31Z",
        "updatedAt" : "2020-06-02T10:12:17Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "26868268-b594-4cbe-b277-7bb216ca4a29",
        "parentId" : "f586fd2c-a7f9-451e-baaa-94091f413770",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "ok, I'll improve the doc/naming in my current (related) PR",
        "createdAt" : "2020-06-02T10:39:51Z",
        "updatedAt" : "2020-06-02T10:39:51Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a29d1b37f9bb15fa3b9ef14f3c26354f7e93866",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +129,133 @@  }\n\n  final case class SEAppA(fun: SExprAtomic, args: Array[SExpr]) extends SExpr with SomeArrayEquals {\n    def execute(machine: Machine): Unit = {\n      val vfun = fun.evaluate(machine)"
  },
  {
    "id" : "14e47dfd-d9ee-45bf-8e97-90a2b1b479ec",
    "prId" : 6003,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e54234cb-d80e-469c-bf36-06b06dd7b5e3",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I think we should remove this intermediate class and make the `SELocX` classes direct subclasses of `SExpr` with their own implementation of `execute`. This will make the code shorter and avoid one dynamic dispatch on each variable lookup. I would consider that a win-win situation. 😃",
        "createdAt" : "2020-05-18T16:01:59Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "5c4bd74a-3a88-4844-9927-fade021e2b92",
        "parentId" : "e54234cb-d80e-469c-bf36-06b06dd7b5e3",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Problem is that `SELoc` is also used here:\r\n```\r\n final case class SEMakeClo(fvs: Array[SELoc], arity: Int, body: SExpr)\r\n```\r\nI could perhaps try hand inlining the calls to `lookup` from `execute` in each of the 3 sub classes. See if that has any effect...",
        "createdAt" : "2020-05-18T17:08:07Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "cd838193-3e23-437b-b51b-510548953344",
        "parentId" : "e54234cb-d80e-469c-bf36-06b06dd7b5e3",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Nope.\r\nIn fact the time went up from 92 to 93 ms/op on the `CollectAuthority` bench.\r\nBut just noise I suspect.",
        "createdAt" : "2020-05-18T17:26:02Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "107cff43-477a-4377-8602-2a0b83e0a40d",
        "parentId" : "e54234cb-d80e-469c-bf36-06b06dd7b5e3",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "After last week... I have come to the opinion that trying to second guess the JVM on stuff like this is very unlikely to have noticeable results.",
        "createdAt" : "2020-05-18T17:27:38Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "b7117a73-14db-422f-b4f0-409631e1693f",
        "parentId" : "e54234cb-d80e-469c-bf36-06b06dd7b5e3",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "That makes a lot of sense. Thanks for the explanation.",
        "createdAt" : "2020-05-19T17:31:31Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +149,153 @@    S/A/F, indicating [S]tack, [A]argument, or [F]ree variable captured by a closure.\n    */\n  sealed abstract class SELoc extends SExpr {\n    def lookup(machine: Machine): SValue\n    def execute(machine: Machine): Unit = {"
  },
  {
    "id" : "06eeb07b-99d1-4bf6-adbf-10a49ca0125a",
    "prId" : 6003,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6424b9c-644c-4a2c-a183-c91c7383b7a5",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n    * This expression form is only allowed prior to closure conversion.\r\n```",
        "createdAt" : "2020-05-19T17:29:58Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +41,45 @@    * which could be an SELam, SELet, or a binding variant of SECasePat.\n    * https://en.wikipedia.org/wiki/De_Bruijn_index\n    * This expression form is only allowed prior to closure conversion\n    */\n  final case class SEVar(index: Int) extends SExpr {"
  },
  {
    "id" : "8c6b8ff2-bc91-4f1c-826c-7b9263979d7c",
    "prId" : 6003,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bc5f336-0d42-434b-8339-2df131638ba9",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "As long as the field in `Machine` is called `env`, we should not change the comment here. I'm open to renaming `env` to `stack` in a separate PR though. Same below.",
        "createdAt" : "2020-05-19T17:33:48Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +302,306 @@  sealed trait SCasePat\n\n  /** Match on a variant. On match the value is unboxed and pushed to stack. */\n  final case class SCPVariant(id: Identifier, variant: Name, constructorRank: Int) extends SCasePat\n"
  },
  {
    "id" : "81ee7441-b0ae-48d2-a5bf-19634ed817c7",
    "prId" : 6003,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf41b936-a888-4a7c-98ee-3578a4dcf123",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Just to make sure I fully understand what's going in here: We need to reset the frame pointer when we run the `KMatch` continuation because evaluating the scrutinee might have involved a function call and that function call has set the frame pointer to something else and not cleaned up after itself? Is that correct?\r\nI suggest you add comment somewhere explaining which of the caller-saves vs callee-saves strategies we're using in Speedy and what ramifications that has.",
        "createdAt" : "2020-05-19T18:20:21Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "dc0d6a10-c84c-4d7c-954a-11d7c4570bd4",
        "parentId" : "bf41b936-a888-4a7c-98ee-3578a4dcf123",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Your understand is correct. :smile: \r\nI added a big chunky comment to help future readers.",
        "createdAt" : "2020-05-20T07:05:38Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +180,184 @@  final case class SECase(scrut: SExpr, alts: Array[SCaseAlt]) extends SExpr with SomeArrayEquals {\n    def execute(machine: Machine): Unit = {\n      machine.pushKont(KMatch(alts, machine.frame, machine.env.size))\n      machine.ctrl = scrut\n    }"
  },
  {
    "id" : "34a98454-c390-4194-a184-cb790c7984b3",
    "prId" : 5859,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d8b852e-ff36-4e6e-9586-357a2a2dfd8d",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "```suggestion\r\n    // This is similar to how `String#hashCode()` evaluation is cached.\r\n```",
        "createdAt" : "2020-05-06T08:37:00Z",
        "updatedAt" : "2020-05-06T19:02:16Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "898c7dcb31b91d56e979cfe03cfaa9d92ceb28f1",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +62,66 @@    // that guarantees the write of `_cache` (in the method\n    // `setCached`) is done atomically.\n    // This is similar how hashcode evaluation is cached in String\n    // http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/tip/src/share/classes/java/lang/String.java\n    private var _cached: Option[(SValue, List[Location])] = None"
  },
  {
    "id" : "6492250c-917e-403a-befc-8284f4966702",
    "prId" : 5859,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3955fc65-a940-4f31-bc34-21c9457c12f7",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "```suggestion\r\n    // full re-evaluation of the body of the definition.\r\n```",
        "createdAt" : "2020-05-06T08:37:07Z",
        "updatedAt" : "2020-05-06T19:02:16Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "898c7dcb31b91d56e979cfe03cfaa9d92ceb28f1",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +57,61 @@    // LF value defined by `ref` once it has been computed.  Hence we\n    // avoid both the lookup in the package definition HashMap and the\n    // full reevaluation of the body of the definition.\n    // Here we take advantage of the Java memory model\n    // (https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.7)"
  },
  {
    "id" : "fde669b1-a145-44d9-a558-137a66f53cfa",
    "prId" : 3947,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb57ef88-bdba-4f6b-af98-b7d09c207aa7",
        "parentId" : null,
        "authorId" : "271bdebc-b39f-48aa-b2cd-f3f0324314d5",
        "body" : "This change looks not as pretty as original code, but Yourkit profiler showed that calling `map` on `fv` overly abused `ArrayOps` with turned out to be terribly slow. So this old fashion way of iterating over array has improved speed dramatically.",
        "createdAt" : "2020-01-06T03:13:56Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : "271bdebc-b39f-48aa-b2cd-f3f0324314d5",
        "tags" : [
        ]
      },
      {
        "id" : "ee8dbb17-f424-4f6c-bb1c-370b1b513cb8",
        "parentId" : "fb57ef88-bdba-4f6b-af98-b7d09c207aa7",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I would like to have real benchmarks for this kinds of changes. \r\nWhat do you think @dajmaki ?",
        "createdAt" : "2020-01-06T08:40:25Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "d3b20daa-b9ef-4b89-89e8-2fbdb66a0238",
        "parentId" : "fb57ef88-bdba-4f6b-af98-b7d09c207aa7",
        "authorId" : null,
        "body" : "I'm fine with these type of changes. Would definitely be interested in hearing how big of an improvement this was.",
        "createdAt" : "2020-01-06T12:41:38Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "e6d02e86-5342-4d47-bd21-243e1d1201f3",
        "parentId" : "fb57ef88-bdba-4f6b-af98-b7d09c207aa7",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "if @dajmaki  is happy, I am happy.  ",
        "createdAt" : "2020-01-06T13:31:36Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "fd864704-75a3-4e47-aba5-beffcb330e81",
        "parentId" : "fb57ef88-bdba-4f6b-af98-b7d09c207aa7",
        "authorId" : "271bdebc-b39f-48aa-b2cd-f3f0324314d5",
        "body" : "Some results from ScalaMeter (this performance pit was actually found using YourKit, I'm using ScalaMeter just to prove a point):\r\n1. Iterating through array old-fashion way\r\n```\r\n      val length = arr.length\r\n      var i = 0\r\n      while (i < length) {\r\n        arr(i)\r\n        i += 1\r\n      }\r\n```\r\ntook `Parameters(size -> 15000000): 3.17E-4 ms`\r\n\r\n2. Iterating through array using `map`\r\n      ```map.map(_ => ())```\r\ntook `Parameters(size -> 15000000): 67.933929 ms`\r\n\r\nThe difference is huge, which is even more crucial for this code as it runs so many times.\r\n\r\nIf interested why this slow down happens, it's because Array gets converted into ArrayOps and then it calls some partial functions.",
        "createdAt" : "2020-01-07T23:34:43Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : "271bdebc-b39f-48aa-b2cd-f3f0324314d5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +110,114 @@\n    def execute(machine: Machine): Ctrl = {\n      def convertToSValues(fv: Array[Int], getEnv: Int => SValue) = {\n        val sValues = new Array[SValue](fv.length)\n        var i = 0"
  },
  {
    "id" : "b93f67a7-bd80-4f18-84b1-ebe278f70cfd",
    "prId" : 2596,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bf04d11-f438-4316-946c-db117b821ce0",
        "parentId" : null,
        "authorId" : null,
        "body" : "comment moved to previous line",
        "createdAt" : "2019-08-19T15:20:30Z",
        "updatedAt" : "2019-08-19T15:21:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "f6aeb842-9407-46bf-86e5-a2d8f29f013e",
        "parentId" : "8bf04d11-f438-4316-946c-db117b821ce0",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "The auto formatter is doing that. I tried to undo it and the formatter did it again. :(",
        "createdAt" : "2019-08-19T15:38:02Z",
        "updatedAt" : "2019-08-19T15:38:03Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "76ed9fa74de7cba87d311eddcb078a95a870805e",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +311,315 @@        3,\n        // case xs of\n        SECase(SEVar(1)) of (// nil -> z\n        SCaseAlt(SCPNil, SEVar(2)),\n        // cons y ys ->"
  }
]