[
  {
    "id" : "c741e256-9d8d-43ba-bd3b-49aeb408d098",
    "prId" : 9712,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9712",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7859bd22-f518-4d2a-9293-965399a25a82",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe worth using a `Vector` or an `ImmArray` instead of slicing & calling length on a single-linked list? @remyhaemmerle-da probably has a better idea what makes sense here.",
        "createdAt" : "2021-05-20T14:14:32Z",
        "updatedAt" : "2021-05-20T14:30:34Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2540ccd2-876c-4ee3-94ef-f54f11457565",
        "parentId" : "7859bd22-f518-4d2a-9293-965399a25a82",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "calling length on List is probably a good idea. \r\nWhy not using standard List pattern matching ?  ",
        "createdAt" : "2021-05-25T08:14:26Z",
        "updatedAt" : "2021-05-25T08:28:47Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "e2f4e496-3d4c-4829-844d-c1fe121cf8d7",
        "parentId" : "7859bd22-f518-4d2a-9293-965399a25a82",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "switched to Vector to address this concern",
        "createdAt" : "2021-05-25T15:15:34Z",
        "updatedAt" : "2021-05-25T15:15:34Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "1691ce29ebfc52ba7f1f71ce32c20f15538ca500",
    "line" : 253,
    "diffHunk" : "@@ -1,1 +251,255 @@        case 0 => Case.Empty\n        case 1 => Case.Single(xs(0))\n        case n => Case.Multi(xs(0), xs.slice(1, n - 1), xs(n - 1))\n      }\n    }"
  },
  {
    "id" : "bf662dfe-37ba-4ad1-9b51-2f9fe65d2e92",
    "prId" : 9712,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9712",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcbad01b-ff68-4588-86dc-366bdca9b30b",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n      xs match {\r\n        case Nil => Case.Empty\r\n        case x0 :: Nil => Case.Single(x0)\r\n        case x0 :: x1 :: tail  => Case.Multi(x0, List(x1), tail)\r\n```",
        "createdAt" : "2021-05-25T08:14:28Z",
        "updatedAt" : "2021-05-25T09:36:41Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "c366e16d-3b7a-49e1-bc7d-93e905bcd2c8",
        "parentId" : "fcbad01b-ff68-4588-86dc-366bdca9b30b",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "That’s not the same. Before we had first, middle, last. Now you have first, second, rest.",
        "createdAt" : "2021-05-25T08:34:54Z",
        "updatedAt" : "2021-05-25T08:34:54Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2fcd8fbd-f776-49df-b127-d5ef0c9a9926",
        "parentId" : "fcbad01b-ff68-4588-86dc-366bdca9b30b",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "indeed.\r\nWe should then use `ImmArray` or `Vector`. ",
        "createdAt" : "2021-05-25T09:37:58Z",
        "updatedAt" : "2021-05-25T09:37:59Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "1a6e06cd-d429-498d-8432-60c55bcc6212",
        "parentId" : "fcbad01b-ff68-4588-86dc-366bdca9b30b",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "using Vector",
        "createdAt" : "2021-05-25T15:16:01Z",
        "updatedAt" : "2021-05-25T15:16:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "1691ce29ebfc52ba7f1f71ce32c20f15538ca500",
    "line" : 253,
    "diffHunk" : "@@ -1,1 +251,255 @@        case 0 => Case.Empty\n        case 1 => Case.Single(xs(0))\n        case n => Case.Multi(xs(0), xs.slice(1, n - 1), xs(n - 1))\n      }\n    }"
  },
  {
    "id" : "8bb26d7a-bd8d-4eda-bab1-7fbaaf1d570f",
    "prId" : 9712,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9712",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f6fdb5b-fd8a-462c-afed-f396560cacdc",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I find the trampolined CPS style here pretty hard to follow. I hacked up a version of this that doesn’t use cps or trampolines and at least for me seems much easier to follow (ignore variable names and so on) https://github.com/digital-asset/daml/commit/2efd36a6f4efe69edbc2f48fd347cbd9b5ac916b. wdyt @remyhaemmerle-da @nickchapman-da? We can probably do something very similar for the first phase as well.",
        "createdAt" : "2021-05-25T08:39:09Z",
        "updatedAt" : "2021-05-25T08:39:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e8cc5985-a1a4-40e6-924b-d225beb7c913",
        "parentId" : "2f6fdb5b-fd8a-462c-afed-f396560cacdc",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I think the nice thing about this approach is that it's a systematic transformation of the original code.\r\nSee:\r\nhttps://github.com/digital-asset/daml/pull/9712/commits/4511623e529c9c3d022538f3bf078ce6916d214b\r\nhttps://github.com/digital-asset/daml/pull/9712/commits/e520a935e6943023d0f165b450f71c7f63077335",
        "createdAt" : "2021-05-25T09:29:48Z",
        "updatedAt" : "2021-05-25T09:29:48Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "c1fed4ba-215b-4b2a-a2bc-e524b90481bb",
        "parentId" : "2f6fdb5b-fd8a-462c-afed-f396560cacdc",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "We agreed to proceed with the trampoline approach, so long as Remy is happy. Which he is!",
        "createdAt" : "2021-05-25T12:43:45Z",
        "updatedAt" : "2021-05-25T12:43:45Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "bc761611-c5b9-4e4b-8d0e-6d662362c57f",
        "parentId" : "2f6fdb5b-fd8a-462c-afed-f396560cacdc",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I am fine with both approaches. ",
        "createdAt" : "2021-05-25T14:53:17Z",
        "updatedAt" : "2021-05-25T14:53:17Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1691ce29ebfc52ba7f1f71ce32c20f15538ca500",
    "line" : 202,
    "diffHunk" : "@@ -1,1 +200,204 @@  }\n\n  private def pushNorms[R](s: State, xs: List[Norm])(\n      k: (State, List[Nid]) => Trampoline[R]\n  ): Trampoline[R] = {"
  }
]