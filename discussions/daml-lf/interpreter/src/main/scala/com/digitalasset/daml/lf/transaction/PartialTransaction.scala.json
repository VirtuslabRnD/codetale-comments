[
  {
    "id" : "fe3b9f67-8c47-48e1-b50e-b2921495f10c",
    "prId" : 10108,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "241bc4e6-72e9-4908-83fd-3f6b34827c1f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I don’t think that type synonym really helps. Either make it a case class or inline it.",
        "createdAt" : "2021-06-24T12:36:07Z",
        "updatedAt" : "2021-06-24T13:18:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ff732e16350aedd066771ca4a979b34e153aaa7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +197,201 @@  )\n\n  type NodeSeeds = ImmArray[(NodeId, crypto.Hash)]\n\n  sealed abstract class Result extends Product with Serializable"
  },
  {
    "id" : "7f455b17-4b13-403f-96a6-27f3749809a5",
    "prId" : 9952,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb6c6cbb-59d6-41ba-8312-db9a92305f65",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "oh I see here is the bug @remyhaemmerle-da mentioned: This should be the root nodes of the partial transaction not the children of the context.",
        "createdAt" : "2021-06-10T11:59:38Z",
        "updatedAt" : "2021-06-10T11:59:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "3439b074-d108-4442-a27c-28d006ec6983",
        "parentId" : "bb6c6cbb-59d6-41ba-8312-db9a92305f65",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "We still need to \"unwind\" completely the partial transaction. ",
        "createdAt" : "2021-06-10T12:08:03Z",
        "updatedAt" : "2021-06-10T12:08:03Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "deec488dc67b0678793605de1103880e81d65b20",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +360,364 @@      GenTransaction(\n        nodes,\n        ImmArray(context.children.toImmArray.toSeq.sortBy(_.index)),\n      ),\n      unwindToExercise(context.info).map(makeExNode(_)),"
  },
  {
    "id" : "f5d87156-a73b-4109-816c-c4fd89edfcac",
    "prId" : 9654,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d6eab42-81e2-4ecb-ab7c-4211e9925d21",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "@remyhaemmerle-da do you think we should throw something else here? `RuntimeException` is what the two other cases internal errors in `PartialTransaction` throw atm so this seems consistent. `crash` is not used at all here.\r\n\r\nBut happy to switch to something else or define a new exception if you prefer.",
        "createdAt" : "2021-05-12T10:27:27Z",
        "updatedAt" : "2021-05-12T10:27:27Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "7b11fe65-1421-4ba3-bbf3-a41bf3d34120",
        "parentId" : "6d6eab42-81e2-4ecb-ab7c-4211e9925d21",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I am fine with `RuntimeException`.",
        "createdAt" : "2021-05-12T10:31:42Z",
        "updatedAt" : "2021-05-12T10:32:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "79128f255100920866d48453aa16428eabc8a59c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +574,578 @@          actionNodeSeeds = actionNodeSeeds :+ (nodeId -> ec.actionNodeSeed),\n        )\n      case _ => throw new RuntimeException(\"endExercises called in non-exercise context\")\n    }\n"
  },
  {
    "id" : "f32da7c2-a611-454f-8308-5d7f28bae25c",
    "prId" : 9367,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9367",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a408ae4-8920-425d-b9cf-5b7936a9abe4",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I don’t understand this, why does the child idx not increase here?",
        "createdAt" : "2021-04-13T17:54:57Z",
        "updatedAt" : "2021-04-14T15:26:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5e3c77da-4147-4b2a-89a9-ea6930c19950",
        "parentId" : "7a408ae4-8920-425d-b9cf-5b7936a9abe4",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "We decided some time ago,  that the rollback node will not interact with the contract ID scheme, the contract ID scheme will consider only Action Node. This was the purpose of #8808.\r\nSo since the rollback node is not an action we do not increment the `nextActionChildIdx` \r\n\r\n",
        "createdAt" : "2021-04-13T18:28:23Z",
        "updatedAt" : "2021-04-14T15:26:14Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "9a021217-5734-4f18-ac28-ce506ea02efe",
        "parentId" : "7a408ae4-8920-425d-b9cf-5b7936a9abe4",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I think I’m still slightly confused. The rollback node itself should not affect the CID scheme but children of that node which we’re adding here do don’t they? If they don’t, I would expect CID collisions between contracts created in rollback nodes and those created outside which we don’t want.",
        "createdAt" : "2021-04-13T19:20:47Z",
        "updatedAt" : "2021-04-14T15:26:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "7d23718c-3d63-40bf-8c08-685d298a3567",
        "parentId" : "7a408ae4-8920-425d-b9cf-5b7936a9abe4",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Oh I see what you’re saying. I got slightly confused by the naming. `addRollbackChild` does not add a child to a rollback node. It adds a rollback node as the child of whatever is the parent. makes sense :+1: ",
        "createdAt" : "2021-04-13T19:44:37Z",
        "updatedAt" : "2021-04-14T15:26:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "53cf7d7d3d01e45c156c5682f97f1cbb087e54ca",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +71,75 @@      Context(info, children :+ child, nextActionChildIdx + 1)\n    def addRollbackChild(child: NodeId, nextActionChildIdx: Int): Context =\n      Context(info, children :+ child, nextActionChildIdx)\n    // This function may be costly, it must be call at most once for each node.\n    def nextActionChildSeed: crypto.Hash = info.actionChildSeed(nextActionChildIdx)"
  },
  {
    "id" : "6a10c2a9-8769-4e90-bf6c-ff25ae0f4fef",
    "prId" : 8808,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6651328d-2c07-489f-b959-844916c0e3ef",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "For now, we just drop the rollback part of the tree. ",
        "createdAt" : "2021-02-10T15:05:43Z",
        "updatedAt" : "2021-02-12T11:31:48Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "bece9263-5cac-47e9-b17c-fd6e8684504a",
        "parentId" : "6651328d-2c07-489f-b959-844916c0e3ef",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "maybe add a TODO for this?",
        "createdAt" : "2021-02-11T10:29:49Z",
        "updatedAt" : "2021-02-12T11:31:48Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d20948b6-7c56-4c8b-9dfc-2925d2cf3b24",
        "parentId" : "6651328d-2c07-489f-b959-844916c0e3ef",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : ":+1: \r\n",
        "createdAt" : "2021-02-12T08:59:36Z",
        "updatedAt" : "2021-02-12T11:31:48Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "105d691f83dab6577b9afd72d0c8210b56aaffb7",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +527,531 @@        // TODO https://github.com/digital-asset/daml/issues/8020\n        //  for now, we just drop the whole rollback part of the tree.\n        copy(context = info.parent.copy(nextChildIdx = context.nextChildIdx))\n      case _ =>\n        noteAbort(Tx.NonCatchContext)"
  },
  {
    "id" : "74ab2b43-d5fd-4218-9307-50476848f2a4",
    "prId" : 8808,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8df6502-1371-4f4d-8db7-2f8370df2fd1",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I’m a bit confused. I get that the try catch stuff is unused but why is this unused? Where do we expect this to be used?",
        "createdAt" : "2021-02-11T10:50:28Z",
        "updatedAt" : "2021-02-12T11:31:48Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b79219cc-f58f-41f4-9ad0-b2e11db4bf51",
        "parentId" : "b8df6502-1371-4f4d-8db7-2f8370df2fd1",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "This PR only extends the API of `PartialTransaction` to handle the exception. \r\n@nickchapman-da will have to call this API from Speedy in a future PR.\r\nFor now you can see how this should be used in the test `PartialTransactionSpec`.",
        "createdAt" : "2021-02-12T08:59:07Z",
        "updatedAt" : "2021-02-12T11:31:48Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "105d691f83dab6577b9afd72d0c8210b56aaffb7",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +459,463 @@    * Must match a `beginExercises`.\n    */\n  def abortExercises: PartialTransaction =\n    context.info match {\n      case ec: ExercisesContextInfo =>"
  },
  {
    "id" : "d149fb2a-241a-411b-8375-0b57ed7d2fb3",
    "prId" : 8804,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be70536c-3fd7-4c16-b480-90bf8181624f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "```suggestion\r\n  private[PartialTransaction] object UnseededTransactionRootContext extends RootContextInfo {\r\n```\r\nNot sure that’s any closer to an actual word but it sounds better to me :slightly_smiling_face: ",
        "createdAt" : "2021-02-10T09:58:23Z",
        "updatedAt" : "2021-02-10T11:31:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d817184d92013d3ab218bf111330f60a9fcf724",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +52,56 @@  }\n\n  private[PartialTransaction] object NoneSeededTransactionRootContext extends RootContextInfo {\n    val childSeed: Any => Nothing = { _ =>\n      throw new IllegalStateException(s\"the machine is not configure to create transaction\")"
  },
  {
    "id" : "44a15e7d-660c-48c0-aa94-80fc75a7eaeb",
    "prId" : 7400,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea06b550-f3b9-40f6-8201-34f75448cb21",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "There's potential for simplification in a future PR here:\r\n1. If we only care about the first error, let's only compute the first error.\r\n2. If the map always contains one entry, let's use a pair instead.\r\n",
        "createdAt" : "2020-09-16T09:33:31Z",
        "updatedAt" : "2020-09-17T13:03:20Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "f9dda156-da84-45c9-bf24-d08aee822432",
        "parentId" : "ea06b550-f3b9-40f6-8201-34f75448cb21",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "again, I'll do this in the following PR",
        "createdAt" : "2020-09-16T16:49:29Z",
        "updatedAt" : "2020-09-17T13:03:20Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "a360635b966cdfe27bfd3cd6e156308321238660",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +443,447 @@      case Nil => this\n      case fa1 :: _ => // take just the first failure\n        val fas = Map(nid -> fa1)\n        noteAbort(Tx.AuthErrorsDuringExecution(fas))\n    }"
  },
  {
    "id" : "4e0d86f2-c4ad-47cf-9e57-c6b31646e5e2",
    "prId" : 7189,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7189",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aacbd05d-b7a1-4c78-bcfb-0a92ff72b191",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I find nested eithers pretty confusing. Maybe time for a custom ADT for the error types.",
        "createdAt" : "2020-08-20T07:26:55Z",
        "updatedAt" : "2020-08-20T07:27:48Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "0e1319e0-d361-4ad3-9340-9eae472ef0ae",
        "parentId" : "aacbd05d-b7a1-4c78-bcfb-0a92ff72b191",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I will. ",
        "createdAt" : "2020-08-20T07:39:05Z",
        "updatedAt" : "2020-08-20T07:39:06Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bea54adfba4d217c92a95e3c59673890277c712",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +224,228 @@      outputTransactionVersions: VersionRange[TransactionVersion],\n      packageLanguageVersion: Ref.PackageId => LanguageVersion,\n  ): Either[String, Either[PartialTransaction, SubmittedTransaction]] =\n    if (context.exeContext.isEmpty && aborted.isEmpty)\n      TransactionVersions"
  },
  {
    "id" : "697245f6-42d2-4635-87b5-4dd90976f3c7",
    "prId" : 5578,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d305a63-bcef-4c62-b0c9-3ec7a92d8a79",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "As already before this PR, there is an assumption that `addChild` and `nextChildrenSeed` are always called in that order, right?",
        "createdAt" : "2020-04-16T10:21:38Z",
        "updatedAt" : "2020-04-16T11:23:02Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "d58bb69a-1fae-4c67-b1fc-4a33f47020ce",
        "parentId" : "7d305a63-bcef-4c62-b0c9-3ec7a92d8a79",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "First you build your node using `nextChildrenSeed` if this node requires a seed (i.e. Create and Exercise nodes) and then you add this node with `addChild`",
        "createdAt" : "2020-04-16T10:35:47Z",
        "updatedAt" : "2020-04-16T11:23:02Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfacb978186e3ef87e64a15f506cbe0d17e7dd58",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +27,31 @@    def addChild(child: Value.NodeId): Context =\n      new Context(exeContext, children :+ child, childrenSeeds)\n    def nextChildrenSeed: Option[crypto.Hash] =\n      childrenSeeds(children.length)\n  }"
  },
  {
    "id" : "61e8d663-1c28-45e6-a8b4-bdff4fd93097",
    "prId" : 5486,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5486",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "552922af-95cb-4b41-a020-31fe3b73a909",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "This is the actual fix",
        "createdAt" : "2020-04-08T13:21:05Z",
        "updatedAt" : "2020-04-08T13:24:11Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "50e1d58f9542c576e6eab5cf0f45f84b6f1fa196",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +455,459 @@  def deriveChildSeed: Option[crypto.Hash] =\n    context.contextSeed.map(crypto.Hash.deriveNodeSeed(_, context.children.length))\n\n}"
  }
]