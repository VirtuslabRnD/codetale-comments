[
  {
    "id" : "22340266-6d7c-4d34-b5f0-864ef911d451",
    "prId" : 10136,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10136",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "054363cf-f3f5-4d5c-98d5-a89240f82a4c",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Naive question, why do we skip the check on validation ? ",
        "createdAt" : "2021-06-29T06:44:03Z",
        "updatedAt" : "2021-06-29T06:44:58Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "007bb8d5-3901-41b8-a326-2f0ff565a044",
        "parentId" : "054363cf-f3f5-4d5c-98d5-a89240f82a4c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Visibility checks are a submission-only concept. They exist primarily to protect parties on the same participant from each other.",
        "createdAt" : "2021-06-29T06:48:58Z",
        "updatedAt" : "2021-06-29T06:48:58Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "187e702152b81872c3f5365d8c8679d81593a8c6",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +124,128 @@  ) extends LedgerMode {\n    private[lf] val visibleToStakeholders: Set[Party] => SVisibleToStakeholders =\n      if (validating) { _ => SVisibleToStakeholders.Visible }\n      else {\n        SVisibleToStakeholders.fromSubmitters(committers, readAs)"
  },
  {
    "id" : "7a34eac9-6f9b-4afd-b92e-af1419cabe35",
    "prId" : 10070,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26e6120a-f35c-4b26-be26-6d6262e3572e",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Where you interested in readability or were you unsure whether `RingBufferTraceLog` was actually constructed at every call? From some experimentation it looks like it should.",
        "createdAt" : "2021-06-21T21:33:18Z",
        "updatedAt" : "2021-06-21T21:44:53Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "ce90917e-8e14-49aa-927b-efb73bd66f42",
        "parentId" : "26e6120a-f35c-4b26-be26-6d6262e3572e",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "neither really. I use this in `ScenarioRunner` and didn’t want to duplicate it.",
        "createdAt" : "2021-06-22T00:11:19Z",
        "updatedAt" : "2021-06-22T00:16:18Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dbf8ebad6630ef53f57d730ae25974f722f07ac",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +727,731 @@    private val damlTraceLog = LoggerFactory.getLogger(\"daml.tracelog\")\n\n    def newTraceLog: TraceLog = RingBufferTraceLog(damlTraceLog, 100)\n\n    def apply("
  },
  {
    "id" : "9ebd2318-686c-4e6b-9694-5a99424c9bd6",
    "prId" : 10033,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10033",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f3b474e-59e4-46c3-99c3-16bdc0249e2a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "how is this different from what the autogenerated `toString` gives you?",
        "createdAt" : "2021-06-17T15:31:33Z",
        "updatedAt" : "2021-06-17T15:31:51Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1078739c-3f53-4f52-bf65-9a43307e680d",
        "parentId" : "2f3b474e-59e4-46c3-99c3-16bdc0249e2a",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Here there is no autogenerated `toString`. The one from `Throwable` has precedence ",
        "createdAt" : "2021-06-17T16:01:45Z",
        "updatedAt" : "2021-06-17T16:01:46Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f9521368dbed0a5d401fc4f4f47acd6bd605814",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1374,1378 @@      extends RuntimeException\n      with NoStackTrace {\n    override def toString = s\"SpeedyHungry($result)\"\n  }\n"
  },
  {
    "id" : "6ff7d199-e580-4db5-a5b5-10f2da831604",
    "prId" : 9871,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9871",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85b1b453-c647-440d-a3d0-a2c6cec74ba4",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "similar question here. I think a comment on why we always want to crash for this is useful.",
        "createdAt" : "2021-06-02T07:39:25Z",
        "updatedAt" : "2021-06-02T07:52:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "43893146-52d3-4de7-b5c6-552f548970cb",
        "parentId" : "85b1b453-c647-440d-a3d0-a2c6cec74ba4",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "20b2bb95da79a10d962f2fe57d22cb08f5825bc3",
        "createdAt" : "2021-06-02T10:19:38Z",
        "updatedAt" : "2021-06-02T10:22:15Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdfe9d85e856787c99491635de227d6f487571ee",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +674,678 @@        x match {\n          case Right(value) => value\n          case Left(error) => crash(error.pretty)\n        }\n"
  },
  {
    "id" : "fd5efe90-df01-48ae-9e60-6b568595e0b4",
    "prId" : 9207,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9df9786b-d38e-480c-82b3-4d5b74b2b675",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : ":+1: \r\n",
        "createdAt" : "2021-03-23T09:25:09Z",
        "updatedAt" : "2021-03-23T09:25:31Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3b8bd8185509c9075f26a7bd8fcd1c16330887f",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +342,346 @@        coid: V.ContractId,\n        templateId: Ref.TypeConName,\n        arg: SValue,\n        signatories: Set[Party],\n        observers: Set[Party],"
  },
  {
    "id" : "6d7b237d-bf2d-4a55-afbc-f2f47ed38ca9",
    "prId" : 9192,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0885f14d-26c8-40de-beea-514db39f994d",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "What is the lifecycle of this cache? IIUC it prevents fetching the same contract more than once while evaluating a single transaction. If I'm wrong and it survives across evaluations, would it make sense (and be feasible) to apply some eviction policy to prevent this from blowing off and causing OOMs?",
        "createdAt" : "2021-03-20T13:20:51Z",
        "updatedAt" : "2021-03-22T12:25:07Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "f0c7b9d4-b35f-44d9-b064-5ae95daca679",
        "parentId" : "0885f14d-26c8-40de-beea-514db39f994d",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It never survives a transaction (which applies to all fields in here, speedy is pretty much only alive for one transaction with the exception of scenarios and there we reset it after each submit) and the size of the cache is at most proportional to the size of the transaction we’re building (each cache entry corresponds to a fetch or an exercise). The values in the cache are also mostly shared with the actual transaction node so we don’t keep signatories twice in memory or something like that.",
        "createdAt" : "2021-03-20T13:27:07Z",
        "updatedAt" : "2021-03-22T12:25:07Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "56fcc4c3-a997-4147-b96f-70e386e5f7ca",
        "parentId" : "0885f14d-26c8-40de-beea-514db39f994d",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "In other words, given that it doesn’t grow more than the transaction and the overhead to that seems quite small given that most values are shared, I wouldn’t add an eviction policy but I’m more than happy to be proven wrong here and add one.",
        "createdAt" : "2021-03-20T13:29:59Z",
        "updatedAt" : "2021-03-22T12:25:07Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "efd37f99-1b24-4781-ae03-19dac94d9f69",
        "parentId" : "0885f14d-26c8-40de-beea-514db39f994d",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Nah, if this is only for a transaction, a simple map works. Thanks!",
        "createdAt" : "2021-03-20T13:39:00Z",
        "updatedAt" : "2021-03-22T12:25:07Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "220e52fb3b287fd25f626355bc15755008ca9467",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +123,127 @@      // global contract discriminators, that are discriminators from contract created in previous transactions\n      var globalDiscriminators: Set[crypto.Hash],\n      var cachedContracts: Map[V.ContractId, CachedContract],\n  ) extends LedgerMode\n"
  },
  {
    "id" : "c5a0e531-3793-49d8-b1d9-b5d62b6cf32e",
    "prId" : 9192,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b51704c-66de-4bea-89af-1d79fca0635e",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n            onLedger.localContracts = (onLedger.localContracts + coid)\r\n```",
        "createdAt" : "2021-03-22T08:36:16Z",
        "updatedAt" : "2021-03-22T12:25:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "f037f32d-08d7-4137-b877-7c610be46ff7",
        "parentId" : "3b51704c-66de-4bea-89af-1d79fca0635e",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "As discussed, let’s leave refactoring of `localContracts` to another PR.",
        "createdAt" : "2021-03-22T10:34:44Z",
        "updatedAt" : "2021-03-22T12:25:07Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "220e52fb3b287fd25f626355bc15755008ca9467",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +353,357 @@            crash(\"Conflicting discriminators between a global and local contract ID.\")\n          case _ =>\n            onLedger.localContracts = onLedger.localContracts.updated(coid, templateId -> SValue)\n            onLedger.cachedContracts = onLedger.cachedContracts.updated(\n              coid,"
  },
  {
    "id" : "0dbcfd1d-1859-4cfa-b699-61435e7d5f72",
    "prId" : 8612,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f208b51c-9b7d-4a49-98cf-f89797af5507",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What happens if the message handler throws an exception? It seems like we’ll throw the exception from the message function now. That seems a bit problematic: An unhandled exception will throw the exception from the message function instead whereas a handled exception won’t (at least not necessarily) even evaluate the message function.\r\n\r\nthat seems somewhat inconsistent. I haven’t yet checked tests and spec to see what is \"correct\" here. @sofiafaro-da wdyt?",
        "createdAt" : "2021-02-11T09:07:41Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "084e1f9c-b29c-47b2-85dc-97d8c324e886",
        "parentId" : "f208b51c-9b7d-4a49-98cf-f89797af5507",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "My understanding is the semantics say the message function is called only when explicitly demanded by the any-exception-message builtin. i.e. not on throw, and not on catch.\r\n\r\nI guess the question is: Is it a good idea to call the any-exception-message for an unhandled exception?\r\nNot sure if the semantics really answers this.\r\n",
        "createdAt" : "2021-02-11T11:38:18Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "38dbad1f-ad8e-4dfa-8bcf-99d1d25207ae",
        "parentId" : "f208b51c-9b7d-4a49-98cf-f89797af5507",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "The semantics doesn't say anything about what you do with an unhandled exception value. It only guarantees that a message function is associated with the exception type, but doesn't precompute the message (because then it would have to store it somewhere in the transaction and that would usually lead to duplication).\r\n\r\nWhen reporting an unhandled exception to the user, I think the correct way to deal with this is to compute the message in a safe way -- if an error or exception occurs during message computation, report both the original error (e.g. the type) and the fact that error message computation failed.",
        "createdAt" : "2021-02-11T11:56:38Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "dc81b38f-a12b-4bf2-a2cf-ec093b98b2fb",
        "parentId" : "f208b51c-9b7d-4a49-98cf-f89797af5507",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I agree with @sofiafaro-da here: Try to compute it but handle the failure.",
        "createdAt" : "2021-02-11T11:58:39Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d026951f-87c9-49f2-b578-7d0be55b9f8d",
        "parentId" : "f208b51c-9b7d-4a49-98cf-f89797af5507",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I marked this as a TODO.\r\n\r\nIf we do embed the original value/type of the LF-exception in the scala exception `DamlEUnhandledException` then perhaps there is no reason to call the message function at all in this place.\r\n",
        "createdAt" : "2021-02-12T13:33:53Z",
        "updatedAt" : "2021-02-15T09:27:14Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a7c69fbff2aaee6c8500bf0826a79cf0cd9f356",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +1309,1313 @@  }\n\n  private[speedy] def throwUnhandledException(machine: Machine, payload: SValue) = {\n    payload match {\n      case SValue.SAnyException(_, messageFunction, innerValue) =>"
  },
  {
    "id" : "cfd90e1f-2b51-4655-850a-a05e349125e8",
    "prId" : 8063,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8063",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a5be62d-01ed-457a-b788-0b12bae627a6",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm slightly troubled by the idea of storing pointers to mutable objects in long-living objects. It's probably fine in this instance but I'm not sure. @remyhaemmerle-da do you have any thoughts on this?",
        "createdAt" : "2020-11-26T12:39:28Z",
        "updatedAt" : "2020-11-27T09:05:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "3f7a9aeb-1bba-49ba-a1f8-1251b7dd6d14",
        "parentId" : "4a5be62d-01ed-457a-b788-0b12bae627a6",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "So specifically: I think you are referring to references from the continuations to the machine. ?\r\nThis doesn't worry me, because the machine is longer lived that the continuations that live in it.",
        "createdAt" : "2020-11-26T14:52:10Z",
        "updatedAt" : "2020-11-27T09:05:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "0ca256d4-282d-4370-b0f5-fc6936cca0f8",
        "parentId" : "4a5be62d-01ed-457a-b788-0b12bae627a6",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Are there any more thoughts on this issue?",
        "createdAt" : "2020-11-27T09:12:41Z",
        "updatedAt" : "2020-11-27T09:12:41Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "c884ffaf-597c-47e1-ae5f-896c6e90ff0e",
        "parentId" : "4a5be62d-01ed-457a-b788-0b12bae627a6",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I've decided I'm ok with this but would really like to hear from @remyhaemmerle-da about this too.",
        "createdAt" : "2020-11-27T10:21:28Z",
        "updatedAt" : "2020-11-27T10:36:28Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "f00dee2657527233d47c717ceb562b03778addd2",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +870,874 @@  }\n\n  private[speedy] final case class KOverApp(machine: Machine, newArgs: Array[SExprAtomic])\n      extends Kont\n      with SomeArrayEquals {"
  },
  {
    "id" : "ea5cbb8b-e6a7-46d5-93b7-a8422cab2ad8",
    "prId" : 8063,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8063",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b03ce97-4835-4aeb-9bc0-6a099d3e2f42",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "It is still unclear to me why the stack height returned by `makeBase` is not sufficient. After successfully leaving the `try { ... }` block or before entering the `catch { ... }` block, you want to restore to the same stack height, don't you?",
        "createdAt" : "2020-11-26T12:42:06Z",
        "updatedAt" : "2020-11-27T09:05:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "6b468c5b-77e9-4caa-99e5-56cb816bbec6",
        "parentId" : "2b03ce97-4835-4aeb-9bc0-6a099d3e2f42",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "The main reason the code reverts to the env.size is because that's what it was doing before!\r\n\r\nThis would be necessary if the handler continuation requires access to the temps of the context when it was created. Which seems reasonable.\r\n\r\nBut I suspect that it never does use any temps, because try-catch is only used to support submitMustFail. i.e. try-catch is not directly exposed to the user\r\n\r\nI will investigate some more.\r\n",
        "createdAt" : "2020-11-26T14:57:38Z",
        "updatedAt" : "2020-11-27T09:05:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "9246dc75-cf66-42a7-890c-e232a4bc3edb",
        "parentId" : "2b03ce97-4835-4aeb-9bc0-6a099d3e2f42",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Aren't the contexts at which the handler was created and the context to which we want to jump back when no exception was raised exactly the same?",
        "createdAt" : "2020-11-26T16:17:25Z",
        "updatedAt" : "2020-11-27T09:05:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "f75a86fb-0a5a-4656-b182-c9c01aefcacc",
        "parentId" : "2b03ce97-4835-4aeb-9bc0-6a099d3e2f42",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Yes. But the stack height we want is `env.size`, not `envBase` . (`markBase` increases `envBase` to `env.size` and returns the old value of `envBase`, which doesn't include any temporaries on the stack between (old) `envBase` and `env.size`. )\r\n\r\nThe general form of the *try-catch* construct (`SECatch`) is: \r\n    `try BODY catch HANDLER finally FIN end-try` (made up syntax)\r\nUpper case names are arbitrary expressions:\r\n    `HANDLER` is evaluated if an exception is thrown during evaluation of `BODY`\r\n    `FIN` is evaluated after `BODY` if no exception is thrown\r\n\r\nIf a try-catch expression is embedded in an enclosing `let` expression, any variables bound in this let-expression should be in scope for `BODY`, `HANDLER` and `FIN`, and will be temporaries on the env-stack.  The env-stack should only be popped back to `envBase` when evaluation leaves the context of `HANDLER` or `FIN`, either by returning a value, or tail calling. If an exception is thrown during the evaluation of `BODY`, we need to rewind the stack back to `env.size` before evaluation of `HANDER`.  Hence why we store `env.size` in the closure.\r\n\r\n\r\nHowever....\r\n\r\nAs it turns out... both the `FIN` and the `HANDER` will not reference any variables, but will always be simple atomic values... we know this because the try-catch expression is only constructed by the speedy-compiler in one situation:\r\n\r\n```\r\n      labeledUnaryFunction(\"submitMustFail\") { tokenPos =>\r\n        let(SBSBeginCommit(optLoc)(compile(party), svar(tokenPos))) { _ =>\r\n          let(SECatch(app(compile(update), svar(tokenPos)), SEValue.True, SEValue.False)) {\r\n            resultPos =>\r\n              SBSEndCommit(mustFail = true)(svar(resultPos), svar(tokenPos))\r\n          }\r\n        }\r\n      }\r\n```\r\n\r\nso... `env.size` and the old/new values `envBase` will all be identical.\r\nHowever, I think if we want to make use of this knowledge, we should probably de-generalize the `SECatch` class to represent only the limited case we actually require.\r\n",
        "createdAt" : "2020-11-26T19:34:12Z",
        "updatedAt" : "2020-11-27T09:05:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "4d5c20e2-21b6-44a4-8eca-fcaa6089e01d",
        "parentId" : "2b03ce97-4835-4aeb-9bc0-6a099d3e2f42",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I don't think there is any need to do anything here for this PR.",
        "createdAt" : "2020-11-27T09:13:15Z",
        "updatedAt" : "2020-11-27T09:13:15Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "bb0ec611-6e08-4e3a-af10-ed84f2885334",
        "parentId" : "2b03ce97-4835-4aeb-9bc0-6a099d3e2f42",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I think I wrapped my head around this. When the `try ... catch ...` expression is in tail position, how deep we need to unwind the stack depends on whether the guarded expression was successful or failed. In the case of success, we need to pop the locals we had before entering the `try` block but in case of failure, we might (in general) need these locals in the exception handler. If the `try ... catch ...` block is `let` bound, then both stack heights will be the same. Does that explanation make sense? If so, could you please slightly extend the comment in that direction? Thank you.",
        "createdAt" : "2020-11-27T10:34:11Z",
        "updatedAt" : "2020-11-27T10:36:28Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "f00dee2657527233d47c717ceb562b03778addd2",
    "line" : 417,
    "diffHunk" : "@@ -1,1 +1224,1228 @@    // We call [markBase] (as standard) so the continuation may access its temporaries.\n    // In addition [env.size] is recorded for use in [tryHandleException] to allow the\n    // env-stack to be unwound correctly when an exception is thrown.\n\n    val envSize = machine.env.size"
  },
  {
    "id" : "222d2ada-7f6e-4446-a505-3b56e0d21e53",
    "prId" : 8062,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb08e2fb-a438-4a64-bf27-419e28bc4bf6",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "this assumes everything is well-typed right? you seem to do basically no validation. If so, I suggest adding a comment documenting this.",
        "createdAt" : "2021-01-14T15:28:36Z",
        "updatedAt" : "2021-01-27T12:46:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2b7b47dc-d730-4322-a038-3fb1e8af6488",
        "parentId" : "fb08e2fb-a438-4a64-bf27-419e28bc4bf6",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I though the pre-existing comment was enough. I extended it.",
        "createdAt" : "2021-01-14T18:49:47Z",
        "updatedAt" : "2021-01-27T12:46:56Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "007d7e88f565f9c5f41e6e2931c48f70403f5f84",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +649,653 @@    // All the contract IDs contained in the value are considered global.\n    // Raises an exception if missing a package.\n    private[speedy] def importValue(typ0: Type, value0: V[V.ContractId]): Unit = {\n\n      def go(ty: Type, value: V[V.ContractId]): SValue = {"
  },
  {
    "id" : "763bbc22-c8e6-49e0-b46a-2678bff76196",
    "prId" : 8036,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8036",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "464566ea-4dd5-481c-a75a-fa7d595afa8b",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I wrote this line myself and I never liked it. Maybe I figured out how to do slightly better:\r\n```suggestion\r\n        env.removeRange(envSizeToBeRestored, env.size)\r\n```",
        "createdAt" : "2020-11-24T16:38:58Z",
        "updatedAt" : "2020-11-25T12:00:43Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "32bc339c-dc43-4eab-b0ce-f9b8897600d7",
        "parentId" : "464566ea-4dd5-481c-a75a-fa7d595afa8b",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "```\r\ndaml-lf/interpreter/src/main/scala/com/digitalasset/daml/lf/speedy/Speedy.scala:252: error: method removeRange in class ArrayList cannot be accessed in com.daml.lf.speedy.Speedy.Env\r\n Access to protected method removeRange not permitted because\r\n enclosing class Machine in object Speedy is not a subclass of\r\n class ArrayList in package util where target is defined\r\n        env.removeRange(envSizeToBeRestored, env.size)\r\n```\r\n\r\nAlso, the `subList`/`clear` pattern is used also in `tryHandleException`\r\n\r\nIf we do pursue this improvement, let's leave it to a future PR.\r\n\r\n",
        "createdAt" : "2020-11-25T11:26:36Z",
        "updatedAt" : "2020-11-25T12:00:43Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "dce6474f-5969-4424-ba36-78fbac2423aa",
        "parentId" : "464566ea-4dd5-481c-a75a-fa7d595afa8b",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Yeah, let's leave it for a separate PR.",
        "createdAt" : "2020-11-25T13:22:32Z",
        "updatedAt" : "2020-11-25T13:22:32Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "da175325464f7d811e228324f060b59a15d43897",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +248,252 @@      }\n      if (count > 0) {\n        env.subList(envSizeToBeRestored, env.size).clear\n      }\n    }"
  },
  {
    "id" : "6482e8fc-2d4f-4913-b8c4-3f57d83b82c5",
    "prId" : 7501,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4da71af4-5b83-4a13-b789-a89c2c900ccf",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Very open to better naming suggestions.",
        "createdAt" : "2020-09-28T17:51:48Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f30f85b3-ca1c-46d0-9df8-191e8296c646",
        "parentId" : "4da71af4-5b83-4a13-b789-a89c2c900ccf",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I do not like it neither, but I do not have better alternative. :disappointed: ",
        "createdAt" : "2020-09-29T07:45:10Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "3d21b2ce-7539-44dd-bebe-ad448f364184",
        "parentId" : "4da71af4-5b83-4a13-b789-a89c2c900ccf",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "What do you think about something like `ExecutionEnvironment`? You can either execute DAML on a ledger or off a ledger.",
        "createdAt" : "2020-09-30T11:56:58Z",
        "updatedAt" : "2020-09-30T11:58:58Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "951bdb9b-7dbf-4b5f-a5ad-a5495c8d459b",
        "parentId" : "4da71af4-5b83-4a13-b789-a89c2c900ccf",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "sounds reasonable but also sounds very generic to the point where it doesn’t give you much of an idea of what the possible execution environments could be.",
        "createdAt" : "2020-09-30T12:00:13Z",
        "updatedAt" : "2020-09-30T12:00:13Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "b25c1c36b2946c9654397dda20c730c43a9168fc",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +98,102 @@  private type Actuals = util.ArrayList[SValue]\n\n  private[lf] sealed trait LedgerMode\n\n  private[lf] final case class OnLedger("
  },
  {
    "id" : "23f68563-4448-4d7e-931f-2ad91c08dde2",
    "prId" : 7501,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35559d1e-c0e1-487e-a042-721d69e6d1b0",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Not quite sure if this callback-style approach makes that much sense here. The alternative would be a `getOnLedger` or something like that.",
        "createdAt" : "2020-09-28T17:52:16Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "b25c1c36b2946c9654397dda20c730c43a9168fc",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +172,176 @@    private[speedy] def kontDepth(): Int = kontStack.size()\n\n    private[lf] def withOnLedger[T](op: String)(f: OnLedger => T): T =\n      ledgerMode match {\n        case onLedger @ OnLedger(_, _, _, _, _, _, _, _, _, _) => f(onLedger)"
  },
  {
    "id" : "f99bab40-f61e-4534-9a22-c63dd0267d1d",
    "prId" : 7225,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7225",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45900aa7-73c5-4ab1-88d5-3e71add84c0d",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "much cleaner, thank you!",
        "createdAt" : "2020-08-25T12:57:07Z",
        "updatedAt" : "2020-08-25T12:57:36Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a16b208121cdb8d6387a918c347fb59361a1f8e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +577,581 @@          case V.ValueUnit => SUnit\n          case V.ValueRecord(Some(id), fs) =>\n            val values = new util.ArrayList[SValue](fs.length)\n            val names = fs.map {\n              case (Some(f), v) =>"
  },
  {
    "id" : "1bffb969-3f03-40a2-9c44-48774735af01",
    "prId" : 6973,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c87db79-0445-4fda-b963-d03040f4f7b8",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "@nickchapman-da Please correct me if I'm wrong: This line is the application of an `SPAP` to two values. Hence, there's no need to restore the environment for this because values don't contain references into the environment. Does that sound correct? If so, I'll remove the restoring of the environment in a fresh PR.",
        "createdAt" : "2020-08-04T09:14:13Z",
        "updatedAt" : "2020-08-04T09:14:13Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "f39cac75-8569-4dac-9555-d5762e40f134",
        "parentId" : "7c87db79-0445-4fda-b963-d03040f4f7b8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "What if the function allocates on the stack (because it contains a let binding)?",
        "createdAt" : "2020-08-04T09:50:58Z",
        "updatedAt" : "2020-08-04T09:50:58Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc9d06276117ca217b75bd7972e46a9b05d2df87",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +920,924 @@          // TODO(MH): This looks like it has some potential for further\n          // performance gains once the AST nodes related to ANF have landed.\n          machine.ctrl = SEAppAtomicFun(func, Array(SEValue(acc), SEValue(item)))\n      }\n    }"
  },
  {
    "id" : "bfdd178f-1c4c-45f3-83ab-369000089af3",
    "prId" : 6579,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aea0188e-337d-4f68-932c-de56117bf94a",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "This change does not seem to be related to making things private. I assume `ImmArray` is expected to be more performant than `ArrayList` in this case?",
        "createdAt" : "2020-07-02T10:32:47Z",
        "updatedAt" : "2020-07-02T11:39:40Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "dce7528a-24b3-469e-a8ca-652a6c91ed87",
        "parentId" : "aea0188e-337d-4f68-932c-de56117bf94a",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "`ImmArray` builders are probably not as efficient as `ArrayList`. However in the current case the `ArrayList` is built and then directly converted in `ImmArray`",
        "createdAt" : "2020-07-02T10:54:56Z",
        "updatedAt" : "2020-07-02T11:39:40Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e27b2d80e6e0e41fd10a8cf5aab60e5392bf92f",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +254,258 @@        The last seen location will come last. */\n    def stackTrace(): ImmArray[Location] = {\n      val s = ImmArray.newBuilder[Location]\n      kontStack.forEach { k =>\n        k match {"
  },
  {
    "id" : "9852adb8-47e4-423e-84e0-56fa1865ed49",
    "prId" : 6579,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "004cb4a5-9916-41ee-8287-f21df3ec1b57",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "```scala\r\ns ++= kontStack.asScala.iterator.collect { case KLocation(location) => location }\r\n```\r\n\r\nIf you like. (It's views all the way down.)",
        "createdAt" : "2020-07-06T19:33:27Z",
        "updatedAt" : "2020-07-06T19:33:27Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "68987fa9-3888-4966-b254-2bdfd86ffd81",
        "parentId" : "004cb4a5-9916-41ee-8287-f21df3ec1b57",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Better yet\r\n\r\n```scala\r\nkontStack.asScala.iterator.collect { case KLocation(location) => location }.to(ImmArray)\r\n```",
        "createdAt" : "2020-07-06T19:34:25Z",
        "updatedAt" : "2020-07-06T19:34:46Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e27b2d80e6e0e41fd10a8cf5aab60e5392bf92f",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +260,264 @@          case _ => ()\n        }\n      }\n      s.result()\n    }"
  },
  {
    "id" : "f54cb8d9-a8ef-48d5-aaef-3a174d6b3242",
    "prId" : 6440,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b949215-76f7-47c8-a8b1-22a5ac9f39c3",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "De we really need one more builder for the Machine ? \r\nThere is already quite a lot of parameters to those builders (and there will be some more to control output transaction versionning), and those parameters are quite sensitive to set up and have a subtle semantics. \r\nI am a bit worry that if there is too much builders people (where most of them are with default parameters) people will just overlook those parameters. \r\n\r\nMaybe we do not need the from `PureSExpr`  anymore. ",
        "createdAt" : "2020-06-26T09:48:35Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "75273eea-4e12-40e3-aef1-0b608f0729d6",
        "parentId" : "1b949215-76f7-47c8-a8b1-22a5ac9f39c3",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "both are used, but I will have a look if one can be eliminated",
        "createdAt" : "2020-06-29T11:45:58Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "a394a245-8eee-4694-ab8b-9b0ad334e6a4",
        "parentId" : "1b949215-76f7-47c8-a8b1-22a5ac9f39c3",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I had a look. I don't think we should remove either of these entry point (at the moment).\r\nIt would be tricky to remove the new `fromPureAExpr` because sometimes the caller has `AExpr` in their hands.\r\nIt would be trivial to remove/inline `fromPureSExpr`, but that would mean more place in the code which have to call `flattenToAnf`, and I think that would be worse.",
        "createdAt" : "2020-06-30T09:32:06Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "c666f0a8-6469-48b6-afd7-e25bc73e9ebd",
        "parentId" : "1b949215-76f7-47c8-a8b1-22a5ac9f39c3",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm fine with having another entry point for this.",
        "createdAt" : "2020-06-30T10:25:51Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +609,613 @@    )\n\n    def fromPureAExpr(\n        compiledPackages: CompiledPackages,\n        anf: AExpr,"
  },
  {
    "id" : "52d8efb1-b5ee-46fd-994d-525e4da644de",
    "prId" : 6440,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c569b3c-3cf9-47c8-b042-eb0e1d66297b",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not comfortable merging this even more complicated pattern until we have a way to turn of location handling in sandbox.",
        "createdAt" : "2020-06-26T11:30:22Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "23ade4ff-c367-400d-ac44-ef58efcb44a3",
        "parentId" : "7c569b3c-3cf9-47c8-b042-eb0e1d66297b",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Has this condition been satisfied now?\r\nOr is this still blocking this PR?",
        "createdAt" : "2020-06-30T15:02:45Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +216,220 @@        // lambda binding the token.\n        // TODO: re-work the location handling, to avoid the following fragile special-case\n        case Some(KPushTo(_, SEAppAtomicGeneral(SELocS(1), Array(SEValue.Token)), _, _, _)) => {\n          // Can't call pushKont here, because we don't push at the top of the stack.\n          kontStack.add(last_index, KLocation(loc))"
  },
  {
    "id" : "4a53070f-462f-4cc6-bedc-efb26af22748",
    "prId" : 6440,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9138cfde-7713-40d7-bde5-f79affa999d5",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "An expression in ANF is still an expression...\r\n```suggestion\r\n        expr: AExpr,\r\n```",
        "createdAt" : "2020-06-26T11:31:29Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "8126cb1d-6bcb-431c-a734-36886b5b5441",
        "parentId" : "9138cfde-7713-40d7-bde5-f79affa999d5",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "it is. but naming is `anf` is better. and it's not just this one place. so I suggest we leave it",
        "createdAt" : "2020-06-30T15:03:33Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +527,531 @@        submissionTime: Time.Timestamp,\n        initialSeeding: InitialSeeding,\n        anf: AExpr,\n        globalCids: Set[V.ContractId],\n        committers: Set[Party],"
  },
  {
    "id" : "e5c86132-6da1-46d5-a712-29b32fa5b8f9",
    "prId" : 6440,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0354546-9798-4ad7-9b31-6d5f8b1668ca",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "There's no _static_ way to detect over-applications, is there? If there isn't, then `KArg` is here to stay and we should reduce the duplication between `executeApplication` and `enterApplication`.",
        "createdAt" : "2020-06-26T11:40:11Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "85e968c4-c857-479d-9ac5-606e4994d82b",
        "parentId" : "a0354546-9798-4ad7-9b31-6d5f8b1668ca",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "`KArg` does not have to stay. The replacement will have only the over-applied values. And so the old code will get removed.",
        "createdAt" : "2020-06-30T15:04:48Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 217,
    "diffHunk" : "@@ -1,1 +800,804 @@  }\n\n  //TODO: Remove KArg once it's use to execute over-applications is removed\n  final case class KArg(newArgs: Array[SExpr], frame: Frame, actuals: Actuals, envSize: Int)\n      extends Kont"
  },
  {
    "id" : "58a62c1e-0c4c-4c94-819f-5e5e17e71a36",
    "prId" : 6368,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "789d32d9-7d63-4dd6-9734-66b656f3a374",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Would it make sense to call this `fromPureExpr`?",
        "createdAt" : "2020-06-17T13:23:29Z",
        "updatedAt" : "2020-06-18T20:12:51Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "6422994acada0eb74280713a408f020498a5de13",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +582,586 @@\n    // Construct a machine for evaluating an expression that is neither an update nor a scenario expression.\n    def fromExpr(\n        compiledPackages: CompiledPackages,\n        expr: SExpr,"
  },
  {
    "id" : "a827c92f-b1d8-4734-8196-cfc8d1031b41",
    "prId" : 6368,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a782fbe2-c480-4946-8cc5-6fd98d4da5da",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n      fromExpr(compiledPackages, compiledPackages.compiler.unsafeCompile(expr))\r\n```",
        "createdAt" : "2020-06-17T13:24:57Z",
        "updatedAt" : "2020-06-18T20:12:51Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "6422994acada0eb74280713a408f020498a5de13",
    "line" : 207,
    "diffHunk" : "@@ -1,1 +609,613 @@        globalCids = Set.empty,\n        committers = Set.empty,\n      )\n\n  }"
  },
  {
    "id" : "c31c8756-e76a-4910-b1fb-42b0add0d43e",
    "prId" : 6368,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4c77ac9-0dfa-4d65-9439-e379405fef34",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not a big fan of overloading functions of the same name with different types. 😦",
        "createdAt" : "2020-06-17T13:26:32Z",
        "updatedAt" : "2020-06-18T20:12:51Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "6422994acada0eb74280713a408f020498a5de13",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +598,602 @@    @throws[CompilationError]\n    // Construct a machine for evaluating an expression that is neither an update nor a scenario expression.\n    def fromExpr(\n        compiledPackages: CompiledPackages,\n        expr: Expr,"
  },
  {
    "id" : "c64f4add-dba7-4e89-a911-a62c86425530",
    "prId" : 6234,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "348dc033-d91c-4edf-91a1-9a35c9c6d9cc",
        "parentId" : null,
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Nice. Embedding the PClosure in the KFun, instead of it's components.",
        "createdAt" : "2020-06-05T08:17:28Z",
        "updatedAt" : "2020-06-05T08:18:22Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "c91b91a129dc85a9cc65c570b410845e71daee21",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +727,731 @@\n  /** The function-closure and arguments have been evaluated. Now execute the body. */\n  final case class KFun(closure: PClosure, actuals: util.ArrayList[SValue])\n      extends Kont\n      with SomeArrayEquals {"
  },
  {
    "id" : "aba51ee8-0f01-451f-87bf-131855ecce19",
    "prId" : 6104,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a7f088e-2056-4304-aba2-fabfe87cfed2",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n  private def executeApplication(machine: Machine, vfun: SValue, newArgs: Array[SExpr]): Unit = {\r\n```",
        "createdAt" : "2020-05-29T13:54:51Z",
        "updatedAt" : "2020-06-01T10:08:16Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "b87d496a-e6b0-4df7-8ad9-c491c23b2769",
        "parentId" : "7a7f088e-2056-4304-aba2-fabfe87cfed2",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "This can't be `private` because it is also used in `SExpr.scala`",
        "createdAt" : "2020-06-01T10:12:36Z",
        "updatedAt" : "2020-06-01T10:12:36Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a29d1b37f9bb15fa3b9ef14f3c26354f7e93866",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +653,657 @@\n  /** The function has been evaluated to a value, now start evaluating the arguments. */\n  def executeApplication(machine: Machine, vfun: SValue, newArgs: Array[SExpr]): Unit = {\n    vfun match {\n      case SPAP(prim, actualsSoFar, arity) =>"
  },
  {
    "id" : "499c345d-eaef-480e-859d-c6cfe66be771",
    "prId" : 6003,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4327ceaf-422f-4362-8d49-75c2b876034d",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n      /* Environment: local values pushed to a stack: let-bindings and pattern-matches. */\r\n```",
        "createdAt" : "2020-05-19T17:39:52Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +91,95 @@      /* Frame: to access values for function arguments and closure free-vars. */\n      var frame: Frame,\n      /* Environment: values pushed to a stack: let-bindings and pattern-matches. */\n      var env: Env,\n      /* Kont, or continuation specifies what should be done next"
  },
  {
    "id" : "475a7e76-46d2-476f-9894-364f5f4a9a30",
    "prId" : 6003,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b76f496-95ba-47a1-8428-e54d38bf5ac5",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n      /* Frame: to access values for function arguments and variables captured by closures. */\r\n```",
        "createdAt" : "2020-05-19T17:40:33Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +89,93 @@       */\n      var returnValue: SValue,\n      /* Frame: to access values for function arguments and closure free-vars. */\n      var frame: Frame,\n      /* Environment: values pushed to a stack: let-bindings and pattern-matches. */"
  },
  {
    "id" : "768c3119-3239-441c-9d70-ecadb934e9fe",
    "prId" : 6003,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77466af8-6033-4f75-b6b6-7875ef453d27",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n    // Variables which reside in the captured variables array of the current frame. Indexed by absolute offset.\r\n```",
        "createdAt" : "2020-05-19T17:41:19Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +156,160 @@    @inline def getEnvArg(i: Int): SValue = frame.args.get(i)\n\n    // Variables which reside in the free-vars array of the current frame. Indexed by absolute offset.\n    @inline def getEnvFree(i: Int): SValue = {\n      //TODO(NC) : modify types to avoid this asInstanceOf"
  },
  {
    "id" : "566446a3-965d-46da-a7b2-3b8ad24cb5da",
    "prId" : 6003,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2352fb34-a429-4644-9604-e0e9b524e670",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n        if (env.size < envSize) {\r\n          crash(s\"restoreEnv, cannot shrink environment from ${env.size} to ${envSize}\")\r\n```",
        "createdAt" : "2020-05-19T17:51:34Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +177,181 @@        val count = env.size - envSize\n        if (count < 1) {\n          crash(s\"restoreEnv, unexpected negative count: $count!\")\n        }\n        env.subList(envSize, env.size).clear"
  },
  {
    "id" : "577428c7-8379-4485-89b9-09038447a8b1",
    "prId" : 6003,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81fb96d4-8955-4bbe-ac7f-1e3e122ce829",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Which one is the common case: `envSize` or `envSize < env.size`? We should make the common case the cheaper one with less branching. Let's keep that for a separate PR though.",
        "createdAt" : "2020-05-19T17:52:32Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +174,178 @@      frame = frameToBeRestored\n      // Pop the env-stack back to the size it was when the continuation was created.\n      if (envSize != env.size) {\n        val count = env.size - envSize\n        if (count < 1) {"
  },
  {
    "id" : "5a61f7cd-7e6d-4079-bdee-acbfd55aed61",
    "prId" : 6003,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9044e07-65bf-4385-b39a-17ad16e5a6e1",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm very sad that we need to allocate a sublist to truncate a vector. I wish Java had something like https://doc.rust-lang.org/std/vec/struct.Vec.html#method.truncate.\r\n😿",
        "createdAt" : "2020-05-19T17:53:54Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "0f0217c1-f336-4889-b427-4afe17ac8a1a",
        "parentId" : "d9044e07-65bf-4385-b39a-17ad16e5a6e1",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "@martin-drhu-da \r\nFrancesco's `ImmArray` behaves like haskell vector. \r\nI am just afraid the constant overhead is too high. ",
        "createdAt" : "2020-05-19T22:01:30Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +179,183 @@          crash(s\"restoreEnv, unexpected negative count: $count!\")\n        }\n        env.subList(envSize, env.size).clear\n      }\n    }"
  },
  {
    "id" : "19938f76-cf4f-4546-9b46-041d724eca68",
    "prId" : 6003,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8362cd38-7bbb-430e-b8cb-7d49af7b483a",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n  // the captured variables which were stored into the closure.\r\n```",
        "createdAt" : "2020-05-19T17:57:13Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +625,629 @@  // For our frame, we use the KFun continuation directly.  From here\n  // we can access both the application arguments, and the values of\n  // the free-variables which were stored into the closure.\n  type Frame = KFun\n"
  },
  {
    "id" : "fb19d82e-3281-41cc-b9be-745d8e15a9c6",
    "prId" : 6003,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "343081a1-0010-497c-a010-456f715c00c8",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not sure `envSize` is the best name we can find for the last argument. A comment explaining what it is would also help. Do `Frame` and `envSize` always show up as a couple? If so, should we move `envSize` into `Frame`?",
        "createdAt" : "2020-05-19T18:43:42Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "79073b5a-63e9-4f56-8ce1-a351c3c9750c",
        "parentId" : "343081a1-0010-497c-a010-456f715c00c8",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I expect the code in this function to be very hot. Once we've landed this PR, I'd like to see this (dis)proved using a profiler and if it turns out to be hot indeed, we should try to squeeze more performance out of it.",
        "createdAt" : "2020-05-19T18:57:02Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "061f6529-2cce-4928-99ea-69561e83899c",
        "parentId" : "343081a1-0010-497c-a010-456f715c00c8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I don't think we can put `envSize` in the `Frame`... but I need to think more about this.\r\nI suggest we leave this as it is for now.",
        "createdAt" : "2020-05-20T07:18:44Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "00100a4a-212a-4d57-96d6-49857a0bf70c",
        "parentId" : "343081a1-0010-497c-a010-456f715c00c8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Yes I'm sure profiling wold be very instructive.",
        "createdAt" : "2020-05-20T07:19:12Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +170,174 @@    }\n\n    @inline def restoreEnv(frameToBeRestored: Frame, envSize: Int): Unit = {\n      // Restore the frame pointer captured when the continuation was created.\n      frame = frameToBeRestored"
  },
  {
    "id" : "5e793cc9-f6b9-48af-9718-5bef5867b654",
    "prId" : 6003,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c39f67e0-a923-4d7a-9c49-e44391876bd8",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I assume we don't need to look at the captured variables anymore because they are also part of `KFun`? If so, that would deserve a comment.",
        "createdAt" : "2020-05-19T18:52:34Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "21eb0f5d-01ff-4116-8198-bce30ec0f60c",
        "parentId" : "c39f67e0-a923-4d7a-9c49-e44391876bd8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "correct.",
        "createdAt" : "2020-05-20T07:15:32Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "c25af67f-4967-4f2a-9665-5c10db05149a",
        "parentId" : "c39f67e0-a923-4d7a-9c49-e44391876bd8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I added the comment about how Speedy uses a caller-save strategy for the environment.\r\n\r\nI'm reluctant to write a specific comment to say we no longer do what we used to do when we were following a different strategy.\r\n\r\nBut if there is a specific comment you feel would be helpful, please do add it.\r\n",
        "createdAt" : "2020-05-20T07:24:01Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "4d7a3380-9e39-4ce6-99ab-9fefd9dc9903",
        "parentId" : "c39f67e0-a923-4d7a-9c49-e44391876bd8",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Regardless of what strategy we used in the past, ignoring the array of captured variables when entering a closure seems worth an explanation. This also seems to be related to the `prim` comment above. Somehow, we ended up with unnormalized data here, where the same thing ends up in multiple places. We should clean this up or explain it _here_, even if it is only a pointer to the big comment.",
        "createdAt" : "2020-05-20T08:34:02Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "184310eb-4c5e-41e6-b616-e7d0c00f38c8",
        "parentId" : "c39f67e0-a923-4d7a-9c49-e44391876bd8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I added a comment",
        "createdAt" : "2020-05-20T09:03:12Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +354,358 @@    def enterFullyAppliedFunction(prim: Prim, args: util.ArrayList[SValue]): Unit = {\n      prim match {\n        case PClosure(label, expr, _) =>\n          if (label != null) {\n            profile.addOpenEvent(label)"
  },
  {
    "id" : "01778e69-8a82-4642-a719-ff4b82d6006f",
    "prId" : 5881,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "169a0e05-90b0-4efb-a4a4-5572bd6b65c9",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Shouldn't we also reset `kontStack` here? This would be particularly important when you reuse a machine that had failed with an exception.",
        "createdAt" : "2020-05-07T07:34:39Z",
        "updatedAt" : "2020-05-07T07:58:26Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "43d7b1d6-a1c7-492a-89ff-d04e539748ef",
        "parentId" : "169a0e05-90b0-4efb-a4a4-5572bd6b65c9",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Yes.\r\nAnd in fact I do in my next PR.",
        "createdAt" : "2020-05-07T08:08:46Z",
        "updatedAt" : "2020-05-07T08:08:46Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "a5277b76-f16d-45bb-89e5-d8b02e47e60f",
        "parentId" : "169a0e05-90b0-4efb-a4a4-5572bd6b65c9",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "If that's an actual problem then let's please fix it in this PR. I'm not keen to have potentially broken things in master if we can avoid it. You never know who runs a `daml-sdk-head` when.",
        "createdAt" : "2020-05-07T08:23:07Z",
        "updatedAt" : "2020-05-07T08:23:07Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "e64d616c07b79eb94e74bcd9fdf26b01521b9b5c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +136,140 @@    def setExpressionToEvaluate(expr: SExpr): Unit = {\n      ctrl = expr\n      returnValue = null\n    }\n"
  },
  {
    "id" : "3e748619-d1f3-4235-93e1-082ec267ebbe",
    "prId" : 5845,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5845",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ab962fd-e243-4afb-99f2-03246804dfc7",
        "parentId" : null,
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "Is this supposed to stay in?",
        "createdAt" : "2020-05-05T14:58:53Z",
        "updatedAt" : "2020-05-05T14:58:53Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "61da3688-c0e0-4d04-9450-a0b757a18566",
        "parentId" : "0ab962fd-e243-4afb-99f2-03246804dfc7",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "What's wrong with it? Is was there before already. And it's in a function used only in debugging tools anyway.",
        "createdAt" : "2020-05-05T15:01:19Z",
        "updatedAt" : "2020-05-05T15:01:19Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f297c8ceec75fb8ba36f061b243438360629b02",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +286,290 @@      } else {\n        println(s\"  ${ctrl_expr}\")\n      }\n      println(\"Environment:\")\n      env.forEach { v =>"
  },
  {
    "id" : "912a1ae0-a47f-41c4-90bd-e3db03416eba",
    "prId" : 5835,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbab4236-511d-4ab4-884e-2564e3d0b6c5",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n      // where we must continue iteration.\r\n```",
        "createdAt" : "2020-05-05T11:00:13Z",
        "updatedAt" : "2020-05-05T11:01:08Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "8cf46eaf-7dea-4dd0-91e0-0cfdd8f021ac",
        "parentId" : "cbab4236-511d-4ab4-884e-2564e3d0b6c5",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "fixed in next PR",
        "createdAt" : "2020-05-05T11:42:53Z",
        "updatedAt" : "2020-05-05T11:42:54Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "397d9abb22845a5f5806e95f35ac07e0f01ce54c",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +136,140 @@      // However, we still need the outer loop because of the case:\n      //    case _:SErrorDamlException if tryHandleException =>\n      // where we must continue interation.\n      var result: SResult = null\n      while (result == null) {"
  },
  {
    "id" : "6c803169-2608-4722-b125-e1092a0adb70",
    "prId" : 5819,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a451a22-ab76-40a2-b8d8-54bf7c8dd105",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "We could wrapped this variable and the following ones in a new object (call something like statics) to limit the extension this endless list of parameter. \r\nYou will pay the small cost of indirection only when instrumentation is running. ",
        "createdAt" : "2020-05-05T12:12:03Z",
        "updatedAt" : "2020-05-11T08:59:50Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d1734369ae2276cb8e1c399796673b4b2ffe9e3",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +98,102 @@      var globalDiscriminators: Set[crypto.Hash],\n      /* Used when enableLightweightStepTracing is true */\n      var steps: Int,\n      /* Used when enableInstrumentation is true */\n      var track: Instrumentation,"
  },
  {
    "id" : "62965f13-7d40-4a7e-9868-f72c25816b14",
    "prId" : 5819,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "394bca43-5481-4f12-9377-96f6cf480a0a",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Are we sure we don't have to pay for this even when `enableInstrumentation` is false? Would it make sense to subclass `Speedy` and override these methods? Or do we have to pay for additional dynamic dispatch then?",
        "createdAt" : "2020-05-12T20:21:42Z",
        "updatedAt" : "2020-05-12T20:23:34Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d1734369ae2276cb8e1c399796673b4b2ffe9e3",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +127,131 @@    @inline def pushEnv(v: SValue): Unit = {\n      env.add(v)\n      if (enableInstrumentation) {\n        track.countPushesEnv += 1\n        if (envDepth > track.maxDepthEnv) track.maxDepthEnv = envDepth"
  },
  {
    "id" : "e4c05be7-ff5f-40f7-9f7c-ac2bff9cdfa8",
    "prId" : 5814,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22832ea6-51d5-4585-b05c-640cfd118f50",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Why not return the old `SResultContinue` here? I don't think there's anything wrong with it.",
        "createdAt" : "2020-05-04T06:58:23Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "0b0f24ed-11d8-4db5-9faa-81070a9170c1",
        "parentId" : "22832ea6-51d5-4585-b05c-640cfd118f50",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Because `SResultContinue` had different semantics.\r\nReusing an old name with changed semantics can be confusing.\r\nAlso I wanted there to be a payload. See above :)",
        "createdAt" : "2020-05-04T09:47:31Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e68cc9359abaf460f448f09c616975c2935f54b",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +127,131 @@            ctrl.execute(this) // make a single step\n          }\n          ctrl match {\n            case CtrlValue(value) => {\n              result = SResultFinalValue(value) //stop"
  },
  {
    "id" : "44c1aa9f-acc7-4319-b22b-02eb7066b318",
    "prId" : 5814,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8363b5d-b4f2-48ae-ae83-cd33d94f58c2",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n    /** Run a machine until we get a result: either a final-value or a request for data, with a callback */\r\n```",
        "createdAt" : "2020-05-04T15:33:20Z",
        "updatedAt" : "2020-05-04T15:36:44Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "70ac7f43-c573-4fcb-9844-1d9211057577",
        "parentId" : "e8363b5d-b4f2-48ae-ae83-cd33d94f58c2",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "done in next PR",
        "createdAt" : "2020-05-05T06:22:51Z",
        "updatedAt" : "2020-05-05T06:22:51Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e68cc9359abaf460f448f09c616975c2935f54b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +118,122 @@    }\n\n    /** Run a machine until we get a result: either a final-value of a request for data, with a callback */\n    def run(): SResult = {\n      var result: SResult = null"
  },
  {
    "id" : "c12ff852-e9ac-43fe-bad2-e2845dbd8920",
    "prId" : 5814,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "754755f1-4a14-4c0d-b228-18ef934c9722",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I think it would be useful to explain why there are two loops.",
        "createdAt" : "2020-05-04T15:34:06Z",
        "updatedAt" : "2020-05-04T15:36:44Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "e2b6270d-c0ed-44b2-972e-d0a902a70628",
        "parentId" : "754755f1-4a14-4c0d-b228-18ef934c9722",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "done in next PR",
        "createdAt" : "2020-05-05T06:22:58Z",
        "updatedAt" : "2020-05-05T06:22:58Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e68cc9359abaf460f448f09c616975c2935f54b",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +122,126 @@      var result: SResult = null\n      while (result == null) {\n        // note: exception handler is outside while loop\n        try {\n          while (!isFinal) {"
  },
  {
    "id" : "ab4e3acf-afe6-44ec-864c-c6b192d08b3f",
    "prId" : 5716,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42e5ad0b-4d1f-40b8-b6c8-4030a12bc141",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Just for my understanding: setting `machine.ctrl = this` eventually causes the value being translated again from scratch after the package was loaded successfully, right?",
        "createdAt" : "2020-04-24T11:19:59Z",
        "updatedAt" : "2020-04-27T13:18:45Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "cb108800-984e-4801-8e54-b444e48e896f",
        "parentId" : "42e5ad0b-4d1f-40b8-b6c8-4030a12bc141",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Yes.",
        "createdAt" : "2020-04-24T11:22:24Z",
        "updatedAt" : "2020-04-27T13:18:45Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d675b124dbd7b7158af826ada71c76bb4d7c17a9",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +492,496 @@                    pkg => {\n                      machine.compiledPackages = pkg\n                      machine.ctrl = this\n                    }\n                  ))"
  },
  {
    "id" : "e55121d3-65dc-4d72-9ef7-693d83a4f91d",
    "prId" : 5519,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5519",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f2b3117-802a-4f56-8370-a1a98f395fe6",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Here we may not have any more `contextSeed`, so we take another seed.\r\nDoes not really matter as this is called only when interpretation scenario as long the resulting `newSeed` is fresh.",
        "createdAt" : "2020-04-09T13:09:01Z",
        "updatedAt" : "2020-04-09T13:09:01Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e1d86c75aae72ab91dcf349a5b071c463f246f6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +242,246 @@      val seedWithTime = for {\n        time <- ptx.submissionTime\n        currentSeed <- ptx.context.nextChildrenSeed\n        newSeed = crypto.Hash.deriveTransactionSeed(\n          currentSeed,"
  },
  {
    "id" : "6dd80024-ef95-4d18-8a60-402841694636",
    "prId" : 3947,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eac5369e-dfb4-44a8-9595-c76a4ea95e18",
        "parentId" : null,
        "authorId" : "271bdebc-b39f-48aa-b2cd-f3f0324314d5",
        "body" : "Yourkit showed a lot of RichInt conversions, so I converted this iterator to `while {}` style",
        "createdAt" : "2020-01-06T03:15:03Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : "271bdebc-b39f-48aa-b2cd-f3f0324314d5",
        "tags" : [
        ]
      },
      {
        "id" : "95dae567-09cc-4f90-abdb-9fe59b9f393a",
        "parentId" : "eac5369e-dfb4-44a8-9595-c76a4ea95e18",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Same story here. I would like to have real benchmarks before changing critical piece of code like that. \r\ncc @dajmaki ",
        "createdAt" : "2020-01-06T08:41:10Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "8e7d0336-2cf3-44f0-a875-656ad4e622cb",
        "parentId" : "eac5369e-dfb4-44a8-9595-c76a4ea95e18",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "If @dajmaki  does not mind, I am fine with this change,",
        "createdAt" : "2020-01-06T13:32:24Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "66dddc9b-bd9b-41bc-8526-4f65c5ed5f37",
        "parentId" : "eac5369e-dfb4-44a8-9595-c76a4ea95e18",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "It would not hurt to run `com.digitalasset.daml.lf.engine.LargeTransactionTest` before and after the change. There is also `com.digitalasset.platform.sandbox.perf.LargeTransactionBench` which is supposed to be part of perf test harness.",
        "createdAt" : "2020-01-06T17:31:44Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "23f71ca7-280a-4310-81de-8dcc1206cf9e",
        "parentId" : "eac5369e-dfb4-44a8-9595-c76a4ea95e18",
        "authorId" : "271bdebc-b39f-48aa-b2cd-f3f0324314d5",
        "body" : "Again this was found after running our load tests and profiling the code with YourKit.\r\nUsing ScalaMeter to show some numbers:\r\n1. Quick but ugly code:\r\n```      val length = arr\r\n      var i = 0\r\n      while (i < length) {\r\n        i += 1\r\n      }\r\n```\r\nresults : Parameters(size -> 15000000): 5.36E-4 ms\r\n\r\n2. Slow but pretty code:\r\n```      for (_ <- 0 until upper) {}```\r\nresults: Parameters(size -> 15000000): 3.671207 ms\r\n\r\nAgain, that would not be an issue if this part of code was not so frequently called.",
        "createdAt" : "2020-01-07T23:40:53Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : "271bdebc-b39f-48aa-b2cd-f3f0324314d5",
        "tags" : [
        ]
      },
      {
        "id" : "457fed03-063d-4684-9213-2bf27612481d",
        "parentId" : "eac5369e-dfb4-44a8-9595-c76a4ea95e18",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "FYI `scala.collection` uses similar optimizations. :+1: for `var` and `while-loop`.",
        "createdAt" : "2020-01-08T00:01:46Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +417,421 @@          val newArgsLimit = Math.min(missing, newArgs.length)\n          var i = 1\n          while (i < newArgsLimit) {\n            val arg = newArgs(newArgsLimit - i)\n            machine.kont.add(KPushTo(args2, arg))"
  },
  {
    "id" : "20dee3b4-6998-43af-922b-d08f70103c51",
    "prId" : 2725,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ddefcdc-167c-45bd-b4e1-134db6a0a18b",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Does that flag make sense in this context?",
        "createdAt" : "2019-09-02T15:37:24Z",
        "updatedAt" : "2019-09-02T15:44:26Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "4467a464-fd3d-4cf6-b6b7-5b0d90efe29b",
        "parentId" : "0ddefcdc-167c-45bd-b4e1-134db6a0a18b",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "> The REPL for DAML-LF has to solve a very similar problem for evaluating `f x y ...`, which is possible, IIRC. Do we have duplicate code now?\r\n\r\nGood point, I’ve refactored the other initialization methods to use `fromSExpr`.",
        "createdAt" : "2019-09-02T15:44:48Z",
        "updatedAt" : "2019-09-02T15:44:49Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4bcb65d3-5656-47fa-bb7c-fadb2ecf29b5",
        "parentId" : "0ddefcdc-167c-45bd-b4e1-134db6a0a18b",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "> Does that flag make sense in this context?\r\n\r\nIt does, there is nothing stopping you from having an update expression here. You are just not forced to use one.",
        "createdAt" : "2019-09-02T15:45:11Z",
        "updatedAt" : "2019-09-02T15:45:12Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4405ec37-f813-41cd-bd08-192b24a4d519",
        "parentId" : "0ddefcdc-167c-45bd-b4e1-134db6a0a18b",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Makes sense.",
        "createdAt" : "2019-09-02T15:56:45Z",
        "updatedAt" : "2019-09-02T15:56:45Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "07a21a68b562633676370a033086f79311d6d853",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +284,288 @@    def fromSExpr(\n        sexpr: SExpr,\n        checkSubmitterInMaintainers: Boolean,\n        compiledPackages: CompiledPackages): Machine =\n      initial(checkSubmitterInMaintainers, compiledPackages).copy(ctrl = CtrlExpr(sexpr))"
  },
  {
    "id" : "13029786-306c-47a8-b672-f91b944972e9",
    "prId" : 2560,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75ead6d5-073b-48bb-a630-9d0a16da7a55",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Some comments on the first two cases would be nice.",
        "createdAt" : "2019-08-15T14:34:44Z",
        "updatedAt" : "2019-08-15T15:43:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5d60f39c-d8aa-4762-ae6b-d231484152c9",
        "parentId" : "75ead6d5-073b-48bb-a630-9d0a16da7a55",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Done. I'm in the middle of simplifying this a bit. The explanation will (hopefully) get a bit simpler as a result of this.",
        "createdAt" : "2019-08-15T14:59:49Z",
        "updatedAt" : "2019-08-15T15:43:21Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "61a4b11ba7dda41f0970ff778251c4f0ccde8b68",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +76,80 @@        // we push location information under it to account for the implicit\n        // lambda binding the token.\n        case Some(KArg(Array(SEValue(SToken)))) => kont.add(last_index, KLocation(loc))\n        // NOTE(MH): When we use a cached top level value, we need to put the\n        // stack trace it produced back on the continuation stack to get"
  },
  {
    "id" : "bdef989a-e093-4971-9f46-2939073be739",
    "prId" : 2497,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac73e806-fbd3-4337-8815-e643b4ff5292",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n    def stackTrace(): ImmArray[Location] = ImmArray(s.asScala).flatMap{\r\n      case KLocation(location) => ImmArray(location)\r\n      case _ => ImmArray.empty\r\n    }\r\n```",
        "createdAt" : "2019-08-13T09:11:34Z",
        "updatedAt" : "2019-08-13T09:14:25Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "59b773fab66f6239cba9430dc5f973ac673d51dc",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +67,71 @@\n    /* Compute a stack trace from the locations in the continuation stack. */\n    def stackTrace(): ImmArray[Location] = {\n      val s = new ArrayList[Location]\n      kont.forEach { k =>"
  },
  {
    "id" : "b95430c5-292e-4668-968b-fe596cb3c0d0",
    "prId" : 1414,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1414",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06e94a34-3b75-4412-b8e0-7ce7abd977f6",
        "parentId" : null,
        "authorId" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "body" : "I think the default `Set.empty` is very dangerous -- I'd remove it unless we have very good reasons not to.",
        "createdAt" : "2019-06-07T15:33:03Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "tags" : [
        ]
      },
      {
        "id" : "f8898119-908c-45bc-8178-9beb961767ec",
        "parentId" : "06e94a34-3b75-4412-b8e0-7ce7abd977f6",
        "authorId" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "body" : "Why do you think it's dangerous? The committers is the set of parties that authorize the transaction. Nobody authorizing it is the least dangerous option.\r\n\r\nIf you do still want me  to change it: the default is used in a few places, such as `ScenarioRunnerHelper`, and `fromExpr`. Can you please point me to someone who understands how these things are used?",
        "createdAt" : "2019-06-11T16:57:42Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab0ead601a9595d13f63af85647223621775e3eb",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +174,178 @@\n  object Machine {\n    private def initial(compiledPackages: CompiledPackages, committers: Set[Party] = Set.empty) =\n      Machine(\n        ctrl = null,"
  },
  {
    "id" : "8a6d6250-ab73-4869-8892-2f72b8696f7e",
    "prId" : 1414,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1414",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36ab2c50-e601-40bd-ac56-1167e61ddf71",
        "parentId" : null,
        "authorId" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "body" : "I think the default Set.empty is very dangerous -- I'd remove it unless we have very good reasons not to.",
        "createdAt" : "2019-06-07T15:33:23Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "tags" : [
        ]
      },
      {
        "id" : "b5d70e12-3703-4198-8dbc-f66838bf8e3b",
        "parentId" : "36ab2c50-e601-40bd-ac56-1167e61ddf71",
        "authorId" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "body" : "The default is currently only used in `Engine.validatePartial`, which does not seemed to be used in the remainder of the `daml` repository. Can we get rid of `validatePartial`? Are the daml-on-x guys depending on it?",
        "createdAt" : "2019-06-11T16:59:01Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab0ead601a9595d13f63af85647223621775e3eb",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +194,198 @@    }\n\n    def build(\n        sexpr: SExpr,\n        compiledPackages: CompiledPackages,"
  },
  {
    "id" : "97c7c621-82bb-42c9-ab1c-bf60f282f59b",
    "prId" : 1397,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1397",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78cdc160-a741-423a-bdd1-54a80e02707c",
        "parentId" : null,
        "authorId" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "body" : "nice",
        "createdAt" : "2019-05-27T11:35:43Z",
        "updatedAt" : "2019-05-29T11:46:15Z",
        "lastEditedBy" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ce95b727edd6150f719d1c4c22df4bde71e6ef6",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +431,435 @@            }\n          }\n        case _: SContractId | _: SDate | _: SDecimal | _: SInt64 | _: SParty | _: SText |\n            _: STimestamp | _: STuple | _: SMap | _: SRecord | _: SPAP | SToken =>\n          crash(\"Match on non-matchable value\")"
  }
]