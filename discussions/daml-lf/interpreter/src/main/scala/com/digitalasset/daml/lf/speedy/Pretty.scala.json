[
  {
    "id" : "ff24922e-1d3e-4a5f-9a13-c149a0a56ddc",
    "prId" : 10091,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d543201a-416c-4b6f-95d1-10f49cbbef1e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "side note: Iâ€™m not convinced the partial transaction here provides any real value. Afaict the only thing we use it for is to produce slightly different error if a contract is inactive due to a recursive exercise. We donâ€™t do that in the scenario service however and Iâ€™ve never heard a request for it so I have a hard time believing that it is really useful here.",
        "createdAt" : "2021-06-24T12:15:37Z",
        "updatedAt" : "2021-06-24T12:23:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1914cbdb-f23d-4aac-be9a-9108166757ba",
        "parentId" : "d543201a-416c-4b6f-95d1-10f49cbbef1e",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "add a TODO. \r\nLet's review it once all the errors are properly structured.",
        "createdAt" : "2021-06-24T12:36:47Z",
        "updatedAt" : "2021-06-24T13:39:45Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "58c2d764e4b0541c1e64b6ba15c6839cc4b70de6",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +61,65 @@    char('\\'') + text(p) + char('\\'')\n\n  def prettyDamlException(error: interpretation.Error, ptx: PartialTransaction = dummyTx): Doc = {\n    import interpretation.Error._\n    error match {"
  },
  {
    "id" : "57793b4c-d5f9-4559-8ff7-9d0e9c6f144e",
    "prId" : 10091,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "024057a5-acd1-42bc-a5af-94ee2f35150f",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Added this to https://github.com/digital-asset/daml/issues/9974 's description, feel free to delete [the comment](https://github.com/digital-asset/daml/issues/9974#issuecomment-867649444) if unnecessary. ðŸ™‚ ",
        "createdAt" : "2021-06-24T13:48:06Z",
        "updatedAt" : "2021-06-24T13:52:04Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "58c2d764e4b0541c1e64b6ba15c6839cc4b70de6",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +45,49 @@    //  if a contract is inactive due to a recursive exercise. We donâ€™t do that in\n    //  the scenario service however and Iâ€™ve never heard a request for it so I\n    //  have a hard time believing that it is really useful here.\n    text(\"Error:\") & (err match {\n      case ex: SErrorDamlException =>"
  },
  {
    "id" : "1020b275-8c03-49f4-b511-b9b38a6ed907",
    "prId" : 10070,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5651c32c-768d-4665-b4c5-f81fae2084e7",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "ðŸš€ ",
        "createdAt" : "2021-06-21T21:24:26Z",
        "updatedAt" : "2021-06-21T21:44:52Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0dbf8ebad6630ef53f57d730ae25974f722f07ac",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +58,62 @@    char('\\'') + text(p) + char('\\'')\n\n  private def prettyDamlException(ex: SErrorDamlException, ptx: PartialTransaction): Doc =\n    ex match {\n      case DamlEFailedAuthorization(nid, fa) =>"
  },
  {
    "id" : "75f9dab2-9afa-47b4-98df-bd1e39643a49",
    "prId" : 9243,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90c4efa7-285b-4a95-bde7-616e8dfa29e0",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "does this change anything? I wasnâ€™t expecting to see a change to `Numeric` in here. I guess the pretty printer doesnâ€™t matter much so no issues with keeping it if it changes it in a useful way.",
        "createdAt" : "2021-03-25T15:10:26Z",
        "updatedAt" : "2021-03-25T18:32:18Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "43966f38-484c-4837-a6b7-81c03360b44a",
        "parentId" : "90c4efa7-285b-4a95-bde7-616e8dfa29e0",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I just realized the Numeric are printed in a consistent way with LF builtin to TO_TEXT_NUMERIC.\r\nThis is used in the output of LF Repl wish it is match with EXPETED.ledger. ",
        "createdAt" : "2021-03-25T15:18:29Z",
        "updatedAt" : "2021-03-25T18:32:18Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7bc9546318cac2ec9b0fb753fcabe920ba2b51fd",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +362,366 @@    v match {\n      case ValueInt64(i) => str(i)\n      case ValueNumeric(d) => text(data.Numeric.toString(d))\n      case ValueRecord(mbId, fs) =>\n        (mbId match {"
  },
  {
    "id" : "613a4a45-3f30-47f5-8a65-b91db524f7c6",
    "prId" : 7400,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2de8e91f-ebf5-4133-8f40-c21c54551671",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Why can't we keep or at least adapt the old pretty printer for now?",
        "createdAt" : "2020-09-16T09:02:46Z",
        "updatedAt" : "2020-09-17T13:03:20Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "58244686-da1d-4e71-a21b-a0eb50938d2e",
        "parentId" : "2de8e91f-ebf5-4133-8f40-c21c54551671",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "see reply above",
        "createdAt" : "2020-09-16T14:40:05Z",
        "updatedAt" : "2020-09-17T13:03:20Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "a360635b966cdfe27bfd3cd6e156308321238660",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +154,158 @@    })\n\n  private def authorizationErrors(failures: Map[NodeId, FailedAuthorization]): String = {\n    failures\n      .map {"
  },
  {
    "id" : "65a34a18-6c10-4e6f-8e28-14a615342603",
    "prId" : 6440,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d293bf9-3498-4d09-ad64-8065f60dd6d9",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This change would have made sense before this PR, wouldn't it? If so, let's please move it into a separate PR upfront. This PR is already big and hard enough to review.",
        "createdAt" : "2020-06-26T11:13:28Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "48628d7b-f2cd-404d-8e3f-e2a9fe395b07",
        "parentId" : "5d293bf9-3498-4d09-ad64-8065f60dd6d9",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "This is a change debug/dev code.\r\nDo you still want to block this PR by pulling out this one small change?",
        "createdAt" : "2020-06-30T15:00:12Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +473,477 @@    }\n\n    def prettySELoc(index: Int)(loc: SELoc): Doc = loc match {\n      case SELocS(i) =>\n        text(\"S[\") + str(i) + text(\"=abs:\") + str(index - i) + text(\"]\") // show absolute stack position, 0.."
  }
]