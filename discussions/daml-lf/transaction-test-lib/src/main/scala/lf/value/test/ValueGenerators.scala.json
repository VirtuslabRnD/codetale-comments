[
  {
    "id" : "397c6afb-d43b-41fb-97ec-15b1dc132dab",
    "prId" : 9627,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9627",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a853a0a-58fb-4460-bae4-d5bd583a2028",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Please add a reference to the issue so we can grep for this.",
        "createdAt" : "2021-05-12T07:10:01Z",
        "updatedAt" : "2021-05-12T07:17:47Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "29b8a582c9fbc9146dd6fefdf4ad7f86c620c116",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +428,432 @@    */\n  // TODO https://github.com/digital-asset/daml/issues/8020\n  val danglingRefGenNode //TODO: FIXME: this generator never produces rollback nodes\n      : Gen[(NodeId, Tx.Node)] = {\n    for {"
  },
  {
    "id" : "edc472db-e1e1-447f-907a-7b4aec120fa9",
    "prId" : 9531,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28713e50-34d6-488f-b74b-cd0891764c96",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why did you modify this? I can’t see a new call to this and I also cannot see any of the existing calls being changed which I would have expected if we do change this.",
        "createdAt" : "2021-04-29T07:59:25Z",
        "updatedAt" : "2021-04-29T08:04:13Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "86e2d812-426d-41ee-88dc-a375a930d81c",
        "parentId" : "28713e50-34d6-488f-b74b-cd0891764c96",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Initially, I tries using `transactionVersionGen` for some test, and was surprised that I couldn't provoke a failure, at a point in time where the failure was expected because the implementation was bugged, but only for `VDev`, and that's when I saw it the upper bound was exclusive.\r\n\r\nIn the end I moved to using `versionInIncreasingOrder`, which is defined in terms of `TransactionVersion.All` and so covers `VDev` already.\r\n\r\nHowever I think it makes sense to have `transactionVersionGen` also generate tests which cover `VDev`, or else we might not be testing as much as we think.\r\n",
        "createdAt" : "2021-04-29T09:31:32Z",
        "updatedAt" : "2021-04-29T09:31:32Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "1be00793-3bcd-4863-9508-109bdd1a1f5d",
        "parentId" : "28713e50-34d6-488f-b74b-cd0891764c96",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "including VDev seems very sensible. I’m slighlty worried that no existing test broke though :confused: ",
        "createdAt" : "2021-04-29T10:37:01Z",
        "updatedAt" : "2021-04-29T10:37:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a748586f-3a7e-4d73-bffe-2efb64d26d4a",
        "parentId" : "28713e50-34d6-488f-b74b-cd0891764c96",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "The initial idea, was to introduce a range of versions, with `minVersion` being the first version for which the test pass and `maxVersion` the first version for which the test does not pass. I think it is a bad idea to include `maxVersion`.\r\n\r\nIn fact the two tests that use `maxVersion` are actually broken, they both cover 1 versions less that what they should. ",
        "createdAt" : "2021-05-03T12:12:57Z",
        "updatedAt" : "2021-05-03T13:10:40Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "463fcd3d878c61a05eebc0f0138d29ed742344e0",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +568,572 @@  def transactionVersionGen(\n      minVersion: TransactionVersion = TransactionVersion.minVersion, // inclusive\n      maxVersion: TransactionVersion = TransactionVersion.maxVersion, // inclusive\n  ): Gen[TransactionVersion] =\n    Gen.oneOf(TransactionVersion.All.filter(v => minVersion <= v && v <= maxVersion))"
  },
  {
    "id" : "495d34ad-a670-4f47-aea5-dcfe6e38c97f",
    "prId" : 9468,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "346f3f9d-d9b5-4e0c-9795-604027dbb281",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : ":+1: \r\n",
        "createdAt" : "2021-05-03T09:30:06Z",
        "updatedAt" : "2021-05-03T10:11:12Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0131daf6981a49c63b05b32a1722091ae39a1d6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +369,373 @@\n  /** Makes rollback node with some random child IDs. */\n  val danglingRefRollbackNodeGen: Gen[NodeRollback[NodeId]] = {\n    for {\n      version <- transactionVersionGen()"
  },
  {
    "id" : "57df01b7-0bd6-46e2-b78f-d551163431f8",
    "prId" : 9250,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5c1c273-c029-4448-8bcb-2beaf33cdd2b",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "@stephencompall-DA Could you take a look at this file ? ",
        "createdAt" : "2021-03-26T16:35:28Z",
        "updatedAt" : "2021-04-06T06:20:39Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "9ef5392b-c46a-4226-b683-cdaa956fbd8d",
        "parentId" : "d5c1c273-c029-4448-8bcb-2beaf33cdd2b",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Most tests shouldn't care that the generated transactions are well-formed in any way. If expecting the IDs in the rollback is an exception, then it's worth worrying about; otherwise random IDs should be fine.",
        "createdAt" : "2021-04-06T19:55:03Z",
        "updatedAt" : "2021-04-06T19:55:03Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "e79edd16-5497-4333-bf8b-07b8ff16a21e",
        "parentId" : "d5c1c273-c029-4448-8bcb-2beaf33cdd2b",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "However, all existing uses of this kind of node-ID generation use \"danglingRef\" or \"malformed\" in their name to indicate this, and this practice has not been carried through here.",
        "createdAt" : "2021-04-06T19:57:50Z",
        "updatedAt" : "2021-04-06T19:57:50Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "e51d170b34c0e4426387b6a0535d4c0f0b1c8751",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +355,359 @@  }\n\n  /** Makes rollback node with some random child IDs. */\n  val rollbackNodeGen: Gen[NodeRollback[NodeId]] = {\n    for {"
  },
  {
    "id" : "20f7d09a-cbb6-4dca-bf75-3216934a366c",
    "prId" : 9084,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0780cb8e-0ba8-4328-9678-f34060ca72b2",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : ":+1: ",
        "createdAt" : "2021-03-15T17:14:41Z",
        "updatedAt" : "2021-03-16T10:46:28Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "2901c074-1ad2-4700-b718-b5d2c71dc11f",
        "parentId" : "0780cb8e-0ba8-4328-9678-f34060ca72b2",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "But did you see that it is not enabled further down the file. It causes test failure\r\nPerhaps you can help me figure out what is going wrong?!",
        "createdAt" : "2021-03-15T17:58:23Z",
        "updatedAt" : "2021-03-16T10:46:28Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "b9435d8a-7939-4676-9e13-a4ae4646cf66",
        "parentId" : "0780cb8e-0ba8-4328-9678-f34060ca72b2",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : " I saw, but there is the TODO so I am happy. ",
        "createdAt" : "2021-03-16T10:23:41Z",
        "updatedAt" : "2021-03-16T10:46:28Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5812f04d26ab6bec832c6a582535fc8732c7055b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +108,112 @@\n  // generate a builtinException with arbitrary value\n  private def builtinExceptionGen(nesting: Int): Gen[ValueBuiltinException[ContractId]] =\n    for {\n      tag <- Gen.alphaStr"
  },
  {
    "id" : "b0801f4f-dafb-43f7-998b-62061e4c379e",
    "prId" : 7947,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "441274ac-6b5d-4be3-83fc-e72df87661f1",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "What is this about? And why is it 254 here but 255 below? Does the 255 include the `#`?",
        "createdAt" : "2020-11-12T11:16:47Z",
        "updatedAt" : "2020-11-12T11:27:22Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "1572b64d-77ca-4002-96b5-b65dafb6b332",
        "parentId" : "441274ac-6b5d-4be3-83fc-e72df87661f1",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "form the spec. \r\n```\r\n  V0 Contract identifiers:\r\n          cidV0  ∈  #[a-zA-Z0-9\\._:-#/ ]{0,254}     -- V0ContractId\r\n\r\n  PartyId strings\r\n     PartyIdString  ∈  [a-zA-Z0-9:\\-_ ]{1,255}       -- PartyIdChar\r\n```",
        "createdAt" : "2020-11-12T11:50:09Z",
        "updatedAt" : "2020-11-12T11:51:22Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "b131d1bb-ac9a-4b2d-8488-9d30fab3689a",
        "parentId" : "441274ac-6b5d-4be3-83fc-e72df87661f1",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I am a bit worried twe never reports failures for tests based on `ValueGenerators`. Before this changes  the  Generators `cidV0Gen` or `partyGen`  crash if the string generate `Gen.alphaStr` is too long.",
        "createdAt" : "2020-11-12T11:55:20Z",
        "updatedAt" : "2020-11-12T11:55:20Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "d867065b-633a-48f7-b7ad-637ff3cc45f8",
        "parentId" : "441274ac-6b5d-4be3-83fc-e72df87661f1",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Maybe the value generators only generate short strings?",
        "createdAt" : "2020-11-12T15:31:22Z",
        "updatedAt" : "2020-11-12T15:31:23Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "01c62c7a-2375-4c7e-a1f2-a403b835960b",
        "parentId" : "441274ac-6b5d-4be3-83fc-e72df87661f1",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "It can generates string longer that 255, it is just unlikely. \r\n",
        "createdAt" : "2020-11-12T15:46:02Z",
        "updatedAt" : "2020-11-12T15:46:02Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac5cba64c9421bd475785a074b28967f738d7bad",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +167,171 @@\n  val cidV0Gen: Gen[ContractId.V0] =\n    Gen.alphaStr.map(t => Value.ContractId.V0.assertFromString('#' +: t.take(254)))\n  private val cidV1Gen: Gen[ContractId.V1] =\n    Gen.zip(genHash, genSuffixes) map {"
  }
]