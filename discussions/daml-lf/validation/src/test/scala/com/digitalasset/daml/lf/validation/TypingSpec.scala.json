[
  {
    "id" : "fa8e72ef-3cd5-4139-8649-672e2d829270",
    "prId" : 9595,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "633f4fb4-e357-4b32-bc7a-0a514145a4b2",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Can we add some tests for the new primitives?",
        "createdAt" : "2021-05-06T10:48:40Z",
        "updatedAt" : "2021-05-06T14:20:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "dc02c813-4fc1-405f-a2be-3a715a8c6ef5",
        "parentId" : "633f4fb4-e357-4b32-bc7a-0a514145a4b2",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Added!",
        "createdAt" : "2021-05-06T14:00:56Z",
        "updatedAt" : "2021-05-06T14:20:38Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "085e13afc42ec9dc145e4d848eb35c80d8ee21d8",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +63,67 @@        BTArrow -> k\"* -> * -> *\",\n        BTAny -> k\"*\",\n        BTRoundingMode -> k\"*\",\n        BTBigNumeric -> k\"*\",\n        BTAnyException -> k\"*\","
  },
  {
    "id" : "2291aeeb-8fd3-400e-8724-a4a82710e5bb",
    "prId" : 7936,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a086a0a8-fe47-4824-af8f-b1370cfd9e8f",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We probably need a couple more tests. Not only tests checking that we reject non-exhaustive pattern matches but also tests that make sure we don't reject anything that is exhaustive. I'm a bit afraid of accidentally rejecting DARs where all pattern matches are exhaustive. This would be particularly bad if people upgrade their DAML engine and afterward can't load packages anymore that were loadable before.",
        "createdAt" : "2020-11-11T12:07:04Z",
        "updatedAt" : "2020-11-11T14:27:23Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "8842c84a-e634-43f8-9f90-6da60deb75a8",
        "parentId" : "a086a0a8-fe47-4824-af8f-b1370cfd9e8f",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I will add some tests for that. ",
        "createdAt" : "2020-11-11T12:18:38Z",
        "updatedAt" : "2020-11-11T14:27:23Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "21efdb5d320035a91ad6f104102c89baabb311bc",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +477,481 @@          { case _: ENonExhaustivePatterns => },\n        E\"λ (e : Bool) → ⸨ case e of False → () ⸩\" -> //\n          { case _: ENonExhaustivePatterns => },\n        // ExpCaseUnit\n        E\"Λ (τ : ⋆). λ (e : τ) → ⸨ case e of () → () ⸩\" -> //"
  },
  {
    "id" : "ec7e4f84-98bd-40cf-a2d0-715bc7c301b8",
    "prId" : 7936,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2a16954-e7ea-4e14-b35c-91211c14d2fc",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "@hurryabit Is it enougth ? ",
        "createdAt" : "2020-11-11T14:14:48Z",
        "updatedAt" : "2020-11-11T14:27:23Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "56023f37-e8dc-47ef-81f4-9287155e2916",
        "parentId" : "f2a16954-e7ea-4e14-b35c-91211c14d2fc",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I think we should have `List` and `Optional` cases as well.",
        "createdAt" : "2020-11-11T14:20:15Z",
        "updatedAt" : "2020-11-11T14:27:23Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "6b4fc79a-65e8-43d3-bbe0-f663aa266ab4",
        "parentId" : "f2a16954-e7ea-4e14-b35c-91211c14d2fc",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Indeed. \r\n",
        "createdAt" : "2020-11-11T14:24:44Z",
        "updatedAt" : "2020-11-11T14:27:23Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "61ab9b74-1e94-46bb-97ce-ac5edb7152da",
        "parentId" : "f2a16954-e7ea-4e14-b35c-91211c14d2fc",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "added \r\n",
        "createdAt" : "2020-11-11T14:30:04Z",
        "updatedAt" : "2020-11-11T14:30:04Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "ca3d3e38-6bdc-4090-8b8c-84a844cefa6f",
        "parentId" : "f2a16954-e7ea-4e14-b35c-91211c14d2fc",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Let's add the few more tests I mentioned and them I'm happy. 😄",
        "createdAt" : "2020-11-11T14:38:00Z",
        "updatedAt" : "2020-11-13T09:52:57Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "21efdb5d320035a91ad6f104102c89baabb311bc",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +233,237 @@        E\"Λ (τ : ⋆). λ (e : Mod:R τ) → (( case e of _ -> () ))\",\n        E\"Λ (τ : ⋆). λ (e : τ) → (( case e of _ -> () ))\",\n      )\n\n      forEvery(testCases)(env.typeOf)"
  },
  {
    "id" : "4aeb1b18-521d-4c8e-84c1-4c0e2b9f86fd",
    "prId" : 7936,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8db3b588-bf9d-41a6-889e-7eee0d424a07",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Let's add a test for `Nil` before `Cons` as well. And similarly for `Some` before `None` and `False` before `True`.",
        "createdAt" : "2020-11-11T14:36:35Z",
        "updatedAt" : "2020-11-13T09:52:56Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "21efdb5d320035a91ad6f104102c89baabb311bc",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +220,224 @@        E\"λ (e : Mod:Color) → (( case e of Mod:Color:Red → () | _ -> () | Mod:Color:Green → () ))\",\n        E\"λ (e : Mod:Color) → (( case e of _ -> () ))\",\n        E\"Λ (τ : ⋆). λ (e : List τ) → (( case e of Cons x y → () | Nil -> ( ) ))\",\n        E\"Λ (τ : ⋆). λ (e : List τ) → (( case e of Nil → () | _ -> () ))\",\n        E\"Λ (τ : ⋆). λ (e : List τ) → (( case e of _ -> () ))\","
  },
  {
    "id" : "1c470ede-795e-42cb-b1e4-5e1a2dba9996",
    "prId" : 7936,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e63dcc8-6a5b-4713-9d34-488a2af42b03",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Let's add a test for `Cons` and `_` as well. Similarly for `None` and `_`, and `False` and `_`.",
        "createdAt" : "2020-11-11T14:37:16Z",
        "updatedAt" : "2020-11-13T09:52:57Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "21efdb5d320035a91ad6f104102c89baabb311bc",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +221,225 @@        E\"λ (e : Mod:Color) → (( case e of _ -> () ))\",\n        E\"Λ (τ : ⋆). λ (e : List τ) → (( case e of Cons x y → () | Nil -> ( ) ))\",\n        E\"Λ (τ : ⋆). λ (e : List τ) → (( case e of Nil → () | _ -> () ))\",\n        E\"Λ (τ : ⋆). λ (e : List τ) → (( case e of _ -> () ))\",\n        E\"Λ (τ : ⋆). λ (e : Option τ) → (( case e of None → () | Some x -> ( ) ))\","
  },
  {
    "id" : "df474b50-07b8-4cdb-ad4d-4700b4a680b2",
    "prId" : 7905,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ce59f3e-91de-427d-afac-3555d1270bc1",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Should add a test here that `e` has a \"forall type\", e.g.\r\n\r\n```\r\nΛ (τ : ⋆) (σ: ⋆). λ (e : σ) → ⸨ e @τ ⸩\r\n```",
        "createdAt" : "2020-11-06T16:11:16Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "6c7ac29a-309d-4137-8da4-3e43c67392f0",
        "parentId" : "5ce59f3e-91de-427d-afac-3555d1270bc1",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "added. ",
        "createdAt" : "2020-11-06T16:58:55Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7ae1caaa51f54f4a2a0d125a4fb14891e2daaea",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +333,337 @@        // ExpTyApp\n        E\"Λ (τ : ⋆ → ⋆) (σ: ⋆ → ⋆). λ (e : ∀ (α : ⋆). σ α) → ⸨ e @τ ⸩\" -> //\n          { case _: EKindMismatch => },\n        E\"Λ (τ : ⋆) (σ: ⋆). λ (e : σ) → ⸨ e @τ ⸩\" -> //\n          { case _: EExpectedUniversalType => },"
  },
  {
    "id" : "6af9ad8a-1937-47c7-91d1-88e0a9447337",
    "prId" : 7905,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f38700d-2957-480c-b2ec-3d6ceb3d111b",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I think we should add an `ExpTyAbs` test that makes sure we check the kind is well formed, since this is where issues can start to arise. E.g. the expression below contains an ill-formed kind,\r\n\r\n```\r\nΛ (τ : ⋆ → nat) (σ: ⋆). λ (e : σ) → e\r\n```",
        "createdAt" : "2020-11-06T16:38:48Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "68d547f4-9c4f-47fb-b7eb-8d75cfa09c6b",
        "parentId" : "8f38700d-2957-480c-b2ec-3d6ceb3d111b",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "The type checker does not fail on such expression, see #7917.",
        "createdAt" : "2020-11-06T17:11:28Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7ae1caaa51f54f4a2a0d125a4fb14891e2daaea",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +338,342 @@        // ExpAbs\n        E\"⸨ λ (x : List) → () ⸩\" -> //\n          { case _: EKindMismatch => },\n        // ExpLet\n        E\"Λ  (τ₁: ⋆) (τ₂ : ⋆) (σ: ⋆). λ (e₁ : τ₁) (e₂ : σ) → ⸨ let x : τ₂ = e₁ in e₂ ⸩\" -> //"
  },
  {
    "id" : "ce2738c3-b8ba-4d68-8974-50d848f296b5",
    "prId" : 7905,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "106eaf5f-1ea7-4908-b5ae-22cd8097ea07",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I think we should add a test here that the scoping rules do not allow for recursive let bindings:\r\n\r\n```\r\n E\"Λ  (τ : ⋆). ⸨ let x : τ = x in nothing ⸩\" -> //\r\n           { case _ : EUnknownExprVar => },\r\n```\r\n",
        "createdAt" : "2020-11-06T17:17:47Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "440cd6b2-17a9-430a-ac47-cd9396c8c243",
        "parentId" : "106eaf5f-1ea7-4908-b5ae-22cd8097ea07",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I prefer to add that in the test which is relative to variable scope, See lines 268-302\r\n",
        "createdAt" : "2020-11-06T17:43:45Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "1e0cc076-e59e-4bfd-88cc-fd3571e75896",
        "parentId" : "106eaf5f-1ea7-4908-b5ae-22cd8097ea07",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "👍 Sounds good, thanks!",
        "createdAt" : "2020-11-09T10:02:40Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7ae1caaa51f54f4a2a0d125a4fb14891e2daaea",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +339,343 @@        E\"⸨ λ (x : List) → () ⸩\" -> //\n          { case _: EKindMismatch => },\n        // ExpLet\n        E\"Λ  (τ₁: ⋆) (τ₂ : ⋆) (σ: ⋆). λ (e₁ : τ₁) (e₂ : σ) → ⸨ let x : τ₂ = e₁ in e₂ ⸩\" -> //\n          { case _: ETypeMismatch => },"
  },
  {
    "id" : "da934dac-adc5-46a3-a48e-ad62ce02373c",
    "prId" : 7905,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "851d05e0-0dfd-490f-b0d5-f1282e642b86",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I think there's another possible type error, where the tail argument wasn't a list but some other type family:\r\n\r\n```\r\nE\"Λ (τ₁: ⋆). λ (e₁ : τ₁) (e : Optional τ₁) → ⸨ Cons @τ₁ [e₁] e ⸩\" -> //\r\n           { case _: ETypeMismatch => },\r\n```",
        "createdAt" : "2020-11-09T10:15:10Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "b3ef542e-4746-48a6-8581-98fa433e5649",
        "parentId" : "851d05e0-0dfd-490f-b0d5-f1282e642b86",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I added: \r\n  E\"Λ (τ₁: ⋆) (τ₂: ⋆). λ (e₁: τ₁) (e: τ₂) → ⸨ Cons @τ₁ [e₁] e ⸩\" \r\n``",
        "createdAt" : "2020-11-09T13:11:04Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7ae1caaa51f54f4a2a0d125a4fb14891e2daaea",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +361,365 @@          { case _: ETypeMismatch => },\n        E\"Λ (τ : ⋆). λ (e : List τ) → ⸨ Cons @τ [] e ⸩\" -> //\n          { case _: EEmptyConsFront => },\n        //ExpVal\n        E\"⸨ Mod:g ⸩\" -> //"
  },
  {
    "id" : "6ed8d950-769b-40fd-b22c-780311072f16",
    "prId" : 7905,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd2cabdb-d70c-4268-9ca4-be4d02fbc8e8",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Two more type errors:\r\n\r\n```\r\nE\"Λ (τ : ⋆) (σ : ⋆). λ (e : Mod:R τ) → ⸨ Mod:R @σ {f1} e ⸩\"\r\nE\"Λ (σ : ⋆). ⸨ Mod:R @σ {f1} (Nil @σ) ⸩\"\r\n```",
        "createdAt" : "2020-11-09T10:38:04Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "d48d30c2-5acf-448d-8041-92369c378c84",
        "parentId" : "fd2cabdb-d70c-4268-9ca4-be4d02fbc8e8",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I added: \r\n```scala\r\n        E\"Λ (τ: ⋆) (σ: ⋆). λ (e: Mod:R τ) → ⸨ Mod:R @σ {f1} e ⸩\" -> //\r\n          { case _: ETypeMismatch => },\r\n        E\"Λ (τ: ⋆) (σ: ⋆). λ (e: τ) → ⸨ Mod:R @σ {f1} e ⸩\" -> //\r\n          { case _: ETypeMismatch => },\r\n```",
        "createdAt" : "2020-11-09T13:12:17Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7ae1caaa51f54f4a2a0d125a4fb14891e2daaea",
    "line" : 142,
    "diffHunk" : "@@ -1,1 +382,386 @@          { case _: EKindMismatch => },\n        E\"Λ (σ : ⋆). λ (e : Mod:R σ) → ⸨ Mod:R @σ {f3} e ⸩\" -> //\n          { case _: EUnknownField => },\n        E\"Λ (τ: ⋆) (σ: ⋆). λ (e: Mod:R τ) → ⸨ Mod:R @σ {f1} e ⸩\" -> //\n          { case _: ETypeMismatch => },"
  },
  {
    "id" : "c3b7d760-887f-48de-9cfc-c5caefa58212",
    "prId" : 7905,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bece527-2984-4a36-9c23-069e85416dfd",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I would add some more test cases:\r\n\r\nA kind mismatch:\r\n\r\n```\r\nE\"Λ (σ : ⋆ → ⋆). ⸨ Mod:R @σ { nothing with f1 = nothing } ⸩\"\r\n```\r\n\r\nType mismatches:\r\n\r\n```\r\nE\"Λ (τ : ⋆) (σ : ⋆). λ (e : Mod:R τ) (e₂ : List σ) → ⸨ Mod:R @τ { e  with f2 = e₂ } ⸩\"\r\nE\"Λ (τ : ⋆) (σ : ⋆). λ (e : Mod:R τ) (e₂ : List σ) → ⸨ Mod:R @σ { e  with f2 = e₂ } ⸩\"\r\nE\"Λ (σ : ⋆). λ  (e : List σ) (e₂ : List σ) → ⸨ Mod:R @σ { e  with f2 = e₂ } ⸩\"\r\n```",
        "createdAt" : "2020-11-09T10:47:31Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "0d607169-eed1-46d4-b56f-c477a644213b",
        "parentId" : "2bece527-2984-4a36-9c23-069e85416dfd",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I added: \r\n```scala\r\n       E\"Λ (σ: ⋆ → ⋆). λ (e: Int64) → ⸨ Mod:R @σ { nothing with f1 = e₁ } ⸩\" -> //\r\n          { case _: EKindMismatch => },\r\n        E\"Λ (τ: ⋆) (σ: ⋆). λ (e: Mod:R τ) (e₂: List σ) → ⸨ Mod:R @τ { e  with f2 = e₂ } ⸩\" -> //\r\n          { case _: ETypeMismatch => },\r\n        E\"Λ (τ: ⋆) (σ: ⋆). λ (e: Mod:R τ) (e₂: List σ) → ⸨ Mod:R @σ { e  with f2 = e₂ } ⸩\" -> //\r\n          { case _: ETypeMismatch => },\r\n        E\"Λ (σ: ⋆). λ  (e: List σ) (e₂: List σ) → ⸨ Mod:R @σ { e with f2 = e₂ } ⸩\" -> //\r\n          { case _: ETypeMismatch => },\r\n```",
        "createdAt" : "2020-11-09T13:13:29Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7ae1caaa51f54f4a2a0d125a4fb14891e2daaea",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +393,397 @@          { case _: EUnknownField => },\n        E\"Λ (σ : ⋆). λ (e : Mod:R σ) (e₂ : Bool) → ⸨ Mod:R @σ { e  with f2 = e₂ } ⸩\" -> //\n          { case _: ETypeMismatch => },\n        E\"Λ (τ: ⋆) (σ: ⋆). λ (e: Mod:R τ) (e₂: List σ) → ⸨ Mod:R @τ { e  with f2 = e₂ } ⸩\" -> //\n          { case _: ETypeMismatch => },"
  },
  {
    "id" : "80bd4f75-f75e-4647-99e3-25ba012451d8",
    "prId" : 7905,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f92a7bcc-6fc0-43bc-9f6e-90e0d06105a8",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "kind mismatch error:\r\n\r\n```\r\nΛ (σ : ⋆ → ⋆). ⸨ Mod:R @σ { f1 = nothing, f2 = nothing } ⸩\r\n```",
        "createdAt" : "2020-11-09T10:53:09Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "4b5f093e-ab5b-40c7-ad05-a30d227ca29e",
        "parentId" : "f92a7bcc-6fc0-43bc-9f6e-90e0d06105a8",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I think \r\n\r\n``  E\"Λ (σ : ⋆ → ⋆). λ (e₁ : Int64) → ⸨ Mod:R @σ { f1 = e₁, f2 = nothing } ⸩\" -> //\r\n          { case _: EKindMismatch => },`` \r\n\r\nis enougth.",
        "createdAt" : "2020-11-09T12:28:22Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7ae1caaa51f54f4a2a0d125a4fb14891e2daaea",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +377,381 @@          { case _: EFieldMismatch => },\n        E\"Λ (σ : ⋆) (τ: ⋆). λ (e₁ : Int64) (e₂ : List σ) (e₃:τ) → ⸨ Mod:R @σ { f1 = e₁, f2 = e₂, f3 = e₃} ⸩\" -> //\n          { case _: EFieldMismatch => },\n        // ExpRecProj\n        E\"Λ (σ : ⋆ → ⋆). ⸨ Mod:R @σ {f2} nothing⸩\" -> //"
  },
  {
    "id" : "28fc09a6-c1b8-44f3-a54b-7d6335508800",
    "prId" : 7905,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd0488db-62c3-400d-ada8-c1008e95b00b",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "All of these `case` test cases will run into pattern-match exhaustiveness checks. We should figure out what to do about this (including update the spec to require exhaustiveness), but probably in a separate PR.",
        "createdAt" : "2020-11-09T11:21:13Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "7aa9e81c-e7f4-43ef-bb83-cecec65bfd59",
        "parentId" : "cd0488db-62c3-400d-ada8-c1008e95b00b",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Actually, I discover the problem in this test, when adding the check for exhaustiveness. \r\nShould definitively go in a separate PR.",
        "createdAt" : "2020-11-09T13:15:26Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7ae1caaa51f54f4a2a0d125a4fb14891e2daaea",
    "line" : 188,
    "diffHunk" : "@@ -1,1 +418,422 @@        // ExpCaseVariant\n        E\"Λ (τ : ⋆). λ (e : τ) → ⸨ case e of Mod:Tree:Node x -> () ⸩\" -> //\n          { case _: EPatternTypeMismatch => },\n        // ExpCaseNil\n        E\"Λ (τ : ⋆). λ (e : τ) → ⸨ case e of Nil → () ⸩\" -> //"
  },
  {
    "id" : "f3440fc8-2cd8-499f-bbf4-afc804aeb91e",
    "prId" : 7905,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7587f099-b7fc-4a33-8ba6-5a8e978d7bb4",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I would like to see a type mismatch error here as well, e.g.\r\n\r\n```\r\n⸨ to_any @Int64 (Nil @Int64) ⸩\r\n```",
        "createdAt" : "2020-11-09T11:31:05Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "7b7eb698-d583-4908-b84d-3b7308df56dd",
        "parentId" : "7587f099-b7fc-4a33-8ba6-5a8e978d7bb4",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Can we test that no type synonyms are present, or are these going to be rewritten away?",
        "createdAt" : "2020-11-09T11:32:31Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "c6282957-6a57-412b-bc85-e9ef33a410ee",
        "parentId" : "7587f099-b7fc-4a33-8ba6-5a8e978d7bb4",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "added 3 tests",
        "createdAt" : "2020-11-09T13:58:18Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7ae1caaa51f54f4a2a0d125a4fb14891e2daaea",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +450,454 @@          { case _: EExpectedAnyType => },\n        E\"λ (e: |Mod:S|) → ⸨ to_any @|Mod:S| e ⸩\" -> //\n          { case _: EExpectedAnyType => },\n        E\"⸨ to_any @Int64 (Nil @Int64) ⸩\" -> //\n          { case _: ETypeMismatch => },"
  },
  {
    "id" : "476d97fb-868e-40cb-b56b-bc4618aeba80",
    "prId" : 7905,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6748c8f6-5834-4082-b3a6-6be9a940d1ee",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "kind mismatch error:\r\n\r\n```\r\ntype_rep @Mod:R\r\n```",
        "createdAt" : "2020-11-09T11:33:32Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7ae1caaa51f54f4a2a0d125a4fb14891e2daaea",
    "line" : 269,
    "diffHunk" : "@@ -1,1 +476,480 @@          { case _: EExpectedAnyType => },\n        E\"⸨ type_rep @(∀(τ :⋆) . Int64) ⸩\" -> //\n          { case _: EExpectedAnyType => },\n        E\"⸨ type_rep @|Mod:S| ⸩\" -> //\n          { case _: EExpectedAnyType => },"
  },
  {
    "id" : "f2f78fd8-a8c0-4811-b9d3-8c3d85b9c1d9",
    "prId" : 7905,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d28de6db-f5cb-43d6-9880-8d66f5acbcc1",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I would maybe also add the test:\r\n\r\n```\r\nΛ (τ : ⋆). λ (e : Update τ) → ⸨ sembed_expr @τ e ⸩\r\n```\r\n",
        "createdAt" : "2020-11-09T11:50:27Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "2003b3aa-0cf0-48c8-8f12-ada557461a5d",
        "parentId" : "d28de6db-f5cb-43d6-9880-8d66f5acbcc1",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I don't really see the point of this one. In fact I think we should drop also \r\n```scala \r\n  E\"Λ (τ : ⋆) (σ : ⋆). λ (e : Scenario σ) → ⸨ sembed_expr @τ e ⸩\" -> //\r\n          { case _: ETypeMismatch => },\r\n```",
        "createdAt" : "2020-11-09T13:36:00Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "7e201b81-d110-4d39-b480-5a3a19107928",
        "parentId" : "d28de6db-f5cb-43d6-9880-8d66f5acbcc1",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "I have experience working in compiler codebases where some small errors like this are not caught -- i.e. the distinction between Scenario and Update is not caught, because of an oversight. 😢 \r\n\r\nThis is similar to the test cases above where I added a `Option` instead of `List`, for example.",
        "createdAt" : "2020-11-09T13:55:50Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7ae1caaa51f54f4a2a0d125a4fb14891e2daaea",
    "line" : 342,
    "diffHunk" : "@@ -1,1 +525,529 @@        // ScnEmbedExpr\n        E\"Λ (τ : ⋆) (σ : ⋆). λ (e : σ) → ⸨ sembed_expr @τ e ⸩\" -> //\n          { case _: ETypeMismatch => },\n        //  UpdPure\n        E\"Λ (τ : ⋆ → ⋆). ⸨ upure @τ nothing ⸩\" -> //"
  },
  {
    "id" : "e34ebbf9-b171-4812-afb1-53b1a5c6b958",
    "prId" : 7905,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea1f0fad-a835-40eb-be73-861c7c7ebbaa",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Likewise I would maybe also add the test:\r\n\r\n```\r\nΛ (τ : ⋆). λ (e : Scenario τ) → ⸨ uembed_expr @τ e ⸩\r\n```",
        "createdAt" : "2020-11-09T11:55:54Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "7f6dfc80-e28e-45bf-8c05-186d970a02e6",
        "parentId" : "ea1f0fad-a835-40eb-be73-861c7c7ebbaa",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Likewise as before.",
        "createdAt" : "2020-11-09T13:36:52Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7ae1caaa51f54f4a2a0d125a4fb14891e2daaea",
    "line" : 416,
    "diffHunk" : "@@ -1,1 +578,582 @@        // ScenarioEmbedExpr\n        E\"Λ (τ : ⋆) (σ : ⋆). λ (e : σ) → ⸨ uembed_expr @τ e ⸩\" -> //\n          { case _: ETypeMismatch => },\n      )\n"
  },
  {
    "id" : "6c738b6c-9526-4a62-9faa-573ad11d2761",
    "prId" : 7905,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65aa5caa-36d6-4c10-b228-82caab5606c9",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "missing a case for contractid type mismatch:\r\n\r\n```Λ (σ : ⋆).λ (e₁: ContractId σ) (e₂: List Party) (e₃: Int64) → ⸨ exercise @Mod:T Ch e₁ e₂ e₃ ⸩```",
        "createdAt" : "2020-11-09T11:59:26Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "943f4194-e005-45d6-af10-68de3dd6b237",
        "parentId" : "65aa5caa-36d6-4c10-b228-82caab5606c9",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "added.",
        "createdAt" : "2020-11-09T13:58:32Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7ae1caaa51f54f4a2a0d125a4fb14891e2daaea",
    "line" : 394,
    "diffHunk" : "@@ -1,1 +561,565 @@          { case _: ETypeMismatch => },\n        E\"Λ (σ : ⋆).λ (e₁: ContractId Mod:T) (e₂: σ) (e₃: Int64) → ⸨ exercise @Mod:T Ch e₁ e₂ e₃ ⸩\" -> //\n          { case _: ETypeMismatch => },\n        E\"Λ (σ : ⋆).λ (e₁: ContractId σ) (e₂: List Party) (e₃: Int64) → ⸨ exercise @Mod:T Ch e₁ e₂ e₃ ⸩\" -> //\n          { case _: ETypeMismatch => },"
  },
  {
    "id" : "1717f4c8-882c-43f8-8bb9-88c009cfe91b",
    "prId" : 7064,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7064",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "623f8ff4-ab86-4943-8648-b1e2eed227c0",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Can I recommend splitting this into two test cases? I don't see how the negative ones belong here.\r\n\r\nPerhaps \"accept well-formed type synonym definitions\" and \"reject ill-formed type synonym definitions\"?\r\n\r\n(Wow, \"synonym\" is hard to type.)",
        "createdAt" : "2020-08-10T07:40:37Z",
        "updatedAt" : "2020-08-10T07:40:49Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "882030c2-15bc-4eca-a944-d6b2e8564431",
        "parentId" : "623f8ff4-ab86-4943-8648-b1e2eed227c0",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I really like the way this test is written. \r\n\r\nI believe that having in the same unit positive and negative test cases that share most of their code improves the test confidence. Positive test cases check the negative tests are not broken and reciprocally. \r\n\r\nIf you untie this relationship by writing two different test cases, you:\r\n1. make the relationship between the two kind of test less obvious.\r\n2. will naturally share less code\r\n3. make easier for developers that will have to refactor this code in the future to break one of the families of tests. \r\n\r\nOne compromise would be to use `FreeSpec` instead of `WordSpec` to build a more fine grain hierarchy where both kinds are group together while being separate. However, I do not think this fits the scope of this PR.  \r\n\r\nChanging the title of the test does not really help because this makes the notion of negative/positive become blur. ",
        "createdAt" : "2020-08-10T09:19:21Z",
        "updatedAt" : "2020-08-10T09:25:55Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "9cdbe215-4441-42db-86c9-10a457326de0",
        "parentId" : "623f8ff4-ab86-4943-8648-b1e2eed227c0",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Fair enough, good reasoning. 🙂 ",
        "createdAt" : "2020-08-10T09:24:51Z",
        "updatedAt" : "2020-08-10T09:24:51Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "845a588e5ed65ce12c7f565b8298fd67c9faa5de",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +846,850 @@  }\n\n  \"reject ill formed type synonym definitions\" in {\n\n    def checkModule(mod: Module) = {"
  },
  {
    "id" : "9b827a26-1748-4f43-9203-e85bc61b39b9",
    "prId" : 1316,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffb60361-f3d1-488e-a6ad-8bdec0fd0492",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "@remyhaemmerle-da Can you please review the changes in this file.",
        "createdAt" : "2019-05-22T14:52:50Z",
        "updatedAt" : "2019-05-22T14:56:54Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4c310ddb34ba3d1c7d4dea4a9471ff9fcea2500",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +602,606 @@      )\n\n      val version1_3 = LV(LVM.V1, \"3\")\n      checkModule(pkg, \"NegativeTestCase\")\n      forAll(typeMismatchCases)(module =>"
  }
]