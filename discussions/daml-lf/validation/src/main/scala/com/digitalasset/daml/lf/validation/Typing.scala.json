[
  {
    "id" : "fe4260d3-fefb-4240-9efb-fd3340efac22",
    "prId" : 8364,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fdfd529-ffd8-45e2-aca9-30f3af04dee3",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Should also check that the exception is not a template.",
        "createdAt" : "2021-01-04T11:17:49Z",
        "updatedAt" : "2021-01-04T11:22:20Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "cbba78e5-aeef-4385-9720-1b9de86af0de",
        "parentId" : "7fdfd529-ffd8-45e2-aca9-30f3af04dee3",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I will handle it a new PR. ",
        "createdAt" : "2021-01-04T11:51:18Z",
        "updatedAt" : "2021-01-04T11:51:18Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "ad5bcfec-9dac-4775-b528-6478471c2045",
        "parentId" : "7fdfd529-ffd8-45e2-aca9-30f3af04dee3",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "👍 ",
        "createdAt" : "2021-01-04T11:52:09Z",
        "updatedAt" : "2021-01-04T11:52:09Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "38da13427d4fb0067f9c62ba9e4d26feaea33e21",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +286,290 @@            throw EExpectedExceptionableType(env.ctx, tyConName)\n        }\n    }\n  }\n"
  },
  {
    "id" : "1a6aa4c8-1739-49f7-b39d-f37aa5881b3b",
    "prId" : 8364,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a31e8452-e968-407d-97ed-a5d8bc6689e4",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Shouldn't we also check here that the type is a record type without any type parameters?",
        "createdAt" : "2021-01-04T15:00:43Z",
        "updatedAt" : "2021-01-04T15:03:33Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "060ab430-c0d0-487e-bd29-63cba304b2dc",
        "parentId" : "a31e8452-e968-407d-97ed-a5d8bc6689e4",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I checked that in the pastern matching line 283, just before calling `checkDefException`.",
        "createdAt" : "2021-01-04T15:23:03Z",
        "updatedAt" : "2021-01-04T15:31:44Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "c3f7bd31-5710-4fca-8d61-d04edfa5f935",
        "parentId" : "a31e8452-e968-407d-97ed-a5d8bc6689e4",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I see. Thanks for the explanation.",
        "createdAt" : "2021-01-04T15:28:26Z",
        "updatedAt" : "2021-01-04T15:28:26Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "5482192a-168b-49ca-8680-5e25546d9fd1",
        "parentId" : "a31e8452-e968-407d-97ed-a5d8bc6689e4",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "both conditions are tested in `daml-lf/validation/src/test/scala/com/digitalasset/daml/lf/validation/TypingSpec.scala`",
        "createdAt" : "2021-01-04T15:33:47Z",
        "updatedAt" : "2021-01-04T15:33:47Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "38da13427d4fb0067f9c62ba9e4d26feaea33e21",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +418,422 @@\n    def checkDefException(excepName: TypeConName, defException: DefException): Unit = {\n      val DefException(message) = defException\n      checkExpr(message, TTyCon(excepName) ->: TText)\n      ()"
  },
  {
    "id" : "64086181-8995-4363-b6a2-e4d0e10403d0",
    "prId" : 8281,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f31b4c6-6be5-43df-b2e3-c7b0a02e0b96",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Conventionally we avoid feature flags in the type checker, and rely on the fact the archive deserialization prevents the loading of unsupported feature.   ",
        "createdAt" : "2020-12-14T15:11:02Z",
        "updatedAt" : "2020-12-14T17:26:30Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "2d8920d7-0e70-40a6-8146-cd5deb6ce80d",
        "parentId" : "3f31b4c6-6be5-43df-b2e3-c7b0a02e0b96",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "FYI @nickchapman-da \r\n\r\nThat makes sense. It's not what we do on the Haskell side but since the requirements are different. In Haskell, we produce DAML-LF and want to make sure we don't accidentally introduce the wrong primitives. In Scala, we might want to run without the type checker, for instance in the scenario service, but it makes still sense to check we don't have ASTs with invalid nodes.",
        "createdAt" : "2020-12-14T17:32:12Z",
        "updatedAt" : "2020-12-14T17:32:13Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca699a2cdf78a432a38e7045d298a90b4c2e6ebc",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +372,376 @@          introExprVar(param, paramType).checkExpr(controllers, TParties)\n          choiceObservers.foreach(\n            introExprVar(param, paramType).checkExpr(_, TParties)\n          )\n          introExprVar(selfBinder, TContractId(TTyCon(tplName)))"
  },
  {
    "id" : "cb2ce56f-e4e9-4149-99db-2f4d5f83e212",
    "prId" : 7936,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4925efa-c29e-4ffb-a258-f9aba5a6ae01",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "```suggestion\r\n        case CPNil | CPNone =>\r\n```",
        "createdAt" : "2020-11-11T10:19:44Z",
        "updatedAt" : "2020-11-11T14:27:23Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "21efdb5d320035a91ad6f104102c89baabb311bc",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +665,669 @@        case CPCons(_, _) | CPSome(_) =>\n          SomeRanks(ranks + 1)\n        case CPNil | CPNil | CPNone =>\n          SomeRanks(ranks + 0)\n        case CPDefault =>"
  },
  {
    "id" : "81a891d4-e408-40cb-9c2b-9d985ae5b385",
    "prId" : 7936,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41edd79c-c3c0-4e00-a230-da290562168b",
        "parentId" : null,
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Based on the definition of the expected patterns below, I think it should be this:\r\n\r\n```suggestion\r\n            case PCFalse | PCUnit => SomeRanks(ranks + 0)\r\n            case PCTrue => SomeRanks(ranks + 1)\r\n```",
        "createdAt" : "2020-11-11T10:26:52Z",
        "updatedAt" : "2020-11-11T14:27:23Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "21efdb5d320035a91ad6f104102c89baabb311bc",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +661,665 @@          pc match {\n            case PCFalse | PCUnit => SomeRanks(ranks + 1)\n            case PCTrue => SomeRanks(ranks + 0)\n          }\n        case CPCons(_, _) | CPSome(_) =>"
  },
  {
    "id" : "5b237fd9-7c59-4ee9-b31d-9cc5bad04159",
    "prId" : 7936,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06ed3508-55bd-4914-bb79-e2f34aeca618",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "My understanding is that we only run through this iterator if we already know that we need to report an error. Is that correct?",
        "createdAt" : "2020-11-11T12:01:01Z",
        "updatedAt" : "2020-11-11T14:27:23Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "dd83762a-a97a-48fa-827d-6ac28e246078",
        "parentId" : "06ed3508-55bd-4914-bb79-e2f34aeca618",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Yes. The argument `patterns` of `ExpectedPatterns` is \"by-name\" (See line 1016), so we will actually construct this iterator, only when we will call  the method `missingPatterns` of `ExpectedPatterns`. As you can see we do that only when we need to report an error. ",
        "createdAt" : "2020-11-11T12:17:18Z",
        "updatedAt" : "2020-11-11T14:27:23Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "21efdb5d320035a91ad6f104102c89baabb311bc",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +1028,1032 @@  ) = new ExpectedPatterns(\n    cons.length,\n    cons.iterator.map { case (variants, _) => CPVariant(scrutTCon, variants, wildcard) },\n  )\n  private[this] def enumExpectedPatterns(scrutTCon: TypeConName, cons: ImmArray[EnumConName]) ="
  },
  {
    "id" : "3689d825-e430-4d1f-a7f9-86106b6fc816",
    "prId" : 7922,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "868a7d2a-ea8c-4f84-9a16-160c81f863d6",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Good catch!",
        "createdAt" : "2020-11-10T19:01:44Z",
        "updatedAt" : "2020-11-18T17:44:44Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "38911b97-f692-4a13-bbbd-1b0b363dd330",
        "parentId" : "868a7d2a-ea8c-4f84-9a16-160c81f863d6",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Thanks to Moritz for pointing me in the right direction",
        "createdAt" : "2020-11-11T10:06:01Z",
        "updatedAt" : "2020-11-18T17:44:44Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "34b42bd9beb1f535e174b807fcc75935104392e6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +384,388 @@          }\n          choiceObservers.foreach {\n            introExprVar(param, paramType)\n              .checkExpr(_, TParties) // FIXME #7709, be conditional on: supportsContractObservers\n          }"
  },
  {
    "id" : "9c2257c0-d321-4cc0-a801-91bd6e9480f0",
    "prId" : 7905,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb6e530d-a9ea-422c-81c9-86df901098d0",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Bug fix.",
        "createdAt" : "2020-11-06T11:12:46Z",
        "updatedAt" : "2020-11-09T14:24:07Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7ae1caaa51f54f4a2a0d125a4fb14891e2daaea",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +759,763 @@\n    private def typeOfFetch(tpl: TypeConName, cid: Expr): Type = {\n      lookupTemplate(ctx, tpl)\n      checkExpr(cid, TContractId(TTyCon(tpl)))\n      TUpdate(TTyCon(tpl))"
  },
  {
    "id" : "467be6d5-a523-47a3-a390-0f8b2ca9d99b",
    "prId" : 4101,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a939ad54-cb3a-4edc-86f9-376f33daf06d",
        "parentId" : null,
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "And completing this missing piece!",
        "createdAt" : "2020-01-21T14:56:56Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "35cb6cb0-4e42-43ba-9efd-b4eeaac5a568",
        "parentId" : "a939ad54-cb3a-4edc-86f9-376f33daf06d",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Happy to do this in a separate PR. We should still be able to test expansion of type synonyms without checking that the definition is well formed",
        "createdAt" : "2020-01-21T15:02:15Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9b7ff4849afb993cbda3dc7bea03b90e9dd9c19",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +266,270 @@      case (dfnName, dfn: DValue) =>\n        Env(mod.languageVersion, world, ContextDefValue(pkgId, mod.name, dfnName)).checkDValue(dfn)\n      case (_, _: DTypeSyn) => // TODO #3616: check type synonyms\n    }\n"
  },
  {
    "id" : "5cea4ef3-3659-4b5e-8966-738aff0cfc56",
    "prId" : 2950,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e7db10b-5824-4f1a-85b0-f342366fedb1",
        "parentId" : null,
        "authorId" : null,
        "body" : "@remyhaemmerle-da  This was a bug in the scala daml-lf typechecker that only affected the new MUL_NUMERIC and DIV_NUMERIC.",
        "createdAt" : "2019-09-19T10:55:57Z",
        "updatedAt" : "2019-09-24T14:18:02Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "bae243c1ecdc420b8ddb5e91675a9a0deec24993",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +43,47 @@    val alpha = TVar(Name.assertFromString(\"$alpha$\"))\n    val beta = TVar(Name.assertFromString(\"$beta$\"))\n    val gamma = TVar(Name.assertFromString(\"$gamma$\"))\n    def tBinop(typ: Type): Type = typ ->: typ ->: typ\n    val tNumBinop = TForall(alpha.name -> KNat, tBinop(TNumeric(alpha)))"
  }
]