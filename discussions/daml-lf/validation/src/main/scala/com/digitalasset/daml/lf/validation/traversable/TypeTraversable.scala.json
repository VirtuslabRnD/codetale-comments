[
  {
    "id" : "3140097b-35b9-439f-b811-654bbb8cdf0b",
    "prId" : 4101,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33ebf728-5e04-4d7e-96af-ff6f7383acda",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n        f(TyCon(tyCon))\r\n        args.iterator.foreach(f)\r\n```",
        "createdAt" : "2020-01-20T12:12:20Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "a87a8c46-a722-4d6b-be13-997d3ff13079",
        "parentId" : "33ebf728-5e04-4d7e-96af-ff6f7383acda",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Are you sure? This looks wrong to me.",
        "createdAt" : "2020-01-20T19:52:07Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "574a2255-04f1-4ae3-8557-7ce811a8f7ac",
        "parentId" : "33ebf728-5e04-4d7e-96af-ff6f7383acda",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "we fixed `modRefsInType` instead",
        "createdAt" : "2020-01-21T12:22:51Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9b7ff4849afb993cbda3dc7bea03b90e9dd9c19",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +17,21 @@    typ match {\n      case TSynApp(_, args) =>\n        args.iterator.foreach(f)\n      case TVar(_) | TTyCon(_) | TBuiltin(_) | TNat(_) =>\n      case TApp(tyfun, arg) =>"
  },
  {
    "id" : "1c247c84-6cda-48a8-a256-8f6dbdca0335",
    "prId" : 4101,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60ed57b8-a50e-4687-85e0-b97a0afc6aa5",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n      case TSynApp(tyCon, args) =>\r\n```",
        "createdAt" : "2020-01-20T12:12:38Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "b7d2585e-8a49-4b74-9f67-6d70e8aef24b",
        "parentId" : "60ed57b8-a50e-4687-85e0-b97a0afc6aa5",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "As above.",
        "createdAt" : "2020-01-20T19:52:12Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9b7ff4849afb993cbda3dc7bea03b90e9dd9c19",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +16,20 @@  private[validation] def foreach[U](typ: Type, f: Type => U): Unit =\n    typ match {\n      case TSynApp(_, args) =>\n        args.iterator.foreach(f)\n      case TVar(_) | TTyCon(_) | TBuiltin(_) | TNat(_) =>"
  },
  {
    "id" : "98e348ab-7049-4773-a13f-a9ce1403971b",
    "prId" : 4101,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db9bf177-a476-4e44-ad1c-bfe5832b4106",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "This 2 changes below, follow the current philosophy of the TypeTraversable iterator utility.\r\nWithout those changes, `Recursion` check will broke.\r\n",
        "createdAt" : "2020-01-20T12:18:15Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "b7b42292-6e57-4c58-ae39-2e4cf4fdb46a",
        "parentId" : "db9bf177-a476-4e44-ad1c-bfe5832b4106",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "As above",
        "createdAt" : "2020-01-20T19:52:34Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "3b995cbe-48ae-478b-a7c6-e90430d7c65f",
        "parentId" : "db9bf177-a476-4e44-ad1c-bfe5832b4106",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "What will break? I don't understand",
        "createdAt" : "2020-01-20T19:58:44Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "fbeaa288-03ba-464e-aeb6-6b9bc0eec7e8",
        "parentId" : "db9bf177-a476-4e44-ad1c-bfe5832b4106",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "@remyhaemmerle-da is referring to `modRefsInType` in `com.digitalasset.daml.lf.validation.Recursion` which currently checks for `TTyCon` and therefore will miss module references in a type synonym name. That said, Iâ€™m not sure I agree that the suggestions make sense here. Pretending that a type synonym is a type con is really confusing. I think it makes much more sense to extend `modRefsInType` to handle type synonyms.",
        "createdAt" : "2020-01-20T20:10:38Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "85ea4add-d388-4132-82ce-4e10960b0584",
        "parentId" : "db9bf177-a476-4e44-ad1c-bfe5832b4106",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Right. I see that now. \r\nAnd I agree a fix to `modRefsInType` would be clearer.\r\n",
        "createdAt" : "2020-01-20T20:45:32Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "b4a1fab0-159f-4ec6-a5e0-1ef26eedabfc",
        "parentId" : "db9bf177-a476-4e44-ad1c-bfe5832b4106",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Ok for the fix of  `modRefsInType`",
        "createdAt" : "2020-01-21T07:45:16Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "e1b33fe8-9f4e-4993-9066-88100e0b248a",
        "parentId" : "db9bf177-a476-4e44-ad1c-bfe5832b4106",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "done",
        "createdAt" : "2020-01-21T12:23:06Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9b7ff4849afb993cbda3dc7bea03b90e9dd9c19",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +14,18 @@    ((TTyCon(tyCon.tycon): Type) /: tyCon.args.iterator)(TApp)\n\n  private[validation] def foreach[U](typ: Type, f: Type => U): Unit =\n    typ match {\n      case TSynApp(_, args) =>"
  }
]