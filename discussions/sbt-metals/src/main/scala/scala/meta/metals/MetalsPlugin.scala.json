[
  {
    "id" : "19ef8e1a-2a41-4778-a540-44141d33504c",
    "prId" : 2404,
    "prUrl" : "https://github.com/scalameta/metals/pull/2404#pullrequestreview-570746319",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5d7820f-add6-4550-8d82-21ed077bccb7",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "@ckipp01 what about this? I think this might have been the actual problem, we should not set `semanticdbCompilerPlugin` if we don't currently support the given scala version. If a user had the Metals plugin and `semanticdbEnabled := true` then we would have replaced the original without actually needing to do it. So it would break user's builds even though Metals does not support the given version. ",
        "createdAt" : "2021-01-18T19:39:49Z",
        "updatedAt" : "2021-01-18T19:39:56Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "d19296a6-151d-4d6b-b9b8-327c93e79c91",
        "parentId" : "f5d7820f-add6-4550-8d82-21ed077bccb7",
        "authorId" : "84490516-a7af-4f7f-9947-360c279c4400",
        "body" : "Yea, that makes sense üëçüèº . So if it's not in our supported versions, we just default to what they want. The only problem (and I don't know how to get around) is that for some reason if someone wants to bump the semanticdb version while using a Scala version that we do support, they can't.",
        "createdAt" : "2021-01-18T19:41:29Z",
        "updatedAt" : "2021-01-18T19:41:29Z",
        "lastEditedBy" : "84490516-a7af-4f7f-9947-360c279c4400",
        "tags" : [
        ]
      },
      {
        "id" : "3aa9323d-8b27-4562-aed5-1e35d6689008",
        "parentId" : "f5d7820f-add6-4550-8d82-21ed077bccb7",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "I think it's fine, we update the semanticdb version often enough. There should be no actual need to do it manually. Besides, if the user modifies the version we cannot know if it actually supports the given Scala version. Metals should be a source of truth here the same as with Bloop.",
        "createdAt" : "2021-01-18T19:47:54Z",
        "updatedAt" : "2021-01-18T19:47:54Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ecb05f5d5e9bbda7f30f18731695522ef5aa16d",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +18,22 @@  override lazy val projectSettings: Seq[Def.Setting[_]] = Seq(\n    semanticdbCompilerPlugin := {\n      if (supportedScala2Versions.contains(scalaVersion.value))\n        (\"org.scalameta\" % \"semanticdb-scalac\" % semanticdbVersion)\n          .cross(CrossVersion.full)"
  },
  {
    "id" : "4c6fbc83-8e63-470e-836f-448b4bf80c68",
    "prId" : 397,
    "prUrl" : "https://github.com/scalameta/metals/pull/397#pullrequestreview-183249094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f64f2f13-bee3-4a7a-8799-29048db30e25",
        "parentId" : null,
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "This is unrelated to Emacs, I caught it while testing out Metals in the http4s repo. sbt-metals disables fatal warning only when exporting the build to bloop, fatal warnings remain enabled in the sbt build.",
        "createdAt" : "2018-12-10T15:40:13Z",
        "updatedAt" : "2018-12-11T10:26:59Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc4a390c004e0da54976f66fea7feb0469ca9621",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +45,49 @@            // Down the road, metals can even remove unused imports for you if they are reported\n            // as warnings but not if they are errors.\n            \"-Xfatal-warnings\"\n          ),\n          scalacOptions.in(p) ++= List("
  }
]