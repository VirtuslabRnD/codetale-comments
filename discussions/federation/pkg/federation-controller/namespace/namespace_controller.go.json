[
  {
    "id" : "a43f6a7b-0125-48cc-9d29-da348cdaa820",
    "prId" : 34648,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34648#pullrequestreview-4344114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbc11861-5e82-4f52-9f20-6b2729a6a6ce",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "The federated namespace is deleted before the underlying cluster namespaces are deleted from etcd, right? This is consistent with the mode of the garbage collector, i.e., asynchronous, but different from deletion of a cluster namespace, which is synchronous. I'm not sure if this is what you want.\n",
        "createdAt" : "2016-10-13T20:53:53Z",
        "updatedAt" : "2016-10-26T23:54:25Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "48cda28e-9703-4e73-8a7a-05e35475c466",
        "parentId" : "fbc11861-5e82-4f52-9f20-6b2729a6a6ce",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "No. federated namespace will not be deleted unless the namespaces have been deleted in all underlying clusters.\n",
        "createdAt" : "2016-10-13T21:03:44Z",
        "updatedAt" : "2016-10-26T23:54:25Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "160eb72c-d007-4ae0-be81-42043adec3c1",
        "parentId" : "fbc11861-5e82-4f52-9f20-6b2729a6a6ce",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Where is it blocked? It seems the [UpdateOnError](https://github.com/kubernetes/kubernetes/pull/34648/files#diff-2c30b9c3878f0bf2ea184f5d3b9c30c3R99) is not blocking.\n",
        "createdAt" : "2016-10-13T21:18:01Z",
        "updatedAt" : "2016-10-26T23:54:25Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "acb42176-5f1f-4fe5-83e3-d2a166b82bff",
        "parentId" : "fbc11861-5e82-4f52-9f20-6b2729a6a6ce",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Yes it was blocked until the Delete request succeeded for all clusters but it wasnt waiting for all resources to go away. Updated the code to wait.\n",
        "createdAt" : "2016-10-14T21:02:00Z",
        "updatedAt" : "2016-10-26T23:54:25Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f955d556f8ed22d392a1ab2ff3891db2156b0591",
    "line" : null,
    "diffHunk" : "@@ -1,1 +514,518 @@\t}\n\n\t// Remove kube_api.FinalizerKubernetes\n\tif len(namespace.Spec.Finalizers) != 0 {\n\t\treturn nc.removeFinalizerFromSpec(namespace, api_v1.FinalizerKubernetes)"
  },
  {
    "id" : "7f4a32de-1c84-489f-8e4f-9779cfd7034d",
    "prId" : 34648,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34648#pullrequestreview-5756692",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2616e04e-bff0-433a-b9b8-e69aef1813cc",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "This function is deleteNamespaceResourcesAndRemoveNamespaceSpecFinalizer :) Maybe split it to two functions? \"KubernetesFinalizer\" is not clear.\n",
        "createdAt" : "2016-10-21T03:55:58Z",
        "updatedAt" : "2016-10-26T23:54:25Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "677c8163-2d80-4ec6-80cf-eb0411636792",
        "parentId" : "2616e04e-bff0-433a-b9b8-e69aef1813cc",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Yes, I can rename it to deleteNamespaceResourcesAndRemoveNamespaceSpecFinalizer but thats a bit long ;)\nI think the current name is fine (its a private func).\nI dont want to change that code much.\nThere is a TODO to make it consistent with the kubernetes code. We should be able to reuse the same code in kubernetes and federation to delete namespace resources.\n",
        "createdAt" : "2016-10-25T00:14:51Z",
        "updatedAt" : "2016-10-26T23:54:25Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "7df0ae87-49c9-4eb9-ad2f-f334113c3ffc",
        "parentId" : "2616e04e-bff0-433a-b9b8-e69aef1813cc",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Ok. I still think \"NamespaceSpecFinalizer\" is more clear than \"KubernetesFinalizer\". Your call, as it's a private func.\n\n> There is a TODO to make it consistent with the kubernetes code. We should be able to reuse the same code in kubernetes and federation to delete namespace resources.\n\nNot sure I follow this part. What kubernetes code are you referring to?\n",
        "createdAt" : "2016-10-25T21:52:26Z",
        "updatedAt" : "2016-10-26T23:54:25Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "03e4284a-91fb-4397-93c5-456454b6d8b2",
        "parentId" : "2616e04e-bff0-433a-b9b8-e69aef1813cc",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "To clarify, I named it removeKubernetesFinalizer because it removes the finalizer called FinalizerKubernetes.\n\n> Not sure I follow this part. What kubernetes code are you referring to?\n\nkubernetes namespace controller also has the same code that deletes all resources in a namespace before removing the finalizer - same as what this function does.\n",
        "createdAt" : "2016-10-25T22:03:15Z",
        "updatedAt" : "2016-10-26T23:54:25Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "66dbbeda-d6dd-441e-8b15-1f29127ab3f3",
        "parentId" : "2616e04e-bff0-433a-b9b8-e69aef1813cc",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "> To clarify, I named it removeKubernetesFinalizer because it removes the finalizer called FinalizerKubernetes.\n\nI think `FinalizerKubernetes` is a bad name :)\n",
        "createdAt" : "2016-10-25T22:21:18Z",
        "updatedAt" : "2016-10-26T23:54:25Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "b4b851f1-3f4c-4be2-b324-51de39a17eb4",
        "parentId" : "2616e04e-bff0-433a-b9b8-e69aef1813cc",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Yes now it is. It is clear now that we should have been more specific. I guess the thinking at that time was that this is the finalizer that kubernetes is adding to do its work. Now we have so many so its better to be specific.\n",
        "createdAt" : "2016-10-25T22:25:29Z",
        "updatedAt" : "2016-10-26T23:54:25Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f955d556f8ed22d392a1ab2ff3891db2156b0591",
    "line" : 256,
    "diffHunk" : "@@ -1,1 +456,460 @@\tif nc.hasFinalizerFuncInSpec(updatedNamespace, api_v1.FinalizerKubernetes) {\n\t\t// Delete resources in this namespace.\n\t\tupdatedNamespace, err = nc.removeKubernetesFinalizer(updatedNamespace)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error in deleting resources in namespace %s: %v\", namespace.Name, err)"
  },
  {
    "id" : "93ddbed2-6cdd-4803-a453-214080eea3dd",
    "prId" : 34648,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34648#pullrequestreview-5751916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "934e36f9-9b22-4d62-85f7-6c2d8d4486c3",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I think you should check if all resources are actually deleted to make the deletion synchronous. Cluster namespace deletion will wait for all resources are deleted. Perhaps this will be easier to implement after you apply the deleteHelper pattern to other resources?\n",
        "createdAt" : "2016-10-21T04:12:56Z",
        "updatedAt" : "2016-10-26T23:54:25Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "6381ba2f-48b0-462c-aa06-82a1eed7fea8",
        "parentId" : "934e36f9-9b22-4d62-85f7-6c2d8d4486c3",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "> I think you should check if all resources are actually deleted to make the deletion synchronous. \n\nYes this is not required right now since all deletions are immediate (there is no cascading deletion). Will need to update this before enabling cascading deletion for any of these resources.\nThe plan is to refactor kubernetes namespace controller code to make the namespace deletion code reusable and then use it here.\nLeaving as is in this PR.\n",
        "createdAt" : "2016-10-25T00:14:35Z",
        "updatedAt" : "2016-10-26T23:54:25Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "977075e4-cab9-477f-b597-e3afcd7b13fd",
        "parentId" : "934e36f9-9b22-4d62-85f7-6c2d8d4486c3",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Ok. Thanks for the explanation.\n",
        "createdAt" : "2016-10-25T21:53:18Z",
        "updatedAt" : "2016-10-26T23:54:25Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f955d556f8ed22d392a1ab2ff3891db2156b0591",
    "line" : null,
    "diffHunk" : "@@ -1,1 +516,520 @@\t// Remove kube_api.FinalizerKubernetes\n\tif len(namespace.Spec.Finalizers) != 0 {\n\t\treturn nc.removeFinalizerFromSpec(namespace, api_v1.FinalizerKubernetes)\n\t}\n\treturn namespace, nil"
  },
  {
    "id" : "fff047aa-9a35-42e3-9612-4f9c52c554c7",
    "prId" : 30207,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb49765e-15e8-4e3b-afe9-d7e1e194b8c7",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Can you please split this function to a separate nc function? This method is already pretty long.\n",
        "createdAt" : "2016-08-08T11:39:36Z",
        "updatedAt" : "2016-08-16T19:51:47Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "abff1d03-0705-42da-856f-5a49261c3ff7",
        "parentId" : "cb49765e-15e8-4e3b-afe9-d7e1e194b8c7",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "It is much shorter now.\n",
        "createdAt" : "2016-08-12T21:19:23Z",
        "updatedAt" : "2016-08-16T19:51:47Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      },
      {
        "id" : "55e99348-ae4a-4f38-8c60-d9d7e347fbfc",
        "parentId" : "cb49765e-15e8-4e3b-afe9-d7e1e194b8c7",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Well - NewNamespaceController is already pretty long, so I would prefer to split it, and this is a good candidate.\n",
        "createdAt" : "2016-08-16T12:08:59Z",
        "updatedAt" : "2016-08-16T19:51:47Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "444513cd-6070-454a-ba5f-7e0c97dd9b87",
        "parentId" : "cb49765e-15e8-4e3b-afe9-d7e1e194b8c7",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Ack. Will stick to the current layout.\n",
        "createdAt" : "2016-08-16T14:31:23Z",
        "updatedAt" : "2016-08-16T19:51:47Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1cbe4771b25debfd09d4381ab3f806fc506454c",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +103,107 @@\tnc.namespaceFederatedInformer = util.NewFederatedInformer(\n\t\tclient,\n\t\tfunc(cluster *federation_api.Cluster, targetClient federation_release_1_4.Interface) (cache.Store, framework.ControllerInterface) {\n\t\t\treturn framework.NewInformer(\n\t\t\t\t&cache.ListWatch{"
  },
  {
    "id" : "6ca0b9b0-299a-4cbe-a8cc-efc7110c36e4",
    "prId" : 30207,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c17f817-8451-4a2c-bd53-1099b8e191f2",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Can you please add a comment what exactly this checks? IIUC, if there is a \"new cluster\" that is not yet fully synced, then we will delay the reconciliation. Is it the only case when we are delaying, or are there any others? It would be good to have a comment on it here.\n",
        "createdAt" : "2016-08-08T11:50:49Z",
        "updatedAt" : "2016-08-16T19:51:47Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "f51fafe4-a40d-48a2-8163-2aa4c1ccf80c",
        "parentId" : "6c17f817-8451-4a2c-bd53-1099b8e191f2",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Done.\n",
        "createdAt" : "2016-08-08T14:14:02Z",
        "updatedAt" : "2016-08-16T19:51:47Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1cbe4771b25debfd09d4381ab3f806fc506454c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +211,215 @@// The function triggers reconcilation of all federated namespaces.\nfunc (nc *NamespaceController) reconcileNamespacesOnClusterChange() {\n\tif !nc.isSynced() {\n\t\tnc.clusterDeliverer.DeliverAfter(allClustersKey, nil, nc.clusterAvailableDelay)\n\t}"
  },
  {
    "id" : "41560a7f-7ca6-4696-9045-60583784fcbc",
    "prId" : 30207,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00e72225-9a31-4a75-a317-149a934ca24e",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This may also mean, that the federated namespace had been deleted in the meantime. Do we really want to ignore this case?\n",
        "createdAt" : "2016-08-08T11:53:04Z",
        "updatedAt" : "2016-08-16T19:51:47Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "00153067-7448-45d0-9060-9b512222c35d",
        "parentId" : "00e72225-9a31-4a75-a317-149a934ca24e",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Kindof. I added a logic to handle status = terminating. I will talk to @quinton-hoole regarding what should we really do in this case. His previous preference was not to delete anything. \n",
        "createdAt" : "2016-08-08T12:48:47Z",
        "updatedAt" : "2016-08-16T19:51:47Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1cbe4771b25debfd09d4381ab3f806fc506454c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +233,237 @@\n\tif !exist {\n\t\t// Not federated namespace, ignoring.\n\t\treturn\n\t}"
  },
  {
    "id" : "25279188-ec00-4d30-8fe8-c0745ca8ac3b",
    "prId" : 30207,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c72454a-6a22-4f9f-ba69-d7e3cfc6b15a",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Don't we have a function to get the store for the given underlying cluster? Something like:\n\n```\nns.namespaceFederatedInformer.GetClusterStore(cluster.Name).GetByKey(namespace)\n```\n",
        "createdAt" : "2016-08-08T12:18:28Z",
        "updatedAt" : "2016-08-16T19:51:47Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "d08465ea-30b9-4efc-a3e2-e294b272a8a5",
        "parentId" : "9c72454a-6a22-4f9f-ba69-d7e3cfc6b15a",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "No.\n",
        "createdAt" : "2016-08-08T14:15:36Z",
        "updatedAt" : "2016-08-16T19:51:47Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1cbe4771b25debfd09d4381ab3f806fc506454c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +256,260 @@\toperations := make([]util.FederatedOperation, 0)\n\tfor _, cluster := range clusters {\n\t\tclusterNamespaceObj, found, err := nc.namespaceFederatedInformer.GetTargetStore().GetByKey(cluster.Name, namespace)\n\t\tif err != nil {\n\t\t\tglog.Errorf(\"Failed to get %s from %s: %v\", namespace, cluster.Name, err)"
  },
  {
    "id" : "d6bc7ba0-e5f5-4f72-92a1-aa53fc1c2ba8",
    "prId" : 30207,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "306efe4a-591e-4335-b3ca-89be8b5ecb91",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Should this be \"delay + backoff\"? Why not just simply \"backoff\"? Can you please add a comment?\n",
        "createdAt" : "2016-08-16T14:38:23Z",
        "updatedAt" : "2016-08-16T19:51:47Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "ce21f5c4-3bf8-4796-876c-230857fd9996",
        "parentId" : "306efe4a-591e-4335-b3ca-89be8b5ecb91",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Added.\n",
        "createdAt" : "2016-08-16T15:44:29Z",
        "updatedAt" : "2016-08-16T19:51:47Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1cbe4771b25debfd09d4381ab3f806fc506454c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +184,188 @@\tif failed {\n\t\tnc.namespaceBackoff.Next(namespace, time.Now())\n\t\tdelay = delay + nc.namespaceBackoff.Get(namespace)\n\t} else {\n\t\tnc.namespaceBackoff.Reset(namespace)"
  }
]