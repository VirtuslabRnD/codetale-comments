[
  {
    "id" : "4aa440ed-9d0c-4bfa-b6e6-992deee75a4d",
    "prId" : 50685,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50685#pullrequestreview-65032011",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70329cf0-8918-4507-9ca0-729c418a48b4",
        "parentId" : null,
        "authorId" : null,
        "body" : "It seems we lose a lot of error detection and logging here, and more specifically will panic and crash rather than retry.  Or am I misunderstanding something here?",
        "createdAt" : "2017-08-28T21:16:23Z",
        "updatedAt" : "2017-09-26T07:56:04Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "c5f23abc-a296-4dab-ab6a-e7bcd9ddf973",
        "parentId" : "70329cf0-8918-4507-9ca0-729c418a48b4",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "DeepCopy cannot fail (anymore). There is no need for the theoretical corner cases we had to take care of before.",
        "createdAt" : "2017-08-29T14:02:09Z",
        "updatedAt" : "2017-09-26T07:56:04Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "11479db0-4cce-4e86-8fce-e30f5f19d509",
        "parentId" : "70329cf0-8918-4507-9ca0-729c418a48b4",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Everything we checked before with code (the type of `clusterObj` and the ability to deepcopy it) is now guaranteed by the type-system, i.e. by the Go compiler. `cluster.DeepCopy()` gives you either a deep copy (always!) or nil. The corner cases of before are gone.",
        "createdAt" : "2017-08-29T14:08:30Z",
        "updatedAt" : "2017-09-26T07:56:04Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "dcd77f80-e3eb-49c0-beed-d9d05882fd32",
        "parentId" : "70329cf0-8918-4507-9ca0-729c418a48b4",
        "authorId" : null,
        "body" : "Awesome.  That's good to know.  I agree.",
        "createdAt" : "2017-09-25T20:51:28Z",
        "updatedAt" : "2017-09-26T07:56:04Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "5427ff1583893ca252addf5cfe0bbba85ebf4b76",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +605,609 @@func (ic *IngressController) updateClusterIngressUIDToMasters(cluster *federationapi.Cluster, fallbackUID string) (string, error) {\n\tmasterCluster, masterUID, err := ic.getMasterCluster()\n\tcluster = cluster.DeepCopy() // Make a clone so that we don't clobber our input param\n\tif err == nil {\n\t\tif masterCluster.Name != cluster.Name { // We're not the master, need to get in sync"
  },
  {
    "id" : "6d4e3118-ab44-4b08-bfbb-73bdb95ec782",
    "prId" : 42375,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42375#pullrequestreview-24632411",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bef9497f-7871-40a3-aaa9-957dfba5c060",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "It should be fine to change this since this was added on HEAD after 1.5",
        "createdAt" : "2017-03-02T01:08:27Z",
        "updatedAt" : "2017-03-02T01:51:14Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "244f8c87eab7362f2d434220f49b64496308c546",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +61,65 @@\t// other cluster.\n\tfirstClusterAnnotation = \"ingress.federation.kubernetes.io/first-cluster\"\n\tControllerName         = \"ingresses\"\n)\n"
  },
  {
    "id" : "42f67bdb-70af-431a-966b-7c657a0ba45f",
    "prId" : 37323,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37323#pullrequestreview-9929165",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d52ba03d-7d2d-473f-b8ea-bad5669df0c5",
        "parentId" : null,
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Call it `master-cluster` to be consistent with the terminology here?\r\n\r\nAlso, shouldn't the key be `federation.ingress.kubernetes.io`? ",
        "createdAt" : "2016-11-22T23:55:24Z",
        "updatedAt" : "2016-11-23T18:55:09Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "032d5409-4390-4fef-a5bb-4e9f330220e5",
        "parentId" : "d52ba03d-7d2d-473f-b8ea-bad5669df0c5",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "I think \"master\" is an overloaded term that can be interpreted as a lot of things.\r\nThis is really just a \"first\" cluster where we create ingress.\r\nThat being said, I was myself on the fence between master and first. I went with first due to the reason above.\r\n\r\nSo I prefer first but dont mind changing it to master if you have a strong opinion.\r\n\r\nRe: the key, why do you think it should be federation.ingress.kubernetes.io? I didnt find an example of us using that pattern anywhere. I thought of it as subdomains. federation is a subdomain of kubernetes and ingress is a further subdomain of federation. But can change it if we are using the other patter somewhere already?\r\nAnother options is `federation.kubernetes.io/ingress-first-cluster` :)",
        "createdAt" : "2016-11-23T00:23:36Z",
        "updatedAt" : "2016-11-23T18:55:09Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "008d8054-1771-40b4-a21c-f41a89adc198",
        "parentId" : "d52ba03d-7d2d-473f-b8ea-bad5669df0c5",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "As we discussed offline, this is fine.",
        "createdAt" : "2016-11-23T19:18:45Z",
        "updatedAt" : "2016-11-23T19:18:45Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "63799452b22958734cd3727191602ac7215804e1",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +58,62 @@\t// We wait for ingress to be created in this cluster before creating it any\n\t// other cluster.\n\tfirstClusterAnnotation = \"ingress.federation.kubernetes.io/first-cluster\"\n)\n"
  },
  {
    "id" : "5c73cce9-e8eb-437b-a48f-54ce919926d9",
    "prId" : 37323,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37323#pullrequestreview-9929311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d159ea4-b029-4878-930e-2186175a0a60",
        "parentId" : null,
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Why not just return `isReady`?",
        "createdAt" : "2016-11-22T23:57:09Z",
        "updatedAt" : "2016-11-23T18:55:09Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "aac32b5c-1953-443f-aa92-43cc8289d6f9",
        "parentId" : "2d159ea4-b029-4878-930e-2186175a0a60",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "isReady is not reliable if err != nil?",
        "createdAt" : "2016-11-23T00:23:30Z",
        "updatedAt" : "2016-11-23T18:55:09Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "7c31c7ec-9b6d-4ab4-a660-c242aa581d99",
        "parentId" : "2d159ea4-b029-4878-930e-2186175a0a60",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Again, as we discussed offline, it is fine to leave this as is in this case.",
        "createdAt" : "2016-11-23T19:19:39Z",
        "updatedAt" : "2016-11-23T19:19:39Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "63799452b22958734cd3727191602ac7215804e1",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +651,655 @@func (ic *IngressController) isClusterReady(clusterName string) bool {\n\tcluster, isReady, err := ic.ingressFederatedInformer.GetReadyCluster(clusterName)\n\treturn isReady && err == nil && cluster != nil\n}\n"
  },
  {
    "id" : "f038f9bf-63ee-4d0a-a347-6cd1e01c4178",
    "prId" : 33339,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33339#pullrequestreview-1278089",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18690e52-1127-44c2-bab6-4b54847e09df",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Sorry did not understand why do you want to transfer annotation from master cluster to federation?\n",
        "createdAt" : "2016-09-23T01:53:38Z",
        "updatedAt" : "2016-09-23T02:01:21Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "e72aa053-00f4-4a81-ae4b-0201bd7d1212",
        "parentId" : "18690e52-1127-44c2-bab6-4b54847e09df",
        "authorId" : null,
        "body" : "The ingress controller in the cluster applies annotations to indicate what target-proxy, url-map etc it applied to this ingress.  It should all be consistent across all cluster ingresses, and should hence also be applied 'upwards' to the federated ingress for consistency.  Not 100% required, but ensures strict API compatibility between Kubernetes and Federation.  Make sense?\n",
        "createdAt" : "2016-09-23T06:16:52Z",
        "updatedAt" : "2016-09-23T06:16:59Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "1eaa688a-9599-4875-b471-e1b9a3fa8987",
        "parentId" : "18690e52-1127-44c2-bab6-4b54847e09df",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "yup, it does now!\nThanks :)\n",
        "createdAt" : "2016-09-23T06:40:00Z",
        "updatedAt" : "2016-09-23T06:40:01Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "359bd170667983201b27422e539abcb3fd46fdac",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +739,743 @@\t\t\t\t\tClusterName: cluster.Name,\n\t\t\t\t})\n\t\t\t\t// TODO: Transfer any readonly (target-proxy, url-map etc) annotations from the master cluster to the federation, if this is the master cluster.\n\t\t\t\t// This is only for consistency, so that the federation ingress metadata matches the underlying clusters.  It's not actually required\t\t\t\t}\n\t\t\t}"
  },
  {
    "id" : "3e27d387-224e-4f29-830c-5a427d266998",
    "prId" : 33339,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33339#pullrequestreview-1467148",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31df7b45-a632-4140-ba0d-6852a272d65b",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "We never use this anymore. We always overwrite desiredIngress.ObjectMeta.\nCan delete this code\n",
        "createdAt" : "2016-09-23T01:55:23Z",
        "updatedAt" : "2016-09-23T02:01:21Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "045e0f3b-2fd7-4c42-8172-7f212e196032",
        "parentId" : "31df7b45-a632-4140-ba0d-6852a272d65b",
        "authorId" : null,
        "body" : "No, we don't always overwrite it.  But I agree, the code is confusing, and in need ot refactoring.  Will do that holistically in a followup PR.\n",
        "createdAt" : "2016-09-26T01:56:11Z",
        "updatedAt" : "2016-09-26T01:56:11Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "359bd170667983201b27422e539abcb3fd46fdac",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +626,630 @@\t\t}\n\t\tdesiredIngress := &extensions_v1beta1.Ingress{}\n\t\tobjMeta, err := conversion.NewCloner().DeepCopy(baseIngress.ObjectMeta)\n\t\tif err != nil {\n\t\t\tglog.Errorf(\"Error deep copying ObjectMeta: %v\", err)"
  },
  {
    "id" : "bd3cc7df-f494-45de-80c5-18cf03a0d838",
    "prId" : 33339,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33339#pullrequestreview-1261538",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9d52ad0-7510-48b4-a13e-1194bb00afcb",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "optional: I liked the previous code where we did all of this only if ObjectMeta is different.\nDont need to do all of this (recompute ObjectMeta) if ObjectMetaEquivalent is true.\n",
        "createdAt" : "2016-09-23T01:59:24Z",
        "updatedAt" : "2016-09-23T02:01:21Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "359bd170667983201b27422e539abcb3fd46fdac",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +709,713 @@\t\t\t} else {\n\t\t\t\tglog.V(4).Infof(\"Ingress %s in cluster %s needs an update: cluster ingress %v is not equivalent to federated ingress %v\", ingress, cluster.Name, clusterIngress, desiredIngress)\n\t\t\t\tobjMeta, err := conversion.NewCloner().DeepCopy(clusterIngress.ObjectMeta)\n\t\t\t\tif err != nil {\n\t\t\t\t\tglog.Errorf(\"Error deep copying ObjectMeta: %v\", err)"
  },
  {
    "id" : "47744e66-69e1-404a-b52c-a09b3794a9d9",
    "prId" : 31746,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec98bee6-3da4-43c7-b0b1-f921467eff48",
        "parentId" : null,
        "authorId" : null,
        "body" : "Include the ingress namespace and name?  util.NamespacedName.String() can be used to ensure consistent formatting.\n",
        "createdAt" : "2016-08-30T22:55:24Z",
        "updatedAt" : "2016-08-30T22:55:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "c694a886-5411-408f-a4e3-4ba15344a3ec",
        "parentId" : "ec98bee6-3da4-43c7-b0b1-f921467eff48",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "The event is attached to the ingress object and all of the stuff is there. We don't include event owner in the event text.\nExample:\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/controller/controller_utils.go#L479\n",
        "createdAt" : "2016-08-30T23:12:14Z",
        "updatedAt" : "2016-08-30T23:12:14Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      },
      {
        "id" : "6ca4bbcf-0d4e-4a0e-9aa8-d8ab7214ef96",
        "parentId" : "ec98bee6-3da4-43c7-b0b1-f921467eff48",
        "authorId" : null,
        "body" : "Aah - makes sense.  As you can tell, I've never used events :-)\n",
        "createdAt" : "2016-08-31T00:04:05Z",
        "updatedAt" : "2016-08-31T00:04:05Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "e850d4f0a241d9813fd1b60f767058a1513639f0",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +299,303 @@\t\t\tdesiredIngress.ObjectMeta.UID = \"\"\n\t\t\tic.eventRecorder.Eventf(baseIngress, api.EventTypeNormal, \"CreateInCluster\",\n\t\t\t\t\"Creating ingress in cluster %s\", cluster.Name)\n\n\t\t\t// We always first create an ingress in the first available cluster.  Once that ingress"
  },
  {
    "id" : "cf537d90-9703-4266-a48a-17b03bf0ee84",
    "prId" : 31746,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "115ed789-682b-431d-bebf-ccc91e151200",
        "parentId" : null,
        "authorId" : null,
        "body" : "As above.\n",
        "createdAt" : "2016-08-30T22:55:33Z",
        "updatedAt" : "2016-08-30T22:55:33Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "72364184-4d29-4c6b-80e5-7f6ae5bfd743",
        "parentId" : "115ed789-682b-431d-bebf-ccc91e151200",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "As above :)\n",
        "createdAt" : "2016-08-30T23:12:31Z",
        "updatedAt" : "2016-08-30T23:12:31Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      },
      {
        "id" : "e592e5ed-79dd-4134-ab2c-3b58f5072cb4",
        "parentId" : "115ed789-682b-431d-bebf-ccc91e151200",
        "authorId" : null,
        "body" : "As above :-)\n",
        "createdAt" : "2016-08-31T00:04:29Z",
        "updatedAt" : "2016-08-31T00:04:29Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "e850d4f0a241d9813fd1b60f767058a1513639f0",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +347,351 @@\t\t\t\t}\n\t\t\t\tic.eventRecorder.Eventf(baseIngress, api.EventTypeNormal, \"UpdateCluster\",\n\t\t\t\t\t\"Updating ingress in cluster %s\", cluster.Name)\n\n\t\t\t\toperations = append(operations, util.FederatedOperation{"
  },
  {
    "id" : "0cb71d69-fbdb-4190-99ca-e7e56ea530b7",
    "prId" : 31746,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9af90744-03dc-4af4-a950-b757a7b0c91e",
        "parentId" : null,
        "authorId" : null,
        "body" : "As above.\n",
        "createdAt" : "2016-08-30T22:55:56Z",
        "updatedAt" : "2016-08-30T22:55:56Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "589394d2-ea3e-4762-81ce-70c0eca1e9e0",
        "parentId" : "9af90744-03dc-4af4-a950-b757a7b0c91e",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "As above :)\n",
        "createdAt" : "2016-08-30T23:12:41Z",
        "updatedAt" : "2016-08-30T23:12:41Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      },
      {
        "id" : "f52da507-2693-49e0-9726-3e75c352a754",
        "parentId" : "9af90744-03dc-4af4-a950-b757a7b0c91e",
        "authorId" : null,
        "body" : "As above :-)\n",
        "createdAt" : "2016-08-31T00:04:37Z",
        "updatedAt" : "2016-08-31T00:04:37Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "e850d4f0a241d9813fd1b60f767058a1513639f0",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +365,369 @@\terr = ic.federatedUpdater.UpdateWithOnError(operations, ic.updateTimeout, func(op util.FederatedOperation, operror error) {\n\t\tic.eventRecorder.Eventf(baseIngress, api.EventTypeNormal, \"FailedClusterUpdate\",\n\t\t\t\"Update ingress in cluster %s failed: %v\", op.ClusterName, operror)\n\t})\n\tif err != nil {"
  },
  {
    "id" : "efd5470c-f7a1-4475-a48c-6f27c3943caa",
    "prId" : 31600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d273b97e-301c-411b-a5b0-f7a38735b4ec",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "so we'll change the uid if a GET fails? \n",
        "createdAt" : "2016-08-29T17:12:42Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "577ee521-e662-40fa-a058-8a78c1e7f489",
        "parentId" : "d273b97e-301c-411b-a5b0-f7a38735b4ec",
        "authorId" : null,
        "body" : "No, once a master cluster has been chosen once, it's UID is applied to all other clusters (in the federation etcd, and thence to the cluster's ingress controller configmaps), and if any one of them becomes the master in future, the UID will remain constant.  This only deals with the case where none of the clusters (in the federation etcd) know what the UID is (e.g. when only one cluster is registered), in which case the one from that (now master) cluster is used.\n\nIt would be better to persist this in one central place rather than in all of the registered clusters, but place does not exist yet.  I will add an issue to track improving this.\n",
        "createdAt" : "2016-08-29T23:52:36Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fac6318c57c2ff1e070d2de45bc367bad1533cdb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +552,556 @@\t\t\tcluster.ObjectMeta.Annotations[uidAnnotationKey] = masterUID\n\t\t\tif _, err = ic.federatedApiClient.Federation().Clusters().Update(cluster); err != nil {\n\t\t\t\tglog.Errorf(\"Failed to add master ingress UID annotation (%q = %q) from master cluster %q to cluster %q, will try again later: %v\", uidAnnotationKey, masterUID, masterCluster.Name, cluster.Name, err)\n\t\t\t\treturn\n\t\t\t} else {"
  },
  {
    "id" : "9e0926ee-e5f2-4af5-81f0-2927e92b5984",
    "prId" : 31600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab8c3fc6-c62f-44a5-8918-dd8ac0f4342e",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "changing the uid once you have working ingresses is not easy. It requires recreation of cloud resources and hance downtime. Typically users should not want to do this, the recommended way to handle it is to delete ingresses, change uid, recreate ingress (https://github.com/kubernetes/contrib/blob/master/ingress/controllers/gce/BETA_LIMITATIONS.md#changing-the-cluster-uid). It would be even worse if one cluster ended up with a different uid as it was creating ingress.\n\nCan you complain loudly anytime we actually update it (event against master, Warningf logging)?\n",
        "createdAt" : "2016-08-29T17:12:44Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "bd1b2ed0-e7d1-4482-a4e8-02ad08c51876",
        "parentId" : "ab8c3fc6-c62f-44a5-8918-dd8ac0f4342e",
        "authorId" : null,
        "body" : "Yes, agreed.  Will do, and add appropriate release notes.  It would actually be pretty easy to refuse to do this here if any Ingresses already exist in the cluster.  See also https://github.com/kubernetes/contrib/issues/1656 for the better plan for beta and GA, as this is clearly a fairly significant limitation of Federated Ingress alpha.\n",
        "createdAt" : "2016-08-29T23:42:46Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fac6318c57c2ff1e070d2de45bc367bad1533cdb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +256,260 @@\t\t\tconfigMap := obj.(*v1.ConfigMap)\n\t\t\tconfigMapName := types.NamespacedName{Name: configMap.Name, Namespace: configMap.Namespace}\n\t\t\tglog.V(4).Infof(\"Attempting to update ConfigMap: %v\", configMap)\n\t\t\t_, err := client.Core().ConfigMaps(configMap.Namespace).Update(configMap)\n\t\t\tif err == nil {"
  },
  {
    "id" : "c7c15a2c-f26d-4128-b22d-9824b33df24b",
    "prId" : 31600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "232579be-fb52-45a5-a4ae-25707b78ae9c",
        "parentId" : null,
        "authorId" : null,
        "body" : "I realize that this function is way too long and in need of refactoring - will do in a followup PR.\n",
        "createdAt" : "2016-09-13T00:08:46Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fac6318c57c2ff1e070d2de45bc367bad1533cdb",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +104,108 @@// NewIngressController returns a new ingress controller\nfunc NewIngressController(client federation_release_1_4.Interface) *IngressController {\n\tglog.V(4).Infof(\"->NewIngressController V(4)\")\n\tbroadcaster := record.NewBroadcaster()\n\tbroadcaster.StartRecordingToSink(eventsink.NewFederatedEventSink(client))"
  },
  {
    "id" : "45bc1e2a-e5a3-4438-98db-7ca638717544",
    "prId" : 31600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ece2bcc0-2c0d-4b3c-bc34-0185a85e0a4a",
        "parentId" : null,
        "authorId" : null,
        "body" : "I realize that this function is way too long and in need of refactoring - will do in a followup PR.\n",
        "createdAt" : "2016-09-13T00:10:12Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fac6318c57c2ff1e070d2de45bc367bad1533cdb",
    "line" : 527,
    "diffHunk" : "@@ -1,1 +576,580 @@\nfunc (ic *IngressController) reconcileIngress(ingress types.NamespacedName) {\n\tglog.V(4).Infof(\"Reconciling ingress %q for all clusters\", ingress)\n\tif !ic.isSynced() {\n\t\tic.deliverIngress(ingress, ic.clusterAvailableDelay, false)"
  },
  {
    "id" : "2588845d-f0b8-4fac-9411-d67ad01c3a9d",
    "prId" : 31600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7efc83da-3595-4a58-b3e8-99b3673a772a",
        "parentId" : null,
        "authorId" : null,
        "body" : "This ideally needs to be done in parallel via a worker queue.  Will do in a followup PR.\n",
        "createdAt" : "2016-09-13T00:12:52Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fac6318c57c2ff1e070d2de45bc367bad1533cdb",
    "line" : 490,
    "diffHunk" : "@@ -1,1 +540,544 @@  If there is no master cluster, then fallbackUID is used (and hence this cluster becomes the master).\n*/\nfunc (ic *IngressController) updateClusterIngressUIDToMasters(cluster *federation_api.Cluster, fallbackUID string) {\n\tmasterCluster, masterUID, err := ic.getMasterCluster()\n\tclusterObj, clusterErr := conversion.NewCloner().DeepCopy(cluster) // Make a clone so that we don't clobber our input param"
  },
  {
    "id" : "2e186847-2060-40c4-9281-19995e854314",
    "prId" : 31600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee025873-5603-4aa3-a2bd-340d5dbcfc8b",
        "parentId" : null,
        "authorId" : null,
        "body" : "Ideally this needs to be done in parallel via a worker queue.  Will do in a followup PR.\n",
        "createdAt" : "2016-09-13T00:14:31Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fac6318c57c2ff1e070d2de45bc367bad1533cdb",
    "line" : 640,
    "diffHunk" : "@@ -1,1 +690,694 @@\t\t\t\t}\n\t\t\t\tglog.V(4).Infof(\"Attempting to update base federated ingress: %v\", baseIngress)\n\t\t\t\tif _, err = ic.federatedApiClient.Extensions().Ingresses(baseIngress.Namespace).Update(baseIngress); err != nil {\n\t\t\t\t\tglog.Errorf(\"Failed to add static IP annotation to federated ingress %q, will try again later: %v\", ingress, err)\n\t\t\t\t\tic.deliverIngress(ingress, ic.ingressReviewDelay, true)"
  },
  {
    "id" : "18959263-ea4e-4426-b7e1-e28a7aa24263",
    "prId" : 31600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9db4e3f-30ef-4657-861e-2482c1742b26",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Why is this only in ListFunc and not in WatchFunc?\nIs it better to move it to the top, where function definition starts (line 104)\n",
        "createdAt" : "2016-09-13T05:21:52Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "cc5bfaf8-e17c-4c97-b5ed-1fc7bec23f2b",
        "parentId" : "c9db4e3f-30ef-4657-861e-2482c1742b26",
        "authorId" : null,
        "body" : "It was only used for debugging, but yes, I should and will make it consistent.\n",
        "createdAt" : "2016-09-13T14:37:58Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "21f55eca-55bb-4cc7-82a1-8d99ababb036",
        "parentId" : "c9db4e3f-30ef-4657-861e-2482c1742b26",
        "authorId" : null,
        "body" : "Done.  And the if statement needs to be evaluated in the closure, not in the parent function.\n",
        "createdAt" : "2016-09-13T15:02:07Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fac6318c57c2ff1e070d2de45bc367bad1533cdb",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +183,187 @@\t\t\t\t&cache.ListWatch{\n\t\t\t\t\tListFunc: func(options api.ListOptions) (pkg_runtime.Object, error) {\n\t\t\t\t\t\tif targetClient == nil {\n\t\t\t\t\t\t\tglog.Errorf(\"Internal error: targetClient is nil\")\n\t\t\t\t\t\t}"
  },
  {
    "id" : "4f5b1980-1dc0-4fa8-a7a4-32c45b2c0ccf",
    "prId" : 31600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3e1d1a6-acfe-4de4-a1b1-dddc99387203",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "What do you mean by list one by name?\nDo you want Get?\n",
        "createdAt" : "2016-09-13T05:21:55Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "f19f6e02-2957-458c-9973-a655d6a82a5f",
        "parentId" : "c3e1d1a6-acfe-4de4-a1b1-dddc99387203",
        "authorId" : null,
        "body" : "Yes, I'll do that.  I was initially struggling with incompatible return types, but that's easy to fix.\n",
        "createdAt" : "2016-09-13T14:39:32Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "3af4adce-ed73-4c23-bcc8-6a3336962deb",
        "parentId" : "c3e1d1a6-acfe-4de4-a1b1-dddc99387203",
        "authorId" : null,
        "body" : "Will do in a separate PR.\n",
        "createdAt" : "2016-09-13T15:02:29Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fac6318c57c2ff1e070d2de45bc367bad1533cdb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +186,190 @@\t\t\t\t\t\t\tglog.Errorf(\"Internal error: targetClient is nil\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn targetClient.Core().ConfigMaps(uidConfigMapNamespace).List(options) // we only want to list one by name - unfortunately Kubernetes don't have a selector for that.\n\t\t\t\t\t},\n\t\t\t\t\tWatchFunc: func(options api.ListOptions) (watch.Interface, error) {"
  },
  {
    "id" : "4b251e38-45f7-4c16-80ae-03cddd06b47e",
    "prId" : 31600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38874718-c1a8-4d32-8d03-2e640c6b4d88",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "future improvement: This seems like a good place to generate an event.\n",
        "createdAt" : "2016-09-13T05:21:58Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "b9ff32bb-236b-44a1-85be-c24b0d7ca41b",
        "parentId" : "38874718-c1a8-4d32-8d03-2e640c6b4d88",
        "authorId" : null,
        "body" : "Agreed.  Events need to be added throughout.  I'll do all of that in a separate PR.\n",
        "createdAt" : "2016-09-13T14:40:00Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fac6318c57c2ff1e070d2de45bc367bad1533cdb",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +222,226 @@\t\t\t\tglog.Errorf(\"Error creating ingress %q: %v\", types.NamespacedName{Name: ingress.Name, Namespace: ingress.Namespace}, err)\n\t\t\t} else {\n\t\t\t\tglog.V(4).Infof(\"Successfully created ingress %q\", types.NamespacedName{Name: ingress.Name, Namespace: ingress.Namespace})\n\t\t\t}\n\t\t\treturn err"
  },
  {
    "id" : "357bb640-d0ef-474b-b2a4-4d30a0fe4685",
    "prId" : 31600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a6c89d0-065c-4f98-834f-d8d06074de8b",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Do not create if this is unexpected?\n",
        "createdAt" : "2016-09-13T05:22:01Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "acdde9c3-50e5-47ba-b8ee-32bc09023cb7",
        "parentId" : "4a6c89d0-065c-4f98-834f-d8d06074de8b",
        "authorId" : null,
        "body" : "Yes agreed, I originally had it that way, but changed it to this warning to track down a bug.  Will switch it back (in a separate PR).\n",
        "createdAt" : "2016-09-13T14:41:02Z",
        "updatedAt" : "2016-09-13T16:38:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fac6318c57c2ff1e070d2de45bc367bad1533cdb",
    "line" : 204,
    "diffHunk" : "@@ -1,1 +250,254 @@\t\t\tconfigMapName := types.NamespacedName{Name: configMap.Name, Namespace: configMap.Namespace}\n\t\t\tglog.Errorf(\"Internal error: Incorrectly attempting to create ConfigMap: %q\", configMapName)\n\t\t\t_, err := client.Core().ConfigMaps(configMap.Namespace).Create(configMap)\n\t\t\treturn err\n\t\t},"
  },
  {
    "id" : "969576fd-f42c-4371-9594-e056081ed57a",
    "prId" : 30419,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c826d8eb-8ab4-4311-b726-90ef5216b744",
        "parentId" : null,
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "return if not synced\n",
        "createdAt" : "2016-08-19T21:16:13Z",
        "updatedAt" : "2016-08-22T20:00:19Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      },
      {
        "id" : "39260877-f184-4895-ad21-2418ee015b5a",
        "parentId" : "c826d8eb-8ab4-4311-b726-90ef5216b744",
        "authorId" : null,
        "body" : "Done.\n",
        "createdAt" : "2016-08-22T00:54:19Z",
        "updatedAt" : "2016-08-22T20:00:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "97d6494c417b7e563c03c882537a3cf23fb63d50",
    "line" : null,
    "diffHunk" : "@@ -1,1 +244,248 @@\tglog.V(4).Infof(\"Reconciling ingress %q\", ingress)\n\tif !ic.isSynced() {\n\t\tic.deliverIngress(ingress, ic.clusterAvailableDelay, false)\n\t\treturn\n\t}"
  },
  {
    "id" : "ae1063f4-0950-43f4-a42d-73f2a25b6e3e",
    "prId" : 30419,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "578e03fb-130f-4abd-93c1-fcb05206bac6",
        "parentId" : null,
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Do we want to copy this?\n",
        "createdAt" : "2016-08-22T14:49:44Z",
        "updatedAt" : "2016-08-22T20:00:19Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      },
      {
        "id" : "b650e950-c228-4f3d-8f5d-9a7fc7c932fe",
        "parentId" : "578e03fb-130f-4abd-93c1-fcb05206bac6",
        "authorId" : null,
        "body" : "Good catch - I don't know what I was thinking there.  Will fix.\n",
        "createdAt" : "2016-08-22T14:57:29Z",
        "updatedAt" : "2016-08-22T20:00:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "9352fdfa-21c2-4051-8d6c-cbe6a1cd8ca3",
        "parentId" : "578e03fb-130f-4abd-93c1-fcb05206bac6",
        "authorId" : null,
        "body" : "Oh no wait, I was correct.  When updating (the cluster ingress), one needs to provide the resource version and UID.\n",
        "createdAt" : "2016-08-22T14:58:41Z",
        "updatedAt" : "2016-08-22T20:00:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "1d57ed4d-a75d-480e-aa09-d0002edd44a5",
        "parentId" : "578e03fb-130f-4abd-93c1-fcb05206bac6",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Why? In namespace controller i don't do that and it works. Also if you update an object using kubectl you don't need any of these fields.\n",
        "createdAt" : "2016-08-22T16:36:30Z",
        "updatedAt" : "2016-08-22T20:00:19Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      },
      {
        "id" : "c490c5c2-e1cb-4015-87a3-545a9c3317c7",
        "parentId" : "578e03fb-130f-4abd-93c1-fcb05206bac6",
        "authorId" : null,
        "body" : "https://github.com/kubernetes/kubernetes/blob/master/docs/devel/api-conventions.md\n\nThe resourceVersion is changed by the server every time an object is modified. If resourceVersion is included with the PUT operation the system will verify that there have not been other successful mutations to the resource during a read/modify/write cycle, by verifying that the current value of resourceVersion matches the specified value.\n",
        "createdAt" : "2016-08-22T17:26:25Z",
        "updatedAt" : "2016-08-22T20:00:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "8125b851-66ff-4d4b-8332-06d73d899ac7",
        "parentId" : "578e03fb-130f-4abd-93c1-fcb05206bac6",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "The thing here is that we don't care about the previous content of the object. We could overwrite the content every time we reconciliate an object but we do this only when something changed for performance reasons. \nI wonder what should we actually do if the object was modified in the mean time? Does it change our desire to overwrite it?\n",
        "createdAt" : "2016-08-22T21:25:28Z",
        "updatedAt" : "2016-08-23T00:24:50Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      },
      {
        "id" : "cbd9a7b8-f439-4c8c-9c0d-5a8e1c8d3a64",
        "parentId" : "578e03fb-130f-4abd-93c1-fcb05206bac6",
        "authorId" : null,
        "body" : "Yes, you're right, I had originally assumed that resourceVersion was mandatory for PUT's, but it's not.  I'll remove this in a followup PR.\n",
        "createdAt" : "2016-08-22T22:29:09Z",
        "updatedAt" : "2016-08-22T22:29:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "97d6494c417b7e563c03c882537a3cf23fb63d50",
    "line" : 327,
    "diffHunk" : "@@ -1,1 +325,329 @@\t\t\t\tglog.V(4).Infof(\"Ingress %s in cluster %s needs an update: cluster ingress %v is not equivalent to federated ingress %v\", ingress, cluster.Name, clusterIngress, desiredIngress)\n\t\t\t\t// We need to use server-created fields from the cluster, not the desired object when updating.\n\t\t\t\tdesiredIngress.ObjectMeta.ResourceVersion = clusterIngress.ObjectMeta.ResourceVersion\n\t\t\t\tdesiredIngress.ObjectMeta.UID = clusterIngress.ObjectMeta.UID\n\t\t\t\t// Merge any annotations on the federated ingress onto the underlying cluster ingress,"
  }
]