[
  {
    "id" : "4333a5b0-1d14-4b55-a2ad-7d3b7ef64508",
    "prId" : 30895,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5057d51-0d4c-4e22-99a6-bc59de7e73e8",
        "parentId" : null,
        "authorId" : null,
        "body" : "Please add and/or quote a github issue for this.\n",
        "createdAt" : "2016-08-18T16:28:32Z",
        "updatedAt" : "2016-08-19T12:39:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "03fd876d251a4ca3dd62268d8789df9b14ded51f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +47,51 @@// A function that calculates how many pods from the list are in one of\n// the meaningful (from the replica set perspective) states. This function is\n// a temporary workaround against the current lack of ownerRef in pods.\nfunc AnalysePods(replicaSet *v1beta1.ReplicaSet, allPods []util.FederatedObject, currentTime time.Time) (map[string]PodAnalysisResult, error) {\n\tselector, err := labelSelectorAsSelector(replicaSet.Spec.Selector)"
  },
  {
    "id" : "d4beccc2-e132-443f-89d0-fe020e1e163c",
    "prId" : 30895,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e54f680-1a91-41d4-a8f7-102a7176988c",
        "parentId" : null,
        "authorId" : null,
        "body" : "nit: Curious why util.FederatedObject, and not something more type-specific, given that they're all pods?\n",
        "createdAt" : "2016-08-18T16:29:56Z",
        "updatedAt" : "2016-08-19T12:39:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "53f5138f-4494-483f-a692-4b12d8243cff",
        "parentId" : "9e54f680-1a91-41d4-a8f7-102a7176988c",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Because the input will most likely come from here:\n\nhttps://github.com/kubernetes/kubernetes/blob/master/federation/pkg/federation-controller/util/federated_informer.go#L52\n",
        "createdAt" : "2016-08-18T16:32:15Z",
        "updatedAt" : "2016-08-19T12:39:19Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "03fd876d251a4ca3dd62268d8789df9b14ded51f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +48,52 @@// the meaningful (from the replica set perspective) states. This function is\n// a temporary workaround against the current lack of ownerRef in pods.\nfunc AnalysePods(replicaSet *v1beta1.ReplicaSet, allPods []util.FederatedObject, currentTime time.Time) (map[string]PodAnalysisResult, error) {\n\tselector, err := labelSelectorAsSelector(replicaSet.Spec.Selector)\n\tif err != nil {"
  },
  {
    "id" : "27b2eeaf-9c41-4107-9cbc-419b3cb4172d",
    "prId" : 30895,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ef2b42b-1e2e-4dc0-a628-f322ad8b39d3",
        "parentId" : null,
        "authorId" : null,
        "body" : "As per above, surely it's better to just pass in strongly typed api_v1.Pod's, rather than do this dangerous runtime cast here?  That way the compiler does the checking, not the runtime.\n",
        "createdAt" : "2016-08-18T16:31:47Z",
        "updatedAt" : "2016-08-19T12:39:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "88b5c3f4-c897-44a8-a5d2-579a2ed62a7a",
        "parentId" : "7ef2b42b-1e2e-4dc0-a628-f322ad8b39d3",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "See above. This cast will be somewhere. Either here or in the calling code.\n",
        "createdAt" : "2016-08-18T17:31:01Z",
        "updatedAt" : "2016-08-19T12:39:19Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "03fd876d251a4ca3dd62268d8789df9b14ded51f",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@\n\tfor _, fedObject := range allPods {\n\t\tpod, isPod := fedObject.Object.(*api_v1.Pod)\n\t\tif !isPod {\n\t\t\treturn nil, fmt.Errorf(\"invalid arg content - not a *pod\")"
  },
  {
    "id" : "f2d9e77e-97ae-4e6e-b9a5-05a0e5b5df15",
    "prId" : 30895,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa9037e4-20b8-47ef-8b57-c93488e2a079",
        "parentId" : null,
        "authorId" : null,
        "body" : "This is going to end up doing a linear scan over all pods in all clusters in the federation, in serial.  That's really bad. How long will 100 clusters with 500,000 pods each take?  Those are roughly our scalability goals.\n",
        "createdAt" : "2016-08-18T16:35:13Z",
        "updatedAt" : "2016-08-19T12:39:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "ebe6ddf6-9532-4336-a12a-3a01bb6bc74d",
        "parentId" : "aa9037e4-20b8-47ef-8b57-c93488e2a079",
        "authorId" : null,
        "body" : "Actually, it's even worse than that, isn't it?  It does the above for every replica set?  We'll definitely need to find a better way.\n",
        "createdAt" : "2016-08-18T16:36:25Z",
        "updatedAt" : "2016-08-19T12:39:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "54acdbf6-1b4d-447e-abff-d96824b2ac87",
        "parentId" : "aa9037e4-20b8-47ef-8b57-c93488e2a079",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@quinton-hoole - when do you expect someone having 100 clusters with 500.000 pods each? I wouldn't expect any time in the next 2 years. I agree it's not optimal, but we should solve the same problem in pure kubernetes first and just migrate the solution here.\n",
        "createdAt" : "2016-08-19T09:35:56Z",
        "updatedAt" : "2016-08-19T12:39:19Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "03fd876d251a4ca3dd62268d8789df9b14ded51f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +60,64 @@\t\t\treturn nil, fmt.Errorf(\"invalid arg content - not a *pod\")\n\t\t}\n\t\tif !selector.Empty() && selector.Matches(labels.Set(pod.Labels)) {\n\t\t\tstatus := result[fedObject.ClusterName]\n\t\t\tstatus.Total++"
  },
  {
    "id" : "bb1d1b60-4a0f-4683-9fe1-a553e588ed7b",
    "prId" : 30895,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58b27f2f-b863-4be6-817e-385f4523ce20",
        "parentId" : null,
        "authorId" : null,
        "body" : "Perhaps the watcher could maintain an index on status to make this quicker?\n",
        "createdAt" : "2016-08-18T16:38:42Z",
        "updatedAt" : "2016-08-19T12:39:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "03fd876d251a4ca3dd62268d8789df9b14ded51f",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +66,70 @@\t\t\t\tif pod.Status.Phase == api_v1.PodRunning {\n\t\t\t\t\tif condition.Type == api_v1.PodReady {\n\t\t\t\t\t\tstatus.RunningAndReady++\n\t\t\t\t\t}\n\t\t\t\t} else {"
  },
  {
    "id" : "b42229ec-ffd6-4cf5-9f93-b680590aab13",
    "prId" : 30895,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "248d39fc-69b1-4840-9e93-78fb202a529c",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Please don't copy code.\n\nI'm pretty sure something like\n\n```\nunversionedSelector := unversioned.LabelsSelector\nif err := api.Scheme.Convert(ps, &unversionedSelector); err != nil {\n  return nil, err\n}\nreturn LabelSelectorAsSelector(unversionedSelector)\n}\n```\n",
        "createdAt" : "2016-08-19T09:33:30Z",
        "updatedAt" : "2016-08-19T12:39:19Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "8de73ed6-bd7a-4387-aa58-d4cf507310ba",
        "parentId" : "248d39fc-69b1-4840-9e93-78fb202a529c",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Done.\n",
        "createdAt" : "2016-08-19T10:45:42Z",
        "updatedAt" : "2016-08-19T12:39:19Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "03fd876d251a4ca3dd62268d8789df9b14ded51f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +84,88 @@}\n\nfunc labelSelectorAsSelector(ps *v1beta1.LabelSelector) (labels.Selector, error) {\n\tunversionedSelector := unversioned.LabelSelector{}\n\tif err := api.Scheme.Convert(ps, &unversionedSelector, nil); err != nil {"
  }
]