[
  {
    "id" : "c98b6ce7-6639-4873-b2bf-f5acfc32c0f7",
    "prId" : 43443,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43443#pullrequestreview-32468177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7daf1683-1edb-41de-92fe-d7da086fd7e4",
        "parentId" : null,
        "authorId" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "body" : "(No action required) Kind of begs the question of why the command pair isn't called 'Add/Remove'.",
        "createdAt" : "2017-04-12T19:14:07Z",
        "updatedAt" : "2017-06-25T16:54:39Z",
        "lastEditedBy" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "tags" : [
        ]
      }
    ],
    "commit" : "e825ca53bd145e71c43fd2e7fc0c740c323f087b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +57,61 @@var (\n\tjoin_long = templates.LongDesc(`\n\t\tJoin adds a cluster to a federation.\n\n        Current context is assumed to be a federation API"
  },
  {
    "id" : "26d2d211-2a65-4c0c-9077-39ec5848cbe8",
    "prId" : 35493,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35493#pullrequestreview-6571578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d89a5c3-7a6e-43d3-a9f7-36e0c14804aa",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "kubeconfig access to what?\n",
        "createdAt" : "2016-10-27T04:23:32Z",
        "updatedAt" : "2016-11-01T19:45:39Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "44552a22-8892-4405-9b3d-1021e6670980",
        "parentId" : "5d89a5c3-7a6e-43d3-a9f7-36e0c14804aa",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "It is kubeconfig-access. In other words access to kubeconfig. I thought about \"filesystem based access to kubeconfig\", but that doesn't sound right in this context, so wrote it this way.\n",
        "createdAt" : "2016-10-27T05:59:34Z",
        "updatedAt" : "2016-11-01T19:45:39Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "0dee8f9d-168d-4be6-a8bd-e893befe43de",
        "parentId" : "5d89a5c3-7a6e-43d3-a9f7-36e0c14804aa",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : ":)\n",
        "createdAt" : "2016-11-01T07:19:59Z",
        "updatedAt" : "2016-11-01T19:45:39Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2342f6eefb571d88aa1409d42144fb7a363f4fc2",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +64,68 @@// cluster.\ntype JoinFederationConfig interface {\n\t// PathOptions provides filesystem based kubeconfig access.\n\tPathOptions() *clientcmd.PathOptions\n\t// HostFactory provides a mechanism to communicate with the"
  },
  {
    "id" : "746239bd-ca48-4f41-982d-3ec684a916b4",
    "prId" : 35493,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35493#pullrequestreview-5994889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dacd6bbc-3499-4f9d-b7b9-04241eb3aa07",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Add `var _ JoinFederationConfig = &joinFederationConfig{}` to verify and document that\n",
        "createdAt" : "2016-10-27T04:24:17Z",
        "updatedAt" : "2016-11-01T19:45:39Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "dac3290d-8588-486f-a43a-aa3bec9b0d22",
        "parentId" : "dacd6bbc-3499-4f9d-b7b9-04241eb3aa07",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Done.\n",
        "createdAt" : "2016-10-27T06:00:53Z",
        "updatedAt" : "2016-11-01T19:45:39Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "2342f6eefb571d88aa1409d42144fb7a363f4fc2",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +71,75 @@}\n\n// joinFederationConfig implements JoinFederationConfig interface.\ntype joinFederationConfig struct {\n\tpathOptions *clientcmd.PathOptions"
  },
  {
    "id" : "cd8d458e-5f71-4635-bacf-3c29b63e628c",
    "prId" : 35493,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35493#pullrequestreview-5994889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d22c2020-eee1-446f-8ae0-84c96b1406d9",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Its generally recommended to add some context while returning error message. Like\n`return fmt.Errorf(\"error %s in getting starting config for path options: %v\", po, err)`\n",
        "createdAt" : "2016-10-27T04:29:00Z",
        "updatedAt" : "2016-11-01T19:45:39Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "edd67126-a34a-4389-8ef1-c04c5bf5cf59",
        "parentId" : "d22c2020-eee1-446f-8ae0-84c96b1406d9",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "I would love to do that where the error type isn't important. But it is in this case. Adding that context coerces the error type to some unknown internal type of `fmt` (it is actually whatever returned by `golang/pkg/errors.New()`). That's a type precision loss and that means `cmdutil.CheckErr(err)` in the caller has no idea about the type of the error and can't do the right thing. So I think we should just return the received error without coercing it to a string.\n",
        "createdAt" : "2016-10-27T06:10:15Z",
        "updatedAt" : "2016-11-01T19:45:39Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "2342f6eefb571d88aa1409d42144fb7a363f4fc2",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +142,146 @@\tclientConfig, err := po.GetStartingConfig()\n\tif err != nil {\n\t\treturn err\n\t}\n\tgenerator, err := clusterGenerator(clientConfig, name)"
  },
  {
    "id" : "432aa205-7610-485b-a2ea-7d68c6241f00",
    "prId" : 35493,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35493#pullrequestreview-6190624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72e277cc-8a5e-4e0c-bb2b-21681fa23484",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "context name from kubeconfig cant be used as is for secret name. For ex: secret name cant have \"_\" while context name has \"_\" for gke clusters. Also secret name cant be longer than 255 chars.\nContext: https://github.com/kubernetes/kubernetes/pull/27332/commits/9026195614245538630c62a950c99de7baad370d\n",
        "createdAt" : "2016-10-27T04:43:47Z",
        "updatedAt" : "2016-11-01T19:45:39Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "c90306ae-d36f-4ac4-874f-36bf88847190",
        "parentId" : "72e277cc-8a5e-4e0c-bb2b-21681fa23484",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Do you know of a utility function that does this conversion for us? I am leaning towards implementing our own.\n",
        "createdAt" : "2016-10-27T06:12:37Z",
        "updatedAt" : "2016-11-01T19:45:39Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "2d98cdf4-5536-4157-914c-d57e18e08022",
        "parentId" : "72e277cc-8a5e-4e0c-bb2b-21681fa23484",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "none that I know of. Will have to write one for us\n",
        "createdAt" : "2016-10-28T06:04:43Z",
        "updatedAt" : "2016-11-01T19:45:39Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2342f6eefb571d88aa1409d42144fb7a363f4fc2",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +167,171 @@\t// suit our needs, but it is far less invasive and readable this way.\n\thostFactory := config.HostFactory(host, kubeconfig)\n\t_, err = createSecret(hostFactory, clientConfig, hostSystemNamespace, name, dryRun)\n\tif err != nil {\n\t\tglog.V(2).Infof(\"Failed creating the cluster credentials secret: %v\", err)"
  },
  {
    "id" : "15832a51-34cc-4092-90a2-209380f131bd",
    "prId" : 35493,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35493#pullrequestreview-5994889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecc87c96-38c0-4574-92f0-cec29812fbe1",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Use versioned clientset and create versioned secret object here.\n",
        "createdAt" : "2016-10-27T04:45:34Z",
        "updatedAt" : "2016-11-01T19:45:39Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "0741a1da-ee7c-4edb-b441-d5afacb3070b",
        "parentId" : "ecc87c96-38c0-4574-92f0-cec29812fbe1",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "`cmdutil.Factory` doesn't support external types yet, so it is not possible. I started writing code that way, but then had to switch back. I know how hand-tied it feels ;-)\n",
        "createdAt" : "2016-10-27T06:13:56Z",
        "updatedAt" : "2016-11-01T19:45:39Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "2342f6eefb571d88aa1409d42144fb7a363f4fc2",
    "line" : 234,
    "diffHunk" : "@@ -1,1 +232,236 @@\t// Build the secret object with the minified and flattened\n\t// kubeconfig content.\n\tsecret := &api.Secret{\n\t\tObjectMeta: api.ObjectMeta{\n\t\t\tName:      name,"
  }
]