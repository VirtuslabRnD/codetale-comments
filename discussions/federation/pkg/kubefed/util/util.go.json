[
  {
    "id" : "c610e2bf-c73a-4213-9339-fdaa046d6124",
    "prId" : 50537,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50537#pullrequestreview-55932659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bed04aac-887a-4295-bb5d-b50eaa1e6e43",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "This is a generic problem we need to solve for all API resources that kubefed creates.\r\nFiled https://github.com/kubernetes/kubernetes/issues/50540",
        "createdAt" : "2017-08-11T23:57:39Z",
        "updatedAt" : "2017-08-11T23:57:40Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "4b604d61-509a-4d75-b843-b14822556f28",
        "parentId" : "bed04aac-887a-4295-bb5d-b50eaa1e6e43",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "do you do discovery the same way for other resources, and work with internal versions and expect to be able to convert to the server's preferred version?",
        "createdAt" : "2017-08-11T23:58:07Z",
        "updatedAt" : "2017-08-11T23:58:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "d27eb1d3-ba08-48cf-b57c-dd16d000a94e",
        "parentId" : "bed04aac-887a-4295-bb5d-b50eaa1e6e43",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "I don't think we try to discover group versions for other resources. However, we do work with internal versions the same way, but that doesn't qualify to this list I guess.",
        "createdAt" : "2017-08-12T00:00:58Z",
        "updatedAt" : "2017-08-12T00:00:58Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "30d45f5d-46be-4cd7-9612-ff7ef28eacb7",
        "parentId" : "bed04aac-887a-4295-bb5d-b50eaa1e6e43",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "So at other places, we assume that the server supports a specific version (like extensions/v1beta1.Deployments?). Why not do the same here?\r\n\r\nWhenever we will add a new version, we will likely miss adding it here anyways.",
        "createdAt" : "2017-08-12T00:32:03Z",
        "updatedAt" : "2017-08-12T00:32:03Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "2e092cac-58d5-45fd-8974-85f480f3e3cc",
        "parentId" : "bed04aac-887a-4295-bb5d-b50eaa1e6e43",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Probably because kubefed tried to support clusters with only alpha or only beta RBAC. I'm not opposed to fixing the version to v1beta1 for now, and moving to v1 later when v1beta1 is deprecated, though I'd keep this PR and the associated pick small, then change approaches going forward in 1.8",
        "createdAt" : "2017-08-12T00:36:01Z",
        "updatedAt" : "2017-08-12T00:36:01Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "bc36e06f-64d6-4b8f-981d-122a3656c7c3",
        "parentId" : "bed04aac-887a-4295-bb5d-b50eaa1e6e43",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Doing it as a follow up sgtm",
        "createdAt" : "2017-08-12T01:28:41Z",
        "updatedAt" : "2017-08-12T01:28:41Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f1a617496e92354df3275a5c882374a58ecf992",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +290,294 @@\n\t// These are the RBAC versions we can speak\n\tknownVersions := map[schema.GroupVersion]bool{\n\t\trbacv1.SchemeGroupVersion:       true,\n\t\trbacv1alpha1.SchemeGroupVersion: true,"
  },
  {
    "id" : "42d12308-89f9-423b-bc04-19c0f38bd995",
    "prId" : 44913,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44913#pullrequestreview-34559506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42c7d7b2-b7f3-4451-9d89-69c2760090f3",
        "parentId" : null,
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "Sorry to say this ... but I don't think this make too much difference. Do you have reason to do this, for example, code style best practice?",
        "createdAt" : "2017-04-25T12:14:21Z",
        "updatedAt" : "2017-04-25T12:14:21Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      },
      {
        "id" : "7c61c8d6-fe3b-400c-a259-4d19a0f48d64",
        "parentId" : "42c7d7b2-b7f3-4451-9d89-69c2760090f3",
        "authorId" : "93df2e83-0c3f-4aca-8f83-bac5bb8543ff",
        "body" : "In function the original point equals the modification point. However modification is much cleaner and lighter than the original point. First, it does not need len(xxx) to know the loop count, and the index is not necessary for the function. Don't you think so?",
        "createdAt" : "2017-04-25T13:18:39Z",
        "updatedAt" : "2017-04-25T13:18:39Z",
        "lastEditedBy" : "93df2e83-0c3f-4aca-8f83-bac5bb8543ff",
        "tags" : [
        ]
      }
    ],
    "commit" : "7474a9def0199d01ab8d1b02bd144a2def6e4791",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +257,261 @@\t\t\tfor _, version := range g.Versions {\n\t\t\t\tif version.GroupVersion != \"\" {\n\t\t\t\t\tgv, err := schema.ParseGroupVersion(version.GroupVersion)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn nil, err"
  }
]