[
  {
    "id" : "556b96a7-7ea6-4f47-84c1-c35a93422d25",
    "prId" : 236,
    "prUrl" : "https://github.com/sbt/zinc/pull/236#pullrequestreview-23886663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d331f48-168d-490f-8e8b-86b505b87865",
        "parentId" : null,
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "Maybe it's slightly offtopic for this PR, but we should avoid the term \"binary\" in Zinc because it's used in several different meanings. I think external JARs should be called a \"library\", and therefore this method should be renamed to `libraryDependency`. I've already started the transition here - https://github.com/sbt/zinc/commit/38ad637d2b91567877d319cace2c396869bb194d",
        "createdAt" : "2017-02-25T15:52:37Z",
        "updatedAt" : "2017-02-26T14:48:08Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "c2173a8d-2c99-48e7-bf22-2909988f37fc",
        "parentId" : "9d331f48-168d-490f-8e8b-86b505b87865",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "I think that `library` gives a completely different meaning. Also, a binary name doesn't come from a library necessarily, it can come from a user project that has already been compiled. I really think `binary` is the right term to use here, at least from Zinc's perspective, and we should keep it. Users should understand Zinc notation to use the API, and for that we can better document what binary means. But, since we're in the JVM, binary is the right choice because it also tells the user that we're conforming to JLS, which has the nicety that the user knows what's the supposed format of this name.",
        "createdAt" : "2017-02-25T18:07:36Z",
        "updatedAt" : "2017-02-26T14:48:08Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "a834c5d0-f675-4a72-939b-89880848d130",
        "parentId" : "9d331f48-168d-490f-8e8b-86b505b87865",
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "In Zinc code base \"binary\" could mean `*.jar` file, `*.class` file, `*.class` representation or output of `*.scala` construct, zeros-and-ones serialization form, and finally it could also mean a pair of class name and companion object class. Which meaning is it used here?",
        "createdAt" : "2017-02-25T18:38:55Z",
        "updatedAt" : "2017-02-26T14:48:08Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "9e5cfae2-e613-4e46-8197-76ce90876204",
        "parentId" : "9d331f48-168d-490f-8e8b-86b505b87865",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "In this case, `binary` represents a classpath entry (i.e. from where the Scala compiler has unpickled the info of `onBinaryClassName). That classpath entry is either a JAR or the exact class file where it comes from (so, in this case, it will be a file inside a passed classpath entry since you cannot pass files directly in the class file).",
        "createdAt" : "2017-02-25T18:48:05Z",
        "updatedAt" : "2017-02-26T14:48:08Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "03c79897-fe37-4511-9897-9793cfdf8f60",
        "parentId" : "9d331f48-168d-490f-8e8b-86b505b87865",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "I can document it better if you want, but since we talk about binary dependencies, we should perhaps rename `binary` to `binaryEntry` with the previous description I've given.\r\n  \r\nThis should not be difficult to understand for Zinc users since this API only deals with dependencies and compiler-related information, so it should not be confused with other contexts.",
        "createdAt" : "2017-02-25T18:52:15Z",
        "updatedAt" : "2017-02-26T14:48:08Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "2a7ca616-7980-4d12-95c5-c71803151ad6",
        "parentId" : "9d331f48-168d-490f-8e8b-86b505b87865",
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "If it represents a classpath entry, why not call it `classpathEntry`?\r\nThere's https://github.com/sbt/zinc/blob/1.0/internal/compiler-interface/src/main/java/xsbti/compile/PerClasspathEntryLookup.java",
        "createdAt" : "2017-02-26T16:35:25Z",
        "updatedAt" : "2017-02-26T16:35:25Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "488cdc21-f405-4b12-9997-c241571c1eec",
        "parentId" : "9d331f48-168d-490f-8e8b-86b505b87865",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "Because it's not a classpath entry per se. A classpath entry cannot be a single class file, it has to be a either a directory or a jar. For people knowing this, it can be confusing because they would expect a directory to be passed, not the class file where the binary name actually comes from (which is what you shall pass).",
        "createdAt" : "2017-02-26T16:37:17Z",
        "updatedAt" : "2017-02-26T16:37:17Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      }
    ],
    "commit" : "18a8bda4271c7dd578e8bbce248f3a6eed05eeee",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +38,42 @@                         DependencyContext context);\n\n    /**\n     * Indicate that the class <code>fromClassName</code> depends on a class\n     * named <code>onBinaryClassName</code> coming from class file or jar"
  },
  {
    "id" : "fdd015df-cb54-49e4-b992-0186a63e85f2",
    "prId" : 206,
    "prUrl" : "https://github.com/sbt/zinc/pull/206#pullrequestreview-18655548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c644b639-c66b-433a-bfa4-b20041bc5420",
        "parentId" : null,
        "authorId" : "6f938ccf-9240-4d03-badc-3b4107983b16",
        "body" : "Do you have a concrete usecase for these callbacks?",
        "createdAt" : "2017-01-25T20:45:03Z",
        "updatedAt" : "2017-01-25T22:49:52Z",
        "lastEditedBy" : "6f938ccf-9240-4d03-badc-3b4107983b16",
        "tags" : [
        ]
      },
      {
        "id" : "20a07201-082a-44a1-896b-218156e6822a",
        "parentId" : "c644b639-c66b-433a-bfa4-b20041bc5420",
        "authorId" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "body" : "Yes. I want to implement async calls in my client (since IIRC classDependency and binaryDependency introduce some overhead but I was able to run in parallel to analyzing compilation units).\r\n\r\nI fear I will nee to remove it completely or introduce another callback (since I don't see where I can override it in client). @eed3si9n Any pointers?",
        "createdAt" : "2017-01-25T22:44:24Z",
        "updatedAt" : "2017-01-25T22:49:52Z",
        "lastEditedBy" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "tags" : [
        ]
      },
      {
        "id" : "ee32fad6-0f81-428e-b0bf-f07caa55103f",
        "parentId" : "c644b639-c66b-433a-bfa4-b20041bc5420",
        "authorId" : "6f938ccf-9240-4d03-badc-3b4107983b16",
        "body" : "Is your client open source?",
        "createdAt" : "2017-01-25T23:24:18Z",
        "updatedAt" : "2017-01-25T23:24:18Z",
        "lastEditedBy" : "6f938ccf-9240-4d03-badc-3b4107983b16",
        "tags" : [
        ]
      },
      {
        "id" : "27c54f2e-526d-4a8f-9c3a-84f8e3cb4367",
        "parentId" : "c644b639-c66b-433a-bfa4-b20041bc5420",
        "authorId" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "body" : "Not yet.",
        "createdAt" : "2017-01-26T16:05:35Z",
        "updatedAt" : "2017-01-26T16:05:35Z",
        "lastEditedBy" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "tags" : [
        ]
      }
    ],
    "commit" : "1edf1f3e2dca54f9e1fc83f51c03a1922bd3cfb1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +49,53 @@    boolean nameHashing();\n\n    /** Called at the end of dependency phase. Can be used e.g. to wait on asynchronous tasks. */\n    void dependencyPhaseCompleted();\n"
  }
]