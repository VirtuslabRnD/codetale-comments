[
  {
    "id" : "2dd9a486-7d9c-4b45-84b1-77b9b4c88b01",
    "prId" : 224,
    "prUrl" : "https://github.com/sbt/zinc/pull/224#pullrequestreview-20827494",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36669984-946c-425e-942a-02910fac948d",
        "parentId" : null,
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "Why make it a trait and then create an anonymous class to use it as `problemStringFormats`? Wouldn't it be better to make it an object?",
        "createdAt" : "2017-02-08T13:31:53Z",
        "updatedAt" : "2017-02-17T19:28:43Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "c8ea76e9-edb6-4e9b-8cb3-e33e238a70cc",
        "parentId" : "36669984-946c-425e-942a-02910fac948d",
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "Putting typeclass instances into a trait gives most flexibility, because later down the line I can mix and match different formats and make an object a la carte. Although this is slightly different from the Cake pattern, the process is sometimes colloquially called \"baking the cake\".\r\n",
        "createdAt" : "2017-02-08T18:09:10Z",
        "updatedAt" : "2017-02-17T19:28:43Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      }
    ],
    "commit" : "76be6f64182be9b1f0b9b1438ed9eb5675b0e1f9",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +11,15 @@ * used by LoggerReporter and the logging system.\n */\ntrait ProblemStringFormats {\n  implicit lazy val ProblemStringFormat: ShowLines[Problem] = new ShowLines[Problem] {\n    def showLines(p: Problem): Seq[String] ="
  }
]