[
  {
    "id" : "284b4f82-b3cf-4b05-a0ca-21f83ae0de82",
    "prId" : 950,
    "prUrl" : "https://github.com/sbt/zinc/pull/950#pullrequestreview-540407585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a85a904d-3762-4240-b2dc-28ab47ce494f",
        "parentId" : null,
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "Nice catch!",
        "createdAt" : "2020-11-28T17:58:35Z",
        "updatedAt" : "2020-11-28T17:58:35Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b2cb1091fa20cc764a6ec466d5aec369e523de8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +176,180 @@          )\n          if (!noByteCode) {\n            classFile(targetSymbol) match {\n              case Some((at, binaryClassName)) =>\n                // Associated file is set, so we know which classpath entry it came from"
  },
  {
    "id" : "b0968403-c2eb-461c-b2f6-f87120ef374c",
    "prId" : 891,
    "prUrl" : "https://github.com/sbt/zinc/pull/891#pullrequestreview-471575667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cba8c6c7-763c-48de-9b62-097dd3f528da",
        "parentId" : null,
        "authorId" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "body" : "collect over find/map...",
        "createdAt" : "2020-08-20T12:47:07Z",
        "updatedAt" : "2020-08-20T12:47:07Z",
        "lastEditedBy" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "tags" : [
        ]
      },
      {
        "id" : "4813d02f-cc68-4957-9050-609e9444508d",
        "parentId" : "cba8c6c7-763c-48de-9b62-097dd3f528da",
        "authorId" : "01141441-b45c-451d-a16a-5909e590f641",
        "body" : "I think you meant `collectFirst`, however `collectFirst` does not exist for `Tree`",
        "createdAt" : "2020-08-20T12:53:51Z",
        "updatedAt" : "2020-08-20T12:53:51Z",
        "lastEditedBy" : "01141441-b45c-451d-a16a-5909e590f641",
        "tags" : [
        ]
      },
      {
        "id" : "87082298-751e-4b93-a815-a0bd7be13c44",
        "parentId" : "cba8c6c7-763c-48de-9b62-097dd3f528da",
        "authorId" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "body" : "Ah, fair enough (and yeah, collectFirst ðŸ˜³)",
        "createdAt" : "2020-08-20T13:05:48Z",
        "updatedAt" : "2020-08-20T13:05:48Z",
        "lastEditedBy" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "tags" : [
        ]
      }
    ],
    "commit" : "de0a28881d014e2ba1389ed3d10f6d279fcdf325",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +79,83 @@      maybeClassOrModule.map { classOrModule =>\n        val sym = classOrModule.symbol\n        if (sym.isModule) sym.moduleClass else sym\n      }\n    }"
  },
  {
    "id" : "64da967f-af9d-4342-9dd2-c4bc2900ae70",
    "prId" : 828,
    "prUrl" : "https://github.com/sbt/zinc/pull/828#pullrequestreview-449159636",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9d8391f-f704-45c0-a50f-088aeb59b9e5",
        "parentId" : null,
        "authorId" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "body" : "Before this PR, in 2.12 whenever the compiler gives Zinc a `scala.reflect.io.PlainNioFile` Zinc checks if it's a `xsbt.PlainNioFile`, which it will never be, and fails to register it as a dependency.\r\n\r\nThat's what this PR is fixing.",
        "createdAt" : "2020-07-15T17:14:31Z",
        "updatedAt" : "2020-07-15T17:14:32Z",
        "lastEditedBy" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "tags" : [
        ]
      }
    ],
    "commit" : "172d638c28ef46a47d5f2944671103069ef7fa2c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +138,142 @@                binaryDependency(zip.file.toPath, binaryClassName)\n            }\n          case pf: ZincCompat.PlainNioFile =>\n            // The dependency comes from a class file\n            binaryDependency(ZincCompat.unwrapPlainNioFile(pf), binaryClassName)"
  },
  {
    "id" : "08d9a63e-bc1b-4fee-b172-4e385461687c",
    "prId" : 607,
    "prUrl" : "https://github.com/sbt/zinc/pull/607#pullrequestreview-261255460",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a93419e-b200-42f9-bd34-73338494bedf",
        "parentId" : null,
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "There's already an issue for this - https://github.com/sbt/zinc/issues/604",
        "createdAt" : "2018-11-06T18:44:41Z",
        "updatedAt" : "2018-11-06T18:47:18Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "c6403ed8-ae23-4c27-aeb8-329ce32b7f4c",
        "parentId" : "1a93419e-b200-42f9-bd34-73338494bedf",
        "authorId" : "d45168c1-f5ac-4222-9de7-d9a130c14358",
        "body" : "@eed3si9n @jvican We did not apply this patch in our hydra-bridge and we started seeing these errors in Java 11. Perhaps this means that there is a bug in incremental compilation? Uncomment and check compiling Akka on Java 11, you'll see many of these even with Scala 2.12.8. /cc @johanandren ",
        "createdAt" : "2019-07-12T12:42:51Z",
        "updatedAt" : "2019-07-12T12:42:51Z",
        "lastEditedBy" : "d45168c1-f5ac-4222-9de7-d9a130c14358",
        "tags" : [
        ]
      },
      {
        "id" : "803af845-038e-4c61-b3ac-3ff2423eb91d",
        "parentId" : "1a93419e-b200-42f9-bd34-73338494bedf",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "Yeah, those are well known issues, happen with symbols coming from jrt file systems. In Java 11s case, it comes from symbols in the default java library. Not an issue so long as people donâ€™t use JRT file systems in their classpath.",
        "createdAt" : "2019-07-12T12:49:27Z",
        "updatedAt" : "2019-07-12T12:49:27Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "da1aae90-ec49-4cde-b7ae-aa3ff7057e8f",
        "parentId" : "1a93419e-b200-42f9-bd34-73338494bedf",
        "authorId" : "d45168c1-f5ac-4222-9de7-d9a130c14358",
        "body" : "At any rate, the comment is wrong. It is the case on any Scala version, and for other symbols than `<none>`. Not sure if you want to eventually fix it, just pointing out that there *might* be a bug lurking here.",
        "createdAt" : "2019-07-12T13:27:02Z",
        "updatedAt" : "2019-07-12T13:27:03Z",
        "lastEditedBy" : "d45168c1-f5ac-4222-9de7-d9a130c14358",
        "tags" : [
        ]
      }
    ],
    "commit" : "57bcaa00e527ff44a0a5431ea69876cd6d6e74ea",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +128,132 @@          case _ =>\n          // On Scala 2.10 you get Internal error: <none> comes from unknown origin null\n          // if you uncomment the following:\n\n          // reporter.error("
  },
  {
    "id" : "000f574b-3231-4905-8d8e-dbf0f3c9142e",
    "prId" : 591,
    "prUrl" : "https://github.com/sbt/zinc/pull/591#pullrequestreview-151486661",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5a666c1-2fe4-48bc-8374-285835df6503",
        "parentId" : null,
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "Are we covering up for compiler? Should we report this upstream?\r\n",
        "createdAt" : "2018-08-31T15:22:27Z",
        "updatedAt" : "2018-08-31T15:22:27Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "1a3d024e-b3be-44e4-86bc-4abdeef2a7bb",
        "parentId" : "e5a666c1-2fe4-48bc-8374-285835df6503",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "In the general case, we're covering some error, but we don't know which error :smile: We've been lucky and we've found one of these errors by surfacing the bug with default arguments. I've not opened a bug report because it's not clear how to reproduce, but I've given steps to Lukas and pinged him on the bug ticket that this PR fixes so that he can clarify the situation. We'll move from there.\r\n  \r\nThe issue here is that fixing this instance of errors is not trivial and have to be fixed bug per bug because of the way the class file parser works.",
        "createdAt" : "2018-08-31T17:32:53Z",
        "updatedAt" : "2018-08-31T17:32:53Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec0e2b3afe91af378553cb5a6b78c289994dc52c",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +147,151 @@              processExternalDependency(binaryClassName, at)\n            case None =>\n              /* If there is no associated file, it's likely the compiler didn't set it correctly.\n               * This happens very rarely, see https://github.com/sbt/zinc/issues/559 as an example,\n               * but when it does we must ensure the incremental compiler tries its best no to lose"
  },
  {
    "id" : "fdede733-ab2a-44cf-ac2f-e5cb4665eacf",
    "prId" : 450,
    "prUrl" : "https://github.com/sbt/zinc/pull/450#pullrequestreview-74375665",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23142abb-470a-4583-ba60-fcac979f01fd",
        "parentId" : null,
        "authorId" : "c7d4bff9-85e5-49d0-85e4-79743bd27861",
        "body" : "This is the only change that fixes an observable bug. I didn't figure out why the bug in SBT 0.13 fixed by `-Dscala.ext.dirs` was not necessary here.",
        "createdAt" : "2017-11-01T03:42:50Z",
        "updatedAt" : "2017-11-03T23:34:30Z",
        "lastEditedBy" : "c7d4bff9-85e5-49d0-85e4-79743bd27861",
        "tags" : [
        ]
      },
      {
        "id" : "3d80d6fc-a086-43bf-b732-96b20a99597d",
        "parentId" : "23142abb-470a-4583-ba60-fcac979f01fd",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "Can you elaborate why Scalac reports the underlying source to be a directory under JDK9? I'm curious.",
        "createdAt" : "2017-11-01T10:41:20Z",
        "updatedAt" : "2017-11-03T23:34:30Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "8596aa56-20d2-431b-9c24-ff696b6ac6e7",
        "parentId" : "23142abb-470a-4583-ba60-fcac979f01fd",
        "authorId" : "c7d4bff9-85e5-49d0-85e4-79743bd27861",
        "body" : "To integrate the JEP-220 support into Scala 2.10/2.11, I made the `jrt://` virtual file system appear as a `ZipFile`. This was done by subclassing, but the superclass had inadvertently overriden `override val underlyingSource = Some(jarFile)`. I could not override this to return `None` without making a binary compatible change to the method I was overriding (widening to `Option`).\r\n\r\nSo I return `Some($JAVA_HOME)` instead, but that messed up Zinc.\r\n\r\nRocks and hard places, all around. Filtering here in Zinc seemed the least bad option for now, but we might need to revisit it to make Zinc properly invalidate after the JDK is upgraded.",
        "createdAt" : "2017-11-03T23:14:35Z",
        "updatedAt" : "2017-11-03T23:34:30Z",
        "lastEditedBy" : "c7d4bff9-85e5-49d0-85e4-79743bd27861",
        "tags" : [
        ]
      },
      {
        "id" : "1767fc0a-b5ee-4e21-8436-b3b6d578f7dd",
        "parentId" : "23142abb-470a-4583-ba60-fcac979f01fd",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "Great to know this, thanks for the explanation.",
        "createdAt" : "2017-11-06T10:38:56Z",
        "updatedAt" : "2017-11-06T10:38:56Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      }
    ],
    "commit" : "641a4914a29b6384c0e249d88e4c074fe8b9a9f9",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +117,121 @@              jarFile <- Option(zip.file)\n              if !jarFile.isDirectory // workaround for JDK9 and Scala 2.10/2.11, see https://github.com/sbt/sbt/pull/3701\n            } binaryDependency(jarFile, binaryClassName)\n          case pf: PlainFile =>\n            // The dependency comes from a class file"
  },
  {
    "id" : "8c63d549-3265-4e5d-960b-3ee86aded57b",
    "prId" : 272,
    "prUrl" : "https://github.com/sbt/zinc/pull/272#pullrequestreview-27756357",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "568fba75-8862-467e-a9e5-1de7339241f8",
        "parentId" : null,
        "authorId" : "fce79507-a821-4ed3-ae85-b5acf756c201",
        "body" : "Can we get cycles here?\r\n\r\n`inspectedOriginalTrees` was introduced because there were some macros that had themselves as original trees.",
        "createdAt" : "2017-03-19T18:50:03Z",
        "updatedAt" : "2017-03-19T18:50:03Z",
        "lastEditedBy" : "fce79507-a821-4ed3-ae85-b5acf756c201",
        "tags" : [
        ]
      },
      {
        "id" : "a844f2e0-148a-42ec-bbdd-bd2476f3ff21",
        "parentId" : "568fba75-8862-467e-a9e5-1de7339241f8",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "*Theoretically* yes.\r\n  \r\nIn addition to that, it serves us as a caching layer, which was my primary goal when implementing it.",
        "createdAt" : "2017-03-19T19:22:58Z",
        "updatedAt" : "2017-03-19T19:23:14Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      }
    ],
    "commit" : "662e6020e1f9f6e19bac580a99016dc81be1d0cd",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +385,389 @@        if (original != null && !inspectedOriginalTrees.contains(original)) {\n          traverse(original)\n          inspectedOriginalTrees.add(original)\n        }\n        addTypeDependencies(typeTree.tpe)"
  },
  {
    "id" : "c491f10b-8c8e-4003-bde8-0400e4b47d87",
    "prId" : 239,
    "prUrl" : "https://github.com/sbt/zinc/pull/239#pullrequestreview-23957327",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d8067e4-2d3c-46db-a1d2-b86a05819806",
        "parentId" : null,
        "authorId" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "body" : "Any particular reason we lost the assert?",
        "createdAt" : "2017-02-27T08:03:31Z",
        "updatedAt" : "2017-02-27T08:37:16Z",
        "lastEditedBy" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "tags" : [
        ]
      },
      {
        "id" : "fe6b832a-a9dc-4bd5-a89b-f2f814d203e4",
        "parentId" : "6d8067e4-2d3c-46db-a1d2-b86a05819806",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "Asserts affect runtime performance. It's good to have them when developing, but it's not good to have them for such a hot method like this one. IMO, this doesn't bring us anything since the condition is already explicity. Having an assert here can bite us because of the JVM not being able to inline it.",
        "createdAt" : "2017-02-27T09:43:03Z",
        "updatedAt" : "2017-02-27T09:43:03Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "886ac7f6-24de-42a8-9cba-a2c2d520fda6",
        "parentId" : "6d8067e4-2d3c-46db-a1d2-b86a05819806",
        "authorId" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "body" : "Uh yeah. Hadn't realised the assert was just echoing the if condition. The original code was weird..",
        "createdAt" : "2017-02-27T10:49:46Z",
        "updatedAt" : "2017-02-27T10:49:58Z",
        "lastEditedBy" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "tags" : [
        ]
      }
    ],
    "commit" : "6353aeafeb698e28cd760d7192136f0446af22d5",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +161,165 @@      else {\n        val nonLocal = localToNonLocalClass.resolveNonLocal(fromClass)\n        (nonLocal, fromClass != nonLocal)\n      }\n    }"
  },
  {
    "id" : "c63f8b2a-7719-49fe-a1e2-3ad7ba5ae582",
    "prId" : 225,
    "prUrl" : "https://github.com/sbt/zinc/pull/225#pullrequestreview-20889375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9afc49c-3dc3-4f46-9989-304cb68bc5a6",
        "parentId" : null,
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "We only report the orphan error once.",
        "createdAt" : "2017-02-08T22:41:32Z",
        "updatedAt" : "2017-02-17T16:40:46Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd9c3381b9791a40ed16fe68c34d82b01a3f6582",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +81,85 @@     */\n    def processTopLevelImportDependency(dep: Symbol): Unit = {\n      if (!orphanImportsReported) {\n        responsibleOfImports match {\n          case Some(classOrModuleDef) =>"
  },
  {
    "id" : "a3544e62-77fb-4948-b318-4737d907d822",
    "prId" : 225,
    "prUrl" : "https://github.com/sbt/zinc/pull/225#pullrequestreview-21111732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b96db45c-aabb-4472-800d-6594350dcf52",
        "parentId" : null,
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "This error is very unlikely to happen, but if it does it should be more than just `devWarning` or `warning`. That's why it's a todo.",
        "createdAt" : "2017-02-08T22:43:05Z",
        "updatedAt" : "2017-02-17T16:40:46Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "ef297295-7170-48c8-ab9f-32c16fbce839",
        "parentId" : "b96db45c-aabb-4472-800d-6594350dcf52",
        "authorId" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "body" : "Can we at least throw an exception for now?",
        "createdAt" : "2017-02-09T20:33:52Z",
        "updatedAt" : "2017-02-17T16:40:46Z",
        "lastEditedBy" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "tags" : [
        ]
      },
      {
        "id" : "d37bb02d-e5de-457a-9da5-e1318df39d81",
        "parentId" : "b96db45c-aabb-4472-800d-6594350dcf52",
        "authorId" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "body" : "I see that it is not a new logic so we can live without exception or error.",
        "createdAt" : "2017-02-09T20:40:20Z",
        "updatedAt" : "2017-02-17T16:40:46Z",
        "lastEditedBy" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd9c3381b9791a40ed16fe68c34d82b01a3f6582",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +122,126 @@            binaryDependency(pf.file, binaryClassName)\n          case _ =>\n          // TODO: If this happens, scala internals have changed. Log error.\n        }\n      }"
  },
  {
    "id" : "c44aff4b-45d5-470e-8157-df862473ac5d",
    "prId" : 216,
    "prUrl" : "https://github.com/sbt/zinc/pull/216#pullrequestreview-19996755",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0697b970-bc7f-416c-b04a-e21755dc58c7",
        "parentId" : null,
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "We should also guard against `null`, just to be safer since scalac can unexpectedly give us a null from time to time. Perhaps it's a good idea to create a utility called `ignoreSymbol` that will guard against `NoSymbol` and `null` at the same time? It's a very recurrent logic in Zinc.",
        "createdAt" : "2017-02-02T19:57:59Z",
        "updatedAt" : "2017-02-08T09:05:17Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "d2dded1f-1bba-4f02-a740-98709193014a",
        "parentId" : "0697b970-bc7f-416c-b04a-e21755dc58c7",
        "authorId" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "body" : "This is not a new logic - I just noticed that we keep empty name for multiple classes so I just remove it. I never see any nulls here (call sites of `addClassDependency` taking care of it) ",
        "createdAt" : "2017-02-03T11:39:48Z",
        "updatedAt" : "2017-02-08T09:05:17Z",
        "lastEditedBy" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "tags" : [
        ]
      },
      {
        "id" : "f57fbc57-cc4f-40a6-90c3-4eaa6c5c6dad",
        "parentId" : "0697b970-bc7f-416c-b04a-e21755dc58c7",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "Perfect, even better. But I think we should guard against all of this in the whole Zinc. I'll do that in a PR.",
        "createdAt" : "2017-02-03T11:51:33Z",
        "updatedAt" : "2017-02-08T09:05:17Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b4e5b2fe1451be25f50d419f338cf3bb07e991a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +161,165 @@      }\n    }\n    private def addClassDependency(deps: HashSet[ClassDependency], fromClass: Symbol, dep: Symbol): Unit = if (dep != NoSymbol) {\n      assert(fromClass.isClass, Feedback.expectedClassSymbol(fromClass))\n      val depClass = enclOrModuleClass(dep)"
  },
  {
    "id" : "d5a840ff-b91b-465e-8225-8ccde29a9615",
    "prId" : 216,
    "prUrl" : "https://github.com/sbt/zinc/pull/216#pullrequestreview-22666770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79c993b8-ab9b-4667-aebd-552c6b26b53c",
        "parentId" : null,
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "@romanowski Why are you doing this? This looks wrong.",
        "createdAt" : "2017-02-16T12:11:59Z",
        "updatedAt" : "2017-02-16T12:12:04Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "7df6c42e-5d19-4f94-b862-2911bddeafff",
        "parentId" : "79c993b8-ab9b-4667-aebd-552c6b26b53c",
        "authorId" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "body" : "@jvican Refinement classes do not have byte code representation and it fails later on (we still depends on parents of refinement)",
        "createdAt" : "2017-02-16T12:45:56Z",
        "updatedAt" : "2017-02-16T12:45:56Z",
        "lastEditedBy" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "tags" : [
        ]
      },
      {
        "id" : "e9a5e8c0-945c-4bba-8644-74e9447aa44f",
        "parentId" : "79c993b8-ab9b-4667-aebd-552c6b26b53c",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "Right, in that case this is correct. I double checked with SLS.",
        "createdAt" : "2017-02-19T19:10:47Z",
        "updatedAt" : "2017-02-19T19:10:47Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b4e5b2fe1451be25f50d419f338cf3bb07e991a",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +164,168 @@      assert(fromClass.isClass, Feedback.expectedClassSymbol(fromClass))\n      val depClass = enclOrModuleClass(dep)\n      if (fromClass.associatedFile != depClass.associatedFile && !depClass.isRefinementClass) {\n        deps += ClassDependency(fromClass, depClass)\n        ()"
  }
]