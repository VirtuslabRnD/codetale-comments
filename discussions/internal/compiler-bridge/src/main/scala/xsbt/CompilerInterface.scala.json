[
  {
    "id" : "f240b5ae-4ae9-41c2-8b1f-75881837926d",
    "prId" : 829,
    "prUrl" : "https://github.com/sbt/zinc/pull/829#pullrequestreview-447864547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed2b8ed7-2b66-4636-9aab-266d6490dbc3",
        "parentId" : null,
        "authorId" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "body" : "Compared to the other parts of the diff, this seems backwards.  Why does CompilerInterface(1) extends CompilerInterface2?",
        "createdAt" : "2020-07-11T05:20:45Z",
        "updatedAt" : "2020-07-14T15:30:46Z",
        "lastEditedBy" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "tags" : [
        ]
      },
      {
        "id" : "7a20125c-a1d7-4b00-99e5-2a3312acc470",
        "parentId" : "ed2b8ed7-2b66-4636-9aab-266d6490dbc3",
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "`xsbt.CompilerInterface` is a hard-coded class name all bridges use as entry point.\r\n`xsbti.CompilerInterface2` is the new Java interface.",
        "createdAt" : "2020-07-11T15:13:36Z",
        "updatedAt" : "2020-07-14T15:30:46Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "06431c7a-c829-4e16-93cf-380fa04b05d7",
        "parentId" : "ed2b8ed7-2b66-4636-9aab-266d6490dbc3",
        "authorId" : "6f938ccf-9240-4d03-badc-3b4107983b16",
        "body" : "> xsbt.CompilerInterface is a hard-coded class name all bridges use as entry point\r\n\r\nNow that we're coding against interfaces, we could replace the use of hardcoded class names by a file in META-INF listing the entry points of the bridge (cf https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html), maybe something worth considering for a follow-up PR?",
        "createdAt" : "2020-07-12T19:40:25Z",
        "updatedAt" : "2020-07-14T15:30:46Z",
        "lastEditedBy" : "6f938ccf-9240-4d03-badc-3b4107983b16",
        "tags" : [
        ]
      },
      {
        "id" : "279de324-0d2b-4492-9d18-c0cb95ae6185",
        "parentId" : "ed2b8ed7-2b66-4636-9aab-266d6490dbc3",
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "> Now that we're coding against interfaces, we could replace the use of hardcoded class names by a file in META-INF listing the entry points of the bridge\r\n\r\nThanks for the pointer. That sounds like a good idea indeed.",
        "createdAt" : "2020-07-12T19:46:22Z",
        "updatedAt" : "2020-07-14T15:30:46Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "fb7e01e8-bfec-421e-b029-01d68047e46f",
        "parentId" : "ed2b8ed7-2b66-4636-9aab-266d6490dbc3",
        "authorId" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "body" : "Ah, I see.  `CompilerInterface` was/is the source-based interface to the compiler, but it's actually implemented as a class (not an `interface`).\r\n\r\nThe new interface being defined are java `interface`s, with `CompilerInterface1` and `CompilerInterface2`, and the implementation here now implements `CompilerInterface2`.\r\n\r\nSeeing as we're not dropping support for the older interface (the older methods, that were defined directly in this class), now captured by `CompilerInterface1`, I think it would be clearer for this to extend `CompilerInterface1` too.",
        "createdAt" : "2020-07-13T11:02:54Z",
        "updatedAt" : "2020-07-14T15:30:46Z",
        "lastEditedBy" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "tags" : [
        ]
      },
      {
        "id" : "dcddbcf9-5120-4065-90bb-c6363f354206",
        "parentId" : "ed2b8ed7-2b66-4636-9aab-266d6490dbc3",
        "authorId" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "body" : "> Seeing as we're not dropping support for the older interface (the older methods, that were defined directly in this class), now captured by `CompilerInterface1`, I think it would be clearer for this to extend `CompilerInterface1` too.\r\n\r\nScratch that.  We don't drop support for _consuming_ the old interface (CompilerInterface1) which will continue to be supplied by current sbt-dotty (until they switch).  But the Scala 2 bridges by Zinc 1.4+ will be implementing the new, CompilerInterface2, methods.",
        "createdAt" : "2020-07-14T07:42:11Z",
        "updatedAt" : "2020-07-14T15:30:46Z",
        "lastEditedBy" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "tags" : [
        ]
      }
    ],
    "commit" : "2efb66f077c8c0965cac83fe8583647b175c9012",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +23,27 @@ * This is the entry point for the compiler bridge (implementation of CompilerInterface)\n */\nfinal class CompilerInterface extends CompilerInterface2 {\n  override def newCompiler(\n      options: Array[String],"
  }
]