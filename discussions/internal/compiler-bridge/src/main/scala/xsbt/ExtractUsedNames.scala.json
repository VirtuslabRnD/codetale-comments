[
  {
    "id" : "f9b87736-6d68-40f1-8982-1d9dab1f4bad",
    "prId" : 267,
    "prUrl" : "https://github.com/sbt/zinc/pull/267#pullrequestreview-27326984",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb860144-d2fe-4272-87be-63dc835f6096",
        "parentId" : null,
        "authorId" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "body" : "This emits warning. That is why I added ```()``` in the end.",
        "createdAt" : "2017-03-16T11:29:24Z",
        "updatedAt" : "2017-03-28T20:33:25Z",
        "lastEditedBy" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "tags" : [
        ]
      },
      {
        "id" : "2fdc5246-b645-4407-9596-1a585e2c8a85",
        "parentId" : "bb860144-d2fe-4272-87be-63dc835f6096",
        "authorId" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "body" : "BTW this is quite strange to do a review in your own PR :)",
        "createdAt" : "2017-03-16T11:35:46Z",
        "updatedAt" : "2017-03-28T20:33:25Z",
        "lastEditedBy" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "tags" : [
        ]
      },
      {
        "id" : "6b272a89-76f2-48fb-a6ad-1b4ca57e015d",
        "parentId" : "bb860144-d2fe-4272-87be-63dc835f6096",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "Yeah, I've realised that.",
        "createdAt" : "2017-03-16T11:36:45Z",
        "updatedAt" : "2017-03-28T20:33:25Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "3e24ff93-c5ed-46ad-9021-5fe045169344",
        "parentId" : "bb860144-d2fe-4272-87be-63dc835f6096",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "Oh, this is by no means my PR, it's yours @romanowski.",
        "createdAt" : "2017-03-16T11:39:50Z",
        "updatedAt" : "2017-03-28T20:33:25Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "d886e80a-1a5b-49ea-ba49-d6a85bd86a52",
        "parentId" : "bb860144-d2fe-4272-87be-63dc835f6096",
        "authorId" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "body" : "Don't worry, I don't care about that much :)",
        "createdAt" : "2017-03-16T12:40:00Z",
        "updatedAt" : "2017-03-28T20:33:25Z",
        "lastEditedBy" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "tags" : [
        ]
      },
      {
        "id" : "d6c3626e-1f02-4609-9c13-e1c551bb2cb3",
        "parentId" : "bb860144-d2fe-4272-87be-63dc835f6096",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "I prefer to push changes and then discuss them, than discussing them and forcing you to spend time on it. It's just more efficient :wink:.",
        "createdAt" : "2017-03-16T12:48:58Z",
        "updatedAt" : "2017-03-28T20:33:25Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ce4dc330d0813509d7a58a7da34d57c0f4bdd0b",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +107,111 @@            if (existingScopes == null)\n              scopedNamesInFirstClass.put(topLevelName, topLevelScopes)\n            else existingScopes.addAll(topLevelScopes)\n            ()\n          }"
  },
  {
    "id" : "cb8356f2-a239-43f6-b36c-a15f88ea81fb",
    "prId" : 267,
    "prUrl" : "https://github.com/sbt/zinc/pull/267#pullrequestreview-27762644",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9728e147-6bd8-493e-b815-173585552a72",
        "parentId" : null,
        "authorId" : "c7d4bff9-85e5-49d0-85e4-79743bd27861",
        "body" : "Looking at the types of synthetic case vals seems like a fairly robust way to find usages of sealed-ness. As you mentioned, this doesn't cover hidden dependencies from macros (e.g.. shapeless `Generic`). As long as we provide configuration to let people enable/disable this optimization, that's okay in my view.",
        "createdAt" : "2017-03-19T23:37:00Z",
        "updatedAt" : "2017-03-28T20:33:25Z",
        "lastEditedBy" : "c7d4bff9-85e5-49d0-85e4-79743bd27861",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ce4dc330d0813509d7a58a7da34d57c0f4bdd0b",
    "line" : 203,
    "diffHunk" : "@@ -1,1 +252,256 @@      case ValDef(mods, _, tpt, _) if mods.isCase && mods.isSynthetic =>\n        updateCurrentOwner()\n        PatMatDependencyTraverser.traverse(tpt.tpe)\n      case _: DefTree | _: Template => ()\n      case Import(_, selectors: List[ImportSelector]) =>"
  },
  {
    "id" : "f567bd38-dd08-4bb9-a997-fa2cb6ec1822",
    "prId" : 258,
    "prUrl" : "https://github.com/sbt/zinc/pull/258#pullrequestreview-25452877",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d877557-c766-47a3-bf88-21cecbaa60a9",
        "parentId" : null,
        "authorId" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "body" : "Just out of my own curiosity, could you explain this change?",
        "createdAt" : "2017-03-06T10:11:51Z",
        "updatedAt" : "2017-03-07T08:31:49Z",
        "lastEditedBy" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "tags" : [
        ]
      },
      {
        "id" : "d307430d-816d-4939-8653-8619de9d5857",
        "parentId" : "3d877557-c766-47a3-bf88-21cecbaa60a9",
        "authorId" : "7ef72145-4aa0-4da6-a85e-f58ddc4f99db",
        "body" : "There is a warning `discarded non-Unit value` I followed the suggestion from here: http://stackoverflow.com/questions/13415307/suppress-discarded-non-unit-value-warning (also saw this pattern in few other places in code)",
        "createdAt" : "2017-03-06T10:23:34Z",
        "updatedAt" : "2017-03-07T08:31:49Z",
        "lastEditedBy" : "7ef72145-4aa0-4da6-a85e-f58ddc4f99db",
        "tags" : [
        ]
      },
      {
        "id" : "122052d8-e63a-4cdd-a346-9c3da1ca5595",
        "parentId" : "3d877557-c766-47a3-bf88-21cecbaa60a9",
        "authorId" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "body" : "Oh discarded _inside_ the if block, of course. Thanks.",
        "createdAt" : "2017-03-06T10:33:00Z",
        "updatedAt" : "2017-03-07T08:31:49Z",
        "lastEditedBy" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "tags" : [
        ]
      },
      {
        "id" : "fbc02a17-eaa2-4b27-954f-68be7b1c83f6",
        "parentId" : "3d877557-c766-47a3-bf88-21cecbaa60a9",
        "authorId" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "body" : "TBH in most PRs where `()` is added sombody is asking about it.\r\n\r\n@eed3si9n @jvican @dwijnand Maybe we should remove that compiler setting? ",
        "createdAt" : "2017-03-06T18:19:21Z",
        "updatedAt" : "2017-03-07T08:31:49Z",
        "lastEditedBy" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "tags" : [
        ]
      },
      {
        "id" : "52f13c20-f353-4943-8347-e9dd28c19a48",
        "parentId" : "3d877557-c766-47a3-bf88-21cecbaa60a9",
        "authorId" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "body" : "No, value discarding is a real source of error, particularly with side-effecting (such as mutating) code.\r\n\r\nOne way to deal though with this is to explicitly discard the unused value. Either as a method or as an extension method (e.g .toUnit), and then the method could document its reason for existence.\r\n\r\nThe real solution is to change the compiler so -Ywarn-value-discard doesn't warn about this.type. Then you'll fix it for all codebases :-)",
        "createdAt" : "2017-03-06T20:21:03Z",
        "updatedAt" : "2017-03-07T08:31:49Z",
        "lastEditedBy" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "tags" : [
        ]
      },
      {
        "id" : "20603961-04dd-445a-83d9-516b30859b31",
        "parentId" : "3d877557-c766-47a3-bf88-21cecbaa60a9",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "I vote in favor of removing that warning. IMO it's unnecessary. I generally think that this codebases abuses warnings. The same goes for unused imports.\r\n  \r\nI don't see why this is a real source of error. I have never experienced it.",
        "createdAt" : "2017-03-06T20:32:34Z",
        "updatedAt" : "2017-03-07T08:31:49Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "e965f2d7-3c45-4d29-ad7b-508b655e78b9",
        "parentId" : "3d877557-c766-47a3-bf88-21cecbaa60a9",
        "authorId" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "body" : "I disagree with unused imports since later on we are left with tons on unused imports. However we don't need to apply it to all compilations - IMO we can apply it only for CIs builds (since hacking with fatal unused imports is not pleasant).",
        "createdAt" : "2017-03-06T20:58:59Z",
        "updatedAt" : "2017-03-07T08:31:49Z",
        "lastEditedBy" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "tags" : [
        ]
      },
      {
        "id" : "84a82efb-25d4-4e9c-b856-42781e2710ca",
        "parentId" : "3d877557-c766-47a3-bf88-21cecbaa60a9",
        "authorId" : "7ef72145-4aa0-4da6-a85e-f58ddc4f99db",
        "body" : "I think the compiler warnings do help with keeping the code more maintainable (assuming you change code to prevent warnings), so IMO both warnings could be left in as they are, maybe `-Ywarn-value-discard` is a little to verbose but that's not a big deal.",
        "createdAt" : "2017-03-07T08:25:06Z",
        "updatedAt" : "2017-03-07T08:31:49Z",
        "lastEditedBy" : "7ef72145-4aa0-4da6-a85e-f58ddc4f99db",
        "tags" : [
        ]
      }
    ],
    "commit" : "63695f450656f3d31067be954901cbe695a2706d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +163,167 @@          if (!isEmptyName(name) && (name != nme.WILDCARD) && !names.contains(name)) {\n            names += name\n            ()\n          }\n        }"
  }
]