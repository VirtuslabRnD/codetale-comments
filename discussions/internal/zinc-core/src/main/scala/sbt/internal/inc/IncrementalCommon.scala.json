[
  {
    "id" : "efddabb5-b1cf-4255-bd1b-f3e82d34a67a",
    "prId" : 898,
    "prUrl" : "https://github.com/sbt/zinc/pull/898#pullrequestreview-487895675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13618f0a-464c-4641-8d83-1c76ca3d6b8f",
        "parentId" : null,
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "Maybe the bug is here?\r\nIn the old code, it's checking for the diff, but returns `firstClassInvalidation ++ secondClassInvalidation`",
        "createdAt" : "2020-09-14T12:55:15Z",
        "updatedAt" : "2020-09-14T12:55:15Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "cc963672-3aa5-49d8-99e4-5068bf4ad41d",
        "parentId" : "13618f0a-464c-4641-8d83-1c76ca3d6b8f",
        "authorId" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "body" : "Maybe.  Why does this have two different equations?",
        "createdAt" : "2020-09-14T13:15:51Z",
        "updatedAt" : "2020-09-14T13:15:51Z",
        "lastEditedBy" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "tags" : [
        ]
      },
      {
        "id" : "eedc9f5d-4c1c-40ac-92af-cb6bc95e1a11",
        "parentId" : "13618f0a-464c-4641-8d83-1c76ca3d6b8f",
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "It's checking if there's anything new that are being invalidated, but it returns both new and old invalidation together.",
        "createdAt" : "2020-09-14T14:20:24Z",
        "updatedAt" : "2020-09-14T14:20:25Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "dfcab7bd-29f9-4989-92c4-50e3095d9910",
        "parentId" : "13618f0a-464c-4641-8d83-1c76ca3d6b8f",
        "authorId" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "body" : "But the regression proves that the \"old\" invalidations aren't ignorable, no?  Therefore I think they shouldn't be ignored in that diff/if (i.e. do the opposite alignment that I went for)",
        "createdAt" : "2020-09-14T14:42:17Z",
        "updatedAt" : "2020-09-14T14:42:17Z",
        "lastEditedBy" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "tags" : [
        ]
      },
      {
        "id" : "c4a98960-61a2-4dc1-8b1e-2a2e25e2fe76",
        "parentId" : "13618f0a-464c-4641-8d83-1c76ca3d6b8f",
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "I think the regression indicates that you can ignore old when there's no new invalidation, but both old and new invalidations must be compiled together to avoid circular situation in some cases.",
        "createdAt" : "2020-09-14T14:58:11Z",
        "updatedAt" : "2020-09-14T14:58:11Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "e92f8c2b-4a35-4bb3-baea-f175845f96f7",
        "parentId" : "13618f0a-464c-4641-8d83-1c76ca3d6b8f",
        "authorId" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "body" : "How does it indicate the former?",
        "createdAt" : "2020-09-14T15:09:57Z",
        "updatedAt" : "2020-09-14T15:09:57Z",
        "lastEditedBy" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "tags" : [
        ]
      },
      {
        "id" : "df17e7c4-e4f8-4893-99b2-163d419078f1",
        "parentId" : "13618f0a-464c-4641-8d83-1c76ca3d6b8f",
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "The old-and-working code says:\r\n\r\n```scala\r\n    val newInvalidations = (firstClassInvalidation -- recompiledClasses) ++ secondClassInvalidation\r\n    if (newInvalidations.isEmpty) {\r\n      log.debug(\"No classes were invalidated.\")\r\n      Set.empty\r\n```",
        "createdAt" : "2020-09-14T15:27:04Z",
        "updatedAt" : "2020-09-14T15:27:04Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "3192a03b-cb08-4abc-b46d-696d35e2635e",
        "parentId" : "13618f0a-464c-4641-8d83-1c76ca3d6b8f",
        "authorId" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "body" : "OK, I don't think the regression indicates that you can ignore the old invalidations.\r\n\r\nThe question is will `firstClassInvalidation ++ secondClassInvalidation` ever be non-empty due to `recompiledClasses` alone?  That would suggests recompiledClasses invalidates itself, which sounds like an invariant that isn't going to happen.  So we can just drop the whole `-- recompiledClasses` business and align like that.",
        "createdAt" : "2020-09-14T15:31:24Z",
        "updatedAt" : "2020-09-14T15:31:24Z",
        "lastEditedBy" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "tags" : [
        ]
      }
    ],
    "commit" : "96a5e6f0fb61d7b35cf7cc964a8081d40ee88b70",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +495,499 @@    } else {\n      log.debug(s\"Invalidated classes: ${allInvalidations.mkString(\", \")}\")\n      allInvalidations\n    }\n  }"
  },
  {
    "id" : "476fd5f5-d2ef-4253-91b4-10c42f7614af",
    "prId" : 845,
    "prUrl" : "https://github.com/sbt/zinc/pull/845#pullrequestreview-451151696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cef40656-fe37-4b17-bcec-589d5f3b3b79",
        "parentId" : null,
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "👍 ",
        "createdAt" : "2020-07-19T18:06:37Z",
        "updatedAt" : "2020-07-19T18:53:21Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1492e6f2a7529a41d98359277c8213fd3168fc1",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +386,390 @@        val changed0 = new java.util.HashSet[VirtualFileRef]\n        val removed0 = new java.util.HashSet[VirtualFileRef]\n        val unmodified0 = new java.util.HashSet[VirtualFileRef]\n        new ParVector(sources.toVector).foreach {\n          case f: VirtualFileRef if previousSources.contains(f) =>"
  },
  {
    "id" : "790d6786-9646-498e-b607-3114f9bc40f6",
    "prId" : 585,
    "prUrl" : "https://github.com/sbt/zinc/pull/585#pullrequestreview-150956524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0548ceeb-d434-45a9-89c3-39146a4012be",
        "parentId" : null,
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "Documentation, reorganization, and some changes are intermixed in this commit, so it's difficult for me to preview, but have you made any intentional change in the observable behavior, either in the difference in output or in performance characteristics? For example, I noticed that the method named `recompileClasses` are no longer recompiling classes, but it's recompiling sources.",
        "createdAt" : "2018-08-27T14:20:01Z",
        "updatedAt" : "2018-08-27T14:20:01Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "3e6f695a-2547-4279-afcd-60a7f4484df9",
        "parentId" : "0548ceeb-d434-45a9-89c3-39146a4012be",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "There’s no change in semantics, I double checked this several times manually and the tests confirm it.",
        "createdAt" : "2018-08-27T15:42:39Z",
        "updatedAt" : "2018-08-27T15:42:39Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "47e1dd1a-f779-47f2-851f-58ea32e07e9c",
        "parentId" : "0548ceeb-d434-45a9-89c3-39146a4012be",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "Wrt the change you mention @eed3si9n, the reason why you see that we recompile sources instead of classes in a clearer way is because `recompileClasses` was doing the mapping between invalidated classes and sources to recompile, and I pulled that logic out of it to keep things clear.",
        "createdAt" : "2018-08-30T11:52:29Z",
        "updatedAt" : "2018-08-30T11:52:29Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      }
    ],
    "commit" : "11092ad4ce518da8e5dd37e3769c47bb4cafaade",
    "line" : 261,
    "diffHunk" : "@@ -1,1 +158,162 @@  }\n\n  def recompileClasses(\n      sources: Set[File],\n      binaryChanges: DependencyChanges,"
  },
  {
    "id" : "64a108f4-e5b7-47e7-8df9-ba830d1d3ff8",
    "prId" : 180,
    "prUrl" : "https://github.com/sbt/zinc/pull/180#pullrequestreview-2768275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9a1ff93-5cb3-41b1-998f-f7fd01c45c17",
        "parentId" : null,
        "authorId" : "4167f1ed-f741-4b02-8ee7-480849a794e7",
        "body" : "The `libraryClassName` duplicates the buggy `Stamps.className`. Should `Stamps.className` be removed or fixed?\n",
        "createdAt" : "2016-09-28T08:28:43Z",
        "updatedAt" : "2016-10-21T19:52:19Z",
        "lastEditedBy" : "4167f1ed-f741-4b02-8ee7-480849a794e7",
        "tags" : [
        ]
      },
      {
        "id" : "b603b279-a1fd-42d8-8c8d-fc12dee00c76",
        "parentId" : "d9a1ff93-5cb3-41b1-998f-f7fd01c45c17",
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "I can try removing it.\n",
        "createdAt" : "2016-10-04T17:56:53Z",
        "updatedAt" : "2016-10-21T19:52:19Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e5775a3913c0d1517a963679ee184d68af1595f",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +365,369 @@        def dependencyModified(file: File): Boolean =\n          {\n            val classNames = previousRelations.libraryClassNames(file)\n            classNames exists { binaryClassName =>\n              // classpath has not changed since the last compilation, so use the faster detection."
  }
]