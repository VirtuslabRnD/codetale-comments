[
  {
    "id" : "d393fa98-767c-46c8-bf75-48f465226d37",
    "prId" : 764,
    "prUrl" : "https://github.com/sbt/zinc/pull/764#pullrequestreview-401504447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc43aa1f-0601-4b2e-a5c2-6507ec9f0981",
        "parentId" : null,
        "authorId" : "c7d4bff9-85e5-49d0-85e4-79743bd27861",
        "body" : "https://github.com/scala/scala/pull/8726 is the 2.12.x backport of efficient `immutable.HashMap$Builder` (thanks, @mkeskells!). With that, or with 2.13, this step is step is quite efficient.\r\n\r\nI considered an alternative of just doing an `unsafeToImmutableMap` wrapper, but that is a somewhat more fragile if the users of the built `Relation` start to call map operations on it. \r\n\r\nIt would be great if we had a richer `immutable.HashMap.Builder` that supported key `getOrElseUpdate` on the map being built, as well as a find `transformValues` step. Then, we could build up the desired structure from the begining and do a second pass that just mutates the data in the leaves.",
        "createdAt" : "2020-04-28T05:19:57Z",
        "updatedAt" : "2021-03-28T21:46:17Z",
        "lastEditedBy" : "c7d4bff9-85e5-49d0-85e4-79743bd27861",
        "tags" : [
        ]
      }
    ],
    "commit" : "0500da68deb65e0fc40d94eb2dcdf28463fac119",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@        map: java.util.HashMap[K, (K, mutable.Builder[V, immutable.HashSet[V]])]\n    ): immutable.HashMap[K, immutable.HashSet[V]] = {\n      val builder = immutable.HashMap.newBuilder[K, immutable.HashSet[V]]\n      map.entrySet().forEach(e => builder.+=((e.getKey, e.getValue._2.result())))\n      builder.result()"
  }
]