[
  {
    "id" : "4cf22334-e6ec-4630-aa4e-66b5a6fd6ac9",
    "prId" : 873,
    "prUrl" : "https://github.com/sbt/zinc/pull/873#pullrequestreview-464522430",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3e735f8-4547-49a4-9c53-3006620c3257",
        "parentId" : null,
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "This change itself looks fine, but I'm increasingly starting to think that using NIO `Files` directly is an anti-pattern / source of subtle bugs.",
        "createdAt" : "2020-08-10T17:30:14Z",
        "updatedAt" : "2020-08-10T17:30:14Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "c3c560a4-59a3-466a-99bb-8ea589868be4",
        "parentId" : "e3e735f8-4547-49a4-9c53-3006620c3257",
        "authorId" : "1d2c7854-b82c-488f-8e05-b2b3ffce6fcd",
        "body" : "Is this really subtle though? It throws a noisy exception that is easy to fix. A number of the apis in sbt.io.IO are much more subtle. For example, IO.delete doesn't report if it failed. I actually like that nio forces you to be specific about your assumptions.",
        "createdAt" : "2020-08-10T17:34:44Z",
        "updatedAt" : "2020-08-10T17:34:44Z",
        "lastEditedBy" : "1d2c7854-b82c-488f-8e05-b2b3ffce6fcd",
        "tags" : [
        ]
      },
      {
        "id" : "709f3cc8-d994-4a40-a84e-bbb196fd6d5a",
        "parentId" : "e3e735f8-4547-49a4-9c53-3006620c3257",
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "For things like moving files, deleting files/directories, and creating them, most usage around compiler or build in general I'm used to the way `sbt.io.IO` just do the thing for the most part forcefully whereas NIO `Files` seems to be much more strict about some sort of precondition, which we may or may not be able to meet in parallel situation.",
        "createdAt" : "2020-08-10T18:52:57Z",
        "updatedAt" : "2020-08-10T18:52:57Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "929dbe2c-af60-464e-8c2c-c0536cce5916",
        "parentId" : "e3e735f8-4547-49a4-9c53-3006620c3257",
        "authorId" : "1d2c7854-b82c-488f-8e05-b2b3ffce6fcd",
        "body" : "I hear you. It's not exactly that I am in favor of nio so much as I have been burned by `IO`. Since ultimately `IO` delegates to java.io or java.nio.file, I just prefer directly working with those apis. Also because I am experienced with nio, I can tell at a glance what the performance characteristics are. That isn't true with `IO`. You're right that `IO` is generally easier to get to do the \"right thing\" from the sbt perspective. It's just that often the implementation isn't optimal or it isn't obvious what the semantics are without reading the source code. If I were starting from scratch, I would probably not put either `java.io.File` or `java.nio.file.Path` anywhere in the public api and then it would be easier to define an io dsl with good performance and default semantics that match the sbt use case.",
        "createdAt" : "2020-08-10T19:37:10Z",
        "updatedAt" : "2020-08-10T19:37:10Z",
        "lastEditedBy" : "1d2c7854-b82c-488f-8e05-b2b3ffce6fcd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8d5a2faccdfb018b58a20e8dc1dae925a173ea4",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +228,232 @@              Files.createDirectories(origPath.getParent)\n            } // if\n            Files.move(tmp, origPath, StandardCopyOption.REPLACE_EXISTING)\n          } // if\n        }"
  }
]