[
  {
    "id" : "c3514fe2-01a9-48b5-8b8c-43db5cb78e72",
    "prId" : 712,
    "prUrl" : "https://github.com/sbt/zinc/pull/712#pullrequestreview-404654255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd9ad218-d1b1-4e3e-b96d-870662b34e79",
        "parentId" : null,
        "authorId" : "6f938ccf-9240-4d03-badc-3b4107983b16",
        "body" : "What is this special case for? It's missing documentation",
        "createdAt" : "2020-05-03T11:38:12Z",
        "updatedAt" : "2020-05-03T11:38:13Z",
        "lastEditedBy" : "6f938ccf-9240-4d03-badc-3b4107983b16",
        "tags" : [
        ]
      },
      {
        "id" : "f4dbf450-61cc-464e-a942-2dd06cccf808",
        "parentId" : "bd9ad218-d1b1-4e3e-b96d-870662b34e79",
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "On macOS `/tmp/` and `/var/` seems to be symlinks to `/private/tmp/` and `/private/var/` respectively.\r\n\r\n```\r\nlrwxr-xr-x@   1 root  wheel    20xx tmp@ -> private/tmp\r\nlrwxr-xr-x@   1 root  wheel    20xx var@ -> private/var\r\n```\r\n\r\nWhen temporary directories are created under `/var/folders/` Zinc and compilers sometimes end up reporting different paths for `*.scala`, `*.java`, `*.class` etc. Maybe there's a better solution than this, but the above is a workaround for that.",
        "createdAt" : "2020-05-03T19:53:45Z",
        "updatedAt" : "2020-05-03T19:53:45Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "d699f62d-9dd3-41b4-9680-3eaf952c767e",
        "parentId" : "bd9ad218-d1b1-4e3e-b96d-870662b34e79",
        "authorId" : "6f938ccf-9240-4d03-badc-3b4107983b16",
        "body" : "I suggest using `getCanonicalPath`.",
        "createdAt" : "2020-05-03T20:01:09Z",
        "updatedAt" : "2020-05-03T20:01:10Z",
        "lastEditedBy" : "6f938ccf-9240-4d03-badc-3b4107983b16",
        "tags" : [
        ]
      },
      {
        "id" : "9ced3058-e15b-4edf-80c4-64127e19f838",
        "parentId" : "bd9ad218-d1b1-4e3e-b96d-870662b34e79",
        "authorId" : "6f938ccf-9240-4d03-badc-3b4107983b16",
        "body" : "(or `Path#toRealPath` which seems to be the equivalent for Path, though this one will throw an exception if the file doesn't actually exist on disk)",
        "createdAt" : "2020-05-03T20:12:20Z",
        "updatedAt" : "2020-05-03T20:12:29Z",
        "lastEditedBy" : "6f938ccf-9240-4d03-badc-3b4107983b16",
        "tags" : [
        ]
      },
      {
        "id" : "289927ba-481e-4df3-9fef-34d4c21d679d",
        "parentId" : "bd9ad218-d1b1-4e3e-b96d-870662b34e79",
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "Yea. I have to figure out the right point to dealias symlinks so that a build can be created under `/tmp/` (or compiler bridge can be compiled in temp etc) and things continue to work.",
        "createdAt" : "2020-05-03T20:25:32Z",
        "updatedAt" : "2020-05-03T20:25:33Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d86bc5a05d01fb7001ea57b559e750dceecc129b",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +51,55 @@          idx -> u,\n          idx -> u.replaceAllLiterally(\"file:///var/folders/\", \"file:///private/var/folders/\")\n        )\n      else Seq(idx -> u)\n  }"
  }
]