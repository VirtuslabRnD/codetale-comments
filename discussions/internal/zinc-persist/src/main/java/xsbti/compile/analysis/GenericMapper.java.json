[
  {
    "id" : "c32b42c1-9c2f-40be-a4bd-3d77a69a88d7",
    "prId" : 351,
    "prUrl" : "https://github.com/sbt/zinc/pull/351#pullrequestreview-49766029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d0ec0aa-88d4-45ea-bdfd-d9cc4ddb12d1",
        "parentId" : null,
        "authorId" : "2a3da246-6cd1-4d1a-9275-3d8b1b019473",
        "body" : "As previously mentioned, ReadMapper and WriteMapper being separate interfaces extending GenericMapper feels redundant. At some point it's necessary to actually construct one of these, and given that they will always be perfect inverses, it's not clear that their implementations would be so obviously different that this would catch bugs.\r\n\r\nWhile updating to this branch, I ended up doing: https://github.com/pantsbuild/pants/compare/master...twitter:stuhood/zinc-upgrade-2017-06-update-to-X19#diff-3c0fb6f9440b619e7d350cfa7c3b6228R62 ... ie, implementing a GenericMapper and then creating two subclasses... which just feels like boilerplate. Not a huge deal though.",
        "createdAt" : "2017-07-12T00:34:22Z",
        "updatedAt" : "2017-07-14T08:44:06Z",
        "lastEditedBy" : "2a3da246-6cd1-4d1a-9275-3d8b1b019473",
        "tags" : [
        ]
      },
      {
        "id" : "963b8afd-e1cd-43cd-8c6a-e5dd4682a9ef",
        "parentId" : "5d0ec0aa-88d4-45ea-bdfd-d9cc4ddb12d1",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "I think that having this distinction at the type level is important to avoid \"mistakes\" by the users. A good example of implementations that differ is `RelativeReadMapper` and `RelativeWriteMapper`.\r\n  \r\nHave you tried defining your portable analysis mappers like this?\r\n```scala\r\nclass PortableMapper(mapper: File => File) extends ReadMapper with WriteMapper {\r\n  def mapSourceFile(x: File): File = mapper(x)\r\n  def mapBinaryFile(x: File): File = mapper(x)\r\n  def mapProductFile(x: File): File = mapper(x)\r\n  def mapOutputDir(x: File): File = mapper(x)\r\n  def mapSourceDir(x: File): File = mapper(x)\r\n  def mapClasspathEntry(x: File): File = mapper(x)\r\n\r\n  // TODO: Determine whether the rest of these need to be overridden in practice.\r\n  def mapJavacOption(x: String): String = x\r\n  def mapScalacOption(x: String): String = x\r\n  def mapBinaryStamp(f: File, x: Stamp): Stamp = x\r\n  def mapSourceStamp(f: File, x: Stamp): Stamp = x\r\n  def mapProductStamp(f: File, x: Stamp): Stamp = x\r\n  def mapMiniSetup(x: MiniSetup): MiniSetup = x\r\n}\r\n```\r\n  \r\nI think this way is much nicer. WDYT?",
        "createdAt" : "2017-07-13T12:50:17Z",
        "updatedAt" : "2017-07-14T08:44:06Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      }
    ],
    "commit" : "690b7a4336756812e8ed53470ee660c64f4f7880",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +16,20 @@ * Defines a generic interface to map the values of the analysis file 1-to-1.\n */\npublic interface GenericMapper {\n    /**\n     * @param sourceFile A source file to be compiled."
  }
]