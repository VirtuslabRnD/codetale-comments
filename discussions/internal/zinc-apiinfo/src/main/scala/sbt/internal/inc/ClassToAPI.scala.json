[
  {
    "id" : "645f9e43-f0a9-4921-a69a-4bd1d9cbf8d6",
    "prId" : 374,
    "prUrl" : "https://github.com/sbt/zinc/pull/374#pullrequestreview-52036793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5a835b3-145f-4594-a458-230841a5dad9",
        "parentId" : null,
        "authorId" : "fce79507-a821-4ed3-ae85-b5acf756c201",
        "body" : "Considering this:\r\n\r\nA.scala:\r\n```scala\r\nobject A {\r\n  def foo = B.C$.x\r\n}\r\n```\r\n\r\nB.java:\r\n```java\r\npublic class B {\r\n    public static class C$ {\r\n        public static int x = 42;\r\n    }\r\n}\r\n```\r\n\r\nThe compilation will fail with this patch applied:\r\n\r\n```\r\nCaused by: java.lang.RuntimeException: Failed to find name hashes for B.C$\r\n        at scala.sys.package$.error(package.scala:27)\r\n        at sbt.internal.inc.AnalysisCallback.nameHashesForCompanions(Compile.scala:331)\r\n        at sbt.internal.inc.AnalysisCallback.analyzeClass(Compile.scala:338)\r\n        at sbt.internal.inc.AnalysisCallback.$anonfun$addProductsAndDeps$4(Compile.scala:354)\r\n        at scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:234)\r\n        at scala.collection.mutable.HashSet.foreach(HashSet.scala:78)\r\n        at scala.collection.TraversableLike.map(TraversableLike.scala:234)\r\n        at scala.collection.TraversableLike.map$(TraversableLike.scala:227)\r\n        at scala.collection.mutable.AbstractSet.scala$collection$SetLike$$super$map(Set.scala:46)\r\n        at scala.collection.SetLike.map(SetLike.scala:101)\r\n        at scala.collection.SetLike.map$(SetLike.scala:101)\r\n        at scala.collection.mutable.AbstractSet.map(Set.scala:46)\r\n        at sbt.internal.inc.AnalysisCallback.$anonfun$addProductsAndDeps$1(Compile.scala:354)\r\n        at scala.collection.TraversableOnce.$anonfun$foldLeft$1(TraversableOnce.scala:157)\r\n        at scala.collection.TraversableOnce.$anonfun$foldLeft$1$adapted(TraversableOnce.scala:157)\r\n        at scala.collection.mutable.HashSet.foreach(HashSet.scala:78)\r\n        at scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:157)\r\n        at scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:155)\r\n        at scala.collection.AbstractTraversable.foldLeft(Traversable.scala:104)\r\n        at scala.collection.TraversableOnce.$div$colon(TraversableOnce.scala:151)\r\n        at scala.collection.TraversableOnce.$div$colon$(TraversableOnce.scala:151)\r\n        at scala.collection.AbstractTraversable.$div$colon(Traversable.scala:104)\r\n        at sbt.internal.inc.AnalysisCallback.addProductsAndDeps(Compile.scala:350)\r\n        at sbt.internal.inc.AnalysisCallback.get(Compile.scala:300)\r\n        at sbt.internal.inc.Incremental$.doCompile(Incremental.scala:102)\r\n        at sbt.internal.inc.Incremental$.$anonfun$compile$4(Incremental.scala:82)\r\n        at sbt.internal.inc.IncrementalCommon.recompileClasses(IncrementalCommon.scala:118)\r\n        at sbt.internal.inc.IncrementalCommon.cycle(IncrementalCommon.scala:64)\r\n        at sbt.internal.inc.Incremental$.$anonfun$compile$3(Incremental.scala:84)\r\n        at sbt.internal.inc.Incremental$.manageClassfiles(Incremental.scala:129)\r\n        at sbt.internal.inc.Incremental$.compile(Incremental.scala:75)\r\n        at sbt.internal.inc.IncrementalCompile$.apply(Compile.scala:70)\r\n        at sbt.internal.inc.IncrementalCompilerImpl.compileInternal(IncrementalCompilerImpl.scala:309)\r\n        at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileIncrementally$1(IncrementalCompilerImpl.scala:267)\r\n        at sbt.internal.inc.IncrementalCompilerImpl.handleCompilationError(IncrementalCompilerImpl.scala:158)\r\n        at sbt.internal.inc.IncrementalCompilerImpl.compileIncrementally(IncrementalCompilerImpl.scala:237)\r\n        at sbt.internal.inc.IncrementalCompilerImpl.compile(IncrementalCompilerImpl.scala:68)\r\n        at sbt.internal.inc.ProjectStructure.compile(IncHandler.scala:386)\r\n        at sbt.internal.inc.IncHandler$$anonfun$commands$lzycompute$1.applyOrElse(IncHandler.scala:133)\r\n        at sbt.internal.inc.IncHandler$$anonfun$commands$lzycompute$1.applyOrElse(IncHandler.scala:133)\r\n        at sbt.internal.inc.IncHandler.applyOrElse(IncHandler.scala:197)\r\n        at sbt.internal.inc.IncHandler.$anonfun$noArgs$1(IncHandler.scala:195)\r\n        at sbt.internal.inc.IncHandler.$anonfun$noArgs$1$adapted(IncHandler.scala:195)\r\n        at sbt.internal.inc.IncHandler.$anonfun$apply$1(IncHandler.scala:97)\r\n        at sbt.internal.inc.IncHandler.$anonfun$apply$1$adapted(IncHandler.scala:97)\r\n        at sbt.internal.inc.IncHandler.onIncInstance(IncHandler.scala:104)\r\n        at sbt.internal.inc.IncHandler.apply(IncHandler.scala:98)\r\n        at sbt.internal.inc.IncHandler.apply(IncHandler.scala:52)\r\n        at sbt.internal.scripted.ScriptRunner.processStatement$1(ScriptRunner.scala:18)\r\n        ... 52 more\r\n```",
        "createdAt" : "2017-07-25T07:56:26Z",
        "updatedAt" : "2017-07-25T14:46:45Z",
        "lastEditedBy" : "fce79507-a821-4ed3-ae85-b5acf756c201",
        "tags" : [
        ]
      },
      {
        "id" : "3861c863-0425-4f94-ba21-fda6c5c46d0d",
        "parentId" : "a5a835b3-145f-4594-a458-230841a5dad9",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "This case is handled automatically by the spec of both Scala and Java: you cannot use `$` in names neither in Java nor Scala:\r\n* [Scala spec](http://www.scala-lang.org/files/archive/spec/2.12/01-lexical-syntax.html)\r\n* [Java spec](https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.8)\r\n  ",
        "createdAt" : "2017-07-25T08:07:20Z",
        "updatedAt" : "2017-07-25T14:46:45Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "02bc48c4-837e-442e-87e4-8e2b46969039",
        "parentId" : "a5a835b3-145f-4594-a458-230841a5dad9",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "In fact, note that this patch does the right thing: it preserves the ending '$' of the original 'B.C$', where a low tech solution wouldn't have handled that :smile:.",
        "createdAt" : "2017-07-25T08:08:38Z",
        "updatedAt" : "2017-07-25T14:46:45Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "2691761d-4d28-47d3-8bac-4e6fe172bf16",
        "parentId" : "a5a835b3-145f-4594-a458-230841a5dad9",
        "authorId" : "fce79507-a821-4ed3-ae85-b5acf756c201",
        "body" : "From the Java spec you linked:\r\n> The $ sign should be used only in mechanically generated source code or, rarely, to access pre-existing names on legacy systems.\r\n\r\nMy reading is that it's perfectly legal for a source code generator to emit names that use the $ sign.\r\n\r\nThe Scala spec is more ambiguous. However, in the above example, changing `def foo = B.C$.x` to `def foo = new B` produces the same crash.",
        "createdAt" : "2017-07-25T08:58:20Z",
        "updatedAt" : "2017-07-25T14:46:45Z",
        "lastEditedBy" : "fce79507-a821-4ed3-ae85-b5acf756c201",
        "tags" : [
        ]
      },
      {
        "id" : "02ae1e01-6f18-475c-9722-5e32969766f0",
        "parentId" : "a5a835b3-145f-4594-a458-230841a5dad9",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "Yes, code generators can, but it's not clear to me whether the `$` in user-defined names is escaped or not. I'm unsure at this point, I have to check.\r\n  \r\nYes, `def foo = new B` clashes because those classes with `$` are referenced in the constant pool. Let me have a closer look to whether this misbehavior can (or should) be fixed.",
        "createdAt" : "2017-07-25T09:07:31Z",
        "updatedAt" : "2017-07-25T14:46:45Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "b276a2ec-a181-4b5d-bb9f-948eafa1dcc8",
        "parentId" : "a5a835b3-145f-4594-a458-230841a5dad9",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "@Duhemm I've had a deeper look. Are you sure that this case was not failing before my patch? I'm able to reproduce, but the case fails when compiling the java source first, which does not use `ClassToAPI`. It fails because of https://github.com/sbt/zinc/issues/292.",
        "createdAt" : "2017-07-25T10:12:17Z",
        "updatedAt" : "2017-07-25T14:46:45Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "a390166f-9db5-4d86-b938-a5f8c3fe047b",
        "parentId" : "a5a835b3-145f-4594-a458-230841a5dad9",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "For the record, I'm intending to fix this issue. Though if this issue has no relation with this change, i would like to fix it in an independent PR.",
        "createdAt" : "2017-07-25T10:15:59Z",
        "updatedAt" : "2017-07-25T14:46:45Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "d3e9c0bb-70fa-4944-b084-fd18a2dbcb4b",
        "parentId" : "a5a835b3-145f-4594-a458-230841a5dad9",
        "authorId" : "fce79507-a821-4ed3-ae85-b5acf756c201",
        "body" : "@jvican See this scripted test: https://github.com/Duhemm/incrementalcompiler/commit/76bce1d1a10bc9957a84d337f18ce71599731b5d",
        "createdAt" : "2017-07-25T10:58:22Z",
        "updatedAt" : "2017-07-25T14:46:45Z",
        "lastEditedBy" : "fce79507-a821-4ed3-ae85-b5acf756c201",
        "tags" : [
        ]
      },
      {
        "id" : "b171a389-e9a3-4999-9e40-54e95d083683",
        "parentId" : "a5a835b3-145f-4594-a458-230841a5dad9",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "Okay, so for some reason Zinc was not showing the double `$` that triggered this issue:\r\n```\r\nCaused by: java.lang.RuntimeException: Failed to find name hashes for B.C$\r\n```\r\n  \r\nLast commit fixes it. I've squashed it with the previous \"Fix #...\" commit.",
        "createdAt" : "2017-07-25T11:43:49Z",
        "updatedAt" : "2017-07-25T14:46:45Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cb3b3f37860eb88c64142801818953c5a60b503",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +116,120 @@  }\n\n  def classCanonicalName(c: Class[_]): String = handleMalformedNameOf(c)\n\n  def toDefinitions(cmap: ClassMap)(c: Class[_]): Seq[api.ClassLikeDef] ="
  },
  {
    "id" : "9378aad7-a10f-4080-a1c6-6ec857742349",
    "prId" : 374,
    "prUrl" : "https://github.com/sbt/zinc/pull/374#pullrequestreview-52104296",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "142d3f5f-501e-4288-b4b7-d6ee7e945664",
        "parentId" : null,
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "Either use `Option(c)` or `c eq null`?",
        "createdAt" : "2017-07-25T14:34:16Z",
        "updatedAt" : "2017-07-25T14:59:19Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "7b0efcc1-ac16-461b-86aa-a28973a7fbe1",
        "parentId" : "142d3f5f-501e-4288-b4b7-d6ee7e945664",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "There's no point in doing it, the Scala compiler already does it for us. Also, this is the way it's being written across all the `ClassToAPI`, so I prefer to keep it consistent.",
        "createdAt" : "2017-07-25T15:08:31Z",
        "updatedAt" : "2017-07-25T15:09:49Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "ece4a6a2-6478-45b0-b8ed-18897aa5838c",
        "parentId" : "142d3f5f-501e-4288-b4b7-d6ee7e945664",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "Proof at the bytecode level (see ifnotnull):\r\n```\r\n    Code:\r\n      stack=2, locals=1, args_size=1\r\n         0: aload_0\r\n         1: ldc           #71                 // String\r\n         3: putfield      #66                 // Field a:Ljava/lang/String;\r\n         6: aload_0\r\n         7: invokevirtual #73                 // Method a:()Ljava/lang/String;\r\n        10: ifnonnull     24\r\n        13: getstatic     #78                 // Field scala/Predef$.MODULE$:Lscala/Predef$;\r\n        16: ldc           #80                 // String HEY\r\n        18: invokevirtual #84                 // Method scala/Predef$.println:(Ljava/lang/Object;)V\r\n        21: goto          32\r\n        24: getstatic     #78                 // Field scala/Predef$.MODULE$:Lscala/Predef$;\r\n        27: ldc           #86                 // String HOY\r\n        29: invokevirtual #84                 // Method scala/Predef$.println:(Ljava/lang/Object;)V\r\n        32: return\r\n```\r\n  \r\nCompiling with `eq null` produces the same bytecode (`ifnonnull`).",
        "createdAt" : "2017-07-25T15:33:45Z",
        "updatedAt" : "2017-07-25T15:33:45Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cb3b3f37860eb88c64142801818953c5a60b503",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +96,100 @@   */\n  def handleMalformedNameOf(c: Class[_], isRecursive: Boolean = false): String = {\n    if (c == null) \"\" // Return nothing if it hits the top-level class\n    else {\n      val className = c.getName"
  },
  {
    "id" : "bd8dbb10-8d2c-4aba-a95b-c47c61c8c19b",
    "prId" : 374,
    "prUrl" : "https://github.com/sbt/zinc/pull/374#pullrequestreview-52083705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edd33e9d-0a03-4d73-9773-060fb8bae6ea",
        "parentId" : null,
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "Same here. `eq` or `Option`.",
        "createdAt" : "2017-07-25T14:51:32Z",
        "updatedAt" : "2017-07-25T14:59:19Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cb3b3f37860eb88c64142801818953c5a60b503",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +103,107 @@      try {\n        val canonicalName = c.getCanonicalName\n        if (canonicalName == null) className\n        else canonicalName + atEnd\n      } catch {"
  },
  {
    "id" : "9e9e33ed-4230-4717-9fe4-6d771fd9986e",
    "prId" : 374,
    "prUrl" : "https://github.com/sbt/zinc/pull/374#pullrequestreview-52095269",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f5d076e-b7c9-4066-b6e1-9817e833d709",
        "parentId" : null,
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "Is it possible to write unit that checks the expected output for the nested classes etc?\r\n",
        "createdAt" : "2017-07-25T14:59:10Z",
        "updatedAt" : "2017-07-25T14:59:19Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "34799606-78cf-46a1-834a-7592feda779d",
        "parentId" : "3f5d076e-b7c9-4066-b6e1-9817e833d709",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "Unit tests only check java and scala compilation independently. For this issue to be reproducible, it has to be produced by Scala compilation followed by Java compilation. This is exactly what scripted does, and it's the reason why it's an integration test.",
        "createdAt" : "2017-07-25T15:06:54Z",
        "updatedAt" : "2017-07-25T15:16:04Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cb3b3f37860eb88c64142801818953c5a60b503",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +116,120 @@  }\n\n  def classCanonicalName(c: Class[_]): String = handleMalformedNameOf(c)\n\n  def toDefinitions(cmap: ClassMap)(c: Class[_]): Seq[api.ClassLikeDef] ="
  }
]