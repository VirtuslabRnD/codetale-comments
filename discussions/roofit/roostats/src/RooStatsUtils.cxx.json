[
  {
    "id" : "10380832-d33f-4758-9f83-416d7f4a0a81",
    "prId" : 8002,
    "prUrl" : "https://github.com/root-project/root/pull/8002#pullrequestreview-646858796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fde005d0-7031-4e2b-903a-4ea1521764a0",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "```diff\r\n-      auto iter = pdf.servers().begin();\r\n-      assert(iter != pdf.servers().end());\r\n-      assert(dynamic_cast<RooAbsPdf*>(*iter));\r\n-      FactorizePdf(observables, static_cast<RooAbsPdf&>(**iter), obsTerms, constraints);\r\n+      assert(!pdf.servers().empty() && dynamic_cast<RooAbsPdf*>(pdf.servers().first()));\r\n+      FactorizePdf(observables, static_cast<RooAbsPdf&>(*pdf.servers().first()), obsTerms, constraints);\r\n```\r\nI would even suggest to implement (== forward the call to the underlying vector) `RooSTLRefCountList::front()` and `back()`. The goal was to make it more STL-like anyway.",
        "createdAt" : "2021-04-28T09:52:17Z",
        "updatedAt" : "2021-04-28T09:57:30Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b403cb300de3597ed35c10f2580ffca8665097d",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +105,109 @@         assert(iter != pdf.servers().end());\n         assert(dynamic_cast<RooAbsPdf*>(*iter));\n         FactorizePdf(observables, static_cast<RooAbsPdf&>(**iter), obsTerms, constraints);\n      } else if (auto sim = dynamic_cast<RooSimultaneous *>(&pdf)) {  //|| dynamic_cast<RooSimultaneousOpt>(&pdf)) {\n         assert(sim != 0);"
  },
  {
    "id" : "03b23f5e-4845-4996-9b50-a1b72034b74e",
    "prId" : 8002,
    "prUrl" : "https://github.com/root-project/root/pull/8002#pullrequestreview-646858796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0350930-e492-414d-ba19-5481bbd8676a",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "I didn't check, but I suggest to make them `const` if possible. RooFit doesn't do `const`ness very well, but we are in the process of improving that.",
        "createdAt" : "2021-04-28T09:56:10Z",
        "updatedAt" : "2021-04-28T09:57:30Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b403cb300de3597ed35c10f2580ffca8665097d",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +179,183 @@         // extract underlying pdf which is extended; first server is the pdf; second server is the number of events variable\n         auto uPdf = dynamic_cast<RooAbsPdf *>(*(iter++));\n         auto extended_term = dynamic_cast<RooAbsReal *>(*(iter++));\n         assert(uPdf != nullptr);\n         assert(extended_term != nullptr);"
  },
  {
    "id" : "a92e4595-e4f9-4a6d-9069-75cdbb483985",
    "prId" : 8002,
    "prUrl" : "https://github.com/root-project/root/pull/8002#pullrequestreview-646858796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7636dae-bbc1-418e-8741-4a3896661f6a",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "The `if` above will ensure that, won't it?",
        "createdAt" : "2021-04-28T09:56:59Z",
        "updatedAt" : "2021-04-28T09:57:30Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b403cb300de3597ed35c10f2580ffca8665097d",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +191,195 @@      } else if (auto sim = dynamic_cast<RooSimultaneous *>(&pdf)) {  //|| dynamic_cast<RooSimultaneousOpt *>(&pdf)) {\n\n         assert(sim != nullptr);\n         RooAbsCategoryLValue *cat = (RooAbsCategoryLValue *) sim->indexCat().Clone(); assert(cat != NULL);\n         RooArgList pdfList;"
  }
]