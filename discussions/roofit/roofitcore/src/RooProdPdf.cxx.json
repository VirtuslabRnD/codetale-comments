[
  {
    "id" : "7603c0ca-c4f5-44ac-93d7-ae1b404719bd",
    "prId" : 7907,
    "prUrl" : "https://github.com/root-project/root/pull/7907#pullrequestreview-640217411",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8aa1c0d0-61d0-4601-855d-60bd214a0f32",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "No loop variables outside of loops.",
        "createdAt" : "2021-04-20T17:39:28Z",
        "updatedAt" : "2021-04-30T11:10:28Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      }
    ],
    "commit" : "491740ec32dad8da25df828a6fd0cac8cbaeb788",
    "line" : 224,
    "diffHunk" : "@@ -1,1 +694,698 @@    // Check if this PDF has dependents overlapping with one of the existing terms\n    bool done = false;\n    int j = 0;\n    for (RooLinkedListIter lIter = termList.iterator(),\n\tldIter = normList.iterator();"
  },
  {
    "id" : "bfea631f-a989-42ad-afad-46b859c8bd5a",
    "prId" : 7907,
    "prUrl" : "https://github.com/root-project/root/pull/7907#pullrequestreview-677585447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e3f0278-4d00-4205-8b03-1deabe617da4",
        "parentId" : null,
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "It seems to me that this function is used mainly for the test program. Should we then keep only there, or do you think is useful in general ? \r\nIf it is useful, then maybe we can add a PrintCache function in RooProdPdf ?  ",
        "createdAt" : "2021-06-07T14:51:54Z",
        "updatedAt" : "2021-06-07T15:00:19Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      },
      {
        "id" : "c0bfcbb5-45e2-4bde-89b5-b2143b6e53cb",
        "parentId" : "5e3f0278-4d00-4205-8b03-1deabe617da4",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "I think it is useful in general when debugging a RooProdPdf.\r\n\r\nThe choice of the name `writeToStream` was made in analogy to [RooArgSet::writeToStream](https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooArgSet.h#L104), where the \"write\" instead of \"print\" signifies that this is a machine-readable stream where pretty formatting doesn't matter. I didn't call it \"PrintCache\" also because the usual Print functions in ROOT don't take the outstream as an argument but print directly to cout.",
        "createdAt" : "2021-06-07T15:38:53Z",
        "updatedAt" : "2021-06-07T15:38:53Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      }
    ],
    "commit" : "491740ec32dad8da25df828a6fd0cac8cbaeb788",
    "line" : 539,
    "diffHunk" : "@@ -1,1 +2335,2339 @@}\n\nvoid RooProdPdf::CacheElem::writeToStream(std::ostream& os) const {\n  using namespace RooHelpers;\n  os << \"_partList\\n\";"
  }
]