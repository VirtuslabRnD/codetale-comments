[
  {
    "id" : "e32dcfb7-7215-417c-bef7-bce638fedd3b",
    "prId" : 7271,
    "prUrl" : "https://github.com/root-project/root/pull/7271#pullrequestreview-607505637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b22554e4-68de-4fca-bc5f-2a3f506acfc4",
        "parentId" : null,
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "Does this change fixes a previous limitation that was assuming equal bin widths (using now pbinv[ibin] instead of pbinv[1] ? ",
        "createdAt" : "2021-03-09T13:56:08Z",
        "updatedAt" : "2021-03-09T22:01:35Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      },
      {
        "id" : "ec5993c0-bcb7-40ea-863a-5b1956c6af15",
        "parentId" : "b22554e4-68de-4fca-bc5f-2a3f506acfc4",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "Yes it does, maybe I forgot to write about it in the log. The third overload of `RooDataHist::sum()` implemented this already correctly:\r\nhttps://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooDataHist.cxx#L1663",
        "createdAt" : "2021-03-09T15:00:19Z",
        "updatedAt" : "2021-03-09T22:01:35Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a077a4bf1d39fb11b315cb7dcefdaefb1656317",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +1562,1566 @@    \n    if (!skip) {\n      const double theBinVolume = correctForBinSize ? (inverseBinCor ? 1/(*pbinv)[ibin] : (*pbinv)[ibin] ) : 1.0 ;\n      total += get_wgt(ibin) * theBinVolume;\n    }"
  },
  {
    "id" : "e8e182ca-4239-40ba-8060-e70c30265acb",
    "prId" : 7859,
    "prUrl" : "https://github.com/root-project/root/pull/7859#pullrequestreview-642355194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdb45934-366d-4b01-ac11-edc59c9f8b3e",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Also a bit of doxygen if you can.",
        "createdAt" : "2021-04-22T12:26:27Z",
        "updatedAt" : "2021-04-22T15:41:21Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "caaff524-b0cc-416e-a721-91912e794957",
        "parentId" : "bdb45934-366d-4b01-ac11-edc59c9f8b3e",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "Done.",
        "createdAt" : "2021-04-22T15:35:54Z",
        "updatedAt" : "2021-04-22T15:41:21Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9ea12029e0d41c6d9dda65aeb925e58998ab792",
    "line" : 345,
    "diffHunk" : "@@ -1,1 +2170,2174 @@}\n\n\n////////////////////////////////////////////////////////////////////////////////\n/// Return reference to VarInfo struct with cached histogram variable"
  },
  {
    "id" : "b8a15fa5-b6be-46d9-830e-194c40a70fd5",
    "prId" : 7859,
    "prUrl" : "https://github.com/root-project/root/pull/7859#pullrequestreview-642356255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0441a069-563c-4251-9c70-b11364329f33",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Doxygen.",
        "createdAt" : "2021-04-22T12:28:20Z",
        "updatedAt" : "2021-04-22T15:41:21Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "c2af8c38-9cf4-4c24-86e8-427124e59f72",
        "parentId" : "0441a069-563c-4251-9c70-b11364329f33",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "Okay, added.",
        "createdAt" : "2021-04-22T15:36:49Z",
        "updatedAt" : "2021-04-22T15:41:21Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9ea12029e0d41c6d9dda65aeb925e58998ab792",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +1146,1150 @@}\n\n\n////////////////////////////////////////////////////////////////////////////////\n/// Return the weight at given coordinates with interpolation."
  },
  {
    "id" : "a79bf7a8-4c02-41fa-bdfc-7c0f70a9c678",
    "prId" : 7859,
    "prUrl" : "https://github.com/root-project/root/pull/7859#pullrequestreview-642354182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01426101-e5c7-4c32-bac4-138fb690c3e1",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "If you could add the documentation of the parameters here? Now is probably the best time, because you had to look at what they mean.",
        "createdAt" : "2021-04-22T12:31:37Z",
        "updatedAt" : "2021-04-22T15:41:21Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "82af2b5c-f3b7-4586-b0bb-ee697952b74c",
        "parentId" : "01426101-e5c7-4c32-bac4-138fb690c3e1",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "Okay!",
        "createdAt" : "2021-04-22T15:35:02Z",
        "updatedAt" : "2021-04-22T15:41:21Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9ea12029e0d41c6d9dda65aeb925e58998ab792",
    "line" : 221,
    "diffHunk" : "@@ -1,1 +1298,1302 @@/// Perform boundary safe 'intOrder'-th interpolation of weights in dimension 'dim'\n/// at current value 'xval'\n\n/// \\param[in] iDim Index of the histogram dimension along which to interpolate.\n/// \\param[in] xval Value of histogram variable at dimension `iDim` for which"
  },
  {
    "id" : "597341ae-baf3-4579-bd28-4bd98cf88097",
    "prId" : 8368,
    "prUrl" : "https://github.com/root-project/root/pull/8368#pullrequestreview-681028434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60a5a156-b70f-4888-84a8-92d3f0e84a74",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "This is weird. The interface enforces `RooRealVar*`. If this cast fails, something is deeply broken. What about just checking for `nullptr`?",
        "createdAt" : "2021-06-08T13:42:16Z",
        "updatedAt" : "2021-06-08T13:48:26Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "c8dcaa69-f0e4-4b31-96c7-703ac5404747",
        "parentId" : "60a5a156-b70f-4888-84a8-92d3f0e84a74",
        "authorId" : "c130f90f-ce87-4bc5-a2bd-7b1b93d94515",
        "body" : "The callers of this function do not do type checking of the argument, but static_cast the argument to RooRealVar*. The type check is then supposed to be done in the function itself. But for the dynamic_cast to actually do the type check the pointer must first be static_cast back to RooAbsArg*, otherwise the compiler will optimise this to a simple nullptr check since the only way a dynamic_cast of a pointer to a pointer of the same type can fail is if it is the null pointer. The code as it was written was expecting the dynamic_cast to fail for a non-null pointer that originally was not a RooRealVar* (even though it had been static_cast to a RooRealVar* before calling the function). Just checking for nullptr does not guarantee that the pointer is actually a RooRealVar*.\r\nThis was the minimal change to make the code do what was intended.\r\nThe alternative would be to change the signature of the function to use a RooAbsArg*, which avoids casting the pointer to call the function and then casting it back in the function to do the type check. But that is a bigger change, and I proposed the minimal change to fix the warning.",
        "createdAt" : "2021-06-08T14:46:12Z",
        "updatedAt" : "2021-06-08T14:46:13Z",
        "lastEditedBy" : "c130f90f-ce87-4bc5-a2bd-7b1b93d94515",
        "tags" : [
        ]
      },
      {
        "id" : "cee01422-15b5-4fb2-b274-a19d502e5811",
        "parentId" : "60a5a156-b70f-4888-84a8-92d3f0e84a74",
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "I am not sure I understand the point here. If this function is called with `ourVar` not being a `RooRealVar *` then there is a problem somewhere else in the code. \r\nThis function is an internal one and when used one passes always a RooRealVar pointer, so I don;t see any problem. \r\nA better alternative is to remove the check in any case and pass a reference to RooRealVar. \r\nI would really avoid doing this double cast ",
        "createdAt" : "2021-06-10T16:50:50Z",
        "updatedAt" : "2021-06-10T16:51:01Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd007cc51320e3aab422f1f73a0c465546723707",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +592,596 @@    RooRealVar *ourVar, Int_t *offset)\n{\n  if (!dynamic_cast<RooRealVar*>(static_cast<RooAbsArg*>(ourVar))) {\n    coutE(InputArguments) << \"RooDataHist::adjustBinning(\" << GetName() << \") ERROR: dimension \" << ourVar->GetName() << \" must be real\" << endl ;\n    assert(0) ;"
  }
]