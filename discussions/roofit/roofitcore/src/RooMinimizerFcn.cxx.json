[
  {
    "id" : "f8cd57de-99d4-4010-b6a3-3d0112a85fa3",
    "prId" : 6243,
    "prUrl" : "https://github.com/root-project/root/pull/6243#pullrequestreview-475419341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f069869a-b9fd-4f45-96b0-864f0284ad32",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I'm not sure I understand: if `_floatParamList->remove(*arg)` removes element 3, do elements after that shift back one position? if yes, aren't you skipping the new 3/old 4 element when incrementing i after a removal?",
        "createdAt" : "2020-08-26T07:05:55Z",
        "updatedAt" : "2020-08-26T13:41:16Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "20080457-275c-47a7-a6db-0b6712455ad5",
        "parentId" : "f069869a-b9fd-4f45-96b0-864f0284ad32",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Probably yes. This could be a bug both in old and new loop!",
        "createdAt" : "2020-08-26T12:03:41Z",
        "updatedAt" : "2020-08-26T13:41:16Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      }
    ],
    "commit" : "aebf985947e4deb23f1e4d75c941a144db5e7326",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +67,71 @@  // Remove all non-RooRealVar parameters from list (MINUIT cannot handle them)\n  for (unsigned int i = 0; i < _floatParamList->size(); ) { // Note: Counting loop, since removing from collection!\n    const RooAbsArg* arg = (*_floatParamList).at(i);\n    if (!arg->IsA()->InheritsFrom(RooAbsRealLValue::Class())) {\n      oocoutW(_context,Minimization) << \"RooMinimizerFcn::RooMinimizerFcn: removing parameter \" "
  },
  {
    "id" : "c2cb27ed-b0fd-4da4-908a-39d520d05c3f",
    "prId" : 8569,
    "prUrl" : "https://github.com/root-project/root/pull/8569#pullrequestreview-698868736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "913ed5b4-bb01-4fdd-a8ca-41a35cf25dea",
        "parentId" : null,
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "These two functions `getFunctionName` and `getFunctionTitle` can also be inlined in the header to allow for better compiler optimization and improve code readability.",
        "createdAt" : "2021-07-02T10:26:45Z",
        "updatedAt" : "2021-07-02T10:26:46Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      },
      {
        "id" : "2e359a5e-49c9-433e-884e-b5531d948999",
        "parentId" : "913ed5b4-bb01-4fdd-a8ca-41a35cf25dea",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Maybe, maybe not. I left some comments to bring down the includes in the headers. If you follow that route, it's actually better to forward declare `RooAbsReal`, and have those functions in the `cxx`.\r\nIf `RooAbsReal` needs to be included in the header, I would suggest inlining.",
        "createdAt" : "2021-07-02T12:24:49Z",
        "updatedAt" : "2021-07-02T12:27:10Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "c314a977-4af6-4baf-9b75-e12fd1ca5375",
        "parentId" : "913ed5b4-bb01-4fdd-a8ca-41a35cf25dea",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "Good point, if inlining means to add mode includes that would otherwise not be necessary it should not be done.",
        "createdAt" : "2021-07-05T07:22:07Z",
        "updatedAt" : "2021-07-05T07:22:08Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      }
    ],
    "commit" : "61dbdae79aba4c2b0a05d6a1bfa90673fa3397f2",
    "line" : 495,
    "diffHunk" : "@@ -1,1 +112,116 @@}\n\nstd::string RooMinimizerFcn::getFunctionName() const\n{\n   return _funct->GetName();"
  }
]