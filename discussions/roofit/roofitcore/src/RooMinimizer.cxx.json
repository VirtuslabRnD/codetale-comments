[
  {
    "id" : "58f609fe-b167-477e-9189-0c9158cf8429",
    "prId" : 8569,
    "prUrl" : "https://github.com/root-project/root/pull/8569#pullrequestreview-698043552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3619c78-a4ea-4f5a-b9c2-66d5468cc44a",
        "parentId" : null,
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "I would not outline these one-liners. They should better be inlined in the header file. There are also many such one-liners in RooAbsMininmizerFcn, but since they are copy pasted from the original file, I'm fine with keeping them there. But for new code, it would be nice to inline.",
        "createdAt" : "2021-07-02T10:19:39Z",
        "updatedAt" : "2021-07-02T10:19:39Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      }
    ],
    "commit" : "61dbdae79aba4c2b0a05d6a1bfa90673fa3397f2",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +940,944 @@}\n\nInt_t RooMinimizer::getPrintLevel() const\n{\n   return _printLevel;"
  },
  {
    "id" : "72721682-b8ad-4e64-b7fb-01e00830c8df",
    "prId" : 8596,
    "prUrl" : "https://github.com/root-project/root/pull/8596#pullrequestreview-706140648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a75e13b2-3f17-428a-afc0-76238099e15a",
        "parentId" : null,
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "```suggestion\r\n      }\r\n      return nullptr;\r\n   }\r\n```\r\nTo avoid a warning about not returning anything at the end of a non-void function.",
        "createdAt" : "2021-07-13T15:07:24Z",
        "updatedAt" : "2021-07-13T15:07:24Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      },
      {
        "id" : "beda279a-3f24-4edd-9ece-65302e1113cb",
        "parentId" : "a75e13b2-3f17-428a-afc0-76238099e15a",
        "authorId" : "4809a10a-85e2-4d0e-8c00-5a0777cea24e",
        "body" : "Hm, I don't get that warning, is it somehow compiler/platform dependent? Weird. I'm a bit hestitant about returning a null pointer. I think the control flow should not reach that point at all; every block either returns something or throws. Making it return a nullptr would effectively signal some exotic error state that should be solved on the developer side, not the user side. I don't know exactly what the ROOT policy is on exceptions, but I would personally then opt for throwing at this point.",
        "createdAt" : "2021-07-14T08:11:28Z",
        "updatedAt" : "2021-07-14T08:11:29Z",
        "lastEditedBy" : "4809a10a-85e2-4d0e-8c00-5a0777cea24e",
        "tags" : [
        ]
      },
      {
        "id" : "25513911-3f5d-4cbd-9f11-94c95b39734b",
        "parentId" : "a75e13b2-3f17-428a-afc0-76238099e15a",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "I see your point, but I also can't change the fact that I get the following warning with gcc11 :)\r\n```\r\n/home/rembserj/root-builds/master/src/roofit/roofitcore/src/RooMinimizer.cxx: In member function ‘ROOT::Math::IMultiGenFunction* RooMinimizer::getMultiGenFcn() const’:\r\n/home/rembserj/root-builds/master/src/roofit/roofitcore/src/RooMinimizer.cxx:827:1: warning: control reaches end of non-void function [-Wreturn-type]\r\n  827 | }\r\n      | ^\r\n/home/rembserj/root-builds/master/src/roofit/roofitcore/src/RooMinimizer.cxx: In member function ‘const RooAbsMinimizerFcn* RooMinimizer::fitterFcn() const’:\r\n/home/rembserj/root-builds/master/src/roofit/roofitcore/src/RooMinimizer.cxx:849:1: warning: control reaches end of non-void function [-Wreturn-type]\r\n  849 | }\r\n      | ^\r\n```\r\nMaybe we can circumvent the problem by simplifying the relevant functions `getMultiGenFcn` and `fitterFcn`? For example, I `getMultiGenFcn` you are always having a static cast to ROOT::Math::IMultiGenFunction for both the `classic` and `gradient` case. The switch statement was just to catch the logic error that is already checked for in the new RooMinimizer constructor. So would it be possible to do this?\r\n```C++\r\nROOT::Math::IMultiGenFunction* RooMinimizer::getMultiGenFcn() const\r\n{                           \r\n   if (getFitterMultiGenFcn()) {\r\n      return getFitterMultiGenFcn();\r\n   }\r\n   return static_cast<ROOT::Math::IMultiGenFunction *>(static_cast<RooMinimizerFcn *>(_fcn));\r\n}\r\n```\r\nI think also the logic of `RooMinimizer::fitterFcn()` can be simplified, but I'll make a separate comment for that.",
        "createdAt" : "2021-07-14T10:24:41Z",
        "updatedAt" : "2021-07-14T10:24:41Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      },
      {
        "id" : "fe5be07a-fef3-498a-9e1b-19970fdfaece",
        "parentId" : "a75e13b2-3f17-428a-afc0-76238099e15a",
        "authorId" : "4809a10a-85e2-4d0e-8c00-5a0777cea24e",
        "body" : "Is `static_cast<ROOT::Math::IMultiGenFunction *>(static_cast<RooMinimizerFcn *>(_fcn))` always going to work? For instance, is it guaranteed that every `RooAbsMinimizerFcn` subclass will have the same data member ordering (at least for the `IMultiGenFunction` part) as `RooMinimizerFcn`?",
        "createdAt" : "2021-07-14T10:57:41Z",
        "updatedAt" : "2021-07-14T10:57:42Z",
        "lastEditedBy" : "4809a10a-85e2-4d0e-8c00-5a0777cea24e",
        "tags" : [
        ]
      },
      {
        "id" : "b179682c-1ab4-43ee-ac0b-d0d9f37ca520",
        "parentId" : "a75e13b2-3f17-428a-afc0-76238099e15a",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "Oh yes I see, it's also dangerous in that regard....",
        "createdAt" : "2021-07-14T11:09:05Z",
        "updatedAt" : "2021-07-14T11:09:05Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7fafc0682d1e25bd9af3563dd0f534661befa09",
    "line" : 248,
    "diffHunk" : "@@ -1,1 +877,881 @@      }\n      }\n   }\n}\n"
  },
  {
    "id" : "e982b5b2-1701-4084-b131-81a094e499fb",
    "prId" : 8596,
    "prUrl" : "https://github.com/root-project/root/pull/8596#pullrequestreview-707026844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a0f7b5a-3d5c-463c-a4cf-a8be7b63dc15",
        "parentId" : null,
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "Hmm I don't see how the switch statement can be avoided because of the two different `static_cast`, but I also get the warning about end of control flow for a non-void function. Maybe we can just return `return nullptr` at the end of the function to make the compiler happy?",
        "createdAt" : "2021-07-14T10:55:09Z",
        "updatedAt" : "2021-07-14T10:55:09Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      },
      {
        "id" : "55901a13-1ac9-49e3-bf4d-e94e3d1554d5",
        "parentId" : "7a0f7b5a-3d5c-463c-a4cf-a8be7b63dc15",
        "authorId" : "4809a10a-85e2-4d0e-8c00-5a0777cea24e",
        "body" : "First we get rid of the nullptr and logic error check. If the compiler is smart enough, that should already stop it from complaining, since then really every block returns something. If it still complains, we can just define a `RooAbsMinimizerFcn *return_ptr` at the top, store the casted result there in each block and return at the end. What do you think?",
        "createdAt" : "2021-07-14T11:03:19Z",
        "updatedAt" : "2021-07-14T11:03:19Z",
        "lastEditedBy" : "4809a10a-85e2-4d0e-8c00-5a0777cea24e",
        "tags" : [
        ]
      },
      {
        "id" : "0152c561-dfb7-4ce9-aee4-afe2a83a0a05",
        "parentId" : "7a0f7b5a-3d5c-463c-a4cf-a8be7b63dc15",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "I just checked, but removing the logic error check doesn't suppress the warnings. I think the compiler doesn't understand that all the cases in the switch statement are exhaustive, i.e. it doesn't consider that `classic` and `gradient` are the only possible values for `_fcnMode`. Your idea with the return value sounds good to me, though!",
        "createdAt" : "2021-07-14T11:41:58Z",
        "updatedAt" : "2021-07-14T11:41:58Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      },
      {
        "id" : "8c9c2c01-e9cc-428a-bd26-95e9355f9b84",
        "parentId" : "7a0f7b5a-3d5c-463c-a4cf-a8be7b63dc15",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "You have to add a `default` clause. It's because if somebody decides to add a case to the thing that you switch on, this statement wouldn't do anything --> end of non-void function.\r\n\r\nYou can even put an `assert` or `throw` in the `default` clause to make this detectable.",
        "createdAt" : "2021-07-15T07:42:00Z",
        "updatedAt" : "2021-07-15T07:42:00Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7fafc0682d1e25bd9af3563dd0f534661befa09",
    "line" : 264,
    "diffHunk" : "@@ -1,1 +893,897 @@      default: {\n         throw std::logic_error(\"In RooMinimizer::fitterFcn: _fcnMode has an unsupported value!\");\n      }\n      }\n   } else {"
  },
  {
    "id" : "d2f5711e-9922-46cb-a191-8422be6815c7",
    "prId" : 8596,
    "prUrl" : "https://github.com/root-project/root/pull/8596#pullrequestreview-707024451",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c83382f-f1e6-45f4-b7e6-411218d5a9d8",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "You can probably fix the warning like this. The compiler complains that the switch is incomplete:\r\n```suggestion\r\n      }\r\n      default: return nullptr;\r\n```",
        "createdAt" : "2021-07-15T07:39:07Z",
        "updatedAt" : "2021-07-15T07:39:07Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7fafc0682d1e25bd9af3563dd0f534661befa09",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +875,879 @@      default: {\n         throw std::logic_error(\"In RooMinimizer::getMultiGenFcn: _fcnMode has an unsupported value!\");\n      }\n      }\n   }"
  }
]