[
  {
    "id" : "8c1ff35c-cccd-4738-9a61-7fbbbd077d49",
    "prId" : 5718,
    "prUrl" : "https://github.com/root-project/root/pull/5718#pullrequestreview-420022373",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b33d7acb-9e36-44ad-a79b-261aa359db5d",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "the switch from `if(clone2)` to `assert(clone2)` is a change in behavior, is it intentional?",
        "createdAt" : "2020-05-28T08:25:21Z",
        "updatedAt" : "2020-05-28T11:17:09Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "0fe39f1a-7661-4cac-b8be-18002f78411d",
        "parentId" : "b33d7acb-9e36-44ad-a79b-261aa359db5d",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Yes, the variable should always clone, and therefore, was always added. The `if` was therefore unnecessary at best, likely even confusing. To assert the assumption that a `Clone` in ROOT will not return `nullptr` (not aware that ROOT would do this anywhere), I left an `assert` in place. Makes sense?",
        "createdAt" : "2020-05-28T10:55:51Z",
        "updatedAt" : "2020-05-28T11:20:26Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "5db0d147-e118-4add-865c-72d1b6836d96",
        "parentId" : "b33d7acb-9e36-44ad-a79b-261aa359db5d",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "yes, thanks",
        "createdAt" : "2020-05-28T11:38:15Z",
        "updatedAt" : "2020-05-28T11:38:15Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdc3c166959d89e4c4f2c6316b795ff62ff9e7fc",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +419,423 @@  // add a pointer to a clone of this variable to our list (we now own it!)\n  auto clone2 = static_cast<RooAbsArg*>(var.Clone());\n  assert(clone2);\n\n  insert(clone2);"
  },
  {
    "id" : "10849bda-4ef1-4974-b79a-09b985f92d55",
    "prId" : 5718,
    "prUrl" : "https://github.com/root-project/root/pull/5718#pullrequestreview-419996035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2475ce1-79e8-4599-8f7b-108345d1fd8c",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "so the output of `tryFastFind` can be that `_nameToItemMap` is updated to have the element with `namePtr`, but the function returns nullptr anyway..? i.e. I would expect a `return arg` here",
        "createdAt" : "2020-05-28T08:37:10Z",
        "updatedAt" : "2020-05-28T11:17:09Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "9a4d924c-9219-4bc8-abde-efbe522f651c",
        "parentId" : "a2475ce1-79e8-4599-8f7b-108345d1fd8c",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Good catch, thanks!\r\nIt will still work, but it's now doing a linear search twice.",
        "createdAt" : "2020-05-28T10:57:25Z",
        "updatedAt" : "2020-05-28T11:17:09Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdc3c166959d89e4c4f2c6316b795ff62ff9e7fc",
    "line" : 332,
    "diffHunk" : "@@ -1,1 +1351,1355 @@        (*_nameToItemMap)[arg->namePtr()] = arg;\n        return arg;\n      }\n    }\n  }"
  },
  {
    "id" : "6059938d-f1b4-4b7a-a7b2-59c53879dca3",
    "prId" : 8262,
    "prUrl" : "https://github.com/root-project/root/pull/8262#pullrequestreview-671220825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afc8389e-fb94-4372-950b-fe02e27b4a94",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Why not a collection as return value (copy elision)?",
        "createdAt" : "2021-05-27T14:28:28Z",
        "updatedAt" : "2021-05-27T14:32:44Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "e95ea685-8bf3-4553-a1da-af45f9fa0afa",
        "parentId" : "afc8389e-fb94-4372-950b-fe02e27b4a94",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "We often have patterns like:\r\n```C++\r\nfor(auto const& otherSet : otherSets) {\r\n    RooArgSet * sel = ourSet.selectCommon(otherSet);\r\n    delete sel;\r\n}\r\n```\r\nwhile a function with returning a RooArgSet with copy-elision is convenient, it means the memory for the underlying std::vector has to be newly allocated in each iteration.\r\n\r\nThat's why we should definitely have functions with output parameters. Maybe we can also add a version with return parameter in the future when we hit a case where it can really save us many lines of code, but I don't think we need it for this PR.\r\n\r\nAnother problem is that we'd have to come up with a separate name, because the function signature would only differ by the return type from the original `selectCommon` that returns a pointer.",
        "createdAt" : "2021-05-28T11:16:05Z",
        "updatedAt" : "2021-05-28T11:16:05Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      },
      {
        "id" : "5e6fd79e-a7ef-48bc-99d5-4da3e6d7cce6",
        "parentId" : "afc8389e-fb94-4372-950b-fe02e27b4a94",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "I don't see the memory allocation issue, as it should also happen with sets that you put on the stack before calling the function.\r\nI understand, however, that return-value overloading isn't possible in c++. ðŸ™‚ ",
        "createdAt" : "2021-05-28T11:21:04Z",
        "updatedAt" : "2021-05-28T11:21:05Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "6d581de6-e040-4ee6-a901-3968a3f80cb2",
        "parentId" : "afc8389e-fb94-4372-950b-fe02e27b4a94",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "I mean you can reduce the same set, for example:\r\n```C++\r\nRooArgSet common;\r\nfor(auto const& otherSet : otherSets) {\r\n    ourSet.selectCommon(otherSet, comon);\r\n    // do something with common\r\n}\r\n```\r\n\r\nIt's not important for this PR, but for other places like RooProdPdf this will come in handy",
        "createdAt" : "2021-05-28T11:54:16Z",
        "updatedAt" : "2021-05-28T11:56:17Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      }
    ],
    "commit" : "5eb85d083f48ae7a05f51a2914930e172f21fe7e",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +719,723 @@/// \\param[out] outColl Output collection.\n\nbool RooAbsCollection::selectCommon(const RooAbsCollection& refColl, RooAbsCollection& outColl) const\n{\n  outColl.clear();"
  },
  {
    "id" : "01fa4fc2-23ce-43a8-92d4-2be1dd4f6fc2",
    "prId" : 8262,
    "prUrl" : "https://github.com/root-project/root/pull/8262#pullrequestreview-671194483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "962f119a-f65e-4ab6-a24e-1299da762dc5",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "- Maybe adapt to the common style using `\\param` and `\\return`.",
        "createdAt" : "2021-05-27T14:31:39Z",
        "updatedAt" : "2021-05-27T14:32:44Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "985c2b09-549b-4519-974b-74aed5fd69cf",
        "parentId" : "962f119a-f65e-4ab6-a24e-1299da762dc5",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "Okay, I put this in the pipeline for the next doxygen PR!",
        "createdAt" : "2021-05-28T11:16:44Z",
        "updatedAt" : "2021-05-28T11:16:44Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      }
    ],
    "commit" : "5eb85d083f48ae7a05f51a2914930e172f21fe7e",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +737,741 @@/// Create a subset of the current collection, consisting only of those\n/// elements that are contained as well in the given reference collection.\n/// The caller is responsible for deleting the returned collection\n\nRooAbsCollection* RooAbsCollection::selectCommon(const RooAbsCollection& refColl) const"
  }
]