[
  {
    "id" : "bed3067e-689d-435d-84d9-dff5baf80726",
    "prId" : 8368,
    "prUrl" : "https://github.com/root-project/root/pull/8368#pullrequestreview-678721586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34688f23-0314-4f18-bed3-677dea8143d9",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "It's not your fault, but you opened Pandora's box ðŸ™‚\r\n- No c-style casts in any code that gets touched after 2018\r\n- `assert(0)` is useless in production code. Please throw `std::invalid_argument`.\r\n- Don't use legacy iterators and don't define variables outside of the loop.\r\n- Instead, use something like this:\r\n```c++\r\nfor (unsigned int i = 0; i < inFuncList.size(); ++i) {\r\n  auto func = static_cast<RooAbsArg*>(inFuncList[i]);\r\n  auto coef = static_cast<RooAbsArg*>(inCoefList[i]);\r\n  ...\r\n```\r\nor directly `dynamic_cast` to the required types. If one of those doesn't exist or has the wrong type, issue an error message and throw.",
        "createdAt" : "2021-06-08T13:47:42Z",
        "updatedAt" : "2021-06-08T13:48:26Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "fb3090fd-5838-4b9f-8bda-d8456c328b57",
        "parentId" : "34688f23-0314-4f18-bed3-677dea8143d9",
        "authorId" : "c130f90f-ce87-4bc5-a2bd-7b1b93d94515",
        "body" : "Fixing coding style is a bit out of scope for a proposed minor compiler warning fix.\r\nThere are over 50 assert(0) in the roofit/ source tree, and if they should be changed they should be changed consistently by the code maintainers. Changing the in just one file that happened to generate a compiler warning would make things inconsistent. Changing assert(0) to an exception throw changes the behaviour of the code drastically and would make the PR to something very different from a simple compiler warning fix. The use of assert could in fact be intentional by the original code writer if the intention is that only a debug build should terminate on these errors.",
        "createdAt" : "2021-06-08T16:01:02Z",
        "updatedAt" : "2021-06-08T16:01:02Z",
        "lastEditedBy" : "c130f90f-ce87-4bc5-a2bd-7b1b93d94515",
        "tags" : [
        ]
      },
      {
        "id" : "8959db6a-ba83-445a-8d61-e08847d316cf",
        "parentId" : "34688f23-0314-4f18-bed3-677dea8143d9",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Ok, point taken. Converting this to an issue. ðŸ™‚ ",
        "createdAt" : "2021-06-08T16:07:14Z",
        "updatedAt" : "2021-06-08T16:07:14Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "33106425-e257-4360-9d4f-0c0899870d06",
        "parentId" : "34688f23-0314-4f18-bed3-677dea8143d9",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "#8374 ",
        "createdAt" : "2021-06-08T16:08:41Z",
        "updatedAt" : "2021-06-08T16:08:41Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd007cc51320e3aab422f1f73a0c465546723707",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +150,154 @@   }\n\n   func = (RooAbsArg *)funcIter->Next();\n   if (func) {\n      if (!dynamic_cast<RooAbsReal *>(func)) {"
  }
]