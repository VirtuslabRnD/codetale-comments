[
  {
    "id" : "11b90d69-109a-4a2b-84fe-108e003c26fe",
    "prId" : 6831,
    "prUrl" : "https://github.com/root-project/root/pull/6831#pullrequestreview-533247507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c73345e-2b81-4598-8723-0a2f8cf1bb92",
        "parentId" : null,
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "Don't want to use here an assert that is there also for non-debug builds?\r\nSomething like R__ASSERT ? Or ROOT::Fatal() ? ",
        "createdAt" : "2020-11-17T21:30:53Z",
        "updatedAt" : "2020-11-17T21:33:40Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      },
      {
        "id" : "764bf5fa-6f66-4f0d-99b2-d6a8b1a2398f",
        "parentId" : "1c73345e-2b81-4598-8723-0a2f8cf1bb92",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "I didn't see the need. It's error checking code that only runs when you compile in debug mode. It's something like 3x slower, so we cannot run it in production.",
        "createdAt" : "2020-11-18T08:32:32Z",
        "updatedAt" : "2020-11-18T08:32:32Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "0deb1783-37e2-4733-91ce-1ae026ca6f0a",
        "parentId" : "1c73345e-2b81-4598-8723-0a2f8cf1bb92",
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "ok",
        "createdAt" : "2020-11-18T09:24:34Z",
        "updatedAt" : "2020-11-18T09:25:13Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      }
    ],
    "commit" : "71c267f151e51a77b80e82bd39be8a29404bd084",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +511,515 @@        BatchHelpers::BatchInterfaceAccessor::checkBatchComputation(*pdfClone, *_evalData, evtNo-firstEvent, _normSet, 1.E-9);\n      } catch (std::exception& e2) {\n        assert(false);\n      }\n    }"
  },
  {
    "id" : "91bb720f-8cf9-4d92-9a31-d95150327a82",
    "prId" : 6831,
    "prUrl" : "https://github.com/root-project/root/pull/6831#pullrequestreview-533247507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cce3088d-88a0-48a9-baf9-eb95745ab95e",
        "parentId" : null,
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "Should we use a fixed value here or something which can be configured ? \r\nMaybe a comment on this could be useful",
        "createdAt" : "2020-11-17T21:32:29Z",
        "updatedAt" : "2020-11-17T21:33:40Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      },
      {
        "id" : "2e1ad212-344f-4f04-8004-1f6f876a9873",
        "parentId" : "cce3088d-88a0-48a9-baf9-eb95745ab95e",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Same as above:\r\nIt only runs when you `#define ROOFIT_CHECK_CACHED_VALUES`. Since it's only for 1 or two roofit developers, hard-coding is probably OK. They can change it anytime without consequences for the outside world.",
        "createdAt" : "2020-11-18T08:33:50Z",
        "updatedAt" : "2020-11-18T08:33:50Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "ce71a911-b4e7-4af1-90d7-69aea997c8bf",
        "parentId" : "cce3088d-88a0-48a9-baf9-eb95745ab95e",
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "OK, thanks I missed that that variable is used only for debugging",
        "createdAt" : "2020-11-18T09:23:12Z",
        "updatedAt" : "2020-11-18T09:25:13Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      }
    ],
    "commit" : "71c267f151e51a77b80e82bd39be8a29404bd084",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +356,360 @@      }\n\n      if (alwaysPrint || fabs(carry - carryScalar)/carryScalar > 500.) {\n        std::cerr << \"RooNLLVar: carry is far off\\n\\t\" << std::setprecision(15) << carry\n            << \"\\n\\t\" << carryScalar << std::endl;"
  }
]