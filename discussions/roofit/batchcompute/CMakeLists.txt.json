[
  {
    "id" : "f8ceec50-2c17-49e2-8c5e-9ce71935a0a9",
    "prId" : 6968,
    "prUrl" : "https://github.com/root-project/root/pull/6968#pullrequestreview-561671959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "654b9adf-7222-4b6a-a31f-c90e4804d675",
        "parentId" : null,
        "authorId" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "body" : "@Axel-Naumann should this new library follow a naming convention for new ROOT libraries? (e.g. ROOTRooBatchCompute)?",
        "createdAt" : "2021-01-05T09:56:07Z",
        "updatedAt" : "2021-01-05T10:02:10Z",
        "lastEditedBy" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "tags" : [
        ]
      },
      {
        "id" : "fb6e6b16-8eab-4e08-8ac7-76b99e7c1b4c",
        "parentId" : "654b9adf-7222-4b6a-a31f-c90e4804d675",
        "authorId" : "2d39f8bb-2ed5-4585-8a79-bac20ce450c9",
        "body" : "It's not exactly a new ROOT library, meaning that it does not extend ROOT's features but is instead improving the computations for roofit. It is a part of roofit so used the roofit naming convention (Roo... like RooAddPdf, RooSpan etc.)",
        "createdAt" : "2021-01-05T10:22:18Z",
        "updatedAt" : "2021-01-05T10:22:18Z",
        "lastEditedBy" : "2d39f8bb-2ed5-4585-8a79-bac20ce450c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e6447744c69a049906e47e789815bcd52475174",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +0,4 @@# Library which powers fast batch computations in Roofit.\nROOT_STANDARD_LIBRARY_PACKAGE(RooBatchCompute\n  HEADERS\n    RooBatchCompute.h"
  },
  {
    "id" : "b2e1fc2e-5177-490b-bae0-1f51b4fcf036",
    "prId" : 6968,
    "prUrl" : "https://github.com/root-project/root/pull/6968#pullrequestreview-567277509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a3f815c-0df9-4c33-9a3d-eaeec45cbfe9",
        "parentId" : null,
        "authorId" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "body" : "Why it is commented? I see that actually you have empty roofit/batchcompute/inc/LinkDef.h below? ",
        "createdAt" : "2021-01-05T09:57:27Z",
        "updatedAt" : "2021-01-05T10:02:10Z",
        "lastEditedBy" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "tags" : [
        ]
      },
      {
        "id" : "3174454d-1ba8-4985-a6ec-ac3c5040caef",
        "parentId" : "8a3f815c-0df9-4c33-9a3d-eaeec45cbfe9",
        "authorId" : "2d39f8bb-2ed5-4585-8a79-bac20ce450c9",
        "body" : "To be honest I don't know what I should do here. What is that linkdef file? CMake complains if there isn't one but the project runs perfectly if i just add an empty linkdef.",
        "createdAt" : "2021-01-05T10:23:39Z",
        "updatedAt" : "2021-01-05T10:23:39Z",
        "lastEditedBy" : "2d39f8bb-2ed5-4585-8a79-bac20ce450c9",
        "tags" : [
        ]
      },
      {
        "id" : "0da4e5bc-76bd-4f0a-b224-d0aeb85d8eec",
        "parentId" : "8a3f815c-0df9-4c33-9a3d-eaeec45cbfe9",
        "authorId" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "body" : "> None of those should have I/O capabilities, so no Linkdef required. You have to ask other people, though, how to run without. Maybe standard library package is the wrong approach, and cmake library does the right thing.\r\n\r\nNo you can't just add an empty LinkDef file.\r\n\r\n It is used for generation ROOT dictionaries, you can check some information here: https://root.cern/d/interacting-shared-libraries-rootcling.html and https://root.cern/d/selecting-dictionary-entries-linkdefh.html\r\n\r\n@manolismih why ROOT_LINKER_LIBRARY didn't work here for you?\r\n",
        "createdAt" : "2021-01-06T10:40:16Z",
        "updatedAt" : "2021-01-06T10:40:16Z",
        "lastEditedBy" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "tags" : [
        ]
      },
      {
        "id" : "2436e084-64f4-49c8-92c3-df4572f58604",
        "parentId" : "8a3f815c-0df9-4c33-9a3d-eaeec45cbfe9",
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "Why not an empty LinkDef ?\r\nThis is the simplest solution to avoid having the dictionary generated for the classes without  avoiding using `ROOT_STANDARD_LIBRARY_PACKAGE`. Also in the future, if one wants to add a new class in the library and have the dictionary it would just require to add a new entry in the LinkDef file ",
        "createdAt" : "2021-01-06T10:47:40Z",
        "updatedAt" : "2021-01-06T10:47:40Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      },
      {
        "id" : "d1655e62-93c1-4d37-ace3-d72bd171315b",
        "parentId" : "8a3f815c-0df9-4c33-9a3d-eaeec45cbfe9",
        "authorId" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "body" : "I don't understand if are you planning to extend functionality, then you could simply add a Linkdef file afterwards? Please don't forget that `ROOT_STANDARD_LIBRARY_PACKAGE` also generated pcm files. (cc: @Axel-Naumann )",
        "createdAt" : "2021-01-06T10:57:02Z",
        "updatedAt" : "2021-01-06T10:57:03Z",
        "lastEditedBy" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "tags" : [
        ]
      },
      {
        "id" : "21b0c16f-0c99-45fc-bef6-ba74527411fd",
        "parentId" : "8a3f815c-0df9-4c33-9a3d-eaeec45cbfe9",
        "authorId" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "body" : "  Maybe Axel could suggest what to use here `ROOT_STANDARD_LIBRARY_PACKAGE` or `ROOT_LINKER_LIBRARY`?",
        "createdAt" : "2021-01-06T11:03:11Z",
        "updatedAt" : "2021-01-06T11:03:11Z",
        "lastEditedBy" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "tags" : [
        ]
      },
      {
        "id" : "65649c34-7adc-4199-9321-66e6b45fea04",
        "parentId" : "8a3f815c-0df9-4c33-9a3d-eaeec45cbfe9",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "How has this discussion been resolved?",
        "createdAt" : "2021-01-06T13:28:05Z",
        "updatedAt" : "2021-01-06T13:28:05Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "e86c62f2-d996-42ac-9025-cd0cb25caef7",
        "parentId" : "8a3f815c-0df9-4c33-9a3d-eaeec45cbfe9",
        "authorId" : "2d39f8bb-2ed5-4585-8a79-bac20ce450c9",
        "body" : "My bad, it hasn't... I missed these comments and merged it. I am looking at it now",
        "createdAt" : "2021-01-06T14:35:26Z",
        "updatedAt" : "2021-01-06T14:35:27Z",
        "lastEditedBy" : "2d39f8bb-2ed5-4585-8a79-bac20ce450c9",
        "tags" : [
        ]
      },
      {
        "id" : "9b5483c1-052a-49fa-84ec-60eb8157427d",
        "parentId" : "8a3f815c-0df9-4c33-9a3d-eaeec45cbfe9",
        "authorId" : "2d39f8bb-2ed5-4585-8a79-bac20ce450c9",
        "body" : "@oshadura My library has some headers that roofit will need. Can a ROOT_LINKER_LIBRARY manage with that? ",
        "createdAt" : "2021-01-06T14:51:42Z",
        "updatedAt" : "2021-01-06T14:51:42Z",
        "lastEditedBy" : "2d39f8bb-2ed5-4585-8a79-bac20ce450c9",
        "tags" : [
        ]
      },
      {
        "id" : "e4933d43-0ba3-4c84-8b67-560a2c14065f",
        "parentId" : "8a3f815c-0df9-4c33-9a3d-eaeec45cbfe9",
        "authorId" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "body" : "@manolismih I was thinking do you actually need any features that are offered by ROOT_STANDARD_LIBRARY_PACKAGE such as the generation of C++ module (.pcm file) or rootmap files which are used by the interpreter to parse headers of libraries that are actually used?\r\n\r\n> My library has some headers that roofit will need. Can a ROOT_LINKER_LIBRARY manage with that?\r\n\r\nThey will be needed for interpreter? Here is an example of ROOT_LINKER_LIBRARY FTGL library: https://github.com/root-project/root/blob/master/graf3d/ftgl/CMakeLists.txt",
        "createdAt" : "2021-01-06T15:36:37Z",
        "updatedAt" : "2021-01-06T15:49:27Z",
        "lastEditedBy" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "tags" : [
        ]
      },
      {
        "id" : "5e163e68-21b7-448d-a546-d407b7854fa8",
        "parentId" : "8a3f815c-0df9-4c33-9a3d-eaeec45cbfe9",
        "authorId" : "2d39f8bb-2ed5-4585-8a79-bac20ce450c9",
        "body" : "@oshadura No i don't need these features, it's an internal use library, they're not needed for the interpreter. But in the example there's no mention to any headers, are these exported to the libraries that depend on it? Is it that ROOT_INSTALL_HEADERS() doing that job?\r\n",
        "createdAt" : "2021-01-07T08:11:45Z",
        "updatedAt" : "2021-01-07T08:12:41Z",
        "lastEditedBy" : "2d39f8bb-2ed5-4585-8a79-bac20ce450c9",
        "tags" : [
        ]
      },
      {
        "id" : "833685db-a7ef-4b63-9b0a-ce6117959aa1",
        "parentId" : "8a3f815c-0df9-4c33-9a3d-eaeec45cbfe9",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "(Modified after I actually looked at the code... Sorry!)\r\n\r\nPlease check that the *architecture* libraries\r\n- are non-`TObject`s\r\n- have types that do not need to be stored to ROOT files,\r\n- have headers that are never `#include`d into the interpreter (thus need no PCM).\r\nIf so I think we don't need `ROOT_LINKER_LIBRARY` but just the regular CMake version. And I bet we don't even need to install their headers.\r\n\r\nFor the generic library we're commenting on here these answers might be different.",
        "createdAt" : "2021-01-07T08:55:24Z",
        "updatedAt" : "2021-01-07T08:59:14Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "3a3625bc-1f40-4019-be59-be1f7263e0c1",
        "parentId" : "8a3f815c-0df9-4c33-9a3d-eaeec45cbfe9",
        "authorId" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "body" : "FYI I opened https://github.com/root-project/root/pull/7026 that should resolve this discussion",
        "createdAt" : "2021-01-13T14:32:02Z",
        "updatedAt" : "2021-01-13T14:32:03Z",
        "lastEditedBy" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e6447744c69a049906e47e789815bcd52475174",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@  DICTIONARY_OPTIONS\n    \"-writeEmptyRootPCM\"\n  #~  LINKDEF\n    #~  LinkDef1.h\n  DEPENDENCIES"
  },
  {
    "id" : "61c4d64e-5af0-47d9-b802-f1c9d140af91",
    "prId" : 6968,
    "prUrl" : "https://github.com/root-project/root/pull/6968#pullrequestreview-562578472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f47f9d47-dbf7-44a9-adb8-e0706cd190f0",
        "parentId" : null,
        "authorId" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "body" : "I have the same quiestion about naming for RooBatchCompute_GENERIC/RooBatchCompute_SSE4.1/RooBatchCompute_AVX and RooBatchCompute_AVX2 libraries, should they start with prefix ROOT? (cc @Axel-Naumann ) ",
        "createdAt" : "2021-01-05T10:00:24Z",
        "updatedAt" : "2021-01-05T10:02:10Z",
        "lastEditedBy" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "tags" : [
        ]
      },
      {
        "id" : "eebe603c-1629-49e0-b5c5-2f5620ed1c2b",
        "parentId" : "f47f9d47-dbf7-44a9-adb8-e0706cd190f0",
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "These are roofit libraries and we should keep the same convention ans tart their names with `Roo`. So I think th ecurrent name is fine!",
        "createdAt" : "2021-01-06T11:03:30Z",
        "updatedAt" : "2021-01-06T11:03:30Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e6447744c69a049906e47e789815bcd52475174",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +36,40 @@\n# Generic implementation for CPUs that don't support vector instruction sets.\nROOT_LINKER_LIBRARY(RooBatchCompute_GENERIC src/RooBatchCompute.cxx TYPE SHARED DEPENDENCIES RooFitCore RooBatchCompute)\n\n# Windows platform and ICC compiler need special code and testing, thus the feature has not been implemented yet for these."
  },
  {
    "id" : "3d5ecf40-8d3c-4d80-8b5e-3989919797e5",
    "prId" : 7026,
    "prUrl" : "https://github.com/root-project/root/pull/7026#pullrequestreview-567477533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "180dbcdf-4418-4f9f-bd7a-4a16b38389a7",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Why is this needed?",
        "createdAt" : "2021-01-13T16:29:42Z",
        "updatedAt" : "2021-01-13T16:29:42Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "32d1a047-7d0f-4d60-b0ab-dddbd20c5d3b",
        "parentId" : "180dbcdf-4418-4f9f-bd7a-4a16b38389a7",
        "authorId" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "body" : "I saw that RooBatchCompute.h is used directly in RooFitCore/RoofitMore and since ROOT_LINKER_LIBRARY function is not installing headers, but only .so file I thought you may need it?",
        "createdAt" : "2021-01-13T17:49:16Z",
        "updatedAt" : "2021-01-13T17:49:16Z",
        "lastEditedBy" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "tags" : [
        ]
      },
      {
        "id" : "88c05c9d-d39c-4086-891f-9bc14117969e",
        "parentId" : "180dbcdf-4418-4f9f-bd7a-4a16b38389a7",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Ah, I thought you have to list headers that should be installed. So this just installs all headers from `inc/`? That should be correct.",
        "createdAt" : "2021-01-13T17:51:07Z",
        "updatedAt" : "2021-01-13T17:51:07Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "2fafbed1-5daa-4dc9-b9f7-72af5676a1c8",
        "parentId" : "180dbcdf-4418-4f9f-bd7a-4a16b38389a7",
        "authorId" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "body" : "yup, everything from `inc` :+1: ",
        "createdAt" : "2021-01-13T17:52:20Z",
        "updatedAt" : "2021-01-13T17:52:20Z",
        "lastEditedBy" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c117f7a1a8b3d658e14d912e9ff589ab0f0669a",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +53,57 @@endif()\n\nROOT_INSTALL_HEADERS()"
  }
]