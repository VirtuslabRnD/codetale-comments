[
  {
    "id" : "27348136-b700-4c6e-aac8-4da813118114",
    "prId" : 8436,
    "prUrl" : "https://github.com/root-project/root/pull/8436#pullrequestreview-685345033",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ace84ef7-a27e-4d29-aeb1-54d0bb8f4c15",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "It would be good to keep the alpha-float overload, that's really more useful than a 255-based one... I'd rather see the RGB part be float than everything becoming char.",
        "createdAt" : "2021-06-16T12:08:25Z",
        "updatedAt" : "2021-06-16T12:08:25Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "fdd02530-971e-4db1-b678-07d0ee812038",
        "parentId" : "ace84ef7-a27e-4d29-aeb1-54d0bb8f4c15",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Problem, that alpha parameter stored as `uint8_t` and setting/getting it as float may confuse users.\r\n```\r\nroot [6] col.SetAlphaFloat(0.5)\r\nroot [7] col.GetAlphaFloat()\r\n(float) 0.498039f\r\nroot [8] \r\n```\r\n",
        "createdAt" : "2021-06-16T12:15:01Z",
        "updatedAt" : "2021-06-16T12:15:01Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "7dd7a26a-0fb5-4cf7-acfb-5c092b0dfd72",
        "parentId" : "ace84ef7-a27e-4d29-aeb1-54d0bb8f4c15",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Well, in principle we could just as well use float values internally, as per https://developer.mozilla.org/en-US/docs/Web/CSS/alpha-value - using the \"percentage\" notation.",
        "createdAt" : "2021-06-16T12:32:44Z",
        "updatedAt" : "2021-06-16T12:32:44Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "f117a1a8-4b7b-483a-98c9-84e204e0d97e",
        "parentId" : "ace84ef7-a27e-4d29-aeb1-54d0bb8f4c15",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Yes, but then it should be special type. \r\nAnd default value should be 0..255",
        "createdAt" : "2021-06-16T12:34:53Z",
        "updatedAt" : "2021-06-16T12:34:54Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "2123e973-5501-4f56-b2a7-093d4e996d38",
        "parentId" : "ace84ef7-a27e-4d29-aeb1-54d0bb8f4c15",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "I disagree :-)\r\n\r\nI think we need to state arguments for our opinions to make progress:\r\n\r\nTo me, it's more user-friendly to think in \"percent opacity\" than to estimate what \"194/255\" is. So for me, the default user interface should take floating point opacity.\r\n\r\nThis is so important that I'd rather change RGB to also be floating point, for consistency reason, than to have opacity char for consistency.\r\n\r\nThe argument that the internal representation is a char is an implementation detail: we might as well store it as float. Same for the RGB values, by the way. If the class size matters then fine, char it is - but I don't expect hoards of `RColor`s like we had with `TColor`, as nowadays these things get sampled from palettes, and we don't pre-allocate a large array of colors.\r\n\r\nWhat am I missing?",
        "createdAt" : "2021-06-16T13:01:19Z",
        "updatedAt" : "2021-06-16T15:42:39Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "b8ef630f-5376-45c1-b497-18551f8bcd4e",
        "parentId" : "ace84ef7-a27e-4d29-aeb1-54d0bb8f4c15",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Would it be consequent to use `0..1` range for all colors components - `R`, `G`, `B` and `A`? ",
        "createdAt" : "2021-06-16T14:30:31Z",
        "updatedAt" : "2021-06-16T14:30:31Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "de8e62c2-1ccd-40f6-95b8-da1cb68d18d6",
        "parentId" : "ace84ef7-a27e-4d29-aeb1-54d0bb8f4c15",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Yes, sorry, that's what I implicitly meant with\r\n\r\n> I'd rather change RGB to also be floating point\r\n\r\nThat'll also make us future-proof with 1 gazillion colors and RGBA channels being 0..64k ;-)",
        "createdAt" : "2021-06-16T15:42:26Z",
        "updatedAt" : "2021-06-16T15:43:32Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d91919a32e80c21d2229d33b31ee1a192fe22f2",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +28,32 @@   auto box1 = canvas->Draw<RBox>(RPadPos(0.1_normal, 0.3_normal), RPadPos(0.3_normal,0.6_normal));\n   box1->AttrBorder().SetColor(RColor::kBlue).SetWidth(5);\n   box1->AttrFill().SetColor(RColor(0, 255, 0, 127)); // 50% opaque\n\n   auto box2 = canvas->Draw<RBox>(RPadPos(0.4_normal, 0.2_normal), RPadPos(0.6_normal,0.7_normal));"
  }
]