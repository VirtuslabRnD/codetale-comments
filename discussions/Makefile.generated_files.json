[
  {
    "id" : "60ed678a-0727-4e79-8b3b-52f7f7fcacbb",
    "prId" : 39331,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39331#pullrequestreview-14826788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90d9caa3-8358-44c1-95f5-e7f45ee2e921",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "this go-list still feels pretty heavy as it does a complete dependency analysis of the given  package. Wouldn't a simple `ls -1 *.go` suffice here?",
        "createdAt" : "2017-01-02T08:34:50Z",
        "updatedAt" : "2017-01-02T08:34:50Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca1918ad314f53cd07dc9f09729873a0dd724d4d",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +278,282 @@\t     ./cmd/libs/go2idl/deepcopy-gen                                   \\\n\t     | grep --color=never \"^$(PRJ_SRC_PATH)/\"                         \\\n\t     | xargs ./hack/run-in-gopath.sh go list                          \\\n\t         -f '{{$$d := .Dir}}{{$$d}}{{\"\\n\"}}{{range .GoFiles}}{{$$d}}/{{.}}{{\"\\n\"}}{{end}}'  \\\n\t     | paste -sd' ' -                                                 \\"
  },
  {
    "id" : "9136d246-a963-4bbb-9096-71890dee11c3",
    "prId" : 33352,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33352#pullrequestreview-2677904",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02858b30-645e-45fd-9433-280e3814057a",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Sorry - I didn't review \"Update makefile to generate defaulters\" commit - it would be great if someone else could look into this one. @thockin ?\n",
        "createdAt" : "2016-10-04T09:58:00Z",
        "updatedAt" : "2016-10-19T01:07:44Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "957c0955aa0ca0dc4eb6b220def556525b9d880c",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +288,292 @@\n#\n# Defaulter generation\n#\n# Any package that wants defaulter functions generated must include a"
  },
  {
    "id" : "534855cf-b95e-44cc-a2d7-5d99ab5e8537",
    "prId" : 33352,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33352#pullrequestreview-4100210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bfe3bed-520e-4dad-bb4a-9559efd38aaf",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "What does \"covers\" mean?  It feels like a random word..\n",
        "createdAt" : "2016-10-13T05:48:28Z",
        "updatedAt" : "2016-10-19T01:07:44Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "69247ac9-e33b-436d-a603-a307d3ccb868",
        "parentId" : "4bfe3bed-520e-4dad-bb4a-9559efd38aaf",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Not random - used elsewhere in the code to describe the distinction between:\n1. A defaulting function that only defaults a particular struct but not its children (non-covering)\n2. A defaulting function that \"covers\" defaulting for itself and all nested children.\n\nOur existing defaulting functions are non-covering - you have to call them and all nested functions to be safe.  The new generated ObjectDefaulters are covering - you don't have to call nested functions.  Some of our top level ObjectDefaulters call functions that are covering as well (other ObjectDefaulters).  I wanted to enable the specific use case of someone writing a custom defaulter that completely handles the types underneath it (overriding the generic defaulters defined in other packages).\n",
        "createdAt" : "2016-10-13T15:31:44Z",
        "updatedAt" : "2016-10-19T01:07:44Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "957c0955aa0ca0dc4eb6b220def556525b9d880c",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +299,303 @@#       false: never generate a defaulter for this type\n#     on functions:\n#       covers: if the function name matches SetDefault_NAME, instructs\n#               the generator not to recurse\n#     on packages:"
  },
  {
    "id" : "9c34117f-c301-43af-9472-0df33e60c3bf",
    "prId" : 31468,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdcf9c56-a850-4ad9-98cb-49e0c9303d9d",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Thanks for detailed comments :)\n",
        "createdAt" : "2016-09-09T21:50:35Z",
        "updatedAt" : "2016-09-13T07:02:53Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "469c7d37f306f3e5b46dc9c91a8b4b15762d5991",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +377,381 @@# the $(OPENAPI_GEN).mk, above.\n#\n# A word on the need to touch: This rule might trigger if, for example, a\n# non-Go file was added or deleted from a directory on which this depends.\n# This target needs to be reconsidered, but Go realizes it doesn't actually"
  },
  {
    "id" : "08cd8c1f-bea2-4f7d-b6a3-a64bf920569e",
    "prId" : 29320,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1693795e-6cea-449a-b446-00c691b9885a",
        "parentId" : null,
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "Since we are calling this using an explicit `$(MAKE) -f Makefile.$@ $@`, we should also set the SHELL here:\n\n```\nSHELL := /bin/bash\n```\n\nI had to do this to get this to get `make generated_files` to work \n",
        "createdAt" : "2016-07-21T01:43:49Z",
        "updatedAt" : "2016-07-21T16:31:45Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "bcd7bcc3-ce20-46c7-8bb7-be8267c7de39",
        "parentId" : "1693795e-6cea-449a-b446-00c691b9885a",
        "authorId" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "body" : "this works too. I do not understand why. What shell is it running? `/bin/sh`?\n",
        "createdAt" : "2016-07-21T01:48:32Z",
        "updatedAt" : "2016-07-21T16:31:45Z",
        "lastEditedBy" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "tags" : [
        ]
      },
      {
        "id" : "792d6729-5a4c-46e9-8426-239e6259978e",
        "parentId" : "1693795e-6cea-449a-b446-00c691b9885a",
        "authorId" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "body" : "Yes, the [default shell is `/bin/sh`](https://www.gnu.org/software/make/manual/html_node/Choosing-the-Shell.html#Choosing-the-Shell). I wonder if we should enforce this `bash`-ness, or figure out what is bash specific and change it.\n",
        "createdAt" : "2016-07-21T02:52:24Z",
        "updatedAt" : "2016-07-21T16:31:45Z",
        "lastEditedBy" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "tags" : [
        ]
      },
      {
        "id" : "6885f74a-765d-4ebb-8fac-8135951c5b7b",
        "parentId" : "1693795e-6cea-449a-b446-00c691b9885a",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "That's super annoying.  In my env it seems to get passed through because of .EXPORT_ALL_VARIABLES.\n\nHave I ever mentioned how I feel about MacOS ?  Bringing UNIX back to the 70s.\n\nI have re-pushed with explicit SHELL setting in the secondary Makefile.\n",
        "createdAt" : "2016-07-21T16:33:01Z",
        "updatedAt" : "2016-07-21T16:33:01Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "ce987430-7ade-4fc1-8788-35f87a77b393",
        "parentId" : "1693795e-6cea-449a-b446-00c691b9885a",
        "authorId" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "body" : "You'll hear no argument from me. I'll give this another go around and report back.\n",
        "createdAt" : "2016-07-22T00:11:19Z",
        "updatedAt" : "2016-07-22T00:11:19Z",
        "lastEditedBy" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "tags" : [
        ]
      }
    ],
    "commit" : "665966746912ea28b5511f55b75540187a4ef907",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +12,16 @@# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Don't allow an implicit 'all' rule.  This is not a user-facing file.\nifeq ($(MAKECMDGOALS),)"
  }
]