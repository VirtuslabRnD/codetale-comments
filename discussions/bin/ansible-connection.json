[
  {
    "id" : "4a370e8c-a9d3-4646-b9fd-80c76d7ada43",
    "prId" : 39223,
    "prUrl" : "https://github.com/ansible/ansible/pull/39223#pullrequestreview-114865675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d8a9f0e-b85b-4070-a69a-7e5db55e4e5d",
        "parentId" : null,
        "authorId" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "body" : "I think it's obvious from the decorator that it's a CM.\r\nI'd be nicer to read smth like:\r\n```\r\nAcquire a lock at a given path and clean it up upon release.\r\n```",
        "createdAt" : "2018-04-24T16:28:14Z",
        "updatedAt" : "2018-04-24T16:28:15Z",
        "lastEditedBy" : "4ffac6b8-d7eb-449a-8c43-463d9fd5587a",
        "tags" : [
        ]
      }
    ],
    "commit" : "ead981a5dfc89048a68516ff2d249b2a1277b089",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +39,43 @@def file_lock(lock_path):\n    \"\"\"\n    Uses contextmanager to create and release a file lock based on the\n    given path. This allows us to create locks using `with file_lock()`\n    to prevent deadlocks related to failure to unlock properly."
  },
  {
    "id" : "8d03a9dd-d6b1-45f6-b2a4-d6e749bf38be",
    "prId" : 39330,
    "prUrl" : "https://github.com/ansible/ansible/pull/39330#pullrequestreview-115343564",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33f99f5b-b2d0-4069-8563-166180baabc8",
        "parentId" : null,
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "I would still use socket_path + '.lock' as the remote_host is not really unique per socket",
        "createdAt" : "2018-04-25T20:33:25Z",
        "updatedAt" : "2018-04-25T20:37:04Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "151b854b4c8fda646348a59e34b34e66330e01e4",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +227,231 @@        makedirs_safe(tmp_path)\n\n        lock_path = unfrackpath(\"%s/.ansible_pc_lock_%s\" % (tmp_path, play_context.remote_addr))\n        socket_path = unfrackpath(cp % dict(directory=tmp_path))\n"
  }
]