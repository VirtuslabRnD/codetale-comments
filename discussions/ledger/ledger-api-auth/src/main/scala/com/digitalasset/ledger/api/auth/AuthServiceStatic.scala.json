[
  {
    "id" : "c10c6c72-a5b7-4d3a-8c7a-2906f6884d4e",
    "prId" : 3286,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "454d28f5-623b-45e3-bd30-4cef74fb2880",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Out of curiosity, what is the reason for adding `final` to all classes in this PR?",
        "createdAt" : "2019-10-30T10:31:59Z",
        "updatedAt" : "2019-10-31T15:48:18Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "4a4c71e6-ce04-41fc-bfd9-d797c66584b3",
        "parentId" : "454d28f5-623b-45e3-bd30-4cef74fb2880",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "If a class is not designed to be extended, it's always better to make it explicit. It favors composition over inheritance. \"Effective Java\" has a chapter on the topic, and it's a good default chosen by Kotlin (you have to explicitly mark classes as `open` to make them extendable). On top of it, it also enables the runtime to inline code more aggressively. I try not be pushy about it, but given the chance I'll abundantly spread my classes with `final`. :wink: ",
        "createdAt" : "2019-10-30T17:27:25Z",
        "updatedAt" : "2019-10-31T15:48:18Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "20a4635add5f912c6e6c5fd78e06de61846a1171",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +13,17 @@  * Note: This AuthService is meant to be used for testing purposes only.\n  */\nfinal class AuthServiceStatic(claims: PartialFunction[String, Claims]) extends AuthService {\n  override def decodeMetadata(headers: Metadata): CompletionStage[Claims] = {\n    if (headers.containsKey(AuthServiceStatic.AUTHORIZATION_KEY)) {"
  }
]