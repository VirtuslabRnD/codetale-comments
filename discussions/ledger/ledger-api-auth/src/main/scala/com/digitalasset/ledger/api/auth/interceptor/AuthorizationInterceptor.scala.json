[
  {
    "id" : "09b41313-c782-4984-9a9a-eec5e8dcfd0f",
    "prId" : 8969,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8969",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "800b3761-8a33-4f44-846b-05b798e84f7e",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "We need to return a `ServerCall.Listener[Nothing]()` when the authentication failed, instead of a listener with context",
        "createdAt" : "2021-03-01T18:17:19Z",
        "updatedAt" : "2021-03-02T16:19:05Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "e788bc7f-f3c6-42f0-95d7-1db8295e875a",
        "parentId" : "800b3761-8a33-4f44-846b-05b798e84f7e",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "Please correct me if I'm wrong but this way we would lose all the information from the context. The idea of changes in this PR is to deliberately allow even unauthenticated calls at the interceptor level, enrich the context with such information and let service authorisation wrappers decide if the `ClaimSet` from the context of a call is sufficient to call a method.\r\nSide note: Maybe it would be worth renaming `AuthorizationInterceptor` to `AuthenticationInterceptor`.",
        "createdAt" : "2021-03-02T08:53:18Z",
        "updatedAt" : "2021-03-02T16:19:05Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      },
      {
        "id" : "e9356042-fd2b-4fcf-8a73-d7628ef1dc98",
        "parentId" : "800b3761-8a33-4f44-846b-05b798e84f7e",
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "You are right about that.",
        "createdAt" : "2021-03-03T08:32:23Z",
        "updatedAt" : "2021-03-03T08:32:24Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f41f066c7e23265a477278a7407123c47b008b93",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +52,56 @@            new ServerCall.Listener[Nothing]() {}\n          case Success(claimSet) =>\n            val nextCtx = prevCtx.withValue(AuthorizationInterceptor.contextKeyClaimSet, claimSet)\n            // Contexts.interceptCall() creates a listener that wraps all methods of `nextListener`\n            // such that `Context.current` returns `nextCtx`."
  },
  {
    "id" : "26137d4c-5a4e-42a7-9d25-ea4ab42ce8b0",
    "prId" : 4485,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4485",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c973ec2c-7f5d-4f56-8d8d-f8035d643510",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "This assumes that the AuthService returns empty claims if the request is not authenticated (missing/invalid token). That leaves the AuthService no way to signal that the user was authenticated, but has no authorization (not even for the public services).\r\n\r\nThis is not a big issue, but we should add a corresponding comment to the docs of `AuthService.decodeMetadata`.",
        "createdAt" : "2020-02-12T20:55:54Z",
        "updatedAt" : "2020-02-17T10:18:01Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "cba11b54-61fd-4046-8e90-de3702de3eb9",
        "parentId" : "c973ec2c-7f5d-4f56-8d8d-f8035d643510",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I thought you needed at least `ClaimPublic` to access public services.",
        "createdAt" : "2020-02-13T08:04:55Z",
        "updatedAt" : "2020-02-17T10:18:01Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "c7855a22-de8f-4f79-a600-3a0bba55be20",
        "parentId" : "c973ec2c-7f5d-4f56-8d8d-f8035d643510",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "If that wasn't the case then I have no idea why the tests are green. :smile: ",
        "createdAt" : "2020-02-13T08:05:54Z",
        "updatedAt" : "2020-02-17T10:18:01Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "b9817e2b-1140-4c2d-92d7-237526b6161a",
        "parentId" : "c973ec2c-7f5d-4f56-8d8d-f8035d643510",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "> I thought you needed at least ClaimPublic to access public services.\r\n\r\nThat is correct. The sandbox AuthService will always include at least a `ClaimPublic` for any valid token, but this might not be the case for other AuthService implementations.\r\n\r\nThat's why I thought we should add a note at rc/main/scala/com/digitalasset/ledger/api/auth/AuthService.scala#L26, something like:\r\n\r\n```scala\r\n/**\r\nReturn empty [[Claims]] to reject requests with a UNAUTHENTICATED error status.\r\nReturn [[Claims]] with only a single [[ClaimPublic]] claim to reject all non-public requests with a PERMISSION_DENIED status.\r\nReturn a failed future to reject requests with an INTERNAL error status.\r\n*/\r\n```",
        "createdAt" : "2020-02-17T10:00:46Z",
        "updatedAt" : "2020-02-17T10:18:01Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "d66e7e13-a5b8-4af0-b3c0-00f2051f2d15",
        "parentId" : "c973ec2c-7f5d-4f56-8d8d-f8035d643510",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Will do, thanks!",
        "createdAt" : "2020-02-17T10:16:14Z",
        "updatedAt" : "2020-02-17T10:18:01Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "e55a6ae4-5020-4ed0-852c-2125e8c7f345",
        "parentId" : "c973ec2c-7f5d-4f56-8d8d-f8035d643510",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/4485/commits/90490b862b1cef7095149d345f5792399fe9ce05\r\nThank you for the clarification!",
        "createdAt" : "2020-02-17T10:18:20Z",
        "updatedAt" : "2020-02-17T10:18:21Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "90490b862b1cef7095149d345f5792399fe9ce05",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +57,61 @@            logger.debug(s\"Auth metadata decoded into empty claims, returning UNAUTHENTICATED\")\n            call.close(Status.UNAUTHENTICATED, new Metadata())\n            new ServerCall.Listener[Nothing]() {}\n          case Success(claims) =>\n            val nextCtx = prevCtx.withValue(contextKeyClaim, claims)"
  }
]