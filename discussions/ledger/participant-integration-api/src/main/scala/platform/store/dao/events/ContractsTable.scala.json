[
  {
    "id" : "9059efd6-4a35-4666-95ac-101eabe9bd20",
    "prId" : 9948,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a0bdfff-88ce-44aa-b777-528b867787eb",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I think this could benefit from some comments somewhere on why this is a safe thing to do.",
        "createdAt" : "2021-06-10T07:54:46Z",
        "updatedAt" : "2021-06-10T07:58:54Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c8be0693-350f-4a8e-afc9-c1533c922e94",
        "parentId" : "5a0bdfff-88ce-44aa-b777-528b867787eb",
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "Done",
        "createdAt" : "2021-06-10T09:37:25Z",
        "updatedAt" : "2021-06-10T09:37:25Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "69943770d3fdde5f6a98783cc1289165cac497a4",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +32,36 @@  // either in a previous or current transaction. What we are left with effectively are contracts covered\n  // by case a).\n  private val nullifyPastKeysQuery =\n    s\"update participant_contracts set create_key_hash = null where create_key_hash = {create_key_hash}\"\n"
  },
  {
    "id" : "a6c2ed2e-9d94-492b-8060-3e84130ce681",
    "prId" : 9948,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "475ee8d3-1936-421e-905f-377c3dbc09c1",
        "parentId" : null,
        "authorId" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "body" : "Is there a possibility that nulling out key hashes may break multi-key semantics in canton? cc @andreaslochbihler-da \r\n\r\nThe concern would be that some contracts with duplicate keys would no longer be retrievable by key once more recently created \"duplicates\" are archived.",
        "createdAt" : "2021-06-10T07:58:02Z",
        "updatedAt" : "2021-06-10T08:02:28Z",
        "lastEditedBy" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "tags" : [
        ]
      },
      {
        "id" : "a7d2e432-3706-46fd-a5e7-fa85848616c4",
        "parentId" : "475ee8d3-1936-421e-905f-377c3dbc09c1",
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "Yes, I'm pretty sure that this change breaks multi-key semantics, as there it does not hold that seeing a create with a key means that all previous creates with that key must have been archived.\r\n\r\nThat said: this change is for the legacy IndexDB schema only. In the append-only schema it is not required.",
        "createdAt" : "2021-06-10T08:00:14Z",
        "updatedAt" : "2021-06-10T08:00:14Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      },
      {
        "id" : "f99867f6-0350-46d0-bf70-9f1035773de5",
        "parentId" : "475ee8d3-1936-421e-905f-377c3dbc09c1",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We don’t make any promises though which contract you can fetch in multi-key semantics. So it’s not entirely clear to me that this actually breaks anything.",
        "createdAt" : "2021-06-10T08:01:33Z",
        "updatedAt" : "2021-06-10T08:01:34Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "71a8ca2f-fcc0-4549-98c0-add3a806aba3",
        "parentId" : "475ee8d3-1936-421e-905f-377c3dbc09c1",
        "authorId" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "body" : "But in the following scenario:\r\n\r\n1. Create contract1 with key key1\r\n2. Create contract2 with key key1 (nulls out contract1's key1 reference)\r\n3. Archive contract2\r\n4. FetchByKey(key1) would fail to look up contract1\r\n\r\nThe canton tests still run on the legacy index.",
        "createdAt" : "2021-06-10T08:12:57Z",
        "updatedAt" : "2021-06-10T08:58:30Z",
        "lastEditedBy" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "tags" : [
        ]
      },
      {
        "id" : "b0a4b268-c43a-4c6c-b773-63c21198bf6b",
        "parentId" : "475ee8d3-1936-421e-905f-377c3dbc09c1",
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "Indeed, this changes the behavior. I agree with @cocreature that this is probably still within the guarantees for \"fetchSome\" semantics. But the UX will degrade with this change even on a single non-UCK domains. Example topology: Alice (key maintainer) on P1, Bob on P2.\r\n\r\n1. Alice creates a contract with key and observer Bob. Bob concurrently creates another contract with the same key. Due to concurrency, both transactions are accepted. \r\n2. Bob archives his contract.\r\n3. Alice tries to lookup the key and finds nothing, even though her contract is still active (and reported as active by the ACS service).\r\n\r\nI haven't tried it out but I suspect that this scenario used to work in Canton.",
        "createdAt" : "2021-06-10T08:15:08Z",
        "updatedAt" : "2021-06-10T08:15:08Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "05377198-4051-43f4-b826-29ccdf8e5150",
        "parentId" : "475ee8d3-1936-421e-905f-377c3dbc09c1",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I think it’s somewhat debatable if UX degrades or not. If you do step 2 and 3 in a single transaction you get `Nothing` at the moment, if you do it over multiple transactions you get a key (assuming your suspicion is correct). It’s not clear to me whether changing the multi-transaction behavior to match how things work within a single transaction is really worse.\r\nMore generally, I think this gets to my general point that multi-key semantics are ill-defined at the moment and I think worrying about UX without even being clear on what exactly the current semantics are is not all that productive.",
        "createdAt" : "2021-06-10T08:30:10Z",
        "updatedAt" : "2021-06-10T08:30:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5ce9ddcf-d2b5-48dd-bfa7-5b6fcbdebb37",
        "parentId" : "475ee8d3-1936-421e-905f-377c3dbc09c1",
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "How would you be able to merge steps 2 and 3? They are submitted over distinct participants.",
        "createdAt" : "2021-06-10T08:46:46Z",
        "updatedAt" : "2021-06-10T08:46:46Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "3a258570-8640-417a-ba70-fbdd1cc348db",
        "parentId" : "475ee8d3-1936-421e-905f-377c3dbc09c1",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I can run a submission as Alice that gets authority from Bob somehow to archive the contract. And more generally, I think we shouldn’t make the behavior here topology dependent.",
        "createdAt" : "2021-06-10T08:48:19Z",
        "updatedAt" : "2021-06-10T08:48:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "db1d291f-5f18-4398-8f46-13e5318dbffe",
        "parentId" : "475ee8d3-1936-421e-905f-377c3dbc09c1",
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "> And more generally, I think we shouldn’t make the behavior here topology dependent.\r\n\r\nI agree that the *allowed* behaviors should not depend on the topology. But the *observed* behavior does depend on it, because different topologies lead to different partial knowledge.",
        "createdAt" : "2021-06-10T08:53:59Z",
        "updatedAt" : "2021-06-10T08:53:59Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "be7eaaad-3804-4d74-9635-1a436f396410",
        "parentId" : "475ee8d3-1936-421e-905f-377c3dbc09c1",
        "authorId" : "11e7ec00-9b2f-47d2-abd0-12246c0f9845",
        "body" : "@cocreature @bame-da @meiersi-da @mziolekda @gerolf-da  @vivd-da @sormeter \r\n\r\nI've discussed this with @oliverse-da and @andreaslochbihler-da.\r\n\r\n1. This patch will very much likely break current Canton on old schema running with non-UCK mode.\r\n2. We acknowledge the urgency of this change and ask you to not hesitate to proceed with his on the old schema. \r\n3. We assume that Canton GA and DDF4O for HKEX will be on the parallel indexer schema where this is not an issue.\r\n4. Until we have fully migrated to the new indexer schema, we will mark all upcoming Canton releases as \"DEFECT IN CERTAIN CASES\" (June, July).\r\n5. We will just disable any test that fails as a result of this change for now.\r\n6. @oliverse-da will first finish his work on adding DAML exceptions to Canton before enabling the parallel indexer schema as default.",
        "createdAt" : "2021-06-10T09:04:40Z",
        "updatedAt" : "2021-06-10T09:05:03Z",
        "lastEditedBy" : "11e7ec00-9b2f-47d2-abd0-12246c0f9845",
        "tags" : [
        ]
      },
      {
        "id" : "77bcd259-a5c4-4aab-8f94-c2e56ac853e0",
        "parentId" : "475ee8d3-1936-421e-905f-377c3dbc09c1",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I think you’re missing a crucial point here: Canton GA and DDF4O run in UCK mode and have to. NON-UCK mode has zero data continuity guarantees since we have not specd multi-key semantics in any way that we can keep stable in speedy and you fall over if they change.",
        "createdAt" : "2021-06-10T10:03:21Z",
        "updatedAt" : "2021-06-10T10:03:22Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b9a9269c-7077-4dbd-a1b0-6dc6b73ea7a8",
        "parentId" : "475ee8d3-1936-421e-905f-377c3dbc09c1",
        "authorId" : "11e7ec00-9b2f-47d2-abd0-12246c0f9845",
        "body" : "@cocreature there are practical and theoretical issues. we'll have to pin down the semantics pretty soon once we are following up with the multi-domain MVP GA release, but that is nothing that we need to do in Q2. however, the issue that we face right now is that this change is going to break quite a few of our existing tests. so the above path is to deal with these breaks. and data continuity is something we didn't promise anyway as of today.",
        "createdAt" : "2021-06-10T10:29:36Z",
        "updatedAt" : "2021-06-10T10:29:48Z",
        "lastEditedBy" : "11e7ec00-9b2f-47d2-abd0-12246c0f9845",
        "tags" : [
        ]
      },
      {
        "id" : "a5572f90-0cf3-4259-9203-459317230032",
        "parentId" : "475ee8d3-1936-421e-905f-377c3dbc09c1",
        "authorId" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "body" : "Canton follow-up tracked in https://github.com/DACH-NY/canton/issues/6493",
        "createdAt" : "2021-06-30T14:01:24Z",
        "updatedAt" : "2021-06-30T14:01:24Z",
        "lastEditedBy" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "tags" : [
        ]
      }
    ],
    "commit" : "69943770d3fdde5f6a98783cc1289165cac497a4",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +33,37 @@  // by case a).\n  private val nullifyPastKeysQuery =\n    s\"update participant_contracts set create_key_hash = null where create_key_hash = {create_key_hash}\"\n\n  private def nullifyPastKeys(contractKeyHash: Array[Byte]): Vector[NamedParameter] ="
  },
  {
    "id" : "64a2ce2c-953c-4394-af91-65e714db3d96",
    "prId" : 9281,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5a2ccee-250a-4021-a1c8-610997c51b83",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Thanks for fixing this!",
        "createdAt" : "2021-03-31T08:57:19Z",
        "updatedAt" : "2021-03-31T09:06:51Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "36e9b32168b10be3738d0f289f01e5438c9e2d92",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +84,88 @@  private def notFound(contractIds: Set[ContractId]): Throwable =\n    new IllegalArgumentException(\n      s\"One or more of the following contract identifiers has not been found: ${contractIds.map(_.coid).mkString(\", \")}\"\n    )\n"
  },
  {
    "id" : "ec10a9cb-d84d-46af-8924-65272590e2cc",
    "prId" : 8019,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71d15a20-f8b8-4aa8-953c-2d9ff5181100",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "```suggestion\r\n      insertContracts = batch(insertContractQuery, inserts),\r\n```",
        "createdAt" : "2020-11-23T15:02:54Z",
        "updatedAt" : "2020-11-23T19:15:07Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "88a026e0-6f3c-485b-a94e-893e8625fec8",
        "parentId" : "71d15a20-f8b8-4aa8-953c-2d9ff5181100",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Addressed in https://github.com/digital-asset/daml/pull/8139",
        "createdAt" : "2020-12-02T15:28:31Z",
        "updatedAt" : "2020-12-02T15:28:31Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f23fbbff77e4c9db4138e2ceb66ccabf40580ed2",
    "line" : 220,
    "diffHunk" : "@@ -1,1 +78,82 @@    ContractsTable.Executables(\n      deleteContracts = batch(deleteContractQuery, deletes),\n      insertContracts = batch(insertContractQuery, inserts)\n    )\n  }"
  }
]