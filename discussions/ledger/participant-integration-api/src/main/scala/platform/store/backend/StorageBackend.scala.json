[
  {
    "id" : "a5b840a5-db70-4e52-86e5-7235f96d2f87",
    "prId" : 9959,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc265b66-554a-4cae-a82c-70e142166c95",
        "parentId" : null,
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Nice one!",
        "createdAt" : "2021-06-11T14:09:47Z",
        "updatedAt" : "2021-06-11T14:09:47Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "3b3b0a0a-eb76-4eb7-a87e-48de05fda9f7",
        "parentId" : "bc265b66-554a-4cae-a82c-70e142166c95",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "Initiative credits go to @meiersi-da ",
        "createdAt" : "2021-06-11T17:08:35Z",
        "updatedAt" : "2021-06-11T17:08:35Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9865392272b3d81dbe357cfcd0305b66c8bcc6",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@\n/** Encapsulates the interface which hides database technology specific implementations.\n  * Naming convention for the interface methods, which requiring Connection:\n  *  - read operations are represented as nouns (plural, singular form indicates cardinality)\n  *  - write operations are represented as verbs"
  },
  {
    "id" : "d2624548-30d9-4d0d-80c1-34b09fd23670",
    "prId" : 9959,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64e37931-1663-4fa2-a6bd-6c7c84cabbaf",
        "parentId" : null,
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "No implicits? Are they that bad?",
        "createdAt" : "2021-06-11T14:15:17Z",
        "updatedAt" : "2021-06-11T14:15:17Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "0ba6bb52-47c1-4a18-8c3e-391a3097bd35",
        "parentId" : "64e37931-1663-4fa2-a6bd-6c7c84cabbaf",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "depends on who you asking",
        "createdAt" : "2021-06-11T17:08:01Z",
        "updatedAt" : "2021-06-11T17:08:01Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9865392272b3d81dbe357cfcd0305b66c8bcc6",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +44,48 @@    with ContractStorageBackend\n    with EventStorageBackend {\n  def reset(connection: Connection): Unit\n  def enforceSynchronousCommit(connection: Connection): Unit\n  def duplicateKeyError: String // TODO: Avoid brittleness of error message checks"
  },
  {
    "id" : "0fb7ced5-0aaa-4b7b-8047-392974187bcc",
    "prId" : 9959,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8528aa4f-b437-412c-af22-ca9ccbbbfa67",
        "parentId" : null,
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Do you think it makes sense to move this method to the parameters-related trait?",
        "createdAt" : "2021-06-11T14:26:26Z",
        "updatedAt" : "2021-06-11T14:26:42Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "eed06824-af74-4455-87c1-cf1ad7df0ada",
        "parentId" : "8528aa4f-b437-412c-af22-ca9ccbbbfa67",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "not really, this has nothing to do with parameters, it is a search in the events view",
        "createdAt" : "2021-06-11T16:54:50Z",
        "updatedAt" : "2021-06-11T16:54:50Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "1eea86b9-26db-4092-a2f4-b1fff3d5cbc3",
        "parentId" : "8528aa4f-b437-412c-af22-ca9ccbbbfa67",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Right",
        "createdAt" : "2021-06-11T17:44:42Z",
        "updatedAt" : "2021-06-11T17:44:43Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9865392272b3d81dbe357cfcd0305b66c8bcc6",
    "line" : 322,
    "diffHunk" : "@@ -1,1 +318,322 @@      fetchSizeHint: Option[Int],\n  )(connection: Connection): Vector[EventsTable.Entry[Raw.TreeEvent]]\n  def maxEventSeqIdForOffset(offset: Offset)(connection: Connection): Option[Long]\n  def rawEvents(startExclusive: Long, endInclusive: Long)(\n      connection: Connection"
  },
  {
    "id" : "c982eea8-92c9-4ba7-b1ef-39c1391b7815",
    "prId" : 9959,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffc1cfe1-dd03-4e35-a6f3-2a402c1c4c6f",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "I was first surprised that you use the curried form without using implicits, but this form makes it easier to pass these methods to `DbDispatcher.executeSql(Connection => T)` :+1:",
        "createdAt" : "2021-06-14T09:20:35Z",
        "updatedAt" : "2021-06-14T09:27:08Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9865392272b3d81dbe357cfcd0305b66c8bcc6",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +86,90 @@    * @param params     the parameters\n    */\n  def updateParams(params: StorageBackend.Params)(connection: Connection): Unit\n\n  /** Query the ledgerEnd, read from the parameters table."
  },
  {
    "id" : "9a64f106-effd-4d4a-8f38-0cf092be22a4",
    "prId" : 9561,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10400a8d-146b-4bd6-ac90-c9baa9cc6021",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "```suggestion\r\n  final case class LedgerEnd(lastOffset: Option[Offset], lastEventSeqId: Option[Long])\r\n```\r\nSame for Params above",
        "createdAt" : "2021-05-04T15:39:27Z",
        "updatedAt" : "2021-05-06T15:47:17Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "b1312c07-e86d-4c3c-bc57-ee8597eaa455",
        "parentId" : "10400a8d-146b-4bd6-ac90-c9baa9cc6021",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "Maybe I missing here something? Why put final here and not everywhere else?\r\nScala is broad and you could do OO in scala yes, but where I come from I wouldn't ever do extend from a class, there are so many nicer functional ways to compose. It was some time ago I was working with hardcore OO language like java, but if I remember correctly even there is the saying to prefer composition to inheritance. So I sort of assumed in scala it is also ok to follow the same principle (even if not abandoning the whole OO like entirely ;) ), which would make all these final-s an unnecessary clutter to me.\r\nEspecially in case classes inheritance can be tricky with the hashcode equals contract, so AFAIK it is an antipattern.",
        "createdAt" : "2021-05-05T07:52:07Z",
        "updatedAt" : "2021-05-06T15:47:17Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "59c9dedb60b09f63a983a86b6c2a587d49193ac8",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +22,26 @@  case class Params(ledgerEnd: Offset, eventSeqId: Long, configuration: Option[Array[Byte]])\n\n  case class LedgerEnd(lastOffset: Option[Offset], lastEventSeqId: Option[Long])\n\n  def of(dbType: DbType): StorageBackend[_] ="
  },
  {
    "id" : "df9d5e19-3198-4931-ab4f-e3338d7ccb12",
    "prId" : 9561,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26e3e4a8-6bae-43f7-923e-f1950fdf2fb0",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Both methods have the same signature, it's not obvious what the difference is. Maybe add a description?",
        "createdAt" : "2021-05-05T20:48:16Z",
        "updatedAt" : "2021-05-06T15:47:18Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "99247d7a-f486-4f7a-9ead-ff86a3e4004a",
        "parentId" : "26e3e4a8-6bae-43f7-923e-f1950fdf2fb0",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "good point, I will add a todo to beef up scaladoc for this trait",
        "createdAt" : "2021-05-06T10:59:11Z",
        "updatedAt" : "2021-05-06T15:47:18Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "59c9dedb60b09f63a983a86b6c2a587d49193ac8",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +16,20 @@  def updateParams(connection: Connection, params: StorageBackend.Params): Unit\n  def initialize(connection: Connection): StorageBackend.LedgerEnd\n  def ledgerEnd(connection: Connection): StorageBackend.LedgerEnd\n}\n"
  }
]