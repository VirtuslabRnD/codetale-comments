[
  {
    "id" : "593e4695-77b0-4274-a8af-4da884c1e19c",
    "prId" : 8423,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22292eab-417d-4798-a90f-320df4f1e621",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Does this situation call for unsafe operations, or should we use `.to(ArraySeq)` here instead?",
        "createdAt" : "2021-01-07T17:35:51Z",
        "updatedAt" : "2021-01-07T19:35:41Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "de584342-5efe-47ce-8c70-f30278de3293",
        "parentId" : "22292eab-417d-4798-a90f-320df4f1e621",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Afaict this is safe since we get the array directly from the parser and don’t let it escape anywhere. It looked like it might be performance critical for some cases of the ledger not do have a conversion here but I don’t know if this is actually a bottleneck or not. @gerolf-da what do you think?\r\n\r\nIn case it’s not obvious, we need this because for 2.13 scalapb generates code expecting an immutable Seq and `Array` is not implicitly converted to that. Alternatively we could also change what scalapb but immutable seqs seems very sensible to me.",
        "createdAt" : "2021-01-07T17:41:21Z",
        "updatedAt" : "2021-01-07T19:35:41Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "3b6c510b-c39d-4c66-9c0b-9055942a8f13",
        "parentId" : "22292eab-417d-4798-a90f-320df4f1e621",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "@mziolekda: Could I redirect this question to you please?",
        "createdAt" : "2021-01-07T17:47:39Z",
        "updatedAt" : "2021-01-07T19:35:41Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "7bc5a792-40ea-4447-9b05-65aa31658a98",
        "parentId" : "22292eab-417d-4798-a90f-320df4f1e621",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "This should not be a bottleneck, strictly speaking, but it would probably be good to be performance-conscious here.\r\n\r\nAnother alternative would be to use `anorm.SqlParser.list` instead of `anorm.SqlParser.array` to extract fields, but using `unsafeWrapArray` seems to be the most performance-conscious one, but without an experiment this is just an opinion. For now I would keep the behavior as close as possible to the existing one.",
        "createdAt" : "2021-01-07T18:55:20Z",
        "updatedAt" : "2021-01-07T19:35:41Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "f412b55c-f88a-4a01-b043-064dd9da2986",
        "parentId" : "22292eab-417d-4798-a90f-320df4f1e621",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Does `unsafeWrapArray` count as keeping it as close to the existing one as possible or are you suggesting something else? I’m not quite sure how or if the `Array` got converted before.",
        "createdAt" : "2021-01-07T18:57:03Z",
        "updatedAt" : "2021-01-07T19:35:41Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9879f3cb-b91e-4341-937b-a079f145b9a2",
        "parentId" : "22292eab-417d-4798-a90f-320df4f1e621",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "looking through it, it seems like it did a copy before so I guess I could just throw `toIndexedSeq` in a few places which I believe happened implciitly before but I have a hard time seeing how that could possible be more efficient than not copying.",
        "createdAt" : "2021-01-07T19:00:36Z",
        "updatedAt" : "2021-01-07T19:35:41Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c2e3b473-95cb-40ff-89c2-a90f294c3269",
        "parentId" : "22292eab-417d-4798-a90f-320df4f1e621",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Mmmh, I suggested to \"the behavior as close as possible to the existing one\" in the hope that the previous operation actually skipped the copy. If `unsafeWrapArray` works I would go for it. Perhaps adding a comment as to why it's ok to use it here would be useful for future readers.",
        "createdAt" : "2021-01-07T19:23:25Z",
        "updatedAt" : "2021-01-07T19:35:41Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "2fca0f17-d0d2-4c00-a67d-edd61e20ebcb",
        "parentId" : "22292eab-417d-4798-a90f-320df4f1e621",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I think you might be right. For 2.13, I get\r\n```\r\nledger/participant-integration-api/src/main/scala/platform/store/dao/events/Raw.scala:75: warning: method copyArrayToImmutableIndexedSeq in class LowPriorityImplicits2 is deprecated (since 2.13.0): Implicit conversions from Array to immutable.IndexedSeq are implemented by copying; Use the more efficient non-copying ArraySeq.unsafeWrapArray or an explicit toIndexedSeq call\r\n        signatories = createSignatories,\r\n```\r\nSo the 2.13 default is to copy which clearly sucks. The 2.12 default is to use `WrappedArray` since there we still operate on collection.Seq which afaict does not copy.\r\n\r\nSo `unsafeWrappedArray` seems as close as we can get provided we want to operate on an immutable Seq.\r\n\r\nThe other option would be not require an immutable Seq (by changing the scalapb config at least for the event module) but that seems kind of shitty given that 1. scalapb claims in the docs that they expect things to be immutable and 2. mutability is scary :).",
        "createdAt" : "2021-01-07T19:37:54Z",
        "updatedAt" : "2021-01-07T19:37:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "3f94f133-1885-44db-af45-8a94f87f6f9f",
        "parentId" : "22292eab-417d-4798-a90f-320df4f1e621",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Added a comment on the safety of `unsafeWrapArray`.",
        "createdAt" : "2021-01-07T19:38:07Z",
        "updatedAt" : "2021-01-07T19:38:08Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "37d2dee56059b81910af60c4d1dcdcee02918904",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +35,39 @@            createAgreementText = createAgreementText,\n            createKeyValue = createKeyValue,\n            eventWitnesses = ArraySeq.unsafeWrapArray(eventWitnesses),\n          )\n        )"
  },
  {
    "id" : "ead31c9e-168d-437e-8f34-416631998c53",
    "prId" : 8423,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8af42a67-e6fe-441b-ab01-feb520fdb70c",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Likewise.",
        "createdAt" : "2021-01-07T17:36:02Z",
        "updatedAt" : "2021-01-07T19:35:41Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "37d2dee56059b81910af60c4d1dcdcee02918904",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +57,61 @@            contractId = contractId,\n            templateId = templateId,\n            eventWitnesses = ArraySeq.unsafeWrapArray(eventWitnesses),\n          )\n        )"
  },
  {
    "id" : "25a91216-5b31-475f-9f3e-eb85b71540bd",
    "prId" : 8035,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6b9a169-e477-4e37-8c56-3b7de81ad5ff",
        "parentId" : null,
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "This seems to be used quite a lot, is it worth factoring it out as an utility?",
        "createdAt" : "2020-12-01T09:44:43Z",
        "updatedAt" : "2020-12-04T10:39:46Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "eafc697a6a70b2355df65ed652675269a935cabb",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +124,128 @@      sqlFunctions.arrayIntersectionWhereClause(\"flat_event_witnesses\", requestingParties)\n    val submittersInPartiesClause =\n      sqlFunctions.arrayIntersectionWhereClause(\"submitters\", requestingParties)\n    SQL\"\"\"select #$selectColumns, flat_event_witnesses as event_witnesses,\n                 case when #$submittersInPartiesClause then command_id else '' end as command_id"
  }
]