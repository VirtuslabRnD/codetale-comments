[
  {
    "id" : "08f79520-d5ee-421a-920c-d4079cf5ccda",
    "prId" : 10127,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59e7c54b-eaf8-4274-b8a8-16e294aa5abf",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Wat.",
        "createdAt" : "2021-06-28T14:31:42Z",
        "updatedAt" : "2021-06-28T14:32:03Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "d56baa6d-c7c9-4f41-9ceb-6ba61098ae95",
        "parentId" : "59e7c54b-eaf8-4274-b8a8-16e294aa5abf",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Are you worried about the construction or the parallelism level?",
        "createdAt" : "2021-06-28T15:24:39Z",
        "updatedAt" : "2021-06-28T15:24:39Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "4babe505-d954-49f9-b41e-e87ef369eebf",
        "parentId" : "59e7c54b-eaf8-4274-b8a8-16e294aa5abf",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I am confused about what this is supposed to do.\r\n\r\nDoes it flatten the futures or something?",
        "createdAt" : "2021-06-28T16:07:25Z",
        "updatedAt" : "2021-06-28T16:07:25Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "ac087d83-4605-4764-8c5b-05f00031469d",
        "parentId" : "59e7c54b-eaf8-4274-b8a8-16e294aa5abf",
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "How will this mapAsynch(32) behave on a machine with a meager number of CPUs? Not every deployment will use a massive parallelism.",
        "createdAt" : "2021-06-29T06:36:10Z",
        "updatedAt" : "2021-06-29T06:36:26Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "df271974-c34f-486f-92ca-ac202a322819",
        "parentId" : "59e7c54b-eaf8-4274-b8a8-16e294aa5abf",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "@mziolekda `mapAsync` does not use the `ActorSystem'`s thread allocation for running the tasks unless we specifically instruct the Futures within to run on a direct execution context, which we don't. The actual parallelism limit in that operator is given by the execution context thread size cap on which the Futures are executed.\r\n\r\n@SamirTalwar Yes, that is a flattening of the futures. I used this because we don't have a `collectAsync` operator provided with Akka. I can change it to:\r\n```\r\n        .collect { case (offset, tx: TxUpdate) =>\r\n          offset -> tx\r\n        }\r\n        .mapAsync(32){ \r\n          case (offset, tx: TxUpdate) => \r\n            toApiTx(tx, filter, verbose).map(offset -> _)\r\n          case _ => throw new RuntimeException(\"just for exhaustivity checks\")\r\n        } \r\n```\r\nbut it looks a bit ugly and introduces (albeit minimal) chances of bugs in a refactoring. What do you think?",
        "createdAt" : "2021-06-29T07:34:37Z",
        "updatedAt" : "2021-06-29T07:38:50Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "8ca6afbd-f8f0-46be-8a0c-f18db2846831",
        "parentId" : "59e7c54b-eaf8-4274-b8a8-16e294aa5abf",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Added a comment clarifying in code your questions in case others become confused by this construction. If you have improvement ideas, shoot",
        "createdAt" : "2021-06-29T09:56:57Z",
        "updatedAt" : "2021-06-29T09:57:40Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d74a066fec89638cbed3c4f03129d5d16aa4bfe3",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +167,171 @@        // Note that it is safe to use high parallelism for mapAsync as long\n        // as the Futures executed within are running on a bounded thread pool\n        .mapAsync(32)(identity)\n        .async\n        .collect { case (offset, Some(tx)) =>"
  },
  {
    "id" : "4ff16be9-8efe-4309-931b-d671d4821d1d",
    "prId" : 9882,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9882",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e171cd2-eadb-43f9-a683-70bd5c9584ff",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "Shouldn't this be delegated as well?",
        "createdAt" : "2021-06-14T13:44:30Z",
        "updatedAt" : "2021-06-14T13:44:30Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "afb8b5d8-6b42-429a-ae24-aa15144259a0",
        "parentId" : "8e171cd2-eadb-43f9-a683-70bd5c9584ff",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "No, since this stream has no use when in-memory fan-out is enabled. Its use would reveal a bug",
        "createdAt" : "2021-06-14T13:48:01Z",
        "updatedAt" : "2021-06-14T13:56:27Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddad37f02ff793ab7c2ac94107bef997d8f77cd0",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +102,106 @@  ): Source[((Offset, Long), ContractStateEvent), NotUsed] =\n    throw new UnsupportedOperationException(\n      s\"getContractStateEvents is not supported on ${getClass.getSimpleName}\"\n    )\n"
  },
  {
    "id" : "9c026cee-a42a-42e7-acb0-d1e257b71f13",
    "prId" : 9882,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9882",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4aec33a9-cada-467b-94bb-3cbcc71c90f6",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "I am not sure what the benefit of this parameter currying is when we are not using this function as partially applied.",
        "createdAt" : "2021-06-14T13:51:01Z",
        "updatedAt" : "2021-06-14T13:51:01Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "10350e5b-1ea9-4c7d-a005-16380458fc4b",
        "parentId" : "4aec33a9-cada-467b-94bb-3cbcc71c90f6",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "I can't argue with more than \"cohesion of the argument list groups\". If you think it makes the code more readable with one arg list, I can change it ",
        "createdAt" : "2021-06-14T13:54:51Z",
        "updatedAt" : "2021-06-14T13:54:52Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "14706c7b-fed9-4aae-a20d-9da4e24a5135",
        "parentId" : "4aec33a9-cada-467b-94bb-3cbcc71c90f6",
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "That's fine",
        "createdAt" : "2021-06-15T07:09:50Z",
        "updatedAt" : "2021-06-15T07:09:50Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddad37f02ff793ab7c2ac94107bef997d8f77cd0",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +139,143 @@    )\n\n  private[events] def getTransactions[FILTER, API_TX, API_RESPONSE](\n      transactionsBuffer: EventsBuffer[Offset, TransactionLogUpdate]\n  )("
  }
]