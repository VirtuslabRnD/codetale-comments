[
  {
    "id" : "2dc69076-e095-405e-b59f-fdf83ec3ed4f",
    "prId" : 9875,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c03dc04-f473-4748-bd5f-63666ea42689",
        "parentId" : null,
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "This insert conflict action clause is not a property of a table but rather of a statement. I see this is also the only place where it is non-empty. I'd remove it from `PGTable` if it doesn't complicate code in other places ",
        "createdAt" : "2021-06-02T13:01:53Z",
        "updatedAt" : "2021-06-02T13:02:24Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "0356c306-ece2-460d-adc5-d94e957c7a00",
        "parentId" : "9c03dc04-f473-4748-bd5f-63666ea42689",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "I agree in general, but here in this DSL PGTable's responsibility is to:\r\n* provide method to create the insert SQL for preparedstatements (val insertStatement)\r\n* provide the method to assemble batch arrays (def prepareData)\r\n* provide method to set up data preparedStatement data from built batch arrays (def setupData)\r\n\r\nWe could of course walk some more lengths to have these responsibilities separated somehow, currently it seemed to me the right level of abstraction, but please hit me with ideas if you can think something better!",
        "createdAt" : "2021-06-02T14:57:33Z",
        "updatedAt" : "2021-06-02T14:57:34Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "5841a74e-be18-488e-a6ac-9476d604cbe0",
        "parentId" : "9c03dc04-f473-4748-bd5f-63666ea42689",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "If I understand correctly, for all the tables defined here we assume that there is only one SQL statement to insert data into them, and the generation of that statement is responsibility of the PGTable object. In this case, the `insertSuffix` property seems fine.",
        "createdAt" : "2021-06-02T20:53:23Z",
        "updatedAt" : "2021-06-02T21:03:11Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "13a6fd4a112b99c105bb8aa011c63e214b8ace3a",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +98,102 @@  val packages: PGTable[DBDTOV1.Package] = PGTable(\n    tableName = \"packages\",\n    insertSuffix = \"on conflict (package_id) do nothing\",\n    fields = Vector[(String, PGField[DBDTOV1.Package, _, _])](\n      \"package_id\" -> PGString(_.package_id),"
  },
  {
    "id" : "1b171421-4435-4c2c-91c6-1e597a2b0a36",
    "prId" : 9875,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01058661-01d1-4e5f-94a3-12a55064cf31",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Why not create a `PGStringOptional` where the `extract` function returns an `Option`? That would make it more obvious that the field is optional in the schema, and would avoid the use of `null`.",
        "createdAt" : "2021-06-02T20:49:23Z",
        "updatedAt" : "2021-06-02T21:03:11Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "d94afd06-749e-4ff6-a14d-bf4d00c0cf22",
        "parentId" : "01058661-01d1-4e5f-94a3-12a55064cf31",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "I like this idea a lot: keeping the extractor part scala-esc, implementation simpler on the tradeoff to have some prolifiration in the PG types :+1: ",
        "createdAt" : "2021-06-03T07:35:51Z",
        "updatedAt" : "2021-06-03T07:35:51Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "13a6fd4a112b99c105bb8aa011c63e214b8ace3a",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@private[postgresql] object PGSchema {\n  val eventsDivulgence: PGTable[DBDTOV1.EventDivulgence] = PGTable(\"participant_events_divulgence\")(\n    \"event_offset\" -> PGString(_.event_offset.orNull),\n    \"command_id\" -> PGString(_.command_id.orNull),\n    \"workflow_id\" -> PGString(_.workflow_id.orNull),"
  }
]