[
  {
    "id" : "d067c5d2-0802-4b29-9488-5b7774330551",
    "prId" : 10224,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10224",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be1e773c-57ac-4aa4-8089-565cc0808e78",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Nice catch! This is independent of the consolidation, and should significantly reduce the amount of prepared statements used, right?",
        "createdAt" : "2021-07-12T08:33:19Z",
        "updatedAt" : "2021-07-12T09:45:20Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "84ed1612-b0d7-4acf-aab2-315aad8a2398",
        "parentId" : "be1e773c-57ac-4aa4-8089-565cc0808e78",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "Based on usage, but yes",
        "createdAt" : "2021-07-12T12:59:25Z",
        "updatedAt" : "2021-07-12T12:59:25Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bb3cd75cf643750f9d0b821a79f7db16efe37f5",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +951,955 @@       WHERE\n           event_sequential_id > $startExclusive\n           and event_sequential_id <= $endInclusive\n           and event_kind != 0\n       ORDER BY event_sequential_id ASC\"\"\""
  },
  {
    "id" : "439e2344-4c0c-4e76-9991-99df82b69ee9",
    "prId" : 10051,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb94f862-3187-4800-b2c8-7ffa0aa28c26",
        "parentId" : null,
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "according to postgres specification `next` and `rows` are noise words...are they noise words in oracle as well? (if not, that would be a reason enough to have limit for postgres and this for oracle separately)",
        "createdAt" : "2021-06-18T07:37:50Z",
        "updatedAt" : "2021-06-18T07:57:59Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "0ced0bb8-912f-4732-9ed2-9ddd5dc35822",
        "parentId" : "eb94f862-3187-4800-b2c8-7ffa0aa28c26",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "this goes for all such constructs",
        "createdAt" : "2021-06-18T07:46:30Z",
        "updatedAt" : "2021-06-18T07:56:00Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "81ae41f4-38d5-4cbe-84c3-0440e246dd08",
        "parentId" : "eb94f862-3187-4800-b2c8-7ffa0aa28c26",
        "authorId" : "c36a5b02-f260-4cef-9fc6-22c312c693f7",
        "body" : "the noise words are needed for this to be portable across all the dbs",
        "createdAt" : "2021-06-23T01:15:59Z",
        "updatedAt" : "2021-06-23T01:16:07Z",
        "lastEditedBy" : "c36a5b02-f260-4cef-9fc6-22c312c693f7",
        "tags" : [
        ]
      }
    ],
    "commit" : "89e9afaefb0db691c32cf458ae098c6667cbaefd",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +240,244 @@      |    parameters.ledger_end >= ledger_offset\n      |  order by ledger_offset asc\n      |  offset {queryOffset} rows\n      |  fetch next {pageSize} rows only\n      |  \"\"\".stripMargin"
  },
  {
    "id" : "74f25ed4-9b80-4ef6-80ae-e2a404400fa7",
    "prId" : 10051,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da7057c0-1c95-47f5-98d7-2ba4e5e01727",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Why this change? Can the start offset ever be null?",
        "createdAt" : "2021-06-23T20:02:40Z",
        "updatedAt" : "2021-06-23T20:17:03Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "724e26df-5722-47c3-b24b-2aa282fc2c56",
        "parentId" : "da7057c0-1c95-47f5-98d7-2ba4e5e01727",
        "authorId" : "c36a5b02-f260-4cef-9fc6-22c312c693f7",
        "body" : "i believe @nmarton-da ran into a problem where he was seeing null being passed (due to a bug) and put this in for defensiveness",
        "createdAt" : "2021-06-25T14:47:52Z",
        "updatedAt" : "2021-06-25T14:47:52Z",
        "lastEditedBy" : "c36a5b02-f260-4cef-9fc6-22c312c693f7",
        "tags" : [
        ]
      },
      {
        "id" : "45a997ef-3726-47da-b8d3-3c8bb809e940",
        "parentId" : "da7057c0-1c95-47f5-98d7-2ba4e5e01727",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "The ledger_offset is serialized from an Offset, this can be a null offset (empty array) in case we want to start the range from the very beginning, which will be an empty string, which works with h2 and postgres, but not with oracle. this special treatment takes care of it. @dasormeter I took your treatment for the mutable schema as is.",
        "createdAt" : "2021-06-25T19:09:37Z",
        "updatedAt" : "2021-06-25T19:09:37Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "36ebcbe5-dba0-4ca3-85a8-30bca3fe3f8c",
        "parentId" : "da7057c0-1c95-47f5-98d7-2ba4e5e01727",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "So comparing some string with a `null` value (`ledger_offset > null`) gives different results in Oracle and Postgres?",
        "createdAt" : "2021-06-25T20:09:22Z",
        "updatedAt" : "2021-06-25T20:09:22Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "542fc144-ee33-4a7e-8b68-eb6995384b28",
        "parentId" : "da7057c0-1c95-47f5-98d7-2ba4e5e01727",
        "authorId" : "c36a5b02-f260-4cef-9fc6-22c312c693f7",
        "body" : "ah this is because an empty string is considered `null` by oracle, so we have to add the extra check for null to handle that case for empty string https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/Nulls.html#GUID-B0BA4751-9D88-426A-84AD-BCDBD5584071\r\n```Note:Oracle Database currently treats a character value with a length of zero as null. However, this may not continue to be true in future releases, and Oracle recommends that you do not treat empty strings the same as nulls.```",
        "createdAt" : "2021-06-25T23:05:41Z",
        "updatedAt" : "2021-06-25T23:05:42Z",
        "lastEditedBy" : "c36a5b02-f260-4cef-9fc6-22c312c693f7",
        "tags" : [
        ]
      },
      {
        "id" : "8b5f0a0a-d142-4b31-87b7-5d592ae2c5cc",
        "parentId" : "da7057c0-1c95-47f5-98d7-2ba4e5e01727",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Wow, not even string comparison is standartized in SQL, and Oracle evaluates `'' is null` to `true`?\r\n\r\nThe change makes sense now.",
        "createdAt" : "2021-06-28T09:03:12Z",
        "updatedAt" : "2021-06-28T09:03:13Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "89e9afaefb0db691c32cf458ae098c6667cbaefd",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +236,240 @@      |    parameters\n      |  where\n      |    ({startExclusive} is null or ledger_offset>{startExclusive}) and\n      |    ledger_offset <= {endInclusive} and\n      |    parameters.ledger_end >= ledger_offset"
  },
  {
    "id" : "7b19f48f-b47f-426a-90eb-b7cda787c620",
    "prId" : 9959,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b30eb019-1959-4fdd-9d38-922bd6640477",
        "parentId" : null,
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Not necessarily part of this PR, but given the much broader context engulfing this logic, it doesn't make sense to have a `TableName` field anymore. I would either inline it or rename it to `ParametersTableName`",
        "createdAt" : "2021-06-11T14:44:55Z",
        "updatedAt" : "2021-06-11T14:45:30Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "0cf6ff30-04eb-44d9-a996-bac0a4de66af",
        "parentId" : "b30eb019-1959-4fdd-9d38-922bd6640477",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "I placed a todo for parameterstable related refactorings, belongs to that subject.\r\nInteresting you mentioned this, when I started I started with the parameters, did all what you suggested and more houskeping, which was breeding more houskeeping, and eventually I relized if I keep on like this I will never have a chance to finish this PR, neither reviews to review. this is how I arrived to the idea let's keep this manual, let's resist to houskeeping urges(for now)...and thus I throw away all that and copied the whole thing over",
        "createdAt" : "2021-06-11T16:49:30Z",
        "updatedAt" : "2021-06-11T16:49:30Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "34ed9b42-4961-4759-915f-2d984d058e12",
        "parentId" : "b30eb019-1959-4fdd-9d38-922bd6640477",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Makes sense, thanks üëç ",
        "createdAt" : "2021-06-11T17:44:18Z",
        "updatedAt" : "2021-06-11T17:44:18Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9865392272b3d81dbe357cfcd0305b66c8bcc6",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +103,107 @@  private val EventSequentialIdBeforeBegin = 0L\n\n  private val TableName: String = \"parameters\"\n  private val LedgerIdColumnName: String = \"ledger_id\"\n  private val ParticipantIdColumnName: String = \"participant_id\""
  },
  {
    "id" : "ffaeb13c-3a89-4a0d-b01f-837de4a31f4b",
    "prId" : 9959,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af3f45fe-f253-463d-a879-6628adece335",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "The queries included here are only known to be compatible with H2 and Postgres. For example, some of them will not work on Oracle because of `LIMIT OFFSET`.\r\n\r\nIt's not a big issue, but it means we might have to do refactoring to this class as we add new database backends.",
        "createdAt" : "2021-06-14T08:31:48Z",
        "updatedAt" : "2021-06-14T09:27:08Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "fb0d7d1b-f4e9-4781-ad34-bce016f03130",
        "parentId" : "af3f45fe-f253-463d-a879-6628adece335",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "yepp, the common part is not carved to stone, further movements due to Oracle is expected",
        "createdAt" : "2021-06-14T10:46:56Z",
        "updatedAt" : "2021-06-14T10:46:56Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9865392272b3d81dbe357cfcd0305b66c8bcc6",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +42,46 @@import scala.util.{Failure, Success, Try}\n\ntrait CommonStorageBackend[DB_BATCH] extends StorageBackend[DB_BATCH] {\n\n  // Parameters"
  },
  {
    "id" : "987f5360-255b-4f53-b8db-1d3ed5d9f2cf",
    "prId" : 9959,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0eb9eac2-a119-4d63-b443-a7ef5f29aaf4",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Every time I read this, I think we should replace the filter by using `participant_events_create` directly. I have just verified that at least Postgres is smart enough not to touch the other event partitions in this case.",
        "createdAt" : "2021-06-14T08:47:08Z",
        "updatedAt" : "2021-06-14T09:27:08Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9865392272b3d81dbe357cfcd0305b66c8bcc6",
    "line" : 555,
    "diffHunk" : "@@ -1,1 +553,557 @@         SELECT participant_events.*\n           FROM participant_events, parameters\n          WHERE event_kind = 10 -- create\n            AND create_key_hash = ${key.hash}\n            AND event_sequential_id <= parameters.ledger_end_sequential_id"
  }
]