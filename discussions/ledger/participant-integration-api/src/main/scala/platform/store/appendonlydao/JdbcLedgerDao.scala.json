[
  {
    "id" : "a1c39cc8-3249-4efb-9c93-2ee31d6d9eb9",
    "prId" : 9959,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53959be9-cdde-4b2c-8f56-c04c096f6704",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Note to self and unrelated to this PR: relying on the error message and doing validation here is not good, but this handles the very unlikely case of two config change submissions using the same `submissionId`, where that value is chosen as a UUID by the ledger API server.",
        "createdAt" : "2021-06-11T10:14:30Z",
        "updatedAt" : "2021-06-14T09:27:08Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "f5c4b218-9359-489e-8722-e905108a640d",
        "parentId" : "53959be9-cdde-4b2c-8f56-c04c096f6704",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "FYI: I moved the original TODO to StorageBackend (the file and the trait) `// TODO: Avoid brittleness of error message checks` if we want to improve on this later...",
        "createdAt" : "2021-06-14T10:36:43Z",
        "updatedAt" : "2021-06-14T10:36:43Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9865392272b3d81dbe357cfcd0305b66c8bcc6",
    "line" : 253,
    "diffHunk" : "@@ -1,1 +215,219 @@          PersistenceResponse.Ok\n        }).recover {\n          case NonFatal(e) if e.getMessage.contains(storageBackend.duplicateKeyError) =>\n            logger.warn(s\"Ignoring duplicate configuration submission, submissionId=$submissionId\")\n            conn.rollback(savepoint)"
  },
  {
    "id" : "6b28d999-ead0-45ea-8826-0573c963b194",
    "prId" : 9633,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9633",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fbcca2d-5669-478a-bc31-e304bf737a08",
        "parentId" : null,
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "we seem to have no test case for this in conformance tests. do you think we have in the Jdbc test suits? shall we have a TODO to add one?",
        "createdAt" : "2021-05-11T00:13:20Z",
        "updatedAt" : "2021-05-11T00:15:56Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "d8f98695-ad14-4348-80eb-6c9454a650bf",
        "parentId" : "6fbcca2d-5669-478a-bc31-e304bf737a08",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "We do cover this in [JdbcLedgerDaoPackagesSpec](https://github.com/digital-asset/daml/blob/main/ledger/participant-integration-api/src/test/lib/scala/platform/store/dao/JdbcLedgerDaoPackagesSpec.scala#L104). These tests are not run with the append-only schema though.\r\n\r\nI'm not 100% sure, but I don't think it's possible to cover this in the conformance test.",
        "createdAt" : "2021-05-11T08:16:07Z",
        "updatedAt" : "2021-05-11T08:16:07Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f217e0c9d6b3198b4c688df4ca9b04baa71a0f48",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +668,672 @@        // This is again not an issue since all callers of this method always use the same value for all source descriptions.\n        val update = optEntry match {\n          case None =>\n            // Calling storePackageEntry() without providing a PackageLedgerEntry is used to copy initial packages,\n            // or in the case where the submission ID is unknown (package was submitted through a different participant)."
  },
  {
    "id" : "3df6a0b6-bec4-4f20-8c41-22146102f5ab",
    "prId" : 9561,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8025de06-31bb-4f27-b5c9-91f250ee0a37",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "original code uses a savePoint for roll-back of this transaction. Why not here?",
        "createdAt" : "2021-05-04T14:28:50Z",
        "updatedAt" : "2021-05-06T15:47:17Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "12e17e1d-bc18-4cf3-993b-381a5dc145ab",
        "parentId" : "8025de06-31bb-4f27-b5c9-91f250ee0a37",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "in my understanding of the original code, the rollback there was only kicking in, if we have a duplication. with the change of the ingestion SQL just ignoring duplication, we wont have the rollback mechanism kicking in ever",
        "createdAt" : "2021-05-05T07:25:15Z",
        "updatedAt" : "2021-05-06T15:47:17Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "59c9dedb60b09f63a983a86b6c2a587d49193ac8",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +229,233 @@    withEnrichedLoggingContext(Logging.submissionId(submissionId)) { implicit loggingContext =>\n      logger.info(\"Storing a configuration entry\")\n      dbDispatcher.executeSql(\n        metrics.daml.index.db.storeConfigurationEntryDbMetrics\n      ) { implicit conn =>"
  },
  {
    "id" : "1cb1734b-b7d6-4e8b-b6df-7fd33d773afd",
    "prId" : 9561,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2dfcc239-e8ab-43a6-8d01-d90600672c59",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "Why are we storing the offset when the transaction is rolled-back? We used to do nothing in the old db-schema",
        "createdAt" : "2021-05-04T14:57:11Z",
        "updatedAt" : "2021-05-06T15:47:17Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "31055acd-8f1c-41f6-acf3-85bbc0395f76",
        "parentId" : "2dfcc239-e8ab-43a6-8d01-d90600672c59",
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "I take it back, we moved the offset update from the top. All good",
        "createdAt" : "2021-05-04T15:47:47Z",
        "updatedAt" : "2021-05-06T15:47:17Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "59c9dedb60b09f63a983a86b6c2a587d49193ac8",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +322,326 @@              )\n              conn.rollback(savepoint)\n              sequentialIndexer.store(conn, offsetStep.offset, None)\n              PersistenceResponse.Duplicate\n          }.get"
  },
  {
    "id" : "a90ad908-520e-4862-ada2-ac8ea6a4412b",
    "prId" : 9561,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cba8613-33b9-4bc9-9118-c2b6931dfd39",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "Could you write a TODO to introduce a light-weight TransactionMeta for the read-path. This heavy one only makes sense in the write path. Using a type in such half-filled manner can lead to bad problems.",
        "createdAt" : "2021-05-04T15:31:14Z",
        "updatedAt" : "2021-05-06T15:47:17Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "ad3a0cbd-59d2-4e1e-814f-0a49488d7412",
        "parentId" : "8cba8613-33b9-4bc9-9118-c2b6931dfd39",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "Well I would not implement an ADT instead the TransactionMeta, because that would obfuscate accessor code all along the lines. First idea comes in mind: just encapsulating this \"light\" nature with a well placed factory function :thinking: \r\nAnyhow I think it is good to keep in mind that all this is temporary until removal of sandbox-classic, so it would be great to minimize change on code which is permanent in this sense.",
        "createdAt" : "2021-05-05T07:41:05Z",
        "updatedAt" : "2021-05-06T15:47:17Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "59c9dedb60b09f63a983a86b6c2a587d49193ac8",
    "line" : 332,
    "diffHunk" : "@@ -1,1 +883,887 @@                Update.TransactionAccepted(\n                  optSubmitterInfo = submitterInfo,\n                  transactionMeta = TransactionMeta(\n                    ledgerEffectiveTime = Time.Timestamp.assertFromInstant(ledgerEffectiveTime),\n                    workflowId = workflowId,"
  },
  {
    "id" : "df67ce78-0afa-4b75-800e-10bbc772c7fa",
    "prId" : 9561,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "911f8629-20d7-4e75-aef4-42390439c368",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "In `storeConfigurationEntry`, you have removed the savepoint-rollback-on-conflict in favor of an idempotent insert. Can we do the same here?\r\n\r\n",
        "createdAt" : "2021-05-05T22:11:41Z",
        "updatedAt" : "2021-05-06T15:47:18Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "04badbf0-a8a7-479d-a912-288da9d512fd",
        "parentId" : "911f8629-20d7-4e75-aef4-42390439c368",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "We most certainly can, but that is also a gray area to me: let's try to understand the whole picture in a discussion jointly with the configuration changes.",
        "createdAt" : "2021-05-06T11:23:21Z",
        "updatedAt" : "2021-05-06T15:47:18Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "9dcaff87-e288-41fa-93b8-2ac643cf25cf",
        "parentId" : "911f8629-20d7-4e75-aef4-42390439c368",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "as discussed we agreed to not change this to keep implementation as close as possible to the original. in that effort we agreed to use this approach here with the configuration change as well (which also gives us back the warning logs as well)",
        "createdAt" : "2021-05-06T14:01:03Z",
        "updatedAt" : "2021-05-06T15:47:18Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "59c9dedb60b09f63a983a86b6c2a587d49193ac8",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +317,321 @@            PersistenceResponse.Ok\n          }).recover {\n            case NonFatal(e) if e.getMessage.contains(queries.DUPLICATE_KEY_ERROR) =>\n              logger.warn(\n                s\"Ignoring duplicate party submission with ID ${partyDetails.party} for submissionId $submissionIdOpt\""
  },
  {
    "id" : "52e6cf20-2ebc-45e5-b715-73de632bd298",
    "prId" : 9281,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26526e33-c6cb-4038-8337-3bda931dbc78",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "For ease of analysis, I would move this method to where the original was located.\r\n\r\n",
        "createdAt" : "2021-03-30T12:33:23Z",
        "updatedAt" : "2021-03-30T20:03:57Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "edf2308c-2c45-42aa-81d0-492b87254d4c",
        "parentId" : "26526e33-c6cb-4038-8337-3bda931dbc78",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "In this case it is a bit different: that method jumped from the class to the object, so it can be reused from within new ingestion code.",
        "createdAt" : "2021-03-30T13:23:52Z",
        "updatedAt" : "2021-03-30T20:03:57Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "1b56aadb-a5e5-4f96-93af-145b95030815",
        "parentId" : "26526e33-c6cb-4038-8337-3bda931dbc78",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "In the future, we should move this helper to some other place, in order to remove inter-dependencies between `JdbcLedgerDao` and the new ingestion code.",
        "createdAt" : "2021-03-31T09:04:38Z",
        "updatedAt" : "2021-03-31T09:06:51Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "36e9b32168b10be3738d0f289f01e5438c9e2d92",
    "line" : 889,
    "diffHunk" : "@@ -1,1 +887,891 @@  }\n\n  def deduplicationKey(\n      commandId: domain.CommandId,\n      submitters: List[Ref.Party],"
  }
]