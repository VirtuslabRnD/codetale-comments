[
  {
    "id" : "2f68e45c-49ed-4b48-9c76-0103d7d61470",
    "prId" : 9609,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9609",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6e403d0-8c72-4ede-9276-f7ea8e755320",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Not quite sure if you want to keep that todo and in what form. With sadbonx classic you do have the option of relying on conformance tests now. Of course unit tests can still be sensible.",
        "createdAt" : "2021-05-06T19:50:34Z",
        "updatedAt" : "2021-05-06T19:50:41Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "3e44ab21-7f09-49c7-91ba-bd5da02231a4",
        "parentId" : "c6e403d0-8c72-4ede-9276-f7ea8e755320",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "We anyway wanted to have extensive unit testing for this guy. The core of the idea of composing indexer code like this was to evacuate business logic out of jdbc/akka-stream/future/dao maze.\r\nthis is the business logic - pure function - ideal for unit testing with high coverage",
        "createdAt" : "2021-05-06T19:55:45Z",
        "updatedAt" : "2021-05-06T19:55:46Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "da97e824f6c27ca9ed0472b60ac4d852cc69bc3b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +140,144 @@\n      case u: Update.TransactionAccepted =>\n        // TODO append-only:\n        //   Covering this functionality with unit test is important, since at the time of writing kvutils ledgers purge RollBack nodes already on WriteService, so conformance testing is impossible\n        //   Unit tests also need to cover the full semantic contract regarding fetch and lookup node removal as well"
  },
  {
    "id" : "3a18fa33-9ab2-4054-ab44-18d1ca342c7b",
    "prId" : 9539,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "409d44b9-d22f-450b-a36e-86911bf3d48d",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "> kvutils ledgers purge RollBack nodes already on WriteService\r\n\r\nOut of interest, how does the purging work? Reads below rollback nodes can lead to divulgence (if I understand @moritzkiefer-da correctly [here](https://github.com/digital-asset/daml/pull/9486#discussion_r620353948)), you can't just remove rollback nodes from a transaction.\r\n\r\nIf the kvutils purging operation removes create/exercise events below rollback nodes but preserves divulgence (or more generally, behaves correctly), can we apply the same operation to any incoming transaction? \r\n\r\n> conformance testing is impossible\r\n\r\nI assume this means \"conformance testing is impossible on kvutils ledgers in their current form\", because below you note that sandbox-classic on append-only will be able to use conformance tests added in https://github.com/digital-asset/daml/pull/9400?",
        "createdAt" : "2021-04-29T23:40:54Z",
        "updatedAt" : "2021-04-29T23:46:40Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "6314b7fe-0852-4653-9708-ac2cc39732e9",
        "parentId" : "409d44b9-d22f-450b-a36e-86911bf3d48d",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This is not actually specific to rollback nodes. KVUtils also drops fetch & lookup by key nodes which have the same issue (meaning they also have the same testing issue). The logic for this is in https://github.com/digital-asset/daml/blob/c85da6def052fa3d5a817789b66b3ebe3815c9e1/ledger/participant-state/kvutils/src/main/scala/com/daml/ledger/participant/state/kvutils/committer/transaction/TransactionCommitter.scala#L383.\r\n\r\nThe reason why this doesnâ€™t cause issues around divulgence is that KVUtils calculates blinding info before trimming nodes and then passes it along with the transaction so while the transaction has lost the information it is still there and passed into the indexer somehow (not familiar with the details there myself).\r\n\r\nAs for sandbox classic, you are completely correct. That will result in this code path being exercised.",
        "createdAt" : "2021-04-30T05:14:28Z",
        "updatedAt" : "2021-04-30T05:14:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "dada2f2b-f2ac-4a8b-bbc7-71eba6a740d3",
        "parentId" : "409d44b9-d22f-450b-a36e-86911bf3d48d",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "> KVUtils calculates blinding info before trimming nodes and then passes it along with the transaction\r\n\r\nI was originally thinking whether we can extract this transformation (something like `TransactionWithAllKindsOfNodes => (TransactionWithWriteNodesOnly, BlindingInfo)`?) from `kvutils` into `com.daml.lf.transaction`, so that this transformation can be applied to all transactions in the indexer without having to re-implement a rollback-node-aware traversal using `foldInExecutionOrder`.\r\n\r\nThanks for the explanation, I was mainly interested in whether this can be done, I did not have a look at whether it makes sense.",
        "createdAt" : "2021-04-30T09:28:25Z",
        "updatedAt" : "2021-04-30T09:28:26Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "e7cc9e8e-1282-485b-b749-3f0e4dbb6079",
        "parentId" : "409d44b9-d22f-450b-a36e-86911bf3d48d",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Definitely in favor of trying to share this. We already have a kvutils utilties library in //daml-lf that erases rollbacks https://github.com/digital-asset/daml/blob/main/daml-lf/kv-transaction-support/src/main/scala/com/daml/lf/kv/TransactionNormalizer.scala. Having something more general that pairs this with blindinginfo seems sensible to me.",
        "createdAt" : "2021-04-30T09:32:39Z",
        "updatedAt" : "2021-04-30T09:32:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1efb716ad6c15bf789307477ea08e4119cc6872",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +141,145 @@      case u: Update.TransactionAccepted =>\n        // TODO add support for Daml Exceptions / Rollback nodes\n        //   Covering this functionality with unit test is important, since at the time of writing kvutils ledgers purge RollBack nodes already on WriteService, so conformance testing is impossible\n        //   Unit tests also need to cover the full semantic contract regarding fetch and lookup node removal as well\n        //   Hint for implementation: https://github.com/digital-asset/daml/pull/9506"
  },
  {
    "id" : "db90d573-b207-45a1-9e73-6029e5d689f7",
    "prId" : 9539,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62a14d93-4345-4a9e-9992-a0c8689fb37a",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "```suggestion\r\n        // TODO append-only: add support for Daml Exceptions / Rollback nodes\r\n```",
        "createdAt" : "2021-04-29T23:41:07Z",
        "updatedAt" : "2021-04-29T23:46:40Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1efb716ad6c15bf789307477ea08e4119cc6872",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +140,144 @@\n      case u: Update.TransactionAccepted =>\n        // TODO add support for Daml Exceptions / Rollback nodes\n        //   Covering this functionality with unit test is important, since at the time of writing kvutils ledgers purge RollBack nodes already on WriteService, so conformance testing is impossible\n        //   Unit tests also need to cover the full semantic contract regarding fetch and lookup node removal as well"
  }
]