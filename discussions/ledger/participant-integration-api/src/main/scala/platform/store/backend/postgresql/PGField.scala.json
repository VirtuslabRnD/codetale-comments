[
  {
    "id" : "6cd4dd88-3c23-46cf-b386-bd4eb9bc2d79",
    "prId" : 9875,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7dafb92-3d3b-487f-8fdf-01faf253535a",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Can't you make the handling of missing input data part of `convert`? This way you wouldn't need to define the above contract.\r\n\r\nI would have expected that fields never have `null` values as the result of `extract` (because `null` in Scala land is bad), and optional fields use `Option[T]` for `TO` and their `convert` method calls `.orNull` (because this is how missing values are specified in SQL).",
        "createdAt" : "2021-06-02T20:47:38Z",
        "updatedAt" : "2021-06-02T21:03:11Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "6d669d24-be11-4090-926d-9b4fdc4b8a5a",
        "parentId" : "b7dafb92-3d3b-487f-8fdf-01faf253535a",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "good point, I will rewamp this part :+1: ",
        "createdAt" : "2021-06-03T07:36:19Z",
        "updatedAt" : "2021-06-03T07:36:20Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "13a6fd4a112b99c105bb8aa011c63e214b8ace3a",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +29,33 @@          null.asInstanceOf[CONVERTED] // this is safe if clients comply with the contract above\n        case notNull => convert(notNull)\n      }\n      .toArray(classTag)\n}"
  },
  {
    "id" : "99498634-37c6-4903-ad07-52333ab503c5",
    "prId" : 9875,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da1f5280-8d7d-45bb-8750-6dda429883d4",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "I took me a while to understand the type parameters here. Is the following correct?\r\n- `FROM`: an arbitrary type. The database field value can somehow be extracted from these objects.\r\n- `TO`: a type describing the content of the database field\r\n- `CONVERTED`: the actual SQL type of the database field\r\n\r\nFor example, a field holding a list of parties would use `TO = List[String]` (because this is how you would store a list of parties in Scala) and `FROM = String` (because what we actually store in the SQL schema is the concatenation of all party strings).\r\n\r\nA small description might be useful.",
        "createdAt" : "2021-06-02T21:02:45Z",
        "updatedAt" : "2021-06-02T21:03:11Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "6090a921-0727-4b35-8ee9-be892bb60c2c",
        "parentId" : "da1f5280-8d7d-45bb-8750-6dda429883d4",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "yeah unfortunately all these 3 types needed for the purpose, since we want to have one part of the conversion in the type, and another in the definition.\r\n\r\nI will beef up the scaladoc in this area",
        "createdAt" : "2021-06-03T07:31:19Z",
        "updatedAt" : "2021-06-03T07:31:19Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "13a6fd4a112b99c105bb8aa011c63e214b8ace3a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@  * This is important, since absence is automatically signaled with null references (and we still would want to support primitives)\n  */\nprivate[postgresql] sealed abstract class PGField[FROM, TO, CONVERTED](implicit\n    classTag: ClassTag[CONVERTED]\n) {"
  }
]