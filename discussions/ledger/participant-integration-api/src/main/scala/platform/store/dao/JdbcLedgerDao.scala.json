[
  {
    "id" : "0c41f36a-7a46-4d17-be3f-e5b540e44f69",
    "prId" : 9943,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9943",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd5fa530-f779-438b-8ef6-7c82468c437d",
        "parentId" : null,
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "@dasormeter note for going forward with append-only these parse to json and then render string should go to the batching phase, and the DTO for injection should have already the string so we avoid blocking ingestion threads with dataconversion",
        "createdAt" : "2021-06-11T09:47:24Z",
        "updatedAt" : "2021-06-11T09:47:24Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "25bd06e8a50f932173fef5400fd9c5723ee24147",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1394,1398 @@    ): SimpleSql[Row] = {\n      import com.daml.platform.store.OracleArrayConversions._\n      SQL\"insert into participant_command_completions(completion_offset, record_time, application_id, submitters, command_id, status_code, status_message) values ($offset, $recordTime, ${submitterInfo.applicationId}, ${submitterInfo.actAs.toJson.compactPrint}, ${submitterInfo.commandId}, ${reason.code\n        .value()}, ${reason.description})\"\n    }"
  },
  {
    "id" : "1abdb16e-16b5-40af-8fa6-323c05c5e269",
    "prId" : 8816,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8284a0ed-548f-4971-b782-6309a1bacece",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Probably don't need the semicolons here.",
        "createdAt" : "2021-02-12T08:48:02Z",
        "updatedAt" : "2021-02-12T09:00:49Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "6255e9a0-801e-405a-b54a-bfcb6283b239",
        "parentId" : "8284a0ed-548f-4971-b782-6309a1bacece",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "semicolons are needed because the enclosing for-comprehension uses parenthesis and not braces.",
        "createdAt" : "2021-02-12T09:00:29Z",
        "updatedAt" : "2021-02-12T09:00:49Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "ecaf0735-5049-4864-91f2-041e2ab41fe6",
        "parentId" : "8284a0ed-548f-4971-b782-6309a1bacece",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I suggest we stop that, but it's up to you.",
        "createdAt" : "2021-02-12T10:01:26Z",
        "updatedAt" : "2021-02-12T10:01:26Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "42e08d31622e0cee4ad03933160e554fd08cb308",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +567,571 @@                for (\n                  appId <- tx.applicationId;\n                  actAs <- if (tx.actAs.isEmpty) None else Some(tx.actAs);\n                  cmdId <- tx.commandId\n                )"
  },
  {
    "id" : "5468967d-5c57-44da-99da-949baa8d2ec5",
    "prId" : 8676,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7421a445-989e-4782-b154-4a2f0caa34ec",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "PartyEntry contains submissionId, please log it as well",
        "createdAt" : "2021-02-05T08:44:43Z",
        "updatedAt" : "2021-02-15T09:34:35Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "b6452f49-ba9a-457b-9105-4b52c2004d13",
        "parentId" : "7421a445-989e-4782-b154-4a2f0caa34ec",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Re: this and other comments.\r\n\r\nBefore acting on this you may want to check whether these are already injected in the logging context upstream.\r\n\r\nSee `ExecuteUpdate#loggingContextFor`\r\n\r\n```scala\r\n      case PartyAllocationRejected(submissionId, participantId, _, rejectionReason) =>\r\n        Map(\r\n          \"updateSubmissionId\" -> submissionId,\r\n          \"updateParticipantId\" -> participantId,\r\n          \"updateRejectionReason\" -> rejectionReason,\r\n        )\r\n      case PublicPackageUpload(_, sourceDescription, _, submissionId) =>\r\n        Map(\r\n          \"updateSubmissionId\" -> submissionId.getOrElse(\"\"),\r\n          \"updateSourceDescription\" -> sourceDescription.getOrElse(\"\"),\r\n        )\r\n```",
        "createdAt" : "2021-02-05T13:27:52Z",
        "updatedAt" : "2021-02-15T09:34:35Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "82e80685-f2f4-44da-82fa-546d48f82c6d",
        "parentId" : "7421a445-989e-4782-b154-4a2f0caa34ec",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "The `ExecuteUpdate#loggingContextFor` method enriches logging context for data writes in `JdbcLedgerDao`. There's no need to enrich the logging context in the latter.\r\nHowever, I think we should consider removing `update` prefix from the context keys to be consistent with other places where we log correlation ids (`commandId`, `transactionId`, `submissionId`). What do you think @stefanobaghino-da @mziolekda ?",
        "createdAt" : "2021-02-07T15:55:31Z",
        "updatedAt" : "2021-02-15T09:34:35Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      },
      {
        "id" : "9aa59905-4703-44d3-aa6b-df25678034c2",
        "parentId" : "7421a445-989e-4782-b154-4a2f0caa34ec",
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "I am strongly for removing that prefix. It leaks a bit of architecture detail to the log (updateCommandId differs from commandId only by the place in the code that prints them). For an end-user or support personnel it can be confusing.",
        "createdAt" : "2021-02-10T08:37:06Z",
        "updatedAt" : "2021-02-15T09:34:35Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "53394322-988e-4685-bc41-18ef7d1a2b97",
        "parentId" : "7421a445-989e-4782-b154-4a2f0caa34ec",
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "Also, the chain of logging context must be broken somewhere, because the example you posted elsewhere did not contain a context:\r\n```\r\nINFO: Storing package entry\r\n```",
        "createdAt" : "2021-02-10T08:38:38Z",
        "updatedAt" : "2021-02-15T09:34:35Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "2d7674fd-9ad8-44ed-b65e-e5145628a824",
        "parentId" : "7421a445-989e-4782-b154-4a2f0caa34ec",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "From what I see in the codebase, there's no broken chain of logging context but rather the same method for storing package entries is used in different places. In some of them the logging context is not used at all. However, for the cases pertinent to this PR, the logging context is preserved.",
        "createdAt" : "2021-02-10T18:23:31Z",
        "updatedAt" : "2021-02-15T09:34:36Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      },
      {
        "id" : "6228d8a6-b884-450b-9f36-fc827971d5d8",
        "parentId" : "7421a445-989e-4782-b154-4a2f0caa34ec",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "> I am strongly for removing that prefix. It leaks a bit of architecture detail to the log (updateCommandId differs from commandId only by the place in the code that prints them). For an end-user or support personnel it can be confusing.\r\n\r\nI've removed the prefix. The `LoggingContext`'s keys should now have uniform naming.",
        "createdAt" : "2021-02-10T18:26:01Z",
        "updatedAt" : "2021-02-15T09:34:36Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      },
      {
        "id" : "ad5636b9-a534-4492-ae63-bf9292754c9e",
        "parentId" : "7421a445-989e-4782-b154-4a2f0caa34ec",
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "Let's have a look at the example log-line from an actual run and close this thread if the context appears ",
        "createdAt" : "2021-02-10T19:21:20Z",
        "updatedAt" : "2021-02-15T09:34:36Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "2f13d183-f5aa-47ae-94dc-236c00d4db0d",
        "parentId" : "7421a445-989e-4782-b154-4a2f0caa34ec",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "An example log line for this case is:\r\n```\r\n2021-02-10T18:07:01.537Z INFO  c.d.p.s.d.JdbcLedgerDao@[kka.actor.default-dispatcher-6] -\r\n                Storing package entry (context: {participantId=sandbox-participant})\r\n```",
        "createdAt" : "2021-02-10T20:03:44Z",
        "updatedAt" : "2021-02-15T09:34:36Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      }
    ],
    "commit" : "869ef17902cef513d358b811ccfcd330aabc77f6",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +297,301 @@      partyEntry: PartyLedgerEntry,\n  )(implicit loggingContext: LoggingContext): Future[PersistenceResponse] = {\n    logger.info(\"Storing party entry\")\n    dbDispatcher.executeSql(metrics.daml.index.db.storePartyEntryDbMetrics) { implicit conn =>\n      ParametersTable.updateLedgerEnd(offsetStep)"
  },
  {
    "id" : "7666888a-42e1-4f00-bada-7859c390d77b",
    "prId" : 8676,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a9f6d5d-83d7-42e9-aca0-06815034606e",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "Submitter info contains submissionId, please log it when provided",
        "createdAt" : "2021-02-05T08:53:11Z",
        "updatedAt" : "2021-02-15T09:34:35Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "0222225e-d134-4e30-94ae-48a559bc6fa3",
        "parentId" : "9a9f6d5d-83d7-42e9-aca0-06815034606e",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "Same comment as [above](https://github.com/digital-asset/daml/pull/8676#discussion_r571638038).",
        "createdAt" : "2021-02-07T15:56:22Z",
        "updatedAt" : "2021-02-15T09:34:35Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      }
    ],
    "commit" : "869ef17902cef513d358b811ccfcd330aabc77f6",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +551,555 @@      reason: RejectionReason,\n  )(implicit loggingContext: LoggingContext): Future[PersistenceResponse] = {\n    logger.info(\"Storing rejection\")\n    dbDispatcher.executeSql(metrics.daml.index.db.storeRejectionDbMetrics) { implicit conn =>\n      for (info <- submitterInfo) {"
  },
  {
    "id" : "1b9833c7-9e2c-48c5-bdbd-7f41a3325dcb",
    "prId" : 8676,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54623a7c-dfb2-4878-8eda-9910917d06e7",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "PackageLedgerEntry contains submissionId, please log it when provided",
        "createdAt" : "2021-02-05T08:54:08Z",
        "updatedAt" : "2021-02-15T09:34:35Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "7ec8ad75-4773-40c0-9eaf-502a6dcf08ef",
        "parentId" : "54623a7c-dfb2-4878-8eda-9910917d06e7",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "Same comment as [above](https://github.com/digital-asset/daml/pull/8676#discussion_r571638038).",
        "createdAt" : "2021-02-07T15:56:29Z",
        "updatedAt" : "2021-02-15T09:34:35Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      }
    ],
    "commit" : "869ef17902cef513d358b811ccfcd330aabc77f6",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +732,736 @@      optEntry: Option[PackageLedgerEntry],\n  )(implicit loggingContext: LoggingContext): Future[PersistenceResponse] = {\n    logger.info(\"Storing package entry\")\n    dbDispatcher.executeSql(metrics.daml.index.db.storePackageEntryDbMetrics) {\n      implicit connection =>"
  },
  {
    "id" : "3331ae2f-05b6-4072-988d-26db83902bf1",
    "prId" : 8571,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66331391-f3b4-4c48-ab83-7447f4d930f1",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "FYI: At one point, we had the convention that methods that take an `implicit connection: Connection` use the `Sync` suffix to make it easier to see that they don't open an extra database connection. I see only `stopDeduplicatingCommandSync` survived the many refactorings, so there's no point keeping the convention.",
        "createdAt" : "2021-01-25T13:26:53Z",
        "updatedAt" : "2021-01-27T07:44:24Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "639645b5c77f50727cc936e3fed3a6dcc97b19d6",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +532,536 @@    )\n\n  private def updateLedgerEnd(offsetStep: OffsetStep)(implicit connection: Connection): Unit =\n    Timed.value(\n      metrics.daml.index.db.storeTransactionDbMetrics.updateLedgerEnd,"
  },
  {
    "id" : "01dd3470-1612-41f2-a22e-9d1e225a0db9",
    "prId" : 8092,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0cf892f-4c4f-47c3-9ff4-d6cf034af5bc",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I assume the number of submitters is always supposed to be low, but sorting and deduplicating a linked list still seems a bit wasteful. Would it rather be the case for this to be a `Set` of some sort?",
        "createdAt" : "2020-11-27T13:40:54Z",
        "updatedAt" : "2020-11-27T14:14:09Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "5a1a6004-e21b-4fa1-9c50-7349a621ae7a",
        "parentId" : "e0cf892f-4c4f-47c3-9ff4-d6cf034af5bc",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "For reference, we expect multi-party submissions to only be used for admin operations (e.g., ledger migration). In almost all cases, the list will contain exactly one element - hence the special case (even though `sorted` and `distinct` are special-cased themselves for a one-element list).\r\n\r\nFor now, the submitters are a`List` in our code base (well, in the new PRs at least). The initial thought was that this list would be pre-sorted by the ledger API server, but the ledger should not have to depend on that. We should probably replace them by a `Set` everywhere (see https://github.com/digital-asset/daml/pull/8026).",
        "createdAt" : "2020-11-27T14:12:52Z",
        "updatedAt" : "2020-11-27T14:14:09Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "85574147-c17e-47b9-8014-388117f14144",
        "parentId" : "e0cf892f-4c4f-47c3-9ff4-d6cf034af5bc",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "That idea sounds very sensible.",
        "createdAt" : "2020-11-27T14:20:53Z",
        "updatedAt" : "2020-11-27T14:20:53Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "39273ba45e5abe2e57ff124f776ab352e7e40dcb",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +777,781 @@      commandId.unwrap + \"%\" + submitters.head\n    else\n      commandId.unwrap + \"%\" + submitters.asInstanceOf[List[String]].sorted.distinct.mkString(\"%\")\n\n  override def deduplicateCommand("
  },
  {
    "id" : "fc34d3c4-0e45-4a9c-9f88-382a4778fa7c",
    "prId" : 8035,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e66874e3-e66e-4f72-a1b5-ee2378b2bf82",
        "parentId" : null,
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "Should it be non-empty, equivalently as before the change?",
        "createdAt" : "2020-12-01T09:38:43Z",
        "updatedAt" : "2020-12-04T10:39:46Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "512c2d49-bf91-458b-aa97-80619f601930",
        "parentId" : "e66874e3-e66e-4f72-a1b5-ee2378b2bf82",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "The `actAs` list is always non-empty. This is enforced by the ledger API by rejecting all submissions without `actAs` parties.",
        "createdAt" : "2020-12-01T10:58:58Z",
        "updatedAt" : "2020-12-04T10:39:46Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "eafc697a6a70b2355df65ed652675269a935cabb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +440,444 @@      rejectionReason: RejectionReason,\n  )(implicit connection: Connection): Unit = {\n    stopDeduplicatingCommandSync(domain.CommandId(info.commandId), info.actAs)\n    prepareRejectionInsert(info, offset, recordTime, rejectionReason).execute()\n    ()"
  },
  {
    "id" : "6ef0631f-c57c-4eca-9490-f88ec9e42479",
    "prId" : 8019,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bbe7d14-46f6-4a54-8204-15099502f2eb",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Can you use curlies here?\r\n\r\n```suggestion\r\n        for {\r\n          reason <- error\r\n          info <- submitterInfo\r\n        } {\r\n```\r\n\r\nOr merge it with the previous `if` so we're not checking `error.isEmpty` twice?",
        "createdAt" : "2020-11-23T14:47:43Z",
        "updatedAt" : "2020-11-23T19:15:07Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "e71a59cc-57fe-42d9-8b26-34dd35705b9e",
        "parentId" : "9bbe7d14-46f6-4a54-8204-15099502f2eb",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Sure. 🤷🏻‍♂️ ",
        "createdAt" : "2020-12-02T15:09:37Z",
        "updatedAt" : "2020-12-02T15:09:37Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "1be99b49-9134-45bc-8454-49c2ce43c7ea",
        "parentId" : "9bbe7d14-46f6-4a54-8204-15099502f2eb",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Addressed in https://github.com/digital-asset/daml/pull/8139",
        "createdAt" : "2020-12-02T15:28:42Z",
        "updatedAt" : "2020-12-02T15:28:42Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f23fbbff77e4c9db4138e2ceb66ccabf40580ed2",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +479,483 @@          )\n        }\n        for (reason <- error; info <- submitterInfo) {\n          handleError(offset, info, recordTime, reason)\n        }"
  },
  {
    "id" : "f230bb84-d25c-4236-87d0-5f42eab6d809",
    "prId" : 7989,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7989",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17a4c515-b65d-4ed5-b83e-47c5f0aba615",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "How are we going to use the `blindingInfo` here?",
        "createdAt" : "2020-11-18T08:55:58Z",
        "updatedAt" : "2020-11-18T09:29:29Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "5307986c-0b8c-417b-8b04-dcf8a1634953",
        "parentId" : "17a4c515-b65d-4ed5-b83e-47c5f0aba615",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "This storage reduction story, as a whole, will move blinding info computation from the read to the write path and will optimize its storage layout by making it explicit.\r\n\r\nAs a preparation to support the new format without dropping the old one, `TransactionCommitter` (KV) and `SqlLedger` (classic) will pre-compute this field from the transaction as it is done today by the indexer on the read path (`Blinding.blind`), it will be stored on-ledger and then `KeyValueConsumption` will read it back. Also, the indexer will prefer the pre-computed info if available.\r\n\r\nAs the very last step of the whole story, `TransactionCommitter` will prune `Fetch` and `LookupByKey` transaction nodes, activating the storage reduction.",
        "createdAt" : "2020-11-18T09:15:30Z",
        "updatedAt" : "2020-11-18T09:29:29Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bb560fda3993e300f5da71cea86e8b3606ff755",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +433,437 @@      transaction: CommittedTransaction,\n      divulged: Iterable[DivulgedContract],\n      blindingInfo: Option[BlindingInfo],\n  )(implicit loggingContext: LoggingContext): Future[PersistenceResponse] =\n    dbDispatcher"
  },
  {
    "id" : "f5669e71-83e7-4ae3-b656-4c56af684013",
    "prId" : 7960,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7960",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36d4d366-e077-420a-9812-0f4c4fe888f9",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Is `actAs` used here?",
        "createdAt" : "2020-11-13T11:11:13Z",
        "updatedAt" : "2020-11-13T11:26:47Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "10508662-9add-4831-bb4d-0cbff35421fb",
        "parentId" : "36d4d366-e077-420a-9812-0f4c4fe888f9",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "No, it will be used in one of the upcoming PRs. I renamed it preemptively to help the future PR that touches this line.",
        "createdAt" : "2020-11-13T11:16:04Z",
        "updatedAt" : "2020-11-13T11:26:48Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8946fc8e344713e84189aa37af29fa832cbf316c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +451,455 @@          )\n        } else {\n          for (info @ SubmitterInfo(actAs, _, commandId, _) <- submitterInfo) {\n            stopDeduplicatingCommandSync(domain.CommandId(commandId), info.singleSubmitterOrThrow())\n            prepareRejectionInsert(info, offset, recordTime, error.get).execute()"
  },
  {
    "id" : "df671771-b664-4913-948b-f20ba71979ae",
    "prId" : 7960,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7960",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1038f799-8bbd-44c9-9caa-1122ab309b58",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "And here?",
        "createdAt" : "2020-11-13T11:11:17Z",
        "updatedAt" : "2020-11-13T11:26:48Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "8946fc8e344713e84189aa37af29fa832cbf316c",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +471,475 @@  )(implicit loggingContext: LoggingContext): Future[PersistenceResponse] =\n    dbDispatcher.executeSql(metrics.daml.index.db.storeRejectionDbMetrics) { implicit conn =>\n      for (info @ SubmitterInfo(actAs, _, commandId, _) <- submitterInfo) {\n        stopDeduplicatingCommandSync(domain.CommandId(commandId), info.singleSubmitterOrThrow())\n        prepareRejectionInsert(info, offset, recordTime, reason).execute()"
  },
  {
    "id" : "beb85484-cb4d-486d-8b5d-b4ee945b2fca",
    "prId" : 7941,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7941",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "412a159e-4c62-4bdb-85ae-971563f0dc76",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Oh, here too. Do we need the default-ness?",
        "createdAt" : "2020-11-16T09:45:09Z",
        "updatedAt" : "2020-11-16T10:21:10Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "38927ccd-8d4a-4a5d-93cf-0c7f4c9b8398",
        "parentId" : "412a159e-4c62-4bdb-85ae-971563f0dc76",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "In order to minimize the impact (and, specifically, to restrict it to DAML-on-SQL as much as possible) I'd prefer to have a default at least in (non-test) factories. Why would you prefer to make it always explicit?",
        "createdAt" : "2020-11-16T10:07:50Z",
        "updatedAt" : "2020-11-16T10:21:10Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "1bb1a30e-110e-4ae3-a64e-49ece219d7b1",
        "parentId" : "412a159e-4c62-4bdb-85ae-971563f0dc76",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "If we find new uses for this code, the default can be misleading; it may not be appropriate for the new use case. I'd rather any configuration was made explicit at the call site, not the implementation site.\r\n\r\nIt's a minor thing though, so happy to defer to you on the final decision, as you have more familiarity with this code.",
        "createdAt" : "2020-11-16T10:34:37Z",
        "updatedAt" : "2020-11-16T10:34:37Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "ef16c2f2-3273-45e1-b1c0-8af21f9042d1",
        "parentId" : "412a159e-4c62-4bdb-85ae-971563f0dc76",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "I agree with your point in general but classic (non-KV) SQL-backed drivers should not perform party allocation validation, else e.g. SDK tools like the sandbox might break. The exceptions are very intentional and specific and, currently, only DAML on SQL.\r\n\r\nI'll try having a look at the impacts of making it explicit though, maybe they are minor.",
        "createdAt" : "2020-11-16T10:47:19Z",
        "updatedAt" : "2020-11-16T10:47:20Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "0f085e91-6999-43b1-9ae3-1750c2011efe",
        "parentId" : "412a159e-4c62-4bdb-85ae-971563f0dc76",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Specific always trumps general. :slightly_smiling_face: ",
        "createdAt" : "2020-11-16T10:50:33Z",
        "updatedAt" : "2020-11-16T10:50:33Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "9107e689-0fdb-4980-bf9b-c6ffcd7d8b76",
        "parentId" : "412a159e-4c62-4bdb-85ae-971563f0dc76",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "It looks like it would need to be propagated at least in platform/index and platform/store, i.e. `participant-integration-api`, not even sure we want/are allowed to do that. WDYT?",
        "createdAt" : "2020-11-16T11:15:47Z",
        "updatedAt" : "2020-11-16T11:15:47Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "de9eca88-efae-4538-86aa-d73bb6ba737d",
        "parentId" : "412a159e-4c62-4bdb-85ae-971563f0dc76",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "Anyway, I think this refactoring too is better done in a separate PR, if at all.",
        "createdAt" : "2020-11-16T11:48:31Z",
        "updatedAt" : "2020-11-16T11:48:31Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "95c4c433a5f4aada404726e1ea0950d65e1694f7",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +920,924 @@      metrics: Metrics,\n      lfValueTranslationCache: LfValueTranslation.Cache,\n      validatePartyAllocation: Boolean = false,\n  )(implicit loggingContext: LoggingContext): ResourceOwner[LedgerDao] = {\n    val dbType = DbType.jdbcType(jdbcUrl)"
  }
]