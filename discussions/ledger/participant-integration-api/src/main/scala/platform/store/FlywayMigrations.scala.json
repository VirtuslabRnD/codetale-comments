[
  {
    "id" : "025709db-794e-4d73-959e-ee45356b5958",
    "prId" : 9481,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3f9b11e-fa83-4e52-a28c-16efa2a00315",
        "parentId" : null,
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "super nice approach :clap: ",
        "createdAt" : "2021-05-17T14:51:53Z",
        "updatedAt" : "2021-05-17T15:04:49Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "39c7762ebfcd194cb99cedfb89235e21d7f28c93",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +49,53 @@          .baselineOnMigrate(allowExistingSchema)\n          .baselineVersion(MigrationVersion.fromVersion(\"0\"))\n          .ignoreFutureMigrations(false)\n          .load()\n        logger.info(\"Running Flyway migration...\")"
  },
  {
    "id" : "d96d8ad7-d1e6-44e5-b1ee-6b2244784891",
    "prId" : 9481,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4898fd9-b76e-4459-92fc-391bfc73f658",
        "parentId" : null,
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "would that mean that we will get rid of the -appendonly flyway migration dirs afterwards, and shovel the migrations back to the original? (I would agree on that, if yes: perhaps a TODO to capture the intent?)",
        "createdAt" : "2021-05-17T14:53:54Z",
        "updatedAt" : "2021-05-17T15:04:49Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "4b0112c5-1465-45f5-af24-cc4e573dbcc1",
        "parentId" : "c4898fd9-b76e-4459-92fc-391bfc73f658",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Yes, that's the intent. I'll add a TODO.",
        "createdAt" : "2021-05-17T20:52:52Z",
        "updatedAt" : "2021-05-17T20:52:52Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "39c7762ebfcd194cb99cedfb89235e21d7f28c93",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +92,96 @@        .locations(\n          \"classpath:com/daml/platform/db/migration/\" + dbType.name,\n          \"classpath:com/daml/platform/db/migration/\" + dbType.name + \"-appendonly\",\n          \"classpath:db/migration/\" + dbType.name,\n          \"classpath:db/migration/\" + dbType.name + \"-appendonly\","
  },
  {
    "id" : "10bc2027-02f8-422f-adab-26536ba6bfd9",
    "prId" : 9246,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9246",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "298de056-48bc-4c41-b6e2-eb53e49e41e1",
        "parentId" : null,
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "please mark it up with `TODO append-only` stating this feature is temporary and will be removed in the cleanup step",
        "createdAt" : "2021-03-27T11:19:38Z",
        "updatedAt" : "2021-03-29T14:04:02Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5216011673fdb3f2d446000ab9e78893d6a91fb8",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +25,29 @@  // append-only schema must have a higher version number.\n  // TODO append-only: remove after removing support for the current (mutating) schema\n  private val lastStableSchemaVersion = \"49\"\n\n  def validate()(implicit resourceContext: ResourceContext): Future[Unit] ="
  },
  {
    "id" : "febe16c2-e822-49f2-adc0-98ccd29e4f97",
    "prId" : 7678,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7678",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f375a427-c777-4035-9492-3e79526526a8",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Can you double check that this change is ok? I believe it's ok because I guess `dataSource.use` wraps the `Future` so that the `Throwable` is caught correctly, but it's difficult to say from GitHub. Same for the two following analogous changes.",
        "createdAt" : "2020-10-14T12:15:54Z",
        "updatedAt" : "2020-10-19T09:32:37Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "6585a1d8-6758-4923-ae7e-64a01de35417",
        "parentId" : "f375a427-c777-4035-9492-3e79526526a8",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "It is, because `use` calls the behavior inside a `flatMap`. There's a unit test for it.",
        "createdAt" : "2020-10-14T12:37:18Z",
        "updatedAt" : "2020-10-19T09:32:37Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "674bae11cc5a88ac1ab207b4a337c1c39eb07a5a",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +24,28 @@  def validate()(implicit resourceContext: ResourceContext): Future[Unit] =\n    dataSource.use { ds =>\n      Future.successful {\n        val flyway = configurationBase(dbType).dataSource(ds).load()\n        logger.info(\"Running Flyway validation...\")"
  }
]