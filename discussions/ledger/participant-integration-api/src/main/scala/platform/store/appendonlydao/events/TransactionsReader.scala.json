[
  {
    "id" : "be1fc3a7-170f-4ad1-9f1a-71466f9b4761",
    "prId" : 10092,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53433a62-2d91-417f-960b-37c9b4ff8425",
        "parentId" : null,
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Correction. Not related to this PR",
        "createdAt" : "2021-06-25T12:51:40Z",
        "updatedAt" : "2021-06-25T12:51:40Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "33049536348cfc45b325a0d1d68518f619a5bc6e",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +305,309 @@            minOffsetExclusive = startExclusive._1,\n            error = pruned =>\n              s\"Transaction log updates request after ${startExclusive._1.toHexString} precedes pruned offset ${pruned.toHexString}\",\n          )\n        }"
  },
  {
    "id" : "501dd02f-569b-463f-9b45-a2e65a9861a2",
    "prId" : 10092,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "190554b1-02ff-4c84-8241-6259dd185955",
        "parentId" : null,
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Correction. Not related to this PR",
        "createdAt" : "2021-06-25T12:51:59Z",
        "updatedAt" : "2021-06-25T12:51:59Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "33049536348cfc45b325a0d1d68518f619a5bc6e",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +309,313 @@        }\n      }\n      .mapConcat(identity)\n      .async\n      // Decode transaction log updates in parallel"
  },
  {
    "id" : "d1186fba-8a55-4d02-b36d-1008ce51fb70",
    "prId" : 10092,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f5cf2bb-b095-41a5-9af8-a37d9fefe096",
        "parentId" : null,
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "How about:\r\n```\r\nval rangeSize = math.max(0, endInclusive - startExclusive)\r\n```\r\nto prevent unexpected effects?",
        "createdAt" : "2021-06-28T12:36:57Z",
        "updatedAt" : "2021-06-28T13:06:39Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      },
      {
        "id" : "b2569505-901b-4e03-9994-08e5e6efc45f",
        "parentId" : "9f5cf2bb-b095-41a5-9af8-a37d9fefe096",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Hmm, good point, although in all other parts of our logic we trust that these bounds are well-formed. But fine, I'll add a special clause in the if statement to handle it.",
        "createdAt" : "2021-06-28T13:11:43Z",
        "updatedAt" : "2021-06-28T13:11:58Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "a730550e-a649-4128-a1c0-c34da9ed71ea",
        "parentId" : "9f5cf2bb-b095-41a5-9af8-a37d9fefe096",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "You're right that it's unlikely that we pass incorrect values.\r\nOn the other hand we have guards for `maxChunkSize` and `numberOfChunks` and a separate `splitRangeUnsafe()` function for unsafe computations which makes me think that I should be fine passing whatever I like to this one.",
        "createdAt" : "2021-06-28T13:14:56Z",
        "updatedAt" : "2021-06-28T13:14:57Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      },
      {
        "id" : "dc4d387d-1dcf-4bb5-aaab-e023cfb7d362",
        "parentId" : "9f5cf2bb-b095-41a5-9af8-a37d9fefe096",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Done",
        "createdAt" : "2021-06-28T13:48:10Z",
        "updatedAt" : "2021-06-28T13:48:10Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "33049536348cfc45b325a0d1d68518f619a5bc6e",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +563,567 @@    )\n\n    val rangeSize = endInclusive - startExclusive\n    require(\n      rangeSize >= 0,"
  },
  {
    "id" : "7e09f320-a967-4055-ba35-6e88db23aff4",
    "prId" : 9959,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34966fa0-a6ec-432d-bca4-8f47ba1e2f2d",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "The asymmetry between the two functions returning sources: `getFlatTransactions` and `getTransactionTrees` existed before, but maybe it is worth leaving a note that it should be unified.",
        "createdAt" : "2021-06-14T13:00:04Z",
        "updatedAt" : "2021-06-14T13:00:04Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "32dc8bf5-0073-4661-83de-afdc58fa1705",
        "parentId" : "34966fa0-a6ec-432d-bca4-8f47ba1e2f2d",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "I left a TODO for that :ok_hand: ",
        "createdAt" : "2021-06-14T14:38:18Z",
        "updatedAt" : "2021-06-14T14:38:18Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9865392272b3d81dbe357cfcd0305b66c8bcc6",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +103,107 @@      implicit connection: Connection =>\n        logger.debug(s\"getFlatTransactions query($range)\")\n        queryNonPruned.executeSqlOrThrow(\n          getTransactions(\n            EventsRange(range.startExclusive._2, range.endInclusive._2),"
  },
  {
    "id" : "35bbef7f-b86f-44ce-914a-9bbc79856136",
    "prId" : 9858,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6841888-06cd-4c5a-92f8-f45f70f9ee3a",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "Do we need this case actually? Methinks `case _` achieves exactly the same outcome",
        "createdAt" : "2021-06-02T12:30:46Z",
        "updatedAt" : "2021-06-02T12:30:47Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "b70c1963-7318-46b7-9cde-9a864610ce33",
        "parentId" : "e6841888-06cd-4c5a-92f8-f45f70f9ee3a",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Not quite. For `rangeSize == 100` and `minChunkSize = 51`, `case _` throws. I've seen it in action :trollface: ",
        "createdAt" : "2021-06-02T12:39:53Z",
        "updatedAt" : "2021-06-02T12:39:53Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "94735f05b5ee7beb1b3b86b38b674518f3886070",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +549,553 @@        )\n\n      case _ if numberOfChunks == 1 || minChunkSize > (rangeSize / 2L) =>\n        Vector(EventsRange(startExclusive, endInclusive))\n"
  },
  {
    "id" : "7b71747a-2bb4-4772-b3b9-2e67ef68afd6",
    "prId" : 9792,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46bfa621-ab5d-4662-b3ad-14a3aa56acbd",
        "parentId" : null,
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "What is this method used for?\r\n\r\nWhat can a caller expect?",
        "createdAt" : "2021-05-27T09:12:46Z",
        "updatedAt" : "2021-05-27T09:16:38Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      },
      {
        "id" : "476dc355-b2f7-4bb0-b6df-0ca9e66fb36e",
        "parentId" : "46bfa621-ab5d-4662-b3ad-14a3aa56acbd",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Done, added docs",
        "createdAt" : "2021-05-28T07:46:14Z",
        "updatedAt" : "2021-05-28T07:46:23Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc702de29dc61113786a2b1ce8c955efde5e3eaa",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +535,539 @@    * @return The ordered sequence of sub-ranges with non-overlapping bounds.\n    */\n  private[appendonlydao] def splitRange(\n      startExclusive: Long,\n      endInclusive: Long,"
  },
  {
    "id" : "e084b339-34f4-472c-b871-343c36415ca1",
    "prId" : 9792,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbbb2ae5-f5e7-42bd-a3be-b192979d172a",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "when split range throws an exception we do no recover",
        "createdAt" : "2021-05-28T07:37:02Z",
        "updatedAt" : "2021-05-28T07:37:02Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "fab9b9f3-5e01-44bf-9917-afceed9fe453",
        "parentId" : "cbbb2ae5-f5e7-42bd-a3be-b192979d172a",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "When it throws, it's actually unrecoverable, not much we can do about it. The error condition is actually reachable only via a programming error, so far-fetched and unrecoverable",
        "createdAt" : "2021-05-28T07:40:30Z",
        "updatedAt" : "2021-05-28T07:40:30Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "770edbc2-8ea7-41cb-9988-8520843e2f85",
        "parentId" : "cbbb2ae5-f5e7-42bd-a3be-b192979d172a",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Furthermore, the consumers can also retry, which we actually do for `getContractStateEvents` and we will do with the consumer of this as well.",
        "createdAt" : "2021-05-28T07:49:02Z",
        "updatedAt" : "2021-05-28T07:49:58Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc702de29dc61113786a2b1ce8c955efde5e3eaa",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +268,272 @@      .fromIterator(() =>\n        TransactionsReader\n          .splitRange(\n            startExclusive._2,\n            endInclusive._2,"
  },
  {
    "id" : "e9d47720-90e7-439c-8417-d2f28eeb0b25",
    "prId" : 9792,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1495d036-5e43-425e-ab20-8385bb314f49",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "This condition seems to lead to unintended results e.g. rangeSize = 900, numberOfChunks = 100 will result in a single large range of 900 ",
        "createdAt" : "2021-05-28T07:38:30Z",
        "updatedAt" : "2021-05-28T07:38:31Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "036464d5-6200-4204-9d89-8d500fe218f2",
        "parentId" : "1495d036-5e43-425e-ab20-8385bb314f49",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "It is intended if the number of chunks is small enough, which is something we currently hardcode. When we make the number of chunks configurable we might make this method smarter as well. However, I tend to refrain to make every knob that we introduce configurable ASAP, in order not to bloat the config space with stuff that will never be touched.",
        "createdAt" : "2021-05-28T07:44:16Z",
        "updatedAt" : "2021-05-28T07:44:48Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "d23f80ab-5ff8-4b96-b571-f1278c6544ba",
        "parentId" : "1495d036-5e43-425e-ab20-8385bb314f49",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "But I guess you're right. Let's make it more defensive and adapt if somehow the parameters are wrongly set.",
        "createdAt" : "2021-05-28T07:54:36Z",
        "updatedAt" : "2021-05-28T07:54:36Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "6accaa55-67c6-4db3-8615-1e8f597680af",
        "parentId" : "1495d036-5e43-425e-ab20-8385bb314f49",
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "The solution is simple:\r\neffectiveNumChunks = ceil(rangeSize/minChunkSize.toLong)",
        "createdAt" : "2021-05-28T07:58:38Z",
        "updatedAt" : "2021-05-28T07:58:38Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "54a5476e-37d9-45a5-9011-cfede68a4c16",
        "parentId" : "1495d036-5e43-425e-ab20-8385bb314f49",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Done",
        "createdAt" : "2021-05-28T09:07:26Z",
        "updatedAt" : "2021-05-28T09:07:26Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc702de29dc61113786a2b1ce8c955efde5e3eaa",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +552,556 @@        Vector(EventsRange(startExclusive, endInclusive))\n\n      case _ if (rangeSize / numberOfChunks.toLong) < minChunkSize.toLong =>\n        val effectiveNumberOfChunks = rangeSize / minChunkSize.toLong\n        splitUnsafe(startExclusive, endInclusive, effectiveNumberOfChunks.toInt)"
  },
  {
    "id" : "05fa7c33-5973-4df0-852d-55698baae222",
    "prId" : 9281,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "042987c6-de16-4ec1-8eba-a99121cc977a",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Was it intentional to have a new name for the span? We'll probably have to change the `appendonlydao` substring here during the cleanup at the end. Otherwise existing tracing setups will break. ",
        "createdAt" : "2021-03-31T08:50:29Z",
        "updatedAt" : "2021-03-31T09:06:51Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "7c319374-5094-45c0-bd4d-922f34086863",
        "parentId" : "042987c6-de16-4ec1-8eba-a99121cc977a",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "yeah good point, changing it",
        "createdAt" : "2021-03-31T09:19:17Z",
        "updatedAt" : "2021-03-31T09:19:18Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "b62a7a76-04c1-4b58-8b3a-47158e0beea8",
        "parentId" : "042987c6-de16-4ec1-8eba-a99121cc977a",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "found another two occurrence, fixed those as well",
        "createdAt" : "2021-03-31T09:20:43Z",
        "updatedAt" : "2021-03-31T09:20:43Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "36e9b32168b10be3738d0f289f01e5438c9e2d92",
    "line" : 175,
    "diffHunk" : "@@ -1,1 +173,177 @@      ParticipantTracer\n        .spanBuilder(\n          \"com.daml.platform.store.appendonlydao.events.TransactionsReader.getTransactionTrees\"\n        )\n        .setNoParent()"
  }
]