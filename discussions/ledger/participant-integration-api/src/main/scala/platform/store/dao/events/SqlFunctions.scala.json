[
  {
    "id" : "e6e64f1f-fb19-498a-b5c6-6ad0b34f33fc",
    "prId" : 10027,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acd7df47-7da0-4d76-8572-dd65bd76a7c3",
        "parentId" : null,
        "authorId" : "c36a5b02-f260-4cef-9fc6-22c312c693f7",
        "body" : "Is it worth actually parsing to get character lengths from the live expression on line 86 so these checks don't rot if the expression is changed in future?",
        "createdAt" : "2021-06-16T12:41:25Z",
        "updatedAt" : "2021-06-16T12:44:41Z",
        "lastEditedBy" : "c36a5b02-f260-4cef-9fc6-22c312c693f7",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c4138f593640a4d2df8bcf26339be0030ab42ae",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +64,68 @@    // This is likely extremely inefficient due to the multiple full tablescans on unindexed varray column\n    override def arrayIntersectionWhereClause(arrayColumn: String, parties: Set[Party]): String = {\n      val NumCharsBetweenParties = 3\n      val NumExtraChars = 20\n      val OracleMaxStringLiteralLength = 4000"
  },
  {
    "id" : "1b200312-b952-4b7b-bb86-d80e7dd8fb3a",
    "prId" : 10027,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c15916c-d5c7-4cde-b436-310a856124d7",
        "parentId" : null,
        "authorId" : "c36a5b02-f260-4cef-9fc6-22c312c693f7",
        "body" : "worth adding a unit test for this?",
        "createdAt" : "2021-06-16T12:44:35Z",
        "updatedAt" : "2021-06-16T12:44:41Z",
        "lastEditedBy" : "c36a5b02-f260-4cef-9fc6-22c312c693f7",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c4138f593640a4d2df8bcf26339be0030ab42ae",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +75,79 @@            (List(party) :: prev, party.length + NumExtraChars)\n          } else {\n            prev match {\n              case h :: tail =>\n                ((party :: h) :: tail, currentLength + party.length + NumCharsBetweenParties)"
  },
  {
    "id" : "84946687-ddd0-44db-a2ad-7c3f94365a54",
    "prId" : 10027,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebd74eb5-3e4e-4c63-99c2-57d8d0b6948d",
        "parentId" : null,
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "TLDR: do you really need this now? this might not needed later\r\n\r\nthe root problem here might be something else: this method for constructing the query is totally static, meaning: it is not like we have a prepare statement with something like ? in the middle which we pass to the prepared statement as a data -what we should be doing-, but rather we have a prepared statement where we statically string interpolate all the data (look for the # where this is used).\r\nI can very well imagine if we would be able to pass the all parties as an array, we wouldn't have this problem.\r\nWhich would mean if we change this approach accordingly (this is on our horizon), this change will be lost.\r\nSo question is how bad you need this working on a short run? (if you do I am completely happy to go with it temporarily, although the complexity here scares me a bit)\r\n",
        "createdAt" : "2021-06-16T14:24:57Z",
        "updatedAt" : "2021-06-16T14:24:58Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "0f224099-ee90-4874-a385-810c41186619",
        "parentId" : "ebd74eb5-3e4e-4c63-99c2-57d8d0b6948d",
        "authorId" : "c36a5b02-f260-4cef-9fc6-22c312c693f7",
        "body" : "@nmarton-da without this fix the ValueLimitsIt.scala fails on oracle for sandbox-on-x (that is what triggered the discovery) so this is defensiveness to deal with a big party list of submitters without requiring a hard limit.\r\n\r\n@danielporterda also contemplated moving to a `?` prepared statement parameter replacement approach but that would have had a bigger knock-on impact to interfaces and across the stack which we deemed too impactful given all the moving parts happening now.\r\n\r\nI would vote for merging this on the existing Oracle schema and then when we can revisit as we implement the equiv on the new append only.",
        "createdAt" : "2021-06-16T15:20:08Z",
        "updatedAt" : "2021-06-16T15:20:09Z",
        "lastEditedBy" : "c36a5b02-f260-4cef-9fc6-22c312c693f7",
        "tags" : [
        ]
      },
      {
        "id" : "c0b6eabe-2296-4aa8-9d66-4ef60d2dd630",
        "parentId" : "ebd74eb5-3e4e-4c63-99c2-57d8d0b6948d",
        "authorId" : "1e4a6ee9-a3d0-4e09-9acb-432b82bf892f",
        "body" : "yeah, I'm certainly not in love with this course of action, and I share your assessment of what the \"root problem\" is, but it felt like best of bad options for the moment. As Brian says, it's motivated by making the test pass. The other two possible implementations are\r\n\r\n1. use a prepared statement as you suggest, or\r\n2. render the JSON fields as a materialized view and do a subquery\r\n\r\nIt's not totally clear if a prepared statement will get around the issues with the string length, but that's worth investigating. The reason it felt like a non-starter was having to change a bunch of interfaces while the append only work is in motion.\r\n\r\nAs far as rendering the JSON array fields as a materialized view, this is appealing because it (should) mean that we can create an index on them, however @stephencompall-DA apparently ran into some issues with this that may or may not have implications about correctness - some issue with filtering out duplicates. This is second hand, but the upshot was that it was a larger change that wasn't guaranteed to work, and wasn't clear how it was going to play with your changes.\r\n\r\nIn general, I'm largely opposed to anything that depends on getting arithmetic correct, given how much evidence there is that programmers are terrible at it. Hard to get right, harder still to modify later. +1 to improving this later.",
        "createdAt" : "2021-06-16T15:57:04Z",
        "updatedAt" : "2021-06-16T15:57:04Z",
        "lastEditedBy" : "1e4a6ee9-a3d0-4e09-9acb-432b82bf892f",
        "tags" : [
        ]
      },
      {
        "id" : "8fc1909a-0861-49a5-b67d-ed79a2653f8e",
        "parentId" : "ebd74eb5-3e4e-4c63-99c2-57d8d0b6948d",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "all what you said makes sense to me, sorry guys for not being much constructive here, let's improve on this later :ok_hand:",
        "createdAt" : "2021-06-16T18:22:29Z",
        "updatedAt" : "2021-06-16T18:22:29Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "9f71fc66-621a-4405-8ded-6b945ad30557",
        "parentId" : "ebd74eb5-3e4e-4c63-99c2-57d8d0b6948d",
        "authorId" : "1e4a6ee9-a3d0-4e09-9acb-432b82bf892f",
        "body" : "No worries, if you see me doing what looks like a footgun in the future, please feel free to speak up. Would prefer to explain myself over accidentally doing bad stuff. I'm not always so verbose, scout's honor :)",
        "createdAt" : "2021-06-17T11:25:22Z",
        "updatedAt" : "2021-06-17T11:25:23Z",
        "lastEditedBy" : "1e4a6ee9-a3d0-4e09-9acb-432b82bf892f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c4138f593640a4d2df8bcf26339be0030ab42ae",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +63,67 @@    // TODO https://github.com/digital-asset/daml/issues/9493\n    // This is likely extremely inefficient due to the multiple full tablescans on unindexed varray column\n    override def arrayIntersectionWhereClause(arrayColumn: String, parties: Set[Party]): String = {\n      val NumCharsBetweenParties = 3\n      val NumExtraChars = 20"
  }
]