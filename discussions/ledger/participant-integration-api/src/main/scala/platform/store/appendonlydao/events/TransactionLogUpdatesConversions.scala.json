[
  {
    "id" : "b1857f5d-2629-4165-b7bb-e064bfd81585",
    "prId" : 9882,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9882",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51e04946-79ff-482f-8b46-de9ee0522702",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "Please unify the signatures for `exercisedToFlatEvent` and `createdToFlatEvent` so that both return a Future or none returns a Future",
        "createdAt" : "2021-06-14T15:31:10Z",
        "updatedAt" : "2021-06-14T15:31:10Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "fab34020-443c-46fb-b0e7-314800b2c7f8",
        "parentId" : "51e04946-79ff-482f-8b46-de9ee0522702",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Are you sure? I think it is better to let the types speak for themselves than to align them artificially:\r\n* `createdToFlatEvent` performs some time-consuming computation that needs an async treatment\r\n* `exercisedToFlatEvent` performs a simple DTO mapping, sync. \r\n\r\nIf I were to align them, I would have to force `exercisedToFlatEvent` to return `Future`. However, imho, the new method prototype would be misleading, since it would be hinting some async stuff will be happening under the hood.",
        "createdAt" : "2021-06-14T21:21:13Z",
        "updatedAt" : "2021-06-14T21:22:09Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddad37f02ff793ab7c2ac94107bef997d8f77cd0",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +124,128 @@\n        case exercisedEvent: TransactionLogUpdate.ExercisedEvent if exercisedEvent.consuming =>\n          Future.successful(Some(exercisedToFlatEvent(requestingParties, exercisedEvent)))\n\n        case _ => Future.successful(None)"
  },
  {
    "id" : "8696065d-35d6-4d32-9521-dbbfd2e7de31",
    "prId" : 9882,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9882",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09c35864-0fa5-48ef-9dc2-bbf0f7092261",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "We are spawning here a number of futures on behalf of a single transaction. Isn't that too granular concurency?",
        "createdAt" : "2021-06-14T15:32:10Z",
        "updatedAt" : "2021-06-14T15:32:10Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "83bbb6e6-8e2e-4f6d-85d0-0f896d5abe71",
        "parentId" : "09c35864-0fa5-48ef-9dc2-bbf0f7092261",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "It is more granular than before, but I didn't consider it a problem. We are wrapping some cpu significant ops in these Futures, so I wouldn't expect a considerable impact. I'll play with some benchmarks just to be sure",
        "createdAt" : "2021-06-14T21:24:17Z",
        "updatedAt" : "2021-06-14T21:24:17Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "6c0f3c1f-46dd-4cef-ba9a-b60aaab5daff",
        "parentId" : "09c35864-0fa5-48ef-9dc2-bbf0f7092261",
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "Let's park it for the moment, test it in LR using bench tool and revisit if and when it causes issues",
        "createdAt" : "2021-06-15T09:21:26Z",
        "updatedAt" : "2021-06-15T09:22:06Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddad37f02ff793ab7c2ac94107bef997d8f77cd0",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@          val events = removeTransient(filtered)\n\n          Future\n            .traverse(events)(toFlatEvent(_, filter.keySet, verbose, lfValueTranslation))\n            .map(_.collect { case Some(value) => value })"
  }
]