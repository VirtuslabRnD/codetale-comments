[
  {
    "id" : "446db86c-1907-4abd-bf25-5cd3a3270904",
    "prId" : 9561,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fcf9e7e-a5f3-4b66-b24f-0faed0d5228e",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "This removes the dependency of JdbcIndexer on the old-school DAO, nice.",
        "createdAt" : "2021-05-05T12:09:44Z",
        "updatedAt" : "2021-05-06T15:47:17Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "59c9dedb60b09f63a983a86b6c2a587d49193ac8",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +87,91 @@    ): Future[ResourceOwner[Indexer]] =\n      Future.successful(for {\n        ledgerDao <- com.daml.platform.store.dao.JdbcLedgerDao.writeOwner(\n          serverRole,\n          config.jdbcUrl,"
  },
  {
    "id" : "9ede7d15-472e-41c9-8e45-917341a56f58",
    "prId" : 9481,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68d37664-fbce-4ece-a7cb-fda3cf36524d",
        "parentId" : null,
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "good catch!",
        "createdAt" : "2021-05-17T14:36:50Z",
        "updatedAt" : "2021-05-17T15:04:49Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "39c7762ebfcd194cb99cedfb89235e21d7f28c93",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +69,73 @@    ): Future[ResourceOwner[Indexer]] =\n      flywayMigrations\n        .validate(config.enableAppendOnlySchema)\n        .flatMap(_ => initialized(resetSchema = false))(resourceContext.executionContext)\n"
  },
  {
    "id" : "934afbdd-6e25-4734-b93c-b434adb60c51",
    "prId" : 9368,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3774f6bf-b638-4052-81e5-0d96038098a4",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "If you have a follow-up ticket, please add these details there (these are not about the current code but about a potential future state).",
        "createdAt" : "2021-04-12T08:57:11Z",
        "updatedAt" : "2021-04-12T20:01:40Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "ed044605-385b-4044-aed4-ca96bf14cc3f",
        "parentId" : "3774f6bf-b638-4052-81e5-0d96038098a4",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "We have a whole epic for cleaning up the index/indexer code base after transitioning to the append-only schema. The details of how we refactor existing interfaces are not clear yet, that's why we are adding `TODO append-only:` comments to mark relevant places for later.",
        "createdAt" : "2021-04-12T09:26:41Z",
        "updatedAt" : "2021-04-12T20:01:40Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2a55d6fc65dc4fde398f1b5aa404b28db5cb65b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +29,33 @@\nobject JdbcIndexer {\n  // TODO append-only: currently StandaloneIndexerServer (among others) has a hard dependency on this concrete class.\n  // Clean this up, for example by extracting the public interface of this class into a trait so that it's easier\n  // to write applications that do not depend on a particular indexer implementation."
  },
  {
    "id" : "e6cdcc17-c6fe-4ac4-938a-9a386dbba243",
    "prId" : 8415,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8415",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6db2158a-34c2-48d0-8067-d07771d783ce",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "Samir, this is the change",
        "createdAt" : "2021-01-29T16:30:18Z",
        "updatedAt" : "2021-01-29T16:30:19Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "01fa3c71-971f-430a-ba4d-54a5d16d4376",
        "parentId" : "6db2158a-34c2-48d0-8067-d07771d783ce",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "This makes total sense. Thanks!",
        "createdAt" : "2021-01-29T16:31:54Z",
        "updatedAt" : "2021-01-29T16:31:54Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "cddfea7e81738f6e4fc895a657628b6f760fe0c7",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +56,60 @@          config.jdbcUrl,\n          config.eventsPageSize,\n          servicesExecutionContext,\n          metrics,\n          lfValueTranslationCache,"
  },
  {
    "id" : "9d01adef-8e89-449c-b096-ca61338e09c4",
    "prId" : 7923,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18e2aeb1-fc8b-4878-abd0-40f38f06966d",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "```suggestion\r\n      .mapAsync(8) {\r\n```\r\n\r\nThis block can safely run in parallel, no?",
        "createdAt" : "2020-11-10T12:06:15Z",
        "updatedAt" : "2020-11-11T13:22:25Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "e7472558-2267-4caf-9ad7-c76b1019d1e4",
        "parentId" : "18e2aeb1-fc8b-4878-abd0-40f38f06966d",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I don't think it can. This would attempt at writing in parallel two transactions, with one with an older offset possibly being persisted before a newer one.",
        "createdAt" : "2020-11-10T14:00:03Z",
        "updatedAt" : "2020-11-11T13:22:25Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "6c023702-571f-47a6-ac83-468086f85141",
        "parentId" : "18e2aeb1-fc8b-4878-abd0-40f38f06966d",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "If we split out writing the ledger end (as in #7845) and keep that sequential, it might be OK to do this in parallel.",
        "createdAt" : "2020-11-10T14:14:20Z",
        "updatedAt" : "2020-11-11T13:22:25Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "2926532d-1b74-4174-aedb-76c144a0acd4",
        "parentId" : "18e2aeb1-fc8b-4878-abd0-40f38f06966d",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "@SamirTalwar-DA Can we ? You would have multiple transactions writing entries to the same tables at the same time",
        "createdAt" : "2020-11-10T14:21:10Z",
        "updatedAt" : "2020-11-11T13:22:25Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "ec36f6b5-1153-4439-9a9c-551216950f7c",
        "parentId" : "18e2aeb1-fc8b-4878-abd0-40f38f06966d",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "> This would attempt at writing in parallel two transactions\r\n\r\nAs far as I can see, this block only prepares SQL statements, it does not do any database IO. And `mapAsync` should preserve the order of elements.",
        "createdAt" : "2020-11-10T14:21:18Z",
        "updatedAt" : "2020-11-11T13:22:25Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "9d843287-b944-4a80-96a4-929163dc8320",
        "parentId" : "18e2aeb1-fc8b-4878-abd0-40f38f06966d",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Just for reference, @rautenrieth-da is referring to the `mapAsync` at line 248. Github screwed this up after an update of mine. To answer Robert's question, increasing parallelization here is on my radar but I would do it on a different PR in order to see how improvements compose. This PR already yielded a significant throughput improvement",
        "createdAt" : "2020-11-10T14:24:01Z",
        "updatedAt" : "2020-11-11T13:22:25Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "40e6acec-e3fe-4607-a6f6-c5cd0ea0bebc",
        "parentId" : "18e2aeb1-fc8b-4878-abd0-40f38f06966d",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "> > This would attempt at writing in parallel two transactions\r\n> \r\n> As far as I can see, this block only prepares SQL statements, it does not do any database IO. And `mapAsync` should preserve the order of elements.\r\n\r\nUh, my bad. I even checked twice that I was commenting the appropriate line...\r\n\r\n> Just for reference, @rautenrieth-da is referring to the `mapAsync` at line 248. Github screwed this up after an update of mine. To answer Robert's question, increasing parallelization here is on my radar but I would do it on a different PR in order to see how improvements compose. This PR already yielded a significant throughput improvement\r\n\r\nUh, I see, thanks.\r\n\r\n---\r\n\r\nGoing back to the original topic: running multiple query preparations in parallel: since they have to be committed in order and right now the majority of the cost is persistence, I doubt there's anything to gain from doing that. Once preparation starts taking more time than persistence, there may be an advantage in doing that. If we want to experiment with this in the future I would recommend making this configurable and not put hard-coded values, forcing us to recompile everything to perform experiments.",
        "createdAt" : "2020-11-10T14:42:56Z",
        "updatedAt" : "2020-11-11T13:22:25Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "adca996746db339c8f338f1f0ea90cdd5ffb1d3c",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +242,246 @@      })\n      .mapAsync(1)((prepareTransactionInsert _).tupled)\n      .mapAsync(1) {\n        case kvUpdate @ OffsetUpdate(offset, update) =>\n          withEnrichedLoggingContext(JdbcIndexer.loggingContextFor(offset, update)) {"
  },
  {
    "id" : "5df830ae-7fa8-4d67-a200-00026093143b",
    "prId" : 7923,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b31f1bf-1ebd-4861-9252-4174e4ce624f",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "We should look at the documentation of this metric and make sure it says this is the last offset received from the ledger, and not the last offset written to the index database. The update of the metric is now a few async boundaries away from writing the data to the database.",
        "createdAt" : "2020-11-10T12:07:37Z",
        "updatedAt" : "2020-11-11T13:22:25Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "f585909e-ebc0-4f23-a9e5-e4b282922c6e",
        "parentId" : "1b31f1bf-1ebd-4861-9252-4174e4ce624f",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "It is in the same spot (in the execution flow) as before, but separated by some Akka operators. I am not sure how this could have changed the meaning of it. Am I missing something?",
        "createdAt" : "2020-11-10T14:30:50Z",
        "updatedAt" : "2020-11-11T13:22:25Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "adca996746db339c8f338f1f0ea90cdd5ffb1d3c",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +238,242 @@          logger.trace(update.description)\n\n          metrics.daml.indexer.lastReceivedRecordTime.updateValue(lastReceivedRecordTime)\n          metrics.daml.indexer.lastReceivedOffset.updateValue(offset.toApiString)\n      })"
  },
  {
    "id" : "124d5e40-e549-494e-8605-ace9e794cf20",
    "prId" : 7678,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7678",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f94f460c-954e-449f-8fa8-51a109291be1",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "There's inconsistency in how you name your implicit resource contexts. I would recommend sticking to the naming you used here (`resourceContext`), since we also have other contexts we pass around.",
        "createdAt" : "2020-10-14T12:13:16Z",
        "updatedAt" : "2020-10-19T09:32:37Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "c73cfd7e-e2c4-4b69-8fa0-c1c90123b277",
        "parentId" : "f94f460c-954e-449f-8fa8-51a109291be1",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I tried to keep it as `resourceContext` except when it's the implicit parameter of a `ResourceOwner#acquire`, in which case it's `context`. Is this too confusing?",
        "createdAt" : "2020-10-14T12:36:11Z",
        "updatedAt" : "2020-10-19T09:32:37Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "674bae11cc5a88ac1ab207b4a337c1c39eb07a5a",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +119,123 @@    private def initOrCheckParticipantId(\n        dao: LedgerDao,\n    )(implicit resourceContext: ResourceContext): Future[Unit] = {\n      val id = ParticipantId(Ref.ParticipantId.assertFromString(config.participantId))\n      dao"
  }
]