[
  {
    "id" : "4631be16-1266-4218-9fa2-9d612a9cd58d",
    "prId" : 8993,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b09829b6-fa19-40eb-ae24-7781f1c01da8",
        "parentId" : null,
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Do you know what's the improvement of adding these async barriers? I considered adding them a while ago, but decided against since I didn't believe they could bring anything when we have a buffer before the insertion stages. Also, using them implicitly forces stage execution on separate actors and 16-sized buffers between the stages. ",
        "createdAt" : "2021-03-03T06:45:26Z",
        "updatedAt" : "2021-03-03T06:47:43Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "964687d7-6935-4ef9-af4c-e2d7ea11d757",
        "parentId" : "b09829b6-fa19-40eb-ae24-7781f1c01da8",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Without the async barriers, the three mapAsync stages are being fused together, causing some additional overhead that is not reflected in the individual metrics.",
        "createdAt" : "2021-03-03T06:51:25Z",
        "updatedAt" : "2021-03-03T06:51:25Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee71af0841428da0c65f9015092468cfcd3ea73f",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +432,436 @@      .map(PipelinedUpdateWithTimer(_, metrics.daml.index.db.storeTransaction.time()))\n      .mapAsync(1)(insertTransactionState)\n      .async\n      .mapAsync(1)(insertTransactionEvents)\n      .async"
  },
  {
    "id" : "b90f264c-ded3-4e92-9e33-a2dd8c67501f",
    "prId" : 8676,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1621a28-8f6e-4a3f-8402-47417a321e45",
        "parentId" : null,
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "I've created this object to ensure consistent logging for different keys. This is very similar to `com.daml.platform.apiserver.services.logging`. I wonder if it would be worth merging both of these helper utils. What do you think @mziolekda ?",
        "createdAt" : "2021-02-10T18:30:00Z",
        "updatedAt" : "2021-02-15T09:34:36Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      },
      {
        "id" : "707529cd-9cdc-416b-b8b7-50358b6fc0e9",
        "parentId" : "b1621a28-8f6e-4a3f-8402-47417a321e45",
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "I am ok with splitting it to a follow-up PR. This one is getting big as it stands.",
        "createdAt" : "2021-02-10T19:21:55Z",
        "updatedAt" : "2021-02-15T09:34:36Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "869ef17902cef513d358b811ccfcd330aabc77f6",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +348,352 @@      \"submitter\" -> parties.mkString(\"[\", \", \", \"]\")\n\n  }\n}\n"
  },
  {
    "id" : "1f605974-23ab-4193-be71-ead43cbb8730",
    "prId" : 8571,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92638ac2-c719-47f5-bffd-7d2e1bd8aec7",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "You pointed out that we don't time the whole flow when pipelining. Can we do something to start and stop a timer? You may need to thread the timer context through the pipeline though, so it might be too much.",
        "createdAt" : "2021-01-21T10:21:06Z",
        "updatedAt" : "2021-01-27T07:44:24Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "30b9a778-1701-4f61-90be-a8f5de9c9772",
        "parentId" : "92638ac2-c719-47f5-bffd-7d2e1bd8aec7",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "It might be worth adding something like `com.daml.metrics.Timed.timedAndTrackedFuture`, but for Akka streams. \r\n\r\nAnother use case is measuring the number of elements being currently processed, or measuring the number of items in a `.buffer()` (cc @nmarton-da).\r\n\r\nThis is not something for this PR though.",
        "createdAt" : "2021-01-25T09:20:35Z",
        "updatedAt" : "2021-01-27T07:44:24Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "b4b94233-d3c8-497f-ad1e-731ca73c6091",
        "parentId" : "92638ac2-c719-47f5-bffd-7d2e1bd8aec7",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Added back the timer by threading the timer context through the stages. @rautenrieth-da A reason for which I did not want to time the entire flow is its inherent branching: we would be timing both metadata and pipelined transaction updates on the `store_ledger_entry` timer.",
        "createdAt" : "2021-01-26T13:30:07Z",
        "updatedAt" : "2021-01-27T07:44:24Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "639645b5c77f50727cc936e3fed3a6dcc97b19d6",
    "line" : 373,
    "diffHunk" : "@@ -1,1 +371,375 @@      }\n\n  private[indexer] val flow: ExecuteUpdateFlow =\n    Flow[OffsetUpdate]\n      .mapAsync(1)(prepareUpdate)"
  }
]