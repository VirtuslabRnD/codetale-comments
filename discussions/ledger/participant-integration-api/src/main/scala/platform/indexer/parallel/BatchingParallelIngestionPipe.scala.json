[
  {
    "id" : "cca7a08b-7dcb-461d-8904-b751d59a519f",
    "prId" : 9304,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "616ea8ea-05b7-49f8-8122-b280e420d5d0",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Note to self and other reviewers: `mapAsync` does not create an asynchronous boundary. Adding `.async` here makes sure the stages are decoupled and creates a 16-element buffer between the stages. See https://blog.colinbreck.com/maximizing-throughput-for-akka-streams/.",
        "createdAt" : "2021-04-06T08:32:49Z",
        "updatedAt" : "2021-04-06T12:17:20Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5554358bdbf52c16bafb7f0f0df5174fb836503",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@      // Stage 4: Inserting data into the database. Almost no CPU load here, threads are executing SQL commands over JDBC, and waiting for the result. This defines the parallelism on the SQL database side, same amount of PostgreSQL Backend processes will do the ingestion work.\n      .async\n      .mapAsync(ingestingParallelism)(ingester)\n      // Stage 5: Preparing data sequentially for throttled mutations in database (tracking the ledger-end, corresponding sequential event ids and latest-at-the-time configurations)\n      .conflate(tailer)"
  },
  {
    "id" : "37ef7002-59fb-49f9-b329-62a60b6829fc",
    "prId" : 9304,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04f09097-1dbd-4867-98c7-570a7cb4c1b0",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "This class is hardcoded to use the Postgres-specific `RawDBBatchPostgreSQLV1`, which is used in methods like `seqMapper()`. We might have to refactor this later to make the `BatchingParallelIngestionPipe` truly generic and avoid duplicating the non-database specific logic (such as tracking of the last configuration). No need to change anything in this PR though.",
        "createdAt" : "2021-04-06T08:46:43Z",
        "updatedAt" : "2021-04-06T12:17:20Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5554358bdbf52c16bafb7f0f0df5174fb836503",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +52,56 @@}\n\ncase class RunningDBBatch(\n    lastOffset: Offset,\n    lastSeqEventId: Long,"
  }
]