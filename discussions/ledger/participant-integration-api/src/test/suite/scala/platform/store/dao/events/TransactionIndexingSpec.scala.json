[
  {
    "id" : "c6f59cfd-572d-48ad-8a22-eecd052b8ac5",
    "prId" : 8106,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8106",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8377373a-908a-4fb9-bc7c-84b8d7541a24",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "It would probably make sense to add a test case with a fetch, to make sure we're not missing those.",
        "createdAt" : "2020-11-30T14:42:38Z",
        "updatedAt" : "2020-12-01T16:59:23Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "2abdf7f7-82ca-44ed-9d75-a2d237524129",
        "parentId" : "8377373a-908a-4fb9-bc7c-84b8d7541a24",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "The idea of this change is to remove `Fetch` and `LookupByKey` nodes and have everything rely instead only `blindingInfo`; this PR doesn't fix an existing problem but completes the removal altogether. Since the goal is such a removal, I'm not sure about what to test regarding fetches. Can you expand, e.g. what would you like to check in addition?",
        "createdAt" : "2020-11-30T14:54:45Z",
        "updatedAt" : "2020-12-01T16:59:23Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "c99ce9f7-37c3-4d70-898f-8f0c57fd29bc",
        "parentId" : "8377373a-908a-4fb9-bc7c-84b8d7541a24",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "If you are removing all fetches in all cases and not only optionally, then yes.",
        "createdAt" : "2020-11-30T15:01:27Z",
        "updatedAt" : "2020-12-01T16:59:23Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "6f40e12a-7898-4e09-b0b7-bc41f8d913e6",
        "parentId" : "8377373a-908a-4fb9-bc7c-84b8d7541a24",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "Yes, all of them, always (on the committer, after validating/executing and saving blinding info in a new field).",
        "createdAt" : "2020-11-30T15:20:48Z",
        "updatedAt" : "2020-12-01T16:59:23Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "b0346453-0253-4e3e-89e0-56302275048b",
        "parentId" : "8377373a-908a-4fb9-bc7c-84b8d7541a24",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Does this mean that the committer now effectively _must_ send the blinding? I'm not sure you can get the correct blinding with a partial view of the transaction.",
        "createdAt" : "2020-11-30T15:35:25Z",
        "updatedAt" : "2020-12-01T16:59:23Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "b3b5dbac-2245-4f10-88a3-ad2f443d5036",
        "parentId" : "8377373a-908a-4fb9-bc7c-84b8d7541a24",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "> Does this mean that the committer now effectively must send the blinding?\r\n\r\nYes, with this PR it has to and it has done so since #8009.\r\n\r\n> I'm not sure you can get the correct blinding with a partial view of the transaction.\r\n\r\nI'm not sure I understand, which partial view do you mean and which blinding would be missing?",
        "createdAt" : "2020-11-30T15:43:48Z",
        "updatedAt" : "2020-12-01T16:59:23Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "af883c07-ca94-484a-9976-3f0bf589ada4",
        "parentId" : "8377373a-908a-4fb9-bc7c-84b8d7541a24",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "> I'm not sure I understand, which partial view do you mean and which blinding would be missing?\r\n\r\nIf you don't send fetch nodes, can you still run blinding on the transaction and get back an accurate result?\r\n\r\n> Yes, with this this PR it has to and it has done so since #8009.\r\n\r\nAre we planning to reflect this into the types as well? Right now the function is taking an `Option[BlindingInfo]` but that should probably become a `BlindingInfo`, right?",
        "createdAt" : "2020-11-30T15:53:11Z",
        "updatedAt" : "2020-12-01T16:59:23Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "50c2ab4c-08bb-4a7e-ab25-d2d6dfc64b10",
        "parentId" : "8377373a-908a-4fb9-bc7c-84b8d7541a24",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "> If you don't send fetch nodes, can you still run blinding on the transaction and get back an accurate result?\r\n\r\nYes, because the blinding info is computed from those nodes before they are removed, then saved and restored on the read path, that gives precedence to that pre-computed blinding info (new format) over computing it from the nodes (old format) in #8012.\r\n\r\n> Are we planning to reflect this into the types as well? Right now the function is taking an Option[BlindingInfo] but that should probably become a BlindingInfo, right?\r\n\r\nWhich function do you mean? A requirement is that the old format (that doesn't have committer-pre-computed `BlindingInfo`) should still work, that's why `TransactionWriter.prepare` receives it as an `Option` and, if not present (which means old format, i.e. the `Fetch` and `LookupByKey` nodes are still there), computes it. But `TransactionIndexing.from` has to receive a `BlindingInfo` and it was never optional there.",
        "createdAt" : "2020-11-30T16:01:21Z",
        "updatedAt" : "2020-12-01T16:59:23Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "ebc3ce09-6860-4b34-ab29-159668394fbc",
        "parentId" : "8377373a-908a-4fb9-bc7c-84b8d7541a24",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "> A requirement is that the old format (that doesn't have committer-pre-computed BlindingInfo) should still work\r\n\r\nHa-ha, of course, backwards compatibility, thanks.\r\n\r\n> Yes, because the blinding info is computed from those nodes before they are removed, then saved and restored on the read path, that gives precedence to that pre-computed blinding info (new format) over computing it from the nodes (old format) in #8012.\r\n\r\nAllow me to re-phrase: the assumption is that one should send either\r\n\r\n* the full transaction with no blinding (old), _or_\r\n* the partial transaction with blinding (new).\r\n\r\nSomething like \"the partial transaction without blinding\" is not possible, right?",
        "createdAt" : "2020-11-30T16:44:42Z",
        "updatedAt" : "2020-12-01T16:59:23Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "0cd73520-de08-4eb8-98b5-135e6a140ff1",
        "parentId" : "8377373a-908a-4fb9-bc7c-84b8d7541a24",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "No it is not; the only intermediate possibility is \"the full transaction with blinding\", i.e. between the previous SDK snapshot and the next one (assuming this PR will enter `master` in time for that, else until the SDK where it enters).",
        "createdAt" : "2020-11-30T16:50:14Z",
        "updatedAt" : "2020-12-01T16:59:23Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "f4b00b87-cb6d-4ff8-a13e-1a48da33272d",
        "parentId" : "8377373a-908a-4fb9-bc7c-84b8d7541a24",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "And, in that case, blinding info has precedence.",
        "createdAt" : "2020-11-30T16:51:38Z",
        "updatedAt" : "2020-12-01T16:59:23Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcd0044b421c164d129c3e40d7f90ac70efe65be",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +13,17 @@\nfinal class TransactionIndexingSpec extends WordSpec with Matchers {\n  \"TransactionIndexing\" should {\n    \"apply blindingInfo divulgence upon construction\" in {\n      val aContractId = ContractId.assertFromString(\"#c0\")"
  }
]