[
  {
    "id" : "c387edaf-3521-45be-9dad-5878b024eca3",
    "prId" : 10116,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94aa627b-395a-4d0d-b234-cde9573557fb",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Should we open a ticket to track this?",
        "createdAt" : "2021-07-09T07:53:13Z",
        "updatedAt" : "2021-07-09T07:55:10Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "43587b69-5e3d-4d6d-b0f1-e0e31318f389",
        "parentId" : "94aa627b-395a-4d0d-b234-cde9573557fb",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "Can it be that this signals a bug? If it is a bug we might want to solve it here, what do you think?\r\n\r\nThis is the direct consequence of having a hard dependency on the transaction parsing logic, if we would have that functionality injected, we could test here precisely the mapping from transaction-nodes to events.\r\nI am little bit worried we are testing here something which should be best tested in LF.\r\n",
        "createdAt" : "2021-07-09T10:45:53Z",
        "updatedAt" : "2021-07-09T11:10:44Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "6d0d68df-a936-4278-aa37-737843845b99",
        "parentId" : "94aa627b-395a-4d0d-b234-cde9573557fb",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "This particular issue doesn't come from the transaction traversal logic. It's the `BlindingInfo` class that produces a divulgence entry. There is even a [unit test for BlindingInfo](https://github.com/digital-asset/daml/blob/main/daml-lf/engine/src/test/scala/com/digitalasset/daml/lf/engine/BlindingSpec.scala#L195) that handles divulgence under rollback nodes.\r\n\r\n@moritzkiefer-da @remyhaemmerle-da Is it intended that `BlindingInfo` produces divulgence entries that reference create events rolled back in the same transaction? Is there any point in storing such divulgence events (maybe for a future where divulgence events are directly observable through the ledger API)?",
        "createdAt" : "2021-07-09T13:31:12Z",
        "updatedAt" : "2021-07-09T13:31:12Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "1e9f6baf-dba3-4428-ae42-206b37af3732",
        "parentId" : "94aa627b-395a-4d0d-b234-cde9573557fb",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "`BlindingInfo` included transient contracts already so contracts that are created and archived in the same transaction. Given that, it seemed natural to also include rolled-back creates. If you want to filter out transient and rolled-back creates you can use `inactiveContracts` https://github.com/digital-asset/daml/blob/729afa8c7b68580b6c4aa784e0f2428960eb0635/daml-lf/transaction/src/main/scala/com/digitalasset/daml/lf/transaction/Transaction.scala#L406",
        "createdAt" : "2021-07-09T13:40:28Z",
        "updatedAt" : "2021-07-09T13:40:28Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f09c45a1-4a20-461e-8112-5e190674d47f",
        "parentId" : "94aa627b-395a-4d0d-b234-cde9573557fb",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "A divulged transient contract should be visible over the transaction tree stream, so we can't filter out divulgence based on `inactiveContracts`. Divulging a rolled back contract on the other hand is something that \"never happened\" in my mental model (which might be wrong).\r\n\r\nIf the semantics are not clear, I would opt for storing the divulgence event. Divulging rolled back contracts should be something rare, and we can always delete these events later if we don't need them.",
        "createdAt" : "2021-07-09T14:24:21Z",
        "updatedAt" : "2021-07-09T14:25:42Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "50b51301-15cf-4560-83b3-310979081764",
        "parentId" : "94aa627b-395a-4d0d-b234-cde9573557fb",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "> A divulged transient contract\r\n\r\nI think you’re mixing up divulgence and disclosure here. Disclosure is what lets us see nodes on the ledger API, e.g., the create and exercise for a transient contract. At the moment we do not need this for rollback nodes but we will need it once they are exposed and ignoring the ledger API, you need it in the sense that if you look at privacy between participants those nodes will be shipped around (and this matters in Canton).\r\n\r\nDivulgence (from an indexer pov) is what lets us fetch a contract in a later transaction (the fetch node is never exposed on the ledger API). You don’t need that for transient contracts and you don’t need it for rolled back contracts.",
        "createdAt" : "2021-07-09T15:08:15Z",
        "updatedAt" : "2021-07-09T15:08:22Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ded7f977-a30b-401a-9cfc-d3d6e80cba43",
        "parentId" : "94aa627b-395a-4d0d-b234-cde9573557fb",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "You can still have a single transaction where a contract is created, then divulged through a fetch/exercise node, then archived, no? _Right now_ such a divulgence event has no use in the index database (and maybe it never will), but I would not change whether such events are stored as part of this PR. I have opened a separate issue to discuss this.",
        "createdAt" : "2021-07-15T09:54:29Z",
        "updatedAt" : "2021-07-15T09:54:30Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "dd46ed13-1898-4941-8ba8-946fab9e1db8",
        "parentId" : "94aa627b-395a-4d0d-b234-cde9573557fb",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "As far as I know https://github.com/digital-asset/daml/blob/8747b3d7dcb172705353b59ad54648ca3875c1c0/ledger/participant-integration-api/src/main/scala/platform/store/dao/events/TransactionIndexing.scala#L221 filters out such divulence events for both transient & rolled back nodes but my understanding of the indexer is very superficial.",
        "createdAt" : "2021-07-15T09:59:45Z",
        "updatedAt" : "2021-07-15T09:59:45Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "bac7564f680718f3dcef19aecba5c443a13b2e9d",
    "line" : 1111,
    "diffHunk" : "@@ -1,1 +1109,1113 @@\n      dtos should contain theSameElementsInOrderAs List(\n        // TODO append-only: Why is there a divulgence event? The divulged contract doesn't exist because it was rolled back.\n        DbDto.EventDivulgence(\n          event_offset = Some(someOffset.toHexString),"
  },
  {
    "id" : "bfd481bb-1022-4af0-982c-819bcf1d397c",
    "prId" : 10116,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f229340-1116-4b8d-a9b8-53e44368d4b7",
        "parentId" : null,
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "minor, would it be ok with you to put an extra line between the test cases?",
        "createdAt" : "2021-07-09T09:13:53Z",
        "updatedAt" : "2021-07-09T11:10:44Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bac7564f680718f3dcef19aecba5c443a13b2e9d",
    "line" : 432,
    "diffHunk" : "@@ -1,1 +430,434 @@    }\n\n    \"handle TransactionAccepted (single consuming exercise node)\" in {\n      val submitterInfo = someSubmitterInfo\n      val transactionMeta = someTransactionMeta"
  },
  {
    "id" : "350a9940-6b53-4468-b199-d48b97fe539b",
    "prId" : 10116,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88c307e3-519b-44fc-a139-472c4161b9bb",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "```suggestion\r\n  private[this] implicit val DbDtoEq: org.scalactic.Equality[DbDto] = {\r\n    case (a: DbDto, b: DbDto) =>\r\n      (a.productPrefix === b.productPrefix) &&\r\n        (a.productArity == b.productArity) &&\r\n        (a.productIterator zip b.productIterator).forall {\r\n          case (x: Array[_], y: Array[_]) => x sameElements y\r\n          case (Some(x: Array[_]), Some(y: Array[_])) => x sameElements y\r\n          case (x, y) => x === y\r\n        }\r\n    case (_, _) => false\r\n  }\r\n```\r\n\r\nThis seems to work nicely with `DbDto extends NeverEqualsOverride`",
        "createdAt" : "2021-07-09T12:20:11Z",
        "updatedAt" : "2021-07-09T13:17:39Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "d0ad2be5-45da-4932-b41c-1a87fb80afb4",
        "parentId" : "88c307e3-519b-44fc-a139-472c4161b9bb",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "to be cleaner the comparison should be defined explicitly for all subtypes of DbDto.",
        "createdAt" : "2021-07-09T13:17:37Z",
        "updatedAt" : "2021-07-09T13:31:51Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "177f2a55-6e47-4c9a-ac62-5fb5cf9b6f18",
        "parentId" : "88c307e3-519b-44fc-a139-472c4161b9bb",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I do not ask to add the following test, I just try to underline the problem of `SomeArrayEquals`\r\n\r\n```suggestion\r\n\r\n  \"EventDivulgence equality\" should {\r\n    \"be symmetric\" in {\r\n\r\n      val x = DbDto.EventDivulgence(\r\n        event_offset = None,\r\n        command_id = None,\r\n        workflow_id = None,\r\n        application_id = None,\r\n        submitters = None,\r\n        contract_id = \"cid\",\r\n        template_id = None,\r\n        tree_event_witnesses = Set.empty,\r\n        create_argument = Some(Array(1)),\r\n        create_argument_compression = None,\r\n        event_sequential_id = 0,\r\n      )\r\n\r\n      (x: DbDto) shouldEqual x.copy(create_argument = Some(Array(1)))\r\n\r\n    }\r\n\r\n  }\r\n\r\n```",
        "createdAt" : "2021-07-09T13:23:38Z",
        "updatedAt" : "2021-07-09T13:23:39Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "c2a32081-d796-4ab3-bb3d-fefb06896225",
        "parentId" : "88c307e3-519b-44fc-a139-472c4161b9bb",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "such a nice idea defining the comparator for the test only in that fashion!",
        "createdAt" : "2021-07-09T14:35:50Z",
        "updatedAt" : "2021-07-09T14:35:51Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bac7564f680718f3dcef19aecba5c443a13b2e9d",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +54,58 @@class UpdateToDbDtoSpec extends AnyWordSpec with Matchers {\n  import UpdateToDbDtoSpec._\n\n  \"UpdateToDbDto\" should {\n"
  }
]