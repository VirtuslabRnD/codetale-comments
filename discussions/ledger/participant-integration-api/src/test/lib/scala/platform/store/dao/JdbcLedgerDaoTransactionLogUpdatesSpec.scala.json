[
  {
    "id" : "1946b782-1597-48c5-af7c-d3bcf4f1e3bb",
    "prId" : 9813,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9813",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc80edb6-93eb-4f03-b142-143d3848253b",
        "parentId" : null,
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "Why do we need `AtomicLong` here? Is it for the handy get-and-increment method?",
        "createdAt" : "2021-05-27T17:34:51Z",
        "updatedAt" : "2021-05-27T17:39:01Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      },
      {
        "id" : "fd9734ca-9bd5-44d7-b1ff-4726d4f17409",
        "parentId" : "dc80edb6-93eb-4f03-b142-143d3848253b",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Yes and most importantly: no other way in Scala to pass a mutable ref as a parameter otherwise",
        "createdAt" : "2021-05-28T09:55:05Z",
        "updatedAt" : "2021-05-28T09:55:05Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "df1966ecec07f2eff8676b997dc9aa67626d04b1",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +87,91 @@      val exercisedContractKey = Map(offset2 -> contractKey, offset3 -> contractKey)\n\n      val eventSequentialIdGen = new AtomicLong(from._2 + 1L)\n\n      assertExpectedEquality(actualTx1, t1, offset1, exercisedContractKey, eventSequentialIdGen)"
  }
]