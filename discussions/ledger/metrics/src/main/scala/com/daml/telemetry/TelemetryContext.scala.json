[
  {
    "id" : "2e07ca61-8a67-43f7-9836-aebc98a483e9",
    "prId" : 9573,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3bd98a5-7a22-4afe-92d3-b5f23a081065",
        "parentId" : null,
        "authorId" : "615aaf65-d034-4e24-b2b4-1ced41331c12",
        "body" : "what's the reasoning for using Context.current instead of Context.root?",
        "createdAt" : "2021-05-05T12:12:22Z",
        "updatedAt" : "2021-05-05T17:34:09Z",
        "lastEditedBy" : "615aaf65-d034-4e24-b2b4-1ced41331c12",
        "tags" : [
        ]
      },
      {
        "id" : "94bf72c3-122e-47fc-8683-b3d93f0aa5e0",
        "parentId" : "a3bd98a5-7a22-4afe-92d3-b5f23a081065",
        "authorId" : "f2bb5ae8-6c47-4c83-85c6-1e82ecd89dfd",
        "body" : "There are a few reasons:\r\n- according to the docs \r\n>It should generally not be required to use the root {@link Context} directly - instead, use {@link Context#current()} to operate on the current {@link Context}. Only use this method if you are absolutely sure you need to disregard the current {@link Context} - this almost always is only a workaround hiding an underlying context propagation issue.\r\n- also as you can see above I'm just refactoring and preserving the current behavior\r\n- if someone would like to use it within `Telemetry.runInOpenTelemetryScope`, it might not work as expected, as the current context would be different",
        "createdAt" : "2021-05-05T12:29:12Z",
        "updatedAt" : "2021-05-05T17:34:09Z",
        "lastEditedBy" : "f2bb5ae8-6c47-4c83-85c6-1e82ecd89dfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa5f3dfdd56fab86d6145955ccec8435a4e6d107",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +169,173 @@  }\n\n  override def openTelemetryContext: Context = Context.current.`with`(span)\n}\n"
  },
  {
    "id" : "b6b89d5b-91a5-41f6-b3a5-e2adb45f26b3",
    "prId" : 9436,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f302928-1773-4c60-aaa8-6bfc3799952a",
        "parentId" : null,
        "authorId" : "f2bb5ae8-6c47-4c83-85c6-1e82ecd89dfd",
        "body" : "There are a few methods like this that are not being used in this repo. Let's discuss this in the next PR.",
        "createdAt" : "2021-04-22T08:44:17Z",
        "updatedAt" : "2021-04-23T09:29:18Z",
        "lastEditedBy" : "f2bb5ae8-6c47-4c83-85c6-1e82ecd89dfd",
        "tags" : [
        ]
      },
      {
        "id" : "50920f46-f3a4-4f31-9e5a-25476fdb91b1",
        "parentId" : "2f302928-1773-4c60-aaa8-6bfc3799952a",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Yes, it'd be best to not move methods that aren't required for the SDK changes. Can you possibly mark these methods in the PR with a comment or list them here, please?",
        "createdAt" : "2021-04-22T10:48:41Z",
        "updatedAt" : "2021-04-23T09:29:18Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "0b00da36-a7bb-4c9d-a3cd-17041cf608a8",
        "parentId" : "2f302928-1773-4c60-aaa8-6bfc3799952a",
        "authorId" : "f2bb5ae8-6c47-4c83-85c6-1e82ecd89dfd",
        "body" : "Yup, `Telemetry.contextFromMetadata`, `TelemetryContext.runInOpenTelemetryScope`, `TelemetryContext.encodeMetadata` (along with the helper methods from the `Tracing` object), `TelemetryContext.setGrpcAttributes` (this one is already removed in the next PR). As discussed offline, we're going to keep them most likely for a short period of time.",
        "createdAt" : "2021-04-23T08:46:13Z",
        "updatedAt" : "2021-04-23T09:29:18Z",
        "lastEditedBy" : "f2bb5ae8-6c47-4c83-85c6-1e82ecd89dfd",
        "tags" : [
        ]
      },
      {
        "id" : "e6979d20-98fb-4b2d-b6c0-d8ccfca93f14",
        "parentId" : "2f302928-1773-4c60-aaa8-6bfc3799952a",
        "authorId" : "f2bb5ae8-6c47-4c83-85c6-1e82ecd89dfd",
        "body" : "Updated the above comment with the missing info.",
        "createdAt" : "2021-04-23T09:03:02Z",
        "updatedAt" : "2021-04-23T09:29:18Z",
        "lastEditedBy" : "f2bb5ae8-6c47-4c83-85c6-1e82ecd89dfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "142d4d48ada343f55f81c75b8f8f6c5363593c65",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +87,91 @@  /** Sets the attributes extracted from the given gRPC `MethodDescriptor`.\n    */\n  def setGrpcAttributes(\n      methodDescriptor: MethodDescriptor[_, _]\n  )(implicit telemetryContext: TelemetryContext): Unit = {"
  },
  {
    "id" : "0848272b-817a-4a1d-882f-4d5eaebc9707",
    "prId" : 9436,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71c2cecc-9d2d-4129-a3a4-ccf3b13abc65",
        "parentId" : null,
        "authorId" : "f2bb5ae8-6c47-4c83-85c6-1e82ecd89dfd",
        "body" : "This is a problem that I'm going to address in the next PR. Are you fine with making `tracer` a parameter?",
        "createdAt" : "2021-04-22T08:45:39Z",
        "updatedAt" : "2021-04-23T09:29:18Z",
        "lastEditedBy" : "f2bb5ae8-6c47-4c83-85c6-1e82ecd89dfd",
        "tags" : [
        ]
      },
      {
        "id" : "0fd2479d-b953-44cd-adf5-1068cd14c869",
        "parentId" : "71c2cecc-9d2d-4129-a3a4-ccf3b13abc65",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Yes, that would be great.",
        "createdAt" : "2021-04-22T10:47:06Z",
        "updatedAt" : "2021-04-23T09:29:18Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "b6ee7c38-0a14-4199-9584-ba9567bc1164",
        "parentId" : "71c2cecc-9d2d-4129-a3a4-ccf3b13abc65",
        "authorId" : "f2bb5ae8-6c47-4c83-85c6-1e82ecd89dfd",
        "body" : "Let's discuss this in the next PR.",
        "createdAt" : "2021-04-22T13:20:19Z",
        "updatedAt" : "2021-04-23T09:29:18Z",
        "lastEditedBy" : "f2bb5ae8-6c47-4c83-85c6-1e82ecd89dfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "142d4d48ada343f55f81c75b8f8f6c5363593c65",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +150,154 @@  ): Span = {\n    val subSpan =\n      ParticipantTracer\n        .spanBuilder(spanName)\n        .setParent(Context.current.`with`(span))"
  },
  {
    "id" : "63af5abf-2d0f-446e-9da4-a5523b433367",
    "prId" : 9436,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c8c1644-91d1-4c5f-8e98-a53d9a970e03",
        "parentId" : null,
        "authorId" : "615aaf65-d034-4e24-b2b4-1ced41331c12",
        "body" : "In Canton, what we need to integrate is access to a parent `io.opentelemetry.context.Context`.\r\nFrom reading this PR, it seems like we'd have to do \r\n```Scala\r\nval contextOption = Tracing.decodeTraceMetadata(telemetryContext.encodeTraceMetadata())\r\n```\r\nWould probably be nicer if we could do \r\n```Scala\r\nval contextOption = telemetryContext.opentelemetryContext()\r\n```\r\nsuch that\r\n```Scala\r\n\r\nclass DefaultTelemetryContext(val span: Span) { \r\n    def opentelemetryContext() = Some(Context.root().`with`(span))\r\n}\r\nobject RootDefaultTelemetryContext {\r\n    def opentelemetryContext() = Some(Context.root())\r\n}\r\nobject NoOpTelemetryContext {\r\n    def opentelemetryContext() = None\r\n}\r\n```\r\nOne could also argue that instead of returning an `Option[Context]`, could simply return an empty context `Context.root()` in the case of `NoOpTelemetryContext` as well.\r\n",
        "createdAt" : "2021-04-22T16:03:50Z",
        "updatedAt" : "2021-04-23T09:29:18Z",
        "lastEditedBy" : "615aaf65-d034-4e24-b2b4-1ced41331c12",
        "tags" : [
        ]
      },
      {
        "id" : "582914b4-65d9-48ae-b5a3-4583fd2edcd4",
        "parentId" : "6c8c1644-91d1-4c5f-8e98-a53d9a970e03",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Thanks for your input, Danilo. We'll definitely look into this in a follow-up PR. Can you possibly point us to a usage example in Canton, where you would want to call `WriteService` passing a tracing context, please?",
        "createdAt" : "2021-04-22T16:18:47Z",
        "updatedAt" : "2021-04-23T09:29:18Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "8d9bc302-f2bf-45d3-b6b9-225fa09fbde4",
        "parentId" : "6c8c1644-91d1-4c5f-8e98-a53d9a970e03",
        "authorId" : "615aaf65-d034-4e24-b2b4-1ced41331c12",
        "body" : "For example in [CantonSyncService.submitTransaction](https://github.com/DACH-NY/canton/blob/master/community/participant/src/main/scala/com/digitalasset/canton/participant/sync/CantonSyncService.scala#L208) we create a new [TraceContext](https://github.com/DACH-NY/canton/blob/master/community/common/src/main/scala/com/digitalasset/canton/tracing/TraceContext.scala#L22)\r\nInstead of creating a fresh context, we'd like to create `TraceContext(opentelemetryContextFromWriteService)`",
        "createdAt" : "2021-04-22T16:34:00Z",
        "updatedAt" : "2021-04-23T09:29:18Z",
        "lastEditedBy" : "615aaf65-d034-4e24-b2b4-1ced41331c12",
        "tags" : [
        ]
      },
      {
        "id" : "691ac395-3d7d-49af-887d-1deb7619a8e3",
        "parentId" : "6c8c1644-91d1-4c5f-8e98-a53d9a970e03",
        "authorId" : "f2bb5ae8-6c47-4c83-85c6-1e82ecd89dfd",
        "body" : "@danilofaria I cannot open the link, is there a chance I could get read access to the repo? I'm a bit fresh to this API but I think the idea was to abstract over the opentelemetry lib and not to use bare objects from its API. What you might like to use `Telemetry.runInSpan` or `Telemetry.runFutureInSpan` which are the basic building blocks and allow you to get a fresh context. Or we might need to have a more detailed conversation on how the API should look like.",
        "createdAt" : "2021-04-23T09:19:18Z",
        "updatedAt" : "2021-04-23T09:29:18Z",
        "lastEditedBy" : "f2bb5ae8-6c47-4c83-85c6-1e82ecd89dfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "142d4d48ada343f55f81c75b8f8f6c5363593c65",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +79,83 @@    * @see [[com.daml.telemetry.Telemetry.contextFromMetadata(java.util.Map)]]\n    */\n  def encodeMetadata(): jMap[String, String]\n\n}"
  },
  {
    "id" : "084096e8-6ca3-4ec6-8fe0-7ce617ccf683",
    "prId" : 9436,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7568bec-20e1-4fff-a9fb-4aee07c0cb97",
        "parentId" : null,
        "authorId" : "615aaf65-d034-4e24-b2b4-1ced41331c12",
        "body" : "Would also be great if we can create a `TelemetryContext` from an open telemetry `Context` directly. that would simplify integration as well.",
        "createdAt" : "2021-04-22T16:52:15Z",
        "updatedAt" : "2021-04-23T09:29:18Z",
        "lastEditedBy" : "615aaf65-d034-4e24-b2b4-1ced41331c12",
        "tags" : [
        ]
      },
      {
        "id" : "a00a11e4-e48a-4ccf-be8a-8aa6e3ca6cf4",
        "parentId" : "c7568bec-20e1-4fff-a9fb-4aee07c0cb97",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Good point -- will keep that in mind.",
        "createdAt" : "2021-04-23T09:15:38Z",
        "updatedAt" : "2021-04-23T09:29:18Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "142d4d48ada343f55f81c75b8f8f6c5363593c65",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +83,87 @@}\n\nobject TelemetryContext {\n\n  /** Sets the attributes extracted from the given gRPC `MethodDescriptor`."
  }
]