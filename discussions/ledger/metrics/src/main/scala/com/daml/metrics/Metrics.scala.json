[
  {
    "id" : "729fe943-285a-4cd1-b683-7843996fc902",
    "prId" : 10031,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08195300-d796-458d-8493-c1577631f3b4",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "totally fine to do this in a separate PR but I’d probably just replace this by a meter for queries. I don’t think seeing requests of different types grouped together is very useful.",
        "createdAt" : "2021-06-16T15:44:40Z",
        "updatedAt" : "2021-06-16T15:45:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2d1ee70c-2508-489c-a1e0-51ec72e6a5d4",
        "parentId" : "08195300-d796-458d-8493-c1577631f3b4",
        "authorId" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "body" : "I probably adjust this in the next PR where I want to add the timers for the queries.",
        "createdAt" : "2021-06-16T15:47:08Z",
        "updatedAt" : "2021-06-16T15:47:09Z",
        "lastEditedBy" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a40a8bc6d5f63dcd9d5ec622d1a3e4194a6fdf6",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +709,713 @@      // Meters how long processing of a request takes\n      val httpRequestTimer: Timer = registry.timer(Prefix :+ \"http_request_timing\")\n      // Meters http requests throughput\n      val httpRequestThroughput: Meter = registry.meter(Prefix :+ \"http_request_throughput\")\n      // Meters how many websocket connections are currently active"
  },
  {
    "id" : "175aa5e9-d524-4ef8-bcad-b94f4e76c609",
    "prId" : 10031,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e639226e-00d0-48a9-867f-009fb471e433",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "For all of those, I think we also want counters but no need to do this in this PR.",
        "createdAt" : "2021-06-16T15:45:05Z",
        "updatedAt" : "2021-06-16T15:45:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ccee9332-13e3-4185-ac8f-5729e7ab7d95",
        "parentId" : "e639226e-00d0-48a9-867f-009fb471e433",
        "authorId" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "body" : "This is planned already, but for the next PR. Want to keep things small so I don't mess up :smile: ",
        "createdAt" : "2021-06-16T15:46:31Z",
        "updatedAt" : "2021-06-16T15:46:31Z",
        "lastEditedBy" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a40a8bc6d5f63dcd9d5ec622d1a3e4194a6fdf6",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +719,723 @@      val uploadPackagesThroughput: Meter = registry.meter(Prefix :+ \"upload_packages_throughput\")\n      // Meters party allocation throughput\n      val allocatePartyThroughput: Meter = registry.meter(Prefix :+ \"allocation_party_throughput\")\n    }\n  }"
  },
  {
    "id" : "dd219a49-846e-49dd-a601-ac12072eba23",
    "prId" : 9517,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce2448ab-af2f-4c41-9ac7-8b420819d047",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "```suggestion\r\n      // Tail ingestion stage\r\n      // The throttled update of ledger end parameters\r\n      val tailIngestion = new DatabaseMetrics(registry, Prefix, \"tail_ingestion\")\r\n```",
        "createdAt" : "2021-04-29T08:15:14Z",
        "updatedAt" : "2021-04-29T11:31:38Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa3f4c406e78e26c0d4c3815038cfeee9358c7a8",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +601,605 @@      // Tail ingestion stage\n      // The throttled update of ledger end parameters\n      val tailIngestion = new DatabaseMetrics(registry, Prefix, \"tail_ingestion\")\n    }\n"
  },
  {
    "id" : "77000e86-56eb-477e-86aa-5457ea01e5c3",
    "prId" : 9378,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9378",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b9d901b-c582-49f3-8fd3-bc33aa1c16a2",
        "parentId" : null,
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "AFAIS, we do not have its counterpart `ledger_end_sequential_id` that would allow us to compute the lag. What do you think about adding that?",
        "createdAt" : "2021-04-13T10:30:24Z",
        "updatedAt" : "2021-04-13T13:06:32Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      },
      {
        "id" : "22e98c6e-e1c0-4e52-878c-a3a40bf2978a",
        "parentId" : "4b9d901b-c582-49f3-8fd3-bc33aa1c16a2",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Good point. Noted down to implement in the harden metrics task.",
        "createdAt" : "2021-04-13T12:12:11Z",
        "updatedAt" : "2021-04-13T13:06:32Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "b009c2eeef79cbb54cf2d0228e765c991530cc9a",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +530,534 @@      val currentStateCacheSequentialIdGauge = new VarGauge[Long](0L)\n      registry.register(\n        Prefix :+ \"current_state_cache_sequential_id\",\n        currentStateCacheSequentialIdGauge,\n      )"
  },
  {
    "id" : "e54e4217-074d-4823-a541-289e3296a9b1",
    "prId" : 8789,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8be90661-0a52-45b3-8976-f6c2d1f029fb",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "For consistency with our naming convention for metrics, this should be named as `api_services`.",
        "createdAt" : "2021-02-09T11:09:30Z",
        "updatedAt" : "2021-02-09T11:09:30Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "d90c6caea13415636a5f7a6f41e300019ea79fcb",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +258,262 @@        private val Prefix: MetricName = lapi.Prefix :+ \"threadpool\"\n\n        val apiServices: MetricName = Prefix :+ \"api-services\"\n      }\n    }"
  },
  {
    "id" : "e4677ebb-111b-4c5d-aafe-3eae608064e5",
    "prId" : 7460,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7460",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f302c68c-a183-4fea-a854-d47b6998dfb6",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "This requires a changelog entry.",
        "createdAt" : "2020-09-23T12:18:55Z",
        "updatedAt" : "2020-10-08T09:30:43Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "6e1ae8ce-027d-4dfa-bc1c-c4c4a66722ab",
        "parentId" : "f302c68c-a183-4fea-a854-d47b6998dfb6",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "done.",
        "createdAt" : "2020-09-29T13:50:36Z",
        "updatedAt" : "2020-10-08T09:30:43Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a4599bcbf38cacac4088b9b73021b01c997c440",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +118,122 @@          private val Prefix: MetricName = committer.Prefix :+ \"package_upload\"\n\n          val validateTimer: Timer = registry.timer(Prefix :+ \"validate_timer\")\n          val preloadTimer: Timer = registry.timer(Prefix :+ \"preload_timer\")\n          val decodeTimer: Timer = registry.timer(Prefix :+ \"decode_timer\")"
  },
  {
    "id" : "1a1899b9-410b-411e-acc8-4e123ab88dec",
    "prId" : 5927,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c07ce082-62e2-48de-9f3f-3290fb1f0e17",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "The issue is great; I see no need for the comment.",
        "createdAt" : "2020-05-11T11:03:57Z",
        "updatedAt" : "2020-05-11T11:06:38Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "683fc97d-6e71-4cc0-ba3b-f265d2f4c8ac",
        "parentId" : "c07ce082-62e2-48de-9f3f-3290fb1f0e17",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "To make sure that people addressing the `FIXME` in this file are aware that there already is a ticket.",
        "createdAt" : "2020-05-11T11:08:57Z",
        "updatedAt" : "2020-05-11T11:08:57Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e23a0f7488d9ec6a8a0771473cb62cecccc568fd",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +245,249 @@      val publishConfiguration: Timer = registry.timer(prefix :+ \"publish_configuration\")\n\n      // FIXME Name mushing and inconsistencies here, tracked by https://github.com/digital-asset/daml/issues/5926\n      object db {\n"
  },
  {
    "id" : "5290076d-837a-4f60-9625-c109495923cf",
    "prId" : 5927,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e706a318-100c-44ae-af85-e6e537dfad6e",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "It'd be great if we could come up with an API that allows for overall tracking of deserialization too. For example, passing the deserializer to the `DbDispatcher` as an optional second parameter.",
        "createdAt" : "2020-05-11T11:05:54Z",
        "updatedAt" : "2020-05-11T11:06:38Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "684d63db-c7c9-4314-9204-655305241aa6",
        "parentId" : "e706a318-100c-44ae-af85-e6e537dfad6e",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I understand the point and I see the advantage, but this would require the `DbDispatcher` to be aware of the output and use deserialization in some non-dumb way. I'm afraid this would make `DbDispatcher` cover too many concerns. It sounds like probably we could do a better job at pulling apart `executeSql` in two parts (one that handles wait and the other that handles execution) and than we have a single place where we compose the two, possibly with the addition of deserization. I'll take this as an improvement for the future, thanks for raising this. :slightly_smiling_face: ",
        "createdAt" : "2020-05-11T11:12:28Z",
        "updatedAt" : "2020-05-11T11:12:28Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e23a0f7488d9ec6a8a0771473cb62cecccc568fd",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +278,282 @@          DatabaseMetrics(registry, prefix)(_)\n\n        private val overall = createDatabaseMetrics(\"all\")\n        val waitAll: Timer = overall.waitTimer\n        val execAll: Timer = overall.executionTimer"
  },
  {
    "id" : "febfb349-08b1-49c8-82a0-85dd69f650b5",
    "prId" : 5790,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d369a017-aad1-4815-86ed-6dd2241587a6",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Please add an `apply` method to create a new instance for a `MetricRegistry`.",
        "createdAt" : "2020-05-05T08:28:18Z",
        "updatedAt" : "2020-05-06T10:18:00Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "7234f1f69f87d95d1420a0faa8a6f2a70e0433f0",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +7,11 @@import com.codahale.metrics._\n\nclass Metrics(val registry: MetricRegistry) {\n\n  private def gauge[T](name: MetricName, metricSupplier: MetricSupplier[Gauge[_]]): Gauge[T] = {"
  },
  {
    "id" : "861b2e46-99ce-4967-aa3e-d730a1c83476",
    "prId" : 5790,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d06a276-d77c-405d-9688-28067df62ff7",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Wouldn't it make sense to use `MetricNaming` directly here to generate a method name? I.e., you wouldn't use this without a standardized metric name, right?",
        "createdAt" : "2020-05-05T08:35:10Z",
        "updatedAt" : "2020-05-06T10:18:01Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "7234f1f69f87d95d1420a0faa8a6f2a70e0433f0",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +175,179 @@      val prefix: MetricName = daml.prefix :+ \"lapi\"\n\n      def forMethod(name: String): Timer = registry.timer(prefix :+ name)\n\n    }"
  },
  {
    "id" : "51f39224-a15a-4ac6-8469-b50d20bfcf5a",
    "prId" : 5790,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "882c1eb3-669a-40ba-85aa-7d4a8c37aa4a",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "```suggestion\r\n      }\r\n\r\n```",
        "createdAt" : "2020-05-05T09:52:39Z",
        "updatedAt" : "2020-05-05T10:04:58Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "7234f1f69f87d95d1420a0faa8a6f2a70e0433f0",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +123,127 @@        val openEnvelope: Timer = registry.timer(prefix :+ \"open_envelope\")\n        val parseUpdates: Timer = registry.timer(prefix :+ \"parse_updates\")\n      }\n      object submission {\n        val prefix: MetricName = kvutils.prefix :+ \"submission\""
  },
  {
    "id" : "8375422e-a623-4d63-964c-1c3877edd126",
    "prId" : 5790,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28ae4bfd-f8ba-4d8d-83f4-a8d16e6bf805",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "These variables are constants hence should be named as `Prefix` according to the Scala style guide:\r\nhttps://docs.scala-lang.org/style/naming-conventions.html#constants-values-variable-and-methods",
        "createdAt" : "2020-05-05T15:27:24Z",
        "updatedAt" : "2020-05-06T10:18:01Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "7234f1f69f87d95d1420a0faa8a6f2a70e0433f0",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@\n  object daml {\n    val prefix: MetricName = MetricName.DAML\n\n    object commands {"
  },
  {
    "id" : "980b8e7c-747c-4653-96cb-a706da89726c",
    "prId" : 5790,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "500cd6c5-6529-4ab7-b3c5-98bb3cbedfe3",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "The first time this object gets loaded all the metrics will be registered. Is this overhead acceptable?",
        "createdAt" : "2020-05-05T15:28:11Z",
        "updatedAt" : "2020-05-06T10:18:01Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "7234f1f69f87d95d1420a0faa8a6f2a70e0433f0",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\n"
  },
  {
    "id" : "327b5eed-9574-41ff-b5aa-efcf385674e2",
    "prId" : 5790,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df39ab96-450f-4817-bcfb-71e3c0802397",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Please use consistent formatting for these hierarchical companion objects (i.e., not leave a new line at the end of the object definition).",
        "createdAt" : "2020-05-05T15:28:48Z",
        "updatedAt" : "2020-05-06T10:18:01Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "7234f1f69f87d95d1420a0faa8a6f2a70e0433f0",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +41,45 @@      val retry: Meter = registry.meter(prefix :+ \"retry\")\n      val total: Timer = registry.timer(prefix :+ \"total\")\n\n    }\n"
  }
]