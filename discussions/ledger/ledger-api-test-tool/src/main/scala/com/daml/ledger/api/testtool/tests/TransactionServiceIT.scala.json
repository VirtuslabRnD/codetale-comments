[
  {
    "id" : "e5c125f3-d4b2-46c0-be71-31b69088fb2c",
    "prId" : 8564,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8564",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38955ed8-71ed-4e7c-9d3a-23441a9f63da",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I _think_ these sorting changes are fine, but I'm not personally aware of how the transaction service is used in practice. It might be that the transactions are expected to be sorted by applications and, for example, triggers, in which case we should probably be making the ledger do it.\r\n\r\nAny idea if anyone is reliant on transaction sort order?",
        "createdAt" : "2021-01-20T13:27:01Z",
        "updatedAt" : "2021-01-20T17:26:22Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "f5241c67-5987-492e-9d5e-496752b01d5b",
        "parentId" : "38955ed8-71ed-4e7c-9d3a-23441a9f63da",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "The sorting is fine. If 2 contracts don't have a relation to each other, the order in which they appear on the transaction stream doesn't matter. You could view this as partial ordering.\r\nThis ordering change should only be relevant for the test case `TXSingleMultiSameStakeholders` where the a distributed ledger might re-order the transactions that are created on alpha and beta for a specific party.",
        "createdAt" : "2021-01-20T13:33:08Z",
        "updatedAt" : "2021-01-20T17:26:22Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "186a5e3c-fcd4-4a93-a62b-ee4424239c06",
        "parentId" : "38955ed8-71ed-4e7c-9d3a-23441a9f63da",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Awesome, thanks for the clarification!",
        "createdAt" : "2021-01-20T13:36:27Z",
        "updatedAt" : "2021-01-20T17:26:22Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "613e802d-90d4-41c6-afe7-b8ed724a2ac9",
        "parentId" : "38955ed8-71ed-4e7c-9d3a-23441a9f63da",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "fwiw we do have docs on causality which also include ordering guarantees we make or explicitly donâ€™t make https://docs.daml.com/concepts/local-ledger.html",
        "createdAt" : "2021-01-21T08:08:42Z",
        "updatedAt" : "2021-01-21T08:08:42Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "de682fd7-26b2-4358-9247-c889f29fdee7",
        "parentId" : "38955ed8-71ed-4e7c-9d3a-23441a9f63da",
        "authorId" : "5db1abe1-51e8-45dd-b938-e1052b127444",
        "body" : "Yes there are ordering guarantees (like the create must come before an exercise).  The tests using these methods are not concerned with ensuring ordering guarantees (they only create contracts with no contractId arguments).",
        "createdAt" : "2021-01-21T10:13:29Z",
        "updatedAt" : "2021-01-21T10:13:30Z",
        "lastEditedBy" : "5db1abe1-51e8-45dd-b938-e1052b127444",
        "tags" : [
        ]
      }
    ],
    "commit" : "02eede69f5107b857430fb991d673f70642c0709",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1593,1597 @@        )\n      )\n      .sortBy(_.transactionId)\n\n  // Strip command id and offset to yield a transaction comparable across participant"
  }
]