[
  {
    "id" : "0a73836f-eb00-45a7-a083-449d9bf87156",
    "prId" : 10242,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10242",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3151668-5865-43e6-8fd7-67acf95ffa48",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Can you change `def uploadDarFile(ByteString)` to delegate to this one please?",
        "createdAt" : "2021-07-13T12:00:19Z",
        "updatedAt" : "2021-07-13T12:04:39Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "0ea9aa4d-8faa-40bd-b5ed-fc6d1b64d4b1",
        "parentId" : "a3151668-5865-43e6-8fd7-67acf95ffa48",
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "Done",
        "createdAt" : "2021-07-13T18:06:13Z",
        "updatedAt" : "2021-07-13T18:06:13Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "92564767d0eb280b8646ba03fb36c3b1e3e02675",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +180,184 @@    new UploadDarFileRequest(bytes, nextSubmissionId())\n\n  def uploadDarFile(request: UploadDarFileRequest): Future[Unit] =\n    services.packageManagement\n      .uploadDarFile(request)"
  },
  {
    "id" : "2a8f11c1-f446-461e-8d23-423599708658",
    "prId" : 10242,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10242",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2f047a5-1013-4c98-888a-e75a515a4c00",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Likewise, can you change the above `def setTimeModel` to use this one?",
        "createdAt" : "2021-07-13T12:00:36Z",
        "updatedAt" : "2021-07-13T12:04:39Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "92564767d0eb280b8646ba03fb36c3b1e3e02675",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +704,708 @@    SetTimeModelRequest(nextSubmissionId(), Some(mrt.asProtobuf), generation, Some(newTimeModel))\n\n  def setTimeModel(\n      request: SetTimeModelRequest\n  ): Future[SetTimeModelResponse] ="
  },
  {
    "id" : "535c1373-7406-4602-9ae0-bc4e8ffd9a2f",
    "prId" : 8266,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8266",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9753cb65-b13c-433b-b1da-069990dc78ea",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "This makes sense. Are we planning on removing the other `submitRequest` that just takes a single party at some point in the future?",
        "createdAt" : "2020-12-15T14:47:16Z",
        "updatedAt" : "2020-12-15T16:02:41Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "c166a89f-c270-46b8-87a4-0f7b444cba2b",
        "parentId" : "9753cb65-b13c-433b-b1da-069990dc78ea",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "I think that these two variants do slightly different things because the single-party one uses `party` field, while the multi-party one uses `actAs` field. The `party` field is still present to provide backward compatibility, so it might be beneficial to have some tests covering that too. What do you think?",
        "createdAt" : "2020-12-15T14:58:07Z",
        "updatedAt" : "2020-12-15T16:02:41Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      }
    ],
    "commit" : "824a6922dd9ea184da2ec5d64e59750e7fbc3fa7",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +555,559 @@    )\n\n  def submitRequest(actAs: List[Party], readAs: List[Party], commands: Command*): SubmitRequest =\n    new SubmitRequest(\n      Some("
  },
  {
    "id" : "5c102003-5371-4e96-acba-3e79af1639f3",
    "prId" : 8266,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8266",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b0de5d8-3e5a-431c-a99f-e7ee013f09ca",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Same question as above.",
        "createdAt" : "2020-12-15T14:47:23Z",
        "updatedAt" : "2020-12-15T16:02:41Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "824a6922dd9ea184da2ec5d64e59750e7fbc3fa7",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +585,589 @@      actAs: List[Party],\n      readAs: List[Party],\n      commands: Command*): SubmitAndWaitRequest =\n    new SubmitAndWaitRequest(\n      Some("
  },
  {
    "id" : "9e6bc1e2-457b-463a-9f8d-3ce7fc90821c",
    "prId" : 7988,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7988",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d96b040-17cd-4162-bd7c-b19c55b0a2ee",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Why is this wrapped in an `eventually`? When do you expect the same pruning request to succeed after it had failed a few times?",
        "createdAt" : "2020-11-19T14:37:52Z",
        "updatedAt" : "2020-11-23T10:35:52Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "1ab6e46d-b863-4d2b-9dbe-c6e8a9ab590d",
        "parentId" : "7d96b040-17cd-4162-bd7c-b19c55b0a2ee",
        "authorId" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "body" : "I will add the following comment:\r\n\r\n```\r\n  def prune(pruneUpTo: Option[LedgerOffset], attempts: Int): Future[Empty] =\r\n+    // Distributed ledger participants need to reach global consensus prior to pruning. Hence the \"eventually\" here:\r\n    eventually(attempts = attempts, runAssertion = {\r\n      services.participantPruning.prune(PruneRequest(pruneUpTo, nextSubmissionId()))\r\n    })\r\n```",
        "createdAt" : "2020-11-19T17:03:51Z",
        "updatedAt" : "2020-11-23T10:35:52Z",
        "lastEditedBy" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "tags" : [
        ]
      },
      {
        "id" : "5c16d944-cc80-44eb-adeb-aa774092cc6f",
        "parentId" : "7d96b040-17cd-4162-bd7c-b19c55b0a2ee",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Would a new request trigger a new global consensus process, or can it use the result of a previews round?",
        "createdAt" : "2020-11-20T08:34:27Z",
        "updatedAt" : "2020-11-23T10:35:52Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "8540c03e-d20f-4f8e-b683-a4abd8b1e5d6",
        "parentId" : "7d96b040-17cd-4162-bd7c-b19c55b0a2ee",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Discussed online: some ledgers need to perform ledger-wide synchronization before allowing participants to delete local data. I would suggest one of the following:\r\n\r\n- Require `WriteParticipantPruningService.prune` implementations to wait a resonable time until they are ready to prune. This would remove the need for `eventually`. On the other hand, the ledger API call could take a long time and possibly trigger some network timeout.\r\n- Clearly document in `participant_pruning_service.proto` and in `PruningResult.scala` which error code means that the participant is not ready yet and that the client application should retry later at the same offset. You could even consider adding a `PruningResult.WorkingOnItPleaseRetryLater` case for this.\r\n\r\nSpeaking of which, the protobuf file could use comments on what error messages the prune call can return, see the [command service example](https://github.com/digital-asset/daml/blob/master/ledger-api/grpc-definitions/com/daml/ledger/api/v1/command_service.proto#L24).",
        "createdAt" : "2020-11-20T10:28:37Z",
        "updatedAt" : "2020-11-23T10:35:52Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "e4f46cdd-00da-4501-b2b6-94bfa8420635",
        "parentId" : "7d96b040-17cd-4162-bd7c-b19c55b0a2ee",
        "authorId" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "body" : "Good feedback, I am adding a section on error codes to both the `participant_pruning_service.proto` (guidance to users what errors to expect) and to `PruningResult.scala` (guidance to pruning implementers on what types of errors to emit).",
        "createdAt" : "2020-11-20T16:07:38Z",
        "updatedAt" : "2020-11-23T10:35:52Z",
        "lastEditedBy" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "tags" : [
        ]
      },
      {
        "id" : "4d2a73aa-4d62-44c5-a880-e2a714f23fc0",
        "parentId" : "7d96b040-17cd-4162-bd7c-b19c55b0a2ee",
        "authorId" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "body" : "> Would a new request trigger a new global consensus process, or can it use the result of a previews round?\r\n\r\nConsensus gathering happens in the background async to  prune requests. The `eventually` with subsequent `prune` requests simply wait for the consensus to proceed beyond the specific offset in the background.",
        "createdAt" : "2020-11-20T16:09:09Z",
        "updatedAt" : "2020-11-23T10:35:52Z",
        "lastEditedBy" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed2a13fb9597e7d807a8c7f6d319bf4cab1558b9",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +667,671 @@  def prune(pruneUpTo: String, attempts: Int): Future[PruneResponse] =\n    // Distributed ledger participants need to reach global consensus prior to pruning. Hence the \"eventually\" here:\n    eventually(attempts = attempts, runAssertion = {\n      services.participantPruning.prune(PruneRequest(pruneUpTo, nextSubmissionId()))\n    })"
  },
  {
    "id" : "26778288-7b1e-45fe-8ec2-8138b79990da",
    "prId" : 4450,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a76c7ed-cdc8-43bf-9cd4-3f9d00ede813",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "As you are just asserting that the parties have been allocated, it is enough to use `foreach` on the created futures instead of `map`. I.e.:\r\n```scala\r\nFuture\r\n  .sequence(participants.map { otherParticipant =>\r\n    otherParticipant\r\n      .listParties()\r\n      .foreach(/* assert here */)\r\n      ...\r\n```",
        "createdAt" : "2020-02-10T10:05:57Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "be4c8204-401a-4454-a75f-569fd0ee96e0",
        "parentId" : "2a76c7ed-cdc8-43bf-9cd4-3f9d00ede813",
        "authorId" : null,
        "body" : ":+1: ",
        "createdAt" : "2020-02-10T12:25:14Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "79f0c1a4-112c-48da-a46c-5c340742165a",
        "parentId" : "2a76c7ed-cdc8-43bf-9cd4-3f9d00ede813",
        "authorId" : null,
        "body" : "Hm, I don't see how a foreach works here. Its type is Unit and we need a Future here for this to work with the eventually combinator. I'll leave it as is.",
        "createdAt" : "2020-02-10T12:36:25Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "3b057d63-c220-482f-87b0-9398ffa0f6ea",
        "parentId" : "2a76c7ed-cdc8-43bf-9cd4-3f9d00ede813",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Sorry, my oversight -- you're right, because of the `eventually` combinator you need to use `.map`.",
        "createdAt" : "2020-02-10T12:46:59Z",
        "updatedAt" : "2020-02-10T12:47:00Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b50aea234086b5d2936b09b0d3a1451d42d8d09",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +217,221 @@        val participants = otherParticipants.toSet + this\n        Future\n          .sequence(participants.map(otherParticipant => {\n            otherParticipant\n              .listParties()"
  },
  {
    "id" : "e413582a-6ab6-48e2-ad41-9efe20abf309",
    "prId" : 2988,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2988",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcdd12fa-fda4-42a1-a60b-72de6920eacc",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Would it make sense to simply return the byte array directly here?",
        "createdAt" : "2019-09-24T08:08:26Z",
        "updatedAt" : "2019-09-24T12:37:50Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "7f0b0c56-5c78-4f8d-9363-92f9397cfd16",
        "parentId" : "bcdd12fa-fda4-42a1-a60b-72de6920eacc",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "`GetPackageResponse` also contains the hash value and the hash type (although the hash value *should* be the same as the input `packageId`). ",
        "createdAt" : "2019-09-24T09:17:09Z",
        "updatedAt" : "2019-09-24T12:37:50Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "676e49829bff5ae43df57086bbed3a3ce3b23560",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +157,161 @@    services.packages.listPackages(new ListPackagesRequest(ledgerId)).map(_.packageIds)\n\n  def getPackage(packageId: String): Future[GetPackageResponse] =\n    services.packages.getPackage(new GetPackageRequest(ledgerId, packageId))\n"
  },
  {
    "id" : "fc102656-66f2-45e5-82b8-e46f9b42c7ea",
    "prId" : 2961,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8f26115-1ee0-417f-b7f5-efbef10b9494",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Do you want to move the \"low-level\" testing methods into a nested object?\r\nSomething like:\r\n```\r\nclass ParticipantTestContext {\r\n  object lowLevel {\r\n    // low-level methods here\r\n  }\r\n```\r\nThis way it is fairly obvious that these are discouraged from general purpose use. What do you think?",
        "createdAt" : "2019-09-23T08:24:13Z",
        "updatedAt" : "2019-09-23T13:11:21Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "f893255f-c74d-4e32-9a8e-952babf7a002",
        "parentId" : "b8f26115-1ee0-417f-b7f5-efbef10b9494",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I was thinking of the same and I'm in favor of this (also to keep the \"actual\" API a bit leaner and cleaner). I would address this as part of a different ticket though. Is that OK with you?",
        "createdAt" : "2019-09-23T09:37:06Z",
        "updatedAt" : "2019-09-23T13:11:21Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "fbef4920-edd8-4e94-94ee-dcab33196b83",
        "parentId" : "b8f26115-1ee0-417f-b7f5-efbef10b9494",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Sure, thanks 👍 ",
        "createdAt" : "2019-09-23T09:46:49Z",
        "updatedAt" : "2019-09-23T13:11:21Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "b32f1221504aed4a2bc42e4068e5ee9f8fed8c49",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +311,315 @@    * Non-managed version of [[transactionTreeById]], use this only if you need to tweak the request (i.e. to test low-level details)\n    */\n  def transactionTreeById(request: GetTransactionByIdRequest): Future[TransactionTree] =\n    services.transaction.getTransactionById(request).map(_.getTransaction)\n"
  }
]