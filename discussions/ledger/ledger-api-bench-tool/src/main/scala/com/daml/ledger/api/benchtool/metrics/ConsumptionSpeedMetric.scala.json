[
  {
    "id" : "76f4ebdf-29bc-4485-9fbb-e44530ab623e",
    "prId" : 9808,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42e643f9-3b9a-4c8d-8002-16414652f638",
        "parentId" : null,
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "I didn't check where this is coming from, but is `recordTimes` sorted descending or does it grow like a stack? It's a bit confusing to see the head value named as `..latest`",
        "createdAt" : "2021-05-27T07:12:54Z",
        "updatedAt" : "2021-05-27T07:12:55Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "51e1194b-891b-472d-a766-9998b34f1d16",
        "parentId" : "42e643f9-3b9a-4c8d-8002-16414652f638",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "From what I understand streams served by a ledger have ascending record times.\r\nI've redefined the `ConsumptionSpeecMetric` a bit. Previously we computed a periodic speed like:\r\n`periodicSpeed = (lastRecordTimeInPeriod - firstRecordTimeInPeriod) / periodDuration`. This definition was problematic in case of a single element in a period or no elements at all.\r\nCurrently the definition is: `periodicSpeed = (previousLastConsideredElement - lastConsideredElement) / periodDuration`. The `previousLastConsideredElement` may be in the current period (for the first period) or in the most recent previous period with elements.\r\nI'll update the readme file with detailed description of this.",
        "createdAt" : "2021-05-27T10:18:59Z",
        "updatedAt" : "2021-05-27T10:18:59Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      },
      {
        "id" : "6a3214d1-922e-4593-8b7a-6db33bfd709b",
        "parentId" : "42e643f9-3b9a-4c8d-8002-16414652f638",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "Readme updates in https://github.com/digital-asset/daml/pull/9822",
        "createdAt" : "2021-05-27T16:37:18Z",
        "updatedAt" : "2021-05-27T16:37:18Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      }
    ],
    "commit" : "50548692db36fb62931f8a6d86e08f518736d5b9",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +29,33 @@      previousLatest match {\n        case None =>\n          recordTimes.headOption.map { recordTime =>\n            Instant.ofEpochSecond(recordTime.seconds.toLong, recordTime.nanos.toLong)\n          }"
  },
  {
    "id" : "5d2a1e09-d9fa-41e0-a76f-4b586ae5c1e8",
    "prId" : 9808,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddb59aba-e49e-454e-bb19-efeb71800f96",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "There is no guarantee that the periodMillis is being maintained by the thread scheduler. It is safer to assume it is not and rely on a current time, to facilitate the unit testing you may want to supply last period as argument of periodicValue(periodDuration: Duration)",
        "createdAt" : "2021-05-27T16:55:04Z",
        "updatedAt" : "2021-05-27T16:55:29Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "be76d7a8-8822-4184-99ea-6e277388bde6",
        "parentId" : "ddb59aba-e49e-454e-bb19-efeb71800f96",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "Good catch! I'll fix this metric and others that may rely on the constant period duration.",
        "createdAt" : "2021-05-27T17:04:53Z",
        "updatedAt" : "2021-05-27T17:04:54Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      }
    ],
    "commit" : "50548692db36fb62931f8a6d86e08f518736d5b9",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +66,70 @@    (previousLatest, currentPeriodLatest) match {\n      case (Some(previous), Some(current)) =>\n        Some((current.toEpochMilli - previous.toEpochMilli).toDouble / periodMillis)\n      case _ =>\n        Some(0.0)"
  }
]