[
  {
    "id" : "9e239007-8a95-4686-988a-7230c315bb7f",
    "prId" : 4953,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2bded82-fc84-4a56-86da-ffe87c955eec",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "This reasonably does some defensive copying but the usages I see can either use an `InputStream` (when writing to the database) (`ByteArray` has a `newInput` method for that) and perhaps the `decodingStream` method on `BaseEncoding` to format the string for the API.",
        "createdAt" : "2020-03-17T14:41:30Z",
        "updatedAt" : "2020-03-17T19:46:55Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "cf22612a-e508-4237-a66b-6ea19a88a275",
        "parentId" : "a2bded82-fc84-4a56-86da-ffe87c955eec",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "I'll transform the reading and writing from the database to use `InputStream`. The string *for* the API would need to be encoded, and would end up being something like this:\r\n\r\n```\r\n  def toApiString(offset: Offset): Ref.LedgerString = {\r\n    val writer = new StringWriter()\r\n    val os = BaseEncoding.base16.encodingStream(writer)\r\n    ByteStreams.copy(offset.toInputStream, os)\r\n    Ref.LedgerString.assertFromString(writer.toString)\r\n  }\r\n```\r\nNot sure this is really worth it for >40 bytes.",
        "createdAt" : "2020-03-17T16:48:42Z",
        "updatedAt" : "2020-03-17T19:46:55Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "f74ec951-0cc0-4721-bed9-9af79492e96b",
        "parentId" : "a2bded82-fc84-4a56-86da-ffe87c955eec",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "See https://github.com/digital-asset/daml/pull/4953/commits/c2b39cd378e657de10e791b99fadfd84330c416f#diff-3c79ae69c286b56286dda4655d1eceb7R22-R27",
        "createdAt" : "2020-03-17T17:25:41Z",
        "updatedAt" : "2020-03-17T19:46:55Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9c3ccf491dcebc26c083911d9714d2fa5d032f",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +27,31 @@    Offset.comparator.compare(value, that.value)\n\n  def toByteArray: Array[Byte] = value.toByteArray\n\n  def toInputStream: InputStream = value.newInput()"
  },
  {
    "id" : "22a0cdb3-0f1d-4719-bfe2-370f90aaa844",
    "prId" : 4953,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6cff6c8-75b5-4078-9e9c-59f981fa8651",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Just had a thought: shouldn't `Offset` have `equals` and `hashCode`? Sure, they're opaque, but you should at least be able to put them in a `Set` or check that a value sent over the wire is the same as one in memory.\r\n\r\nIt didn't need it before because it was a `case class` before.",
        "createdAt" : "2020-03-17T17:38:31Z",
        "updatedAt" : "2020-03-17T19:46:55Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "71230fd9-d37e-4c3e-87a7-15de2a29f7f9",
        "parentId" : "c6cff6c8-75b5-4078-9e9c-59f981fa8651",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Value classes don't exist at runtime, so `ByteString`'s `hashCode` and `equals` are used already.",
        "createdAt" : "2020-03-17T17:42:46Z",
        "updatedAt" : "2020-03-17T19:46:55Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "5c575bf8-e49e-4058-a8d9-ede50e4827d7",
        "parentId" : "c6cff6c8-75b5-4078-9e9c-59f981fa8651",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Makes sense. I'd feel a lot more comfortable if `Offset` had some test cases though. (Not sure why I didn't notice that before.)",
        "createdAt" : "2020-03-17T17:44:43Z",
        "updatedAt" : "2020-03-17T19:46:55Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "72be8618-0042-4560-b1bb-00a2b3ecc308",
        "parentId" : "c6cff6c8-75b5-4078-9e9c-59f981fa8651",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "There's not a whole lot to `Offset` itself. There are test cases for `KVOffset`, but that is around checking the bit shifting magic (which as you pointed out only worked incidentally).",
        "createdAt" : "2020-03-17T19:45:55Z",
        "updatedAt" : "2020-03-17T19:46:55Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9c3ccf491dcebc26c083911d9714d2fa5d032f",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +22,26 @@  *\n  */\nfinal class Offset(private val value: ByteString) extends AnyVal with Ordered[Offset] {\n\n  override def compare(that: Offset): Int ="
  }
]