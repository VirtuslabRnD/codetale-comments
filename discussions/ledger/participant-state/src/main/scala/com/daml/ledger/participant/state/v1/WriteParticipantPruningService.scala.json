[
  {
    "id" : "0c0da51c-6450-4acd-a999-4d959c046d85",
    "prId" : 7988,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7988",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82b7c5ad-c7c8-4c73-bc68-5142eaa86610",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "As noted above, we should probably talk more about failed pruning operations. Maybe also advise WriteService implementations to perform any destructive operations atomically (e.g., in one SQL transaction).",
        "createdAt" : "2020-11-19T15:38:04Z",
        "updatedAt" : "2020-11-23T10:35:52Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "d3353eb6-0b50-4262-8f94-a729c29d3d44",
        "parentId" : "82b7c5ad-c7c8-4c73-bc68-5142eaa86610",
        "authorId" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "body" : "I have written up a section on fault tolerance taking your points as inspiration. Atomic-SQL transactions are one model and another one is breaking up pruning into idempotent steps in such a way that they lend themselves to reaching eventual consistency upon failures.",
        "createdAt" : "2020-11-19T19:02:17Z",
        "updatedAt" : "2020-11-23T10:35:52Z",
        "lastEditedBy" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed2a13fb9597e7d807a8c7f6d319bf4cab1558b9",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +16,20 @@    *\n    * Ledgers that do not elect to support participant pruning, return NotPruned(Status.UNIMPLEMENTED). Returning an\n    * error also keeps the ledger api server from pruning its index.\n    *\n    * Ledgers whose participants hold no participant-local state, but want the ledger api server to prune, return"
  }
]