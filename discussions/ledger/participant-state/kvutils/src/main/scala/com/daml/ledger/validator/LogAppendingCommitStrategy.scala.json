[
  {
    "id" : "f34e0817-ca71-4e62-a1a6-ea84867516e1",
    "prId" : 7520,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7520",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64e8cd02-a78c-4a8e-a658-d840315033ae",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Wouldn't `Future.traverse` yield the same?",
        "createdAt" : "2020-09-30T10:04:30Z",
        "updatedAt" : "2020-09-30T10:04:30Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "5f1d232b-ea53-467b-9922-c63629ccedba",
        "parentId" : "64e8cd02-a78c-4a8e-a658-d840315033ae",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Yes, sort of, in a dynamic language. `Future.sequence` (or `Future.traverse(…)(identity)`) would have the same behavior, but we'd have to pass in a `Seq[Future[A]]` in and get a `Future[Seq[A]]` out. Because these values have different types, we'd end up with `Future[Seq[Any]]` (or something equally unsafe, such as `Future[Seq[Any with Product with Serializable]]`.\r\n\r\nWe need something that works on tuples, not sequences.\r\n\r\nAs the comment says, Cats and Scalaz both support doing something like this, but I'm too much of an `implicit` newbie to figure out how. (I tried. It was ugly.)",
        "createdAt" : "2020-09-30T10:35:54Z",
        "updatedAt" : "2020-09-30T10:35:55Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "0ecbe170-e89d-47f4-8ab9-f34c5482983d",
        "parentId" : "64e8cd02-a78c-4a8e-a658-d840315033ae",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Makes sense -- thanks for the additional color on your design choice.",
        "createdAt" : "2020-09-30T10:39:03Z",
        "updatedAt" : "2020-09-30T10:39:04Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bcfa0b5dff7d50532edc1db6ae29cef89340c99",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +37,41 @@        Future(Envelope.enclose(entry)),\n      )\n      (_, _, index) <- inParallel(\n        if (serializedKeyValuePairs.nonEmpty) {\n          ledgerStateOperations.writeState(serializedKeyValuePairs)"
  },
  {
    "id" : "3cc9b875-3ebf-46f7-8cb3-da5c3b812dba",
    "prId" : 7515,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47d5ba08-45b1-4d50-adfc-72696d8a9f20",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "You might want to add a note to `CommitStrategy` that we expect deterministic write-sets from its implementations.",
        "createdAt" : "2020-09-29T15:10:19Z",
        "updatedAt" : "2020-09-29T15:10:19Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "5c33c26e-0f2c-4a76-bb33-b9cc53f8e563",
        "parentId" : "47d5ba08-45b1-4d50-adfc-72696d8a9f20",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "Half-cooked but maybe meaningful: how about considering (not for this PR) changing a raw write set type from `Seq[(Key, Value)]` to `SortedSet`?",
        "createdAt" : "2020-09-29T15:34:01Z",
        "updatedAt" : "2020-09-29T15:34:01Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "9d4f6984-2225-49e1-b5d7-3350cf67a07d",
        "parentId" : "47d5ba08-45b1-4d50-adfc-72696d8a9f20",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Hmmm… it doesn't really need to be a `Set`. I'd be happy with a `SortedMap` but it's quite a change.",
        "createdAt" : "2020-09-29T19:14:55Z",
        "updatedAt" : "2020-09-29T19:14:55Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a03714d44102a50f8583de03c250ad3d4108d69",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +18,22 @@import scala.concurrent.{ExecutionContext, Future}\n\nclass LogAppendingCommitStrategy[Index](\n    ledgerStateOperations: LedgerStateOperations[Index],\n    keySerializationStrategy: StateKeySerializationStrategy,"
  },
  {
    "id" : "8e1ff80f-44d7-4488-9cbe-75d3b1a713e4",
    "prId" : 7515,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abe7358f-96ac-4cf0-a0a9-ca717c474b6c",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Please note that we'll be doing some CPU intensive operations outside of a `Future` here (i.e., compressing values).",
        "createdAt" : "2020-09-29T15:12:45Z",
        "updatedAt" : "2020-09-29T15:12:45Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "faac2ea6-e545-41c9-97b2-2b2b3fedfc00",
        "parentId" : "abe7358f-96ac-4cf0-a0a9-ca717c474b6c",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "True; it should become `Future { ... }` rather than `Future.successful` as it was before though.",
        "createdAt" : "2020-09-29T15:35:42Z",
        "updatedAt" : "2020-09-29T15:36:40Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "439b72ca-6a3c-43ee-a0e1-de1f4da8a110",
        "parentId" : "abe7358f-96ac-4cf0-a0a9-ca717c474b6c",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Yeah, I agree that this is broken but I think it's out of scope. It was broken before.",
        "createdAt" : "2020-09-29T17:05:15Z",
        "updatedAt" : "2020-09-29T17:05:16Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a03714d44102a50f8583de03c250ad3d4108d69",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +32,36 @@      exporterWriteSet: Option[SubmissionAggregator.WriteSetBuilder] = None,\n  ): Future[Index] = {\n    val serializedKeyValuePairs: SortedMap[Key, Value] =\n      outputState\n        .map {"
  }
]