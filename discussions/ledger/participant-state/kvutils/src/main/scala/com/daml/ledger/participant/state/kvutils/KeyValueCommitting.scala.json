[
  {
    "id" : "82eb4d49-408b-46bd-9366-eda5efb5d701",
    "prId" : 8958,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8958",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf2578e9-c070-41ce-ac7b-2b3075cd9f41",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "We agreed we wouldn't write a test case here yet.",
        "createdAt" : "2021-02-26T13:50:06Z",
        "updatedAt" : "2021-03-01T16:58:45Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "6c3e14be-542d-44fd-80ef-2b1454743720",
        "parentId" : "cf2578e9-c070-41ce-ac7b-2b3075cd9f41",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : ":disappointed: ",
        "createdAt" : "2021-02-26T13:55:00Z",
        "updatedAt" : "2021-03-01T16:58:45Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "97d0b74039f7a05a71570f6dde3322228d6e99a6",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +222,226 @@        case Right(value) => value\n        case Left(err) => throw Err.DecodeError(\"Node\", err.errorMessage)\n      }\n\n      node.getNodeTypeCase match {"
  },
  {
    "id" : "e37d2dca-15a2-4012-8840-04d24b901b71",
    "prId" : 7584,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7584",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01686675-75cd-4125-bfe8-2e9c5c13d001",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "The purpose of this change is to be able to invoke `submissionOutputs` without having a `KeyValueCommitting` instance.",
        "createdAt" : "2020-10-06T14:11:04Z",
        "updatedAt" : "2020-10-13T08:04:09Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "786f945fdc62b10bee6b10a2fcf88af69442f323",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +144,148 @@    }\n\n  private def verifyStateUpdatesAgainstPreDeclaredOutputs(\n      actualStateUpdates: Map[DamlStateKey, DamlStateValue],\n      submission: DamlSubmission,"
  },
  {
    "id" : "a7cd78eb-9a81-42da-9e07-1460bf488dc3",
    "prId" : 3811,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90306c89-42f2-4792-a8f0-c3284f96a1d3",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Will we be able to correlate this exception with the faulty submission based on the logs? If not we might want to add a correlation ID here (e.g., log entry ID).",
        "createdAt" : "2019-12-11T09:56:56Z",
        "updatedAt" : "2019-12-11T10:10:38Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "3ab414a8-d774-49a5-ba45-4c90fa66f9af",
        "parentId" : "90306c89-42f2-4792-a8f0-c3284f96a1d3",
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "I do not want to put such transient information into errors, that can be persisted. I would like to separate the logging need for correlation ids from the business logic",
        "createdAt" : "2019-12-11T10:59:23Z",
        "updatedAt" : "2019-12-11T10:59:24Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "7582e454-823e-487d-b9ba-f5abc3ebdfbf",
        "parentId" : "90306c89-42f2-4792-a8f0-c3284f96a1d3",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Sure, then we just need to make sure that we can correlate the above error with the submission itself at one point.",
        "createdAt" : "2019-12-11T11:27:56Z",
        "updatedAt" : "2019-12-11T11:28:15Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "561993529dbc4e148f7a091eb4cfd2d40ef559d8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +135,139 @@\n        case DamlSubmission.PayloadCase.PAYLOAD_NOT_SET =>\n          throw Err.InvalidSubmission(\"DamlSubmission payload not set\")\n      }\n"
  },
  {
    "id" : "0e0d250f-b10d-4977-83eb-ba1e89d9cdba",
    "prId" : 3780,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3780",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef415aa8-c340-4beb-aca8-6df71d9a04c0",
        "parentId" : null,
        "authorId" : null,
        "body" : "please add comments on why this is temporarily here.",
        "createdAt" : "2019-12-09T10:29:47Z",
        "updatedAt" : "2019-12-10T08:35:01Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "485c0c8b47042f401b12c0c13992bc13ed2ea4dd",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +40,44 @@\n  // A stop-gap measure, to be used while maximum record time is not yet available on every request\n  private def estimateMaximumRecordTime(recordTime: Timestamp): Timestamp =\n    recordTime.addMicros(100)\n"
  },
  {
    "id" : "954b0d8b-9143-4b02-a8d7-2342d87e3fd2",
    "prId" : 3116,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6943ec8-acce-4672-9ef9-7cda54bd076f",
        "parentId" : null,
        "authorId" : null,
        "body" : "further step would be to initialize all these \"committers\" once. Needed to nicely set up some metrics' gauges anyway, but that'll change the interface so would do this in multiple steps (and would try to keep the original interface around until implementations have upgraded). ",
        "createdAt" : "2019-10-07T08:38:19Z",
        "updatedAt" : "2019-11-07T09:35:41Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "277edd527507019f9b414b28441de58c582a1c49",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +76,80 @@      val (logEntry, outputState) = submission.getPayloadCase match {\n        case DamlSubmission.PayloadCase.PACKAGE_UPLOAD_ENTRY =>\n          val (logEntry, outputs) = PackageCommitter(engine).run(\n            entryId,\n            recordTime,"
  },
  {
    "id" : "7fc19398-aea2-44e5-be74-83aa8192ccad",
    "prId" : 3065,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9d8df7f-3714-4325-8e5c-584e1a53f0ca",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "The `var`s in here should probably be marked as `@volatile`.",
        "createdAt" : "2019-10-01T14:50:16Z",
        "updatedAt" : "2019-10-02T12:13:12Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "c2d538e5-37d7-4461-a1b4-48312553d255",
        "parentId" : "d9d8df7f-3714-4325-8e5c-584e1a53f0ca",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "In fact, it's probably best to create a custom `Gauge` implementation that always reports the last value that the application sets, and register that gauge directly with `MetricRegistry#register`. This way the application doesn't have to deal with synchronization (volatile vars or AtomicReference).",
        "createdAt" : "2019-10-01T14:55:03Z",
        "updatedAt" : "2019-10-02T12:13:12Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "8aff474a-1865-428f-a92a-b0228ee835ac",
        "parentId" : "d9d8df7f-3714-4325-8e5c-584e1a53f0ca",
        "authorId" : null,
        "body" : "Thanks, Added `VarGauge`",
        "createdAt" : "2019-10-02T12:13:50Z",
        "updatedAt" : "2019-10-02T12:13:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "2f01ac85d811524ea061ca8561b9e2eebfaca389",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +219,223 @@  }\n\n  private object Metrics {\n    private val registry = metrics.SharedMetricRegistries.getOrCreate(\"kvutils\")\n    private val prefix = \"kvutils.committing\""
  },
  {
    "id" : "0bdd06e6-703d-460c-a9e8-af7319b4791b",
    "prId" : 2304,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1471dd78-34b4-4902-b84d-61ad9c88ddaf",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "`inputState` seems to be already a map, is there a specific reason to turn it into a list and then back into a map?",
        "createdAt" : "2019-07-29T07:20:21Z",
        "updatedAt" : "2019-07-29T12:35:05Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c98f89bf6eb59cfe18c2a97d41daf898fb97679",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +348,352 @@    // not included in the inputs.\n    lazy val knownKeys: Map[GlobalKey, AbsoluteContractId] =\n      inputState.toList.collect {\n        case (key, Some(value))\n            if value.hasContractState"
  },
  {
    "id" : "bc27ca8a-7d57-4c29-9ef1-532efaee0e13",
    "prId" : 2304,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f075375-4820-45d8-a23b-04e9b1df6fb6",
        "parentId" : null,
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "I'm not familiar with this code, but I suspect that if a transaction archives a contract with a key and then creates another contract with the same key, then the creation may overwrite the key entry for the actual input contract in this map.",
        "createdAt" : "2019-07-29T07:43:26Z",
        "updatedAt" : "2019-07-29T12:35:05Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "931e9611-2726-4730-8c9c-3d618930ba66",
        "parentId" : "1f075375-4820-45d8-a23b-04e9b1df6fb6",
        "authorId" : null,
        "body" : "Shouldn't be a problem. This code wouldn't get invoked if the contract is archived and new one created with the same key since the interpreter already catches this.",
        "createdAt" : "2019-07-29T08:34:08Z",
        "updatedAt" : "2019-07-29T12:35:05Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "24c14a78-419e-4875-9520-671d209b08d6",
        "parentId" : "1f075375-4820-45d8-a23b-04e9b1df6fb6",
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "But that's a perfectly legitimate use case. First archive the contract with the key and then create a new one with the same key, all in the same transaction. DAMLe is supposed to produce such a transaction. I'm worried that this code visits the create node and later fetch nodes and this overwrites the data from the lookupByKey/exercise that archives the input contract.",
        "createdAt" : "2019-07-29T09:42:25Z",
        "updatedAt" : "2019-07-29T12:35:05Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c98f89bf6eb59cfe18c2a97d41daf898fb97679",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +353,357 @@              && value.getContractState.hasContractKey\n              && contractVisibleToSubmitter(value.getContractState) =>\n          Conversions.decodeContractKey(value.getContractState.getContractKey) ->\n            Conversions.stateKeyToContractId(key)\n      }.toMap"
  },
  {
    "id" : "b9f8b550-2034-4f7a-a90e-3e5b5216565f",
    "prId" : 2304,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32405833-e0e9-4ec2-a912-458ed216e171",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Do you think the following refactoring would make sense? Running the tests revealed no issue.\r\n\r\n```scala\r\n  private def lookupKey(\r\n      inputState: Map[DamlStateKey, Option[DamlStateValue]],\r\n      knownKeys: Map[GlobalKey, AbsoluteContractId],\r\n      submitter: String,\r\n      key: GlobalKey): Option[AbsoluteContractId] = {\r\n    def isVisibleToSubmitter(cs: DamlContractState, coid: AbsoluteContractId): Boolean = {\r\n      cs.getLocallyDisclosedToList.asScala.contains(submitter) || cs.getDivulgedToList.asScala\r\n        .contains(submitter) || {\r\n        logger.trace(s\"lookupKey($key): Contract $coid not visible to submitter $submitter.\")\r\n        false\r\n      }\r\n    }\r\n    inputState\r\n      .get(Conversions.contractKeyToStateKey(key))\r\n      .flatMap {\r\n        _.flatMap { value =>\r\n          for {\r\n            contractId <- Option(value.getContractKeyState.getContractId).map(decodeContractId)\r\n            contractStateKey = absoluteContractIdToStateKey(contractId)\r\n            contractState <- inputState.get(contractStateKey).flatMap(_.map(_.getContractState))\r\n            if isVisibleToSubmitter(contractState, contractId)\r\n          } yield contractId\r\n        }\r\n      }\r\n      // If the key was not in state inputs, then we look whether any of the accessed contracts\r\n      // has the key we're looking for. This happens with \"fetchByKey\" where the key lookup\r\n      // is not evidenced in the transaction.\r\n      .orElse(knownKeys.get(key))\r\n  }\r\n```",
        "createdAt" : "2019-07-29T08:40:54Z",
        "updatedAt" : "2019-07-29T12:35:05Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "7f11da88-6fea-4ea7-a357-ba4e60340f20",
        "parentId" : "32405833-e0e9-4ec2-a912-458ed216e171",
        "authorId" : null,
        "body" : "thanks, looks much nicer!",
        "createdAt" : "2019-07-29T10:57:33Z",
        "updatedAt" : "2019-07-29T12:35:05Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "5c98f89bf6eb59cfe18c2a97d41daf898fb97679",
    "line" : 315,
    "diffHunk" : "@@ -1,1 +551,555 @@  }\n\n  private def lookupKey(\n      inputState: Map[DamlStateKey, Option[DamlStateValue]],\n      knownKeys: Map[GlobalKey, AbsoluteContractId],"
  },
  {
    "id" : "2e7865b5-b5a9-423c-8ff7-394923b3dcfd",
    "prId" : 2304,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e327fd9-8d11-4a84-8ccd-1d29aac4e35f",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Do you think the following refactoring makes sense? Running the tests found no issue.\r\n\r\n```scala\r\n  private def lookupContract(\r\n      inputState: Map[DamlStateKey, Option[DamlStateValue]],\r\n      inputLogEntries: Map[DamlLogEntryId, DamlLogEntry],\r\n      submitter: String,\r\n      txLet: Timestamp,\r\n      coid: AbsoluteContractId) = {\r\n    def isVisibleToSubmitter(cs: DamlContractState): Boolean =\r\n      cs.getLocallyDisclosedToList.asScala.contains(submitter) || cs.getDivulgedToList.asScala\r\n        .contains(submitter) || {\r\n        logger.trace(s\"lookupContract($coid): Contract state not found!\")\r\n        false\r\n      }\r\n    def isActive(cs: DamlContractState): Boolean = {\r\n      val activeAt = Option(cs.getActiveAt).map(parseTimestamp)\r\n      activeAt.exists(txLet >= _) || {\r\n        val activeAtStr = activeAt.fold(\"<activeAt missing>\")(_.toString)\r\n        logger.trace(s\"lookupContract($coid): Contract not active (let=$txLet, activeAt=$activeAtStr).\")\r\n        false        \r\n      }\r\n    }      \r\n    val (eid, nid) = absoluteContractIdToLogEntryId(coid)\r\n    val stateKey = absoluteContractIdToStateKey(coid)\r\n    for {\r\n      // Fetch the state of the contract so that activeness and visibility can be checked.\r\n      contractState <- inputState.get(stateKey).flatMap(_.map(_.getContractState)).orElse {\r\n        logger.trace(s\"lookupContract($coid): Contract state not found!\")\r\n        throw Err.MissingInputState(stateKey)\r\n      }\r\n      if isVisibleToSubmitter(contractState) && isActive(contractState)\r\n      // Finally lookup the log entry containing the create node and the contract instance.\r\n      entry = inputLogEntries.getOrElse(eid, throw Err.MissingInputLogEntry(eid))\r\n      contract <- lookupContractInstanceFromLogEntry(eid, entry, nid)\r\n    } yield contract\r\n  }\r\n```",
        "createdAt" : "2019-07-29T09:06:29Z",
        "updatedAt" : "2019-07-29T12:35:05Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "9b31d8d0-cd19-4133-8b1f-3dd64cbf1e2c",
        "parentId" : "8e327fd9-8d11-4a84-8ccd-1d29aac4e35f",
        "authorId" : null,
        "body" : "thanks, looks better.",
        "createdAt" : "2019-07-29T11:00:03Z",
        "updatedAt" : "2019-07-29T12:35:05Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "5c98f89bf6eb59cfe18c2a97d41daf898fb97679",
    "line" : 255,
    "diffHunk" : "@@ -1,1 +491,495 @@  // contract instances here. Since we look up every contract that was\n  // an input to a transaction, we do not need to verify the inputs separately.\n  private def lookupContract(\n      inputState: Map[DamlStateKey, Option[DamlStateValue]],\n      inputLogEntries: Map[DamlLogEntryId, DamlLogEntry],"
  },
  {
    "id" : "49df529c-27a1-4a44-9915-0ebfe2ebde8b",
    "prId" : 1498,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "307c3b60-610f-4842-b6db-a63ab251d17a",
        "parentId" : null,
        "authorId" : null,
        "body" : "this could be done by depending on the state entries for each of the packages and then filtering out the ones that exist. it'll read all the data for them from the database though, so we might want to consider extending the interface a bit.",
        "createdAt" : "2019-06-05T21:55:07Z",
        "updatedAt" : "2019-06-07T06:35:42Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "d9e588cf1df2d92d070ee8832d72044b4329a1a1",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +106,110 @@        // the log entry containing the archive as an input (which would be messy).\n\n        // TODO(MZ): Produce a DamlPackageUploadEntry that filters out pre-existing packages\n        logger.trace(s\"\"\"processSubmission[entryId=${prettyEntryId(entryId)}]: Packages: ${archives\n          .map(_.getHash)"
  },
  {
    "id" : "d6f7b9a3-b2db-43c6-93d5-7135873b9d78",
    "prId" : 637,
    "prUrl" : "https://github.com/digital-asset/daml/pull/637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ef24f78-dd66-437a-89e0-2f0bb8794322",
        "parentId" : null,
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "s/DAML state entry/DAML state key",
        "createdAt" : "2019-04-26T13:25:33Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +46,50 @@    * The caller is expected to store the produced [[DamlLogEntry]] in key-value store at a location\n    * that can be accessed through `entryId`. The DAML state updates may create new entries or update\n    * existing entries in the key-value store. The concrete key for DAML state entry is obtained by applying\n    * [[packDamlStateKey]] to [[DamlStateKey]].\n    *"
  },
  {
    "id" : "e8cdf49d-458b-4516-9728-d564bc9bf357",
    "prId" : 637,
    "prUrl" : "https://github.com/digital-asset/daml/pull/637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2317861f-92d0-408f-8097-29ecc38f6333",
        "parentId" : null,
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "comment",
        "createdAt" : "2019-04-26T13:27:28Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      },
      {
        "id" : "66d6acd8-e8d0-4d39-be07-6bec9b2b3493",
        "parentId" : "2317861f-92d0-408f-8097-29ecc38f6333",
        "authorId" : null,
        "body" : "this is a completely internal method and would just duplicate the documentation from the above public method.",
        "createdAt" : "2019-04-26T13:49:56Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +113,117 @@  }\n\n  private def processTransactionSubmission(\n      engine: Engine,\n      config: Configuration,"
  },
  {
    "id" : "ff573c01-930b-4e7b-bc5e-ccf2a709cb5a",
    "prId" : 637,
    "prUrl" : "https://github.com/digital-asset/daml/pull/637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb115d47-a9bc-450d-91d1-905117c9fe0d",
        "parentId" : null,
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "comment on what's happening in here",
        "createdAt" : "2019-04-26T13:29:46Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +146,150 @@    // an input to a transaction, we do not need to verify the inputs separately.\n    def lookupContract(coid: AbsoluteContractId) = {\n      val (eid, nid) = absoluteContractIdToLogEntryId(coid)\n      val stateKey = absoluteContractIdToStateKey(coid)\n      for {"
  },
  {
    "id" : "0dd03697-d5ad-41a5-a682-f1e4c22f92a5",
    "prId" : 637,
    "prUrl" : "https://github.com/digital-asset/daml/pull/637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80924a9e-1f1a-41fc-8fdc-6aa05befa5fd",
        "parentId" : null,
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "add comments explaining each of the steps. Also helps double-check that all state that is checked up front is modified here.",
        "createdAt" : "2019-04-26T13:31:46Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 229,
    "diffHunk" : "@@ -1,1 +227,231 @@        // with the committed command and the created and consumed contracts.\n\n        var stateUpdates = scala.collection.mutable.Map.empty[DamlStateKey, DamlStateValue]\n\n        // Add command dedup state entry for command deduplication (checked by step 1 above)."
  },
  {
    "id" : "4654562d-7018-4c76-8aa4-77a87639cde7",
    "prId" : 637,
    "prUrl" : "https://github.com/digital-asset/daml/pull/637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e30e56fa-a095-4a60-8087-d96c0786eb98",
        "parentId" : null,
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "Add note and link to backlog (https://github.com/digital-asset/daml/milestone/5) for flat transaction representation that avoids deserializing contracts that are not accessed.",
        "createdAt" : "2019-04-26T13:37:15Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 311,
    "diffHunk" : "@@ -1,1 +309,313 @@      .build\n\n  /** Look up the contract instance from the log entry containing the transaction.\n    *\n    * This currently looks up the contract instance from the transaction stored"
  }
]