[
  {
    "id" : "c5f95f13-adc8-4e2c-b434-05415dcf8aae",
    "prId" : 8457,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8457",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "903991d1-6d25-4e19-80ba-de5f5cd03837",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Please add a newline here.\r\n\r\n```suggestion\r\n\r\n    // On copy, avoid decoding the transaction again if not needed\r\n```",
        "createdAt" : "2021-01-12T08:40:37Z",
        "updatedAt" : "2021-01-13T10:43:12Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "b61615b6e6f2b0b94c1dab184b9199ed867f0929",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +800,804 @@    val submissionSeed: crypto.Hash = Conversions.parseHash(submission.getSubmissionSeed)\n\n    // On copy, avoid decoding the transaction again if not needed\n    def copyPreservingDecodedTransaction(\n        submission: DamlTransactionEntry"
  },
  {
    "id" : "2f95d2c3-1ee6-478c-bb72-30cd4f42e77a",
    "prId" : 8457,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8457",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11ca4c83-4748-4f55-a27f-422284599e9e",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "At this point, you are forcing `transaction` regardless, so why not just do it up front and make `tx` a strict (non-lazy) value?\r\n\r\n(And rename it to `transaction`, as you will no longer need the `lazy val` later.)",
        "createdAt" : "2021-01-12T08:42:09Z",
        "updatedAt" : "2021-01-13T10:43:12Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "2da039dc-1ec3-4405-902b-4c75c27760aa",
        "parentId" : "11ca4c83-4748-4f55-a27f-422284599e9e",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "I've kept the lazy semantics for historical reasons, since I believe it's an optimization (e.g. `authorizeSubmitters` does not use it so if this step emits `StepStop` it won't ever be needed). ",
        "createdAt" : "2021-01-12T08:48:33Z",
        "updatedAt" : "2021-01-13T10:43:12Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "941efb4f-0f33-4f65-a454-a09098357b29",
        "parentId" : "11ca4c83-4748-4f55-a27f-422284599e9e",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "On a closer look, `authorizeSubmitters` would cause an abort just in exceptional cases, so I guess there won't be a significant impact if we decode it eagerly.",
        "createdAt" : "2021-01-12T08:51:05Z",
        "updatedAt" : "2021-01-13T10:43:12Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "beff234b-9fd2-4b5c-944e-8374939cfd07",
        "parentId" : "11ca4c83-4748-4f55-a27f-422284599e9e",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "Done",
        "createdAt" : "2021-01-12T08:52:31Z",
        "updatedAt" : "2021-01-13T10:43:12Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      },
      {
        "id" : "b761e976-a768-4d78-aec5-fb2795355833",
        "parentId" : "11ca4c83-4748-4f55-a27f-422284599e9e",
        "authorId" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "body" : "> At this point, you are forcing `transaction` regardless, so why not just do it up front and make `tx` a strict (non-lazy) value?\r\n> \r\n> (And rename it to `transaction`, as you will no longer need the `lazy val` later.)\r\n\r\n@SamirTalwar-DA , I was just about to merge this but I double-checked the need for `lazy`. I missed the fact that the `DamlTransactionEntrySummary` is created again in `trimUnnecessaryNodes`, but the decoded transaction is however not needed in the subsequent step `buildFinalLogEntry`. I'll revert to using the lazy value for the decoded transaction",
        "createdAt" : "2021-01-13T10:42:03Z",
        "updatedAt" : "2021-01-13T10:43:13Z",
        "lastEditedBy" : "aa9eebab-85b9-401c-893f-9a479fe01cf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "b61615b6e6f2b0b94c1dab184b9199ed867f0929",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +804,808 @@        submission: DamlTransactionEntry\n    ): DamlTransactionEntrySummary =\n      new DamlTransactionEntrySummary(submission, transaction)\n  }\n"
  },
  {
    "id" : "e8ddb9ad-f409-4c85-812a-485acc57344c",
    "prId" : 8275,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "878f00b8-cab7-483d-85df-e888f83615d0",
        "parentId" : null,
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "You might be able to spare some collection conversions between here and L. 237",
        "createdAt" : "2020-12-14T16:03:08Z",
        "updatedAt" : "2020-12-14T16:49:01Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "4251cc95-62df-4a94-829f-e69d25e89119",
        "parentId" : "878f00b8-cab7-483d-85df-e888f83615d0",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "I'm performing conversion twice because the `Engine` requires a `Set` but `authorizeSubmitters()` uses pattern matching for convenience to go recursively through all submitters and a `List` is required for that. I'm not sure if changing this would really made a performance difference. What do you think?",
        "createdAt" : "2020-12-14T16:25:46Z",
        "updatedAt" : "2020-12-14T16:49:01Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      },
      {
        "id" : "ab0fb38d-20be-4bf3-8a8b-583256395799",
        "parentId" : "878f00b8-cab7-483d-85df-e888f83615d0",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "I don't think so, so if it's more complicated to change it than to leave it then it's fine IMO.",
        "createdAt" : "2020-12-14T16:32:38Z",
        "updatedAt" : "2020-12-14T16:49:01Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "201174e9-b0dd-43c5-a906-349c6af26735",
        "parentId" : "878f00b8-cab7-483d-85df-e888f83615d0",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "I'll leave it as it is now üëç Thank you.",
        "createdAt" : "2020-12-14T16:33:48Z",
        "updatedAt" : "2020-12-14T16:49:01Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e8e8ef7b19b227d5441570e5a576a7e1632f7dc",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +758,762 @@    val commandId: String = submitterInfo.getCommandId\n    val submitters: List[Party] =\n      submitterInfo.getSubmittersList.asScala.toList.map(Party.assertFromString)\n    lazy val transaction: Tx.Transaction = Conversions.decodeTransaction(submission.getTransaction)\n    val submissionTime: Timestamp = Conversions.parseTimestamp(submission.getSubmissionTime)"
  },
  {
    "id" : "8be4dddd-374e-4f28-95f6-03cdf2c32b8c",
    "prId" : 8275,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66c049b1-106e-47ee-965f-ed3f0eb904ec",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "If you do this with a `.foldLeft`, you can do it on a `Set` (or any `Traversable`), which gets rid of a conversion.\r\n\r\nSomething like this should work.\r\n\r\n```scala\r\n      submitters.foldLeft(Right(StepContinue(transactionEntry))) {\r\n        case Left(rejection) =>\r\n          rejection\r\n        case Right(result) =>\r\n          authorize(submitter) match {\r\n            case Some(rejection) => Left(rejection)\r\n            case None => Right(result)\r\n          }\r\n      }\r\n```\r\n\r\nYou can probably also do this with Scalaz's `traverse`.",
        "createdAt" : "2020-12-14T16:49:06Z",
        "updatedAt" : "2020-12-14T16:49:06Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "082e2888-f3e2-4896-85ce-314265b21ae5",
        "parentId" : "66c049b1-106e-47ee-965f-ed3f0eb904ec",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "As far as I understand the `.foldLeft` approach doesn't allow to fail-fast - I've use recursion specifically for that.\r\nShould I change this?",
        "createdAt" : "2020-12-14T16:50:37Z",
        "updatedAt" : "2020-12-14T16:50:49Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      },
      {
        "id" : "be79e66e-3325-42ac-85b3-2fb30f977d52",
        "parentId" : "66c049b1-106e-47ee-965f-ed3f0eb904ec",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "True, it will still traverse the whole thing. That's where `traverse` would be better. Probably overkill to bring in another dependency though.",
        "createdAt" : "2020-12-14T16:57:31Z",
        "updatedAt" : "2020-12-14T16:57:31Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "ec15865a-2dce-4355-828f-95155a5ff094",
        "parentId" : "66c049b1-106e-47ee-965f-ed3f0eb904ec",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "Leaving as it is then üëç ",
        "createdAt" : "2020-12-14T17:10:45Z",
        "updatedAt" : "2020-12-14T17:10:46Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e8e8ef7b19b227d5441570e5a576a7e1632f7dc",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +144,148 @@              authorizeAll(others)\n          }\n      }\n\n    def authorize(submitter: Party): Option[StepResult[DamlTransactionEntrySummary]] ="
  },
  {
    "id" : "347bdebf-ea5f-4f18-a6a0-fcb8874bdd04",
    "prId" : 8180,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8180",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bec91ec-a3e8-4f25-8753-52bfad1e4b8e",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "This `catch` needs a test case, which will be done separately to avoid blocking the release further.",
        "createdAt" : "2020-12-07T16:12:35Z",
        "updatedAt" : "2020-12-08T10:16:48Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "74fc0248e2c87d51245988fde8e12dc3146e776b",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +238,242 @@              _ => StepContinue[DamlTransactionEntrySummary](transactionEntry)\n            )\n        } catch {\n          case err: Err.MissingInputState =>\n            logger.warn(\"Exception during model conformance validation.\", err)"
  },
  {
    "id" : "56233637-1a5f-45ae-b01c-8b04fdfc594c",
    "prId" : 8180,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8180",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5f0a457-808a-4963-ab6a-995ef64f806a",
        "parentId" : null,
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "I think we should be more careful with the rejection reason. `Disputed` is meant to indicate a bug or malicious behaviour on the participant side. As you explained in the PR comment, we can also end up here if there's a contention issue on contract keys, which should be reported as `Inconsistent`; see `rejectionReasonForValidationError` below.",
        "createdAt" : "2020-12-08T08:04:33Z",
        "updatedAt" : "2020-12-08T10:16:48Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "22263b6d-f97f-480b-8807-a85fa7c7c15c",
        "parentId" : "b5f0a457-808a-4963-ab6a-995ef64f806a",
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "AFAICS only differences in contract key lookup should get us here with `Inconsistent`. So we could avoid the problem by checking in `validateContractKeys` that the contract keys of the input state resolve to the same contract IDs as those given in the input contracts.",
        "createdAt" : "2020-12-08T08:14:22Z",
        "updatedAt" : "2020-12-08T10:16:48Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "9c67d496-de6e-42f4-9e59-ccfa83059ebb",
        "parentId" : "b5f0a457-808a-4963-ab6a-995ef64f806a",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Agreed. Spoke to @gerolf-da and we'll do this separately, as this is blocking the DAML SDK 1.8.0 RC release.",
        "createdAt" : "2020-12-08T08:56:48Z",
        "updatedAt" : "2020-12-08T10:16:48Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "fbcd22c8-53e7-4fba-9368-71933c5f59d0",
        "parentId" : "b5f0a457-808a-4963-ab6a-995ef64f806a",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "We will address this in two ways during contract key validation:\r\n\r\n1. Check that the contract ID is in the declared inputs.\r\n2. Check that contract is actually visible to the submitter.\r\n\r\nIf either of these fail, we'll reject with `Inconsistent`.\r\n\r\n@andreaslochbihler-da, can you confirm this is what we agreed upon?",
        "createdAt" : "2020-12-08T10:20:08Z",
        "updatedAt" : "2020-12-08T10:20:08Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "8f7d69cb-9922-4bb2-9036-c7d784737b37",
        "parentId" : "b5f0a457-808a-4963-ab6a-995ef64f806a",
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "Sounds good.",
        "createdAt" : "2020-12-08T10:42:01Z",
        "updatedAt" : "2020-12-08T10:42:01Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      }
    ],
    "commit" : "74fc0248e2c87d51245988fde8e12dc3146e776b",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +243,247 @@            reject(\n              commitContext.recordTime,\n              buildRejectionLogEntry(transactionEntry, RejectionReason.Disputed(err.getMessage)))\n        }\n      })"
  },
  {
    "id" : "75cf1cc0-cd0b-404f-8cde-1073e6e86e1a",
    "prId" : 8169,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25d085d4-b37d-4f09-96f0-601e2724f0b5",
        "parentId" : null,
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "This rename just removes an annoying IntelliJ Idea warning about mutators without parentheses.",
        "createdAt" : "2020-12-04T14:03:24Z",
        "updatedAt" : "2020-12-04T14:03:25Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "bd4d54ac-6755-4679-8fbc-ba46ba1f4f66",
        "parentId" : "25d085d4-b37d-4f09-96f0-601e2724f0b5",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "You can probably configure the IntelliJ inspections to make sure it's not raised.",
        "createdAt" : "2020-12-04T14:54:34Z",
        "updatedAt" : "2020-12-04T14:55:55Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "e6f6ca5c-ff05-427a-bf60-29595a58abb7",
        "parentId" : "25d085d4-b37d-4f09-96f0-601e2724f0b5",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "True but I'd rather people didn't bump into this annoyance, rather than adding an IDE-specific comment or having everyone configure it.",
        "createdAt" : "2020-12-04T15:21:05Z",
        "updatedAt" : "2020-12-04T15:21:14Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "99ed4c31beb21ab3af7ddbde910247c9534bf3d8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +72,76 @@    \"validate_model_conformance\" -> validateModelConformance,\n    \"blind\" -> blind,\n    \"trim_unnecessary_nodes\" -> trimUnnecessaryNodes,\n    \"build_final_log_entry\" -> buildFinalLogEntry,\n  )"
  },
  {
    "id" : "4ebcb8dd-f881-4783-af8c-22118d595b26",
    "prId" : 8169,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d4ae43b-04de-493e-9b9e-9ed53f554aa1",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Can you give a bit of color as why we no longer need to check for visibility?",
        "createdAt" : "2020-12-04T14:55:20Z",
        "updatedAt" : "2020-12-04T14:55:55Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "7619c7e8-1266-48b8-9071-43c0bb7b25fe",
        "parentId" : "1d4ae43b-04de-493e-9b9e-9ed53f554aa1",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "This is quite subtle and articulated and it has to do with the (limited) power of this check and with the evolution of privacy. I recommend to refer to design comments.",
        "createdAt" : "2020-12-04T15:16:55Z",
        "updatedAt" : "2020-12-04T15:16:56Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "49380087-8797-469c-ac0d-3b8ca72f1598",
        "parentId" : "1d4ae43b-04de-493e-9b9e-9ed53f554aa1",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "When we wrote the multi-party submission design document, we realized that the ledger should not have done the visibility check in the first place.\r\n\r\nNote for example that post-commit validation in sandbox classic (e.g., `ActiveLedgerState.lookupContractLet`) doesn't do visibility checks either.",
        "createdAt" : "2020-12-04T15:20:29Z",
        "updatedAt" : "2020-12-04T15:20:29Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "0e630ac8-0822-42eb-8d75-ab81d87ecda1",
        "parentId" : "1d4ae43b-04de-493e-9b9e-9ed53f554aa1",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I see, thanks. üôáüèª ",
        "createdAt" : "2020-12-04T15:52:47Z",
        "updatedAt" : "2020-12-04T15:52:48Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "99ed4c31beb21ab3af7ddbde910247c9534bf3d8",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +76,80 @@  )\n\n  private def contractIsActive(\n      transactionEntry: DamlTransactionEntrySummary,\n      contractState: DamlContractState,"
  },
  {
    "id" : "0951ffc8-c647-48f1-ad1e-ea8c5eb21b17",
    "prId" : 8106,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8106",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2fcaa1af-ee53-4a48-9495-bb6fa1d5f526",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Minor: to make the steps more explicit you might want to separate the building of a log entry to be the last step.",
        "createdAt" : "2020-12-01T15:37:16Z",
        "updatedAt" : "2020-12-01T16:59:23Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "b278f4cd-1fef-4419-9c5b-cbd3d3c4f962",
        "parentId" : "2fcaa1af-ee53-4a48-9495-bb6fa1d5f526",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "Done.",
        "createdAt" : "2020-12-01T17:01:39Z",
        "updatedAt" : "2020-12-01T17:01:40Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcd0044b421c164d129c3e40d7f90ac70efe65be",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +71,75 @@    \"validate_contract_keys\" -> validateContractKeys,\n    \"validate_model_conformance\" -> validateModelConformance,\n    \"blind\" -> blind,\n    \"remove_unnecessary_nodes\" -> removeUnnecessaryNodes,\n    \"build_final_log_entry\" -> buildFinalLogEntry,"
  },
  {
    "id" : "010830d7-9671-404d-a30b-9331c26634a6",
    "prId" : 8082,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91ef0ff9-9cfd-451f-83ac-2e7b125c693c",
        "parentId" : null,
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "I'd prefer either testing the property at this level (i.e. testing `validateModelConformance` for it rather than `CommitContext.read`) or encapsulating `inputs` in some way, so that `TransactionCommitter` changes cannot cause a regression either.",
        "createdAt" : "2020-11-26T15:50:09Z",
        "updatedAt" : "2020-12-02T16:39:01Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "cb1f61b0-7fa3-4c1c-a3ab-38ae512fd432",
        "parentId" : "91ef0ff9-9cfd-451f-83ac-2e7b125c693c",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I agree with hiding and encapsulating `inputs`. It's clear that direct access is dangerous.",
        "createdAt" : "2020-11-26T16:09:23Z",
        "updatedAt" : "2020-12-02T16:39:01Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "219bf22b-e596-452c-89a0-8edea8332a15",
        "parentId" : "91ef0ff9-9cfd-451f-83ac-2e7b125c693c",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "That's a great idea -- I'll encapsulate `inputs` so that we can be certain we record all read keys.",
        "createdAt" : "2020-11-26T17:44:43Z",
        "updatedAt" : "2020-12-02T16:39:01Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ceba704037d172c60e224fe350d7ed50c1f5c24",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +237,241 @@            lookupContract(transactionEntry, commitContext),\n            lookupPackage(transactionEntry, commitContext),\n            lookupKey(commitContext, knownKeys),\n          )\n          .fold("
  },
  {
    "id" : "82c1949f-b9ea-4b36-aff2-21a48d48021a",
    "prId" : 7914,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0dcfe8c4-ee0a-42dc-ae24-d10aece2aab2",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Can you add test(s) for this, please?",
        "createdAt" : "2020-11-10T10:26:57Z",
        "updatedAt" : "2020-11-25T09:32:32Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "5910d024-6080-404b-a758-29d2a06f0c38",
        "parentId" : "0dcfe8c4-ee0a-42dc-ae24-d10aece2aab2",
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "Done.",
        "createdAt" : "2020-11-24T08:30:29Z",
        "updatedAt" : "2020-11-25T09:32:32Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b3c1c9fd89a5bf2a8c5a7215953e821faf6bdd4",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +266,270 @@        // then it's a consistency problem.\n\n        (recordedTx.nodes(recordedNodeId), replayedTx.nodes(replayedNodeId)) match {\n          case (\n              Node.NodeLookupByKey("
  },
  {
    "id" : "d149cc8c-90a5-49a5-8bc1-50f644041a4e",
    "prId" : 7617,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7617",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f741fd5f-f2c1-49c6-bfa3-22d7adb8fcb6",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This looks horrible. Can't we do something like this?\r\n```suggestion\r\n            (_, exe: Node.NodeExercises))\r\n```\r\nWe have the same in many other places too. We should clean this up a bit in a separate PR. I'm happy to do it myself.",
        "createdAt" : "2020-10-09T14:03:23Z",
        "updatedAt" : "2020-10-13T08:21:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "fa826c23-1e72-4e54-8e37-b3896f11abb1",
        "parentId" : "f741fd5f-f2c1-49c6-bfa3-22d7adb8fcb6",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "In this case you have to write something like: \r\n\r\n```(_, exe: Node.NodeExercises[_, ContractId, VersionnedValue[ContractId]))```\r\nor using type alias \r\n```(_, exe: Node.NodeExercises.WithTxValue[_, ContractId]))```\r\n\r\nI really dislike matching with parametric types.  \r\nBut if you whish I will do the \"cleanup\".",
        "createdAt" : "2020-10-12T08:49:21Z",
        "updatedAt" : "2020-10-13T08:21:59Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "57759bad-d77d-4040-ac5f-43ce3be13808",
        "parentId" : "f741fd5f-f2c1-49c6-bfa3-22d7adb8fcb6",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Can we do the following?\r\n```scala\r\n(_, exe: Node.Exercises[_, _, _])\r\n```\r\nI mean, we don't really care about the actual type arguments, do we?",
        "createdAt" : "2020-10-12T09:00:51Z",
        "updatedAt" : "2020-10-13T08:21:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "d5ae91ee-92f3-4b98-8e72-aa03b0f1acfc",
        "parentId" : "f741fd5f-f2c1-49c6-bfa3-22d7adb8fcb6",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I suspect in some place this broks the type inference. \r\nIn this case, it seems to compile. However, this definitively broke the type inference of Intellij :-(\r\n",
        "createdAt" : "2020-10-12T09:20:23Z",
        "updatedAt" : "2020-10-13T08:21:59Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "52031f7f-3200-4f5a-9084-21b4db6655d6",
        "parentId" : "f741fd5f-f2c1-49c6-bfa3-22d7adb8fcb6",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "That's weird that it breaks (IntelliJ's) type inference. The pattern `Node.NodeExercises(_, _, _, _, _, _, _, _, _, _, _, _, _, _)` doesn't make any statements about types whatsoever. Anyway, let's not touch this then for now.",
        "createdAt" : "2020-10-12T09:39:11Z",
        "updatedAt" : "2020-10-13T08:21:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "028bbced28b92a3143f68f3f65bf48954cba4025",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +282,286 @@        case (\n            (allUnique, existingKeys),\n            (_, exe @ Node.NodeExercises(_, _, _, _, _, _, _, _, _, _, _, _, _, _)))\n            if exe.key.isDefined && exe.consuming =>\n          val stateKey = Conversions.globalKeyToStateKey("
  },
  {
    "id" : "80d591c2-9a7b-4e0d-bc51-ac948077d426",
    "prId" : 6591,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a30299db-82e7-441b-958e-67e46be0486c",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "If you are pattern matching on an `Option` always have `case Some(_)` and `case None`. Otherwise, you could just keep the `.map` + `.getOrElse` that was used here.",
        "createdAt" : "2020-07-03T09:17:30Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "cef0972d-df8a-447a-be5d-d322558e2959",
        "parentId" : "a30299db-82e7-441b-958e-67e46be0486c",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "Yes, made the `None` branch explicit as also suggested by @andreaslochbihler-da.",
        "createdAt" : "2020-07-03T15:27:19Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +156,160 @@      val timeModel = config.timeModel\n\n      commitContext.getRecordTime match {\n        case Some(recordTime) =>\n          val givenLedgerTime = transactionEntry.ledgerEffectiveTime.toInstant"
  },
  {
    "id" : "53a060f4-71ae-43f0-a021-1057b201f2cc",
    "prId" : 6591,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0413a19e-0ad7-45d6-8ab8-c61491f73847",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "For readability just calculating the max of these mins should be simpler either via `.map` + `.getOrElse` for the optional one or branching on the optional one or putting in place of it something like epoch start which won't be the maximum. Here we are calling `.flatten` on a `List` that will surely have 2 values.",
        "createdAt" : "2020-07-03T15:54:18Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "ac8b99b9-c67c-4991-94ca-294b4f9c5068",
        "parentId" : "0413a19e-0ad7-45d6-8ab8-c61491f73847",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Will probably move this logic into `TimeModel` later.",
        "createdAt" : "2020-07-06T15:19:58Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +638,642 @@      timeModel: TimeModel): Instant =\n    List(\n      maybeDeduplicateUntil\n        .map(_.plus(Timestamp.Resolution)), // DeduplicateUntil defines a rejection window, endpoints inclusive\n      Some(timeModel.minRecordTime(ledgerTime)),"
  },
  {
    "id" : "769f2526-b972-49c6-b300-cd6fa4da3090",
    "prId" : 6591,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "559ad03e-40df-4a07-bcef-14f5a0155e5d",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "I don't have any context (and the new `CommitContext.minimumRecordTime` property doesn't seem to be used anywhere) - what exactly is the minimum record time, and why does it depend on the submission time and the command deduplication time window?",
        "createdAt" : "2020-07-06T18:44:34Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "6822b36f-9b5b-4a2d-8a8a-a678c2bf011f",
        "parentId" : "559ad03e-40df-4a07-bcef-14f5a0155e5d",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "This property will be read by `KeyValueCommitting.dryRun` for pre-execution (see #6592 ). In case of pre-execution we are delaying the time-bound checks to post-execution as the record time will be only known then. Hence, we have to keep track of the time-bounds that are influenced by submission time and command deduplication time window in case of transactions. In the post-execution phase we only check the current record time against the time-bounds determined by the `Commiter`s.",
        "createdAt" : "2020-07-07T08:20:58Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +632,636 @@\n  @SuppressWarnings(Array(\"org.wartremover.warts.Option2Iterable\"))\n  private def transactionMinRecordTime(\n      submissionTime: Instant,\n      ledgerTime: Instant,"
  },
  {
    "id" : "e061b7b8-7c40-4e57-a22b-998b6ea331d0",
    "prId" : 6591,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6909a1a9-938e-40ee-92db-060da98ec6ef",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "The time model only describes a relation between the ledger time and the record time, the use of submission time here looks suspicious.",
        "createdAt" : "2020-07-06T18:46:28Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "120b028d-14a9-499b-bbf6-f7cb25899e0b",
        "parentId" : "6909a1a9-938e-40ee-92db-060da98ec6ef",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "As explained above, for pre-execution we need to ensure that the submission is still valid at the record time determined at post-execution hence the use of submission time here (we verify submission time against record time normally as part of the validation steps performed by `TransactionCommitter` in case of normal execution).",
        "createdAt" : "2020-07-07T09:20:54Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "906af7c1-e4a2-461d-abf7-b728f786adbe",
        "parentId" : "6909a1a9-938e-40ee-92db-060da98ec6ef",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Ok, I see - the validity of submission time is somewhat loosly defined by https://github.com/digital-asset/daml/blob/master/daml-lf/spec/contract-id.rst#submission-time, and you chose to use the ledger time model bounds for submission time check. ",
        "createdAt" : "2020-07-07T12:15:12Z",
        "updatedAt" : "2020-07-07T12:15:13Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "b196a8fc-54b7-401b-b9b7-7c75390ee136",
        "parentId" : "6909a1a9-938e-40ee-92db-060da98ec6ef",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Exactly!",
        "createdAt" : "2020-07-07T13:31:34Z",
        "updatedAt" : "2020-07-07T13:31:35Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +641,645 @@        .map(_.plus(Timestamp.Resolution)), // DeduplicateUntil defines a rejection window, endpoints inclusive\n      Some(timeModel.minRecordTime(ledgerTime)),\n      Some(timeModel.minRecordTime(submissionTime))\n    ).flatten.max\n"
  },
  {
    "id" : "3c91c671-b845-4545-8874-30426f82d759",
    "prId" : 6538,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6538",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a1c06ac-a4bf-4816-bb8d-82b5fa9a0007",
        "parentId" : null,
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "Note that `import com.daml.ledger.participant.state.kvutils.committer.TransactionCommitter._` above seems to have become unused.",
        "createdAt" : "2020-07-01T09:13:34Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "68eedb2e-f266-4b62-9d1a-748e38bc49af",
        "parentId" : "7a1c06ac-a4bf-4816-bb8d-82b5fa9a0007",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Removed.",
        "createdAt" : "2020-07-01T12:48:07Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fcd13b1e8abafa8318221497401dd1746cfe5e2",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +79,83 @@    isVisible && isActive\n  }\n\n  /** Reject duplicate commands\n    */"
  },
  {
    "id" : "d5de5569-3c5c-4583-a6ab-e89070045335",
    "prId" : 5901,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba25c7cd-1689-4bb7-80d0-010f1412a33b",
        "parentId" : null,
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "Can this be shortened?",
        "createdAt" : "2020-05-08T07:18:01Z",
        "updatedAt" : "2020-05-08T18:45:01Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "d53ab042-c62b-4cc6-a7d9-838efc99da28",
        "parentId" : "ba25c7cd-1689-4bb7-80d0-010f1412a33b",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "I find it quite handy because one can see the full metric patch.",
        "createdAt" : "2020-05-08T07:35:14Z",
        "updatedAt" : "2020-05-08T18:45:01Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "34d8034e-771d-4695-88df-2dfca2025e3f",
        "parentId" : "ba25c7cd-1689-4bb7-80d0-010f1412a33b",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "True, I was thinking about aliasing with a shorter but still meaningful name such as `commitInterpreterTime`, the long name would only be a click away. Disavantage: not one click away on Github so, on second thought, I withdraw it.",
        "createdAt" : "2020-05-08T07:48:52Z",
        "updatedAt" : "2020-05-08T18:45:01Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee7ac8b5c8db2514f0b159448d9f9104133666c7",
    "line" : 240,
    "diffHunk" : "@@ -1,1 +169,173 @@  private def validateModelConformance: Step =\n    (commitContext, transactionEntry) =>\n      metrics.daml.kvutils.committer.transaction.interpretTimer.time(() => {\n        // Pull all keys from referenced contracts. We require this for 'fetchByKey' calls\n        // which are not evidenced in the transaction itself and hence the contract key state is"
  }
]