[
  {
    "id" : "d9ce8989-6541-4f3d-9c24-c6fe32a408bf",
    "prId" : 3806,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76a3e5f1-116d-476f-b22c-1bf1e371d20a",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Minor, but the commenting here looks a bit wonky.",
        "createdAt" : "2019-12-12T16:15:03Z",
        "updatedAt" : "2019-12-12T17:11:45Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "251fd5fc053893266c997d1d7451a1f25479df7b",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +397,401 @@    Ref.Party.assertFromString(s\"party-${UUID.randomUUID().toString.take(8)}\")\n\n  /*\n  /** Upload DAML-LF packages to the ledger */\n"
  },
  {
    "id" : "66aeee2e-3b07-4a51-84da-829f6a065153",
    "prId" : 3744,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "322cbf01-38c3-4abc-87c2-54da72dd126e",
        "parentId" : null,
        "authorId" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "body" : "Perhaps wrap earlier.",
        "createdAt" : "2019-12-05T10:53:17Z",
        "updatedAt" : "2019-12-05T15:56:33Z",
        "lastEditedBy" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "tags" : [
        ]
      },
      {
        "id" : "163491a6-53e4-426f-9e96-f446c425bc63",
        "parentId" : "322cbf01-38c3-4abc-87c2-54da72dd126e",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "I'll leave that for @dajmaki to judge.",
        "createdAt" : "2019-12-05T11:05:15Z",
        "updatedAt" : "2019-12-05T15:56:33Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8204b7c377ce994002fb11ce1227c245747b3d0",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +330,334 @@\n  /** Helper for [[dispatcher]] to fetch [[com.daml.ledger.participant.state.kvutils.DamlKvutils.DamlLogEntry]] from the\n    * state and convert it into [[com.daml.ledger.participant.state.v1.Update]].\n    */\n  private def getUpdate(idx: Int, state: State): List[Update] = {"
  },
  {
    "id" : "5f378249-ba5d-469c-b3a7-6ec6a71089a2",
    "prId" : 1553,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1553",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72c41ba7-fab0-48b6-8684-df8f946a8bfe",
        "parentId" : null,
        "authorId" : null,
        "body" : "I'd be interested in seeing how the Sawtooth implementation of this logic ends up looking like and whether we can abstract it out and use it for other implementations as well.",
        "createdAt" : "2019-06-28T12:53:09Z",
        "updatedAt" : "2019-07-01T09:03:27Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "b89ec3eec97b94cea04cfd27c4bf94180ecef4ca",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +143,147 @@    * with asynchronous responses delivered within the log entries.\n    */\n  class ResponseMatcher extends Actor {\n    var partyRequests: Map[String, CompletableFuture[PartyAllocationResult]] = Map.empty\n    var packageRequests: Map[String, CompletableFuture[UploadPackagesResult]] = Map.empty"
  },
  {
    "id" : "ff668fc1-a882-43ad-84fd-0e2c621e9b3e",
    "prId" : 637,
    "prUrl" : "https://github.com/digital-asset/daml/pull/637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e85035b5-a214-4ec0-a022-866b3445e0e9",
        "parentId" : null,
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "Add comment explaining that both DamlLogentryId entries and DamlStateKey entries are stored in this map.",
        "createdAt" : "2019-04-26T12:56:18Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +44,48 @@      // The store is mutated by applying [[DamlSubmission]]s. The store can\n      // be reconstructed from scratch by replaying [[State.commits]].\n      store: Map[ByteString, ByteString],\n      // Current ledger configuration.\n      config: Configuration"
  },
  {
    "id" : "b0c35ecb-ce24-4e7f-842f-c94ac05c703b",
    "prId" : 637,
    "prUrl" : "https://github.com/digital-asset/daml/pull/637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71439aa0-8e29-49dd-ac1e-830dbb4574e6",
        "parentId" : null,
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "add warning log message here",
        "createdAt" : "2019-04-26T12:58:43Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +137,141 @@        if (state.store.contains(entryId.getEntryId)) {\n          // The entry identifier already in use, drop the message and let the\n          // client retry submission.\n          logger.warn(s\"CommitActor: duplicate entry identifier in commit message, ignoring.\")\n        } else {"
  },
  {
    "id" : "e895a6ea-902e-420e-935d-877ae2e66f0d",
    "prId" : 637,
    "prUrl" : "https://github.com/digital-asset/daml/pull/637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf955171-c08a-4085-bcd5-764861c6347e",
        "parentId" : null,
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "add appropriate debug log messages that allow tracing how validation etc. progresses",
        "createdAt" : "2019-04-26T13:00:11Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +142,146 @@          logger.trace(\n            s\"CommitActor: processing submission ${KeyValueCommitting.prettyEntryId(entryId)}...\")\n          // Process the submission to produce the log entry and the state updates.\n          val (logEntry, damlStateUpdates) = KeyValueCommitting.processSubmission(\n            engine,"
  },
  {
    "id" : "c2efd16e-d392-486e-b8cd-279c24924fe1",
    "prId" : 637,
    "prUrl" : "https://github.com/digital-asset/daml/pull/637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e79b843-80dd-4bf3-b406-37924dd3835f",
        "parentId" : null,
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "The way this is written it seems to me that we MUST re-validate the read input values on the update here! Otherwise, we are racy!",
        "createdAt" : "2019-04-26T13:01:33Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      },
      {
        "id" : "fc769599-9a50-455c-8074-f1f2f64a8be0",
        "parentId" : "0e79b843-80dd-4bf3-b406-37924dd3835f",
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "Or explain why we are not in case the actor guards us. I don't understand the 'atomically' in that case though? Is it wrt readers only seeing properly updated state?",
        "createdAt" : "2019-04-26T13:02:26Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      },
      {
        "id" : "c180cdc7-5651-46af-89f6-d316aabb74ef",
        "parentId" : "0e79b843-80dd-4bf3-b406-37924dd3835f",
        "authorId" : null,
        "body" : "The actor processes the messages completely sequentially and this line is the only place where the state is swapped.\r\natomically refers to the fact that we swap the reference to a new copy of the state. I'll definitely add some more comments about what's the idea here. Definitely not entirely happy about the construction. Could wrap stateRef into AtomicReference and do a compare and swap to switch it, but it seems rather pointless with one writer.",
        "createdAt" : "2019-04-26T14:25:55Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +167,171 @@\n          // Update the state.\n          stateRef = state.copy(\n            recordTime = newRecordTime,\n            commitLog = state.commitLog :+ commit,"
  },
  {
    "id" : "608beef0-0504-4b1a-82f9-688d8543dd55",
    "prId" : 637,
    "prUrl" : "https://github.com/digital-asset/daml/pull/637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "682d93c9-5d58-4563-94b2-c29f154b8a94",
        "parentId" : null,
        "authorId" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "body" : "extend comments on what's happening -- I'm assuming this should be the example that explains how to implement the participant-state interfaces using the kvutils.",
        "createdAt" : "2019-04-26T13:05:50Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : "ba0b5f2d-78e4-41a5-94a1-d55d6f19f728",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 291,
    "diffHunk" : "@@ -1,1 +289,293 @@      transactionMeta: TransactionMeta,\n      transaction: SubmittedTransaction): Unit = {\n\n    // Construct a [[DamlSubmission]] message using the key-value utilities.\n    // [[DamlSubmission]] contains the serialized transaction and metadata such as"
  }
]