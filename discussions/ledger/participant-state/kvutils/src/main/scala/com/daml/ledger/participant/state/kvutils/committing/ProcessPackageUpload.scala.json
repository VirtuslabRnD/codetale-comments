[
  {
    "id" : "07e03080-2b3a-4752-b660-b7c692ca5ea2",
    "prId" : 3065,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84090f76-a29e-4cd4-a3b5-8d892eba166b",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Would it make sense to prefix this with something like the participant id?",
        "createdAt" : "2019-10-03T08:34:37Z",
        "updatedAt" : "2019-10-03T08:35:12Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "bc15209b-6901-4238-8f51-b9c175349bda",
        "parentId" : "84090f76-a29e-4cd4-a3b5-8d892eba166b",
        "authorId" : null,
        "body" : "Not possible with current design where we process requests from many different participants and committers.",
        "createdAt" : "2019-10-03T09:38:37Z",
        "updatedAt" : "2019-10-03T09:38:38Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "a66d5486-f5ef-4406-b41d-102a4ad9a19d",
        "parentId" : "84090f76-a29e-4cd4-a3b5-8d892eba166b",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Could you elaborate? How can the same kvutils instance (as in the jvm object) be used in multiple participants? We can call it something else, if the name `participantId` is the issue. Anyway, not blocking or major on my side. Just trying to understand :)",
        "createdAt" : "2019-10-03T09:47:58Z",
        "updatedAt" : "2019-10-03T09:47:58Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "10f95273-20ed-4c40-8594-b013a8015f04",
        "parentId" : "84090f76-a29e-4cd4-a3b5-8d892eba166b",
        "authorId" : null,
        "body" : "This code is not used by participants. It is used by the committer to process a submission from a participant. We also use the same validator instance for multiple committers in development. But yes, it might make sense to include an identifier in the registry name for aggregation (though I guess that can also be solved at the point in which the metrics are collected).",
        "createdAt" : "2019-10-03T12:34:04Z",
        "updatedAt" : "2019-10-03T12:34:04Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "2f01ac85d811524ea061ca8561b9e2eebfaca389",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +151,155 @@\n  private[committing] object Metrics {\n    private val registry = metrics.SharedMetricRegistries.getOrCreate(\"kvutils\")\n    private val prefix = \"kvutils.committing.package\"\n    val runTimer: Timer = registry.timer(s\"$prefix.run-timer\")"
  },
  {
    "id" : "040ce179-0ef0-47b9-b39d-065ed4ad3d75",
    "prId" : 2924,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2924",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7feb4f57-1073-4323-8bd9-4ed9a83c3a87",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "This executor and its thread will keep on living until the JVM shuts down. This is probably not a problem, but if you only need to run one task on a separate thread you may want to consider either shutting down the executor once its done, using a simple `Thread` and create a `Future` using a `Promise` based on that thread or alternatively run a simple execution context that uses a single thread and deploys the runnable onto that, without pooling.",
        "createdAt" : "2019-09-17T08:55:33Z",
        "updatedAt" : "2019-09-17T10:53:39Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "37446b16-dcb7-4fef-99ba-c840bc999e1e",
        "parentId" : "7feb4f57-1073-4323-8bd9-4ed9a83c3a87",
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "What I need is all pre-loads to happen on the same single thread. Pre-loads can happen any time and they come in clusters. Doing them serially conserves resources and allows proper recognition of duplicates.",
        "createdAt" : "2019-09-17T10:49:10Z",
        "updatedAt" : "2019-09-17T10:53:39Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "697b15e41cd60705b8f46b66250e58e380642387",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +142,146 @@\nobject ProcessPackageUpload {\n  val serialContext = ExecutionContext.fromExecutor(Executors.newSingleThreadExecutor())\n}"
  }
]