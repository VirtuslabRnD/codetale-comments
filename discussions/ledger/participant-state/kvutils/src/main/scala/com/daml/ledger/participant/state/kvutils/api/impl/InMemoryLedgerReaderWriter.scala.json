[
  {
    "id" : "556eb1cd-66b4-4312-bbb7-f2d0bef91d46",
    "prId" : 3923,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63d0cd6c-99f7-4ddd-91f4-973b1b9d6132",
        "parentId" : null,
        "authorId" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "body" : "Perhaps a custom Exception type here?",
        "createdAt" : "2019-12-23T11:22:55Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "tags" : [
        ]
      },
      {
        "id" : "db7a1fa5-6fe4-4278-878f-14c3184fd31e",
        "parentId" : "63d0cd6c-99f7-4ddd-91f4-973b1b9d6132",
        "authorId" : null,
        "body" : "Or perhaps use `assert` as that's what this is.\r\nEDIT: We should move the assertion into processSubmission?",
        "createdAt" : "2020-01-06T09:26:43Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "1d84123f-76bf-4f11-b8eb-6281dfe4ab1c",
        "parentId" : "63d0cd6c-99f7-4ddd-91f4-973b1b9d6132",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Yes, moving this into `KeyValueComitting.processSubmission` would be a great idea.",
        "createdAt" : "2020-01-06T10:05:33Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "c820159bc8cad55858939f177705f0a8bab0fd13",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +94,98 @@    if (!(actualStateUpdates.keySet subsetOf expectedStateUpdates)) {\n      val unaccountedKeys = actualStateUpdates.keySet diff expectedStateUpdates\n      sys.error(\n        s\"State updates not a subset of expected updates! Keys [$unaccountedKeys] are unaccounted for!\")\n    }"
  },
  {
    "id" : "7be2a6f5-874e-483f-bd13-8293435fd431",
    "prId" : 3923,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b006e210-47c1-4d47-8dd0-689dc39608f9",
        "parentId" : null,
        "authorId" : null,
        "body" : "We should probably undo this mistake of mine and use a better entry id allocation schema for the in-memory ledgers. e.g. use monotonically increasing integer. Medium term we'll do away with the entry id though (removal of relative ids), so this isn't a big deal right now.",
        "createdAt" : "2020-01-08T17:07:11Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "1d3b250a-e1d1-4621-9a55-06477e0414fd",
        "parentId" : "b006e210-47c1-4d47-8dd0-689dc39608f9",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Good point -- will address that in a separate PR.",
        "createdAt" : "2020-01-08T17:29:14Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "c820159bc8cad55858939f177705f0a8bab0fd13",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +126,130 @@\n  private def allocateEntryId(): DamlLogEntryId = {\n    val nonce: Array[Byte] = Array.ofDim(8)\n    randomNumberGenerator.nextBytes(nonce)\n    DamlLogEntryId.newBuilder"
  }
]