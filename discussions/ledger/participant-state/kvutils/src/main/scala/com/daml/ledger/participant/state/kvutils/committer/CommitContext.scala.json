[
  {
    "id" : "e0be1e73-9613-4534-a711-955f4191d81c",
    "prId" : 8194,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db938a29-d934-4a55-a45d-dd1ab7b1e95c",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "This will not mark a key as being accessed in case it is not available. Is this your intention? The comment now contradicts this behaviour.",
        "createdAt" : "2020-12-08T12:35:09Z",
        "updatedAt" : "2020-12-08T12:52:41Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "05332531-dd6c-4742-b627-c4bcda251de2",
        "parentId" : "db938a29-d934-4a55-a45d-dd1ab7b1e95c",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Yeah, you're right. I was reading \"not available\" as \"is explicitly `None`\", but it probably means \"not in the map at all\".",
        "createdAt" : "2020-12-08T12:36:42Z",
        "updatedAt" : "2020-12-08T12:52:41Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f90993cfc0e1da14baf1bb2209a078919c2479c",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +59,63 @@    * Throws an exception if the key is not specified in the input state. */\n  def read(key: DamlStateKey): Option[DamlStateValue] = {\n    val value = inputs.getOrElse(key, throw Err.MissingInputState(key))\n    accessedInputKeys += key\n    value"
  },
  {
    "id" : "09e63561-8bcd-42b2-a990-d2b93eb34a37",
    "prId" : 8082,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89585882-5d43-45f0-b911-70be48211232",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "It's really weird that this is a trait. Perhaps it should be a class and accept `inputs`, `recordTime`, and `participantId` as parameters?\r\n\r\nDefinitely something for a subsequent changeset, though.",
        "createdAt" : "2020-12-01T16:23:25Z",
        "updatedAt" : "2020-12-02T16:39:01Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "29d4b634-84b0-4765-8064-ce2dcf9e01c6",
        "parentId" : "89585882-5d43-45f0-b911-70be48211232",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Yes, it is -- we can fix that in a later PR.",
        "createdAt" : "2020-12-01T17:52:11Z",
        "updatedAt" : "2020-12-02T16:39:02Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ceba704037d172c60e224fe350d7ed50c1f5c24",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +22,26 @@  * allows committer to set state outputs.\n  */\nprivate[kvutils] trait CommitContext {\n  private[this] val logger = LoggerFactory.getLogger(this.getClass)\n"
  },
  {
    "id" : "0accd0d4-c8a8-4faf-b984-c0c8a8f71509",
    "prId" : 6630,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76a17843-4bb1-4fad-a094-aef809c2a8de",
        "parentId" : null,
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "We might want to turn all these `var` into properties for easier testability,",
        "createdAt" : "2020-07-08T14:46:53Z",
        "updatedAt" : "2020-07-09T10:04:48Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "8c541cee-027f-405c-8079-225192780792",
        "parentId" : "76a17843-4bb1-4fad-a094-aef809c2a8de",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "That's exactly the same comment I had on this before for you ;) mockito is happy to stub these as well so didn't make that change.",
        "createdAt" : "2020-07-17T09:25:46Z",
        "updatedAt" : "2020-07-17T09:25:47Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "30f59a7ea813c8683703e913a307efff5574108f",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +48,52 @@  // Rejection log entry used for generating an out-of-time-bounds log entry in case of\n  // pre-execution.\n  var outOfTimeBoundsLogEntry: Option[DamlLogEntry] = None\n\n  def getRecordTime: Option[Timestamp]"
  },
  {
    "id" : "50e4ac84-e4b6-4006-8757-7d8649784dc1",
    "prId" : 6567,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6567",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ad1ee0f-4cca-4382-b47c-a12154831f82",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "I wouldn't make this `final`. If we keep the same `CommitContext` interface for both pre-execution vs. normal use-cases then these two methods must be implemented in `Committer` in order to avoid rebuilding the input map every time for normal execution.\r\nA simple solution is to lazily transform the inputs to the other type (i.e., inputs with vs. without fingerprints).",
        "createdAt" : "2020-07-03T08:33:56Z",
        "updatedAt" : "2020-07-03T08:42:54Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "112848b33c7d7e20093c922504fa5e654512b27a",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +28,32 @@\n  def inputsWithFingerprints: DamlStateMapWithFingerprints\n  final def inputs: DamlStateMap = inputsWithFingerprints.map {\n    case (key, (value, _)) => (key, value)\n  }"
  },
  {
    "id" : "cce23d39-d961-4843-8ea3-51ebd49ea60f",
    "prId" : 6567,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6567",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84a8bc9a-f42a-4a44-bf6f-a1c3da9299b3",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "We may leave associating fingerprints to accessed input keys to the caller, i.e., that would keep this interface less tailored to pre-execution (as we are using the same fingerprints that have been input this is trivial to do at the caller side) as well as remove the need to have an `inputsWithFingerprints` method.",
        "createdAt" : "2020-07-03T08:38:51Z",
        "updatedAt" : "2020-07-03T08:48:45Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "112848b33c7d7e20093c922504fa5e654512b27a",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +79,83 @@\n  /** Get the accessed input key set. */\n  def getAccessedInputKeysWithFingerprints: collection.Set[(DamlStateKey, Fingerprint)] =\n    accessedInputKeysAndFingerprints\n"
  },
  {
    "id" : "0014f203-6907-4953-901d-44c9600e66de",
    "prId" : 6166,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c13483f7-24f8-4e20-a523-78563afe3533",
        "parentId" : null,
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "Every `Committer` uses its own `CommitContext`, so the output order is determinized for each DamlSubmission in isolation. The output order across several DamlSubmissions does not seem to be deterministic given that `BatchedSubmissionValidator` calls `commit`s inside a `mapAsync`. I'm not sure though why we even need deterministic output order here. Can you check why we need the deterministic output order in the first place?",
        "createdAt" : "2020-06-02T06:57:19Z",
        "updatedAt" : "2020-06-02T10:17:50Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      },
      {
        "id" : "524bf5b5-6500-4561-8353-9cfca3df004d",
        "parentId" : "c13483f7-24f8-4e20-a523-78563afe3533",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "We ensure determinisim in `BatchedSubmissionValidator` by doing the conflict detection first (according to a fixed order) and only `commit`ing submissions that won't conflict and will generate the same write set regardless of order of execution.\r\nWe need deterministic output for historical reasons here -- we may want to relax this requirement.",
        "createdAt" : "2020-06-02T08:38:04Z",
        "updatedAt" : "2020-06-02T10:17:50Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "7e9a9e75-1e26-499d-a4c4-6149c4117e2e",
        "parentId" : "c13483f7-24f8-4e20-a523-78563afe3533",
        "authorId" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "body" : "Makes sense. Thanks for explaining the historical reasons.",
        "createdAt" : "2020-06-02T09:16:21Z",
        "updatedAt" : "2020-06-02T10:17:50Z",
        "lastEditedBy" : "d7a5ac30-0554-4d45-9856-c4d4d457e069",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fa409c01178f2afb0bc265221613b023a96b20b",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +24,28 @@  def inputs: DamlStateMap\n  // NOTE(JM): The outputs must be iterable in deterministic order, hence we\n  // keep track of insertion order.\n  private val outputOrder: mutable.ArrayBuffer[DamlStateKey] =\n    mutable.ArrayBuffer()"
  }
]