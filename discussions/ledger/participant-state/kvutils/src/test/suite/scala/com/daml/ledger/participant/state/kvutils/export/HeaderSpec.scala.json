[
  {
    "id" : "8b45c77a-890a-457a-91bf-7a0a89eedaab",
    "prId" : 7265,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1602cb3e-1ff4-425b-9e22-a9fcef523082",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "This description is puzzling when reading the below test case as flushing is not apparent. I.e., the test case rather tells that `only the required part of the input is consumed by consumeAndVerify`.",
        "createdAt" : "2020-09-02T10:20:36Z",
        "updatedAt" : "2020-09-02T10:22:17Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "cd58352b-3cd8-4bf1-9d63-7f5082f815f0",
        "parentId" : "1602cb3e-1ff4-425b-9e22-a9fcef523082",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "It tells us both, annoyingly. We can see that calling `output.write` after `header.write` doesn't end up with weird interleaving issues (which I had for a moment, which is why I wrote this test), and that calling `consumeAndVerify` does not buffer past the end of the header.",
        "createdAt" : "2020-09-02T12:28:28Z",
        "updatedAt" : "2020-09-02T12:28:28Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "f788f5f3-152c-49cf-b8f3-7bb75c640bc3",
        "parentId" : "1602cb3e-1ff4-425b-9e22-a9fcef523082",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "With your explanation it indeed makes sense!",
        "createdAt" : "2020-09-02T13:31:21Z",
        "updatedAt" : "2020-09-02T13:31:30Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac8921a780ac376a2ef73b6b5139530185f6bf5a",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +69,73 @@    }\n\n    \"flushes correctly, and does not buffer\" in {\n      val input = new PipedInputStream\n      val output = new PipedOutputStream(input)"
  }
]