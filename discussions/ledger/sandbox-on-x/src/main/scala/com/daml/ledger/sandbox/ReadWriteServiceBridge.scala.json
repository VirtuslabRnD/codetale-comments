[
  {
    "id" : "4d6797ae-f2e1-4865-84f8-93193d307197",
    "prId" : 9624,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97b7f6ce-cdcf-4f0b-b9b8-d97e415235fd",
        "parentId" : null,
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "what is this good for...can you describe in which scenario this would help? ",
        "createdAt" : "2021-05-09T15:38:27Z",
        "updatedAt" : "2021-05-10T14:21:17Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "024535a7-0668-4c3f-9af5-4484fba38564",
        "parentId" : "97b7f6ce-cdcf-4f0b-b9b8-d97e415235fd",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I suggest you ask @kamil-da. I'm just the implementor. :upside_down_face: ",
        "createdAt" : "2021-05-10T07:08:55Z",
        "updatedAt" : "2021-05-10T14:21:17Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "447ec9c2-cb09-469b-9da1-5d667e741f5f",
        "parentId" : "97b7f6ce-cdcf-4f0b-b9b8-d97e415235fd",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "This change allows to run the `sandbox-on-x` on a database created with a Postgres export.\r\nI needed that for testing the `ledger-api-bench-tool`. I would like to quickly prepare a running ledger with a significant amount of transactions. To do that I use existing ledger database exports.",
        "createdAt" : "2021-05-10T07:26:29Z",
        "updatedAt" : "2021-05-10T14:21:17Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      },
      {
        "id" : "b3ba32d5-9241-41f6-9652-728a62c26e4f",
        "parentId" : "97b7f6ce-cdcf-4f0b-b9b8-d97e415235fd",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I'd also like to add that I don't think the previous implementation (of not conforming to the API) necessarily had a good justification. So I'm not sure why this would be _worse_.",
        "createdAt" : "2021-05-10T09:02:37Z",
        "updatedAt" : "2021-05-10T14:21:17Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "f34425b9-2388-4062-93aa-f0a9e22142cc",
        "parentId" : "97b7f6ce-cdcf-4f0b-b9b8-d97e415235fd",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "As we discussed with @kamil-da \r\n* I would be against to do the filtering here, because it makes the impression that this bridge can support more use cases then it does. This filtration logic would be correct in a clean start from a non empty database, but wouldn't filter anything neither. All in other cases the indexer tries to re-initalize from an arbitrary offset would result in corrupt/undefined behavior.\r\n* As we discussed with Kamil, I think it makes sense to add support for clean-continue-from-preingested-indexdb case, since probably this will be the way going forward with sustained TP verification as well (@mziolekda ?)\r\n* We still do not need to support multiple calls for this use case, so I would keep that code as it is\r\n* Suggestion 1: just dropping the assert like in this PR, and changing the comment above\r\n* Suggestion 2: not dropping the assert, but making the assert conditional with a configuraion flag, so this relaxation is specifically needed to be enabled to increase safety\r\n\r\n@tudor-da @mziolekda I would like to welcome your suggestions/ideas on this topic here",
        "createdAt" : "2021-05-10T10:00:17Z",
        "updatedAt" : "2021-05-10T14:21:17Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "8dfd03a5-7c96-4ada-a508-3df55c60ea44",
        "parentId" : "97b7f6ce-cdcf-4f0b-b9b8-d97e415235fd",
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "Thank you @nmarton-da for providing the context. 👍 \r\nFor my current work it would be sufficient just to use the patch applied locally but if you foresee value in having this change in the codebase, then I would go with the second option that @nmarton-da described - an explicit configuration parameter allowing starts with a non-empty database.",
        "createdAt" : "2021-05-10T11:25:04Z",
        "updatedAt" : "2021-05-10T14:21:17Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      },
      {
        "id" : "7e4d7986-28fa-4f31-9031-dd4476079800",
        "parentId" : "97b7f6ce-cdcf-4f0b-b9b8-d97e415235fd",
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "I agree with @nmarton-da opinion that a filter sends a misleading signal. I would be fine with suggestion 1 and a disclaimer in the comments. This code is only there to facilitate our own testing at the moment.",
        "createdAt" : "2021-05-10T11:40:15Z",
        "updatedAt" : "2021-05-10T14:21:17Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "cb97b34f-e826-4ee8-a3f9-6cbc340b5ceb",
        "parentId" : "97b7f6ce-cdcf-4f0b-b9b8-d97e415235fd",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "works with me",
        "createdAt" : "2021-05-10T13:39:31Z",
        "updatedAt" : "2021-05-10T14:21:17Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "b88d0d68-fd79-4a52-8fe2-1b9235cfffba",
        "parentId" : "97b7f6ce-cdcf-4f0b-b9b8-d97e415235fd",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Done. Feel free to undo or change this as you see fit.",
        "createdAt" : "2021-05-10T14:21:42Z",
        "updatedAt" : "2021-05-10T14:21:42Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecee45723863f8c454521693fef417c55224f28b",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +122,126 @@    }\n    logger.info(\"Indexer subscribed to state updates.\")\n    beginAfter match {\n      case None => queueSource\n      case Some(offset) => queueSource.dropWhile(_._1 <= offset)"
  },
  {
    "id" : "ec031036-fb63-4508-91d4-c02d08db9046",
    "prId" : 9624,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0312e59-8930-40a3-ac68-38d11288365b",
        "parentId" : null,
        "authorId" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "body" : "Correct me if I'm wrong but if this is exclusively for handling bootstrapping from indexer persistence, then we don't need the `.dropWhile()` because the queue will be empty anyway.",
        "createdAt" : "2021-05-10T14:23:47Z",
        "updatedAt" : "2021-05-10T14:23:47Z",
        "lastEditedBy" : "5f6b922a-83eb-4419-97b1-13c757c1e583",
        "tags" : [
        ]
      },
      {
        "id" : "f277c43f-2458-4877-9d0a-d1c505223c61",
        "parentId" : "e0312e59-8930-40a3-ac68-38d11288365b",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I think I'd prefer not to rely on that assumption, just in case it changes. If we're going to support `beginAfter`, let's support it. I think ignoring it would be worse than not handling it at all.",
        "createdAt" : "2021-05-10T14:46:26Z",
        "updatedAt" : "2021-05-10T14:46:26Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "c7ebf9b0-42a2-4d2e-aa7a-e4cf9ac1b4a9",
        "parentId" : "e0312e59-8930-40a3-ac68-38d11288365b",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "yepp @SamirTalwar-DA the plan was to remove that part entirely.\r\nI take responsibility for the misunderstand and I will fix it.",
        "createdAt" : "2021-05-10T15:39:19Z",
        "updatedAt" : "2021-05-10T15:39:19Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecee45723863f8c454521693fef417c55224f28b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +124,128 @@    beginAfter match {\n      case None => queueSource\n      case Some(offset) => queueSource.dropWhile(_._1 <= offset)\n    }\n  }"
  },
  {
    "id" : "f9aaa072-5159-4189-9c00-fd369de0bf24",
    "prId" : 9074,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a9c1e83-cabf-42fb-b8ba-e5fc10b75c51",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "wouldn't it be better to return a failed future, or otherwise signal that pruning is not supported?",
        "createdAt" : "2021-03-10T16:39:56Z",
        "updatedAt" : "2021-03-24T10:03:16Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "46a6396f-df6d-4a84-8cba-4b45de25bc98",
        "parentId" : "3a9c1e83-cabf-42fb-b8ba-e5fc10b75c51",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "Good question. So as it turned out this part of the WriteService is responsible to prune not the participant, but the ledger. But: if this failes / not supported etc, then participant pruning will be also failing because these are sequenced after each other on the implementation of the pruning API currently. Therefore if we here return notsupported (which I did originally), that will also break pruning, pruning conformance tests etc.",
        "createdAt" : "2021-03-11T09:09:46Z",
        "updatedAt" : "2021-03-24T10:03:16Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "d7fedeff-15b6-4086-bad3-f1ab19994b66",
        "parentId" : "3a9c1e83-cabf-42fb-b8ba-e5fc10b75c51",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "> that will also break pruning, pruning conformance tests\r\n\r\nI don't think it matters for a PoC, but a real implementation should return `UNIMPLEMENTED` and instead fix the conformance tests. The ledger API protobuf does state:\r\n```\r\n// ... or (returns) with one of the following errors\r\n// - ``UNIMPLEMENTED``: if the participant is based on a ledger that has not implemented pruning\r\n```\r\nwhich implies that support for pruning is optional",
        "createdAt" : "2021-03-22T09:01:19Z",
        "updatedAt" : "2021-03-24T10:03:16Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "6bdb988f-60e2-4ccb-881d-7320051ae755",
        "parentId" : "3a9c1e83-cabf-42fb-b8ba-e5fc10b75c51",
        "authorId" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "body" : "The problem is that currently I think pruning is implemented like first it tries to prune the ledger, if failed (or unimplemented), then it fails, if it succeeds, then it prunes the indexDB.\r\nSo if we return here unimplemented, we disable pruning for the indexDB as well.\r\n@oliverse-da may I ask for you opinion this regard?",
        "createdAt" : "2021-03-22T09:24:23Z",
        "updatedAt" : "2021-03-24T10:03:16Z",
        "lastEditedBy" : "940afe62-a033-4e56-b2d3-8de3ca6d6d5c",
        "tags" : [
        ]
      },
      {
        "id" : "d7181093-17d6-4e69-81ab-8721c4df54ab",
        "parentId" : "3a9c1e83-cabf-42fb-b8ba-e5fc10b75c51",
        "authorId" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "body" : "> The problem is that currently I think pruning is implemented like first it tries to prune the ledger, if failed (or unimplemented), then it fails, if it succeeds, then it prunes the indexDB.\r\n> So if we return here unimplemented, we disable pruning for the indexDB as well.\r\n> @oliverse-da may I ask for you opinion this regard?\r\n\r\nWhat is \"sandbox-on-x\"? Is that something that we plan to support in production for example?\r\n\r\nIndependently of our plans for sandbox-on-x, we could also choose to have `ApiParticipantPruningService.prune` prune the index even if `WriteService.prune` returns `NOT_IMPLEMENTED`. Fwiw, canton now only supports participant pruning in its enterprise edition, and the community edition simply returns success without pruning so that the index is still pruned, but if we change `ApiPartiicpantPruningService.prune` to \"handle\" NOT_IMPLEMENTED that would be compatible with the index being pruned even if `WriterService.prune` is not supported.",
        "createdAt" : "2021-03-22T09:35:55Z",
        "updatedAt" : "2021-03-24T10:03:16Z",
        "lastEditedBy" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "tags" : [
        ]
      }
    ],
    "commit" : "d75363bdd168fdd131574e5c0468580727a76c94",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +92,96 @@  ): CompletionStage[PruningResult] =\n    CompletableFuture.completedFuture(\n      PruningResult.ParticipantPruned\n    )\n"
  }
]