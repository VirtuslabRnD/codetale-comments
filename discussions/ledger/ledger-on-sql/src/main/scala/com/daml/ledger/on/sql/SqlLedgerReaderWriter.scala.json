[
  {
    "id" : "ffdce696-a58d-4e5a-bc86-024328b0c250",
    "prId" : 7063,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7063",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0aae4ccf-22c4-4d3b-a1d0-2244fd51c6d1",
        "parentId" : null,
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "If I understand correctly, this will be also used by the ledger state in direct mode. I assume it worked correctly for you with DAML-on-SQL but there were deadlocks when I attempted to do so in DAML-on-Memory so I'd test this carefully. Also, any assessment on the performance implications?",
        "createdAt" : "2020-08-10T07:33:34Z",
        "updatedAt" : "2020-08-10T07:49:53Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "43f4e1be-3970-4014-9440-be01249c2e3c",
        "parentId" : "0aae4ccf-22c4-4d3b-a1d0-2244fd51c6d1",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Hmmm, not sure how to test it past running the conformance tests (which work fine).\r\n\r\nPerformance isn't impacted at all.\r\n\r\nMy understanding is that because [we only allocate a single executor for writing](https://github.com/digital-asset/daml/pull/7063/files#diff-1454db978c0fa4672d935447db837b38R77) anyway, this simply ensures the committer _also_ has a dedicated thread.\r\n",
        "createdAt" : "2020-08-10T07:52:26Z",
        "updatedAt" : "2020-08-10T07:52:27Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "18d594e5fd16fa8e21875d091137dd6808a8611b",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +119,123 @@        committerExecutionContext <- ResourceOwner\n          .forExecutorService(() =>\n            ExecutionContext.fromExecutorService(Executors.newSingleThreadExecutor()))\n          .acquire()\n      } yield"
  },
  {
    "id" : "5889f5d5-c341-4740-83d5-ee7a0b04d77d",
    "prId" : 4984,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4984",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b6d93bf-7a69-4593-bb17-26bf183760e0",
        "parentId" : null,
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "Can't it never be Unhealthy? If it can be then I'd leave the TODO.",
        "createdAt" : "2020-03-13T15:54:08Z",
        "updatedAt" : "2020-03-16T14:56:06Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "41bd589a-5a69-49f0-b769-fe6cdfac42e5",
        "parentId" : "2b6d93bf-7a69-4593-bb17-26bf183760e0",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Such TODOs should be tracked in an issue tracker. I.e., we need to introduce health checking for SQL-based ledgers which obviously depends on the backing server implementation.",
        "createdAt" : "2020-03-13T16:22:42Z",
        "updatedAt" : "2020-03-16T14:56:06Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "5770caaa-c4c0-467d-814b-884817ebe33c",
        "parentId" : "2b6d93bf-7a69-4593-bb17-26bf183760e0",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "@miklos-da Still, I don't think this TODO removal belongs here; it would be better to have a separate PR that removes all health-related TODOs, after creating the tracking issue so we don't forget.",
        "createdAt" : "2020-03-13T16:32:10Z",
        "updatedAt" : "2020-03-16T14:56:06Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "54184f2b-e584-4fa2-96b1-2b3681f6d601",
        "parentId" : "2b6d93bf-7a69-4593-bb17-26bf183760e0",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "@gerolf-da Do you want to create an issue to track this, please?",
        "createdAt" : "2020-03-13T18:39:17Z",
        "updatedAt" : "2020-03-16T14:56:06Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "8dbeb48a-e47b-416c-a6c5-a284a594ab9c",
        "parentId" : "2b6d93bf-7a69-4593-bb17-26bf183760e0",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Already exists: #4224",
        "createdAt" : "2020-03-16T08:27:43Z",
        "updatedAt" : "2020-03-16T14:56:06Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "d67d3a4f-c0be-4d8c-b74f-9edecc4bae05",
        "parentId" : "2b6d93bf-7a69-4593-bb17-26bf183760e0",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I think it's fine to remove this; didn't have to be in this PR but there's no harm.",
        "createdAt" : "2020-03-16T08:28:03Z",
        "updatedAt" : "2020-03-16T14:56:06Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "e0957eb7-f18b-451f-8227-33d2e474822a",
        "parentId" : "2b6d93bf-7a69-4593-bb17-26bf183760e0",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Thanks for the confirmation, @SamirTalwar-DA ",
        "createdAt" : "2020-03-16T09:39:33Z",
        "updatedAt" : "2020-03-16T14:56:06Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "8049c9ebb4015c70e4b3db0344c1e0bdf85699ec",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +57,61 @@  )\n\n  override def currentHealth(): HealthStatus = Healthy\n\n  override def events(offset: Option[Offset]): Source[LedgerEntry, NotUsed] ="
  },
  {
    "id" : "207873f6-f578-4d48-99c1-f62794f04235",
    "prId" : 4953,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7e972f2-4a05-4bd9-8fcb-db56c64c303d",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Why not use `.futureSource` and wrap `queries.selectFromLog(start, end)` in a `Source` with `.map(Source _)`?",
        "createdAt" : "2020-03-17T13:37:01Z",
        "updatedAt" : "2020-03-17T19:46:55Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "4a3ec871-947f-412e-87a6-9ab88ce020c1",
        "parentId" : "b7e972f2-4a05-4bd9-8fcb-db56c64c303d",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "My mental mostly is mostly around initializing the stream and afterwards manipulating it in the way it's necessary. In this case it doesn't matter much I guess. Other than we then probably should use `DirectExecutionContext` to avoid having a thread context switch for simply turning `Seq[_]` to `Source[_]`.",
        "createdAt" : "2020-03-17T16:38:10Z",
        "updatedAt" : "2020-03-17T19:46:55Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "d579b125-725d-4d25-895c-2c412084f3a2",
        "parentId" : "b7e972f2-4a05-4bd9-8fcb-db56c64c303d",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Eh, leave it for now, and I'll see if I can get rid of the futures entirely at a later point. They're kind of pointless.",
        "createdAt" : "2020-03-17T16:40:47Z",
        "updatedAt" : "2020-03-17T19:46:55Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9c3ccf491dcebc26c083911d9714d2fa5d032f",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +58,62 @@        RangeSource((start, end) => {\n          Source\n            .future(database\n              .inReadTransaction(s\"Querying events ]$start, $end] from log\") { queries =>\n                Future.fromTry(queries.selectFromLog(start, end))"
  },
  {
    "id" : "eac6f53d-a7a4-40b4-a5c8-305f3ea445c2",
    "prId" : 4177,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80d071d8-f90c-4b0a-a6fe-689a6049a3bc",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Always using `StartIndex` for `headAtInitialization` will break when starting the ledger with a non-empty non-in-memory database, but it's probably good enough for now.",
        "createdAt" : "2020-01-23T12:51:21Z",
        "updatedAt" : "2020-01-23T13:59:44Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "976cc8c0-e608-409a-a4a9-fb5bfc9f7b17",
        "parentId" : "80d071d8-f90c-4b0a-a6fe-689a6049a3bc",
        "authorId" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "body" : "Oh, good point, this'll be me not understanding the API correctly. Will fix in a different PR.",
        "createdAt" : "2020-01-23T13:57:01Z",
        "updatedAt" : "2020-01-23T13:59:44Z",
        "lastEditedBy" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "tags" : [
        ]
      },
      {
        "id" : "79de8b87-8efe-41c6-b348-b2e7b7ee9c9c",
        "parentId" : "80d071d8-f90c-4b0a-a6fe-689a6049a3bc",
        "authorId" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "body" : "I think it'd be good to have a conformance test that somehow restarts the ledger and makes sure everything is A-OK.",
        "createdAt" : "2020-01-23T13:58:25Z",
        "updatedAt" : "2020-01-23T13:59:44Z",
        "lastEditedBy" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "tags" : [
        ]
      },
      {
        "id" : "a0674442-5446-4d61-9fca-94e09070d91f",
        "parentId" : "80d071d8-f90c-4b0a-a6fe-689a6049a3bc",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "That's not a conformance/ledger api test though, because we cannot remotely restart the ledger. But +1 on having such a test specifically for the KV SQL Ledger.",
        "createdAt" : "2020-01-23T15:54:06Z",
        "updatedAt" : "2020-01-23T15:54:07Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "c0b59a7e-da04-4e98-ad1a-d373118ce9d5",
        "parentId" : "80d071d8-f90c-4b0a-a6fe-689a6049a3bc",
        "authorId" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "body" : "The conformance test Bazel task knows how to start and stop the ledger, and therefore how to restart it. :-)",
        "createdAt" : "2020-01-23T15:58:45Z",
        "updatedAt" : "2020-01-23T15:58:46Z",
        "lastEditedBy" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8a324dd393a841e950e02d5e3e659caa3a9a9d4",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +223,227 @@            \"sql-participant-state\",\n            zeroIndex = StartIndex,\n            headAtInitialization = StartIndex,\n        ))\n      database <- Database.owner(jdbcUrl)"
  },
  {
    "id" : "e3795d09-fe0e-4149-a1f0-c8f062a39c44",
    "prId" : 4155,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4155",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bdde745-0640-478b-9afa-748ae797a250",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Excellent solution! :+1: ",
        "createdAt" : "2020-01-22T14:22:37Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d414ebd72f813c239463a48e245fc2e9fd9c0c8",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +79,83 @@        offset.getOrElse(FirstOffset).components.head,\n        RangeSource((start, end) => {\n          val result = inDatabaseReadTransaction(s\"Querying events [$start, $end[ from log\") {\n            implicit connection =>\n              queries.selectFromLog(start, end)"
  },
  {
    "id" : "d565907c-4ec4-4343-ba65-4e0b29b26b78",
    "prId" : 3940,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a331294d-ccb9-4725-9a30-e8815c18525f",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "@dajmaki: should the `participantId` here not rather come from the submission itself? Especially if the committing process is a remote process that serves multiple participants.\r\nAnyway, it's not a problem right now, just wondering whether I am missing something.",
        "createdAt" : "2020-01-16T09:52:34Z",
        "updatedAt" : "2020-01-16T09:52:48Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "54297f1691f54ac9cff06e5a3d56297e6e32b48b",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +96,100 @@          LedgerReader.DefaultConfiguration,\n          submission,\n          participantId,\n          stateInputs,\n        )"
  }
]