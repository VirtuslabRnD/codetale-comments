[
  {
    "id" : "eae54264-349c-4188-bebf-0b0a50f77aba",
    "prId" : 4755,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4755",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10e55906-e8e0-4d96-8240-f23fba68a362",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "This immediately tries to acquire the lock and blocks the current thread. Is this the intention?",
        "createdAt" : "2020-02-28T16:54:56Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "8a7202ae-2828-4ebf-ba46-167cb9a29b3a",
        "parentId" : "10e55906-e8e0-4d96-8240-f23fba68a362",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Yes. If we acquired the lock afterwards, what would be the point?\r\n\r\nAFAIK, this has exactly the same semantics as:\r\n\r\n```\r\n    Future.successful(lockCurrentState.acquire())\r\n      .flatMap(_ => action(log, state))\r\n      .andThen { case _ => lockCurrentState.release() }",
        "createdAt" : "2020-03-02T13:41:28Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "fb2fb633-8c55-48bf-9ccf-a068cd908ab1",
        "parentId" : "10e55906-e8e0-4d96-8240-f23fba68a362",
        "authorId" : null,
        "body" : "Would it make sense to do this inside a `Future { }` block so that acquiring the lock happens in the right execution context?",
        "createdAt" : "2020-03-02T15:01:15Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "ef589d15-305b-4f3c-8870-0e139f7ad48f",
        "parentId" : "10e55906-e8e0-4d96-8240-f23fba68a362",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "That's fine, just wanted to check if you are good with immediately blocking the current thread when you call `withFutureWriteLock`.\r\nOf course, didn't want to question whether you need to lock before or after `action` (edited comment).",
        "createdAt" : "2020-03-02T15:01:46Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "924f17dc-ede4-46d0-b249-549efd9edebe",
        "parentId" : "10e55906-e8e0-4d96-8240-f23fba68a362",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Doesn't really matter; this is not a lock that's bound to a thread, it's a simple semaphore which can be acquired and released from anywhere. The developer is responsible for ensuring that it's not released unless it's acquired.\r\n\r\n@miklos-da, you wrote this code, I just moved it. ðŸ˜‰ ",
        "createdAt" : "2020-03-02T15:03:34Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d36fdaa30a004657bd518f427ba4d9695681aa0",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@      implicit executionContext: ExecutionContext\n  ): Future[A] = {\n    lockCurrentState.acquire()\n    action(log, state)\n      .andThen {"
  }
]