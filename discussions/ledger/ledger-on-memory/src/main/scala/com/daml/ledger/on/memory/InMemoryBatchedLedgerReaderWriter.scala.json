[
  {
    "id" : "e2be3dcb-4c81-4d0b-bd3c-2ccfa83e043f",
    "prId" : 6111,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6111",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9def5c2b-e624-4bef-b715-cea1c5c817bb",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Win!",
        "createdAt" : "2020-05-27T09:29:24Z",
        "updatedAt" : "2020-05-28T08:28:21Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "2a4cebb9-9b57-4bb7-81c9-049de6eadb9e",
        "parentId" : "9def5c2b-e624-4bef-b715-cea1c5c817bb",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : ": )",
        "createdAt" : "2020-05-27T10:12:36Z",
        "updatedAt" : "2020-05-28T08:28:21Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "4eaa7219a57e7cae32f14958b2c32423ade3c9d3",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +45,49 @@      .inTransaction { ledgerStateOperations =>\n        committer\n          .commit(correlationId, envelope, participantId, ledgerStateOperations)\n      }\n      .andThen {"
  },
  {
    "id" : "35fb2d70-afde-4195-96df-a7ae0307749a",
    "prId" : 6111,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6111",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d84e19b6-630c-495f-b95f-8ff920b82d9b",
        "parentId" : null,
        "authorId" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "body" : "Am I right to assume that the InMemoryBatchedLedgerReaderWriter is in fact a generic Reader/Writer because it still needs to be wrapped in BatchedSubmissionValidator here:\r\n```\r\nBatchedSubmissionValidatorFactory.batchingLedgerWriterFrom(\r\n            batchingLedgerWriterConfig,\r\n            readerWriter)\r\n```\r\nIn that case, would it not be better to drop `Batched` from its name?",
        "createdAt" : "2020-05-27T09:59:57Z",
        "updatedAt" : "2020-05-28T08:28:21Z",
        "lastEditedBy" : "53efca31-cf56-4f70-be8f-a3714c600eb6",
        "tags" : [
        ]
      },
      {
        "id" : "dbc3b480-52d4-40ed-ab1d-a9ba95358556",
        "parentId" : "d84e19b6-630c-495f-b95f-8ff920b82d9b",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Yes, as I wrote in the description I'll do that in a separate PR (this one only deletes the old classes).",
        "createdAt" : "2020-05-27T10:23:03Z",
        "updatedAt" : "2020-05-28T08:28:21Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "4eaa7219a57e7cae32f14958b2c32423ade3c9d3",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +131,135 @@          validator,\n          stateValueCache)\n      val readerWriter =\n        new InMemoryBatchedLedgerReaderWriter(\n          participantId,"
  },
  {
    "id" : "97336e8d-4396-41b7-9fe7-a947f8dc83d5",
    "prId" : 6004,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6004",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f007e786-0238-4fc5-8ce5-15f92d5438cf",
        "parentId" : null,
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "`now()` will be called immediately but the actual validation will be scheduled at some later point in time. Shouldn't `validateAndCommit` call `now()` instead?",
        "createdAt" : "2020-05-20T15:36:51Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "58cbad56-5f75-42e0-a230-e56a46decad4",
        "parentId" : "f007e786-0238-4fc5-8ce5-15f92d5438cf",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "We have to use the pre-determined record time during validation (take a look at `SubmissionValidator`'s signatures). There may be a minimal difference vs. calling `now()` in the validator itself, however, the skews allowed on the ledger should be able to cushion that.",
        "createdAt" : "2020-05-25T09:42:25Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5039a2c00da681659f3cc8423f9ddfc9d993996",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +50,54 @@          .readerAndCommitStrategyFrom(ledgerStateOperations, keySerializationStrategy)\n        validator\n          .validateAndCommit(envelope, correlationId, now(), participantId, reader, commitStrategy)\n          .transformWith {\n            case Success(_) =>"
  }
]