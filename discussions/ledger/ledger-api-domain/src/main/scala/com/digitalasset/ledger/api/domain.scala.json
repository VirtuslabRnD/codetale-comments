[
  {
    "id" : "5fbc3e02-3977-490a-84e7-5be93dda0ad2",
    "prId" : 10153,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10153",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5318bf6-1904-4ddd-ac72-902866d83063",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "```scala\r\n    EventId subst implicitly[Ordering[Ref.LedgerString]]\r\n```",
        "createdAt" : "2021-06-30T16:09:49Z",
        "updatedAt" : "2021-06-30T16:10:14Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "767701a9-edd7-4a40-9b04-75a4f052d51c",
        "parentId" : "a5318bf6-1904-4ddd-ac72-902866d83063",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I just added the type annotation, but I agree that that is very cool.",
        "createdAt" : "2021-06-30T17:23:40Z",
        "updatedAt" : "2021-06-30T17:23:40Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "94276fa01ff6d98ae216ae3d634515a441dff123",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +260,264 @@  val EventId: Tag.TagOf[EventIdTag] = Tag.of[EventIdTag]\n  implicit val eventIdOrdering: Ordering[EventId] =\n    Ordering.by[EventId, Ref.LedgerString](_.unwrap)\n\n  sealed trait LedgerIdTag"
  },
  {
    "id" : "de7da930-21dd-48f7-a402-7b48cd18edc0",
    "prId" : 4343,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc58bcbb-a2f0-4de4-8e59-b4148f8e6172",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Can't we keep this `TransactionId` type and get rid of the rest?",
        "createdAt" : "2020-02-03T12:38:12Z",
        "updatedAt" : "2020-02-03T12:38:27Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "c876b919-71bc-4d4d-8fb4-bb4dd725a653",
        "parentId" : "cc58bcbb-a2f0-4de4-8e59-b4148f8e6172",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "It is not clear to me how to proceed, as I do not really know who (and how) is using the types defined in the following package:\r\n- `com.digitalasset.ledger`\r\n- `com.digitalasset.ledger.api.domain`\r\n- `com.daml.ledger.participant.state.v1`\r\n\r\n\r\nFurthermore to be consistent, we should also handle in similar way the types  `ParticipantId`,  `CommandId`, `WorkflowId`, `ApplicationId`. \r\n\r\nI think this exceeds the scope of this PR.",
        "createdAt" : "2020-02-03T13:04:29Z",
        "updatedAt" : "2020-02-03T13:05:36Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "4607a9c3-01fa-4b88-90fa-00ca475d1f6e",
        "parentId" : "cc58bcbb-a2f0-4de4-8e59-b4148f8e6172",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "We use the types in `com.daml.ledger.participant.state.v1` for our `ReadService` and `WriteService` interfaces.",
        "createdAt" : "2020-02-03T13:21:36Z",
        "updatedAt" : "2020-02-03T13:21:36Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "e507c710c6062351de70f8c3ca50553fcd8d2bdb",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +237,241 @@\n  type TransactionId = Ref.LedgerString @@ TransactionIdTag\n  val TransactionId: Tag.TagOf[TransactionIdTag] = Tag.of[TransactionIdTag]\n\n  sealed trait ContractIdTag"
  },
  {
    "id" : "c2aa805f-aaf6-4857-a2da-5b0e41ba0705",
    "prId" : 10439,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10439#pullrequestreview-717892698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7aefd18-986e-4384-ad1b-9aab781eb25f",
        "parentId" : null,
        "authorId" : "fc4f1c1d-307b-4271-8f75-981b53300755",
        "body" : "I do not completely understand the code here yet but I have the feeling this could be quite useful for the json api too :thinking: ",
        "createdAt" : "2021-07-29T09:15:08Z",
        "updatedAt" : "2021-07-29T09:15:08Z",
        "lastEditedBy" : "fc4f1c1d-307b-4271-8f75-981b53300755",
        "tags" : [
        ]
      },
      {
        "id" : "4f467960-c4d4-42b7-8e95-3e9f0531c581",
        "parentId" : "a7aefd18-986e-4384-ad1b-9aab781eb25f",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "It says that if we have a type `T`, a type `Tag`, and an instance of `ToLoggingValue[T]`, then we also have an instance of `ToLoggingValue[T @@ Tag]` (which just discards the tag).\r\n\r\nFor example, if we have a value of type `Ref.TransactionId @@ TransactionIdTag`, we can convert it to a logging value, because we know how to convert `Ref.TransactionId` to a logging value.\r\n\r\nHappy to discuss further offline if you'd like to understand more.",
        "createdAt" : "2021-07-29T09:46:53Z",
        "updatedAt" : "2021-07-29T09:46:53Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "455213f1670e41573a6e10503203218d5b428ddd",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +363,367 @@    implicit def `tagged value to LoggingValue`[T: ToLoggingValue, Tag]: ToLoggingValue[T @@ Tag] =\n      value => value.unwrap\n  }\n}"
  }
]