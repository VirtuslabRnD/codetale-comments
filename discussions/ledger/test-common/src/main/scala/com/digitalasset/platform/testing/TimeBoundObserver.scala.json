[
  {
    "id" : "05b638f2-6e49-4319-a430-d9f2be96ea6d",
    "prId" : 7984,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7984",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d9503eb-0b91-4f5c-bb96-e532e591b8e1",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "What happens if the delegate cancels as part of its `onCompleted`?",
        "createdAt" : "2020-11-17T16:11:11Z",
        "updatedAt" : "2020-11-17T16:12:43Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "6a28cc05-b3a4-4439-b429-bc71d277acc4",
        "parentId" : "5d9503eb-0b91-4f5c-bb96-e532e591b8e1",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Then it'll be cancelled twice, which I don't think is really an issue. GRPC is quite lenient with repeated calls like this. (As any asynchronous protocol should be; you can never guarantee that you won't have a race somewhere.)\r\n\r\nThat said, I think I have made sure that `onCompleted` never cancels.",
        "createdAt" : "2020-11-17T16:41:44Z",
        "updatedAt" : "2020-11-17T16:41:45Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "509834fba8da5a2daa535f85ca520428d2f99fee",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +17,21 @@\n  Delayed.by(duration)(synchronized {\n    onCompleted()\n    Context.current().withCancellation().cancel(null)\n  })"
  },
  {
    "id" : "bc98e8ef-0063-4ec6-98a1-21f234e30967",
    "prId" : 7975,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30d258c2-dcff-4ae7-b1e7-948b01a06f53",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "This could possibly fire concurrently with the timer.\r\n\r\n1. Is `onCompleted` reentrant?\r\n2. Would it make sense to gate both `onNext` and `onCompleted` on a shared lock (e.g. `promise.synchronized`) and check that the promise is not completed when `onNext` enters the critical section?",
        "createdAt" : "2020-11-17T09:14:26Z",
        "updatedAt" : "2020-11-17T09:49:39Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "3ba76bbe-ea79-4b06-8f54-11ac7aaf1e66",
        "parentId" : "30d258c2-dcff-4ae7-b1e7-948b01a06f53",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Shouldn't be a problem; `onCompleted` will work idempotently. This logic was copied from `SizeBoundObserver`.\r\n\r\nI want to refactor these observers so they're decorators which can be layered on top of each other, but it seems like a big change, so I'll do it separately after this is in.",
        "createdAt" : "2020-11-17T09:38:30Z",
        "updatedAt" : "2020-11-17T09:49:39Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "eca2c04e-0bc5-44b2-99e5-68e214a017e4",
        "parentId" : "30d258c2-dcff-4ae7-b1e7-948b01a06f53",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Addressed in https://github.com/digital-asset/daml/pull/7984.",
        "createdAt" : "2020-11-17T14:06:48Z",
        "updatedAt" : "2020-11-17T14:06:49Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "d468daf0e744ccb8c591f83cb6b285bf22fd002c",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +27,31 @@    size += 1\n    if (maximumResults.exists(size >= _)) {\n      onCompleted()\n    }\n  }"
  },
  {
    "id" : "822edd9e-8462-4cb5-987d-f971d01a2ce4",
    "prId" : 7975,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44e44cdf-18a4-4724-a336-22f18607afd8",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "`buffer` is a vector builder, it should be fine to just use `buffer.size` instead of keep track of it. It doesn't look like this can cause any problem, but I can see how keeping track of the thing separately can cause weird concurrency bugs in future revisions.",
        "createdAt" : "2020-11-17T09:16:35Z",
        "updatedAt" : "2020-11-17T09:49:39Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "d09c3c43-5e2c-4395-9766-8de4936e8ba0",
        "parentId" : "44e44cdf-18a4-4724-a336-22f18607afd8",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Unfortunately, `buffer.size` is not a thing. The same logic is in `SizeBoundObserver`.",
        "createdAt" : "2020-11-17T09:36:38Z",
        "updatedAt" : "2020-11-17T09:49:39Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "d468daf0e744ccb8c591f83cb6b285bf22fd002c",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +25,29 @@  override def onNext(value: T): Unit = {\n    buffer += value\n    size += 1\n    if (maximumResults.exists(size >= _)) {\n      onCompleted()"
  },
  {
    "id" : "cdfe18ff-7036-4ce5-8483-3887dd8fb30b",
    "prId" : 7975,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a090bd7-9a80-4673-94a8-e41ce10d01bc",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Not necessary, but I would recommend adding a secondary constructor that takes an `Int` and wraps it into an option (pure UX). ",
        "createdAt" : "2020-11-17T09:20:59Z",
        "updatedAt" : "2020-11-17T09:49:39Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "ee7d5caa-cdcb-48f0-8d04-8e4b234cdbbd",
        "parentId" : "1a090bd7-9a80-4673-94a8-e41ce10d01bc",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "If we use this more than once, I'd be happy to add it.",
        "createdAt" : "2020-11-17T09:36:48Z",
        "updatedAt" : "2020-11-17T09:49:39Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "d468daf0e744ccb8c591f83cb6b285bf22fd002c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +11,15 @@import scala.concurrent.{ExecutionContext, Future, Promise}\n\nfinal class TimeBoundObserver[T](duration: FiniteDuration, maximumResults: Option[Int] = None)(\n    implicit executionContext: ExecutionContext)\n    extends StreamObserver[T] {"
  },
  {
    "id" : "7d1305f3-122e-4136-97c4-9294c8427041",
    "prId" : 7051,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf98b4ab-8fe9-421b-bb77-65a80f8405d2",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Much prettier, thanks!",
        "createdAt" : "2020-08-06T17:54:46Z",
        "updatedAt" : "2020-08-06T18:05:47Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d3af0a63186840ccb4158b6bec2f780692fcc17",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +33,37 @@    promise.trySuccess(buffer.result())\n    Context.current().withCancellation().cancel(null)\n    ()\n  }\n}"
  }
]