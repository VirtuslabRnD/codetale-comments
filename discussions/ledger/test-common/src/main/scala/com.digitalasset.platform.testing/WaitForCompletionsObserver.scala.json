[
  {
    "id" : "b9c39289-9e3c-43f5-ab17-8b1a7b6d6196",
    "prId" : 3844,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "370f42bb-f8d8-4c35-ae26-543e846ee11f",
        "parentId" : null,
        "authorId" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "body" : "This seems to be basically the same as `SizeBoundObserver`, with the only real difference being that this one fails when `onCompleted` is called, and `SizeBoundObserver` succeeds. Can you make that one do what you want instead?",
        "createdAt" : "2019-12-13T15:52:52Z",
        "updatedAt" : "2019-12-13T15:55:07Z",
        "lastEditedBy" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "tags" : [
        ]
      },
      {
        "id" : "338ae7c2-2457-4fd9-b532-6b35569acc67",
        "parentId" : "370f42bb-f8d8-4c35-ae26-543e846ee11f",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Not really, this is specialized to count the number of completions within each response, not to count each response as one.",
        "createdAt" : "2019-12-13T15:58:03Z",
        "updatedAt" : "2019-12-13T15:58:03Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1493b21c23cbfff4e88cad63f00f68284ec1f4a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@import scala.concurrent.{Future, Promise}\n\nobject WaitForCompletionsObserver {\n\n  def apply(n: Int)(attach: StreamObserver[CompletionStreamResponse] => Unit): Future[Unit] = {"
  }
]