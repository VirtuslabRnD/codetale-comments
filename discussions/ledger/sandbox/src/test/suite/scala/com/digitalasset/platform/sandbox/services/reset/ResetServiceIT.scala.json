[
  {
    "id" : "0549f20c-a984-4e3c-a4ad-7948b38d8f6f",
    "prId" : 4447,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e69fcdd4-f5b4-4b01-abcd-24e453ba0104",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "To the best of my understanding, this simply suggests the runtime to run garbage collection but it doesn't guarantee it will happen. Can this introduce flakiness in the test?",
        "createdAt" : "2020-02-10T10:01:35Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "9b3b05e2-dccb-4765-919b-4ca2b8a462ed",
        "parentId" : "e69fcdd4-f5b4-4b01-abcd-24e453ba0104",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Yes, but it seems our VM is happy with the \"suggestion\". If this fails when we upgrade Java, we can disable it and find another way to test it then.",
        "createdAt" : "2020-02-10T10:11:39Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "84e6c618d4689590c8f46682a40a528bbafe76f7",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +180,184 @@          _ <- reset(lid)\n        } yield {\n          System.gc()\n          state.get should be(None)\n        }"
  },
  {
    "id" : "41f35456-1761-4467-ba0a-b1a17f8eda27",
    "prId" : 3844,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e82d04f5-72d7-4540-a029-e5be04bbe36b",
        "parentId" : null,
        "authorId" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "body" : "Why not use ScalaTest's `eventually`?",
        "createdAt" : "2019-12-13T15:50:13Z",
        "updatedAt" : "2019-12-13T15:55:07Z",
        "lastEditedBy" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "tags" : [
        ]
      },
      {
        "id" : "ba3d29c8-f476-4aba-b208-78630afdf56d",
        "parentId" : "e82d04f5-72d7-4540-a029-e5be04bbe36b",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I'm not sure of the reason why but everything fails if I use that. I'm not sure of the semantics there.",
        "createdAt" : "2019-12-13T16:04:07Z",
        "updatedAt" : "2019-12-13T16:04:07Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1493b21c23cbfff4e88cad63f00f68284ec1f4a",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@    with TestCommands {\n\n  private val eventually = RetryStrategy.exponentialBackoff(10, 10.millis)\n\n  override def timeLimit: Span = scaled(30.seconds)"
  },
  {
    "id" : "360cb9d7-9266-4fab-9f8a-4265cb1c1015",
    "prId" : 3844,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1155119-145f-44ee-bb8c-bb9b0d981f9d",
        "parentId" : null,
        "authorId" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "body" : "I think I'd prefer it if we could use `for` comprehensions with assertions.",
        "createdAt" : "2019-12-13T15:53:25Z",
        "updatedAt" : "2019-12-13T15:55:07Z",
        "lastEditedBy" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1493b21c23cbfff4e88cad63f00f68284ec1f4a",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +132,136 @@        Future\n          .sequence(Iterator.iterate(getLedgerId())(_.flatMap(reset)).take(20).toVector)\n          .map(ids => ids.distinct should have size 20L)\n      }\n"
  },
  {
    "id" : "a9efb5fe-034c-49e0-ad6c-e793fa0cd12b",
    "prId" : 3844,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66bd16dd-8b44-4a57-89a3-2b39bea4065e",
        "parentId" : null,
        "authorId" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "body" : "Even when the assertion is just a `succeed`, I think I'd still prefer a `for`, but I'm less fussed about this one.",
        "createdAt" : "2019-12-13T15:53:50Z",
        "updatedAt" : "2019-12-13T15:55:07Z",
        "lastEditedBy" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "tags" : [
        ]
      },
      {
        "id" : "1261b4ac-e135-4fe7-852b-7568346353c7",
        "parentId" : "66bd16dd-8b44-4a57-89a3-2b39bea4065e",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "There are different opinions in the team (@gerolf-da usually prefers `map` when the call is very simple). If you don't have a strong argument against this one I'd keep it as it is right now, mostly out of sheer inertia. Ideally I would have wanted to use `all(measurements) should be <= threshold` but for some reason it doesn't compile.",
        "createdAt" : "2019-12-13T16:00:02Z",
        "updatedAt" : "2019-12-13T16:00:02Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1493b21c23cbfff4e88cad63f00f68284ec1f4a",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +157,161 @@              .take(numberOfAttempts)\n          )\n          .map(_ => succeed)\n      }\n"
  }
]