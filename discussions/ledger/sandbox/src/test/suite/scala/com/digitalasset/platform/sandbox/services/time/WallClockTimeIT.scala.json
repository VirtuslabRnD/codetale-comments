[
  {
    "id" : "cbeafb5b-ff78-495c-9ad0-60dcbb01a335",
    "prId" : 3840,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3840",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80674d00-af9f-4fad-95c7-96d456a99375",
        "parentId" : null,
        "authorId" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "body" : "Why not `PartialFunction[Throwable, Unit]`?",
        "createdAt" : "2019-12-13T10:43:00Z",
        "updatedAt" : "2019-12-13T10:43:00Z",
        "lastEditedBy" : "a19260b0-5e05-4d6e-8307-335e8dc80e5b",
        "tags" : [
        ]
      },
      {
        "id" : "88727e43-c18e-4f2d-9ec9-ab5796c22191",
        "parentId" : "80674d00-af9f-4fad-95c7-96d456a99375",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I tried that initially but unfortunately `matchResult` specifically asks for a ~`Receive`~ `PartialFunction[Any, Unit]` and changing this to `PartialFunction[Throwable, Unit]` makes it not compile. It's a bit weird now that I think about it, since I believe `PartialFunction` to be contravariant in the input type... :thinking: ",
        "createdAt" : "2019-12-13T10:53:21Z",
        "updatedAt" : "2019-12-13T10:53:21Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "433e7c49314321cc7bade9e722065506b397a3f7",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@\n  @SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n  private val unimplemented: PartialFunction[Any, Unit] = {\n    case GrpcException.UNIMPLEMENTED() => ()\n  }"
  }
]