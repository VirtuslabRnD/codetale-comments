[
  {
    "id" : "c6aaba8a-8f7e-4dc3-bb72-89244269cfad",
    "prId" : 6342,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56503b30-f470-4499-be25-111dfc51c1f4",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "I would expect we test 3 scenarios:\r\n\r\n1. No application ID in the token (should succeed)\r\n2. Correct application ID in the token (should succeed)\r\n3. Wrong application ID in the token (should fail)\r\n\r\nIt looks to me like we only test 1 and 3, is that correct?\r\n\r\n",
        "createdAt" : "2020-06-15T07:56:48Z",
        "updatedAt" : "2020-06-15T09:08:19Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "250a7fe3-dc75-47f4-a8d6-267b16232a14",
        "parentId" : "56503b30-f470-4499-be25-111dfc51c1f4",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Good catch, thanks.",
        "createdAt" : "2020-06-15T09:08:14Z",
        "updatedAt" : "2020-06-15T09:08:19Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "14970c2b-7a4e-4cfe-a097-7eee005971d7",
        "parentId" : "56503b30-f470-4499-be25-111dfc51c1f4",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6342/commits/37e3b6c4311f180c3cce2813e7b2af5bc50501fc",
        "createdAt" : "2020-06-15T09:09:20Z",
        "updatedAt" : "2020-06-15T09:09:21Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "37e3b6c4311f180c3cce2813e7b2af5bc50501fc",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +38,42 @@    expectSuccess(serviceCallWithToken(canActAsMainActorActualApplicationId))\n  }\n  it should \"deny calls with a random application ID\" in {\n    expectPermissionDenied(serviceCallWithToken(canActAsMainActorRandomApplicationId))\n  }"
  },
  {
    "id" : "b34c6815-7e24-4a84-884a-67a58fb68755",
    "prId" : 3598,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0019f3c4-9619-4a21-a286-6d96505e35e8",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "I'm not sure that it's very clear what an \"implicitly non-expired\" token is. How about `allow calls with a read/write token without an expiration date`?",
        "createdAt" : "2019-11-26T07:47:01Z",
        "updatedAt" : "2019-11-26T08:32:31Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "483c57e8-49bb-4ffb-9805-164a71ea7489",
        "parentId" : "0019f3c4-9619-4a21-a286-6d96505e35e8",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I'll make a separate PR to fix this, thanks! :slightly_smiling_face: ",
        "createdAt" : "2019-11-26T09:13:31Z",
        "updatedAt" : "2019-11-26T09:13:31Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "19f4e8bc-794a-4adb-9a97-a2644db3e807",
        "parentId" : "0019f3c4-9619-4a21-a286-6d96505e35e8",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Addressed here https://github.com/digital-asset/daml/pull/3629",
        "createdAt" : "2019-11-26T09:25:41Z",
        "updatedAt" : "2019-11-26T09:25:42Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0861fc99c196c4f679d95440b2795fcd3c2e404c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@    expectSuccess(serviceCallWithToken(canActAsMainActorExpiresTomorrow))\n  }\n  it should \"allow calls with implicitly non-expired read/write token\" in {\n    expectSuccess(serviceCallWithToken(canActAsMainActor))\n  }"
  }
]