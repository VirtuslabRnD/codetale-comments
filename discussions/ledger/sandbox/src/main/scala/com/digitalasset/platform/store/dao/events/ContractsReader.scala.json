[
  {
    "id" : "032db834-9dbb-48c8-bf45-0cf20400ae45",
    "prId" : 5946,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03a8cd08-3333-452b-95a7-d79d35f6f476",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "```suggestion\r\n            translationTimer = metrics.daml.index.db.lookupActiveContractDao.translationTimer,\r\n```",
        "createdAt" : "2020-05-13T07:24:38Z",
        "updatedAt" : "2020-05-13T14:44:33Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "d1ac5e08-5796-400b-93cb-520afa53c58b",
        "parentId" : "03a8cd08-3333-452b-95a7-d79d35f6f476",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I made the name generic to adapt to both sides, but when used I think it makes more time to keep the name specific.",
        "createdAt" : "2020-05-13T15:06:40Z",
        "updatedAt" : "2020-05-13T15:06:40Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e88f58ce119f393cede12d4bb759ad24582b1a06",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +51,55 @@            templateId = templateId,\n            createArgument = createArgument,\n            deserializationTimer = metrics.daml.index.db.lookupActiveContractDao.translationTimer,\n          )\n      })(executionContext)"
  },
  {
    "id" : "e9d43fcf-ac60-4fc5-b2de-b45d543d339e",
    "prId" : 5541,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ea344f9-6b01-491e-9c6e-e90b1870489d",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "So I was going to make the suggestion below, before I found out that `contractsTable` is actually a join. Could you help me understand the motivation for that instead of putting the join into this query string directly?\r\n```suggestion\r\n      SQL\"select #$contractsTable.contract_id, template_id, create_argument from #$contractsTable where contract_witness = $submitter and #$contractsTable.contract_id = $contractId\"\r\n```",
        "createdAt" : "2020-04-16T07:51:28Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "98d73712-2ea5-44b8-aefb-3c508b3e5d34",
        "parentId" : "2ea344f9-6b01-491e-9c6e-e90b1870489d",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "To make the query a bit shorter and not spell out the join twice.",
        "createdAt" : "2020-04-16T09:13:29Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "a1361609-133f-429b-9737-3c32aacdb41d",
        "parentId" : "2ea344f9-6b01-491e-9c6e-e90b1870489d",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Hm, I'm not sure the brevity is worth it tbh. I'd rather see a full page of query text rather than having to do mental dictionary lookups to the side.\r\nBut if this is the pattern we've been following so far (and I suspect it is), then let's continue with it.",
        "createdAt" : "2020-04-16T09:40:01Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "2034352017063fbc2c958c5a086273e66ed0ad47",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +31,35 @@  ): Future[Option[Contract]] =\n    dispatcher.executeSql(\"lookup_active_contract\") { implicit connection =>\n      SQL\"select participant_contracts.contract_id, template_id, create_argument from #$contractsTable where contract_witness = $submitter and participant_contracts.contract_id = $contractId\"\n        .as(contractRowParser.singleOpt)\n    }"
  },
  {
    "id" : "f7595318-9c0f-42f1-8e4d-0de1f82419a4",
    "prId" : 5541,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acc12e45-9058-4eb4-a36b-aa2b174d5177",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "I wasn't sure whether this was actually true and wanted to confirm that. unfortunately you won't like the result :sob:\r\n`agreement` is a function that can be invoked during interpretation:\r\n![image](https://user-images.githubusercontent.com/29121423/79431181-5c7c6900-7fca-11ea-9b17-017fcca0db50.png)\r\n",
        "createdAt" : "2020-04-16T08:10:26Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "37aea271-b3d2-429b-bcf0-5b5ad4c45256",
        "parentId" : "acc12e45-9058-4eb4-a36b-aa2b174d5177",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Then I'm a bit concerned that this didn't make any test fail.",
        "createdAt" : "2020-04-16T09:13:49Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "77a6a7e5-8e91-4ef6-8361-d807f4416677",
        "parentId" : "acc12e45-9058-4eb4-a36b-aa2b174d5177",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Good point. Looks like we don't have a test that uses the agreement text inside an exercise I suppose. Could you add one please?",
        "createdAt" : "2020-04-16T09:36:07Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "c0b0a2db-66cf-450d-8e82-12b9fd9e2517",
        "parentId" : "acc12e45-9058-4eb4-a36b-aa2b174d5177",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "I was wrong in my assessment. The `agreement` expression is reified in the DAML LF template definition, and calling `agreement` in a choice body re-evaluates that expression. There is no need to store the agreement text together with the contract instance for the purpose of command interpretation.",
        "createdAt" : "2020-04-17T11:20:28Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "2034352017063fbc2c958c5a086273e66ed0ad47",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +82,86 @@\n  // The contracts table _does not_ store agreement texts as they are\n  // unnecessary for interpretation and validation. The contracts returned\n  // from this table will _always_ have an empty agreement text.\n  private val contractRowParser: RowParser[Contract] ="
  },
  {
    "id" : "c39d5d0b-7110-4d7c-abce-a166fd1872ea",
    "prId" : 5541,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b38e303-2939-4fac-afc1-9eaf9b1b52ad",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "I hope the `binaryStream` won't bite us with H2 again.",
        "createdAt" : "2020-04-16T08:11:41Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "0bd5b4a2-be8e-48f1-bc3d-817765993533",
        "parentId" : "0b38e303-2939-4fac-afc1-9eaf9b1b52ad",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Rather than hoping, I'll convert this to a `byteArray`, thanks for raising this.",
        "createdAt" : "2020-04-16T09:14:27Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2034352017063fbc2c958c5a086273e66ed0ad47",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +85,89 @@  // from this table will _always_ have an empty agreement text.\n  private val contractRowParser: RowParser[Contract] =\n    str(\"contract_id\") ~ str(\"template_id\") ~ binaryStream(\"create_argument\") map {\n      case contractId ~ templateId ~ createArgument =>\n        Contract("
  }
]