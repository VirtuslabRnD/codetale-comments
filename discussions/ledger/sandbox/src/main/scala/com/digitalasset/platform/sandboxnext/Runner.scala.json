[
  {
    "id" : "f1e4c084-8b6a-4acd-b04e-a058cbef5adb",
    "prId" : 5728,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5728",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "902e97c8-d0cc-41ef-b65d-91572bd6e69e",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I think it'd be useful to add a test case to ensure that the packages are available and can be both listed and used after a reset.",
        "createdAt" : "2020-04-27T08:27:22Z",
        "updatedAt" : "2020-04-30T13:47:45Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "2eb6a2b5-97a8-4c89-a159-a7e3848507c7",
        "parentId" : "902e97c8-d0cc-41ef-b65d-91572bd6e69e",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Added a test case in b4d5a7f.",
        "createdAt" : "2020-04-29T11:26:26Z",
        "updatedAt" : "2020-04-30T13:47:45Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ee9cefa20fdce93a350b26379d23a1c3164e4fe",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +153,157 @@                      Future.sequence(config.damlPackages.map(uploadDar(_, writeService))))\n                    .map(_ => ())\n                }\n                _ <- new StandaloneIndexerServer(\n                  readService = readService,"
  },
  {
    "id" : "f3b9c4d9-d555-4138-8c0e-c446acd7d3c7",
    "prId" : 4422,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d2fcf0f-f4d7-4609-8f9c-46042e2eddfe",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I'm not sure we need the logging context to wrap the whole thing. I would suggest you restrict the scope to where it's actually used. Can you check where this is needed? From a cursory look you can probably move it inside the `startParticipant` method (and avoid asking for an `implicit` one).",
        "createdAt" : "2020-02-06T12:39:00Z",
        "updatedAt" : "2020-02-06T14:21:29Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "b8222283-4401-4330-9df8-2d0c18544d80",
        "parentId" : "6d2fcf0f-f4d7-4609-8f9c-46042e2eddfe",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "That's where it was when I copied it from the KVUtils _Runner_, but it's also needed for the `SqlLedgerReaderWriter`.",
        "createdAt" : "2020-02-06T13:59:35Z",
        "updatedAt" : "2020-02-06T14:21:29Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3e584e59ae39b77a6088641e3c5a3287071b5ff",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +71,75 @@    }\n\n    newLoggingContext { implicit logCtx =>\n      for {\n        // Take ownership of the actor system and materializer so they're cleaned up properly."
  }
]