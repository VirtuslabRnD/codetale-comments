[
  {
    "id" : "58103e3f-618d-4be1-aecd-68921174e085",
    "prId" : 6103,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6103",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68206d86-e10d-484b-ae9a-14d2c25b208f",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I think that when this function is called, there should _always_ be a value here, so crashing would be appropriate. If we haven't initialized the ledger, the code should be calling `lookupInitialLedgerEnd` instead.\r\n\r\nWhat happens if you revert this? What breaks?",
        "createdAt" : "2020-05-26T10:59:00Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "bb06feb0-efae-49d4-acc7-9a763bedc354",
        "parentId" : "68206d86-e10d-484b-ae9a-14d2c25b208f",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "~Yes, that's correct, @SamirTalwar-DA.~\r\nThat's only correct, if we initialize the index DB with the \"fake\" offset. But since this PR avoids doing that, we need to return `Offset.begin`.",
        "createdAt" : "2020-05-26T11:08:24Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "5733df3b-80f2-4140-989e-b91ec8252d61",
        "parentId" : "68206d86-e10d-484b-ae9a-14d2c25b208f",
        "authorId" : "5db1abe1-51e8-45dd-b938-e1052b127444",
        "body" : "The previous behaviour was:\r\n1. If called prior to ledger initialisation - _crash_\r\n2. If called post initialisation but pre first ledger end update - _default to Offset.begin_\r\n3. If called post first ledger end update - _return most recently updated ledger_end_\r\n\r\nThis change means that the default provided in #2 above comes from the method as opposed to from the database column.\r\n\r\nAs many things could be happening asynchronously during startup I think it is safest to leave the default, or leave it someone more expert in the area to remove it ;-)",
        "createdAt" : "2020-05-26T11:13:53Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : "5db1abe1-51e8-45dd-b938-e1052b127444",
        "tags" : [
        ]
      }
    ],
    "commit" : "447bf07d48a08769e0ac5671843a250f435a0aed",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +117,121 @@    dbDispatcher.executeSql(metrics.daml.index.db.getLedgerEnd) { implicit conn =>\n      SQL_SELECT_LEDGER_END\n        .as(offset(\"ledger_end\").?.map(_.getOrElse(Offset.begin)).single)\n    }\n"
  },
  {
    "id" : "b1bdff66-3813-4203-b508-fb1ad9b9e385",
    "prId" : 6103,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6103",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97be88fc-ba07-4d41-8651-8496150ede17",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "```suggestion\r\n    \"update parameters set ledger_end = {LedgerEnd} where ledger_end is null or ledger_end < {LedgerEnd}\")\r\n```",
        "createdAt" : "2020-05-26T12:55:58Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "11b73004-9688-4463-9927-ab07b8555da0",
        "parentId" : "97be88fc-ba07-4d41-8651-8496150ede17",
        "authorId" : "5db1abe1-51e8-45dd-b938-e1052b127444",
        "body" : "as above",
        "createdAt" : "2020-05-26T16:35:55Z",
        "updatedAt" : "2020-05-26T16:35:56Z",
        "lastEditedBy" : "5db1abe1-51e8-45dd-b938-e1052b127444",
        "tags" : [
        ]
      }
    ],
    "commit" : "447bf07d48a08769e0ac5671843a250f435a0aed",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +142,146 @@  // is advancing it.\n  private val SQL_UPDATE_LEDGER_END = SQL(\n    \"update parameters set ledger_end = {LedgerEnd} where (ledger_end is null or ledger_end < {LedgerEnd})\")\n\n  private def updateLedgerEnd(ledgerEnd: Offset)(implicit conn: Connection): Unit = {"
  },
  {
    "id" : "ec903a8f-0266-4ac5-b53f-f1f031d8abc0",
    "prId" : 5983,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72024c7b-5450-40df-b9cb-dda9308508d1",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I think we're going to need to pull this out and share it around. Later though.",
        "createdAt" : "2020-05-14T15:37:20Z",
        "updatedAt" : "2020-05-14T16:26:38Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "9757bb57bd136b3cf70daf8c475f40f7e49bcb34",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +950,954 @@    for {\n      dbDispatcher <- DbDispatcher.owner(serverRole, jdbcUrl, maxConnections, metrics)\n      executor <- ResourceOwner.forExecutorService(() => Executors.newWorkStealingPool())\n    } yield\n      new JdbcLedgerDao("
  },
  {
    "id" : "54ffdfc5-9ff6-40d9-9bc4-1a1e19dad63b",
    "prId" : 5930,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4519c99a-3497-46e9-98ec-7579dcccaf38",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Can't you pull this preparation up too?",
        "createdAt" : "2020-05-11T16:36:42Z",
        "updatedAt" : "2020-05-11T22:23:10Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "2aeaae86-dce2-46f7-8c67-02179dc8d2ed",
        "parentId" : "4519c99a-3497-46e9-98ec-7579dcccaf38",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "We can evaluate this but for the time being I'd leave this here, it only affects Sandbox Classic and the scenario loader, which is not really performance sensitive. But in general I agree it would make sense.",
        "createdAt" : "2020-05-11T16:44:53Z",
        "updatedAt" : "2020-05-11T22:23:10Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "7b8f8d5d-58f8-42fb-8099-12a307062ffe",
        "parentId" : "4519c99a-3497-46e9-98ec-7579dcccaf38",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Sorry, I haven't given enough context: the problem is that we would need to add a non-trivial bit of code to handle this case specifically and I would prefer to keep this sub-optimal but without any additional infrastructure, unless we really see there is a use for it.",
        "createdAt" : "2020-05-11T16:52:40Z",
        "updatedAt" : "2020-05-11T22:23:10Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4f8c953c4ccd754c46e920876b4288839fa9bdb",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +547,551 @@                    transaction = tx.transaction.mapNodeId(splitOrThrow),\n                    divulgedContracts = Nil,\n                  )\n                  .write()\n                submitterInfo"
  },
  {
    "id" : "c2218fb5-8371-4811-b109-2160f4e63697",
    "prId" : 5706,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2e50ca5-aa8f-41c4-98a7-780649f602bf",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Maybe instead of `null` and `s` return `None` and `Some(s)` directly without using `.?`",
        "createdAt" : "2020-04-23T16:14:26Z",
        "updatedAt" : "2020-04-23T16:14:37Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "344a39d8-646b-48ee-8477-1b7dfa2a2d63",
        "parentId" : "d2e50ca5-aa8f-41c4-98a7-780649f602bf",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I think this was done so that both `null` and an empty string were evaluated to an empty value. Does it make sense?",
        "createdAt" : "2020-04-23T16:28:38Z",
        "updatedAt" : "2020-04-23T16:28:38Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d14449de39fc87d40ac96f7e69f906a20fc0157d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +217,221 @@      str(\"submission_id\") ~\n      str(\"participant_id\") ~\n      str(\"rejection_reason\").map(s => if (s.isEmpty) null else s).? ~\n      byteArray(\"configuration\"))\n      .map(flatten)"
  },
  {
    "id" : "29b76797-5a58-45d1-b0a7-b1f5a367a964",
    "prId" : 5393,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77ca6cf4-7b55-4389-8e55-258681bb3c22",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "A rejection entry can be added:\r\n- By `JdbcIndexer`, when consuming a `ReadService` update\r\n- By `SqlLedger`, when the time model check fails\r\n- By `JdbcLedgerDao`, when persisting the transaction fails with a consistency error\r\n",
        "createdAt" : "2020-04-02T22:57:23Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "27b910d5-fa17-4270-b93d-11080ab8cc25",
        "parentId" : "77ca6cf4-7b55-4389-8e55-258681bb3c22",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "@stefanobaghino-da: does the new schema require this to be added somewhere in addition?",
        "createdAt" : "2020-04-03T07:47:17Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "dd41def2-ae7d-40ac-b4be-421b7bc5cbd6",
        "parentId" : "77ca6cf4-7b55-4389-8e55-258681bb3c22",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "The sync version of this method should probably be called inside `storeRejection` so it is done in the same database transaction.",
        "createdAt" : "2020-04-03T07:48:54Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "9ba616a3-d61d-44de-8f5b-10a5d85fe8f4",
        "parentId" : "77ca6cf4-7b55-4389-8e55-258681bb3c22",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "> The sync version of this method should probably be called\r\n\r\nThis is the sync method 🙂 ",
        "createdAt" : "2020-04-06T06:35:27Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "6a60e298-23b7-4f0b-b4ab-e7d24a625ef2",
        "parentId" : "77ca6cf4-7b55-4389-8e55-258681bb3c22",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "> @stefanobaghino-da: does the new schema require this to be added somewhere in addition?\r\n\r\nThe new schema has a separate table for completions and rejections, I believe we can wire it in there.",
        "createdAt" : "2020-04-06T08:05:36Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "d9ad1608-bf17-4191-9f5a-6da7686b7164",
        "parentId" : "77ca6cf4-7b55-4389-8e55-258681bb3c22",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I'll try to transition this to the new schema after this has been merged.",
        "createdAt" : "2020-04-06T08:06:18Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f49d72d97c5936a50cb883659dd2caeda6205402",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +982,986 @@\n        case PersistenceEntry.Rejection(rejection) =>\n          stopDeduplicatingCommandSync(domain.CommandId(rejection.commandId), rejection.submitter)\n          storeRejection(offset, rejection)\n          Ok"
  },
  {
    "id" : "2bda536f-633f-42e1-802b-68a70bbb45cf",
    "prId" : 5129,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edc594d3-b330-4583-9706-a3e8eb9c6e62",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "shouldn't this be taken care of by `truncate participant_events cascade;`?",
        "createdAt" : "2020-03-23T09:13:39Z",
        "updatedAt" : "2020-03-23T09:14:15Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "9ea6e1fd-720d-4ab0-9a62-ccc397ac6dc0",
        "parentId" : "edc594d3-b330-4583-9706-a3e8eb9c6e62",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I'd say yes, but I'd say I'll add a test right now to make sure that's the case (and to ensure we don't forget about this in the future).",
        "createdAt" : "2020-03-23T09:17:30Z",
        "updatedAt" : "2020-03-23T09:17:30Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "91ec4df51a96f7aaee4a99aefbc3285ecb6290e4",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1725,1729 @@        |truncate participant_command_submissions cascade;\n        |truncate participant_events cascade;\n        |truncate participant_event_flat_transaction_witnesses cascade;\n        |truncate participant_event_witnesses_complement cascade;\n      \"\"\".stripMargin)"
  },
  {
    "id" : "a3e37742-2a5c-4425-b957-c3d45bcbcdff",
    "prId" : 4657,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4657",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ef8e223-33ab-4ae3-86a2-1845a7e194f7",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Looks like this `executionContext` comes from `actorSystem.dispatcher`, which comes from the `StandaloneIndexer`'s actor system. Just wanted to make sure we're OK with this.",
        "createdAt" : "2020-02-22T07:44:36Z",
        "updatedAt" : "2020-02-22T07:46:23Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "a9b67f26-d937-44bc-8ec0-f5ed9ed2d60e",
        "parentId" : "5ef8e223-33ab-4ae3-86a2-1845a7e194f7",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I agree we should change this, but in the context of this object (as it is right now) the `executionContext` is where `Future`s should be ran. I'll probably have a go at this as part of my participant redesign story.\r\n\r\nThanks for pointing this out though, as mentioned I agree that we could do a better job at organizing our thread pools.",
        "createdAt" : "2020-02-24T08:46:53Z",
        "updatedAt" : "2020-02-24T08:46:53Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1109b06acedc19d1d3792f5963e9b00bb3eb2b4",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1445,1449 @@            // (See issue #2026)\n            PartyDetails(Party.assertFromString(d.party), d.displayName, isLocal = true)))(\n        executionContext)\n\n  private val SQL_INSERT_PARTY ="
  },
  {
    "id" : "d5b8bdc9-9a36-4747-be79-d80e5fc59559",
    "prId" : 4543,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4543",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5db499c7-9a9d-4455-976f-b70a7ae40361",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "I guess without the string aggregation the query could even be moved out of the database specific traits?",
        "createdAt" : "2020-02-17T12:17:55Z",
        "updatedAt" : "2020-02-17T12:18:12Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "85d7067f-310a-4fa9-bf62-1edd82f0d99e",
        "parentId" : "5db499c7-9a9d-4455-976f-b70a7ae40361",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "For sure, I just wanted to solve one issue at a time and keep the PR as simple as possible.",
        "createdAt" : "2020-02-17T12:22:11Z",
        "updatedAt" : "2020-02-17T12:22:11Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "911d55a4-8d45-4157-9895-4a6fba094861",
        "parentId" : "5db499c7-9a9d-4455-976f-b70a7ae40361",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Tracked by https://github.com/digital-asset/daml/issues/4544",
        "createdAt" : "2020-02-17T12:23:53Z",
        "updatedAt" : "2020-02-17T12:23:53Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "a1a11704-04c4-4024-a99f-c547efe4d55f",
        "parentId" : "5db499c7-9a9d-4455-976f-b70a7ae40361",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Addressed in https://github.com/digital-asset/daml/pull/4545",
        "createdAt" : "2020-02-17T12:58:30Z",
        "updatedAt" : "2020-02-17T12:58:30Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "535444751d1cc0b9d8329e518ce4eb226309876c",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +1729,1733 @@    override protected[JdbcLedgerDao] val SQL_SELECT_CONTRACT: String =\n      s\"\"\"\n         |select cd.contract\n         |from contract_data cd\n         |left join contracts c on cd.id=c.id"
  },
  {
    "id" : "4bafc544-d0e3-4d21-9be7-46884fd251cd",
    "prId" : 4467,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ac5a798-1c8c-491b-a94f-7f8fdd5959e7",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Very nice, thanks. :slightly_smiling_face: ",
        "createdAt" : "2020-02-20T09:43:59Z",
        "updatedAt" : "2020-02-26T09:55:05Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "81c3bb07cc3057b6358f8d09902331b1a80501bf",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +1643,1647 @@\n  private val CommandDataParser: RowParser[ParsedCommandData] =\n    Macro.parser[ParsedCommandData](\n      \"submitted_at\",\n      \"ttl\","
  }
]