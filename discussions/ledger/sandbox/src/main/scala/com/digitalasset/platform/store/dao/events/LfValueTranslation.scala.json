[
  {
    "id" : "551c7a45-c1c2-4b5d-aefa-5a6fe88d0ec9",
    "prId" : 6289,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6289",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d94ce9b-7092-4776-9990-f7f252a61480",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Would it make sense to create a type parametrized weighting scheme for this instead? I.e., do you expect such weighting to be used for more caches than the 2 defined here?",
        "createdAt" : "2020-06-12T08:15:52Z",
        "updatedAt" : "2020-06-15T07:48:36Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "88fbf388af498692afc5283d2a171d201046eb70",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +251,255 @@  object ContractCache {\n\n    private implicit object `Key Weight` extends caching.Weight[Key] {\n      override def weigh(value: Key): caching.Cache.Size =\n        0 // make sure that only the value is counted"
  },
  {
    "id" : "2610f9db-1a63-486b-861d-85f392b9ff66",
    "prId" : 6289,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6289",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66d82c40-16f3-4588-a7ee-bbf78350a435",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "This singular name is a bit confusing here. Maybe call it `Caches` or `CachedEntities` or similar to be explicit that it is holding more than one cache?",
        "createdAt" : "2020-06-12T08:21:40Z",
        "updatedAt" : "2020-06-15T07:48:36Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "88fbf388af498692afc5283d2a171d201046eb70",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +177,181 @@object LfValueTranslation {\n\n  final case class Cache(events: EventCache, contracts: ContractCache)\n  type EventCache = caching.Cache[EventCache.Key, EventCache.Value]\n  type ContractCache = caching.Cache[ContractCache.Key, ContractCache.Value]"
  },
  {
    "id" : "8d18867d-c4a7-4774-a88b-da1e43a2ac15",
    "prId" : 6052,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "392be975-706f-42e2-a7d4-475f37732c30",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Thank you for using a typed exception. ðŸ˜€ ",
        "createdAt" : "2020-05-20T14:49:42Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "9945ea44fabe5fe18e6608839b2ce57f04cbb4ee",
    "line" : 198,
    "diffHunk" : "@@ -1,1 +196,200 @@\n    final class UnexpectedTypeException(value: Value)\n        extends RuntimeException(s\"Unexpected value $value\")\n\n    final case class Key(eventId: String)"
  },
  {
    "id" : "5879f76c-db1a-4987-800a-1472da88cb77",
    "prId" : 6052,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bad4b040-85c8-4f84-a768-5c0a40cf902c",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Could this `extends AnyVal`?",
        "createdAt" : "2020-05-20T14:51:09Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "e35708e2-c4b5-4d18-bb97-d10f27037c16",
        "parentId" : "bad4b040-85c8-4f84-a768-5c0a40cf902c",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Also, instead of making `Key` here, perhaps we could make `EventId` a proper type and just use that? (Potentially as a separate piece of work.)",
        "createdAt" : "2020-05-20T14:54:06Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "61143e68-8e86-4687-a2aa-4c50b34f8ac5",
        "parentId" : "bad4b040-85c8-4f84-a768-5c0a40cf902c",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "> Could this `extends AnyVal`?\r\n\r\nKeys must extends `AnyRef`.",
        "createdAt" : "2020-05-20T16:58:41Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "6fa7ae85-8872-42a4-a2b5-7387c4e1e041",
        "parentId" : "bad4b040-85c8-4f84-a768-5c0a40cf902c",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "> Also, instead of making `Key` here, perhaps we could make `EventId` a proper type and just use that? (Potentially as a separate piece of work.)\r\n\r\nIt is already, I'm using string here because I also have those coming from the database.",
        "createdAt" : "2020-05-20T16:59:30Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9945ea44fabe5fe18e6608839b2ce57f04cbb4ee",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +198,202 @@        extends RuntimeException(s\"Unexpected value $value\")\n\n    final case class Key(eventId: String)\n\n    sealed abstract class Value {"
  },
  {
    "id" : "48b1340d-6f54-49f6-b4ec-6e87eec902df",
    "prId" : 6052,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c01a41ab-ebdc-4e7e-bb48-5650e5a8f7e5",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "```suggestion\r\n  private def cannotSerialize(attribute: String, forContract: ContractId): String =\r\n```",
        "createdAt" : "2020-05-25T13:59:23Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "0e1dbf96-9532-4e6b-a9d6-78af60ee8a20",
        "parentId" : "c01a41ab-ebdc-4e7e-bb48-5650e5a8f7e5",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Thanks, seems unnecessary though.",
        "createdAt" : "2020-05-26T07:22:42Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9945ea44fabe5fe18e6608839b2ce57f04cbb4ee",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +16,20 @@final class LfValueTranslation(val cache: LfValueTranslation.Cache) {\n\n  private def cantSerialize(attribute: String, forContract: ContractId): String =\n    s\"Cannot serialize $attribute for ${forContract.coid}\"\n"
  },
  {
    "id" : "363c520d-3194-4e49-ba80-26bcc85f9aeb",
    "prId" : 6052,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a5f88f2-b823-4dbc-8999-c179271fb40e",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "Just construct a count-based caffeine cache, i.e., use `.maximumSize(...)` instead of `.maximumWeight(...)` and a weighter when creating the cache:\r\nhttps://github.com/ben-manes/caffeine/blob/4451d4443f1db71d3dc11925a1bca9a5206dd539/caffeine/src/main/java/com/github/benmanes/caffeine/cache/Caffeine.java#L368",
        "createdAt" : "2020-05-25T14:05:45Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "998381ca-3829-421d-880f-e5c48f8c9bb3",
        "parentId" : "3a5f88f2-b823-4dbc-8999-c179271fb40e",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I tried this already, unfortunately this starts to get out of scope with several changes needed to make sure we have an alternative that doesn't take an implicit `Weight` and that everything typechecks. I agree it's a meaningful improvement but I'd prefer not making everything in one PR which is already reasonably large.",
        "createdAt" : "2020-05-26T07:25:34Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9945ea44fabe5fe18e6608839b2ce57f04cbb4ee",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +183,187 @@    private implicit object `Value Weight` extends caching.Weight[Value] {\n      override def weigh(value: Value): caching.Cache.Size =\n        1 // TODO replace this with something to avoid weights entirely\n    }\n"
  }
]