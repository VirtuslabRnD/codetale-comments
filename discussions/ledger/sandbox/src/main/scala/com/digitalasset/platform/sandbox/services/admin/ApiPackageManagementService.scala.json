[
  {
    "id" : "292bb9e0-2034-4567-80d2-6914ad0061a5",
    "prId" : 3524,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4e2f8b2-070b-43eb-bbbe-96ab0fc4007b",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "```suggestion\r\n            case UploadPackagesResult.Overloaded =>\r\n```\r\n`r` seems to be unused.",
        "createdAt" : "2019-11-20T09:54:55Z",
        "updatedAt" : "2019-11-20T12:51:07Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "02760b2d9223fbfc9c776e4b3edac71864bcd5f9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +77,81 @@            case UploadPackagesResult.Ok =>\n              Future.successful(UploadDarFileResponse())\n            case r @ UploadPackagesResult.Overloaded =>\n              Future.failed(ErrorFactories.resourceExhausted(r.description))\n            case r @ UploadPackagesResult.InternalError(_) =>"
  },
  {
    "id" : "ac8a2f5d-72ef-490d-a501-767d09df866b",
    "prId" : 2194,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09a64a3f-fa43-4979-be5b-11eb7d132598",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Do you think it would make sense to move this in `PollingUtils`?",
        "createdAt" : "2019-07-17T13:17:32Z",
        "updatedAt" : "2019-07-18T04:20:59Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "c4329d6f-3cc8-47cf-8f75-b4e158892a25",
        "parentId" : "09a64a3f-fa43-4979-be5b-11eb7d132598",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "If you prefer to leave it here, it may be worth to cut on the parameters and call `PollingUtils.pollUntilPersisted` with the actual values here.",
        "createdAt" : "2019-07-17T13:33:05Z",
        "updatedAt" : "2019-07-18T04:20:59Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "688fddef-6e72-43c9-ab2d-bddb53d43544",
        "parentId" : "09a64a3f-fa43-4979-be5b-11eb7d132598",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Since we use the same values for `minWait`, `maxWait`, and `backoffProgression`, we could also hard-code them inside `PollingUtils.pollUntilPersisted`. If we realize that we need different values for party and package checking, we can put them as parameters, but I doubt that will be the case.",
        "createdAt" : "2019-07-18T07:30:00Z",
        "updatedAt" : "2019-07-18T07:30:01Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "c40d3c02-a14e-42bc-b76a-1cdc4c3b4f09",
        "parentId" : "09a64a3f-fa43-4979-be5b-11eb7d132598",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "The test uses explicit values for `minWait`, `maxWait`, and `backoffProgression` to check whether they behave correctly, so I will leave the parameters for now.",
        "createdAt" : "2019-07-18T07:57:30Z",
        "updatedAt" : "2019-07-18T07:57:31Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "848717af9c07474e7fae355da54c904ec52b1295",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +93,97 @@    * @return The result of the party allocation received originally, wrapped in a [[Future]]\n    */\n  private def pollUntilPersisted(\n      ids: List[String],\n      result: UploadDarFileResponse): Future[UploadDarFileResponse] = {"
  },
  {
    "id" : "6ab70dfd-2fdc-405b-b3bd-a073a816c8fd",
    "prId" : 1800,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08539d74-56c3-46af-bea3-a8315022d7cc",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "I think it would be nice to have `DarReader` support `ZipInputStream` as well if possible. This way we don't have to create a temporary zipfile, but can feed the `ZipInputStream` directly from the byte array.",
        "createdAt" : "2019-06-26T13:28:59Z",
        "updatedAt" : "2019-06-27T08:00:27Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "961bc51b-7112-41e4-8896-dac16887fc30",
        "parentId" : "08539d74-56c3-46af-bea3-a8315022d7cc",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "I agree this would be better. The `DarReader` does random-access reading of zip file entries, which does not work with `ZipInputStream`, so this would require some refactoring of the reader.",
        "createdAt" : "2019-06-26T13:56:23Z",
        "updatedAt" : "2019-06-27T08:00:27Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "ef585049-6fa5-43b8-948f-4758221eff76",
        "parentId" : "08539d74-56c3-46af-bea3-a8315022d7cc",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Right. I didn't mean for this to be changed in this PR. Thanks for checking.",
        "createdAt" : "2019-06-26T15:15:03Z",
        "updatedAt" : "2019-06-27T08:00:27Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "720e4237da08f6f60dc2001e8f439cb9614a907e",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +58,62 @@        Try(fos.write(request.darFile.toByteArray))\n      }\n      dar <- DarReader { case (_, x) => Try(Archive.parseFrom(x)) }.readArchive(new ZipFile(file))\n    } yield {\n      packagesWrite.uploadPackages(dar.all, None)"
  }
]