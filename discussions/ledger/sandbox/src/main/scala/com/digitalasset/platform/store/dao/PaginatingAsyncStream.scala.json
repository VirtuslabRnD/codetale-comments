[
  {
    "id" : "f2ba5872-879e-4577-83ac-6898b9d3030c",
    "prId" : 6083,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ada03677-ee7d-4854-8612-9648ff0713c8",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "```suggestion\r\n  def streamFrom[Off, T, Ix](initialOffset: Off, extractOffsetAndNodeIndex: T => (Off, Ix))(\r\n      query: (Off, Option[Ix]) => Future[Vector[T]]\r\n```",
        "createdAt" : "2020-05-29T15:25:13Z",
        "updatedAt" : "2020-05-29T15:25:14Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "30a08cfc-a792-4756-995c-46c777a89aa7",
        "parentId" : "ada03677-ee7d-4854-8612-9648ff0713c8",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "yeah, that makes sense, I will do this refactoring in a follow-up PR, don't want to wait for another build.",
        "createdAt" : "2020-05-29T15:28:54Z",
        "updatedAt" : "2020-05-29T15:28:54Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "b9ff72be-7001-40e0-aa4c-53c0069fadc3",
        "parentId" : "ada03677-ee7d-4854-8612-9648ff0713c8",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "@S11001001 is there any specific reason why you listed the type parameters in this order:\r\n`[Off, T, Ix]`?\r\n\r\nI would do `[Off, Ix, T]`. You get `T` from `Off` and `Ix`.",
        "createdAt" : "2020-05-29T15:37:52Z",
        "updatedAt" : "2020-05-29T15:39:32Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "053a91fd-33e9-4f9e-aaa1-dff13b1011d8",
        "parentId" : "ada03677-ee7d-4854-8612-9648ff0713c8",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "When in doubt I do first occurrence, left to right, just as an automatic generalization algorithm would likely choose. `Off, T, Ix` is the order of first occurrence. I don't care super hard as long as they're abstract.",
        "createdAt" : "2020-05-29T15:39:36Z",
        "updatedAt" : "2020-05-29T15:39:36Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "1cafd39f-8233-4540-a1d5-a518d05a7ebd",
        "parentId" : "ada03677-ee7d-4854-8612-9648ff0713c8",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "I was thinking about this as well, but initially thought that we might as well be very specific here. \r\nBut of course, I have just noticed that we would need to do something similar for `CommandCompletionsReader`, which doesn't use any pagination at all at the moment, where we don't have a \"node index\" and would set the `Ix` type parameter to `Unit`.",
        "createdAt" : "2020-05-29T15:40:30Z",
        "updatedAt" : "2020-05-29T15:40:30Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "91f734fe-339a-435d-8fe0-be29d15228e1",
        "parentId" : "ada03677-ee7d-4854-8612-9648ff0713c8",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "I would say that [a concrete type opposes the goal of specificity](https://typelevel.org/blog/2017/09/05/three-types-of-strings.html). It permits data mangling and conjuration from thin air, whereas the abstraction makes clear that the function is agnostic with respect to the data represented by the three tparams, and won't conjure any Offsets or Ints itself, never mind compare them or perform other operations.",
        "createdAt" : "2020-05-29T15:46:42Z",
        "updatedAt" : "2020-05-29T15:46:42Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fc616a4c4006e700ebe1e9c0a9d52519af9130a",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +66,70 @@    */\n  def streamFrom[T](initialOffset: Offset, extractOffsetAndNodeIndex: T => (Offset, Int))(\n      query: (Offset, Option[Int]) => Future[Vector[T]]\n  ): Source[T, NotUsed] = {\n    Source"
  },
  {
    "id" : "807df359-2ae2-4bd5-be45-bc9f91feaedb",
    "prId" : 5181,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5181",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "003e0533-c1a8-4a5e-88a1-eae72a62743c",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "@gerolf-da This, and...",
        "createdAt" : "2020-03-25T12:37:47Z",
        "updatedAt" : "2020-03-25T14:43:37Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "de51a118c24adc46da99a09073bee4661f4203ba",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +38,42 @@        case Some(queryOffset) =>\n          queryPage(queryOffset).map { result =>\n            val resultSize = result.size.toLong\n            val newQueryOffset = if (resultSize < pageSize) None else Some(queryOffset + pageSize)\n            Some(newQueryOffset -> result)"
  },
  {
    "id" : "488c67d0-fac5-478a-859a-829ad7bc1bfd",
    "prId" : 5181,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5181",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82444190-8869-4e08-b2a2-00852ad7929a",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "@gerolf-da ...this, and...",
        "createdAt" : "2020-03-25T12:38:02Z",
        "updatedAt" : "2020-03-25T14:43:37Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "de51a118c24adc46da99a09073bee4661f4203ba",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +41,45 @@            val newQueryOffset = if (resultSize < pageSize) None else Some(queryOffset + pageSize)\n            Some(newQueryOffset -> result)\n          }(DirectExecutionContext)\n      }\n      .flatMapConcat(Source(_))"
  }
]