[
  {
    "id" : "b6793fc0-a002-4ea4-85f3-c16651c4cf68",
    "prId" : 6216,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6216",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "875542db-4e0d-45ce-bf4c-b3e145b17f66",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "What is this dummy implicit for?",
        "createdAt" : "2020-06-04T06:39:51Z",
        "updatedAt" : "2020-06-04T06:42:53Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "32576455-981e-4541-9e71-de2fe866e3bb",
        "parentId" : "875542db-4e0d-45ce-bf4c-b3e145b17f66",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "It makes the first two `add` overloads have different erasures in bytecode.",
        "createdAt" : "2020-06-04T13:55:07Z",
        "updatedAt" : "2020-06-04T13:55:07Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "9fdb990d-0d2e-444b-80f6-7fd07e5be535",
        "parentId" : "875542db-4e0d-45ce-bf4c-b3e145b17f66",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Mh, ok. Would a simple change of name have worked, though?",
        "createdAt" : "2020-06-04T18:13:49Z",
        "updatedAt" : "2020-06-04T18:13:49Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "c5bb2254-7ab8-4e40-b2fe-972ebecfac40",
        "parentId" : "875542db-4e0d-45ce-bf4c-b3e145b17f66",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Yes, it would.\r\n\r\nWe do something similar for the superclass of all Scala-codegenned record types, since we have methods share names with possible field names:\r\n\r\nhttps://github.com/digital-asset/daml/blob/e23a488596d412b804dc4fd7af821d2c5b8dd5df/language-support/scala/bindings/src/main/scala/com/digitalasset/ledger/client/binding/binding/Template.scala#L22-L25",
        "createdAt" : "2020-06-04T19:49:08Z",
        "updatedAt" : "2020-06-04T19:49:08Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "47a4eea06961bd477c6a3c7678ee238fe9c1556f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +121,125 @@\n    def add(exercise: RawBatch.Event[RawBatch.Event.Exercised])(\n        implicit dummy: DummyImplicit): AccumulatingBatches =\n      copy(exercises = exercises :+ exercise)\n"
  },
  {
    "id" : "16b7eef5-7c4d-4f47-ac3d-2c0c7a6f5c4e",
    "prId" : 6172,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee43e274-7327-487f-a640-2a3ec946c968",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "`NodeId` is a `final case class`, this is probably unnecessarily generic.",
        "createdAt" : "2020-06-02T07:26:28Z",
        "updatedAt" : "2020-06-03T00:22:54Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "ff6da5e7-a9d3-46c4-be7b-f7b706f16aa7",
        "parentId" : "ee43e274-7327-487f-a640-2a3ec946c968",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Scala seems to think that `Nid` and `NodeId` are distinct, which is [exploitable in type-checking](https://typelevel.org/blog/2017/02/13/more-types-than-classes.html).",
        "createdAt" : "2020-06-02T16:14:00Z",
        "updatedAt" : "2020-06-03T00:22:54Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "8b97ae64-4196-4546-870e-07ef984833d5",
        "parentId" : "ee43e274-7327-487f-a640-2a3ec946c968",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "To expand, there is no need for separate maps here at all, I would have rather mapped the party sets directly into the transaction structure. However, the transaction structure isn't sufficiently generic for that, so we have the nasty Perlish technique of \"pass a map that associates the extra data in\" instead.\r\n\r\nThen I ask myself, \"given that I don't want to hypergeneralize lf.Transaction, how can I make clear that these three arguments are related in a specific way, and they do not merely contain NodeIds, but NodeIds that are specifically related to each other?\" And this is the most obvious tool available.\r\n\r\n[I expand on a similar case for similarly final class String.](https://typelevel.org/blog/2017/09/05/three-types-of-strings.html)",
        "createdAt" : "2020-06-02T16:29:46Z",
        "updatedAt" : "2020-06-03T00:22:54Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "a07d02c332d46c90c777addcbdff06f74cd74a61",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +159,163 @@    */\n  @throws[RuntimeException]\n  def prepareBatchInsert[Nid <: NodeId](\n      submitterInfo: Option[SubmitterInfo],\n      workflowId: Option[WorkflowId],"
  },
  {
    "id" : "000298d6-f016-42df-bda8-2c1d90546d9c",
    "prId" : 6143,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8388ed70-a070-4040-9e8c-0faf41157a3b",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I believe @S11001001 had a good idea why this was here, but I don't know what it was.",
        "createdAt" : "2020-06-08T13:13:50Z",
        "updatedAt" : "2020-06-08T14:24:10Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "89af6d420800adee764159fb1c3073fae07859e9",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +159,163 @@    */\n  @throws[RuntimeException]\n  def prepareBatchInsert(\n      submitterInfo: Option[SubmitterInfo],\n      workflowId: Option[WorkflowId],"
  },
  {
    "id" : "2328cbc6-5403-45cb-8794-6d90e301c6e1",
    "prId" : 5522,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5522",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c22b4458-5ce8-437a-951b-5847f062991c",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "ðŸ¥³ ",
        "createdAt" : "2020-04-09T15:31:07Z",
        "updatedAt" : "2020-04-09T17:51:17Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "32605ff4e62f3d2a5d12fabe7d6ba254e4d24056",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4,8 @@package com.daml.platform.store.dao.events\n\nimport java.time.Instant\n\nimport anorm.{BatchSql, NamedParameter}"
  },
  {
    "id" : "d811a236-2b0f-4733-b560-b65265bce1be",
    "prId" : 5089,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5089",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08ef8905-fa23-498f-a204-001541905e2c",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "I like it. Thanks!",
        "createdAt" : "2020-03-19T20:21:12Z",
        "updatedAt" : "2020-03-20T11:06:26Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5d117bbf4b07fc2d8a6a4f8540241ce2ece5a56",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +71,75 @@      \"create_consumed_at\" -> \"null\",\n      \"create_key_value\" -> \"{create_key_value}\"\n    )\n\n  private def create("
  }
]