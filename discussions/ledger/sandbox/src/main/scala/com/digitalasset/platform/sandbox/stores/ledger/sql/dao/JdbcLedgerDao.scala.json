[
  {
    "id" : "c5721633-1eac-4a75-bae8-d9a16bca4077",
    "prId" : 3553,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3553",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "deec367c-9529-422f-939f-25d9d4623653",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "I like to do the decoding of the protobuf messages as part of processing the akka stream (compare `getLedgerEntries`), because then\r\n1) the decoding only happens when demand for more messages is requested from the sink (i.e. the API consumer)\r\n2) we don't do all the work upfront just to find out that the stream was broken.\r\n\r\nAdmittedly this is less of a problem for configuration than for transactions, but it'll ultimately be more sane to use the same \"process\".\r\n\r\nFor now, don't worry about it.",
        "createdAt" : "2019-11-26T21:03:11Z",
        "updatedAt" : "2019-11-27T14:09:02Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "d3d0d86a-ec87-456e-98df-10ddd12c6b38",
        "parentId" : "deec367c-9529-422f-939f-25d9d4623653",
        "authorId" : null,
        "body" : "agree with the reasoning. I'll leave it as is for now though to land this beast...",
        "createdAt" : "2019-11-27T09:31:33Z",
        "updatedAt" : "2019-11-27T14:09:02Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "04d3118b43225ee033b4c9bba93102cdc650df6a",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +185,189 @@      .map {\n        case (offset, typ, submissionId, participantIdRaw, rejectionReason, configBytes) =>\n          val config = Configuration\n            .decode(configBytes)\n            .fold(err => sys.error(s\"Failed to decode configuration: $err\"), identity)"
  },
  {
    "id" : "f60fdae1-d547-4762-aa07-0d68a082f67f",
    "prId" : 3362,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3362",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84dbdb9b-cc67-4c55-890a-91718cf00f9d",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "We may want to name this so that it's clear this is the execution context in which Protobuf deserialization happens.",
        "createdAt" : "2019-11-06T15:35:23Z",
        "updatedAt" : "2019-11-08T07:39:39Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "c9d22d2f-e8e3-4c83-8aa6-530f2c260b63",
        "parentId" : "84dbdb9b-cc67-4c55-890a-91718cf00f9d",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "yeah, i wasn't sure whether we should use a separate cached threadpool just for that. Right now I'm passing down the actorsystem's dispatcher, which also doesn't seem right, as it'll block scheduling of actor/stream work.",
        "createdAt" : "2019-11-06T17:57:52Z",
        "updatedAt" : "2019-11-08T07:39:39Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "7225b1c6bd5a021028f65be952dc7015e923d713",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +65,69 @@    dbType: DbType,\n    loggerFactory: NamedLoggerFactory,\n    executionContext: ExecutionContext)\n    extends LedgerDao {\n"
  },
  {
    "id" : "11b70cb7-7e6d-4b2d-9196-f0fa474cd8af",
    "prId" : 3207,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a4fb8c7-53df-4f96-a33c-7ee0d384e4a6",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Can we execute these ~five~ six queries as a single transaction/roundtrip to the database? I'm also a bit worried by the length of this method.",
        "createdAt" : "2019-10-16T16:35:38Z",
        "updatedAt" : "2019-10-28T11:53:23Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "b43dc2dc-cd13-4a94-b8b0-a51c8b004f06",
        "parentId" : "6a4fb8c7-53df-4f96-a33c-7ee0d384e4a6",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "it already is a single transaction, but we can only batch execute inserts for a single table. We could however merge the tables `contract_witnesses`, `contract_signatories`, and `contract_observers` and have 3 separate columns or a \"denominator\" column only containing `w`, `s`, and `o` respectively.",
        "createdAt" : "2019-10-17T07:03:18Z",
        "updatedAt" : "2019-10-28T11:53:23Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "e19cc633-1d84-4d32-a97b-709530cf1dde",
        "parentId" : "6a4fb8c7-53df-4f96-a33c-7ee0d384e4a6",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I think it's fine as is right now, thanks.",
        "createdAt" : "2019-10-17T09:30:44Z",
        "updatedAt" : "2019-10-28T11:53:23Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "28bd9d4759b6852330b2524547277ae6809f6843",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +401,405 @@    }\n\n    // Part 6: insert observers into the 'contract_observers' table\n    val namedObserversParams = contracts\n      .flatMap("
  },
  {
    "id" : "e6a7ff9d-3b5a-4d66-abb0-f49818427626",
    "prId" : 3207,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a481ef5-89a9-4e16-95c3-aa806002a9c9",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "What are the chances that we'll decide to relax DAML party identifier restrictions so that `%` is a valid character, while forgetting about his line?",
        "createdAt" : "2019-10-17T16:34:26Z",
        "updatedAt" : "2019-10-28T11:53:23Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "c584f899-de15-4b9d-b724-b89fa93b947b",
        "parentId" : "0a481ef5-89a9-4e16-95c3-aa806002a9c9",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Non-zero ðŸ˜ˆ ",
        "createdAt" : "2019-10-18T11:43:04Z",
        "updatedAt" : "2019-10-28T11:53:23Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "28bd9d4759b6852330b2524547277ae6809f6843",
    "line" : 215,
    "diffHunk" : "@@ -1,1 +1320,1324 @@      loggerFactory)\n\n  private val PARTY_SEPARATOR = '%'\n\n  sealed trait Queries {"
  },
  {
    "id" : "770a72a1-0e1b-4e4a-84d1-304ee4eb7730",
    "prId" : 3180,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3180",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0029e0c5-fb25-4491-bed6-d4f785642aeb",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "For consistency's sake, `ck` should rather be `coke`. :smile: ",
        "createdAt" : "2019-10-15T09:14:22Z",
        "updatedAt" : "2019-10-15T09:15:16Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "087fdf6ae541a8e9e9a1727d95b7e993edb6ffe9",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +146,150 @@    SQL(\n      \"\"\"select ck.contract_id from contract_keys ck\n        |left join contract_witnesses cowi on ck.contract_id = cowi.contract_id and cowi.witness = {party}\n        |left join contract_divulgences codi on ck.contract_id = codi.contract_id and codi.party = {party}\n        |where"
  },
  {
    "id" : "8a5421a3-94ff-4bc3-86b5-fc3b9a8c186b",
    "prId" : 2719,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "443a7f1a-ea90-444c-a23e-e7320f886fa0",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Would this force one extra roundtrip to the database for every call that saves the offset?",
        "createdAt" : "2019-09-02T11:12:34Z",
        "updatedAt" : "2019-09-02T13:20:59Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "f6d9d774-a548-4956-8c00-1c5560a93334",
        "parentId" : "443a7f1a-ea90-444c-a23e-e7320f886fa0",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "yes it would for each state update.",
        "createdAt" : "2019-09-02T11:22:49Z",
        "updatedAt" : "2019-09-02T13:20:59Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "1480720df5055a1ee7c519e9ce61312cf6635c63",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +111,115 @@    \"update parameters set external_ledger_end = {ExternalLedgerEnd}\")\n\n  private def updateExternalLedgerEnd(externalLedgerEnd: LedgerString)(\n      implicit conn: Connection): Unit = {\n    SQL_UPDATE_EXTERNAL_LEDGER_END"
  },
  {
    "id" : "cef1c3ab-95cc-4cf8-a83a-b08819183aa2",
    "prId" : 2425,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "273e7deb-b41b-4f9d-9afa-6d70b90e8e06",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I'm a bit doubtful about this approach. I would rather use different implementations of some holder of queries for specific implementations rather than manually dispatching with cases.",
        "createdAt" : "2019-08-23T15:21:36Z",
        "updatedAt" : "2019-08-28T11:21:54Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "84c13310-dcd3-405a-8ea1-70292866546a",
        "parentId" : "273e7deb-b41b-4f9d-9afa-6d70b90e8e06",
        "authorId" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "body" : "Conversation continued below",
        "createdAt" : "2019-08-26T08:55:30Z",
        "updatedAt" : "2019-08-28T11:21:54Z",
        "lastEditedBy" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fee0715b6e5ad68a7c644fcc1d5e65f71f5a8ed",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +52,56 @@    valueSerializer: ValueSerializer,\n    keyHasher: KeyHasher,\n    dbType: JdbcLedgerDao.DbType)\n    extends LedgerDao {\n"
  },
  {
    "id" : "4a8cf2eb-0375-45dd-983e-4593a22a38f3",
    "prId" : 2425,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22ca5f17-878a-451b-9ded-9fbb49ef1198",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "To clarify my previous comment, I would make queries part of the implementation of this trait.",
        "createdAt" : "2019-08-23T15:28:56Z",
        "updatedAt" : "2019-08-28T11:21:54Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "feb3be65-e526-4844-b866-43852cce19e9",
        "parentId" : "22ca5f17-878a-451b-9ded-9fbb49ef1198",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "The downside of this is that many queries will be duplicated, and modifying a query in a DB-specific trait makes it easy to not modify the respective query in all the other traits.",
        "createdAt" : "2019-08-26T07:15:05Z",
        "updatedAt" : "2019-08-28T11:21:54Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "e76d2c15-b55e-4d43-9928-a95e3039abcb",
        "parentId" : "22ca5f17-878a-451b-9ded-9fbb49ef1198",
        "authorId" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "body" : "For reference, I initially started out on the inheritance approach which duplicated a lot of code: https://github.com/digital-asset/daml/commit/754fd7b60985325571850c65c28171d35242d1a4#diff-3c124d60ef536a91fb6039a3d6b350aa and got worried about the maintainability of multiple DAOs.\r\n\r\nBut we should be able to come up with something more scoped, i.e. only overriding \"non-standard\" SQL statements. Let me take a stab at this and see how this turns out. This may be what @stefanobaghino-da means too.\r\n\r\nAnother alternative could be to try to avoid Postgres-special syntax. For the \"on conflict .. do nothing\" this can mean standardizing on the H2db approach of adding a where clause filter to achieve the same effect. I did not do so since I was worried about causing perf regressions on the Postgres side. This would turn\r\n\r\n```\r\n  private val SQL_INSERT_PACKAGE =\r\n    dbType match {\r\n      case Postgres =>\r\n        \"\"\"insert into packages(package_id, upload_id, source_description, size, known_since, ledger_offset, package)\r\n          |select {package_id}, {upload_id}, {source_description}, {size}, {known_since}, ledger_end, {package}\r\n          |from parameters\r\n          |on conflict (package_id) do nothing\r\n          |\"\"\".stripMargin\r\n      case H2Database =>\r\n        \"\"\"insert into packages(package_id, upload_id, source_description, size, known_since, ledger_offset, package)\r\n          |select {package_id}, {upload_id}, {source_description}, {size}, {known_since}, ledger_end, {package}\r\n          |from parameters\r\n          |where {package_id} not in (select package_id from packages)\r\n          |\"\"\".stripMargin\r\n    }\r\n```\r\n\r\nto:\r\n\r\n```\r\n  private val SQL_INSERT_PACKAGE =\r\n    \"\"\"insert into packages(package_id, upload_id, source_description, size, known_since, ledger_offset, package)\r\n      |select {package_id}, {upload_id}, {source_description}, {size}, {known_since}, ledger_end, {package}\r\n      |from parameters\r\n      |where {package_id} not in (select package_id from packages)\"\"\".stripMargin\r\n```",
        "createdAt" : "2019-08-26T07:34:34Z",
        "updatedAt" : "2019-08-28T11:21:54Z",
        "lastEditedBy" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "tags" : [
        ]
      },
      {
        "id" : "9ae2766d-9bd5-42ed-9818-3aacb04f43c3",
        "parentId" : "22ca5f17-878a-451b-9ded-9fbb49ef1198",
        "authorId" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "body" : "@stefanobaghino-da , I moved the Statement overrides into the trait. Please take a look at https://github.com/digital-asset/daml/pull/2425/commits/87be58d48544dab10c8d9432ae925aa773580725",
        "createdAt" : "2019-08-26T08:55:59Z",
        "updatedAt" : "2019-08-28T11:21:54Z",
        "lastEditedBy" : "d7d10058-0c3f-4068-af8a-3d7024c74f76",
        "tags" : [
        ]
      },
      {
        "id" : "8718eeb5-4c8c-439f-ae31-76064dfa8a12",
        "parentId" : "22ca5f17-878a-451b-9ded-9fbb49ef1198",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Yeah, I prefer this approach much more, thanks.",
        "createdAt" : "2019-08-26T09:24:35Z",
        "updatedAt" : "2019-08-28T11:21:54Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "90583138-c50a-42b0-be42-476f161a09b7",
        "parentId" : "22ca5f17-878a-451b-9ded-9fbb49ef1198",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I've added a single comment on that commit, feel free to fulfill the requirement or disregard it, it's not that important.",
        "createdAt" : "2019-08-26T09:25:09Z",
        "updatedAt" : "2019-08-28T11:21:54Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fee0715b6e5ad68a7c644fcc1d5e65f71f5a8ed",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +1112,1116 @@      dbType)\n\n  sealed trait DbType {\n\n    def name: String"
  }
]