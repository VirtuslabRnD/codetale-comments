[
  {
    "id" : "3052dfab-e59a-4c36-a677-8aa3c24dc128",
    "prId" : 6512,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcd01d57-8fad-435e-8ba5-64073f7fafd7",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "@SamirTalwar-DA Is that enough to make it work in `sandbox-next`? Or does it only affect `sandbox-classic`?",
        "createdAt" : "2020-06-29T11:44:34Z",
        "updatedAt" : "2020-06-29T12:47:24Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "ce344077-ddde-4f9e-b21d-6cd7479df072",
        "parentId" : "bcd01d57-8fad-435e-8ba5-64073f7fafd7",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Oh, good catch. This will only affect Sandbox Classic. You'll need to add it to `com.daml.platform.sandboxnext.Runner` too.",
        "createdAt" : "2020-06-29T11:48:08Z",
        "updatedAt" : "2020-06-29T12:47:24Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "c3c34256-d81b-4d3b-9ba2-34179a5900c0",
        "parentId" : "bcd01d57-8fad-435e-8ba5-64073f7fafd7",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Thanks for letting me know. I'll do that in a followup PR together with the profiler as well.",
        "createdAt" : "2020-06-29T12:45:56Z",
        "updatedAt" : "2020-06-29T12:47:24Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ec8a59682399aa5dbac069527e4e9a52cdeb4e7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +139,143 @@      engine.startProfiling(profileDir)\n  }\n  engine.enableStackTraces(config.stackTraces)\n\n  // Name of this participant"
  },
  {
    "id" : "ff3ae54c-96af-48e3-b8c4-f4eb05332fe9",
    "prId" : 6151,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74f9ac4a-6595-41cf-ae2b-c5e8574fb3a2",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "`fold` might be cleaner here.\r\n\r\n```suggestion\r\n        config.profileDir.fold(\"\").fold(dir => s\", profile directory = ${dir}\")\r\n```",
        "createdAt" : "2020-05-29T12:00:58Z",
        "updatedAt" : "2020-05-29T12:04:10Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "ae195d8c-de51-4318-8bdd-60ac299132dd",
        "parentId" : "74f9ac4a-6595-41cf-ae2b-c5e8574fb3a2",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not a big fan of `fold` and `foreach` on `Option`. At least for me, it makes reading code significantly harder since I need to run a type inference in my head, particularly during code review. And I don't mind writing a few more lines if it makes my intent easy to understand. It would have been cool if Scala had something like Rust's [`map_or`](https://doc.rust-lang.org/std/option/enum.Option.html#method.map_or).",
        "createdAt" : "2020-05-29T13:05:53Z",
        "updatedAt" : "2020-05-29T13:05:54Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "cf8d3810-2afe-4f85-a48f-1b5a3fa33a53",
        "parentId" : "74f9ac4a-6595-41cf-ae2b-c5e8574fb3a2",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Fair. 🙂 ",
        "createdAt" : "2020-05-29T13:13:50Z",
        "updatedAt" : "2020-05-29T13:13:51Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa42faf4fffb4e6c0891d323b87bdf1cb115576f",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +342,346 @@          case None => \"\"\n          case Some(profileDir) => s\", profile directory = ${profileDir}\"\n        },\n      )\n      if (config.scenario.nonEmpty) {"
  },
  {
    "id" : "9c273ef1-ebe7-4c43-8e77-77fe6d98aa83",
    "prId" : 6151,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa91b792-dc5d-4da4-857a-93a14d451817",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "What happens if we reset the server with the ResetService?",
        "createdAt" : "2020-05-29T12:03:05Z",
        "updatedAt" : "2020-05-29T12:04:10Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "0d38f197-bdaa-4298-aa6e-6efb685ee151",
        "parentId" : "aa91b792-dc5d-4da4-857a-93a14d451817",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "To my best understanding, the engine is not touched when the reset service is used. That is at least how I understand the comment\r\nhttps://github.com/digital-asset/daml/blob/9d955d7039651e670bf58d908f460a96f17456ee/ledger/sandbox/src/main/scala/com/digitalasset/platform/sandbox/SandboxServer.scala#L60",
        "createdAt" : "2020-05-29T13:07:55Z",
        "updatedAt" : "2020-05-29T13:07:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "fbfe36e9-2fe2-4a1e-8f9f-fe461627ab3f",
        "parentId" : "aa91b792-dc5d-4da4-857a-93a14d451817",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Sounds good. I don't particularly understand how resetting affects things; I just know it's easy to get bitten by it.",
        "createdAt" : "2020-05-29T13:14:23Z",
        "updatedAt" : "2020-05-29T13:14:23Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa42faf4fffb4e6c0891d323b87bdf1cb115576f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +127,131 @@    this(config, materializer, new Metrics(new MetricRegistry))\n\n  // NOTE(MH): We must do this _before_ we load the first package.\n  config.profileDir match {\n    case None => ()"
  },
  {
    "id" : "846d6c54-7492-42a3-943e-762243ddbdfc",
    "prId" : 6151,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "997938d4-fdd9-4fb6-b270-4b0197baf447",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "You can use `foreach` here.\r\n\r\n```suggestion\r\n  config.profileDir.foreach { profileDir =>\r\n    Files.createDirectories(profileDir)\r\n    engine.startProfiling(profileDir)\r\n  }\r\n```",
        "createdAt" : "2020-05-29T12:03:41Z",
        "updatedAt" : "2020-05-29T12:04:10Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "e6d312a0-1f00-4455-8481-8f2d14060ce7",
        "parentId" : "997938d4-fdd9-4fb6-b270-4b0197baf447",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "See above.",
        "createdAt" : "2020-05-29T13:08:37Z",
        "updatedAt" : "2020-05-29T13:08:38Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa42faf4fffb4e6c0891d323b87bdf1cb115576f",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +133,137 @@      Files.createDirectories(profileDir)\n      engine.startProfiling(profileDir)\n  }\n\n  // Name of this participant"
  },
  {
    "id" : "24b1bdc3-3216-47e6-8e2f-bed865a517bd",
    "prId" : 5929,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5929",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75cab952-d93c-4b4e-b9cc-65dd45f4b8ad",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : ":+1: ",
        "createdAt" : "2020-05-11T13:56:54Z",
        "updatedAt" : "2020-05-13T10:04:55Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dba967f9f02fe374fa8a168129d2d6976b15b151",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +164,168 @@            packageStore = packageStore,\n            startMode = SqlStartMode.AlwaysReset,\n            currentPort = Some(port),\n        )))\n"
  },
  {
    "id" : "c558e149-9986-4403-bde8-e2afa84ae76d",
    "prId" : 5781,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5781",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15bd576a-a268-406b-bbfb-83aa5eaa0c97",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Previously `ActiveLedgerStateManager` did the implicit party allocation. But now that it's gone, we resort to the same mechanism as sadbonx (i.e. explicit implicit party allocation), right?",
        "createdAt" : "2020-05-04T14:10:40Z",
        "updatedAt" : "2020-05-04T14:46:46Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "b41313b3-9dd3-4ad2-a98e-952c2e915b97",
        "parentId" : "15bd576a-a268-406b-bbfb-83aa5eaa0c97",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Precisely, if this flag is on the command submission service walks the transaction tree and does the party allocation.",
        "createdAt" : "2020-05-04T14:52:39Z",
        "updatedAt" : "2020-05-04T14:52:39Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cef248cc3f3c465650baeffbee12935ac37bb2e",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +290,294 @@        partyConfig = PartyConfiguration.default.copy(\n          // sandbox-classic always allocates party implicitly\n          implicitPartyAllocation = true,\n        ),\n        submissionConfig = config.submissionConfig,"
  },
  {
    "id" : "a7b7d58a-f572-4932-993f-81d2faf9b7e5",
    "prId" : 4755,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4755",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf165b00-0962-4bef-92ab-afffcbfe940e",
        "parentId" : null,
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "What do you mean by this comment? The code says if you already have a port set then don't care about the port specified in the config. If you would like to imply that `currentPort` is the port saved before reset then please rename the parameter accordingly.",
        "createdAt" : "2020-03-02T12:31:43Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      },
      {
        "id" : "65c74d28-98d4-4774-abdd-f0cb869dbfb7",
        "parentId" : "bf165b00-0962-4bef-92ab-afffcbfe940e",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "This comment was just moved from the code above because it no longer fit; I didn't change it, and I'd rather not change it in this PR.",
        "createdAt" : "2020-03-02T13:44:26Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "7141ac9d-bea8-4a04-ba50-179c57552d96",
        "parentId" : "bf165b00-0962-4bef-92ab-afffcbfe940e",
        "authorId" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "body" : "OK -- I'm just pointing out this comment is rather confusing than helping.",
        "createdAt" : "2020-03-02T15:02:46Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : "8690c022-0eb5-4c0b-9f54-a9e6ad005a86",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d36fdaa30a004657bd518f427ba4d9695681aa0",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +305,309 @@              )(mat, esf, logCtx)\n              .map(_.withServices(List(resetService(ledgerId, authorizer, executionContext)))),\n          // NOTE: Re-use the same port after reset.\n          currentPort.getOrElse(config.port),\n          config.maxInboundMessageSize,"
  },
  {
    "id" : "9d058e80-2fe6-4c31-b173-065f046b5555",
    "prId" : 4533,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79e82c2f-866c-454f-9440-00dc52497609",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Shouldn't it be the other way around? When `useSortableCid` is active, we create a seed service?",
        "createdAt" : "2020-02-17T09:29:27Z",
        "updatedAt" : "2020-02-17T12:34:30Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "23ef6885-82a2-4885-8263-c873123d6cd4",
        "parentId" : "79e82c2f-866c-454f-9440-00dc52497609",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "You are right. Thanks.",
        "createdAt" : "2020-02-17T09:49:23Z",
        "updatedAt" : "2020-02-17T12:34:30Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "69e42150daf521f93631ef81bea5b8b2314d7beb",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +276,280 @@\n      val seedService =\n        if (config.useSortableCid)\n          Some(crypto.Hash.secureRandom(SecureRandom.getInstanceStrong.generateSeed(32)))\n        else"
  },
  {
    "id" : "6b30c660-5224-4171-a4d6-3e8813a1d60e",
    "prId" : 4447,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad4756a5-1dbd-4eba-bf75-1437f0672387",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Would it make sense to have a `Resource.forTryCloseable` to avoid having an owner that just acquires?",
        "createdAt" : "2020-02-10T09:41:35Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "f798edd8-1f01-4e18-8a43-104964c763aa",
        "parentId" : "ad4756a5-1dbd-4eba-bf75-1437f0672387",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Maybe, but I think the explicit `acquire` is worth it for things that really should be released. I think this is a bigger question; perhaps all those `ResourceOwner.forXyz` methods should also be available on `Resource`?",
        "createdAt" : "2020-02-10T10:05:46Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "ac92a6cb-b643-40bf-bda8-8fb5d6253097",
        "parentId" : "ad4756a5-1dbd-4eba-bf75-1437f0672387",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Does the explicit `acquire` actually change the semantics?",
        "createdAt" : "2020-02-10T10:21:05Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "fd5c6378-20c5-4a2f-87e4-f8702d27bbb6",
        "parentId" : "ad4756a5-1dbd-4eba-bf75-1437f0672387",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Nah. I have a refactoring on the way but it's a big change because I'm making the constructor private, which breaks some stuff, so I'd rather do this in a separate piece of work.",
        "createdAt" : "2020-02-10T12:33:21Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "84e6c618d4689590c8f46682a40a528bbafe76f7",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +68,72 @@      override def acquire()(implicit executionContext: ExecutionContext): Resource[SandboxServer] =\n        for {\n          server <- ResourceOwner.forTryCloseable(() => Try(new SandboxServer(config))).acquire()\n          // Wait for the API server to start.\n          // We use the Future rather than the Resource to avoid holding onto the API server."
  },
  {
    "id" : "f4ee3e22-63c2-493a-9c22-2da9c31c0141",
    "prId" : 4447,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a49ea9e-ca8b-47d8-bf82-affd6b5f3fd2",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Would this make the `DirectExecutionContext` of the actor system?",
        "createdAt" : "2020-02-10T09:45:50Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "d969938e-84f7-40e3-8027-83b5ec303590",
        "parentId" : "9a49ea9e-ca8b-47d8-bf82-affd6b5f3fd2",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Good question. The semantics haven't changed here; it was always the implicit execution context. It appears that `ActorSystem` doesn't take an implicit execution context though, only an explicit one, and we never provide it, which I think means it uses `ExecutionContext.global` (but I'm not sure about that).",
        "createdAt" : "2020-02-10T10:53:38Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "f349bcb6-4c68-4bc6-8e61-84beb9d6da1e",
        "parentId" : "9a49ea9e-ca8b-47d8-bf82-affd6b5f3fd2",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I know how to fix this but it's a fairly big change (because lots of tests call `new SandboxServer` directly) so I'd like to do it separately.",
        "createdAt" : "2020-02-10T12:39:03Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "84e6c618d4689590c8f46682a40a528bbafe76f7",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +163,167 @@\n  private val materializerResource: Resource[Materializer] = {\n    implicit val executionContext: ExecutionContext = DirectExecutionContext\n    for {\n      actorSystem <- AkkaResourceOwner.forActorSystem(() => ActorSystem(ActorSystemName)).acquire()"
  },
  {
    "id" : "d0582381-9872-4266-be9d-f28c15cc5785",
    "prId" : 4447,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e843a66b-3ec2-40cd-95b9-3a48784535e6",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Was the `MetricRegistry` the only resource that was not released properly on reset?",
        "createdAt" : "2020-02-10T09:49:34Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "f0c723bf-4469-4601-bdce-15890820fef1",
        "parentId" : "e843a66b-3ec2-40cd-95b9-3a48784535e6",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Nope, the `SandboxState` (and by extension everything inside it) was being held on to.",
        "createdAt" : "2020-02-10T10:07:31Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "bb3cb9e2-36af-4f56-ab2a-fd4401907d8a",
        "parentId" : "e843a66b-3ec2-40cd-95b9-3a48784535e6",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I see, thanks.",
        "createdAt" : "2020-02-10T10:23:08Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "84e6c618d4689590c8f46682a40a528bbafe76f7",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +221,225 @@  private def buildAndStartApiServer(\n      materializer: Materializer,\n      metrics: MetricRegistry,\n      packageStore: InMemoryPackageStore,\n      startMode: SqlStartMode,"
  },
  {
    "id" : "4c0da287-2b79-4fc8-a340-225145dbe3ac",
    "prId" : 1818,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1818",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30cfd45e-d1ff-473f-b6f5-a64f211bad9b",
        "parentId" : null,
        "authorId" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "body" : "👍 ",
        "createdAt" : "2019-06-28T08:13:25Z",
        "updatedAt" : "2019-07-02T12:24:58Z",
        "lastEditedBy" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "tags" : [
        ]
      }
    ],
    "commit" : "bae23a0a96200d0ece436a646cceb68a50511f37",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +161,165 @@    }\n\n    val packageStore = InMemoryPackageStore.empty\n\n    // TODO is it sensible to have all the initial packages to be known"
  },
  {
    "id" : "51563912-e344-4e0f-83cd-1d817d75cdde",
    "prId" : 1610,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1610",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22518f93-2c28-417c-b310-357ff2872320",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "I think relying on `*Sync` methods here will make it harder to later switch to an SQL backed package store.",
        "createdAt" : "2019-06-13T08:46:57Z",
        "updatedAt" : "2019-06-19T11:34:16Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "c4f7dfd8-e877-4fdd-9e5a-d967e04822a7",
        "parentId" : "22518f93-2c28-417c-b310-357ff2872320",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Currently, the whole sandbox initialization part is hardcoded to work with in-memory data structures:\r\n- The scenario loader depends on `ActiveContractsInMemory` and `InMemoryPackageStore`\r\n- The scenario loader uses `listLfPackagesSync`, and does not use any async code.\r\n- The scenario loader uses its own ledger implementation\r\n\r\nThe scenario is executed before the postgres ledger is initialized. It would be a bigger change to refactor the scenario to be executed on the postgres ledger.",
        "createdAt" : "2019-06-14T12:02:12Z",
        "updatedAt" : "2019-06-19T11:34:16Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "cf9057ef-7b47-422a-9778-f604a5e71a1a",
        "parentId" : "22518f93-2c28-417c-b310-357ff2872320",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "I see. Makes sense then.",
        "createdAt" : "2019-06-14T12:25:04Z",
        "updatedAt" : "2019-06-19T11:34:16Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e866b02c0df2f20dcee08439e1105fe577f0609",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +57,61 @@    // make sure that that's the case\n    if (config.eagerPackageLoading || config.scenario.nonEmpty) {\n      for (pkgId <- packages.listLfPackagesSync().keys) {\n        val pkg = packages.getLfPackageSync(pkgId).get\n        engine"
  },
  {
    "id" : "0e9e14d3-d7f4-4739-801a-7e8ccff6fe0c",
    "prId" : 1278,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52ff34fd-38fd-4c7d-88d1-49a90c6a70b2",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Do we really want to wait until infinity in here?",
        "createdAt" : "2019-05-21T13:43:51Z",
        "updatedAt" : "2019-05-21T13:46:18Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "c28f2345-afa5-4f71-9d62-abfa3dd2b306",
        "parentId" : "52ff34fd-38fd-4c7d-88d1-49a90c6a70b2",
        "authorId" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "body" : "good point, I changed it to use `asyncTolerance`. BTW,  I am blocking here on purpose as it didn't seem reasonable to push the async behaviour further up the stack. We might do it later though.",
        "createdAt" : "2019-05-21T13:47:34Z",
        "updatedAt" : "2019-05-21T13:47:34Z",
        "lastEditedBy" : "e316b0c3-3da9-495c-b0fe-7fb96d032e37",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c78964bdfd67df79aee1708c222fc9bcbfb7383",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +208,212 @@    val stopHeartbeats = scheduleHeartbeats(timeProvider, ledger.publishHeartbeat)\n\n    val apiServer = Await.result(\n      LedgerApiServer.create(\n        (am: ActorMaterializer, esf: ExecutionSequencerFactory) =>"
  }
]