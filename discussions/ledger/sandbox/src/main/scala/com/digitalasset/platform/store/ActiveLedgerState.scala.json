[
  {
    "id" : "0ddbe0e2-7af2-4536-87d2-091a9184e540",
    "prId" : 4400,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "776af91f-1c26-4f6d-8e80-23b723d1a847",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Couldn't you just use `this.type` as the return values, and get rid of the generic-ness altogether?",
        "createdAt" : "2020-02-05T09:46:25Z",
        "updatedAt" : "2020-02-05T09:48:27Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "ae6539e9-07a4-4b1e-9cd4-44e7adb8ec6b",
        "parentId" : "776af91f-1c26-4f6d-8e80-23b723d1a847",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "No. `this.type` is a singleton type and forces to return the very same instance on which the call was made, which is not necessarily the case in implementations (which may be immutable and thus need to return a copy to properly implement the `trait`, behavior-wise). With F-bounded polymorphism we're just restricting to the implementation type. It's more restrictive at compile time than the existing use of covariant return types and allows us to drop the usage of the implicit evidence.",
        "createdAt" : "2020-02-05T09:59:38Z",
        "updatedAt" : "2020-02-05T09:59:39Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "b9bcec54-2e38-4e99-902e-fc516d6ed85d",
        "parentId" : "776af91f-1c26-4f6d-8e80-23b723d1a847",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I'm convinced. ðŸ™‚ ",
        "createdAt" : "2020-02-05T10:21:12Z",
        "updatedAt" : "2020-02-05T10:21:12Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "21a439e77d4640569c2d19adbc1858e4e56aec9c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +51,55 @@\n  /** Called when a new contract is created */\n  def addContract(c: ActiveContract, keyO: Option[GlobalKey]): ALS\n\n  /** Called when the given contract is archived */"
  }
]