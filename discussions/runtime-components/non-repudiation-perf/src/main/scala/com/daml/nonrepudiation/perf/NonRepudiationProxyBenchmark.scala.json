[
  {
    "id" : "a30d70cb-957f-406b-aadd-2857d633f086",
    "prId" : 8916,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c356a7cc-b11d-4eb8-9fe2-48b92f463013",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I checked this by first having commands ready to be shot and comparing it with this. The advantage of this approach is that we can easily create a command with a new identifier for every test, which better simulates actual production conditions.",
        "createdAt" : "2021-02-23T17:54:32Z",
        "updatedAt" : "2021-02-24T15:30:29Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "a7975c43-2976-47fc-90cb-8889ace70181",
        "parentId" : "c356a7cc-b11d-4eb8-9fe2-48b92f463013",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I’m not quite sure what you mean by setter simulating production conditions. Why does generating the commands outside of the benchmark not work?",
        "createdAt" : "2021-02-24T08:49:51Z",
        "updatedAt" : "2021-02-24T15:30:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ff7cad30-dd0f-4947-88f2-a459969921b2",
        "parentId" : "c356a7cc-b11d-4eb8-9fe2-48b92f463013",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Because we would have to generate a lot of them in advance in order to consume them. I've tried generating 5000 commands beforehand but it consumed all of them after 3 warm-up rounds. With 100 KB payload sizes generating too many of them beforehand becomes unfeasible.\r\n\r\nInitially I was re-using the same command over and over again, but this means that this benchmark cannot be used for longer runs to check that performance are stable with a larger number of commands being stored on the back-end. This is what I was referring to when I said that it \" better simulates actual production conditions\" (as in, not writing a command with the same command identifier over and over again).\r\n\r\nNote that I was conservative in writing \"very little noise\", from my tests the difference is imperceptible. Consider that the cost of generating a command is negligible (especially by keeping the payload the same) compared to accessing the database.\r\n\r\nMakes sense? Should I put if differently in the comment? I realize now this comment makes sense to me due to the fact I'm aware of the context, but is probably not very helpful for readers.",
        "createdAt" : "2021-02-24T12:44:57Z",
        "updatedAt" : "2021-02-24T15:30:29Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "f87674e1-7905-4d48-9fd1-fe7889e8f555",
        "parentId" : "c356a7cc-b11d-4eb8-9fe2-48b92f463013",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "makes sense, I think I just didn’t think about the costs of 5000 100KB payloads that we would need to generate upfront. The comment is fine.",
        "createdAt" : "2021-02-24T12:52:00Z",
        "updatedAt" : "2021-02-24T15:30:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "d107795813987a3fcd3fbfc6b7d3d72fa9b6c7cd",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +45,49 @@  @Benchmark\n  def run(): Unit = {\n    // Generating commands adds very little noise to substantial benchmarks\n    val command = generateCommand(payload)\n    val _ = stub.submit(command)"
  },
  {
    "id" : "a4391399-1a4f-437b-b042-f97d8d4e0ae2",
    "prId" : 8916,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbbe2bae-c06e-4f06-abb7-ab910a86239a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I’m curious, why do you prefer `_` here? I tend to set things explicitly to the default myself but I’m sure there are advantages to the approach you’ve chosen here.",
        "createdAt" : "2021-02-24T08:41:56Z",
        "updatedAt" : "2021-02-24T15:30:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "96bf4e6b-a7f9-4553-9043-87ab0431f365",
        "parentId" : "cbbe2bae-c06e-4f06-abb7-ab910a86239a",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Honestly I wasn't really thinking about it, I don't really have a preference. Considering that JMH injects the parameters in the generated code, using `_` can (incidentally) be less confusing. Not sure. Thoughts?",
        "createdAt" : "2021-02-24T13:00:51Z",
        "updatedAt" : "2021-02-24T15:30:29Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "17942141-00e0-4795-8229-388499a9826d",
        "parentId" : "cbbe2bae-c06e-4f06-abb7-ab910a86239a",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Seems fine, I guess it’s a nice way of saying \"this value won’t be used\". A bit of a shame that it won’t blow up if the value is used but I guess not much we can do about that.",
        "createdAt" : "2021-02-24T13:05:48Z",
        "updatedAt" : "2021-02-24T15:30:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "d107795813987a3fcd3fbfc6b7d3d72fa9b6c7cd",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@\n  @Param(Array(\"100000\"))\n  var commandPayloadSize: Int = _\n\n  @Param(Array(\"false\"))"
  }
]