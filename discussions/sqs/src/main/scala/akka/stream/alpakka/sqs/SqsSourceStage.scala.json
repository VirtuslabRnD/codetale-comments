[
  {
    "id" : "8fb0efd0-577a-4aa5-a5bd-ded10d45f7ca",
    "prId" : 163,
    "prUrl" : "https://github.com/akka/alpakka/pull/163#pullrequestreview-28644190",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0de6cba-cc3f-4412-b920-39ea59b1c19a",
        "parentId" : null,
        "authorId" : "66dc8fce-0bb7-4fe0-8003-35c38623ee9a",
        "body" : "Typo in the message, should be:\r\n\r\n```\r\n    \"Invalid value for maxBatchSize. Requirement: 1 <= maxBatchSize <= 10 \")\r\n```",
        "createdAt" : "2017-03-23T12:55:51Z",
        "updatedAt" : "2017-03-23T12:55:51Z",
        "lastEditedBy" : "66dc8fce-0bb7-4fe0-8003-35c38623ee9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6d19fb375229129d8a61ca4988f40f877a8f2ff",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +33,37 @@    \"Invalid value for waitTimeSeconds. Requirement: 0 <= waitTimeSeconds <= 20 \")\n  require(maxBatchSize >= 1 && maxBatchSize <= 10,\n    \"Invalid value for maxBatchSize. Requirement: 1 <= waitTimeSeconds <= 10 \")\n}\n//#SqsSourceSettings"
  },
  {
    "id" : "aa9a8a0c-e502-45b1-87a2-a22b74ea681c",
    "prId" : 163,
    "prUrl" : "https://github.com/akka/alpakka/pull/163#pullrequestreview-28644510",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c26a8df9-c9ce-4823-941c-f8bdf4a5e1c2",
        "parentId" : null,
        "authorId" : "66dc8fce-0bb7-4fe0-8003-35c38623ee9a",
        "body" : "good",
        "createdAt" : "2017-03-23T12:57:18Z",
        "updatedAt" : "2017-03-23T12:57:18Z",
        "lastEditedBy" : "66dc8fce-0bb7-4fe0-8003-35c38623ee9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6d19fb375229129d8a61ca4988f40f877a8f2ff",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +46,50 @@    new GraphStageLogic(shape) {\n\n      private val maxConcurrency = settings.maxBufferSize / settings.maxBatchSize\n      private val buffer = new util.ArrayDeque[Message]()\n"
  },
  {
    "id" : "489b7b69-0965-4d58-9e34-0fe7eafca865",
    "prId" : 163,
    "prUrl" : "https://github.com/akka/alpakka/pull/163#pullrequestreview-28644652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cba9c92-a51e-4729-97bc-3855b80833d8",
        "parentId" : null,
        "authorId" : "66dc8fce-0bb7-4fe0-8003-35c38623ee9a",
        "body" : "Would `inflightRequests` easier to grasp what it means for future maintanance?",
        "createdAt" : "2017-03-23T12:58:05Z",
        "updatedAt" : "2017-03-23T12:58:05Z",
        "lastEditedBy" : "66dc8fce-0bb7-4fe0-8003-35c38623ee9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6d19fb375229129d8a61ca4988f40f877a8f2ff",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +63,67 @@      def receiveMessages(): Unit = {\n\n        currentRequests = currentRequests + 1\n\n        val request = new ReceiveMessageRequest(queueUrl)"
  },
  {
    "id" : "8ecd289f-44c1-4f07-bed7-6d5d35b2a31c",
    "prId" : 59,
    "prUrl" : "https://github.com/akka/alpakka/pull/59#pullrequestreview-8743462",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dda2ded5-eb70-4e7d-b2d3-11cebe2df5ab",
        "parentId" : null,
        "authorId" : "c19c8d76-33c4-40a3-9689-a242b7771db5",
        "body" : "can we  receive messages to buffer asynchronously while downstream is pulling them?\n",
        "createdAt" : "2016-11-16T03:10:38Z",
        "updatedAt" : "2016-11-30T20:02:59Z",
        "lastEditedBy" : "c19c8d76-33c4-40a3-9689-a242b7771db5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4c291666e6efeda26dfe218e47c8f57dd809a25",
    "line" : null,
    "diffHunk" : "@@ -1,1 +76,80 @@            push(out, buffer.removeLast())\n          } else {\n            receiveMessages()\n          }\n      })"
  },
  {
    "id" : "8ea3ff15-eafc-4b70-85c2-6c87eae95664",
    "prId" : 59,
    "prUrl" : "https://github.com/akka/alpakka/pull/59#pullrequestreview-8748103",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7439ef0-7085-4e78-b70d-40c7a2f71f81",
        "parentId" : null,
        "authorId" : "c19c8d76-33c4-40a3-9689-a242b7771db5",
        "body" : "need to mention somewhere that this will init thread pool of 50 threads\n",
        "createdAt" : "2016-11-16T03:14:24Z",
        "updatedAt" : "2016-11-30T20:02:59Z",
        "lastEditedBy" : "c19c8d76-33c4-40a3-9689-a242b7771db5",
        "tags" : [
        ]
      },
      {
        "id" : "2fbb7923-03fa-44b3-a01d-e99eb60b224f",
        "parentId" : "d7439ef0-7085-4e78-b70d-40c7a2f71f81",
        "authorId" : "0f272feb-7ee2-4dfb-8dfd-213c2fe9eaca",
        "body" : "The threadpool get's configured on the cient itself not on the receive method. You are right that maybe users won't change the threadpool size. The only thin that could be changed in my opinion is to create an own AmazonSqsAsyncClient and configure it. (pushing the thread count as a setting into the Settings case class)\n",
        "createdAt" : "2016-11-16T04:29:06Z",
        "updatedAt" : "2016-11-30T20:02:59Z",
        "lastEditedBy" : "0f272feb-7ee2-4dfb-8dfd-213c2fe9eaca",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4c291666e6efeda26dfe218e47c8f57dd809a25",
    "line" : null,
    "diffHunk" : "@@ -1,1 +43,47 @@          .withWaitTimeSeconds(settings.longPollingDuration.toSeconds.toInt)\n\n        sqsClient.receiveMessageAsync(request, new AsyncHandler[ReceiveMessageRequest, ReceiveMessageResult] {\n          override def onError(e: Exception): Unit =\n            failureCallback.invoke(e)"
  },
  {
    "id" : "e012a53a-4c20-423c-ac5d-373bfb60ac57",
    "prId" : 59,
    "prUrl" : "https://github.com/akka/alpakka/pull/59#pullrequestreview-9079806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b01068a8-b8b2-465b-a77c-0ce860cee54b",
        "parentId" : null,
        "authorId" : "b8cd968d-9321-417f-8dcf-5300bfdd199e",
        "body" : "should we simplify it by only using one `maxBufferSize` setting and trigger receiveMessages when `maxBufferSize / 2`?\n",
        "createdAt" : "2016-11-16T14:41:38Z",
        "updatedAt" : "2016-11-30T20:02:59Z",
        "lastEditedBy" : "b8cd968d-9321-417f-8dcf-5300bfdd199e",
        "tags" : [
        ]
      },
      {
        "id" : "fef089f3-4089-4954-9c89-ce6597695666",
        "parentId" : "b01068a8-b8b2-465b-a77c-0ce860cee54b",
        "authorId" : "0f272feb-7ee2-4dfb-8dfd-213c2fe9eaca",
        "body" : "I am not sure about that, it also depends on the implementation of the `OutHandler`. Right now it's implemented like that, to ensure that `OutHandler.onPull` doesn't request as long as `handleSuccess` would do another request (without tracking the current requests). \n\nRequest until buffer full (if consumer slower than producer) -> Don't request until exactly `maxBatchSize` is free in the buffer -> Request again (from `OutHandler.onPull` which will force `handleSuccess` to do more requests if the buffer has still space for `maxBatch` elements.\n\nRequest until buffer full (if consumer slower than producer) -> Don't request until exactly buffer is half empty -> Request again (from `OutHandler.onPull` which will force `handleSuccess` to do more requests if the buffer is still not full. \n",
        "createdAt" : "2016-11-16T15:51:01Z",
        "updatedAt" : "2016-11-30T20:02:59Z",
        "lastEditedBy" : "0f272feb-7ee2-4dfb-8dfd-213c2fe9eaca",
        "tags" : [
        ]
      },
      {
        "id" : "92907796-df15-4d38-9fa9-e12b3406c0a5",
        "parentId" : "b01068a8-b8b2-465b-a77c-0ce860cee54b",
        "authorId" : "b8cd968d-9321-417f-8dcf-5300bfdd199e",
        "body" : "ok, please add a `require` in the settings that `maxBatchSize <= maxBufferSize` (if that is not already done)\n",
        "createdAt" : "2016-11-17T17:50:02Z",
        "updatedAt" : "2016-11-30T20:02:59Z",
        "lastEditedBy" : "b8cd968d-9321-417f-8dcf-5300bfdd199e",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4c291666e6efeda26dfe218e47c8f57dd809a25",
    "line" : null,
    "diffHunk" : "@@ -1,1 +63,67 @@        }\n\n        if (buffer.size < settings.maxBufferSize - settings.maxBatchSize) {\n          receiveMessages()\n        }"
  }
]