[
  {
    "id" : "aec9220b-6f38-4a6a-9ae5-369035f23f75",
    "prId" : 425,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/425#pullrequestreview-11662704",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8400c29c-42fb-4c1a-97a0-fdc3f35d7288",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Storing all the results and then presenting them later is a great idea. ",
        "createdAt" : "2016-12-06T21:23:11Z",
        "updatedAt" : "2016-12-07T10:40:30Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "abb884890cc11f69e7fb66c25f7674695a8fa8e5",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +4,8 @@\ncase class BenchmarkCompleted(override val name: String,\n                              timesNs: Seq[Long],\n                              override val success: Boolean)\n    extends BenchmarkResult(name, success)"
  },
  {
    "id" : "d44e6063-c834-40db-ae4c-2c8b9cf58010",
    "prId" : 364,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/364#pullrequestreview-8606157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b0d0060-422b-4a24-a25d-0d144865dd1a",
        "parentId" : null,
        "authorId" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "body" : "it would be nice to ensure that `run` isn't inlined.\n",
        "createdAt" : "2016-11-15T13:56:18Z",
        "updatedAt" : "2016-11-15T14:24:33Z",
        "lastEditedBy" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "tags" : [
        ]
      },
      {
        "id" : "3fe49fc5-630c-4674-ae31-02da7e626dca",
        "parentId" : "9b0d0060-422b-4a24-a25d-0d144865dd1a",
        "authorId" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "body" : "As `run` does not take any arguments, wouldn't it be better to make in an entry point which is supposed to be run by `perf`? this will ensure that you don't need to invent your own measurement ways and ways to make sure you don't optimize acrross runs. \n",
        "createdAt" : "2016-11-15T14:16:51Z",
        "updatedAt" : "2016-11-15T14:24:33Z",
        "lastEditedBy" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "tags" : [
        ]
      }
    ],
    "commit" : "78489fbac8f829c74faa3744c0e1240b75b36be0",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +39,43 @@\nabstract class Benchmark[T] {\n  def run(): T\n  def check(t: T): Boolean\n"
  },
  {
    "id" : "b084dbdc-b0df-4d5c-9611-609720e73ce4",
    "prId" : 364,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/364#pullrequestreview-11161919",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "353cc19f-ee93-442c-b671-820e4a73fa0a",
        "parentId" : null,
        "authorId" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "body" : "I'm not sure what kind of check does benchmark do\n",
        "createdAt" : "2016-11-15T13:56:44Z",
        "updatedAt" : "2016-11-15T14:24:33Z",
        "lastEditedBy" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "tags" : [
        ]
      },
      {
        "id" : "4bda6b24-0f29-4d96-99b9-31ca6f0071e1",
        "parentId" : "353cc19f-ee93-442c-b671-820e4a73fa0a",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "It checks that computed result value is the same as expected. This is a sanity check.",
        "createdAt" : "2016-12-02T13:40:28Z",
        "updatedAt" : "2016-12-02T13:40:28Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "78489fbac8f829c74faa3744c0e1240b75b36be0",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@abstract class Benchmark[T] {\n  def run(): T\n  def check(t: T): Boolean\n\n  private class BenchmarkDisabledException extends Exception"
  },
  {
    "id" : "a042af13-609d-48f3-95d1-48c7ad655a1e",
    "prId" : 364,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/364#pullrequestreview-8606157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05a9f48d-f40e-4935-9ce0-963d94bca355",
        "parentId" : null,
        "authorId" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "body" : "`max = math.max(max, elapsed)`\nsame for min\n",
        "createdAt" : "2016-11-15T13:57:39Z",
        "updatedAt" : "2016-11-15T14:24:33Z",
        "lastEditedBy" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "tags" : [
        ]
      }
    ],
    "commit" : "78489fbac8f829c74faa3744c0e1240b75b36be0",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +65,69 @@        success = success && check(result)\n        val elapsed = end - start\n        if (elapsed > max) max = elapsed\n        if (elapsed < min) min = elapsed\n      }"
  },
  {
    "id" : "6b686cbb-b3e5-439c-9ea6-2395bc8f6556",
    "prId" : 364,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/364#pullrequestreview-11161386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e91a8ff5-71e4-4927-b037-12be92c4c219",
        "parentId" : null,
        "authorId" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "body" : "it would be nice to store the actual numbers and report:\n- average\n- stddeviation\n- median\n- 95% percentile\n- 5% percentile.\n- average only between runs that fall in between 5 & 95 percentiles. \n",
        "createdAt" : "2016-11-15T13:59:45Z",
        "updatedAt" : "2016-11-15T14:24:33Z",
        "lastEditedBy" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "tags" : [
        ]
      },
      {
        "id" : "449ac1e5-5335-4205-9958-7b09991ab91e",
        "parentId" : "e91a8ff5-71e4-4927-b037-12be92c4c219",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Great suggestion, this one we should definitely do.",
        "createdAt" : "2016-12-02T13:36:54Z",
        "updatedAt" : "2016-12-02T13:36:54Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "78489fbac8f829c74faa3744c0e1240b75b36be0",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +69,73 @@      }\n      val totalTime = System.nanoTime() - t0\n      val average   = totalTime / iterations\n\n      BenchmarkCompleted(this.getClass.getName,"
  },
  {
    "id" : "11d2f324-cfd6-49ef-a2c4-8a227a27a617",
    "prId" : 364,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/364#pullrequestreview-11161848",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3173c5d9-eb7c-408d-b3ae-624653c212f6",
        "parentId" : null,
        "authorId" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "body" : "I don't know how exceptions are implemented here and if it would affect the benchmarking framework.\n",
        "createdAt" : "2016-11-15T14:17:42Z",
        "updatedAt" : "2016-11-15T14:24:33Z",
        "lastEditedBy" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "tags" : [
        ]
      },
      {
        "id" : "b9a31347-6a8e-4e66-9f8d-333c97185a84",
        "parentId" : "3173c5d9-eb7c-408d-b3ae-624653c212f6",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Exceptions are free as long as you don't throw them. Throwing and unwinding is expensive. ",
        "createdAt" : "2016-12-02T13:39:53Z",
        "updatedAt" : "2016-12-02T13:39:53Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "78489fbac8f829c74faa3744c0e1240b75b36be0",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +42,46 @@  def check(t: T): Boolean\n\n  private class BenchmarkDisabledException extends Exception\n  final def disableBenchmark(): Nothing = throw new BenchmarkDisabledException\n"
  },
  {
    "id" : "0afc65ee-dd31-44fe-b8f7-f5be0c3e23f6",
    "prId" : 364,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/364#pullrequestreview-11161706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c14c2866-8819-4556-a80b-5d0771075200",
        "parentId" : null,
        "authorId" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "body" : "is there a way to get a monotonic time counter in native?\n\nsame for all calls to `nanoTime`.\n",
        "createdAt" : "2016-11-15T14:18:51Z",
        "updatedAt" : "2016-11-15T14:24:33Z",
        "lastEditedBy" : "7f86f120-7838-4bea-9217-738bb0d42f82",
        "tags" : [
        ]
      },
      {
        "id" : "75040bae-65c1-4190-ac08-9afa92b2790b",
        "parentId" : "c14c2866-8819-4556-a80b-5d0771075200",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "AFAIK what we have is monotonic on linux https://github.com/scala-native/scala-native/blob/master/nativelib/src/main/resources/time.c#L23",
        "createdAt" : "2016-12-02T13:39:04Z",
        "updatedAt" : "2016-12-02T13:39:04Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "78489fbac8f829c74faa3744c0e1240b75b36be0",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +46,50 @@\n  final def estimateTime(): Long = {\n    val start = System.nanoTime()\n    val _     = try { run() } catch { case _: Throwable => () }\n    System.nanoTime() - start"
  }
]