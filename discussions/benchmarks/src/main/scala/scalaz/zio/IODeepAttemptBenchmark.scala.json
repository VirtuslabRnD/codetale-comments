[
  {
    "id" : "6db00e01-838d-4f9e-b90e-7a1b3176c298",
    "prId" : 518,
    "prUrl" : "https://github.com/zio/zio/pull/518#pullrequestreview-194918464",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "260efdf0-7eb8-464f-b37d-bd0351aec3ab",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This does not look lazy to me. Is there some way you can fix that?",
        "createdAt" : "2019-01-19T17:30:51Z",
        "updatedAt" : "2019-01-30T16:12:13Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "917e7dea-15f3-4663-ac49-74460a279fdc",
        "parentId" : "260efdf0-7eb8-464f-b37d-bd0351aec3ab",
        "authorId" : "08086402-b043-4922-9d54-44a7713185f6",
        "body" : "both CompletableFuture, and twitter.Future are eagerly evaluated\r\nand are a reflection of scala Future benchmarks implementation\r\n\r\ni don't really see a way to change this behaviour",
        "createdAt" : "2019-01-22T09:56:44Z",
        "updatedAt" : "2019-01-30T16:12:13Z",
        "lastEditedBy" : "08086402-b043-4922-9d54-44a7713185f6",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7d9dc4ba4793ae8deafb51b7119816afd8aebb9",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +57,61 @@      }\n\n    descent(0).get()\n  }\n"
  },
  {
    "id" : "dff78b09-9c48-4f17-909d-60aa62cfa4c7",
    "prId" : 518,
    "prUrl" : "https://github.com/zio/zio/pull/518#pullrequestreview-194363688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66c09063-a77e-479f-a400-fd4069b7d791",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Ditto.",
        "createdAt" : "2019-01-19T17:31:07Z",
        "updatedAt" : "2019-01-30T16:12:13Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7d9dc4ba4793ae8deafb51b7119816afd8aebb9",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +101,105 @@        descent(n + 1).handle { case _ => 50 } else descent(n + 1).map(_ + n)\n\n    Await.result(descent(0))\n  }\n"
  },
  {
    "id" : "f01c9c93-4087-406c-aa9b-3aeb60c3035b",
    "prId" : 46,
    "prUrl" : "https://github.com/zio/zio/pull/46#pullrequestreview-130217553",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e645880-2121-4880-819f-af54b39b7d39",
        "parentId" : null,
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "Was this change necessary or just cosmetic? Did `Future` API changed? Just asking, I'm ok if it's cosmetic, looks much nicer this way.\r\nHave you run the benchmarks to compare to previous results and see if it still makes sense?",
        "createdAt" : "2018-06-20T00:47:08Z",
        "updatedAt" : "2018-06-20T00:50:57Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      },
      {
        "id" : "e52f75c2-c831-4078-8130-178d5ab52713",
        "parentId" : "5e645880-2121-4880-819f-af54b39b7d39",
        "authorId" : "9faaa606-5ddc-471e-998d-3363e1998776",
        "body" : "2.11's Future doesn't have `def transform[S](f: Try[T] => Try[S])`\r\n\r\nI've run/compared the jmh benchmarks briefly, they look similar enough.",
        "createdAt" : "2018-06-20T01:29:19Z",
        "updatedAt" : "2018-06-20T01:29:19Z",
        "lastEditedBy" : "9faaa606-5ddc-471e-998d-3363e1998776",
        "tags" : [
        ]
      },
      {
        "id" : "dd5c2219-3ff5-45da-9415-63fb108d8881",
        "parentId" : "5e645880-2121-4880-819f-af54b39b7d39",
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "I guess, to be fair with all the competitors, if `transform` was chosen b/c of performance reasons we should split that benchmark into 2.11 and 2.12 implementations. It can be a separate PR, if that makes sense at all, coz `Future` is way way behind in the numbers.",
        "createdAt" : "2018-06-20T01:38:11Z",
        "updatedAt" : "2018-06-20T01:38:11Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      },
      {
        "id" : "8dfa177c-a10e-485d-9961-4419c419e62a",
        "parentId" : "5e645880-2121-4880-819f-af54b39b7d39",
        "authorId" : "9faaa606-5ddc-471e-998d-3363e1998776",
        "body" : "Maybe chosen to avoid partial functions rather than for performance.",
        "createdAt" : "2018-06-20T01:55:58Z",
        "updatedAt" : "2018-06-20T01:55:58Z",
        "lastEditedBy" : "9faaa606-5ddc-471e-998d-3363e1998776",
        "tags" : [
        ]
      }
    ],
    "commit" : "2664058e5e95ee37a97d778d52e2d81a64bbd715",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +34,38 @@    def descend(n: Int): Future[BigInt] =\n      if (n == depth) Future.failed(new Exception(\"Oh noes!\"))\n      else if (n == halfway) descend(n + 1).recover { case _ => 50 } else descend(n + 1).map(_ + n)\n\n    Await.result(descend(0), Inf)"
  }
]