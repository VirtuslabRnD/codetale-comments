[
  {
    "id" : "9968be36-633a-4ef4-aabb-dec570cbc2bf",
    "prId" : 22751,
    "prUrl" : "https://github.com/RocketChat/Rocket.Chat/pull/22751#pullrequestreview-716301122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63f81396-5e9f-4495-84c2-66dcdb5adeab",
        "parentId" : null,
        "authorId" : "abb054e6-b771-4069-83f6-eac631c0a29d",
        "body" : "Curious as to why you used `Object.assign` here ðŸ¤“ Is it just a shortcut to writing `GenericTable.HeaderCell = HeaderCell;` in the line above? Or is there another reason?",
        "createdAt" : "2021-07-27T17:34:52Z",
        "updatedAt" : "2021-07-27T17:34:52Z",
        "lastEditedBy" : "abb054e6-b771-4069-83f6-eac631c0a29d",
        "tags" : [
        ]
      },
      {
        "id" : "fd0c9cab-a24f-488e-b86f-d86e8d27e708",
        "parentId" : "63f81396-5e9f-4495-84c2-66dcdb5adeab",
        "authorId" : "a3b8456e-b33e-4ac5-ab31-e5caf329a69a",
        "body" : "Oh boy, you are the right guy to ask me this one. `GenericTable` has a function type (kind of `(props: any) => ReactElement`) defined at `'./GenericTable'`. It doesn't provide any mechanism to extend it while changing the concrete value: `GenericTable.HeaderCell = HeaderCell ;` would trigger an error for me because `GenericTable`'s type is not an extension of `{ HeaderCell: (props: any) => ReactElement; }`. I've noticed that `Object.assign()` intersects the types of its arguments, so we get `{ (props: any): ReactElement; HeaderCell: (props: any) => ReactElement; }` at the return type.",
        "createdAt" : "2021-07-27T19:15:18Z",
        "updatedAt" : "2021-07-27T19:15:18Z",
        "lastEditedBy" : "a3b8456e-b33e-4ac5-ab31-e5caf329a69a",
        "tags" : [
        ]
      },
      {
        "id" : "774c5383-8d25-4a7e-adfc-d825257555ac",
        "parentId" : "63f81396-5e9f-4495-84c2-66dcdb5adeab",
        "authorId" : "abb054e6-b771-4069-83f6-eac631c0a29d",
        "body" : "Got it! \r\n\r\nDoes this generate a side-effect? I mean, if someone imported from the `./GenericTable` file directly, the `GenericTable` exported there would also have the `HeaderCell` object due to `Object.assign`?\r\n\r\nOf course, that wouldn't be a problem; TS wouldn't consider the original object to contain `HeaderCell` and I guess even the usual `console.log` would not print it there, it could only be confusing if you tried to see `GenericTable`'s keys with `Object.keys` or other similar functions. Just asking, again, out of curiosity ðŸ˜› ",
        "createdAt" : "2021-07-27T19:31:27Z",
        "updatedAt" : "2021-07-27T19:31:27Z",
        "lastEditedBy" : "abb054e6-b771-4069-83f6-eac631c0a29d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f937db01e883d13c1844ef08f0d8444c5ad8509",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2,6 @@import HeaderCell from './HeaderCell';\n\nexport default Object.assign(GenericTable, {\n\tHeaderCell,\n});"
  },
  {
    "id" : "8196cf35-49a7-40dc-a762-5d646f500ecb",
    "prId" : 22751,
    "prUrl" : "https://github.com/RocketChat/Rocket.Chat/pull/22751#pullrequestreview-716301122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c076a995-5476-4c32-b910-d4b6c53f20b5",
        "parentId" : null,
        "authorId" : "abb054e6-b771-4069-83f6-eac631c0a29d",
        "body" : "Curious as to why you used `Object.assign` here ðŸ¤“ Is it just a shortcut to writing `GenericTable.HeaderCell = HeaderCell;` in the line above? Or is there another reason?",
        "createdAt" : "2021-07-27T17:34:52Z",
        "updatedAt" : "2021-07-27T17:34:52Z",
        "lastEditedBy" : "abb054e6-b771-4069-83f6-eac631c0a29d",
        "tags" : [
        ]
      },
      {
        "id" : "31101154-a332-439c-8120-bf35413d048f",
        "parentId" : "c076a995-5476-4c32-b910-d4b6c53f20b5",
        "authorId" : "a3b8456e-b33e-4ac5-ab31-e5caf329a69a",
        "body" : "Oh boy, you are the right guy to ask me this one. `GenericTable` has a function type (kind of `(props: any) => ReactElement`) defined at `'./GenericTable'`. It doesn't provide any mechanism to extend it while changing the concrete value: `GenericTable.HeaderCell = HeaderCell ;` would trigger an error for me because `GenericTable`'s type is not an extension of `{ HeaderCell: (props: any) => ReactElement; }`. I've noticed that `Object.assign()` intersects the types of its arguments, so we get `{ (props: any): ReactElement; HeaderCell: (props: any) => ReactElement; }` at the return type.",
        "createdAt" : "2021-07-27T19:15:18Z",
        "updatedAt" : "2021-07-27T19:15:18Z",
        "lastEditedBy" : "a3b8456e-b33e-4ac5-ab31-e5caf329a69a",
        "tags" : [
        ]
      },
      {
        "id" : "24fdabfa-eb4f-4e62-bf0f-9606bfa3a762",
        "parentId" : "c076a995-5476-4c32-b910-d4b6c53f20b5",
        "authorId" : "abb054e6-b771-4069-83f6-eac631c0a29d",
        "body" : "Got it! \r\n\r\nDoes this generate a side-effect? I mean, if someone imported from the `./GenericTable` file directly, the `GenericTable` exported there would also have the `HeaderCell` object due to `Object.assign`?\r\n\r\nOf course, that wouldn't be a problem; TS wouldn't consider the original object to contain `HeaderCell` and I guess even the usual `console.log` would not print it there, it could only be confusing if you tried to see `GenericTable`'s keys with `Object.keys` or other similar functions. Just asking, again, out of curiosity ðŸ˜› ",
        "createdAt" : "2021-07-27T19:31:27Z",
        "updatedAt" : "2021-07-27T19:31:27Z",
        "lastEditedBy" : "abb054e6-b771-4069-83f6-eac631c0a29d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f937db01e883d13c1844ef08f0d8444c5ad8509",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2,6 @@import HeaderCell from './HeaderCell';\n\nexport default Object.assign(GenericTable, {\n\tHeaderCell,\n});"
  }
]