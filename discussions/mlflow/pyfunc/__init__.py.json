[
  {
    "id" : "f41b45dd-ceb2-48a6-9da4-54919d1f9b21",
    "prId" : 4236,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4236#pullrequestreview-636944684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "945aaed7-72e1-401c-9a9b-72344a8dfcba",
        "parentId" : null,
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "can we check if the model has input schema with no column names? and raise an error in that case?",
        "createdAt" : "2021-04-15T17:10:40Z",
        "updatedAt" : "2021-04-16T21:45:38Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "644eb9b1-a5f0-4a2b-b332-f195ca8a33c4",
        "parentId" : "945aaed7-72e1-401c-9a9b-72344a8dfcba",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "Actually, would it be fair to say that we do not support models with empty argument list that have no signature? And just raise an error whenever there is an empty argument list but no signature (or one with unnamed columns)? \r\n\r\nI think this would lead to much better user experience for the common case. It is possible there is not a single model with no arguments that is being deployed this way.  ",
        "createdAt" : "2021-04-15T17:22:16Z",
        "updatedAt" : "2021-04-16T21:45:38Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8189577ac80363f4953ad53cae37474090ecc58",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +880,884 @@                    \"specified as arguments or inferred from the model signature.\"\n                )\n                return udf()\n        else:\n            return udf(*args)"
  },
  {
    "id" : "efd4b0c9-e0ac-46f0-adbd-07d240077742",
    "prId" : 4084,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4084#pullrequestreview-589093045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b5b4ddb-8324-4982-a258-e3a68bee27ee",
        "parentId" : null,
        "authorId" : "7dc30493-29f9-4bc4-bf26-00054b8b0b57",
        "body" : "Suppose the stored spec is (-1,28,28,3) and a user passes a single input of (28,28,3), I think we should allow that input.\r\nIt will fail the check here.",
        "createdAt" : "2021-02-11T23:18:03Z",
        "updatedAt" : "2021-02-12T00:46:12Z",
        "lastEditedBy" : "7dc30493-29f9-4bc4-bf26-00054b8b0b57",
        "tags" : [
        ]
      },
      {
        "id" : "3cfc68e9-6a63-42dd-87a2-4bec4b1ccd83",
        "parentId" : "6b5b4ddb-8324-4982-a258-e3a68bee27ee",
        "authorId" : "7dc30493-29f9-4bc4-bf26-00054b8b0b57",
        "body" : "cc @tomasatdatabricks \r\n",
        "createdAt" : "2021-02-11T23:18:14Z",
        "updatedAt" : "2021-02-12T00:46:12Z",
        "lastEditedBy" : "7dc30493-29f9-4bc4-bf26-00054b8b0b57",
        "tags" : [
        ]
      },
      {
        "id" : "bab92a3d-7042-4225-857a-23b8b574ebec",
        "parentId" : "6b5b4ddb-8324-4982-a258-e3a68bee27ee",
        "authorId" : "6df779be-baaa-40f8-bfb9-de44c59eb7af",
        "body" : "hm, i think it makes more sense to always expect input to be a batch (i believe tf and other frameworks i've used in the past have this expectation too)",
        "createdAt" : "2021-02-11T23:49:19Z",
        "updatedAt" : "2021-02-12T00:46:12Z",
        "lastEditedBy" : "6df779be-baaa-40f8-bfb9-de44c59eb7af",
        "tags" : [
        ]
      },
      {
        "id" : "533b3864-354a-4535-bf13-89f9d9150710",
        "parentId" : "6b5b4ddb-8324-4982-a258-e3a68bee27ee",
        "authorId" : "7dc30493-29f9-4bc4-bf26-00054b8b0b57",
        "body" : "I think that makes sense. \r\nWhat about the other way, the stored spec does not contain a batch (28, 28, 3) and the input contains a batch?",
        "createdAt" : "2021-02-11T23:58:41Z",
        "updatedAt" : "2021-02-12T00:46:12Z",
        "lastEditedBy" : "7dc30493-29f9-4bc4-bf26-00054b8b0b57",
        "tags" : [
        ]
      },
      {
        "id" : "05d14e9d-d8f6-4de1-a450-bf2114da061f",
        "parentId" : "6b5b4ddb-8324-4982-a258-e3a68bee27ee",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "I think we should always honor the expected shape as the DL frameworks do.  ",
        "createdAt" : "2021-02-12T00:08:43Z",
        "updatedAt" : "2021-02-12T00:46:12Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4d8ac74aa10a9c4f369b7bb631b00510c3b9789",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +377,381 @@    expected_shape = tensor_spec.shape\n    actual_shape = values.shape\n    if len(expected_shape) != len(actual_shape):\n        raise MlflowException(\n            \"Shape of input {0} does not match expected shape {1}.\".format("
  },
  {
    "id" : "44f8f8e9-7034-49a6-8b17-aad13558afbf",
    "prId" : 3798,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3798#pullrequestreview-550658785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b196686-629d-443e-8949-ab574f0399fb",
        "parentId" : null,
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "NB: comparison of pandas and numpy data type fails when numpy data type is on the left hand side of the comparison operator. It works, however, if pandas type is on the left hand side. That is because pandas is aware of numpy. ",
        "createdAt" : "2020-12-08T21:19:02Z",
        "updatedAt" : "2020-12-12T00:51:57Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "05505921-4692-474f-9a5e-69490e716417",
        "parentId" : "8b196686-629d-443e-8949-ab574f0399fb",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Can we add this helpful NB into the code as an inline comment?",
        "createdAt" : "2020-12-11T22:14:05Z",
        "updatedAt" : "2020-12-12T00:51:57Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "dcadabd0-4145-4e56-9e4e-67ef5d88cc27",
        "parentId" : "8b196686-629d-443e-8949-ab574f0399fb",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "that makes sense!",
        "createdAt" : "2020-12-12T00:16:08Z",
        "updatedAt" : "2020-12-12T00:51:57Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "243b813a2c8dba66f5f74327e818cac147bf682d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +315,319 @@    # side of the comparison operator. It works, however, if pandas type is on the left hand side.\n    # That is because pandas is aware of numpy.\n    if t.to_pandas() == values.dtype or t.to_numpy() == values.dtype:\n        # The types are already compatible => conversion is not necessary.\n        return values"
  },
  {
    "id" : "6de96cfb-41ac-42d0-a2e8-5fecd8f40484",
    "prId" : 3798,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3798#pullrequestreview-547641393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffff8961-2bc8-46ae-a72e-c81e4ff1811b",
        "parentId" : null,
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "Allow cast of unsigned int to a (larger) signed int type. For example, uint8 can be safely converted to int32.",
        "createdAt" : "2020-12-08T21:20:27Z",
        "updatedAt" : "2020-12-12T00:51:57Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "243b813a2c8dba66f5f74327e818cac147bf682d",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +328,332 @@    if values.dtype.kind == numpy_type.kind:\n        is_upcast = values.dtype.itemsize <= numpy_type.itemsize\n    elif values.dtype.kind == \"u\" and numpy_type.kind == \"i\":\n        is_upcast = values.dtype.itemsize < numpy_type.itemsize\n    elif values.dtype.kind in (\"i\", \"u\") and numpy_type == np.float64:"
  },
  {
    "id" : "2c367cba-da95-4ea3-821f-81f73a357aaf",
    "prId" : 3798,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3798#pullrequestreview-550657313",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11112f1d-8817-4d79-bdd4-8f320233ce73",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Why is `6` the threshold here? I know we need < 8. Is 7 bad (does a 7 byte dtype even exist?). Maybe an explanatory comment would help.",
        "createdAt" : "2020-12-11T23:51:02Z",
        "updatedAt" : "2020-12-12T00:51:57Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "c7cb8588-8e48-4e59-97f9-d938a5048b0f",
        "parentId" : "11112f1d-8817-4d79-bdd4-8f320233ce73",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "Double has 52 bits of mantissa, so the size has to be < 52. 6 is the smallest multiple of 8 smaller than 52. I guess we don't have to be that specific and just say integers or smaller.",
        "createdAt" : "2020-12-12T00:10:07Z",
        "updatedAt" : "2020-12-12T00:51:57Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "243b813a2c8dba66f5f74327e818cac147bf682d",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +332,336 @@    elif values.dtype.kind in (\"i\", \"u\") and numpy_type == np.float64:\n        # allow (u)int => double conversion\n        is_upcast = values.dtype.itemsize <= 6\n    else:\n        is_upcast = False"
  },
  {
    "id" : "06e311d8-517c-4781-abba-9eb032a5e4d1",
    "prId" : 3451,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3451#pullrequestreview-496884813",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fd616ee-ecbf-46c2-9035-b034986394ff",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "@jgc128 Can we remove `.tolist()` here?",
        "createdAt" : "2020-09-24T02:38:25Z",
        "updatedAt" : "2020-09-24T02:38:30Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "efc4a1bd-1ff3-40c7-b8da-6c1dd0fb19d4",
        "parentId" : "7fd616ee-ecbf-46c2-9035-b034986394ff",
        "authorId" : "8934994f-5e8e-4736-9ff0-17205e326c06",
        "body" : "We can't - if we remove `.tolist()`, `pd.Series` would throw an exception that the input data must be 1-dimensional. \r\nThe goal here is to create a series where each element is not a single number but an array. It's not idea but that's a limitation of Spark's pandas_udf API, as it should return a series and not a dataframe.",
        "createdAt" : "2020-09-24T13:55:00Z",
        "updatedAt" : "2020-09-24T13:55:00Z",
        "lastEditedBy" : "8934994f-5e8e-4736-9ff0-17205e326c06",
        "tags" : [
        ]
      },
      {
        "id" : "0fe36b94-94b2-495b-b3f4-a4910d9184cb",
        "parentId" : "7fd616ee-ecbf-46c2-9035-b034986394ff",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Makes sense. Here we create a pandas sereis like below:\r\n\r\n```python\r\npandas.Series([[1,], [2,], ...])\r\n```",
        "createdAt" : "2020-09-25T00:24:16Z",
        "updatedAt" : "2020-09-25T00:24:49Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "24677705-4d0c-4b05-9d46-a8007c0e0518",
        "parentId" : "7fd616ee-ecbf-46c2-9035-b034986394ff",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Confriemd the following code throws:\r\n\r\n```python\r\npandas.Series(np.array([[1,], [2,], ...]))\r\n```",
        "createdAt" : "2020-09-25T00:30:38Z",
        "updatedAt" : "2020-09-25T00:30:48Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "6e2b5aa8-8bca-41c5-a0e8-c617b68167e7",
        "parentId" : "7fd616ee-ecbf-46c2-9035-b034986394ff",
        "authorId" : "8934994f-5e8e-4736-9ff0-17205e326c06",
        "body" : "Yeah, if it's an array, pd.Series would check for dimensions ",
        "createdAt" : "2020-09-25T21:53:51Z",
        "updatedAt" : "2020-09-25T21:53:51Z",
        "lastEditedBy" : "8934994f-5e8e-4736-9ff0-17205e326c06",
        "tags" : [
        ]
      }
    ],
    "commit" : "153938cf5a7a6450f97eda47235ff5eafcc3ec71",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +691,695 @@\n        if type(result_type) == ArrayType:\n            return pandas.Series(result.to_numpy().tolist())\n        else:\n            return result[result.columns[0]]"
  },
  {
    "id" : "19c34ba7-48b4-4c9b-af77-5da75eb215a4",
    "prId" : 3130,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3130#pullrequestreview-453491833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "855abb29-962a-4f33-beee-8d16cab80f96",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Just reordering the checks solved the issue.",
        "createdAt" : "2020-07-22T16:33:50Z",
        "updatedAt" : "2020-07-22T16:41:36Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "330c97647fa41ba039104b3c1e282511fa6d2f1b",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +295,299 @@    if t == DataType.string and values.dtype == np.object:\n        #  NB: strings are by default parsed and inferred as objects, but it is\n        # recommended to use StringDtype extension type if available. See\n        #\n        # `https://pandas.pydata.org/pandas-docs/stable/user_guide/text.html`"
  },
  {
    "id" : "e9536feb-2d48-4b39-b1b9-a50507567d42",
    "prId" : 2920,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2920#pullrequestreview-429343650",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c90f16d2-6f6f-4e8e-86be-fcadfd9edf5b",
        "parentId" : null,
        "authorId" : "dab5a163-e8a4-4ae3-a16c-0d903dcff35c",
        "body" : "Is `model_meta` optional? It's a required param but nobody checks until `metadata()` is called. Looks like an avoidable runtime error?",
        "createdAt" : "2020-06-11T22:18:53Z",
        "updatedAt" : "2020-06-12T22:51:47Z",
        "lastEditedBy" : "dab5a163-e8a4-4ae3-a16c-0d903dcff35c",
        "tags" : [
        ]
      },
      {
        "id" : "8311b864-faae-422c-ad44-9322536861cf",
        "parentId" : "c90f16d2-6f6f-4e8e-86be-fcadfd9edf5b",
        "authorId" : "dab5a163-e8a4-4ae3-a16c-0d903dcff35c",
        "body" : "Not a major issue. I should have added a nit to this.",
        "createdAt" : "2020-06-11T22:46:51Z",
        "updatedAt" : "2020-06-12T22:51:47Z",
        "lastEditedBy" : "dab5a163-e8a4-4ae3-a16c-0d903dcff35c",
        "tags" : [
        ]
      }
    ],
    "commit" : "108de82bba3af1ca88753ea39e5345f88cc24e9b",
    "line" : 160,
    "diffHunk" : "@@ -1,1 +392,396 @@    \"\"\"\n\n    def __init__(self, model_meta: Model, model_impl: Any):\n        if not hasattr(model_impl, \"predict\"):\n            raise MlflowException(\"Model implementation is missing required predict method.\")"
  },
  {
    "id" : "2c9246ba-5ca1-47fa-b264-a04286adc20e",
    "prId" : 1514,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1514#pullrequestreview-255320660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0ea2d77-fdd1-458e-a641-946b00370361",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "We can avoid documenting **kwargs in our Sphinx API docs by renaming the method prototype in the first line of the docstring, e.g:\r\n\r\n```\r\ndef save_model(path, loader_module=None, data_path=None, code_path=None, conda_env=None,\r\n               model=Model(), python_model=None, artifacts=None, **kwargs):\r\n    \"\"\"\r\n    save_model(path, loader_module=None, data_path=None, code_path=None, conda_env=None,\\\r\n               model=Model(), python_model=None, artifacts=None)\r\n\r\n    Create a custom Pyfunc model, incorporating custom inference logic and data dependencies.\r\n    ...\r\n    \"\"\"\r\n```\r\n\r\nI think we should do this because the `kwargs` parameter only serves the purpose of providing an alias for another keyword argument that is explicitly named in the method prototype.\r\n\r\n",
        "createdAt" : "2019-06-27T15:53:04Z",
        "updatedAt" : "2019-06-27T18:53:54Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "196d53cb0ea5b52c5b55db1ed01f5c00d1eecac6",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +461,465 @@def save_model(path, loader_module=None, data_path=None, code_path=None, conda_env=None,\n               mlflow_model=Model(), python_model=None, artifacts=None, **kwargs):\n    \"\"\"\n    save_model(path, loader_module=None, data_path=None, code_path=None, conda_env=None,\\\n               mlflow_model=Model(), python_model=None, artifacts=None)"
  },
  {
    "id" : "9994fc7e-41c0-4cf9-919d-aca4ea83bf55",
    "prId" : 1221,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1221#pullrequestreview-235284824",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65986867-352d-4cb6-92d8-87fab07792b5",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "The method docs need to be updated to read\r\n\r\n`:param path: The path to which to save the Python model.`",
        "createdAt" : "2019-05-08T20:48:41Z",
        "updatedAt" : "2019-05-08T21:19:42Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6837f08ccef6c8574d32ba46051d59547a7e0a29",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +432,436 @@\n\ndef save_model(path, loader_module=None, data_path=None, code_path=None, conda_env=None,\n               model=Model(), python_model=None, artifacts=None):\n    \"\"\""
  },
  {
    "id" : "a02e0a88-4bc4-4a69-926d-1e4a51e7bdd4",
    "prId" : 1190,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1190#pullrequestreview-234686011",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26380beb-c1e3-444c-9c4a-6d897b08ffb8",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "are we pretty comfortable that the `artifacts` arg in `save_model`, `log_model` work okay with `runs:/` URI? it looks like we end up using `_download_artifact_from_uri` on them so it seems okay, but you have more context.",
        "createdAt" : "2019-05-07T02:38:30Z",
        "updatedAt" : "2019-05-07T22:39:12Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "16c122f0-1d11-4018-8ed3-22c10f2e570e",
        "parentId" : "26380beb-c1e3-444c-9c4a-6d897b08ffb8",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Good point! I updated `test_model_export_with_class_and_artifacts#test_model_log_load` to reference an artifact with a `runs:/` URI!",
        "createdAt" : "2019-05-07T21:34:36Z",
        "updatedAt" : "2019-05-07T22:39:12Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "813d98c52ff201e189d2a20c6e716057c0c843be",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +206,210 @@from mlflow.pyfunc.model import PythonModel, PythonModelContext,\\\n    DEFAULT_CONDA_ENV\nfrom mlflow.tracking.artifact_utils import _download_artifact_from_uri\nfrom mlflow.utils import PYTHON_VERSION, get_major_minor_py_version\nfrom mlflow.utils.file_utils import TempDir, _copy_file_or_tree"
  },
  {
    "id" : "80c0735c-1d1f-4d3a-b1cc-417f7c1c4c71",
    "prId" : 793,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/793#pullrequestreview-191436430",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bae40d0-e8bf-45e7-b529-7ea56bd6ab9f",
        "parentId" : null,
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "That's really good documentation but I am not sure if it's not too much for in-code docs. I wonder if large bulk of it belongs to the docs instead? \r\n\r\nIn my opinion, in-code doc should give functional description necessary to work with the code. E.g. the paragraph starting ```Many of MLflow's model persistence modules ,...``` sounds to me like something that might belong to docs instead of in code. What do you think?\r\n\r\n",
        "createdAt" : "2019-01-10T21:40:29Z",
        "updatedAt" : "2019-01-15T06:30:57Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "1b2b174f-7e21-400a-85e9-ad722861eb07",
        "parentId" : "1bae40d0-e8bf-45e7-b529-7ea56bd6ab9f",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "This documentation gets rendered and displayed in the \"Python API\" section of the MLflow docs website. It also provides a reference for how to use the `save_model()` and `log_model()` APIs, so it seems relevant to the code in that sense.\r\n\r\nI agree that the `Many of MLflow's model persistence...` portion is probably a better fit for the \"Models\" documentation section. I've moved it there instead.",
        "createdAt" : "2019-01-10T22:04:05Z",
        "updatedAt" : "2019-01-15T06:30:57Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "be18a22a370ffaacab75b44cff15223c5f180d0c",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +3,7 @@\"\"\"\nThe ``mlflow.pyfunc`` module defines a generic :ref:`filesystem format <pyfunc-filesystem-format>`\nfor Python models and provides utilities for saving to and loading from this format. The format is\nself contained in the sense that it includes all necessary information for anyone to load it and\nuse it. Dependencies are either stored directly with the model or referenced via a Conda"
  },
  {
    "id" : "2c68c1be-9924-4b2d-8b97-289f54212bbc",
    "prId" : 793,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/793#pullrequestreview-192315333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6808f3d-633f-4a2a-b17c-2b00db6c85b7",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "for some reason this looks weird (py3 make):\r\n\r\n![image](https://user-images.githubusercontent.com/1400247/51126064-0ae99b00-17d7-11e9-8068-5988b123b721.png)\r\n",
        "createdAt" : "2019-01-14T16:33:29Z",
        "updatedAt" : "2019-01-15T06:30:57Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "4187deec-1514-4bef-aa96-143ac8368c05",
        "parentId" : "f6808f3d-633f-4a2a-b17c-2b00db6c85b7",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Thanks for catching this. The text `Note: If the class is imported...` was misaligned. Fixing the indentation seems to have corrected the issue.",
        "createdAt" : "2019-01-14T20:23:35Z",
        "updatedAt" : "2019-01-15T06:30:57Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "be18a22a370ffaacab75b44cff15223c5f180d0c",
    "line" : 234,
    "diffHunk" : "@@ -1,1 +479,483 @@                        }\n\n    :param python_model: An instance of a subclass of :class:`~PythonModel`. This class will be\n                         serialized using the CloudPickle library. Any dependencies of the class\n                         should be included in one of the following locations:"
  },
  {
    "id" : "5bf313d0-59ca-42bf-8b53-a111707d152a",
    "prId" : 793,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/793#pullrequestreview-192443510",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5e57d60-938a-4af0-a9e1-392fcf137747",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "I wonder if we could put the example from this PR somewhere, as I feel the concreteness there is quite helpful.",
        "createdAt" : "2019-01-14T16:35:52Z",
        "updatedAt" : "2019-01-15T06:30:57Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "ab60ed77-b09c-4642-9f34-7428576375b6",
        "parentId" : "e5e57d60-938a-4af0-a9e1-392fcf137747",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Filed https://github.com/mlflow/mlflow/pull/807 to address this",
        "createdAt" : "2019-01-15T01:00:09Z",
        "updatedAt" : "2019-01-15T06:30:57Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "be18a22a370ffaacab75b44cff15223c5f180d0c",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +439,443 @@    Create a custom Pyfunc model, incorporating custom inference logic and data dependencies.\n\n    For information about the workflows that this method supports, please see :ref:`\"workflows for\n    creating custom pyfunc models\" <pyfunc-create-custom-workflows>` and\n    :ref:`\"which workflow is right for my use case?\" <pyfunc-create-custom-selecting-workflow>`."
  },
  {
    "id" : "dc303aba-771e-42a1-97f7-107c11d2513e",
    "prId" : 793,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/793#pullrequestreview-192315333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a4f14c2-10be-46f0-a0c3-96c205e25779",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Empirically, why could `artifacts` not be specified if I'm using a loader module? I understand the desire for either a tuple of (python file, entrypoint) vs python instance, since those map to how we construct the python object representation of the model, but artifacts seem orthogonal.\r\n\r\nI wonder if during the MLflow 1.0 work we should consider revamping the naming of this API a bit -- `data_path` and `loader_module` do not seem related, but they both need to be specified together or not at all.",
        "createdAt" : "2019-01-14T16:48:13Z",
        "updatedAt" : "2019-01-15T06:30:57Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "a96dc23d-ac09-4bf2-9ae7-907da58dfea7",
        "parentId" : "4a4f14c2-10be-46f0-a0c3-96c205e25779",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "I agree that the pairings (`data_path`, `loader_module`) and (`artifacts`, `python_model`) are not empirically meaningful. The reason that the former are required together is for backwards compatibility.\r\n\r\nWe could do something like resolve `artifacts` to the `data_path` directory (or a directory that we create if `data_path` is unspecified) with a well-defined structure that users can interpret inside their loader module's `_load_pyfunc` method. However, I'd be more in favor of deprecating/removing the (`loader_module`, `data_path`) combination in MLflow 1.0 because (`python_model`, `artifacts`) provides a supserset of the functionality.",
        "createdAt" : "2019-01-14T20:02:50Z",
        "updatedAt" : "2019-01-15T06:30:57Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "be18a22a370ffaacab75b44cff15223c5f180d0c",
    "line" : 288,
    "diffHunk" : "@@ -1,1 +514,518 @@    }\n    second_argument_set = {\n        \"artifacts\": artifacts,\n        \"python_model\": python_model,\n    }"
  },
  {
    "id" : "dc084601-05f3-4e0d-a480-043d33dd9622",
    "prId" : 793,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/793#pullrequestreview-192315333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "633425cb-a81d-4a2b-86a4-cb90cb87034e",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Btw, for my understanding, would we expect imports to be captured by the serialization of python_model? I would guess not, but this does imply that if I have more than one python file, I may actually still want to use something like `data_path`, right?",
        "createdAt" : "2019-01-14T16:48:54Z",
        "updatedAt" : "2019-01-15T06:30:57Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "93f140fe-f0bf-4770-898f-82e225a50eff",
        "parentId" : "633425cb-a81d-4a2b-86a4-cb90cb87034e",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "We expect imports to be captured by *reference*. CloudPickle can determine that an object is imported from a specific module, but it will not bundle the module into the serialized output. Given this, `python_model` may depend on multiple python files, just like `loader_module`.",
        "createdAt" : "2019-01-14T20:06:27Z",
        "updatedAt" : "2019-01-15T06:30:57Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "be18a22a370ffaacab75b44cff15223c5f180d0c",
    "line" : 289,
    "diffHunk" : "@@ -1,1 +515,519 @@    second_argument_set = {\n        \"artifacts\": artifacts,\n        \"python_model\": python_model,\n    }\n    first_argument_set_specified = any([item is not None for item in first_argument_set.values()])"
  },
  {
    "id" : "c04d8440-36d1-4f29-b45d-5e2393a10877",
    "prId" : 719,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/719#pullrequestreview-175609971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2f863fa-b692-4073-a7cb-f8c864714abd",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Why do we select the the first column from the output dataframe; do we always expect that this dataframe will only have a single column? If so, we should validate that this is the case and print a useful error message if the dataframe does not conform to our specifications. A comment explaining this restriction would also be useful.",
        "createdAt" : "2018-11-15T23:44:23Z",
        "updatedAt" : "2018-12-19T22:33:20Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "ed2beb2d-3d9f-47c5-99f8-d6cf07cb22f2",
        "parentId" : "f2f863fa-b692-4073-a7cb-f8c864714abd",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "Currently spark_udf can only handle 1-d output. We plan to address that in the future but for now I think returning partial result is better than failing.",
        "createdAt" : "2018-11-15T23:54:34Z",
        "updatedAt" : "2018-12-19T22:33:20Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "46d40cc23382cf8a24feb872cdaa8a9b500b579b",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +303,307 @@            return pandas.Series([row[1].values for row in result.iterrows()])\n        else:\n            return result[result.columns[0]]\n\n    return pandas_udf(predict, result_type)"
  },
  {
    "id" : "9e422b04-b2df-4d7a-93df-0736c32a02d9",
    "prId" : 719,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/719#pullrequestreview-182478913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "262e328e-2084-4905-83a8-b363de3ae2dc",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Can we enumerate the classes of acceptable result types and their corresponding UDF behavior? For example:\r\n\r\n```\r\n:param result_type: the return type of the user-defined function. The value can be either a\r\n                    :class:`pyspark.sql.types.DataType` object or a DDL-formatted type string.\r\n                    The following classes of result type are supported:\r\n                           \r\n                        - NumericType: The model must produce numeric output in order to use \r\n                                       this result type.\r\n                        - Array[NumericType]: If the model produces predictions as a DataFrame, \r\n                                              ``spark_udf`` will filter the DataFrame to remove \r\n                                               non-numeric columns before returning.\r\n                        - StringType: ...\r\n                        - Array[StringType]: ...\r\n```",
        "createdAt" : "2018-12-06T22:41:41Z",
        "updatedAt" : "2018-12-19T22:33:20Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "46d40cc23382cf8a24feb872cdaa8a9b500b579b",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +217,221 @@                   retrieve the model logged with MLflow.\n    :param result_type: the return type of the user-defined function. The value can be either a\n                        :class:`pyspark.sql.types.DataType` object or a DDL-formatted type string.\n                        Only a primitive type or an array (pyspark.sql.types.ArrayType) of primitive\n                        types are allowed. The following classes of result type are supported:"
  },
  {
    "id" : "f36d93c6-6211-4509-800b-5807e8fab40e",
    "prId" : 230,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/230#pullrequestreview-143760903",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2190eea9-f20e-4606-b7ce-a7477aa990a4",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Could we add a unit test to confirm the python version is in fact embedded into the model?",
        "createdAt" : "2018-08-03T00:11:43Z",
        "updatedAt" : "2018-08-07T17:09:01Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "d772b4a2-e436-4613-bc48-a8b31baa051c",
        "parentId" : "2190eea9-f20e-4606-b7ce-a7477aa990a4",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Augmented the existing `tests.pyfunc.test_model_save_load` and `tests.pyfunc.test_model_log` methods to confirm that the python version is embedded into the model.",
        "createdAt" : "2018-08-06T21:07:16Z",
        "updatedAt" : "2018-08-07T17:09:01Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b8183d031cfbc1161a11d3ebf49c5cf5f8dfc08",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +112,116 @@    \"\"\"\n    parms = {MAIN: loader_module}\n    parms[PY_VERSION] = PYTHON_VERSION\n    if code:\n        parms[CODE] = code"
  },
  {
    "id" : "6f0416f0-a11f-4c44-a137-f60ab6553725",
    "prId" : 230,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/230#pullrequestreview-144101552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10600b2d-598b-4dbf-a361-39df9fab5ab4",
        "parentId" : null,
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "nit: That's a long function name, I would maybe shorten it to something like check_py_version. But it's only a suggestion.\r\n\r\n",
        "createdAt" : "2018-08-07T17:25:19Z",
        "updatedAt" : "2018-08-07T17:36:13Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b8183d031cfbc1161a11d3ebf49c5cf5f8dfc08",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +140,144 @@    model_py_version = conf.get(PY_VERSION)\n    if not suppress_warnings:\n        _warn_potentially_incompatible_py_version_if_necessary(model_py_version=model_py_version)\n    if CODE in conf and conf[CODE]:\n        code_path = os.path.join(path, conf[CODE])"
  },
  {
    "id" : "25a4c9aa-0f14-4070-8d5b-13bf66f5da48",
    "prId" : 88,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/88#pullrequestreview-132487547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26e95ff0-1172-4e77-8a48-e68250c47823",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "`make` in the docs/ directory showed these rst errors.",
        "createdAt" : "2018-06-27T15:30:15Z",
        "updatedAt" : "2018-06-27T15:30:15Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "39ee4556bbea33e750befc65de7d0f4930f23842",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +18,22 @@configuration:\n\n./dst-path/\n\n    ./MLmodel - config"
  }
]