[
  {
    "id" : "c72d0670-1179-4b47-b5e1-0b773c62e1ae",
    "prId" : 830,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/830#pullrequestreview-195276533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f7a188d-e994-4c51-9882-39c59a4544ba",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Does this mean this code not backward compatible? Is there harm using a base version and issue warning?",
        "createdAt" : "2019-01-22T22:25:09Z",
        "updatedAt" : "2019-01-22T23:06:37Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "e2a5a787-bac7-41be-96a0-9fa6848e07cb",
        "parentId" : "0f7a188d-e994-4c51-9882-39c59a4544ba",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "This code is backwards compatible because this code path has not yet been included in an MLflow release. It was introduced in #793. \r\n\r\nWhat do you mean by \"use a base version\"?",
        "createdAt" : "2019-01-22T22:38:11Z",
        "updatedAt" : "2019-01-22T23:06:37Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "4066b796-64a5-4b9e-86b5-b608f4c3db2e",
        "parentId" : "0f7a188d-e994-4c51-9882-39c59a4544ba",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Cool!",
        "createdAt" : "2019-01-22T23:05:50Z",
        "updatedAt" : "2019-01-22T23:07:18Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "aadad60ede74f7892e18e59784fe1da65bcfcda2",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +189,193 @@\n    python_model_cloudpickle_version = pyfunc_config.get(CONFIG_KEY_CLOUDPICKLE_VERSION, None)\n    if python_model_cloudpickle_version is None:\n        mlflow.pyfunc._logger.warning(\n            \"The version of CloudPickle used to save the model could not be found in the MLmodel\""
  },
  {
    "id" : "ec9142fa-0bdb-4283-9985-6f3387835894",
    "prId" : 830,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/830#pullrequestreview-195266572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7c946ca-4e7c-4302-b2e7-bc4b91d9e52f",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "This is just a warning ... does that mean that loader will try and deserialize model and it could potentially fail?",
        "createdAt" : "2019-01-22T22:26:34Z",
        "updatedAt" : "2019-01-22T23:06:37Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "bb98aa22-31c9-46d4-88c2-63ef03173d73",
        "parentId" : "d7c946ca-4e7c-4302-b2e7-bc4b91d9e52f",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Yes. The loader will still execute and could potentially fail. This warning adds additional context in the case that a failure occurs, similar to the warning defined in [mlflow/pyfunc/__init__.py#load_pyfunc](https://github.com/mlflow/mlflow/blob/3f7eb6f83b0b0fd467d2b83ece28ce5fcb819d00/mlflow/pyfunc/__init__.py#L283)",
        "createdAt" : "2019-01-22T22:39:31Z",
        "updatedAt" : "2019-01-22T23:06:37Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "aadad60ede74f7892e18e59784fe1da65bcfcda2",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +197,201 @@        # releases have been known to cause incompatibilities. Therefore, we match on the full\n        # library version\n        mlflow.pyfunc._logger.warning(\n            \"The version of CloudPickle that was used to save the model, `CloudPickle %s`, differs\"\n            \" from the version of CloudPickle that is currently running, `CloudPickle %s`, and may\""
  },
  {
    "id" : "c7bb44a6-266c-4166-9bec-4807d9c4db41",
    "prId" : 793,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/793#pullrequestreview-192315333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac365c0e-b17c-4bfa-866c-dadaee4fdf25",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Mind adding a file-level doc of what we expect to find here?",
        "createdAt" : "2019-01-14T16:52:47Z",
        "updatedAt" : "2019-01-15T06:30:57Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "633e2f29-4aa7-4725-b61d-ea95e98a430d",
        "parentId" : "ac365c0e-b17c-4bfa-866c-dadaee4fdf25",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Added a file-level doc explaining that this module handles the serialization / deserialization logic for custom pyfunc models created by extending the `PythonModel` class.",
        "createdAt" : "2019-01-14T20:34:24Z",
        "updatedAt" : "2019-01-15T06:30:57Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "be18a22a370ffaacab75b44cff15223c5f180d0c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +4,8 @@\"\"\"\n\nimport os\nimport tempfile\nimport shutil"
  },
  {
    "id" : "b21fe223-297d-4f41-ac8b-fa77015c0f3a",
    "prId" : 793,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/793#pullrequestreview-192315333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70d0803d-e0ed-4e83-beca-680f21c3b797",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "This is only the default for serialized PythonModel objects. I guess this file is only concerned with those, although from a logical perspective, I would imagine the code to be shared almost identically with the data_path/loader_module pathway. For example, we could instantiate a default PythonModel which loads the provided loader_module -- I guess the main downside of that approach is that we would need to require cloudpickle for all pyfunc model environments, which may actually be pretty severe.\r\n\r\nAnyway, all that to say, we should at least comment at this point in the code what this is the default for, in addition to having the module-level documentation saying that all concepts here are related only to PythonModel serialization (as opposed to loader_module saving of pyfunc models; unless I'm wrong about that distinction).",
        "createdAt" : "2019-01-14T16:56:41Z",
        "updatedAt" : "2019-01-15T06:30:57Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "b81fe740-2beb-4969-8cba-60e4fc74b915",
        "parentId" : "70d0803d-e0ed-4e83-beca-680f21c3b797",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "I wonder if we should consider at some point shading cloudpickle into mlflow, to fix the version that we depend on and make it independent of the customer's environment.",
        "createdAt" : "2019-01-14T16:57:51Z",
        "updatedAt" : "2019-01-15T06:30:57Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "f4f8cec0-9823-49e2-8d02-cc41a5814b52",
        "parentId" : "70d0803d-e0ed-4e83-beca-680f21c3b797",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "I agree that a shared code path would be ideal; requiring cloudpickle may not be all that severe if we shade the library and include a specific version in MLflow. Because CloudPickle can capture imports by reference, the (``python_model``, ``artifacts``) approach offers a superset of the functionality of (``loader_module``, ``data_path``), so it might make sense to deprecate (``loader_module``, ``data_path``) in the future.",
        "createdAt" : "2019-01-14T19:35:43Z",
        "updatedAt" : "2019-01-15T06:30:57Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "ef1f6181-119e-424f-b4b6-a8255f7ff933",
        "parentId" : "70d0803d-e0ed-4e83-beca-680f21c3b797",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "I've added module-level documentation explaining that `mlflow.pyfunc.model` contains logic for saving / loading custom pyfunc models with a user-defined subclass of `PythonModel`, and I've documented the `DEFAULT_CONDA_ENV` static variable to indicate that it pertains to the `PythonModel` case as well.\r\n\r\nI've also moved `_save_model_with_loader_module_and_data_path` from `mlflow.pyfunc.model` to `mlflow.pyfunc` so that the `mlflow.pyfunc.model` only contains code pertaining to the `PythonModel` case.\r\n\r\nFinally, I've adjusted the documentation of `mlflow.pyfunc.save_model` and `mlflow.pyfunc.log_model` to indicate that the dependencies of `DEFAULT_CONDA_ENV` are required when ``python_model`` is specified. We should make sure that the required environments for the two serialization use cases don't become incompatible.",
        "createdAt" : "2019-01-14T19:36:57Z",
        "updatedAt" : "2019-01-15T06:30:57Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "be18a22a370ffaacab75b44cff15223c5f180d0c",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@# `mlflow.pyfunc.save_model()` and `mlflow.pyfunc.log_model()` when a user-defined subclass of\n# ``PythonModel`` is provided.\nDEFAULT_CONDA_ENV = _mlflow_conda_env(\n    additional_conda_deps=[\n        \"cloudpickle=={}\".format(cloudpickle.__version__),"
  }
]