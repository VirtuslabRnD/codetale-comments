[
  {
    "id" : "1ba23c64-e077-46a1-bb76-d869f66d806d",
    "prId" : 4521,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4521#pullrequestreview-697707051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a9dff65-abf9-4155-9b94-59de89da7869",
        "parentId" : null,
        "authorId" : "154db4f1-ce8e-406f-be3c-52854262edf8",
        "body" : "I found this method in the dbutils.py file. Let me know if this is sufficient to cover all environments.",
        "createdAt" : "2021-07-01T20:16:55Z",
        "updatedAt" : "2021-07-01T20:16:56Z",
        "lastEditedBy" : "154db4f1-ce8e-406f-be3c-52854262edf8",
        "tags" : [
        ]
      },
      {
        "id" : "bf770c53-b2d6-47e0-878c-5fc44d514c90",
        "parentId" : "4a9dff65-abf9-4155-9b94-59de89da7869",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "From offline discussion, this seems like the right method to use / should be allowlisted in all cluster environments! Ideally we can cover this our Databricks-side tests too",
        "createdAt" : "2021-07-01T22:49:30Z",
        "updatedAt" : "2021-07-01T22:49:38Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "46e7ff84e9dde29fb745e75fb22cb1708c5f8902",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +155,159 @@    try:\n        dbutils = _get_dbutils()\n        job_group_id = dbutils.entry_point.getJobGroupId()\n        if job_group_id is not None:\n            return job_group_id"
  },
  {
    "id" : "9433d4df-26f7-4ea2-9868-096d791b4a3c",
    "prId" : 4501,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4501#pullrequestreview-692457464",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7c7159a-f060-492c-a8c1-430601544805",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "I actually think we don't want to fall back to calling `_get_context_tag(\"commandRunId\")`, as this will attempt to access a non-existent context tag in older runtimes. Instead, we should try-catch computing the command run ID (since it's only available in newer runtimes) and only set the `command_run_id` header if it's available/defined\r\n\r\nHere's the backstory: the reason we have this pattern for other fields is that they're always present in older runtimes via tags on the command context (originally we'd just call e.g. `_get_context_tag(\"apiUrl\")` to get the `apiUrl` field from the tags map in e.g. `get_webapp_url`), but we found that in particular security-enhanced runtimes, this led to errors as Python code didn't have permission to access the tags map on `CommandContext`. So in new runtimes we exposed allowlisted methods like ` apiUrl` on the `CommandContext` & in https://github.com/mlflow/mlflow/pull/3398 we added support for calling the new methods, falling back to the legacy approach of fetching values from the tags map for older runtimes.\r\n\r\n\r\n",
        "createdAt" : "2021-06-25T05:20:00Z",
        "updatedAt" : "2021-06-25T05:20:15Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "27c036b6f4d26f1ac4324cdd649725e7d999a271",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +175,179 @@\ndef get_command_run_id():\n    try:\n        return _get_command_context().commandRunId().get()\n    except Exception:"
  },
  {
    "id" : "571a495c-d595-4105-ab48-894e49109015",
    "prId" : 4421,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4421#pullrequestreview-675536846",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9e4490b-95cb-4c1f-b9b8-acd43baa5a74",
        "parentId" : null,
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "I think this function may need a little reworking, since `_get_active_spark_session` will return a Spark session for any user who has pyspark installed in their environment. However, not all Spark sessions will have this spark tag set. We may be better off using util functions like `is_in_databricks_notebook` and `is_in_databricks_job` to gate this functionality behind the specific scenarios in which we expect this tag to be set.",
        "createdAt" : "2021-06-03T17:00:33Z",
        "updatedAt" : "2021-06-03T17:01:09Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      },
      {
        "id" : "ea31c03d-24c4-4001-82a3-e177bbcb9849",
        "parentId" : "f9e4490b-95cb-4c1f-b9b8-acd43baa5a74",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Also, that way, we don't backdoor this code into folks using the client in non-Databricks settings",
        "createdAt" : "2021-06-03T17:00:56Z",
        "updatedAt" : "2021-06-03T17:01:09Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      },
      {
        "id" : "f4c7ebcc-6d56-4fb7-9d3e-eb847585ed23",
        "parentId" : "f9e4490b-95cb-4c1f-b9b8-acd43baa5a74",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "@sueann jobs/notebooks are the only scenarios right?",
        "createdAt" : "2021-06-03T17:06:11Z",
        "updatedAt" : "2021-06-03T17:06:12Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      },
      {
        "id" : "15a3e494-5613-4a0b-a071-49935e56c418",
        "parentId" : "f9e4490b-95cb-4c1f-b9b8-acd43baa5a74",
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "yeah that should be it",
        "createdAt" : "2021-06-03T17:15:44Z",
        "updatedAt" : "2021-06-03T17:15:44Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "52d0e79071304e856efb95e0774fb03e3350ed2d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +137,141 @@def get_databricks_runtime():\n    if is_in_databricks_notebook() or is_in_databricks_job():\n        spark_session = _get_active_spark_session()\n        if spark_session is not None:\n            return spark_session.conf.get("
  },
  {
    "id" : "8751a275-cc3b-4b33-9bb6-839039cd3ebe",
    "prId" : 3681,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3681#pullrequestreview-532625976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "269da7a7-62eb-4c39-abc9-008aae00cb68",
        "parentId" : null,
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "We call `get_webapp_url` here, but that function says that we should guarantee that we're in a databricks notebook. Do you think we should maybe throw if that's not the case and browser hostname isn't defined?",
        "createdAt" : "2020-11-17T05:57:48Z",
        "updatedAt" : "2020-11-17T23:14:06Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      },
      {
        "id" : "ec1a7464-3af9-46a8-8d1f-0a35b2ef41df",
        "parentId" : "269da7a7-62eb-4c39-abc9-008aae00cb68",
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "hmm... this also works if we are in a Databricks job, so the existence of dbutils should be good enough (minus possibly dbconnect but i don't think that is a big concern here). so the comment should be fixed actually. ",
        "createdAt" : "2020-11-17T08:00:09Z",
        "updatedAt" : "2020-11-17T23:14:06Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "0ed903fa-9446-481a-a219-b127a9870e49",
        "parentId" : "269da7a7-62eb-4c39-abc9-008aae00cb68",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Ok in that case, yeah makes sense to fix the comment and move on - thanks for explaining!",
        "createdAt" : "2020-11-17T17:40:00Z",
        "updatedAt" : "2020-11-17T23:14:06Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfd45ff4b25f248b3bbb081dd4e8e75f46ae214f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +193,197 @@    if dbutils:\n        browser_hostname = get_browser_hostname()\n        workspace_host = \"https://\" + browser_hostname if browser_hostname else get_webapp_url()\n        workspace_id = get_workspace_id()\n        return workspace_host, workspace_id"
  },
  {
    "id" : "ecda79c2-effd-4d89-8b0f-fce78709a209",
    "prId" : 3398,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3398#pullrequestreview-485248683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c53e95af-37c1-4845-bd3e-89d25a91524b",
        "parentId" : null,
        "authorId" : "8f4af7f7-842d-4f5d-99ae-64e8a3e97d19",
        "body" : "can you catch exact exception here and remove pylint disable?",
        "createdAt" : "2020-09-09T17:32:34Z",
        "updatedAt" : "2020-09-16T21:18:41Z",
        "lastEditedBy" : "8f4af7f7-842d-4f5d-99ae-64e8a3e97d19",
        "tags" : [
        ]
      }
    ],
    "commit" : "c912a56d5743a7cedf5515afe36fc38c59d5e0ec",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +54,58 @@    try:\n        return _get_command_context().aclPathOfAclRoot().get()\n    except Exception:  # pylint: disable=broad-except\n        return _get_extra_context(\"aclPathOfAclRoot\")\n"
  },
  {
    "id" : "7e673f2a-1569-41d5-b75c-5d876edd0d65",
    "prId" : 3398,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3398#pullrequestreview-485248683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb94bef3-3733-41c7-ad2f-1e8b8e810514",
        "parentId" : null,
        "authorId" : "8f4af7f7-842d-4f5d-99ae-64e8a3e97d19",
        "body" : "remove `# pylint: disable=broad-except` and catch exact exception",
        "createdAt" : "2020-09-09T17:32:58Z",
        "updatedAt" : "2020-09-16T21:18:41Z",
        "lastEditedBy" : "8f4af7f7-842d-4f5d-99ae-64e8a3e97d19",
        "tags" : [
        ]
      }
    ],
    "commit" : "c912a56d5743a7cedf5515afe36fc38c59d5e0ec",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +131,135 @@    try:\n        return _get_command_context().notebookPath().get()\n    except Exception:  # pylint: disable=broad-except\n        return _get_extra_context(\"notebook_path\")\n"
  },
  {
    "id" : "56375c32-e151-4708-8b52-f5b946f92f67",
    "prId" : 3398,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3398#pullrequestreview-485248683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "717f56e9-eab3-4f99-bd6a-ae2a34454770",
        "parentId" : null,
        "authorId" : "8f4af7f7-842d-4f5d-99ae-64e8a3e97d19",
        "body" : "remove # pylint: disable=broad-except and catch exact exception",
        "createdAt" : "2020-09-09T17:33:59Z",
        "updatedAt" : "2020-09-16T21:18:41Z",
        "lastEditedBy" : "8f4af7f7-842d-4f5d-99ae-64e8a3e97d19",
        "tags" : [
        ]
      }
    ],
    "commit" : "c912a56d5743a7cedf5515afe36fc38c59d5e0ec",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +171,175 @@    try:\n        return _get_command_context().workspaceId().get()\n    except Exception:  # pylint: disable=broad-except\n        return _get_context_tag(\"orgId\")\n"
  },
  {
    "id" : "af90c77e-36b9-40dd-8485-54ca5a5cd99d",
    "prId" : 3164,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3164#pullrequestreview-455103663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "191076f9-fab8-495b-b993-a506da80d768",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "`return None, None` explicitly?",
        "createdAt" : "2020-07-24T18:45:38Z",
        "updatedAt" : "2020-07-24T22:56:04Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "52040312aab4436f94c6718dc70396cad9ca63b0",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +153,157 @@        return workspace_host, workspace_id\n    return None, None\n\n\ndef get_workspace_info_from_databricks_secrets(tracking_uri):"
  },
  {
    "id" : "50c257fc-7aa5-4615-bd1a-6f99762d7b34",
    "prId" : 3082,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3082#pullrequestreview-446750642",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "235654b3-7be3-46cb-9516-833d6dc48053",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "what if path is \"\"? should we support that?",
        "createdAt" : "2020-07-10T23:05:52Z",
        "updatedAt" : "2020-07-14T19:42:39Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "0d1edb3f-b85c-4be3-9636-36f48b2a6c9b",
        "parentId" : "235654b3-7be3-46cb-9516-833d6dc48053",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Yeah, good point! We currently don't support that, due to the path truthiness stuff. \r\n\r\nI think the problem with supporting it is that an incorrect profile passed in would throw an error related to the lack of a path. So, for example, if you don't have a configured profile `databricks://profile1/`, we currently throw and say that you misconfigured your URI and you should change it. If we supported \"\", we would attempt to fetch secrets from the Secrets service and throw on the lack of that scope being defined or on the lack of presence of a \"host\" or \"token\" key and that case would be difficult to distinguish from scenarios where people weren't even trying to use this feature or multi-workspace registry at all (for example, just in tracking)\r\n\r\n",
        "createdAt" : "2020-07-10T23:22:24Z",
        "updatedAt" : "2020-07-14T19:42:39Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      },
      {
        "id" : "488e9fdb-e4c1-4869-b8db-70e0c62af933",
        "parentId" : "235654b3-7be3-46cb-9516-833d6dc48053",
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "ok so we just need to document that the secret key prefix cannot be empty",
        "createdAt" : "2020-07-10T23:36:07Z",
        "updatedAt" : "2020-07-14T19:42:39Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a382ed964c8b94af7b23002dcc7c583487d8a5",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +174,178 @@    # if a path is specified, that implies a Databricks tracking URI of the form:\n    # databricks://profile-name/path-specifier\n    if (not config or not config.host) and path:\n        dbutils = _get_dbutils()\n        if dbutils:"
  },
  {
    "id" : "62f38c56-4e78-4bc6-aa07-78422487324f",
    "prId" : 3082,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3082#pullrequestreview-447710463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f220fe27-4b48-4260-9fe1-86573985b990",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "Let's add that if no Databricks CLI profile matching the ``server_uri`` is available, we will also try to retrieve it from the Databricks secret manager if available, and in that case ``server_uri`` needs to have the path part which is the key prefix, etc. we should document how to use the secret manager for mlflow in databricks docs, but within the MLflow repo this is likely the only place that will explain it so let's make it more comprehensive.",
        "createdAt" : "2020-07-14T00:38:04Z",
        "updatedAt" : "2020-07-14T19:42:39Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "b5c6f322-2028-4515-9f6a-a032883ec7a1",
        "parentId" : "f220fe27-4b48-4260-9fe1-86573985b990",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Got it - will add documentation around this.",
        "createdAt" : "2020-07-14T00:51:31Z",
        "updatedAt" : "2020-07-14T19:42:39Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a382ed964c8b94af7b23002dcc7c583487d8a5",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +148,152 @@    \"\"\"\n    Reads in configuration necessary to make HTTP requests to a Databricks server. This\n    uses the Databricks CLI's ConfigProvider interface to load the DatabricksConfig object.\n    If no Databricks CLI profile is found corresponding to the server URI, this function\n    will attempt to retrieve these credentials from the Databricks Secret Manager. For that to work,"
  },
  {
    "id" : "903a9d0e-4e6d-43fd-9f80-d345ff460e08",
    "prId" : 1478,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1478#pullrequestreview-252505566",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34386e6d-e7eb-4c8e-8545-8b3c8a5eb51e",
        "parentId" : null,
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "I think you can only open one stream and use it for both.\r\n\r\nDo you know if open(os.devnull) works on windows? Maybe you should put it inside try catch to be sure. \r\n",
        "createdAt" : "2019-06-20T17:30:46Z",
        "updatedAt" : "2019-06-20T17:31:03Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "524d9b70-fc6e-4a00-bd2c-8049eaa6e536",
        "parentId" : "34386e6d-e7eb-4c8e-8545-8b3c8a5eb51e",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Sorry I didn't see this comment - it looks like it should work on windows: https://docs.python.org/2/library/os.html#os.devnull\r\nhttps://docs.python.org/3/library/os.html#os.devnull",
        "createdAt" : "2019-06-20T18:27:52Z",
        "updatedAt" : "2019-06-20T18:27:52Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "6dc29f69-db10-4eca-8cba-8d2f0c8a04cd",
        "parentId" : "34386e6d-e7eb-4c8e-8545-8b3c8a5eb51e",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "I see, thanks for looking this up!",
        "createdAt" : "2019-06-20T20:06:46Z",
        "updatedAt" : "2019-06-20T20:06:46Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "777d2dc6dd5c8f013fa31dcca5d177226db4e27b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +54,58 @@\ndef is_dbfs_fuse_available():\n    with open(os.devnull, 'w') as devnull_stderr, open(os.devnull, 'w') as devnull_stdout:\n        try:\n            return subprocess.call("
  }
]