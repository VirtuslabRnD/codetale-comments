[
  {
    "id" : "858384d8-f9f9-42a6-a3f1-706ccb50542c",
    "prId" : 3443,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3443#pullrequestreview-555046764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85720d8c-4eb6-437f-bf92-538f63f9de46",
        "parentId" : null,
        "authorId" : "e3833790-b6ba-4cb1-825a-8cefd426ea29",
        "body" : "if dbfs_uri is a posixpath abspath there's no way it can be a dbfs:/ uri right?",
        "createdAt" : "2020-12-17T22:49:54Z",
        "updatedAt" : "2021-01-04T17:31:38Z",
        "lastEditedBy" : "e3833790-b6ba-4cb1-825a-8cefd426ea29",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bbd1fbbd6bdd375e679535f77c034148a2d9608",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +279,283 @@    :return A DBFS FUSE-style path, e.g. \"/dbfs/my-directory\"\n    \"\"\"\n    if not is_valid_dbfs_uri(dbfs_uri) and dbfs_uri == posixpath.abspath(dbfs_uri):\n        # Convert posixpaths (e.g. \"/tmp/mlflow\") to DBFS URIs by adding \"dbfs:/\" as a prefix\n        dbfs_uri = \"dbfs:\" + dbfs_uri"
  },
  {
    "id" : "6a93145d-8ec8-40a3-a104-7ea23ca96c3e",
    "prId" : 3360,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3360#pullrequestreview-478073626",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e99d9eca-2814-49a0-ac8f-c8ed68299493",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Copied the pattern from `is_databricks_acled_artifacts_uri` above üôè  ",
        "createdAt" : "2020-08-28T23:42:58Z",
        "updatedAt" : "2020-08-29T00:22:58Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "551f0f073514e78132690854b68b0d0062cfc63e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +238,242 @@\n\ndef is_databricks_model_registry_artifacts_uri(artifact_uri):\n    _MODEL_REGISTRY_ARTIFACT_URI = \"databricks/mlflow-registry/\"\n    artifact_uri_path = extract_and_normalize_path(artifact_uri)"
  },
  {
    "id" : "a4514785-7535-4bd6-9834-ce9952df72fc",
    "prId" : 3232,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3232#pullrequestreview-461901801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79adbf45-cbe8-486c-ab3e-ee5792152192",
        "parentId" : null,
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "There are shorter possible ways to write this in code (the `len(profile_tokens) == 1` case is actually not necessary, since `:.join(..)` will not include a `:` if the length of the join list is 1), but I think it may be better to just be explicit about what's happening. ",
        "createdAt" : "2020-08-05T18:03:50Z",
        "updatedAt" : "2020-08-07T19:07:48Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "59dae340c20f6df0255bb855eda2025d004db1e6",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +57,61 @@        profile_tokens = parsed_uri.netloc.split(':')\n        parsed_scope = profile_tokens[0]\n        if len(profile_tokens) == 1:\n            parsed_key_prefix = None\n        elif len(profile_tokens) == 2:"
  },
  {
    "id" : "a7745bdc-5e29-4ff0-9be1-f86db6074b11",
    "prId" : 3232,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3232#pullrequestreview-461927677",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35fd6b44-0dff-4863-9a13-42676591246e",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "might want to comment something like \"the prefix can contain ':'s\"",
        "createdAt" : "2020-08-05T19:00:09Z",
        "updatedAt" : "2020-08-07T19:07:48Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "59dae340c20f6df0255bb855eda2025d004db1e6",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +61,65 @@        elif len(profile_tokens) == 2:\n            parsed_key_prefix = profile_tokens[1]\n        else:\n            # parse the content before the first colon as the profile.\n            parsed_key_prefix = ':'.join(profile_tokens[1:])"
  },
  {
    "id" : "81bdffc4-8715-4626-9f8f-0f19dd5a2216",
    "prId" : 3119,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3119#pullrequestreview-456001097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce4fbeb2-7253-4918-b264-6b3948803989",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "what will get in first, the fix from '/' -> ':', or this PR? :-)",
        "createdAt" : "2020-07-27T07:24:49Z",
        "updatedAt" : "2020-08-03T06:34:09Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "7428d850-6738-40ba-ab9e-6eb5cbddbd0a",
        "parentId" : "ce4fbeb2-7253-4918-b264-6b3948803989",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Well, I haven't started yet :) ",
        "createdAt" : "2020-07-27T18:10:21Z",
        "updatedAt" : "2020-08-03T06:34:09Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d857badd9b4f4e208367ba1e6c5b96e7c80b8a2b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +25,29 @@    \"\"\"\n    Databricks URIs look like 'databricks' (default profile) or 'databricks://profile'\n    or 'databricks://secret_scope:secret_key_prefix'.\n    \"\"\"\n    scheme = urllib.parse.urlparse(uri).scheme"
  },
  {
    "id" : "7b0c297e-00ac-4c62-85ad-7a7ef56d8982",
    "prId" : 3119,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3119#pullrequestreview-460217498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d71f78b-18c5-44c4-8e96-cbd000284579",
        "parentId" : null,
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "It seems we support both `dbfs:/` and `dbfs://`, so we should be aware that when there's 1 slash, the rest of the stuff goes into `parsed.path` and when there's 2, it's split between `parsed.path` and `parsed.netloc`",
        "createdAt" : "2020-07-27T18:50:10Z",
        "updatedAt" : "2020-08-03T06:34:09Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      },
      {
        "id" : "b3167ba5-717a-4a57-9056-39a70b66b554",
        "parentId" : "5d71f78b-18c5-44c4-8e96-cbd000284579",
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "do we support `dbfs://` ? maybe we can discuss offline",
        "createdAt" : "2020-07-29T08:04:52Z",
        "updatedAt" : "2020-08-03T06:34:09Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "3b4937fe-d81d-4824-812c-9408d6fb7aa5",
        "parentId" : "5d71f78b-18c5-44c4-8e96-cbd000284579",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Could we add a comment here about our offline discussion?",
        "createdAt" : "2020-08-03T17:19:16Z",
        "updatedAt" : "2020-08-03T17:30:02Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      },
      {
        "id" : "9be1bd78-6416-488b-b585-7bc590996732",
        "parentId" : "5d71f78b-18c5-44c4-8e96-cbd000284579",
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "Yep - the conclusion being that `dbfs://`, i.e. DBFS URIs with authority information, is not currently supported.",
        "createdAt" : "2020-08-03T17:37:13Z",
        "updatedAt" : "2020-08-03T17:37:13Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d857badd9b4f4e208367ba1e6c5b96e7c80b8a2b",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +227,231 @@def is_valid_dbfs_uri(uri):\n    parsed = urllib.parse.urlparse(uri)\n    if parsed.scheme != 'dbfs':\n        return False\n    db_profile_uri = get_databricks_profile_uri_from_artifact_uri(uri)"
  },
  {
    "id" : "165f74e6-a0ba-4310-8ad5-f6ae83fd6e97",
    "prId" : 3119,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3119#pullrequestreview-460184343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79e068c2-8c1b-44b0-8fc2-aa46aeb80db8",
        "parentId" : null,
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "üôè ",
        "createdAt" : "2020-08-03T17:18:13Z",
        "updatedAt" : "2020-08-03T17:30:02Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d857badd9b4f4e208367ba1e6c5b96e7c80b8a2b",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +94,98 @@        else:\n            (profile, key_prefix) = get_db_info_from_uri(databricks_profile_uri)\n            if ':' in profile:\n                raise MlflowException(\"Unsupported Databricks profile name: %s.\" % profile +\n                                      \" Profile names cannot contain ':'.\")"
  },
  {
    "id" : "c7175f7d-b368-4486-8482-1e94e9039758",
    "prId" : 3082,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3082#pullrequestreview-447711662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0411a14-78d7-4308-87f2-0967c50e90eb",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "what does `or None` do here?",
        "createdAt" : "2020-07-14T00:38:56Z",
        "updatedAt" : "2020-07-14T19:42:39Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "f7adcfc3-48b7-463f-8a2e-56e45528bf62",
        "parentId" : "a0411a14-78d7-4308-87f2-0967c50e90eb",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Previously, if the parsed path was '' it would return None, but if it was '/', it would return ''. To make it consistent, `or None` basically ensures that if the returned value is falsey (''), that it is converted into None.",
        "createdAt" : "2020-07-14T00:55:00Z",
        "updatedAt" : "2020-07-14T19:42:39Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a382ed964c8b94af7b23002dcc7c583487d8a5",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +40,44 @@    parsed_uri = urllib.parse.urlparse(uri)\n    if parsed_uri.scheme == \"databricks\":\n        parsed_path = parsed_uri.path.lstrip('/') or None\n        parsed_profile = parsed_uri.netloc\n        return parsed_profile, parsed_path"
  },
  {
    "id" : "76bdff30-6097-49bf-a6ed-b06b941b6742",
    "prId" : 2221,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2221#pullrequestreview-334275256",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f884bc12-31bb-4651-ba6e-52662c03b290",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "`uri = ` ?",
        "createdAt" : "2019-12-18T17:15:01Z",
        "updatedAt" : "2019-12-18T17:48:11Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "a995c2f3-d758-406a-8cdc-031d32203c1c",
        "parentId" : "f884bc12-31bb-4651-ba6e-52662c03b290",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Good catch! Will file a followup PR to fix this, since we're close to branch cut.",
        "createdAt" : "2019-12-18T21:30:05Z",
        "updatedAt" : "2019-12-18T21:30:06Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "96d1f070ac0cd5d6ffc6de76e728695d22cd6f7b",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +77,81 @@             the path component of the specified `uri`.\n\n    >>> uri1 = \"s3://root/base/path?param=value\"\n    >>> uri1 = append_to_uri_path(uri, \"some/subpath\", \"/anotherpath\")\n    >>> assert uri1 == \"s3://root/base/path/some/subpath/anotherpath?param=value\""
  },
  {
    "id" : "531d713c-38a9-47ad-8c92-d47d855d58ae",
    "prId" : 2221,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2221#pullrequestreview-334275287",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bfad599-b2bd-4a5f-9d06-624b8644f262",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "`uri = ` ?",
        "createdAt" : "2019-12-18T17:15:15Z",
        "updatedAt" : "2019-12-18T17:48:11Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "e35170ee-3ae7-4872-b3ca-603da162cbdb",
        "parentId" : "7bfad599-b2bd-4a5f-9d06-624b8644f262",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Good catch! Will file a followup PR to fix this, since we're close to branch cut.",
        "createdAt" : "2019-12-18T21:30:08Z",
        "updatedAt" : "2019-12-18T21:30:08Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "96d1f070ac0cd5d6ffc6de76e728695d22cd6f7b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +80,84 @@    >>> uri1 = append_to_uri_path(uri, \"some/subpath\", \"/anotherpath\")\n    >>> assert uri1 == \"s3://root/base/path/some/subpath/anotherpath?param=value\"\n    >>> uri2 = \"a/posix/path\"\n    >>> uri2 = append_to_uri_path(uri, \"/some\", \"subpath\")\n    >>> assert uri2 == \"a/posixpath/some/subpath\""
  },
  {
    "id" : "fe8e4878-0a2c-4f06-a858-e98ce5c57f76",
    "prId" : 2221,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2221#pullrequestreview-334271609",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67f609df-b874-43fb-9245-5ca9287f6f5f",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "we should have unit tests for these - can't just trust the docs :-) it is covered by the million test cases here though so if we need to get this in i'm ok with it as is.",
        "createdAt" : "2019-12-18T17:38:03Z",
        "updatedAt" : "2019-12-18T17:48:11Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "c74891d8-73cf-4847-90df-0979d953ced3",
        "parentId" : "67f609df-b874-43fb-9245-5ca9287f6f5f",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Good point! Included these here to demonstrate how the function works. The existing unit tests should cover these cases.",
        "createdAt" : "2019-12-18T21:23:08Z",
        "updatedAt" : "2019-12-18T21:23:09Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "96d1f070ac0cd5d6ffc6de76e728695d22cd6f7b",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +120,124 @@    >>> assert result3 == \"/absolutepath/relpath\"\n    >>> result4 = _join_posixpaths_and_append_absolute_suffixes(\"/absolutepath1\", \"/absolutepath2\")\n    >>> assert result4 == \"/absolutepath1/absolutepath2\"\n    \"\"\"\n    if len(prefix_path) == 0:"
  }
]