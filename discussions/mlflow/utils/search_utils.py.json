[
  {
    "id" : "6923ee5d-804a-4446-8233-c74c0527aab1",
    "prId" : 3470,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3470#pullrequestreview-500530313",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d98b8c2c-e62a-4d54-99f7-e1f6a338586b",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "what are `Identifier`s? (sqlparse docs did not help me much)",
        "createdAt" : "2020-10-01T05:37:50Z",
        "updatedAt" : "2020-10-02T04:50:01Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "7bebdb12-f95c-440e-afef-00952ed1c727",
        "parentId" : "d98b8c2c-e62a-4d54-99f7-e1f6a338586b",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Sqlparse docs don't help anyone much - will drop time on your calendar",
        "createdAt" : "2020-10-01T16:38:52Z",
        "updatedAt" : "2020-10-02T04:50:01Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c6ff5c7bbaa4ee0f32a24985c9690b7d6dbea21",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +253,257 @@        if isinstance(token, Comparison):\n            return False\n        elif isinstance(token, Identifier):\n            return False\n        elif isinstance(token, Parenthesis):"
  },
  {
    "id" : "9b1f0cd4-aa30-402f-b6b8-a5689a69f485",
    "prId" : 3470,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3470#pullrequestreview-500761863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d7f9226-23ba-467b-b93a-abfcad8b18ad",
        "parentId" : null,
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "New from after our conversation, since we need to ensure that the first element is actually be a list (might not in the case of a list that looks like `(,)`)",
        "createdAt" : "2020-10-01T22:32:50Z",
        "updatedAt" : "2020-10-02T04:50:01Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c6ff5c7bbaa4ee0f32a24985c9690b7d6dbea21",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +593,597 @@                error_code=INVALID_PARAMETER_VALUE,\n            )\n        elif not isinstance(value_token._groupable_tokens[0], IdentifierList):\n            raise MlflowException(\n                \"While parsing a list in the query,\""
  },
  {
    "id" : "671098a6-4ced-482d-8be5-397841f559af",
    "prId" : 3470,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3470#pullrequestreview-500761863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "907e83a2-20a5-45af-a2c3-ccf7c0081b85",
        "parentId" : null,
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Also new from after our conversation: for ease of reasoning, moved this failure case up into this logic (previously, we would let this case pass until the next stage where the comparison would get rejected. That made it hard to understand what happened in this case)",
        "createdAt" : "2020-10-01T22:41:42Z",
        "updatedAt" : "2020-10-02T04:50:01Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c6ff5c7bbaa4ee0f32a24985c9690b7d6dbea21",
    "line" : 204,
    "diffHunk" : "@@ -1,1 +714,718 @@                token_list = [Comparison(TokenList(comparison_subtokens))]\n            else:\n                raise MlflowException(\n                    \"Invalid filter '%s'. Could not be parsed. %s\" % (filter_string, expected),\n                    error_code=INVALID_PARAMETER_VALUE,"
  },
  {
    "id" : "8622cae2-b939-4157-879f-971be368f603",
    "prId" : 3023,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3023#pullrequestreview-440204265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a00fc20-1fd8-47c5-a018-0b9a954f792e",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "this does cause a behavior change for `search_runs` (so this is technically a breaking change), right? i see that lines 355-362 above check the ordering keywords in some way, so just wanted to confirm. ",
        "createdAt" : "2020-06-30T06:55:12Z",
        "updatedAt" : "2020-06-30T18:25:16Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "95ea8006-7c71-485b-9f9f-8356584a6940",
        "parentId" : "7a00fc20-1fd8-47c5-a018-0b9a954f792e",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Yeah that's true - it is breaking",
        "createdAt" : "2020-06-30T16:47:29Z",
        "updatedAt" : "2020-06-30T18:25:16Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f02ab97e3ba7ab9cba8459ceef70cde8b41d3cd1",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +374,378 @@            order_token = tokens[1].lower()\n            if order_token not in cls.VALID_ORDER_BY_TAGS:\n                raise MlflowException(f\"Invalid ordering key in order_by clause '{order_by}'.\",\n                                      error_code=INVALID_PARAMETER_VALUE)\n            is_ascending = (order_token == cls.ASC_OPERATOR)"
  },
  {
    "id" : "57f59e25-3e57-45cb-bfc2-e6ae741faf69",
    "prId" : 2965,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2965#pullrequestreview-435310082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9bf6b76-bc3c-44be-b27c-782e18fbba39",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "just use the timestamp constant also in the 3-parts case",
        "createdAt" : "2020-06-22T22:13:56Z",
        "updatedAt" : "2020-06-22T23:19:19Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c509cf9d3ed4e85d5f93737773205ceef968132",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +345,349 @@        statement = parsed[0]\n        if len(statement.tokens) == 1 and isinstance(statement[0], Identifier):\n            token_value = statement.tokens[0].value\n        elif len(statement.tokens) == 1 and \\\n                statement.tokens[0].match(ttype=TokenType.Keyword,"
  },
  {
    "id" : "6ea940c4-d9c7-48f3-a1be-2ee16211baf4",
    "prId" : 2217,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2217#pullrequestreview-354835377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a117466-e8a5-41b8-ba0a-2e0ba0244a6e",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Is this required for SQLAlchemy? As if query is specified as `tags.algorithm LIKE '%st'` SQL code would only return values ending in **st**. Is this `$` enforcement required?",
        "createdAt" : "2020-01-03T09:27:37Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "76dd2f7b-033a-4e4a-9ab9-4bd97e9debf3",
        "parentId" : "7a117466-e8a5-41b8-ba0a-2e0ba0244a6e",
        "authorId" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "body" : "In fact this part of the code is only used by file_store, so the goal here is to convert the sql syntax to a regex syntax so '^' and '$' are used to say that we want to match the beginning or the end of the string.",
        "createdAt" : "2020-01-03T14:20:48Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "tags" : [
        ]
      },
      {
        "id" : "8997d97d-6658-47b7-b940-e7d2b4866f48",
        "parentId" : "7a117466-e8a5-41b8-ba0a-2e0ba0244a6e",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "I wonder if store specific syntax parsing and conversion belongs in those specific store. This is the generic API level code parsing and the objective is to be SQL compliant.\r\n\r\nCan you move the `^` and `$` handling to `FileStore`?",
        "createdAt" : "2020-01-06T21:41:23Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "7d897dce-4113-46f1-9ff0-fe0558ef9479",
        "parentId" : "7a117466-e8a5-41b8-ba0a-2e0ba0244a6e",
        "authorId" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "body" : "I agree, this should be in the file store the same way the functions to filter sql are in the sql alchemy store. (since this pr: https://github.com/mlflow/mlflow/pull/2030)\r\n\r\nBut if we follow this logic, `search_utils.filter`, `search_utils.sort`, `search_utils.paginate` and `search_utils._does_run_match_clause` should be entirely in file store since it is only used by this store and the logic is specific for sorting or filtering a python list, and that is not what we should do for sql. Should I move these functions to the file store ?",
        "createdAt" : "2020-01-07T09:28:26Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "tags" : [
        ]
      },
      {
        "id" : "7ff2bd4e-d660-44b8-ab1f-0c3703d60799",
        "parentId" : "7a117466-e8a5-41b8-ba0a-2e0ba0244a6e",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "The functions you mention used to be used by both file store and sql store, before we pushed down the SQL implementation to the database. Now you are right, those should exist only in the file store. I think it is reasonable to move them in this PR.",
        "createdAt" : "2020-02-06T23:06:19Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "01cd1998f2c16a40f5fd8c0698a766a9ec2623df",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +294,298 @@                value = '^' + value\n            if not value.endswith('%'):\n                value = value + '$'\n            value = value.replace('_', '.').replace('%', '.*')\n            return cls.filter_ops.get(comparator)(value, lhs)"
  },
  {
    "id" : "5aa27065-5632-4a49-b726-f24444de4340",
    "prId" : 2217,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2217#pullrequestreview-338099832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "780e4622-7fa6-4f9f-9bbc-ed194e231777",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Not clear on the logic here--can you help understand this translation?\r\nI tried sqlite and `%` should work.",
        "createdAt" : "2020-01-03T09:34:20Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "6a2de679-6296-4905-b832-ef1e058a8e1b",
        "parentId" : "780e4622-7fa6-4f9f-9bbc-ed194e231777",
        "authorId" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "body" : "Same that the previous comment, it is only used by file store, so % (match any characters) is remplaced by .* in a regex.",
        "createdAt" : "2020-01-03T14:21:22Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "tags" : [
        ]
      }
    ],
    "commit" : "01cd1998f2c16a40f5fd8c0698a766a9ec2623df",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +295,299 @@            if not value.endswith('%'):\n                value = value + '$'\n            value = value.replace('_', '.').replace('%', '.*')\n            return cls.filter_ops.get(comparator)(value, lhs)\n"
  },
  {
    "id" : "0bfbebbb-db8c-494b-8076-1f60e162b007",
    "prId" : 2217,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2217#pullrequestreview-355435141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37e03c4d-0bb4-4b92-97ba-fa28983512dd",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "I don't understand the meaning of `CASE_INSENSITIVE_STRING_COMPARISON_OPERATORS`. Are there non-case-insensitive operators? Could we not use the same strategy for. all `VALID_STRING_ATTRIBUTE_COMPARATORS`?",
        "createdAt" : "2020-02-07T21:03:14Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "01cd1998f2c16a40f5fd8c0698a766a9ec2623df",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +20,24 @@    VALID_TAG_COMPARATORS = set(['!=', '=', 'LIKE', 'ILIKE'])\n    VALID_STRING_ATTRIBUTE_COMPARATORS = set(['!=', '=', 'LIKE', 'ILIKE'])\n    CASE_INSENSITIVE_STRING_COMPARISON_OPERATORS = set(['LIKE', 'ILIKE'])\n    VALID_SEARCH_ATTRIBUTE_KEYS = set(RunInfo.get_searchable_attributes())\n    VALID_ORDER_BY_ATTRIBUTE_KEYS = set(RunInfo.get_orderable_attributes())"
  },
  {
    "id" : "ebc51ab2-d15d-468f-966e-466c80d92f0a",
    "prId" : 2217,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2217#pullrequestreview-356036745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ead1f4f7-958e-4ae5-93ec-96f812340296",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "This doesn't seem to be the same kind of thing as the other operators, what's going on?",
        "createdAt" : "2020-02-07T21:49:40Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "27118935-aa34-434c-b528-09a92a3859aa",
        "parentId" : "ead1f4f7-958e-4ae5-93ec-96f812340296",
        "authorId" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "body" : "I'm not sure to understand your comment, here the operator corresponding to the LIKE operator is a regexp for the file store, we couldn't use a basic operator like equal or le.",
        "createdAt" : "2020-02-10T15:38:13Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "tags" : [
        ]
      }
    ],
    "commit" : "01cd1998f2c16a40f5fd8c0698a766a9ec2623df",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +47,51 @@        '<=': operator.le,\n        '<': operator.lt,\n        'LIKE': re.match,\n        'ILIKE': re.match\n    }"
  },
  {
    "id" : "e7ea1e79-3f3c-4406-a166-7478d7a6807b",
    "prId" : 2217,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2217#pullrequestreview-356036135",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "864ea193-abc5-46bb-9e0a-174e789ab8b7",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "What is `column.like`?",
        "createdAt" : "2020-02-07T21:53:47Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "b467acdc-4d92-45b4-8d6d-aada10a4feee",
        "parentId" : "864ea193-abc5-46bb-9e0a-174e789ab8b7",
        "authorId" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "body" : "column.like is the way we perform the like operation with sqlalchemy. (column being a column of a sqlalchemy object that we pass as parameter here)",
        "createdAt" : "2020-02-10T15:37:31Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "tags" : [
        ]
      }
    ],
    "commit" : "01cd1998f2c16a40f5fd8c0698a766a9ec2623df",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +54,58 @@    def get_sql_filter_ops(cls, column, operator):\n        sql_filter_ops = {\n            'LIKE': column.like,\n            'ILIKE': column.ilike\n        }"
  },
  {
    "id" : "91992d44-75f7-4c2f-b79d-4d52da8d6ad0",
    "prId" : 1542,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1542#pullrequestreview-257213253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "142697fd-2064-4bdb-951c-83eac41764d7",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Either call it `start_offset` or document somewhere here that result returned are `[start, start+max_results]`",
        "createdAt" : "2019-07-03T00:40:49Z",
        "updatedAt" : "2019-07-03T01:31:15Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c56a59e3d1689610bc769554c02f9ce3f58480ac",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +329,333 @@    def _parse_start_offset_from_page_token(cls, page_token):\n        # Note: the page_token is expected to be a base64-encoded JSON that looks like\n        # { \"offset\": xxx }. However, this format is not stable, so it should not be\n        # relied upon outside of this method.\n        if not page_token:"
  },
  {
    "id" : "c4897088-b955-4149-97c5-4b87946d799b",
    "prId" : 1437,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1437#pullrequestreview-248953670",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73097d35-9f61-4925-8621-8cbed3654c92",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "👍 \r\nSuper clear! And `w00t w00t` @andrewmchen ",
        "createdAt" : "2019-06-12T19:08:13Z",
        "updatedAt" : "2019-06-14T15:32:25Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "03337cf1a1a48c7250620a33ba88655427292162",
    "line" : 215,
    "diffHunk" : "@@ -1,1 +313,317 @@        if not order_by_list:\n            return runs\n        # NB: We rely on the stability of Python's sort function, so that we can apply\n        # the ordering conditions in reverse order.\n        for order_by_clause in reversed(order_by_list):"
  },
  {
    "id" : "efbe7707-734d-4201-827b-dc1a7b23684f",
    "prId" : 1437,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1437#pullrequestreview-249408262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2fad518-59a0-42a3-a649-4661daa88915",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "do we also need to worry about multiple spaces, tabs ... etc? Or is that normalized by the parser?\r\nI would add some tests for that",
        "createdAt" : "2019-06-12T19:18:52Z",
        "updatedAt" : "2019-06-14T15:32:25Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "438f462d-159a-4c1c-b86c-2ee226bce934",
        "parentId" : "b2fad518-59a0-42a3-a649-4661daa88915",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Tests added. Previously, support for two spaces did not work.",
        "createdAt" : "2019-06-12T20:40:45Z",
        "updatedAt" : "2019-06-14T15:32:25Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "0a8cccca-df29-4dca-bf6d-02f15b7ee0af",
        "parentId" : "b2fad518-59a0-42a3-a649-4661daa88915",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "curious ... how does the multi space thing work?",
        "createdAt" : "2019-06-13T01:25:48Z",
        "updatedAt" : "2019-06-14T15:32:25Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "04b8deef-2c9d-472a-88a7-82fe3cfb97ef",
        "parentId" : "b2fad518-59a0-42a3-a649-4661daa88915",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "We trim whitespace after removing the suffix",
        "createdAt" : "2019-06-13T14:57:38Z",
        "updatedAt" : "2019-06-14T15:32:25Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "03337cf1a1a48c7250620a33ba88655427292162",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +276,280 @@        token_value = statement.tokens[0].value\n        is_ascending = True\n        if token_value.lower().endswith(\" desc\"):\n            is_ascending = False\n            token_value = token_value[0:-len(\" desc\")]"
  },
  {
    "id" : "7c9dfc32-9795-4718-93b0-78bfffafa499",
    "prId" : 1437,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1437#pullrequestreview-249088027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3337e41a-1448-4696-bcff-70586938f61b",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "catch error if invalid `key` used and throw appropriate `MlflowExpection` for usage of invalid key order_by",
        "createdAt" : "2019-06-12T19:21:30Z",
        "updatedAt" : "2019-06-14T15:32:25Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "62c2327d-a4c8-4320-9f93-3722204ed958",
        "parentId" : "3337e41a-1448-4696-bcff-70586938f61b",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Hmm, we don't do this in the search case, and my understanding was that that was because the key is already validated by the time we get here. Indeed, we do have tests that confirm `attribute.start` is disallowed.",
        "createdAt" : "2019-06-12T20:21:30Z",
        "updatedAt" : "2019-06-14T15:32:25Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "396d5c14-6cf6-4f59-b283-ccf3fc76f3b3",
        "parentId" : "3337e41a-1448-4696-bcff-70586938f61b",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "gotcha! thanks for that test case",
        "createdAt" : "2019-06-13T01:21:21Z",
        "updatedAt" : "2019-06-14T15:32:25Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "03337cf1a1a48c7250620a33ba88655427292162",
    "line" : 197,
    "diffHunk" : "@@ -1,1 +295,299 @@            sort_value = run.data.tags.get(key)\n        elif key_type == cls._ATTRIBUTE_IDENTIFIER:\n            sort_value = getattr(run.info, key)\n        else:\n            raise MlflowException(\"Invalid order_by entity type '%s'\" % key_type,"
  },
  {
    "id" : "390af024-3508-4e3c-a27f-fcec64c3ad3e",
    "prId" : 1437,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1437#pullrequestreview-249004265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b995c78-85e8-44d6-a91a-3af3917abe2d",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Made this text a bit more general so that we can reuse the helper in the parse_order_by.",
        "createdAt" : "2019-06-12T20:36:59Z",
        "updatedAt" : "2019-06-14T15:32:25Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "03337cf1a1a48c7250620a33ba88655427292162",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +87,91 @@            entity_type, key = identifier.split(\".\", 1)\n        except ValueError:\n            raise MlflowException(\"Invalid identifier '%s'. Columns should be specified as \"\n                                  \"'attribute.<key>', 'metric.<key>', 'tag.<key>', or \"\n                                  \"'param.'.\" % identifier,"
  },
  {
    "id" : "1e3352ca-a48b-4c0b-8c0c-b25fd8eff2f1",
    "prId" : 1437,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1437#pullrequestreview-249005898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5693f044-d621-4efc-b787-eb78e7e004bc",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "key can support backticks too -- added a test for this.",
        "createdAt" : "2019-06-12T20:37:10Z",
        "updatedAt" : "2019-06-14T15:32:25Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "da86ccc3-1067-4e2b-af22-9e1e551e3c0a",
        "parentId" : "5693f044-d621-4efc-b787-eb78e7e004bc",
        "authorId" : "defbdbf6-c2b5-4b1e-b40b-da9b7f2d2e74",
        "body" : "@mparkhe Didn't we agree that backticks are not supported: https://www.mlflow.org/docs/latest/search-syntax.html#entity-name-contains-special-characters",
        "createdAt" : "2019-06-12T20:39:01Z",
        "updatedAt" : "2019-06-14T15:32:25Z",
        "lastEditedBy" : "defbdbf6-c2b5-4b1e-b40b-da9b7f2d2e74",
        "tags" : [
        ]
      },
      {
        "id" : "7f481535-6100-41cc-8a36-0509bd27b94e",
        "parentId" : "5693f044-d621-4efc-b787-eb78e7e004bc",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Hmm, the reason to support backticks is because this is the SQL standard way for having column names with special characters - e.g. https://stackoverflow.com/questions/14190798/how-to-select-a-column-name-with-a-space-in-mysql",
        "createdAt" : "2019-06-12T20:40:11Z",
        "updatedAt" : "2019-06-14T15:32:25Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "03337cf1a1a48c7250620a33ba88655427292162",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +92,96 @@                                  error_code=INVALID_PARAMETER_VALUE)\n        identifier = cls._valid_entity_type(entity_type)\n        key = cls._trim_backticks(cls._strip_quotes(key))\n        if identifier == cls._ATTRIBUTE_IDENTIFIER and key not in cls.VALID_ATTRIBUTE_KEYS:\n            raise MlflowException(\"Invalid attribute key '{}' specified. Valid keys \""
  },
  {
    "id" : "23b31e22-5469-4613-a81c-ecc95ae7991d",
    "prId" : 1437,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1437#pullrequestreview-249004558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd9f6ff9-6e07-424f-b611-23f320d378c6",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Made everything private but `sort()` and `filter()`",
        "createdAt" : "2019-06-12T20:37:33Z",
        "updatedAt" : "2019-06-14T15:32:25Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "03337cf1a1a48c7250620a33ba88655427292162",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +197,201 @@\n    @classmethod\n    def _does_run_match_clause(cls, run, sed):\n        key_type = sed.get('type')\n        key = sed.get('key')"
  },
  {
    "id" : "1f820e58-9141-4297-bda6-964a796a9548",
    "prId" : 1437,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1437#pullrequestreview-249006102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9fe8b17-ab77-41de-8d5b-8f9eb9a8a7c0",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "No major changes here, just made stateless.",
        "createdAt" : "2019-06-12T20:40:32Z",
        "updatedAt" : "2019-06-14T15:32:25Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "03337cf1a1a48c7250620a33ba88655427292162",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +179,183 @@\n    @classmethod\n    def _parse_search_filter(cls, filter_string):\n        if not filter_string:\n            return []"
  },
  {
    "id" : "95f8e6af-a015-4054-b025-b0ebd5617cc8",
    "prId" : 1272,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1272#pullrequestreview-237920867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c140a114-27bc-46b3-9a5a-a5c70e43a1a3",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Because each searchable attribute may have subtly different actual return values (e.g., suppose one were an int), could we make sure we have a test which explicitly tries out each one in an end-to-end manner over either the file_store or sql_store?",
        "createdAt" : "2019-05-15T15:53:10Z",
        "updatedAt" : "2019-05-15T16:59:34Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "10a4e0e9-594c-4bba-acc3-9d4bfa74b023",
        "parentId" : "c140a114-27bc-46b3-9a5a-a5c70e43a1a3",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "The current 3 searchables have string values. There is coverage for each of these in `test_sqlalchemy_store` and `test_search_utils` will see if something is missing.",
        "createdAt" : "2019-05-15T16:00:53Z",
        "updatedAt" : "2019-05-15T16:59:34Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe1e581178ab479c42ea74052d716c2dbb22ff23",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +283,287 @@                                      \"'{}\".format(comparator,\n                                                   cls.VALID_STRING_ATTRIBUTE_COMPARATORS))\n            lhs = getattr(run.info, key)\n        else:\n            raise MlflowException(\"Invalid search expression type '%s'\" % key_type,"
  },
  {
    "id" : "e3b49e93-6004-4a07-acce-245ea3f01bed",
    "prId" : 1245,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1245#pullrequestreview-236358016",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05509314-ae5b-46ad-9289-ee3ee8ec4ff2",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "nice this is pretty cool :)",
        "createdAt" : "2019-05-11T02:04:02Z",
        "updatedAt" : "2019-05-11T06:22:54Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa2a4b4d92cf36190e531980a0c175f73eeaaebc",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +296,300 @@                                          \"'{}\".format(comparator,\n                                                       cls.VALID_STRING_ATTRIBUTE_COMPARATORS))\n                lhs = getattr(run.info, key)\n            else:\n                raise MlflowException(\"Invalid attribute key type '{}'\".format(key))"
  },
  {
    "id" : "775c2c70-8b71-4678-84fe-ba5651269784",
    "prId" : 1060,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1060#pullrequestreview-220678222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4e17b0d-5473-4302-bc11-df889bf0287e",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Have been thinking some about this. One of the things we should look at search is treat the following as the same:\r\n\r\n```\r\nparams.model = \"LR\"\r\nPARAMS.model = \"LR\"\r\nParams.model = \"LR\"\r\n```\r\n\r\nThis is outside the scope of this PR, but if we are looking at this as a SQL search query: It makes sense to have values and column names are case-sensitive but can we relax this constraint for table names?",
        "createdAt" : "2019-03-29T17:46:34Z",
        "updatedAt" : "2019-03-29T23:16:34Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "656fc794de9b53608d60d061bfa0082a2a66c9bd",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +10,14 @@    VALID_METRIC_COMPARATORS = set(['>', '>=', '!=', '=', '<', '<='])\n    VALID_PARAM_COMPARATORS = set(['!=', '='])\n    VALID_TAG_COMPARATORS = set(['!=', '='])\n    _METRIC_IDENTIFIER = \"metric\"\n    _ALTERNATE_METRIC_IDENTIFIERS = set([\"metrics\"])"
  },
  {
    "id" : "80c72a79-c023-4096-b29f-28961dc5c21a",
    "prId" : 1042,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1042#pullrequestreview-219767282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5e08e57-b3c3-438f-8773-28a2f95116c2",
        "parentId" : null,
        "authorId" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "body" : "What happens if `value` is a single character?",
        "createdAt" : "2019-03-27T21:56:07Z",
        "updatedAt" : "2019-03-29T01:02:47Z",
        "lastEditedBy" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "tags" : [
        ]
      },
      {
        "id" : "a5942471-aa72-434e-a3bb-10d71b869652",
        "parentId" : "a5e08e57-b3c3-438f-8773-28a2f95116c2",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "It should be fine. Since we call `_is_quoted` before trimming that checks for presence of both starting and ending quote and trimming an empty string should be ok. However, I will add a `len(value) >= 2` check",
        "createdAt" : "2019-03-27T23:02:22Z",
        "updatedAt" : "2019-03-29T01:02:47Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "de9347f628b742ab47249d397e2c23dafede9514",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +42,46 @@\n    @classmethod\n    def _is_quoted(cls, value, pattern):\n        return len(value) >= 2 and value.startswith(pattern) and value.endswith(pattern)\n"
  },
  {
    "id" : "0aa49aee-696f-4fb0-b9d4-167587bd4241",
    "prId" : 1042,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1042#pullrequestreview-219771104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "375d0d64-e252-4a2b-85af-84b73f63955e",
        "parentId" : null,
        "authorId" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "body" : "Is it possible to put the token values in these error messages?",
        "createdAt" : "2019-03-27T22:04:28Z",
        "updatedAt" : "2019-03-29T01:02:47Z",
        "lastEditedBy" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "tags" : [
        ]
      },
      {
        "id" : "9ffe4571-a051-4d28-83fc-482a90901ea2",
        "parentId" : "375d0d64-e252-4a2b-85af-84b73f63955e",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "They are included.",
        "createdAt" : "2019-03-27T23:16:20Z",
        "updatedAt" : "2019-03-29T01:02:47Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "de9347f628b742ab47249d397e2c23dafede9514",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +122,126 @@                                  error_code=INVALID_PARAMETER_VALUE)\n        if not isinstance(tokens[0], Identifier):\n            raise MlflowException(\"{}. Expected 'Identifier' found '{}'\".format(base_error_string,\n                                                                                str(tokens[0])),\n                                  error_code=INVALID_PARAMETER_VALUE)"
  },
  {
    "id" : "81c3e253-343d-44b1-bb89-367c5df51398",
    "prId" : 1042,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1042#pullrequestreview-219770865",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "909e3272-579a-49f7-b11f-a2e9c0653f31",
        "parentId" : null,
        "authorId" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "body" : "Looks like these branches in this function aren't covered in our unit tests, could we add some for these error cases?",
        "createdAt" : "2019-03-27T22:07:19Z",
        "updatedAt" : "2019-03-29T01:02:47Z",
        "lastEditedBy" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "tags" : [
        ]
      },
      {
        "id" : "d25570b2-72c6-456a-8535-0b6f25f9aa64",
        "parentId" : "909e3272-579a-49f7-b11f-a2e9c0653f31",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "@andrewmchen : great code review.\r\n\r\nI had a difficult time writing test for these because anything I thought of was caught by \"this needs to be a comparison clause\" -- but i knew we needed this. Now that I think again, I can put in some test like `1 = 1` or `\"LR\" = params.model` both legit SQL syntax",
        "createdAt" : "2019-03-27T23:15:22Z",
        "updatedAt" : "2019-03-29T01:02:47Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "de9347f628b742ab47249d397e2c23dafede9514",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +118,122 @@        base_error_string = \"Invalid comparison clause\"\n        if len(tokens) != 3:\n            raise MlflowException(\"{}. Expected 3 tokens found {}\".format(base_error_string,\n                                                                          len(tokens)),\n                                  error_code=INVALID_PARAMETER_VALUE)"
  },
  {
    "id" : "ccdb524d-2ae5-4361-8a12-448839c29e69",
    "prId" : 905,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/905#pullrequestreview-210000226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67cfd39a-4630-475d-8686-4afb56654dac",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "It looks like this throws a ValueError if there's more than one \".\" in the search filter because the result of split() will contain more than two elements (so e.g. use cases like searching on a param with a period in the value, like `metrics.modelClassName = 'sklearn.ensemble.RandomForestClassifier'`, will break). Is that intentional & if so should we document it in the protobuf so it shows up in public docs?",
        "createdAt" : "2019-03-02T02:25:47Z",
        "updatedAt" : "2019-03-04T07:31:33Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "e23e11dd-ba57-4755-92b5-e59c8337b3d3",
        "parentId" : "67cfd39a-4630-475d-8686-4afb56654dac",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "No. This is applicable only for the left hand side if the expression. So if the filter were defined like\r\n\r\n```\r\nmetric.crazy.name <= 0.01\r\n```\r\n\r\nAnd will error out. Will clean up message and add a test case.",
        "createdAt" : "2019-03-04T07:28:44Z",
        "updatedAt" : "2019-03-04T07:31:33Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "305d8fbb05e5974a144647891b6d6519b76a49d8",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +63,67 @@    def _get_identifier(cls, identifier):\n        try:\n            entity_type, key = identifier.split(\".\")\n        except ValueError:\n            raise MlflowException(\"Invalid filter string '%s'. Filter comparison is expected as \""
  }
]