[
  {
    "id" : "7cd0596c-c08e-4a0a-9779-f214b4a0be5e",
    "prId" : 4491,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4491#pullrequestreview-710415094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c96ac02-858d-433e-9100-d369bd22ce16",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Can we add tests for this function?",
        "createdAt" : "2021-07-20T10:19:28Z",
        "updatedAt" : "2021-07-20T10:19:29Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "94dde8f999c61180d2a5a69bca09678e043df79f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +123,127 @@\n\ndef _inspect_original_var_name(var, fallback_name):\n    \"\"\"\n    Inspect variable name, will search above frames and fetch the same instance variable name"
  },
  {
    "id" : "cf16b4d8-b4d2-4837-90ca-99ff04cb825c",
    "prId" : 4402,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4402#pullrequestreview-670889172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "124590a0-ab37-4a58-9998-7a1fee0b7ecc",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Define a utility to chunk a list, which is used to create GetCredentialsForRead and GetCredentialsForWrite requests that respect the maximum request size of 2000 artifact paths.",
        "createdAt" : "2021-05-28T02:51:30Z",
        "updatedAt" : "2021-05-28T02:51:30Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f09a96cfc07591d5960f1bc239a7e3738e448d69",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +64,68 @@\n\ndef chunk_list(l, chunk_size):\n    for i in range(0, len(l), chunk_size):\n        yield l[i : i + chunk_size]"
  },
  {
    "id" : "d6521c5b-6ebe-445a-aaff-4a498d8d317f",
    "prId" : 4228,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4228#pullrequestreview-636268463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36e37d62-193f-4db8-9a12-c6495ba2a309",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Could you make sure we have an internal follow-up JIRA for deduplicating some of this code between pyspark & sklearn autologging? e.g:\r\n\r\n* Pulling the ``TrainingSession`` abstraction (shared between sklearn and pyspark.ml) into `mlflow/utils/autologging_utils/training_session.py` and updating sklearn & pyspark.ml autologging to use the shared abstraction (deleting the separate `SparkTrainingSession` and `SklearnTrainingSession` classes)\r\n* Similarly, deduplicating the `_truncate_dict` method defined in `mlflow/sklearn/utils.py` with the new shared method defined in this file (delete `_truncate_dict` from mlflow/sklearn/utils.py and call the `mlflow.utils.truncate_dict` API` instead in sklearn autologging)\r\n\r\nAre there other things we should make sure to deduplicate? While I'm ok with deferring refactors to a follow-up PR to keep the size of this PR manageable, they are a must-do IMO & we should make sure to do the refactors immediately after merging this PR",
        "createdAt" : "2021-04-14T15:20:25Z",
        "updatedAt" : "2021-04-16T09:37:11Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "bfd4545b-d1e2-4b66-b3a8-822202164b6d",
        "parentId" : "36e37d62-193f-4db8-9a12-c6495ba2a309",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "I think that's all and here's a PR to address this: https://github.com/mlflow/mlflow/pulls/4252\r\n",
        "createdAt" : "2021-04-15T04:54:45Z",
        "updatedAt" : "2021-04-16T09:37:11Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fb4a8c2161c423a5da8b1814bfce67624a9ce33",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +69,73 @@\n\ndef truncate_dict(d, max_key_length=None, max_value_length=None):\n    def _truncate_and_ellipsize(value, max_length):\n        return str(value)[: (max_length - 3)] + \"...\""
  }
]