[
  {
    "id" : "95f1b3e8-fd96-4928-ab2f-20be8c35d9b1",
    "prId" : 4119,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4119#pullrequestreview-599190403",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7e3c60b-4948-455e-9f8a-4c6ead6e033a",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "This seems to have a strange interaction with the `@experimental` decorator. When `@experimental` and `@autologging_integration` are stacked on a method, the resulting docs look like:\r\n\r\n<img width=\"1366\" alt=\"Screen Shot 2021-02-25 at 7 37 26 PM\" src=\"https://user-images.githubusercontent.com/39497902/109242677-2b032b00-77a1-11eb-9f70-b909c50e0158.png\">\r\n\r\nObserve that all of the method params / descriptions are now contained in a blue `Note` box, which isn't the desired behavior (only the version information should be shown in the `Note` box - see https://mlflow.org/docs/latest/python_api/mlflow.fastai.html#mlflow.fastai.autolog for reference).\r\n\r\nTo debug, you can build the MLflow docs locally by navigating to the `mlflow/docs` folder and running `make rsthtml`. This will generate html docs in the `mlflow/docs/build` folder that you can open in your browser.",
        "createdAt" : "2021-02-26T01:46:49Z",
        "updatedAt" : "2021-03-03T08:09:54Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "228d54cfc0b09d6b60302a9b2eadd85766bd9fa1",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +446,450 @@\n        if name in _cross_tested_flavor_to_module_name_and_module_key:\n            wrapped_autolog.__doc__ = (\n                _gen_autologging_package_version_requirements_doc(name) + wrapped_autolog.__doc__\n            )"
  },
  {
    "id" : "15cea0af-1eda-4799-baff-ab84e2cfd746",
    "prId" : 4093,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4093#pullrequestreview-589765763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11de8998-70be-46e3-bf61-8edf26406dfe",
        "parentId" : null,
        "authorId" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "body" : "@dbczumar what does this do?",
        "createdAt" : "2021-02-12T04:35:22Z",
        "updatedAt" : "2021-02-12T20:09:07Z",
        "lastEditedBy" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "tags" : [
        ]
      },
      {
        "id" : "a45a5699-4eac-437f-93f9-e896ab176c22",
        "parentId" : "11de8998-70be-46e3-bf61-8edf26406dfe",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "This sets a function attribute (https://www.python.org/dev/peps/pep-0232/) allowing us to fetch the autologging integration name from the framework-specific autologging function being examined in the `setup_autologging` import hook. I'll add an inline comment.",
        "createdAt" : "2021-02-12T19:13:09Z",
        "updatedAt" : "2021-02-12T20:09:07Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fbdf9e74f29734a01631c27dc3bdebea8cf8b7f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +353,357 @@        # function, allowing the integration name to be extracted from the function. This is used\n        # during the execution of import hooks for `mlflow.autolog()`.\n        wrapped_autolog.integration_name = name\n        return wrapped_autolog\n"
  },
  {
    "id" : "48df5861-aa48-43a0-a236-f11f21d1869d",
    "prId" : 3957,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3957#pullrequestreview-564662593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5e1b29e-ed8c-4661-a08e-639aca4c6c82",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "@dbczumar \r\nShould we raise a deprecation warning if `call_args` is not an empty tuple?",
        "createdAt" : "2021-01-08T08:35:40Z",
        "updatedAt" : "2021-01-09T00:44:21Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "4bb6032b-9f55-468c-a6aa-7b6cb6ac2148",
        "parentId" : "c5e1b29e-ed8c-4661-a08e-639aca4c6c82",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Added a warning!",
        "createdAt" : "2021-01-08T08:55:17Z",
        "updatedAt" : "2021-01-09T00:44:21Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "c49ced3a-41eb-4fa7-a98e-ec270c682535",
        "parentId" : "c5e1b29e-ed8c-4661-a08e-639aca4c6c82",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "I'm pretty sure that the warning will be properly emitted but can we add a small test to verify that?",
        "createdAt" : "2021-01-08T08:57:44Z",
        "updatedAt" : "2021-01-09T00:44:21Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "37fe3e87-d48d-4a50-8502-20bf476dbd10",
        "parentId" : "c5e1b29e-ed8c-4661-a08e-639aca4c6c82",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Done! Also added a case verifying that methods on the default logging impl don't throw.",
        "createdAt" : "2021-01-09T00:38:08Z",
        "updatedAt" : "2021-01-09T00:44:21Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e017e7a129cac0e6af5d54bc886a892d4adbd97",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +607,611 @@        :param call_args: **DEPRECATED** The positional arguments passed to the `autolog()` call.\n                          This field is empty in MLflow > 1.13.1; all arguments are passed in\n                          keyword form via `call_kwargs`.\n        :param call_kwargs: The arguments passed to the `autolog()` call in keyword form.\n                            Any positional arguments should also be converted to keyword form"
  },
  {
    "id" : "0165cf28-44e3-44a0-8337-dceb44cde574",
    "prId" : 3870,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3870#pullrequestreview-555900296",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa8bd4a5-c58e-4b4a-8797-657382ce1cf3",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Pull this out as a \"public\" developer API. Folks who supply their own `AutologgingEventLogger` implementations may have to reason about its content",
        "createdAt" : "2020-12-19T00:36:02Z",
        "updatedAt" : "2020-12-21T07:43:35Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "47bd1759-4fe1-4cd7-a386-80b870a79781",
        "parentId" : "aa8bd4a5-c58e-4b4a-8797-657382ce1cf3",
        "authorId" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "body" : "This is very nice",
        "createdAt" : "2020-12-19T01:11:30Z",
        "updatedAt" : "2020-12-21T07:43:35Z",
        "lastEditedBy" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ccefb82ffe852075ce5019582bfd26906681ef7",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +521,525 @@# - integration: the name of the autologging integration corresponding to the session\n# - id: a unique session identifier (e.g., a UUID)\nAutologgingSession = namedtuple(\"AutologgingSession\", [\"integration\", \"id\"])\n\n"
  },
  {
    "id" : "1e41c780-b1fb-40d5-ba5f-5179411b088e",
    "prId" : 3870,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3870#pullrequestreview-555895327",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7fc00f6-2a45-436a-8923-fddf21ea56a6",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@apurva-koti @harupy This abstraction allows developers (e.g., Databricks engineers) to plug in their own event loggers in order to instrument autologged ML executions",
        "createdAt" : "2020-12-19T00:40:14Z",
        "updatedAt" : "2020-12-21T07:43:35Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ccefb82ffe852075ce5019582bfd26906681ef7",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +547,551 @@\n\nclass AutologgingEventLogger:\n    \"\"\"\n    Provides instrumentation hooks for important autologging lifecycle events, including:"
  },
  {
    "id" : "914c38ce-a035-4d34-be3c-9047f6b24433",
    "prId" : 3870,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3870#pullrequestreview-555924897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f059eeef-fd83-4b16-8141-37d19da16a7d",
        "parentId" : null,
        "authorId" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "body" : "Should we just put `disable=broad-except` in our `pylintrc`? Seems we've been using a lot of these (and will continue to) as more autologging meta code is added",
        "createdAt" : "2020-12-19T01:28:46Z",
        "updatedAt" : "2020-12-21T07:43:35Z",
        "lastEditedBy" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "tags" : [
        ]
      },
      {
        "id" : "54cc7f8f-dadd-4038-8487-30731ec359d8",
        "parentId" : "f059eeef-fd83-4b16-8141-37d19da16a7d",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "+1 (for addressing this in a separate PR)",
        "createdAt" : "2020-12-19T03:13:00Z",
        "updatedAt" : "2020-12-21T07:43:35Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "b4360461-58f7-4748-94e9-08727583657b",
        "parentId" : "f059eeef-fd83-4b16-8141-37d19da16a7d",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "+1! Will file a follow-up PR for this that adds `broad-except` to `pylintrc` and drops all inline instances",
        "createdAt" : "2020-12-19T07:46:13Z",
        "updatedAt" : "2020-12-21T07:43:35Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ccefb82ffe852075ce5019582bfd26906681ef7",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +331,335 @@            try:\n                AutologgingEventLogger.get_logger().log_autolog_called(name, args, kwargs)\n            except Exception:  # pylint: disable=broad-except\n                pass\n"
  },
  {
    "id" : "96da6e8b-9ef1-486b-933e-f84323ade352",
    "prId" : 3870,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3870#pullrequestreview-555924897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d50ca55f-4a58-4dc1-9974-3e034b5afd3b",
        "parentId" : null,
        "authorId" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "body" : "Tad confused as to why we need these static constructs to get/set/store a singleton in `_event_logger`. Seems like all the log functions that follow this don't need any info other than the data required to construct the log string, and don't affect the rest of the class.\r\n\r\nCouldn't a user just use an instance of this function as they desire? ie\r\n```\r\nlogger = AutologgingEventLogger()\r\nlogger.log_some_stuff(...)\r\n```",
        "createdAt" : "2020-12-19T01:33:58Z",
        "updatedAt" : "2020-12-21T07:43:35Z",
        "lastEditedBy" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "tags" : [
        ]
      },
      {
        "id" : "44fef6be-f6f5-42a8-9141-1f78f9fb22b2",
        "parentId" : "d50ca55f-4a58-4dc1-9974-3e034b5afd3b",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "The goal of `AutologgingEventLogger` is to provide a way for developers (e.g., Databricks engineers working on the Machine Learning Runtime) to plug their own logging / instrumentation hooks into MLflow's autologging routines. `safe_patch` is instrumented with `AutologgingEventLogger` calls at various points in the patch execution procedure.\r\n\r\nAccordingly, we need to tell `safe_patch` *which* hooks to use throughout the patch code path by specifying an `AutologgingEventLogger` instance (i.e. some subclass of `AutologgingEventLogger` that a developer has written). The approach taken in this PR is to use a static `set_logger()` method defined on `AutologgingEventLogger` to provide the instance to `safe_patch`, which `safe_patch` consumes via the `AutologgingEventLogger.get_logger()` method.\r\n\r\nAs an alternative, we may consider separating the hooks and the static functions into two separate objects / classes (e.g, `AutologgingEventLoggerProvider` and `AutologgingEventLogger`), though I'm not sure that it helps simplify things.\r\n\r\n@apurva-koti Let me know if this makes things clearer, and please let me know if you have suggestions for a simpler approach. cc @harupy\r\n",
        "createdAt" : "2020-12-19T07:52:20Z",
        "updatedAt" : "2020-12-21T07:43:35Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ccefb82ffe852075ce5019582bfd26906681ef7",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +588,592 @@        :param logger: The instance of `AutologgingEventLogger` to use when invoking logging hooks.\n        \"\"\"\n        AutologgingEventLogger._event_logger = logger\n\n    def log_autolog_called(self, integration, call_args, call_kwargs):"
  },
  {
    "id" : "9cf293d1-6fc2-4ab3-bd96-0b6f7ea288e4",
    "prId" : 3855,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3855#pullrequestreview-554253292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60bda608-faf2-42e0-9e51-9e946171a563",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Found another approach which allows giving `SafeExceptionClass` and `SafeExceptionAbstractClass` appropriate names.\r\n\r\n\r\n```python\r\ndef _exception_safe_class_factory(base_class, name):\r\n    docstring = \"\"\"\r\n...\r\n\"\"\"\r\n\r\n    def __new__(cls, name, bases, dct):\r\n        for m in dct:\r\n            if callable(dct[m]):\r\n                dct[m] = exception_safe_function(dct[m])\r\n        return base_class.__new__(cls, name, bases, dct)\r\n\r\n    clazz = type(name, (base_class,), {\"__new__\": __new__})\r\n    clazz.__doc__ = docstring\r\n\r\n    return clazz\r\n```",
        "createdAt" : "2020-12-17T03:24:57Z",
        "updatedAt" : "2020-12-17T04:26:09Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "44ecec2664e9458f2b51e4ec66a8d46276570474",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +408,412 @@\n\ndef _exception_safe_class_factory(base_class):\n    \"\"\"\n    Creates an exception safe metaclass that inherits from `base_class`."
  },
  {
    "id" : "a65e94f9-34af-4cdd-8401-6773db9055be",
    "prId" : 3847,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3847#pullrequestreview-554067050",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b00919d-3fcc-4534-814a-c523acd70960",
        "parentId" : null,
        "authorId" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "body" : "Could this function not just take a `Run` object instead of its id, since we use the id to immediately get the run object anyway?",
        "createdAt" : "2020-12-16T16:51:06Z",
        "updatedAt" : "2020-12-16T16:51:06Z",
        "lastEditedBy" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "tags" : [
        ]
      },
      {
        "id" : "253d3628-4af4-49dc-8581-d49529062068",
        "parentId" : "1b00919d-3fcc-4534-814a-c523acd70960",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Good question! There's a bit of a subtle & unfortunate distinction here. The first run object that we fetch the ID from is a fluent active run, which doesn't contain up-to-date tags / metrics / params set during the execution of patch code. The second run object is a Run entity (https://mlflow.org/docs/latest/python_api/mlflow.entities.html#mlflow.entities.Run) fetched via the MLflow client that contains tags (which we need to inspect) / metrics / params.",
        "createdAt" : "2020-12-16T20:40:44Z",
        "updatedAt" : "2020-12-16T20:40:44Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "bae36ef7-1374-4631-8e21-27094b3e4b4e",
        "parentId" : "1b00919d-3fcc-4534-814a-c523acd70960",
        "authorId" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "body" : "Right, that would make sense. Thanks!",
        "createdAt" : "2020-12-16T20:41:52Z",
        "updatedAt" : "2020-12-16T20:41:53Z",
        "lastEditedBy" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d2ab7ef134b01fc3c750e29f02b2197c3346239",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +691,695 @@\n\ndef _validate_autologging_run(autologging_integration, run_id):\n    \"\"\"\n    For testing purposes, verifies that an MLflow run produced by an `autologging_integration`"
  },
  {
    "id" : "2b2ac89c-2333-4883-9fde-5ea1fa63ce78",
    "prId" : 3735,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3735#pullrequestreview-538206962",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3223f5b-0e6e-4602-afc2-0b01a6199f37",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "According to https://docs.python.org/3/library/inspect.html#inspect.getfullargspec, `inspect.signature()` is the recommended utility for method signature inspection in Python 3. `getfullargspec` is kept for compatibility with Python 2 code, which is no longer a concern for us. Further `inspect.getfullargspec` does not return accurate signature information for the latest versions of TensorFlow and Keras.\r\n\r\nAccordingly, we drop in `inspect.signature()` in place of the previous `getfullargspec` and clean up the logic a bit.",
        "createdAt" : "2020-11-25T07:10:08Z",
        "updatedAt" : "2020-11-26T00:31:10Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cc2957ff2b6882e6c2b73b437c7c6f434ee09bd",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +40,44 @@    :return: None\n    \"\"\"\n    param_spec = inspect.signature(fn).parameters\n    # Filter out `self` from the signature under the assumption that it is not contained\n    # within the specified `args`, as stipulated by the documentation"
  },
  {
    "id" : "c9165c6a-8ca7-467f-b17e-8e810b567cad",
    "prId" : 3735,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3735#pullrequestreview-538825048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adca4273-3b2d-451d-b251-75ce5fc30517",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Not a huge fan of this change (i.e. what if `self` is actually the first element of `args`?). Will revisit this tomorrow.",
        "createdAt" : "2020-11-25T10:16:24Z",
        "updatedAt" : "2020-11-26T00:31:10Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "330748f1-efee-4e47-905d-b1d2d24ee666",
        "parentId" : "adca4273-3b2d-451d-b251-75ce5fc30517",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Seems acceptable - callers can filter out `self` via the patched function signature. I've documented the expectation that `self` is not a part of the `args` passed to this function.",
        "createdAt" : "2020-11-25T20:24:44Z",
        "updatedAt" : "2020-11-26T00:31:10Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cc2957ff2b6882e6c2b73b437c7c6f434ee09bd",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +43,47 @@    # Filter out `self` from the signature under the assumption that it is not contained\n    # within the specified `args`, as stipulated by the documentation\n    relevant_params = [param for param in param_spec.values() if param.name != \"self\"]\n\n    # Fetch the parameter names for specified positional arguments from the function"
  },
  {
    "id" : "88ea979f-5d2b-4962-9d3f-d75a26a915d7",
    "prId" : 3682,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3682#pullrequestreview-529907426",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6430f512-8cf6-4489-a04b-e7069f21a1d9",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Leverages function attributes from https://www.python.org/dev/peps/pep-0232/ for argument validation purposes",
        "createdAt" : "2020-11-13T09:31:48Z",
        "updatedAt" : "2020-12-12T00:40:25Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0abbb6cdb17a9d8e5fb56b210eb3b90830e21046",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +388,392 @@    \"\"\"\n    if _is_testing():\n        setattr(function, _ATTRIBUTE_EXCEPTION_SAFE, True)\n\n    def safe_function(*args, **kwargs):"
  },
  {
    "id" : "9539cb0d-a42e-4f8a-8cee-a2ee10b73b54",
    "prId" : 3682,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3682#pullrequestreview-531560015",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45ff1624-9041-45c2-a46f-3bbc6874d269",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "```suggestion\r\n# Dict mapping integration name to its config.\r\nAUTOLOGGING_INTEGRATIONS = {}\r\n```",
        "createdAt" : "2020-11-16T17:45:37Z",
        "updatedAt" : "2020-12-12T00:40:25Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0abbb6cdb17a9d8e5fb56b210eb3b90830e21046",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +22,26 @@\n# Dict mapping integration name to its config.\nAUTOLOGGING_INTEGRATIONS = {}\n\n_logger = logging.getLogger(__name__)"
  },
  {
    "id" : "73dfe359-a1d1-444f-b117-b270fe8dc380",
    "prId" : 3682,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3682#pullrequestreview-550569042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e82a1d5-085e-4ad6-8a3e-393c6e84e2b0",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "```suggestion\r\n        _logger.warning(\"Failed to restore original signature for wrapper around %s\", wrapped)\r\n```\r\n\r\nShould we use `warning` here?",
        "createdAt" : "2020-12-11T09:12:55Z",
        "updatedAt" : "2020-12-12T00:40:25Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "df0c45d6-abde-4592-93c0-8181350fa0e3",
        "parentId" : "0e82a1d5-085e-4ad6-8a3e-393c6e84e2b0",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Because we expect this to happen in some cases (e.g., when patching `tf.estimator.Estimator.export_savedmodel()`), I think it's best not to emit a warning to users here. The debug log should help us for debugging purposes later on.",
        "createdAt" : "2020-12-11T20:52:35Z",
        "updatedAt" : "2020-12-12T00:40:25Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0abbb6cdb17a9d8e5fb56b210eb3b90830e21046",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +92,96 @@        updated_wrapper.__signature__ = inspect.signature(wrapped)\n    except Exception:  # pylint: disable=broad-except\n        _logger.debug(\"Failed to restore original signature for wrapper around %s\", wrapped)\n    return updated_wrapper\n"
  },
  {
    "id" : "e7a328c2-0f71-4d7c-8b78-b20053ac6d94",
    "prId" : 3449,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3449#pullrequestreview-499705871",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ce7b498-0b6e-4456-a29a-b2038ca44450",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Can we document this class?",
        "createdAt" : "2020-09-30T18:32:17Z",
        "updatedAt" : "2020-10-02T20:41:49Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b95c1e1c486a3a456756b1f91c46775f58160e37",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +118,122 @@    gorilla.apply(patch)\n\n\nclass _InputExampleInfo:\n    \"\"\""
  },
  {
    "id" : "78121cbc-55d1-44d0-84c1-3fce57ae22c9",
    "prId" : 3449,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3449#pullrequestreview-499840752",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4444b8b5-9325-4168-bc8c-5126ebe796b2",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "I know we discussed this offline, but can we insert some logic to short-circuit & return None, None if both of these conditions are false? Just in case sampling that input data is expensive for some reason.",
        "createdAt" : "2020-09-30T19:19:08Z",
        "updatedAt" : "2020-10-02T20:41:49Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "4dd49cd4-7548-43fd-a903-989c9f669e08",
        "parentId" : "4444b8b5-9325-4168-bc8c-5126ebe796b2",
        "authorId" : "4009fe74-c5d1-469a-bdb2-62f993bc2d7d",
        "body" : "we already have this: the get_input_example only fires `if log_input_example or log_model_signature:`",
        "createdAt" : "2020-09-30T20:47:57Z",
        "updatedAt" : "2020-10-02T20:41:49Z",
        "lastEditedBy" : "4009fe74-c5d1-469a-bdb2-62f993bc2d7d",
        "tags" : [
        ]
      },
      {
        "id" : "347fa300-faeb-4548-82e7-577af6110c4f",
        "parentId" : "4444b8b5-9325-4168-bc8c-5126ebe796b2",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Doh!",
        "createdAt" : "2020-09-30T21:56:05Z",
        "updatedAt" : "2020-10-02T20:41:49Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b95c1e1c486a3a456756b1f91c46775f58160e37",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +158,162 @@    :return: A tuple of input_example and signature. Either or both could be None based on the\n             values of log_input_example and log_model_signature.\n    \"\"\"\n\n    input_example = None"
  },
  {
    "id" : "4a506816-a090-4879-b2ab-360ef5ad1406",
    "prId" : 3449,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3449#pullrequestreview-499705871",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af6a42c8-2591-4a1c-9219-61553707caba",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Nit: This is unused. Did we intend to swap it into `xgboost.py` and `lightgbm.py`?",
        "createdAt" : "2020-09-30T19:31:05Z",
        "updatedAt" : "2020-10-02T20:41:49Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b95c1e1c486a3a456756b1f91c46775f58160e37",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +8,12 @@\nINPUT_EXAMPLE_SAMPLE_ROWS = 5\nENSURE_AUTOLOGGING_ENABLED_TEXT = (\n    \"please ensure that autologging is enabled before constructing the dataset.\"\n)"
  },
  {
    "id" : "5b178371-435b-434c-8b9f-74d811230e3a",
    "prId" : 2119,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2119#pullrequestreview-320588121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71a9d2bc-b6d0-4975-a998-442a452e0684",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Ah interesting is this actually a known bug / if so do we have a link to the Python bug report?",
        "createdAt" : "2019-11-20T01:22:53Z",
        "updatedAt" : "2019-11-22T23:46:02Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "86944088-8ed1-4ec1-8af7-1c117a5a7f32",
        "parentId" : "71a9d2bc-b6d0-4975-a998-442a452e0684",
        "authorId" : "e71c4958-9dfb-45f1-bc0b-6dd7ac6aef54",
        "body" : "Actually, there might be a way around this. `keras` has its own `getargspec()` [seen here](https://github.com/keras-team/keras/blob/master/keras/utils/generic_utils.py#L246), so I'll try and see if we can get around not logging `fit_generator()` params.",
        "createdAt" : "2019-11-20T21:58:04Z",
        "updatedAt" : "2019-11-22T23:46:02Z",
        "lastEditedBy" : "e71c4958-9dfb-45f1-bc0b-6dd7ac6aef54",
        "tags" : [
        ]
      },
      {
        "id" : "8a5fe695-9553-42d7-82f5-339f9e29e88e",
        "parentId" : "71a9d2bc-b6d0-4975-a998-442a452e0684",
        "authorId" : "e71c4958-9dfb-45f1-bc0b-6dd7ac6aef54",
        "body" : "After testing, even the `keras` specific `getargspec()` returns the same output as `inspect.getargspec()`. Turns out it wasn't a bug that was logged anywhere, but this function is deprecated in Python 3 and the only solution for backwards compatibility with Python 2.",
        "createdAt" : "2019-11-21T01:15:16Z",
        "updatedAt" : "2019-11-22T23:46:02Z",
        "lastEditedBy" : "e71c4958-9dfb-45f1-bc0b-6dd7ac6aef54",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a233494ff9186fd97c35cbd41dfae9e5c24f9ed",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +60,64 @@    all_param_names, _, _, all_default_values = inspect.getargspec(fn)  # pylint: disable=W1505\n\n    # Checking if default values are present for logging. Known bug that getargspec will return an\n    # empty argspec for certain functions, despite the functions having an argspec.\n    if all_default_values is not None and len(all_default_values) > 0:"
  }
]