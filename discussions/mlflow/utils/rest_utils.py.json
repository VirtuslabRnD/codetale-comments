[
  {
    "id" : "42806743-041f-4374-ab17-5453958f56c6",
    "prId" : 4042,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4042#pullrequestreview-582773190",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04de561c-8eea-4c9b-9542-47e09509b25e",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Is there a way we can easily unit test the addition of these provider headers to a request?",
        "createdAt" : "2021-02-03T20:28:51Z",
        "updatedAt" : "2021-02-04T23:03:33Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c01b2120634cc76743d8d301ae6193918dbf13b9",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +44,48 @@    from mlflow.tracking.request_header.registry import resolve_request_headers\n\n    headers = dict({**_DEFAULT_HEADERS, **resolve_request_headers()})\n    if auth_str:\n        headers[\"Authorization\"] = auth_str"
  },
  {
    "id" : "9aa0aba2-2e6e-4435-a602-3f6fa1574e87",
    "prId" : 1846,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1846#pullrequestreview-288843763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87ae88d1-c78b-49e1-8239-10d0ba4dc589",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Do we want to exclude the time spent making the request itself (i.e. the time spent on `requests.request` above) from `time_left`? I remember we'd discussed that 429s should usually be returned quickly, so I'm fine either way, but just wanted to confirm - it could still be nice to do to avoid long user-visible wait times, but on the other hand maybe it's actually good to have the client explicitly sleep between requests to avoid overloading the server (e.g. maybe time spent waiting on the server to respond shouldn't count towards backoff time)",
        "createdAt" : "2019-09-16T19:02:08Z",
        "updatedAt" : "2019-09-16T20:36:39Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "ae4fc9ff-2c7e-43ee-981e-d4ad03164638",
        "parentId" : "87ae88d1-c78b-49e1-8239-10d0ba4dc589",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "Good question. The current semantics of the argument is that it's a limit on how much extra time is the retry logic allowed to add to the request. I think if we included the request time it would be more similar to request timeout. It may be a good idea to have a configurable request timeout but I think that is out of scope of this PR. ",
        "createdAt" : "2019-09-16T19:17:18Z",
        "updatedAt" : "2019-09-16T20:36:39Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5ecc5265fbca21b26827de94e70cc1e770f17ce",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +48,52 @@    def request_with_ratelimit_retries(max_rate_limit_interval, **kwargs):\n        response = requests.request(**kwargs)\n        time_left = max_rate_limit_interval\n        sleep = 1\n        while response.status_code == 429 and time_left > 0:"
  },
  {
    "id" : "6a5977e6-7957-4ff8-a14b-f70f4b34e0b2",
    "prId" : 1846,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1846#pullrequestreview-288845006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d49de1ce-268c-48df-8ec2-28e8828d4d7d",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Just to make sure, in the absolute worst case I guess we'll retry `retries` * `num_retries_in_ request_with_ratelimit_retries` times, e.g. if we have a sequence of responses like `(429, 429, 503, 429 429, 503, 429, 429, 503)`..., but we expect that to be rare since rate-limiting is usually done by the API frontend",
        "createdAt" : "2019-09-16T19:03:05Z",
        "updatedAt" : "2019-09-16T20:36:39Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "4118814e-4780-4350-bf8d-b04768556d90",
        "parentId" : "d49de1ce-268c-48df-8ec2-28e8828d4d7d",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "Yes, exactly. So as long as the rate limiting mechanism works as expected the worst case latency should be num_retries*max_rate_limit_interval (which is equivalent to hitting api timeouts in Databricks).",
        "createdAt" : "2019-09-16T19:19:52Z",
        "updatedAt" : "2019-09-16T20:36:39Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5ecc5265fbca21b26827de94e70cc1e770f17ce",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +60,64 @@    url = \"%s%s\" % (cleaned_hostname, endpoint)\n    for i in range(retries):\n        response = request_with_ratelimit_retries(max_rate_limit_interval,\n                                                  url=url, headers=headers, verify=verify, **kwargs)\n        if response.status_code >= 200 and response.status_code < 500:"
  },
  {
    "id" : "82200bd0-3205-41c2-9c3b-b8741424a72b",
    "prId" : 1846,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1846#pullrequestreview-288840648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "432b7102-c1b7-4d4d-a1e0-33fa6b8b9d6b",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Nit: update docstring for this method to mention the `max_rate_limit_interval` param? e.g. something like\r\n\r\n```\r\n Makes an HTTP request with the specified method to the specified hostname/endpoint. Retries\r\n    up to `retries` times if a request fails with a server error (e.g. error code 500), waiting\r\n    `retry_interval` seconds between successive retries. Parses the API response (assumed to be\r\n    JSON) into a Python object and returns it. If the request fails with a 429 (Too Many Requests), this method\r\n    retries the request with exponential backoff until `max_rate_limit_interval` seconds have passed.\r\n```",
        "createdAt" : "2019-09-16T19:07:56Z",
        "updatedAt" : "2019-09-16T20:36:39Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "b3a4cc0c-42f0-4277-9a97-a9dfccb07a25",
        "parentId" : "432b7102-c1b7-4d4d-a1e0-33fa6b8b9d6b",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "Ah, I forgot to update the docstring, nice catch! ",
        "createdAt" : "2019-09-16T19:11:08Z",
        "updatedAt" : "2019-09-16T20:36:39Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5ecc5265fbca21b26827de94e70cc1e770f17ce",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +20,24 @@\ndef http_request(host_creds, endpoint, retries=3, retry_interval=3,\n                 max_rate_limit_interval=60, **kwargs):\n    \"\"\"\n    Makes an HTTP request with the specified method to the specified hostname/endpoint. Ratelimit"
  },
  {
    "id" : "89fe8746-eb61-4127-b416-f8d7ee75dd7a",
    "prId" : 267,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/267#pullrequestreview-144263646",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9de4e754-1cd3-4c91-8024-a992a9dda411",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Thanks for catching this! The original code resembles the API examples we have in the [Databricks docs](https://docs.databricks.com/api/latest/examples.html), which use basic auth with API tokens.",
        "createdAt" : "2018-08-08T04:24:08Z",
        "updatedAt" : "2018-08-08T04:25:10Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "b18ae28c1fc7485017afac6e46549638ba66f8cb",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +47,51 @@        auth_str = \"Basic \" + base64.standard_b64encode(basic_auth_str).decode(\"utf-8\")\n    elif config.token:\n        auth_str = \"Bearer %s\" % config.token\n    else:\n        _fail_malformed_databricks_auth(profile)"
  },
  {
    "id" : "2eca0521-57ce-42b8-9461-c37511c621ba",
    "prId" : 200,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/200#pullrequestreview-140878655",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc75f7f1-789b-4468-a38b-152779a2f3bf",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Minor behavior change: we now defer to username/password if set. I can flip the order here if anyone cares, but they should be mostly disjoint.",
        "createdAt" : "2018-07-26T19:36:45Z",
        "updatedAt" : "2018-07-30T16:45:28Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "82eb542ecf41ee26b683ac5118d6653a3e43eb61",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +36,40 @@    if config.username is not None and config.password is not None:\n        basic_auth_str = (\"%s:%s\" % (config.username, config.password)).encode(\"utf-8\")\n    elif config.token:\n        basic_auth_str = (\"token:%s\" % config.token).encode(\"utf-8\")\n    if not basic_auth_str:"
  },
  {
    "id" : "ef02438f-6c31-4550-abf6-c8177a6f67e0",
    "prId" : 200,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/200#pullrequestreview-140878738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01d0d50b-3e8c-4518-8589-60074f26926a",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Added support for secure_verify -- previously, were always setting it to False!",
        "createdAt" : "2018-07-26T19:37:00Z",
        "updatedAt" : "2018-07-30T16:45:28Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "82eb542ecf41ee26b683ac5118d6653a3e43eb61",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +46,50 @@\n    secure_verify = True\n    if hasattr(config, 'insecure') and config.insecure:\n        secure_verify = False\n"
  }
]