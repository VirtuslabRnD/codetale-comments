[
  {
    "id" : "04cd3ff0-8d4b-4279-887e-8242bb6b9ce6",
    "prId" : 4041,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4041#pullrequestreview-581708466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "768dc19f-63fe-49bf-9180-494d156129ed",
        "parentId" : null,
        "authorId" : "7dc30493-29f9-4bc4-bf26-00054b8b0b57",
        "body" : "Please modify the documentation to reflect code change.",
        "createdAt" : "2021-02-02T21:22:50Z",
        "updatedAt" : "2021-02-13T00:54:26Z",
        "lastEditedBy" : "7dc30493-29f9-4bc4-bf26-00054b8b0b57",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dec9fd548ed98b62044160044fc139f8d5c4ee8",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +171,175 @@\n    @experimental\n    def predict(self, data):\n        \"\"\"\n        :param data: Either a pandas DataFrame, numpy.ndarray or a dictionary."
  },
  {
    "id" : "6e897abf-01de-49f6-8e87-78716bd636f1",
    "prId" : 2742,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2742#pullrequestreview-398593186",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acade6b2-3581-48a1-bf3e-cf21777fe081",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@andychow-db Looks like we're no longer reshaping the numpy array output. This is necessary in order to flatten multi-dimensional arrays into Pandas DataFrame columns. I would expect pyfunc tests to fail without this reshaping logic.",
        "createdAt" : "2020-04-22T20:52:04Z",
        "updatedAt" : "2020-04-23T21:45:01Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "7a732f50-f006-449d-ab15-dd4359be357b",
        "parentId" : "acade6b2-3581-48a1-bf3e-cf21777fe081",
        "authorId" : "dab5a163-e8a4-4ae3-a16c-0d903dcff35c",
        "body" : "Nice catch! Readded the reshape(-1) function. ",
        "createdAt" : "2020-04-22T21:12:28Z",
        "updatedAt" : "2020-04-23T21:45:01Z",
        "lastEditedBy" : "dab5a163-e8a4-4ae3-a16c-0d903dcff35c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ecc7abad7369938d48a816b8445103e801fdb49",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +179,183 @@            return data.reshape(-1)\n        response = pd.DataFrame.from_dict({c: format_output(p)\n                                           for (c, p) in zip(self.output_names, predicted)})\n        return response\n"
  },
  {
    "id" : "f3622eae-6f94-40f6-9c4f-b15b2a8458ae",
    "prId" : 1127,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1127#pullrequestreview-228749010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ebde66e-c151-40e8-9a06-a1745db224a7",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "It's kind of gross, but it seems the best solution to eliminating linter errors here is to include a \"  # noqa\" or \"  #  pylint:disable=relative-beyond-top-level\" after each import line as described in https://github.com/PyCQA/pycodestyle/issues/264\r\n\r\n",
        "createdAt" : "2019-04-19T16:22:50Z",
        "updatedAt" : "2019-06-03T05:45:38Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "4e088663-e724-4b5f-9223-efa33031d9ca",
        "parentId" : "6ebde66e-c151-40e8-9a06-a1745db224a7",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Note that you'll also want to ensure these tests run in Travis only against Python 3. You can do this by 1) marking the tests as large via the `@pytest.mark.large` annotation before the test declaration (see [here](https://github.com/mlflow/mlflow/blob/7d71ff3894699b5800e52080c8c0f6fe5d46832e/tests/pyfunc/test_spark.py#L68) for an example) and 2) adding a line to the end of .travis.yml (under the \"script\" section) that looks like:\r\n\r\n```\r\n  - if [[ \"$TRAVIS_PYTHON_VERSION\" == \"3.6\" ]]; then\r\n      pytest --verbose tests/onnx --large\r\n    fi \r\n```",
        "createdAt" : "2019-04-19T16:34:11Z",
        "updatedAt" : "2019-06-03T05:45:38Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "432c1de8fda039f755f765c169dc920f408a7d1f",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1,5 @@from __future__ import absolute_import\n\nimport os\nimport yaml\nimport numpy as np"
  },
  {
    "id" : "fa60f3a7-ddf1-40a4-95d7-38eb3213f0a8",
    "prId" : 1127,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1127#pullrequestreview-234198061",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e10ccee6-2fd1-4201-b9f7-fecb83e12a62",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "We should add a section for ONNX to the [Built-in Model Flavors](https://github.com/mlflow/mlflow/blob/master/docs/source/models.rst#built-in-model-flavors) documentation that will be hosted on mlflow.org. In this section, we should state and explain Python version restrictions for this module.",
        "createdAt" : "2019-04-29T22:35:18Z",
        "updatedAt" : "2019-06-03T05:45:38Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "73ae2a94-e30f-4bd7-857f-9a9c6967ab24",
        "parentId" : "e10ccee6-2fd1-4201-b9f7-fecb83e12a62",
        "authorId" : "769ac4dd-ca08-4bc5-8fbc-5ed596bd9046",
        "body" : "Created issue #1204 ",
        "createdAt" : "2019-05-06T20:56:56Z",
        "updatedAt" : "2019-06-03T05:45:38Z",
        "lastEditedBy" : "769ac4dd-ca08-4bc5-8fbc-5ed596bd9046",
        "tags" : [
        ]
      }
    ],
    "commit" : "432c1de8fda039f755f765c169dc920f408a7d1f",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@from __future__ import absolute_import\n\nimport os"
  },
  {
    "id" : "e702ea6a-0ddb-47e2-b3c5-ac16fea3d9cb",
    "prId" : 1127,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1127#pullrequestreview-242867061",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88e4bfe6-1e16-4a4b-8197-341846b5b1ba",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@avflor It occurred to me that we can get the input type for each tensor in the ONNX model via the  `onnxrt.InferenceSession` object. Then, we can check for tensors of type `tensor(float)` and cast the corresponding Pandas DataFrame contents accordingly (either a particular column for the multi-input case or the entire set of values for the single-input case).\r\n\r\nHere's some code indicating that we can examine the `InferenceSession` object to obtain these types:\r\n```\r\n>>> rt = onnxrt.InferenceSession(\"my_model.onnx\")\r\n>>> rt.get_inputs()[0].type\r\n'tensor(float)'\r\n```\r\n\r\nI can make this change if you'd like. Does this make sense from your perspective?",
        "createdAt" : "2019-05-28T06:55:31Z",
        "updatedAt" : "2019-06-03T05:45:38Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "7d766b7f-8150-4985-b541-259e3591e35c",
        "parentId" : "88e4bfe6-1e16-4a4b-8197-341846b5b1ba",
        "authorId" : "769ac4dd-ca08-4bc5-8fbc-5ed596bd9046",
        "body" : "@dbczumar This is great! Makes the code much cleaner. I quickly made the change and testing it now. I'll let you know if it works and then you can take another pass. Thanks a lot for your help!",
        "createdAt" : "2019-05-28T17:50:27Z",
        "updatedAt" : "2019-06-03T05:45:38Z",
        "lastEditedBy" : "769ac4dd-ca08-4bc5-8fbc-5ed596bd9046",
        "tags" : [
        ]
      },
      {
        "id" : "2dbb7b4b-8ffe-4d1a-8663-f3eeab6acb0d",
        "parentId" : "88e4bfe6-1e16-4a4b-8197-341846b5b1ba",
        "authorId" : "769ac4dd-ca08-4bc5-8fbc-5ed596bd9046",
        "body" : "@dbczumar ONNX tests are passing: https://travis-ci.org/mlflow/mlflow/builds/538360806\r\nNow running full tests in travis. Please take a pass and let me know how the code looks like. Also feel free to make any changes :)",
        "createdAt" : "2019-05-28T19:09:18Z",
        "updatedAt" : "2019-06-03T05:45:38Z",
        "lastEditedBy" : "769ac4dd-ca08-4bc5-8fbc-5ed596bd9046",
        "tags" : [
        ]
      }
    ],
    "commit" : "432c1de8fda039f755f765c169dc920f408a7d1f",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +106,110 @@\n\nclass _OnnxModelWrapper:\n    def __init__(self, path):\n        import onnxruntime"
  }
]