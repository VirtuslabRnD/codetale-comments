[
  {
    "id" : "f2f7f778-3e00-4a3c-9ca9-197c8a4fd2db",
    "prId" : 600,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/600#pullrequestreview-162584191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a542bd10-0156-4f1e-a7bb-3dd1a9a4d79e",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "I guess our new paradigm is to require components to define error handling in `errorRenderFunc` or fall through to here. It looks like before we did try to supply some extra info about the nature of the request failure in this default case e.g. via `api.error.xhr.status`, though the logic was broken (nice catch on that btw). Maybe we could still log something here? Although admittedly end users might not think to check the JS logs before raising an issue about a UI bug, so it might not help us too much to do so.",
        "createdAt" : "2018-10-05T22:01:08Z",
        "updatedAt" : "2018-10-08T19:56:49Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "b45cca5e-a823-4c72-add1-925b8a715419",
        "parentId" : "a542bd10-0156-4f1e-a7bb-3dd1a9a4d79e",
        "authorId" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "body" : "Yeah logging something makes sense.",
        "createdAt" : "2018-10-08T18:11:00Z",
        "updatedAt" : "2018-10-08T19:56:49Z",
        "lastEditedBy" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "tags" : [
        ]
      }
    ],
    "commit" : "abeaf47e111214259144457ee5f67d0d6fd37b2e",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +56,60 @@        // This triggers the OOPS error boundary.\n        console.error(\"ERROR\", requests);\n        throw Error(\"GOTO error boundary\");\n      } else {\n        return <div>{children}</div>;"
  }
]