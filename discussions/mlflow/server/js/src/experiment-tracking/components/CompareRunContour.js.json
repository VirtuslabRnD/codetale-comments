[
  {
    "id" : "47df98af-33f9-46b1-a07e-a4b38708cda8",
    "prId" : 2959,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2959#pullrequestreview-440495704",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87116e08-e78a-49e5-bb3c-006613ed01f1",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "We can be more strict here using `PropTypes.shape`.",
        "createdAt" : "2020-06-30T03:35:30Z",
        "updatedAt" : "2020-06-30T03:35:30Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "55f40b45-b35a-41b2-a449-443b04bd3568",
        "parentId" : "87116e08-e78a-49e5-bb3c-006613ed01f1",
        "authorId" : "4f64c319-81b2-4dc8-af79-8a96e80dacf8",
        "body" : "Yes, I think `object` is fine for this PR. Hopefully going forward we can spend some time converting to typescript so we can have real type checks supported at the language level. In the meantime, we can also follow up on this task by creating some centralized shapes like the following that we can convert to actual types eventually.\r\n\r\n```\r\n// common/types.js\r\nimport { shape, number, string, oneOf } from 'prop-types';\r\n\r\nexport const User = shape({\r\n  id: number,\r\n  firstName: string.isRequired,\r\n  lastName: string.isRequired,\r\n  company: string,\r\n  role: oneOf(['user', 'author']),\r\n  address: shape({\r\n    id: number.isRequired,\r\n    street: string.isRequired,\r\n    street2: string,\r\n    city: string.isRequired,\r\n    state: string.isRequired,\r\n    postal: number.isRequired\r\n  });\r\n});\r\n\r\n// MyComponent.js\r\nimport { User } from 'common/types';\r\n\r\nclass MyComponent extends React.Component {\r\n  static propTypes = {\r\n    // Reference centralized PropType declaration.\r\n    user: User,\r\n  };\r\n}\r\n```\r\n\r\nWe can eventually convert these shape assets TO ts types/interfaces",
        "createdAt" : "2020-06-30T23:52:20Z",
        "updatedAt" : "2020-07-01T00:13:30Z",
        "lastEditedBy" : "4f64c319-81b2-4dc8-af79-8a96e80dacf8",
        "tags" : [
        ]
      },
      {
        "id" : "1a029598-ef35-407f-bc2f-51f5a129837f",
        "parentId" : "87116e08-e78a-49e5-bb3c-006613ed01f1",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "@Zangr Thanks for the comment!\r\n\r\n> Hopefully going forward we can spend some time converting to typescript\r\n\r\nAgree with using typescript which should make the UI development much easier.\r\n\r\n> we can also follow up on this task by creating some centralized shapes\r\n\r\nI'm actually working on this. I'll submit a PR when it's ready.",
        "createdAt" : "2020-07-01T01:51:54Z",
        "updatedAt" : "2020-07-01T01:57:06Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f686ead2544f90ec8a952c46e31e48ab05ce554",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +17,21 @@    runInfos: PropTypes.arrayOf(PropTypes.instanceOf(RunInfo)).isRequired,\n    metricLists: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.object)).isRequired,\n    paramLists: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.object)).isRequired,\n    runDisplayNames: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };"
  }
]