[
  {
    "id" : "9bffac1d-74e4-4f75-bfc5-e4175d2bd1b5",
    "prId" : 2476,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2476#pullrequestreview-364354298",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df13a5bb-ad62-4ba4-8790-d6f1fb77281d",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "@tomasatdatabricks This field was deprecated but not removed from update, so I added it back.",
        "createdAt" : "2020-02-25T17:17:09Z",
        "updatedAt" : "2020-02-25T21:45:12Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "a257c604-90b2-4e11-a236-555304bbd895",
        "parentId" : "df13a5bb-ad62-4ba4-8790-d6f1fb77281d",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "Hmm maybe check with @mparkhe, he told me it was going away before the release.",
        "createdAt" : "2020-02-25T18:24:56Z",
        "updatedAt" : "2020-02-25T21:45:12Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "f1338804-fb15-4425-9825-adcbb0409d56",
        "parentId" : "df13a5bb-ad62-4ba4-8790-d6f1fb77281d",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Mm... well, the JS code doesn't currently support any other transition method, so this was the easiest way to get it to work.",
        "createdAt" : "2020-02-25T18:39:24Z",
        "updatedAt" : "2020-02-25T21:45:12Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "31041de06243632d3229f95c815afa2a10d11e9f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +589,593 @@        name=request_message.name, version=request_message.version,\n        description=new_description)\n    if request_message.HasField(\"stage\"):\n        model_version = _get_model_registry_store().transition_model_version_stage(\n            name=request_message.name, version=request_message.version,"
  },
  {
    "id" : "dd17d7a9-2082-433f-b916-4f1fd77370fb",
    "prId" : 1775,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1775#pullrequestreview-282239597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3f35d8b-87e5-42cb-8fab-bbcaaf39176c",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Kind of funny - in the OSS server, we call the AbstractStore implementation, which ([at least based on existing precedent](https://github.com/mlflow/mlflow/blob/b587dc4c8913ba5069871b984d31a06277e4c80a/mlflow/store/abstract_store.py#L65)) is supposed to return `None` when no matching experiment is found. This is currently the case in the FileStore ([see relevant test](https://github.com/mlflow/mlflow/blob/b587dc4c8913ba5069871b984d31a06277e4c80a/tests/store/test_file_store.py#L160)) & SqlAlchemyStore (this PR adds a relevant test in `test_sqlalchemy_store.py`), and we have an e2e test that the REST client handles the OSS server's RESOURCE_DOES_NOT_EXIST response [here](https://github.com/mlflow/mlflow/pull/1775/files#diff-963fd074b87c2dfb21917f87b1a82628R467)",
        "createdAt" : "2019-08-30T20:45:44Z",
        "updatedAt" : "2019-09-13T21:31:41Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5b83e8e83e583120edefbe3b1251878f29bc546",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +170,174 @@    request_message = _get_request_message(GetExperimentByName())\n    response_message = GetExperimentByName.Response()\n    store_exp = _get_store().get_experiment_by_name(request_message.experiment_name)\n    if store_exp is None:\n        raise MlflowException("
  },
  {
    "id" : "d9109a56-e183-4629-a3e6-849922867bd8",
    "prId" : 1542,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1542#pullrequestreview-256952408",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65581904-0213-4f6a-a312-e5c9ef6a96fc",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "This was a bug where the rest store was not propagating token back to the client. The current test in `rest_store` is insufficient because it is not backed by a real store -- but this is an item on our backlog to have better end-to-end REST-y integration tests, so I left the follow-up for later. I manually tested that `search_runs` works against the new server.",
        "createdAt" : "2019-07-02T14:58:11Z",
        "updatedAt" : "2019-07-03T00:59:04Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "c56a59e3d1689610bc769554c02f9ce3f58480ac",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +309,313 @@                                            max_results, order_by, page_token)\n    response_message.runs.extend([r.to_proto() for r in run_entities])\n    if run_entities.token:\n        response_message.next_page_token = run_entities.token\n    response = Response(mimetype='application/json')"
  },
  {
    "id" : "fefc6c0f-d35a-496c-9131-44a423467a8b",
    "prId" : 1437,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1437#pullrequestreview-249016999",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b68c95f-41bc-4175-a8dc-faa728e45aeb",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Refactored `SearchFilter` to remove the statefulness -- we now just pass around strings everywhere and do the parsing at the last possible moment using `SearchUtils`. This refactoring made it easier to reason about how order_by is related to filter, allowing them to reuse code without requiring this extra wrapping/unwrapping layer.",
        "createdAt" : "2019-06-12T20:35:18Z",
        "updatedAt" : "2019-06-14T15:32:25Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "e06678b3-dbc4-4014-a504-b0db01431443",
        "parentId" : "5b68c95f-41bc-4175-a8dc-faa728e45aeb",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "This is a great refactor!",
        "createdAt" : "2019-06-12T21:02:39Z",
        "updatedAt" : "2019-06-14T15:32:25Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "03337cf1a1a48c7250620a33ba88655427292162",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +293,297 @@    if request_message.HasField('run_view_type'):\n        run_view_type = ViewType.from_proto(request_message.run_view_type)\n    filter_string = request_message.filter\n    max_results = request_message.max_results\n    experiment_ids = request_message.experiment_ids"
  },
  {
    "id" : "09a8e068-a62c-404c-8316-17ad8e86902c",
    "prId" : 1411,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1411#pullrequestreview-246364533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f864282a-e473-4a04-aaf3-7b92079266d7",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Can this store types to factory function be also shared?",
        "createdAt" : "2019-06-06T05:08:20Z",
        "updatedAt" : "2019-06-06T21:45:17Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ace610fd660e5077ab8a64278a308c14b860225",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +36,40 @@\n\n_tracking_store_registry = TrackingStoreRegistry()\n_tracking_store_registry.register('', _get_file_store)\n_tracking_store_registry.register('file', _get_file_store)"
  },
  {
    "id" : "c0a1dc1f-1e61-4018-a55e-4ece86eb6f1c",
    "prId" : 1411,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1411#pullrequestreview-246826029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9286844-50f8-49a3-8700-c84187043ba3",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "`w00t w00t`",
        "createdAt" : "2019-06-06T21:30:49Z",
        "updatedAt" : "2019-06-06T21:45:17Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ace610fd660e5077ab8a64278a308c14b860225",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +18,22 @@from mlflow.store.artifact_repository_registry import get_artifact_repository\nfrom mlflow.store.dbmodels.db_types import DATABASE_ENGINES\nfrom mlflow.tracking.registry import TrackingStoreRegistry\nfrom mlflow.utils.proto_json_utils import message_to_json, parse_dict\nfrom mlflow.utils.search_utils import SearchFilter"
  },
  {
    "id" : "1c555fe8-acce-4524-913b-df341b68316a",
    "prId" : 1411,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1411#pullrequestreview-246828060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2619ffd8-827e-4aa8-a926-8ca05f796c58",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "can these lines also be moved into `registry` package under a helper function. `tracking/utils.py` also uses registry in the same manner. So if we have a factory method like so, could be useful for all clients of this\r\n\r\n```\r\ndef get_tracking_store_registry():\r\n  tsr = TrackingStoreRegistry()\r\n  tsr.register('', _get_file_store)\r\n  tsr.register('file', _get_file_store)\r\n  for scheme in DATABASE_ENGINES:\r\n    tsr.register(scheme, _get_sqlachemy_store)\r\n  ...\r\n```",
        "createdAt" : "2019-06-06T21:37:15Z",
        "updatedAt" : "2019-06-06T21:45:17Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ace610fd660e5077ab8a64278a308c14b860225",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +39,43 @@_tracking_store_registry.register('', _get_file_store)\n_tracking_store_registry.register('file', _get_file_store)\nfor scheme in DATABASE_ENGINES:\n    _tracking_store_registry.register(scheme, _get_sqlalchemy_store)\n"
  },
  {
    "id" : "b03e6037-41c2-4c79-b8d8-378d55ad655b",
    "prId" : 1138,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1138#pullrequestreview-229685770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34483859-8495-40ed-911c-f88096bf9b5e",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "BTW, I think (as a result of us having separate `_get_store` methods in handlers.py for the OSS server and in tracking/utils.py) this interestingly results in a new feature where an OSS tracking server could potentially list & allow downloading artifacts from DBFS if it (the server process) has credentials set up correctly. The flow would be:\r\n\r\n1) Create an experiment with a DBFS artifact location\r\n2) Create a run against the experiment (inherits experiment's artifact location)\r\n3) From the client, log artifacts for the run (logs to DBFS b/c the client determines where to log from the run's artifact URI)\r\n4) On the OSS server, view artifacts logged to DBFS in the UI etc\r\n\r\nIt is kinda cool in that it makes DBFS usable with the OSS server just as any other artifact repository (S3, GCS, etc). There's no action required from this comment, just wanted to point this out / write out my thought process to confirm there aren't any other implications of this change",
        "createdAt" : "2019-04-23T17:07:42Z",
        "updatedAt" : "2019-04-24T17:42:06Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "c8497010-f30e-43bb-912d-0e99e0db3c66",
        "parentId" : "34483859-8495-40ed-911c-f88096bf9b5e",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Actually, nvm...I guess artifact repository initialization would still fail on the server after this code change because [_get_host_creds_from_default_store](https://github.com/mlflow/mlflow/pull/1138/files#diff-2672ddebdaf09c4e3cab6ece4ca465c4R137) would fail on the server's store not being a RestStore, so there's no behavior change :)",
        "createdAt" : "2019-04-23T17:16:28Z",
        "updatedAt" : "2019-04-24T17:42:06Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "364efc026ecd5390bd77518d917be262bacf0387",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +337,341 @@@catch_mlflow_exception\ndef _get_artifact_repo(run):\n    return get_artifact_repository(run.info.artifact_uri)\n\n"
  },
  {
    "id" : "ac79b583-752c-4aa4-8f1a-129d6b6fcb92",
    "prId" : 956,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/956#pullrequestreview-214273337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "149bfea6-4416-4f36-a4ff-e51c38fea46d",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Pulled into its own method to simplify mocking `flask_request.get_json` output in testing",
        "createdAt" : "2019-03-14T00:24:28Z",
        "updatedAt" : "2019-03-14T20:59:50Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "494df253ba7acf7e513fe23cdabd271d7846f9bd",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +44,48 @@\n\ndef _get_request_json(flask_request=request):\n    return flask_request.get_json(force=True, silent=True)\n"
  },
  {
    "id" : "6b4f29a2-89f7-4b5a-8c6e-bc14881b8a19",
    "prId" : 860,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/860#pullrequestreview-199143446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "971f33a2-1893-4e10-9ec5-80cafbc7268c",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "reusing `FILE_STORE_ENV_VAR` and `--file-store` option for initialization for now.",
        "createdAt" : "2019-02-01T01:48:33Z",
        "updatedAt" : "2019-02-04T07:17:12Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "0b834c02-87b5-46b4-8007-f3b8e798be01",
        "parentId" : "971f33a2-1893-4e10-9ec5-80cafbc7268c",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "This one I'm not sure there's a reason to avoid updating this one -- I think this is only used to communicate between `mlflow/server/__init__.py` and `mlflow/server/handlers.py` -- in other words, it is not expected that any user actually sets it (we don't document it).",
        "createdAt" : "2019-02-01T16:05:40Z",
        "updatedAt" : "2019-02-04T07:17:12Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb3cf583131d805f4d5cf86122b01c099393d4c4",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +31,35 @@        if _is_database_uri(store_dir):\n            from mlflow.store.sqlalchemy_store import SqlAlchemyStore\n            return SqlAlchemyStore(store_dir, artifact_root)\n        elif _is_local_uri(store_dir):\n            from mlflow.store.file_store import FileStore"
  },
  {
    "id" : "c1dd5694-4fac-4c54-95e1-859c364da422",
    "prId" : 860,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/860#pullrequestreview-199143446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a16e014-c103-4574-ae4c-a58815bebf54",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Should we assert the schema is null or `file:` here? It's possible someone tries to put in another kind of store, e.g. a RestStore. That's weird, but it might be good to error explicitly.",
        "createdAt" : "2019-02-01T16:07:35Z",
        "updatedAt" : "2019-02-04T07:17:12Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb3cf583131d805f4d5cf86122b01c099393d4c4",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +34,38 @@        elif _is_local_uri(store_dir):\n            from mlflow.store.file_store import FileStore\n            _store = FileStore(store_dir, artifact_root)\n        else:\n            raise MlflowException(\"Unexpected URI type '{}' for backend store. \""
  },
  {
    "id" : "c4d7c5df-939f-4903-9418-3d9a61120b98",
    "prId" : 582,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/582#pullrequestreview-160853585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7ac6e51-c7e9-4e44-8720-bbe179086c4c",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Because we aren't explicitly setting a status code here, I'm assuming that the response will have status code 200? \r\n\r\nHowever, 200 is probably not accurate in most cases. While we can handle the 200 code and surface the underlying appropriately in the Python API, requests made directly from REST clients will see successful responses with error text.\r\n\r\nIn some cases, it makes sense to return a 4xx because the operation signifies a client error (as is the case with `mlflow.start_run(run_uuid=<UUID_OF_DELETED_RUN>)`.\r\n\r\nIn other cases, we may want to return 5xx (i.e when we can't assign an error code more specific than `mlflow.protos.service_pb2.INTERNAL_ERROR`).\r\n\r\nWhat are your thoughts here?",
        "createdAt" : "2018-10-02T01:11:26Z",
        "updatedAt" : "2018-10-02T20:37:34Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "97aba19d-6853-4e3e-a05f-95f905519788",
        "parentId" : "b7ac6e51-c7e9-4e44-8720-bbe179086c4c",
        "authorId" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "body" : "Yeah this is an oversight. Let's change it to always return 500 like before and change it in the future to return error codes based on the `error_code` field.",
        "createdAt" : "2018-10-02T01:26:52Z",
        "updatedAt" : "2018-10-02T20:37:34Z",
        "lastEditedBy" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "tags" : [
        ]
      },
      {
        "id" : "7ce64f3e-ba49-4b19-adfd-1baab0a4967f",
        "parentId" : "b7ac6e51-c7e9-4e44-8720-bbe179086c4c",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Sounds good!",
        "createdAt" : "2018-10-02T18:09:21Z",
        "updatedAt" : "2018-10-02T20:37:34Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f03af8571823f409398991ff2934e667b1102a1",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +69,73 @@        except MlflowException as e:\n            response = Response(mimetype='application/json')\n            response.set_data(e.serialize_as_json())\n            response.status_code = 500\n            return response"
  },
  {
    "id" : "cb363492-1fb9-4c64-97c5-2a668d7ad396",
    "prId" : 226,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/226#pullrequestreview-143031410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f28b51f-2e53-435f-b8fd-828851cfd675",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Q: why this change?",
        "createdAt" : "2018-08-02T02:28:31Z",
        "updatedAt" : "2018-08-03T21:46:27Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "9e408d2f-a475-4f1f-8f67-c115cffbd8cb",
        "parentId" : "2f28b51f-2e53-435f-b8fd-828851cfd675",
        "authorId" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "body" : "We pass in the store so we can get the authentication information from the DatabricksStore.",
        "createdAt" : "2018-08-03T01:45:17Z",
        "updatedAt" : "2018-08-03T21:46:27Z",
        "lastEditedBy" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a31bd46692e58bead8b0d2f1d2b924ed1263961",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +242,246 @@    store = _get_store()\n    if run.info.artifact_uri:\n        return ArtifactRepository.from_artifact_uri(run.info.artifact_uri, store)\n\n    # TODO(aaron) Remove this once everyone locally only has runs from after"
  }
]