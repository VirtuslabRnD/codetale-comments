[
  {
    "id" : "140019c0-7b38-4945-8c92-c894531babac",
    "prId" : 4359,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4359#pullrequestreview-676960898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9a0f447-abd1-4b20-89aa-c61e03858c7a",
        "parentId" : null,
        "authorId" : "5ea9649b-c37c-4aab-88b3-7bfcd507163e",
        "body" : "Just a thought:  Should we raise an exception here if target is not `torchserve` ?",
        "createdAt" : "2021-05-13T10:50:04Z",
        "updatedAt" : "2021-05-13T10:50:04Z",
        "lastEditedBy" : "5ea9649b-c37c-4aab-88b3-7bfcd507163e",
        "tags" : [
        ]
      },
      {
        "id" : "8e49753f-d2bb-40c8-a02c-2f4b7e11d673",
        "parentId" : "d9a0f447-abd1-4b20-89aa-c61e03858c7a",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "@shrinath-suresh good question, we probably don't want to condition logic in MLflow core on specific plugins that exist outside MLflow. You could imagine then we'd have a big branching if-statement for all deploy plugins/in order to add a new plugin folks would have to know to merge a PR modifying this file with details of their own plugin, vs being able to develop & release a plugin independently of MLflow.\r\n\r\nCould we instead check whether the `explain` method is defined on the `client` object and raise an exception saying that the current plugin doesn't support the `explain` API if not? e.g. something like\r\n\r\n```suggestion\r\n    client = interface.get_deploy_client(target)\r\n     if not hasattr(client, \"explain\"):\r\n         raise MlflowException(\"Computing model explanations is not yet supported for deployment target %s\" % target)\r\n     result = client.explain(name, df)\r\n     ... \r\n```\r\n\r\nIt'd also be good to add a test that we generate good error messages for plugins that don't implement `explain`",
        "createdAt" : "2021-05-27T17:27:56Z",
        "updatedAt" : "2021-05-27T17:50:24Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "55459907-743e-4329-87cf-3a9c59bc3d17",
        "parentId" : "d9a0f447-abd1-4b20-89aa-c61e03858c7a",
        "authorId" : "105ef3c7-120a-4890-afea-69e68aa93791",
        "body" : "If we add explain method as non-abstract method in base deployment class then \"hasattr(client, \"explain\")\" will always return True. So, Can we add the exception in the base class's explain method itself?\r\n\r\n```\r\n    def explain(self, deployment_name, df):\r\n        raise MlflowException(\"Computing model explanations is not yet supported for this deployment target\")\r\n```",
        "createdAt" : "2021-05-31T14:54:34Z",
        "updatedAt" : "2021-05-31T14:54:35Z",
        "lastEditedBy" : "105ef3c7-120a-4890-afea-69e68aa93791",
        "tags" : [
        ]
      },
      {
        "id" : "386be947-0d67-4892-8c8f-3695da7c915c",
        "parentId" : "d9a0f447-abd1-4b20-89aa-c61e03858c7a",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "@KasirajanA yep that makes sense!",
        "createdAt" : "2021-06-07T03:16:58Z",
        "updatedAt" : "2021-06-07T03:16:58Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "e048f546-08f7-4e86-bccf-a3003ad3795f",
        "parentId" : "d9a0f447-abd1-4b20-89aa-c61e03858c7a",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "And I think adding it as a non-abstract method (good catch there as well) should allow us to make this change without breaking existing plugins, as you described :)",
        "createdAt" : "2021-06-07T03:21:08Z",
        "updatedAt" : "2021-06-07T03:21:08Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd4caabedd0ba20832b3fceda05374f25c200905",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +280,284 @@\n    df = pd.read_json(input_path)\n    client = interface.get_deploy_client(target)\n    result = client.explain(name, df)\n    if output_path:"
  },
  {
    "id" : "fcc455b4-642d-49f3-80d8-6e64f7928f2c",
    "prId" : 3597,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3597#pullrequestreview-521369834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "156c4ebf-1cea-43f7-a3c2-68aec03c0f87",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Could we copy the API & parameter descriptions of `mlflow models predict`? There the options look like:\r\n\r\n```\r\n  -i, --input-path TEXT    CSV containing pandas DataFrame to predict against.\r\n  -o, --output-path TEXT   File to output results to as json file. If not\r\n                           provided, output to stdout.\r\n```",
        "createdAt" : "2020-10-28T20:47:35Z",
        "updatedAt" : "2020-11-03T00:46:58Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "8418b3ae-d629-42de-aa5b-392faf3d5d24",
        "parentId" : "156c4ebf-1cea-43f7-a3c2-68aec03c0f87",
        "authorId" : "5ea9649b-c37c-4aab-88b3-7bfcd507163e",
        "body" : "Done. Copied the parameters and descriptions from `mlflow models`",
        "createdAt" : "2020-11-02T07:02:53Z",
        "updatedAt" : "2020-11-03T00:46:58Z",
        "lastEditedBy" : "5ea9649b-c37c-4aab-88b3-7bfcd507163e",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ff2a4c029c654038353862120b49dca0319af02",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +69,73 @@)\n\nparse_input = click.option(\n    \"--input-path\", \"-I\", required=True, help=\"Path to input json file for prediction\",\n)"
  },
  {
    "id" : "3c6d83b3-b9c1-47f5-981e-f76e7e1b1e46",
    "prId" : 2327,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2327#pullrequestreview-375787835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8878751-749b-48a9-8301-d58445f0072b",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "```suggestion\r\n    click.echo(\"Deployment IDs for target {}:\\n{}\".format(target, ids))\r\n```",
        "createdAt" : "2020-03-17T07:20:34Z",
        "updatedAt" : "2020-06-16T19:06:17Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a49e0b73902335c060cf80784a7aad6b1a280a1",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +147,151 @@    client = interface.get_deploy_client(target)\n    ids = client.list_deployments()\n    click.echo(\"List of all deployments:\\n{}\".format(ids))\n\n"
  },
  {
    "id" : "566e3df2-1d9c-43cb-a3b7-9bad98a6d8cc",
    "prId" : 2327,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2327#pullrequestreview-425843646",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c8572af-6f50-49b7-8353-42ac2f1b5460",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "We should also add the `predict` function to the CLI + tests (where the API of the predict CLI can match that of [`mlflow models predict`](https://github.com/mlflow/mlflow/blob/master/mlflow/models/cli.py#L61-L79)), but I think that can come in a follow-up PR to help expedite merging this PR first :)",
        "createdAt" : "2020-06-07T18:41:05Z",
        "updatedAt" : "2020-06-16T19:06:17Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a49e0b73902335c060cf80784a7aad6b1a280a1",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@import click\nfrom mlflow.utils import cli_args\nfrom mlflow.deployments import interface"
  }
]