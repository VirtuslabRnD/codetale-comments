[
  {
    "id" : "991d6fa5-d932-4b3b-b84a-8f80f1b8d465",
    "prId" : 4041,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4041#pullrequestreview-581708466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e6046f5-29f6-4be1-a5b3-74390daf888f",
        "parentId" : null,
        "authorId" : "7dc30493-29f9-4bc4-bf26-00054b8b0b57",
        "body" : "Can you please update the documentation here to reflect the code change.",
        "createdAt" : "2021-02-02T19:42:15Z",
        "updatedAt" : "2021-02-13T00:54:26Z",
        "lastEditedBy" : "7dc30493-29f9-4bc4-bf26-00054b8b0b57",
        "tags" : [
        ]
      },
      {
        "id" : "6e058453-5b11-4622-acc0-f9236ce6608d",
        "parentId" : "7e6046f5-29f6-4be1-a5b3-74390daf888f",
        "authorId" : "7dc30493-29f9-4bc4-bf26-00054b8b0b57",
        "body" : "In addition, please mentioned that only a single numpy array is supported.",
        "createdAt" : "2021-02-02T20:09:23Z",
        "updatedAt" : "2021-02-13T00:54:26Z",
        "lastEditedBy" : "7dc30493-29f9-4bc4-bf26-00054b8b0b57",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dec9fd548ed98b62044160044fc139f8d5c4ee8",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +79,83 @@\n    def predict(self, data):\n        \"\"\"\n        :param data: Either a pandas DataFrame or a numpy array containing input array values.\n                     If the input is a DataFrame, it will be converted to an array first by a"
  },
  {
    "id" : "f66875ce-d2d6-46c0-8e63-f9a5e69fcad8",
    "prId" : 3859,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3859#pullrequestreview-554428034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7525f7b-d75d-44bd-b5fd-0fd5784fb784",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Using this PR as an opportunity to fix a slew of doc errors introduced by me. Namely, the `disable` parameter for framework-specific autologging integrations was incorrectly documented to state that it would disable *all* autologging integrations.",
        "createdAt" : "2020-12-17T09:37:46Z",
        "updatedAt" : "2020-12-18T08:47:55Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a9e86b6c2addaa063c8690260b50cd71702022",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +322,326 @@    :param log_models: If ``True``, trained models are logged as MLflow model artifacts.\n                       If ``False``, trained models are not logged.\n    :param disable: If ``True``, disables the MXNet Gluon autologging integration. If ``False``,\n                    enables the MXNet Gluon autologging integration.\n    \"\"\""
  },
  {
    "id" : "d78a6cc1-af78-4bd9-8a44-3b09f5996feb",
    "prId" : 2775,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2775#pullrequestreview-407923644",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d5bef45-a4b4-41de-9a4f-1eb4c2d4feae",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "It would be nice if there were some way to get the list of supported types to show up in this docstring, e.g. when I ran \r\n\r\n```\r\n>>> import mlflow.gluon\r\n>>> help(mlflow.gluon.save_model)\r\n```\r\n\r\nI couldn't actually see what valid types I could pass for `input_example`. Do you know offhand if there's a way? If not I can help look for one, I guess worst case we can include the list in this docstring",
        "createdAt" : "2020-05-07T07:23:56Z",
        "updatedAt" : "2020-05-07T19:35:39Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "70410fb8-cbd2-473f-aa80-d6f732e3f91e",
        "parentId" : "6d5bef45-a4b4-41de-9a4f-1eb4c2d4feae",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "Hmm, if I do help(mlflow.gluon.save_model) it expands the ModelInputExample into Union:\r\n\r\n..., input_example: Union[pandas.core.frame.DataFrame, numpy.ndarray, dict, list] = None, ...\r\n\r\n\r\n",
        "createdAt" : "2020-05-07T17:27:08Z",
        "updatedAt" : "2020-05-07T19:35:39Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "c38e95a0-ad70-4f1d-8c9d-bf12b856c3a5",
        "parentId" : "6d5bef45-a4b4-41de-9a4f-1eb4c2d4feae",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Ah got it, yep I see it now (sorry for the noise, noob mistake getting used to seeing types in the actual Python method signature vs in documentation for each individual param :P)",
        "createdAt" : "2020-05-08T00:29:57Z",
        "updatedAt" : "2020-05-08T00:29:57Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "b481f11cdd219c690e22cc3601fb5eacfcce88b9",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +129,133 @@                        predictions = ... # compute model predictions\n                        signature = infer_signature(train, predictions)\n    :param input_example: (Experimental) Input example provides one or several instances of valid\n                          model input. The example can be used as a hint of what data to feed the\n                          model. The given example will be converted to a Pandas DataFrame and then"
  },
  {
    "id" : "7559f124-1bb1-48a6-ac0f-c65a1647f3da",
    "prId" : 1973,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1973#pullrequestreview-315146753",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0636c962-4670-48ea-b803-e8f33889b03e",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Probably this should wrap the fit call as well, right, to track at least the start/end times.",
        "createdAt" : "2019-11-06T19:36:44Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "fbbd0d4c-65d4-405b-aec3-ea80f29ccdfa",
        "parentId" : "0636c962-4670-48ea-b803-e8f33889b03e",
        "authorId" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "body" : "I'm not sure I get this part. ðŸ¤” ",
        "createdAt" : "2019-11-07T18:57:47Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "tags" : [
        ]
      },
      {
        "id" : "c3374fbf-c5bd-4516-8259-4235f897e2cd",
        "parentId" : "0636c962-4670-48ea-b803-e8f33889b03e",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Just in the example, I mean it should probably be\r\n\r\n```python\r\nwith mlflow.start_run() as run:\r\n  est.fit(...)\r\n  mlflow.log_mdoel\r\n```",
        "createdAt" : "2019-11-07T19:00:39Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "a91fcb80-b9d6-408a-a56f-85ea9d7be148",
        "parentId" : "0636c962-4670-48ea-b803-e8f33889b03e",
        "authorId" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "body" : "Right, got it now. I'll just update the documentation.",
        "createdAt" : "2019-11-11T20:46:25Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "tags" : [
        ]
      }
    ],
    "commit" : "215114d2d2ca281443dd84bdfae8f6b022bb6f17",
    "line" : 204,
    "diffHunk" : "@@ -1,1 +202,206 @@    >>> est = estimator.Estimator(net=net, loss=softmax_loss, metrics=Accuracy(), trainer=trainer)\n    >>> # Log metrics and log the model\n    >>> with mlflow.start_run() as run:\n    >>>   est.fit(train_data=train_data, epochs=100, val_data=validation_data)\n    >>>   mlflow.gluon.log_model(net, \"model\")"
  },
  {
    "id" : "8de40ed5-7ff1-4045-99ec-99a621701735",
    "prId" : 1973,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1973#pullrequestreview-316880040",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7349035-fbe6-4c28-bc93-0c0afaa575f3",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@cosmincatalin I noticed that this module doesn't produce MLflow Models with the `pyfunc` flavor. Is it possible to add a `pyfunc` representation so that the model is more broadly compatible with MLflow's supported model serving / deployment tools?\r\n\r\nFor reference, see the `mlflow.keras` module's pyfunc wrapper implementation: https://github.com/mlflow/mlflow/blob/7fd12b4decbee396fc7ecd0d828a99f288cc9397/mlflow/keras.py#L281-L333.",
        "createdAt" : "2019-11-07T07:36:49Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "ede530d8-0a03-4f61-b715-e5cbcacbb26b",
        "parentId" : "f7349035-fbe6-4c28-bc93-0c0afaa575f3",
        "authorId" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "body" : "Right, I'll try to do that.",
        "createdAt" : "2019-11-07T18:56:45Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "tags" : [
        ]
      },
      {
        "id" : "ac540893-e56c-47ef-9340-3349ee52c171",
        "parentId" : "f7349035-fbe6-4c28-bc93-0c0afaa575f3",
        "authorId" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "body" : "The problem with adding a `pyfunc` for Gluon is that I cannot provided a needed additional argument, without modifying the `load_model` function in `pyfunc/__init__.py`, which I suspect you're not willing to easily accept.\r\n\r\nHere is the code that would be needed in `gluon.py`:\r\n\r\n```\r\nclass _GluonModelWrapper:\r\n    def __init__(self, gluon_model):\r\n        self.gluon_model = gluon_model\r\n\r\n    def predict(self, ndarray):\r\n        return self.gluon_model(ndarray)\r\n\r\n\r\ndef _load_pyfunc(path, ctx):\r\n    \"\"\"\r\n    Load PyFunc implementation. Called by ``pyfunc.load_pyfunc``.\r\n\r\n    :param path: Local filesystem path to the MLflow Model with the ``gluon`` flavor.\r\n    :param ctx: Either CPU or GPU.\r\n    \"\"\"\r\n    m = load_model(path, ctx)\r\n    return _GluonModelWrapper(m)\r\n```\r\n\r\nYou'll notice that I need to provide a context (CPU or GPU) when loading a model. To accomplish that I would need something similar to this in `pyfunc/__init__.py`:\r\n\r\n```\r\ndef load_model(model_uri, suppress_warnings=True, **kwargs):\r\n    ...\r\n    return importlib.import_module(conf[MAIN])._load_pyfunc(data_path, **kwargs)\r\n```\r\n\r\nOtherwise, loading a Gluon model works fine like this:\r\n\r\n```\r\nmodel_loaded = mlflow.gluon.load_model(model_path, ctx.cpu())\r\n```\r\n\r\nLet me know your thoughts, @dbczumar ",
        "createdAt" : "2019-11-13T20:53:36Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "tags" : [
        ]
      },
      {
        "id" : "dfe661e7-32a1-4a82-b2b5-e2aecf699f6a",
        "parentId" : "f7349035-fbe6-4c28-bc93-0c0afaa575f3",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@cosmincatalin Is it possible to have the `pyfunc` representation create and use a CPU context by default? This would remove the need for another argument to `_load_pyfunc`. \r\n\r\nLonger term, I think it would probably make sense to expand the `_load_pyfunc` interface to accept optional args/kwargs.",
        "createdAt" : "2019-11-14T06:31:23Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "1563fa2b-4143-4ac6-898f-294bcab457a3",
        "parentId" : "f7349035-fbe6-4c28-bc93-0c0afaa575f3",
        "authorId" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "body" : "I can do that, no problem. Better yet, I'll use the `current_context()` functionality.",
        "createdAt" : "2019-11-14T11:17:52Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "tags" : [
        ]
      }
    ],
    "commit" : "215114d2d2ca281443dd84bdfae8f6b022bb6f17",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@import os\n\nimport gorilla"
  },
  {
    "id" : "addc7a0e-764e-44b2-81c3-b111c6fe54d1",
    "prId" : 1973,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1973#pullrequestreview-314431618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93a854db-6afd-4639-adb2-60aca9853cdf",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "As is done by https://github.com/mlflow/mlflow/pull/2055 for Keras autologging, maybe we should log these params at the beginning of training rather than at the end (in case training is interrupted / CTRL+C'd etc)",
        "createdAt" : "2019-11-08T07:12:54Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "94c83af3-ea1f-4f2e-b194-5ef528e59ae8",
        "parentId" : "93a854db-6afd-4639-adb2-60aca9853cdf",
        "authorId" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "body" : "I can probably do that. I'll look into it.",
        "createdAt" : "2019-11-08T20:04:56Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "tags" : [
        ]
      }
    ],
    "commit" : "215114d2d2ca281443dd84bdfae8f6b022bb6f17",
    "line" : 237,
    "diffHunk" : "@@ -1,1 +235,239 @@\n        def train_begin(self, estimator, *args, **kwargs):\n            try_mlflow_log(mlflow.log_param, \"num_layers\", len(estimator.net))\n            if estimator.max_epoch is not None:\n                try_mlflow_log(mlflow.log_param, \"epochs\", estimator.max_epoch)"
  },
  {
    "id" : "23e57e0c-026f-4d27-875e-76d3d979f3e2",
    "prId" : 1973,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1973#pullrequestreview-314432075",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c195e718-12e6-4c8a-83ab-58fabd5ab0c3",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "I'm not super familiar with the gluon APIs, but is there any chance of the metric names colliding across training/validation? Looks like (from your test) the training metrics are prefixed with \"train\" so we might not need to worry about this?",
        "createdAt" : "2019-11-08T07:14:25Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "00ab0ab0-19db-42c2-8e40-22a3a30b8a3a",
        "parentId" : "c195e718-12e6-4c8a-83ab-58fabd5ab0c3",
        "authorId" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "body" : "That is correct, there should be no conflict as it stands right now.",
        "createdAt" : "2019-11-08T20:05:53Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "tags" : [
        ]
      }
    ],
    "commit" : "215114d2d2ca281443dd84bdfae8f6b022bb6f17",
    "line" : 232,
    "diffHunk" : "@@ -1,1 +230,234 @@            for metric in estimator.val_metrics:\n                metric_name, metric_val = metric.get()\n                logs[metric_name] = metric_val\n            try_mlflow_log(mlflow.log_metrics, logs, step=self.current_epoch)\n            self.current_epoch += 1"
  },
  {
    "id" : "ec33ea8b-af08-467e-b99d-9beb31cec2cb",
    "prId" : 1973,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1973#pullrequestreview-314435526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0599df14-2e7d-4097-94b1-b3d7476e0998",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Why do we only log the model if it's a `HybridSequential` model? Are there other model types we exclude as a result of this?",
        "createdAt" : "2019-11-08T07:16:25Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "93f6a8c5-5dd7-4b1a-b27c-496a8139a341",
        "parentId" : "0599df14-2e7d-4097-94b1-b3d7476e0998",
        "authorId" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "body" : "Yes, only hybridizable models that have been hybridized can be exported. All other Gluon models are not exported right now. I can probably look into it in a future iteration. I hope that this is acceptable. ",
        "createdAt" : "2019-11-08T20:13:19Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "tags" : [
        ]
      }
    ],
    "commit" : "215114d2d2ca281443dd84bdfae8f6b022bb6f17",
    "line" : 252,
    "diffHunk" : "@@ -1,1 +250,254 @@\n        def train_end(self, estimator, *args, **kwargs):\n            if isinstance(estimator.net, HybridSequential):\n                try_mlflow_log(log_model, estimator.net, artifact_path=\"model\")\n"
  },
  {
    "id" : "800f7f3d-fffd-4b63-8b82-c17ebf80b82a",
    "prId" : 1973,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1973#pullrequestreview-314436405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e58b3a7-a3e7-45cf-afda-1982a8e4c2f7",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "As https://github.com/mlflow/mlflow/pull/2056/ does for Keras/TensorFlow, could we add logic to check if there's an active run here & if not (i.e. if we end up creating an active run within this `fit` call) add logic to end the run at the end of `fit`? It'd also be good to add a test case analogous to those in https://github.com/mlflow/mlflow/pull/2056/ for this behavior, thanks!",
        "createdAt" : "2019-11-08T07:19:06Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "2d8ca114-818b-4d1a-804e-4c2dbef83afc",
        "parentId" : "0e58b3a7-a3e7-45cf-afda-1982a8e4c2f7",
        "authorId" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "body" : "I will look into this.",
        "createdAt" : "2019-11-08T20:15:14Z",
        "updatedAt" : "2019-11-20T01:15:40Z",
        "lastEditedBy" : "15a67e11-57e6-4d9e-b8a9-52c67bd0bdb7",
        "tags" : [
        ]
      }
    ],
    "commit" : "215114d2d2ca281443dd84bdfae8f6b022bb6f17",
    "line" : 256,
    "diffHunk" : "@@ -1,1 +254,258 @@\n    @gorilla.patch(Estimator)\n    def fit(self, *args, **kwargs):\n        if not mlflow.active_run():\n            auto_end_run = True"
  }
]