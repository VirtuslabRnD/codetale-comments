[
  {
    "id" : "a87e4b66-6184-4154-aa7a-89138509b007",
    "prId" : 2833,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2833#pullrequestreview-412778016",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af812bb1-9de8-496a-be18-6f2f765ab455",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "This is the actual bug fix, we need to shell-escape the individual args in the command before joining them together as a raw string to pass to `bash -c` below, otherwise JSON strings like the one we create [here](https://github.com/mlflow/mlflow/pull/2833/files#diff-b4f67a2443a1e19b3b6834c9346345c4R246) will contain unescaped double-quotes & break the command",
        "createdAt" : "2020-05-15T16:04:39Z",
        "updatedAt" : "2020-05-15T17:32:57Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "a514540499a7dfe835ab095cd5f54d6737117fe6",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +262,266 @@\n    mlflow_run_arr = _get_cluster_mlflow_run_cmd(project_dir, run_id, entry_point, parameters)\n    mlflow_run_cmd = \" \".join([shlex_quote(elem) for elem in mlflow_run_arr])\n    shell_command = textwrap.dedent(\"\"\"\n    export PATH=$PATH:$DB_HOME/python/bin &&"
  },
  {
    "id" : "f299d7c0-0eda-464d-9841-b069dd9af966",
    "prId" : 2147,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2147#pullrequestreview-326493617",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da100780-2769-4f4e-a7a0-45528a6d2bd7",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "```suggestion\r\n    export PATH=$PATH:$DB_HOME/python/bin &&\r\n```",
        "createdAt" : "2019-12-03T22:30:35Z",
        "updatedAt" : "2019-12-06T23:52:47Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b554a55c3f6c0eed000c1fe5207769e4eec9c44",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +256,260 @@            mlflow_run_arr.extend([\"-P\", \"%s=%s\" % (key, value)])\n    mlflow_run_cmd = \" \".join(mlflow_run_arr)\n    shell_command = textwrap.dedent(\"\"\"\n    export PATH=$PATH:$DB_HOME/python/bin &&\n    mlflow --version &&"
  },
  {
    "id" : "7dd44fbc-052b-4c59-b38f-c4baaa6e9707",
    "prId" : 1641,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1641#pullrequestreview-264914142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0137f295-509a-45ec-9e77-93c6983e2cbe",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "could use the unsafe version so we can get the error code directly, but seems about the same",
        "createdAt" : "2019-07-19T20:09:34Z",
        "updatedAt" : "2019-07-19T20:09:35Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "424aafa7-7bf6-497a-88cf-d1169d3c8a39",
        "parentId" : "0137f295-509a-45ec-9e77-93c6983e2cbe",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "yea using the unsafe version seems nice, but if we're gonna check for \"File already exists\" in the message (which seems reasonable to help avoid silent/confusing failures in this race-condition edge case), it seems fine to go with the current approach. ",
        "createdAt" : "2019-07-22T16:37:10Z",
        "updatedAt" : "2019-07-22T16:37:11Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac1fdc9a6cee29ee59d7e9d2e5c7e66a7c66c08a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +79,83 @@        with open(src_path, 'rb') as f:\n            try:\n                self._databricks_api_request(endpoint=http_endpoint, method='POST', data=f)\n            except MlflowException as e:\n                if \"Error 409\" in e.message and \"File already exists\" in e.message:"
  },
  {
    "id" : "4c6fc4df-a48a-4937-a0b4-92d21f06b663",
    "prId" : 560,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/560#pullrequestreview-159308907",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f249edae-8f1b-40f6-9dee-7a7c81f4f930",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Here we still use the old `http_request` API since non-200 response statuses can indicate that no file exists at the specified DBFS path",
        "createdAt" : "2018-09-27T07:34:42Z",
        "updatedAt" : "2018-10-08T21:35:29Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "409f0898d22bf454df4b219d5bd33d3d7c548862",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +83,87 @@        \"\"\"\n        host_creds = databricks_utils.get_databricks_host_creds(self.databricks_profile)\n        response = rest_utils.http_request(\n            host_creds=host_creds, endpoint=\"/api/2.0/dbfs/get-status\", method=\"GET\",\n            json={\"path\": \"/%s\" % dbfs_path})"
  },
  {
    "id" : "ca34bbbc-68dd-4ff6-9fab-4fad98b51cd2",
    "prId" : 361,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/361#pullrequestreview-149919599",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bfa3aa4-051c-424c-b0d0-b3c8637d9709",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Refactored logic for kicking off the job run (mostly helper methods for making Databricks API requests to upload a project to DBFS / launch the job) into this class to avoid having to pass `profile` everywhere",
        "createdAt" : "2018-08-27T23:24:36Z",
        "updatedAt" : "2018-08-28T16:28:54Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "46514f5c8ce3ca0fe998cb373efcccb8771a1b5c",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +30,34 @@\n\nclass DatabricksJobRunner(object):\n    \"\"\"\n    Helper class for running an MLflow project as a Databricks Job."
  },
  {
    "id" : "693c8dff-927c-46cb-a05d-eca26b826660",
    "prId" : 361,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/361#pullrequestreview-149994838",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb73f1d9-974e-4361-b5cf-868ff7b8e4b1",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "No changes to this guy, right?",
        "createdAt" : "2018-08-28T01:26:36Z",
        "updatedAt" : "2018-08-28T16:28:54Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "562d0c5f-2375-436b-acdc-38105461b6b0",
        "parentId" : "cb73f1d9-974e-4361-b5cf-868ff7b8e4b1",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Yep, no need to change this to account for profile information",
        "createdAt" : "2018-08-28T07:27:03Z",
        "updatedAt" : "2018-08-28T16:28:54Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "46514f5c8ce3ca0fe998cb373efcccb8771a1b5c",
    "line" : 211,
    "diffHunk" : "@@ -1,1 +220,224 @@\n\ndef _get_databricks_run_cmd(dbfs_fuse_tar_uri, run_id, entry_point, parameters):\n    \"\"\"\n    Generates MLflow CLI command to run on Databricks cluster in order to launch a run on Databricks"
  },
  {
    "id" : "60c142e8-deea-4a56-b507-9e37ac342299",
    "prId" : 200,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/200#pullrequestreview-141277484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4248197a-cd15-4fd3-b0fa-697c98c4fa49",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Opted to unconditionally `create_run` and let the warning suffice. In theory, an NFS-mounted local file URI may still be able to work, so we shouldn't completely discount it.",
        "createdAt" : "2018-07-26T19:34:40Z",
        "updatedAt" : "2018-07-30T16:45:28Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "ef2f960f-8a87-4e95-a310-5f1bb50ff988",
        "parentId" : "4248197a-cd15-4fd3-b0fa-697c98c4fa49",
        "authorId" : "b2c1789f-eaaf-4ce0-9ad7-695c9467c3cc",
        "body" : "I think users might be annoyed if this run still starts and wastes resources, but we can try it.",
        "createdAt" : "2018-07-26T19:53:17Z",
        "updatedAt" : "2018-07-30T16:45:28Z",
        "lastEditedBy" : "b2c1789f-eaaf-4ce0-9ad7-695c9467c3cc",
        "tags" : [
        ]
      },
      {
        "id" : "b311f750-a2dc-48b4-b42a-7e04efd09f4c",
        "parentId" : "4248197a-cd15-4fd3-b0fa-697c98c4fa49",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Sorry, wastes resources? This is only related to tracking, i.e., whether we go ahead and create the run object now or later.",
        "createdAt" : "2018-07-27T21:40:33Z",
        "updatedAt" : "2018-07-30T16:45:28Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "82eb542ecf41ee26b683ac5118d6653a3e43eb61",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +201,205 @@        eprint(\"WARNING: MLflow tracking URI is set to a local URI (%s), so results from \"\n               \"Databricks will not be logged permanently.\" % tracking_uri)\n    return tracking._create_run(experiment_id=experiment_id,\n                                source_name=source_name,\n                                source_version=source_version,"
  },
  {
    "id" : "3533ac00-e965-4534-9ef2-6bc733c83aa5",
    "prId" : 131,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/131#pullrequestreview-139639749",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46154d30-dbbe-44da-9466-62445e52661e",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Btw, we should probably wrap the JSON parsing logic with a clearer error if cluster_spec is not valid JSON.\r\n\r\nThis is the current error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/aaron/miniconda2/bin/mlflow\", line 11, in <module>\r\n    load_entry_point('mlflow', 'console_scripts', 'mlflow')()\r\n  File \"/Users/aaron/miniconda2/lib/python2.7/site-packages/click/core.py\", line 722, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/Users/aaron/miniconda2/lib/python2.7/site-packages/click/core.py\", line 697, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/Users/aaron/miniconda2/lib/python2.7/site-packages/click/core.py\", line 1066, in invoke\r\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\r\n  File \"/Users/aaron/miniconda2/lib/python2.7/site-packages/click/core.py\", line 895, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"/Users/aaron/miniconda2/lib/python2.7/site-packages/click/core.py\", line 535, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"/Users/aaron/mlflow/mlflow/cli.py\", line 113, in run\r\n    block=True,\r\n  File \"/Users/aaron/mlflow/mlflow/projects/__init__.py\", line 101, in run\r\n    use_temp_cwd=use_temp_cwd, storage_dir=storage_dir, block=block)\r\n  File \"/Users/aaron/mlflow/mlflow/projects/__init__.py\", line 50, in _run\r\n    git_password=git_password)\r\n  File \"/Users/aaron/mlflow/mlflow/projects/databricks.py\", line 262, in run_databricks\r\n    cluster_spec = json.load(handle)\r\n  File \"/Users/aaron/miniconda2/lib/python2.7/json/__init__.py\", line 291, in load\r\n    **kw)\r\n  File \"/Users/aaron/miniconda2/lib/python2.7/json/__init__.py\", line 339, in loads\r\n    return _default_decoder.decode(s)\r\n  File \"/Users/aaron/miniconda2/lib/python2.7/json/decoder.py\", line 364, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"/Users/aaron/miniconda2/lib/python2.7/json/decoder.py\", line 380, in raw_decode\r\n    obj, end = self.scan_once(s, idx)\r\nValueError: Expecting property name: line 13 column 1 (char 432)\r\n```",
        "createdAt" : "2018-07-23T20:25:16Z",
        "updatedAt" : "2018-07-24T22:32:50Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "30653c44fc1e4d3ce4bf60306a41f5f64f672046",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +46,50 @@    return rest_utils.databricks_api_request(\n        endpoint=\"jobs/runs/submit\", method=\"POST\", req_body_json=req_body_json)\n\n\ndef _get_databricks_run_cmd(dbfs_fuse_tar_uri, entry_point, parameters):"
  }
]