[
  {
    "id" : "09addaab-e50b-4928-801e-38bd7cde3d05",
    "prId" : 2566,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2566#pullrequestreview-377479694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f8f4eab-9d55-4b38-a5c4-96da8e457935",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@jdlesage @smurching It seems reasonable for some backends to be referenced by URI rather than a human-readable name. For example, this would likely be the case if we introduced support for REST-based project backends. We may want to consider support for regex here was well (e.g., registering a backend to use for URIs of the form `http://.*` or `https://.*`.",
        "createdAt" : "2020-03-18T23:51:32Z",
        "updatedAt" : "2020-04-27T17:47:09Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "46bf1fd6-2398-4553-a576-193bd984993f",
        "parentId" : "1f8f4eab-9d55-4b38-a5c4-96da8e457935",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "I think your comment might have been cut off :P - I guess with the current scheme, we'd handle HTTP backends via a custom backend type, e.g. `mlflow-http` (probably named something better) and then the actual URI of the backend would be a field in the backend config",
        "createdAt" : "2020-03-19T06:52:50Z",
        "updatedAt" : "2020-04-27T17:47:09Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "2547c18d-1dc9-4b0e-94c2-4a4ebdcd31a1",
        "parentId" : "1f8f4eab-9d55-4b38-a5c4-96da8e457935",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Whoops! Accidentally left some trailing content at the end there. Ah, good point - putting the URL in the config sounds fine to me!",
        "createdAt" : "2020-03-19T07:38:27Z",
        "updatedAt" : "2020-04-27T17:47:09Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d94111cf8b146b90cc3edcb580cc2e68ca1140a",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +14,18 @@    # Static backends\n    if backend_name in MLFLOW_BACKENDS:\n        return MLFLOW_BACKENDS[backend_name]()\n\n    # backends from plugin"
  },
  {
    "id" : "76400ab3-b18e-4ed2-86ab-fe7259779e60",
    "prId" : 2566,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2566#pullrequestreview-378895336",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fded2849-fbd3-4566-b16e-d284aa844c77",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Nit: @jdlesage Can we resolve these entrypoints at module import time? (similar to what we do for the Tracking backend store registry here: https://github.com/mlflow/mlflow/blob/dea20035fc804654b552b520942eae5ed52f48d4/mlflow/tracking/_tracking_service/utils.py#L99-L102)",
        "createdAt" : "2020-03-18T23:53:47Z",
        "updatedAt" : "2020-04-27T17:47:09Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "37069023-5d2c-4194-9883-9aebc0be66da",
        "parentId" : "fded2849-fbd3-4566-b16e-d284aa844c77",
        "authorId" : "12e55ba4-5191-43ae-a814-1e9a4ba0c76b",
        "body" : "I think it is better to keep them lazy and don't import the plugin if it is not needed. You don't control the plugin implementations, and some of them can contain bugs. If mlflow imports all existing plugins to register them and one of these plugins have a bug then mlflow will not start.\r\nThere is already this problem with other registries. If you install in your virtual env the dummy project located in `tests/resources`, there are these warnings when mlflow is imported:\r\n```\r\n/home/jd.lesage/workspace_python/mlflow/mlflow/tracking/_model_registry/utils.py:61: UserWarning: Failure attempting to register store for scheme \"file-plugin\": bad magic number in 'mlflow_test_plugin.sqlalchemy_store': b'\\x03\\xf3\\r\\n'\r\n  _model_registry_store_registry.register_entrypoints()\r\n```\r\nTo workaround this problem, currently, these exceptions are caught and transformed in warnings.  I think it is safer to raise exceptions (stop if the plugin is not correct) and load only necessary plugins. \r\n\r\nI created a week ago a issue to make all registries lazy: https://github.com/mlflow/mlflow/issues/2445",
        "createdAt" : "2020-03-19T08:46:05Z",
        "updatedAt" : "2020-04-27T17:47:09Z",
        "lastEditedBy" : "12e55ba4-5191-43ae-a814-1e9a4ba0c76b",
        "tags" : [
        ]
      },
      {
        "id" : "e154350e-1b1f-4f2c-a3f1-aeb746fe81db",
        "parentId" : "fded2849-fbd3-4566-b16e-d284aa844c77",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@jdlesage Great point. In that case, I agree that we should stick with lazy entrypoint reading and move other store registries (e.g, Tracking) to this paradigm as well.",
        "createdAt" : "2020-03-21T05:59:51Z",
        "updatedAt" : "2020-04-27T17:47:09Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d94111cf8b146b90cc3edcb580cc2e68ca1140a",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +18,22 @@    # backends from plugin\n    try:\n        backend_builder = entrypoints.get_single(ENTRYPOINT_GROUP_NAME,\n                                                 backend_name).load()\n        return backend_builder()"
  }
]