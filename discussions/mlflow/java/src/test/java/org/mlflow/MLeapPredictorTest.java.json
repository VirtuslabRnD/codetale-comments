[
  {
    "id" : "d434339c-ad07-4ceb-b4ae-9ea070a50a64",
    "prId" : 331,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/331#pullrequestreview-149814618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c93b7f9-e4e9-4ae4-a114-6cf13614655d",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Er, how does this work? MLeapLoader (in MLeap's package?) constructs an instance of our `MLeapPredictor`?",
        "createdAt" : "2018-08-24T18:35:10Z",
        "updatedAt" : "2018-08-27T18:09:31Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "77337b16-1dd1-4833-9a1d-691dc2d58f3b",
        "parentId" : "3c93b7f9-e4e9-4ae4-a114-6cf13614655d",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Yes. The alternative is to invoke the `MLeapPredictor` constructor with the model artifact path and schema path.",
        "createdAt" : "2018-08-24T22:28:36Z",
        "updatedAt" : "2018-08-27T18:09:31Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "7bf47e87-6cf9-4444-871e-440445bf5500",
        "parentId" : "3c93b7f9-e4e9-4ae4-a114-6cf13614655d",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "How does `MLeapLoader` know how to construct our version of the predictor? What kind of reflection black magic is going on?",
        "createdAt" : "2018-08-25T02:40:40Z",
        "updatedAt" : "2018-08-27T18:09:31Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "1a46de8e-2a74-4810-a7f2-df59855e2f01",
        "parentId" : "3c93b7f9-e4e9-4ae4-a114-6cf13614655d",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "The `MLeapLoader.load()` method is the inherited method `LoaderModule.load()`. This method loads the configuration for the model specified by `modelPath`, parses the flavor configuration defined within the overall model configuration (MLeap in this case), and calls `MLeapLoader.createPredictor()` method with the model's root path (`modelRootPath=modelPath`) and the flavor configuration as arguments. `MLeapLoader.createPredictor()` is an implementation of the abstract `LoaderModule.createPredictor()` method that returns an `MLeapPredictor` object. No reflection occurs.",
        "createdAt" : "2018-08-27T06:40:15Z",
        "updatedAt" : "2018-08-27T18:09:31Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "12a8db8d-2478-4af7-88ff-a9e0de5fe188",
        "parentId" : "3c93b7f9-e4e9-4ae4-a114-6cf13614655d",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Ah, sorry, I didn't realize `MLeapLoader` was a class in our repo (mis-saw it as `org.mleap`). We should change the return type to `MLeapPredictor` directly; I believe in Java you can return more specific return types.",
        "createdAt" : "2018-08-27T15:52:28Z",
        "updatedAt" : "2018-08-27T18:09:31Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "ffb7f886-5f65-4fcc-8657-af24ed04e2a5",
        "parentId" : "3c93b7f9-e4e9-4ae4-a114-6cf13614655d",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Changed the return type of `MLeapLoader.createPredictor()` to `MLeapPredictor`. Unfortunately, I don't see a good way to specialize the return type of `MLeapPredictor.load()` beyond `Predictor` without overriding the super class `LoaderModule.load()` methods.",
        "createdAt" : "2018-08-27T18:08:54Z",
        "updatedAt" : "2018-08-27T18:09:31Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1267650e88e0fc47ba0b2660a6af8e1ea5e1749",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +20,24 @@      throws PredictorLoadingException {\n    String modelPath = MLflowRootResourceProvider.getResourcePath(\"mleap_model\");\n    MLeapPredictor predictor = (MLeapPredictor) (new MLeapLoader()).load(modelPath);\n    Transformer pipelineTransformer = predictor.getPipeline();\n  }"
  }
]