[
  {
    "id" : "64e4fca3-2048-4763-9cc2-ec6b2b24a2a6",
    "prId" : 4255,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4255#pullrequestreview-638388882",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5de4fda8-564a-4482-9f76-b4a5e2bdb097",
        "parentId" : null,
        "authorId" : "52b26aee-f464-4ce0-af48-b29e1a3f86e2",
        "body" : "Does these string type names \"matplotlib.figure.Figure\", \"plotly.graph_objects.Figure\"\r\nworks when IDE like pycharm checking type error ?",
        "createdAt" : "2021-04-16T09:56:19Z",
        "updatedAt" : "2021-04-20T07:49:53Z",
        "lastEditedBy" : "52b26aee-f464-4ce0-af48-b29e1a3f86e2",
        "tags" : [
        ]
      },
      {
        "id" : "799b77c4-67dd-4feb-9480-d711bede5b1b",
        "parentId" : "5de4fda8-564a-4482-9f76-b4a5e2bdb097",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "I don't think it works. I think we need to add the following import statements:\r\n\r\n```python\r\ntry:\r\n    # These packages might not be installed\r\n    import matplotlib\r\n    import ploly\r\nexcept ImportError:\r\n    ...\r\n```",
        "createdAt" : "2021-04-18T23:47:05Z",
        "updatedAt" : "2021-04-20T07:49:53Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "14302d7a3d03f253c55c8386c1ffdece5d77d416",
    "line" : 258,
    "diffHunk" : "@@ -1,1 +1047,1051 @@        self,\n        run_id: str,\n        figure: Union[\"matplotlib.figure.Figure\", \"plotly.graph_objects.Figure\"],\n        artifact_file: str,\n    ) -> None:"
  },
  {
    "id" : "f3ef59d8-5281-42d5-9e47-4a8f3bffc5e4",
    "prId" : 4255,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4255#pullrequestreview-638587223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92fb8f02-6cf0-4fbd-9eca-aad900f0dded",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Used `Any` for `dictionary` becasue the `json`module does the same thing:\r\n\r\n![Screen Shot 2021-04-19 at 17 19 43](https://user-images.githubusercontent.com/17039389/115204575-98915f00-a133-11eb-83ef-fa83718621bf.png)\r\n",
        "createdAt" : "2021-04-19T08:21:20Z",
        "updatedAt" : "2021-04-20T07:49:53Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "14302d7a3d03f253c55c8386c1ffdece5d77d416",
    "line" : 238,
    "diffHunk" : "@@ -1,1 +999,1003 @@\n    @experimental\n    def log_dict(self, run_id: str, dictionary: Any, artifact_file: str) -> None:\n        \"\"\"\n        Log a JSON/YAML-serializable object (e.g. `dict`) as an artifact. The serialization"
  },
  {
    "id" : "4f0372e3-d8e6-42bc-aaa3-27232480e852",
    "prId" : 4255,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4255#pullrequestreview-638783803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c43a4c0-3bc7-4242-88be-eea2d20f73b0",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Fixed the docstring a bit because `log_dict` works for any JSON/YAML-serializable object (@WeichenXu123's suggestion)",
        "createdAt" : "2021-04-19T12:01:37Z",
        "updatedAt" : "2021-04-20T07:49:53Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "14302d7a3d03f253c55c8386c1ffdece5d77d416",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +1004,1008 @@        format (JSON or YAML) is automatically inferred from the extension of `artifact_file`.\n        If the file extension doesn't exist or match any of [\".json\", \".yml\", \".yaml\"],\n        JSON format is used.\n\n        :param run_id: String ID of the run."
  },
  {
    "id" : "15e0d970-184e-4cbb-ab99-84bc5d153b71",
    "prId" : 4255,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4255#pullrequestreview-639400611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fb8008a-7c3d-4d8e-8929-0ede2c7d6bd8",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Note `value` will be converted to string via `str(value)`.",
        "createdAt" : "2021-04-20T00:05:58Z",
        "updatedAt" : "2021-04-20T07:49:53Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "14302d7a3d03f253c55c8386c1ffdece5d77d416",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +649,653 @@        self._tracking_client.log_metric(run_id, key, value, timestamp, step)\n\n    def log_param(self, run_id: str, key: str, value: Any) -> None:\n        \"\"\"\n        Log a parameter against the run ID."
  },
  {
    "id" : "41ae4c74-c58a-4f00-ad8b-b90e555296e7",
    "prId" : 3728,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3728#pullrequestreview-536632731",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e6ccbe2-85e3-42f2-82f6-03310f8cd6eb",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "I'll update the docstring.",
        "createdAt" : "2020-11-23T16:18:35Z",
        "updatedAt" : "2020-11-26T06:55:52Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc6a1107cef493dfda6a258ad9d7a0c32325b8b0",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1083,1087 @@        - `numpy.ndarray`_\n        - `PIL.Image.Image`_\n\n        .. _numpy.ndarray:\n            https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html"
  },
  {
    "id" : "d3c92956-1428-4fda-a767-47614cfa940a",
    "prId" : 3728,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3728#pullrequestreview-538085263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c721fae7-a340-46ae-bf08-39056f462f35",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "From offline discussion - if we don't clip values, the cast to uint8 below will throw. It seems acceptable to clip & log a warning",
        "createdAt" : "2020-11-25T01:07:21Z",
        "updatedAt" : "2020-11-26T06:55:52Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "ce8be63f-eafb-4685-a17a-dadf1ec28d44",
        "parentId" : "c721fae7-a340-46ae-bf08-39056f462f35",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : ">  if we don't clip values, the cast to uint8 below will throw\r\n\r\nNot throw, but overflows:\r\n\r\n```\r\n>>> np.array([300]).astype(np.uint8)\r\narray([44], dtype=uint8)\r\n```",
        "createdAt" : "2020-11-25T01:12:10Z",
        "updatedAt" : "2020-11-26T06:55:52Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc6a1107cef493dfda6a258ad9d7a0c32325b8b0",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +1154,1158 @@            low = 0\n            high = 255 if is_int else 1\n            if x.min() < low or x.max() > high:\n                msg = (\n                    \"Out-of-range values are detected. \""
  },
  {
    "id" : "b4cb2f7f-cb20-444f-9fa6-779525e11260",
    "prId" : 3707,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3707#pullrequestreview-536024816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cacca227-804b-40a8-87d3-4b2d8c943b20",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "With the current regex approach (\"Option 1\"): \r\n(+) We'll be robust to `matplotlib` or `plotly` moving around the module namespace of their `Figure` classes. In general, such API changes seem unlikely given that `plotly` and `matplotlib` both provide stable APIs.\r\n(-) We won't detect objects that subclass matplotlib.figure.Figure - I'm not sure how common subclassing is but this seems like a potentially significant con\r\n(-) We may have false positives with e.g. `Figure` classes in internal plotly/matplotlib modules, but it seems very unlikely that users would supply such internal classes, nor should they expect doing so to work.\r\n(-) The code is a bit complex, but not prohibitively complex IMO\r\n\r\nAs an alternative  (\"Option 2\") we could check whether `plotly` / `matplotlib` are in `sys.modules`, and if so run `import plotly` in order to perform an `isinstance` check on the passed-in `figure`. In that case:\r\n(+) The code is clearer than in the regex case - we declaratively perform a type-check instead of indirectly doing it via regex\r\n(+) We support subclasses of `plotly` / `matplotlib` Figure\r\n(-) The API may break against e.g. new plotly versions with this option, but not with option 1, in the case where plotly moves the module containing `Figure`.\r\n\r\nGiven these tradeoffs I think option 2 is preferable (primarily because it supports subclasses of `Figure`). If subclassing `Figure` is super uncommon then option 2 becomes less preferable, but is still better than option 1 IMO for code clarity. Lmk what you think / if I'm missing something!",
        "createdAt" : "2020-11-21T17:54:10Z",
        "updatedAt" : "2020-11-23T00:18:15Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "c33f5b92-973b-4411-8362-7bd0810d29d4",
        "parentId" : "cacca227-804b-40a8-87d3-4b2d8c943b20",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "sounds good. I'll make the change.",
        "createdAt" : "2020-11-22T02:52:57Z",
        "updatedAt" : "2020-11-23T00:18:15Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7fc54902624937223da6a73d8f58d95f1091639",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1017,1021 @@        Log a figure as an artifact. The following figure objects are supported:\n\n        - `matplotlib.figure.Figure`_\n        - `plotly.graph_objects.Figure`_\n"
  },
  {
    "id" : "6f7fc282-72d3-41be-aa78-d5678018a6ca",
    "prId" : 3678,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3678#pullrequestreview-529625358",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8beeb7ab-7bf0-4fed-855b-6ca8fe74e6fa",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Seems like we should clean up this directory by calling `cleanup` after logging the artifact? https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory",
        "createdAt" : "2020-11-13T00:48:33Z",
        "updatedAt" : "2020-11-13T08:12:29Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "609f8637-7972-4b2f-a87f-c1d31e1f1dd2",
        "parentId" : "8beeb7ab-7bf0-4fed-855b-6ca8fe74e6fa",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Found this comment stackoverflow:\r\n\r\nhttps://stackoverflow.com/questions/13379742/right-way-to-clean-up-a-temporary-folder-in-python-class#comment114370145_19657028",
        "createdAt" : "2020-11-13T00:59:38Z",
        "updatedAt" : "2020-11-13T08:12:29Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "6cf6797c-80ff-4bfa-8694-6bfad06bd271",
        "parentId" : "8beeb7ab-7bf0-4fed-855b-6ca8fe74e6fa",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Oops, I missed\r\n\r\n> On completion of the context or destruction of the temporary directory object the newly created temporary directory and all its contents are removed from the filesystem.\r\n\r\nfrom the Python API doc...",
        "createdAt" : "2020-11-13T01:01:29Z",
        "updatedAt" : "2020-11-13T08:12:29Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f27095bc9ea553a17dbbd4df46af1a1cf1d01d6",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +929,933 @@        artifact_dir = None if artifact_dir == \"\" else artifact_dir\n\n        with tempfile.TemporaryDirectory() as tmp_dir:\n            tmp_path = os.path.join(tmp_dir, filename)\n            yield tmp_path"
  },
  {
    "id" : "22f544f0-c981-45f0-af65-b785e7e09b0f",
    "prId" : 3678,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3678#pullrequestreview-529842953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed79f743-0f19-444a-b1e1-1fa4e8789ecf",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "BTW, what do you think about pulling these artifact logging utils into a private module, e.g. under `mlflow.artifacts._logging_utils` and actually defining `log_text` there as a static function, and then exposing it via the `MlflowClient` here via a single-line call to `mlflow.artifacts._logging_utils.log_text`? The advantage I think is that we can keep this file a bit more concise, especially as we add logging logic for more artifact types like images etc that may be a bit more complex",
        "createdAt" : "2020-11-13T07:27:31Z",
        "updatedAt" : "2020-11-13T08:12:29Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "046c1116-66af-4cc9-9cec-4d7a2a21ea8f",
        "parentId" : "ed79f743-0f19-444a-b1e1-1fa4e8789ecf",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Happy to have the refactor be in a follow-up PR or in this one, lmk what you think",
        "createdAt" : "2020-11-13T07:27:51Z",
        "updatedAt" : "2020-11-13T08:12:29Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "a118e9b8-2bbf-4c5d-88d9-e4e6c6872dc5",
        "parentId" : "ed79f743-0f19-444a-b1e1-1fa4e8789ecf",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "To summarize offline discussion, this actually seems fine - it's hard to define `log_text` itself as a static function due to the dependency on the MlflowClient's `log_artifact`function.\r\n\r\nFrom offline discussion:\r\n\r\n\r\n> If anything in the future we could consider having utils for logging an in memory object to a pre-specified file path, & that could eventually become the pluggable interface for logging custom object types. You implement \"log object type X to a specified file\" and then MLflow knows how to use that method to log the object to a tempfile & call log_artifact on it. But I don't think we need to do that just yet",
        "createdAt" : "2020-11-13T07:56:43Z",
        "updatedAt" : "2020-11-13T08:12:29Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f27095bc9ea553a17dbbd4df46af1a1cf1d01d6",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +915,919 @@        self._tracking_client.log_artifacts(run_id, local_dir, artifact_path)\n\n    @contextlib.contextmanager\n    def _log_artifact_helper(self, run_id, artifact_file):\n        \"\"\""
  },
  {
    "id" : "c7f296d7-0976-4863-9330-81b6c47427b8",
    "prId" : 3573,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3573#pullrequestreview-514279407",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bab3d3e-4f05-4fe8-8a12-e74e69aa98cc",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "`client` is not defined in this code snippet.",
        "createdAt" : "2020-10-22T00:01:49Z",
        "updatedAt" : "2020-10-26T19:29:29Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "f0accf44-a82c-455e-8b3e-f02564197376",
        "parentId" : "1bab3d3e-4f05-4fe8-8a12-e74e69aa98cc",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "I think `create_registered_model` needs to be called before `create_model_version`.",
        "createdAt" : "2020-10-22T00:06:55Z",
        "updatedAt" : "2020-10-26T19:29:29Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "e58646e8-19ce-4c88-a402-299a4ad68f58",
        "parentId" : "1bab3d3e-4f05-4fe8-8a12-e74e69aa98cc",
        "authorId" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "body" : "Yeah, missed from the cut-n-paste from [tests](https://github.com/dmatrix/mlflow-tests/tree/master/py/mlflow/apis/client)\r\n```\r\n# Register model name in the model registry\r\nclient = MlflowClient()\r\nclient.create_registered_model(name)\r\n```",
        "createdAt" : "2020-10-22T00:24:29Z",
        "updatedAt" : "2020-10-26T19:29:29Z",
        "lastEditedBy" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "tags" : [
        ]
      }
    ],
    "commit" : "c36e43f83785ca4ab4df40d68375081e243298c0",
    "line" : 704,
    "diffHunk" : "@@ -1,1 +1917,1921 @@            # Create a new version of the rfr model under the registered model name\n            model_uri = \"runs:/{}/sklearn-model\".format(run.info.run_id)\n            mv = client.create_model_version(name, model_uri, run.info.run_id)\n            print_model_version_info(mv)\n            print(\"--\")"
  },
  {
    "id" : "d5ee9d29-6450-4c1a-80a3-fb9a09ed8ead",
    "prId" : 3573,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3573#pullrequestreview-517135229",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4a3e39e-53a2-4eed-a893-b082eae932a5",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "```suggestion\r\n                rfr = RandomForestRegressor(**params).fit([[0, 1]], [2])\r\n                mlflow.log_params(params)\r\n```\r\n\r\nCan we call `fit` using toy data to prevent users from wondering \"why fit isn't called?\" & make the example more realistic?",
        "createdAt" : "2020-10-26T04:55:20Z",
        "updatedAt" : "2020-10-26T19:29:29Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "e1f950fb-5d8c-46c9-aa31-1e956068be67",
        "parentId" : "b4a3e39e-53a2-4eed-a893-b082eae932a5",
        "authorId" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "body" : "We use this `rfr = RandomForestRegressor(**params)` model creation in many API calls. Arguably, if we call `rfr`.fit()` here, then we might as well make it ubiquitous elsewhere, for the same argument can be applied there too, especially with \"create/get_model_* etc. We either do it for all or none. How strongly do you feel about it? WDYT?",
        "createdAt" : "2020-10-26T16:55:12Z",
        "updatedAt" : "2020-10-26T20:06:42Z",
        "lastEditedBy" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "tags" : [
        ]
      },
      {
        "id" : "d41e8f6b-7843-4ff4-85f0-935b187e6885",
        "parentId" : "b4a3e39e-53a2-4eed-a893-b082eae932a5",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Let's just leave `rfr` unfitted in this PR.",
        "createdAt" : "2020-10-26T17:10:59Z",
        "updatedAt" : "2020-10-26T19:29:29Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "09d4a8c1-51ea-4774-ac51-0d4a14958b1a",
        "parentId" : "b4a3e39e-53a2-4eed-a893-b082eae932a5",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "And update them all later in a separate PR.",
        "createdAt" : "2020-10-26T17:16:23Z",
        "updatedAt" : "2020-10-26T19:29:29Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "91be8cd0-27ee-43f7-a870-ca650293d2af",
        "parentId" : "b4a3e39e-53a2-4eed-a893-b082eae932a5",
        "authorId" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "body" : "I like the idea of having the `fit` call in other places too. Let's go with your suggestion of filing another PR where we retrofit this `fit` call. ",
        "createdAt" : "2020-10-26T20:07:52Z",
        "updatedAt" : "2020-10-26T22:07:33Z",
        "lastEditedBy" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "tags" : [
        ]
      }
    ],
    "commit" : "c36e43f83785ca4ab4df40d68375081e243298c0",
    "line" : 809,
    "diffHunk" : "@@ -1,1 +2041,2045 @@                params = {\"n_estimators\": 3, \"random_state\": 42}\n                rfr = RandomForestRegressor(**params)\n                mlflow.log_params(params)\n                mlflow.sklearn.log_model(rfr, artifact_path=\"sklearn-model\")\n"
  },
  {
    "id" : "d41d890e-9b7e-4ab1-853a-019326670615",
    "prId" : 3489,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3489#pullrequestreview-502493696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be4cc58d-fc83-4dc9-9257-f417fd56dc1b",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "```suggestion\r\n            with mlflow.start_run():\r\n                mlflow.log_param(\"p\", 0)\r\n```",
        "createdAt" : "2020-10-05T04:03:33Z",
        "updatedAt" : "2020-10-12T22:17:33Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "2ad3b874-f7d0-4345-8d8a-73d27c99dd55",
        "parentId" : "be4cc58d-fc83-4dc9-9257-f417fd56dc1b",
        "authorId" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "body" : "`run` is needed here as we fetch the ended run to get its  info.",
        "createdAt" : "2020-10-05T18:49:44Z",
        "updatedAt" : "2020-10-12T22:17:33Z",
        "lastEditedBy" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "tags" : [
        ]
      },
      {
        "id" : "d0595f2e-e47c-414f-a3fb-6dacff777215",
        "parentId" : "be4cc58d-fc83-4dc9-9257-f417fd56dc1b",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Sorry I missed this line `run = client.get_run(run.info.run_id)`.",
        "createdAt" : "2020-10-05T23:45:51Z",
        "updatedAt" : "2020-10-12T22:17:33Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "78ec5a374e9e168de549de0f2fff64834712a889",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +116,120 @@\n            with mlflow.start_run() as run:\n                mlflow.log_param(\"p\", 0)\n\n            # The run has finished since we have exited the with block"
  },
  {
    "id" : "aeec5c50-f7e7-4d2f-8889-0ffc61524899",
    "prId" : 3220,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3220#pullrequestreview-463449520",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90aae604-8bd2-4984-8f97-d77227eeae7e",
        "parentId" : null,
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "😮  nice - seems to work when I try out the wheel",
        "createdAt" : "2020-08-07T16:34:37Z",
        "updatedAt" : "2020-08-07T16:36:41Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf489b8c6f1bc72ac83a2ff9f2b434ebaa875f45",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +514,518 @@        if is_databricks_uri(self._registry_uri) and tracking_uri != self._registry_uri:\n            # Print out some info for user since the copy may take a while for large models.\n            eprint(\"=== Copying model files from the source location to the model\" +\n                   \" registry workspace ===\")\n            new_source = _upload_artifacts_to_databricks(source, run_id, tracking_uri,"
  },
  {
    "id" : "f005283b-5d8f-42f7-b0c7-9ace18ec4eff",
    "prId" : 3164,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3164#pullrequestreview-455182518",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "146ddb95-5617-46b1-8cc4-3bbf5704bda7",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "I wonder if we should fail here if workspace_id is not given, or just give a warning. I guess throwing is okay - user can give a run_link explicitly to bypass this problem. I am not sure what the best way to document this is though - probably in the databricks docs for multi-workspace workflows.",
        "createdAt" : "2020-07-24T18:48:47Z",
        "updatedAt" : "2020-07-24T22:56:04Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "dc2721f1-30df-4199-89cd-48f3bc966ea7",
        "parentId" : "146ddb95-5617-46b1-8cc4-3bbf5704bda7",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Yeah my concern was that ST users might not know what the workspace-id is, and so they might just not provide one in the secrets, so then that would just return None. In that scenario, it'd still be ok since it isn't needed in the URL anyways.\r\n\r\nFor MT users, if they didn't specify a workspace ID, would going to the URL just put them in the workspace selector menu?",
        "createdAt" : "2020-07-24T19:20:42Z",
        "updatedAt" : "2020-07-24T22:56:04Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      },
      {
        "id" : "2ffd7d43-060a-468b-9de9-ce4acec181fa",
        "parentId" : "146ddb95-5617-46b1-8cc4-3bbf5704bda7",
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "mm yeah.. that's a good point. i think if they only have access to 1 workspace it will go to that one, and if not, put them in the workspace selector menu. maybe we can print out a message like \"No workspace ID specified; if your Databricks workspaces share the same host URL, you may want to specify the workspace ID (along with the host information in the secret manager) for run lineage tracking.\" if no workspace_id is found. ",
        "createdAt" : "2020-07-24T20:28:41Z",
        "updatedAt" : "2020-07-24T22:56:04Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "64fec56c-2119-4e88-bbd4-e4fba248966c",
        "parentId" : "146ddb95-5617-46b1-8cc4-3bbf5704bda7",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Yeah makes sense - will add that",
        "createdAt" : "2020-07-24T20:59:38Z",
        "updatedAt" : "2020-07-24T22:56:04Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "52040312aab4436f94c6718dc70396cad9ca63b0",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +530,534 @@            experiment_id = self.get_run(run_id).info.experiment_id\n            if workspace_host and run_id and experiment_id:\n                run_link = construct_run_url(workspace_host, experiment_id, run_id, workspace_id)\n        return self._get_registry_client().create_model_version(\n            name=name,"
  },
  {
    "id" : "8f259a88-f69e-4d6b-8e71-1ec4efe2ce77",
    "prId" : 3119,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3119#pullrequestreview-456001097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33fe24cd-a4eb-4fd6-ba6e-ac6ab093cde5",
        "parentId" : null,
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Looks way better refactored!",
        "createdAt" : "2020-07-27T18:47:44Z",
        "updatedAt" : "2020-08-03T06:34:09Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d857badd9b4f4e208367ba1e6c5b96e7c80b8a2b",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +534,538 @@            run_link=run_link)\n\n    def _get_run_link(self, tracking_uri, run_id):\n        # if using the default Databricks tracking URI and in a notebook, we can automatically\n        # figure out the run-link."
  },
  {
    "id" : "661bf4af-16a4-4504-ad46-1798d834a1bf",
    "prId" : 3095,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3095#pullrequestreview-449417447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9703ffc-79af-49ed-9424-6b2bdd7a1564",
        "parentId" : null,
        "authorId" : "dab5a163-e8a4-4ae3-a16c-0d903dcff35c",
        "body" : "I think we should add some tests here: https://github.com/mlflow/mlflow/blob/master/tests/tracking/test_client.py",
        "createdAt" : "2020-07-14T03:12:29Z",
        "updatedAt" : "2020-07-15T02:21:37Z",
        "lastEditedBy" : "dab5a163-e8a4-4ae3-a16c-0d903dcff35c",
        "tags" : [
        ]
      },
      {
        "id" : "935342b3-e9f8-463d-b9bd-c80846ae4347",
        "parentId" : "e9703ffc-79af-49ed-9424-6b2bdd7a1564",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "I'll add tests.",
        "createdAt" : "2020-07-14T05:04:56Z",
        "updatedAt" : "2020-07-15T02:21:37Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "1361a5c9-cc61-4019-a908-7caea0dd71db",
        "parentId" : "e9703ffc-79af-49ed-9424-6b2bdd7a1564",
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "@andychow-db - i think we had a discussion (a really long time ago) about what to set the default for this API. one concern was that if we set it to be `False` it doesn't match the UI which is `True` by default. Do you remember what we decided there? i assume we want to set it to `False` here to not break any existing usages. ",
        "createdAt" : "2020-07-15T01:23:15Z",
        "updatedAt" : "2020-07-15T02:21:37Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "fa0616e1-eead-467f-a36e-6d9d609f6330",
        "parentId" : "e9703ffc-79af-49ed-9424-6b2bdd7a1564",
        "authorId" : "dab5a163-e8a4-4ae3-a16c-0d903dcff35c",
        "body" : "I vaguely remember we said the UI would be true and the client would default to False to preserve behavior.",
        "createdAt" : "2020-07-15T23:45:24Z",
        "updatedAt" : "2020-07-15T23:45:24Z",
        "lastEditedBy" : "dab5a163-e8a4-4ae3-a16c-0d903dcff35c",
        "tags" : [
        ]
      },
      {
        "id" : "6fb241cd-3c76-4fef-ad03-d7f75cfce3a8",
        "parentId" : "e9703ffc-79af-49ed-9424-6b2bdd7a1564",
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "ok",
        "createdAt" : "2020-07-15T23:50:17Z",
        "updatedAt" : "2020-07-15T23:50:17Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2c6eea1d9b0421e9a0ed20f20eb8cd4974e22c4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +494,498 @@\n    @experimental\n    def transition_model_version_stage(self, name, version, stage, archive_existing_versions=False):\n        \"\"\"\n        Update model version stage."
  },
  {
    "id" : "5704f470-7def-46b7-b099-e880aa47ed84",
    "prId" : 3095,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3095#pullrequestreview-447948949",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "700ab1c6-e3e5-4305-9d1f-11804b99c646",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "@andychow-db cc @sueann \r\nFixed the description for `archive_existing_versions`. After making sure this is fine, I'll apply the change to other `transition_model_version_stage`s.",
        "createdAt" : "2020-07-14T09:37:59Z",
        "updatedAt" : "2020-07-15T02:21:37Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2c6eea1d9b0421e9a0ed20f20eb8cd4974e22c4",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +503,507 @@        :param archive_existing_versions: If this flag is set to ``True``, all existing model\n            versions in the stage will be automically moved to the \"archived\" stage. Only valid\n            when ``stage`` is ``\"staging\"`` or ``\"production\"`` otherwise an error will be raised.\n\n        :return: A single :py:class:`mlflow.entities.model_registry.ModelVersion` object."
  },
  {
    "id" : "4bf5ceae-4703-4501-a74e-d12798a288eb",
    "prId" : 1983,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1983#pullrequestreview-306907186",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e04520ea-a23c-41bc-9634-e15b70142439",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "document it. looks 👻 to me :)",
        "createdAt" : "2019-10-24T22:20:27Z",
        "updatedAt" : "2019-10-27T22:56:42Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "cfb15153-2257-46a5-96d4-05cafb63456f",
        "parentId" : "e04520ea-a23c-41bc-9634-e15b70142439",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Documented! Hopefully the documentation isn't even scarier 👻 :).",
        "createdAt" : "2019-10-24T22:53:52Z",
        "updatedAt" : "2019-10-27T22:56:42Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "09a5439bf3897b63b5f8a3bbef5c7ca648218dd3",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +55,59 @@        # function is used to safely fetch the variable (if it is defined) or a NoneType\n        # (if it is not defined)\n        registry_client_attr = \"_registry_client_lazy\"\n        registry_client = getattr(self, registry_client_attr, None)\n        if registry_client is None:"
  },
  {
    "id" : "c1db2fa2-5991-47ee-a5f0-63826a0f3544",
    "prId" : 1983,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1983#pullrequestreview-306907302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e3bfdaf-70dd-4233-97d4-dc27abf694f1",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "```\r\n        self._registry_uri = registry_uri or final_tracking_uri\r\n        self._tracking_client = TrackingServiceClient(final_tracking_uri)\r\n        # registry client is not defined. APIs are expected to use _get_registry_client() for resolution.\r\n```",
        "createdAt" : "2019-10-24T22:27:27Z",
        "updatedAt" : "2019-10-27T22:56:42Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "4b7b45a9-beb3-4ec6-adb1-ff45ebc8da4e",
        "parentId" : "0e3bfdaf-70dd-4233-97d4-dc27abf694f1",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Great suggestion! Added a comment to the constructor and re-ordered the variable definitions!",
        "createdAt" : "2019-10-24T22:54:15Z",
        "updatedAt" : "2019-10-27T22:56:42Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "09a5439bf3897b63b5f8a3bbef5c7ca648218dd3",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +33,37 @@        \"\"\"\n        final_tracking_uri = tracking_uri or utils.get_tracking_uri()\n        self._registry_uri = registry_uri or final_tracking_uri\n        self._tracking_client = TrackingServiceClient(final_tracking_uri)\n        # `MlflowClient` also references a `ModelRegistryClient` instance that is provided by the"
  },
  {
    "id" : "6ef49ea2-0b2a-43bc-b378-d4a1dc760db2",
    "prId" : 1363,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1363#pullrequestreview-243883031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a849c43d-258f-4c0a-9c46-2891c9bc9b7c",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "👍 ",
        "createdAt" : "2019-05-30T16:06:21Z",
        "updatedAt" : "2019-05-30T16:06:36Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "53f4045d3dc6e0473aef7ccae7f9785a2a9ad248",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +278,282 @@        Search experiments that fit the search criteria.\n\n        :param experiment_ids: List of experiment IDs, or a single int or string id.\n        :param filter_string: Filter query string, defaults to searching all runs.\n        :param run_view_type: one of enum values ACTIVE_ONLY, DELETED_ONLY, or ALL runs"
  },
  {
    "id" : "eaaff15a-34ca-4f4c-9b85-eb408bd4aca2",
    "prId" : 978,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/978#pullrequestreview-214031031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a20469fb-d089-451b-9bfd-20405b848fe4",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "`parent_run_id` we actually intentionally added as an extra parameter to the create_run call. The idea here was that the notion of linking two runs may be fundamental to the creation of those runs, and may imply other properties (for example, we might update metadata on the parent run).\r\n\r\nIn practice, we haven't yet implemented any such extra linking from an API perspective, so it may be OK to degrade this to just be a tag instead of a property of the create call.",
        "createdAt" : "2019-03-12T18:28:16Z",
        "updatedAt" : "2019-03-13T14:22:51Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "f05a994c-0431-44eb-bcde-d7839d960af0",
        "parentId" : "a20469fb-d089-451b-9bfd-20405b848fe4",
        "authorId" : "da2a90d1-571b-4818-a352-3f0fd14e245e",
        "body" : "The parent run ID does seem like something that we might want to have as a strongly integrated attribute on runs, but while it is exposed as a 'top level' attribute when creating runs, it seems to only be accessible as a tag when getting a run.\r\n\r\nI would suggest that it should either be 'just' a tag and set as in this PR, or it should be promoted to a full attribute like `start_time` that appears in the `RunInfo` object itself.\r\n\r\nSince it's currently stored as a tag, and adding it to the `RunInfo` object will require changing the protobuf files etc., I suggest keeping it as a tag for the time being and promoting it to be an actual attribute later if we think it's valuable.",
        "createdAt" : "2019-03-13T14:15:32Z",
        "updatedAt" : "2019-03-13T14:22:51Z",
        "lastEditedBy" : "da2a90d1-571b-4818-a352-3f0fd14e245e",
        "tags" : [
        ]
      },
      {
        "id" : "2707d8b9-d588-4d39-92c5-2a1252ed9416",
        "parentId" : "a20469fb-d089-451b-9bfd-20405b848fe4",
        "authorId" : "da2a90d1-571b-4818-a352-3f0fd14e245e",
        "body" : "(FYI my last commit is not meant to assume the above decision - just don't want to forget to update the docs in the case my proposal is accepted)",
        "createdAt" : "2019-03-13T14:24:09Z",
        "updatedAt" : "2019-03-13T14:24:10Z",
        "lastEditedBy" : "da2a90d1-571b-4818-a352-3f0fd14e245e",
        "tags" : [
        ]
      },
      {
        "id" : "09030052-793a-48c4-8211-7193ade61ef4",
        "parentId" : "a20469fb-d089-451b-9bfd-20405b848fe4",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Alright, sounds reasonable to me.",
        "createdAt" : "2019-03-13T15:32:25Z",
        "updatedAt" : "2019-03-13T15:32:26Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "40048fbc957521e20f654316560fa20948a0be99",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +59,63 @@        # This logic is temporary; by the 1.0 release, this information will only be stored in tags\n        # and will not be available as attributes of the run\n        parent_run_id = tags.get(MLFLOW_PARENT_RUN_ID)\n        source_name = tags.get(MLFLOW_SOURCE_NAME, \"Python Application\")\n        source_version = tags.get(MLFLOW_GIT_COMMIT)"
  },
  {
    "id" : "a6ce0a71-0611-4f88-8fba-7e24d3525595",
    "prId" : 955,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/955#pullrequestreview-212994733",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffb2247e-e186-4eb2-aa66-c474da66e415",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Should we call this in `log_batch` as well?",
        "createdAt" : "2019-03-11T17:57:02Z",
        "updatedAt" : "2019-03-11T19:42:08Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "0d155cf2-9f26-4208-bdf7-e6828e99332c",
        "parentId" : "ffb2247e-e186-4eb2-aa66-c474da66e415",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Oops yeah lol...",
        "createdAt" : "2019-03-11T17:57:56Z",
        "updatedAt" : "2019-03-11T19:42:08Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c34824774acd3e8a40225652538380f81ef4058",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +133,137 @@        \"\"\"\n        timestamp = timestamp if timestamp is not None else int(time.time())\n        _validate_metric(key, value, timestamp)\n        metric = Metric(key, value, timestamp)\n        self.store.log_metric(run_id, metric)"
  },
  {
    "id" : "b2bee9d6-780e-4624-a32a-b1f92bd0a3d1",
    "prId" : 790,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/790#pullrequestreview-189225239",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc035f49-ee72-4174-8615-cbc31c324c8f",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "flipping existing usage of free flowing strings to pre-defined constants. ^^this^^ is one example. More further down..",
        "createdAt" : "2019-01-03T23:36:29Z",
        "updatedAt" : "2019-01-04T04:02:17Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f9f541990f5b37d043335311309674b1c247c72",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +209,213 @@        :param end_time: If not provided, defaults to the current time.\"\"\"\n        end_time = end_time if end_time else int(time.time() * 1000)\n        status = status if status else RunStatus.to_string(RunStatus.FINISHED)\n        self.store.update_run_info(run_id, run_status=RunStatus.from_string(status),\n                                   end_time=end_time)"
  },
  {
    "id" : "274054cb-8e6e-463b-a5ef-630a721bc39d",
    "prId" : 570,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/570#pullrequestreview-159994801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b5af5a0-0223-46eb-a068-f020e2f9c794",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Added sane defaults here to look closer to the Java API; otherwise, `create_run(experiment_id)` does not work. Found via the integration test!",
        "createdAt" : "2018-09-28T19:29:45Z",
        "updatedAt" : "2018-10-08T15:12:19Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3348a626d7f37d3bc0a7581c7166c1f1a5eefaf",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +58,62 @@            user_id=user_id if user_id is not None else _get_user_id(),\n            run_name=run_name,\n            source_type=source_type if source_type is not None else SourceType.LOCAL,\n            source_name=source_name if source_name is not None else \"Python Application\",\n            entry_point_name=entry_point_name,"
  }
]