[
  {
    "id" : "5b2155e9-83c5-4c7c-a8c3-4ec45d0ecf25",
    "prId" : 4242,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4242#pullrequestreview-634139688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b54e196-1382-4ca3-9f00-853f0a0c0aa3",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "A workaround for the skinny client (which doesn't install pandas).",
        "createdAt" : "2021-04-13T03:28:13Z",
        "updatedAt" : "2021-04-16T02:04:30Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e3645c0c2ce1c0820c915301daa9c550a880dde",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +37,41 @@except ImportError:\n    SearchRunsReturnType = List[Run]\n\n_EXPERIMENT_ID_ENV_VAR = \"MLFLOW_EXPERIMENT_ID\"\n_EXPERIMENT_NAME_ENV_VAR = \"MLFLOW_EXPERIMENT_NAME\""
  },
  {
    "id" : "b6f2dd0e-56ae-4696-a64d-441f7416107d",
    "prId" : 4242,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4242#pullrequestreview-634140782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9352ab7-73a7-4173-8ce2-a11fb32ebab3",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "I'm planning to add `-> None` to functions that don't return anything (e.g. `mllfow.set_tags`) ",
        "createdAt" : "2021-04-13T03:31:31Z",
        "updatedAt" : "2021-04-16T02:04:30Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e3645c0c2ce1c0820c915301daa9c550a880dde",
    "line" : 235,
    "diffHunk" : "@@ -1,1 +871,875 @@\n\ndef delete_run(run_id) -> None:\n    \"\"\"\n    Deletes a run with the given ID."
  },
  {
    "id" : "c5f950be-a659-48b1-835d-acc22dd521d8",
    "prId" : 4228,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4228#pullrequestreview-636643121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5603824-68ac-45bb-805e-116d492ab2e1",
        "parentId" : null,
        "authorId" : "52b26aee-f464-4ce0-af48-b29e1a3f86e2",
        "body" : "notable change.",
        "createdAt" : "2021-04-15T12:47:40Z",
        "updatedAt" : "2021-04-16T09:37:11Z",
        "lastEditedBy" : "52b26aee-f464-4ce0-af48-b29e1a3f86e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fb4a8c2161c423a5da8b1814bfce67624a9ce33",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1435,1439 @@        if \"pyspark\" in str(ie):\n            register_post_import_hook(setup_autologging, \"pyspark\", overwrite=True)\n            register_post_import_hook(setup_autologging, \"pyspark.ml\", overwrite=True)\n    except Exception as e:\n        if is_testing():"
  },
  {
    "id" : "32649f0c-917a-41d8-b677-5e1b524883c7",
    "prId" : 4119,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4119#pullrequestreview-602129178",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd44cec7-7be4-440a-85c6-dd2a41322d3c",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@WeichenXu123 Looks like we still print the `Autologging successfully enabled for ...` message even when `disable_for_unsupported_versions=True` and an unsupported version is used, due to logic present here: https://github.com/mlflow/mlflow/blob/ab6fa411a4237c01e19b3b9747179c85f6fd137e/mlflow/tracking/fluent.py#L1393-L1394. Rather than checking for `autologging_params.get(\"disable\", False)`, on line 1393, can we condition the message based on `autologging_utils.autologging_is_disabled`?",
        "createdAt" : "2021-03-02T18:22:45Z",
        "updatedAt" : "2021-03-03T08:09:54Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "228d54cfc0b09d6b60302a9b2eadd85766bd9fa1",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1227,1231 @@    disable=False,\n    exclusive=False,\n    disable_for_unsupported_versions=False,\n):  # pylint: disable=unused-argument\n    \"\"\""
  },
  {
    "id" : "7d774b53-b235-46b1-9c8f-8af056a68df8",
    "prId" : 3859,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3859#pullrequestreview-554422813",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f03872c4-451e-4d83-8069-2003ddcdeaf3",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Allows `mlflow.autolog()` to respect test mode, enabling us to catch errors raised by `mlflow.autolog()`.",
        "createdAt" : "2020-12-17T09:31:22Z",
        "updatedAt" : "2020-12-18T08:47:55Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a9e86b6c2addaa063c8690260b50cd71702022",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1328,1332 @@            _logger.info(\"Autologging successfully enabled for %s.\", module.__name__)\n        except Exception as e:  # pylint: disable=broad-except\n            if _is_testing():\n                # Raise unexpected exceptions in test mode in order to detect\n                # errors within dependent autologging integrations"
  },
  {
    "id" : "d0229a83-20e7-4438-8a37-af2ac9d6d64f",
    "prId" : 3678,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3678#pullrequestreview-529630243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c500b4f4-7d0a-4610-86d3-c956c4a26066",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Should we mark this API as experimental?",
        "createdAt" : "2020-11-12T15:36:12Z",
        "updatedAt" : "2020-11-13T08:12:29Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "c53c7ef8-dd24-489f-bc21-b12b9c45ef85",
        "parentId" : "c500b4f4-7d0a-4610-86d3-c956c4a26066",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "I think it's fine for this API to be stable; I don't imagine we'll want to rename or remove the `text` or `artifact_file` parameters",
        "createdAt" : "2020-11-13T00:54:12Z",
        "updatedAt" : "2020-11-13T08:12:29Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "61ec2dcb-4f1a-4c52-9d76-62dbcb67f589",
        "parentId" : "c500b4f4-7d0a-4610-86d3-c956c4a26066",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Makes sense.",
        "createdAt" : "2020-11-13T01:08:53Z",
        "updatedAt" : "2020-11-13T08:12:29Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f27095bc9ea553a17dbbd4df46af1a1cf1d01d6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +558,562 @@\n\ndef log_text(text, artifact_file):\n    \"\"\"\n    Log text as an artifact."
  },
  {
    "id" : "692777ff-ac09-480d-be2b-c406cbecbf74",
    "prId" : 3437,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3437#pullrequestreview-493617860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "234c25c5-4713-4926-8d26-c2418463887d",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "```\r\nprint(mlflow.active_run())\r\n```\r\n\r\nHow about adding `print(mlflow.active_run())` here to clarify there is no active run after `mlflow.end_run()`?",
        "createdAt" : "2020-09-22T03:09:08Z",
        "updatedAt" : "2020-09-24T16:47:25Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "a863dad2-5430-4577-8319-42b724fa5ecf",
        "parentId" : "234c25c5-4713-4926-8d26-c2418463887d",
        "authorId" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "body" : "Good suggestion!",
        "createdAt" : "2020-09-22T15:59:38Z",
        "updatedAt" : "2020-09-24T16:47:25Z",
        "lastEditedBy" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "tags" : [
        ]
      }
    ],
    "commit" : "b27f6baeaa370f8ca73aac6dd64ca916f616e71a",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +241,245 @@        print(\"run_id: {}; status: {}\".format(run.info.run_id, run.info.status))\n        print(\"--\")\n\n        # Check for any active runs\n        print(\"Active run: {}\".format(mlflow.active_run()))"
  },
  {
    "id" : "17ffd9e9-7151-4152-a779-b072d5a7760d",
    "prId" : 3437,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3437#pullrequestreview-496059256",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6144e11d-ec4a-413d-88a4-e9c32c61fa6a",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Should we include other usages\r\n\r\nusage 1\r\n\r\n```\r\nwith mlflow.start_run():\r\n    ...\r\n```\r\n\r\nusage 2\r\n\r\n```\r\nmllfow.start_run()\r\n...\r\nmlflow.end_run()\r\n```\r\n\r\n",
        "createdAt" : "2020-09-24T11:15:55Z",
        "updatedAt" : "2020-09-24T16:47:25Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "954da314-8d3a-4f46-90e6-10b2a1eb99de",
        "parentId" : "6144e11d-ec4a-413d-88a4-e9c32c61fa6a",
        "authorId" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "body" : "This may bloat the code snippets unnecessarily. We do mention at the outset two usages, so I feel that should suffice. I lean more toward the context manager syntax: it's more clean and clear.",
        "createdAt" : "2020-09-24T16:32:16Z",
        "updatedAt" : "2020-09-24T16:47:25Z",
        "lastEditedBy" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "tags" : [
        ]
      },
      {
        "id" : "ff84abad-e254-4408-a462-770f28614d0c",
        "parentId" : "6144e11d-ec4a-413d-88a4-e9c32c61fa6a",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "makes sense.",
        "createdAt" : "2020-09-25T01:51:40Z",
        "updatedAt" : "2020-09-25T01:51:40Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "b27f6baeaa370f8ca73aac6dd64ca916f616e71a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +130,134 @@        :caption: Example\n\n        import mlflow\n\n        # Create nested runs"
  },
  {
    "id" : "96f67a34-0001-49bc-bc90-c6f25dd5788b",
    "prId" : 3329,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3329#pullrequestreview-488152041",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d29ddf45-c455-40f8-a009-dc24deb96a78",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "In the docs, for `start_run`, can we indicate that the run status is set to `RunStatus.RUNNING` when resuming a run?\r\n\r\nAlso, we discussed this change with other team members, right? Just making sure everyone's on board here (it makes sense to me!).",
        "createdAt" : "2020-09-14T19:58:08Z",
        "updatedAt" : "2020-09-15T00:17:55Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "082dedd6-5a0b-4e93-b4f1-83b36d60aedf",
        "parentId" : "d29ddf45-c455-40f8-a009-dc24deb96a78",
        "authorId" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "body" : "Yep, I had brought it up a while ago as well :) Will write docs change.",
        "createdAt" : "2020-09-14T21:24:42Z",
        "updatedAt" : "2020-09-15T00:17:55Z",
        "lastEditedBy" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "tags" : [
        ]
      }
    ],
    "commit" : "19d2fd80c8ddea04114c6e24b8c994f19347bd6d",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +146,150 @@        end_time = active_run_obj.info.end_time\n        _get_store().update_run_info(\n            existing_run_id, run_status=RunStatus.RUNNING, end_time=end_time\n        )\n        active_run_obj = MlflowClient().get_run(existing_run_id)"
  },
  {
    "id" : "2ce87ffb-ed9e-48d0-9ee6-66b4e96d05e4",
    "prId" : 3329,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3329#pullrequestreview-488152143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1abb9ec4-e02b-4723-ae7a-64a06b6b6e0b",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Hmmm...I'm a bit confused by this change. Looks like we're preserving the same `end_time` that was initially set when the run was ended the first time, even though the run was resumed later.\r\n\r\nThis gets overwritten when the resumed run ends again, right? So maybe that's okay. Ideally, it'd be nice if we could somehow unset this field; does `update_run_info` support that?",
        "createdAt" : "2020-09-14T20:02:01Z",
        "updatedAt" : "2020-09-15T00:17:55Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "a01d0abe-2eea-4433-b064-9e1ddabb2f91",
        "parentId" : "1abb9ec4-e02b-4723-ae7a-64a06b6b6e0b",
        "authorId" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "body" : "Discussed offline",
        "createdAt" : "2020-09-14T21:24:51Z",
        "updatedAt" : "2020-09-15T00:17:55Z",
        "lastEditedBy" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "tags" : [
        ]
      }
    ],
    "commit" : "19d2fd80c8ddea04114c6e24b8c994f19347bd6d",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +146,150 @@        end_time = active_run_obj.info.end_time\n        _get_store().update_run_info(\n            existing_run_id, run_status=RunStatus.RUNNING, end_time=end_time\n        )\n        active_run_obj = MlflowClient().get_run(existing_run_id)"
  },
  {
    "id" : "c7fd1159-0494-4dd3-bb10-0cca8fff0ac5",
    "prId" : 3329,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3329#pullrequestreview-488238836",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0833a4e1-9548-493d-aedc-a26ed59ab211",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Can you add a comment above this line explaining why we're setting `end_time` to the previous end_time (i.e. because this value is required, unfortunately)",
        "createdAt" : "2020-09-15T00:03:22Z",
        "updatedAt" : "2020-09-15T00:17:55Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "3f180204-66d6-44ad-8d93-0f51733c1e7a",
        "parentId" : "0833a4e1-9548-493d-aedc-a26ed59ab211",
        "authorId" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "body" : "Done!",
        "createdAt" : "2020-09-15T00:18:03Z",
        "updatedAt" : "2020-09-15T00:18:03Z",
        "lastEditedBy" : "9b00f760-3323-47e3-bb69-3add3073befc",
        "tags" : [
        ]
      }
    ],
    "commit" : "19d2fd80c8ddea04114c6e24b8c994f19347bd6d",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +146,150 @@        end_time = active_run_obj.info.end_time\n        _get_store().update_run_info(\n            existing_run_id, run_status=RunStatus.RUNNING, end_time=end_time\n        )\n        active_run_obj = MlflowClient().get_run(existing_run_id)"
  },
  {
    "id" : "81aafdc5-9a89-4af1-b0d2-ea5fffc5cd9e",
    "prId" : 3183,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3183#pullrequestreview-461350219",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b672ebd-630b-405c-974b-114c5489243e",
        "parentId" : null,
        "authorId" : "240b730c-4fc4-4801-892a-18195816221b",
        "body" : "I notice that there's a lot of duplicate code in this PR. Some here and more in the tests.\r\n\r\nDo you have any ideas on how to reduce the duplicate code?\r\n\r\nOne suggestion would be to have `_get_paginated_runs` and `list_run_infos` both call a common function, `_paginate(paginated_fn, max_results_per_page, max_results)`. \r\n\r\nYou could pass in `paginated_fn = lambda token: MlflowClient().search_runs(experiment_ids, filter_string, run_view_type, NUM_RUNS_PER_PAGE_PANDAS, order_by, token)` here.\r\n\r\nYou could then replace the tests for `list_run_infos` and `_get_paginated_runs` to instead test this function.\r\n\r\nI'm open to other suggestions, but am skeptical of the code duplication because it makes the codebase harder to maintain.",
        "createdAt" : "2020-07-28T21:51:08Z",
        "updatedAt" : "2020-08-06T17:46:33Z",
        "lastEditedBy" : "240b730c-4fc4-4801-892a-18195816221b",
        "tags" : [
        ]
      },
      {
        "id" : "33734a05-9e9d-4423-b007-6a0f2d07f17b",
        "parentId" : "1b672ebd-630b-405c-974b-114c5489243e",
        "authorId" : "cdb19054-43ec-4ffc-a461-00fd844e66f9",
        "body" : "did some refactoring, please take a look and let me know what you think.",
        "createdAt" : "2020-08-03T21:21:36Z",
        "updatedAt" : "2020-08-06T17:46:33Z",
        "lastEditedBy" : "cdb19054-43ec-4ffc-a461-00fd844e66f9",
        "tags" : [
        ]
      },
      {
        "id" : "bf68effc-c4b9-4875-93dd-d4b061b73c29",
        "parentId" : "1b672ebd-630b-405c-974b-114c5489243e",
        "authorId" : "240b730c-4fc4-4801-892a-18195816221b",
        "body" : "Beautiful! I think this is great.",
        "createdAt" : "2020-08-05T05:43:53Z",
        "updatedAt" : "2020-08-06T17:46:33Z",
        "lastEditedBy" : "240b730c-4fc4-4801-892a-18195816221b",
        "tags" : [
        ]
      }
    ],
    "commit" : "44d6d841f4c074f80d624c5d03cf7ec9137de1d9",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +491,495 @@\n\ndef list_run_infos(experiment_id, run_view_type=ViewType.ACTIVE_ONLY,\n                   max_results=SEARCH_MAX_RESULTS_DEFAULT, order_by=None):\n    \"\"\""
  },
  {
    "id" : "42ba60b8-2cae-43b8-a0d2-98da36187e4c",
    "prId" : 2369,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2369#pullrequestreview-351697620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47f5c8cb-0877-4a91-8039-35202e949da5",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "I wonder if we should remove this, it's a private method that's not used anywhere",
        "createdAt" : "2020-01-31T07:15:59Z",
        "updatedAt" : "2020-02-04T02:22:51Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "76758ed1-0675-42eb-a4da-604fbb135833",
        "parentId" : "47f5c8cb-0877-4a91-8039-35202e949da5",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "It's used in Model.log(...)",
        "createdAt" : "2020-01-31T17:37:22Z",
        "updatedAt" : "2020-02-04T02:22:51Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "3077496a-445e-40d7-9a79-ff3282bbfdd0",
        "parentId" : "47f5c8cb-0877-4a91-8039-35202e949da5",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Ah shoot searched for `mlflow._record_logged_model` instead of `mlflow.tracking.fluent._record_logged_model`. Makes sense, thanks!",
        "createdAt" : "2020-01-31T18:38:13Z",
        "updatedAt" : "2020-02-04T02:22:51Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "d49c94ba6b331dc7b759c0f8f70a3b06e5b94157",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +324,328 @@\n\ndef _record_logged_model(mlflow_model):\n    run_id = _get_or_start_run().info.run_id\n    MlflowClient()._record_logged_model(run_id, mlflow_model)"
  },
  {
    "id" : "008f6b61-9378-4d51-ad3c-b91c31ae0c86",
    "prId" : 1923,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1923#pullrequestreview-301404983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74df1f9c-bea5-4f83-a542-6370cbccb2bd",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Nice, would you be able to add similar docstrings to the other methods? e.g. explain what the method does, in addition to describing the params & return type",
        "createdAt" : "2019-10-13T23:06:09Z",
        "updatedAt" : "2019-10-23T09:06:35Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "6a23a8cd-2204-494b-8cf1-15c9e2e3fe22",
        "parentId" : "74df1f9c-bea5-4f83-a542-6370cbccb2bd",
        "authorId" : "198d9acd-34da-49a5-ab0b-3c3edc443c06",
        "body" : "OK. I will do it.\r\nNeeds to be done in MLFlowClient in this case as well (where I copied them from)",
        "createdAt" : "2019-10-14T16:10:23Z",
        "updatedAt" : "2019-10-23T09:06:35Z",
        "lastEditedBy" : "198d9acd-34da-49a5-ab0b-3c3edc443c06",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c91567259b53035073fcecec95a8759882f8422",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +177,181 @@def get_run(run_id):\n    \"\"\"\n    Fetch the run from backend store. The resulting :py:class:`Run <mlflow.entities.Run>`\n    contains a collection of run metadata -- :py:class:`RunInfo <mlflow.entities.RunInfo>`,\n    as well as a collection of run parameters, tags, and metrics --"
  },
  {
    "id" : "1a630353-d210-4a1d-b1a5-b066e50cfb35",
    "prId" : 1559,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1559#pullrequestreview-260943142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e42a9df-f762-488d-a273-e9273e7109d2",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Attempting to invoke\r\n```\r\nimport mlflow\r\nmlflow.delete_tag(...)\r\n```\r\nyields\r\n```\r\nAttributeError: 'module' object has no attribute 'delete_tag'\r\n```\r\n\r\nLooks like we aren't exporting the `delete_tag` function to the top-level MLflow module. You can do that by adding an entry here: https://github.com/mlflow/mlflow/blob/9390f44e310faef7f030a75c6421754a4deff951/mlflow/__init__.py#L48\r\n\r\nThis also seems to imply that we don't have a test that calls `mlflow.delete_tag`; can we add one? `mlflow/tests/tracking/test_fluent.py` seems like a good location.",
        "createdAt" : "2019-07-11T18:31:10Z",
        "updatedAt" : "2019-07-12T00:10:10Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "5725e021-f3b0-46a5-b1b3-5c7c9b39a2ee",
        "parentId" : "8e42a9df-f762-488d-a273-e9273e7109d2",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Thanks for flagging this - sorry about missing it. Next commit has a fix now.",
        "createdAt" : "2019-07-11T20:42:37Z",
        "updatedAt" : "2019-07-12T00:10:10Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a13ef3900f30f805095ca5102e44fc4fd9cdd4c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +189,193 @@\n\ndef delete_tag(key):\n    \"\"\"\n    Delete a tag from a run. This is irreversible."
  },
  {
    "id" : "e556ea5e-d486-4901-b684-06b21c7871f2",
    "prId" : 1220,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1220#pullrequestreview-235304396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "240d8da3-f19d-498d-a373-9197fbede9b9",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "i remember vaguely we got rid of `parent_run_id` in other places. is setting it in `user_specified_tags` here the desired behavior?",
        "createdAt" : "2019-05-08T21:29:42Z",
        "updatedAt" : "2019-05-08T21:35:17Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "ba5b2ef4-5ab5-4fc9-8c68-345dd6ab4771",
        "parentId" : "240d8da3-f19d-498d-a373-9197fbede9b9",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "This is the auto-detection of parent_run_id. That property is no longer a parameter of start_run.",
        "createdAt" : "2019-05-08T21:34:43Z",
        "updatedAt" : "2019-05-08T21:35:17Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "89a406d01bf88637272eec7affb880a776866dec",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +117,121 @@\n        user_specified_tags = {}\n        if parent_run_id is not None:\n            user_specified_tags[MLFLOW_PARENT_RUN_ID] = parent_run_id\n        if run_name is not None:"
  },
  {
    "id" : "c3c5c0c4-7235-4cd5-8a01-737530ef7afc",
    "prId" : 1067,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1067#pullrequestreview-228802147",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b9ed5f4-dbc1-4c54-bf95-5dd49e6d4358",
        "parentId" : null,
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "should we do this conversion? the experiment_id comes from the user, shouldn't we raise an exception saying experiment id is now a string?",
        "createdAt" : "2019-04-18T20:23:24Z",
        "updatedAt" : "2019-04-19T19:48:58Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "b629bea6-f20a-4a5f-ae78-f70bb87c7a34",
        "parentId" : "2b9ed5f4-dbc1-4c54-bf95-5dd49e6d4358",
        "authorId" : "668ead22-45dd-4911-8926-af33e1dbaebc",
        "body" : "This was added to maintain backwards compatibility with existing user scripts for FileStore and SQLAlchemy store. We decided in one of the meetings to add this.\r\n\r\nI can remove it, although, I think new client + old server, and new client + old inputs would make sense for backwards compatibility. It makes the change opaque to existing users minus the doc string updates",
        "createdAt" : "2019-04-19T17:10:18Z",
        "updatedAt" : "2019-04-19T19:48:58Z",
        "lastEditedBy" : "668ead22-45dd-4911-8926-af33e1dbaebc",
        "tags" : [
        ]
      },
      {
        "id" : "9a99fb1b-ca89-4941-a3e3-fbcc1c166ea0",
        "parentId" : "2b9ed5f4-dbc1-4c54-bf95-5dd49e6d4358",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "Makes sense. I think we should keep it.",
        "createdAt" : "2019-04-19T19:31:54Z",
        "updatedAt" : "2019-04-19T19:48:58Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb76af9d3a1fbec543c2088c62370a476ef6c598",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +105,109 @@    global _active_run_stack\n    # back compat for int experiment_id\n    experiment_id = str(experiment_id) if isinstance(experiment_id, int) else experiment_id\n    if len(_active_run_stack) > 0 and not nested:\n        raise Exception((\"Run with UUID {} is already active. To start a nested \" +"
  },
  {
    "id" : "051d1bcc-5257-4120-bdae-832df5f46ea7",
    "prId" : 955,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/955#pullrequestreview-212104698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf62e16b-5be1-44f1-8703-8cdd28796482",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Looks like we don't perform the same metric value type validation that we do for `log_metric()`. As a result, the following code successfully writes a metric with the value `\"dog\"` to the file store. However, this corrupts the file store's run representation, and all subsequent calls to `get_run()` with the specified `run_id` fail.\r\n\r\n```\r\nwith mlflow.start_run():\r\n    run_id = mlflow.active_run().info.run_uuid\r\n    # Writes the metric string value and fails\r\n    mlflow.log_metrics(metrics={\"cat\": \"dog\"})\r\n```\r\n\r\n```\r\nfrom mlflow.tracking import MlflowClient\r\nclient = MlflowClient()\r\n# Fails because the run has been corrupted by a metric value of type string.\r\nclient.get_run(run_id)\r\n```",
        "createdAt" : "2019-03-07T22:33:17Z",
        "updatedAt" : "2019-03-11T19:42:08Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "83928860-5ab7-434b-b071-09e6b2b567a3",
        "parentId" : "bf62e16b-5be1-44f1-8703-8cdd28796482",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "I still think that it's ideal to perform this kind of validation in the store itself so that every client invocation doesn't have to repeat the same validation logic @mparkhe",
        "createdAt" : "2019-03-07T22:34:14Z",
        "updatedAt" : "2019-03-11T19:42:08Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "8e9e4037-92a3-488c-b399-55763b87f594",
        "parentId" : "bf62e16b-5be1-44f1-8703-8cdd28796482",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Ah good catch",
        "createdAt" : "2019-03-08T01:25:46Z",
        "updatedAt" : "2019-03-11T19:42:08Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c34824774acd3e8a40225652538380f81ef4058",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +213,217 @@    run_id = _get_or_start_run().info.run_uuid\n    timestamp = int(time.time())\n    metrics_arr = [Metric(key, value, timestamp) for key, value in metrics.items()]\n    MlflowClient().log_batch(run_id=run_id, metrics=metrics_arr, params=[], tags=[])\n"
  },
  {
    "id" : "2dbaeeda-ada3-4d40-9193-d94884d08469",
    "prId" : 930,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/930#pullrequestreview-212348505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1b2d1b3-e535-49b6-8690-453d3ec47a9b",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Hmm, a bit weird, I thought run_name was also a tag.",
        "createdAt" : "2019-03-08T15:56:18Z",
        "updatedAt" : "2019-03-08T20:50:40Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "494551bb-ffbf-499e-a516-e2bf3adb6a91",
        "parentId" : "f1b2d1b3-e535-49b6-8690-453d3ec47a9b",
        "authorId" : "da2a90d1-571b-4818-a352-3f0fd14e245e",
        "body" : "It is, but it's set in each of the stores separately - I'd like to bring that into a higher layer in a future PR.",
        "createdAt" : "2019-03-08T15:58:11Z",
        "updatedAt" : "2019-03-08T20:50:40Z",
        "lastEditedBy" : "da2a90d1-571b-4818-a352-3f0fd14e245e",
        "tags" : [
        ]
      }
    ],
    "commit" : "03b6b2cf449b2e5c67bf96963d4f73a8fb38151e",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +138,142 @@        active_run_obj = MlflowClient().create_run(\n            experiment_id=exp_id_for_run,\n            run_name=run_name,\n            source_name=tags.get(MLFLOW_SOURCE_NAME),  # For backwards compatability\n            source_version=tags.get(MLFLOW_GIT_COMMIT),  # For backwards compatability"
  },
  {
    "id" : "61daae7f-8df0-43f9-8c90-61c9348ed0ce",
    "prId" : 790,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/790#pullrequestreview-189238788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6aab8373-bb8b-4809-b8ba-d8decb969aea",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "n00b questions for you: is the goal to have functions take in the enum and not the string? seems true for create_run above but not for this one (end_run). or these functions are meant for different contexts so we want the enum for one and the string for the other ?",
        "createdAt" : "2019-01-04T00:21:27Z",
        "updatedAt" : "2019-01-04T04:02:17Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "db7fecfc-91d5-4414-a116-6fcd22b6ca5d",
        "parentId" : "6aab8373-bb8b-4809-b8ba-d8decb969aea",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "No! that is a good observation. This PR matches the behavior of SqlAlchemyStore's API with that of FileStore since the caller for them are the same client/fluent depending on the context and they will instantiate the backend store. That said, it does make sense to take audit of these APIs and maintain constancy and see if some of these APIs need to be changed (it could result in a breaking API change)\r\n\r\nMy preference is enums -- and use strings for readability -- logs, messages, UI ... etc.",
        "createdAt" : "2019-01-04T00:29:13Z",
        "updatedAt" : "2019-01-04T04:02:17Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "62f6b63b-9021-4ec0-a75a-395d33960027",
        "parentId" : "6aab8373-bb8b-4809-b8ba-d8decb969aea",
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "but we do want this `end_run` function to take in a string because it's exposed to the end user, right? (so this PR is good to go?) and eventually we want all the _internal_ methods to take in the enum. ",
        "createdAt" : "2019-01-04T00:49:49Z",
        "updatedAt" : "2019-01-04T04:02:17Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "a0e0b17c-efd9-4287-add1-ccdf765d8706",
        "parentId" : "6aab8373-bb8b-4809-b8ba-d8decb969aea",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Yeah. I agree that user facing functions to take in string-y fields and we can check for valid values.\r\n\r\nThis change only replaces the default value of status from constant `\"FINISHED\"` to `RunStatus.to_string(RunStatus.FINISHED)` <-- still a string argument.\r\n",
        "createdAt" : "2019-01-04T00:53:33Z",
        "updatedAt" : "2019-01-04T04:02:17Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f9f541990f5b37d043335311309674b1c247c72",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +151,155 @@\n\ndef end_run(status=RunStatus.to_string(RunStatus.FINISHED)):\n    \"\"\"End an active MLflow run (if there is one).\"\"\"\n    global _active_run_stack"
  },
  {
    "id" : "81eb7b3c-24c2-482d-a8e3-315758fd8eb6",
    "prId" : 547,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/547#pullrequestreview-158794429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64ab6eda-413b-4f07-9324-eac0b2a5a68f",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "I guess we already didn't do this, but could be worth documenting somewhere that methods in the fluent API aren't thread-safe (since they operate on a process-wide global active run)",
        "createdAt" : "2018-09-25T05:18:24Z",
        "updatedAt" : "2018-09-26T00:47:32Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "64ebd18c-b8f2-4e11-b1bd-921ebb613159",
        "parentId" : "64ab6eda-413b-4f07-9324-eac0b2a5a68f",
        "authorId" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "body" : "Makes sense, maybe we can document it here? https://www.mlflow.org/docs/latest/python_api/mlflow.html#module-mlflow",
        "createdAt" : "2018-09-26T00:26:30Z",
        "updatedAt" : "2018-09-26T00:47:32Z",
        "lastEditedBy" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "tags" : [
        ]
      }
    ],
    "commit" : "137cc9d284e3fbc8aa37082fe4ba04ab357a0a32",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +26,30 @@_EXPERIMENT_ID_ENV_VAR = \"MLFLOW_EXPERIMENT_ID\"\n_RUN_ID_ENV_VAR = \"MLFLOW_RUN_ID\"\n_active_run_stack = []\n_active_experiment_id = None\n"
  },
  {
    "id" : "312be004-a9da-47bd-a4df-8c50415cb464",
    "prId" : 547,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/547#pullrequestreview-158794741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8037f346-b780-4784-acac-419028dd0aaf",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Could we update the docstring to mention the new `nested` arg?",
        "createdAt" : "2018-09-25T05:24:01Z",
        "updatedAt" : "2018-09-26T00:47:32Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "41f39e0e-0d8b-4b15-9e5a-2bb4126741ce",
        "parentId" : "8037f346-b780-4784-acac-419028dd0aaf",
        "authorId" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "body" : "Yup, good catch.",
        "createdAt" : "2018-09-26T00:28:00Z",
        "updatedAt" : "2018-09-26T00:47:32Z",
        "lastEditedBy" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "tags" : [
        ]
      }
    ],
    "commit" : "137cc9d284e3fbc8aa37082fe4ba04ab357a0a32",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +63,67 @@\ndef start_run(run_uuid=None, experiment_id=None, source_name=None, source_version=None,\n              entry_point_name=None, source_type=None, run_name=None, nested=False):\n    \"\"\"\n    Start a new MLflow run, setting it as the active run under which metrics and parameters"
  },
  {
    "id" : "76498c30-72a6-42f7-b6c7-0c71bc04e662",
    "prId" : 462,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/462#pullrequestreview-156095888",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6d99c51-600b-4199-9580-50599c8a1e5e",
        "parentId" : null,
        "authorId" : "b2c1789f-eaaf-4ce0-9ad7-695c9467c3cc",
        "body" : "I wonder whether we should consider a version that takes experiment ID too. I guess it would be safest to call that something different to avoid confusion though, so we can do that later. I agree that set_experiment(name) will be more common.",
        "createdAt" : "2018-09-11T02:12:30Z",
        "updatedAt" : "2018-09-18T02:40:15Z",
        "lastEditedBy" : "b2c1789f-eaaf-4ce0-9ad7-695c9467c3cc",
        "tags" : [
        ]
      },
      {
        "id" : "ae5fe80d-e5e7-4c3a-9104-0ac83c4c5290",
        "parentId" : "b6d99c51-600b-4199-9580-50599c8a1e5e",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Do we want to call this method as `set_experiment_by_name` or `set_active_experiment_name`",
        "createdAt" : "2018-09-12T06:10:29Z",
        "updatedAt" : "2018-09-18T02:40:15Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "955b4d52-e6f4-491f-afec-559c6f3c2f5e",
        "parentId" : "b6d99c51-600b-4199-9580-50599c8a1e5e",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "I think `set_experiment` and `set_experiment_by_id` might be reasonable?",
        "createdAt" : "2018-09-17T19:54:27Z",
        "updatedAt" : "2018-09-18T02:40:15Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "29a3c273-01a7-4aa3-96ac-1e0e2d582b83",
        "parentId" : "b6d99c51-600b-4199-9580-50599c8a1e5e",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "+1 to @aarondav 's suggestions. If we think set experiment using name will be more commonly  used, let's optimize for that.",
        "createdAt" : "2018-09-17T20:06:25Z",
        "updatedAt" : "2018-09-18T02:40:15Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a416bcd50a357fbb5cbf4ac93af8f5190bce928",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +30,34 @@\n\ndef set_experiment(experiment_name):\n    \"\"\"\n    Set given experiment as active experiment. If experiment does not exist, create an experiment"
  },
  {
    "id" : "5ffc9548-1897-4033-b401-f04c2d02fce6",
    "prId" : 462,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/462#pullrequestreview-156501028",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f671a64-4b86-4d14-977f-b5ee83ad7003",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Can we use `eprint` (`from mlflow.utils.logging_utils import eprint`) to avoid overriding the user's stdout?",
        "createdAt" : "2018-09-17T23:49:36Z",
        "updatedAt" : "2018-09-18T02:40:15Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "dd68f60c-318e-4b02-be74-38fa5e1f6ba9",
        "parentId" : "7f671a64-4b86-4d14-977f-b5ee83ad7003",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "`eprint` goes to `stderr`. In this case, we want to log that we a new experiment is being created.",
        "createdAt" : "2018-09-18T00:27:08Z",
        "updatedAt" : "2018-09-18T02:40:15Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "aa54a258-eb26-4f20-84d8-f63e8596da9b",
        "parentId" : "7f671a64-4b86-4d14-977f-b5ee83ad7003",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "In general, it's nice of library code to use stderr (e.g., python `logging` does this). This is to help programs which use stdout for real output. In other words, stdout is typically used for \"real output\" and stderr is used for \"meta output\", such as logs. This use-case falls into the latter category.",
        "createdAt" : "2018-09-18T02:34:18Z",
        "updatedAt" : "2018-09-18T02:40:16Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "67bf0f98-89f8-423d-8d24-1d7b29b1955f",
        "parentId" : "7f671a64-4b86-4d14-977f-b5ee83ad7003",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Agreed. We shud move to using `logging` library. Lemme create a new issue to track that so we can use it for both `MlflowClient` and server side.",
        "createdAt" : "2018-09-18T18:12:32Z",
        "updatedAt" : "2018-09-18T18:12:32Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a416bcd50a357fbb5cbf4ac93af8f5190bce928",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +41,45 @@    exp_id = experiment.experiment_id if experiment else None\n    if not exp_id:\n        print(\"INFO: '{}' does not exist. Creating a new experiment\".format(experiment_name))\n        exp_id = client.create_experiment(experiment_name)\n    global _active_experiment_id"
  },
  {
    "id" : "0d6261a4-6eb2-4e38-a608-f729f912ef99",
    "prId" : 299,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/299#pullrequestreview-146942907",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "991209c4-051a-403a-89dd-a07d019ee680",
        "parentId" : null,
        "authorId" : "b2c1789f-eaaf-4ce0-9ad7-695c9467c3cc",
        "body" : "It would be great to add a doc comment to each module. I know some don't have them yet, but this makes the code easier to understand.",
        "createdAt" : "2018-08-16T17:21:38Z",
        "updatedAt" : "2018-08-17T01:34:24Z",
        "lastEditedBy" : "b2c1789f-eaaf-4ce0-9ad7-695c9467c3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c7575987b66727ee8e3cb5f75da4bfc748c2db3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3,7 @@MLflow run. This module is exposed to users at the top-level :py:mod:`mlflow` module.\n\"\"\"\n\nfrom __future__ import print_function\n"
  }
]