[
  {
    "id" : "3a49f1e3-e788-443e-84ae-26bd41990916",
    "prId" : 4577,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4577#pullrequestreview-712324717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "987c071d-42e7-4221-b69d-a29c3a7e8d1d",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Used `_union_lists` here to preserve the item order and make the outcome deterministic & predictable.",
        "createdAt" : "2021-07-22T02:38:48Z",
        "updatedAt" : "2021-07-22T03:42:53Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d3c5e15912c5f7d6e1795f2a55e6d2485d3e377",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +575,579 @@\n    merged_conda_deps = _union_lists(shap_conda_deps, model_conda_deps)\n    merged_pip_deps = _union_lists(shap_pip_deps, model_pip_deps)\n    return _mlflow_conda_env(\n        additional_conda_deps=merged_conda_deps,"
  },
  {
    "id" : "0ff6ad8f-d037-4154-a7db-61406eb4ccef",
    "prId" : 3989,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3989#pullrequestreview-581981719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e04eae10-206b-4182-8d90-f8f9acb4920a",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Can we add a test for `_load_pyfunc`?",
        "createdAt" : "2021-02-01T08:46:15Z",
        "updatedAt" : "2021-02-18T04:25:27Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "5fe82099-71ca-4c57-993c-2c72d6906a82",
        "parentId" : "e04eae10-206b-4182-8d90-f8f9acb4920a",
        "authorId" : "255bf6e4-e2a1-41dc-a4ae-88547d2fb09a",
        "body" : "Added test for _load_pyfunc",
        "createdAt" : "2021-02-03T03:48:22Z",
        "updatedAt" : "2021-02-18T04:25:27Z",
        "lastEditedBy" : "255bf6e4-e2a1-41dc-a4ae-88547d2fb09a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3acd78391af460d2719aa74eba865b61af3b69a6",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +86,90 @@\n\ndef _load_pyfunc(path):\n    \"\"\"\n    Load PyFunc implementation. Called by ``pyfunc.load_pyfunc``."
  },
  {
    "id" : "2514fcf5-8176-4c5d-b8f3-8d33dbf92451",
    "prId" : 3989,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3989#pullrequestreview-588776514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46a24d72-08ef-4311-ab76-414e1aab684b",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "In the docstring, can we mention that `serialize_model_using_mlflow` currently only supports `sklearn` and `pytorch` flavors?",
        "createdAt" : "2021-02-11T10:53:52Z",
        "updatedAt" : "2021-02-18T04:25:27Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "df9ced34-7cc3-4222-950f-e817679f7d63",
        "parentId" : "46a24d72-08ef-4311-ab76-414e1aab684b",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Looks like the current docstring doesn't contain a parameter description for `serialize_model_using_mlflow`. Can you add?",
        "createdAt" : "2021-02-11T10:56:24Z",
        "updatedAt" : "2021-02-18T04:25:27Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "13e5d19e-dbc7-44c3-a3bc-8f9cfd5f8714",
        "parentId" : "46a24d72-08ef-4311-ab76-414e1aab684b",
        "authorId" : "255bf6e4-e2a1-41dc-a4ae-88547d2fb09a",
        "body" : "Added docstring and mentioned only sklearn and pytorch are supported for this method or serialization",
        "createdAt" : "2021-02-11T16:55:31Z",
        "updatedAt" : "2021-02-18T04:25:27Z",
        "lastEditedBy" : "255bf6e4-e2a1-41dc-a4ae-88547d2fb09a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3acd78391af460d2719aa74eba865b61af3b69a6",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +341,345 @@    explainer,\n    path,\n    serialize_model_using_mlflow=True,\n    conda_env=None,\n    mlflow_model=None,"
  },
  {
    "id" : "db70a28a-fbf7-4635-8d7e-84b3939c9949",
    "prId" : 3989,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3989#pullrequestreview-588778169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dbacffb-cf77-49b9-aea6-df9594678292",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "```suggestion\r\n        set(shap_environment[\"channels\"] + model_environment[\"channels\"])\r\n        # remove the default conda channels if present since its added later in `_mlflow_conda_env`\r\n        - set([\"defaults\", \"conda-forge\"])\r\n```\r\n\r\nCan we insert the comment (that existed before) here to clarify why we exclude the defaults and conda-forge channels? Sorry if this is an invalid Python syntax.",
        "createdAt" : "2021-02-11T11:16:34Z",
        "updatedAt" : "2021-02-18T04:25:27Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "3be5daca-3dd7-476b-8fec-d0d632f336e1",
        "parentId" : "1dbacffb-cf77-49b9-aea6-df9594678292",
        "authorId" : "255bf6e4-e2a1-41dc-a4ae-88547d2fb09a",
        "body" : "added comment",
        "createdAt" : "2021-02-11T16:57:06Z",
        "updatedAt" : "2021-02-18T04:25:27Z",
        "lastEditedBy" : "255bf6e4-e2a1-41dc-a4ae-88547d2fb09a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3acd78391af460d2719aa74eba865b61af3b69a6",
    "line" : 354,
    "diffHunk" : "@@ -1,1 +510,514 @@    merged_conda_channels = list(\n        set(shap_environment[\"channels\"] + model_environment[\"channels\"])\n        - set([\"defaults\", \"conda-forge\"])\n    )\n"
  },
  {
    "id" : "a5c4e768-d6b1-48e7-8241-af3761297712",
    "prId" : 3513,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3513#pullrequestreview-508545039",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1bae842-78a8-48ef-a8cf-c94c4da89f5d",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "I'll add this example code as `mlflow/examples/shap/explain.py` in a follow-up PR.",
        "createdAt" : "2020-10-12T16:48:44Z",
        "updatedAt" : "2020-10-16T09:11:26Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "958ad06f-c30a-40f9-b00e-4d9c2cf02d3b",
        "parentId" : "b1bae842-78a8-48ef-a8cf-c94c4da89f5d",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "+1, could we also include a screenshot of the generated artifacts in the docs? I think you already figured out how to do this in https://github.com/harupy/mlflow/tree/shap-demo :)",
        "createdAt" : "2020-10-14T07:38:39Z",
        "updatedAt" : "2020-10-16T09:11:27Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "8043a131-7644-427c-b1ac-856ab8157e5d",
        "parentId" : "b1bae842-78a8-48ef-a8cf-c94c4da89f5d",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Got it :) I'll take a new sceenshot (because I have renamed the bar plot) and embed it in the docstring.",
        "createdAt" : "2020-10-14T16:52:43Z",
        "updatedAt" : "2020-10-16T09:11:27Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "d884c2cb297de25a97333a5a597c17a2ac90fae4",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +101,105 @@\n    .. code-block:: python\n        :caption: Example\n\n        import os"
  },
  {
    "id" : "1357eee0-eb9b-4379-95bb-b87d2f2093b9",
    "prId" : 3513,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3513#pullrequestreview-509228699",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "926005eb-6922-4fec-a72a-40e7efed5153",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "```\r\nprint(\"\\n#base_values\")\r\nprint(\"\\n#shap_values\")\r\n```\r\n\r\nThese lines in the example code cause sphinx to fail with:\r\n\r\n```\r\n/home/circleci/project/mlflow/shap.py:docstring of mlflow.shap.log_explanation:82: WARNING: Explicit markup ends without a blank line; unexpected unindent.\r\n```\r\n\r\nhttps://app.circleci.com/pipelines/github/mlflow/mlflow/1652/workflows/c94ca5f6-9715-4840-9a32-46be18f5ba20/jobs/1654\r\n\r\n\r\nUsing raw string (`r\"...\"`) can suppress the error.\r\n\r\n",
        "createdAt" : "2020-10-15T10:18:12Z",
        "updatedAt" : "2020-10-16T09:11:27Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "d884c2cb297de25a97333a5a597c17a2ac90fae4",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +46,50 @@@experimental\ndef log_explanation(predict_function, features, artifact_path=None):\n    r\"\"\"\n    Given a ``predict_function`` capable of computing ML model output on the provided ``features``,\n    computes and logs explanations of an ML model's output. Explanations are logged as a directory"
  }
]