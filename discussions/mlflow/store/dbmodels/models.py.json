[
  {
    "id" : "a1905518-58e5-4caf-9b78-b204706099ac",
    "prId" : 1167,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1167#pullrequestreview-230404889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fb78315-952b-4253-8f8c-5e7f823fe0d8",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "The main fix - also cast experiment ID to a string when deserializing it from the SQL DB.",
        "createdAt" : "2019-04-24T23:47:57Z",
        "updatedAt" : "2019-04-26T23:49:55Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "477a087d5e2b48ed98d5089d8d516a99680d57a1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +62,66 @@                    obj = RunStatus.from_string(obj)\n                elif k == \"experiment_id\":\n                    obj = str(obj)\n\n        # Our data model defines experiment_ids as ints, but the in-memory representation was"
  },
  {
    "id" : "30e7fc64-b841-4fa5-9c5a-641943fd1f17",
    "prId" : 1167,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1167#pullrequestreview-230444101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19695d5c-216f-4af4-89be-f205fa15fedd",
        "parentId" : null,
        "authorId" : "668ead22-45dd-4911-8926-af33e1dbaebc",
        "body" : "Are only runs created in sql alchemy? If an experiment is returned would it be deserialized with to_mlflow_entity()?",
        "createdAt" : "2019-04-25T04:05:35Z",
        "updatedAt" : "2019-04-26T23:49:55Z",
        "lastEditedBy" : "668ead22-45dd-4911-8926-af33e1dbaebc",
        "tags" : [
        ]
      },
      {
        "id" : "fae4a5b3-572f-40f0-a6ab-ac116c20df05",
        "parentId" : "19695d5c-216f-4af4-89be-f205fa15fedd",
        "authorId" : "668ead22-45dd-4911-8926-af33e1dbaebc",
        "body" : "nvm. The experiment_id cast was added for SqlExperiment below",
        "createdAt" : "2019-04-25T04:09:39Z",
        "updatedAt" : "2019-04-26T23:49:55Z",
        "lastEditedBy" : "668ead22-45dd-4911-8926-af33e1dbaebc",
        "tags" : [
        ]
      }
    ],
    "commit" : "477a087d5e2b48ed98d5089d8d516a99680d57a1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +61,65 @@                elif k == \"status\":\n                    obj = RunStatus.from_string(obj)\n                elif k == \"experiment_id\":\n                    obj = str(obj)\n"
  },
  {
    "id" : "e7eeed06-5fc0-4791-ac81-f382c4d33e79",
    "prId" : 1142,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1142#pullrequestreview-228814023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e754512-a165-49e5-bc70-f286892389d2",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Was the set return type wrong before?",
        "createdAt" : "2019-04-19T19:33:29Z",
        "updatedAt" : "2019-04-19T21:05:54Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "62e7ffae-7424-4541-8155-30de14fadbe0",
        "parentId" : "8e754512-a165-49e5-bc70-f286892389d2",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Good question, in Python 2 `dict.values()` is a list of `Metric` objects but in Python 3 `dict.values()` is an object of type `dict_values`, which supports iteration but not lookup by index. From the perspective of RunData there's no difference (because RunData only ever iterates over the `metrics` constructor argument), but having `dict_values` instead of a list in Python 3 broke one of my unit tests where I try to do an index lookup ([link](https://github.com/mlflow/mlflow/pull/1142/files/0d9e49878b1c422f363cbb042d5ba4c30818eb2b#diff-477cd83ba3c2576bc1540a7d61d60045R318)). Figured I'd just make the type consistent across Pythons.",
        "createdAt" : "2019-04-19T20:16:32Z",
        "updatedAt" : "2019-04-19T21:05:54Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "bae6bc5329156cc68c3406a8a67a26b190f46ed4",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +51,55 @@                                 existing_metric.value)):\n                            metrics[o.key] = Metric(o.key, o.value, o.timestamp, o.step)\n                    obj = list(metrics.values())\n                elif k == 'params':\n                    obj = [Param(o.key, o.value) for o in obj]"
  },
  {
    "id" : "949073b3-940e-46c8-9a77-557a945d3dd0",
    "prId" : 1142,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1142#pullrequestreview-228802899",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16113f13-9554-4d3d-9f3b-15fbe086fbd0",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "hypernit, but I think `>` is a tiny bit more logical, since if it's equal we don't need to do anything",
        "createdAt" : "2019-04-19T19:34:54Z",
        "updatedAt" : "2019-04-19T21:05:54Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bae6bc5329156cc68c3406a8a67a26b190f46ed4",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +47,51 @@                        existing_metric = metrics.get(o.key)\n                        if (existing_metric is None)\\\n                            or ((o.step, o.timestamp, o.value) >=\n                                (existing_metric.step, existing_metric.timestamp,\n                                 existing_metric.value)):"
  },
  {
    "id" : "c81d151d-ea8b-4f30-bba1-522499cdeb9f",
    "prId" : 1142,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1142#pullrequestreview-228804603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "479807b3-ef10-43fa-9cab-20821db0af30",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Do we have a test which confirms that we return the maximal metric which tests along the (step, timestamp, value) ordering?",
        "createdAt" : "2019-04-19T19:41:29Z",
        "updatedAt" : "2019-04-19T21:05:54Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bae6bc5329156cc68c3406a8a67a26b190f46ed4",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +50,54 @@                                (existing_metric.step, existing_metric.timestamp,\n                                 existing_metric.value)):\n                            metrics[o.key] = Metric(o.key, o.value, o.timestamp, o.step)\n                    obj = list(metrics.values())\n                elif k == 'params':"
  },
  {
    "id" : "caa92440-b29c-4b10-a769-8a1d03d9efa2",
    "prId" : 950,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/950#pullrequestreview-211402893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9df9e74-3151-4d38-a6db-92a5cc8ea2da",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "haha",
        "createdAt" : "2019-03-06T18:39:12Z",
        "updatedAt" : "2019-03-07T01:09:36Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "48b89a1e57e719f5e9a8c164be6892ba07b1b58f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +141,145 @@    key = Column(String(250))\n    value = Column(Float, nullable=False)\n    timestamp = Column(BigInteger, default=lambda: int(time.time()))\n    run_uuid = Column(String(32), ForeignKey('runs.run_uuid'))\n    run = relationship('SqlRun', backref=backref('metrics', cascade='all'))"
  },
  {
    "id" : "5769777c-344e-41ef-8cfe-1263c7eee67c",
    "prId" : 860,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/860#pullrequestreview-199181506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f526e399-0c37-4929-a265-ae46ca7c33b8",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "I wonder how we are going to do schema migrations in the future...",
        "createdAt" : "2019-02-01T16:09:38Z",
        "updatedAt" : "2019-02-04T07:17:12Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "83ae044b-0926-4c0e-a516-dc5158b29cba",
        "parentId" : "f526e399-0c37-4929-a265-ae46ca7c33b8",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "There are a few options for that. The following 2 are widely used with SqlAlchemy.\r\n\r\n- [SQLAlchemy Migrate](https://sqlalchemy-migrate.readthedocs.io/en/latest/)\r\n- [Alembic](https://pypi.org/project/alembic/)\r\n",
        "createdAt" : "2019-02-01T17:24:52Z",
        "updatedAt" : "2019-02-04T07:17:12Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb3cf583131d805f4d5cf86122b01c099393d4c4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +98,102 @@    source_version = Column(String(50))\n    lifecycle_stage = Column(String(20), default=LifecycleStage.ACTIVE)\n    artifact_uri = Column(String(200), default=None)\n    experiment_id = Column(Integer, ForeignKey('experiments.experiment_id'))\n    experiment = relationship('SqlExperiment', backref=backref('runs', cascade='all'))"
  },
  {
    "id" : "ee627e6f-bc88-406e-bfbd-60021a67eb50",
    "prId" : 756,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/756#pullrequestreview-187235051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7d5ee64-84c6-4e05-b0bd-8d711ec82853",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "I recommend moving the `Run` mapper class up here for better flow and readability",
        "createdAt" : "2018-12-21T06:52:00Z",
        "updatedAt" : "2018-12-27T09:17:46Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec345999d4f624725541bc341300b529c32b480c",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +80,84 @@    def to_mlflow_entity(self):\n        return _create_entity(Experiment, self)\n\n\nclass SqlRun(Base):"
  },
  {
    "id" : "18bf6630-3795-4370-a0eb-c7e4f0c982e3",
    "prId" : 756,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/756#pullrequestreview-187235051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cb396c7-dc53-49d1-92b4-621d7f69cb73",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "add\r\n```\r\nPrimaryKeyConstraint('run_uuid', 'key', 'timestamp', name='metric_pk') \r\n```",
        "createdAt" : "2018-12-21T06:54:51Z",
        "updatedAt" : "2018-12-27T09:17:47Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec345999d4f624725541bc341300b529c32b480c",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +145,149 @@        PrimaryKeyConstraint('key', 'timestamp', 'run_uuid', name='metric_pk'),\n    )\n\n    def __repr__(self):\n        return '<SqlMetric({}, {})>'.format(self.key, self.value)"
  }
]