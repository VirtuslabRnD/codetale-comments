[
  {
    "id" : "0a6b01f9-a981-4d77-b811-659f4f664ce0",
    "prId" : 1444,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1444#pullrequestreview-249605746",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfb41168-1421-4427-8d30-188efe6fe0bb",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "`items` -> `raw_list` or something like that. Items suggests a list of KV tuples like `items()` method on dictionaries.",
        "createdAt" : "2019-06-13T18:49:32Z",
        "updatedAt" : "2019-06-19T18:36:26Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "5e93f276-0e50-4871-927a-609219c87702",
        "parentId" : "bfb41168-1421-4427-8d30-188efe6fe0bb",
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "hm... but `items` here could actually be any iterable, not just a list. and `items` would refer to the items in any such iterable. not sure if there is a better term for it?",
        "createdAt" : "2019-06-13T21:07:42Z",
        "updatedAt" : "2019-06-19T18:36:26Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "20603bfd5c07494b822aca9c760ee5807d7bdc38",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +7,11 @@class PagedList(list):\n\n    def __init__(self, items, token):\n        super(PagedList, self).__init__(items)\n        self.token = token"
  },
  {
    "id" : "c83dca91-796c-4617-a5ba-8b5746200891",
    "prId" : 1444,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1444#pullrequestreview-251860495",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80c40e89-3cb0-4a7a-b20e-dacd77c4d010",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "@mparkhe is `None` an okay default value for the page token (based on how you plan to implement validation/handling of this argument in the server)?",
        "createdAt" : "2019-06-18T22:52:56Z",
        "updatedAt" : "2019-06-19T18:36:26Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "2f7b1db7-fc2c-4aa3-b390-6132b96f2e11",
        "parentId" : "80c40e89-3cb0-4a7a-b20e-dacd77c4d010",
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "Actually looks like proto won't send the field if it's `None` so should be fine",
        "createdAt" : "2019-06-18T23:06:10Z",
        "updatedAt" : "2019-06-19T18:36:26Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "3aaf9178-8d6c-452c-919d-9ad0d841acd7",
        "parentId" : "80c40e89-3cb0-4a7a-b20e-dacd77c4d010",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "üëç \r\n",
        "createdAt" : "2019-06-19T17:40:51Z",
        "updatedAt" : "2019-06-19T18:36:26Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "20603bfd5c07494b822aca9c760ee5807d7bdc38",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +204,208 @@\n    def search_runs(self, experiment_ids, filter_string, run_view_type,\n                    max_results=SEARCH_MAX_RESULTS_DEFAULT, order_by=None, page_token=None):\n        \"\"\"\n        Return runs that match the given list of search expressions within the experiments."
  },
  {
    "id" : "f554931a-4aa2-4a64-a899-41829bb0af0e",
    "prId" : 1444,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1444#pullrequestreview-251860495",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e31d3db8-fb57-4603-a13f-cbeefcfdc3c7",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "I like that name!",
        "createdAt" : "2019-06-19T17:40:30Z",
        "updatedAt" : "2019-06-19T18:36:26Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "20603bfd5c07494b822aca9c760ee5807d7bdc38",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +5,9 @@\n\nclass PagedList(list):\n\n    def __init__(self, items, token):"
  },
  {
    "id" : "ae5a23da-db0b-4e13-81fd-12224f610d2d",
    "prId" : 950,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/950#pullrequestreview-212044641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b67094d-5ea8-476a-8555-427069d17230",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "This return part does not look correct...",
        "createdAt" : "2019-03-07T22:01:31Z",
        "updatedAt" : "2019-03-07T22:01:31Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "48b89a1e57e719f5e9a8c164be6892ba07b1b58f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +220,224 @@        :param params: List of :py:class:`mlflow.entities.Param` instances to log\n        :param tags: List of :py:class:`mlflow.entities.RunTag` instances to log\n        :returns Tuple (failed_metrics, failed_params, failed_tags) where each element of\n                 the tuple is a list of of :py:class:`mlflow.protos.service_pb2.BatchLogFailure`\n                 protos describing metrics/params/tags that failed to be logged & why."
  },
  {
    "id" : "8625d3ff-e327-4e0e-8c4f-57d423cfc01a",
    "prId" : 889,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/889#pullrequestreview-203510788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95706790-f837-4f4e-847f-f8bb1e145a4d",
        "parentId" : null,
        "authorId" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "body" : "Extra credit: is it possible to put some sphinx markup here so it links to the docs for the Experiment object?",
        "createdAt" : "2019-02-13T00:59:30Z",
        "updatedAt" : "2019-02-13T22:00:33Z",
        "lastEditedBy" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "tags" : [
        ]
      },
      {
        "id" : "4bc96a3a-1aaf-4dfc-9c9a-8638d7d01b57",
        "parentId" : "95706790-f837-4f4e-847f-f8bb1e145a4d",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Not sure. Lemme explore that asynchronously...",
        "createdAt" : "2019-02-13T22:01:36Z",
        "updatedAt" : "2019-02-13T22:01:36Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "805675dc-3b87-4ef9-a1bc-ef9b2492b2b9",
        "parentId" : "95706790-f837-4f4e-847f-f8bb1e145a4d",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Yes! :ref:`Experiment <fully_qualified_module_name_here>`.",
        "createdAt" : "2019-02-13T23:57:33Z",
        "updatedAt" : "2019-02-13T23:58:13Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a749e285d430b7d0df1d352ef7bad5e35cd18c1",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +57,61 @@\n        :param experiment_name: Name of experiment\n        :return: A single Experiment object if it exists, otherwise raises an Exception.\n        \"\"\"\n"
  },
  {
    "id" : "0307c1a1-ee9a-475b-8f8e-1c75b53a7b0d",
    "prId" : 889,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/889#pullrequestreview-203444350",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7af382c4-7b6f-4146-a172-84738a7b42f1",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "The FileStore and RestStore implementations of this method do not throw an exception in the case that the experiment is not found; they return `None`.",
        "createdAt" : "2019-02-13T19:20:34Z",
        "updatedAt" : "2019-02-13T22:00:33Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "988b4b20-787b-4404-aef3-5dd6802ad1d8",
        "parentId" : "7af382c4-7b6f-4146-a172-84738a7b42f1",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Good catch! Thanks..",
        "createdAt" : "2019-02-13T21:00:14Z",
        "updatedAt" : "2019-02-13T22:00:33Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a749e285d430b7d0df1d352ef7bad5e35cd18c1",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +54,58 @@        \"\"\"\n        Fetches the experiment by name from the backend store.\n        Throws an exception if experiment is not found or permanently deleted.\n\n        :param experiment_name: Name of experiment"
  },
  {
    "id" : "53feca3b-0518-4184-9550-1ca75cae09b4",
    "prId" : 889,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/889#pullrequestreview-203444915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24abf854-054d-48ff-baa9-4e6ada9ec222",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "It looks like all three implementations of this method invoke `list_experiments()` and match against the provided experiment name. That seems to suggest that we can provide an implementation of the method in the base class. If this implementation is not performant enough for a given use case, the implementor can always override the method.\r\n\r\nI noticed that the `file_store` implementation makes an additional call to `_check_root_dir` prior to calling `list_experiments`. However, `list_experiments` immediately calls `_check_root_dir`, so this call seems to be superfluous: all three implementations seem to share the same structure.",
        "createdAt" : "2019-02-13T19:26:47Z",
        "updatedAt" : "2019-02-13T22:00:33Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "823897f0-919f-4643-9420-e233e76b1872",
        "parentId" : "24abf854-054d-48ff-baa9-4e6ada9ec222",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Like your idea of base implementation or adding specific implementations for each. \r\n\r\nWill take care of this in a follow on change since this is a PR for `--experiment-name` change (which needed this `get_experiment_by_name` method for completeness)",
        "createdAt" : "2019-02-13T21:01:37Z",
        "updatedAt" : "2019-02-13T22:00:33Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a749e285d430b7d0df1d352ef7bad5e35cd18c1",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +51,55 @@\n    @abstractmethod\n    def get_experiment_by_name(self, experiment_name):\n        \"\"\"\n        Fetches the experiment by name from the backend store."
  }
]