[
  {
    "id" : "40b045a2-5608-4c2c-a5ce-cd13e9f070b2",
    "prId" : 3033,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3033#pullrequestreview-441273536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6283fd90-2153-432b-846f-82ac186f130f",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "can we do both `CREATE TABLE` migrations for model version tag and registered models tag in the same migration script rather than creating two?",
        "createdAt" : "2020-07-01T23:31:32Z",
        "updatedAt" : "2020-07-08T17:36:21Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "29d7c7c5-ac32-49ca-a173-bda9836773af",
        "parentId" : "6283fd90-2153-432b-846f-82ac186f130f",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "I like the idea of using two separate migrations. If a unified migration fails half way, we're left with a phantom table that's unaccounted for by the migration script.",
        "createdAt" : "2020-07-02T00:23:22Z",
        "updatedAt" : "2020-07-08T17:36:21Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f05dc4f9c611dd13d41863d27afc8c8cd9acd038",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +20,24 @@\ndef upgrade():\n    op.create_table(SqlModelVersionTag.__tablename__,\n                    sa.Column('key', sa.String(length=250), primary_key=True, nullable=False),\n                    sa.Column('value', sa.String(length=5000)),"
  },
  {
    "id" : "5111f36a-c6ad-41c6-986b-79d6a673da80",
    "prId" : 3033,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3033#pullrequestreview-445062220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56fb91bc-dc64-4675-876a-2271a05a7789",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@zhidongqu-db I think we're missing the backref on the `SqlModelVersion` table that we're defining in the `models.py` file, right?:\r\n\r\n```\r\n    model_version = relationship('SqlModelVersion', foreign_keys=[name, version],\r\n                                 backref=backref('model_version_tags',\r\n                                                 cascade='all'))\r\n```",
        "createdAt" : "2020-07-08T19:08:48Z",
        "updatedAt" : "2020-07-08T19:08:49Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "b92753c5-1665-479f-ade0-e0cb7fd212f8",
        "parentId" : "56fb91bc-dc64-4675-876a-2271a05a7789",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Not an issue (see https://stackoverflow.com/questions/28108500/alembic-create-relationship-in-revision-file)",
        "createdAt" : "2020-07-08T19:22:08Z",
        "updatedAt" : "2020-07-08T19:22:09Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f05dc4f9c611dd13d41863d27afc8c8cd9acd038",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@                    sa.Column('name', sa.String(length=256), primary_key=True, nullable=False),\n                    sa.Column('version', sa.Integer(), primary_key=True, nullable=False),\n                    sa.ForeignKeyConstraint(\n                        ('name', 'version'),\n                        ('model_versions.name', 'model_versions.version'),"
  }
]