[
  {
    "id" : "f53ae910-961e-4387-82da-b6d29413e245",
    "prId" : 4352,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4352#pullrequestreview-658378175",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3935baab-c015-4b8d-a6fb-484626faf6e1",
        "parentId" : null,
        "authorId" : "7adb9f66-55bd-4cf1-8aa6-20adcdd98535",
        "body" : "when checking if mlflow should create the default experiment, \r\nit should take ALL experiments into account , not just Active experiments, as per default behaviour of `list_experiments` function\r\n\r\nEdit: typo",
        "createdAt" : "2021-05-12T21:00:22Z",
        "updatedAt" : "2021-05-12T21:00:36Z",
        "lastEditedBy" : "7adb9f66-55bd-4cf1-8aa6-20adcdd98535",
        "tags" : [
        ]
      }
    ],
    "commit" : "57d3f44cc70936d56c03743fe4302d3f78d75e01",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +126,130 @@            mkdir(local_file_uri_to_path(default_artifact_root))\n\n        if len(self.list_experiments(view_type=ViewType.ALL)) == 0:\n            with self.ManagedSessionMaker() as session:\n                self._create_default_experiment(session)"
  },
  {
    "id" : "2a53631d-305e-48e4-bdcd-5552060c25cf",
    "prId" : 4238,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/4238#pullrequestreview-639405246",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "826e55c9-e220-4196-b5c2-a280b3e48d2b",
        "parentId" : null,
        "authorId" : "ae7dd827-9f9e-4fb6-b1ba-d051793e929e",
        "body" : "Please add a comment above to indicate something like this:\r\n\"Ideally the use of \"IS\" is preferred here but owing to sqlalchemy translation in MSSQL we are forced to use \"=\" instead. These 2 options are functionally identical / unchanged because the column (is_nan) is not nullable. However it could become an issue if this precondition changes in the future.\"",
        "createdAt" : "2021-04-20T00:43:42Z",
        "updatedAt" : "2021-04-30T07:13:37Z",
        "lastEditedBy" : "ae7dd827-9f9e-4fb6-b1ba-d051793e929e",
        "tags" : [
        ]
      }
    ],
    "commit" : "308069c83def5693a4f328342dcd4833bab01267",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +890,894 @@                            # the column (is_nan) is not nullable. However it could become an issue\n                            # if this precondition changes in the future.\n                            (subquery.c.is_nan == sqlalchemy.true(), 1),\n                            (order_value.is_(None), 1),\n                        ],"
  },
  {
    "id" : "6e8477b1-af66-4a62-afb2-91476428b969",
    "prId" : 3881,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3881#pullrequestreview-673728214",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c660845-973f-4e5a-ba6d-1483f4f12778",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Do we need to sort experiments here (note there is NO experiment `creation_time` in OSS MLflow)?",
        "createdAt" : "2021-05-31T23:59:01Z",
        "updatedAt" : "2021-06-02T02:11:48Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "d3bbb133-cdf8-4f3f-86ab-06aa09cf6a0b",
        "parentId" : "9c660845-973f-4e5a-ba6d-1483f4f12778",
        "authorId" : "3af1be9f-200b-4cd7-890a-c1d7b82e114a",
        "body" : "Thanks for making all of these changes @harupy. I don't see any guarantee currently about experiments being sorted, so I don't think that's a requirement for this feature. It might be a useful follow-up item though.",
        "createdAt" : "2021-06-01T17:42:32Z",
        "updatedAt" : "2021-06-01T17:42:32Z",
        "lastEditedBy" : "3af1be9f-200b-4cd7-890a-c1d7b82e114a",
        "tags" : [
        ]
      },
      {
        "id" : "f23307c8-7d11-4ff1-8b84-8d0702ff5543",
        "parentId" : "9c660845-973f-4e5a-ba6d-1483f4f12778",
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Agree that this is a useful follow-up item. We might want to sort experiments by `experiment_id` in decsending order so newer experiments are fetched early.",
        "createdAt" : "2021-06-02T02:18:06Z",
        "updatedAt" : "2021-06-02T02:45:26Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cc91e43665ef8cbbc0134124d1b4db4f75958fe",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +279,283 @@                    .offset(offset)\n                    .limit(max_results_for_query)\n                    .all()\n                )\n            else:"
  },
  {
    "id" : "25ce5322-1a23-4445-a320-b77e6d59799b",
    "prId" : 2265,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2265#pullrequestreview-352162971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d6b0201-5e67-4a02-8d86-67f23fbebf1b",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Can we add documentation here explaining what this method is used for (e.g., it is used to enable the `mlflow gc` garbage collection tool and is not a public API).",
        "createdAt" : "2020-01-30T01:35:23Z",
        "updatedAt" : "2020-02-27T10:30:54Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "e0c9d544-969b-453f-849e-d9eeb824f6c4",
        "parentId" : "2d6b0201-5e67-4a02-8d86-67f23fbebf1b",
        "authorId" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "body" : "Done",
        "createdAt" : "2020-02-03T10:44:38Z",
        "updatedAt" : "2020-02-27T10:30:54Z",
        "lastEditedBy" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f64dce55669a2ceab4997380139d12713537de9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +440,444 @@            self._save_to_db(objs=run, session=session)\n\n    def _hard_delete_run(self, run_id):\n        \"\"\"\n        Permanently delete a run (metadata and metrics, tags, parameters)."
  },
  {
    "id" : "fbb6ef5a-f421-4278-9cb2-f7e42d41a352",
    "prId" : 2265,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2265#pullrequestreview-354134951",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fec2b8fa-b5e7-49b1-84ef-3dc0f680125d",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Based on my comment above, I think we can remove this method and rely on the Search API instead.",
        "createdAt" : "2020-01-30T01:35:45Z",
        "updatedAt" : "2020-02-27T10:30:54Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "47e414bc-06c2-47ed-ba55-d17be5c68fd8",
        "parentId" : "fec2b8fa-b5e7-49b1-84ef-3dc0f680125d",
        "authorId" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "body" : "See my answer to the first comment about this.",
        "createdAt" : "2020-02-03T10:10:12Z",
        "updatedAt" : "2020-02-27T10:30:54Z",
        "lastEditedBy" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "tags" : [
        ]
      },
      {
        "id" : "938ef39e-4084-4e25-b2a5-94931a052a36",
        "parentId" : "fec2b8fa-b5e7-49b1-84ef-3dc0f680125d",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@t-henri That makes sense. This approach is also more efficient for the SqlAlchemyStore than `search()` because it only fetches run IDs.",
        "createdAt" : "2020-02-06T00:31:25Z",
        "updatedAt" : "2020-02-27T10:30:54Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f64dce55669a2ceab4997380139d12713537de9",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +449,453 @@            session.delete(run)\n\n    def _get_deleted_runs(self):\n        with self.ManagedSessionMaker() as session:\n            run_ids = session\\"
  },
  {
    "id" : "effe2f6a-34d4-492f-acac-dbc28efebd57",
    "prId" : 2265,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2265#pullrequestreview-356004412",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "181a2fe3-216e-424e-933f-f2b527411619",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "The output of this function is a list of `sqlalchemy.util._collections.result` objects, rather than a list of strings (as is the case for the FileStore). As a result, attempting to run `mlflow gc` against a sqlite database causes a failure when an object of type `sqlalchemy.util._collections.result` is fed into `backend_store.get_run()`:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/czumar/anaconda2/bin/mlflow\", line 11, in <module>\r\n    load_entry_point('mlflow', 'console_scripts', 'mlflow')()\r\n  File \"/Users/czumar/anaconda2/lib/python2.7/site-packages/click/core.py\", line 764, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/Users/czumar/anaconda2/lib/python2.7/site-packages/click/core.py\", line 717, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/Users/czumar/anaconda2/lib/python2.7/site-packages/click/core.py\", line 1137, in invoke\r\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\r\n  File \"/Users/czumar/anaconda2/lib/python2.7/site-packages/click/core.py\", line 956, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"/Users/czumar/anaconda2/lib/python2.7/site-packages/click/core.py\", line 555, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"/Users/czumar/mlflow/mlflow/cli.py\", line 312, in gc\r\n    run = backend_store.get_run(run_id)\r\n  File \"/Users/czumar/mlflow/mlflow/store/tracking/sqlalchemy_store.py\", line 416, in get_run\r\n    return run.to_mlflow_entity()\r\n  File \"/Users/czumar/anaconda2/lib/python2.7/contextlib.py\", line 35, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/Users/czumar/mlflow/mlflow/store/db/utils.py\", line 80, in make_managed_session\r\n    raise MlflowException(message=e, error_code=INTERNAL_ERROR)\r\nmlflow.exceptions.MlflowException: (sqlite3.InterfaceError) Error binding parameter 0 - probably unsupported type.\r\n[SQL: SELECT runs.run_uuid AS runs_run_uuid, runs.name AS runs_name, runs.source_type AS runs_source_type, runs.source_name AS runs_source_name, runs.entry_point_name AS runs_entry_point_name, runs.user_id AS runs_user_id, runs.status AS runs_status, runs.start_time AS runs_start_time, runs.end_time AS runs_end_time, runs.source_version AS runs_source_version, runs.lifecycle_stage AS runs_lifecycle_stage, runs.artifact_uri AS runs_artifact_uri, runs.experiment_id AS runs_experiment_id\r\nFROM runs\r\nWHERE runs.run_uuid = ?]\r\n[parameters: ((u'3ba20fb8ece546b1a0b734e8924e20b5',),)]\r\n```\r\n\r\nCan we make sure that this method returns a list of strings instead? Additionally, can we add end-to-end tests for the `mlflow gc` command against both the file store and the sql store to ensure that the command succeeds against both tracking stores?",
        "createdAt" : "2020-02-09T07:22:42Z",
        "updatedAt" : "2020-02-27T10:30:54Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "a71f815e-b140-4b72-8c3e-f61242626d5d",
        "parentId" : "181a2fe3-216e-424e-933f-f2b527411619",
        "authorId" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "body" : "Done",
        "createdAt" : "2020-02-10T15:00:29Z",
        "updatedAt" : "2020-02-27T10:30:54Z",
        "lastEditedBy" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f64dce55669a2ceab4997380139d12713537de9",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +454,458 @@                .query(SqlRun.run_uuid) \\\n                .filter(SqlRun.lifecycle_stage == LifecycleStage.DELETED) \\\n                .all()\n            return [run_id[0] for run_id in run_ids]\n"
  },
  {
    "id" : "0c0fc795-f9bc-49b7-8729-540e87c27b51",
    "prId" : 2217,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2217#pullrequestreview-338105680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db808bca-f9c0-480d-89df-28882d570677",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Can these two cases share `getattr(SqlRun, attribute_name)`. \r\nAlso add a constant like `CASE_INSENSITIVE_STRING_COMPARISON_OPERATORS` inside `SearchUtils` as `set(['LIKE', 'ILIKE'])` and use that everywhere.",
        "createdAt" : "2020-01-03T09:47:51Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "ddba2068-13df-4076-a92a-6ef375031f67",
        "parentId" : "db808bca-f9c0-480d-89df-28882d570677",
        "authorId" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "body" : "Done",
        "createdAt" : "2020-01-03T14:33:25Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "tags" : [
        ]
      }
    ],
    "commit" : "01cd1998f2c16a40f5fd8c0698a766a9ec2623df",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +662,666 @@                clauses.append(op(value))\n            elif comparator in SearchUtils.filter_ops:\n                op = SearchUtils.filter_ops.get(comparator)\n                clauses.append(op(attribute, value))\n    return clauses"
  },
  {
    "id" : "bf463e92-02a4-43da-94f4-48936b80e369",
    "prId" : 2217,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2217#pullrequestreview-356888765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc92f44e-aebc-4b02-a0b8-66a2835540df",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Can we add documentation on LIKE and ILIKE, for [this page](https://mlflow.org/docs/latest/search-syntax.html#id9)? We should also either clarify that LIKE may also be case-insensitive depending on the circumstance (e.g., sqlite is case-insensitive) or somehow make it always case-sensitive (seems preferable if possible).",
        "createdAt" : "2020-02-07T02:16:43Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "acc4198d-dcaa-400e-bc41-f7d52e991189",
        "parentId" : "cc92f44e-aebc-4b02-a0b8-66a2835540df",
        "authorId" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "body" : "Sure, I'll add documentation when I update my PR after a new release of sqlparse (the pr is kind of blocked waiting for that)",
        "createdAt" : "2020-02-10T15:40:25Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "c6add3bb-6a2b-406f-b5c9-316ac09544af",
        "tags" : [
        ]
      },
      {
        "id" : "47240cc1-3b31-46e7-9718-82cd9df8a2d7",
        "parentId" : "cc92f44e-aebc-4b02-a0b8-66a2835540df",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "The author of that repo said there should be a new release by the end of the month. Since this is not super urgent, I guess we can wait for that.",
        "createdAt" : "2020-02-11T18:24:48Z",
        "updatedAt" : "2020-03-27T09:07:22Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "01cd1998f2c16a40f5fd8c0698a766a9ec2623df",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +658,662 @@            # by the call to parse_search_filter\n            attribute = getattr(SqlRun, SqlRun.get_attribute_name(key_name))\n            if comparator in SearchUtils.CASE_INSENSITIVE_STRING_COMPARISON_OPERATORS:\n                op = SearchUtils.get_sql_filter_ops(attribute, comparator)\n                clauses.append(op(value))"
  },
  {
    "id" : "6bd63d02-4fcd-46b3-bb1e-e8ae5fb2f105",
    "prId" : 2195,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2195#pullrequestreview-332045587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b0ace29-74e6-42ce-a16b-f0b5fd27b173",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Could you add a comment on why `sorted_joins` for order by columns needs `OUTER JOIN` semantics. Also, will this automatically push the runs that are missing keys in order by columns to the end in sorting order. They should be last regardless of whether order by is `ASC` or `DESC` to match the previous behavior prior to sql filter push downs in #2059 \r\n\r\ncc: @dbczumar ",
        "createdAt" : "2019-12-12T22:32:45Z",
        "updatedAt" : "2019-12-13T12:03:39Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "982aeb6c-e822-4a98-b7e4-1b18b223aa9f",
        "parentId" : "0b0ace29-74e6-42ce-a16b-f0b5fd27b173",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@rom1504 Can you add a test case confirming that, when ordering by a key, runs without the key are displayed last for both ascending and descending orderings?\r\n\r\n@mparkhe I manually confirmed that runs with missing keys in order by columns are returned last in `search_runs()` results. I ran the following logging code:\r\n\r\n```\r\nimport mlflow\r\nmlflow.set_tracking_uri(\"sqlite:///dbtest\")\r\n\r\nfor i in range(5):\r\n    with mlflow.start_run():\r\n        mlflow.log_params({\r\n            \"param\": str(i)\r\n        })\r\n        if i % 2 == 0:\r\n            mlflow.log_metrics({\r\n                \"metric\": i\r\n            })\r\n```\r\n\r\nThen, I performed a search ordered by `metrics.metric asc`:\r\n```\r\nfrom mlflow.tracking.client import MlflowClient\r\nclient = MlflowClient()\r\nasc_results = client.search_runs(experiment_ids=0, order_by=[\"metrics.metric asc\"])\r\nprint([result.data for result in asc_results])\r\n```\r\n\r\nThis produced the following output, confirming that runs for which `metrics.metric` is absent are displayed last:\r\n```\r\n[<RunData: metrics={u'metric': 0.0}, params={u'param': u'0'}, tags={u'mlflow.source.git.commit': u'37f66b28a00e3f75791edb92956d88628f12b5e6',\r\n u'mlflow.source.name': u'log.py',\r\n u'mlflow.source.type': u'LOCAL',\r\n u'mlflow.user': u'czumar'}>, <RunData: metrics={u'metric': 2.0}, params={u'param': u'2'}, tags={u'mlflow.source.git.commit': u'37f66b28a00e3f75791edb92956d88628f12b5e6',\r\n u'mlflow.source.name': u'log.py',\r\n u'mlflow.source.type': u'LOCAL',\r\n u'mlflow.user': u'czumar'}>, <RunData: metrics={u'metric': 4.0}, params={u'param': u'4'}, tags={u'mlflow.source.git.commit': u'37f66b28a00e3f75791edb92956d88628f12b5e6',\r\n u'mlflow.source.name': u'log.py',\r\n u'mlflow.source.type': u'LOCAL',\r\n u'mlflow.user': u'czumar'}>, <RunData: metrics={}, params={u'param': u'3'}, tags={u'mlflow.source.git.commit': u'37f66b28a00e3f75791edb92956d88628f12b5e6',\r\n u'mlflow.source.name': u'log.py',\r\n u'mlflow.source.type': u'LOCAL',\r\n u'mlflow.user': u'czumar'}>, <RunData: metrics={}, params={u'param': u'1'}, tags={u'mlflow.source.git.commit': u'37f66b28a00e3f75791edb92956d88628f12b5e6',\r\n u'mlflow.source.name': u'log.py',\r\n u'mlflow.source.type': u'LOCAL',\r\n u'mlflow.user': u'czumar'}>]\r\n```\r\n\r\nSimilarly, I then performed a search ordered by `metrics.metric desc`:\r\n```\r\nfrom mlflow.tracking.client import MlflowClient\r\nclient = MlflowClient()\r\nasc_results = client.search_runs(experiment_ids=0, order_by=[\"metrics.metric asc\"])\r\nprint([result.data for result in asc_results])\r\n```\r\n\r\nThis produced the following result (runs that don't define `metrics.metric` are displayed last):\r\n```\r\n[<RunData: metrics={u'metric': 4.0}, params={u'param': u'4'}, tags={u'mlflow.source.git.commit': u'37f66b28a00e3f75791edb92956d88628f12b5e6',\r\n u'mlflow.source.name': u'log.py',\r\n u'mlflow.source.type': u'LOCAL',\r\n u'mlflow.user': u'czumar'}>, <RunData: metrics={u'metric': 2.0}, params={u'param': u'2'}, tags={u'mlflow.source.git.commit': u'37f66b28a00e3f75791edb92956d88628f12b5e6',\r\n u'mlflow.source.name': u'log.py',\r\n u'mlflow.source.type': u'LOCAL',\r\n u'mlflow.user': u'czumar'}>, <RunData: metrics={u'metric': 0.0}, params={u'param': u'0'}, tags={u'mlflow.source.git.commit': u'37f66b28a00e3f75791edb92956d88628f12b5e6',\r\n u'mlflow.source.name': u'log.py',\r\n u'mlflow.source.type': u'LOCAL',\r\n u'mlflow.user': u'czumar'}>, <RunData: metrics={}, params={u'param': u'3'}, tags={u'mlflow.source.git.commit': u'37f66b28a00e3f75791edb92956d88628f12b5e6',\r\n u'mlflow.source.name': u'log.py',\r\n u'mlflow.source.type': u'LOCAL',\r\n u'mlflow.user': u'czumar'}>, <RunData: metrics={}, params={u'param': u'1'}, tags={u'mlflow.source.git.commit': u'37f66b28a00e3f75791edb92956d88628f12b5e6',\r\n u'mlflow.source.name': u'log.py',\r\n u'mlflow.source.type': u'LOCAL',\r\n u'mlflow.user': u'czumar'}>]\r\n```",
        "createdAt" : "2019-12-13T07:31:05Z",
        "updatedAt" : "2019-12-13T12:03:39Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "8fcba196-ef77-47d9-8dc2-1d5df1ff7944",
        "parentId" : "0b0ace29-74e6-42ce-a16b-f0b5fd27b173",
        "authorId" : "9d94631e-2789-4f95-a800-0b006f2e51da",
        "body" : "That's a good point to add a test case for this !\r\nI added a test case in an existing test for this (with a comment explaining what is the expected order when sorting)",
        "createdAt" : "2019-12-13T09:28:31Z",
        "updatedAt" : "2019-12-13T12:03:39Z",
        "lastEditedBy" : "9d94631e-2789-4f95-a800-0b006f2e51da",
        "tags" : [
        ]
      },
      {
        "id" : "4264ed70-501e-4571-8528-fe65c57a41ee",
        "parentId" : "0b0ace29-74e6-42ce-a16b-f0b5fd27b173",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Thanks @dbczumar and @rom1504 ",
        "createdAt" : "2019-12-13T18:39:15Z",
        "updatedAt" : "2019-12-13T18:39:15Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "98a8a0fea5f895143af0e668cd4ac86d01549b4f",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +609,613 @@            # on a column (tag, metric or param) without removing the lines that\n            # do not have a value for this column (which is what inner join would do)\n            for j in sorting_joins:\n                query = query.outerjoin(j)\n"
  }
]