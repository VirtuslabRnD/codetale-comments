[
  {
    "id" : "f7cff82d-5247-4eb9-a8a5-2b0adcd4fc55",
    "prId" : 1171,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1171#pullrequestreview-233699471",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b22aa59-2b23-4fdd-a193-561ed01a16f5",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "so was this always wrong for windows because `self.get_path_module()` was `posixpath` ?",
        "createdAt" : "2019-05-03T21:03:24Z",
        "updatedAt" : "2019-05-05T06:28:02Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "1d6676dd-4434-4f89-a302-a8643d12d61b",
        "parentId" : "4b22aa59-2b23-4fdd-a193-561ed01a16f5",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "Yes, I believe it was.",
        "createdAt" : "2019-05-03T22:50:23Z",
        "updatedAt" : "2019-05-05T06:28:02Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "23c61ed20a1e1523438f00290d0afb8fe4b4c2ab",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +70,74 @@\n    def log_artifact(self, local_file, artifact_path=None):\n        basename = os.path.basename(local_file)\n        if artifact_path:\n            http_endpoint = self._get_dbfs_endpoint("
  },
  {
    "id" : "6b31f437-9c3a-4ff1-b68e-a5d722e8c262",
    "prId" : 1171,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1171#pullrequestreview-233700011",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e40ada22-c035-4e57-ac27-eb6531b01957",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "if we're on windows, this could end up being something like \r\n`/dbfs/artifact/path/relative\\path` ?",
        "createdAt" : "2019-05-03T21:15:45Z",
        "updatedAt" : "2019-05-05T06:28:02Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "4e3a9f4a-f553-466e-818f-e4720bd62b39",
        "parentId" : "e40ada22-c035-4e57-ac27-eb6531b01957",
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "maybe can use `posixpath.normpath` ?",
        "createdAt" : "2019-05-03T21:36:06Z",
        "updatedAt" : "2019-05-05T06:28:02Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "977a5cdd-d76c-4e68-9251-9d77da41614b",
        "parentId" : "e40ada22-c035-4e57-ac27-eb6531b01957",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "oh good catch, I'll update this. \r\n\r\nposixpath.normpath does not work unfortunately as it does not recognize '\\' as separator. I added a method for this in file_utils, I'll call it here.",
        "createdAt" : "2019-05-03T22:53:35Z",
        "updatedAt" : "2019-05-05T06:28:02Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "23c61ed20a1e1523438f00290d0afb8fe4b4c2ab",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +94,98 @@                rel_path = os.path.relpath(dirpath, local_dir)\n                rel_path = relative_path_to_artifact_path(rel_path)\n                artifact_subdir = posixpath.join(artifact_path, rel_path)\n            for name in filenames:\n                file_path = os.path.join(dirpath, name)"
  },
  {
    "id" : "7fc63bfe-e510-4f19-bbc6-1acf24ddcb36",
    "prId" : 779,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/779#pullrequestreview-188246966",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0982e138-7f13-4a06-956a-f121e7a9e70c",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "This is not equivalent to calling `get_relative_path`, do we know if this is a safe change?",
        "createdAt" : "2018-12-28T00:13:22Z",
        "updatedAt" : "2019-01-05T05:04:04Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "540c011b-e637-4a91-a1f5-5952c61a7138",
        "parentId" : "0982e138-7f13-4a06-956a-f121e7a9e70c",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Yes, this seems safe based on the following logic:\r\n\r\n`dirpath` is a subdirectory of `local_dir`. Therefore, `get_relative_path(local_dir, dirpath)` first finds the common prefix of `dirpath` and `local_dir`, which is `local_dir`. `get_relative_path()` then returns `os.path.relpath(dirpath, commonprefix)`. Because `commonprefix = local_dir`, we have that `get_relative_path(local_dir, dirpath) == os.relpath(dirpath, local_dir)`.",
        "createdAt" : "2018-12-28T09:01:57Z",
        "updatedAt" : "2019-01-05T05:04:04Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f2f339e6dc13da1c62eafb5f9da9da4dc4db1c7",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +88,92 @@            dir_http_endpoint = root_http_endpoint\n            if dirpath != local_dir:\n                rel_path = self.get_path_module().relpath(dirpath, local_dir)\n                dir_http_endpoint = self.get_path_module().join(root_http_endpoint, rel_path)\n            for name in filenames:"
  },
  {
    "id" : "9b3f2f3c-f612-433d-aad9-fe0cbb1e4574",
    "prId" : 560,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/560#pullrequestreview-159308907",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "643f44fb-da59-4ebe-8e59-f03601f861d9",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "As in `databricks.py`, here we still use the old `http_request` API since non-200 response statuses can indicate that no files exist under the specified DBFS path",
        "createdAt" : "2018-09-27T07:33:17Z",
        "updatedAt" : "2018-10-08T21:35:29Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "409f0898d22bf454df4b219d5bd33d3d7c548862",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +35,39 @@    def _dbfs_list_api(self, json):\n        host_creds = self.get_host_creds()\n        return http_request(\n            host_creds=host_creds, endpoint=LIST_API_ENDPOINT, method='GET', json=json)\n"
  },
  {
    "id" : "5972a1fc-5e21-4ca1-a5db-7a415bec23d5",
    "prId" : 402,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/402#pullrequestreview-150655829",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e739f945-f6bf-466c-892e-9691b762ada5",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Refactored this to move `_databricks_api_request` inside so we can rely on `get_host_creds`. This is similar to the refactoring @smurching did to `projects/databricks.py` -- and that refactoring indeed made this change a lot simpler there.",
        "createdAt" : "2018-08-29T16:47:39Z",
        "updatedAt" : "2018-08-30T19:28:49Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "150bfb4198cd39a2e87af813fab80c630ac7feff",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +29,33 @@            raise MlflowException('DbfsArtifactRepository URI must start with dbfs:/')\n\n    def _databricks_api_request(self, **kwargs):\n        host_creds = self.get_host_creds()\n        return http_request(host_creds, **kwargs)"
  },
  {
    "id" : "29a9dabe-467b-4f54-b0ed-972fe0a20c5c",
    "prId" : 267,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/267#pullrequestreview-144252349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b600c92-4694-48b0-a579-d492075eced4",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Fix from DBFS artifactory PR and HTTP request change PR going in concurrently.",
        "createdAt" : "2018-08-08T02:54:47Z",
        "updatedAt" : "2018-08-08T02:54:47Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b18ae28c1fc7485017afac6e46549638ba66f8cb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +38,42 @@def _dbfs_is_dir(dbfs_path, http_request_kwargs):\n    response = http_request(endpoint=GET_STATUS_ENDPOINT, method='GET',\n                            json={'path': dbfs_path}, **http_request_kwargs)\n    json_response = json.loads(response.text)\n    try:"
  },
  {
    "id" : "a7911d2d-9f3d-485c-820d-d215a8f3e654",
    "prId" : 226,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/226#pullrequestreview-142626467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e8aca62-7e03-4450-aa9f-fafbba59f10a",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "To be safe: we could validate that the response is a well-formed error response (i.e. contains an \"error_code\" field) & throw an exception if it doesn't, as we do [here](https://github.com/mlflow/mlflow/blob/master/mlflow/projects/databricks.py#L108). On that note could make sense to share common logic for getting the status of a file in DBFS across this case & the one linked above.",
        "createdAt" : "2018-08-02T02:42:19Z",
        "updatedAt" : "2018-08-03T21:46:27Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a31bd46692e58bead8b0d2f1d2b924ed1263961",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +42,46 @@    try:\n        return json_response['is_dir']\n    except KeyError:\n        raise Exception('DBFS path %s does not exist' % dbfs_path)\n"
  },
  {
    "id" : "87f1b12d-c8c9-4adc-b95b-32272279d799",
    "prId" : 226,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/226#pullrequestreview-142626467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e923e830-b00c-4b4b-85c4-5c11b118bf68",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "+1 here what we're doing matches the other artifact stores - we write all the elements of `local_dir` into the DBFS directory \"/dbfs/artifact_root/artifact_path\".",
        "createdAt" : "2018-08-02T06:41:00Z",
        "updatedAt" : "2018-08-03T21:46:27Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a31bd46692e58bead8b0d2f1d2b924ed1263961",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +88,92 @@            root_http_endpoint = self._get_dbfs_endpoint(artifact_path)\n        else:\n            root_http_endpoint = self._get_dbfs_endpoint(os.path.basename(local_dir))\n        for (dirpath, _, filenames) in os.walk(local_dir):\n            dir_http_endpoint = root_http_endpoint"
  },
  {
    "id" : "08840308-5676-4a25-9167-656332c7fda5",
    "prId" : 226,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/226#pullrequestreview-143033223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "571a610c-0ce6-4226-968c-826112f96348",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Based on the [Python docs](https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files): we might want to open in binary mode ('rb') here, seems like opening in text mode could corrupt e.g. image data. The disadvantage of opening in binary mode is that newlines aren't handled in a platform-independent manner in binary-mode.",
        "createdAt" : "2018-08-02T06:51:58Z",
        "updatedAt" : "2018-08-03T21:46:27Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "b33a23a1-1750-4149-bc0f-d463875c42c9",
        "parentId" : "571a610c-0ce6-4226-968c-826112f96348",
        "authorId" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "body" : "Nice catch.",
        "createdAt" : "2018-08-03T01:59:02Z",
        "updatedAt" : "2018-08-03T21:46:27Z",
        "lastEditedBy" : "91d7919c-02c4-40e4-8f30-7f297efebb01",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a31bd46692e58bead8b0d2f1d2b924ed1263961",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +96,100 @@            for name in filenames:\n                endpoint = build_path(dir_http_endpoint, name)\n                with open(build_path(dirpath, name), 'r') as f:\n                    http_request(endpoint=endpoint, method='POST', data=f,\n                                 **self.http_request_kwargs)"
  },
  {
    "id" : "1db2df6c-b898-4d03-8b17-b7e60ce10006",
    "prId" : 226,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/226#pullrequestreview-142626467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66fa7e49-396f-4661-a45c-a4d89deb63b6",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Here we could use `tempfile.mkdtemp()` but I think this is fine for consistency (we should refactor some of the common logic out of the DBFS/Azure/S3/GCS artifact stores at some point & having common code now seems like it'll make the refactor easier later on)",
        "createdAt" : "2018-08-02T07:04:43Z",
        "updatedAt" : "2018-08-03T21:46:27Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a31bd46692e58bead8b0d2f1d2b924ed1263961",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +121,125 @@\n    def download_artifacts(self, artifact_path):\n        with TempDir(remove_on_exit=False) as tmp:\n            return self._download_artifacts_into(artifact_path, tmp.path())\n"
  }
]