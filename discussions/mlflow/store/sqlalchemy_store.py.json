[
  {
    "id" : "5f1522ef-8dd2-4f6b-ab91-2a9a2ba282ce",
    "prId" : 1767,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1767#pullrequestreview-283166485",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9260cffc-8c62-4510-adaf-6c965676e144",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : ":+1: on that trailing `,`",
        "createdAt" : "2019-09-03T18:04:06Z",
        "updatedAt" : "2019-09-03T18:05:29Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fa61934515e0b92b1711d5fa9f3fded119d56cb",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +85,89 @@            SqlTag.__tablename__,\n            SqlExperimentTag.__tablename__,\n            SqlLatestMetric.__tablename__,\n        ])\n        if len(expected_tables & set(insp.get_table_names())) == 0:"
  },
  {
    "id" : "4120630e-38a5-459e-9ece-345c1bd1e696",
    "prId" : 1630,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1630#pullrequestreview-264350392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47e53585-ce94-4384-968f-a7e636f43679",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Nice! Looks like similar logic is also defined within `create_run`: https://github.com/mlflow/mlflow/blob/96eb9e533a46328962ef4b6d9e18c37e339b4787/mlflow/store/sqlalchemy_store.py#L327-L329. Can we replace it with a call to this function?",
        "createdAt" : "2019-07-19T20:31:18Z",
        "updatedAt" : "2019-07-26T17:57:05Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "df45e8f2b63dcd21d721f19e84b421415a6319ae",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +366,370 @@                                  INVALID_PARAMETER_VALUE)\n\n    def _check_experiment_is_active(self, experiment):\n        if experiment.lifecycle_stage != LifecycleStage.ACTIVE:\n            raise MlflowException(\"The experiment {} must be in the 'active' state. \""
  },
  {
    "id" : "e65f564e-f536-41c8-9298-a697d529ff2e",
    "prId" : 1630,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1630#pullrequestreview-264944105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ea1a421-c6c5-4872-8ae2-05dad5fc87b6",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Nice! Can we add a test to verify that `set_experiment_tag` throws when the experiment is not active?",
        "createdAt" : "2019-07-19T20:59:22Z",
        "updatedAt" : "2019-07-26T17:57:05Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "af211a26-dd88-4bea-9c9b-187e63e67f12",
        "parentId" : "6ea1a421-c6c5-4872-8ae2-05dad5fc87b6",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Yup - done!",
        "createdAt" : "2019-07-22T17:30:52Z",
        "updatedAt" : "2019-07-26T17:57:05Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "df45e8f2b63dcd21d721f19e84b421415a6319ae",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +485,489 @@                                              experiment_id,\n                                              ViewType.ALL).to_mlflow_entity()\n            self._check_experiment_is_active(experiment)\n            session.merge(SqlExperimentTag(experiment_id=experiment_id,\n                                           key=tag.key,"
  },
  {
    "id" : "4fb7ed5a-a828-4e74-b61a-d1204b1e9cc8",
    "prId" : 1573,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1573#pullrequestreview-261507143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0722915e-b308-4099-9de3-8c83b5199508",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Are there Python constants for these values?",
        "createdAt" : "2019-07-12T00:14:11Z",
        "updatedAt" : "2019-07-17T01:21:12Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "1bb90b0e-8061-49eb-8552-78dab7bc2f9a",
        "parentId" : "0722915e-b308-4099-9de3-8c83b5199508",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "Yes, but this constant is related to what the database can represent rather than python. ",
        "createdAt" : "2019-07-12T00:31:28Z",
        "updatedAt" : "2019-07-17T01:21:12Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "0d9bf93d-ac76-4962-a16b-b5955d62da26",
        "parentId" : "0722915e-b308-4099-9de3-8c83b5199508",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "How do we know that SQLAlchemy uses these exact min/max float values? Is it documented somewhere?",
        "createdAt" : "2019-07-12T00:40:47Z",
        "updatedAt" : "2019-07-17T01:21:12Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "844a91de-6bee-4230-b8f8-eea66272a43a",
        "parentId" : "0722915e-b308-4099-9de3-8c83b5199508",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Looks like these constants don't work for MySQL 8.0.15. The following code executes against SQLite, but it does not execute against MySQL:\r\n```\r\nvals = [99, 96, -float(\"inf\"), float(\"inf\"), float(\"nan\")]\r\n\r\nfor val in vals:\r\n    with mlflow.start_run():\r\n        print(\"Value\", val, \"Run ID\", mlflow.active_run().info.run_id)\r\n        mlflow.log_metric(\"A\", val)\r\n```\r\n\r\nMySQL stacktrace:\r\n```\r\nValue 99 Run ID 5b58b2aac1a440a590fe5428e6771f2f\r\nValue 96 Run ID 3880c66e9bbf417faf0cb8977a590f15\r\nValue -inf Run ID 6334230ac0514408bc2b826c480048ef\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1230, in _execute_context\r\n    cursor, statement, parameters, context\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/default.py\", line 536, in do_execute\r\n    cursor.execute(statement, parameters)\r\n  File \"/usr/local/lib/python3.7/site-packages/MySQLdb/cursors.py\", line 206, in execute\r\n    res = self._query(query)\r\n  File \"/usr/local/lib/python3.7/site-packages/MySQLdb/cursors.py\", line 312, in _query\r\n    db.query(q)\r\n  File \"/usr/local/lib/python3.7/site-packages/MySQLdb/connections.py\", line 224, in query\r\n    _mysql.connection.query(self, query)\r\nMySQLdb._exceptions.DataError: (1264, \"Out of range value for column 'value' at row 1\")\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/czumar/mlflow/mlflow/store/sqlalchemy_store.py\", line 148, in make_managed_session\r\n    session.commit()\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/session.py\", line 1008, in commit\r\n    self.transaction.commit()\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/session.py\", line 487, in commit\r\n    self._prepare_impl()\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/session.py\", line 466, in _prepare_impl\r\n    self.session.flush()\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/session.py\", line 2424, in flush\r\n    self._flush(objects)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/session.py\", line 2562, in _flush\r\n    transaction.rollback(_capture_exception=True)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py\", line 67, in __exit__\r\n    compat.reraise(exc_type, exc_value, exc_tb)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/util/compat.py\", line 277, in reraise\r\n    raise value\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/session.py\", line 2522, in _flush\r\n    flush_context.execute()\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/unitofwork.py\", line 416, in execute\r\n    rec.execute(self)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/unitofwork.py\", line 583, in execute\r\n    uow,\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/persistence.py\", line 245, in save_obj\r\n    insert,\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/orm/persistence.py\", line 1063, in _emit_insert_statements\r\n    c = cached_connections[connection].execute(statement, multiparams)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 974, in execute\r\n    return meth(self, multiparams, params)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/sql/elements.py\", line 273, in _execute_on_connection\r\n    return connection._execute_clauseelement(self, multiparams, params)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1093, in _execute_clauseelement\r\n    distilled_params,\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1234, in _execute_context\r\n    e, statement, parameters, cursor, context\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1452, in _handle_dbapi_exception\r\n    util.raise_from_cause(sqlalchemy_exception, exc_info)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/util/compat.py\", line 296, in raise_from_cause\r\n    reraise(type(exception), exception, tb=exc_tb, cause=cause)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/util/compat.py\", line 276, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1230, in _execute_context\r\n    cursor, statement, parameters, context\r\n  File \"/usr/local/lib/python3.7/site-packages/sqlalchemy/engine/default.py\", line 536, in do_execute\r\n    cursor.execute(statement, parameters)\r\n  File \"/usr/local/lib/python3.7/site-packages/MySQLdb/cursors.py\", line 206, in execute\r\n    res = self._query(query)\r\n  File \"/usr/local/lib/python3.7/site-packages/MySQLdb/cursors.py\", line 312, in _query\r\n    db.query(q)\r\n  File \"/usr/local/lib/python3.7/site-packages/MySQLdb/connections.py\", line 224, in query\r\n    _mysql.connection.query(self, query)\r\nsqlalchemy.exc.DataError: (MySQLdb._exceptions.DataError) (1264, \"Out of range value for column 'value' at row 1\") [SQL: 'INSERT INTO metrics (`key`, value, timestamp, step, is_nan, run_uuid) VALUES (%s, %s, %s, %s, %s, %s)'] [parameters: ('A', -1.7976931348623157e+308, 1562892722483, 0, 0, '6334230ac0514408bc2b826c480048ef')] (Background on this error at: http://sqlalche.me/e/9h9h)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"test2.py\", line 11, in <module>\r\n    mlflow.log_metric(\"A\", val)\r\n  File \"/Users/czumar/mlflow/mlflow/tracking/fluent.py\", line 201, in log_metric\r\n    MlflowClient().log_metric(run_id, key, value, int(time.time() * 1000), step or 0)\r\n  File \"/Users/czumar/mlflow/mlflow/tracking/client.py\", line 171, in log_metric\r\n    self.store.log_metric(run_id, metric)\r\n  File \"/Users/czumar/mlflow/mlflow/store/sqlalchemy_store.py\", line 422, in log_metric\r\n    session=session, is_nan=is_nan)\r\n  File \"/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py\", line 119, in __exit__\r\n    next(self.gen)\r\n  File \"/Users/czumar/mlflow/mlflow/store/sqlalchemy_store.py\", line 154, in make_managed_session\r\n    raise MlflowException(message=e, error_code=INTERNAL_ERROR)\r\nmlflow.exceptions.MlflowException: (MySQLdb._exceptions.DataError) (1264, \"Out of range value for column 'value' at row 1\") [SQL: 'INSERT INTO metrics (`key`, value, timestamp, step, is_nan, run_uuid) VALUES (%s, %s, %s, %s, %s, %s)'] [parameters: ('A', -1.7976931348623157e+308, 1562892722483, 0, 0, '6334230ac0514408bc2b826c480048ef')] (Background on this error at: http://sqlalche.me/e/9h9h)\r\n```",
        "createdAt" : "2019-07-12T00:52:34Z",
        "updatedAt" : "2019-07-17T01:21:12Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "83565751-3ba8-4760-a41c-d3c4ff849259",
        "parentId" : "0722915e-b308-4099-9de3-8c83b5199508",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "As @andrewmchen pointed out, it looks like we define the `value` column as having type `sqlalchemy.Float`. This may be problematic, though I haven't found a double type...\r\n\r\nReference: https://github.com/mlflow/mlflow/blob/849161e0a552b8eabe7634de43b325f5cbda503d/mlflow/store/dbmodels/models.py#L238",
        "createdAt" : "2019-07-12T01:04:23Z",
        "updatedAt" : "2019-07-17T01:21:12Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "7adae286-47d4-41a2-adac-5017b7ac47b2",
        "parentId" : "0722915e-b308-4099-9de3-8c83b5199508",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "NIce catch Corey! There is no Double but there appears to be a precision argument so I added a conversion to Float(precision=64) to the migration script.",
        "createdAt" : "2019-07-12T07:09:35Z",
        "updatedAt" : "2019-07-17T01:21:12Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "9aa36639-bc7f-464a-8457-dcf4ccd05ff7",
        "parentId" : "0722915e-b308-4099-9de3-8c83b5199508",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "Actually it has to be Float(precision=53) but it works now.",
        "createdAt" : "2019-07-12T23:14:41Z",
        "updatedAt" : "2019-07-17T01:21:12Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "aaaf311055edf0215c6c512f6610a1ddee1fcc96",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +411,415 @@        elif math.isinf(metric.value):\n            #  NB: Sql can not represent Infs = > We replace +/- Inf with max/min 64b float value\n            value = 1.7976931348623157e308 if metric.value > 0 else -1.7976931348623157e308\n        else:\n            value = metric.value"
  },
  {
    "id" : "30d898eb-efea-4c3c-b1b7-aa1f5c5a5bb6",
    "prId" : 1559,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1559#pullrequestreview-260862442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4ed9277-c68d-49e6-89fb-8c743504ec45",
        "parentId" : null,
        "authorId" : "defbdbf6-c2b5-4b1e-b40b-da9b7f2d2e74",
        "body" : "name of the tag to delete -> Name of the tag to delete",
        "createdAt" : "2019-07-10T22:38:14Z",
        "updatedAt" : "2019-07-12T00:10:10Z",
        "lastEditedBy" : "defbdbf6-c2b5-4b1e-b40b-da9b7f2d2e74",
        "tags" : [
        ]
      },
      {
        "id" : "e0822e4b-7257-433d-88bc-e06d4cc48b8f",
        "parentId" : "c4ed9277-c68d-49e6-89fb-8c743504ec45",
        "authorId" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "body" : "Resolved in previous PR",
        "createdAt" : "2019-07-11T17:56:19Z",
        "updatedAt" : "2019-07-12T00:10:10Z",
        "lastEditedBy" : "436a8363-a9c6-409f-a948-2be39402f59c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a13ef3900f30f805095ca5102e44fc4fd9cdd4c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +469,473 @@        :param run_id: String ID of the run\n        :param key: Name of the tag\n        \"\"\"\n        with self.ManagedSessionMaker() as session:\n            run = self._get_run(run_uuid=run_id, session=session)"
  },
  {
    "id" : "c9e76593-e461-4d1a-8888-310db628284a",
    "prId" : 1558,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1558#pullrequestreview-259671446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e0ddbbf-e5ff-4905-807c-d8fda368fa3f",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "This method needs docs",
        "createdAt" : "2019-07-09T18:06:19Z",
        "updatedAt" : "2019-07-11T18:32:59Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "52ef1680fbc3c39c0bbba85a39b1674a83c8bfca",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +464,468 @@            session.merge(SqlTag(run_uuid=run_id, key=tag.key, value=tag.value))\n\n    def delete_tag(self, run_id, key):\n        \"\"\"\n        Delete a tag from a run."
  },
  {
    "id" : "918c8751-fa1a-41ba-aa69-42b03908d489",
    "prId" : 1558,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1558#pullrequestreview-260938055",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd75835c-49a9-4500-83ad-4128ed89d4aa",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "👍 ",
        "createdAt" : "2019-07-11T20:32:14Z",
        "updatedAt" : "2019-07-11T20:36:50Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "52ef1680fbc3c39c0bbba85a39b1674a83c8bfca",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +482,486 @@                    \"Bad data in database - tags for a specific run must have \"\n                    \"a single unique value.\"\n                    \"See https://mlflow.org/docs/latest/tracking.html#adding-tags-to-runs\",\n                    error_code=INVALID_STATE)\n            session.delete(filtered_tags[0])"
  },
  {
    "id" : "404da36b-00c1-4d78-8a93-b22849f51ea8",
    "prId" : 1542,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1542#pullrequestreview-257131659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d2e9721-f8d1-44bf-9620-67fe3d24ec88",
        "parentId" : null,
        "authorId" : "ef7f4fc4-8253-410e-bcf1-8d5fe4cd38b3",
        "body" : "To be clear, the SQLAlchemy and File stores both use an offset, not a cursor to a specific run for pagination?",
        "createdAt" : "2019-07-02T20:14:38Z",
        "updatedAt" : "2019-07-03T00:59:04Z",
        "lastEditedBy" : "ef7f4fc4-8253-410e-bcf1-8d5fe4cd38b3",
        "tags" : [
        ]
      },
      {
        "id" : "b0e194d3-f322-4ad7-ab2e-b7c8c8a9f1ca",
        "parentId" : "0d2e9721-f8d1-44bf-9620-67fe3d24ec88",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "In this particular implementation, yes. The only difference is if there are runs inserted in the middle in which case there will be subtly different behavior.",
        "createdAt" : "2019-07-02T20:24:05Z",
        "updatedAt" : "2019-07-03T00:59:04Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "d6e433e4-b70b-496a-b8c4-86b7f3f21c47",
        "parentId" : "0d2e9721-f8d1-44bf-9620-67fe3d24ec88",
        "authorId" : "ef7f4fc4-8253-410e-bcf1-8d5fe4cd38b3",
        "body" : "Got it. That's what I thought",
        "createdAt" : "2019-07-02T20:28:50Z",
        "updatedAt" : "2019-07-03T00:59:04Z",
        "lastEditedBy" : "ef7f4fc4-8253-410e-bcf1-8d5fe4cd38b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "c56a59e3d1689610bc769554c02f9ce3f58480ac",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +478,482 @@            filtered = SearchUtils.filter(runs, filter_string)\n            sorted_runs = SearchUtils.sort(filtered, order_by)\n            runs, next_page_token = SearchUtils.paginate(sorted_runs, page_token, max_results)\n            return runs, next_page_token\n"
  },
  {
    "id" : "d43aad93-1725-489f-b698-e812c4607d4d",
    "prId" : 1542,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1542#pullrequestreview-257277515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09e34eec-adbf-47c5-a1c3-9ae41f08f759",
        "parentId" : null,
        "authorId" : "ef7f4fc4-8253-410e-bcf1-8d5fe4cd38b3",
        "body" : "So what does `max_results` mean now? Does it refer to the total number of results wanted (even if it has to be paginated), or does it refer to the number of results desired on the next \"page\"?",
        "createdAt" : "2019-07-02T20:27:56Z",
        "updatedAt" : "2019-07-03T00:59:04Z",
        "lastEditedBy" : "ef7f4fc4-8253-410e-bcf1-8d5fe4cd38b3",
        "tags" : [
        ]
      },
      {
        "id" : "48028e78-7899-43e3-a834-a5dc112e2b9c",
        "parentId" : "09e34eec-adbf-47c5-a1c3-9ae41f08f759",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "I believe it has always referred to the total number of results desired (given some maximum imposed by the server).",
        "createdAt" : "2019-07-02T20:32:18Z",
        "updatedAt" : "2019-07-03T00:59:04Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "03d22405-d8be-45b4-a48e-b0a01d461d04",
        "parentId" : "09e34eec-adbf-47c5-a1c3-9ae41f08f759",
        "authorId" : "ef7f4fc4-8253-410e-bcf1-8d5fe4cd38b3",
        "body" : "I think if I'm reading the code right,  in the `paginate` method it returns `max_results` number of runs per \"page\" until the offset is greater than the total number of runs available. Can you check this?\r\n\r\nSo for example, if you said `max_results` = 5, and there are 50 runs in total, it will continue sending page tokens back with 5 runs until you've requested 10 pages. ",
        "createdAt" : "2019-07-02T20:43:43Z",
        "updatedAt" : "2019-07-03T00:59:04Z",
        "lastEditedBy" : "ef7f4fc4-8253-410e-bcf1-8d5fe4cd38b3",
        "tags" : [
        ]
      },
      {
        "id" : "858e8d1f-454b-4cbf-8faf-6bdc2b2ee56e",
        "parentId" : "09e34eec-adbf-47c5-a1c3-9ae41f08f759",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Yes, this is the correct behavior, right? The client chooses the page size, but cannot choose an arbitrarily large size (as imposed by the server).",
        "createdAt" : "2019-07-02T20:44:31Z",
        "updatedAt" : "2019-07-03T00:59:04Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "fc7f0a09-ca9c-443a-b71d-f25da15ebf40",
        "parentId" : "09e34eec-adbf-47c5-a1c3-9ae41f08f759",
        "authorId" : "ef7f4fc4-8253-410e-bcf1-8d5fe4cd38b3",
        "body" : "Ah, ok. I figured that the UI default would be to show up to 1000 runs per \"load more\", even if the user queried with `max_results=2500`. But what actually will happen is that the server will send all 2500 runs back in one page, unless the frontend dynamically changes the `max_results` to be the desired page size (currently 1000). (cc @Zangr)\r\n\r\nI think with the auto-pagination with pandas and spark datasources, `max_results` will refer to the maximum number of results the user wants in the dataframe, which may be over the server limit for one page. But the functions will split it into multiple smaller pages and combine them.\r\n",
        "createdAt" : "2019-07-02T21:04:19Z",
        "updatedAt" : "2019-07-03T00:59:04Z",
        "lastEditedBy" : "ef7f4fc4-8253-410e-bcf1-8d5fe4cd38b3",
        "tags" : [
        ]
      },
      {
        "id" : "b789a2ea-3cbe-434d-b91e-ff318a363c04",
        "parentId" : "09e34eec-adbf-47c5-a1c3-9ae41f08f759",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "`max_results=1000` defaulted in proto. We can absolutely reduce that with pagination and more importantly `Load More...` implemented.",
        "createdAt" : "2019-07-03T06:16:02Z",
        "updatedAt" : "2019-07-03T06:16:02Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c56a59e3d1689610bc769554c02f9ce3f58480ac",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +467,471 @@                     page_token):\n        # TODO: push search query into backend database layer\n        if max_results > SEARCH_MAX_RESULTS_THRESHOLD:\n            raise MlflowException(\"Invalid value for request parameter max_results. It must be at \"\n                                  \"most {}, but got value {}\".format(SEARCH_MAX_RESULTS_THRESHOLD,"
  },
  {
    "id" : "42f83564-2680-42ed-9acb-7e33b570273c",
    "prId" : 1297,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1297#pullrequestreview-242395442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0ba6d2f-e5dc-439a-a553-447655fb1549",
        "parentId" : null,
        "authorId" : "defbdbf6-c2b5-4b1e-b40b-da9b7f2d2e74",
        "body" : "Currently, MLflow supports the database dialects ``mysql``, ``mssql``, ``sqlite``, and ``postgresql``. ->\r\n\r\nMLflow supports the database dialects ``mysql``, ``mssql``, ``sqlite``, and ``postgresql``.",
        "createdAt" : "2019-05-27T21:53:41Z",
        "updatedAt" : "2019-05-27T22:58:17Z",
        "lastEditedBy" : "defbdbf6-c2b5-4b1e-b40b-da9b7f2d2e74",
        "tags" : [
        ]
      }
    ],
    "commit" : "8053c29f6bfd9444caaf7f400a6930207c3b7483",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +58,62 @@    SQLAlchemy compliant backend store for tracking meta data for MLflow entities. MLflow\n    supports the database dialects ``mysql``, ``mssql``, ``sqlite``, and ``postgresql``.\n    As specified in the\n    `SQLAlchemy docs <https://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls>`_ ,\n    the database URI is expected in the format"
  },
  {
    "id" : "9277dd57-e8a1-42e8-b6c7-d043a84270c9",
    "prId" : 1167,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1167#pullrequestreview-231298207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4033cb0a-1c7d-4d84-ac2e-6aa577c20b33",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "This `session.flush()` call is necessary to actually insert the experiment into the DB and give it an ID - otherwise  `experiment.experiment_id` is incorrectly set to `None` below",
        "createdAt" : "2019-04-24T23:48:57Z",
        "updatedAt" : "2019-04-26T23:49:55Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "f6fee98d-c3c0-45cf-90d8-2e4137131945",
        "parentId" : "4033cb0a-1c7d-4d84-ac2e-6aa577c20b33",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Isn't the session automatically committed after exiting the managed session context? The commit operation always performs a flush. Any idea why this doesn't work without explicitly flushing?",
        "createdAt" : "2019-04-25T08:54:19Z",
        "updatedAt" : "2019-04-26T23:49:55Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "0cb31d5d-b6df-49fe-b27f-f110a1fecdc8",
        "parentId" : "4033cb0a-1c7d-4d84-ac2e-6aa577c20b33",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Good question, it's because the `__exit__` method of the managed session context object doesn't run till after the return value is evaluated. This is why logic like\r\n\r\n```\r\n$ echo \"blahblah\" > /tmp/my-file\r\n$ python\r\nPython 2.7.15 |Anaconda, Inc.| (default, May  1 2018, 18:37:05) \r\n[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> def my_method():\r\n...   with open(\"/tmp/my-file\") as f:\r\n...     return f.readlines()\r\n>>> my_method()\r\n['blahblah\\n']\r\n``` \r\n\r\nworks (the file is only closed by `__exit__` after the return value is computed). It's kinda hard to find exact docs describing this behavior but it's alluded to [here](https://www.python.org/dev/peps/pep-0343/#id38):\r\n\r\n> \"The calling convention for mgr.__exit__() is as follows. If the finally-suite was reached through normal completion of BLOCK or through a non-local goto (a break, continue or return statement in BLOCK), mgr.__exit__() is called with three None arguments\"",
        "createdAt" : "2019-04-25T18:01:38Z",
        "updatedAt" : "2019-04-26T23:49:55Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      },
      {
        "id" : "29642356-5ab8-49e0-8900-a34d8a374c0c",
        "parentId" : "4033cb0a-1c7d-4d84-ac2e-6aa577c20b33",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Awesome, thanks for the detailed explanation!",
        "createdAt" : "2019-04-26T18:06:07Z",
        "updatedAt" : "2019-04-26T23:49:55Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "e7f6cb3e-1a84-4c88-857f-d3b65b96e617",
        "parentId" : "4033cb0a-1c7d-4d84-ac2e-6aa577c20b33",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Can we update `test_create_experiments` to validate that the returned `experiment_id` is not `None`?",
        "createdAt" : "2019-04-26T18:23:56Z",
        "updatedAt" : "2019-04-26T23:49:55Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "477a087d5e2b48ed98d5089d8d516a99680d57a1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +185,189 @@                                      'Error: {}'.format(name, str(e)), RESOURCE_ALREADY_EXISTS)\n\n            session.flush()\n            return str(experiment.experiment_id)\n"
  },
  {
    "id" : "d9d58565-23e0-4c90-b13a-bedae4b64d7b",
    "prId" : 1167,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1167#pullrequestreview-230408247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e72694e-cbc1-47ef-afb5-6834900d5a2a",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Refactors this logic so that we don't attempt to insert the same tags twice (SQL DB doesn't like it because `tag_key, run_uuid` are supposed to be unique) e.g. if both `parent_run_id` and its corresponding tag are specified. As per the MlflowClient.create_run docs, the passed `parent_run_id` takes precedence over values in tags.",
        "createdAt" : "2019-04-25T00:06:01Z",
        "updatedAt" : "2019-04-26T23:49:55Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "477a087d5e2b48ed98d5089d8d516a99680d57a1",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +279,283 @@                         source_version=source_version, lifecycle_stage=LifecycleStage.ACTIVE)\n\n            tags_dict = {}\n            for tag in tags:\n                tags_dict[tag.key] = tag.value"
  },
  {
    "id" : "46b0ed9a-66b5-4c03-a4ba-ac6d6090304d",
    "prId" : 1155,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1155#pullrequestreview-232855511",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e845726e-b320-4db8-ba2c-bb282aaa8e41",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "When communicating directly with the SQLStore (e.g., not running it behind a REST server), instantiating `SqlAlchemyStore` multiple times against MySQL seems to quickly yield a `Too many connections` error.\r\n\r\nThe following code works on the `v0.9.0` branch:\r\n```\r\n    mlflow.set_tracking_uri(\"mysql://root:password@localhost:33060/my_db\")\r\n    for _ in range(50):\r\n        with mlflow.start_run():\r\n            mlflow.log_param(\"A\", \"A\")\r\n```\r\n\r\nHowever, it does not work with this change applied. Stack trace:\r\n```\r\n2019/04/30 16:45:11 INFO mlflow.store.sqlalchemy_store: Creating initial MLflow database tables...\r\n2019/04/30 16:45:11 INFO mlflow.store.db.utils: Updating database tables at mysql://root:password@localhost:33060/migtest\r\nINFO  [alembic.runtime.migration] Context impl MySQLImpl.\r\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\r\nINFO  [alembic.runtime.migration] Running upgrade  -> 451aebb31d03, add metric step\r\nINFO  [alembic.runtime.migration] Context impl MySQLImpl.\r\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\r\nINFO  [alembic.runtime.migration] Context impl MySQLImpl.\r\n...\r\nINFO  [alembic.runtime.migration] Context impl MySQLImpl.\r\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\r\nTraceback (most recent call last):\r\n  File \"setupdb.py\", line 33, in <module>\r\n    with mlflow.start_run():\r\n  File \"/Users/czumar/mlflow/mlflow/tracking/fluent.py\", line 140, in start_run\r\n    active_run_obj = MlflowClient().create_run(\r\n  File \"/Users/czumar/mlflow/mlflow/tracking/client.py\", line 36, in __init__\r\n    self.store = utils._get_store(self.tracking_uri)\r\n  File \"/Users/czumar/mlflow/mlflow/tracking/utils.py\", line 218, in _get_store\r\n    return _tracking_store_registry.get_store(store_uri, artifact_uri)\r\n  File \"/Users/czumar/mlflow/mlflow/tracking/utils.py\", line 199, in get_store\r\n    return store_builder(store_uri=store_uri, artifact_uri=artifact_uri)\r\n  File \"/Users/czumar/mlflow/mlflow/tracking/utils.py\", line 106, in _get_sqlalchemy_store\r\n    return SqlAlchemyStore(store_uri, artifact_uri)\r\n  File \"/Users/czumar/mlflow/mlflow/store/sqlalchemy_store.py\", line 90, in __init__\r\n    if len(self.list_experiments()) == 0:\r\n  File \"/Users/czumar/mlflow/mlflow/store/sqlalchemy_store.py\", line 248, in list_experiments\r\n    self._list_experiments(session=session, view_type=view_type)]\r\n  File \"/Users/czumar/anaconda2/lib/python2.7/contextlib.py\", line 35, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/Users/czumar/mlflow/mlflow/store/sqlalchemy_store.py\", line 135, in make_managed_session\r\n    raise MlflowException(message=e, error_code=INTERNAL_ERROR)\r\nmlflow.exceptions.MlflowException: (MySQLdb._exceptions.OperationalError) (1040, 'Too many connections')\r\n(Background on this error at: http://sqlalche.me/e/e3q8)\r\n```",
        "createdAt" : "2019-04-30T23:43:59Z",
        "updatedAt" : "2019-05-07T02:33:19Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "9be29318-71bf-43bc-8446-db9abe335bc0",
        "parentId" : "e845726e-b320-4db8-ba2c-bb282aaa8e41",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Also a great catch - just to close the loop on this, the original bug was caused by logic that failed to close the connection returned by `engine.connect()` - this has been fixed [here](https://github.com/mlflow/mlflow/pull/1155/files#diff-9dbd29fa18674e2743b2073bca3e250dR102) by using a context manager - the docs ([link](https://docs.sqlalchemy.org/en/13/core/connections.html#sqlalchemy.engine.Connection.connect)) are vague but `close()` is called when the context manager exits ([link](https://github.com/sqlalchemy/sqlalchemy/blob/rel_1_3_3/lib/sqlalchemy/engine/base.py#L180))",
        "createdAt" : "2019-05-02T06:32:01Z",
        "updatedAt" : "2019-05-07T02:33:19Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c797a7ace43cc6ee2842f1c9daf8a35e1fc1fd5",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +68,72 @@        self.artifact_root_uri = default_artifact_root\n        self.engine = sqlalchemy.create_engine(db_uri)\n        insp = sqlalchemy.inspect(self.engine)\n        # On a completely fresh MLflow installation against an empty database (verify database\n        # emptiness by checking that 'experiments' etc aren't in the list of table names), run all"
  },
  {
    "id" : "d5cfc971-7283-41b2-90dc-03bc52f41ee9",
    "prId" : 1155,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1155#pullrequestreview-233290221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72eb627d-4259-461b-ac1e-97ff73f4c013",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "What's `db upgrade`?",
        "createdAt" : "2019-05-01T17:35:44Z",
        "updatedAt" : "2019-05-07T02:33:19Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "f4c70129-1467-4a30-96c7-ebe89d587690",
        "parentId" : "72eb627d-4259-461b-ac1e-97ff73f4c013",
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "As per a comment from @dbczumar ([link](https://github.com/mlflow/mlflow/pull/1155#discussion_r279959183)), it seems reasonable to namespace the upgrade command under `mlflow db` to allow flexibility for adding other subcommands, although it does make the command somewhat less discoverable (requires an extra CLI invocation with --help to discover `mlflow db upgrade`, assuming you start with `mlflow --help`)",
        "createdAt" : "2019-05-03T00:12:22Z",
        "updatedAt" : "2019-05-07T02:33:19Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c797a7ace43cc6ee2842f1c9daf8a35e1fc1fd5",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +110,114 @@                raise MlflowException(\n                    \"Detected out-of-date database schema. Take a backup of your database, then \"\n                    \"run 'mlflow db upgrade %s' to migrate your database to the latest schema. \"\n                    \"NOTE: schema migration may result in database downtime \"\n                    \"- please consult your database's documentation for more detail.\" % engine.url)"
  },
  {
    "id" : "665737f6-fdff-4c39-a83d-96092e15653b",
    "prId" : 1155,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1155#pullrequestreview-233291064",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b33b3a0c-62d2-480e-887f-ef4067cba285",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Validate the metric at the store level to get a MySQL test (`test_log_null_metric`) to pass - MySQL otherwise inserts a metric with `metric.value = None` as a metric with value 0. In the future we might consider validating metric entity fields at construction time so we don't need to duplicate calls to e.g. `_validate_metric` across stores",
        "createdAt" : "2019-05-03T00:17:12Z",
        "updatedAt" : "2019-05-07T02:33:19Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c797a7ace43cc6ee2842f1c9daf8a35e1fc1fd5",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +393,397 @@\n    def log_metric(self, run_id, metric):\n        _validate_metric(metric.key, metric.value, metric.timestamp, metric.step)\n        with self.ManagedSessionMaker() as session:\n            run = self._get_run(run_uuid=run_id, session=session)"
  },
  {
    "id" : "c9b4f0df-6df7-4934-9bdc-4a9115c555ef",
    "prId" : 1067,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1067#pullrequestreview-224688195",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e1edc69-f453-4d1c-a615-7efd55747031",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Does this work? Isn't experiment_id a string, but expects an int with respect to the sqlalchemy store? Is there a test that proves this behavior?",
        "createdAt" : "2019-04-09T19:47:56Z",
        "updatedAt" : "2019-04-19T19:48:58Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "08ae347d-b308-406f-80dc-d4304e53c20b",
        "parentId" : "3e1edc69-f453-4d1c-a615-7efd55747031",
        "authorId" : "668ead22-45dd-4911-8926-af33e1dbaebc",
        "body" : "It does. The only call that needs experiment_id to be int is _list_experiments. It works because it is cast to int on L193 in _list_experiments",
        "createdAt" : "2019-04-09T22:37:06Z",
        "updatedAt" : "2019-04-19T19:48:58Z",
        "lastEditedBy" : "668ead22-45dd-4911-8926-af33e1dbaebc",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb76af9d3a1fbec543c2088c62370a476ef6c598",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +208,212 @@        experiment_id = experiment_id or SqlAlchemyStore.DEFAULT_EXPERIMENT_ID\n        experiments = self._list_experiments(\n            session=session, ids=[experiment_id], view_type=view_type).all()\n        if len(experiments) == 0:\n            raise MlflowException('No Experiment with id={} exists'.format(experiment_id),"
  },
  {
    "id" : "bcb46770-9049-4f29-bf44-c09cf5ae5925",
    "prId" : 980,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/980#pullrequestreview-213722854",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9017f5d-bd99-4981-b5f1-41b6d2c1788f",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Technically, this method does not strictly adhere to the principle that session construction should happen independently of the function that uses the session to communicate with the database (the `ManagedSessionMaker` is used to create a session in the same method that later performs a DB lookup using the session).\r\n\r\nWe can define an internal `_get_metric_history()` method to achieve this separation, or we can recognize that the separation is a recommended SQLAlchemy pattern for avoiding errors that we may not always follow if we're confident that a certain function is implemented correctly (as I believe is the case here).\r\n\r\nWhat are your thoughts, @mparkhe?",
        "createdAt" : "2019-03-11T20:03:56Z",
        "updatedAt" : "2019-03-13T21:25:34Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "eeebab39-56cb-49d2-92dc-ca5860e7ce90",
        "parentId" : "e9017f5d-bd99-4981-b5f1-41b6d2c1788f",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "IMO, this is fine. I am not sure if this principle \"session construction should happen independently of the function that uses the session to communicate with the database\" makes too much sense from the design perspective. I suppose most of the other functions fit the spec that you might have multiple APIs sharing functions so create the session in the public API for `SqlAlchemyStore` since that is the first entry point.\r\n\r\nIdeally, in fact, I might be tempted to have principle of creating a session closets to DB access. However, that might be a bit of an overuse if you have a single call stack needing to make a couple of DB calls to respond to an API request. Also they way you have entrypoint APIs creating sessions is awesome in case we want to share sessions etc. in future. If the same function can make DB calls, so be it.",
        "createdAt" : "2019-03-12T04:22:53Z",
        "updatedAt" : "2019-03-13T21:25:34Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "cdbdbb41-36da-44b7-bd9f-80904e9ff722",
        "parentId" : "e9017f5d-bd99-4981-b5f1-41b6d2c1788f",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Makes sense to me!",
        "createdAt" : "2019-03-13T01:18:51Z",
        "updatedAt" : "2019-03-13T21:25:34Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "346a1735a250a8465627f75b830ad8e465f19d34",
    "line" : 432,
    "diffHunk" : "@@ -1,1 +376,380 @@\n    def get_metric_history(self, run_uuid, metric_key):\n        with self.ManagedSessionMaker() as session:\n            metrics = session.query(SqlMetric).filter_by(run_uuid=run_uuid, key=metric_key).all()\n            return [metric.to_mlflow_entity() for metric in metrics]"
  },
  {
    "id" : "bd3106c1-4b71-4a23-af10-38950d1a5c17",
    "prId" : 980,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/980#pullrequestreview-213722854",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "432b37ce-9d24-43fb-8269-c16f29f633b5",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "ooh! nice catch--micro optimization there.",
        "createdAt" : "2019-03-12T04:01:21Z",
        "updatedAt" : "2019-03-13T21:25:34Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "3eb142dd-e165-4576-80c9-1b29b5e36155",
        "parentId" : "432b37ce-9d24-43fb-8269-c16f29f633b5",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Thanks!",
        "createdAt" : "2019-03-13T01:17:47Z",
        "updatedAt" : "2019-03-13T21:25:34Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "346a1735a250a8465627f75b830ad8e465f19d34",
    "line" : 307,
    "diffHunk" : "@@ -1,1 +279,283 @@                run.tags.append(SqlTag(key=MLFLOW_RUN_NAME, value=run_name))\n\n            self._save_to_db(objs=run, session=session)\n\n            return run.to_mlflow_entity()"
  },
  {
    "id" : "c03247c6-59fa-416e-976f-548ded8acc35",
    "prId" : 975,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/975#pullrequestreview-213006309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a026d9d6-0ca3-4edb-969e-770d005de662",
        "parentId" : null,
        "authorId" : "defbdbf6-c2b5-4b1e-b40b-da9b7f2d2e74",
        "body" : "Could you use articles (a, the) consistently; either include or drop. Above you have \"Run artifacts are stored in a separate location\".\r\n\r\nDefault artifact locations for user experiments are stored in database  -> Default artifact locations for user experiments are stored in a database or Default artifact locations for user experiments are stored in the database \r\n\r\nstored in backend DB -> stored in a backend DB or stored in the backend DB",
        "createdAt" : "2019-03-11T18:20:17Z",
        "updatedAt" : "2019-03-12T22:28:42Z",
        "lastEditedBy" : "defbdbf6-c2b5-4b1e-b40b-da9b7f2d2e74",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ff9e927c858454f17b62cac2024009d6b32948d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +34,38 @@    user experiments are stored in the database along with metadata. Each run artifact location\n    is recorded in :py:class:`mlflow.store.dbmodels.models.SqlRun` and stored in the backend DB.\n    \"\"\"\n    ARTIFACTS_FOLDER_NAME = \"artifacts\"\n"
  },
  {
    "id" : "aa2a6273-1b1b-4338-9859-9f2c530c493c",
    "prId" : 975,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/975#pullrequestreview-213006400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07780e12-1396-49f5-8a88-b2442f166eb8",
        "parentId" : null,
        "authorId" : "defbdbf6-c2b5-4b1e-b40b-da9b7f2d2e74",
        "body" : "meta data -> metadata",
        "createdAt" : "2019-03-11T18:20:25Z",
        "updatedAt" : "2019-03-12T22:28:42Z",
        "lastEditedBy" : "defbdbf6-c2b5-4b1e-b40b-da9b7f2d2e74",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ff9e927c858454f17b62cac2024009d6b32948d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +22,26 @@    \"\"\"\n    SQLAlchemy compliant backend store for tracking meta data for MLflow entities. Currently\n    supported database types are ``mysql``, ``mssql``, ``sqlite``, and ``postgresql``. This store\n    interacts with SQL store using SQLAlchemy abstractions defined for MLflow entities.\n    :py:class:`mlflow.store.dbmodels.models.SqlExperiment`,"
  },
  {
    "id" : "2986acf9-00b0-4bfa-951e-3dc84c33b243",
    "prId" : 975,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/975#pullrequestreview-213666697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "801e000c-7533-4907-89e9-a25cdb833732",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Nice!",
        "createdAt" : "2019-03-12T21:44:18Z",
        "updatedAt" : "2019-03-12T22:28:42Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ff9e927c858454f17b62cac2024009d6b32948d",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +81,85 @@        MySQL and other implementation do not allow value '0' for such cases.\n\n        ToDo: Identify a less hacky mechanism to create default experiment 0\n        \"\"\"\n        table = SqlExperiment.__tablename__"
  },
  {
    "id" : "a036f6b6-4170-449e-982a-7dc6c7b66d88",
    "prId" : 972,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/972#pullrequestreview-214752500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "494ff81a-dd76-4b84-ae16-af7a1d657cf5",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Adding `value` to PK constraint is a good idea.\r\n\r\nLike the cleanup here. Neat! Is there any other possibility of an `IntegrityError` which would get exposed to client?",
        "createdAt" : "2019-03-14T20:39:12Z",
        "updatedAt" : "2019-03-18T16:12:25Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "df37daa8-e2c0-4af6-b666-481c11184fb2",
        "parentId" : "494ff81a-dd76-4b84-ae16-af7a1d657cf5",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "The `IntegrityError` will be caught and reraised as an `MlflowException` (see https://github.com/mlflow/mlflow/blob/a7272b7309b6d53e70afe7c19dc3ca383962261a/mlflow/store/sqlalchemy_store.py#L89)",
        "createdAt" : "2019-03-14T20:40:29Z",
        "updatedAt" : "2019-03-18T16:12:25Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "acc3f9a2-4ee7-4eb1-9cfd-d34223bbd3d5",
        "parentId" : "494ff81a-dd76-4b84-ae16-af7a1d657cf5",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Gotchya! Thanks...",
        "createdAt" : "2019-03-14T20:41:32Z",
        "updatedAt" : "2019-03-18T16:12:25Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd948199e87d88587d2c4b07fd6e6724dc6e8bdc",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +344,348 @@            self._check_run_is_active(run)\n            # ToDo: Consider prior checks for null, type, metric name validations, ... etc.\n            self._get_or_create(model=SqlMetric, run_uuid=run_uuid, key=metric.key,\n                                value=metric.value, timestamp=metric.timestamp, session=session)\n"
  },
  {
    "id" : "fbb55b61-04ad-4bf2-a09a-e32a5faaed95",
    "prId" : 950,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/950#pullrequestreview-210990595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8338d55d-e3ca-4098-831c-307115f1bc68",
        "parentId" : null,
        "authorId" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "body" : "Allow SetTag to overwrite existing tag values for idempotency",
        "createdAt" : "2019-03-06T00:25:01Z",
        "updatedAt" : "2019-03-07T01:09:36Z",
        "lastEditedBy" : "bd3067fd-855b-4bd1-898d-ca29199fd092",
        "tags" : [
        ]
      }
    ],
    "commit" : "48b89a1e57e719f5e9a8c164be6892ba07b1b58f",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +337,341 @@        run = self._get_run(run_uuid)\n        self._check_run_is_active(run)\n        self.session.merge(SqlTag(run_uuid=run_uuid, key=tag.key, value=tag.value))\n        self.session.commit()\n"
  },
  {
    "id" : "933a4ab1-6be2-4cb4-a214-517a830c9dec",
    "prId" : 860,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/860#pullrequestreview-199339972",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7ba782c-24c8-46b6-ad03-51bd837b98a5",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "There must be some way to SQL inject here by setting a clever artifact URI...",
        "createdAt" : "2019-02-01T16:25:24Z",
        "updatedAt" : "2019-02-04T07:17:12Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "56c516eb-5e35-4ada-8985-b5f1d5aa7896",
        "parentId" : "f7ba782c-24c8-46b6-ad03-51bd837b98a5",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Let's fix this separately...",
        "createdAt" : "2019-02-02T08:17:45Z",
        "updatedAt" : "2019-02-04T07:17:12Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb3cf583131d805f4d5cf86122b01c099393d4c4",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +73,77 @@        # Get a list of keys to ensure we have a deterministic ordering\n        columns = list(default_experiment.keys())\n        values = \", \".join([decorate(default_experiment.get(c)) for c in columns])\n\n        try:"
  },
  {
    "id" : "12ab7797-3354-48d0-b9ae-70db533330e2",
    "prId" : 860,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/860#pullrequestreview-199143446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad5e787a-bea5-4f06-a472-f2c064018180",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "This seems a little off -- since we `commit` the session in `_save_to_db`, isn't it possible that if the second `save_to_db` fails, we roll it back but keep the experiment in the database with a None artifact location?\r\n\r\nMaybe this isn't the case, but I would expect logic something like\r\n\r\n```\r\nsession = newSession()\r\ninsertExperiment(session)\r\ngetExperiment(session)\r\nupdateExperiment(session)\r\nsession.commit()\r\n```",
        "createdAt" : "2019-02-01T16:29:02Z",
        "updatedAt" : "2019-02-04T07:17:12Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb3cf583131d805f4d5cf86122b01c099393d4c4",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +129,133 @@                experiment.artifact_location = self._get_artifact_location(eid)\n            new_session.commit()\n        except sqlalchemy.exc.IntegrityError as e:\n            new_session.rollback()\n            raise MlflowException('Experiment(name={}) already exists. '"
  },
  {
    "id" : "c63bdea8-2170-4542-be64-f347b840ddef",
    "prId" : 860,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/860#pullrequestreview-199446455",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3618e045-4f44-44b8-b2ca-946f1a516720",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Btw, were you able to test this with the other supported database engines (postgres/mssql)? Or do we have reason to believe this weirdness only applies to MySQL?",
        "createdAt" : "2019-02-03T18:33:33Z",
        "updatedAt" : "2019-02-04T07:17:12Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "dcd9336f-754d-4b55-9010-a2e893ee6c2f",
        "parentId" : "3618e045-4f44-44b8-b2ca-946f1a516720",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Haven't tried postgreSQL. MariaDB (for example) has a different setting needed for this.",
        "createdAt" : "2019-02-04T06:10:35Z",
        "updatedAt" : "2019-02-04T07:17:12Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb3cf583131d805f4d5cf86122b01c099393d4c4",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +41,45 @@    # DB helper methods to allow zero values for columns with auto increments\n    def _set_no_auto_for_zero_values(self):\n        if self.db_type == MYSQL:\n            self.session.execute(\"SET @@SESSION.sql_mode='NO_AUTO_VALUE_ON_ZERO';\")\n"
  },
  {
    "id" : "c44cfae1-d604-4ab2-8828-e47deb9b5f71",
    "prId" : 860,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/860#pullrequestreview-199446228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "271d25f2-983b-4057-b629-23d5bf257860",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "This is magic! Cool!",
        "createdAt" : "2019-02-03T18:34:30Z",
        "updatedAt" : "2019-02-04T07:17:12Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "7d952c2d-68ce-4851-9049-e7c4c0c5aa80",
        "parentId" : "271d25f2-983b-4057-b629-23d5bf257860",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Your idea! Weird that it works ... but then again, using local session for this was needed.",
        "createdAt" : "2019-02-04T06:08:46Z",
        "updatedAt" : "2019-02-04T07:17:12Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb3cf583131d805f4d5cf86122b01c099393d4c4",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +128,132 @@                eid = new_session.query(SqlExperiment).filter_by(name=name).first().experiment_id\n                experiment.artifact_location = self._get_artifact_location(eid)\n            new_session.commit()\n        except sqlalchemy.exc.IntegrityError as e:\n            new_session.rollback()"
  },
  {
    "id" : "acd64397-0845-4103-8bf6-facd43214111",
    "prId" : 848,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/848#pullrequestreview-196903046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1128932b-2db7-4837-ad95-5f3c0f7d4aac",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "moved getters near setters for metrics, params, tags.",
        "createdAt" : "2019-01-28T07:42:42Z",
        "updatedAt" : "2019-01-29T20:45:54Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "52062a76a40485d0dae849d6e5ede7e4766c9c88",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +213,217 @@                                      INVALID_PARAMETER_VALUE)\n\n    def get_metric(self, run_uuid, metric_key):\n        metric = self.session.query(SqlMetric).filter_by(\n            run_uuid=run_uuid, key=metric_key"
  },
  {
    "id" : "0ab8b398-c082-4eb0-83ee-9744f6d214c6",
    "prId" : 848,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/848#pullrequestreview-197707292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c635dd7a-6f0e-4ed4-b03e-6f0bf2c1742a",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Will this session actually relate to the get_or_create call? What would cause the session to be persistent?",
        "createdAt" : "2019-01-29T18:15:38Z",
        "updatedAt" : "2019-01-29T20:45:54Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "fcd0d3b8-824e-46c9-8499-619a973740c2",
        "parentId" : "c635dd7a-6f0e-4ed4-b03e-6f0bf2c1742a",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "As I read it, it is an internal state management issue before calling DB again. Calling `run.metrics` entails a DB query due to `backref`",
        "createdAt" : "2019-01-29T18:17:31Z",
        "updatedAt" : "2019-01-29T20:47:11Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "52062a76a40485d0dae849d6e5ede7e4766c9c88",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +241,245 @@            # Querying metrics from run entails pushing the query down to DB layer.\n            # Hence the rollback.\n            self.session.rollback()\n            existing_params = [p.value for p in run.params if p.key == param.key]\n            if len(existing_params) == 0:"
  },
  {
    "id" : "aac17814-aa50-47fc-a554-b90ad0db695f",
    "prId" : 844,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/844#pullrequestreview-196642943",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a551a51b-680a-4d5d-b9d5-ab609015f4ff",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Btw, a couple things I noticed while trying to get this to work in the UI:\r\n\r\n- source_type and status should remain integers in order for the conversion to-and-from MLflow entities to work (as opposed to being stored as the string representation).\r\n- We will need to include some notion of an artifact_directory within sqlalchemy_store in order to propagate this to newly-created experiments that do not specify an artifact_location.\r\n- Graph display of metrics seems to not quite be the right type (`AttributeError: 'float' object has no attribute 'to_proto'`).\r\n\r\nBesides these three, the basics of MLflow and UI (including search) do seem to work!",
        "createdAt" : "2019-01-25T17:17:58Z",
        "updatedAt" : "2019-01-26T06:36:03Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "7448fa59-164b-4805-98ff-a31f18eb63ee",
        "parentId" : "a551a51b-680a-4d5d-b9d5-ab609015f4ff",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Thanks! We certainly need to address for an end-to-end working SQL store. I can handle those in a following PR.",
        "createdAt" : "2019-01-25T18:25:16Z",
        "updatedAt" : "2019-01-26T06:36:03Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbe048081a3d81054cd143234fe8d2f6120035a9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +11,15 @@    INVALID_STATE, RESOURCE_DOES_NOT_EXIST\nfrom mlflow.utils.mlflow_tags import MLFLOW_PARENT_RUN_ID, MLFLOW_RUN_NAME\nfrom mlflow.utils.search_utils import does_run_match_clause\n\n"
  },
  {
    "id" : "c79e8a8e-583b-43bd-9c47-fb51a05f75b0",
    "prId" : 844,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/844#pullrequestreview-196642134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3847f1c6-e9a4-4bb6-b9ab-27d626208e87",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "`all([])` is True -- do we need the if statement before?",
        "createdAt" : "2019-01-25T17:20:32Z",
        "updatedAt" : "2019-01-26T06:36:03Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "23e9e624-8a84-402c-8495-4395c89e6d50",
        "parentId" : "3847f1c6-e9a4-4bb6-b9ab-27d626208e87",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Don't think we need a check. `len(search_expressions)` should take care of legit empty search expression cases. We should not see any other scenarios of empty list sent to `all`.\r\n\r\nIf a future bug gets introduced in `does_run_match_clause` whereby one of the branches exits without a return value the function will return a `None` and `all` handles that well.",
        "createdAt" : "2019-01-25T18:23:22Z",
        "updatedAt" : "2019-01-26T06:36:03Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbe048081a3d81054cd143234fe8d2f6120035a9",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +234,238 @@        if len(search_expressions) == 0:\n            return runs\n        return [r for r in runs if all([does_run_match_clause(r, s) for s in search_expressions])]\n\n    def _list_runs(self, experiment_id, run_view_type):"
  },
  {
    "id" : "af1c64ed-5b25-44ed-be46-5f0df0268d17",
    "prId" : 756,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/756#pullrequestreview-187235051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f4a8fc4-6628-4785-93c7-878ba66e9dac",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Will this work in all types of sql database backends? Would be an error if it creates a new one that overwrites older one.\r\n\r\n**NOTE** : For performance, what we are seeing is that almost all of these get_param/metric/tag queries should be batched for several `run_uuid`s. But we can take care of that later on as a follow on refactor.",
        "createdAt" : "2018-12-21T07:30:25Z",
        "updatedAt" : "2018-12-27T09:17:47Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec345999d4f624725541bc341300b529c32b480c",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +189,193 @@    def log_param(self, run_uuid, param):\n        # if we try to update the value of an existing param this will fail\n        # because it will try to create it with same run_uuid, param key\n        try:\n            self._get_or_create(SqlParam, run_uuid=run_uuid, key=param.key,"
  }
]