[
  {
    "id" : "2e74d894-20e9-4184-b9b3-4e3a58eecc2b",
    "prId" : 3263,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3263#pullrequestreview-467285231",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab3b2edd-8e27-4c7b-9d57-b40b6c4ed910",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Can we document the class constructor with information about the `clazz` and `allow_children` parameters & also document the `should_log()` method with information about the behavior?",
        "createdAt" : "2020-08-14T03:31:58Z",
        "updatedAt" : "2020-08-14T18:30:37Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef19823243b03c3e0e642383cfa3a594f58fb0e6",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +431,435 @@# 2. The list append & pop operations are thread-safe, so we will always clear the session stack\n#    once all _SklearnTrainingSessions exit.\nclass _SklearnTrainingSession(object):\n    _session_stack = []\n"
  },
  {
    "id" : "585dfa25-6c68-4a97-bbd7-0952e5b6bec1",
    "prId" : 3263,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3263#pullrequestreview-467286915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79b6a80a-7cbc-49da-a34b-0cecd4e67d75",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Can we include some information about the lack of thread safety guarantees for this class and why that's okay for now? I.e., 1. we don't currently have any use cases for `allow_children=True` and 2. the list `append` & `pop` operations are thread-safe, so we will always clear the session stack once all `SklearnTrainingSessions` exit.\r\n\r\nIn the future, we'll need to figure out how to handle multithreaded backends.",
        "createdAt" : "2020-08-14T03:38:31Z",
        "updatedAt" : "2020-08-14T18:30:37Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef19823243b03c3e0e642383cfa3a594f58fb0e6",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +431,435 @@# 2. The list append & pop operations are thread-safe, so we will always clear the session stack\n#    once all _SklearnTrainingSessions exit.\nclass _SklearnTrainingSession(object):\n    _session_stack = []\n"
  },
  {
    "id" : "cc069e9e-b30f-46fe-b7f6-8fc2549074a9",
    "prId" : 3263,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3263#pullrequestreview-467770059",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1745372-7638-4ac2-a8e7-4ac1362792f0",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "@dbczumar What do you think about providing some examples here like below to clarify how this class behaves?\r\n\r\n```python\r\n\r\n>>> with _SklearnTrainingSession(Parent, False) as p:\r\n...     with _SklearnTrainingSession(Child, True) as c:\r\n...         with _SklearnTrainingSession(Grandchild, True) as g:\r\n...             print(p.should_log())  # -> True\r\n...             print(c.should_log())  # -> False\r\n...             print(g.should_log())  # -> False\r\n\r\n>>> with _SklearnTrainingSession(Parent, True) as p:\r\n...    with _SklearnTrainingSession(Child, False) as c:\r\n...        with _SklearnTrainingSession(Grandchild, True) as g:\r\n...            print(p.should_log())  # -> True\r\n...            print(c.should_log())  # -> True\r\n...            print(g.should_log())  # -> False\r\n```",
        "createdAt" : "2020-08-14T18:02:30Z",
        "updatedAt" : "2020-08-14T18:30:37Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      },
      {
        "id" : "9a073a46-11e6-4bf7-8d46-399e3dfa3e3a",
        "parentId" : "a1745372-7638-4ac2-a8e7-4ac1362792f0",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Sure! An example like this seems valuable to include",
        "createdAt" : "2020-08-14T18:04:53Z",
        "updatedAt" : "2020-08-14T18:30:37Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef19823243b03c3e0e642383cfa3a594f58fb0e6",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +440,444 @@        :param clazz: A class object that this session originates from.\n        :param allow_children: If True, allows autologging in child sessions.\n                               If False, disallows autologging in all descendant sessions.\n\n        Example:"
  },
  {
    "id" : "0c07869e-eff0-4b70-9cbb-52711880020f",
    "prId" : 3263,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3263#pullrequestreview-467791867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ebd1a0a-0778-4371-9088-c6a7d129adf5",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "Used doctest syntax here so we can test this example by running:\r\n\r\n```\r\npytest --doctest-modules mlflow/sklearn.py\r\n```",
        "createdAt" : "2020-08-14T18:26:23Z",
        "updatedAt" : "2020-08-14T18:30:37Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef19823243b03c3e0e642383cfa3a594f58fb0e6",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +456,460 @@        True\n        False\n        False\n\n        >>> with _SklearnTrainingSession(Parent, True) as p:"
  },
  {
    "id" : "e115332a-2601-4513-810b-2b4ab70d2826",
    "prId" : 3054,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3054#pullrequestreview-442829054",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f202794c-c964-4f6c-8f89-d171fd9b7362",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@AnesBenmerzoug The serialization format used to persist the model is stored in the `mlflow.sklearn` flavor configuration within the MLmodel file. This attribute is added here: https://github.com/mlflow/mlflow/blob/136669748dc0a1aeef92ece3f125fc56c6094e29/mlflow/sklearn.py#L174\r\n\r\nInstead of adding a `serialization_format` argument, can we read the value from the flavor configuration and use that format accordingly?",
        "createdAt" : "2020-07-06T06:50:21Z",
        "updatedAt" : "2020-07-09T22:30:31Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "ef56ffe0-21f6-4128-b41b-d5145fcc6328",
        "parentId" : "f202794c-c964-4f6c-8f89-d171fd9b7362",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "If the MLmodel file does not contain a serialization format entry (which might be the case in very old versions of MLflow), we can assume that the value is `pickle`.",
        "createdAt" : "2020-07-06T06:52:23Z",
        "updatedAt" : "2020-07-09T22:30:31Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "9fd55c5a-7161-4afa-bd0c-e59e8277fe28",
        "parentId" : "f202794c-c964-4f6c-8f89-d171fd9b7362",
        "authorId" : "310a58b0-340f-4830-8462-a6b68b91f9dd",
        "body" : "Thanks @dbczumar for the information. I did not know about this.\r\nThis should make it easier for the load_model function, but what about the _load_pyfunc ? For what I see, it does not have access to the configuration file",
        "createdAt" : "2020-07-06T07:09:11Z",
        "updatedAt" : "2020-07-09T22:30:31Z",
        "lastEditedBy" : "310a58b0-340f-4830-8462-a6b68b91f9dd",
        "tags" : [
        ]
      },
      {
        "id" : "6d8d491f-2729-4d03-8c9c-8951f8e27b4a",
        "parentId" : "f202794c-c964-4f6c-8f89-d171fd9b7362",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "@AnesBenmerzoug That's a really good point! Ideally, it would be nice if the path to the directory containing the MLmodel configuration were passed to `_load_pyfunc`. We can make this happen for all future models by removing the `data` argument here - https://github.com/mlflow/mlflow/blob/master/mlflow/sklearn.py#L169 - and replacing it with a different key name (e.g., `model_path`). \r\n\r\nThe MLflow pyfunc loader has a special interpretation of the `data` field in the MLmodel flavor configuration; if it's present, only the path referred to by `data` is passed to `_load_pyfunc`. Otherwise, the path to the model directory is passed to `_load_pyfunc` (see https://github.com/mlflow/mlflow/blob/136669748dc0a1aeef92ece3f125fc56c6094e29/mlflow/pyfunc/__init__.py#L472)\r\n\r\nIf we make this change and remove `data`, the MLmodel file will become accessible within `mlflow.sklearn._load_pyfunc`. We'll still want to remain backwards compatible with older models that specify the `data` field, so our `mlflow.sklearn._load_pyfunc` function should check to see if `path` refers to an MLflow model directory or to a file and perform the appropriate routine.\r\n\r\nLet me know if this makes sense!",
        "createdAt" : "2020-07-06T07:20:45Z",
        "updatedAt" : "2020-07-09T22:30:31Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9856602f90847b6a4831347a0b805a3906eb688",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +265,269 @@\n\ndef _load_model_from_local_file(path, serialization_format):\n    \"\"\"Load a scikit-learn model saved as an MLflow artifact on the local file system.\n"
  },
  {
    "id" : "0ae2815c-7c86-4e69-9c1c-f4eae4ea2129",
    "prId" : 3054,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3054#pullrequestreview-445371410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c98278cf-9751-41e7-badb-540503de65a7",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Thanks for fixing this! This seems to be the crux of the issue (we should not have assumed that `pickle.load()` would continue to remain compatible with Cloudpickle as the package evolves).",
        "createdAt" : "2020-07-06T06:51:12Z",
        "updatedAt" : "2020-07-09T22:30:31Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "2098b3a8-5f10-48ed-b8f9-d38c7078d76f",
        "parentId" : "c98278cf-9751-41e7-badb-540503de65a7",
        "authorId" : "2babdf54-ea0c-4e50-971f-35dcc6f6aae2",
        "body" : "`cloudpickle` developer here. You are right, when `pickle5` is installed ,`cloudpickle`-generated pickle strings cannot be unserialized using `pickle.load`. They **can** be unserialized using either\r\n\r\n- `cloudpickle.load`\r\n- `pickle5.load`\r\n\r\nJust to clarify: `cloudpickle` did not deviate from the `pickle` API, it simply uses `pickle5` as a drop-in replacement of `pickle` (hence the compatibility with `pickle5.load)`. However, this is a breaking change and deserves at least a message in the `README`.",
        "createdAt" : "2020-07-08T09:40:49Z",
        "updatedAt" : "2020-07-09T22:30:31Z",
        "lastEditedBy" : "2babdf54-ea0c-4e50-971f-35dcc6f6aae2",
        "tags" : [
        ]
      },
      {
        "id" : "a2e932be-d1a6-4197-a80d-b59412d1d846",
        "parentId" : "c98278cf-9751-41e7-badb-540503de65a7",
        "authorId" : "310a58b0-340f-4830-8462-a6b68b91f9dd",
        "body" : "@pierreglaser you're right, this deserves to be mentioned as it may cause issues for certain people.",
        "createdAt" : "2020-07-09T07:51:50Z",
        "updatedAt" : "2020-07-09T22:30:31Z",
        "lastEditedBy" : "310a58b0-340f-4830-8462-a6b68b91f9dd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9856602f90847b6a4831347a0b805a3906eb688",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +283,287 @@                error_code=INVALID_PARAMETER_VALUE)\n    with open(path, \"rb\") as f:\n        # Models serialized with Cloudpickle cannot necessarily be deserialized using Pickle;\n        # That's why we check the serialization format of the model before deserializing\n        if serialization_format == SERIALIZATION_FORMAT_PICKLE:"
  },
  {
    "id" : "34bb3c59-06cb-429e-90fd-8ebf8760b886",
    "prId" : 1223,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1223#pullrequestreview-235737997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8deee06-7c41-4818-b65a-333d996cc90c",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Other flavor definitions use top-level imports for dependencies that are not installed by MLflow directly (e.g., `mlflow.tensorflow`) and define a module-level `DEFAULT_CONDA_ENV` variable. For consistency, we should update the other flavors or continue to use top-level imports (afaik, we haven't received complaints about the current paradigm).",
        "createdAt" : "2019-05-08T21:52:46Z",
        "updatedAt" : "2019-05-10T21:22:02Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "c9f5d9fb-1680-4fbe-9d55-ea0139a4e0c3",
        "parentId" : "a8deee06-7c41-4818-b65a-333d996cc90c",
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "Hmm, the problem with top-level imports is that if any internal code imports the module in order to use any other methods or variables, it will fail at module load time. For example, how the sagemaker code uses mleap -- it doesn't always need it, but it would suddenly require scikit-learn if it were top-level.",
        "createdAt" : "2019-05-09T15:15:13Z",
        "updatedAt" : "2019-05-10T21:22:02Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "86203ff2-f8eb-4912-a3c4-fd9931ec1eb0",
        "parentId" : "a8deee06-7c41-4818-b65a-333d996cc90c",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "That's fair. I'll update the other flavor modules accordingly!",
        "createdAt" : "2019-05-09T17:59:47Z",
        "updatedAt" : "2019-05-10T21:22:02Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "155b9201532587e04a63c477e3af3cc9f20db926",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +30,34 @@\n\ndef get_default_conda_env():\n    import sklearn\n    return _mlflow_conda_env("
  },
  {
    "id" : "48cd2eec-0eb1-4128-9997-8477f5cb29ff",
    "prId" : 1223,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1223#pullrequestreview-235958937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29eaf374-17d8-4cf4-8c72-f1dd120fd657",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "I think we should add method docs here since this is a public method",
        "createdAt" : "2019-05-10T07:02:30Z",
        "updatedAt" : "2019-05-10T21:22:02Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "da89fc29-ebcc-4b5c-a6cc-f31da8d828ec",
        "parentId" : "29eaf374-17d8-4cf4-8c72-f1dd120fd657",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "I've filed https://github.com/mlflow/mlflow/pull/1238/ which makes this change and adds docs for all relevant flavors, including `sklearn`.",
        "createdAt" : "2019-05-10T07:24:04Z",
        "updatedAt" : "2019-05-10T21:22:02Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "155b9201532587e04a63c477e3af3cc9f20db926",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +30,34 @@\n\ndef get_default_conda_env():\n    import sklearn\n    return _mlflow_conda_env("
  },
  {
    "id" : "f6fbca9c-770c-46a2-8bbc-639f7f0193e6",
    "prId" : 1223,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/1223#pullrequestreview-235958857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca336965-4150-4890-b2fc-22a09e5d2cc4",
        "parentId" : null,
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "Nit: can we change this to \r\n```\r\n:func:`get_default_conda_env()`\r\n```\r\nalong with the other 3 instances? ",
        "createdAt" : "2019-05-10T07:03:42Z",
        "updatedAt" : "2019-05-10T21:22:02Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "31d1180a-c231-4362-a08c-570147deb8ff",
        "parentId" : "ca336965-4150-4890-b2fc-22a09e5d2cc4",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "I've filed https://github.com/mlflow/mlflow/pull/1238/ which makes this change for all relevant flavors, including `sklearn`.",
        "createdAt" : "2019-05-10T07:23:51Z",
        "updatedAt" : "2019-05-10T21:22:02Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "155b9201532587e04a63c477e3af3cc9f20db926",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +59,63 @@                      Conda environment yaml file. If provided, this decribes the environment\n                      this model should be run in. At minimum, it should specify the dependencies\n                      contained in ``mlflow.sklearn.get_default_conda_env()``. If `None`, the\n                      default ``mlflow.sklearn.get_default_conda_env()`` environment will be added\n                      to the model."
  },
  {
    "id" : "8d78e567-8260-402d-a746-1b867914ef17",
    "prId" : 705,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/705#pullrequestreview-173632015",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a4a7605-964f-45b6-bd54-baa7760fcf31",
        "parentId" : null,
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "I would maybe turn this into a function taking a path and returning path instead. Then you don't need to change environemt._mlflow_conda_env and I think global function is preferable to global string",
        "createdAt" : "2018-11-09T23:03:44Z",
        "updatedAt" : "2018-11-11T06:17:08Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      },
      {
        "id" : "985815da-08af-4144-8376-c12252f037e8",
        "parentId" : "6a4a7605-964f-45b6-bd54-baa7760fcf31",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "If we define a `_get_conda_env` function, there are two options:\r\n\r\n1. **Define `_get_conda_env` so that it writes the conda environment to a specific output path**. This means that users inspecting the default environment will have to figure out how to call the function with the path argument and examine an output file, rather than just accessing the string variable.\r\n\r\n2. **Define `_get_conda_env` so that it returns conda environment text**. In this case, we still need to change `_mlflow_conda_env`. This function would just wrap a call to `_mlflow_conda_env` without any additional logic; it seems like assigning the output of this call to a string variable works well and is consistent with our global variable definitions like `mlflow.sklearn.FLAVOR_NAME`.\r\n\r\nLet me know if you feel strongly about this!",
        "createdAt" : "2018-11-09T23:28:08Z",
        "updatedAt" : "2018-11-11T06:17:08Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      },
      {
        "id" : "8685fd0d-a246-48c7-9f4a-b9f6cecd064f",
        "parentId" : "6a4a7605-964f-45b6-bd54-baa7760fcf31",
        "authorId" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "body" : "Discussed offline, looks good now!",
        "createdAt" : "2018-11-09T23:54:34Z",
        "updatedAt" : "2018-11-11T06:17:08Z",
        "lastEditedBy" : "d79ebb0f-0833-4329-8a37-7ae540003587",
        "tags" : [
        ]
      }
    ],
    "commit" : "57ec455f3e4bce45c2aff6f0896a13299b8a9fb9",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +29,33 @@FLAVOR_NAME = \"sklearn\"\n\nDEFAULT_CONDA_ENV = _mlflow_conda_env(\n    additional_conda_deps=[\n        \"scikit-learn={}\".format(sklearn.__version__),"
  },
  {
    "id" : "9ee035ed-64d3-41ec-8fe6-6758c7dd00ad",
    "prId" : 653,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/653#pullrequestreview-167035015",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c70988c-b67a-4a05-9829-ff7342f1fa82",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "`model_data_subpath` variable name sounds more confusing.\r\n`model_file` or `model_file_name` was more explicit what this was doing...",
        "createdAt" : "2018-10-20T05:31:54Z",
        "updatedAt" : "2018-10-23T17:46:50Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      },
      {
        "id" : "482e75ed-5233-4c7c-bc1d-d5bf46c8f3ed",
        "parentId" : "5c70988c-b67a-4a05-9829-ff7342f1fa82",
        "authorId" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "body" : "I disagree. `model_data_subpath` is meant to indicate that the specified path is a relative path to model data. `model_file` seems more generic: for example, we refer to model configurations (`mlflow.models.Model`) as \"models\", yet that's not what \"model.pkl\" is referring to. Additionally, defining this path as a variable seems preferable to using multiple instances of the inline \"model.pkl\" string.\r\n\r\nLet me know if there's a variable name that you would prefer.",
        "createdAt" : "2018-10-22T18:03:32Z",
        "updatedAt" : "2018-10-23T17:46:50Z",
        "lastEditedBy" : "3f60ced2-d2f0-4cc5-9898-5aefe16e0be8",
        "tags" : [
        ]
      }
    ],
    "commit" : "516e1ed8734a4ca0a5dbf2b88ccb844c232dd409",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +86,90 @@        raise Exception(\"Path '{}' already exists\".format(path))\n    os.makedirs(path)\n    model_data_subpath = \"model.pkl\"\n    _save_model(sk_model=sk_model, output_path=os.path.join(path, model_data_subpath),\n                serialization_format=serialization_format)"
  }
]