[
  {
    "id" : "aef67ccb-bca5-44f7-b229-fa896dc647e4",
    "prId" : 10462,
    "prUrl" : "https://github.com/flutter/flutter/pull/10462#pullrequestreview-42100644",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0d16b1f-8ad5-4925-9460-09a6fd8b727b",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Have you considered using `new List.generate()`? It gives you access to index, but handles list length and index advancement for you.",
        "createdAt" : "2017-06-04T05:08:43Z",
        "updatedAt" : "2017-06-05T17:46:46Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "ad01e25b-e80e-48b7-ab9a-abd067c4729f",
        "parentId" : "e0d16b1f-8ad5-4925-9460-09a6fd8b727b",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I did. The (micro) advantage of coding it this way is that uploads is a fixed-length list.",
        "createdAt" : "2017-06-05T17:17:36Z",
        "updatedAt" : "2017-06-05T17:46:46Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d66569b01153d5b37b903ee0fb9cf6e25791ac5",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +95,99 @@  List<Upload> uploads = new List<Upload>(fromPaths.length);\n  for (int index = 0; index < uploads.length; index += 1)\n    uploads[index] = new Upload(fromPaths[index], largeNames[index], smallNames[index]);\n\n  final HttpClient client = new HttpClient();"
  },
  {
    "id" : "bb9dc4c3-703b-487a-8eeb-8e685bbfe7a7",
    "prId" : 10462,
    "prUrl" : "https://github.com/flutter/flutter/pull/10462#pullrequestreview-42103699",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e22f76f-a35d-4de2-986a-f268a87f451f",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Can `client` be moved into the constructor? It does not seem to ever change.",
        "createdAt" : "2017-06-04T05:12:10Z",
        "updatedAt" : "2017-06-05T17:46:46Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "97137e53-305c-445c-bf9b-3bedf5a6cdd9",
        "parentId" : "2e22f76f-a35d-4de2-986a-f268a87f451f",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Yes it could have been.  I'd anticipated creating more than one client connection and late-binding them to the the run/save methods. In the event of a retry, I could use whatever client was available. It's all theory, we'll need to see how this code behaves in practice.",
        "createdAt" : "2017-06-05T17:30:00Z",
        "updatedAt" : "2017-06-05T17:46:46Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d66569b01153d5b37b903ee0fb9cf6e25791ac5",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@  }\n\n  Future<bool> save(HttpClient client, String name, List<int> content) async {\n    try {\n      final Uri uri = new Uri.https(uriAuthority, uriPath, <String, String>{"
  }
]