[
  {
    "id" : "970eee7d-9448-44a8-b9b5-a7a70046a416",
    "prId" : 7929,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7929",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1ccd396-e67a-4faa-86cd-a56c10ea3a2e",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Can we get a test case for this logic?",
        "createdAt" : "2020-11-11T12:22:01Z",
        "updatedAt" : "2020-11-16T13:20:16Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "06779bf8-56c0-4f81-afb4-dae6eb5bf1ad",
        "parentId" : "f1ccd396-e67a-4faa-86cd-a56c10ea3a2e",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "I think there is already one in PortFilesSpec. But yes, I'll check that there are tests, this is still a draft, I want to see all the tests that are failing now.",
        "createdAt" : "2020-11-11T12:23:31Z",
        "updatedAt" : "2020-11-16T13:20:16Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "882f2cbba5ab9d34ab438a83453a74196dfdbf65",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +36,40 @@    }\n\n  private def writeUnsafe(path: Path, port: Port): Unit = {\n    val lines: java.lang.Iterable[String] = List(port.value.toString).asJava\n    val tmpFile = Files.createTempFile(\"portfile\", \"\")"
  },
  {
    "id" : "0f64fc16-3444-4ee2-8a4e-8fd9dc698790",
    "prId" : 7929,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7929",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea37060e-476c-4571-a576-d8ea28999330",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "There is an `ATOMIC_MOVE` flag, maybe we should use that and fall back to a non-atomic move if we have to? I’m not quite sure if not using that flag is equivalent to that or if it will always be non-atomic.",
        "createdAt" : "2020-11-11T13:08:22Z",
        "updatedAt" : "2020-11-16T13:20:16Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c96c2a9a-7194-4b5c-b35f-0530a95b81ce",
        "parentId" : "ea37060e-476c-4571-a576-d8ea28999330",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "I was thinking the same thing when I read the docs. Not sure if ATOMIC_MOVE is the default or if we need to set it explicitly and deal with the possibility that the atomic move is not possible on a system.",
        "createdAt" : "2020-11-11T13:10:41Z",
        "updatedAt" : "2020-11-16T13:20:16Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "f5d3d1b5-dca9-4e0b-8ac5-c3710afa58a4",
        "parentId" : "ea37060e-476c-4571-a576-d8ea28999330",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I guess if the docs are unclear, trying the atomic move first is the safe option? :shrug: ",
        "createdAt" : "2020-11-11T13:11:49Z",
        "updatedAt" : "2020-11-16T13:20:16Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "96cffa79-c979-40d1-9bac-39b20a85e186",
        "parentId" : "ea37060e-476c-4571-a576-d8ea28999330",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "From the [docs](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#move-java.nio.file.Path-java.nio.file.Path-java.nio.file.CopyOption...-):\r\n\r\n> If the target file exists then it is implementation specific if the existing file is replaced or this method fails by throwing an IOException.\r\n\r\nI know this works as you'd expect on Linux but I have no idea about other systems.",
        "createdAt" : "2020-11-11T13:15:39Z",
        "updatedAt" : "2020-11-16T13:20:16Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "2d4043bc-119a-4098-b70e-6cc102fcf333",
        "parentId" : "ea37060e-476c-4571-a576-d8ea28999330",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Based on digging into this a little when writing _ledger-on-filesystem_, I came to the conclusion that on Linux and macOS, it probably does nothing _except_ when you try and move across file systems, in which case it errors because you can't do an atomic move across file systems.\r\n\r\nOn Windows, I _think_ it does nothing, but I'm not sure.",
        "createdAt" : "2020-11-11T13:17:30Z",
        "updatedAt" : "2020-11-16T13:20:16Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "cff70b07-5c16-4d97-be56-21b8452656d5",
        "parentId" : "ea37060e-476c-4571-a576-d8ea28999330",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "That seems like a very questionable API. Why does requesting an atomic move change whether it overwrites a file or not :scream_cat: ",
        "createdAt" : "2020-11-11T13:19:07Z",
        "updatedAt" : "2020-11-16T13:20:16Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "46a76631-6b6f-4b50-abfc-72e0eb8a50ac",
        "parentId" : "ea37060e-476c-4571-a576-d8ea28999330",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "So I added ATOMIC_MOVE, which seems to work just fine on my local system. But a lot of tests are failing now on CI. Does anybody have an idea what's going on? ",
        "createdAt" : "2020-11-12T14:54:48Z",
        "updatedAt" : "2020-11-16T13:20:16Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "9a0cde71-799b-483f-aa51-bb61e291b49a",
        "parentId" : "ea37060e-476c-4571-a576-d8ea28999330",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "> java.nio.file.AtomicMoveNotSupportedException: /home/vsts/.cache/bazel/_bazel_vsts/d5c8b3f1185416e5207d53317d3a7876/sandbox/linux-sandbox/667/execroot/com_github_digital_asset_daml/_tmp/e05013f2f0106511efb2381068335f20/portfile3984526891245692342 -> PortFilesSpec-8504083e-142d-42f8-8bee-d6495e77540d.dummy: Invalid cross-device link\r\n\r\nLooks like the Bazel-allocated temporary directory isn't on the same volume.\r\n\r\nI suggest just turning it off again and calling it best-effort.",
        "createdAt" : "2020-11-12T15:04:49Z",
        "updatedAt" : "2020-11-16T13:20:16Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "dd8e4d67-5b11-4c20-8ea7-a2bb59c36064",
        "parentId" : "ea37060e-476c-4571-a576-d8ea28999330",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "Looks like it's ont that easy. Without `ATOMIC_MOVE` tests fail for me locally, while they pass with the flag set, but don't pass CI...",
        "createdAt" : "2020-11-12T20:03:53Z",
        "updatedAt" : "2020-11-16T13:20:16Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "fe00a4ad-9001-444c-b8b2-0dae8b695ca2",
        "parentId" : "ea37060e-476c-4571-a576-d8ea28999330",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "@robin-da how does it fail locally? Presumably not with the same error?",
        "createdAt" : "2020-11-13T07:52:20Z",
        "updatedAt" : "2020-11-16T13:20:16Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ddbd9b75-e067-4b58-bf66-5ca30a89c2d4",
        "parentId" : "ea37060e-476c-4571-a576-d8ea28999330",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "tests fail with the `portfile not written in time` error. I try now to add a fallback for when `ATOMIC_MOVE` is not supported.\r\n",
        "createdAt" : "2020-11-16T09:54:03Z",
        "updatedAt" : "2020-11-16T13:20:16Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "ab8f6913-0c33-4039-b902-d1031e0fcab4",
        "parentId" : "ea37060e-476c-4571-a576-d8ea28999330",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "huh that seems very odd. Which test is that? I can try to reproduce.",
        "createdAt" : "2020-11-16T09:55:26Z",
        "updatedAt" : "2020-11-16T13:20:16Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a728c3fe-1ce0-4e06-a47a-c177ebdc8d20",
        "parentId" : "ea37060e-476c-4571-a576-d8ea28999330",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "you can try assistant integration tests",
        "createdAt" : "2020-11-16T10:18:29Z",
        "updatedAt" : "2020-11-16T13:20:16Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "15f951dc-32ac-45d6-a71c-6f51be50f1c6",
        "parentId" : "ea37060e-476c-4571-a576-d8ea28999330",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This is expected. daml-helper will use an already existing file as the port file. Here’s the fix:\r\n\r\n```\r\ndiff --git a/daml-assistant/daml-helper/src/DA/Daml/Helper/Start.hs b/daml-assistant/daml-helper/src/DA/Daml/Helper/Start.hs\r\nindex 330954788..7386faa10 100644\r\n--- a/daml-assistant/daml-helper/src/DA/Daml/Helper/Start.hs\r\n+++ b/daml-assistant/daml-helper/src/DA/Daml/Helper/Start.hs\r\n@@ -100,7 +100,8 @@ navigatorURL :: NavigatorPort -> String\r\n navigatorURL (NavigatorPort p) = \"http://localhost:\" <> show p\r\n \r\n withSandbox :: SandboxClassic -> SandboxPortSpec -> [String] -> (Process () () () -> SandboxPort -> IO a) -> IO a\r\n-withSandbox (SandboxClassic classic) portSpec extraArgs a = withTempFile $ \\portFile -> do\r\n+withSandbox (SandboxClassic classic) portSpec extraArgs a = withTempDir $ \\dir -> do\r\n+    let portFile = dir </> \"port-file\"\r\n     let sandbox = if classic then \"sandbox-classic\" else \"sandbox\"\r\n     let args = [ sandbox\r\n                , \"--port\", show (fromSandboxPortSpec portSpec)\r\n```\r\n\r\nHowever this gets us back to `ATOMIC_MOVE` overwriting existing files. I think we just need to not use `ATOMIC_MOVE` and hope that at least on Linux it’s still atomic. I don’t see a way to force an atomic move while not also overwriting the file (any kind of exists check is racy).",
        "createdAt" : "2020-11-16T10:52:18Z",
        "updatedAt" : "2020-11-16T13:20:16Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "0bb14acd-6d88-4f38-a000-20493d83ef32",
        "parentId" : "ea37060e-476c-4571-a576-d8ea28999330",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "ok that fixes it. No more `ATOMIC_MOVE` and :crossed_fingers: .",
        "createdAt" : "2020-11-16T16:20:22Z",
        "updatedAt" : "2020-11-16T16:20:22Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "882f2cbba5ab9d34ab438a83453a74196dfdbf65",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +40,44 @@    val tmpFile = Files.createTempFile(\"portfile\", \"\")\n    Files.write(tmpFile, lines)\n    val created = Files.move(tmpFile, path)\n    created.toFile.deleteOnExit()\n  }"
  }
]