[
  {
    "id" : "13355616-b8a2-4020-9dd6-d46cd3937ede",
    "prId" : 10461,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10461#pullrequestreview-721151865",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0fa5fa7-ebf5-4160-9961-cb964be96496",
        "parentId" : null,
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "I understand it's convenient here but I feel like exposing a cancellation as a resource release changes the connotation (and thus hinders readability), as a cancellation can (and perhaps usually will) also trigger some kind of failure. Is this change much worse off without this additional owner?",
        "createdAt" : "2021-08-03T10:47:56Z",
        "updatedAt" : "2021-08-03T10:48:41Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      },
      {
        "id" : "62db6c4f-37e8-40c4-a024-883e392377af",
        "parentId" : "d0fa5fa7-ebf5-4160-9961-cb964be96496",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I wasn't aware that cancellations can trigger failures. Typically resources are only released when the application is shutting down; isn't this the kind of occasion where if there is something pending, it _should_ get some kind of cancellation error?",
        "createdAt" : "2021-08-03T11:19:17Z",
        "updatedAt" : "2021-08-03T11:19:17Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "aeeffbf0-da82-429d-ba44-fcdf8325cdf9",
        "parentId" : "d0fa5fa7-ebf5-4160-9961-cb964be96496",
        "authorId" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "body" : "Akka doesn't seem to be explicit (for a change, although I must admit that I haven't looked around too long) about whether a `Cancellable` can throw; I was more thinking about (Java) thread interruption though. OK to leave it for me.",
        "createdAt" : "2021-08-03T12:46:42Z",
        "updatedAt" : "2021-08-03T12:46:42Z",
        "lastEditedBy" : "1d70ec7b-8793-4cc6-95c8-fac6f7816dcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "60abf8dce253790b89f22747350d4f3fc1fdfc87",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +13,17 @@) extends AbstractResourceOwner[Context, C] {\n  override def acquire()(implicit context: Context): Resource[Context, C] =\n    ReleasableResource(Future(acquireCancellable()))(cancellable =>\n      Future(cancellable.cancel()).map(_ => ())\n    )"
  }
]