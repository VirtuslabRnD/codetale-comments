[
  {
    "id" : "dc100dee-8ce7-4600-9d8c-cff9f778d8dc",
    "prId" : 8481,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "621d1930-efea-446b-8a78-58f02273ef1c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe also test reflection itself? You claim to expose the backendâ€™s own services but currently you only test that the health endpoint is proxied through not that reflection is proxied through.",
        "createdAt" : "2021-01-12T16:43:44Z",
        "updatedAt" : "2021-01-13T14:14:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "bd68951d-8136-421e-8446-092ffc35a037",
        "parentId" : "621d1930-efea-446b-8a78-58f02273ef1c",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Makes sense. I was just afraid of using the reflection client to not have weird circular dependencies between components, but probably I can find a way to make some form of simplified call just to make sure that the reflection endpoint is exposed.",
        "createdAt" : "2021-01-12T17:03:58Z",
        "updatedAt" : "2021-01-13T14:14:29Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "33870727-8e0d-4fee-9877-5dd5c42f709c",
        "parentId" : "621d1930-efea-446b-8a78-58f02273ef1c",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/8481/commits/a4a7b9021935fa081adcc2f535ca7185dfb0cc12",
        "createdAt" : "2021-01-13T14:15:00Z",
        "updatedAt" : "2021-01-13T14:15:00Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4a7b9021935fa081adcc2f535ca7185dfb0cc12",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +57,61 @@        proxyServer.start()\n        val proxy = InProcessChannelBuilder.forName(proxyName).build()\n        getHealthStatus(backend) shouldEqual getHealthStatus(proxy)\n        listServices(backend) shouldEqual listServices(proxy)\n      }"
  }
]