[
  {
    "id" : "0bd7a4ba-a53b-4c8b-8002-0e89f38b04de",
    "prId" : 8438,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5495357a-e9c4-4aa3-9f7c-d236b0aea788",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe worth using `discard` here?",
        "createdAt" : "2021-01-08T12:08:48Z",
        "updatedAt" : "2021-01-08T16:15:59Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "54acc472-2735-4299-b5bc-e02eb731a271",
        "parentId" : "5495357a-e9c4-4aa3-9f7c-d236b0aea788",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I'm not the biggest fan of pulling in a library to replace 7 characters with 9 other characters, but it looks like it's an accepted pattern, so sure.",
        "createdAt" : "2021-01-08T13:36:56Z",
        "updatedAt" : "2021-01-08T16:15:59Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "8d24ee2f-973d-48ca-869d-258227cfdf49",
        "parentId" : "5495357a-e9c4-4aa3-9f7c-d236b0aea788",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Totally fine not to use it here. I do like the idea of not having any internal deps for this.",
        "createdAt" : "2021-01-08T13:44:07Z",
        "updatedAt" : "2021-01-08T16:15:59Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "5432a871cfd8bab49a57b5311aeb8460bdf3bee4",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +64,68 @@\n  override def onCompleted(): Unit = {\n    val _ = promise.tryComplete(Success(builder.result()))\n  }\n}"
  },
  {
    "id" : "1678a1d1-5e97-47bb-8bb4-54928fa63d7f",
    "prId" : 8438,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82a5a98e-5511-4e3a-99ec-cc16cdc9b183",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Afaict, the `try` is only to account for the fact that both `onError` and `onComplete` can be called. When does that happen?",
        "createdAt" : "2021-01-08T12:09:30Z",
        "updatedAt" : "2021-01-08T16:15:59Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1117f75e-bf3a-4d46-bdc7-1441f500ddf5",
        "parentId" : "82a5a98e-5511-4e3a-99ec-cc16cdc9b183",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Another possibility is that either `onError` or `onComplete` being called more than once.\r\n\r\nIt would be quite exotic but I believe there may be a slight chance that client experiences receives a failure, then the connection drops, thus causing `onError` to be possibly invoked twice concurrently, if I'm not mistaken.\r\n\r\n For `onComplete` it's probably unnecessary though, given the protocol of this endpoint. ðŸ¤” ",
        "createdAt" : "2021-01-08T13:42:35Z",
        "updatedAt" : "2021-01-08T16:15:59Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "e1015d31-bce9-4170-bf77-8e4417f928a7",
        "parentId" : "82a5a98e-5511-4e3a-99ec-cc16cdc9b183",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Makes sense, thanks for the explanation! Even if unnecessary for `onComplete`, itâ€™s probably good practice to guard against this. I just wanted to understand the cases where we can hit it.",
        "createdAt" : "2021-01-08T13:46:07Z",
        "updatedAt" : "2021-01-08T16:15:59Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "5432a871cfd8bab49a57b5311aeb8460bdf3bee4",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +60,64 @@\n  override def onError(throwable: Throwable): Unit = {\n    val _ = promise.tryFailure(throwable)\n  }\n"
  }
]