[
  {
    "id" : "544910af-e3a0-4a4f-93cb-aa750286ed44",
    "prId" : 8481,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42f8884d-6e6e-49e2-a6cf-6090bb2d71ac",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "doesnâ€™t this mean that now youâ€™ll succeed if it doesnâ€™t fail?",
        "createdAt" : "2021-01-12T16:36:01Z",
        "updatedAt" : "2021-01-13T14:14:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "25efd6a7-f21c-407f-b4bf-4f8ab28e2382",
        "parentId" : "42f8884d-6e6e-49e2-a6cf-6090bb2d71ac",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "It's the same as before, I just noticed that using `.futureValue` caused a deadlock in another test when using the serial `ExecutionContext` built-in into `AsyncFlatSpec`, so I preferred removing existing usages.",
        "createdAt" : "2021-01-12T16:59:41Z",
        "updatedAt" : "2021-01-13T14:14:29Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "5f7085e0-c061-442c-80a0-fcd7d22b78b6",
        "parentId" : "42f8884d-6e6e-49e2-a6cf-6090bb2d71ac",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "So we suffered from the same issue before or itâ€™s not an issue?",
        "createdAt" : "2021-01-12T17:00:57Z",
        "updatedAt" : "2021-01-13T14:14:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ae23cb57-a549-47f7-b53c-1a87a11f5b81",
        "parentId" : "42f8884d-6e6e-49e2-a6cf-6090bb2d71ac",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I had this issue while creating the tests for the reverse proxy. I can revert it back to what it was before, it's just that I'm not fully aware of how or why `.futureValue` can deadlock and I would prefer to leave it out where possible.",
        "createdAt" : "2021-01-13T13:45:29Z",
        "updatedAt" : "2021-01-13T14:14:29Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "440ffa5e-cefc-417e-a2b9-a0c8308ce46e",
        "parentId" : "42f8884d-6e6e-49e2-a6cf-6090bb2d71ac",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "can we just turn this into an async test suite and wait on the future completing or if you donâ€™t want to do that, `Await.result`? Looking through this again, it seems like the `map` will also executed asynchronously and it isnâ€™t clear to me that the test cannot succeed before the future fails.",
        "createdAt" : "2021-01-13T13:50:23Z",
        "updatedAt" : "2021-01-13T14:14:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "71b8602f-2da7-4407-8bb0-30deb6ea7de9",
        "parentId" : "42f8884d-6e6e-49e2-a6cf-6090bb2d71ac",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "> can we just turn this into an async test suite\r\n\r\nSorry, I lost you here, this is already an `AsyncFlatSpec`. ðŸ¤” \r\n\r\n> and wait on the future completing or if you donâ€™t want to do that, `Await.result`? Looking through this again, it seems like the `map` will also executed asynchronously and it isnâ€™t clear to me that the test cannot succeed before the future fails.\r\n\r\nIn an `AsyncFlatSpec` you are supposed to return a `Future[Assertion]` in your test blocks and Scalatest will take care of executing it correctly. You can test this by putting a failing assertion in the `map`.\r\n\r\nDoes this make sense or am I missing something?",
        "createdAt" : "2021-01-13T14:19:27Z",
        "updatedAt" : "2021-01-13T14:19:27Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "d8148ea3-81eb-45a2-a40b-3256d2cdb6f2",
        "parentId" : "42f8884d-6e6e-49e2-a6cf-6090bb2d71ac",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "duh, I missed that this was already an async test suite and that this was the last statement. All my worries are unsubstantiated and this is perfectly fine. Sorry for the confusion",
        "createdAt" : "2021-01-13T14:21:54Z",
        "updatedAt" : "2021-01-13T14:21:54Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4a7b9021935fa081adcc2f535ca7185dfb0cc12",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +21,25 @@    val stub = ServerReflectionGrpc.newStub(channel)\n    val client = new ServerReflectionClient(stub)\n    client.getAllServices().failed.map(_ shouldBe a[StatusRuntimeException])\n  }\n"
  }
]