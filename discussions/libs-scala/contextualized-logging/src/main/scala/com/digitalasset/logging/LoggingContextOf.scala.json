[
  {
    "id" : "f72f539a-29c6-4b40-bd7e-df4053254e59",
    "prId" : 7205,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7205",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d5e2a62-ee17-41f5-ae07-3daf6f13027a",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "An experiment with using phantoms to clarify use of these non-typeclassy implicits that Scala libraries tend to have, like `ExecutionContext`. If successful in this PR, we may expand to those other implicits, like `Connection` or indeed `ExecutionContext`.\r\n\r\nThis also demonstrates why I don't think one-size-fits-all tagging \"libraries\" are super helpful. Having a simple version like `scalaz.Tag` covering many common scenarios is fine, but there are often places where you wish to precisely control the resulting semantics, such as this one.\r\n\r\nThe type parameter could be added directly to `LoggingContext`, but I think it is more interesting here to demonstrate how you could add these phantom controls to implicit designs that you don't otherwise control.\r\n\r\n/cc @SamirTalwar @leo-da ",
        "createdAt" : "2020-08-21T21:50:30Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "22ea732c-aaf0-4309-83dd-62a77e10004a",
        "parentId" : "5d5e2a62-ee17-41f5-ae07-3daf6f13027a",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Seems like a smart idea. Where are you using it?",
        "createdAt" : "2020-08-24T07:44:01Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "c5f04f43-a2e9-47c7-b62d-00b05ddda6fa",
        "parentId" : "5d5e2a62-ee17-41f5-ae07-3daf6f13027a",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "@SamirTalwar-DA In this PR, you can see\r\n\r\n1. where `Runner` now demands a `LoggingContextOf[Trigger]`,\r\n2. in its diff history, where `TriggerRunner` started demanding a `LoggingContextOf[Config]`, and\r\n3. where the first demand propagated outward into where the second was already satisfied, so it became `LoggingContextOf[Config with Trigger]`, which satisfies both.",
        "createdAt" : "2020-09-02T21:20:59Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "4209112f-9dc0-4df9-9f15-94500c6790c4",
        "parentId" : "5d5e2a62-ee17-41f5-ae07-3daf6f13027a",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I see it now. No complaints; seems like the API itself requires very little heavy lifting.\r\n\r\nI like this logic a lot, and I'd definitely support using this kind of thing for execution contexts too.",
        "createdAt" : "2020-09-03T13:15:42Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d5af3d7402e279de3eb423f6bf09c7b274c605",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +31,35 @@  * `LoggingContextOf[Foo with Bar]` then the latter will be chosen, in\n  * accordance with SLS §7.2, §6.26.3.  This fits well the \"more context =\n  * better than\" overall philosophy of the contextualized-logging library.\n  */\nobject LoggingContextOf {"
  },
  {
    "id" : "e24d761e-a719-4b5d-b003-59104f81fc50",
    "prId" : 7205,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7205",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d451156-087c-4d38-a498-b7782622038e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Do I see it correctly that we do not use this yet? Perfectly fine, just wanted to make sure I didn’t miss it.",
        "createdAt" : "2020-09-03T10:39:13Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "762af45c-df84-497b-b351-1bc986d90f8f",
        "parentId" : "1d451156-087c-4d38-a498-b7782622038e",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Indeed.",
        "createdAt" : "2020-09-03T13:02:36Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d5af3d7402e279de3eb423f6bf09c7b274c605",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +44,48 @@\n  @silent(\" label .* is never used\") // Proxy only\n  def withEnrichedLoggingContext[P, A](label: label[P], kvs: Map[String, String])(\n      implicit loggingContext: LoggingContextOf[A]): withEnrichedLoggingContext[P, A] =\n    new withEnrichedLoggingContext(kvs, loggingContext.extend[P])"
  },
  {
    "id" : "492207b5-3003-4f5e-a656-68db14e9be62",
    "prId" : 7205,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7205",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b72af382-88ca-4e6f-a9e8-cafd8b2bde3c",
        "parentId" : null,
        "authorId" : "fc4f1c1d-307b-4271-8f75-981b53300755",
        "body" : "Interesting order of declarations. I would have preferred to declare the type definition first and then the function",
        "createdAt" : "2021-05-04T13:56:48Z",
        "updatedAt" : "2021-05-04T13:56:48Z",
        "lastEditedBy" : "fc4f1c1d-307b-4271-8f75-981b53300755",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d5af3d7402e279de3eb423f6bf09c7b274c605",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +36,40 @@\n  def label[P]: label[P] = new label(())\n  final class label[P] private[LoggingContextOf] (private val ignored: Unit) extends AnyVal\n\n  @silent(\" label .* is never used\") // Proxy only"
  }
]