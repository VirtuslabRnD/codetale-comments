[
  {
    "id" : "55a65249-6375-4c18-b67a-ba671ec1fe92",
    "prId" : 9588,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed608ad2-cc4f-43f9-b093-777b2bc624f5",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Why not use a `ThreadFactoryBuilder` here?",
        "createdAt" : "2021-05-05T19:54:50Z",
        "updatedAt" : "2021-05-05T19:54:53Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "ca22ce61-9487-4061-ae35-9d7a4acc7f68",
        "parentId" : "ed608ad2-cc4f-43f9-b093-777b2bc624f5",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Because I would have to add the dependency to google-commons to the `libs-scala/resources` library. And considering that this is a small utility library, I'd rather keep the dependency surface small. But maybe this actually asks for extracting out [NamedThreadFactory](https://github.com/digital-asset/daml/blob/main/runtime-components/non-repudiation-resources/src/main/scala/com/daml/nonrepudiation/resources/HikariTransactorResourceOwner.scala#L30) into a common place.",
        "createdAt" : "2021-05-06T06:50:53Z",
        "updatedAt" : "2021-05-06T06:50:53Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "45ecec0e-725e-4297-b97d-617128b872c6",
        "parentId" : "ed608ad2-cc4f-43f9-b093-777b2bc624f5",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Perhaps leave it for now and let's see if we use this a second time. Didn't realize the builder was part of Guava.",
        "createdAt" : "2021-05-06T07:45:59Z",
        "updatedAt" : "2021-05-06T07:45:59Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "7384e15092046d667e0635194de6110af2a0fa5a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +26,30 @@    Executors.newCachedThreadPool((runnable: Runnable) =>\n      new Thread(runnable, s\"program-resource-pool-${counter.incrementAndGet()}\")\n    )\n  }\n"
  },
  {
    "id" : "cb5a0dbc-7a52-431f-939a-6f2401cf3af7",
    "prId" : 5564,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5564",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8725c984-47ea-4991-9b8c-78213fea36a2",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Probably passing the `executionContext` explicitly is simpler.",
        "createdAt" : "2020-04-15T12:31:23Z",
        "updatedAt" : "2020-04-15T12:31:59Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "b200c5c6-6a68-42c2-8375-95aaf721be23",
        "parentId" : "8725c984-47ea-4991-9b8c-78213fea36a2",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Tried that but you end up with:\r\n\r\n```scala\r\n         Try(owner.acquire()(executionContext)).fold(Resource.failed(_)(executionContext), identity) \r\n```\r\n\r\nThat's a bit too noisy for me.",
        "createdAt" : "2020-04-15T12:48:27Z",
        "updatedAt" : "2020-04-15T12:48:27Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0409328b7bfd7d678eb30a63b01ecbd6cffd90d",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +27,31 @@      val resource = {\n        implicit val executionContext: ExecutionContext =\n          ExecutionContext.fromExecutor(executorService)\n        Try(owner.acquire()).fold(Resource.failed, identity)\n      }"
  },
  {
    "id" : "d77e62ca-e4a5-42bd-adbc-63f549019dd1",
    "prId" : 4607,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "110fac4b-8813-48b4-b6be-93e1233b11f3",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Why the self-type?",
        "createdAt" : "2020-02-19T16:11:32Z",
        "updatedAt" : "2020-02-19T20:48:13Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "a818be13-c4d6-4dd7-a0e9-ebb2b7d4f316",
        "parentId" : "110fac4b-8813-48b4-b6be-93e1233b11f3",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "To make sure people don't forget to actually extend `RuntimeException` or similar.",
        "createdAt" : "2020-02-19T16:58:03Z",
        "updatedAt" : "2020-02-19T20:48:13Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "a51aab41-a90c-434f-98fd-223cf574964b",
        "parentId" : "110fac4b-8813-48b4-b6be-93e1233b11f3",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Then why removing the `RuntimeException`? :slightly_smiling_face: ",
        "createdAt" : "2020-02-19T17:04:52Z",
        "updatedAt" : "2020-02-19T20:48:13Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "04d422c0-9b52-4d02-9724-2034213b3723",
        "parentId" : "110fac4b-8813-48b4-b6be-93e1233b11f3",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Because it allows me to do `new LedgerIdMismatchException(â€¦) with StartupException`, which means that `LedgerIdMismatchException` can be moved to _ledger-api-common_, which doesn't have access to `StartupException` and doesn't know anything about the concept of \"startup\".",
        "createdAt" : "2020-02-19T20:09:55Z",
        "updatedAt" : "2020-02-19T20:48:13Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "2631a6f3d08f69f84454f5b30c7ebcb7581b0e28",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +70,74 @@\n  trait StartupException extends NoStackTrace {\n    self: Exception =>\n  }\n"
  },
  {
    "id" : "110cc9b2-6937-4f0e-b583-d67816be3c66",
    "prId" : 4422,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c8cec52-2142-4dbf-b0b1-67d7cd004048",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "```suggestion\r\n            s\"Shutting down because of an initialization error: ${exception.getMessage}\", exception)\r\n```\r\nWhy the newline? It may be just escaped if structured logging is used, anyhow.",
        "createdAt" : "2020-02-06T12:44:17Z",
        "updatedAt" : "2020-02-06T14:21:29Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "0350b472-15cf-438b-8b16-dc53450dc248",
        "parentId" : "6c8cec52-2142-4dbf-b0b1-67d7cd004048",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "It's not, I checked. The error looks like this:\r\n\r\n```\r\nShutting down because of an initialization error.\r\nUnknown database: jdbc:notathing\r\n```\r\n\r\nIf I pass the exception as an argument, I get this:\r\n\r\n```\r\nShutting down because of an initialization error.\r\ncom.daml.ledger.on.sql.Database$InvalidDatabaseException: Unknown database: jdbc:notathing\r\n```",
        "createdAt" : "2020-02-06T14:07:56Z",
        "updatedAt" : "2020-02-06T14:21:29Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3e584e59ae39b77a6088641e3c5a3287071b5ff",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +52,56 @@        case Failure(exception: StartupException) =>\n          logger.error(\n            s\"Shutting down because of an initialization error.\\n${exception.getMessage}\")\n          stop()\n          sys.exit(1)"
  }
]