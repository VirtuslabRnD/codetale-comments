[
  {
    "id" : "6e6f4290-0770-4221-bc97-5fcac51a2af9",
    "prId" : 4936,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f1275c2-6499-4d53-bd3a-152e447798b1",
        "parentId" : null,
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "A real world example in node would be:\n\n``` js\nconst server = net.createServer(() => {}).listen(8080);\n\nserver.on('listening', () => {});\n```\n\nWhen only a port is passed the port is bound immediately. So the `'listening'` callback could be called immediately. Problem is that the `.on('listening'` will not have been set by that time.  \nTo get around this the `'listening'` event is queued in a `nextTick()` to allow the script to run to completion. Which allows the user to set any event handlers they want.\n",
        "createdAt" : "2016-01-29T22:01:13Z",
        "updatedAt" : "2016-04-07T22:32:53Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      },
      {
        "id" : "46f3d9bb-be0f-4eb9-bc1e-271e0db11db3",
        "parentId" : "4f1275c2-6499-4d53-bd3a-152e447798b1",
        "authorId" : "8461795f-e14e-41fb-8ca8-c1aec4c48014",
        "body" : "I added your real world example in https://github.com/techjeffharris/node/commit/f80d7cc7fe12ffada96c4c2d9fbfb3d1b47b36f1\n",
        "createdAt" : "2016-02-26T22:54:35Z",
        "updatedAt" : "2016-04-07T22:32:53Z",
        "lastEditedBy" : "8461795f-e14e-41fb-8ca8-c1aec4c48014",
        "tags" : [
        ]
      }
    ],
    "commit" : "82d0fb8d5cf87d7234ab2f88e36edee3805966e6",
    "line" : 343,
    "diffHunk" : "@@ -1,1 +341,345 @@\nvar bar = 1;\n```\n\nThe user defines `someAsyncApiCall()` to have an asynchronous signature,"
  },
  {
    "id" : "c7bfd2e1-3662-45d1-8876-ef97283d2891",
    "prId" : 4936,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a193fa14-750a-4e02-9561-74526c81b19b",
        "parentId" : null,
        "authorId" : "e75ae5b4-0256-4743-b9d9-8adee03098da",
        "body" : "/cc @piscisaureus Does this model adequately reflect reality?\n",
        "createdAt" : "2016-03-01T19:54:59Z",
        "updatedAt" : "2016-04-07T22:32:53Z",
        "lastEditedBy" : "e75ae5b4-0256-4743-b9d9-8adee03098da",
        "tags" : [
        ]
      },
      {
        "id" : "f00c6775-7ce7-464b-82a6-a6fecf0bcaf3",
        "parentId" : "a193fa14-750a-4e02-9561-74526c81b19b",
        "authorId" : "a3d4a91f-7bcc-4629-bcfe-25ce8831f3d8",
        "body" : "The order in which certain types of callbacks are invoked is mostly determined by libuv, see https://github.com/libuv/libuv/blob/b015b4d0ee03b825d61b0b54e36aa405a8e1cf03/src/unix/core.c#L340-L366.\n\nMy take would be:\n1. timers\n2. i/o callbacks (pretty much every type of callback except timers, setImmedate, close)\n3. idle, prepare (only used internally)\n4. poll (= retrieve new i/o events; node will block here when appropriate)\n5. check (setImmediate callbacks are invoked here)\n6. close callbacks (e.g `socket.on('close', ...)`)\n7. timers (again, indeed)\n\nprocess.nextTick and microtasks are processed after every invocation of a javascript function, so they essentially run as a \"loop within a loop\" with a higher priority.\n",
        "createdAt" : "2016-03-02T18:48:49Z",
        "updatedAt" : "2016-04-07T22:32:53Z",
        "lastEditedBy" : "a3d4a91f-7bcc-4629-bcfe-25ce8831f3d8",
        "tags" : [
        ]
      },
      {
        "id" : "7aaa9434-d8a6-4da4-aef1-5c3e25b1c19f",
        "parentId" : "a193fa14-750a-4e02-9561-74526c81b19b",
        "authorId" : "9e96224b-2acc-4770-a5d7-d764637e4628",
        "body" : "There is also some little activities (handling the gracefully close) done between 7 and 1 in node: https://github.com/nodejs/node/blob/master/src/node.cc#L4207-L4221.\n",
        "createdAt" : "2016-03-04T08:23:26Z",
        "updatedAt" : "2016-04-07T22:32:53Z",
        "lastEditedBy" : "9e96224b-2acc-4770-a5d7-d764637e4628",
        "tags" : [
        ]
      },
      {
        "id" : "c8aee3b4-4847-43e3-9f42-510a5186ce13",
        "parentId" : "a193fa14-750a-4e02-9561-74526c81b19b",
        "authorId" : "8461795f-e14e-41fb-8ca8-c1aec4c48014",
        "body" : "@sam-github @piscisaureus @mcollina \n\nAgain, the order of these steps is based upon this presentation by @trevnorris https://nodesource.com/resources \n\nShould these refinements considered show-stoppers?  I'm leaning toward getting this landed and allowing those with more intimate knowledge and understanding making some of the more specific adjustments.. Thoughts?\n",
        "createdAt" : "2016-03-25T20:56:04Z",
        "updatedAt" : "2016-04-07T22:32:53Z",
        "lastEditedBy" : "8461795f-e14e-41fb-8ca8-c1aec4c48014",
        "tags" : [
        ]
      },
      {
        "id" : "fc354ca7-af96-48cd-8a57-ff187d7d35f5",
        "parentId" : "a193fa14-750a-4e02-9561-74526c81b19b",
        "authorId" : "9e96224b-2acc-4770-a5d7-d764637e4628",
        "body" : "I consider them show-stoppers.\n\nThe order of steps is highly important, because otherwise some behaviors cannot be explained, creating more confusion.\n\nIMHO it is acceptable to simplify things in a presentation (you have a limited time), but this should be the 'ultimate' docs on the event loop, so nobody would have to dig through all the source to understand how things works. So, let's aim for correctness first, and then prepare a \"newbie friendly\"  doc after (or leave it to 3rd-party blog posts).\n",
        "createdAt" : "2016-03-29T07:06:49Z",
        "updatedAt" : "2016-04-07T22:32:53Z",
        "lastEditedBy" : "9e96224b-2acc-4770-a5d7-d764637e4628",
        "tags" : [
        ]
      },
      {
        "id" : "8e30845d-1993-4933-82c1-a0c226da54d0",
        "parentId" : "a193fa14-750a-4e02-9561-74526c81b19b",
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "@piscisaureus \n\n> close callbacks (e.g socket.on('close', ...))\n\nThat's not always true for some odd reason. The only time the `'close'` event is emitted in `uv__run_closing_handles()` is on `Socket#_destroy()`. Otherwise it simply runs in `nextTick()` (example `Server#_emitCloseIfDrained()` and subsequent call to `emitCloseNT()`).\n",
        "createdAt" : "2016-03-29T23:25:31Z",
        "updatedAt" : "2016-04-07T22:32:53Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      },
      {
        "id" : "3a02822b-4d94-44ac-a7b6-831fec2009e5",
        "parentId" : "a193fa14-750a-4e02-9561-74526c81b19b",
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "@mcollina If you want more of an \"ultimate\" doc, here's one for reference: https://gist.github.com/trevnorris/05531d8339f8e265bd49\n\nThere are a couple updates needed (e.g. we run timers twice), but overall that represents the technical running of the event loop.\n",
        "createdAt" : "2016-03-29T23:28:08Z",
        "updatedAt" : "2016-04-07T22:32:53Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      },
      {
        "id" : "e02fac68-1ccb-4311-9bbd-4b47de7a2213",
        "parentId" : "a193fa14-750a-4e02-9561-74526c81b19b",
        "authorId" : "9e96224b-2acc-4770-a5d7-d764637e4628",
        "body" : "@trevnorris we are running timers twice to have more precise timings (as there might be some stuff happening between one run and the other) or is there another reason?\n",
        "createdAt" : "2016-03-31T08:33:39Z",
        "updatedAt" : "2016-04-07T22:32:53Z",
        "lastEditedBy" : "9e96224b-2acc-4770-a5d7-d764637e4628",
        "tags" : [
        ]
      },
      {
        "id" : "6ae34bf5-928c-4cca-9c58-cf41a4d0f08b",
        "parentId" : "a193fa14-750a-4e02-9561-74526c81b19b",
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "@mcollina It's because we [run `uv_run()` using `UV_RUN_ONCE`](https://github.com/nodejs/node/blob/v5.9.1/src/node.cc#L4151). Which we started using [for `'beforeExit'` support](https://github.com/nodejs/node/commit/a2eeb43). The reason libuv does this is [documented in `deps/uv/src/unix/core.c`](https://github.com/nodejs/node/blob/v5.9.1/deps/uv/src/unix/core.c#L355-L365)\n",
        "createdAt" : "2016-03-31T09:04:17Z",
        "updatedAt" : "2016-04-07T22:32:53Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      }
    ],
    "commit" : "82d0fb8d5cf87d7234ab2f88e36edee3805966e6",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +23,27 @@order of operations.\n\n       ┌───────────────────────┐\n    ┌─>│        timers         │\n    │  └──────────┬────────────┘"
  },
  {
    "id" : "0cc0b4d2-75e0-471c-8199-48db6cde6aa1",
    "prId" : 4936,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9e3c2d1-55c2-48d2-917a-3358ae165fb9",
        "parentId" : null,
        "authorId" : "bd43ce4d-85c2-4f54-8666-274f0f79f75b",
        "body" : "Is the `bind` here necessary with using an arrow function?\n",
        "createdAt" : "2016-03-01T23:55:23Z",
        "updatedAt" : "2016-04-07T22:32:53Z",
        "lastEditedBy" : "bd43ce4d-85c2-4f54-8666-274f0f79f75b",
        "tags" : [
        ]
      },
      {
        "id" : "ea4ccd43-769c-42d4-9f5d-13a98b50de36",
        "parentId" : "a9e3c2d1-55c2-48d2-917a-3358ae165fb9",
        "authorId" : "aa648053-ca48-4d72-b5ee-3042ca9cc163",
        "body" : "@evanlucas good catch. Arrow functions can't have their `this` hard-bound http://blog.getify.com/arrow-this/\n",
        "createdAt" : "2016-03-02T00:40:48Z",
        "updatedAt" : "2016-04-07T22:32:53Z",
        "lastEditedBy" : "aa648053-ca48-4d72-b5ee-3042ca9cc163",
        "tags" : [
        ]
      },
      {
        "id" : "45b13644-5e08-4f42-a611-4dc9834c79cf",
        "parentId" : "a9e3c2d1-55c2-48d2-917a-3358ae165fb9",
        "authorId" : "8461795f-e14e-41fb-8ca8-c1aec4c48014",
        "body" : "Thanks @evanlucas !  replaced the arrow function with a plain-old anonymous function.  \n",
        "createdAt" : "2016-03-25T21:09:28Z",
        "updatedAt" : "2016-04-07T22:32:53Z",
        "lastEditedBy" : "8461795f-e14e-41fb-8ca8-c1aec4c48014",
        "tags" : [
        ]
      }
    ],
    "commit" : "82d0fb8d5cf87d7234ab2f88e36edee3805966e6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +457,461 @@  process.nextTick(function () {\n    this.emit('event');\n  }.bind(this));\n}\nutil.inherits(MyEmitter, EventEmitter);"
  }
]