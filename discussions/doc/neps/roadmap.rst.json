[
  {
    "id" : "61bc391d-1125-4482-9a99-e2808cc264fb",
    "prId" : 13584,
    "prUrl" : "https://github.com/numpy/numpy/pull/13584#pullrequestreview-240610436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d91452e-c256-40fb-bd44-3e032f0237f2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This is a SciPy topic, do you think we should also have this in NumPy?",
        "createdAt" : "2019-05-19T18:20:04Z",
        "updatedAt" : "2019-05-22T12:24:33Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "31b71980-d35a-477d-bbaf-8d30986bbaed",
        "parentId" : "4d91452e-c256-40fb-bd44-3e032f0237f2",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "This was already here, I just moved it. I agree, we may want to remove it. We now have a plan to fix this in SciPy and harmonize the APIs.",
        "createdAt" : "2019-05-19T18:56:17Z",
        "updatedAt" : "2019-05-22T12:24:33Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "9183bc10-e1c5-4dd3-a548-20347176dff4",
        "parentId" : "4d91452e-c256-40fb-bd44-3e032f0237f2",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "For `scipy.fftpack`, the output of `rfft` is not complex (stored as real with a convention for 0 and nyquist); this makes it very hard to use, and would seem to make backend swapping difficult (the current docs point to `np.fft.rfft` exactly for this purpose...). I'd suggest leaving this as is for now...",
        "createdAt" : "2019-05-21T21:39:39Z",
        "updatedAt" : "2019-05-22T12:24:33Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "acf20906-56cb-4022-94c9-6afd5f46438b",
        "parentId" : "4d91452e-c256-40fb-bd44-3e032f0237f2",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "There's a plan for SciPy to create a new `scipy.fft` module with an `rfft` function matching the numpy one. That will solve that issue. ",
        "createdAt" : "2019-05-22T12:23:16Z",
        "updatedAt" : "2019-05-22T12:24:33Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "d31a8cbf-c581-47fa-8aea-2e9eb8232bfd",
        "parentId" : "4d91452e-c256-40fb-bd44-3e032f0237f2",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Okay since this was already here let's leave it as is for now. But let's try not to do anything related to this in the next 4 months or so, let's first see how this works out for SciPy (there's a GSoC project on this topic).",
        "createdAt" : "2019-05-22T12:26:48Z",
        "updatedAt" : "2019-05-22T12:26:48Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "312ef858-3db4-4e78-9523-7d11396fbb94",
        "parentId" : "4d91452e-c256-40fb-bd44-3e032f0237f2",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Great! Would be nice for the different fft packages to produce consistent output (though I very much understand the old `rfft` packing, as it allows one to do the fft in-place).",
        "createdAt" : "2019-05-22T12:56:17Z",
        "updatedAt" : "2019-05-22T12:56:17Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "585952843ca35a154a424e45b5314d06ffb13ffc",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +100,104 @@  - dtypes that support missing values\n\n- A backend system for ``numpy.fft`` (so that e.g. ``fft-mkl`` doesn't need to monkeypatch numpy)\n- Write a strategy on how to deal with overlap between NumPy and SciPy for ``linalg``\n  and ``fft`` (and implement it)."
  },
  {
    "id" : "0c36f0cf-f187-445a-a3cf-961f3df063ae",
    "prId" : 18082,
    "prUrl" : "https://github.com/numpy/numpy/pull/18082#pullrequestreview-559277151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afb6ac91-3fb5-469b-a14a-d6848e0af64e",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "This seems like a restatement of the previous paragraph. Do you intend that or would it make sense to merge them?",
        "createdAt" : "2020-12-28T17:23:42Z",
        "updatedAt" : "2021-01-02T16:40:29Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "f3b7f082-7d65-429e-8b98-1185fcaedc69",
        "parentId" : "afb6ac91-3fb5-469b-a14a-d6848e0af64e",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "I meant to keep it separate. That first paragraph made sense to insiders, but I'm pretty sure it was way too difficult for an average interested user to get from that what the second paragraph now says. So different audiences.\r\n\r\nIf we can merge them, great - but it's not too easy to do I found.",
        "createdAt" : "2020-12-28T19:38:35Z",
        "updatedAt" : "2021-01-02T16:40:29Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "71fa9e43b0ee0edfa8c3d844268bbe07cd68761f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +23,27 @@from scratch, or as a ``numpy.ndarray`` subclass) that work well with SciPy,\nscikit-learn and other such packages.\n\nThe ``__array_ufunc__`` and ``__array_function__`` protocols are stable, but\ndo not cover the whole API.  New protocols for overriding other functionality"
  }
]