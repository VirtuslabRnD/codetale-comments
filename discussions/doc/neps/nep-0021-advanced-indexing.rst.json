[
  {
    "id" : "bf4bcb1d-155e-4bb7-92ed-0236a3b4885c",
    "prId" : 6256,
    "prUrl" : "https://github.com/numpy/numpy/pull/6256#pullrequestreview-130571716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da38dc36-9cb0-4300-b34b-e9814f958e52",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "My tendency would be to require that subclasses override the new methods if they need to; I don't like the extra code.\r\n\r\nBut one possible solution to ensure things \"just break\" might be to go through the `__getitem__` call with an extra keyword set, say `index_method='outer|vector|fancy|` - if a subclass cannot take this extra keyword, it will immediately fail. (Obviously, this keyword needs to have a default of `None` that can then change from meaning `fancy` to `outer`).\r\n\r\nIndeed, a keyword argument would be super-nice if [PEP 472](https://www.python.org/dev/peps/pep-0472/) were accepted...",
        "createdAt" : "2018-06-20T18:25:44Z",
        "updatedAt" : "2018-06-20T23:49:54Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "c11bb5b5-9dee-476c-be31-3664b5628ea7",
        "parentId" : "da38dc36-9cb0-4300-b34b-e9814f958e52",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Probably, the that was hanging me was that getting masked arrays right was damn annoying, plus we also need to have a way for things like memmap. I am not sure why a kwarg is super nice if that PEP is accepted, we get a mix of different meanings for kwargs, so trying to not use kwargs because of the PEP might be a point?",
        "createdAt" : "2018-06-20T18:34:38Z",
        "updatedAt" : "2018-06-20T23:49:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "37dd8a4e-be5b-4706-b077-4e773a8b517f",
        "parentId" : "da38dc36-9cb0-4300-b34b-e9814f958e52",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Yes, on closer reading of the PEP, my suggestion would require the `kwarg` strategy; https://www.python.org/dev/peps/pep-0472/#strategy-kwargs-argument\r\n\r\nNow it doesn't look like the PEP is actually going anywhere...\r\n\r\nAnyway, my overall sense is that this should not hold up the NEP, or, indeed, the implementation.",
        "createdAt" : "2018-06-20T18:43:54Z",
        "updatedAt" : "2018-06-20T23:49:54Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "6af59cdb-db3c-4d5a-90fc-6de05e13626f",
        "parentId" : "da38dc36-9cb0-4300-b34b-e9814f958e52",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "We could potentially call `self.__getitem__(indices, index_method='outer')` directly. We just can't write `self[indices, index_method='outer']`.",
        "createdAt" : "2018-06-20T18:55:40Z",
        "updatedAt" : "2018-06-20T23:49:54Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "6c7ecaeb-0f48-4e4b-987c-2ac54d527208",
        "parentId" : "da38dc36-9cb0-4300-b34b-e9814f958e52",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "That is indeed what I had in mind, and I thought the PEP might eventually make that possible as well, but it turns out that is true only for one of its options. Anyway, at some level that is a separate concern. The main advantage of the `index_method` approach is that subclasses would fail automatically (and that one could change the default at some point).",
        "createdAt" : "2018-06-20T19:48:46Z",
        "updatedAt" : "2018-06-20T23:49:54Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "180dce70-dc6b-48cf-9e0d-1e90d604a944",
        "parentId" : "da38dc36-9cb0-4300-b34b-e9814f958e52",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I misread the PEP, my gut feeling is, if `arr[indices, index_method='outer']` would work, that would not be nice. Unless you want to use it instead of the `arr.oindex[indices]` syntax maybe. Simply because `index_method='outer'` could also mean get me \"outer\" from the axis \"index_method\"?",
        "createdAt" : "2018-06-20T20:01:56Z",
        "updatedAt" : "2018-06-20T23:49:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "6099327a-d64f-4834-8906-d58d7ff33d58",
        "parentId" : "da38dc36-9cb0-4300-b34b-e9814f958e52",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Yes, it would preclude having an axis called `index_method`!\r\n\r\nAnyway, right now we cannot use keywords inside `[...]` at all, so that part is not so relevant. The main question is whether it is worth solving the subclass issue by having `__getitem__` acquire an extra argument that we use internally (and `oindex` and `vindex` just being shortcuts to it).\r\n\r\nI should add that I don't really have an opinion one way or another; I do think it is fine to expect subclasses to pay attention and adjust to new `ndarray` features (we just have to try our best not to break existing features).",
        "createdAt" : "2018-06-20T20:18:04Z",
        "updatedAt" : "2018-06-20T23:49:54Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "af2aa15684384493e3b9eac505c5d209b8298a3c",
    "line" : 208,
    "diffHunk" : "@@ -1,1 +206,210 @@and should preferably not subclass working versions of these attributes.\n\nAll subclasses will inherit the attributes, however, it seems possible\nto test ``subclass.__getitem__.__classobj__`` when getting i.e.\n``subclass.vindex``. If this is not ``ndarray``, the subclass has special"
  },
  {
    "id" : "9c646bab-6124-4916-ac85-b9600936a6e5",
    "prId" : 6256,
    "prUrl" : "https://github.com/numpy/numpy/pull/6256#pullrequestreview-130565629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ee5fe21-3fc4-4a44-ac70-0133027d1cd7",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I echo @jaimefrio's comment from way back that having `[0]` remove a dimension and `0` keep it is *extremely* confusing. But it may just mean I still do not understand fancy indexing...",
        "createdAt" : "2018-06-20T18:33:30Z",
        "updatedAt" : "2018-06-20T23:49:54Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "099c15cd-b319-4deb-8808-9cd5e557cb48",
        "parentId" : "7ee5fe21-3fc4-4a44-ac70-0133027d1cd7",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Frankly, I am a bit confused what you mean :). Any index \"removes\" the dimension in some sense (for vindex, oindex in some sense replaces it), the question is just where to put the new dims. Jaime had a comment suggesting to maybe keep the axis swapping in a less confusing manner then it used to exist.\r\nRight now, I disagree with this. `vindex` should be as consistent as possible, there is nothing special enough about `[0]` compared to `[0, 1]`. There **might** be a \"less confusing then currently fancy indexing like transposing\" thing, but I personally believe you can use oindex then, it already does what you want, no?",
        "createdAt" : "2018-06-20T18:40:54Z",
        "updatedAt" : "2018-06-20T23:49:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "8681cc4d-4fb7-463d-97b3-783681341328",
        "parentId" : "7ee5fe21-3fc4-4a44-ac70-0133027d1cd7",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I just don't understand why here a leading `1` appears. But as said, my understanding of fancy indexing is quite hopeless.  I do agree with the always-transpose-to-the-front rule.",
        "createdAt" : "2018-06-20T18:50:58Z",
        "updatedAt" : "2018-06-20T23:49:54Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "55808b47-0d83-4cce-8bb8-c9faca90879c",
        "parentId" : "7ee5fe21-3fc4-4a44-ac70-0133027d1cd7",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Well, the thing is, there is a 1 sized dimension created by the  `[1]` so it has to go somewhere? And in vindex that somewhere is the front? ",
        "createdAt" : "2018-06-20T19:30:40Z",
        "updatedAt" : "2018-06-20T23:49:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "312d9760-9683-46f9-8703-4406ba052eec",
        "parentId" : "7ee5fe21-3fc4-4a44-ac70-0133027d1cd7",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Yes, that is logical, but then why is it not happening in the examples right above? Or are those mistakes?",
        "createdAt" : "2018-06-20T19:54:28Z",
        "updatedAt" : "2018-06-20T23:49:54Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "d6f1466d-6013-4f83-b19a-7c1f87be5b18",
        "parentId" : "7ee5fe21-3fc4-4a44-ac70-0133027d1cd7",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Well, its vindex, not oindex. All indexes (except slices I guess) are broadcast together for the result (just like legacy fancy indexing) and iterated together. So the extra dimension at the start has size 2 because it has the size of `[0]` and `[0, 1]` broadcast together.",
        "createdAt" : "2018-06-20T19:58:14Z",
        "updatedAt" : "2018-06-20T23:49:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "7a766702-a4d4-45f7-93ab-0e30586f1133",
        "parentId" : "7ee5fe21-3fc4-4a44-ac70-0133027d1cd7",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "A, see, I knew I was missing something. Though this is particularly silly. Sorry for the noise.",
        "createdAt" : "2018-06-20T20:01:00Z",
        "updatedAt" : "2018-06-20T23:49:54Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "af2aa15684384493e3b9eac505c5d209b8298a3c",
    "line" : 389,
    "diffHunk" : "@@ -1,1 +387,391 @@    >>> arr.vindex[:, [0], :, [0, 1]].shape\n    (2, 5, 7)\n    >>> arr.vindex[:, [0], 0, :].shape\n    (1, 5, 8)\n    >>> arr.vindex[:, [0], :, 0].shape"
  }
]