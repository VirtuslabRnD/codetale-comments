[
  {
    "id" : "794cb161-f910-4113-9b44-5a3a1dcb9392",
    "prId" : 12166,
    "prUrl" : "https://github.com/numpy/numpy/pull/12166#pullrequestreview-164560348",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a320dab-7e36-4b46-8672-b573c87c417c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "cc @abalkin ",
        "createdAt" : "2018-10-15T06:13:44Z",
        "updatedAt" : "2018-10-15T15:56:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f027a6e8fd7eb953dbb5f6c43e689fc5059c889",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3,7 @@=========================\n\n:Author: Alexander Belopolsky (sasha), transcribed Matt Picus <matti.picus@gmail.com>\n:Status: Draft\n:Type: Informational"
  },
  {
    "id" : "5ea11b93-ebfe-4134-bcd1-945cbbc7db92",
    "prId" : 12166,
    "prUrl" : "https://github.com/numpy/numpy/pull/12166#pullrequestreview-164790525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cff4339-7afc-4d18-b84a-8260bc8a32a3",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I wouldn't really suggest changing this doc, but I think this section in particular is out of date.\r\n\r\nThe main argument I've heard for scalar types is speed -- they are significantly faster than working with 0-d arrays.\r\n\r\nThe first and third \"Pros\" here are no longer true. With Python 3, Python uses `operator.index()` for coercing integers and  NumPy scalars can't be relied upon to subclass Python types (e.g., `isinstance(np.int64(1), int)` -> `False`).",
        "createdAt" : "2018-10-15T15:54:07Z",
        "updatedAt" : "2018-10-15T15:56:25Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "84450250-2f05-4f22-9ab7-4ce5c2f48518",
        "parentId" : "5cff4339-7afc-4d18-b84a-8260bc8a32a3",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I find it unlikely that scalars are faster, given that most of our operations start by casting them to 0d arrays. Perhaps the arithmetic has a fast path.",
        "createdAt" : "2018-10-15T15:59:53Z",
        "updatedAt" : "2018-10-15T15:59:53Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4624657b-bb12-4fca-b6a9-277f3a7e0c5f",
        "parentId" : "5cff4339-7afc-4d18-b84a-8260bc8a32a3",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "so is the conclusion is we should get rid of scalars once we move to python 3?",
        "createdAt" : "2018-10-15T16:05:21Z",
        "updatedAt" : "2018-10-15T16:05:21Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "3068550e-e257-42c5-8e4b-005b5cec6ad2",
        "parentId" : "5cff4339-7afc-4d18-b84a-8260bc8a32a3",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : " I don't agree with that conclusion - I also think that python 2.7 already uses `__index__`, so if there's a cut-off line here we've already crossed it.\r\n\r\nOne thing I would like to see is a merge of the scalar types and dtypes - so that `isinstance(np.dtype, type)` is true, and `isinstance(np.float64, np.dtype)` is also true. But that's blocked by #11998 right now.",
        "createdAt" : "2018-10-15T16:16:14Z",
        "updatedAt" : "2018-10-15T16:16:15Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "73d389cb-5649-44e9-af91-598c997578af",
        "parentId" : "5cff4339-7afc-4d18-b84a-8260bc8a32a3",
        "authorId" : "08d28fd4-23d7-47ff-96d3-656eaa8635f1",
        "body" : "Scalars absolutely have a fast path.  It is in numpy/numpy/core/src/umath/scalarmath.c.src among other places.\r\n      ",
        "createdAt" : "2018-10-15T16:29:11Z",
        "updatedAt" : "2018-10-15T16:29:12Z",
        "lastEditedBy" : "08d28fd4-23d7-47ff-96d3-656eaa8635f1",
        "tags" : [
        ]
      },
      {
        "id" : "ffefe5e5-ae72-4c30-8e55-ce181600f773",
        "parentId" : "5cff4339-7afc-4d18-b84a-8260bc8a32a3",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "@eric-wieser - Scalars are indeed fast-tracked for arithmetic (`scalarmath.c.src`):\r\n```\r\nIn [3]: a = np.array(1.)\r\n\r\nIn [4]: %timeit a * a\r\n1000000 loops, best of 3: 541 ns per loop\r\n\r\nIn [5]: a = np.float64(1.)\r\n\r\nIn [6]: %timeit a * a\r\n10000000 loops, best of 3: 91.6 ns per loop\r\n```",
        "createdAt" : "2018-10-15T16:30:35Z",
        "updatedAt" : "2018-10-15T16:30:35Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f027a6e8fd7eb953dbb5f6c43e689fc5059c889",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +70,74 @@arrays to scalars were summarized as follows:\n\n- Pros: \n\n  - Some cases when Python expects an integer (the most"
  },
  {
    "id" : "fc18a44d-9592-4f12-8ea3-8697c9a6ce4d",
    "prId" : 12166,
    "prUrl" : "https://github.com/numpy/numpy/pull/12166#pullrequestreview-165781654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2dbe189f-4c79-419d-9d7b-62c7e6867fd8",
        "parentId" : null,
        "authorId" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "body" : "I would suggest that this section be removed entirely or updated. For example, if `x` is either an array scalar or a rank zero array, `x[...]` is guaranteed to be an array and `x[()]` is guaranteed to be a scalar. The difference is because `x[{anything here}, ...]` is _guaranteed to be an array_. In words, if the last index is an ellipsis, the result of indexing is _guaranteed to be an array_.\r\n\r\nI came across this weird behaviour when implementing the equivalent of `np.where` for PyData/Sparse.",
        "createdAt" : "2018-10-17T18:31:29Z",
        "updatedAt" : "2018-10-17T18:31:54Z",
        "lastEditedBy" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "tags" : [
        ]
      },
      {
        "id" : "1c5500a7-a5f1-41a6-970e-53045c68d06f",
        "parentId" : "2dbe189f-4c79-419d-9d7b-62c7e6867fd8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I don't think we should remove sections from past documents because they no longer apply. NEPs document the state of things when they were written, not the state of `master`. Perhaps a `..note:` could go here",
        "createdAt" : "2018-10-17T18:44:30Z",
        "updatedAt" : "2018-10-17T18:44:30Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f027a6e8fd7eb953dbb5f6c43e689fc5059c889",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +145,149 @@\nIndexing of Zero-Rank Arrays\n----------------------------\n\nAs of NumPy release 0.9.3, zero-rank arrays do not support any indexing::"
  }
]