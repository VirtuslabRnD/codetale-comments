[
  {
    "id" : "35b95975-2fcf-4031-8a3e-eeec17370551",
    "prId" : 15506,
    "prUrl" : "https://github.com/numpy/numpy/pull/15506#pullrequestreview-356008446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67cc66ab-eb3a-432a-81db-eb511e9a107e",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "I would suggest to split this in impact for Python API users and C API users.",
        "createdAt" : "2020-02-10T15:05:13Z",
        "updatedAt" : "2020-03-10T18:50:44Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "4abcdbaec122aa1e6b54961341036ab979023c99",
    "line" : 701,
    "diffHunk" : "@@ -1,1 +699,703 @@References\n----------\n\n.. [pandas_extension_arrays] https://pandas.pydata.org/pandas-docs/stable/development/extending.html#extension-types\n"
  },
  {
    "id" : "d7bebb7a-a7e6-42fb-8e7f-6e379cdcb80b",
    "prId" : 15506,
    "prUrl" : "https://github.com/numpy/numpy/pull/15506#pullrequestreview-361241944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11fc2b7f-f9a7-4685-acf2-cc64c9f2a038",
        "parentId" : null,
        "authorId" : "97c8d8e7-ce2f-4b00-a058-faed41c4c653",
        "body" : "I'm glad to see this come up, even if the eventual decision is not to support these method names.\r\n\r\nOne caution for deciding a set of method names is that it might make it difficult for existing unit libraries to migrate to using dtypes, since they would either need to abandon their existing API, happen to have the exact same API you decide to use for NumPy, or decide to keep using an ndarray subclass or wrapper class.\r\n\r\nOne thing that at least at one point was in the realm of possibility was adding a way for dtypes to define methods that then get attached to ndarray. I totally understand if the eventual decision is that it's too weird or surprising for a dtype to be able to modify the ndarray API. However, that's just about the only way I can think of for it to be possible for all existing unit libraries to migrate to this functionality without introducing API breakages.",
        "createdAt" : "2020-02-19T15:58:26Z",
        "updatedAt" : "2020-03-10T18:50:44Z",
        "lastEditedBy" : "97c8d8e7-ce2f-4b00-a058-faed41c4c653",
        "tags" : [
        ]
      },
      {
        "id" : "a6fa1618-e5e7-4c5b-9641-49a2f2696015",
        "parentId" : "11fc2b7f-f9a7-4685-acf2-cc64c9f2a038",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yes, it may be possible to make the quantity subclass nothing (or little) more than a MixIn.\r\n\r\nFor a dtype to modify the ndarray seems weird, but I have not figured out how weird I think it is (I understand pandas to uses the dtype to indicate the correct subclass). While I like the dtype to be super central, the tuple `(ndarray, DType)` defines the actual theoretical type (space of instances/values) that we are dealing with. My vision is that we want to approach a world where `(Sparse, DType)` is plausible. That implies `DType` must know nothing about `ndarray` explicitly and prefers unit to be a `DType`.\r\nBut: how `(ndarray, DType)` *looks* from python is a slightly different discussion, maybe!\r\n\r\nFrom that standpoint, you could think that a `DType` provides a MixIn which is always used and induces(?)  a subclass of `ndarray`. (Theoretically `(ndarray, np.dtype[float64])` *is* a subtype, so why not a subclass.) Or, you could also have a `ndarray.elementwise.method` namespace that is dtype dependent.\r\n\r\nI love disucussing it, but for now I think it should not be in here – as in included in the NEP – since it is a \"next step\", fully independent of the other thoughts.",
        "createdAt" : "2020-02-19T16:31:19Z",
        "updatedAt" : "2020-03-10T18:50:44Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4abcdbaec122aa1e6b54961341036ab979023c99",
    "line" : 360,
    "diffHunk" : "@@ -1,1 +358,362 @@could be used instead to convert between units.\nThere may be ways to make these more convenient, but those must be left\nfor future discussions::\n\n    >>> units.convert(meters, \"km\")"
  },
  {
    "id" : "5e5cbaea-fa92-4904-9f44-e61bff6a6b7c",
    "prId" : 15506,
    "prUrl" : "https://github.com/numpy/numpy/pull/15506#pullrequestreview-362785469",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee1ff867-a618-4572-acc3-ea31ecaa4230",
        "parentId" : null,
        "authorId" : "6637c892-b4b3-4c79-a2b7-6c2c0ea04ada",
        "body" : "Citation not referenced anywhere",
        "createdAt" : "2020-02-21T17:50:51Z",
        "updatedAt" : "2020-03-10T18:50:44Z",
        "lastEditedBy" : "6637c892-b4b3-4c79-a2b7-6c2c0ea04ada",
        "tags" : [
        ]
      }
    ],
    "commit" : "4abcdbaec122aa1e6b54961341036ab979023c99",
    "line" : 704,
    "diffHunk" : "@@ -1,1 +702,706 @@.. [pandas_extension_arrays] https://pandas.pydata.org/pandas-docs/stable/development/extending.html#extension-types\n\n.. _xarray_dtype_issue: https://github.com/pydata/xarray/issues/1262\n\n.. [pygeos] https://github.com/caspervdw/pygeos"
  },
  {
    "id" : "7c77458e-d02d-4f2f-b9af-db875a03313a",
    "prId" : 15506,
    "prUrl" : "https://github.com/numpy/numpy/pull/15506#pullrequestreview-371085748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d562771-a716-43e7-9859-01fe850f4426",
        "parentId" : null,
        "authorId" : "6637c892-b4b3-4c79-a2b7-6c2c0ea04ada",
        "body" : "What's cgs? typo?",
        "createdAt" : "2020-02-21T18:44:36Z",
        "updatedAt" : "2020-03-10T18:50:44Z",
        "lastEditedBy" : "6637c892-b4b3-4c79-a2b7-6c2c0ea04ada",
        "tags" : [
        ]
      },
      {
        "id" : "748c559d-e8b7-4e71-b1fc-92a29136644a",
        "parentId" : "2d562771-a716-43e7-9859-01fe850f4426",
        "authorId" : "97c8d8e7-ce2f-4b00-a058-faed41c4c653",
        "body" : "centimeter-gram-second",
        "createdAt" : "2020-02-21T19:03:42Z",
        "updatedAt" : "2020-03-10T18:50:44Z",
        "lastEditedBy" : "97c8d8e7-ce2f-4b00-a058-faed41c4c653",
        "tags" : [
        ]
      },
      {
        "id" : "00c3a8a1-a254-4870-8de1-9760705a4c6f",
        "parentId" : "2d562771-a716-43e7-9859-01fe850f4426",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Possibly worth expanding in a comment or sentence before this example.",
        "createdAt" : "2020-03-09T11:23:27Z",
        "updatedAt" : "2020-03-10T18:50:45Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "4abcdbaec122aa1e6b54961341036ab979023c99",
    "line" : 355,
    "diffHunk" : "@@ -1,1 +353,357 @@    >>> meters.astype(Unit[float64](\"km\"))\n    >>> # Convert to centimeter-gram-second (cgs) units:\n    >>> meters.astype(meters.dtype.to_cgs())\n\nThe above notation is somewhat clumsy. Functions"
  },
  {
    "id" : "2eb9a093-3a10-4d86-b7e7-7698cd1a54b5",
    "prId" : 15506,
    "prUrl" : "https://github.com/numpy/numpy/pull/15506#pullrequestreview-362864885",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1551b65-97fc-4b1e-9ed5-de680114851c",
        "parentId" : null,
        "authorId" : "6637c892-b4b3-4c79-a2b7-6c2c0ea04ada",
        "body" : "On second read, it's not very clear to me how this would work under the hood.\r\nDoes it imply that the Unit class will need to define something like a magic method\r\n```python\r\ndef __astype__(self, array: np.ndarray, newtype: numpy.DType) -> np.ndarray:\r\n```\r\n?\r\nWhat happens if the two types belong to different libraries? Would it be possible to define\r\n```python\r\ndef __fromtype__(self, array: np.ndarray) -> np.ndarray:\r\n```\r\nin the target dtype if the ``__astype__`` before in library A (which defined array.dtype) raises TypeError?",
        "createdAt" : "2020-02-21T19:16:24Z",
        "updatedAt" : "2020-03-10T18:50:44Z",
        "lastEditedBy" : "6637c892-b4b3-4c79-a2b7-6c2c0ea04ada",
        "tags" : [
        ]
      },
      {
        "id" : "bc4c52f8-29c7-4bd0-9a6b-0b0172248dcb",
        "parentId" : "e1551b65-97fc-4b1e-9ed5-de680114851c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "They would provide `CastingImpl` objects (or maybe rather C-structs with a specific, extensible initialization syntax) which houses all the necessary information, mainly a way to check casting safety and \"adjust\" the dtypes and then an actual loop doing the cast. These things are in NEP 42, although that will needs a bit settling on the API and revising on the text, I think the general notions are sound by now.\r\n\r\nThat can be extended later (similar to python which has `__getattr__` with which you can get an object even though it is not part of the class dictionary), but initially I want you to provide a list of possible casts at creation time: I.e. one of the DTypes must know about the other one.\r\n\r\nI think that is a good \"basic\" design choice, because I do not really want users to discourage messing with the casting of datatypes you did not define.",
        "createdAt" : "2020-02-21T19:30:07Z",
        "updatedAt" : "2020-03-10T18:50:44Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4abcdbaec122aa1e6b54961341036ab979023c99",
    "line" : 353,
    "diffHunk" : "@@ -1,1 +351,355 @@    >>> meters.astype(Unit[float64](\"s\"))\n    TypeError: Cannot cast meters to seconds.\n    >>> meters.astype(Unit[float64](\"km\"))\n    >>> # Convert to centimeter-gram-second (cgs) units:\n    >>> meters.astype(meters.dtype.to_cgs())"
  },
  {
    "id" : "28f8a7f7-7514-4c6e-87c2-e8555ddc1a4a",
    "prId" : 15506,
    "prUrl" : "https://github.com/numpy/numpy/pull/15506#pullrequestreview-370529405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87e87016-4061-44d2-9db8-967b2f35eae8",
        "parentId" : null,
        "authorId" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "body" : "As mentioned yesterday, the forward-references are inconvenient. Consider adding a brief summary of the phases here to give the reader enough context without having to skip ahead. For example, something like:\r\n\r\nThe proposed refactoring of the datatype system is a large undertaking and thus is proposed to be split into various phases, roughly:\r\n - Phase I: Restructure and extend the datatype infrastructure (This NEP 41)\r\n - Phase II: Incrementally define or rework API (Detailed largely in NEPs 42/43)\r\n - Phase III: Growth of NumPy and Scientific Python Ecosystem capabilities\r\n\r\nFor a more detailed accounting of the various phases, see \"Plan to Approach the Full Refactor\" in the Implementation section below. This NEP proposes to move ahead with the necessary...",
        "createdAt" : "2020-03-06T19:08:09Z",
        "updatedAt" : "2020-03-10T18:50:44Z",
        "lastEditedBy" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4abcdbaec122aa1e6b54961341036ab979023c99",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +111,115 @@For a more detailed accounting of the various phases, see\n\"Plan to Approach the Full Refactor\" in the Implementation section below.\nThis NEP proposes to move ahead with the necessary creation of new dtype\nsubclasses (Phase I),\nand start working on implementing current functionality."
  },
  {
    "id" : "45fa1670-3ca8-4e8d-a272-19baa0aa102c",
    "prId" : 15506,
    "prUrl" : "https://github.com/numpy/numpy/pull/15506#pullrequestreview-370529405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2be6fc6a-3e16-4457-b5f1-e7a3c30de01f",
        "parentId" : null,
        "authorId" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "body" : "Just to be clear, is the goal to incorporate new types like categorical or unit-containing types in NumPy, or to help other libraries that have already implemented something (such as astropy) to re-implement their approach using the new dtype machinery? The wording makes it seem like the latter.",
        "createdAt" : "2020-03-07T02:52:43Z",
        "updatedAt" : "2020-03-10T18:50:44Z",
        "lastEditedBy" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4abcdbaec122aa1e6b54961341036ab979023c99",
    "line" : 428,
    "diffHunk" : "@@ -1,1 +426,430 @@  * Cleanup of legacy behaviour where it is considered buggy or undesirable.\n  * Provide a path to define new datatypes from Python.\n  * Assist the community in creating types such as Units or Categoricals\n  * Allow strings to be used in functions such as ``np.equal`` or ``np.add``.\n  * Remove legacy code paths within NumPy to improve long term maintainability"
  },
  {
    "id" : "e0775215-4514-4d28-8dc9-eb065335f810",
    "prId" : 15506,
    "prUrl" : "https://github.com/numpy/numpy/pull/15506#pullrequestreview-370529405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e8ddce5-112b-406d-8473-c8786c8e522b",
        "parentId" : null,
        "authorId" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "body" : "full-scale",
        "createdAt" : "2020-03-07T03:33:08Z",
        "updatedAt" : "2020-03-10T18:50:44Z",
        "lastEditedBy" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4abcdbaec122aa1e6b54961341036ab979023c99",
    "line" : 562,
    "diffHunk" : "@@ -1,1 +560,564 @@^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe current NumPy datatypes are not full scale python classes.\nThey are instead (prototype) instances of a single ``np.dtype`` class.\nChanging this means that any special handling, e.g. for ``datetime``"
  },
  {
    "id" : "9c0b67a6-c167-4563-b13e-b063d8c05691",
    "prId" : 15506,
    "prUrl" : "https://github.com/numpy/numpy/pull/15506#pullrequestreview-370529405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a71ca344-d69c-40e8-9bdd-62923afa0c0b",
        "parentId" : null,
        "authorId" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "body" : "It took me a couple readings to figure out that the \"Detailed Description\" subheadings correlated to the \"design decisions\" made in the \"Scope\" section. Consider explicitly stating so here in the introduction to the section, or at least linking the subheadings below back to the original listing of the design decisions.",
        "createdAt" : "2020-03-07T03:42:23Z",
        "updatedAt" : "2020-03-10T18:50:44Z",
        "lastEditedBy" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4abcdbaec122aa1e6b54961341036ab979023c99",
    "line" : 553,
    "diffHunk" : "@@ -1,1 +551,555 @@\nDetailed Description\n--------------------\n\nThis section details the design decisions covered by this NEP."
  },
  {
    "id" : "e8ce49e6-3ee6-4021-ad34-579cb2498794",
    "prId" : 15506,
    "prUrl" : "https://github.com/numpy/numpy/pull/15506#pullrequestreview-370529405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "028a1752-9366-41a7-bec8-5be086eda946",
        "parentId" : null,
        "authorId" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "body" : "\"would increase the complexity of both the design and implementation\"",
        "createdAt" : "2020-03-07T03:45:23Z",
        "updatedAt" : "2020-03-10T18:50:44Z",
        "lastEditedBy" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4abcdbaec122aa1e6b54961341036ab979023c99",
    "line" : 624,
    "diffHunk" : "@@ -1,1 +622,626 @@\nOverall, it seem rather than reducing the complexity, i.e. by merging\nthe two distinct type hierarchies, making scalars instances of DTypes would\nincrease the complexity of both the design and implementation.\n"
  },
  {
    "id" : "373c9e0b-9332-418e-a0bd-f7d16c809cd8",
    "prId" : 15506,
    "prUrl" : "https://github.com/numpy/numpy/pull/15506#pullrequestreview-371523035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f29f8560-4e3e-4e3e-88d9-195338ef277c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can we make these links?",
        "createdAt" : "2020-03-08T17:54:26Z",
        "updatedAt" : "2020-03-10T18:50:44Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "88ef5d6c-6000-436b-858f-90f39ceef4ca",
        "parentId" : "f29f8560-4e3e-4e3e-88d9-195338ef277c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yes, but only as they are being merged, and I hope to merge this one first.",
        "createdAt" : "2020-03-09T20:56:29Z",
        "updatedAt" : "2020-03-10T18:50:45Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4abcdbaec122aa1e6b54961341036ab979023c99",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +16,20 @@    This NEP is part of a series of NEPs encompassing first information\n    about the previous dtype implementation and issues with it in NEP 40.\n    NEP 41 (this document) then provides an overview and generic design\n    choices for the refactor.\n    Further NEPs 42 and 43 go into the technical details of the datatype"
  }
]