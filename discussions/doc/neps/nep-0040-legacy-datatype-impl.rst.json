[
  {
    "id" : "25da0ca8-d143-4378-ba15-b4b0d958502d",
    "prId" : 15505,
    "prUrl" : "https://github.com/numpy/numpy/pull/15505#pullrequestreview-353375531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f31f303-3fc6-48f7-a307-dbee0ca52f11",
        "parentId" : null,
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "```suggestion\r\nIn preparation of NumPy enhancement proposals 41, 42, and 43, this\r\n```",
        "createdAt" : "2020-02-04T23:28:55Z",
        "updatedAt" : "2020-03-10T21:39:08Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248cf7a8765b7b53d883f9e7061173817533aac",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@--------\n\nAs a preparation to further NumPy enhancement proposals 41, 42, and 43. This\nNEP details the current status of NumPy datatypes as of NumPy 1.18.\nIt describes some of the technical aspects and concepts that"
  },
  {
    "id" : "f356d40e-ab38-47c6-9b26-a661ca808c28",
    "prId" : 15505,
    "prUrl" : "https://github.com/numpy/numpy/pull/15505#pullrequestreview-353375531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8d87e00-85a5-48d2-abb9-2117b756c403",
        "parentId" : null,
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "```suggestion\r\nThe ``object`` datatype currently serves as a generic fallback for any value\r\n```",
        "createdAt" : "2020-02-05T00:02:07Z",
        "updatedAt" : "2020-03-10T21:39:08Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248cf7a8765b7b53d883f9e7061173817533aac",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +142,146 @@^^^^^^^^^^^^^^^^^^^\n\nThe object datatype currently serves as a generic fallback for any value\nwhich is not otherwise representable.\nHowever, due to not having a well-defined type, it has some issues,"
  },
  {
    "id" : "b96dcc4a-c89c-4d00-b0e1-cbbd40559b7d",
    "prId" : 15505,
    "prUrl" : "https://github.com/numpy/numpy/pull/15505#pullrequestreview-353375531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b28bcdf-347c-454f-87a3-699b377668a8",
        "parentId" : null,
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "```suggestion\r\nThe situation would improve if it were easy to create\r\n```",
        "createdAt" : "2020-02-05T00:06:03Z",
        "updatedAt" : "2020-03-10T21:39:08Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248cf7a8765b7b53d883f9e7061173817533aac",
    "line" : 162,
    "diffHunk" : "@@ -1,1 +160,164 @@Without a well-defined type, functions such as ``isnan()`` or ``conjugate()``\ndo not necessarily work, but can work for a :class:`decimal.Decimal`.\nTo improve this situation it seems desirable to make it easy to create\n``object`` dtypes that represent a specific Python datatype and stores its object\ninside the array in the form of pointer to python ``PyObject``."
  },
  {
    "id" : "006b2429-fee1-463f-a0e9-c52aea78ffd3",
    "prId" : 15505,
    "prUrl" : "https://github.com/numpy/numpy/pull/15505#pullrequestreview-353375531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30571897-430e-4b00-8c09-89703c7a281a",
        "parentId" : null,
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "```suggestion\r\n* NumPy currently returns *scalars*---even for array input in some cases---but, mostly\r\n```",
        "createdAt" : "2020-02-05T00:11:12Z",
        "updatedAt" : "2020-03-10T21:39:08Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248cf7a8765b7b53d883f9e7061173817533aac",
    "line" : 176,
    "diffHunk" : "@@ -1,1 +174,178 @@These issues do not need to solved right away:\n\n* NumPy currently returns *scalars* even for array input in some cases, in most\n  cases this works seamlessly. However, this is only true because the NumPy\n  scalars behave much like NumPy arrays, a feature that general Python objects"
  },
  {
    "id" : "e850058c-4e37-4039-8d3e-12d1ca806c57",
    "prId" : 15505,
    "prUrl" : "https://github.com/numpy/numpy/pull/15505#pullrequestreview-353375531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcb3f6d2-199b-4809-a0fc-44612ecb6283",
        "parentId" : null,
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "```suggestion\r\nthis works seamlessly. However, this is only true because the NumPy\r\n```",
        "createdAt" : "2020-02-05T00:11:29Z",
        "updatedAt" : "2020-03-10T21:39:08Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248cf7a8765b7b53d883f9e7061173817533aac",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +175,179 @@\n* NumPy currently returns *scalars* even for array input in some cases, in most\n  cases this works seamlessly. However, this is only true because the NumPy\n  scalars behave much like NumPy arrays, a feature that general Python objects\n  do not have."
  },
  {
    "id" : "a4a171d5-2e2b-4bd1-afbc-f609467b3d34",
    "prId" : 15505,
    "prUrl" : "https://github.com/numpy/numpy/pull/15505#pullrequestreview-353375531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4084bfcf-5fe9-4bb9-8a13-af73ad9018e5",
        "parentId" : null,
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "```suggestion\r\n  scalars behave much like NumPy arrays, while general Python objects\r\n```",
        "createdAt" : "2020-02-05T00:11:49Z",
        "updatedAt" : "2020-03-10T21:39:08Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248cf7a8765b7b53d883f9e7061173817533aac",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +176,180 @@* NumPy currently returns *scalars* even for array input in some cases, in most\n  cases this works seamlessly. However, this is only true because the NumPy\n  scalars behave much like NumPy arrays, a feature that general Python objects\n  do not have.\n* Seamless integration probably requires that ``np.array(scalar)`` finds the"
  },
  {
    "id" : "73bf6c04-e605-4b3d-bd15-bba0daa333cd",
    "prId" : 15505,
    "prUrl" : "https://github.com/numpy/numpy/pull/15505#pullrequestreview-353375531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03bf188c-3db9-4c98-ae02-862249067371",
        "parentId" : null,
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "```suggestion\r\n  do not.\r\n```",
        "createdAt" : "2020-02-05T00:11:56Z",
        "updatedAt" : "2020-03-10T21:39:08Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248cf7a8765b7b53d883f9e7061173817533aac",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +177,181 @@  cases this works seamlessly. However, this is only true because the NumPy\n  scalars behave much like NumPy arrays, a feature that general Python objects\n  do not have.\n* Seamless integration probably requires that ``np.array(scalar)`` finds the\n  correct DType automatically since some operations (such as indexing) are"
  },
  {
    "id" : "461588c8-cfc0-400d-a1e6-4f2752eb87bc",
    "prId" : 15505,
    "prUrl" : "https://github.com/numpy/numpy/pull/15505#pullrequestreview-353375531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5a8e422-4e25-42a7-b5aa-d6057b6d2f31",
        "parentId" : null,
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "```suggestion\r\n* Seamless integration requires that ``np.array(scalar)`` finds the\r\n```",
        "createdAt" : "2020-02-05T00:12:11Z",
        "updatedAt" : "2020-03-10T21:39:08Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248cf7a8765b7b53d883f9e7061173817533aac",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +178,182 @@  scalars behave much like NumPy arrays, a feature that general Python objects\n  do not have.\n* Seamless integration probably requires that ``np.array(scalar)`` finds the\n  correct DType automatically since some operations (such as indexing) are\n  return the scalar instead of a 0D array."
  },
  {
    "id" : "7ae1ffa1-0838-46b2-98e9-8d633da8d287",
    "prId" : 15505,
    "prUrl" : "https://github.com/numpy/numpy/pull/15505#pullrequestreview-353375531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dfee6329-6091-42f1-b978-7731a6ad6546",
        "parentId" : null,
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "```suggestion\r\n  correct DType automatically, since some operations (such as indexing) should\r\n```",
        "createdAt" : "2020-02-05T00:12:27Z",
        "updatedAt" : "2020-03-10T21:39:08Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248cf7a8765b7b53d883f9e7061173817533aac",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +179,183 @@  do not have.\n* Seamless integration probably requires that ``np.array(scalar)`` finds the\n  correct DType automatically since some operations (such as indexing) are\n  return the scalar instead of a 0D array.\n  This is problematic if multiple users independently decide to implement"
  },
  {
    "id" : "02577641-48ce-4585-b482-5595dc5135ff",
    "prId" : 15505,
    "prUrl" : "https://github.com/numpy/numpy/pull/15505#pullrequestreview-353375531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "034a53ca-309b-4f2b-8235-60ed9b516150",
        "parentId" : null,
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "```suggestion\r\n  This is problematic if multiple users independently decide to implement,\r\n```",
        "createdAt" : "2020-02-05T00:13:15Z",
        "updatedAt" : "2020-03-10T21:39:08Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248cf7a8765b7b53d883f9e7061173817533aac",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +181,185 @@  correct DType automatically since some operations (such as indexing) are\n  return the scalar instead of a 0D array.\n  This is problematic if multiple users independently decide to implement\n  for example a DType for ``decimal.Decimal``.\n"
  },
  {
    "id" : "b2c118a1-8e68-4346-a68f-da93e5d8a1ac",
    "prId" : 15505,
    "prUrl" : "https://github.com/numpy/numpy/pull/15505#pullrequestreview-353375531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90027e23-d45f-41b9-b429-a1f0722ff50c",
        "parentId" : null,
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "```suggestion\r\n  for example, a DType for ``decimal.Decimal``.\r\n```",
        "createdAt" : "2020-02-05T00:13:29Z",
        "updatedAt" : "2020-03-10T21:39:08Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248cf7a8765b7b53d883f9e7061173817533aac",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +182,186 @@  return the scalar instead of a 0D array.\n  This is problematic if multiple users independently decide to implement\n  for example a DType for ``decimal.Decimal``.\n\n"
  },
  {
    "id" : "3680a615-405d-4dc9-8f2f-dcfb8e8f41d3",
    "prId" : 15505,
    "prUrl" : "https://github.com/numpy/numpy/pull/15505#pullrequestreview-353375531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dada8621-742e-4abf-9b45-5930517bcd79",
        "parentId" : null,
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "```suggestion\r\nAn important feature of datatypes is that they can cast between one\r\n```",
        "createdAt" : "2020-02-05T00:35:07Z",
        "updatedAt" : "2020-03-10T21:39:08Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248cf7a8765b7b53d883f9e7061173817533aac",
    "line" : 267,
    "diffHunk" : "@@ -1,1 +265,269 @@^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nOne of the main features which datatypes need to support is casting between one\nanother using ``arr.astype(new_dtype, casting=\"unsafe\")``, or during execution\nof ufuncs with different types (such as adding integer and floating point numbers)."
  },
  {
    "id" : "054b783f-3c1a-4b3b-b314-f8058b5662a4",
    "prId" : 15505,
    "prUrl" : "https://github.com/numpy/numpy/pull/15505#pullrequestreview-353375531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9fdcb52-0fcb-40e7-ac0e-a7ce7ae64d33",
        "parentId" : null,
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "```suggestion\r\nCasting has two distinct parts:\r\n```",
        "createdAt" : "2020-02-05T00:38:04Z",
        "updatedAt" : "2020-03-10T21:39:08Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248cf7a8765b7b53d883f9e7061173817533aac",
    "line" : 276,
    "diffHunk" : "@@ -1,1 +274,278 @@and currently cannot be customized for user defined datatypes.\n\nThe actual casting has two distinct parts:\n\n1. ``copyswap``/``copyswapn`` are defined for each dtype and can handle"
  },
  {
    "id" : "c216026b-b7c6-4bfd-b238-15fc9f4e8eb6",
    "prId" : 15505,
    "prUrl" : "https://github.com/numpy/numpy/pull/15505#pullrequestreview-353375531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e0a71dd-e5d2-4c76-81d1-9f9a9b044599",
        "parentId" : null,
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "🤯",
        "createdAt" : "2020-02-05T00:43:46Z",
        "updatedAt" : "2020-03-10T21:39:08Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248cf7a8765b7b53d883f9e7061173817533aac",
    "line" : 352,
    "diffHunk" : "@@ -1,1 +350,354 @@``TypeResolver``, since the corresponding C-structure necessary to do this\nis public.\nThe only project known to do this is Astropy, which is willing to switch to\na new API if NumPy were to remove the possibility to replace the TypeResolver.\n"
  },
  {
    "id" : "350f420b-b88e-4903-a95f-a0a4c3b2c05f",
    "prId" : 15505,
    "prUrl" : "https://github.com/numpy/numpy/pull/15505#pullrequestreview-353375531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04c31086-0b04-460c-9fec-dbd427d25564",
        "parentId" : null,
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "Can you clarify this somehow?  Why does `fraction_divide(4, 5)` fail?",
        "createdAt" : "2020-02-05T00:45:43Z",
        "updatedAt" : "2020-03-10T21:39:08Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1248cf7a8765b7b53d883f9e7061173817533aac",
    "line" : 362,
    "diffHunk" : "@@ -1,1 +360,364 @@\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nIt is currently only possible for user defined functions to be found/resolved\nif any of the inputs (or the outputs) has the user datatype, since it uses the\n`OO->O` signature."
  }
]