[
  {
    "id" : "07bc66b9-58cd-4829-9510-4951ccedf0c7",
    "prId" : 11303,
    "prUrl" : "https://github.com/numpy/numpy/pull/11303#pullrequestreview-127830852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1e08d33-c562-43aa-9234-a483eb6c9fc3",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "The name now has changed from `types` to `possibly_overloaded` - should add that I think this is a terrible name! Just `overloaded` would be better.\r\n\r\n(Separate: still think an `OrderedDict` would be better - but have to look at implementation.)",
        "createdAt" : "2018-06-11T13:02:57Z",
        "updatedAt" : "2018-06-15T15:32:00Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "48689add-da27-49e5-9f0a-e18d57807be9",
        "parentId" : "d1e08d33-c562-43aa-9234-a483eb6c9fc3",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Oops, switched back to `types`. But maybe `overloaded_types` would be better/more descriptive.",
        "createdAt" : "2018-06-12T06:23:08Z",
        "updatedAt" : "2018-06-15T15:32:00Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "64afe480a38355b6125de3ce044c14251abe718e",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +94,98 @@-  ``func`` is an arbitrary callable exposed by NumPy's public API,\n   which was called in the form ``func(*args, **kwargs)``.\n-  ``types`` is a list of argument types from the original NumPy\n   function call that implement ``__array_function__``, in the order in which\n   they will be called."
  },
  {
    "id" : "d5dafb52-7db7-4569-8ee1-21381b9da636",
    "prId" : 11303,
    "prUrl" : "https://github.com/numpy/numpy/pull/11303#pullrequestreview-127689402",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aaed749d-3ccd-44e6-afc3-d5f5967e0fd4",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I'd argue that \"It should also be possible to skip the test altogether\".",
        "createdAt" : "2018-06-11T13:09:51Z",
        "updatedAt" : "2018-06-15T15:32:00Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "a549c956-5790-4616-acfe-2ba19009d172",
        "parentId" : "aaed749d-3ccd-44e6-afc3-d5f5967e0fd4",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I'm not sure I agree here. This isn't the case for `__array_ufunc__`.",
        "createdAt" : "2018-06-11T17:05:08Z",
        "updatedAt" : "2018-06-15T15:32:00Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "d7dfd234-a65b-48e9-9d14-50ae969f1546",
        "parentId" : "aaed749d-3ccd-44e6-afc3-d5f5967e0fd4",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "It would be if adding `subok=False` didn't cause a bigger delay than checking for `__array_ufunc__`. But perhaps this also suggests that the current phrasing of \"it should be fast\" is good enough.",
        "createdAt" : "2018-06-11T18:35:15Z",
        "updatedAt" : "2018-06-15T15:32:00Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "64afe480a38355b6125de3ce044c14251abe718e",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +152,156 @@   ``__array_function__`` attribute on those inputs, and call those\n   methods appropriately until one succeeds.  This needs to be fast in the\n   common all-NumPy case, and have acceptable performance (no worse than\n   linear time) even if the number of overloaded inputs is large (e.g.,\n   as might be the case for `np.concatenate`)."
  },
  {
    "id" : "4a5c0474-4453-4145-857a-b5f524a12767",
    "prId" : 11303,
    "prUrl" : "https://github.com/numpy/numpy/pull/11303#pullrequestreview-127557549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7785b13-2711-43fe-9a5b-1f336323c688",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Could we include the mention of astropy as well? See comments on original NEP.",
        "createdAt" : "2018-06-11T13:11:20Z",
        "updatedAt" : "2018-06-15T15:32:00Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "64afe480a38355b6125de3ce044c14251abe718e",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +19,23 @@\nDetailed description\n--------------------\n\nNumPy's high level ndarray API has been implemented several times"
  },
  {
    "id" : "28d2ef93-cd1e-4871-9c15-c428222364ea",
    "prId" : 11303,
    "prUrl" : "https://github.com/numpy/numpy/pull/11303#pullrequestreview-127557549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c418f717-512e-4e26-a603-8765c625c895",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "More importantly, the wrapper should be exposed, and the annotation API agreed upon.",
        "createdAt" : "2018-06-11T13:24:43Z",
        "updatedAt" : "2018-06-15T15:32:00Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "64afe480a38355b6125de3ce044c14251abe718e",
    "line" : 343,
    "diffHunk" : "@@ -1,1 +349,353 @@\nIf we want to do this, we should expose the helper function\n``try_array_function_override()`` as a public API.\n\nNon-goals"
  },
  {
    "id" : "bb6ed59d-66cc-43fb-b290-b37f08b61866",
    "prId" : 11303,
    "prUrl" : "https://github.com/numpy/numpy/pull/11303#pullrequestreview-127557549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b100360-46b4-42f6-89b9-3022c8215e4b",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I don't think the downsides are quite the same because if you use the wrappers, the separate \"namespace\" can be created automatically. ",
        "createdAt" : "2018-06-11T13:27:44Z",
        "updatedAt" : "2018-06-15T15:32:00Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "64afe480a38355b6125de3ce044c14251abe718e",
    "line" : 363,
    "diffHunk" : "@@ -1,1 +433,437 @@created for a non-overloaded version of NumPy's high level API, for cases\nwhere performance with NumPy arrays is a critical concern. This has most\nof the same downsides as the separate namespace.\n\nMultiple dispatch"
  },
  {
    "id" : "b7935d51-c6cf-4d11-9a30-46cb370ea11d",
    "prId" : 11374,
    "prUrl" : "https://github.com/numpy/numpy/pull/11374#pullrequestreview-129688809",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8244f38-2549-4a12-a58d-25c67fd33b88",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "To attach the dispatcher, wouldn't one just do\r\n```\r\nnew_func.dispatcher = dispatcher\r\nreturn new_func\r\n```",
        "createdAt" : "2018-06-18T16:40:26Z",
        "updatedAt" : "2018-06-27T05:24:01Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "9e8dfdcd-139f-4ed0-a91e-10453455814b",
        "parentId" : "f8244f38-2549-4a12-a58d-25c67fd33b88",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "This doesn't work for \"builtin\" functions written in C like `np.concatenate`:\r\n```\r\n>>> np.concatenate.foo = 1\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-2-a0d69ae14b06> in <module>()\r\n----> 1 np.concatenate.foo = 1\r\n\r\nAttributeError: 'builtin_function_or_method' object has no attribute 'foo'\r\n```",
        "createdAt" : "2018-06-18T16:46:25Z",
        "updatedAt" : "2018-06-27T05:24:01Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "541705cf-cf25-46b2-8397-dee64565ba10",
        "parentId" : "f8244f38-2549-4a12-a58d-25c67fd33b88",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "But in `__array_ufunc__`, aren't we passing on a wrapped `concatenate`? One can definitely assign to the wrapped function which would become the `np.concatenate` that people actually see:\r\n```\r\ndef new_concat(*args, **kwargs):\r\n    return np.concatenate(*args, **kwargs)\r\n\r\nnc = functools.wraps(np.concatenate)(new_concat)\r\nnc.dispatch = 'a'\r\n```\r\n(obviously, the same would be possible in C)",
        "createdAt" : "2018-06-18T16:57:16Z",
        "updatedAt" : "2018-06-27T05:24:01Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "f15a9fd6-5c7e-4f0e-8ea2-207d0d73d1ff",
        "parentId" : "f8244f38-2549-4a12-a58d-25c67fd33b88",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "It depends on how we choose to implement `np.concatenate` with dispatching. Potentially we could do it either way.\r\n\r\nI'm sure it's also possible to define a normal Python function from C directly rather than a builtin. I don't know the trade-offs there.",
        "createdAt" : "2018-06-18T17:03:41Z",
        "updatedAt" : "2018-06-27T05:24:01Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "b2b48ac4-9e74-462d-b347-c13c3876d322",
        "parentId" : "f8244f38-2549-4a12-a58d-25c67fd33b88",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think it would be wise to keep the wrapped and unwrapped versions separate, so that, e.g., `__array_function__` can directly call the unwrapped one. (I still hope to do the same for the ufuncs).",
        "createdAt" : "2018-06-18T17:07:05Z",
        "updatedAt" : "2018-06-27T05:24:01Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "ebefcb29-fda4-4759-9ebc-956a9293d76c",
        "parentId" : "f8244f38-2549-4a12-a58d-25c67fd33b88",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "And, indeed, for a C implementation one might as well build the python function in C; the API does seem like it wouldn't be that hard (base on having seen a developed interface, not direct experience).",
        "createdAt" : "2018-06-18T17:08:50Z",
        "updatedAt" : "2018-06-27T05:24:01Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "ef878f02-08f0-45b9-88f5-912d1d59e6eb",
        "parentId" : "f8244f38-2549-4a12-a58d-25c67fd33b88",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "p.s. one of the points of the wrapping in the example is to have access to `dispatch` without actually having to pass that in; it therefore must always be possible to expose it!",
        "createdAt" : "2018-06-18T17:15:00Z",
        "updatedAt" : "2018-06-27T05:24:01Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "221ad6a9-5719-4064-96ec-2472cc612c7e",
        "parentId" : "f8244f38-2549-4a12-a58d-25c67fd33b88",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "> p.s. one of the points of the wrapping in the example is to have access to dispatch without actually having to pass that in; it therefore must always be possible to expose it!\r\n\r\nI'm not sure I follow here: what is \"it\"? :)",
        "createdAt" : "2018-06-18T17:28:53Z",
        "updatedAt" : "2018-06-27T05:24:01Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "9782429b-628b-424d-acd1-1cbbdd360818",
        "parentId" : "f8244f38-2549-4a12-a58d-25c67fd33b88",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "`dispatch`: your wrapped function *must* be able to call `dispatch` and therefore has access to it, and must thus be able to expose it to the outside. Of course, this does rely on having the wrapped function be the one in the `numpy` namespace and identical to the one passed on in `__array_function__`.\r\n\r\nMaybe most relevant to the NEP: maybe good to state a preference for C functions being wrapped, not having dispatch cooked inside.",
        "createdAt" : "2018-06-18T17:41:39Z",
        "updatedAt" : "2018-06-27T05:24:01Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "dc10c595-163d-4ce7-83e6-cd9cb432262c",
        "parentId" : "f8244f38-2549-4a12-a58d-25c67fd33b88",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "By `dispatch` do you mean the operation specific function that returns arguments to check (what I call `dispatcher`) or the decorator `@array_function_dispatch`?",
        "createdAt" : "2018-06-18T17:52:12Z",
        "updatedAt" : "2018-06-27T05:24:01Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "0827837e-884b-4699-af5b-c25fe5dc8e93",
        "parentId" : "f8244f38-2549-4a12-a58d-25c67fd33b88",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Sorry, yes, I meant the `dispatcher` used inside `new_func`",
        "createdAt" : "2018-06-18T18:42:06Z",
        "updatedAt" : "2018-06-27T05:24:01Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "557301558d786eb1de85b8ab2f747b25ef99ef7e",
    "line" : 232,
    "diffHunk" : "@@ -1,1 +341,345 @@                    return value\n                return func(*args, **kwargs)\n            return new_func\n        return decorator\n"
  },
  {
    "id" : "77219318-db88-4de1-a7e9-556158ff4fe4",
    "prId" : 11374,
    "prUrl" : "https://github.com/numpy/numpy/pull/11374#pullrequestreview-131040811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "810c1264-112d-466e-a06a-95e7eaacea54",
        "parentId" : null,
        "authorId" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "body" : "It might be worth mentioning that this isn't  a catch-all thing, it *doesn't always work* on arbitrary callables if they aren't Python functions. I ran into this trying to nicely wrap ufuncs. [Here's a quick demo](https://gist.github.com/hameerabbasi/7301e2895f5540745daa65365b5a8890), it shows that `repr` and `string` don't work, but `__doc__` does. It's worth noting that this can be worked around, see https://github.com/pydata/sparse/blob/b51d74924d62ff6537b15ce4e1dd4e56080a3b6f/sparse/utils.py#L187-L191\r\n\r\nIt might be worth investigating this as a Python issue, but I'm not well-versed enough in Python internals to say if this is actually a bug.",
        "createdAt" : "2018-06-21T07:53:02Z",
        "updatedAt" : "2018-06-27T05:24:01Z",
        "lastEditedBy" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "tags" : [
        ]
      },
      {
        "id" : "84bbdeb0-f24e-469f-9a2a-86294f4a4b0c",
        "parentId" : "810c1264-112d-466e-a06a-95e7eaacea54",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Yeah, I think this only works well Python functions. For classes/methods, we would need another solution.\r\n\r\nBut I think functions are mostly what we want to cover in this NEP.",
        "createdAt" : "2018-06-22T01:12:55Z",
        "updatedAt" : "2018-06-27T05:24:01Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "557301558d786eb1de85b8ab2f747b25ef99ef7e",
    "line" : 285,
    "diffHunk" : "@@ -1,1 +360,364 @@\nIt's particularly worth calling out the decorator's use of\n``functools.wraps``:\n\n- This ensures that the wrapped function has the same name and docstring as"
  }
]