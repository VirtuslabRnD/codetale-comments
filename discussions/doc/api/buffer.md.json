[
  {
    "id" : "0a3305f7-ee91-4287-852d-5d9dabc4e6bf",
    "prId" : 7784,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c4c6690-6244-4e08-a2c6-9369e8d28e3d",
        "parentId" : null,
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "tbh, I’d prefer `exclusive` over `not inclusive` here, but that’s certainly a question of personal taste.\n",
        "createdAt" : "2016-07-20T01:43:57Z",
        "updatedAt" : "2016-07-22T21:42:40Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      },
      {
        "id" : "1944f974-a231-4b7b-9557-166668287383",
        "parentId" : "6c4c6690-6244-4e08-a2c6-9369e8d28e3d",
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "Should the docs indicate `unsigned`? Since we're putting `{Integer}` instead of `{Number}`, seems having it a little more defined makes sense. Maybe `{Uint32}`?\n\nAlso, I'm honestly not sure what \"not inclusive\" is trying to tell me here.\n",
        "createdAt" : "2016-07-20T03:10:43Z",
        "updatedAt" : "2016-07-22T21:42:40Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      },
      {
        "id" : "d507f52e-e290-406b-a347-b784d8992f40",
        "parentId" : "6c4c6690-6244-4e08-a2c6-9369e8d28e3d",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "@trevnorris It means that the index `targetEnd` is not included in the range.\n",
        "createdAt" : "2016-07-20T03:15:46Z",
        "updatedAt" : "2016-07-22T21:42:40Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3127df59ab23baa68e915d62ea1997adb5669e0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +890,894 @@  comparison. **Default:** `0`\n* `targetEnd` {Integer} The offset with `target` at which to end comparison\n  (not inclusive). Ignored when `targetStart` is `undefined`.\n  **Default:** `target.length`\n* `sourceStart` {Integer} The offset within `buf` at which to begin comparison."
  },
  {
    "id" : "6b948a4e-eaf6-47d7-9cd1-f022bbbb9cef",
    "prId" : 8022,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d2092dd-0530-408e-8b7b-562dbf7d0ca2",
        "parentId" : null,
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "quick note, cc1318b5ed1ec67ae78afde70d52cbea794e3bad contains documentation changes for these entries. not sure if it's worth while to also back port those.\n",
        "createdAt" : "2016-08-09T16:30:16Z",
        "updatedAt" : "2016-08-09T16:30:16Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      },
      {
        "id" : "e5364cec-781a-4592-9930-483c2e4566c1",
        "parentId" : "3d2092dd-0530-408e-8b7b-562dbf7d0ca2",
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "I think if this PR lands the commits from #7784 should land (mostly) cleanly and will be included automatically then? cc1318b definitely does, so I’d expect it to be picked up. I can add that one here if you think it makes reviewing easier?\n",
        "createdAt" : "2016-08-09T17:31:20Z",
        "updatedAt" : "2016-08-09T17:31:20Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      },
      {
        "id" : "d1638b63-03ab-4cce-b8d9-6595cbe8215f",
        "parentId" : "3d2092dd-0530-408e-8b7b-562dbf7d0ca2",
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "i'm not worried about adding them in this PR. i don't even feel particularly strong about landing the doc changes. just thought it be useful to bring it up.\n",
        "createdAt" : "2016-08-09T18:05:28Z",
        "updatedAt" : "2016-08-09T18:05:28Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      }
    ],
    "commit" : "da9bd2fc48e1e0d65b62765d9750b43669f0ca20",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +176,180 @@_Note_: Today's browsers follow the [WHATWG\nspec](https://encoding.spec.whatwg.org/) that aliases both `latin1` and\n`iso-8859-1` to `win-1252`. Meaning, while doing something like `http.get()`,\nif the returned charset is one of those listed in the WHATWG spec it's possible\nthat the server actually returned `win-1252` encoded data, and using `latin1`"
  },
  {
    "id" : "ccc6bcdc-a97a-4422-8344-4a837902b94f",
    "prId" : 11238,
    "prUrl" : "https://github.com/nodejs/node/pull/11238#pullrequestreview-20850234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f616ec2-9001-45d0-af38-36a92f63cfe5",
        "parentId" : null,
        "authorId" : "fd6121e5-716b-4d0d-aef4-eef51dd23a40",
        "body" : "The return value could be smaller too (e.g. `Buffer.byteLength('1345 4 ', 'hex') === 3`, `Buffer.from('1345 4 ').byteLength === 7`), but then since the data is invalid it's just hard to say. Maybe just say something like `the return value is meaningless and should not be used`? ",
        "createdAt" : "2017-02-08T19:36:49Z",
        "updatedAt" : "2017-02-08T19:36:57Z",
        "lastEditedBy" : "fd6121e5-716b-4d0d-aef4-eef51dd23a40",
        "tags" : [
        ]
      },
      {
        "id" : "e43dca0a-13de-4ba0-84bd-a70dfd633626",
        "parentId" : "5f616ec2-9001-45d0-af38-36a92f63cfe5",
        "authorId" : "fd6121e5-716b-4d0d-aef4-eef51dd23a40",
        "body" : "Hmm, wait, I forgot to pass `hex` to `Buffer.from('1345 4 ')`, that one would just throws `TypeError: Invalid hex string`, so there is nothing to compare :/",
        "createdAt" : "2017-02-08T19:39:59Z",
        "updatedAt" : "2017-02-08T19:39:59Z",
        "lastEditedBy" : "fd6121e5-716b-4d0d-aef4-eef51dd23a40",
        "tags" : [
        ]
      },
      {
        "id" : "a0c1ae14-fd21-4806-9a9e-5d5b3681d657",
        "parentId" : "5f616ec2-9001-45d0-af38-36a92f63cfe5",
        "authorId" : "b1a4a0f2-58c2-41e0-b6c5-23498746e59f",
        "body" : "Yeah, logically there is no way for it to be smaller. That would imply that you can encode more data by using an invalid string than a valid string.\r\n\r\nIt's not completely meaningless - e.g. if you allocate a Buffer with the size at least Buffer.byteLength, then the actual buffer will fit in it. Although I can't imagine a use case for it.",
        "createdAt" : "2017-02-08T19:44:42Z",
        "updatedAt" : "2017-02-08T19:44:42Z",
        "lastEditedBy" : "b1a4a0f2-58c2-41e0-b6c5-23498746e59f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2b61a65e1aeb71d648a8088fe894617299233f6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +621,625 @@*Note* that for `'base64'` and `'hex'`, this function assumes valid input. For\nstrings that contain non-Base64/Hex-encoded data (e.g. whitespace), the return\nvalue might be greater than the length of a `Buffer` created from the string.\n\nExample:"
  },
  {
    "id" : "54d8b892-8835-4fc0-a21b-e5dd85eb5a0f",
    "prId" : 17427,
    "prUrl" : "https://github.com/nodejs/node/pull/17427#pullrequestreview-81603717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c077cea3-7f2a-495c-ae6c-d80c55735069",
        "parentId" : null,
        "authorId" : "84392f84-0848-409d-9e1e-0627d211cf90",
        "body" : "Micro-nit: `a` -> `an`",
        "createdAt" : "2017-12-06T17:32:14Z",
        "updatedAt" : "2017-12-06T17:32:14Z",
        "lastEditedBy" : "84392f84-0848-409d-9e1e-0627d211cf90",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd174df353e78cde9181299adbf501a4a694dee8",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +1277,1281 @@// Prints: <Buffer aa aa aa aa aa>\nconsole.log(buf.fill('aazz', 'hex'));\n// Throws a exception.\nconsole.log(buf.fill('zz', 'hex'));\n```"
  }
]