[
  {
    "id" : "1134f0a8-815c-46e3-894f-6bd83135fdb5",
    "prId" : 7637,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48fcca70-c5bf-497c-b92a-b2a2ce7b640e",
        "parentId" : null,
        "authorId" : "18a0a2b7-cb40-4ae7-b110-7ab494225c65",
        "body" : "does `sh` not work on these?\n",
        "createdAt" : "2016-07-13T22:08:09Z",
        "updatedAt" : "2016-07-14T09:28:16Z",
        "lastEditedBy" : "18a0a2b7-cb40-4ae7-b110-7ab494225c65",
        "tags" : [
        ]
      },
      {
        "id" : "bc613e8c-3899-4ba3-b9a7-85376ec60778",
        "parentId" : "48fcca70-c5bf-497c-b92a-b2a2ce7b640e",
        "authorId" : "4bb0c2a5-ae65-4a7c-b24b-faa4000cdc5b",
        "body" : "It does highlight something, but not good.\n\nExample:\n\n``` sh\n$ cat script.js\nfunction bad() {\n  require('fs').readFile('/');\n}\nbad();\n\n$ env NODE_DEBUG=fs node script.js\nfs.js:88\n        throw backtrace;\n        ^\nError: EISDIR: illegal operation on a directory, read\n    <stack trace.>\n```\n\nIt's not a shell script, it's two shell commands + their output, and formatting the output as if it was a part of a shell script isn't a good idea imo.\n",
        "createdAt" : "2016-07-14T03:18:14Z",
        "updatedAt" : "2016-07-14T09:28:16Z",
        "lastEditedBy" : "4bb0c2a5-ae65-4a7c-b24b-faa4000cdc5b",
        "tags" : [
        ]
      },
      {
        "id" : "aa94cc9c-10f1-41dd-a259-3c984522f0dc",
        "parentId" : "48fcca70-c5bf-497c-b92a-b2a2ce7b640e",
        "authorId" : "18a0a2b7-cb40-4ae7-b110-7ab494225c65",
        "body" : "`console` might work:\n\n``` console\n$ cat script.js\nfunction bad() {\n  require('fs').readFile('/');\n}\nbad();\n\n$ env NODE_DEBUG=fs node script.js\nfs.js:88\n        throw backtrace;\n        ^\nError: EISDIR: illegal operation on a directory, read\n    <stack trace.>\n```\n",
        "createdAt" : "2016-07-14T15:52:33Z",
        "updatedAt" : "2016-07-14T15:52:33Z",
        "lastEditedBy" : "18a0a2b7-cb40-4ae7-b110-7ab494225c65",
        "tags" : [
        ]
      },
      {
        "id" : "53ef9cbf-6ea1-40a9-928a-5233f93918a3",
        "parentId" : "48fcca70-c5bf-497c-b92a-b2a2ce7b640e",
        "authorId" : "4bb0c2a5-ae65-4a7c-b24b-faa4000cdc5b",
        "body" : "Hm, nice. Will check if our doc tooling supports it and will file a pull request to fix that if it is.\nThanks!\n",
        "createdAt" : "2016-07-14T16:08:42Z",
        "updatedAt" : "2016-07-14T16:08:42Z",
        "lastEditedBy" : "4bb0c2a5-ae65-4a7c-b24b-faa4000cdc5b",
        "tags" : [
        ]
      },
      {
        "id" : "17778efb-a5e5-4885-8190-0a5105c3f9be",
        "parentId" : "48fcca70-c5bf-497c-b92a-b2a2ce7b640e",
        "authorId" : "4bb0c2a5-ae65-4a7c-b24b-faa4000cdc5b",
        "body" : "This is how our doc tooling renders it:\n![screenshot_20160716_163656](https://cloud.githubusercontent.com/assets/291301/16895116/90996f2e-4b73-11e6-8ac3-a161d1810958.png)\n\nThat doesn't look good enough to me.\n",
        "createdAt" : "2016-07-16T13:37:52Z",
        "updatedAt" : "2016-07-16T13:37:52Z",
        "lastEditedBy" : "4bb0c2a5-ae65-4a7c-b24b-faa4000cdc5b",
        "tags" : [
        ]
      },
      {
        "id" : "805d9a61-80ad-4f15-a506-8434caa93a7d",
        "parentId" : "48fcca70-c5bf-497c-b92a-b2a2ce7b640e",
        "authorId" : "18a0a2b7-cb40-4ae7-b110-7ab494225c65",
        "body" : "Hmm yeah, that sucks. Guess we should leave it at `text` until something better turns up :)\n",
        "createdAt" : "2016-07-18T17:42:58Z",
        "updatedAt" : "2016-07-18T17:42:58Z",
        "lastEditedBy" : "18a0a2b7-cb40-4ae7-b110-7ab494225c65",
        "tags" : [
        ]
      }
    ],
    "commit" : "a58b48bc3bcf43f7090d4cc914606af68fe55815",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +75,79 @@site, set the `NODE_DEBUG` environment variable:\n\n```txt\n$ cat script.js\nfunction bad() {"
  },
  {
    "id" : "f4a463a8-2de2-44b9-ba25-fc1a6b265cc7",
    "prId" : 12442,
    "prUrl" : "https://github.com/nodejs/node/pull/12442#pullrequestreview-33424762",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d43aeb4e-31be-42f3-ab01-5b478b882be6",
        "parentId" : null,
        "authorId" : "23c9565c-5fe0-4faf-82b2-dc40116c9bfa",
        "body" : "Going to add an example here too.",
        "createdAt" : "2017-04-19T07:25:29Z",
        "updatedAt" : "2017-05-09T13:02:10Z",
        "lastEditedBy" : "23c9565c-5fe0-4faf-82b2-dc40116c9bfa",
        "tags" : [
        ]
      },
      {
        "id" : "1bf007dc-b8b2-4196-ad54-4a6829f1f24f",
        "parentId" : "d43aeb4e-31be-42f3-ab01-5b478b882be6",
        "authorId" : "23c9565c-5fe0-4faf-82b2-dc40116c9bfa",
        "body" : "Did https://github.com/addaleax/node/pull/5/commits/07acf080fc774cef2030b020e5f2a54d4016fb00 for timers, but not sure I can add an example here as there is no non-promise version here. \r\n\r\n",
        "createdAt" : "2017-04-19T07:44:09Z",
        "updatedAt" : "2017-05-09T13:02:10Z",
        "lastEditedBy" : "23c9565c-5fe0-4faf-82b2-dc40116c9bfa",
        "tags" : [
        ]
      }
    ],
    "commit" : "faf6654ff75e0f275afddfd980387235c3ddf103",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +2400,2404 @@`bytesWritten` specifies how many _bytes_ were written from `buffer`.\n\nIf this method is invoked as its [`util.promisify()`][]ed version, it returns\na Promise for an object with `bytesWritten` and `buffer` properties.\n"
  },
  {
    "id" : "6195b142-2bd2-45b8-b853-41b82516c9ff",
    "prId" : 13173,
    "prUrl" : "https://github.com/nodejs/node/pull/13173#pullrequestreview-41891399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29fd2b13-12e1-4a43-8bfc-48ac59ae1ca0",
        "parentId" : null,
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "I'm thinking maybe we should just drop the whole bit about connected-ness now, since *technically* the `Date` objects *are* connected at least until first use (since they draw from the number-based properties)...",
        "createdAt" : "2017-05-26T00:03:13Z",
        "updatedAt" : "2017-06-07T20:16:33Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "bc34a056-f9e7-4692-888d-6f7dc60c931e",
        "parentId" : "29fd2b13-12e1-4a43-8bfc-48ac59ae1ca0",
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "But we do call them `alternate representation` which could imply the same underlying state...\r\nWe could go with a more radical approach, not cache the `Date`s and remove the setters. Then say that the `Date` fields are ephemeral and mutating them has no effect.\r\nI don't see a really obvious use case for (1) accessing a `Date` several times (2) mutating the `Date` for downstream processing.",
        "createdAt" : "2017-05-26T00:10:10Z",
        "updatedAt" : "2017-06-07T20:16:33Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      },
      {
        "id" : "61cc9f1e-3271-4c8a-b49a-c1b6a96aefe4",
        "parentId" : "29fd2b13-12e1-4a43-8bfc-48ac59ae1ca0",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "Thoughts @nodejs/collaborators?",
        "createdAt" : "2017-05-26T00:15:39Z",
        "updatedAt" : "2017-06-07T20:16:33Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      },
      {
        "id" : "cf82c1bf-0835-4012-943e-3216f77be29c",
        "parentId" : "29fd2b13-12e1-4a43-8bfc-48ac59ae1ca0",
        "authorId" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "body" : "With current changeset this is a moot point for now. We should move connection discussion to https://github.com/nodejs/node/pull/12818",
        "createdAt" : "2017-06-02T21:47:53Z",
        "updatedAt" : "2017-06-07T20:16:33Z",
        "lastEditedBy" : "23dd1f9f-2ce6-4461-ad78-bdc0fc563445",
        "tags" : [
        ]
      }
    ],
    "commit" : "47b9772f52aba7693eed4df535b35de65ac22c49",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +347,351 @@that hold the corresponding times in milliseconds. Their precision is platform\nspecific. `atime`, `mtime`, `ctime`, and `birthtime` are [`Date`][MDN-Date]\nobject alternate representations of the various times. The `Date` and number\nvalues are not connected. Assigning a new number value, or mutating the `Date`\nvalue, will not be reflected in the corresponding alternate representation."
  },
  {
    "id" : "d6604f05-a8d1-4095-8a0d-2c9716510f8e",
    "prId" : 13173,
    "prUrl" : "https://github.com/nodejs/node/pull/13173#pullrequestreview-40564487",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "385f0c54-70ba-4e85-a723-ec51cdffcd8d",
        "parentId" : null,
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "~~This sounds like you could actually change the time of a `Date` object, but I am pretty sure thatâ€™s not possible?~~",
        "createdAt" : "2017-05-26T16:22:49Z",
        "updatedAt" : "2017-06-07T20:16:33Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      },
      {
        "id" : "c7c6423d-5127-4dbc-88fa-158f2bc33e99",
        "parentId" : "385f0c54-70ba-4e85-a723-ec51cdffcd8d",
        "authorId" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "body" : "There are `date.setTime()`, `date.setHours()`, etc.",
        "createdAt" : "2017-05-26T16:27:56Z",
        "updatedAt" : "2017-06-07T20:16:33Z",
        "lastEditedBy" : "c5f34109-f61d-4540-9a67-e4a5494934e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "47b9772f52aba7693eed4df535b35de65ac22c49",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +349,353 @@object alternate representations of the various times. The `Date` and number\nvalues are not connected. Assigning a new number value, or mutating the `Date`\nvalue, will not be reflected in the corresponding alternate representation.\n\n"
  },
  {
    "id" : "61809c96-8277-466a-a7a3-0a7a5244bc6c",
    "prId" : 15034,
    "prUrl" : "https://github.com/nodejs/node/pull/15034#pullrequestreview-58738122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fce9e08f-619b-42a4-ae0f-a885dfe4b542",
        "parentId" : null,
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "Are we *certain* this should be the default? I don't want to see bug reports later about how Node.js made it so that their files were all screwed up... and there is a non-zero chance of abusing this.",
        "createdAt" : "2017-08-25T18:53:00Z",
        "updatedAt" : "2017-09-08T04:08:19Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      },
      {
        "id" : "6a31b979-e066-4121-89d1-0c561ade76d0",
        "parentId" : "fce9e08f-619b-42a4-ae0f-a885dfe4b542",
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "Yes. `cp` defaults to overwriting, as does our own `fs.rename()`.",
        "createdAt" : "2017-08-25T18:57:15Z",
        "updatedAt" : "2017-09-08T04:08:19Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      },
      {
        "id" : "ff697c4c-6ef6-4628-911b-1aa520b19d54",
        "parentId" : "fce9e08f-619b-42a4-ae0f-a885dfe4b542",
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "Yeah, I'm aware, just makes me rather cringy. Guess I'll grit my teeth and bear it.",
        "createdAt" : "2017-08-25T19:01:45Z",
        "updatedAt" : "2017-09-08T04:08:19Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      }
    ],
    "commit" : "11b7428832466dd6933e9c26deaf3a4ce1d33cef",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +758,762 @@* `src` {string|Buffer|URL} source filename to copy\n* `dest` {string|Buffer|URL} destination filename of the copy operation\n* `flags` {number} modifiers for copy operation. **Default:** `0`\n* `callback` {Function}\n"
  },
  {
    "id" : "24ea8a18-a984-4088-bcf6-ef9121d4dbca",
    "prId" : 15034,
    "prUrl" : "https://github.com/nodejs/node/pull/15034#pullrequestreview-59667386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59e04886-2718-4d9a-a869-698441c26a97",
        "parentId" : null,
        "authorId" : "23c9565c-5fe0-4faf-82b2-dc40116c9bfa",
        "body" : "I would love to see a code example in the docs",
        "createdAt" : "2017-08-30T18:14:50Z",
        "updatedAt" : "2017-09-08T04:08:19Z",
        "lastEditedBy" : "23c9565c-5fe0-4faf-82b2-dc40116c9bfa",
        "tags" : [
        ]
      },
      {
        "id" : "21fd4d28-969f-4671-a2d0-42c561d25e86",
        "parentId" : "59e04886-2718-4d9a-a869-698441c26a97",
        "authorId" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "body" : "There will be one.",
        "createdAt" : "2017-08-30T19:25:48Z",
        "updatedAt" : "2017-09-08T04:08:19Z",
        "lastEditedBy" : "ff334962-2ee8-45f1-ad4a-cfb65ffd6744",
        "tags" : [
        ]
      }
    ],
    "commit" : "11b7428832466dd6933e9c26deaf3a4ce1d33cef",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +751,755 @@[FS Constants][].\n\n## fs.copyFile(src, dest[, flags], callback)\n<!-- YAML\nadded: REPLACEME"
  },
  {
    "id" : "bf10fa94-d1dc-41b1-b836-8828208c1264",
    "prId" : 31553,
    "prUrl" : "https://github.com/nodejs/node/pull/31553#pullrequestreview-351241555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d115da7-0b92-4467-b8f2-f884af24ce24",
        "parentId" : null,
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "Just leaving it at this makes it a bit confusing which should be used. Not sure I have a better suggestion. Is the intent to eventually deprecate `require('fs').promises`?",
        "createdAt" : "2020-01-31T00:53:11Z",
        "updatedAt" : "2020-02-19T06:16:57Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      },
      {
        "id" : "fefad43f-a112-4d06-b13b-8b6da4c74ea4",
        "parentId" : "1d115da7-0b92-4467-b8f2-f884af24ce24",
        "authorId" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "body" : "I personally have no intention to deprecate it",
        "createdAt" : "2020-01-31T01:00:39Z",
        "updatedAt" : "2020-02-19T06:16:57Z",
        "lastEditedBy" : "af965d24-c34b-4c03-8ff1-5a5da6036269",
        "tags" : [
        ]
      }
    ],
    "commit" : "b8e41774d4287d128a40f7ecfecf170fe16fe9ed",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4238,4242 @@The `fs.promises` API provides an alternative set of asynchronous file system\nmethods that return `Promise` objects rather than using callbacks. The\nAPI is accessible via `require('fs').promises` or `require('fs/promises')`.\n\n### class: `FileHandle`"
  },
  {
    "id" : "34916482-5071-4d78-ad35-0f7978563ca9",
    "prId" : 32128,
    "prUrl" : "https://github.com/nodejs/node/pull/32128#pullrequestreview-370623876",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbb3c4da-bce8-42f1-86a8-d5e60c062a30",
        "parentId" : null,
        "authorId" : "317a40c8-118b-468d-95af-c54d45832d8a",
        "body" : "I think we could be clearer in stating what this option is actually doing. Either some more text here like we do for the `fstat()` functions, and/or something in the prose below which discusses the `options` argument.",
        "createdAt" : "2020-03-06T21:01:33Z",
        "updatedAt" : "2020-03-08T19:14:51Z",
        "lastEditedBy" : "317a40c8-118b-468d-95af-c54d45832d8a",
        "tags" : [
        ]
      }
    ],
    "commit" : "99e57259ecc15cdcd7fc73d454ff93ce36a94bcd",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +3847,3851 @@* `filename` {string|Buffer|URL}\n* `options` {Object}\n  * `bigint` {boolean} **Default:** `false`\n  * `persistent` {boolean} **Default:** `true`\n  * `interval` {integer} **Default:** `5007`"
  },
  {
    "id" : "6b99697a-477a-49cf-aecc-f1c55e3ca6a3",
    "prId" : 37216,
    "prUrl" : "https://github.com/nodejs/node/pull/37216#pullrequestreview-593513197",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d66ccb7-5db8-4c85-9baa-316d8e1743d0",
        "parentId" : null,
        "authorId" : "8db0d8c2-07d2-47a4-b89e-81deebe1b869",
        "body" : "It's a bit hard to read this diff. Does this say the `recursive` option is deprecated? That shouldn't be the case for `rm` but I might be reading this wrong.",
        "createdAt" : "2021-02-18T17:31:42Z",
        "updatedAt" : "2021-03-20T18:17:40Z",
        "lastEditedBy" : "8db0d8c2-07d2-47a4-b89e-81deebe1b869",
        "tags" : [
        ]
      },
      {
        "id" : "8ed0381f-87a9-42ed-8bc6-6b777599a3ce",
        "parentId" : "8d66ccb7-5db8-4c85-9baa-316d8e1743d0",
        "authorId" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "body" : "No, it says that `recursive` option of `fs.rmDirSync` is deprecated. `fs.rm` is actually 1000 lines above if you check the line number, but I agree the diff is kinda hard to read here.",
        "createdAt" : "2021-02-18T18:15:25Z",
        "updatedAt" : "2021-03-20T18:17:40Z",
        "lastEditedBy" : "df7fe02e-189e-45c5-a682-9b780fdce53e",
        "tags" : [
        ]
      }
    ],
    "commit" : "9948036ee05093e60e82a6cf90d33a25e4b03226",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +4836,4840 @@  * `recursive` {boolean} If `true`, perform a recursive directory removal. In\n    recursive mode, operations are retried on failure. **Default:** `false`.\n    **Deprecated**.\n  * `retryDelay` {integer} The amount of time in milliseconds to wait between\n    retries. This option is ignored if the `recursive` option is not `true`."
  }
]