[
  {
    "id" : "6061762b-1879-474a-9979-117e4ac9c06e",
    "prId" : 28577,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28577#pullrequestreview-292013538",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74729d5f-6a5f-4c88-8e9a-374bf2320e5f",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Does the `out-of-core` label apply here?",
        "createdAt" : "2019-09-23T19:34:09Z",
        "updatedAt" : "2019-09-26T12:44:26Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f6d0514f-7234-435b-bc13-1a11190d7c96",
        "parentId" : "74729d5f-6a5f-4c88-8e9a-374bf2320e5f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you clarify?\r\n\r\nIf you're asking if this is an example of an out-of-corse algorithm, then yes. But I think you may be asking something else :)",
        "createdAt" : "2019-09-23T19:44:51Z",
        "updatedAt" : "2019-09-26T12:44:26Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c9ed9f32-d15b-4422-9f69-85fe73b5245b",
        "parentId" : "74729d5f-6a5f-4c88-8e9a-374bf2320e5f",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "No I just didn't think this was an `out-of-core` algorithm since we do in fact load an entire data frame into memory (granted via iteration)",
        "createdAt" : "2019-09-23T19:47:07Z",
        "updatedAt" : "2019-09-26T12:44:26Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "9fcc4e48-c00e-468b-aaa2-b07051af8212",
        "parentId" : "74729d5f-6a5f-4c88-8e9a-374bf2320e5f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "It's out-of-core in the sense that we aren't loading the entire \"logical dataset\" on disk into memory at once. The algorithm scales to arbitrary sizes as long as each chunk (individual parquet file) fits in memory.\r\n\r\nI'll try to clarify this in the example.",
        "createdAt" : "2019-09-23T19:50:15Z",
        "updatedAt" : "2019-09-26T12:44:26Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "78eb2f11c9e5c74d50e5f7f3657e0bf453745bd2",
    "line" : 204,
    "diffHunk" : "@@ -1,1 +202,206 @@       └── ts-11.parquet\n\nNow we'll implement an out-of-core ``value_counts``. The peak memory usage of this\nworkflow is the single largest chunk, plus a small series storing the unique value\ncounts up to this point. As long as each individual file fits in memory, this will"
  },
  {
    "id" : "3568c649-35e0-4939-9ecf-550d7d01cca3",
    "prId" : 28577,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28577#pullrequestreview-292541524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5043edc9-9372-4d13-8d54-b7db600962c5",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is this necessary? Just seems like some cruft in here for dtype preservation. Ideally would like to keep code here at a minimum",
        "createdAt" : "2019-09-24T16:01:36Z",
        "updatedAt" : "2019-09-26T12:44:26Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0e65dbb4-94f6-4cd0-8dea-2c9cc14e927a",
        "parentId" : "5043edc9-9372-4d13-8d54-b7db600962c5",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Without it, you get a float:\r\n\r\n```python\r\nIn [16]: s = pd.Series(dtype=int)\r\n\r\nIn [17]: s.add(t, fill_value=0)\r\nOut[17]:\r\n0    1.0\r\n1    2.0\r\ndtype: float64\r\n\r\n```\r\n\r\nI think it'd be strange for a `value_counts` to return floating-point values in the counts.",
        "createdAt" : "2019-09-24T16:11:18Z",
        "updatedAt" : "2019-09-26T12:44:26Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "78eb2f11c9e5c74d50e5f7f3657e0bf453745bd2",
    "line" : 219,
    "diffHunk" : "@@ -1,1 +217,221 @@       # ... plus a small Series `counts`, which is updated.\n       counts = counts.add(df['name'].value_counts(), fill_value=0)\n   counts.astype(int)\n\nSome readers, like :meth:`pandas.read_csv`, offer parameters to control the"
  },
  {
    "id" : "57856346-a372-4793-86ba-de6760b44688",
    "prId" : 28577,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28577#pullrequestreview-292574978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6c3b027-4c67-42cb-aa1e-e455f7805641",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Those starts and ends were computed in a hidden cell ...",
        "createdAt" : "2019-09-24T17:25:14Z",
        "updatedAt" : "2019-09-26T12:44:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "78eb2f11c9e5c74d50e5f7f3657e0bf453745bd2",
    "line" : 341,
    "diffHunk" : "@@ -1,1 +339,343 @@   ends = [f'20{i:>02d}-12-13' for i in range(N)]\n\n   divisions = tuple(pd.to_datetime(starts)) + (pd.Timestamp(ends[-1]),)\n   ddf.divisions = divisions\n   ddf"
  },
  {
    "id" : "c0e61f67-7520-46d9-8f62-30db48b13448",
    "prId" : 29405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29405#pullrequestreview-324973126",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6a673a3-c4ef-4541-a4f0-b6bb5656ff28",
        "parentId" : null,
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "This is due to an empty Series being instantiated in `dask/dataframe/core.py:2058`",
        "createdAt" : "2019-11-22T11:34:50Z",
        "updatedAt" : "2019-12-05T15:49:48Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      },
      {
        "id" : "99632e8f-c12d-4c12-9004-2010cae07db8",
        "parentId" : "b6a673a3-c4ef-4541-a4f0-b6bb5656ff28",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is ok, can you create an issue on dask dev about changing these defaults (and give this example), reference this PR.",
        "createdAt" : "2019-11-22T15:38:48Z",
        "updatedAt" : "2019-12-05T15:49:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3218eda2-69ec-469f-b792-1a99c08ae363",
        "parentId" : "b6a673a3-c4ef-4541-a4f0-b6bb5656ff28",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "xref: https://github.com/dask/dask/issues/5630",
        "createdAt" : "2019-11-24T18:32:43Z",
        "updatedAt" : "2019-12-05T15:49:48Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      },
      {
        "id" : "f0278820-e00a-4d52-8920-44246e373582",
        "parentId" : "b6a673a3-c4ef-4541-a4f0-b6bb5656ff28",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you also create an issue on the pandas side so we know what we need to update once dask is at a certain version (you can just point to this line here)",
        "createdAt" : "2019-12-01T23:43:21Z",
        "updatedAt" : "2019-12-05T15:49:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce80f485ed207de63d00d93f07c0165af56f63c3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +359,363 @@\n.. ipython:: python\n   :okwarning:\n\n   @savefig dask_resample.png"
  },
  {
    "id" : "b63f7e2a-1475-4d17-94ab-a801e2f8d3c5",
    "prId" : 29811,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29811#pullrequestreview-322675388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "050def31-545c-4c16-b550-3980e86972c3",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "```suggestion\r\nreferred to as \"low-cardinality\" data). By using more efficient data types, you\r\n```",
        "createdAt" : "2019-11-24T08:33:45Z",
        "updatedAt" : "2019-11-24T08:33:46Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "a487b2b4-d3e3-4080-bbe2-88793c673d70",
        "parentId" : "050def31-545c-4c16-b550-3980e86972c3",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Fixed in https://github.com/pandas-dev/pandas/pull/29848",
        "createdAt" : "2019-11-26T01:08:02Z",
        "updatedAt" : "2019-11-26T01:08:02Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ed159032638b2c3c9a6460d9aa9db1d5a499db3",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +95,99 @@The default pandas data types are not the most memory efficient. This is\nespecially true for text data columns with relatively few unique values (commonly\nreferred to as \"low-cardinality\" data). By using more efficient data types you\ncan store larger datasets in memory.\n"
  }
]