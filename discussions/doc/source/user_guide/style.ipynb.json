[
  {
    "id" : "a4b79847-dfff-4334-a8ca-b9f5c6d2f34f",
    "prId" : 39317,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39317#pullrequestreview-574061578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff3a1bcf-d3b3-41fb-85b4-9f5b42b8d2db",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not sure how easy this is to link to the actual docs for these but would be great if possible.",
        "createdAt" : "2021-01-21T15:40:29Z",
        "updatedAt" : "2021-01-22T08:54:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "93610ede-be2a-47d3-8547-33d243f1c22a",
        "parentId" : "ff3a1bcf-d3b3-41fb-85b4-9f5b42b8d2db",
        "authorId" : "00fd25ec-10ce-4da2-b282-338650c2fd94",
        "body" : "i tried. i think it is possible but the relative path structure is quite complicated and i couldn't get it to work. never done it before so I have left out.",
        "createdAt" : "2021-01-22T08:56:43Z",
        "updatedAt" : "2021-01-22T08:56:43Z",
        "lastEditedBy" : "00fd25ec-10ce-4da2-b282-338650c2fd94",
        "tags" : [
        ]
      }
    ],
    "commit" : "e436a95a9ae4e95943542b49719a4330a60d40b6",
    "line" : 276,
    "diffHunk" : "@@ -1,1 +287,291 @@    \"\\n\",\n    \"Both of those methods take a function (and some other keyword arguments) and applies your function to the DataFrame in a certain way.\\n\",\n    \"`Styler.applymap` works through the DataFrame elementwise.\\n\",\n    \"`Styler.apply` passes each column or row into your DataFrame one-at-a-time or the entire table at once, depending on the `axis` keyword argument.\\n\",\n    \"For columnwise use `axis=0`, rowwise use `axis=1`, and for the entire table at once use `axis=None`.\\n\","
  },
  {
    "id" : "bfb1dfb2-3518-4344-80c7-584e690d1213",
    "prId" : 39393,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39393#pullrequestreview-585046808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e2e8645-8f79-45c2-b09a-b8a8181ad9eb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can simply use s.where no?",
        "createdAt" : "2021-02-07T17:04:47Z",
        "updatedAt" : "2021-02-08T06:46:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cec3dbea-1c46-4b47-bbea-54151f9b0a66",
        "parentId" : "8e2e8645-8f79-45c2-b09a-b8a8181ad9eb",
        "authorId" : "00fd25ec-10ce-4da2-b282-338650c2fd94",
        "body" : "i'm using the values in `s` to create a new array either with `newval1` or `newval2` conditionally. I thought with `s.where` you can either keep `existingval` or `newval1` conditionally? Very possible im missing something here..",
        "createdAt" : "2021-02-07T18:20:04Z",
        "updatedAt" : "2021-02-08T06:46:24Z",
        "lastEditedBy" : "00fd25ec-10ce-4da2-b282-338650c2fd94",
        "tags" : [
        ]
      }
    ],
    "commit" : "a463a53f365f4d61ed6af3ad567409bac22aad4c",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +369,373 @@    \"    \\\"\\\"\\\"Highlight the maximum in a Series bold-orange.\\\"\\\"\\\"\\n\",\n    \"    css = 'background-color: orange; font-weight: bold;'\\n\",\n    \"    return np.where(s == np.nanmax(s.values), css, None)\"\n   ]\n  },"
  }
]