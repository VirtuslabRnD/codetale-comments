[
  {
    "id" : "373fc5fe-0591-4411-a315-b642b856d158",
    "prId" : 3859,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39d343bc-f16f-407a-a8bb-b920a041d956",
        "parentId" : null,
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "Probably could add something about raise here. (Also, I really dislike that this is default behaviour)\n",
        "createdAt" : "2013-06-18T01:57:06Z",
        "updatedAt" : "2013-06-19T02:09:56Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      },
      {
        "id" : "c18dfe47-1c7a-4437-abf9-7755cb59fa08",
        "parentId" : "39d343bc-f16f-407a-a8bb-b920a041d956",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "do u think that it should convert by default?\n",
        "createdAt" : "2013-06-18T02:16:59Z",
        "updatedAt" : "2013-06-19T02:09:56Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "8f9e9693-397d-4d2f-9b9f-3be7f3cdc114",
        "parentId" : "39d343bc-f16f-407a-a8bb-b920a041d956",
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "I think `errors='raise'` should be the default...\n",
        "createdAt" : "2013-06-18T08:41:58Z",
        "updatedAt" : "2013-06-19T02:09:56Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      },
      {
        "id" : "4921dde0-dfa7-45e3-8d53-61d43ebb5171",
        "parentId" : "39d343bc-f16f-407a-a8bb-b920a041d956",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "fyi...changing `errors='raise'` in theory a good idea, but breaks bunch of stuff.....will have to decide on that later...otherwise this looks ready?\n",
        "createdAt" : "2013-06-19T01:02:44Z",
        "updatedAt" : "2013-06-19T02:09:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "12646845-0414-4375-9fb8-161ebc3d9093",
        "parentId" : "39d343bc-f16f-407a-a8bb-b920a041d956",
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "just rebased, so will check I'm not saying anything stupid and then merge...\n",
        "createdAt" : "2013-06-19T01:09:45Z",
        "updatedAt" : "2013-06-19T02:09:56Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5078a6de6d00e6f1ef6df70f8bba764a09b25b0",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +148,152 @@.. ipython:: python\n\n   to_datetime(['2009-07-31', 'asd'])\n\n   to_datetime(['2009-07-31', 'asd'], coerce=True)"
  },
  {
    "id" : "1967aedb-49dc-4051-94a1-572777a7045c",
    "prId" : 3859,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00df4f70-e9b6-4394-ac39-bf2ecf86e15b",
        "parentId" : null,
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "a lot of likes and objects here, but I think it'll do\n",
        "createdAt" : "2013-06-19T02:24:00Z",
        "updatedAt" : "2013-06-19T02:24:00Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5078a6de6d00e6f1ef6df70f8bba764a09b25b0",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +117,121 @@------------------------\n\nTo convert a Series or list-like object of date-like objects e.g. strings,\nepochs, or a mixture, you can use the ``to_datetime`` function. When passed\na Series, this returns a Series (with the same index), while a list-like"
  },
  {
    "id" : "25fd65c3-1386-4120-b629-8d4f4407a5e2",
    "prId" : 3939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa4f057e-2371-4719-91cd-1b40620b5662",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "nice use of smörgåsbord\n",
        "createdAt" : "2013-06-17T23:47:05Z",
        "updatedAt" : "2013-06-17T23:47:05Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "991e2ed6-5406-43a5-b317-56cfddcc0f9f",
        "parentId" : "fa4f057e-2371-4719-91cd-1b40620b5662",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that was @wesm original text ; just moved around a bit\n",
        "createdAt" : "2013-06-17T23:52:11Z",
        "updatedAt" : "2013-06-17T23:52:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ef61e6ea-8322-4865-92f7-69f5e3d498c4",
        "parentId" : "fa4f057e-2371-4719-91cd-1b40620b5662",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "oh ok. betrays my not having really read that part of the docs :|\n",
        "createdAt" : "2013-06-17T23:54:21Z",
        "updatedAt" : "2013-06-17T23:54:21Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "8c35f250-2d5a-4e4c-97a3-2ec0a338220f",
        "parentId" : "fa4f057e-2371-4719-91cd-1b40620b5662",
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "that's awesome!\n",
        "createdAt" : "2013-06-17T23:56:34Z",
        "updatedAt" : "2013-06-17T23:56:34Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      }
    ],
    "commit" : "6361687f96f5ffba42f79c72d97def54942a9847",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +191,195 @@\nDatetimeIndex objects has all the basic functionality of regular Index objects\nand a smorgasbord of advanced timeseries-specific methods for easy frequency\nprocessing.\n"
  },
  {
    "id" : "61c60246-b26c-4395-a901-231122125b49",
    "prId" : 4823,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec268b59-e076-4a17-917b-28e6f466d0f6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "gr8!\n",
        "createdAt" : "2014-04-29T22:17:11Z",
        "updatedAt" : "2014-04-29T22:17:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3b3bda34-9893-454c-a2c8-e8978b2502e9",
        "parentId" : "ec268b59-e076-4a17-917b-28e6f466d0f6",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe at least add that they are also available as Series/DataFrame attributes when it has a DatetimeIndex? And you copy paste relevant section of whatsnew to here I think: https://github.com/pydata/pandas/blob/master/doc/source/v0.14.0.txt#L72\n\n(but can also for later PR)\n",
        "createdAt" : "2014-04-29T22:23:39Z",
        "updatedAt" : "2014-04-29T22:23:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcf7f0d0d87c48258d55430f77f12b3a7c421aca",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +412,416 @@~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere are several time/date properties that one can access from ``Timestamp`` or a collection of timestamps like a ``DateTimeIndex``. \n\n.. csv-table::"
  },
  {
    "id" : "2ef774d4-2970-47de-b9a3-c8166cd909c3",
    "prId" : 6968,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27bbbd38-9c61-42a2-8373-6e132f07268a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a note (about why one would choose to use `dateutil` over `pytz` (the default)?\n",
        "createdAt" : "2014-05-23T16:04:08Z",
        "updatedAt" : "2014-06-03T14:25:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e420855f1aa27bf8c9a751ef26a29652c7b0e513",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +1312,1316 @@   ts_utc.tz_convert('US/Eastern')\n\n.. warning::\n    Be very wary of conversions between libraries as ``pytz`` and ``dateutil``\n    may have different definitions of the time zones. This is more of a problem for"
  },
  {
    "id" : "66621a69-ea51-4349-a90d-d3454fbf89e0",
    "prId" : 7133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f97989a-234f-4eb0-889a-d3b8977f0399",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a test for this in test_resample? (not sure how much infrastructure is their for this), iow huw much is actually already tested\n",
        "createdAt" : "2014-06-03T12:13:13Z",
        "updatedAt" : "2014-06-05T10:21:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "30352309-45f8-40dc-8915-74eb65eac62b",
        "parentId" : "2f97989a-234f-4eb0-889a-d3b8977f0399",
        "authorId" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "body" : "Done\n",
        "createdAt" : "2014-06-03T16:00:25Z",
        "updatedAt" : "2014-06-05T10:21:19Z",
        "lastEditedBy" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "tags" : [
        ]
      }
    ],
    "commit" : "2121b22ebfb539db62e248be0f99815e2931ac90",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +976,980 @@Any function available via :ref:`dispatching <groupby.dispatch>` can be given to\nthe ``how`` parameter by name, including ``sum``, ``mean``, ``std``, ``sem``,\n``max``, ``min``, ``median``, ``first``, ``last``, ``ohlc``.\n\nFor downsampling, ``closed`` can be set to 'left' or 'right' to specify which"
  },
  {
    "id" : "8896b849-c647-4800-b35f-634ead1910c8",
    "prId" : 7362,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99221361-5d9f-4cf7-9c4c-12062771e613",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do you test interactions somewhere where you say are creating a DatetimeIndex with a Timestamp of 'UTC', but using a dateutil_tz_utc in another element? \n",
        "createdAt" : "2014-06-09T14:59:01Z",
        "updatedAt" : "2014-06-09T15:32:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f79d5384-8780-4eb1-82a4-a57774b6fadd",
        "parentId" : "99221361-5d9f-4cf7-9c4c-12062771e613",
        "authorId" : "5a947098-5ab4-4c2e-9a62-26cc13b35333",
        "body" : "No - although they would be separate objects and we would be converting between them with the same code as converting between other timezones.\n\nI'll add something like this:\n\n``` python\nts = Timestamp('2001-01-05 11:56', tz='dateutil/UTC')\nts.tz_convert(dateutil.tz.tzutc())\n# check that the time hasn't changed.\nassert (ts.hour, ts.minute) == (11, 56)\n```\n",
        "createdAt" : "2014-06-09T15:06:56Z",
        "updatedAt" : "2014-06-09T15:32:05Z",
        "lastEditedBy" : "5a947098-5ab4-4c2e-9a62-26cc13b35333",
        "tags" : [
        ]
      },
      {
        "id" : "052f1f93-d980-4429-b108-0bbec4d11818",
        "parentId" : "99221361-5d9f-4cf7-9c4c-12062771e613",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, maybe also need some kind of raising if you try to mix pytz/dateutil in a creation, e.g.\n\n`DatetimeIndex([Timestamp('20130101',tz='Europe/London'),Timestamp('20130102',tz='dateutil/Europe/London')])` should raise loudly\n",
        "createdAt" : "2014-06-09T15:09:42Z",
        "updatedAt" : "2014-06-09T15:32:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e1a57203-b883-44e3-b313-d1eb0a191498",
        "parentId" : "99221361-5d9f-4cf7-9c4c-12062771e613",
        "authorId" : "5a947098-5ab4-4c2e-9a62-26cc13b35333",
        "body" : "It does already. In fact, pandas already raises for mixed timezones in pytz e.g.\n\n``` python\nDatetimeIndex([Timestamp('20130101', tz='Europe/London'), Timestamp('20130101', tz='Europe/Paris')])\n```\n\nI've just added the test for different versions of utc.\n",
        "createdAt" : "2014-06-09T15:32:37Z",
        "updatedAt" : "2014-06-09T15:32:37Z",
        "lastEditedBy" : "5a947098-5ab4-4c2e-9a62-26cc13b35333",
        "tags" : [
        ]
      },
      {
        "id" : "8c6248c8-2211-4d91-afd8-31426ce02895",
        "parentId" : "99221361-5d9f-4cf7-9c4c-12062771e613",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what I mean is a supplemental message that explicity compares pytz and dateutil mixed (not sure that this is easy to catch)\n",
        "createdAt" : "2014-06-09T15:48:41Z",
        "updatedAt" : "2014-06-09T15:48:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "34efe711-faac-4797-87f9-eb1a44d6fffa",
        "parentId" : "99221361-5d9f-4cf7-9c4c-12062771e613",
        "authorId" : "5a947098-5ab4-4c2e-9a62-26cc13b35333",
        "body" : "Oh I see. There doesn't seem to be a single place where we could put that check. At least, by the time you get to the exception that's raised, you can't tell if you have both dateutil and pytz zones.\n\nIn principle though, I think it's something we can check because all `pytz` timezones except UTC have a common base class and you can assume anything else is dateutil.\n",
        "createdAt" : "2014-06-09T16:17:49Z",
        "updatedAt" : "2014-06-09T16:17:49Z",
        "lastEditedBy" : "5a947098-5ab4-4c2e-9a62-26cc13b35333",
        "tags" : [
        ]
      },
      {
        "id" : "f4e0423b-f2dd-4e14-aa72-393193791652",
        "parentId" : "99221361-5d9f-4cf7-9c4c-12062771e613",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm.....well the check can be one when tz's are not all the same (e.g. at that point you can do a more detailed comparison to see if they are different and at least one is pytz and one dateutil)\n",
        "createdAt" : "2014-06-09T16:22:01Z",
        "updatedAt" : "2014-06-09T16:22:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "389caf18-6849-4eb3-bfc9-d65adf218d22",
        "parentId" : "99221361-5d9f-4cf7-9c4c-12062771e613",
        "authorId" : "5a947098-5ab4-4c2e-9a62-26cc13b35333",
        "body" : "Can we do this as a separate feature/PR so that we can get all of the tests passing on windows?\n\nI think it's a good idea to have a better exception message and I'm happy to look into it but it feels like a separate issue from the test failures on windows.\n\n## \n\nLooking a bit deeper into the code, there are at least two places where an exception would currently be raised, `tslib.array_to_datetime` and `tslib.array_to_datetime` - both called via `tseries.tools.to_datetime`. The test could go in `to_datetime` - if there is an exception, check timezone types - but mismatched timezones wouldn't be the only reason for an exception there so we could mask a different problem.\n",
        "createdAt" : "2014-06-09T16:41:44Z",
        "updatedAt" : "2014-06-09T16:41:44Z",
        "lastEditedBy" : "5a947098-5ab4-4c2e-9a62-26cc13b35333",
        "tags" : [
        ]
      }
    ],
    "commit" : "703934a5ae69a38de446eaef8b82e3f6f0d7742a",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1283,1287 @@   rng_utc.tz\n\nNote that the ``UTC`` timezone is a special case in ``dateutil`` and should be constructed explicitly\nas an instance of ``dateutil.tz.tzutc``. You can also construct other timezones explicitly first,\nwhich gives you more control over which time zone is used:"
  },
  {
    "id" : "aa2805f7-953d-4aba-8982-15e59da636c5",
    "prId" : 10744,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62f6abdb-cc1b-4434-abb2-6b162a4392c9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "provide a link to this section as its pretty similar: http://pandas.pydata.org/pandas-docs/stable/timedeltas.html#operations (feel free to adjust language in either as needed)\n",
        "createdAt" : "2015-08-11T16:12:24Z",
        "updatedAt" : "2015-08-13T12:16:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac975417636ae37eaa14dc3d5c23db80ceaf0a97",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +654,658 @@~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOffsets can be used with either a ``Series`` or ``DatetimeIndex`` to\napply the offset to each element.\n"
  },
  {
    "id" : "52835142-0628-4e15-be2a-1c41ab9e3577",
    "prId" : 14801,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14801#pullrequestreview-11707029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ede36d52-90b1-4acc-a4ad-31d023b52f29",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "starting in 0.18.1",
        "createdAt" : "2016-12-06T23:30:59Z",
        "updatedAt" : "2016-12-10T11:10:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf8ee33b3bbe78a36494761c8581bcbdb2119b9c",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1288,1292 @@``.resample()`` is a time-based groupby, followed by a reduction method on each of its groups.\nSee some :ref:`cookbook examples <cookbook.resample>` for some advanced strategies\n\nStarting in version 0.18.1, the ``resample()`` function can be used directly from\nDataFrameGroupBy objects, see the :ref:`groupby docs <groupby.transform.window_resample>`."
  },
  {
    "id" : "b35ec455-aed8-4d1d-8d03-c5aae5d6f568",
    "prId" : 17412,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17412#pullrequestreview-61497163",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26901e2a-8dd8-4592-b847-615a52975883",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a section ref tag here as well.",
        "createdAt" : "2017-09-07T01:14:32Z",
        "updatedAt" : "2017-09-18T13:44:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c5c634a9-f385-447a-8bd5-7276df9b9e5e",
        "parentId" : "26901e2a-8dd8-4592-b847-615a52975883",
        "authorId" : "2acf3195-642f-4412-aad9-bb1175daff81",
        "body" : "I have put a reference to the `pd.Timestamp` documentation as above and pushed.",
        "createdAt" : "2017-09-08T12:56:06Z",
        "updatedAt" : "2017-09-18T13:44:28Z",
        "lastEditedBy" : "2acf3195-642f-4412-aad9-bb1175daff81",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a4bde4e171691f8da3012910f2ce410ce58b819",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +187,191 @@\n    pd.Timestamp('2010/11/12')\n\nProviding a Format Argument\n~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  }
]