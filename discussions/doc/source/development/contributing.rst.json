[
  {
    "id" : "c54adfae-24fc-4666-b357-34777da43d38",
    "prId" : 27050,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27050#pullrequestreview-255503522",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a6dcde3-3ac1-42af-b16f-b45a1aae9aeb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a section ref here",
        "createdAt" : "2019-06-27T22:04:10Z",
        "updatedAt" : "2019-07-11T14:39:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "01fa88b041e863e60146be1ec9e00eb0a3ff2465",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +713,717 @@.. _contributing.type_hints:\n\nType Hints\n----------\n"
  },
  {
    "id" : "e22885aa-9c56-4e37-bc75-e5598c592101",
    "prId" : 27050,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27050#pullrequestreview-256281659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cbf598f-8960-44a6-ba35-d426ae119d4a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you also type check single files or submodules? (for quicker development turnover, if you are trying out type checking whole pandas takes a while)",
        "createdAt" : "2019-06-30T12:56:56Z",
        "updatedAt" : "2019-07-11T14:39:21Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d9873d86-e23e-414a-8cae-a40c31de1217",
        "parentId" : "1cbf598f-8960-44a6-ba35-d426ae119d4a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "You could but not generically useful as mypy *doggedly follows all imports* so wouldn't necessarily save much time:\r\n\r\nhttps://mypy.readthedocs.io/en/latest/running_mypy.html#following-imports\r\n\r\nIf type checking speed is a concern the suggested approach is to use a daemon:\r\n\r\nhttps://mypy.readthedocs.io/en/latest/mypy_daemon.html#mypy-daemon-mypy-server",
        "createdAt" : "2019-06-30T16:11:09Z",
        "updatedAt" : "2019-07-11T14:39:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "5183fbf4-a11b-4c3d-a9ac-f0e106f27640",
        "parentId" : "1cbf598f-8960-44a6-ba35-d426ae119d4a",
        "authorId" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "body" : "@jorisvandenbossche yes you can do something like this: `mypy pandas/core/something.py`, or `mypy pandas/core/generic`\r\nIt saves a bit of time but not much, but adding how to do that in the contributing guide might not be a bad idea. Personally when I am working with typing I run mypy for just the single file I am working on. For whole project I run it only before committing.",
        "createdAt" : "2019-07-01T06:32:25Z",
        "updatedAt" : "2019-07-11T14:39:21Z",
        "lastEditedBy" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "tags" : [
        ]
      },
      {
        "id" : "cb79c119-c759-40db-8f45-fc2d1f1e5db1",
        "parentId" : "1cbf598f-8960-44a6-ba35-d426ae119d4a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I don’t plan on adding this - it’s not value added to do",
        "createdAt" : "2019-07-01T10:00:50Z",
        "updatedAt" : "2019-07-11T14:39:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "86166e95-ada9-4629-8661-ff2531cd2c56",
        "parentId" : "1cbf598f-8960-44a6-ba35-d426ae119d4a",
        "authorId" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "body" : "Well that's true, someone can easily figure out the command for a single file/folder by making a wise guess or going to mypy docs.",
        "createdAt" : "2019-07-01T11:34:16Z",
        "updatedAt" : "2019-07-11T14:39:21Z",
        "lastEditedBy" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "tags" : [
        ]
      }
    ],
    "commit" : "01fa88b041e863e60146be1ec9e00eb0a3ff2465",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +840,844 @@.. code-block:: shell\n\n   mypy pandas\n\n.. _contributing.ci:"
  },
  {
    "id" : "d4a93bd0-2782-45d5-b191-5eb19664c235",
    "prId" : 27050,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27050#pullrequestreview-260448158",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e736577-55e4-4c6f-960f-daeb92c7f81f",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "@jorisvandenbossche let me know if this helps with understanding of cast",
        "createdAt" : "2019-07-10T21:59:13Z",
        "updatedAt" : "2019-07-11T14:39:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "6581c41d-5451-42c7-a925-0d088404c1ca",
        "parentId" : "9e736577-55e4-4c6f-960f-daeb92c7f81f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is it also an option to just \"leave it\" for some cases? Or does mypy error if it cannot infer a type? \r\n\r\nBecause I have the feeling we have *a lot* of such cases, we use those `is_..` idioms almost everywhere. ",
        "createdAt" : "2019-07-11T02:01:31Z",
        "updatedAt" : "2019-07-11T14:39:21Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "988472bc-bcea-490c-9c32-2e9075411c27",
        "parentId" : "9e736577-55e4-4c6f-960f-daeb92c7f81f",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Not sure I understand what you mean by “leave it” but once the annotation is added in the signature here any op which assumes a string but which Mypy can’t narrow inference down to will raise (here it would say something like int/float has no attribute “upper”)\r\n\r\nFor sure though I think we will have a few places in the code base where cast would be required, at least unless the referenced Mypy enhancement is implemented",
        "createdAt" : "2019-07-11T02:50:43Z",
        "updatedAt" : "2019-07-11T14:39:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d146b3e0-a34d-440d-8606-aea0fae99e2c",
        "parentId" : "9e736577-55e4-4c6f-960f-daeb92c7f81f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, I basically meant \"leave it untyped\" (as you can also leave complete functions untyped). So but you answered: once you type the signature of a function, mypy needs to understand the full body of that function.\r\n\r\n> I think we will have a few places in the code base where cast would be required\r\n\r\nI don't have the feeling it is \"a few\". We do such `is_` calls much more than actual isinstance checks. \r\n\r\n> at least unless the referenced Mypy enhancement is implemented\r\n\r\nThere doesn't seem to be much movement in that issue at the moment?",
        "createdAt" : "2019-07-11T03:01:27Z",
        "updatedAt" : "2019-07-11T14:39:21Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "01fa88b041e863e60146be1ec9e00eb0a3ff2465",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +765,769 @@       str = None  # type: str_type\n\nIn some cases you may be tempted to use ``cast`` from the typing module when you know better than the analyzer. This occurs particularly when using custom inference functions. For example\n\n.. code-block:: python"
  },
  {
    "id" : "35a06c16-87bf-4efa-be5e-7a5c36a0abcf",
    "prId" : 27050,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27050#pullrequestreview-279324745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfa77eee-ced3-4ef2-9cb2-b0965f017190",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "we could add a codecheck for this?",
        "createdAt" : "2019-08-25T08:13:30Z",
        "updatedAt" : "2019-08-25T08:13:30Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "01fa88b041e863e60146be1ec9e00eb0a3ff2465",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +721,725 @@~~~~~~~~~~~~~~~~\n\nTypes imports should follow the ``from typing import ...`` convention. So rather than\n\n.. code-block:: python"
  },
  {
    "id" : "3604b624-bc77-46fa-9740-8df43a24a61d",
    "prId" : 27233,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27233#pullrequestreview-258144029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0fff415-824f-4080-8b61-71535b4bc2d8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It seems that the conda-forge package is pre_commit (that's a bit an annoying name difference ..)",
        "createdAt" : "2019-07-04T18:17:15Z",
        "updatedAt" : "2019-07-04T18:23:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e054482975fa840c119eedbea206de3ad23d3de",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +585,589 @@can be done by installing ``pre-commit``::\n\n   pip install pre-commit\n\nand then running::"
  },
  {
    "id" : "1c0249d8-c420-4ca0-bb21-ff2950be75a2",
    "prId" : 27233,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27233#pullrequestreview-258412044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47d78a27-2da3-4ff7-bde0-4fc0f116e89f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think recommening\r\n```make black`` is better here",
        "createdAt" : "2019-07-05T13:33:39Z",
        "updatedAt" : "2019-07-05T13:34:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4fd541b3-4d1f-497f-811e-d752a380154d",
        "parentId" : "47d78a27-2da3-4ff7-bde0-4fc0f116e89f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Unfortunately `make` does not work on all platforms",
        "createdAt" : "2019-07-05T13:44:00Z",
        "updatedAt" : "2019-07-05T13:44:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e054482975fa840c119eedbea206de3ad23d3de",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +575,579 @@submitting code to run the check yourself::\n\n   black pandas\n   git diff upstream/master -u -- \"*.py\" | flake8 --diff\n"
  },
  {
    "id" : "18759040-b73f-414f-aedd-1e89b5c6560e",
    "prId" : 27233,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27233#pullrequestreview-258407008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "680c6c3b-87ce-44f7-84c9-42cf480200ed",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "```make lint-diff```",
        "createdAt" : "2019-07-05T13:33:50Z",
        "updatedAt" : "2019-07-05T13:34:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e054482975fa840c119eedbea206de3ad23d3de",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +576,580 @@\n   black pandas\n   git diff upstream/master -u -- \"*.py\" | flake8 --diff\n\nto auto-format your code. Additionally, many editors have plugins that will"
  },
  {
    "id" : "62372e35-76a0-406b-a1b4-e0f2ff11c1e6",
    "prId" : 28374,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28374#pullrequestreview-288312922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d273fecb-5a93-4516-81b4-e08385fdbc5c",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "```\r\n$ python -m pip install -e --no-build-isolation .\r\nERROR: --no-build-isolation is not a valid editable requirement. It should either be a path to a local project or a VCS URL (beginning with svn+, git+, hg+, or bzr+).\r\n(pandas-dev)\r\nsimon@DESKTOP-F063QUA MINGW64 ~/OneDrive/code/pandas-simonjayhawkins (master)\r\n$ python -m pip install -e . --no-build-isolation\r\nObtaining file:///C:/Users/simon/OneDrive/code/pandas-simonjayhawkins\r\n    Preparing wheel metadata ... done\r\n```",
        "createdAt" : "2019-09-13T21:02:55Z",
        "updatedAt" : "2019-09-13T21:02:55Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "776227bb-abc4-4037-8661-bd8fa6c9ad8d",
        "parentId" : "d273fecb-5a93-4516-81b4-e08385fdbc5c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "That's a typo, the `.` needs to come after the `-e` -> https://github.com/pandas-dev/pandas/pull/28445",
        "createdAt" : "2019-09-14T08:24:49Z",
        "updatedAt" : "2019-09-14T08:24:49Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2aa2e9c4a9512904457d6c5e377a160d87cea1b4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +209,213 @@   # Build and install pandas\n   python setup.py build_ext --inplace -j 4\n   python -m pip install -e --no-build-isolation .\n\nAt this point you should be able to import pandas from your locally built version::"
  },
  {
    "id" : "22508a81-181a-436b-a6bd-55d24d1fe170",
    "prId" : 29113,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29113#pullrequestreview-310676355",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b2f98fc-8bf6-4815-a7e5-729e0edf1412",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I see that we use `$env:USERPROFILE` in the previous command, and `~` here. Is this correct?",
        "createdAt" : "2019-11-01T20:12:24Z",
        "updatedAt" : "2019-11-01T20:12:42Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "9fb599eb-9c34-4457-8806-1391947dcdec",
        "parentId" : "0b2f98fc-8bf6-4815-a7e5-729e0edf1412",
        "authorId" : "b8f2c360-2797-40a9-89ce-b2265849d268",
        "body" : "Yes, this is correct. Powershell on its own resolves the ' ~ ' to correctly to the home directory. But I noticed, that  if I call `python -m venv ~\\virtualenvs\\pandas-dev`, venv won't expand ' ~ ' to your home folder and will create a folder called '~' in your current working directory. Hence I've added $env:USERPROFILE, it is the only place where is really needed, if you are using powershell. \r\n\r\nSince ' ~ ' is explained in the now extracted paragraph above, I think the snippet you've quoted can stay as it is.\r\n\r\n",
        "createdAt" : "2019-11-01T20:21:05Z",
        "updatedAt" : "2019-11-01T20:21:05Z",
        "lastEditedBy" : "b8f2c360-2797-40a9-89ce-b2265849d268",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc93e56b926f0828987f396101aa0a18d42b8d0b",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +275,279 @@\n   # Activate the virtualenv. Use activate.bat for cmd.exe\n   ~\\virtualenvs\\pandas-dev\\Scripts\\Activate.ps1\n\n   # Install the build dependencies"
  },
  {
    "id" : "01497a21-2f63-4f2d-94e6-1d97d06c2455",
    "prId" : 29387,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29387#pullrequestreview-310924083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e5a8eba-8651-4074-a7de-78e05285ad82",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There is another occurrence of this a bit above (in the section about setting up a conda dev environment)",
        "createdAt" : "2019-11-04T07:55:40Z",
        "updatedAt" : "2019-11-04T08:39:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "07458187-f225-4793-a355-3cc9b8b90178",
        "parentId" : "0e5a8eba-8651-4074-a7de-78e05285ad82",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "Oh, Ty:)",
        "createdAt" : "2019-11-04T08:35:05Z",
        "updatedAt" : "2019-11-04T08:39:24Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "c42ff2db92dc98a91522e639fb91176d2ae1581b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +256,260 @@   # Build and install pandas\n   python setup.py build_ext --inplace -j 0\n   python -m pip install -e . --no-build-isolation --no-use-pep517\n\n**Windows**"
  }
]