[
  {
    "id" : "1594141a-db64-4168-aa9c-3b190df9cec6",
    "prId" : 27478,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27478#pullrequestreview-265391199",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91f25212-9bfe-41c5-b4ba-8246e1eab733",
        "parentId" : null,
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "I _think_ the proposal in that document is mostly unrelated to our last discussions (e.g. 1D storage, or relying of Arrow)?",
        "createdAt" : "2019-07-23T10:33:14Z",
        "updatedAt" : "2019-08-01T14:53:27Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "8a835ff8-b248-426d-a6e7-106becdc0816",
        "parentId" : "91f25212-9bfe-41c5-b4ba-8246e1eab733",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm not sure I understand your comment.\r\n\r\nThe BlockManager rewrite (C/ Cythonized data structure holding 1D columns) and Arrow \"by default\" are indeed two different items. This one is about the BlockManager rewrite.",
        "createdAt" : "2019-07-23T10:42:19Z",
        "updatedAt" : "2019-08-01T14:53:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "bb303129-8f83-41d7-a936-d3cfe514a258",
        "parentId" : "91f25212-9bfe-41c5-b4ba-8246e1eab733",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "OK, Arrow was OT. My point was just that \"C/ Cythonized data structure holding 1D columns\" does not seem to be related to the content of that page. But I didn't understand everything in that page, so I might be wrong.",
        "createdAt" : "2019-07-23T11:24:19Z",
        "updatedAt" : "2019-08-01T14:53:27Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "6aad926a-9a80-4811-a9c5-f10748e9bf16",
        "parentId" : "91f25212-9bfe-41c5-b4ba-8246e1eab733",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The document I linked to discusses some of the shortcomings of current implementation, and proposes a replacement Cythonized container of 1D arrays (libpandas). I think they're related.",
        "createdAt" : "2019-07-23T13:05:40Z",
        "updatedAt" : "2019-08-01T14:53:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecdffeb8835c3cf59d32150d8e1f0787ffee00f3",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +90,94 @@\nSee `these design documents <https://dev.pandas.io/pandas2/internal-architecture.html#removal-of-blockmanager-new-dataframe-internals>`__\nfor more.\n\nDecoupling of indexing and internals"
  },
  {
    "id" : "7e814768-0c26-465e-ac10-1be265f30d3f",
    "prId" : 27478,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27478#pullrequestreview-265525641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fba6dca2-1f96-4d9a-a540-113d4db8467d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would add a section on numba integration, something like.\r\n\r\n```\r\nNumba Integration\r\n----------------------\r\n\r\nRewrite of much of the computation and aggregation code using numba. This will provide a) a much lower barrier to entry for newcomers and you now debug python code, b) simpler and shared code across different areas of pandas, possibly including groupby & windowing operations, potentially, c) potential improved performance as operations now can be JITed",
        "createdAt" : "2019-07-23T11:51:12Z",
        "updatedAt" : "2019-08-01T14:53:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "618d6e9e-eb1b-4245-9eee-15c9b7120d16",
        "parentId" : "fba6dca2-1f96-4d9a-a540-113d4db8467d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Side-note on \r\n\r\n> potential improved performance as operations now can be JITed\r\n\r\nDo we expect to get improved performance?  I wouldn't expect e.g. `Series.sum()` to improve. IMO the best-case option here is accepting Numba-jitted user defined functions in a `rolling().apply(func)`, which would be very neat to see.",
        "createdAt" : "2019-07-23T13:07:59Z",
        "updatedAt" : "2019-08-01T14:53:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b2e5b863-a5da-4f7e-93e3-1b0f3f5a891c",
        "parentId" : "fba6dca2-1f96-4d9a-a540-113d4db8467d",
        "authorId" : "214b00be-e9f2-4883-878c-26eab43cc650",
        "body" : "Check out some of the work in https://github.com/shoyer/numbagg - it's originally computations written in numba for multi-dimensional arrays, but would work just as well for 1-2D arrays. \r\n\r\nI copied the pandas implementation of `ewma` (with attribution :) ) so we could have that functionality in xarray\r\n\r\nCC @shoyer ",
        "createdAt" : "2019-07-23T16:19:46Z",
        "updatedAt" : "2019-08-01T14:53:27Z",
        "lastEditedBy" : "214b00be-e9f2-4883-878c-26eab43cc650",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecdffeb8835c3cf59d32150d8e1f0787ffee00f3",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +142,146 @@docstrings. With the collaboration of the numpydoc maintainers, we'd like to\nmove the checks to a package other than pandas so that other projects can easily\nuse them as well.\n\nPerformance monitoring"
  },
  {
    "id" : "4130c026-e5f3-45a7-bd66-72c03071e8cb",
    "prId" : 27478,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27478#pullrequestreview-269068446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6aee44cb-3767-4f12-b351-af6db5b10d43",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually a much closer soln worth mentioning is to make a DictionaryArray which can back Categorical and StringArray. ",
        "createdAt" : "2019-07-31T12:10:51Z",
        "updatedAt" : "2019-08-01T14:53:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9ecc0b39-2738-4f8c-a561-3d4fac8bc80e",
        "parentId" : "6aee44cb-3767-4f12-b351-af6db5b10d43",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Jeff, care to answer to what Tom and I replied earlier about this on that not being a general solution for variable strings (not a limited of unique values)? See https://github.com/pandas-dev/pandas/pull/27478#discussion_r306273488",
        "createdAt" : "2019-07-31T12:14:22Z",
        "updatedAt" : "2019-08-01T14:53:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d2653b45-b6be-45fd-83b2-be4206e6161a",
        "parentId" : "6aee44cb-3767-4f12-b351-af6db5b10d43",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Let's keep implementation-related comments in https://github.com/pandas-dev/pandas/issues/8640. If we decide that route is the way to go, we'll update the roadmap to reflect the change of opinion.",
        "createdAt" : "2019-07-31T14:49:58Z",
        "updatedAt" : "2019-08-01T14:53:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecdffeb8835c3cf59d32150d8e1f0787ffee00f3",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +48,52 @@an ``object`` -dtype NumPy array of Python strings.\n\nTo solve the second issue (performance), we'll explore alternative in-memory\narray libraries (for example, Apache Arrow). As part of the work, we may\nneed to implement certain operations expected by pandas users (for example"
  }
]