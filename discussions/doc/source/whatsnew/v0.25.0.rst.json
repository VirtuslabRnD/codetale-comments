[
  {
    "id" : "eed02794-b9de-4891-bab1-985f3324a14a",
    "prId" : 17753,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17753#pullrequestreview-256469061",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9134522-5be2-45ac-805b-bec026b602da",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so this is fine, but I would add a sub-section on the usage for IntervalIndex itself",
        "createdAt" : "2019-07-01T17:28:06Z",
        "updatedAt" : "2019-07-01T17:28:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "30c77f0620344ed8bbc482ef8d19ee9030b48d9a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +616,620 @@- :meth:`Series.put` is deprecated. (:issue:`18262`)\n- :meth:`Index.item` and :meth:`Series.item` is deprecated. (:issue:`18262`)\n- :meth:`Index.contains` is deprecated. Use ``key in index`` (``__contains__``) instead (:issue:`17753`).\n\n.. _whatsnew_0250.prior_deprecations:"
  },
  {
    "id" : "57725126-1c8f-45ff-9d88-cbacdfa4592f",
    "prId" : 23293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23293#pullrequestreview-255493251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0ec0dd1-8c90-4deb-96a0-0b47c297db5b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "adding a note here?",
        "createdAt" : "2019-06-27T21:36:55Z",
        "updatedAt" : "2019-07-01T18:47:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7486d260178176f9e9674c8036bc3063a067b24a",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +886,890 @@- Introduce a better error message in :meth:`Series.sparse.from_coo` so it returns a ``TypeError`` for inputs that are not coo matrices (:issue:`26554`)\n- Bug in :func:`numpy.modf` on a :class:`SparseArray`. Now a tuple of :class:`SparseArray` is returned (:issue:`26946`).\n\n\nBuild Changes"
  },
  {
    "id" : "1333bdfe-306e-478a-bca6-9b225dbc90dd",
    "prId" : 23293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23293#pullrequestreview-256078582",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a0fb7a3-e593-40b1-a69e-07ecd32a0042",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should there be a general item for `Series.__array_ufunc__` being added? Although, in principle it should not change any behaviour, as we already supported ufuncs?",
        "createdAt" : "2019-06-30T15:55:15Z",
        "updatedAt" : "2019-07-01T18:47:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "7486d260178176f9e9674c8036bc3063a067b24a",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +898,902 @@- Bug in :func:`factorize` when passing an ``ExtensionArray`` with a custom ``na_sentinel`` (:issue:`25696`).\n- :meth:`Series.count` miscounts NA values in ExtensionArrays (:issue:`26835`)\n- Added ``Series.__array_ufunc__`` to better handle NumPy ufuncs applied to Series backed by extension arrays (:issue:`23293`).\n- Keyword argument ``deep`` has been removed from :meth:`ExtensionArray.copy` (:issue:`27083`)\n"
  },
  {
    "id" : "f696de66-4adb-414b-815d-e140962aa97a",
    "prId" : 24021,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24021#pullrequestreview-221073839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b37c1f03-c764-48c0-960d-50e219b6a6e6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are you adding space here for a reason?",
        "createdAt" : "2019-04-01T12:10:29Z",
        "updatedAt" : "2019-04-01T12:13:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "08933c1b-a86e-4879-9ead-d6828febc5f1",
        "parentId" : "b37c1f03-c764-48c0-960d-50e219b6a6e6",
        "authorId" : "5f5245d7-e812-4c4e-9724-423e086bd2f6",
        "body" : "No. I removed them. ",
        "createdAt" : "2019-04-01T12:13:50Z",
        "updatedAt" : "2019-04-01T12:13:50Z",
        "lastEditedBy" : "5f5245d7-e812-4c4e-9724-423e086bd2f6",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfda6c3300e5f2a3fbdc910782003d2bb0206566",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +45,49 @@.. _whatsnew_0250.api_breaking.utc_offset_indexing:\n\n\nIndexing with date strings with UTC offsets\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  },
  {
    "id" : "b74d8b06-2325-4cc3-8fbe-0685cd062661",
    "prId" : 24748,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24748#pullrequestreview-209892717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b10368ef-eb27-4256-8173-14590093d06a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm I'm somewhat hesitant to market \"side effects\" as being fixed because I'm not sure we generally can make guarantees about mutations that occur during a groupby. Is it possible to leave this out and maybe use a relatively safe example like printing the groups instead?",
        "createdAt" : "2019-02-28T00:05:49Z",
        "updatedAt" : "2019-03-26T03:47:22Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "783e302f-283d-462d-ba04-4d1a4d8c38c9",
        "parentId" : "b10368ef-eb27-4256-8173-14590093d06a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I agree with @WillAyd  here, showing the printing is enough (and a bit more clear).",
        "createdAt" : "2019-03-03T03:13:59Z",
        "updatedAt" : "2019-03-26T03:47:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecb7294a21802382edf8de890179db4c02fccc91",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +81,85 @@The implementation of :meth:`DataFrameGroupBy.apply() <pandas.core.groupby.DataFrameGroupBy.apply>`\npreviously evaluated the supplied function consistently twice on the first group\nto infer if it is safe to use a fast code path. Particularly for functions with\nside effects, this was an undesired behavior and may have led to surprises.\n"
  },
  {
    "id" : "33389ddc-e493-4e60-b427-5ff13e945311",
    "prId" : 24757,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24757#pullrequestreview-209927953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "393e8905-473d-4c01-a374-4fb346e74652",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add in the api/references",
        "createdAt" : "2019-03-03T02:56:24Z",
        "updatedAt" : "2019-06-03T18:18:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c3b97678-3f2c-4091-a13d-8b686bfc67ef",
        "parentId" : "393e8905-473d-4c01-a374-4fb346e74652",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is that in this file or somewhere else?",
        "createdAt" : "2019-03-03T17:06:50Z",
        "updatedAt" : "2019-06-03T18:18:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7d448ab1-d57c-40ff-aa49-cf782479cbe3",
        "parentId" : "393e8905-473d-4c01-a374-4fb346e74652",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "You would need to\r\n\r\n1. Add to the class docstring in DatetimeIndex and TimedeltaIndex under the methods section\r\n2. Add to the lists in doc/source/reference/indexing.rst",
        "createdAt" : "2019-03-03T20:06:16Z",
        "updatedAt" : "2019-06-03T18:18:57Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "111c345f211f6675bc76072b858c4a3880a21c88",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +83,87 @@- :func:`merge_asof` now gives a more clear error message when merge keys are categoricals that are not equal (:issue:`26136`)\n- :meth:`pandas.core.window.Rolling` supports exponential (or Poisson) window type (:issue:`21303`)\n- :class:`DatetimeIndex` and :class:`TimedeltaIndex` now have a `mean` method (:issue:`24757`)\n-\n"
  },
  {
    "id" : "07549fc7-3068-4ead-9d36-985e68062751",
    "prId" : 24942,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24942#pullrequestreview-215360084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eda14d36-0c99-4fc5-9e59-7d11f75affa5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are these the minimums implied by the py3 builds?",
        "createdAt" : "2019-03-15T18:16:13Z",
        "updatedAt" : "2019-03-15T18:17:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8b90f672-2f91-4bc9-81fd-fe6b38f63071",
        "parentId" : "eda14d36-0c99-4fc5-9e59-7d11f75affa5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@h-vetinari ?",
        "createdAt" : "2019-03-17T13:46:37Z",
        "updatedAt" : "2019-03-17T13:46:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4a98bd74-63d6-4c58-a36e-505441042243",
        "parentId" : "eda14d36-0c99-4fc5-9e59-7d11f75affa5",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Since you asked me to remove the compat jobs, all of the libraries here are unpinned for the rest of the remaining CI. They are however the minimum of what conda will resolve for PY35, so these are the implied minimums as you say.\r\n\r\nI will re-add another PR with all the work that was done here on the PY35 jobs anyway.",
        "createdAt" : "2019-03-17T15:06:05Z",
        "updatedAt" : "2019-03-17T15:06:29Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "4b111f4c-4fb6-4bf0-bf5d-7c6d6d43e59f",
        "parentId" : "eda14d36-0c99-4fc5-9e59-7d11f75affa5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok thanks. pls do so.",
        "createdAt" : "2019-03-17T15:08:53Z",
        "updatedAt" : "2019-03-17T15:08:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe83f86b8155764fd041d92fc2585daf323c74a6",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +80,84 @@| beautifulsoup4  | 4.4.1           |          |\n+-----------------+-----------------+----------+\n| openpyxl        | 2.2.6           |          |\n+-----------------+-----------------+----------+\n| pymysql         | 0.6.6           |          |"
  },
  {
    "id" : "c174bf33-06ac-435b-b754-ee053488efb1",
    "prId" : 24984,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24984#pullrequestreview-206410486",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09db3953-53a9-40e7-92c0-739a3687fd84",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is just a code reorg yes? with slightly better error messages in some cases?",
        "createdAt" : "2019-02-21T13:57:16Z",
        "updatedAt" : "2019-02-24T01:38:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "92c5ebd8-3cee-42ad-ac35-e45848d0f890",
        "parentId" : "09db3953-53a9-40e7-92c0-739a3687fd84",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "@jreback:\r\nMinimal reorg, just better errors and enabling iterators (due to your review).\r\n\r\nThe custom classes were re-enabled by #25085 (which took over the tests from this PR), which closed the regression #24969, and has a corresponding whatsnew note. I guess the issue didn't get closed yet, because I only noted that #25085 was an alternative to this PR (at the time, for solving #24969), but didn't add the \"closes #24969\" explicitly - sorry.",
        "createdAt" : "2019-02-21T16:35:21Z",
        "updatedAt" : "2019-02-24T01:38:15Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f99b15f2a2379e4d931ce69d22e1dabd9454657",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +23,27 @@- :meth:`Timestamp.replace` now supports the ``fold`` argument to disambiguate DST transition times (:issue:`25017`)\n- :meth:`DataFrame.at_time` and :meth:`Series.at_time` now support :meth:`datetime.time` objects with timezones (:issue:`24043`)\n- :meth:`DataFrame.set_index` now works for instances of ``abc.Iterator``, provided their output is of the same length as the calling frame (:issue:`22484`, :issue:`24984`)\n- :meth:`DatetimeIndex.union` now supports the ``sort`` argument. The behaviour of the sort parameter matches that of :meth:`Index.union` (:issue:`24994`)\n-"
  }
]