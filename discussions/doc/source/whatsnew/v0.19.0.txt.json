[
  {
    "id" : "9bde0eb2-0fd0-40b0-b247-c9aebdb543d7",
    "prId" : 13575,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "716cf396-6e45-40c8-b4ea-a15d6d1ef781",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we need an update in the docs themsleves? e.g. an example\n",
        "createdAt" : "2016-07-19T13:16:52Z",
        "updatedAt" : "2016-07-21T12:50:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d843ded4-e329-4a9e-a6af-844dbfd19778",
        "parentId" : "716cf396-6e45-40c8-b4ea-a15d6d1ef781",
        "authorId" : "0c95aea3-3880-42fd-aaa0-05368043d554",
        "body" : "Done: added to io.rst\n",
        "createdAt" : "2016-07-19T14:51:22Z",
        "updatedAt" : "2016-07-21T12:50:14Z",
        "lastEditedBy" : "0c95aea3-3880-42fd-aaa0-05368043d554",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cb8243f2dd31cc2155627f29cfc89bbf6d4b84b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +209,213 @@\n- The ``pd.read_html()`` has gained support for the ``na_values``, ``converters``, ``keep_default_na``  options (:issue:`13461`)\n\n- ``Index.astype()`` now accepts an optional boolean argument ``copy``, which allows optional copying if the requirements on dtype are satisfied (:issue:`13209`)\n- ``Index`` now supports the ``.where()`` function for same shape indexing (:issue:`13170`)"
  },
  {
    "id" : "c0fd84c3-7ba4-4c3f-8ba0-5cbe6baba3a0",
    "prId" : 13849,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9785fd6-1012-4a9d-ba8e-05f06d4dc2ea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need a sub-section ref\n",
        "createdAt" : "2016-08-25T10:42:35Z",
        "updatedAt" : "2016-08-29T22:58:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "341585aa966ca9bd6dad98c819bc818e7d471e88",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +976,980 @@\nThese changes allow pandas to handle sparse data with more dtypes, and for work to make a smoother experience with data handling.\n\n\n``int64`` and ``bool`` support enhancements"
  },
  {
    "id" : "10281afb-e7cb-4db2-a8bc-2df8f69facec",
    "prId" : 13894,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffafe11b-bafa-4b98-aead-2285ebeb8bd2",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is inconsistent with how `DataFrame` behaves?\n",
        "createdAt" : "2016-08-15T18:54:40Z",
        "updatedAt" : "2016-08-20T20:36:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "051dec39-8cd3-4a8b-9e49-27069c531489",
        "parentId" : "ffafe11b-bafa-4b98-aead-2285ebeb8bd2",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Yes, see #13896.\n",
        "createdAt" : "2016-08-15T23:35:46Z",
        "updatedAt" : "2016-08-20T20:36:55Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe322be77d77811bb27eadb6abb29dfe66c7bd63",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +581,585 @@\n.. note::\n   ``Series`` logical operators fill ``NaN`` result with ``False``.\n\n.. note::"
  },
  {
    "id" : "40caa7c1-4955-432d-963c-c52949f0827f",
    "prId" : 14039,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19a4abf1-dfa9-4ff1-9a3b-0071a702d741",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you audit the `favour` -> `favor` (or just pick one) for all of these lines. I know trivial.......\n",
        "createdAt" : "2016-08-19T21:01:15Z",
        "updatedAt" : "2016-08-19T21:01:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7879d549601f2f7b1b3f37dd96d612f296f3577e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +895,899 @@- ``pd.Index`` has dropped the ``diff`` method in favour of ``difference`` (:issue:`13669`)\n\n- ``pd.DataFrame`` has dropped the ``to_wide`` method in favour of ``to_panel`` (:issue:`14039`)\n- ``Series.to_csv`` has dropped the ``nanRep`` parameter in favor of ``na_rep`` (:issue:`13804`)\n- ``Series.xs``, ``DataFrame.xs``, ``Panel.xs``, ``Panel.major_xs``, and ``Panel.minor_xs`` have dropped the ``copy`` parameter (:issue:`13781`)"
  },
  {
    "id" : "f7d4b92b-ac1f-4048-98a8-067891b96d9b",
    "prId" : 14101,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66dd0e33-ade1-4732-946b-3caffb683b15",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add entry about the new warning\n",
        "createdAt" : "2016-08-27T23:24:56Z",
        "updatedAt" : "2016-08-28T02:39:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "24d613ad-c972-4f66-a85b-1eb58d20b45c",
        "parentId" : "66dd0e33-ade1-4732-946b-3caffb683b15",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Done.\n",
        "createdAt" : "2016-08-28T01:28:23Z",
        "updatedAt" : "2016-08-28T02:39:27Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fe9f4643826946a2386e30fab9972b81f66a2b9",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1033,1037 @@- ``Series.reshape`` has been deprecated and will be removed in a subsequent release (:issue:`12882`)\n\n- ``Timestamp.to_datetime`` has been deprecated in favour of ``Timestamp.to_pydatetime`` (:issue:`8254`)\n- ``Index.to_datetime`` and ``DatetimeIndex.to_datetime`` have been deprecated in favour of ``pd.to_datetime`` (:issue:`8254`)\n- ``SparseList`` has been deprecated and will be removed in a future version (:issue:`13784`)"
  },
  {
    "id" : "ff672081-411d-47ec-b98d-0b77a40ce416",
    "prId" : 14127,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0dddffed-1fe7-4e59-a892-b709b0c8b649",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "make this clear that this ONLY applies to `Index` itself and not-subclasses (maybe show that numeric/datetimelike ops are unchanged)\n",
        "createdAt" : "2016-09-02T11:36:54Z",
        "updatedAt" : "2016-09-04T10:05:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "647efbeb-3846-49bf-8a05-0a1b359a22a4",
        "parentId" : "0dddffed-1fe7-4e59-a892-b709b0c8b649",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "yes, will try to clarify\n",
        "createdAt" : "2016-09-04T09:58:15Z",
        "updatedAt" : "2016-09-04T10:05:29Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbcc655b46d4992f0f0e272268c90478fd392362",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +940,944 @@    FutureWarning: using '+' to provide set union with Indexes is deprecated, use '|' or .union()\n    Out[1]: Index(['a', 'b', 'c'], dtype='object')\n\nThe same operation will now perform element-wise addition:\n"
  },
  {
    "id" : "68308ca0-3035-4a5f-9d22-f2e7970bfe9d",
    "prId" : 14164,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f37c173-19f1-40e8-a843-0a3b6b5ecabf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we need to standardize here, I see @jorisvandenbossche and @sinhrks changing these!\n\nIIRC I think we do more of `Previous Behavior` (e.g. capitalized), and american spelling (no `Behaviour`). But should just pick one :)\n",
        "createdAt" : "2016-09-07T10:50:58Z",
        "updatedAt" : "2016-09-07T10:50:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b94bc7f8-6323-41aa-b0f8-81c6414dd2ad",
        "parentId" : "7f37c173-19f1-40e8-a843-0a3b6b5ecabf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "yes, will do that in https://github.com/pydata/pandas/pull/14176\n\nWe indeed need to just make a choice between American or British :-)\n(is capitalizing all words also an American habit? :-))\n",
        "createdAt" : "2016-09-07T10:54:13Z",
        "updatedAt" : "2016-09-07T10:54:13Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cb8cff4a-1b96-45bd-8461-56ced64ec37e",
        "parentId" : "7f37c173-19f1-40e8-a843-0a3b6b5ecabf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think 2 capital words sets it off s bit more\nusing American spelling \n",
        "createdAt" : "2016-09-07T11:04:38Z",
        "updatedAt" : "2016-09-07T11:04:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0eae81ed-653e-4121-8f9f-56d0c4cbbade",
        "parentId" : "7f37c173-19f1-40e8-a843-0a3b6b5ecabf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "while proofreading the whatsnew, I was thinking of putting the 'New/Old Behavior' in bold, that also sets it off a bit more\n",
        "createdAt" : "2016-09-07T11:07:12Z",
        "updatedAt" : "2016-09-07T11:07:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e408f226-fd4d-4d55-9a91-7b0b749c522f",
        "parentId" : "7f37c173-19f1-40e8-a843-0a3b6b5ecabf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "even better\n",
        "createdAt" : "2016-09-07T11:09:47Z",
        "updatedAt" : "2016-09-07T11:09:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "21c6cec62ae2ad1b3aa8356962365fdf0383c5d2",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +942,946 @@(:issue:`8227`, :issue:`14127`).\n\nPrevious behavior:\n\n.. code-block:: ipython"
  },
  {
    "id" : "db10e9d6-fa70-424b-be85-ab32e1b6686d",
    "prId" : 14176,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fb15e7a-a4bf-4400-a6f5-137e8057c32c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "side issue, I think we are pretty inconsistent in sub-headings whether we use the `:func:` or not (I think we should NOT).\n",
        "createdAt" : "2016-09-07T10:55:11Z",
        "updatedAt" : "2016-09-07T19:14:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "521df490-aac3-4889-9384-b273171f517d",
        "parentId" : "7fb15e7a-a4bf-4400-a6f5-137e8057c32c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It's 'not', because otherwise the linking from the contents overview at the top doesn't work (that was the reason I changed it, rather than consistency, but in any case, we should be consistent in not using it in headers :-))\n",
        "createdAt" : "2016-09-07T10:57:43Z",
        "updatedAt" : "2016-09-07T19:14:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "dce767886104dee8ccc607ff0e9cfd35e44de56b",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +246,250 @@.. _whatsnew_0190.enhancements.read_csv_categorical:\n\n``read_csv`` supports parsing ``Categorical`` directly\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
  },
  {
    "id" : "ac318457-3631-4e4c-949c-5fc7668f3015",
    "prId" : 14176,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c507adf-7add-4221-bea1-fb9c43253dfb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "_could_ add this to highlites\n",
        "createdAt" : "2016-09-07T10:55:36Z",
        "updatedAt" : "2016-09-07T19:14:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "dce767886104dee8ccc607ff0e9cfd35e44de56b",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +437,441 @@.. _whatsnew_0190.enhancements.to_numeric_downcast:\n\nDowncast values to smallest possible dtype in ``to_numeric``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
  },
  {
    "id" : "fb918d19-de84-4089-801d-ba1860a61a9f",
    "prId" : 14208,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14208#pullrequestreview-59843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2958e05b-690b-46ed-97b8-ba65871ec06a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "might need a mention in the docs somewhere (maybe in binary ops section) of basics?\n",
        "createdAt" : "2016-09-14T21:53:17Z",
        "updatedAt" : "2016-09-15T17:43:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "19d0e901-23a3-401b-a8b8-4b7d501d9e75",
        "parentId" : "2958e05b-690b-46ed-97b8-ba65871ec06a",
        "authorId" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "body" : "added\n",
        "createdAt" : "2016-09-14T22:11:23Z",
        "updatedAt" : "2016-09-15T17:43:55Z",
        "lastEditedBy" : "748717f9-0c44-48ab-a877-9c48eac224ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "08b39390a0984748dcc08bfd83c3f45b7b43f554",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1330,1334 @@- ``pd.read_stata()`` can now handle some format 111 files, which are produced by SAS when generating Stata dta files (:issue:`11526`)\n- ``Series`` and ``Index`` now support ``divmod`` which will return a tuple of\n  series or indices. This behaves like a standard binary operator with regards\n  to broadcasting rules (:issue:`14208`).\n"
  }
]