[
  {
    "id" : "8ccc6886-fa05-4212-bec2-bc792eef39c4",
    "prId" : 17900,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17900#pullrequestreview-135216780",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "480c810b-e089-4629-a17f-8fcfae502d7a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "csv, json, pickle as well?",
        "createdAt" : "2018-07-07T23:00:44Z",
        "updatedAt" : "2018-07-08T01:12:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "86a0682d-2ec9-4c7b-ad23-a43bcc7093ab",
        "parentId" : "480c810b-e089-4629-a17f-8fcfae502d7a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "and this is for both reading and writing?",
        "createdAt" : "2018-07-07T23:01:12Z",
        "updatedAt" : "2018-07-08T01:12:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c9a010e7-1857-4e1c-9ac0-932efeb99cbd",
        "parentId" : "480c810b-e089-4629-a17f-8fcfae502d7a",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "* Not sure about `pickle`, as it wasn't tested in the original diff.  Can check.\r\n* Nope, just for writing.  Reading already has support (why we didn't support it for both reading and writing in the first place befuddles me a little...)",
        "createdAt" : "2018-07-07T23:07:05Z",
        "updatedAt" : "2018-07-08T01:12:50Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "cfe22837-cbfe-42f9-b26b-a640daa085b0",
        "parentId" : "480c810b-e089-4629-a17f-8fcfae502d7a",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Ha, `to_pickle` already has support for `infer` per the docs.  Now I'm really confused how we didn't have this for `to_csv` and `to_json`...",
        "createdAt" : "2018-07-07T23:08:57Z",
        "updatedAt" : "2018-07-08T01:12:50Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "651e43f3952119670ba3469d165d02dc00908c47",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +84,88 @@- :meth:`Series.nlargest`, :meth:`Series.nsmallest`, :meth:`DataFrame.nlargest`, and :meth:`DataFrame.nsmallest` now accept the value ``\"all\"`` for the ``keep` argument. This keeps all ties for the nth largest/smallest value (:issue:`16818`)\n- :class:`IntervalIndex` has gained the :meth:`~IntervalIndex.set_closed` method to change the existing ``closed`` value (:issue:`21670`)\n- :func:`~DataFrame.to_csv` and :func:`~DataFrame.to_json` now support ``compression='infer'`` to infer compression based on filename (:issue:`15008`)\n-\n"
  },
  {
    "id" : "73bca508-758a-419e-911f-02b4ec3ca906",
    "prId" : 20046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20046#pullrequestreview-168825254",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7519439b-a516-4d08-bc4f-5100f5629e17",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a ref link to the new docs",
        "createdAt" : "2018-10-26T02:06:36Z",
        "updatedAt" : "2018-10-29T14:28:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e167ec30-b52b-41ed-9c8b-f875bf5f6d37",
        "parentId" : "7519439b-a516-4d08-bc4f-5100f5629e17",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "done",
        "createdAt" : "2018-10-26T13:35:08Z",
        "updatedAt" : "2018-10-29T14:28:51Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "1263a47adf89836920a56c0b28412b78c0b58780",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +187,191 @@\n:func:`DataFrame.rename_axis` now supports ``index`` and ``columns`` arguments\nand :func:`Series.rename_axis` supports ``index`` argument (:issue:`19978`)\n\nThis change allows a dictionary to be passed so that some of the names "
  },
  {
    "id" : "ff353a65-284f-49dd-95f0-ed60679e3283",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-139192389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "215e98af-f8d2-4707-9015-6b02e6115ea0",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "\"of of \" -> \"of a\"",
        "createdAt" : "2018-07-20T20:21:50Z",
        "updatedAt" : "2018-07-20T20:49:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +69,73 @@   s + 0.01\n\nThese dtypes can operate as part of of ``DataFrame``.\n\n.. ipython:: python"
  },
  {
    "id" : "9d4c2f61-77f8-4403-bf02-9cfb08bcf015",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-139226361",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bd9cb61-26fd-4cf3-8fee-a627d276fe86",
        "parentId" : null,
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "captilized -> capitalized?",
        "createdAt" : "2018-07-20T22:18:28Z",
        "updatedAt" : "2018-07-20T22:18:28Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +87,91 @@.. warning::\n\n   The Integer NA support currently uses the captilized dtype version, e.g. ``Int8`` as compared to the traditional ``int8``. This may be changed at a future date.\n\n.. _whatsnew_0240.enhancements.read_html:"
  },
  {
    "id" : "cd23935e-37cf-4964-b8ca-963022ed8117",
    "prId" : 21394,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21394#pullrequestreview-168720950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a711a5d-bb83-4328-ae8f-ef8ed3b5e1d4",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "NotImplemented -> raises a TypeError (that is what the user sees) \r\nFixed in https://github.com/pandas-dev/pandas/pull/23355",
        "createdAt" : "2018-10-26T08:34:41Z",
        "updatedAt" : "2018-10-26T08:34:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "301615eb7c5e9a10e624163fc8af404a7a69278c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +194,198 @@  The default compression for ``to_csv``, ``to_json``, and ``to_pickle`` methods has been updated to ``'infer'`` (:issue:`22004`).\n- :func:`to_timedelta` now supports iso-formated timedelta strings (:issue:`21877`)\n- Comparing :class:`Timedelta` with unknown types now return ``NotImplemented`` instead of ``False`` (:issue:`20829`)\n- :class:`Series` and :class:`DataFrame` now support :class:`Iterable` in constructor (:issue:`2193`)\n- :class:`DatetimeIndex` gained :attr:`DatetimeIndex.timetz` attribute. Returns local time with timezone information. (:issue:`21358`)"
  },
  {
    "id" : "f28db751-acff-4d53-8132-58637030b844",
    "prId" : 21406,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21406#pullrequestreview-158107667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11276b75-c02f-4e82-a644-7e357154f1fc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no need to use the leading '-', just write more in a paragraph style. First sentence is great, not sure I understand the 2nd and 3rd ones.",
        "createdAt" : "2018-09-24T13:44:07Z",
        "updatedAt" : "2018-10-19T05:43:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "23ce5c6cf5fd649a19692a9bda0fbc844534127e",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +244,248 @@ for the default line terminator (:issue:`20353`).\nThis change only affects when running on Windows, where ``'\\r\\n'`` was used for line terminator\neven when ``'\\n'`` was passed in ``line_terminator``.\n\nPrevious Behavior on Windows:"
  },
  {
    "id" : "15e2b799-7fdb-4146-96fb-da30e041852f",
    "prId" : 21406,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21406#pullrequestreview-158932693",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3097352f-714f-4e8f-8e4c-4809a5d3cebc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you use pep in these examples, e.g. put spaces after the commas",
        "createdAt" : "2018-09-26T10:37:53Z",
        "updatedAt" : "2018-10-19T05:43:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "23ce5c6cf5fd649a19692a9bda0fbc844534127e",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +254,258 @@   ...:     \"string_with_crlf\": [\"a\\r\\nbc\"]\n   ...: })\n\nIn [2]: # When passing file PATH to to_csv, line_terminator does not work, and csv is saved with '\\r\\n'.\n   ...: # Also, this converts all '\\n's in the data to '\\r\\n'."
  },
  {
    "id" : "1df8d8e2-c433-490b-a5b7-6dc09563e1cd",
    "prId" : 21406,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21406#pullrequestreview-158932693",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb4e19c1-ba5c-4473-967d-f6a1aed2028a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I still not clear what these cases are , can you add a coment for example what 2/3 differe from 4/5",
        "createdAt" : "2018-09-26T10:38:32Z",
        "updatedAt" : "2018-10-19T05:43:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "23ce5c6cf5fd649a19692a9bda0fbc844534127e",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +261,265 @@In [3]: with open(\"test.csv\", mode='rb') as f:\n   ...:     print(f.read())\nb'string_with_lf,string_with_crlf\\r\\n\"a\\r\\nbc\",\"a\\r\\r\\nbc\"\\r\\n'\n\nIn [4]: # When passing file OBJECT with newline option to to_csv, line_terminator works."
  },
  {
    "id" : "fc350620-52f3-40d2-ad0c-2a7e42c178ca",
    "prId" : 21406,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21406#pullrequestreview-163030537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53d0efc3-3ad7-4947-bab8-ecae70a9232c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@gfyoung can you have a read over this. This should just point out the most common case / change that matters.",
        "createdAt" : "2018-10-09T12:51:35Z",
        "updatedAt" : "2018-10-19T05:43:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "28094264-dff1-4236-9d34-962f602504ae",
        "parentId" : "53d0efc3-3ad7-4947-bab8-ecae70a9232c",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Overall, this looks pretty good!  Left a few comments below.",
        "createdAt" : "2018-10-09T18:21:29Z",
        "updatedAt" : "2018-10-19T05:43:15Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "23ce5c6cf5fd649a19692a9bda0fbc844534127e",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +272,276 @@\n\nNew Behavior on Windows:\n\n- By passing ``line_terminator`` explicitly, line terminator is set to that character."
  },
  {
    "id" : "6bce98be-e6ee-4b52-8097-57c7ca7d42d0",
    "prId" : 21406,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21406#pullrequestreview-163212715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8df30a1-535e-46b5-aba7-4515eb69aafb",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "\"it does not change the value inside the data\" - what do you mean by that exactly?",
        "createdAt" : "2018-10-09T18:18:27Z",
        "updatedAt" : "2018-10-19T05:43:15Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "0fb596bd-f938-4a1a-9c58-cdf1ca7e5b6e",
        "parentId" : "d8df30a1-535e-46b5-aba7-4515eb69aafb",
        "authorId" : "27d829ad-c68b-406d-8d60-b1078a7b4be3",
        "body" : "Suppose that `data` is like this (which is used in following codes)\r\n\r\n||string_with_lf|string_with_crlf|\r\n|:-|:-|:-|\r\n|1|a\\nbc|a\\r\\nbc|\r\n\r\nAs described in [2]&[3] of \"Previous Behavior\", if there are some `\\n`s INSIDE the data, `to_csv()` changed the value and outputted CSV like this.\r\n\r\n||string_with_lf|string_with_crlf|\r\n|:-|:-|:-|\r\n|1| a **\\r** \\nbc | a **\\r** \\r\\nbc |\r\n\r\nBy this PR, it is fixed to output the following CSV.\r\n\r\n||string_with_lf|string_with_crlf|\r\n|:-|:-|:-|\r\n|1| a\\nbc | a\\r\\nbc |",
        "createdAt" : "2018-10-09T19:12:39Z",
        "updatedAt" : "2018-10-19T05:43:15Z",
        "lastEditedBy" : "27d829ad-c68b-406d-8d60-b1078a7b4be3",
        "tags" : [
        ]
      },
      {
        "id" : "df1bc848-b33e-46e5-8504-0210cf8fb898",
        "parentId" : "d8df30a1-535e-46b5-aba7-4515eb69aafb",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Gotcha.  Could you mention that in [2] and [3]?  What you're describing isn't explicitly mentioned.",
        "createdAt" : "2018-10-10T07:18:07Z",
        "updatedAt" : "2018-10-19T05:43:15Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "23ce5c6cf5fd649a19692a9bda0fbc844534127e",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +276,280 @@- By passing ``line_terminator`` explicitly, line terminator is set to that character.\n- The value of ``line_terminator`` only affects the line terminator of CSV,\n  so it does not change the value inside the data.\n\n.. code-block:: ipython"
  },
  {
    "id" : "c6d03c0a-ce73-4c48-9fe4-2b6f6ce4781a",
    "prId" : 21427,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21427#pullrequestreview-128422798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "966aba6e-705b-4008-b790-f3f9523b5a86",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add the Current  behavior via an ipython block (obviously w/o normalize passed)",
        "createdAt" : "2018-06-13T10:41:55Z",
        "updatedAt" : "2018-06-13T15:06:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2dadeb2a-eb05-4035-aeae-e374adb21a19",
        "parentId" : "966aba6e-705b-4008-b790-f3f9523b5a86",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "OK.  And just the same `ts + tic + tic + tic == ts + (tic + tic + tic)` demonstration?  With `normalize=False` that behavior is unchanged.",
        "createdAt" : "2018-06-13T15:05:17Z",
        "updatedAt" : "2018-06-13T15:06:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d15d137b7c04acbe83edb32a9b2a61b3dcf7907f",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +51,55 @@    In [5]: ts + tic + tic + tic == ts + (tic + tic + tic)\n    Out [5]: False\n\nCurrent Behavior:\n"
  },
  {
    "id" : "300ebc7d-a958-443b-bd49-e2cb8e0c0b4f",
    "prId" : 21487,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21487#pullrequestreview-134201700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38cb7a08-e849-48ee-b7ef-9810b00a2424",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is all ok, but would a subsection with a mini-example be instructive to the user about the revised functinaility? not saying 100% need to, but if a simple enough example (or even an image) would be helpful here",
        "createdAt" : "2018-07-03T15:42:24Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dba75c76-59e3-4d7a-bd81-d7c632bd17a3",
        "parentId" : "38cb7a08-e849-48ee-b7ef-9810b00a2424",
        "authorId" : "118d302a-504a-4e64-ba06-999c7b546b21",
        "body" : "I'm going to display my ignorance of the whatsnew format: ... where would this go?",
        "createdAt" : "2018-07-03T21:58:05Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "118d302a-504a-4e64-ba06-999c7b546b21",
        "tags" : [
        ]
      },
      {
        "id" : "181349a4-526e-4741-9f88-8ea7e75b1067",
        "parentId" : "38cb7a08-e849-48ee-b7ef-9810b00a2424",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh, you make a new subsection in the top somewhere, e.g. model after this\r\n\r\n``Series and Index Data-Dtype Incompatibilities`` \r\n\r\njust add a new one below and you can make an extended example",
        "createdAt" : "2018-07-03T23:42:56Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fd863bb3611093aefcda7e0f16573d77a3190d4",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +371,375 @@^^^\n\n- :func:`read_html()` no longer ignores all-whitespace ``<tr>`` within ``<thead>`` when considering the ``skiprows`` and ``header`` arguments. Previously, users had to decrease their ``header`` and ``skiprows`` values on such tables to work around the issue. (:issue:`21641`)\n-\n-"
  },
  {
    "id" : "14d6b0e7-b922-4a16-800f-cb51bd90ca6d",
    "prId" : 21650,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21650#pullrequestreview-132930510",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a465670-3ce4-4b09-8e3b-ebfb00d2b018",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add both issue numbers here?",
        "createdAt" : "2018-06-28T10:34:07Z",
        "updatedAt" : "2018-06-28T17:01:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "79c305f4-af21-4077-8ce7-ffd8121f4eab",
        "parentId" : "9a465670-3ce4-4b09-8e3b-ebfb00d2b018",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "The second issue number #18656 is an actually the old PR.  I mentioned it for completeness.",
        "createdAt" : "2018-06-28T16:51:08Z",
        "updatedAt" : "2018-06-28T17:01:36Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "4998050692991238b26161dd1609f27d3dce42c8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +25,29 @@  (:issue:`21627`)\n- New method :meth:`HDFStore.walk` will recursively walk the group hierarchy of an HDF5 file (:issue:`10932`)\n- :meth:`Series.nlargest`, :meth:`Series.nsmallest`, :meth:`DataFrame.nlargest`, and :meth:`DataFrame.nsmallest` now accept the value ``\"all\"`` for the ``keep` argument. This keeps all ties for the nth largest/smallest value (:issue:`16818`)\n-\n"
  },
  {
    "id" : "2fead9a5-8b02-4338-b05f-727c196ff88f",
    "prId" : 21822,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21822#pullrequestreview-141366444",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14aa5db5-7920-48e8-8c44-758641e23718",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think this directiive you just be python (rather than ipython here) @TomAugspurger ?",
        "createdAt" : "2018-07-29T15:48:49Z",
        "updatedAt" : "2018-07-30T00:20:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "13a5af59-f085-4c31-a64f-ffdd5d23720c",
        "parentId" : "14aa5db5-7920-48e8-8c44-758641e23718",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Looking at previous whatsnews, looks like either ipython or python works for this directive.",
        "createdAt" : "2018-07-30T00:21:25Z",
        "updatedAt" : "2018-07-30T00:21:26Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1cbd9b91d0b4da798f63319a05a8cb740729f6f3",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +240,244 @@*Previous Behavior*:\n\n.. code-block:: ipython\n\n"
  },
  {
    "id" : "405d2a79-5bcf-4701-8e22-52bb0aebe50a",
    "prId" : 22074,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22074#pullrequestreview-141943685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d276494-5b0e-41b5-836e-6761fe6acea4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should one be marked #7830 ?",
        "createdAt" : "2018-07-31T13:06:02Z",
        "updatedAt" : "2018-07-31T13:06:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ac9102d8b2200f9144a88fc3ac94148a329d3d4",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +497,501 @@- Fixed bug where :meth:`Timestamp.resolution` incorrectly returned 1-microsecond ``timedelta`` instead of 1-nanosecond :class:`Timedelta` (:issue:`21336`,:issue:`21365`)\n- Bug in :func:`to_datetime` that did not consistently return an :class:`Index` when ``box=True`` was specified (:issue:`21864`)\n- Bug in :class:`DatetimeIndex` comparisons where string comparisons incorrectly raises ``TypeError`` (:issue:`22074`)\n- Bug in :class:`DatetimeIndex` comparisons when comparing against ``timedelta64[ns]`` dtyped arrays; in some cases ``TypeError`` was incorrectly raised, in others it incorrectly failed to raise (:issue:`22074`)\n- Bug in :class:`DatetimeIndex` comparisons when comparing against object-dtyped arrays (:issue:`22074`)"
  },
  {
    "id" : "d283351e-29a0-44cf-9a50-34a4eb3e2758",
    "prId" : 22264,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22264#pullrequestreview-147587134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79419f21-337d-41d1-a61a-e2df9d3459b1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls don't edit other things. The longer the PR the more time things will take. I guess since its already done leave it.",
        "createdAt" : "2018-08-20T10:33:03Z",
        "updatedAt" : "2018-08-28T17:09:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e74d805fb91104d46242c545e7d74ea601c9054",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +508,512 @@~~~~~~~~~~~~\n\n- :meth:`DataFrame.to_stata`, :meth:`read_stata`, :class:`StataReader` and :class:`StataWriter` have deprecated the ``encoding`` argument. The encoding of a Stata dta file is determined by the file type and cannot be changed (:issue:`21244`)\n- :meth:`MultiIndex.to_hierarchical` is deprecated and will be removed in a future version (:issue:`21613`)\n- :meth:`Series.ptp` is deprecated. Use ``numpy.ptp`` instead (:issue:`21614`)"
  },
  {
    "id" : "53be35e1-be1f-4d5e-b5a1-fa2452f806c6",
    "prId" : 22288,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22288#pullrequestreview-147171040",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df11fca8-ab4e-471d-8837-84efeccf4b49",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make a new section header here (or is there a reason you don't need one?)",
        "createdAt" : "2018-08-17T10:17:17Z",
        "updatedAt" : "2018-09-05T16:52:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ed681c9bba45ac2f939e85951127de569ae28c7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +287,291 @@\n.. _whatsnew_0240.api_breaking.calendarday:\n\nCalendarDay Offset\n^^^^^^^^^^^^^^^^^^"
  },
  {
    "id" : "b55b17ab-0ab1-4183-82c4-acbd8261bb4a",
    "prId" : 22288,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22288#pullrequestreview-147171040",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efaeef1e-de00-4592-a455-43d594a729c3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would make this section a bit smaller and push things to the docs themselves",
        "createdAt" : "2018-08-17T10:17:46Z",
        "updatedAt" : "2018-09-05T16:52:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ed681c9bba45ac2f939e85951127de569ae28c7",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +310,314 @@\n    # Respects absolute arithmetic\n    In [4]: ts + pd.tseries.frequencies.to_offset('D')\n    Out[4]: Timestamp('2016-10-30 23:00:00+0200', tz='Europe/Helsinki')\n"
  },
  {
    "id" : "c4359d2b-ae29-4f6a-8051-8f6fd4196c5e",
    "prId" : 22288,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22288#pullrequestreview-148419771",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32dc07de-0684-456d-8733-dca2fe7ab129",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you put a ref to the section in timeseries.rst",
        "createdAt" : "2018-08-22T10:22:45Z",
        "updatedAt" : "2018-09-05T16:52:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ed681c9bba45ac2f939e85951127de569ae28c7",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +313,317 @@    Out[4]: Timestamp('2016-10-30 23:00:00+0200', tz='Europe/Helsinki')\n\n:class:`CalendarDay` and associated frequency alias ``'CD'`` are now available\nand respect calendar day arithmetic while :class:`Day` and frequency alias ``'D'``\nwill now respect absolute time (:issue:`22274`, :issue:`20596`, :issue:`16980`, :issue:`8774`)"
  },
  {
    "id" : "0fa1cd1c-97b7-4a4b-a0ee-6f1fd90b61ea",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-148734703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b055a43b-bee6-433e-9f02-63d3c7ca7666",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't understand why filling with a value compared to with a method would be more efficient ?",
        "createdAt" : "2018-08-22T20:24:34Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7be6cc68-db10-4831-a021-0199c0f7a4ed",
        "parentId" : "b055a43b-bee6-433e-9f02-63d3c7ca7666",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "It doesn't really fit the sparse model well. Consider\r\n\r\n```\r\n[1, x, x, x, 2, x, x, x]\r\n```\r\n\r\nIf you ffill, there's not a good fill value. You have 50% 1s and 50% 2s. With `value` setting `fill_value=value` maintains the same sparsity.",
        "createdAt" : "2018-08-22T21:32:19Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c8bf7734-a2eb-49d4-b0c7-ceea5ca8da1e",
        "parentId" : "b055a43b-bee6-433e-9f02-63d3c7ca7666",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, so that explanation is only relevant if the fill_value is a missing value (which is, eg, for integers not the case by default)\r\n\r\n(anyhow, I am still wondering if `fillna` should try to be that 'smart' and change the fill_value)",
        "createdAt" : "2018-08-22T21:56:46Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "17d2afa8-8dca-4efe-a366-c76e34bba47d",
        "parentId" : "b055a43b-bee6-433e-9f02-63d3c7ca7666",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "FWIW, I have no interest in *improving* SparseArray, beyond what happens as fallout from moving it to an ExtensionArray ;)",
        "createdAt" : "2018-08-23T01:59:50Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +407,411 @@Some new warnings are issued for operations that require or are likely to materialize a large dense array:\n\n- A :class:`errors.PerformanceWarning` is issued when using fillna with a ``method``, as a dense array is constructed to create the filled array. Filling with a ``value`` is the efficient way to fill a sparse array.\n- A :class:`errors.PerformanceWarning` is now issued when concatenating sparse Series with differing fill values. The fill value from the first sparse array continues to be used.\n"
  },
  {
    "id" : "55569433-f8c2-448e-ab4f-cddfc1b4a064",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-148652536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab91dc84-1127-4dc8-bfcd-42ca56259809",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Above, there is an empty section (where you added the label)",
        "createdAt" : "2018-08-22T20:26:13Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +950,954 @@.. _whatsnew_0240.bug_fixes.sparse:\n\nSparse\n^^^^^^\n"
  },
  {
    "id" : "7248b89f-88a9-45c0-ac68-1d9056185f5b",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-152041927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d539747-a345-4114-8346-e9bbb201c56a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you use double backticks on Series",
        "createdAt" : "2018-08-31T10:32:33Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2e4e555e-8bc5-46c5-8bec-5da00547304f",
        "parentId" : "1d539747-a345-4114-8346-e9bbb201c56a",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I believe we decided on no backticks in another issue.",
        "createdAt" : "2018-09-04T12:28:50Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "6453c835-bc4e-412a-94ba-48ed0f738245",
        "parentId" : "1d539747-a345-4114-8346-e9bbb201c56a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no as far as I know. That has always been the standard in whatsnew notes.",
        "createdAt" : "2018-09-04T12:31:37Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +398,402 @@  * The default value of ``allow_fill`` has changed from ``False`` to ``True``.\n  * The ``out`` and ``mode`` parameters are now longer accepted (previously, this raised if they were specified).\n  * Passing a scalar for ``indices`` is no longer allowed.\n\n- The result of concatenating a mix of sparse and dense Series is a Series with sparse values, rather than a ``SparseSeries``."
  },
  {
    "id" : "fbc1500f-b50e-4ec1-9b88-5ba91aba4216",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-151341401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9b13f06-0bfa-4a96-96c5-dcc49c16db34",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the list of issues which you close here",
        "createdAt" : "2018-08-31T10:33:12Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +389,393 @@is now an extension array (:issue:`21978`, :issue:`19056`, :issue:`22835`).\nTo conform to this interface and for consistency with the rest of pandas, some API breaking\nchanges were made:\n\n- ``SparseArray`` is no longer a subclass of :class:`numpy.ndarray`. To convert a SparseArray to a NumPy array, use :meth:`numpy.asarray`."
  },
  {
    "id" : "7a676810-3cba-4453-b4b5-8f9eb5829e08",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-162450429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "946a1921-e9b0-4dd7-8899-dbcc9fec6657",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ideally add ``:class:`SparseSeries` ``",
        "createdAt" : "2018-10-05T11:11:02Z",
        "updatedAt" : "2018-10-13T08:12:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a9b3fd7d-0909-4007-88db-9ccc8f634c1c",
        "parentId" : "946a1921-e9b0-4dd7-8899-dbcc9fec6657",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The full class isn't part of the API docs. Just specific methods.",
        "createdAt" : "2018-10-08T12:39:33Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +400,404 @@  * Passing a scalar for ``indices`` is no longer allowed.\n\n- The result of concatenating a mix of sparse and dense Series is a Series with sparse values, rather than a ``SparseSeries``.\n- ``SparseDataFrame.combine`` and ``DataFrame.combine_first`` no longer supports combining a sparse column with a dense column while preserving the sparse subtype. The result will be an object-dtype SparseArray.\n- Setting :attr:`SparseArray.fill_value` to a fill value with a different dtype is now allowed."
  },
  {
    "id" : "f71bd724-1191-433d-883d-10420a94b148",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-163675275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2576e4e1-cbcf-47dd-8808-3bcc83faac5e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Not fully sure this will render correctly (might need a blank line before the sublist?)",
        "createdAt" : "2018-10-11T07:13:40Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +396,400 @@- ``SparseArray.take`` now matches the API of :meth:`pandas.api.extensions.ExtensionArray.take` (:issue:`19506`):\n\n  * The default value of ``allow_fill`` has changed from ``False`` to ``True``.\n  * The ``out`` and ``mode`` parameters are now longer accepted (previously, this raised if they were specified).\n  * Passing a scalar for ``indices`` is no longer allowed."
  },
  {
    "id" : "6b0367d6-1141-455e-b2e8-15847ae83138",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-164218288",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7933add3-b2b3-475e-8a6f-59d855768c65",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I can't remember if I asked before, but do we actually want this?\r\n\r\n```\r\nIn [31]: s = pd.Series([1, 0, 0])\r\n\r\nIn [32]: s = s.to_sparse()\r\n\r\nIn [33]: s\r\nOut[33]: \r\n0    1\r\n1    0\r\n2    0\r\ndtype: Sparse[int64]\r\nBlockIndex\r\nBlock locations: array([0], dtype=int32)\r\nBlock lengths: array([1], dtype=int32)\r\n\r\nIn [34]: s.fill_value = np.nan\r\n\r\nIn [35]: s.to_dense()\r\nOut[35]: \r\n0                      1\r\n1   -9223372036854775808\r\n2   -9223372036854775808\r\ndtype: int64\r\n```\r\n\r\nI don't think the above makes much sense, so not sure this is good to allow.\r\n\r\nFor me it seems logical to restrict the fill_value of the same dtype as the data.\r\n",
        "createdAt" : "2018-10-11T07:24:37Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "aecddcbe-9cf7-44ad-986f-7ee432f5cc39",
        "parentId" : "7933add3-b2b3-475e-8a6f-59d855768c65",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The somewhat strange thing is that on master we do allow that in the SparseArray constructor\r\n\r\n```python\r\nIn [13]: s = pd.SparseArray([1, 2, 0], fill_value=np.nan)\r\n\r\nIn [14]: s\r\nOut[14]:\r\n[1, 2, 0]\r\nFill: nan\r\nIntIndex\r\nIndices: array([0, 1, 2], dtype=int32)\r\n```\r\n\r\nI don't have strong opinions here, other than that people shouldn't be setting `.fill_value` in the first place. The new way to do it is `.astype(SparseDtype(self.dtype.subtype, fill_value))`. I'm happy to deprecate this",
        "createdAt" : "2018-10-11T15:05:05Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f1d153cc-b1b2-4a6d-baf6-b930a57c6f20",
        "parentId" : "7933add3-b2b3-475e-8a6f-59d855768c65",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i agree the fill type should match the dtype but since missing value support is allowed here it is prob ok.",
        "createdAt" : "2018-10-12T12:26:18Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +402,406 @@- The result of concatenating a mix of sparse and dense Series is a Series with sparse values, rather than a ``SparseSeries``.\n- ``SparseDataFrame.combine`` and ``DataFrame.combine_first`` no longer supports combining a sparse column with a dense column while preserving the sparse subtype. The result will be an object-dtype SparseArray.\n- Setting :attr:`SparseArray.fill_value` to a fill value with a different dtype is now allowed.\n\n"
  },
  {
    "id" : "275d7f95-9c88-4e29-b5c6-918e940ea696",
    "prId" : 22325,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22325#pullrequestreview-163845938",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "050fe0e7-8aee-427e-a24b-0d480bba109e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't see any mention of datetime or timedelta in that referenced issues, and it seems those datatypes are still not supported?\r\n\r\n```\r\nIn [59]: s = pd.Series(pd.to_datetime(['2012', None, None, '2013']))\r\n\r\nIn [60]: s\r\nOut[60]: \r\n0   2012-01-01\r\n1          NaT\r\n2          NaT\r\n3   2013-01-01\r\ndtype: datetime64[ns]\r\n\r\nIn [61]: s.to_sparse()\r\n...\r\nTypeError: data type not understood\r\n```",
        "createdAt" : "2018-10-11T07:33:58Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "5a86dd9f-7396-477b-93dd-9277efa355c7",
        "parentId" : "050fe0e7-8aee-427e-a24b-0d480bba109e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Huh, `s.to_sparse().values` seems fine. It's just the repr that's broken.",
        "createdAt" : "2018-10-11T11:29:25Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a2bf38b0-4a26-4930-a6c7-7255cf120945",
        "parentId" : "050fe0e7-8aee-427e-a24b-0d480bba109e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Fixed locally. It was a problem in SparseArray.__array__ trying to stick pd.NaT into a datetime64ns ndarray.",
        "createdAt" : "2018-10-11T14:30:13Z",
        "updatedAt" : "2018-10-13T08:12:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aad8e1976bcbfb694d3591a5f9143ab7316f5bd",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +953,957 @@^^^^^^\n\n- Updating a boolean, datetime, or timedelta column to be Sparse now works (:issue:`22367`)\n- Bug in :meth:`Series.to_sparse` with Series already holding sparse data not constructing properly (:issue:`22389`)\n- Providing a ``sparse_index`` to the SparseArray constructor no longer defaults the na-value to ``np.nan`` for all dtypes. The correct na_value for ``data.dtype`` is now used."
  },
  {
    "id" : "9b0613ab-f205-4b59-b3aa-e82bb7f07b0e",
    "prId" : 22535,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22535#pullrequestreview-169749778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9cb03b9-41b0-4c32-ae24-99facee3d5a4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these should be executable statements, e.g. just show the input, the output is run",
        "createdAt" : "2018-10-04T11:51:34Z",
        "updatedAt" : "2018-10-31T15:30:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a827cee0-f80b-4e24-b5a0-7321a21f6b1c",
        "parentId" : "f9cb03b9-41b0-4c32-ae24-99facee3d5a4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Updated.  One day I'll get the hang of this doc system...",
        "createdAt" : "2018-10-04T15:34:40Z",
        "updatedAt" : "2018-10-31T15:30:36Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "85019f4d-4afa-4a59-b724-3d2d8ec0c65f",
        "parentId" : "f9cb03b9-41b0-4c32-ae24-99facee3d5a4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if you can update these",
        "createdAt" : "2018-10-07T22:41:56Z",
        "updatedAt" : "2018-10-31T15:30:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5489ae15-7fb9-4d6a-b8ea-2b61b5eb5cc6",
        "parentId" : "f9cb03b9-41b0-4c32-ae24-99facee3d5a4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you don't need the ipython line numbers",
        "createdAt" : "2018-10-30T12:39:03Z",
        "updatedAt" : "2018-10-31T15:30:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a7b589b80da97628ee2e779303c7a42274e93d0",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +993,997 @@    per = pd.Period('2016Q1')\n    per + 3\n\n    per = pd.Period('2016Q1')\n    per + 3 * per.freq"
  },
  {
    "id" : "7c6e8c19-9b5a-41b5-a890-6b33bf4f7a7b",
    "prId" : 22535,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22535#pullrequestreview-170230047",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d59ce70-9ae2-4215-b90f-27612c12606d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you might want to show the deprecation warning itself on 1 case here (you will need to add ``:okwarning:`` though)",
        "createdAt" : "2018-10-31T12:43:20Z",
        "updatedAt" : "2018-10-31T15:30:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a7b589b80da97628ee2e779303c7a42274e93d0",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +996,1000 @@    per = pd.Period('2016Q1')\n    per + 3 * per.freq\n\n    ts = pd.Timestamp('1994-05-06 12:15:16', freq=pd.offsets.Hour())\n    ts + 2 * ts.freq"
  },
  {
    "id" : "94eae690-c881-454d-940a-ae929af83edb",
    "prId" : 22574,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22574#pullrequestreview-151878813",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25730514-958e-4f67-bc2a-78dc7478d70f",
        "parentId" : null,
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "``n`` is being removed though, not renamed? Maybe\r\n\r\n> :meth:`Index.repeat` and :meth:`MultiIndex.repeat` have the ``n`` synonym to the ``repeats`` argument removed (deprecated since v.0.20.0) ). (:issue:`14645`)",
        "createdAt" : "2018-09-03T18:58:32Z",
        "updatedAt" : "2018-09-03T18:59:48Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "c126c928-c7de-45d5-b7f9-514019ae4c36",
        "parentId" : "25730514-958e-4f67-bc2a-78dc7478d70f",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "The original argument was `n`.  Then we deprecated in favor of `repeats`.  Now we're permanently renaming it to `repeats`.  That's why it's described as such.",
        "createdAt" : "2018-09-03T19:21:30Z",
        "updatedAt" : "2018-09-03T19:21:30Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "1708ec74-c5fa-4402-81df-308962a2345d",
        "parentId" : "25730514-958e-4f67-bc2a-78dc7478d70f",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "The way I see it is that in 0.20 ``n`` was renamed and deprecated, and now the deprecated param ``n`` is being removed...\r\n\r\nAnyway, could just be a difference of perspective.",
        "createdAt" : "2018-09-03T21:08:47Z",
        "updatedAt" : "2018-09-03T21:08:47Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "d402a58c-df81-4c2c-8c4f-13ba88dcf99a",
        "parentId" : "25730514-958e-4f67-bc2a-78dc7478d70f",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> Anyway, could just be a difference of perspective.\r\n\r\nAgreed.",
        "createdAt" : "2018-09-03T22:33:00Z",
        "updatedAt" : "2018-09-03T22:33:00Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "780019de50f2b585f9421cb4090b8d8a70cc57a1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +529,533 @@- Strings passed into :meth:`DataFrame.groupby` that refer to both column and index levels will raise a ``ValueError`` (:issue:`14432`)\n- :meth:`Index.repeat` and :meth:`MultiIndex.repeat` have renamed the ``n`` argument to ``repeats``(:issue:`14645`)\n-\n\n.. _whatsnew_0240.performance:"
  },
  {
    "id" : "3168e473-7975-4398-86b3-1fb399d1fbf9",
    "prId" : 22654,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22654#pullrequestreview-172995210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f5b2854-ef02-428e-aaa5-d44c988cf963",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would move this to the \"enhancements\" though, I would say that timezones were simply never supported, so it is a nice enhancement that we will now actually support it.",
        "createdAt" : "2018-11-08T14:45:52Z",
        "updatedAt" : "2018-11-08T14:50:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7e8aded8-a899-472e-8694-87d8b2b17141",
        "parentId" : "0f5b2854-ef02-428e-aaa5-d44c988cf963",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, now looking at the full diff (and not only what changed recently), and see you actually already have that. It's a bit duplicated now, but I am fine with keeping it in both places.",
        "createdAt" : "2018-11-08T14:51:52Z",
        "updatedAt" : "2018-11-08T14:51:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef3b20fcb1640986278aa8a774eb70e677b06e34",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1247,1251 @@^^^\n\n- Bug in :meth:`to_sql` when writing timezone aware data (``datetime64[ns, tz]`` dtype) would raise a ``TypeError`` (:issue:`9086`)\n- Bug in :meth:`to_sql` where a naive DatetimeIndex would be written as ``TIMESTAMP WITH TIMEZONE`` type in supported databases, e.g. PostgreSQL (:issue:`23510`)\n"
  },
  {
    "id" : "df12220b-7448-44dd-bca7-c4e4c2161958",
    "prId" : 22672,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22672#pullrequestreview-154782528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b52c46af-dc57-4683-b244-cc4fe4c8fc22",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This will cause a warning since FrozenNDArray isn't in our api.rst. Where does the user actually see this method?",
        "createdAt" : "2018-09-12T13:33:34Z",
        "updatedAt" : "2018-09-14T18:16:24Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b1c450d8-8b45-4b90-9e31-e76e759feb24",
        "parentId" : "b52c46af-dc57-4683-b244-cc4fe4c8fc22",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Hmmm...good point.  it's not part of the public API.  Could we just change it immediately and bypass the deprecation cycle?",
        "createdAt" : "2018-09-12T18:22:57Z",
        "updatedAt" : "2018-09-14T18:16:24Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0ccac1c265568fd410672a85c96b8bd3827f5ae",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +560,564 @@- :meth:`Series.str.cat` has deprecated using arbitrary list-likes *within* list-likes. A list-like container may still contain\n  many ``Series``, ``Index`` or 1-dimensional ``np.ndarray``, or alternatively, only scalar values. (:issue:`21950`)\n- :meth:`FrozenNDArray.searchsorted` has deprecated the ``v`` parameter in favor of ``value`` (:issue:`14645`)\n\n.. _whatsnew_0240.prior_deprecations:"
  },
  {
    "id" : "29a210fb-f5e9-420c-8903-3206797d6251",
    "prId" : 22762,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22762#pullrequestreview-160325775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ceb49e3-90c2-442b-ab8d-1367c6943086",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you also add a specific entry (it is not only for Int that we added reductions) in the EA section?\r\n",
        "createdAt" : "2018-10-01T14:33:43Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "aeaf5f32c0939d6bedc99240b47dd54252dda96a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +92,96 @@   df['A'].astype(float)\n\nReduction and groupby operations such as 'sum' work.\n\n.. ipython:: python"
  },
  {
    "id" : "5a7264bc-c997-4c32-abb1-2d3d1b03433d",
    "prId" : 22810,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22810#pullrequestreview-160448903",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "154f50f6-76ac-4578-81ab-5f2143fb3871",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "A dedicated section like this is typically reserved for larger changes, which I don't think applies here. Can you instead just add this as a one-line note in `Other API Changes`?",
        "createdAt" : "2018-09-27T19:43:31Z",
        "updatedAt" : "2018-10-11T02:52:30Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f6a879cc-0341-426e-a189-452d7e30bc73",
        "parentId" : "154f50f6-76ac-4578-81ab-5f2143fb3871",
        "authorId" : "740cd865-fe15-4bfd-ab36-81a7ac78cd52",
        "body" : "@WillAyd, I was told by @jreback to move it out of there to a breaking change, so where is the real place it belongs?",
        "createdAt" : "2018-10-01T19:23:39Z",
        "updatedAt" : "2018-10-11T02:52:30Z",
        "lastEditedBy" : "740cd865-fe15-4bfd-ab36-81a7ac78cd52",
        "tags" : [
        ]
      },
      {
        "id" : "31ba627a-5ffa-47cd-9d3a-1d15851a7022",
        "parentId" : "154f50f6-76ac-4578-81ab-5f2143fb3871",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "My mistake I didn't see that comment; with that being the case go ahead and leave as is",
        "createdAt" : "2018-10-01T19:27:27Z",
        "updatedAt" : "2018-10-11T02:52:30Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6aec0749fe531940b8e57ccf4b0299d5937a6450",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +376,380 @@.. _whatsnew_0240.api_breaking.frame_to_dict_index_orient:\n\nRaise ValueError in ``DataFrame.to_dict(orient='index')``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
  },
  {
    "id" : "afe89b47-23fe-4dcd-8cfc-0c5a7122bda9",
    "prId" : 22810,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22810#pullrequestreview-163618098",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcc138ce-58dd-4af4-8d09-f55086e2181e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a mini-example here (just showing what kind of data frame will raise). the prior example was too long, but I think we need something.",
        "createdAt" : "2018-10-09T12:26:07Z",
        "updatedAt" : "2018-10-11T02:52:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "23396721-f084-4250-869e-27f9c4ac53cc",
        "parentId" : "bcc138ce-58dd-4af4-8d09-f55086e2181e",
        "authorId" : "740cd865-fe15-4bfd-ab36-81a7ac78cd52",
        "body" : "Added an ipython block that will raise the error. @jreback ",
        "createdAt" : "2018-10-10T22:53:49Z",
        "updatedAt" : "2018-10-11T02:52:30Z",
        "lastEditedBy" : "740cd865-fe15-4bfd-ab36-81a7ac78cd52",
        "tags" : [
        ]
      },
      {
        "id" : "428ee7e7-2683-4cb0-91a4-7c2890488b9c",
        "parentId" : "bcc138ce-58dd-4af4-8d09-f55086e2181e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right but now the docs will not work. so, you can do this as an ipython block but you need an ``:okexcept:`` to handle the exception.\r\n\r\nalso show the df after defining it",
        "createdAt" : "2018-10-11T01:13:18Z",
        "updatedAt" : "2018-10-11T02:52:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6aec0749fe531940b8e57ccf4b0299d5937a6450",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +381,385 @@Bug in :func:`DataFrame.to_dict` raises ``ValueError`` when used with \n``orient='index'`` and a non-unique index instead of losing data (:issue:`22801`)\n\n.. ipython:: python\n    :okexcept:"
  },
  {
    "id" : "01592220-f5a1-4c87-9084-5eedabe2934d",
    "prId" : 22880,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22880#pullrequestreview-162617963",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ee57cb9-f6ed-4a80-ad19-f1734030a75e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Will nee d an `:okexcept` here.",
        "createdAt" : "2018-10-08T20:01:39Z",
        "updatedAt" : "2018-10-13T00:07:31Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "393fa1f5-9104-4144-94dd-d37b5eb62166",
        "parentId" : "2ee57cb9-f6ed-4a80-ad19-f1734030a75e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can also remove the `In []` prefixes. And hopefully the block continues running when there's an exception in an `okexcept`.",
        "createdAt" : "2018-10-08T20:02:40Z",
        "updatedAt" : "2018-10-13T00:07:31Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "826f2c741d1624f9cdc8d2052c0a9cb681bf374b",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +571,575 @@*Current Behavior*:\n\n.. ipython:: python\n   :okexcept:\n"
  },
  {
    "id" : "ffee649b-d1b7-451b-8f05-3fb79bccc40d",
    "prId" : 22939,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22939#pullrequestreview-168186745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdbf6068-a7cb-4a7d-8ac3-112e4f061cba",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I don't think IntervalArray is in our API docs, so that link will cause a warning.",
        "createdAt" : "2018-10-24T11:14:24Z",
        "updatedAt" : "2018-10-24T11:14:24Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3ea0de8e-d895-47e3-9007-64a2f31149c5",
        "parentId" : "fdbf6068-a7cb-4a7d-8ac3-112e4f061cba",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "It is not in the API docs at this time, but I imagine we'd add it if we decide to make `IntervalArray` (and other EA's) public?  I have a few doc related TODOs surrounding whether or not `IntervalArray` gets made public, so I'll make an issue for these TODOs and include the above in the next day or so.",
        "createdAt" : "2018-10-25T02:14:40Z",
        "updatedAt" : "2018-10-25T02:14:40Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a765e93af569b9256835631fbbeb73f2b2bd77e2",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +195,199 @@- New attribute :attr:`__git_version__` will return git commit sha of current build (:issue:`21295`).\n- Compatibility with Matplotlib 3.0 (:issue:`22790`).\n- Added :meth:`Interval.overlaps`, :meth:`IntervalArray.overlaps`, and :meth:`IntervalIndex.overlaps` for determining overlaps between interval-like objects (:issue:`21998`)\n\n.. _whatsnew_0240.api_breaking:"
  },
  {
    "id" : "31d8b74f-39df-473f-8576-451308e58e06",
    "prId" : 23000,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23000#pullrequestreview-162261311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab1ca4ba-91fd-460a-a99a-a35a8a32fc96",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add another ``ipython:: python`` here, the blank line gets removed and it appears as a single block (the way it is written), if you add another block, then you get another cell",
        "createdAt" : "2018-10-06T15:52:43Z",
        "updatedAt" : "2018-10-06T16:43:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "01ab2b505b40f00e7ef1a8f950b3f5234c8ea7a2",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +516,520 @@   df = pd.DataFrame(arr)\n   df\n\n.. ipython:: python\n   df + arr[[0], :]   # 1 row, 2 columns"
  },
  {
    "id" : "f77f0ab0-2600-467a-81f1-6a98d44bd115",
    "prId" : 23112,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23112#pullrequestreview-167393537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c27d2a13-ac63-4ba5-8149-bc6510c5d839",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can add pyarrow to the table above with a min of 0.4.1 (you comment is ok to leave)",
        "createdAt" : "2018-10-23T12:41:03Z",
        "updatedAt" : "2018-11-01T07:50:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7d576da068bccf601ccfb222175ac2296dfccb3",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +268,272 @@+-----------------+-----------------+----------+\n| scipy           | 0.18.1          |          |\n+-----------------+-----------------+----------+\n\nAdditionally we no longer depend on `feather-format` for feather based storage"
  },
  {
    "id" : "58fb117b-8e90-459b-8b0d-5232d83f3957",
    "prId" : 23132,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23132#pullrequestreview-167190028",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9e59610-ae69-4ad8-b514-6f9ec158c9b5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does this case match numpy?",
        "createdAt" : "2018-10-23T02:08:57Z",
        "updatedAt" : "2018-10-23T02:09:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4e7ae44f-87db-4d1d-9700-caccfbc14154",
        "parentId" : "d9e59610-ae69-4ad8-b514-6f9ec158c9b5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes.\r\n\r\n```\r\narr = np.arange(6).reshape(3, 2)\r\n>>> arr == [0, 1]\r\narray([[ True,  True],\r\n       [False, False],\r\n       [False, False]])\r\n```",
        "createdAt" : "2018-10-23T02:24:55Z",
        "updatedAt" : "2018-10-23T02:24:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "028ac6c0-e838-4f06-85d8-edff825b8da7",
        "parentId" : "d9e59610-ae69-4ad8-b514-6f9ec158c9b5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok then",
        "createdAt" : "2018-10-23T02:43:41Z",
        "updatedAt" : "2018-10-23T02:43:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2c8ca2f7550da58f673b810b78341145bd6481a",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +582,586 @@- operating against a 2-dimensional ``np.ndarray`` with either 1 row or 1 column will now broadcast the same way a ``np.ndarray`` would (:issue:`23000`).\n- a list or tuple with length matching the number of rows in the :class:`DataFrame` will now raise ``ValueError`` instead of operating column-by-column (:issue:`22880`.\n- a list or tuple with length matching the number of columns in the :class:`DataFrame` will now operate row-by-row instead of raising ``ValueError`` (:issue:`22880`).\n\nPrevious Behavior:"
  }
]