[
  {
    "id" : "f057768b-90e5-4be4-982c-d69bda04968f",
    "prId" : 36299,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36299#pullrequestreview-564815711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e1f4de3-0490-47bb-925e-d1830980db64",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can use double backticks fro Index",
        "createdAt" : "2021-01-09T22:31:32Z",
        "updatedAt" : "2021-03-02T20:43:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "33b87ad7-954b-4833-8375-8e48527c382c",
        "parentId" : "8e1f4de3-0490-47bb-925e-d1830980db64",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "Done",
        "createdAt" : "2021-01-09T22:45:13Z",
        "updatedAt" : "2021-03-02T20:43:24Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      }
    ],
    "commit" : "0af939d8a964a8039fc9f94444be14c18fbed1e4",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +420,424 @@Indexing\n^^^^^^^^\n\n- Bug in :meth:`Index.union` dropping duplicate ``Index`` values when ``Index`` was not monotonic or ``sort`` was set to ``False`` (:issue:`36289`, :issue:`31326`)\n- Bug in :meth:`CategoricalIndex.get_indexer` failing to raise ``InvalidIndexError`` when non-unique (:issue:`38372`)"
  },
  {
    "id" : "5548d4ff-0b62-40b1-be90-938f350cb512",
    "prId" : 37367,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37367#pullrequestreview-570360772",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8058fd42-96cf-4af8-859e-e34bf79ade60",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This last entry might not really fit in the bug fixes section .. but maybe also not worth adding a dedicated subsection for it in the \"notable (API breaking) bug fixes\"",
        "createdAt" : "2021-01-18T10:33:05Z",
        "updatedAt" : "2021-02-12T14:01:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbb713d98ae9a1ac8a8deda76075402fc70dd9c8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +450,454 @@- Bug in :class:`Index` constructor sometimes silently ignorning a specified ``dtype`` (:issue:`38879`)\n- Bug in :func:`pandas.api.types.infer_dtype` not recognizing Series, Index or array with a period dtype (:issue:`23553`)\n- Bug in :func:`pandas.api.types.infer_dtype` raising an error for general :class:`.ExtensionArray` objects. It will now return ``\"unknown-array\"`` instead of raising (:issue:`37367`)\n- Bug in constructing a :class:`Series` from a list and a :class:`PandasDtype` (:issue:`39357`)\n- Bug in :class:`Styler` which caused CSS to duplicate on multiple renders. (:issue:`39395`)"
  },
  {
    "id" : "fc10b424-1beb-4372-95e2-fc7d77f2fb15",
    "prId" : 38780,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38780#pullrequestreview-631087602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4325c803-0e25-4509-ba8b-af65ef57f21e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would not object to an example in window.rst as well",
        "createdAt" : "2021-04-07T13:48:55Z",
        "updatedAt" : "2021-04-09T12:15:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eb26ed69-230d-446e-8820-330bd16b5124",
        "parentId" : "4325c803-0e25-4509-ba8b-af65ef57f21e",
        "authorId" : "b22bfefe-52c5-4b38-88f1-663c72f80113",
        "body" : "I added the same example also to the window.rst now",
        "createdAt" : "2021-04-08T07:57:41Z",
        "updatedAt" : "2021-04-09T12:15:22Z",
        "lastEditedBy" : "b22bfefe-52c5-4b38-88f1-663c72f80113",
        "tags" : [
        ]
      }
    ],
    "commit" : "47a3b141b196b3a2acbb65a2db3e208bcd863801",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +135,139 @@a copy will be made.\n\nCentered Datetime-Like Rolling Windows\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
  },
  {
    "id" : "4221da5c-351d-4807-9f75-7c6a5a7fd1d9",
    "prId" : 38780,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38780#pullrequestreview-632348159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6010e3f6-4588-4f59-a4e9-e5bddddb331d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same comment as above",
        "createdAt" : "2021-04-08T20:19:01Z",
        "updatedAt" : "2021-04-09T12:15:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3fee6cec-0ce0-4252-82e6-dfbffd57c0eb",
        "parentId" : "6010e3f6-4588-4f59-a4e9-e5bddddb331d",
        "authorId" : "b22bfefe-52c5-4b38-88f1-663c72f80113",
        "body" : "Done.",
        "createdAt" : "2021-04-09T12:15:54Z",
        "updatedAt" : "2021-04-09T12:15:54Z",
        "lastEditedBy" : "b22bfefe-52c5-4b38-88f1-663c72f80113",
        "tags" : [
        ]
      }
    ],
    "commit" : "47a3b141b196b3a2acbb65a2db3e208bcd863801",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +147,151 @@    df = pd.DataFrame(\n        {\"A\": [0, 1, 2, 3, 4]}, index=pd.date_range(\"2020\", periods=5, freq=\"1D\")\n    )\n    df\n    df.rolling(\"2D\", center=True).mean()"
  },
  {
    "id" : "a485ed5e-2d49-4c31-916f-c7d857545acb",
    "prId" : 38843,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38843#pullrequestreview-560607912",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee373461-bcb8-4b6c-95a8-2a47f3de4536",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you be more specific as this applies to concat of DataFrames *only* and only on axis=1 (next pass ok)",
        "createdAt" : "2021-01-01T21:58:07Z",
        "updatedAt" : "2021-01-01T21:58:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "26bb040e-2d87-46d7-b1a1-def68080bc5a",
        "parentId" : "ee373461-bcb8-4b6c-95a8-2a47f3de4536",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "next pass sounds good",
        "createdAt" : "2021-01-01T22:04:56Z",
        "updatedAt" : "2021-01-01T22:04:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9be5dfbea92c435623cf0fe68590f089fc0efa45",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +295,299 @@^^^^^^^^^\n- Bug in :meth:`DataFrame.unstack` with missing levels led to incorrect index names (:issue:`37510`)\n- Bug in :func:`concat` incorrectly casting to ``object`` dtype in some cases when one or more of the operands is empty (:issue:`38843`)\n-\n"
  },
  {
    "id" : "3d81e4fe-87c2-4261-97d7-41671efc803e",
    "prId" : 38861,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38861#pullrequestreview-560549062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d63a195-76c5-4f91-993a-b1b7b2562292",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this won't render i think can just say DataFrameGroupBy.indices",
        "createdAt" : "2020-12-31T19:45:42Z",
        "updatedAt" : "2021-01-01T13:43:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3f0291d2-e951-4123-a947-f8c533c949e9",
        "parentId" : "6d63a195-76c5-4f91-993a-b1b7b2562292",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "This does render, i.e. gives a link to the doc page:\r\n\r\n![image](https://user-images.githubusercontent.com/45562402/103425677-fea4a700-4b81-11eb-81da-ef08b03ba918.png)\r\n",
        "createdAt" : "2020-12-31T21:05:35Z",
        "updatedAt" : "2021-01-01T13:43:48Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b769afc16867118bc3ccd98fbdbe1f26a6cf1719",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +286,290 @@\n- Bug in :meth:`SeriesGroupBy.value_counts` where unobserved categories in a grouped categorical series were not tallied (:issue:`38672`)\n- Bug in :meth:`.GroupBy.indices` would contain non-existent indices when null values were present in the groupby keys (:issue:`9304`)\n-\n"
  },
  {
    "id" : "84f769fd-18a6-4ecf-80b4-d392dedd1427",
    "prId" : 38895,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38895#pullrequestreview-560709628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8072cbe1-4abe-4b54-9d90-7046f50889ab",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "might be worth a note in the user docs as well",
        "createdAt" : "2021-01-03T16:32:25Z",
        "updatedAt" : "2021-01-04T19:33:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc4656c7580b35762a1c308de6b57e128cae4ce8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +53,57 @@- :func:`to_numeric` now supports downcasting of nullable ``ExtensionDtype`` objects (:issue:`33013`)\n- :func:`pandas.read_excel` can now auto detect .xlsb files (:issue:`35416`)\n- :meth:`.Rolling.sum`, :meth:`.Expanding.sum`, :meth:`.Rolling.mean`, :meth:`.Expanding.mean`, :meth:`.Rolling.median`, :meth:`.Expanding.median`, :meth:`.Rolling.max`, :meth:`.Expanding.max`, :meth:`.Rolling.min`, and :meth:`.Expanding.min` now support ``Numba`` execution with the ``engine`` keyword (:issue:`38895`)\n\n.. ---------------------------------------------------------------------------"
  },
  {
    "id" : "b8277eff-3ad7-45fd-9ed5-0f55694de5d8",
    "prId" : 38939,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38939#pullrequestreview-572932665",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b82fc77b-23e5-4092-8a52-be1dd4d5cefd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "move this to a new ipython block",
        "createdAt" : "2021-01-13T13:53:38Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "989da736-b6b3-42ae-b3bc-4701ccbf4124",
        "parentId" : "b82fc77b-23e5-4092-8a52-be1dd4d5cefd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "updated + green",
        "createdAt" : "2021-01-21T02:17:26Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "98b6dff1f6a51f1a621b4d99e75dd4aaf32e6d1b",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +129,133 @@.. ipython:: python\n\n    arr[0] = 0\n    assert df.iloc[0, 0] == 0\n"
  },
  {
    "id" : "8cee7387-8e25-47a4-9c99-a06f80b81c05",
    "prId" : 38939,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38939#pullrequestreview-605369267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e53ff4a9-7370-4f04-807c-9a7a9ce88281",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add that the default behaviour to copy didn't change?",
        "createdAt" : "2021-03-05T16:02:18Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "98b6dff1f6a51f1a621b4d99e75dd4aaf32e6d1b",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +117,121 @@\nWhen passing a dictionary to :class:`DataFrame` with ``copy=False``,\na copy will no longer be made (:issue:`32960`)\n\n.. ipython:: python"
  },
  {
    "id" : "f9ae900b-3b5a-4a9f-ba0a-f8d6cca87543",
    "prId" : 38963,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38963#pullrequestreview-564445968",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3d00995-cd72-465c-a56c-b5511e9b494a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "small future note: since `pd.Rolling` does not exist, such a `` :attr:`Rolling.win_type`  `` does not work",
        "createdAt" : "2021-01-08T14:26:02Z",
        "updatedAt" : "2021-01-08T14:26:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "82968674-9fb7-444f-9ceb-5e1fcfb4adf5",
        "parentId" : "c3d00995-cd72-465c-a56c-b5511e9b494a",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Ah okay thanks for the note.",
        "createdAt" : "2021-01-08T17:26:42Z",
        "updatedAt" : "2021-01-08T17:26:42Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "10b8d6cdc669d229827933a4da8635109f286b5e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +162,166 @@- Deprecated keyword ``try_cast`` in :meth:`Series.where`, :meth:`Series.mask`, :meth:`DataFrame.where`, :meth:`DataFrame.mask`; cast results manually if desired (:issue:`38836`)\n- Deprecated comparison of :class:`Timestamp` object with ``datetime.date`` objects.  Instead of e.g. ``ts <= mydate`` use ``ts <= pd.Timestamp(mydate)`` or ``ts.date() <= mydate`` (:issue:`36131`)\n- Deprecated :attr:`Rolling.win_type` returning ``\"freq\"`` (:issue:`38963`)\n- Deprecated :attr:`Rolling.is_datetimelike` (:issue:`38963`)\n-"
  },
  {
    "id" : "5d3a61bf-29c1-4168-b425-ccefcc414358",
    "prId" : 39051,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39051#pullrequestreview-567247677",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0a6dc9f-0cf8-4b21-aea8-4859ebf65733",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "show df1 and df2",
        "createdAt" : "2021-01-13T14:02:01Z",
        "updatedAt" : "2021-01-15T14:44:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9379289ac6daf75ade5df90d5e81a0593f0745a",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +78,82 @@   df2\n   combined = df1.combine_first(df2)\n\n*pandas 1.2.x*\n"
  },
  {
    "id" : "d0dc7158-b9fd-4a3e-b1c5-e590d212b804",
    "prId" : 39150,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39150#pullrequestreview-567426081",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70be5d33-d5bb-41f5-a97b-ce80a177f2f7",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "without the spaces these don't render correctly https://pandas.pydata.org/pandas-docs/dev/whatsnew/v1.3.0.html#deprecations",
        "createdAt" : "2021-01-13T16:53:31Z",
        "updatedAt" : "2021-01-13T16:53:31Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4483696a720b385ba6630cd276b6c81282fd950",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +154,158 @@~~~~~~~~~~~~\n- Deprecated allowing scalars to be passed to the :class:`Categorical` constructor (:issue:`38433`)\n- Deprecated allowing subclass-specific keyword arguments in the :class:`Index` constructor, use the specific subclass directly instead (:issue:`14093`, :issue:`21311`, :issue:`22315`, :issue:`26974`)\n- Deprecated ``astype`` of datetimelike (``timedelta64[ns]``, ``datetime64[ns]``, ``Datetime64TZDtype``, ``PeriodDtype``) to integer dtypes, use ``values.view(...)`` instead (:issue:`38544`)\n- Deprecated :meth:`MultiIndex.is_lexsorted` and :meth:`MultiIndex.lexsort_depth`, use :meth:`MultiIndex.is_monotonic_increasing` instead (:issue:`32259`)"
  },
  {
    "id" : "e6e07732-8f73-4c84-9f7a-e20429d5fcb9",
    "prId" : 39372,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39372#pullrequestreview-575585569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d82a0e59-dae9-41e4-b23b-00b51c4369d7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could also put this in bug fixes indexing",
        "createdAt" : "2021-01-25T16:38:11Z",
        "updatedAt" : "2021-01-25T16:40:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "59579ad7-3cf4-45a9-8d5e-9bb08ee92729",
        "parentId" : "d82a0e59-dae9-41e4-b23b-00b51c4369d7",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "Could move it if you prefer.\r\n\r\nSince this was already raising but with a cryptic error message I put it there",
        "createdAt" : "2021-01-25T16:40:36Z",
        "updatedAt" : "2021-01-25T16:40:36Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbb5f7dbc87adf53ec4c38906f12ed9cccc11bba",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +54,58 @@- :meth:`Series.apply` can now accept list-like or dictionary-like arguments that aren't lists or dictionaries, e.g. ``ser.apply(np.array([\"sum\", \"mean\"]))``, which was already the case for :meth:`DataFrame.apply` (:issue:`39140`)\n- :meth:`.Styler.set_tooltips` allows on hover tooltips to be added to styled HTML dataframes.\n- :meth:`Series.loc.__getitem__` and :meth:`Series.loc.__setitem__` with :class:`MultiIndex` now raising helpful error message when indexer has too many dimensions (:issue:`35349`)\n\n.. ---------------------------------------------------------------------------"
  },
  {
    "id" : "5b27b713-6054-4fbe-87de-ffae1b94ddc5",
    "prId" : 39516,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39516#pullrequestreview-580970337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "537d3d81-70bd-4bce-a459-09f465a18f42",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a link to the IO docs",
        "createdAt" : "2021-02-02T00:56:27Z",
        "updatedAt" : "2021-02-27T16:08:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "30c41fb4-47aa-4d7c-8a1a-8be272f1abd2",
        "parentId" : "537d3d81-70bd-4bce-a459-09f465a18f42",
        "authorId" : "945de1aa-6ab9-444d-9c5f-4f0df7381bbe",
        "body" : "Will do.",
        "createdAt" : "2021-02-02T04:09:54Z",
        "updatedAt" : "2021-02-27T16:08:18Z",
        "lastEditedBy" : "945de1aa-6ab9-444d-9c5f-4f0df7381bbe",
        "tags" : [
        ]
      }
    ],
    "commit" : "6194f83c151f3c3b27ac3f50f594c1dd60d23a0a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +48,52 @@Read and write XML documents\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWe added I/O support to read and render shallow versions of `XML`_ documents with\n:func:`pandas.read_xml` and :meth:`DataFrame.to_xml`. Using `lxml`_ as parser,"
  },
  {
    "id" : "1184fb1c-73af-42ac-96ac-e85711e2e1e9",
    "prId" : 40422,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40422#pullrequestreview-666155058",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f179cf4b-a478-4eff-aa59-5e0d4dfd3128",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you link to examples in io.rst ",
        "createdAt" : "2021-05-21T17:32:40Z",
        "updatedAt" : "2021-05-21T17:34:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "183c30c9-d939-4a41-8794-f0b600a5c501",
        "parentId" : "f179cf4b-a478-4eff-aa59-5e0d4dfd3128",
        "authorId" : "00fd25ec-10ce-4da2-b282-338650c2fd94",
        "body" : "added an issue. will be follow on. #41613 ",
        "createdAt" : "2021-05-22T05:49:39Z",
        "updatedAt" : "2021-05-22T05:49:39Z",
        "lastEditedBy" : "00fd25ec-10ce-4da2-b282-338650c2fd94",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbd189f3891631fe6e964ce8d263cdeac52bc6d7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +142,146 @@One also has greater control of the display through separate sparsification of the index or columns, using the new 'styler' options context (:issue:`41142`).\n\nWe have added an extension to allow LaTeX styling as an alternative to CSS styling and a method :meth:`.Styler.to_latex`\nwhich renders the necessary LaTeX format including built-up styles.\n"
  },
  {
    "id" : "e7c95c2b-9faf-4fef-a2e6-27a66730e697",
    "prId" : 40425,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40425#pullrequestreview-611724437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a4cac7b-e11c-448d-a8ee-20d27b499c0e",
        "parentId" : null,
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Why the mention of this PR here? It doesn't have to do with the deprecation, right?",
        "createdAt" : "2021-03-14T16:00:04Z",
        "updatedAt" : "2021-03-14T16:03:10Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "1d2d144a-293f-4633-9f51-b2ddf205cbaf",
        "parentId" : "4a4cac7b-e11c-448d-a8ee-20d27b499c0e",
        "authorId" : "00fd25ec-10ce-4da2-b282-338650c2fd94",
        "body" : "Well the previous PR changed these functions and introduced this minor performance bug. This PR should really have been included in that (and then there would only be one PR entry for 1.3.0 changes) ",
        "createdAt" : "2021-03-14T16:28:32Z",
        "updatedAt" : "2021-03-14T16:28:33Z",
        "lastEditedBy" : "00fd25ec-10ce-4da2-b282-338650c2fd94",
        "tags" : [
        ]
      },
      {
        "id" : "64b7bbc4-c278-4131-8252-aa02a8d3b948",
        "parentId" : "4a4cac7b-e11c-448d-a8ee-20d27b499c0e",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Thanks - makes sense. Maybe just add that detail to the OP here in case any user comes looking after seeing the release notes.",
        "createdAt" : "2021-03-14T18:29:01Z",
        "updatedAt" : "2021-03-14T18:29:01Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "109c9987768e42b7a0aa2697d31e98fdc53854e7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +368,372 @@- Using ``.astype`` to convert between ``datetime64[ns]`` dtype and :class:`DatetimeTZDtype` is deprecated and will raise in a future version, use ``obj.tz_localize`` or ``obj.dt.tz_localize`` instead (:issue:`38622`)\n- Deprecated casting ``datetime.date`` objects to ``datetime64`` when used as ``fill_value`` in :meth:`DataFrame.unstack`, :meth:`DataFrame.shift`, :meth:`Series.shift`, and :meth:`DataFrame.reindex`, pass ``pd.Timestamp(dateobj)`` instead (:issue:`39767`)\n- Deprecated :meth:`.Styler.set_na_rep` and :meth:`.Styler.set_precision` in favour of :meth:`.Styler.format` with ``na_rep`` and ``precision`` as existing and new input arguments respectively (:issue:`40134`, :issue:`40425`)\n- Deprecated allowing partial failure in :meth:`Series.transform` and :meth:`DataFrame.transform` when ``func`` is list-like or dict-like; will raise if any function fails on a column in a future version (:issue:`40211`)\n"
  },
  {
    "id" : "c113bcd7-9bb2-4fb5-8071-392e3e91ac1a",
    "prId" : 40651,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40651#pullrequestreview-635078050",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49e7afad-784b-42e4-97bf-72a8674c7e93",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is the leading \".\" a pattern i dont know about?",
        "createdAt" : "2021-04-13T22:10:18Z",
        "updatedAt" : "2021-04-20T23:23:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c7a4e674-a696-4ddb-8161-5410e1bf5249",
        "parentId" : "49e7afad-784b-42e4-97bf-72a8674c7e93",
        "authorId" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "body" : "Was a suggestion from @jorisvandenbossche, some explanation in the thread here https://github.com/pandas-dev/pandas/pull/40819#discussion_r612552622",
        "createdAt" : "2021-04-13T22:34:17Z",
        "updatedAt" : "2021-04-20T23:23:58Z",
        "lastEditedBy" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e1dac42363d76ea32981d784b14ec293cb947a3",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +838,842 @@- Bug in :meth:`GroupBy.cummin` and :meth:`GroupBy.cummax` incorrectly rounding integer values near the ``int64`` implementations bounds (:issue:`40767`)\n- Bug in :meth:`.GroupBy.rank` with nullable dtypes incorrectly raising ``TypeError`` (:issue:`41010`)\n- Bug in :meth:`.GroupBy.cummin` and :meth:`.GroupBy.cummax` computing wrong result with nullable data types too large to roundtrip when casting to float (:issue:`37493`)\n\nReshaping"
  },
  {
    "id" : "312a3b16-111c-4765-8759-88d0cbc70461",
    "prId" : 40819,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40819#pullrequestreview-636347726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8d46edc-4154-403f-8515-8eb1db884eeb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm is this how we other groupby refs? i am not sure this will render ",
        "createdAt" : "2021-04-13T15:27:31Z",
        "updatedAt" : "2021-04-13T15:30:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a03f6be8-867e-4596-bc6e-5f5f25967fdc",
        "parentId" : "f8d46edc-4154-403f-8515-8eb1db884eeb",
        "authorId" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "body" : "I see one other entry with this style, I think it's good here to avoid having the duplication of `DataFrameGroupBy.`, `SeriesGroupBy.` for both `any` and `all`. Building docs now to check rendering",
        "createdAt" : "2021-04-13T16:38:58Z",
        "updatedAt" : "2021-04-13T16:38:59Z",
        "lastEditedBy" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "tags" : [
        ]
      },
      {
        "id" : "375da2f1-a154-4723-b249-5e66c2b756c9",
        "parentId" : "f8d46edc-4154-403f-8515-8eb1db884eeb",
        "authorId" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "body" : "Looks good:\r\n<img width=\"871\" alt=\"Screen Shot 2021-04-13 at 1 08 05 PM\" src=\"https://user-images.githubusercontent.com/37011898/114592907-74c4a980-9c59-11eb-89d7-63f65f08f8b0.png\">\r\n(links to https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.all.html)",
        "createdAt" : "2021-04-13T17:09:55Z",
        "updatedAt" : "2021-04-13T17:09:55Z",
        "lastEditedBy" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "tags" : [
        ]
      },
      {
        "id" : "75b260b8-9035-4840-aa85-f3b5cf589859",
        "parentId" : "f8d46edc-4154-403f-8515-8eb1db884eeb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> hmm is this how we other groupby refs? i am not sure this will render\r\n\r\nYes, that's something @rhshadrach recently found out. The leading `.` is basically a wildcard search for a matching object, so `.GroupBy` will find `pandas.core.groupby.GroupBy` (since we only have a single `GroupBy` class in our API docs)\r\n\r\n",
        "createdAt" : "2021-04-13T18:30:21Z",
        "updatedAt" : "2021-04-13T18:30:21Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "79743a7f-4e45-4dcf-ba0f-6c8d7b6ac41d",
        "parentId" : "f8d46edc-4154-403f-8515-8eb1db884eeb",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "I do wonder if this is something in the docs we could find a better solution to - knowing whether to look under GroupBy or DataFrameGroupBy etc. I personally don't find it hurts usability of the docs, and is only a slight annoyance when crafting the whatsnew, but I wouldn't be surprised if users were confused by it.",
        "createdAt" : "2021-04-13T21:18:32Z",
        "updatedAt" : "2021-04-13T21:18:32Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "a1d075e8-783c-47f6-a78f-2d83a31044ed",
        "parentId" : "f8d46edc-4154-403f-8515-8eb1db884eeb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> I do wonder if this is something in the docs we could find a better solution to - knowing whether to look under GroupBy or DataFrameGroupBy etc\r\n\r\nYeah, I always need to look at https://pandas.pydata.org/docs/dev/reference/groupby.html which one is available to link to ..\r\n\r\nIn general I think we should try to have most of them available just using `GroupBy` to make life easier. \r\nWe actually do have some duplication as well. Eg for some methods we have both the GroupBy and DataFrameGroupBy version (eg https://pandas.pydata.org/docs/dev/reference/api/pandas.core.groupby.DataFrameGroupBy.all.html#pandas.core.groupby.DataFrameGroupBy.all and https://pandas.pydata.org/docs/dev/reference/api/pandas.core.groupby.GroupBy.all.html#pandas.core.groupby.GroupBy.all). I think for those we can only have the GroupBy version. ",
        "createdAt" : "2021-04-15T07:21:18Z",
        "updatedAt" : "2021-04-15T07:21:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2b8ad0334e54f247b9a80cc0ae00a0045408647",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +218,222 @@- :meth:`round` being enabled for the nullable integer and floating dtypes (:issue:`38844`)\n- :meth:`pandas.read_csv` and :meth:`pandas.read_json` expose the argument ``encoding_errors`` to control how encoding errors are handled (:issue:`39450`)\n- :meth:`.GroupBy.any` and :meth:`.GroupBy.all` use Kleene logic with nullable data types (:issue:`37506`)\n- :meth:`.GroupBy.any` and :meth:`.GroupBy.all` return a ``BooleanDtype`` for columns with nullable data types (:issue:`33449`)\n-"
  },
  {
    "id" : "fc8b3154-5931-4290-add0-29e3d867e8f0",
    "prId" : 41046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41046#pullrequestreview-644621168",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fae06f6-66a0-41b8-9590-1a79f100863a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would not object to actually showing `read_parquet` reference here",
        "createdAt" : "2021-04-26T12:08:47Z",
        "updatedAt" : "2021-04-26T13:05:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0bd04017-bd55-4e85-b529-86010e78e4be",
        "parentId" : "0fae06f6-66a0-41b8-9590-1a79f100863a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't think that's needed (the original bug report didn't actually involve a plain reading of a Parquet file (not sure this can happen with that), but with a dataset scan+filter operation (from any source format).",
        "createdAt" : "2021-04-26T12:20:06Z",
        "updatedAt" : "2021-04-26T13:05:16Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0fa66bc1-084a-479f-a203-575530f8d0d8",
        "parentId" : "0fae06f6-66a0-41b8-9590-1a79f100863a",
        "authorId" : "08c7f720-1224-462f-b768-37cb83a7bf08",
        "body" : "Yes, I was creating the arrow table using only the arrow api. The bug then occured on the conversion to pandas.\r\n\r\nI did not actually try to reproduce the bug using `read_parquet`, so I'm also not sure if it can happen this way.",
        "createdAt" : "2021-04-26T12:37:28Z",
        "updatedAt" : "2021-04-26T13:05:16Z",
        "lastEditedBy" : "08c7f720-1224-462f-b768-37cb83a7bf08",
        "tags" : [
        ]
      },
      {
        "id" : "bf850522-e7f6-43d1-914f-920dba7150b1",
        "parentId" : "0fae06f6-66a0-41b8-9590-1a79f100863a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I suppose it could happen when reading a parquet file using the new dataset API by passing a certain filter. But anyway, I don't think we need to make that explicit, IMO the above error message is clear enough.",
        "createdAt" : "2021-04-26T12:40:15Z",
        "updatedAt" : "2021-04-26T13:05:16Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "b86f9fc4b1e346a5dc66d7957e8c8b5aea39f070",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +797,801 @@- Bug in :meth:`DataFrame.to_string` misplacing the truncation column when ``index=False`` (:issue:`40907`)\n- Bug in :func:`read_orc` always raising ``AttributeError`` (:issue:`40918`)\n- Bug in the conversion from pyarrow to pandas (e.g. for reading Parquet) with nullable dtypes and a pyarrow array whose data buffer size is not a multiple of dtype size (:issue:`40896`)\n\nPeriod"
  }
]