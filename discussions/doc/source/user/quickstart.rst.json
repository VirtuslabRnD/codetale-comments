[
  {
    "id" : "ce30c786-4000-44a3-bcff-5857c80c9ea7",
    "prId" : 13099,
    "prUrl" : "https://github.com/numpy/numpy/pull/13099#pullrequestreview-211130409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c93da1d1-bbb6-448b-9647-62cd278c3a1d",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Not a big fan of mixing multiline comments and code. And `a` should have double backticks since it is not a reference.",
        "createdAt" : "2019-03-06T09:44:51Z",
        "updatedAt" : "2019-03-14T13:26:00Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0ffa191ade1ac8548cad38a73fecc9f2528f9ef",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +895,899 @@If ``b = a[:100]`` is used instead, ``a`` is referenced by ``b`` and will persist in memory\neven if ``del a`` is executed.\n\nFunctions and Methods Overview\n------------------------------"
  },
  {
    "id" : "9fbe98ab-6429-42ce-9c96-87d5905cd37f",
    "prId" : 15439,
    "prUrl" : "https://github.com/numpy/numpy/pull/15439#pullrequestreview-348822914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dfaa661-b44b-4f9e-8db7-3c3ca30d0308",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Note: we should really consider #11270, which would make this type of output a lot more readable in IPython",
        "createdAt" : "2020-01-27T14:16:19Z",
        "updatedAt" : "2020-01-29T17:01:28Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d5d12346-b332-46fb-9b3d-492f50683ca5",
        "parentId" : "4dfaa661-b44b-4f9e-8db7-3c3ca30d0308",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Yes I agree. This bothered me when I reviewed it, but for now there's no good way to align these outputs better.",
        "createdAt" : "2020-01-27T16:15:24Z",
        "updatedAt" : "2020-01-29T17:01:28Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "b4fcf89b-1008-4cb9-b147-bc8a6bb0226f",
        "parentId" : "4dfaa661-b44b-4f9e-8db7-3c3ca30d0308",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Not that changing the behavior of `IPython` will change what a regular python REPL (and therefore `refguide`) wants, unfortunately.",
        "createdAt" : "2020-01-27T16:59:32Z",
        "updatedAt" : "2020-01-29T17:01:28Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbf7d46f97903325a67060d912d80c9b56f6a70c",
    "line" : 338,
    "diffHunk" : "@@ -1,1 +811,815 @@           [8., 5., 5., 7.]]), array([[0., 5., 4., 0.],\n           [1., 8., 6., 7.]]), array([[6., 8., 5., 2.],\n           [1., 8., 1., 0.]])]\n    # Split a after the third and the fourth column\n    >>> np.hsplit(a,(3,4))"
  },
  {
    "id" : "676a1512-fffe-46c0-b1cc-7b9a6aabe1b8",
    "prId" : 15703,
    "prUrl" : "https://github.com/numpy/numpy/pull/15703#pullrequestreview-369360007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a67b6304-effa-4fe2-9fd4-6134e408d467",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@mattip, did we delivery choose to avoid using BLANKLINE?",
        "createdAt" : "2020-03-04T22:12:12Z",
        "updatedAt" : "2020-03-04T22:22:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3daa4acb-57f3-410b-baf9-d773bb9f15be",
        "parentId" : "a67b6304-effa-4fe2-9fd4-6134e408d467",
        "authorId" : "b4f4f3c9-5507-4fd6-b4cc-f7290cbd7941",
        "body" : "The recent file absolute_beginners.rst uses BLANKLINE, for instance. But refguide_check.py does not care, it is true. I was led into putting them by pytest.",
        "createdAt" : "2020-03-04T22:32:40Z",
        "updatedAt" : "2020-03-04T22:32:40Z",
        "lastEditedBy" : "b4f4f3c9-5507-4fd6-b4cc-f7290cbd7941",
        "tags" : [
        ]
      },
      {
        "id" : "e4e2dc66-058f-4efa-a574-94703efc745a",
        "parentId" : "a67b6304-effa-4fe2-9fd4-6134e408d467",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "We tried to work around `<BLANKLINE>` but there are places we couldn't avoid it. I don't remember the details. My conclusion when messing with it was that we should move to [astropy's pytest-doctestplus](https://github.com/astropy/pytest-doctestplus/) rather than enhance refguide-check.",
        "createdAt" : "2020-03-05T06:07:24Z",
        "updatedAt" : "2020-03-05T06:07:24Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "65351600-33a7-4292-8d2d-37909a5ae7e2",
        "parentId" : "a67b6304-effa-4fe2-9fd4-6134e408d467",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "It seems you must either mash the blocks together without a blank line between them or use the `<BLANKLINE>` directive to indicate that formatting leaves a blankline there. The first is a bit misleading, I think I prefer the way it is now.",
        "createdAt" : "2020-03-05T06:21:37Z",
        "updatedAt" : "2020-03-05T06:21:54Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "6e99378a-0113-41d4-8f55-8d7c14993fee",
        "parentId" : "a67b6304-effa-4fe2-9fd4-6134e408d467",
        "authorId" : "b4f4f3c9-5507-4fd6-b4cc-f7290cbd7941",
        "body" : "Should I attempt to resolve the remaining failures:\r\n\r\n```\r\nERROR:  failed checking doc/source/reference/arrays.nditer.rst\r\n        failed checking doc/source/user/tutorial-svd.rst\r\n        failed checking doc/source/user/c-info.python-as-glue.rst\r\n        failed checking doc/source/f2py/getting-started.rst\r\n```\r\nOr should I test drive the astropy tool?",
        "createdAt" : "2020-03-05T07:47:47Z",
        "updatedAt" : "2020-03-05T07:47:48Z",
        "lastEditedBy" : "b4f4f3c9-5507-4fd6-b4cc-f7290cbd7941",
        "tags" : [
        ]
      },
      {
        "id" : "73ac0f60-d24a-4e5c-9d69-727c5ce613ce",
        "parentId" : "a67b6304-effa-4fe2-9fd4-6134e408d467",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I think we should push forward with the current tool. Once we have cleaned up the last failures, we can add the check to CI, then the transition to the new tool can proceed in a controlled way.",
        "createdAt" : "2020-03-05T08:05:53Z",
        "updatedAt" : "2020-03-05T08:05:53Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "c620aeddbff248e6847c716fe2aae963b29f45ad",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +1367,1371 @@            [14, 13, 15, 17, 12],\n            [13, 12, 14, 16, 11]],\n    <BLANKLINE>\n           [[18, 17, 19, 21, 16],\n            [15, 14, 16, 18, 13],"
  },
  {
    "id" : "c21a1039-0a4d-44b0-a2e9-b0b236580c12",
    "prId" : 16472,
    "prUrl" : "https://github.com/numpy/numpy/pull/16472#pullrequestreview-425259949",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80ad6932-44f6-47cd-a291-2b9566c63e39",
        "parentId" : null,
        "authorId" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "body" : "This link wasn't broken either - the `:doc:` role is preferred for linking to documents I think.",
        "createdAt" : "2020-06-04T17:40:02Z",
        "updatedAt" : "2020-06-05T13:51:10Z",
        "lastEditedBy" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "tags" : [
        ]
      },
      {
        "id" : "113475ee-8a0d-4b4e-a405-9de5e0782aad",
        "parentId" : "80ad6932-44f6-47cd-a291-2b9566c63e39",
        "authorId" : "a6028d79-dad7-4cd2-bce8-fe1565d5fd54",
        "body" : "Please see my comment below: https://github.com/numpy/numpy/pull/16472#issuecomment-639450633",
        "createdAt" : "2020-06-05T12:37:48Z",
        "updatedAt" : "2020-06-05T13:51:10Z",
        "lastEditedBy" : "a6028d79-dad7-4cd2-bce8-fe1565d5fd54",
        "tags" : [
        ]
      }
    ],
    "commit" : "2eb904bf4a686f83c111306c22cadde7b94f9f38",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1057,1061 @@\nAfter application of the broadcasting rules, the sizes of all arrays\nmust match. More details can be found in :ref:`basics.broadcasting`.\n\nAdvanced indexing and index tricks"
  },
  {
    "id" : "61be0c11-92e2-473e-831e-deecc05cb17d",
    "prId" : 17377,
    "prUrl" : "https://github.com/numpy/numpy/pull/17377#pullrequestreview-503988963",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d5baf7a-c53f-4e24-90b3-025919fe2bd0",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmm, @eric-wieser I think you had an opinion on the original issue? I had tried in ipython, and I thought it just printed the `__name__`, but maybe not.\r\n\r\nI think I will just open an issue about it after this is done, but it would seem nice if we can find a solution and also print out a name that we want users to use in `try: ... except: Error`. `UFuncTypeError` seems good, but it should not be in a private module, and maybe we should just use a single class for all the subclasses (at least until we make them public), to avoid printing a private name?",
        "createdAt" : "2020-09-28T16:27:57Z",
        "updatedAt" : "2020-09-30T00:31:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "17baccf7-328f-4b07-b772-a26ab5fdbd58",
        "parentId" : "0d5baf7a-c53f-4e24-90b3-025919fe2bd0",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> maybe we should just use a single class for all the subclasses (at least until we make them public), to avoid printing a private name?\r\n\r\nOne of the ideas behind the subclasses was to avoid actually paying any string formatting costs until the traceback is printed. Merging them into one class would make that more difficult.",
        "createdAt" : "2020-09-29T06:59:54Z",
        "updatedAt" : "2020-09-30T00:31:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "500c8a73-3cdd-4a15-906c-a44dd7b25902",
        "parentId" : "0d5baf7a-c53f-4e24-90b3-025919fe2bd0",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, maybe the real question is different: If `UFuncTypeError` is private (due to being defined in `_exceptions`), should this set it to `TypeError.__qualname__` and `TypeError.__name__`, etc. instead?\r\n\r\nIt might not be hard to fix this differently by using `__reduce__(self): return f\"{original_module}.{original_qualname}\"`.",
        "createdAt" : "2020-09-30T00:11:19Z",
        "updatedAt" : "2020-09-30T00:31:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "09a386be-ef25-4c60-a026-289fdcb39cd3",
        "parentId" : "0d5baf7a-c53f-4e24-90b3-025919fe2bd0",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Overloading `__reduce__` sounds promising to me",
        "createdAt" : "2020-10-07T07:40:21Z",
        "updatedAt" : "2020-10-07T07:40:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "cee530da-2adc-474e-ac01-c55313677c96",
        "parentId" : "0d5baf7a-c53f-4e24-90b3-025919fe2bd0",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I guess the question is whether right now we are OK with messing up the print slightly to fix the pickling. Sorry, I thought this was much clearer :(.\r\n\r\nI am not sure `__reduce__` will work easily. It will be a solution for the error instance, but I doubt it will work for the error class.  Now the original bug report did not have an issue with that, so maybe we can get away with a class that cannot be pickled (but its instances can).",
        "createdAt" : "2020-10-07T15:12:44Z",
        "updatedAt" : "2020-10-07T15:12:45Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea0c5f5295650ee99856133565b98b3e99396fb2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +362,366 @@    Traceback (most recent call last):\n        ...\n    numpy.core._exceptions._UFuncOutputCastingError: Cannot cast ufunc 'add' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'\n\nWhen operating with arrays of different types, the type of the resulting"
  }
]