[
  {
    "id" : "88ebb05e-e3da-488d-a474-5cb841fbb846",
    "prId" : 15295,
    "prUrl" : "https://github.com/numpy/numpy/pull/15295#pullrequestreview-357819050",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d1152b8-05ed-44b0-868e-919d386725f2",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Just a note for other reviewers: please leave this as is for now, we'll deal with where to get the image from later.",
        "createdAt" : "2020-01-08T21:01:01Z",
        "updatedAt" : "2020-02-28T12:39:23Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "70f82c42-8337-4a89-944f-ac5e3bdbbb97",
        "parentId" : "4d1152b8-05ed-44b0-868e-919d386725f2",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "okay this will depend on the datasets package we want to depend on later. for now let's just depend on SciPy in the docs for getting a hold of the image (we already have that dependency in the CircleCI doc buid job anyway).",
        "createdAt" : "2020-02-12T21:59:26Z",
        "updatedAt" : "2020-02-28T12:39:24Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c6b308e8f511bd31c8e8fc369a31bec74e1b879",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +47,51 @@\n    >>> from scipy import misc\n    >>> img = misc.face()\n\n.. note::"
  },
  {
    "id" : "33871179-ed55-4d38-bdb7-89e12256e848",
    "prId" : 15295,
    "prUrl" : "https://github.com/numpy/numpy/pull/15295#pullrequestreview-340621885",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2179a60d-abe9-4516-b955-099a28858527",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "also would be good to use `.. plot::` here so the image gets rendered I think",
        "createdAt" : "2020-01-09T15:51:59Z",
        "updatedAt" : "2020-02-28T12:39:23Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "929eae9e-ff6b-4920-b77e-64a1570ca94d",
        "parentId" : "2179a60d-abe9-4516-b955-099a28858527",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "and same further down",
        "createdAt" : "2020-01-09T15:52:16Z",
        "updatedAt" : "2020-02-28T12:39:23Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c6b308e8f511bd31c8e8fc369a31bec74e1b879",
    "line" : 346,
    "diffHunk" : "@@ -1,1 +344,348 @@values we eliminated from this approximation.\n\n::\n   \n    >>> plt.imshow(approx, cmap=\"gray\")"
  },
  {
    "id" : "e513f692-e32f-4291-81aa-d23739b24f1d",
    "prId" : 15295,
    "prUrl" : "https://github.com/numpy/numpy/pull/15295#pullrequestreview-363136363",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6d260a0-6ddf-4c21-a7fa-554ae5ff1521",
        "parentId" : null,
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "This does not seem like the correct way to generate this array.\r\n\r\nBut, also, it does not seem desirable to make such a large Sigma.  Is that necessary?  Can't broadcasting do some of the work here?\r\n\r\nAt this point, I feel like we may be overwhelming the audience a bit.  While it is true that with broadcasting and other tricks you can turn everything into a near one-liner, something like `apply_along_axis` would probably be about as effective and less confusing to beginners.\r\n\r\nMaybe stop the tutorial before the color section?\r\n\r\n",
        "createdAt" : "2020-01-09T23:05:15Z",
        "updatedAt" : "2020-02-28T12:39:23Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      },
      {
        "id" : "b6ead888-fdc9-47fa-ab55-1d5b280f954d",
        "parentId" : "d6d260a0-6ddf-4c21-a7fa-554ae5ff1521",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "If we did my suggestion in https://github.com/numpy/numpy/pull/15295#discussion_r364660316, then this would become something like:\r\n\r\n```\r\nSigma = np.apply_along_axis(np.diag, s, -1)\r\n```\r\nThings get awkward because the singular value matrix is rectangular, which isn't useful for compression anyway.",
        "createdAt" : "2020-01-09T23:22:44Z",
        "updatedAt" : "2020-02-28T12:39:23Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "68c3cc61-d353-4087-a37e-13d846fe51c8",
        "parentId" : "d6d260a0-6ddf-4c21-a7fa-554ae5ff1521",
        "authorId" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "body" : "I felt that adding `np.apply_along_axis` would be more complicated to explain. I was trying to keep concepts as close to linear algebra as possible, and while the transpose is a well known operation to most people who use linear algebra in their research/work, `apply_along_axis` might be a little more tricky to explain. \r\n\r\nAbout the length of the tutorial, I could break this tutorial into 2 shorter ones; one about the more basic operations and broadcasting - done only on a gray scale imge - and another one about multiple axes. However, i felt that the Absolute Beginner's tutorial will work with the basic operations so I wanted to take this one a little farther. \r\n\r\nLet me know if you think it would be better to break this one, and I can reformulate it. Thanks!",
        "createdAt" : "2020-01-21T14:20:17Z",
        "updatedAt" : "2020-02-28T12:39:23Z",
        "lastEditedBy" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "tags" : [
        ]
      },
      {
        "id" : "830b02d7-c09b-4adf-be89-2aaa4a61b659",
        "parentId" : "d6d260a0-6ddf-4c21-a7fa-554ae5ff1521",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "I agree with keeping things simple here. `zeros` is trivial to understand, `apply_along_axis(...)` isn't.\r\n\r\nAnd also +1 on keeping scope as is, it doesn't really make sense to split in two since then the non-linalg stuff is covered by other parts of the docs already. The alternative that could be considered is shortening, but the current length doesn't bother me.",
        "createdAt" : "2020-01-21T14:58:20Z",
        "updatedAt" : "2020-02-28T12:39:23Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "f3198257-5004-480f-a327-3d97775010fe",
        "parentId" : "d6d260a0-6ddf-4c21-a7fa-554ae5ff1521",
        "authorId" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "body" : "The simplicity argument is a strong one.  At the same time, I think it is important that we teach the mechanisms we would use ourselves.  Habits are surprisingly hard to un-teach!  You'll almost never see double for loops in practice and besides that you most often do not need large arrays to represent repeating elements (given tools such as broadcasting, etc.). But, let's see how it all comes together; I'm happy to do another round of review after a round of editing.",
        "createdAt" : "2020-01-22T23:07:34Z",
        "updatedAt" : "2020-02-28T12:39:24Z",
        "lastEditedBy" : "810880d7-9b25-4940-a0cb-9281ddc2d16a",
        "tags" : [
        ]
      },
      {
        "id" : "9fba0f14-05c3-4f13-8657-8a70ef51d976",
        "parentId" : "d6d260a0-6ddf-4c21-a7fa-554ae5ff1521",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Ah, I was just commenting on the `np.zeros` usage. Agree that the double for-loop below is undesired.",
        "createdAt" : "2020-02-12T21:56:42Z",
        "updatedAt" : "2020-02-28T12:39:24Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "74cd4616-9583-4c4b-82b5-d570752a27a8",
        "parentId" : "d6d260a0-6ddf-4c21-a7fa-554ae5ff1521",
        "authorId" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "body" : "I tried using `np.fill_diagonal` to make this better, let me know what you all think.",
        "createdAt" : "2020-02-21T14:42:55Z",
        "updatedAt" : "2020-02-28T12:39:24Z",
        "lastEditedBy" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "tags" : [
        ]
      },
      {
        "id" : "e88fd54d-7268-4a7e-894d-a3741a9f8afc",
        "parentId" : "d6d260a0-6ddf-4c21-a7fa-554ae5ff1521",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "looks good to me now",
        "createdAt" : "2020-02-24T00:23:08Z",
        "updatedAt" : "2020-02-28T12:39:24Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c6b308e8f511bd31c8e8fc369a31bec74e1b879",
    "line" : 425,
    "diffHunk" : "@@ -1,1 +423,427 @@::\n\n    >>> Sigma = np.zeros((3, 768, 1024))\n    >>> for j in range(3):\n    ...     np.fill_diagonal(Sigma[j, :, :], s[j, :])"
  },
  {
    "id" : "97c4c5ea-1e8d-4c7c-9c2f-d8aa1503441c",
    "prId" : 15295,
    "prUrl" : "https://github.com/numpy/numpy/pull/15295#pullrequestreview-347958372",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c92a11a6-e9f9-4378-b894-c0a686c296b3",
        "parentId" : null,
        "authorId" : "e359ad03-48bf-4fa1-87dc-4834056b1bc7",
        "body" : "economical?",
        "createdAt" : "2020-01-22T21:12:41Z",
        "updatedAt" : "2020-02-28T12:39:23Z",
        "lastEditedBy" : "e359ad03-48bf-4fa1-87dc-4834056b1bc7",
        "tags" : [
        ]
      },
      {
        "id" : "ee5017df-5f5b-477b-be5c-cb31e752a3e3",
        "parentId" : "c92a11a6-e9f9-4378-b894-c0a686c296b3",
        "authorId" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "body" : "Oops, yes :)",
        "createdAt" : "2020-01-24T13:41:08Z",
        "updatedAt" : "2020-02-28T12:39:24Z",
        "lastEditedBy" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c6b308e8f511bd31c8e8fc369a31bec74e1b879",
    "line" : 271,
    "diffHunk" : "@@ -1,1 +269,273 @@\nresults in a ``ValueError``. This happens because having a one-dimensional\narray for ``s``, in this case, is much more economic in practice than building a\ndiagonal matrix with the same data. To reconstruct the original matrix, we can\nrebuild the diagonal matrix :math:`\\Sigma` with the elements of ``s`` in its"
  },
  {
    "id" : "6df1d25f-eccb-4c76-b423-616a82d4ad59",
    "prId" : 15295,
    "prUrl" : "https://github.com/numpy/numpy/pull/15295#pullrequestreview-365904301",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c08b3c49-42e2-4f24-a456-349aa9723af2",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "line length a bit over 80",
        "createdAt" : "2020-02-27T18:15:43Z",
        "updatedAt" : "2020-02-28T12:39:24Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "68042121-fb95-4ae0-a2ad-ea9bbb3d9474",
        "parentId" : "c08b3c49-42e2-4f24-a456-349aa9723af2",
        "authorId" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "body" : "Done, sorry.",
        "createdAt" : "2020-02-27T18:40:04Z",
        "updatedAt" : "2020-02-28T12:39:24Z",
        "lastEditedBy" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c6b308e8f511bd31c8e8fc369a31bec74e1b879",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +59,63 @@   when converted to NumPy arrays, see :std:doc:`user_guide/numpy_images` from\n   the ``scikit-image`` documentation.\n\nNow, ``img`` is a NumPy array, as we can see when using the ``type`` function::\n"
  }
]