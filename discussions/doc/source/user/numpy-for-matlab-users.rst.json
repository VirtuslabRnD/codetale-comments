[
  {
    "id" : "bba774b6-eb3c-4750-926f-c6d4502be256",
    "prId" : 6841,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b6f9bad-bcf2-43d0-b968-9adb87cfca5c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Why the `;`?\n",
        "createdAt" : "2015-12-17T15:53:59Z",
        "updatedAt" : "2015-12-17T15:53:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4d2d006b-9d2a-4db1-a7a3-3d6747548366",
        "parentId" : "2b6f9bad-bcf2-43d0-b968-9adb87cfca5c",
        "authorId" : "7ff2710f-0a12-46fb-a54a-d405dab78cf7",
        "body" : "Personally I like `;` for ending list elements, but I guess you're asking why here and not the same edit elsewhere?\n",
        "createdAt" : "2015-12-17T18:02:16Z",
        "updatedAt" : "2015-12-17T18:02:16Z",
        "lastEditedBy" : "7ff2710f-0a12-46fb-a54a-d405dab78cf7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9aae5f30324a84e8caaaec91ab358e8e96b9a7b",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +89,93 @@-  Handling of higher-dimensional arrays (ndim > 2)\n\n   -  ``array`` objects **can have number of dimensions > 2**;\n   -  ``matrix`` objects **always have exactly two dimensions**.\n"
  },
  {
    "id" : "75872a1a-22e8-4aab-85fc-5c539583495c",
    "prId" : 6841,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b552126-3b28-4b58-9836-ae14d2050f3e",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "`2-D`?\n",
        "createdAt" : "2015-12-17T16:03:54Z",
        "updatedAt" : "2015-12-17T16:03:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9aae5f30324a84e8caaaec91ab358e8e96b9a7b",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +506,510 @@   * - ``rank(a)``\n     - ``linalg.matrix_rank(a)``\n     - matrix rank of a 2D array / matrix ``a``\n\n   * - ``a\\b``"
  },
  {
    "id" : "3991bce8-0ecf-4fb2-80e8-59fda1e72921",
    "prId" : 10472,
    "prUrl" : "https://github.com/numpy/numpy/pull/10472#pullrequestreview-91650324",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bfe9f1f-27eb-473d-a08f-122c62fb5f37",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nit: spaces around `@`",
        "createdAt" : "2018-01-25T19:52:53Z",
        "updatedAt" : "2018-01-25T19:52:54Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "531784bfb464a4d869c821d71bcc628a86f12eba",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +370,374 @@\n   * - ``a * b``\n     - ``a.dot(b)`` or ``a@b`` (Python 3.5 or newer)\n     - matrix multiply\n"
  },
  {
    "id" : "bb7a9254-cc4b-49e2-8c30-33c1ad4ec730",
    "prId" : 12741,
    "prUrl" : "https://github.com/numpy/numpy/pull/12741#pullrequestreview-240034821",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "084e6e9b-514e-4c33-86ad-b7e39295de68",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "No need for `scipy.linalg`, `np.linalg` has that function. Hmm, the docstring of `np.linalg.eig` could use some improvement.",
        "createdAt" : "2019-05-21T12:59:19Z",
        "updatedAt" : "2019-05-21T12:59:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "dd7f909f-5049-46ab-9a8e-9399a5770b1f",
        "parentId" : "084e6e9b-514e-4c33-86ad-b7e39295de68",
        "authorId" : "e11ff397-603d-4b8a-bdaa-e416a654d047",
        "body" : "@charris the function is there, but its signature only accepts a single array, i.e. it doesn't support _generalized_ eigenproblems.",
        "createdAt" : "2019-05-21T13:10:17Z",
        "updatedAt" : "2019-05-21T13:10:17Z",
        "lastEditedBy" : "e11ff397-603d-4b8a-bdaa-e416a654d047",
        "tags" : [
        ]
      },
      {
        "id" : "067c36d6-7a50-4b9c-9b61-b61230a9ddab",
        "parentId" : "084e6e9b-514e-4c33-86ad-b7e39295de68",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK.",
        "createdAt" : "2019-05-21T13:13:04Z",
        "updatedAt" : "2019-05-21T13:13:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9b7451077c996176b6a54520d6b6c7eb71cdb4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +548,552 @@\n   * - ``[V,D]=eig(a,b)``\n     - ``D,V = scipy.linalg.eig(a,b)``\n     - eigenvalues and eigenvectors of ``a``, ``b``\n"
  },
  {
    "id" : "2ddc9ac3-3367-4c7f-a9ac-84cec8864b6c",
    "prId" : 17159,
    "prUrl" : "https://github.com/numpy/numpy/pull/17159#pullrequestreview-474632960",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d042b75b-a69c-4cd2-9685-109f308bb01b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Was this section edited or just moved?",
        "createdAt" : "2020-08-25T15:42:02Z",
        "updatedAt" : "2020-09-15T20:02:56Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e1aa1a07-da17-4061-a297-27d312c8c4f6",
        "parentId" : "d042b75b-a69c-4cd2-9685-109f308bb01b",
        "authorId" : "1edd78f6-8b14-4cf5-8b30-e5101cb4541a",
        "body" : "This was moved, not edited. ",
        "createdAt" : "2020-08-25T16:06:26Z",
        "updatedAt" : "2020-09-15T20:02:56Z",
        "lastEditedBy" : "1edd78f6-8b14-4cf5-8b30-e5101cb4541a",
        "tags" : [
        ]
      }
    ],
    "commit" : "56ee4455161ee3eb75f3842567255e52ccc589ef",
    "line" : 896,
    "diffHunk" : "@@ -1,1 +638,642 @@NumPy.\n\n'array' or 'matrix'? Which should I use?\n========================================\n"
  },
  {
    "id" : "e690dc64-9da9-4439-ba17-3128b0d1549d",
    "prId" : 17159,
    "prUrl" : "https://github.com/numpy/numpy/pull/17159#pullrequestreview-478222393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "467248c9-a9a0-4a3c-9568-4f1f1849aa80",
        "parentId" : null,
        "authorId" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "body" : "`rank(a)` <-> `linalg.matrix_rank(a)` appears twice in the table",
        "createdAt" : "2020-08-30T19:04:13Z",
        "updatedAt" : "2020-09-15T20:02:56Z",
        "lastEditedBy" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "tags" : [
        ]
      }
    ],
    "commit" : "56ee4455161ee3eb75f3842567255e52ccc589ef",
    "line" : 715,
    "diffHunk" : "@@ -1,1 +497,501 @@     - ``U, S, Vh = linalg.svd(a), V = Vh.T``\n     - singular value decomposition of ``a``\n\n   * - ``c=chol(a)`` where ``a==c'*c``\n     - ``c = linalg.cholesky(a)`` where ``a == c@c.T``"
  },
  {
    "id" : "d1935235-4e66-4031-9368-f84b87415538",
    "prId" : 17159,
    "prUrl" : "https://github.com/numpy/numpy/pull/17159#pullrequestreview-479697295",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3593e926-f2e3-4e72-afd1-5d5368b4c8c5",
        "parentId" : null,
        "authorId" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "body" : "Here and above, some of the code (e.g. \"z = reshape(x, 3, 4)\") is not surrounded by backticks, which makes the rendering less clear for those reading. Would it be possible to review the document and add backticks to inline code expressions so they are rendered in code-mode?",
        "createdAt" : "2020-08-30T19:15:23Z",
        "updatedAt" : "2020-09-15T20:02:56Z",
        "lastEditedBy" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "tags" : [
        ]
      },
      {
        "id" : "848e811f-4e04-4ae7-9e8a-6f9416503aac",
        "parentId" : "3593e926-f2e3-4e72-afd1-5d5368b4c8c5",
        "authorId" : "1edd78f6-8b14-4cf5-8b30-e5101cb4541a",
        "body" : "I went through these paragraphs and found the inline code. Glad you caught those. ",
        "createdAt" : "2020-09-01T12:37:43Z",
        "updatedAt" : "2020-09-15T20:02:56Z",
        "lastEditedBy" : "1edd78f6-8b14-4cf5-8b30-e5101cb4541a",
        "tags" : [
        ]
      }
    ],
    "commit" : "56ee4455161ee3eb75f3842567255e52ccc589ef",
    "line" : 894,
    "diffHunk" : "@@ -1,1 +637,641 @@reshape(x,3,4);`` should become ``z = x.reshape(3,4,order='F').copy()`` in\nNumPy.\n\n'array' or 'matrix'? Which should I use?\n========================================"
  },
  {
    "id" : "66559261-84c6-41bf-a462-8c1b6a4f9b6b",
    "prId" : 17159,
    "prUrl" : "https://github.com/numpy/numpy/pull/17159#pullrequestreview-487234376",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7165d4c0-6858-42a9-a157-86cdcd79a03e",
        "parentId" : null,
        "authorId" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "body" : "For the sake of new users who might be coming in from a search engine and not know anything about NumPy, I would add a link to \"multidimensional array\" and have\r\n```\r\n:ref:`multidimensional array<quickstart.the-basics>`\r\n```\r\nor\r\n```\r\n:ref:`multidimensional array<arrays>`",
        "createdAt" : "2020-09-10T22:44:45Z",
        "updatedAt" : "2020-09-15T20:02:56Z",
        "lastEditedBy" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "tags" : [
        ]
      },
      {
        "id" : "ee44409e-5c79-40b5-a9f4-02312ff9b3ee",
        "parentId" : "7165d4c0-6858-42a9-a157-86cdcd79a03e",
        "authorId" : "1edd78f6-8b14-4cf5-8b30-e5101cb4541a",
        "body" : "I think this makes more sense on L34, when we reference n-dimensional arrays in NumPy. \r\n```\r\nassignments in NumPy are usually stored as :ref:`n-dimensional arrays <arrays>` \r\n```\r\n",
        "createdAt" : "2020-09-11T14:42:53Z",
        "updatedAt" : "2020-09-15T20:02:57Z",
        "lastEditedBy" : "1edd78f6-8b14-4cf5-8b30-e5101cb4541a",
        "tags" : [
        ]
      },
      {
        "id" : "fb52a8db-4d03-4497-a949-bb2b8e74d471",
        "parentId" : "7165d4c0-6858-42a9-a157-86cdcd79a03e",
        "authorId" : "1edd78f6-8b14-4cf5-8b30-e5101cb4541a",
        "body" : "Added the reference to `<arrays>` on L34 in commit: de298885a4725889512e8172534d134b630c4da6",
        "createdAt" : "2020-09-12T14:47:28Z",
        "updatedAt" : "2020-09-15T20:02:57Z",
        "lastEditedBy" : "1edd78f6-8b14-4cf5-8b30-e5101cb4541a",
        "tags" : [
        ]
      }
    ],
    "commit" : "56ee4455161ee3eb75f3842567255e52ccc589ef",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +25,29 @@\n   * - In MATLAB, the basic type, even for scalars, is a\n       multidimensional array. Array assignments in MATLAB are stored as\n       2D arrays of double precision floating point numbers, unless you\n       specify the number of dimensions and type.  Operations on the 2D"
  }
]