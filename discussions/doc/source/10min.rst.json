[
  {
    "id" : "6ca1c9d2-d507-49b2-a539-4f7ed970b4f4",
    "prId" : 17656,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17656#pullrequestreview-64849955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a63c2c3-f44d-438b-915f-c85d68e9b726",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "What happened here?  So much got deleted.",
        "createdAt" : "2017-09-24T19:15:53Z",
        "updatedAt" : "2017-09-24T22:26:53Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "a181d4e0-3f97-4877-9dee-878b47144086",
        "parentId" : "3a63c2c3-f44d-438b-915f-c85d68e9b726",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I took a bunch out rather than regenerate it. ``.as_blocks()`` was in that list",
        "createdAt" : "2017-09-25T10:11:57Z",
        "updatedAt" : "2017-09-25T10:11:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa2d9d6cc3010962a83eece4a66d5e7a03726f77",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +96,100 @@   df2.apply              df2.compound\n   df2.applymap           df2.consolidate\n   df2.D\n\nAs you can see, the columns ``A``, ``B``, ``C``, and ``D`` are automatically"
  },
  {
    "id" : "0411ff55-fe2c-4a38-8f3a-2beec04f41ba",
    "prId" : 23623,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23623#pullrequestreview-179570879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a6f0351-753d-42f1-ba7d-6e059a3dc7b2",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Reading this, should we have a `copy` keyword to be able to force a copy? (can be added later)",
        "createdAt" : "2018-11-27T10:07:51Z",
        "updatedAt" : "2018-11-29T12:19:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2f39466a-1d0e-4ca5-ba93-fac496cbee81",
        "parentId" : "8a6f0351-753d-42f1-ba7d-6e059a3dc7b2",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is a good idea. Don't care whether we do it here or later.\r\n\r\nI think we'll also want (type-specific?) keywords for controlling how the conversion is done (ndarray of Timestamps vs. datetime64[ns] for example). I'm not sure what the eventual signature should be.",
        "createdAt" : "2018-11-28T15:18:24Z",
        "updatedAt" : "2018-11-29T12:19:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "35361665-aa82-471c-80aa-36cefb2c0133",
        "parentId" : "8a6f0351-753d-42f1-ba7d-6e059a3dc7b2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yeah, if we decide to go for object array of Timestamps for datetimetz as default, it would be good to have the option to return datetime64\r\n\r\nRegarding copy, would it actually make sense to have `copy=True` the default? Then you have at least a consistent default (it is never a view on the data)",
        "createdAt" : "2018-11-28T23:15:41Z",
        "updatedAt" : "2018-11-29T12:19:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9ec2fc1c-0376-4501-864a-0d6b6d7347cf",
        "parentId" : "8a6f0351-753d-42f1-ba7d-6e059a3dc7b2",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yes, I think `copy=True` is a good default since it's the only one that can be ensured for all cases.",
        "createdAt" : "2018-11-28T23:41:24Z",
        "updatedAt" : "2018-11-29T12:19:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9eee65e64ae815b320f5a8bd3a8701e264f15f6",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +131,135 @@\nFor ``df``, our :class:`DataFrame` of all floating-point values,\n:meth:`DataFrame.to_numpy` is fast and doesn't require copying data.\n\n.. ipython:: python"
  },
  {
    "id" : "316f4b61-00a8-4925-afdf-3df0304c9a4f",
    "prId" : 23908,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23908#pullrequestreview-178097134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "809941a4-7181-48d9-b0a9-f8758f816663",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think we've been ending those with semicolon in other parts, right?",
        "createdAt" : "2018-11-25T20:28:32Z",
        "updatedAt" : "2018-11-25T20:28:32Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "21b525f2-4017-4757-81ff-724d5d5b3118",
        "parentId" : "809941a4-7181-48d9-b0a9-f8758f816663",
        "authorId" : "74e431be-b3bc-40dc-90fb-12bc297c2e6f",
        "body" : "It's basically mixed sometimes with sometimes without.\r\nI'd prefer to put `;` at the end to suppress the output, but you've asked to PR that in seperate PR's and fixing PEP-8 issues is to have no `;` at the end of a line.\r\n\r\nI'm waiting for #23847 in order to ignore `E703` on a file-based basis.",
        "createdAt" : "2018-11-25T21:04:45Z",
        "updatedAt" : "2018-11-25T21:04:45Z",
        "lastEditedBy" : "74e431be-b3bc-40dc-90fb-12bc297c2e6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ece28ac375e9da217b9501c4d82a0b9ea8eb9784",
    "line" : 207,
    "diffHunk" : "@@ -1,1 +724,728 @@   df.plot()\n   @savefig frame_plot_basic.png\n   plt.legend(loc='best')\n\nGetting Data In/Out"
  }
]