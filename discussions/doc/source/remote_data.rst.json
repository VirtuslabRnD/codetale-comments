[
  {
    "id" : "58e9d260-9f1a-4db3-ba58-ba6bd0d7d263",
    "prId" : 5602,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a15e8f74-081b-4767-a633-366f037b206a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "This fails here (on conversions you need to protect with a try/except) in general. you prob need to wrap all of the float conversions with a ',' replacement (or better yet, don't convert them individually), let them be object dtype. \nThen on columns that should be numeric (to avoid accidently changing other stuff), `df[column].replace(',','')`. Need to do this kind of check in a test as well.\n\n```\nipdb> l\n    523 \n    524 def _unpack(row, kind):\n    525     def _parse_row_values(val):\n    526         ret = val.text_content()\n    527         if 'neg_arrow' in val.xpath('.//@class'):\n--> 528             ret = float(ret)*(-1.0)\n    529         return ret\n    530 \n    531     els = row.xpath('.//%s' % kind)\n    532     return [_parse_row_values(val) for val in els]\n    533 \n\nipdb> p ret\n'2,240.10'\n\n```\n",
        "createdAt" : "2014-05-12T12:19:06Z",
        "updatedAt" : "2014-06-17T03:58:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1fbd8893-1af7-4afb-b981-3ba1285995d3",
        "parentId" : "a15e8f74-081b-4767-a633-366f037b206a",
        "authorId" : "4d349b4a-d7aa-46da-80d2-de7f4cd19b73",
        "body" : "ya, I had this issue in my code on the weekend.  I did the replace - I'll push the update and add a test tonight.\n",
        "createdAt" : "2014-05-13T00:28:22Z",
        "updatedAt" : "2014-06-17T03:58:00Z",
        "lastEditedBy" : "4d349b4a-d7aa-46da-80d2-de7f4cd19b73",
        "tags" : [
        ]
      },
      {
        "id" : "b334c60f-2b06-4ca7-b6d0-d177f9758303",
        "parentId" : "a15e8f74-081b-4767-a633-366f037b206a",
        "authorId" : "4d349b4a-d7aa-46da-80d2-de7f4cd19b73",
        "body" : "What do you suggest you do on ValueError here? Raise or return the string with an appended '-'?\n",
        "createdAt" : "2014-05-13T04:05:38Z",
        "updatedAt" : "2014-06-17T03:58:00Z",
        "lastEditedBy" : "4d349b4a-d7aa-46da-80d2-de7f4cd19b73",
        "tags" : [
        ]
      },
      {
        "id" : "9a9c1e83-3f43-4e77-8a51-b8bdebcfe403",
        "parentId" : "a15e8f74-081b-4767-a633-366f037b206a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "well, you can try to replace the commas, then convert; on failure I would make it `np.nan`. If some values in general are string-like and some not then you are forced to leave it as object. However  before u go down that road, see WHY its not converting; is it bogus data coming in or are misinterpreting the field (either case should make missing).\n",
        "createdAt" : "2014-05-13T10:14:04Z",
        "updatedAt" : "2014-06-17T03:58:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ba5ead1e3e713fec59458ab2165959e8886e70b",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +69,73 @@      from pandas.io.data import Options\n      aapl = Options('aapl', 'yahoo')\n      data = aapl.get_all_data()\n      data.head()\n"
  },
  {
    "id" : "9e6a1ef6-3376-4c72-9ab7-ff78e42c0b31",
    "prId" : 5602,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7b41507-0659-4398-9000-4b28a78e031e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this works but I think that you need an example of how to slice this, because of this unless the Symbol is included in the index, then you can't slice it\n\nThis works\n\n```\nIn [48]: data.set_index(['Symbol'],append=True).loc[(330,slice(None),'call'),:]\nOut[48]: \n                                               Last  Chg  Bid  Ask  Vol  Open Int   Root IsNonstandard Underlying  Underlying_Price          Quote_Time\nStrike Expiry     Type Symbol                                                                                                                          \n330    2016-01-15 call AAPL160115C00330000   258.17    0  NaN  NaN    4        43   AAPL         False       AAPL            585.54 2014-05-09 04:00:00\n                       AAPL7160115C00330000  270.00    0  NaN  NaN    5        21  AAPL7          True       AAPL            585.54 2014-05-09 04:00:00\n\n[2 rows x 11 columns]\n```\n\nbut simply slicing will not (though using `.xs` on a specific level will work as well)\n",
        "createdAt" : "2014-05-12T12:29:57Z",
        "updatedAt" : "2014-06-17T03:58:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4d179d7e-5860-4166-9d85-71f33f78fd79",
        "parentId" : "e7b41507-0659-4398-9000-4b28a78e031e",
        "authorId" : "4d349b4a-d7aa-46da-80d2-de7f4cd19b73",
        "body" : "That code doesn't work for me, I get:  'MultiIndex Slicing requires the index to be fully lexsorted tuple len (3), lexsort depth (0)'\n\nWhat about data.loc[(330,slice(None), 'call')]?  \n",
        "createdAt" : "2014-05-13T05:52:39Z",
        "updatedAt" : "2014-06-17T03:58:00Z",
        "lastEditedBy" : "4d349b4a-d7aa-46da-80d2-de7f4cd19b73",
        "tags" : [
        ]
      },
      {
        "id" : "a1b46f64-6beb-40f2-a19c-294a40a0fa24",
        "parentId" : "e7b41507-0659-4398-9000-4b28a78e031e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you need to do a `df.sortlevel()` on the created frame; always must be sorted to do any real indexing. Furthermore, I think the index should be `['Strike','Expiry','Type','Symbol']` as its completely unique and much more useful. Show a slicing example as well.\n",
        "createdAt" : "2014-05-13T10:10:11Z",
        "updatedAt" : "2014-06-17T03:58:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ba5ead1e3e713fec59458ab2165959e8886e70b",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +90,94 @@\n\n.. _remote_data.google:\n\nGoogle Finance"
  },
  {
    "id" : "599177e8-da2b-46f9-abe9-eeb9a1dd3a57",
    "prId" : 5602,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d6a8187-5c26-48b1-a704-8212a1de4591",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you use backticks ```` instead of `''`? Then it renders as 'code'\n",
        "createdAt" : "2014-06-17T15:32:18Z",
        "updatedAt" : "2014-06-17T15:32:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ba5ead1e3e713fec59458ab2165959e8886e70b",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +61,65 @@The Options class allows the download of options data from Yahoo! Finance.\n\nThe ''get_all_data'' method downloads and caches option data for all expiry months\nand provides a formatted ''DataFrame'' with a hierarchical index, so its easy to get\nto the specific option you want."
  },
  {
    "id" : "7eb02bf5-fa76-47f5-9ba9-cc17bb2147a0",
    "prId" : 8551,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42eb3d26-dc91-4874-a441-98aad28811f8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jorisvandenbossche how is this doc formatting? \n",
        "createdAt" : "2014-10-26T23:52:42Z",
        "updatedAt" : "2014-10-27T12:40:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c38fdf17-4f9b-477d-ac81-a6f28b7dd3fd",
        "parentId" : "42eb3d26-dc91-4874-a441-98aad28811f8",
        "authorId" : "9a1012dc-c7e7-40bb-990e-eca1b4833832",
        "body" : "I made a rendering, after some rst syntax fixes.  Posted the PNG below.\n",
        "createdAt" : "2014-10-27T02:23:28Z",
        "updatedAt" : "2014-10-27T12:40:11Z",
        "lastEditedBy" : "9a1012dc-c7e7-40bb-990e-eca1b4833832",
        "tags" : [
        ]
      },
      {
        "id" : "f9767906-142a-429f-83b6-f5272d3b6d4f",
        "parentId" : "42eb3d26-dc91-4874-a441-98aad28811f8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "this is fine\n",
        "createdAt" : "2014-10-27T08:24:29Z",
        "updatedAt" : "2014-10-27T12:40:11Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a7ff40e60fac30cbb7f5444c9b7895791ac2bce",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +294,298 @@\n1. Standard (2/3 digit ISO) - returns data, will warn and error properly.\n2. Non-standard (WB Exceptions) - returns data, but will falsely warn.\n3. Blank - silently missing from the response.\n4. Bad - causes the entire response from WB to fail, always exception inducing."
  }
]