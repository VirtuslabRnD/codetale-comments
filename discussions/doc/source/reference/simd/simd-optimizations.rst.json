[
  {
    "id" : "7bc1ff93-c1e3-4db2-9fa9-97b5260060dc",
    "prId" : 15551,
    "prUrl" : "https://github.com/numpy/numpy/pull/15551#pullrequestreview-441989987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3178a0f4-12d5-455c-ad66-0980668bb7f0",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "\"abstract versions of\" or \"abstractions of\"?",
        "createdAt" : "2020-07-02T20:11:42Z",
        "updatedAt" : "2020-07-06T17:27:09Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b36dfd5eb22b09cf08e7cb1767bae370e21264",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +4,8 @@\nNumPy provides a set of macros that define `Universal Intrinsics`_ to\nabstract out typical platform-specific intrinsics so SIMD code needs to be\nwritten only once. There are three layers:\n"
  },
  {
    "id" : "8b856beb-f158-4222-82a6-581f86f3e3e1",
    "prId" : 15551,
    "prUrl" : "https://github.com/numpy/numpy/pull/15551#pullrequestreview-441989987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c8a7267-8232-4441-88f1-c80fe584fe3c",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\nIf ``build_clib`` or ``build_ext`` are not specified by the user, the arguments of\r\n```",
        "createdAt" : "2020-07-02T20:14:39Z",
        "updatedAt" : "2020-07-06T17:27:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b36dfd5eb22b09cf08e7cb1767bae370e21264",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@The command arguments are available in ``build``, ``build_clib``, and\n``build_ext``.\nif ``build_clib`` or ``build_ext`` are not specified by the user, the arguments of\n``build`` will be used instead, which also holds the default values.\n"
  },
  {
    "id" : "ff0fdb39-04c9-4976-aa26-e326949824bb",
    "prId" : 15551,
    "prUrl" : "https://github.com/numpy/numpy/pull/15551#pullrequestreview-441989987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c84a8cd0-7ec7-405b-8321-6aa24e7608ef",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\nThe following tables show the current supported optimizations sorted from lowest to highest.\r\n```",
        "createdAt" : "2020-07-02T20:19:11Z",
        "updatedAt" : "2020-07-06T17:27:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b36dfd5eb22b09cf08e7cb1767bae370e21264",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +42,46 @@\n\nThe following tables show the current supported optimizations sorted from the lowest to the highest interest.\n\n.. include:: simd-optimizations-tables.inc"
  },
  {
    "id" : "5cdbc4fd-f1bf-485c-9d6f-8661b66bca49",
    "prId" : 15551,
    "prUrl" : "https://github.com/numpy/numpy/pull/15551#pullrequestreview-441989987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c44d8271-8eb0-42dc-9f1e-1d90fdd17972",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n       For Architecture                       Returns\r\n```",
        "createdAt" : "2020-07-02T20:20:30Z",
        "updatedAt" : "2020-07-06T17:27:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b36dfd5eb22b09cf08e7cb1767bae370e21264",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +60,64 @@\n      ======================================  =======================================\n       For Arch                               Returns\n      ======================================  =======================================\n       ``x86``                                ``SSE`` ``SSE2``"
  },
  {
    "id" : "a66cbd95-285b-41f9-9152-1146a4af9532",
    "prId" : 15551,
    "prUrl" : "https://github.com/numpy/numpy/pull/15551#pullrequestreview-446863185",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8610c82a-4b74-4edb-b7f9-35a2fbe3e256",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Would be good to have an example of how that looks like, it is in the notes but only because it explains that `+` doesn't really matter...",
        "createdAt" : "2020-07-02T20:23:19Z",
        "updatedAt" : "2020-07-06T17:27:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "d939bc75-bd07-4921-afc7-9feb129dfdd1",
        "parentId" : "8610c82a-4b74-4edb-b7f9-35a2fbe3e256",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "+1, the only example is explained within the context of the default value of `--cpu-dispatch`:\r\n>  \"max -xop -fma4\" which enables all CPU features, except for AMD legacy features.\r\n",
        "createdAt" : "2020-07-12T09:49:23Z",
        "updatedAt" : "2020-07-12T09:49:23Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b36dfd5eb22b09cf08e7cb1767bae370e21264",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +73,77 @@- ``MAX``: Enables all supported CPU features by the Compiler and platform.\n\n- ``Operators-/+``: remove or add features, useful with options ``MAX``, ``MIN`` and ``NATIVE``.\n\nNOTES"
  },
  {
    "id" : "c4ce6438-fc4f-45e7-8dcc-571e4f77cfb1",
    "prId" : 15551,
    "prUrl" : "https://github.com/numpy/numpy/pull/15551#pullrequestreview-441989987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f20bedc-bc04-4173-8aab-f10de85061b0",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n~~~~~\r\n```",
        "createdAt" : "2020-07-02T20:23:38Z",
        "updatedAt" : "2020-07-06T17:27:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b36dfd5eb22b09cf08e7cb1767bae370e21264",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +76,80 @@\nNOTES\n~~~~~~~~~~~~~\n- CPU features and other options are case-insensitive.\n"
  },
  {
    "id" : "3abedd2c-d8a6-49b5-98f2-1895d029b264",
    "prId" : 15551,
    "prUrl" : "https://github.com/numpy/numpy/pull/15551#pullrequestreview-441989987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e04ef774-80c7-4a6d-bfbd-42dd3971f360",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n  e.g. ``--cpu-baseline=\"sse42\"`` is equivalent to\r\n```",
        "createdAt" : "2020-07-02T21:32:21Z",
        "updatedAt" : "2020-07-06T17:27:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b36dfd5eb22b09cf08e7cb1767bae370e21264",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +96,100 @@\n- The ``--cpu-baseline`` argument force-enables implied features,\n  e.g. ``--cpu-baseline``\\ =\"sse42\" is equivalent to\n  ``--cpu-baseline``\\ =\"sse sse2 sse3 ssse3 sse41 popcnt sse42\"\n"
  },
  {
    "id" : "2f05c9f5-ea30-437f-9fd6-7507406056b3",
    "prId" : 15551,
    "prUrl" : "https://github.com/numpy/numpy/pull/15551#pullrequestreview-441989987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57234edd-dedc-4f3e-afbe-7166da068922",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n  ``--cpu-baseline=\"sse sse2 sse3 ssse3 sse41 popcnt sse42\"``\r\n```",
        "createdAt" : "2020-07-02T21:32:39Z",
        "updatedAt" : "2020-07-06T17:27:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b36dfd5eb22b09cf08e7cb1767bae370e21264",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +97,101 @@- The ``--cpu-baseline`` argument force-enables implied features,\n  e.g. ``--cpu-baseline``\\ =\"sse42\" is equivalent to\n  ``--cpu-baseline``\\ =\"sse sse2 sse3 ssse3 sse41 popcnt sse42\"\n\n- The value of ``--cpu-baseline`` will be treated as \"native\" if"
  },
  {
    "id" : "fdf04387-5ebc-4628-961a-6c66ad4c361e",
    "prId" : 15551,
    "prUrl" : "https://github.com/numpy/numpy/pull/15551#pullrequestreview-446863465",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3548477d-6acf-4891-9c89-c957cba1b2d4",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "It would be nice to format the multi-line comments more typical to NumPy style.",
        "createdAt" : "2020-07-02T22:18:59Z",
        "updatedAt" : "2020-07-06T17:27:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "4e5e8826-4106-4fa8-81b8-f0bc21cf8f55",
        "parentId" : "3548477d-6acf-4891-9c89-c957cba1b2d4",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "what about mixing the code with RST(comments) instead? can be applied?",
        "createdAt" : "2020-07-12T09:53:44Z",
        "updatedAt" : "2020-07-12T09:54:05Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b36dfd5eb22b09cf08e7cb1767bae370e21264",
    "line" : 411,
    "diffHunk" : "@@ -1,1 +409,413 @@      //\n      // By default the callback calls are sorted depending on the highest interest\n      // unless the policy \"$keep_sort\" was in place within the configuration statements\n      // see \"Dive into the CPU dispatcher\" for more clarification.\n      #define NPY__CPU_DISPATCH_CALL(CHK, CB, ...) \\"
  },
  {
    "id" : "eedeae1c-8d7b-4de7-931c-a6f798a9e059",
    "prId" : 15551,
    "prUrl" : "https://github.com/numpy/numpy/pull/15551#pullrequestreview-441989987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2a1637a-c500-4016-b85c-6c2915fef0ac",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n  the infrastructure will generate a temporary config header called\r\n```",
        "createdAt" : "2020-07-02T22:24:46Z",
        "updatedAt" : "2020-07-06T17:27:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b36dfd5eb22b09cf08e7cb1767bae370e21264",
    "line" : 374,
    "diffHunk" : "@@ -1,1 +372,376 @@\n  Now assume you attached **hello.dispatch.c** to the source tree, then\n  the infrastructure should generate a temporary config header called\n  **hello.dispatch.h** that can be reached by any source in the source\n  tree, and it should contain the following code :"
  },
  {
    "id" : "54bf2e1c-0c33-4706-934c-78296cacb5cf",
    "prId" : 15551,
    "prUrl" : "https://github.com/numpy/numpy/pull/15551#pullrequestreview-441989987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fac4559b-c8a7-4f8f-9246-ba08a151f31d",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n      // 'NPY__CPU_DISPATCH_CALL' is an abstract macro which is used for dispatching\r\n      // the required optimizations specified within the configuration statements.\r\n```",
        "createdAt" : "2020-07-02T22:26:28Z",
        "updatedAt" : "2020-07-06T17:27:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b36dfd5eb22b09cf08e7cb1767bae370e21264",
    "line" : 395,
    "diffHunk" : "@@ -1,1 +393,397 @@        NPY__CPU_DISPATCH_EXPAND_(CB(__VA_ARGS__))\n      // 'NPY__CPU_DISPATCH_CALL' is an abstract macro is used for dispatching\n      // the required optimizations that specified within the configuration statements.\n      //\n      // @param CHK, Expected a macro that can be used to detect CPU features"
  },
  {
    "id" : "d4b4ec97-4bea-4fc9-9909-14996b062b4b",
    "prId" : 15551,
    "prUrl" : "https://github.com/numpy/numpy/pull/15551#pullrequestreview-441989987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8002dd97-c6ca-456c-8768-32a449a8c51f",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n      // enabled only if 'baseline' is specified in the configration statments\r\n```",
        "createdAt" : "2020-07-02T22:27:14Z",
        "updatedAt" : "2020-07-06T17:27:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b36dfd5eb22b09cf08e7cb1767bae370e21264",
    "line" : 391,
    "diffHunk" : "@@ -1,1 +389,393 @@      #undef NPY__CPU_DISPATCH_CALL\n      // nothing strange here, just a normal preprocessor callback\n      // enabled only if 'baseline' spesfied withiin the configration statments\n      #define NPY__CPU_DISPATCH_BASELINE_CALL(CB, ...) \\\n        NPY__CPU_DISPATCH_EXPAND_(CB(__VA_ARGS__))"
  },
  {
    "id" : "3c80b1cb-b86f-4afa-b022-593a4bbf59ff",
    "prId" : 15551,
    "prUrl" : "https://github.com/numpy/numpy/pull/15551#pullrequestreview-441989987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3364919-2ae8-417f-93aa-fb9c7c25322a",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n      // Macro 'CURRENT_TARGET' adding the current target as suffix to the exported symbols,\r\n```",
        "createdAt" : "2020-07-06T16:47:50Z",
        "updatedAt" : "2020-07-06T17:27:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b36dfd5eb22b09cf08e7cb1767bae370e21264",
    "line" : 363,
    "diffHunk" : "@@ -1,1 +361,365 @@        #define CURRENT_TARGET(X) NPY_CAT(NPY_CAT(X, _), NPY__CPU_TARGET_CURRENT)\n      #endif\n      // Macro 'CURRENT_TARGET' adding the current target as suffux to the exported symbols,\n      // to avoid linking duplications, NumPy already has a macro called\n      // 'NPY_CPU_DISPATCH_CURFX' similar to it, located at"
  },
  {
    "id" : "a12940ea-3181-4032-a89b-824bebbca0ad",
    "prId" : 15551,
    "prUrl" : "https://github.com/numpy/numpy/pull/15551#pullrequestreview-446864690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95ba70ad-6580-4548-8860-e2147db69d67",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "To be clear, this is the clean usage to include the dispatch header in the function scope?\r\n\r\nI guess the comment means to point to it, but I find it a bit hard to understand.",
        "createdAt" : "2020-07-06T16:50:44Z",
        "updatedAt" : "2020-07-06T17:27:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "61342cd8-4ac9-455e-8f10-4ee6435b24c2",
        "parentId" : "95ba70ad-6580-4548-8860-e2147db69d67",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "Yes, it's safe and clean to add it inside any level of scope, e.g. functions.\r\nThis header only contains two abstract C macros that mainly used for determining the required optimizations from outside the dispatch-able sources.\r\n\r\nsee also [npy_cpu_dispatch.h](https://github.com/numpy/numpy/blob/master/numpy/core/src/common/npy_cpu_dispatch.h) and\r\n\r\nhttps://github.com/numpy/numpy/blob/72b05c04442b3c2dbde5f30795a07c2e60908830/numpy/core/code_generators/generate_umath.py#L1052-L1061\r\n\r\n",
        "createdAt" : "2020-07-12T10:11:54Z",
        "updatedAt" : "2020-07-12T10:11:54Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b36dfd5eb22b09cf08e7cb1767bae370e21264",
    "line" : 469,
    "diffHunk" : "@@ -1,1 +467,471 @@          // it highely recomaned to include the config header before exectuing\n        // the dispatching macros in case if there's another header in the scope.\n          #include \"hello.dispatch.h\"\n          DISPATCH_CALL_ALL(simd_whoami, (\"all\"))\n          DISPATCH_CALL_HIGH(simd_whoami, (\"the highest interest\"))"
  },
  {
    "id" : "2403e98d-34f6-4b56-ac9e-25df30b53330",
    "prId" : 15551,
    "prUrl" : "https://github.com/numpy/numpy/pull/15551#pullrequestreview-446865161",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a81ba87-f197-4de3-a520-105e4f583898",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The `simd_whoami` function is just a dummy definition as an example?",
        "createdAt" : "2020-07-06T16:51:54Z",
        "updatedAt" : "2020-07-06T17:27:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "834754e6-13a1-496c-8db5-911ecf0e5b29",
        "parentId" : "9a81ba87-f197-4de3-a520-105e4f583898",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "yes. what I was trying to do is explaining what happening under the hood, but now I feel like I need to move these examples into an advanced topic and adding instead examples for how to use the CPU dispatcher via high-level macros in [npy_cpu_dispatch.h](https://github.com/numpy/numpy/blob/master/numpy/core/src/common/npy_cpu_dispatch.h) without giving too many details.",
        "createdAt" : "2020-07-12T10:19:23Z",
        "updatedAt" : "2020-07-12T10:20:36Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b36dfd5eb22b09cf08e7cb1767bae370e21264",
    "line" : 460,
    "diffHunk" : "@@ -1,1 +458,462 @@      void simd_whoami(const char *extra_info);\n      void simd_whoami_AVX512F(const char *extra_info);\n      void simd_whoami_SSE41(const char *extra_info);\n\n      void trigger_me(void)"
  },
  {
    "id" : "ea361b29-db38-4176-9e64-d32bcd5456db",
    "prId" : 15551,
    "prUrl" : "https://github.com/numpy/numpy/pull/15551#pullrequestreview-441989987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3d4761b-dcf0-43c3-9792-e2d24f1b5952",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n  tree, and will contain the following code:\r\n```",
        "createdAt" : "2020-07-06T16:52:52Z",
        "updatedAt" : "2020-07-06T17:27:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b36dfd5eb22b09cf08e7cb1767bae370e21264",
    "line" : 376,
    "diffHunk" : "@@ -1,1 +374,378 @@  the infrastructure should generate a temporary config header called\n  **hello.dispatch.h** that can be reached by any source in the source\n  tree, and it should contain the following code :\n\n  .. code:: c"
  }
]