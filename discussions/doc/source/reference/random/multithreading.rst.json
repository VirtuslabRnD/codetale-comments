[
  {
    "id" : "052e6dc7-6462-4b05-8aa9-b86d43df6723",
    "prId" : 15367,
    "prUrl" : "https://github.com/numpy/numpy/pull/15367#pullrequestreview-347516883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24a5ce58-5aa9-46d3-bb7b-59423435b995",
        "parentId" : null,
        "authorId" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "body" : "I'm not sure this addition is necessary - the code defining `MultithreadedRNG` is pretty clear and a user should be able to grok how the number of threads is determined. Since the example doesn't highlight any of the `np.random` machinery itself I'd lean towards excluding this code-block.",
        "createdAt" : "2020-01-22T22:21:15Z",
        "updatedAt" : "2020-01-24T06:55:46Z",
        "lastEditedBy" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "tags" : [
        ]
      },
      {
        "id" : "3889a117-dbc8-42a3-b65a-c42cf0876e6a",
        "parentId" : "24a5ce58-5aa9-46d3-bb7b-59423435b995",
        "authorId" : "82de5832-492d-4fea-8570-cdc36128aabe",
        "body" : "I would like to keep a reference in there. When I started working with multithreading and random generators, I stepped in the \"common\" trap of not thinking about what would happen to the random states. I think it is a common enough problem that (new) users are not aware of this, see eg. the discussion in #9650. What would you the others think @bashtage?",
        "createdAt" : "2020-01-23T07:17:31Z",
        "updatedAt" : "2020-01-24T06:55:46Z",
        "lastEditedBy" : "82de5832-492d-4fea-8570-cdc36128aabe",
        "tags" : [
        ]
      },
      {
        "id" : "89f13c68-67d6-4f4b-9cfc-f2188a7f0586",
        "parentId" : "24a5ce58-5aa9-46d3-bb7b-59423435b995",
        "authorId" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "body" : "Oops, I must have put the wrong comment in the wrong bubble - I agree this can stay, though what I meant to suggest was to replace \"the architecture\" with \"multiprocessing.cpu_count\" - looks good!",
        "createdAt" : "2020-01-23T18:32:18Z",
        "updatedAt" : "2020-01-24T06:55:46Z",
        "lastEditedBy" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6c9b22be0c0d47149e4c42b35d391ef194e93c1",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +107,111 @@Note that if `threads` is not set by the user, it will be determined by\n`multiprocessing.cpu_count()`.\n\n.. code-block:: ipython\n"
  },
  {
    "id" : "b14e5736-6e3c-4968-b4f8-7159b9d06bb6",
    "prId" : 15367,
    "prUrl" : "https://github.com/numpy/numpy/pull/15367#pullrequestreview-347728322",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "018793ae-f0dc-48ff-814f-ec8eecb4f918",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "@rkern I was wondering about `seed=...` best practices for documentation (not necessarily here), do you think this is fine, or should we write such documentation in the form of `seed=0x...`. I have probably asked this before, but...",
        "createdAt" : "2020-01-24T00:44:09Z",
        "updatedAt" : "2020-01-24T06:55:46Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "07275259-f485-4189-b2b1-9d0c7f6222da",
        "parentId" : "018793ae-f0dc-48ff-814f-ec8eecb4f918",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "Good question. Avoiding `seed=0` is important, IMO. Thanks, @fzeiser! Grabbing a random uint64 to use for a seed in the examples might help encourage safer practices. That is, the example writer executes something like the following in their Python shell\r\n\r\n```\r\n>>> hex(np.random.default_rng().integers(1<<64, dtype=np.uint64))\r\n'0xdf05c6f9894cea6b'\r\n```\r\n\r\nThen use that value in their example:\r\n\r\n```\r\n\"\"\"\r\nExamples\r\n--------\r\nIn [2]: mrng = MultithreadedRNG(10000000, seed=0xdf05c6f9894cea6b)\r\n\"\"\"\r\n```\r\n\r\nBut I'm not going to complain too much about using `12345`. That does help communicate \"this is a dummy value\", so I get why example writers use it. I'm not sure that seeing `seed=12345` in an example influences too many people to use `seed=12345` in their own code.",
        "createdAt" : "2020-01-24T01:42:06Z",
        "updatedAt" : "2020-01-24T06:55:46Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      },
      {
        "id" : "e98b780f-274d-408b-b120-d4c5afb302d4",
        "parentId" : "018793ae-f0dc-48ff-814f-ec8eecb4f918",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Well, I am more thinking about pushing best practices without actually forcing too much on users. I.e. we could make examples generally have a comment:\r\n`# seed found using: hex(np.random.default_rng().integers(1<<64, dtype=np.uint64))`\r\n(or anything prettier/shorter if we can think of it)",
        "createdAt" : "2020-01-24T01:48:39Z",
        "updatedAt" : "2020-01-24T06:55:46Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "ec3c0130-9f81-4c20-8ad1-743b16b69e73",
        "parentId" : "018793ae-f0dc-48ff-814f-ec8eecb4f918",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "If you think it is good practice, I would be happy with adding:\r\n```\r\ndef create_unique_seed():\r\n    return np.random.default_rng().integers(1<<64, dtype=np.uint64)\r\n    # or maybe: return np.random.SeedSequence().entropy \r\n```\r\njust so that such a comment can be short.",
        "createdAt" : "2020-01-24T02:00:22Z",
        "updatedAt" : "2020-01-24T06:55:46Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "095183f2-0217-4575-b8ee-f8c5b444c7c3",
        "parentId" : "018793ae-f0dc-48ff-814f-ec8eecb4f918",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "I think we talked about having such a function back in the old mega-thread but held off on it to get some practice with the new system and `SeedSequence` in particular. Let's think about it for 1.19.",
        "createdAt" : "2020-01-24T02:46:08Z",
        "updatedAt" : "2020-01-24T06:55:46Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6c9b22be0c0d47149e4c42b35d391ef194e93c1",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +65,69 @@.. code-block:: ipython\n\n    In [2]: mrng = MultithreadedRNG(10000000, seed=12345)\n       ...: print(mrng.values[-1])\n    Out[2]: 0.0"
  }
]