[
  {
    "id" : "43b81df3-6c0c-4b11-b7a8-0f2e07738d3f",
    "prId" : 13849,
    "prUrl" : "https://github.com/numpy/numpy/pull/13849#pullrequestreview-255293122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "452d603f-f79d-4f1a-af66-a110cae24d1d",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "nice explanation",
        "createdAt" : "2019-06-27T15:08:16Z",
        "updatedAt" : "2019-06-28T01:07:06Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "49450483628d96d0bdf9caf18e627f05ab9a3431",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +106,110 @@.. _`suffers if there are too many 0s`: http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html\n.. _`avalanche properties`: https://en.wikipedia.org/wiki/Avalanche_effect\n.. _`not unique to numpy`: https://www.iro.umontreal.ca/~lecuyer/myftp/papers/parallel-rng-imacs.pdf\n\n"
  },
  {
    "id" : "5b8a6366-551c-4a40-aff4-fe21b93e92fb",
    "prId" : 13849,
    "prUrl" : "https://github.com/numpy/numpy/pull/13849#pullrequestreview-255504445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf12ae86-b753-48f8-a000-3b4f552e32bf",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Ahh, here is the guarantee.   Stream of comments...",
        "createdAt" : "2019-06-27T22:07:02Z",
        "updatedAt" : "2019-06-28T01:07:06Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "49450483628d96d0bdf9caf18e627f05ab9a3431",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +85,89 @@.. [1] The algorithm is carefully designed to eliminate a number of possible\n       ways to collide. For example, if one only does one level of spawning, it\n       is guaranteed that all states will be unique. But it's easier to\n       estimate the naive upper bound on a napkin and take comfort knowing\n       that the probability is actually lower."
  },
  {
    "id" : "4322e71c-6bcf-4443-afa0-38ab7cee3981",
    "prId" : 13849,
    "prUrl" : "https://github.com/numpy/numpy/pull/13849#pullrequestreview-255504867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7ed28d7-3900-460c-9adf-3386dc33b47e",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Same \"ahh\" here. Should do a review. ",
        "createdAt" : "2019-06-27T22:08:19Z",
        "updatedAt" : "2019-06-28T01:07:06Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "49450483628d96d0bdf9caf18e627f05ab9a3431",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +89,93 @@       that the probability is actually lower.\n\n.. [2] In this calculation, we can ignore the amount of numbers drawn from each\n       stream. Each of the PRNGs we provide has some extra protection built in\n       that avoids overlaps if the `~SeedSequence` pools differ in the"
  },
  {
    "id" : "3cf7ca0d-c68f-4759-85c7-73b45dd4df0e",
    "prId" : 18906,
    "prUrl" : "https://github.com/numpy/numpy/pull/18906#pullrequestreview-651743296",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd657f40-3885-478b-a2dc-00666dc9f41d",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I find two things unclear here.\r\n\r\n- AFAICT, the single draw is the corresponding \"Bits\". Maybe relabel \"Bits in Draw'.\r\n- How is the jump size of the PCG family almost the cycle size without causing problems. ",
        "createdAt" : "2021-05-04T22:17:33Z",
        "updatedAt" : "2021-05-05T14:27:37Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "54ff9eac-d3a8-4567-81f3-28ea0778d5d7",
        "parentId" : "fd657f40-3885-478b-a2dc-00666dc9f41d",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "The point is to not have overlapping sequences of draws (and avoid the bad spots induced by the LCG, like a `2**N` would do), not necessarily to avoid jumping over your nominal \"0\" point on the cycle as you jump. As long as you are jumping _over_ and not _into_, you're fine. Using the Golden Ratio for that purpose is a [well-attested approach](http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/) for spreading yourself out over cyclical structures.",
        "createdAt" : "2021-05-04T22:27:43Z",
        "updatedAt" : "2021-05-05T14:27:37Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      },
      {
        "id" : "3a59533f-9e1e-4217-80ed-05aa5929144e",
        "parentId" : "fd657f40-3885-478b-a2dc-00666dc9f41d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Thanks for the link.",
        "createdAt" : "2021-05-04T23:16:16Z",
        "updatedAt" : "2021-05-05T14:27:37Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d97c634a04e539de2b66ccd0fbd526fea310571a",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +162,166 @@| Philox          | :math:`2^{256}`         | :math:`2^{128}`         | 64                      |\n+-----------------+-------------------------+-------------------------+-------------------------+\n\n.. [3] The jump size is :math:`(\\phi-1)*2^{128}` where :math:`\\phi` is the\n       golden ratio. As the jumps wrap around the period, the actual distances"
  }
]