[
  {
    "id" : "7eba63f8-5c25-4b3c-ae1c-203a31c6ba3c",
    "prId" : 14604,
    "prUrl" : "https://github.com/numpy/numpy/pull/14604#pullrequestreview-312668282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3216fccd-35cc-40f3-9cee-4053792dda1f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This is confusing. What does it mean?",
        "createdAt" : "2019-11-05T23:19:45Z",
        "updatedAt" : "2019-11-14T22:32:45Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "9b3845c9-b9c0-4524-9006-18a72d4196cd",
        "parentId" : "3216fccd-35cc-40f3-9cee-4053792dda1f",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "missing fragment. It should read \"Typed versions of many of the methods and functions in `Generator` and `BitGenerator` can be accessed ...\r\nFixing",
        "createdAt" : "2019-11-06T18:59:42Z",
        "updatedAt" : "2019-11-14T22:32:45Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "e66e813689dcebb08e224ce2976604a1512fbe12",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +4,8 @@.. currentmodule:: numpy.random\n\nTyped versions of many of the `Generator` and `BitGenerator` can be accessed\ndirectly from Cython: the complete list is given below.\n"
  },
  {
    "id" : "e90b404c-5c58-42e3-bf1f-2582b7fdb69e",
    "prId" : 14604,
    "prUrl" : "https://github.com/numpy/numpy/pull/14604#pullrequestreview-312669125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58b26b3e-f7bf-445a-a00c-ffe2bc5025ac",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe \"is available\".",
        "createdAt" : "2019-11-05T23:21:13Z",
        "updatedAt" : "2019-11-14T22:32:45Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "445714ca-575e-477a-a807-b3480f2ec917",
        "parentId" : "58b26b3e-f7bf-445a-a00c-ffe2bc5025ac",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "fixed, and again below",
        "createdAt" : "2019-11-06T19:01:06Z",
        "updatedAt" : "2019-11-14T22:32:45Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "e66e813689dcebb08e224ce2976604a1512fbe12",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +7,11 @@directly from Cython: the complete list is given below.\n\nThe ``_bit_generator`` module is usable via::\n\n    cimport numpy.random._bit_generator"
  },
  {
    "id" : "ae6059ea-492f-4253-b933-7d3e6d58f66c",
    "prId" : 15007,
    "prUrl" : "https://github.com/numpy/numpy/pull/15007#pullrequestreview-326263594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3241fe23-d6c7-413e-b3ef-34b178f8fb30",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "I still don't know if `mvhg` is a sensible name, there's no docs other than the function signature and the name is very non-descriptive. Adding a few lines of docs can be addressed after the 1.18.x split, that would be nice (now it's \"read the source code\" I think). \r\n\r\nFor 1.18.x though, can we have a decision on the name? The legacy code has `random_hypergeometric`, so that's taken. The new code could use `hypergeom` or `multi_hypergeom` or something similar perhaps.",
        "createdAt" : "2019-12-03T04:06:04Z",
        "updatedAt" : "2019-12-03T05:43:26Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "24c87d57-08d4-4b50-97bb-654e60390919",
        "parentId" : "3241fe23-d6c7-413e-b3ef-34b178f8fb30",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "As far as I can see now, ` random_mvhg_count` and ` random_mvhg_marginals` are the only two poor naming choices that are left, everything else looks clear to me.",
        "createdAt" : "2019-12-03T04:06:56Z",
        "updatedAt" : "2019-12-03T05:43:26Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "fe46e20c-1c9a-4ed1-b1dc-324d8c6326cd",
        "parentId" : "3241fe23-d6c7-413e-b3ef-34b178f8fb30",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "@WarrenWeckesser any ideas on nicer names?",
        "createdAt" : "2019-12-03T05:29:04Z",
        "updatedAt" : "2019-12-03T05:43:26Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "3a397df6-b733-4056-afdd-ddc8bbcb3d25",
        "parentId" : "3241fe23-d6c7-413e-b3ef-34b178f8fb30",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "I agree that the names `random_mvhg_count` and `random_mvhg_marginals` are not great for a public-facing API.  The verbose, completely explicit name for the `marginals` version would be\r\n\r\n    random_multivariate_hypergeometric_marginals\r\n\r\nbut I don't think anyone wants a name that long.  Is\r\n\r\n    random_multivar_hypergeom_marginals\r\n\r\nstill too long?",
        "createdAt" : "2019-12-03T13:36:59Z",
        "updatedAt" : "2019-12-03T13:36:59Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      },
      {
        "id" : "1b6f895c-9329-4fe6-a772-c477aab33b15",
        "parentId" : "3241fe23-d6c7-413e-b3ef-34b178f8fb30",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "@rgommers wrote:\r\n> I still don't know if mvhg is a sensible name, there's no docs other than the function signature\r\n\r\nThe C functions `random_hypergeometric`,  `random_mvhg_count` and `random_mvhg_marginals` have documentation in the comments of the C code.  These comments explain the arguments, including assumptions about the input values (e.g. input values are expected to be nonnegative) that are not checked in the C code.\r\n\r\nIs the plan to eventually expand the documentation in this file (doc/source/reference/random/c-api.rst) to include such information?",
        "createdAt" : "2019-12-03T15:00:45Z",
        "updatedAt" : "2019-12-03T15:00:45Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      },
      {
        "id" : "d32c6e15-7aef-461a-be18-b335315ec566",
        "parentId" : "3241fe23-d6c7-413e-b3ef-34b178f8fb30",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "yes",
        "createdAt" : "2019-12-03T16:13:16Z",
        "updatedAt" : "2019-12-03T16:13:17Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2f2700469dbda3c791fb6a3a1dad1f95c4f7a8a",
    "line" : 204,
    "diffHunk" : "@@ -1,1 +181,185 @@.. c:function:: void random_multinomial(bitgen_t *bitgen_state, npy_int64 n, npy_int64 *mnix, double *pix, npy_intp d, binomial_t *binomial)\n\n.. c:function:: int random_mvhg_count(bitgen_t *bitgen_state, npy_int64 total, size_t num_colors, npy_int64 *colors, npy_int64 nsample, size_t num_variates, npy_int64 *variates)\n\n.. c:function:: void random_mvhg_marginals(bitgen_t *bitgen_state, npy_int64 total, size_t num_colors, npy_int64 *colors, npy_int64 nsample, size_t num_variates, npy_int64 *variates)"
  }
]