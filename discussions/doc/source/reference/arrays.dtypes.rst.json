[
  {
    "id" : "37f3fdef-52b0-49c1-b7bb-2d5675e9b47f",
    "prId" : 4067,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46b33e46-3746-45e0-95e0-1c67889077b7",
        "parentId" : null,
        "authorId" : "cddd388f-5f86-4c39-93f0-ab8aef2887fc",
        "body" : "I was not sure if 'O' was left out of this table on purpose because it belongs to the one-character 'updated Numeric typecodes' documented in the previous paragraph.  But that section does not have a table, just a short, incomplete list of examples, so 'O' would not be mentioned at all, otherwise.\n",
        "createdAt" : "2014-03-15T06:26:33Z",
        "updatedAt" : "2014-03-15T06:26:33Z",
        "lastEditedBy" : "cddd388f-5f86-4c39-93f0-ab8aef2887fc",
        "tags" : [
        ]
      },
      {
        "id" : "657a3e37-9827-4bd6-a5a1-891af8b71d19",
        "parentId" : "46b33e46-3746-45e0-95e0-1c67889077b7",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Fooling around, it looks like 'O' works but the size is ignored. For 'i' and such the size is rounded down to the nearest valid. Some extra explanation might be helpful to deal with that oddity.\n",
        "createdAt" : "2014-03-16T00:10:09Z",
        "updatedAt" : "2014-03-16T00:10:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "54e4caba-630a-4fa1-a6ae-f48360ff9bfe",
        "parentId" : "46b33e46-3746-45e0-95e0-1c67889077b7",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "And I see it is already there.\n",
        "createdAt" : "2014-03-16T00:12:57Z",
        "updatedAt" : "2014-03-16T00:12:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "68179d562294ee6c75ebe6dbbb5c57f0acb4fcaa",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +232,236 @@   ``'f'``            floating-point\n   ``'c'``            complex-floating point\n   ``'O'``            (Python) objects\n   ``'S'``, ``'a'``   (byte-)string\n   ``'U'``            Unicode"
  },
  {
    "id" : "a9fb7bf8-093c-420d-ac5b-8260aad3732a",
    "prId" : 8942,
    "prUrl" : "https://github.com/numpy/numpy/pull/8942#pullrequestreview-32854516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c91be73-1672-49fb-98c7-1a3c90e2ddb3",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "If we are talking about array types, the unicode strings are null terminated  UTF-32.",
        "createdAt" : "2017-04-14T16:12:37Z",
        "updatedAt" : "2017-04-22T10:16:06Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "0281fc72-6178-40a2-8cf7-b73576dd0f4e",
        "parentId" : "9c91be73-1672-49fb-98c7-1a3c90e2ddb3",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "A string kind of implies that it is terminated in some way, bytes does not.\r\nWe could also clarify this for strings better but it dilutes how bad the bytes type is a bit.",
        "createdAt" : "2017-04-14T16:20:44Z",
        "updatedAt" : "2017-04-22T10:16:06Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "0107956102d914a68f157d80614f207f78dffb96",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +186,190 @@    ================  ===============\n\n    Note that ``str`` refers to either null terminated bytes or unicode strings\n    depending on the Python version. In code targetting both Python 2 and 3\n    ``np.unicode_`` should be used as a dtype for strings."
  },
  {
    "id" : "c1e67aba-e3c7-48b6-9c4e-b52750b7db95",
    "prId" : 8942,
    "prUrl" : "https://github.com/numpy/numpy/pull/8942#pullrequestreview-33221320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3d1ddef-3064-42b1-a47f-e076b2e06639",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "If we really want completeness here, then we support (most of?) the stuct pack codes too (https://docs.python.org/2/library/struct.html#format-characters). Certainly, `bBhHiIlLqQ` are all accepted",
        "createdAt" : "2017-04-18T12:13:35Z",
        "updatedAt" : "2017-04-22T10:16:06Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "266ea4a4-88d9-454f-8727-075e691d6244",
        "parentId" : "d3d1ddef-3064-42b1-a47f-e076b2e06639",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "yes but it is imo not a good idea, the struct typecodes are the poor old C type where it is unknown what they actually mean.\r\nThe numpy ones i1, i2, i4, i8 are explicit and should be used instead.\r\nso technically `b` and `B` should also not be in there but they do have some relevance in regards to the `S` type.",
        "createdAt" : "2017-04-18T12:38:24Z",
        "updatedAt" : "2017-04-22T10:16:06Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "73aee8ee-0024-4511-b71e-8d088efa0d2d",
        "parentId" : "d3d1ddef-3064-42b1-a47f-e076b2e06639",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> The numpy ones i1, i2, i4, i8 are explicit and should be used instead.\r\n\r\nYep, I completely agree.",
        "createdAt" : "2017-04-18T12:42:32Z",
        "updatedAt" : "2017-04-22T10:16:06Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ea87b5aa-cd2e-497e-b948-d94aa910eea8",
        "parentId" : "d3d1ddef-3064-42b1-a47f-e076b2e06639",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Also, it seems `p` and `P` are things, which I guess correspond to `intp` and `uintp`? These have different meanings in `struct.pack`, which is potentially confusing",
        "createdAt" : "2017-04-18T12:43:04Z",
        "updatedAt" : "2017-04-22T10:16:06Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "8f7743a8-ee73-45bf-bd60-a6966fd226c1",
        "parentId" : "d3d1ddef-3064-42b1-a47f-e076b2e06639",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ah, that's documented in `array.scalars.rst`. Perhaps this table should link there instead?",
        "createdAt" : "2017-04-18T12:44:44Z",
        "updatedAt" : "2017-04-22T10:16:06Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f13d4d96-db56-4a04-aed9-d0408aa33ad8",
        "parentId" : "d3d1ddef-3064-42b1-a47f-e076b2e06639",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "ah that file still need some string updates",
        "createdAt" : "2017-04-18T12:54:10Z",
        "updatedAt" : "2017-04-22T10:16:06Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "0107956102d914a68f157d80614f207f78dffb96",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +234,238 @@   ``'?'``            boolean\n   ``'b'``            (signed) byte\n   ``'B'``            unsigned byte\n   ``'i'``            (signed) integer\n   ``'u'``            unsigned integer"
  }
]