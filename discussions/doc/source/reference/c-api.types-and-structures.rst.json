[
  {
    "id" : "a5476b4c-be7f-49fe-897f-9d8af6c13078",
    "prId" : 4067,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ac8516b-16b0-4cc1-aa80-27eb54d15d4e",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I wonder if we have bitfield arrays?\n",
        "createdAt" : "2014-03-16T00:12:12Z",
        "updatedAt" : "2014-03-16T00:12:12Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "68179d562294ee6c75ebe6dbbb5c57f0acb4fcaa",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +1118,1122 @@\n       A character indicating what kind of array is present according to the\n       typestring convention with 't' -> bitfield, 'b' -> Boolean, 'i' ->\n       signed integer, 'u' -> unsigned integer, 'f' -> floating point, 'c' ->\n       complex floating point, 'O' -> object, 'S' -> (byte-)string, 'U' ->"
  },
  {
    "id" : "af572389-72b9-414a-959b-1d7f48a064f0",
    "prId" : 8836,
    "prUrl" : "https://github.com/numpy/numpy/pull/8836#pullrequestreview-29318362",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "651c30a8-5fd1-46af-a045-b6eeb123eba7",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'd rewrite that as \"has a pointer to an associated :c:type:`PyObject` ,,,\"? However, I think this whole section is somewhat lacking, what we usually get is a pointer to a `PyTypeObject` that subclasses the `PyObject` type. I think it would be better to quote something from the Python documentation.",
        "createdAt" : "2017-03-27T18:05:19Z",
        "updatedAt" : "2017-03-27T23:31:16Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d452e2e3-75c9-4742-82bf-0333d7e0aeb2",
        "parentId" : "651c30a8-5fd1-46af-a045-b6eeb123eba7",
        "authorId" : "4b0602db-f9ac-4b54-b200-2e79d0cfb7c3",
        "body" : "> However, I think this whole section is somewhat lacking\r\n\r\nI thought this passage is about the difference between `PyLongType` and `PyLongObject`. So to say every python type (long type) has an associated object (long object). I don't quite understand what you mean about every type has a pointer to an associated object?\r\n\r\nBut I tried to only fix broken links and incorrect attempts to link. Not okay?",
        "createdAt" : "2017-03-27T19:38:57Z",
        "updatedAt" : "2017-03-27T23:31:16Z",
        "lastEditedBy" : "4b0602db-f9ac-4b54-b200-2e79d0cfb7c3",
        "tags" : [
        ]
      },
      {
        "id" : "3383ab62-621e-41c6-a181-5ab8e21d92a4",
        "parentId" : "651c30a8-5fd1-46af-a045-b6eeb123eba7",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "A generic `PyObject` is a C `struct` that begins with a `PyObject` (i.e., subclasses PyObject), which in turn is a struct that contains a reference count and a pointer to a `PyObjectType` struct. I don't know how that fits with the rest of the paragraph 8-)",
        "createdAt" : "2017-03-27T22:26:04Z",
        "updatedAt" : "2017-03-27T23:31:16Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b0e3aa11ac5ae7b16ae6c2d72bb5624d3c124bc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +7,11 @@Several new types are defined in the C-code. Most of these are\naccessible from Python, but a few are not exposed due to their limited\nuse. Every new Python type has an associated :c:type:`PyObject *<PyObject>` with an\ninternal structure that includes a pointer to a \"method table\" that\ndefines how the new object behaves in Python. When you receive a"
  },
  {
    "id" : "ab719579-cbe5-47c5-987e-8bc2cf2ee0e3",
    "prId" : 13692,
    "prUrl" : "https://github.com/numpy/numpy/pull/13692#pullrequestreview-244942868",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c4610d0-3201-437e-b1af-365f85630b7b",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "\"Requires a behaved array\" is duplicated, see the unchanged text. Also, it seems the use of `sep` is deprecated, the only use of `scanfunc` in the code (via [`fromfile_next_element`](https://github.com/numpy/numpy/blob/v1.16.4/numpy/core/src/multiarray/ctors.c#L72)) will force it to `NULL`.",
        "createdAt" : "2019-06-02T07:09:01Z",
        "updatedAt" : "2019-06-03T15:03:43Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "9064d8f0-1fa9-45c1-ad07-207772061d8d",
        "parentId" : "4c4610d0-3201-437e-b1af-365f85630b7b",
        "authorId" : "d1f497c4-5064-40fb-81b6-4a6204983fb3",
        "body" : "@mattip Thanks, I've made the changes. Does it look ok?",
        "createdAt" : "2019-06-03T15:09:51Z",
        "updatedAt" : "2019-06-03T15:09:52Z",
        "lastEditedBy" : "d1f497c4-5064-40fb-81b6-4a6204983fb3",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa5469b9187d1bb25cc7fb4fe28752758dac51de",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +543,547 @@        before the first receiving argument was assigned.\n        This function should be called without holding the Python GIL, and\n        has to grab it for error reporting.\n\n    .. c:member:: int fromstr(char* str, void* ip, char** endptr, void* arr)"
  }
]