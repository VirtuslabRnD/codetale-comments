[
  {
    "id" : "ad7bdf0e-c50b-4cff-b0f3-b853b941aa8d",
    "prId" : 16164,
    "prUrl" : "https://github.com/numpy/numpy/pull/16164#pullrequestreview-493745073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "614055ae-a0fe-481d-b483-f72482a25dcb",
        "parentId" : null,
        "authorId" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "body" : "nit: I wonder if we should settle on using a capitalized \"Polynomial package\" or a \"`np.polynomial` package\" standard so it is different from a polynomial object and from the old polynomial module in this document.",
        "createdAt" : "2020-07-10T21:59:34Z",
        "updatedAt" : "2020-09-22T18:36:48Z",
        "lastEditedBy" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "tags" : [
        ]
      },
      {
        "id" : "eebcda02-7e49-4de2-9199-4c4f337d51bd",
        "parentId" : "614055ae-a0fe-481d-b483-f72482a25dcb",
        "authorId" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "body" : "TL;DR - you're right. The terminology is very confusing. I would vote for all instances of \"polynomial package\" being replaced with \"`np.polynomial` package\".\r\n\r\n---\r\n\r\nThat's a good point and is actually pretty tricky. One of the biggest problems in disentangling all of the various polynomial components is how overloaded the terminology is. I had been settling on \"polynomial package\" and \"polynomial module\" to distinguish between the new and old polynomial APIs, respectively as the polynomial package is a Python package (`numpy.polynomial`), whereas the old-style polynomial API (e.g. `np.poly1d`) is technically a Python module (`numpy.lib.polynomial`). This isn't very user/reader-friendly however, as it relies on the reader having a firm grasp on the distinction between Python modules and packages.\r\n\r\nI think we also definitely be careful about the capitalization convention because \"np.polynomial.Polynomial\" is one of the new-style convenience classes (representing a finite power series), so referring to the \"Polynomial package\" might be yet *another* way for readers to be confused by the terminology.",
        "createdAt" : "2020-07-13T20:20:12Z",
        "updatedAt" : "2020-09-22T18:36:48Z",
        "lastEditedBy" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "tags" : [
        ]
      },
      {
        "id" : "a057dd76-3cd0-4538-a342-b350d18c603c",
        "parentId" : "614055ae-a0fe-481d-b483-f72482a25dcb",
        "authorId" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "body" : "That makes sense, and I did get that by reading your text. But I suspect that for newcomers this might be a bit confusing. A local solution might be to add something in the beginning of the doc to the effect of\r\n\"In what follows, we will refer to the old polynomial module `numpy.lib.polynomial` as `polynomial module`, not to be confused with the new `numpy.polynomial` package.\" But feel free to ignore this suggestion if you think it's not necessary.",
        "createdAt" : "2020-07-16T01:32:38Z",
        "updatedAt" : "2020-09-22T18:36:48Z",
        "lastEditedBy" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "tags" : [
        ]
      },
      {
        "id" : "6e347237-8e76-469b-9a5d-9b63f0d25623",
        "parentId" : "614055ae-a0fe-481d-b483-f72482a25dcb",
        "authorId" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "body" : "Thanks @melissawm , I really like your suggestion! I've added a `.. note` re: terminology in e4e5a5c",
        "createdAt" : "2020-09-22T18:39:26Z",
        "updatedAt" : "2020-09-22T18:39:26Z",
        "lastEditedBy" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4e5a5c0f3f7108b50d372438093970289825824",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +42,46 @@\nThe following table highlights some of the main differences between the\nlegacy polynomial module and the polynomial package for common tasks.\nThe `~numpy.polynomial.polynomial.Polynomial` class is imported for brevity::\n"
  }
]