[
  {
    "id" : "360ee3a3-78db-4536-832c-3ea4a7b07332",
    "prId" : 3752,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cc22267-3484-4e98-b638-55467fcfb638",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Commas would be better than `(...)` here.\n",
        "createdAt" : "2013-09-15T14:25:05Z",
        "updatedAt" : "2013-09-15T14:25:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1840463683eeef99fcc23c4a4ab1ae8cd5139510",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +279,283 @@=========================\n\nClasses (including ndarray subclasses) can override how ufuncs act on\nthem by defining certain special methods.  For details, see\n:ref:`arrays.classes`."
  },
  {
    "id" : "ebe8c1e8-cf85-43b7-a248-855d12211e4f",
    "prId" : 7988,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0abaa30e-a5ca-4221-bf5d-28abf57d0378",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Should probably add this to the arithmetic functions as well. Note that `fmod` is in both places. \n",
        "createdAt" : "2016-08-29T16:39:23Z",
        "updatedAt" : "2016-08-29T17:15:12Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "72c79b71e8dd68fff3c088e3d28e854ee43ba0f1",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +654,658 @@    isinf\n    isnan\n    fabs\n    signbit\n    copysign"
  },
  {
    "id" : "517039fd-0d7f-4ebb-9456-b556bf0deced",
    "prId" : 9106,
    "prUrl" : "https://github.com/numpy/numpy/pull/9106#pullrequestreview-38733901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "040b268d-3e55-4694-b6f2-26f89bf13c44",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, this is outdated I think, tuples of ints also work. Not a problem for this, but needs fixing at some point. I'll open an issue. ",
        "createdAt" : "2017-05-17T17:19:19Z",
        "updatedAt" : "2017-05-18T01:13:14Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca49f0b11bc88056bf4767ac439b298cfda16fed",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +430,434 @@keyword, and an *out* keyword, and the arrays must all have dimension >= 1.\nThe *axis* keyword specifies the axis of the array over which the reduction\nwill take place and may be negative, but must be an integer. The\n*dtype* keyword allows you to manage a very common problem that arises\nwhen naively using :ref:`{op}.reduce <ufunc.reduce>`. Sometimes you may"
  },
  {
    "id" : "dce71103-54bd-45ab-955f-39fcd42a318b",
    "prId" : 11018,
    "prUrl" : "https://github.com/numpy/numpy/pull/11018#pullrequestreview-125578327",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdd20e96-8fb1-42aa-a482-29dd36130a42",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "\"Not supported for non-generalized ufuncs\" might be nice. Does `np.add([1], [2], axis=0)` fail?",
        "createdAt" : "2018-06-04T01:40:06Z",
        "updatedAt" : "2018-06-07T18:38:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a1055f48-5b9b-4495-90c8-a3f79b9634f3",
        "parentId" : "cdd20e96-8fb1-42aa-a482-29dd36130a42",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "It does say specifically \"over which a *generalized* ufunc should operate. And, yes, an error is raised:\r\n```\r\nIn [2]: np.add(1., 1., axis=0)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-2-578c404b564c> in <module>()\r\n----> 1 np.add(1., 1., axis=0)\r\n\r\nTypeError: 'axis' is an invalid keyword to ufunc 'add'\r\n```\r\nBut this was not tested - now added.",
        "createdAt" : "2018-06-04T13:43:30Z",
        "updatedAt" : "2018-06-07T18:38:04Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "b02fa32630d9879453a9a35579b31a17fe6e3307",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +365,369 @@    .. versionadded:: 1.15\n\n    A single axis over which a generalized ufunc should operate. This is a\n    short-cut for ufuncs that operate over a single, shared core dimension,\n    equivalent to passing in ``axes`` with entries of ``(axis,)`` for each"
  },
  {
    "id" : "8d70f490-206c-4c6d-880b-fc5bee3c59ed",
    "prId" : 11098,
    "prUrl" : "https://github.com/numpy/numpy/pull/11098#pullrequestreview-121557889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "946528b4-9ba3-47f3-8299-0c9d649b44d6",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Do we also want to support `(i),(i)->(),(i)`?",
        "createdAt" : "2018-05-18T17:10:58Z",
        "updatedAt" : "2018-05-18T17:10:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2a1d1637-db60-4f31-89f7-b7286e462200",
        "parentId" : "946528b4-9ba3-47f3-8299-0c9d649b44d6",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I thought about this when I was revisiting the text, and wasn't sure. In principle, there is no reason not too, except I then have to be more careful with the shape of the output... What do you think?",
        "createdAt" : "2018-05-18T17:27:47Z",
        "updatedAt" : "2018-05-18T17:27:47Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "0474cfe4-13ab-4aac-93eb-99fdb71e270e",
        "parentId" : "946528b4-9ba3-47f3-8299-0c9d649b44d6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I don't think we need to decide in this PR - we can add that feature later if we can justify it. I think we should open an issue suggesting it as an enhancement, and merge this PR without any further changes.",
        "createdAt" : "2018-05-18T17:58:33Z",
        "updatedAt" : "2018-05-18T17:58:34Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c30426fc-3ce9-4371-82d5-6bc94ad75cad",
        "parentId" : "946528b4-9ba3-47f3-8299-0c9d649b44d6",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "OK, agreed; see #11118. I'll merge this one then.",
        "createdAt" : "2018-05-18T20:12:22Z",
        "updatedAt" : "2018-05-18T20:12:22Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ccabd6273d4ed598ad732c33d36a5efce6c4a8a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +370,374 @@    ufuncs that operate on inputs that all have the same number of core\n    dimensions and with outputs that have no core dimensions , i.e., with\n    signatures like ``(i),(i)->()`` or ``(m,m)->()``. If used, the location of\n    the dimensions in the output can be controlled with ``axes``.\n"
  }
]