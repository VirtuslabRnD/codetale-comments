[
  {
    "id" : "59b90605-0ce7-4713-b7c2-07ae64811652",
    "prId" : 455,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb6affe7-2769-457d-99c8-37ece00c278d",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This could be expanded a bit. I like to add a bit describing the motivation, the nature of the bug for bug fixes, and perhaps some details as to what enhancements do. If there was a discussion on the list a link might be useful. Generally it is better to error on the verbose side.\n\nSome bad examples might help, i.e.\n\n```\nMAINT: fixed another one\n```\n\nWhich is bad because it provides little information.\n",
        "createdAt" : "2012-09-22T15:56:15Z",
        "updatedAt" : "2012-09-23T09:58:16Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "32c98148-b66b-491c-a891-745a0d77c539",
        "parentId" : "cb6affe7-2769-457d-99c8-37ece00c278d",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Added in the section on commit messages.\n",
        "createdAt" : "2012-09-23T09:58:35Z",
        "updatedAt" : "2012-09-23T09:58:35Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "c906fdce4daaae37df7e6a8abc291f04caf35ea4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +152,156 @@   which you can compose your commit message.  For non-trivial commits this is\n   often the better choice.  The ``a`` flag - you can just take on faith - or\n   see `why the -a flag?`_ - and the helpful use-case description in the\n   `tangled working copy problem`_. The section on\n   :ref:`commit messages <writing-the-commit-message>` below might also be useful."
  },
  {
    "id" : "71eeff23-b56c-4c09-b0d0-53550753d524",
    "prId" : 455,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "491ff67d-bfd9-4d22-9e75-b1c37e5427cf",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Merge conflicts are one of the trickier things to handle and are handled differently for rebasing and pulls. I don't know how much instruction to include here. Maybe just a link to a source providing more detail. A link to the to [Pro Git](http://git-scm.com/book) could be helpful. \n",
        "createdAt" : "2012-09-22T16:04:30Z",
        "updatedAt" : "2012-09-23T09:58:16Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "288a95a2-f654-4ab3-bf6d-657c921fa478",
        "parentId" : "491ff67d-bfd9-4d22-9e75-b1c37e5427cf",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Good idea, added the link.\n",
        "createdAt" : "2012-09-23T09:58:54Z",
        "updatedAt" : "2012-09-23T09:58:54Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "c906fdce4daaae37df7e6a8abc291f04caf35ea4",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +190,194 @@   ENH: enhancement\n   MAINT: maintenance commit (refactoring, typos, etc.)\n   REV: revert an earlier commit\n   STY: style fix (whitespace, PEP8)\n   TST: addition or modification of tests"
  },
  {
    "id" : "fed15bbc-96fd-48ce-a69d-ea758f2b2c67",
    "prId" : 455,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6032f570-60ac-406a-845d-d2d93d440c3e",
        "parentId" : null,
        "authorId" : "fdd529f3-27c6-449d-be3d-a9b35d3f7c12",
        "body" : "Out of interest, has this page diverged from what gitwash auto-generated? One fairly useful suggestion that I practice is to delete the `master` branch altogether and simply use `upstream/master` rather than having to go through the whole `git co master; git pull upstream/master; git push origin master; git fetch origin` loop.\n",
        "createdAt" : "2012-10-03T13:05:33Z",
        "updatedAt" : "2012-10-03T13:05:33Z",
        "lastEditedBy" : "fdd529f3-27c6-449d-be3d-a9b35d3f7c12",
        "tags" : [
        ]
      },
      {
        "id" : "e0b37d0f-3315-495d-8c7f-30fd63ce7d88",
        "parentId" : "6032f570-60ac-406a-845d-d2d93d440c3e",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Yes, it has diverged somewhat and will likely continue to do so slowly.\n\nNot having a master branch may work for you, but is uncommon and problematic if you work off-line, so I'd rather not include such a suggestion.\n",
        "createdAt" : "2012-10-03T18:56:20Z",
        "updatedAt" : "2012-10-03T18:56:20Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "c906fdce4daaae37df7e6a8abc291f04caf35ea4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +17,21 @@In short:\n\n1. Update your ``master`` branch if it's not up to date. \n   Then start a new *feature branch* for each set of edits that you do.\n   See :ref:`below <making-a-new-feature-branch>`."
  },
  {
    "id" : "6e2063de-ff2c-4bd8-b47e-aafeffb1a8a7",
    "prId" : 3888,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc64c2a7-9fe6-4e99-89a8-624bf41a4ace",
        "parentId" : null,
        "authorId" : "c95c9493-4791-4c5c-901e-c027b37fef69",
        "body" : "ironic typo @pv\n",
        "createdAt" : "2013-10-11T01:09:24Z",
        "updatedAt" : "2013-10-11T01:09:24Z",
        "lastEditedBy" : "c95c9493-4791-4c5c-901e-c027b37fef69",
        "tags" : [
        ]
      }
    ],
    "commit" : "664d7db5eae5b7cec7368c3571f7b63fbbf2a007",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +370,374 @@   Do this only for your own feature branches.\n\nThere's an embarrassing typo in a commit you made? Or perhaps the you\nmade several false starts you would like the posterity not to see.\n"
  },
  {
    "id" : "454033c1-3d83-402d-a75e-b3f9ecbd585f",
    "prId" : 5332,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77406e01-1108-4d60-a993-0dac288df0a8",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Maybe add a note here that this is only relevant if you have commit rights to Numpy itself?\n",
        "createdAt" : "2015-01-05T21:10:56Z",
        "updatedAt" : "2015-01-10T12:46:33Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "557108cd2406a7c98e2aa88d2f5a04bbf3bbf4a0",
    "line" : 250,
    "diffHunk" : "@@ -1,1 +225,229 @@Pushing changes to the main repo\n================================\n\n*This is only relevant if you have commit rights to the main Numpy repo.*\n"
  },
  {
    "id" : "9c4b1892-50b8-4535-831b-1c5ceac92b14",
    "prId" : 5332,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86ced21e-280a-4f77-bbdc-76897db89d9a",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "This is not quite right. For case (a), a few commits, we still want a merge commit. Reasons: we want to always group related commits, and we don't want to try any but the last commit when using `git bisect`.\n",
        "createdAt" : "2015-01-05T21:13:11Z",
        "updatedAt" : "2015-01-10T12:46:33Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "0b6a4804-5e3d-4fe0-9ffa-1aa5c970d1a7",
        "parentId" : "86ced21e-280a-4f77-bbdc-76897db89d9a",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "That's right, we've pretty much settled on always making merge commits. When we started on github we tried to keep the history as one linear line, but eventually figured out that that was an abuse of git and that merges made it easier to track and deal with multiple commits, and even for single commits it allows determining who did the merge, as opposed to who made the modifications.\n",
        "createdAt" : "2015-01-07T19:57:57Z",
        "updatedAt" : "2015-01-10T12:46:33Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b40ca493-7c45-4ac0-8ec7-b744ba8d699e",
        "parentId" : "86ced21e-280a-4f77-bbdc-76897db89d9a",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "this will keep the merge commit, there is no rebasing involved.\n\nThough I do not like this section much, we should almost never do this, the two only exceptions are release preparations and backports that already went through a pull request.\n\nI personally also do not like to have a read/write remote setup to point to the numpy repo. This allows for accidental pushes to the main repo.\nI usually only have upstream as a read-only remote (named origin, my fork is fork) and for pushing to the main repo directly I explicitly have to type the git@url line instead of a remote shorthand. That way the chance of mistakingly pushing to the wrong remote are almost zero.\n",
        "createdAt" : "2015-01-07T19:59:43Z",
        "updatedAt" : "2015-01-10T12:46:33Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "0326dd21-8ce2-40ec-a9f0-a6a909c6e6fa",
        "parentId" : "86ced21e-280a-4f77-bbdc-76897db89d9a",
        "authorId" : "b0ac93b5-cabc-41e2-b368-89eb7439e962",
        "body" : "A tactic I use with mpl is I have a read-only remote called 'upstream' and a read/write remote called 'HOLYCOMMITRIGHTSBATMAN' or some similarly silly name in all capitals so dealing with back-porting isn't too annoying, but chances of accidentally pushing to the wrong remote are low.\n",
        "createdAt" : "2015-01-08T01:41:12Z",
        "updatedAt" : "2015-01-10T12:46:33Z",
        "lastEditedBy" : "b0ac93b5-cabc-41e2-b368-89eb7439e962",
        "tags" : [
        ]
      },
      {
        "id" : "20de909c-37f3-4857-acf9-185ba0f4c0d2",
        "parentId" : "86ced21e-280a-4f77-bbdc-76897db89d9a",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "```\nthis will keep the merge commit, there is no rebasing involved.\n```\n\n1a still says rebase then push, which is what I meant.\n",
        "createdAt" : "2015-01-16T22:36:42Z",
        "updatedAt" : "2015-01-16T22:36:42Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "557108cd2406a7c98e2aa88d2f5a04bbf3bbf4a0",
    "line" : 278,
    "diffHunk" : "@@ -1,1 +253,257 @@3. Push to upstream::\n\n        git push upstream my-feature-branch:master\n\n.. note:: "
  },
  {
    "id" : "7fc2a5a8-53e1-4a0a-984d-064ed43f89d2",
    "prId" : 7300,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00155138-6a92-4cbe-88c1-c07050af488f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Out of curiosity, does this also update the master branch?\n",
        "createdAt" : "2016-02-21T21:03:47Z",
        "updatedAt" : "2016-02-21T21:03:47Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "eb01f749-bce7-4aa5-b9a0-e32484b33f8a",
        "parentId" : "00155138-6a92-4cbe-88c1-c07050af488f",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "No, it does not fetch.\n",
        "createdAt" : "2016-02-21T21:12:46Z",
        "updatedAt" : "2016-02-21T21:12:46Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "ba9dae77-6a66-4612-b1bd-52bb4efa0211",
        "parentId" : "00155138-6a92-4cbe-88c1-c07050af488f",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The patch links have to point backward to something, so that something can be elsewhere?\n",
        "createdAt" : "2016-02-21T21:18:50Z",
        "updatedAt" : "2016-02-21T21:18:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "05642d70-049a-4fea-94be-80c053060c14",
        "parentId" : "00155138-6a92-4cbe-88c1-c07050af488f",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "No, it has to exist locally. However, if you have added remotes via `git remote` and do `git fetch` (or `git pull`), git mirrors locally the branches of the remote repo and the corresponding commits, assigning names `<name-of-remote>/<name-of-branch>` to each remote branch. You can get a list of such mirrored remote branches via `git branch -r`. As the data is available locally, these work similarly as local branches (don't know what happens if you try to modify them manually --- probably nothing, your changes are just discarded on the next fetch).\n",
        "createdAt" : "2016-02-21T21:59:08Z",
        "updatedAt" : "2016-02-21T21:59:08Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "db524d6d-8185-4f3c-b8c1-a426395bd030",
        "parentId" : "00155138-6a92-4cbe-88c1-c07050af488f",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "If you look at your `.git/config`, you have something like this there:\n\n```\n[remote \"upstream\"]\n        url = git://github.com/scipy/scipy.git\n        fetch = +refs/heads/*:refs/remotes/upstream/*\n```\n\nwhich determines what is fetched, and how the names are mapped.\nNote that github stores pull requests in namespace `refs/pull/`, so if you're feeling brave, you can add a second fetch mapping:\n\n```\n[remote \"upstream\"]\n        url = git://github.com/scipy/scipy.git\n        fetch = +refs/heads/*:refs/remotes/upstream/*\n        fetch = +refs/pull/*/head:refs/remotes/upstream/pr/*\n```\n\nso that after `git fetch` all pull requests appear as mirrored branches named along the lines of `upstream/pr/7300`.\n",
        "createdAt" : "2016-02-21T22:02:49Z",
        "updatedAt" : "2016-02-21T22:02:49Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "89f0f405-daa4-4e95-8311-29af3a47b350",
        "parentId" : "00155138-6a92-4cbe-88c1-c07050af488f",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Interesting.\n",
        "createdAt" : "2016-02-21T22:33:26Z",
        "updatedAt" : "2016-02-21T22:33:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dffd07c36a1f89032a4b7504f85d3cee4b599f89",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +53,57 @@repository::\n\n   git checkout -b my-new-feature upstream/master\n\n"
  },
  {
    "id" : "88705f77-6469-4102-807b-2f8c0459e796",
    "prId" : 8834,
    "prUrl" : "https://github.com/numpy/numpy/pull/8834#pullrequestreview-29048775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e64afec-b211-4a83-bad8-e58b084228c1",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Seems there's some precedent for this too.",
        "createdAt" : "2017-03-25T14:32:57Z",
        "updatedAt" : "2017-03-25T14:32:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "533fba446d7f11e0b09f0942e773cebda319dcd0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +175,179 @@\n   API: an (incompatible) API change\n   BENCH: changes to the benchmark suite\n   BLD: change related to building numpy\n   BUG: bug fix"
  }
]