[
  {
    "id" : "836a0abe-aa35-42e6-b7c3-75e391d6e408",
    "prId" : 5283,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f23d2b4-2803-4e60-9597-ff9175e6176e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I merged this thanks! maybe as a small followup....can you explain in the docs _why_ one would need to do this, maybe a small example is in order?\n",
        "createdAt" : "2014-01-24T21:44:22Z",
        "updatedAt" : "2014-01-24T21:44:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f26fbc915e2759e0bcadaa93cb00610297e6a7e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +216,220 @@see :ref:`here<indexing.boolean>`\n\nAs of v0.13.1, Series, DataFrames and Panels have an equals method to compare if\ntwo such objects are equal.\n"
  },
  {
    "id" : "7d82de7f-14dc-4e82-9fcf-ca7c67bd78c5",
    "prId" : 6132,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "299f49b4-6cb1-4309-8412-78eda0ba2887",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "FYI I think you need some kind of ref here?\n\n@jorisvandenbossche \n",
        "createdAt" : "2014-01-28T01:00:53Z",
        "updatedAt" : "2014-01-28T01:00:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c5fc2315-2b91-4679-bc6e-e768a7be7fcd",
        "parentId" : "299f49b4-6cb1-4309-8412-78eda0ba2887",
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "I think it's like this (looking at a recent PR):\n\n```\n:func:`~pandas.get_dummies`\n:func:`~pandas.Series.str.get_dummies`\n```\n",
        "createdAt" : "2014-01-28T01:07:06Z",
        "updatedAt" : "2014-01-28T01:07:06Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8f94e9c756e3c8f9b470945a18403fe9dd53217",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1233,1237 @@      s.str.get_dummies(sep='|')\n\nSee also ``pd.get_dummies``.\n\n"
  },
  {
    "id" : "2d319884-8ab2-47eb-b457-e12c65728b6f",
    "prId" : 7953,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6773843-7261-4c0a-b8e8-254f9e70af78",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "its -> it's\n",
        "createdAt" : "2014-08-10T21:33:33Z",
        "updatedAt" : "2014-08-10T22:01:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa1c120d6c457f01a2c4eb131ad2e5cdc06cb566",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1105,1109 @@~~~~~~~~~~~~\n\n``Series`` has an accessor to succinctly return datetime like properties for the *values* of the Series, if its a datetime/period like Series.\nThis will return a Series, indexed like the existing Series.\n"
  },
  {
    "id" : "fd9b653e-ebe1-4540-a594-2e3ae7286a7f",
    "prId" : 8184,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "146ee65f-c8d5-4197-a449-ffc664084241",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "small comment of the line above (line 1138 in new counts): there is `s = Series(period_range('20130101',periods=4,freq='D').asobject)`.\n\nWhy is this `.asobject` needed? And not with `timedelta_range`? \n",
        "createdAt" : "2014-09-10T07:16:50Z",
        "updatedAt" : "2014-09-13T22:29:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "43422dca-ba59-4d1b-a8b2-f4944793b7c3",
        "parentId" : "146ee65f-c8d5-4197-a449-ffc664084241",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we don't have a `PeriodBlock` so periods are currently stored as object dtype. This is also a bug somewhere as it _should_ not coerce. `timedelta_range` returns a proprerly coerced index. Hmm I will look at the period issue.\n",
        "createdAt" : "2014-09-10T14:44:18Z",
        "updatedAt" : "2014-09-13T22:29:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5b8f0c7e-91dd-432d-b72e-f75db2f4a525",
        "parentId" : "146ee65f-c8d5-4197-a449-ffc664084241",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "done FYI\n",
        "createdAt" : "2014-09-12T12:57:39Z",
        "updatedAt" : "2014-09-13T22:29:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f8af44860fffad6535d157e15f5052b64a30781",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1141,1145 @@   s.dt.day\n\n.. ipython:: python\n\n   # timedelta"
  }
]