[
  {
    "id" : "4f696cd8-ef93-4928-83fa-cd79a7c51827",
    "prId" : 11197,
    "prUrl" : "https://github.com/numpy/numpy/pull/11197#pullrequestreview-176339065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "302fee75-2242-406a-8ed6-dadb126ec776",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Note that the rebase has removed the empty line that should be here.",
        "createdAt" : "2018-11-19T15:05:13Z",
        "updatedAt" : "2018-11-21T20:24:06Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "1837df75469d908c15434d97c15d9af4424ca897",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +250,254 @@already a correct estimate for the covariance matrix.\n\nDetailed docstrings for scalar numeric types\n--------------------------------------------\nThe ``help`` function, when applied to numeric types such as `np.intc`,"
  },
  {
    "id" : "25b04189-a0d8-4512-8cb4-6f6d557b8d2d",
    "prId" : 11197,
    "prUrl" : "https://github.com/numpy/numpy/pull/11197#pullrequestreview-176339065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bfe78af-8ebc-46ee-9f07-103ac2ab8a7d",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "And another empty line to be added back in.",
        "createdAt" : "2018-11-19T15:05:25Z",
        "updatedAt" : "2018-11-21T20:24:06Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "1837df75469d908c15434d97c15d9af4424ca897",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +367,371 @@scales it with chisq/(M-N-2) where M is the number of data points and N is the\nnumber of parameters.  This scaling is inconsistent with other fitting programs\nsuch as e.g. ``scipy.optimize.curve_fit`` and was changed to chisq/(M-N).\n\n``maximum`` and ``minimum`` no longer emit warnings"
  },
  {
    "id" : "fa724bbe-2087-41ba-b4e3-db35a9da619b",
    "prId" : 11562,
    "prUrl" : "https://github.com/numpy/numpy/pull/11562#pullrequestreview-137239423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2c8d0b1-57e2-4c49-80f1-732a8a8ab766",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "`numpy.distutils.fcompiler` only",
        "createdAt" : "2018-07-14T13:11:08Z",
        "updatedAt" : "2018-07-14T14:20:24Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "61fda8d0-05dc-4a5f-91fe-d7561b20404a",
        "parentId" : "a2c8d0b1-57e2-4c49-80f1-732a8a8ab766",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "good point, fixed",
        "createdAt" : "2018-07-14T14:20:36Z",
        "updatedAt" : "2018-07-14T14:20:36Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbdf04823d8dcbfa2d6f334346d79ce36d66bfc3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +50,54 @@Appending to build flags\n------------------------\n`numpy.distutils` has always overridden rather than appended to `LDFLAGS` and\nother similar such environment variables for compiling Fortran extensions.\nNow, if the `NPY_DISTUTILS_APPEND_FLAGS` environment variable is set to 1, the"
  },
  {
    "id" : "6631b836-b17c-44a4-aa12-8af97b03c25d",
    "prId" : 11739,
    "prUrl" : "https://github.com/numpy/numpy/pull/11739#pullrequestreview-178552942",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3d8e8ec-85f4-44e6-8c21-a98b2c9a3e28",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Whitespace, but this can be fixed in the 1.16 release",
        "createdAt" : "2018-11-26T23:39:43Z",
        "updatedAt" : "2018-11-26T23:39:44Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2202b9446628db2484ca7028f5472123682f4b3",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +406,410 @@.. _`NEP 15` : http://www.numpy.org/neps/nep-0015-merge-multiarray-umath.html\n.. _`NEP 18` : http://www.numpy.org/neps/nep-0018-array-function-protocol.html\nArrays based off readonly buffers cannot be set ``writeable``\n-------------------------------------------------------------\nWe now disallow setting the ``writeable`` flag True on arrays created"
  },
  {
    "id" : "147fc1e6-458c-420a-bb8e-5d7344ae57df",
    "prId" : 11916,
    "prUrl" : "https://github.com/numpy/numpy/pull/11916#pullrequestreview-164993860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36c18bd7-c50c-478d-be78-86389c01b704",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Rebase seems to have stripped a newline",
        "createdAt" : "2018-10-16T05:37:07Z",
        "updatedAt" : "2018-11-10T00:44:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0a4b8c34-29e0-4f4f-acc0-4fced5a5cdf0",
        "parentId" : "36c18bd7-c50c-478d-be78-86389c01b704",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "fixed, and found a typo",
        "createdAt" : "2018-10-16T05:51:46Z",
        "updatedAt" : "2018-11-10T00:44:47Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "08a2e4503de155f2e202bc154287b34220ad1025",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +42,46 @@for scalars.\n\n`np.set_array_ops` and `np.get_array_ops` have been deprecated\n--------------------------------------------------------------\nAs part of `NEP 15`, they have been deprecated along with the C-API functions"
  },
  {
    "id" : "1cb1ede2-ca49-4527-a4fe-850b2e171db8",
    "prId" : 12431,
    "prUrl" : "https://github.com/numpy/numpy/pull/12431#pullrequestreview-177063859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e973e15f-4347-467b-a24e-c8d1e09031b0",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "On the one hand, we could try to restore this - on the other, it didn't make a massive amount of sense anyway.",
        "createdAt" : "2018-11-21T03:21:31Z",
        "updatedAt" : "2018-11-21T22:35:09Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "73322a0ba923ff6e6429463ba1e31acc69ce1ea7",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +335,339 @@to construct an ``np.array`` around the pointers contents.\n\nThis replaces ``np.array(some_nd_pointer)``, which stopped working in 1.15.\n\nAs a side effect of this change, ``ndpointer`` now supports dtypes with"
  },
  {
    "id" : "1aa5dffa-4f4f-4907-823a-9b4ec11d4c39",
    "prId" : 12447,
    "prUrl" : "https://github.com/numpy/numpy/pull/12447#pullrequestreview-178553755",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0af534f8-3a56-44dd-897a-a2ada2b79bf6",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "It would be neat if it did produce a view, but right now this produces a copy not a view, right?",
        "createdAt" : "2018-11-24T23:32:31Z",
        "updatedAt" : "2018-11-26T19:55:49Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2bf0774d-b522-4be9-9306-3c1820dc34d7",
        "parentId" : "0af534f8-3a56-44dd-897a-a2ada2b79bf6",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "This particular example produces a copy, because even before this PR a copy was unavoidable.\r\n\r\nHowever, it was actually your suggestion to rework the code so `structured_to_unstructured` returns a view in many cases, for instance `structured_to_unstructured(arr[['f1', 'f2', 'f3']], dtype='float64')` actually makes no copies.",
        "createdAt" : "2018-11-24T23:34:50Z",
        "updatedAt" : "2018-11-26T19:55:49Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "0cb16278-df02-496d-9f6c-6271370e9d28",
        "parentId" : "0af534f8-3a56-44dd-897a-a2ada2b79bf6",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "This sentence should be reworked to avoid the word view though...",
        "createdAt" : "2018-11-24T23:39:40Z",
        "updatedAt" : "2018-11-26T19:55:49Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "7a72ab38-0a30-42a2-b87f-85c79abbb0ac",
        "parentId" : "0af534f8-3a56-44dd-897a-a2ada2b79bf6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> for instance structured_to_unstructured(arr[['f1', 'f2', 'f3']], dtype='float64') actually makes no copies.\r\n\r\nIs that a statement about what actually happens in master, or just what I was suggesting?",
        "createdAt" : "2018-11-25T00:19:04Z",
        "updatedAt" : "2018-11-26T19:55:49Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ce82c44c-835a-4a00-9950-27b0b281eab9",
        "parentId" : "0af534f8-3a56-44dd-897a-a2ada2b79bf6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I was proposing something stronger, where the following would also produce a view:\r\n\r\n* `structured_to_unstructured(arr[['f1', 'f3']], dtype='float64')`\r\n* `structured_to_unstructured(arr[['f3', 'f1']], dtype='float64')`\r\n* `structured_to_unstructured(arr[['f3', 'f2', 'f1']], dtype='float64')`",
        "createdAt" : "2018-11-25T00:23:47Z",
        "updatedAt" : "2018-11-26T19:55:49Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "877172f2-99e1-4161-bc5e-13e52d003935",
        "parentId" : "0af534f8-3a56-44dd-897a-a2ada2b79bf6",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "For clarity, let's say we're dealing with the array `arr = np.ones(3, dtype='f8,f8,f8')`. Then `arr[['f0', 'f2']]` returns a 24-byte structured array where each element is organized as `FxF` where `F` is 8 bytes of float memory, and x is 8 bytes of padding. The 3-element array as a whole is `FxFFxFFxF` (72 bytes). \r\n\r\nIs it possible to view this as an unstructured float64 array with the right stride? I suppose this particular 3-field array might be viewed with shape (3, 2) and stride (24, 16). `np.ndarray((3,2), strides=(24, 16), dtype='f8', buffer=arr)` works.\r\n\r\nBut it seems it would be quite an involved computation to determine more generally whether appropriate strides exist, given arbitrary field offsets. Fo three fields it is always possible, but with 4 fields it is not, eg `np.ones(3, 'f8,f8,f8,f8')[['f0', 'f1, 'f3']]` cannot be viewed as an unstructured array.\r\n\r\nMy feeling is it's too difficult to do the calculation generally, it needs some complex gcd computation.",
        "createdAt" : "2018-11-25T02:31:09Z",
        "updatedAt" : "2018-11-26T19:55:49Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "b0aef820-7ca4-406d-b784-ff66aa1ff6b3",
        "parentId" : "0af534f8-3a56-44dd-897a-a2ada2b79bf6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> Fo three fields it is always possible\r\n\r\nNot if they're not contiguous. You're right that it's only possible in some special cases - but `reshape` can only avoid copies in some special cases, and we decided that was worth doing - so it might also be worthwhile here\r\n\r\n> But it seems it would be quite an involved computation to determine more generally whether appropriate strides exist, given arbitrary field offsets\r\n\r\nThe computation is straightforward - pseudo-code:\r\n```python\r\nif len(offsets) == 0:\r\n    stride = 0\r\n    offset = 0\r\nelif len(offsets) == 1:\r\n    stride = 0\r\n    offset = offsets[0]\r\nelse:\r\n    offset = offsets[0]\r\n    stride = offsets[1] - offsets[0]\r\n    for i, o in enumerate(offsets[2:],2):\r\n        if o != offset + stride * i:\r\n            raise NotViewable\r\nreturn offset, stride\r\n```\r\n\r\nWhich should give enough information to be passed to `as_strided` somehow\r\n        ",
        "createdAt" : "2018-11-25T04:43:24Z",
        "updatedAt" : "2018-11-26T19:55:49Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "55c30fbe-e759-4456-b019-255b217bbe28",
        "parentId" : "0af534f8-3a56-44dd-897a-a2ada2b79bf6",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "That should work, indeed. I would have to mostly rewrite `structured_to_unstructured` to account for it, and it seems like not enough of a good enough cost/benefit ratio for the effort, to me. I'd rather leave that to a separate PR if it's desired.",
        "createdAt" : "2018-11-26T19:50:07Z",
        "updatedAt" : "2018-11-26T19:55:49Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "036a7d16-6d7d-4575-89e4-ccaca44cb9b4",
        "parentId" : "0af534f8-3a56-44dd-897a-a2ada2b79bf6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "As long as the contract of `structured_to_unstructured` allows us to make that change in a later release, I'm fine with not doing it now",
        "createdAt" : "2018-11-26T23:42:15Z",
        "updatedAt" : "2018-11-26T23:42:15Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "845def00c85f9f40cfa64e6dabb4158bebd502f4",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +131,135 @@functions have been added to the ``numpy.lib.recfunctions`` module which\nsafely allow such operations. For instance, the code above can be replaced\nwith ``structured_to_unstructured(arr[['f1', 'f3']], dtype='float64')``.\nSee the \"accessing multiple fields\" section of the\n`user guide <https://docs.scipy.org/doc/numpy/user/basics.rec.html>`__."
  }
]