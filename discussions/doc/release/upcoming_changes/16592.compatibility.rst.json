[
  {
    "id" : "55b764f2-d731-42ae-8a53-3b7594acbeda",
    "prId" : 16639,
    "prUrl" : "https://github.com/numpy/numpy/pull/16639#pullrequestreview-434395504",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b31cec8f-018a-45dc-8b58-f7bae64a300d",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "please let me know if this should go into a seperate file 16639.compatibility.rst",
        "createdAt" : "2020-06-19T23:10:15Z",
        "updatedAt" : "2020-06-19T23:10:36Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "ad8ef0de-e71b-4f07-8e2b-28c9d173ce75",
        "parentId" : "b31cec8f-018a-45dc-8b58-f7bae64a300d",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Thanks, i think both of this and the above gitignore additions are fine here.\r\n\r\nThis affects not just uint64, but all unsigned integers, with only signed integers remaining to promote (for the time being).",
        "createdAt" : "2020-06-19T23:26:01Z",
        "updatedAt" : "2020-06-19T23:26:02Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "616928ea-6f7e-41fa-b370-0db5611e6d27",
        "parentId" : "b31cec8f-018a-45dc-8b58-f7bae64a300d",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "so uint32 works fine, since it already finds the casting mapping in _npy_type_promotion_table . \r\n```\r\n>>> np.promote_types(\"uint32\", \"m8\")\r\ndtype('<m8')\r\n>>> np.promote_types(\"m8\", \"uint32\")\r\ndtype('<m8')\r\n>>> np.promote_types(\"m8\", \"uint64\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: invalid type promotion\r\n>>> np.promote_types(\"uint64\", \"m8\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: invalid type promotion\r\n>>>\r\n```\r\nMy understanding was that it should work fine for uint32,  it should only fail for large uints since it maybe too big in value to be cast accurately ?",
        "createdAt" : "2020-06-20T00:16:34Z",
        "updatedAt" : "2020-06-20T00:16:34Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "e444c40b-85ec-4416-90bf-05dc2e08cca3",
        "parentId" : "b31cec8f-018a-45dc-8b58-f7bae64a300d",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Oh, ok, right, thanks for the explanation.  Yes, I think it is fine here then.\r\n\r\nI do think we probably should go all the way, and outright deprecate all integer+timedelta promotions.  However, that is better for a new PR.  We should also make the casting safety of these at least unsafe, probably even no-cast unless it has generic units.  But both of those are different issues. ",
        "createdAt" : "2020-06-20T00:27:35Z",
        "updatedAt" : "2020-06-20T00:27:35Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "5cda3bc8-b2a9-4356-8cb5-35ea5c536b6c",
        "parentId" : "b31cec8f-018a-45dc-8b58-f7bae64a300d",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "> I do think we probably should go all the way, and outright deprecate all integer+timedelta promotions.\r\n\r\nMaybe i am missing something here, but why should this \"not be allowed\"  if it can be cast accurately to timedelta ? Even if we had non generic units we can always convert the integer to the timedelta of that many units right ?",
        "createdAt" : "2020-06-20T00:41:54Z",
        "updatedAt" : "2020-06-20T00:41:54Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "72c1fc54-0e75-4733-b9df-3f223f76a793",
        "parentId" : "b31cec8f-018a-45dc-8b58-f7bae64a300d",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmmm, I keep going in circles.  I think the *promotion* should definitely not be allowed, because an integer and a timedelta represent completely different things.  If we concatenate a `timedelta64` and an `integer` array, then the result being a timedelta may be a misrepresentation of the integers.  I think we can expect users to do the cast manually?\r\n\r\nCasting safety is a bit of a different issue. Because they are completely different things, the casting should possibly not be considered \"safe\".  This is what `astropy.units` do as far as I know. They refuse to cast, unless the value is unit-less.\r\n\r\nOn the other hand, there was the opinion that it could be considered \"safe\" if it will definitely round-trip correctly (which it does).  Which is a good point. Possibly we need to add new casting safety parameters...",
        "createdAt" : "2020-06-20T00:58:11Z",
        "updatedAt" : "2020-06-20T00:58:12Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "2f9c6797-afe5-462c-b09a-44b43c117de6",
        "parentId" : "b31cec8f-018a-45dc-8b58-f7bae64a300d",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Anyway, thanks for this! I will put this in, since it does not hurt for now and the asymmetric definition is not helpful to begin with.\r\n\r\nWhether the other promotion cases should also be deprecated is a bit of a different issue, I am pretty sure I want that in the long run.  And I am starting to be more and more happy with decoupling that from the type-safety discussion.",
        "createdAt" : "2020-06-20T01:34:02Z",
        "updatedAt" : "2020-06-20T01:34:02Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "389ff802-91b4-4906-8d9b-673189c73a98",
        "parentId" : "b31cec8f-018a-45dc-8b58-f7bae64a300d",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "Thanks Sebastian for the explanation and the merge !\r\n\r\n> Whether the other promotion cases should also be deprecated is a bit of a different issue, I am pretty sure I want that in the long run. And I am starting to be more and more happy with decoupling that from the type-safety discussion.\r\n\r\nThe reason I don't quite understand how we will be able to decouple type-safety from promotion is because the docs mention the following :  \"\"\"Returns the data type with the smallest size and smallest scalar kind to which both ``type1`` and ``type2`` may be safely cast.\"\"\" so, atleast according to documentation promotion depends on casting safety to a common type.\r\n",
        "createdAt" : "2020-06-20T02:02:34Z",
        "updatedAt" : "2020-06-20T02:02:34Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "dd41627d-7521-4c04-8fb1-ec303fe0ad8a",
        "parentId" : "b31cec8f-018a-45dc-8b58-f7bae64a300d",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, its the current rule, and it has its arguments.  I am not quite sure on it yet.\r\n\r\nI think I prefer the coupling version, with these type of casts just not being designated \"safe\". \r\n\r\nThere is things like strings. We currently promote string+number to string, which seems plain wrong to me.  But we currently also consider it a safe cast.\r\nThe \"safe\" cast part could at least be motivated by the fact that you can convert any number into a string, and it will roundtrip back correctly.  But I do not see how you can possibly motivate promotion to work.  There is no operation which works the same on strings and integers, so storing both into a string array (e.g. concatenation) is just wrong. And I think for promotion to make sense, it should not be wrong.\r\n\r\nLong story short: For numbers that rule is clean and clear.  I am not really convinced it was ever quite thought when the rule was generalized to non-numbers.",
        "createdAt" : "2020-06-20T02:17:07Z",
        "updatedAt" : "2020-06-20T02:17:07Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "27edfbbc1b06008caee1966590ff2765007d6fcc",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +11,15 @@``np.promote_types(\"m8\", \"uint64\")`` now and both raise a TypeError.\nPreviously, ``np.promote_types(\"uint64\", \"m8\")`` returned ``\"m8\"`` which\nwas considered a bug."
  }
]