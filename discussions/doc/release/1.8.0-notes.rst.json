[
  {
    "id" : "8fb9acf2-cb18-4621-bdcf-044c0b7f4e02",
    "prId" : 2701,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5b24390-f039-4c30-aae8-98bdff613c52",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "So, uh... how _is_ it expected to work? I can't figure out what I expect :-) I guess, equivalent to `array[fancy_idx].reshape((-1, 1))` (regardless of where the `newaxis` is placed inside the index operator)?\n",
        "createdAt" : "2013-04-12T20:16:51Z",
        "updatedAt" : "2013-05-07T15:06:58Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "ec7b68b6-f3a3-4995-a88b-3a5bac2ac456",
        "parentId" : "d5b24390-f039-4c30-aae8-98bdff613c52",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "hmmm, fair enough ;). It is inserted at the exact point. For the simple cases it means you get the same thing if you replace the fancy index with a (compatible slice). For more complex cases, think of it as: do the None first replacing everything else with \":\", and after that replace the None with \":\".\n",
        "createdAt" : "2013-04-12T20:23:22Z",
        "updatedAt" : "2013-05-07T15:06:58Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "37daf4a2-d6d3-40d8-8dc2-cab941e2779b",
        "parentId" : "d5b24390-f039-4c30-aae8-98bdff613c52",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "If you know the code for advanced indexing: the new axis is just applied to the subspace. i.e. the non-fancy index part. (with the necessary code corrections)\n",
        "createdAt" : "2013-04-12T20:30:46Z",
        "updatedAt" : "2013-05-07T15:06:58Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "be6be0cb-fbaa-47b2-87c3-a2ca556d91aa",
        "parentId" : "d5b24390-f039-4c30-aae8-98bdff613c52",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "How about adding: for example `array[:, np.newaxis, [0,1]]` will give the same result as `array[:, np.newaxis,:2]` (but does a copy)?\n",
        "createdAt" : "2013-04-12T20:38:06Z",
        "updatedAt" : "2013-05-07T15:06:58Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9c95555c23cf5429a795ef73f8fb2b3941d434c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +77,81 @@It is now possible to use `np.newaxis`/`None` together with index\narrays instead of only in simple indices. This means that\n``array[np.newaxis, [0, 1]]`` will now work as expected.\n\nC-API"
  },
  {
    "id" : "085fa05b-4fdd-41e7-a759-c8d254130b1a",
    "prId" : 3839,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96239660-6f21-4759-87d0-6fa4991cf5e7",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I don't think this is quite accurate. What if the array is all ones?\n",
        "createdAt" : "2013-09-30T19:52:16Z",
        "updatedAt" : "2013-09-30T20:00:06Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "8dd49dff-d0d5-4be0-8c83-db8653401694",
        "parentId" : "96239660-6f21-4759-87d0-6fa4991cf5e7",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "then you consider the element value is sorted into the zero position and all following are greater/equal\n",
        "createdAt" : "2013-09-30T19:54:26Z",
        "updatedAt" : "2013-09-30T20:00:06Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "76bcbf1d-6902-43fc-8fb0-23145848dfaf",
        "parentId" : "96239660-6f21-4759-87d0-6fa4991cf5e7",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "now I get it, it should be smaller equal e,g, np.partition([1, 1, 1, 1, 2, 3], 2), also there is still a typo in this section ....\nMaybe its better to leave this smaller, greater sentence out completely? \"elements are moved into their sorted position\" already implies this.\n",
        "createdAt" : "2013-09-30T20:15:38Z",
        "updatedAt" : "2013-09-30T20:15:38Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "c69d4ca3-7cba-4110-89f6-e762a62f768a",
        "parentId" : "96239660-6f21-4759-87d0-6fa4991cf5e7",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "no it does not imply this..., sorry can't think straight today.\n",
        "createdAt" : "2013-09-30T20:18:05Z",
        "updatedAt" : "2013-09-30T20:18:05Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e0f71af295fbd4f6f799acaa36811feebb68178",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +193,197 @@\nPartial sorting moves the value of selected elements into their position if the\narray would be sorted. In the resulting array all elements smaller than the\nsorted elements will placed before the it and all equal or greater behind it.\nThis has a linear time complexity of ``O(n)`` compared to ``O(n log(n))`` of a"
  },
  {
    "id" : "9286efd5-ad15-48ca-bc8d-f233ee7413af",
    "prId" : 3886,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb7908dc-f2de-4939-8109-fbb2f4b1d3f7",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "Could add an example here: \"For example, `np.full(np.nan, (10, 10))` will create a 10x10 array of nans in the most efficient way available.\" (Err, or is it `np.full((10, 10), np.nan)`?)\n",
        "createdAt" : "2013-10-09T19:47:02Z",
        "updatedAt" : "2013-10-09T19:47:02Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d0c743511028c66b973d18d1b573af4777e412f",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +206,210 @@~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nNew convenience functions to create arrays filled with a specific value;\ncomplementary to the existing `zeros` and `zeros_like` functions.\n\nIO compatibility with large files"
  },
  {
    "id" : "ecb49d6b-7f7f-42ed-9d93-03dd9678e671",
    "prId" : 3886,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d96d27c-d87e-4f2c-8991-357134397b84",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "I'd probably put the 2to3 thing at the bottom of the list, because as awesome as it is, I'm not sure if users actually care. Sorry Chuck :-).\n\nWe could add one sentence each to the gufunc and .at lines to make clear how awesome they are to people skimming, before they go read the full paragraphs below. \"For example, calling np.linalg.inv on a 100x10x10 array will now invert all 100 matrices in a single operation.\" \"This provides a version of arr[[1, 1]] += 1 that actually works.\"\n",
        "createdAt" : "2013-10-09T19:50:12Z",
        "updatedAt" : "2013-10-09T19:50:12Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d0c743511028c66b973d18d1b573af4777e412f",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +16,20 @@* New, ``full`` and ``full_like`` functions to create value initialized arrays.\n* New, ``PyUFunc_RegisterLoopForDescr``, better ufunc support for user dtypes.\n* Numerous performance improvements in many areas.\n\n"
  }
]