[
  {
    "id" : "05663ecc-0b5b-43b9-8b46-c9b2d9bb60ca",
    "prId" : 9302,
    "prUrl" : "https://github.com/numpy/numpy/pull/9302#pullrequestreview-46656139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71ca6ac6-dfe5-4873-977b-9db76ea6cfa6",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Maybe a short comment that this can affect (arg)sorting of masked values?\r\n\r\n(I expect that may be the main user-affecting impact of all this)",
        "createdAt" : "2017-06-27T17:51:09Z",
        "updatedAt" : "2017-06-27T17:54:45Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "3fe3d9f6-1c56-4097-9122-e5c6285168a5",
        "parentId" : "71ca6ac6-dfe5-4873-977b-9db76ea6cfa6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nope, because the only visible effect is that now we don't crash - internally, we always used the `f(array)` call, never the `f(scalar)` call.",
        "createdAt" : "2017-06-27T17:59:36Z",
        "updatedAt" : "2017-06-27T18:00:03Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d7b6c4fe-8b30-43aa-ac27-0a28077f0d1f",
        "parentId" : "71ca6ac6-dfe5-4873-977b-9db76ea6cfa6",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "OK, I see. So it's an even smaller change than I thought!",
        "createdAt" : "2017-06-27T19:33:41Z",
        "updatedAt" : "2017-06-27T19:33:41Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "64b0e54ce6ebf6bb16b9305f4d7f22b943c26b84",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +45,49 @@passing a python scalar ``x``, ``maximum_fill_value(x)`` is always the same as\n``maximum_fill_value(np.array(x))``. Previously ``x = long(1)`` on Python 2\nviolated this assumption.\n\n"
  },
  {
    "id" : "b1b911ec-a6a4-45f4-bd8d-048a05f09273",
    "prId" : 9492,
    "prUrl" : "https://github.com/numpy/numpy/pull/9492#pullrequestreview-53595215",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3a52f82-238a-4d70-a2fb-d013ec1ba328",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "missing newline here will probably cause merge conflicts down the line",
        "createdAt" : "2017-08-01T18:36:18Z",
        "updatedAt" : "2017-08-01T18:36:18Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "10ba73ec23826151de2c60b7fc5714e04913bd45",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +94,98 @@method adds support for interpolation over arbitrary intervals using the scaled\nand shifted Chebyshev points of the first kind.\n\nImprovements\n============"
  },
  {
    "id" : "f0e88f6b-9600-49ae-b173-f2ac251d3f47",
    "prId" : 9582,
    "prUrl" : "https://github.com/numpy/numpy/pull/9582#pullrequestreview-57351559",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "777940bd-32af-4d96-bfb6-f3b8f65a756b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Don't need this blank line.",
        "createdAt" : "2017-08-19T14:38:07Z",
        "updatedAt" : "2017-08-19T14:38:08Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "54569e93-dbd5-45dd-9276-a67293cfd4dc",
        "parentId" : "777940bd-32af-4d96-bfb6-f3b8f65a756b",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "But doesn't hurt, I will edit the notes later in any case.",
        "createdAt" : "2017-08-19T14:38:45Z",
        "updatedAt" : "2017-08-19T14:38:45Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd3a2c580e2d5f0a7a958b3e7d942c230648f2e3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +39,43 @@``np.linalg.lstsq`` default for ``rcond`` will be changed\n---------------------------------------------------------\n\nThe ``rcond`` parameter to ``np.linalg.lstsq`` will change its default to the\nbetter value of machine precision times the maximum of the input matrix"
  }
]