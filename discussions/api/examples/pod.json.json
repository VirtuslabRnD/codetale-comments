[
  {
    "id" : "b50d209f-d7f4-4ec3-8717-87fda239ba5a",
    "prId" : 4322,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43c41249-933e-48e0-9e44-cb9ad726b2e2",
        "parentId" : null,
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Is it possible to do this without using a host port? Services have generally replaced the need for host ports, and using host ports mean that the scheduler can't put two instances of the same pod onto a single node. \n",
        "createdAt" : "2015-02-11T19:20:12Z",
        "updatedAt" : "2015-02-11T19:20:12Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec298733c77202ee8f97276d02478c1374bf17ad",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +12,16 @@        \"ports\": [{\n          \"containerPort\": 80,\n          \"hostPort\": 8081\n        }],\n        \"livenessProbe\": {"
  },
  {
    "id" : "f9ae11e3-69c3-460c-8918-436e9eb98797",
    "prId" : 365,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6a95b58-7344-4a4a-8704-14ee68d3a883",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Assuming that all health checks are http seems limiting - should this not require a \"type\" field with different attributes or sub resources?  I can imagine a) tcp checks, b) tls checks, and c) common protocol dependent checks (although the implementation of those are difficult).\n\nWouldn't want to make the assumption though that everything is http based.\n",
        "createdAt" : "2014-07-08T17:02:27Z",
        "updatedAt" : "2014-07-09T19:01:52Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f568ac74-e59d-4997-a4ba-b7a07db03bd3",
        "parentId" : "d6a95b58-7344-4a4a-8704-14ee68d3a883",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@smarterclayton I agree. I anticipate supporting command-line checks as a general-purpose escape hatch for other types of checks. Path and port should go into a HTTPGetProbe type.\n",
        "createdAt" : "2014-07-08T17:09:35Z",
        "updatedAt" : "2014-07-09T19:01:52Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "a7b0ed1a-2af2-481c-a651-ea23daa1f09f",
        "parentId" : "d6a95b58-7344-4a4a-8704-14ee68d3a883",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Is there an escape hatch for extensible check types managed from the server or implemented on the host?  I.e. the difference between what kubernetes implements/specs, vs what someone using the kubernetes API might want to implement?  Could someone decide to say, implement healthcheck type=\"mysql\" but the implementation of that might be left to an external consumer (someone who is watching etcd, integrating with the kubelet locally, or calling the pod api)?\n",
        "createdAt" : "2014-07-08T17:13:05Z",
        "updatedAt" : "2014-07-09T19:01:52Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1f6c71fb-aebb-430f-a875-4d0ecaee8e43",
        "parentId" : "d6a95b58-7344-4a4a-8704-14ee68d3a883",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Ok, broadened to encompass other types of probes (non specified so far).\n\n@smarterclayton for the user implemented version, I think we were thinking of using \"run in container\" to execute some script inside the container to perform the custom health check.  What do you think?\n",
        "createdAt" : "2014-07-08T20:15:12Z",
        "updatedAt" : "2014-07-09T19:01:52Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "41c6680943c620b90c598dc6d12a817cfb625820",
    "line" : null,
    "diffHunk" : "@@ -1,1 +20,24 @@            \"port\": \"8080\"\n          }\n        }\n      }]\n    }"
  }
]