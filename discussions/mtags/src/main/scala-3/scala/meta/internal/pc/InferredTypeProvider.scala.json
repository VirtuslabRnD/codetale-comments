[
  {
    "id" : "bbfafd18-9831-4d09-8252-8297069ae9f5",
    "prId" : 2825,
    "prUrl" : "https://github.com/scalameta/metals/pull/2825#pullrequestreview-672087283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b20fb8f-0cf2-4572-a9d7-cff5b7ec3fe4",
        "parentId" : null,
        "authorId" : "84490516-a7af-4f7f-9947-360c279c4400",
        "body" : "Same as the other comment, I'm assuming it's fine, but we don't need to worry about the `head` call here?",
        "createdAt" : "2021-05-29T09:39:48Z",
        "updatedAt" : "2021-05-29T09:45:16Z",
        "lastEditedBy" : "84490516-a7af-4f7f-9947-360c279c4400",
        "tags" : [
        ]
      },
      {
        "id" : "3ff280e4-cdff-47b9-ae0f-da69857e8ee6",
        "parentId" : "5b20fb8f-0cf2-4572-a9d7-cff5b7ec3fe4",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "We shouldn't need to worry, that head is the just parsed source file. We can add a check, but this is not the only place we are doing it and there seems to be no issues around it.",
        "createdAt" : "2021-05-31T08:31:03Z",
        "updatedAt" : "2021-05-31T08:31:03Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "ca800c79-458c-4439-8bcb-df5a746f0591",
        "parentId" : "5b20fb8f-0cf2-4572-a9d7-cff5b7ec3fe4",
        "authorId" : "84490516-a7af-4f7f-9947-360c279c4400",
        "body" : "No need to add a check then. I was just curious :)",
        "createdAt" : "2021-05-31T08:33:09Z",
        "updatedAt" : "2021-05-31T08:33:09Z",
        "lastEditedBy" : "84490516-a7af-4f7f-9947-360c279c4400",
        "tags" : [
        ]
      },
      {
        "id" : "6a052952-5a13-467b-af9b-b6aa999bbd75",
        "parentId" : "5b20fb8f-0cf2-4572-a9d7-cff5b7ec3fe4",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "And this is basically produced by `driver.run(uri, source)`",
        "createdAt" : "2021-05-31T08:37:23Z",
        "updatedAt" : "2021-05-31T08:37:24Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c925bb564b537775be70666582c8e6f17d58fd2",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +52,56 @@    val source = SourceFile.virtual(filePath.toString, params.text)\n    driver.run(uri, source)\n    val unit = driver.currentCtx.run.units.head\n    val pos = driver.sourcePosition(params)\n    val path ="
  },
  {
    "id" : "f8e0676e-34c7-43ab-a999-cd6c1586dd80",
    "prId" : 2989,
    "prUrl" : "https://github.com/scalameta/metals/pull/2989#pullrequestreview-714687291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e501336-c63c-41c2-b920-1d7d8caff591",
        "parentId" : null,
        "authorId" : "84490516-a7af-4f7f-9947-360c279c4400",
        "body" : "I corrected the comments in here since I _think_ the one above was wrong?\r\n\r\nFor\r\n```scala\r\nmap{a => ???}\r\n```\r\nIt won't be caught by the case up above, so it shouldn't be in that comment right? Since this gets translated to:\r\n```scala\r\nmap({a => ???})\r\n```\r\nThat's where there is an extra block in the path before the apply right?",
        "createdAt" : "2021-07-25T18:23:08Z",
        "updatedAt" : "2021-07-25T18:23:08Z",
        "lastEditedBy" : "84490516-a7af-4f7f-9947-360c279c4400",
        "tags" : [
        ]
      },
      {
        "id" : "bc3603cb-2d2f-4c3b-b0f6-7421b5f563b9",
        "parentId" : "3e501336-c63c-41c2-b920-1d7d8caff591",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Yeah, actually the comments were wrong. For `{}` we just annotated it with the type in `baseEdit`",
        "createdAt" : "2021-07-26T10:29:51Z",
        "updatedAt" : "2021-07-26T10:30:55Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "715350a346c30b7f2a86202bd83ce62308d62a21",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +165,169 @@            // Ensures that this becomes {(a: Int) => ???} since parentheses\n            // are required around the parameter of a lambda in Scala 3\n            case valDef :: defDef :: (block: untpd.Block) :: (_: untpd.Block) :: (appl: untpd.Apply) :: _\n                if isParam =>\n              checkForParensAndEdit(appl.fun.endPos.end, '{', block.startPos)"
  }
]