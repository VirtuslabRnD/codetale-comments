[
  {
    "id" : "fa75e43f-f9ad-44e3-b47c-0c1cac6b4ad7",
    "prId" : 2497,
    "prUrl" : "https://github.com/scalameta/metals/pull/2497#pullrequestreview-588919447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e14ddb6-cf02-4abb-8c45-2a15e17560f2",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Without isStale, we would pick up classes that are no longer here. This actually showed up in `CompletionMatchSuite.stale2`, which seems to now have worked correctly.",
        "createdAt" : "2021-02-11T19:45:19Z",
        "updatedAt" : "2021-02-17T15:54:49Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3da8a9cf97b46b15072db2b6898bb3237b2919c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +190,194 @@      val history = new ShortenedNames(\n        lookupSymbol = { name =>\n          context.lookupSymbol(name, sym => !sym.isStale) :: Nil\n        },\n        config = renameConfig,"
  },
  {
    "id" : "2c46f385-4675-494e-bed0-4fdf40a3b817",
    "prId" : 1762,
    "prUrl" : "https://github.com/scalameta/metals/pull/1762#pullrequestreview-414176122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0f43350-5164-483d-b0ca-d80957b612b7",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Will this work if we want to override lazy vals? They cannot be abstract but we can override them and this compilation is also used for non-abstract symbols.",
        "createdAt" : "2020-05-18T17:02:57Z",
        "updatedAt" : "2020-05-19T13:33:30Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "d7407eed-45ae-44fc-a3a3-e6272077f3a3",
        "parentId" : "e0f43350-5164-483d-b0ca-d80957b612b7",
        "authorId" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "body" : "lazy should be in modifs already, I wanted to just get rid of lzy and only use modifs but it is used to match against what user typed and matching against modifiers is probably not what user wants.\r\nGonna double check lazy is there :+1:",
        "createdAt" : "2020-05-18T17:45:39Z",
        "updatedAt" : "2020-05-19T13:33:30Z",
        "lastEditedBy" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "tags" : [
        ]
      },
      {
        "id" : "b5b8d8d9-9611-429b-af51-d651bb05e3b4",
        "parentId" : "e0f43350-5164-483d-b0ca-d80957b612b7",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Cool, let's add a test if there is none.",
        "createdAt" : "2020-05-18T18:23:17Z",
        "updatedAt" : "2020-05-19T13:33:30Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "59198994-206c-451c-912b-5956434e9615",
        "parentId" : "e0f43350-5164-483d-b0ca-d80957b612b7",
        "authorId" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "body" : "yes, there is already a test :+1:\r\n```\r\n  checkEditLine(\r\n    \"lazy\",\r\n    \"\"\"|package q\r\n       |abstract class Val {\r\n       |  lazy val hello: Int = 2\r\n       |}\r\n       |class Main extends Val {\r\n       |   ___\r\n       |}\r\n       |\"\"\".stripMargin,\r\n    \"override val hel@@\",\r\n    \"override lazy val hello: Int = ${0:???}\"\r\n  )\r\n```",
        "createdAt" : "2020-05-19T07:35:50Z",
        "updatedAt" : "2020-05-19T13:33:30Z",
        "lastEditedBy" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "tags" : [
        ]
      }
    ],
    "commit" : "154a1cb5e658d16597917aba8f7f326db0ade0f9",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +245,249 @@      val filterText: String = s\"${overrideKeyword}${lzy}${keyword}${name}\"\n      val insertText: String =\n        s\"${overrideKeyword}${modifs}${keyword}${name}$signature\"\n\n      // if we had no val or def then filter will be empty"
  }
]