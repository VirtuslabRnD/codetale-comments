[
  {
    "id" : "dc5cfd18-dcd0-46e1-9b16-f18ea4dba255",
    "prId" : 332,
    "prUrl" : "https://github.com/scalameta/metals/pull/332#pullrequestreview-164466291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53c2142f-7576-49f9-b822-9da4d6e64261",
        "parentId" : null,
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "This signature means the method swallows errors. Could it be useful to report them back to the caller in case something goes wrong (e.g., the file doesn't exist, or it's not a Scala/Java file?). The caller can decide to discard it anyway.",
        "createdAt" : "2018-10-13T12:33:03Z",
        "updatedAt" : "2018-10-17T09:17:09Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "670c2c78-85e6-4867-bdfd-c0c703acc8cc",
        "parentId" : "53c2142f-7576-49f9-b822-9da4d6e64261",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "Currently this throws an exception for errors like tokenization failures. I'm not sure yet what the best error handling method so I'd prefer to refine it down the road once we have a clearer picture of how it will be used in the language server. Maybe the underlying implementation can accept a `Reporter` ðŸ¤” ",
        "createdAt" : "2018-10-13T13:37:23Z",
        "updatedAt" : "2018-10-17T09:17:09Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      },
      {
        "id" : "9ca15080-24e2-4f3f-b87f-00d6cbf40880",
        "parentId" : "53c2142f-7576-49f9-b822-9da4d6e64261",
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "Ok, let's wait and see. I was thinking of something like \"Either\" or \"Try\" here, nothing fancy but still better than Unit.",
        "createdAt" : "2018-10-13T15:13:25Z",
        "updatedAt" : "2018-10-17T09:17:09Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      }
    ],
    "commit" : "889b282a30a7ddd72b09da4b9328f7779b1cfae9",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +51,55 @@      file: AbsolutePath,\n      sourceDirectory: Option[AbsolutePath]\n  ): Unit\n\n  /**"
  },
  {
    "id" : "0bac4d44-9023-42a9-a132-47879cca0214",
    "prId" : 332,
    "prUrl" : "https://github.com/scalameta/metals/pull/332#pullrequestreview-162725151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a418c17-356f-4726-b713-b320e8abc835",
        "parentId" : null,
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "Much <3 for the comments in this file",
        "createdAt" : "2018-10-13T12:33:26Z",
        "updatedAt" : "2018-10-17T09:17:09Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      }
    ],
    "commit" : "889b282a30a7ddd72b09da4b9328f7779b1cfae9",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@ * Only indexes plain Scala and Java source files, no compilation needed.\n */\ntrait GlobalSymbolIndex {\n\n  /**"
  },
  {
    "id" : "6fb12cec-2562-4bdd-b910-34a4b8c677ad",
    "prId" : 332,
    "prUrl" : "https://github.com/scalameta/metals/pull/332#pullrequestreview-164462480",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcfa28a5-b488-4be6-a967-0415792711a1",
        "parentId" : null,
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "Same comment as above about returning `Unit` vs a more expressive error-aware type",
        "createdAt" : "2018-10-13T12:34:12Z",
        "updatedAt" : "2018-10-17T09:17:09Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "9b54dc72-3ed4-4136-8e49-57501ad2dd49",
        "parentId" : "dcfa28a5-b488-4be6-a967-0415792711a1",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "It's a good question but I'm still not sure what the best solution  is",
        "createdAt" : "2018-10-13T13:37:43Z",
        "updatedAt" : "2018-10-17T09:17:09Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "889b282a30a7ddd72b09da4b9328f7779b1cfae9",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +81,85 @@   *                   literal.\n   */\n  def addSourceJar(jar: AbsolutePath): Unit\n\n}"
  },
  {
    "id" : "2b75325a-c445-49c9-b4d3-03c49f51604d",
    "prId" : 332,
    "prUrl" : "https://github.com/scalameta/metals/pull/332#pullrequestreview-164466318",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d9bf108-9ed9-401e-90f0-dc73a35cfa7c",
        "parentId" : null,
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "Maybe `SymbolDefinitionPath` or `SymbolDefinitionFile`?",
        "createdAt" : "2018-10-13T12:35:17Z",
        "updatedAt" : "2018-10-17T09:17:09Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "49d85b6f-d0bf-48a0-8a11-ce97c885242e",
        "parentId" : "7d9bf108-9ed9-401e-90f0-dc73a35cfa7c",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "Ending with `Path` makes the `querySymbol/definitionSymbol` fields a bit confusing IMO",
        "createdAt" : "2018-10-13T13:38:53Z",
        "updatedAt" : "2018-10-17T09:17:09Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      },
      {
        "id" : "96fe72ac-0b79-4b67-9006-c151f64bacb0",
        "parentId" : "7d9bf108-9ed9-401e-90f0-dc73a35cfa7c",
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "At the same time, this is not really a symbol definition. It's the file where the symbol is defined, so that was confusing at a first read",
        "createdAt" : "2018-10-13T15:14:19Z",
        "updatedAt" : "2018-10-17T09:17:09Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      }
    ],
    "commit" : "889b282a30a7ddd72b09da4b9328f7779b1cfae9",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +85,89 @@}\n\ncase class SymbolDefinition(\n    querySymbol: Symbol,\n    definitionSymbol: Symbol,"
  }
]