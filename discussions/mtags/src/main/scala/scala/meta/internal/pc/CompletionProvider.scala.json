[
  {
    "id" : "e02a13dd-b719-493f-8f0f-3a43235ccfa7",
    "prId" : 1250,
    "prUrl" : "https://github.com/scalameta/metals/pull/1250#pullrequestreview-338351193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "959e7abc-cc26-452a-b1cf-cef6335eaceb",
        "parentId" : null,
        "authorId" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "body" : "If we don't close the comment here, the whole code below the `/**` will be commented out, and we cannot traverse the AST (retrieved from a compilation unit) below the comment ",
        "createdAt" : "2020-01-04T12:24:53Z",
        "updatedAt" : "2020-01-13T13:44:04Z",
        "lastEditedBy" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf8e6070092ac693251e01568b009a7f1bfce601",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +31,35 @@            params.text().charAt(i - 2) == '/' =>\n        // Insert potentially missing `*/` to avoid comment out all codes after the \"/**\".\n        CURSOR + \"*/\"\n      case _ =>\n        // Default _CURSOR_ instrumentation."
  },
  {
    "id" : "1c1536e5-ee1e-4730-9dee-d75f979fb17b",
    "prId" : 1092,
    "prUrl" : "https://github.com/scalameta/metals/pull/1092#pullrequestreview-324666906",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "698e72e7-cab5-4ec3-9f49-aeeaadeea29c",
        "parentId" : null,
        "authorId" : "84490516-a7af-4f7f-9947-360c279c4400",
        "body" : "The only thing I wasn't 100% sure on is here do we need to also encode this again before we pass it into `matchesSubCharacters` or `matches` since the `entered.toString`?",
        "createdAt" : "2019-11-29T06:03:31Z",
        "updatedAt" : "2019-11-29T06:05:08Z",
        "lastEditedBy" : "84490516-a7af-4f7f-9947-360c279c4400",
        "tags" : [
        ]
      },
      {
        "id" : "5aff362c-bdf7-47a6-ae4b-6cb74846fed1",
        "parentId" : "698e72e7-cab5-4ec3-9f49-aeeaadeea29c",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Not sure either, but might be good to encode it again. Situations like: `weird_method@Name`",
        "createdAt" : "2019-11-29T10:26:13Z",
        "updatedAt" : "2019-11-29T10:26:13Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "90f4393e-e37a-4075-848c-87389d1456c7",
        "parentId" : "698e72e7-cab5-4ec3-9f49-aeeaadeea29c",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "We always want to fuzzy match against the decoded name, it would be weird to include `::` if the user types `foo.$colon$col@@`",
        "createdAt" : "2019-11-29T11:34:00Z",
        "updatedAt" : "2019-11-29T11:34:08Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8c3e9fd388b949abe04c1a0fa6eda1c14cfe9ab",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +394,398 @@            val startOfWord =\n              if (lastSpace < lastDot && lastSpace >= 0) lastSpace else lastDot\n            reversedString.slice(0, startOfWord).reverse\n          } else {\n            entered.toString"
  }
]