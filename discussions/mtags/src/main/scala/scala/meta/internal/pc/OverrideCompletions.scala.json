[
  {
    "id" : "ebca9643-bdf7-462d-8b3d-ffd85471348d",
    "prId" : 1379,
    "prUrl" : "https://github.com/scalameta/metals/pull/1379#pullrequestreview-352051211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6f64bde-9fe5-441f-820d-8d4f2c646b93",
        "parentId" : null,
        "authorId" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "body" : "The followings code comes from `Completions.scala`",
        "createdAt" : "2020-02-03T07:06:25Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@  private val DefaultIndent = 2\n\n  class OverrideDefMember(\n      val label: String,\n      val edit: l.TextEdit,"
  },
  {
    "id" : "2fa3babf-f21d-4917-a72f-5bdfe92cfa78",
    "prId" : 1379,
    "prUrl" : "https://github.com/scalameta/metals/pull/1379#pullrequestreview-352051211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c55cc8f-dd08-492b-a0e4-92e92c4b15d7",
        "parentId" : null,
        "authorId" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "body" : "Extracted the logic to calculate the list of `OverrideDefMember` so that this method can be used from both\r\n- `case class Override`\r\n- `implementAll()`",
        "createdAt" : "2020-02-03T07:08:29Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +104,108 @@  }\n\n  private def getMembers(\n      typed: Tree,\n      range: l.Range,"
  },
  {
    "id" : "94d1116f-2122-4a4c-a2ee-aad24e0e8e03",
    "prId" : 1379,
    "prUrl" : "https://github.com/scalameta/metals/pull/1379#pullrequestreview-352051211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7cc8193-b325-4390-9d7c-163f74f4992f",
        "parentId" : null,
        "authorId" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "body" : "The following codes are new ones.",
        "createdAt" : "2020-02-03T07:09:09Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : 294,
    "diffHunk" : "@@ -1,1 +292,296 @@  private def isVarSetter(sym: Symbol): Boolean =\n    !sym.isStable && !sym.isLazy && sym.isAccessor\n\n  def implementAllAt(pos: Position, text: String): List[l.TextEdit] = {\n"
  },
  {
    "id" : "bf84fae1-9ee2-4036-974a-9015510bdd56",
    "prId" : 1379,
    "prUrl" : "https://github.com/scalameta/metals/pull/1379#pullrequestreview-352057702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c9c62ec-d81b-40a2-b72e-005e5d6c47ce",
        "parentId" : null,
        "authorId" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "body" : "Find the explicit declaration in the class/object so that we can infer the indent from them.\r\n\r\n```scala\r\nobject X {\r\n  trait Foo {\r\n    def foo(x: Int): Int\r\n  }\r\n  class Bar extends Foo {\r\n               val x = 1\r\n  }\r\n}\r\n```\r\n\r\nto \r\n\r\n```scala\r\nobject X {\r\n  // ...\r\n  class Bar extends Foo {\r\n          override def foo(x: Int): Int = ???\r\n          val x = 1\r\n  }\r\n}\r\n```\r\n\r\ninstead of \r\n\r\n```scala\r\nobject X {\r\n  // ...\r\n  class Bar extends Foo {\r\n    override def foo(x: Int): Int = ???\r\n          val x = 1\r\n  }\r\n}\r\n```\r\n\r\n---\r\n\r\n**Removing primary constructor** by `sym.pos.line != t.pos.line`, because if it remains and infers the indent from that, the result will be\r\n\r\n```scala\r\nobject X {\r\n  // ...\r\n  class Bar(init: Int) extends Foo {\r\n  override def foo(x: Int): Int = ???\r\n          val x = 1\r\n  }\r\n}\r\n```\r\n\r\nI thought it could be filtered out using `!sym.isPrimaryConstructor` but it remains ü§î ",
        "createdAt" : "2020-02-03T07:26:01Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : 398,
    "diffHunk" : "@@ -1,1 +396,400 @@            !sym.isPrimaryConstructor &&\n            sym.pos.line != t.pos.line // filter out explicit primary constructor `class Foo(x: Int) ...`\n        )\n        .headOption\n        .map(existing => {"
  },
  {
    "id" : "ca01739f-ec3f-4a51-b821-6d41f4707ccc",
    "prId" : 1379,
    "prUrl" : "https://github.com/scalameta/metals/pull/1379#pullrequestreview-355536272",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "957afee5-8385-4479-8c2d-61fcb2f2bbd4",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "What about:\r\n```\r\nobject Foo extends Bar {}\r\n```\r\n?",
        "createdAt" : "2020-02-03T15:55:14Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "b653080c-cfa1-4787-9ae8-2ee48386646f",
        "parentId" : "957afee5-8385-4479-8c2d-61fcb2f2bbd4",
        "authorId" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "body" : "Oops, I missed that situation, we have to add the following case:\r\n\r\n```scala\r\ncase (m: ModuleDef) :: _ =>\r\n  // ...\r\n```\r\n\r\nto capture object's definition. ",
        "createdAt" : "2020-02-08T06:11:48Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "tags" : [
        ]
      },
      {
        "id" : "403c23c0-9df8-4158-b1cf-d1699bcbc146",
        "parentId" : "957afee5-8385-4479-8c2d-61fcb2f2bbd4",
        "authorId" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "body" : "done in https://github.com/scalameta/metals/pull/1379/commits/0bd0092ecb6890e62d2b137b085fed55d4db5473 :)",
        "createdAt" : "2020-02-08T07:56:16Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : 318,
    "diffHunk" : "@@ -1,1 +316,320 @@      // class Foo extends Bar {}\n      // ~~~~~~~~~~~~~~~~~~~~~~~~\n      case (c: ClassDef) :: _ =>\n        val t = c.impl\n        implementAllFor(t)"
  },
  {
    "id" : "eb0eb10b-ab9a-4e7e-beac-79887e7ec47a",
    "prId" : 1379,
    "prUrl" : "https://github.com/scalameta/metals/pull/1379#pullrequestreview-356039020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65ead7ad-4ce8-4840-b8e8-b41edb714b16",
        "parentId" : null,
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "all the cases are nearly identical in their implementation, the only difference is how they extract a tree. Can we maybe extract it to a utility method taking a Tree as input?",
        "createdAt" : "2020-02-09T21:36:49Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "dfd2657e-5a92-4bf8-835f-284fc2e8fc8e",
        "parentId" : "65ead7ad-4ce8-4840-b8e8-b41edb714b16",
        "authorId" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "body" : "done in https://github.com/scalameta/metals/pull/1379/commits/761a52952d7d9138cba683bbbd1c638723889903\r\nThank you for your advice, it's much clear :)",
        "createdAt" : "2020-02-10T15:40:48Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : 324,
    "diffHunk" : "@@ -1,1 +322,326 @@      // object Foo extends Bar {}\n      // ~~~~~~~~~~~~~~~~~~~~~~~~\n      case (m: ModuleDef) :: _ =>\n        val t = m.impl\n        implementAllFor(t)"
  },
  {
    "id" : "0c44539d-6fc5-4d50-accf-9876711c8cb2",
    "prId" : 1379,
    "prUrl" : "https://github.com/scalameta/metals/pull/1379#pullrequestreview-356033665",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76781d71-d36d-44ba-94d3-27f521d77df7",
        "parentId" : null,
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "defaultIndent (lowercase D)?",
        "createdAt" : "2020-02-09T21:41:04Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "5e13b384-7ba8-4a75-9b6d-83233d21bea9",
        "parentId" : "76781d71-d36d-44ba-94d3-27f521d77df7",
        "authorId" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "body" : "Personally, I usually use upper camel case for constants https://docs.scala-lang.org/style/naming-conventions.html#constants-values-variable-and-methods, and [metals seem that it also follow this naming convention](https://github.com/scalameta/metals/blob/60e3d151dd80f0def1a122ff54e5c2f9e805e6cb/metals/src/main/scala/scala/meta/internal/metals/ClientExperimentalCapabilities.scala#L12).\r\n\r\nI don't have a strong opinion around a naming convention, but what do you think about this? :)",
        "createdAt" : "2020-02-10T07:01:12Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : "9cdd9387-08db-4d42-9b6d-ceaa233cadd5",
        "tags" : [
        ]
      },
      {
        "id" : "5237c010-199c-45f2-8c93-bca2e22736c3",
        "parentId" : "76781d71-d36d-44ba-94d3-27f521d77df7",
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "I don't mind either, let's leave it like this üëç ",
        "createdAt" : "2020-02-10T15:34:34Z",
        "updatedAt" : "2020-02-11T11:11:05Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e100253dce0a50a1201510f9bec11fbe8f298bbb",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +10,14 @@trait OverrideCompletions { this: MetalsGlobal =>\n\n  private val DefaultIndent = 2\n\n  class OverrideDefMember("
  }
]