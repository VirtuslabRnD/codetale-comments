[
  {
    "id" : "9c8a1566-4367-4764-9e50-8efcbbd8b90d",
    "prId" : 736,
    "prUrl" : "https://github.com/scalameta/metals/pull/736#pullrequestreview-244201245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf2cdea4-e894-444b-a535-0cf3af199f81",
        "parentId" : null,
        "authorId" : "a1d420d1-83d4-48b5-b245-772065f6633b",
        "body" : "Can we somehow limit the capacity? Unbounded queues in multi-threaded environment make me uneasy",
        "createdAt" : "2019-05-29T14:51:25Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : "a1d420d1-83d4-48b5-b245-772065f6633b",
        "tags" : [
        ]
      },
      {
        "id" : "0e5839d3-1509-41ac-9aab-ca68fee40583",
        "parentId" : "cf2cdea4-e894-444b-a535-0cf3af199f81",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "We construct the queue in the same way as `Executors.newSingleThreadExecutor()`. All submitted jobs are automatically cancelled after a configurable timeout and cancelled runnables exit immediately (they don't even call the submitted function).",
        "createdAt" : "2019-05-31T09:20:12Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +77,81 @@\n  /** Priority queue that runs the most recently submitted task first. */\n  private class LastInFirstOutBlockingQueue\n      extends PriorityBlockingQueue[Runnable](10, new ju.Comparator[Runnable] {\n        def compare(o1: Runnable, o2: Runnable): Int = {"
  },
  {
    "id" : "a362ab36-7bc3-49c7-b021-18d91a7b118e",
    "prId" : 736,
    "prUrl" : "https://github.com/scalameta/metals/pull/736#pullrequestreview-244201245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "045d0f0e-6d7a-49cb-adf8-349402468b32",
        "parentId" : null,
        "authorId" : "a1d420d1-83d4-48b5-b245-772065f6633b",
        "body" : "Can we make it `PriorityBlockingQueue[Job]`?",
        "createdAt" : "2019-05-29T14:52:03Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : "a1d420d1-83d4-48b5-b245-772065f6633b",
        "tags" : [
        ]
      },
      {
        "id" : "f18b9110-9c9c-46ac-b199-ee55032a422d",
        "parentId" : "045d0f0e-6d7a-49cb-adf8-349402468b32",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "We can but then we would have to move the cast to `asInstanceOf[BlockingQueue[Runnable]]` in the `ThreadPoolExecutor`. I added a comment why these casts are safe.",
        "createdAt" : "2019-05-31T09:37:27Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +78,82 @@  /** Priority queue that runs the most recently submitted task first. */\n  private class LastInFirstOutBlockingQueue\n      extends PriorityBlockingQueue[Runnable](10, new ju.Comparator[Runnable] {\n        def compare(o1: Runnable, o2: Runnable): Int = {\n          // Downcast is safe because we only submit `Job` runnables into this"
  },
  {
    "id" : "cde169e4-05be-4af4-9d0e-df177414c8e2",
    "prId" : 736,
    "prUrl" : "https://github.com/scalameta/metals/pull/736#pullrequestreview-244232306",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8512f269-1f17-4c86-bebe-a430a666529f",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "can it just be `=> Unit` ? Would avoid having to write additional () => when submitting any job.",
        "createdAt" : "2019-05-30T14:56:02Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "99bee281-53be-419a-bec1-d651a52564ea",
        "parentId" : "8512f269-1f17-4c86-bebe-a430a666529f",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "It can be but I don't think it would make the code more readable. As a general rule of thumb I avoid by-name parameters until it's become painful to write the leading `() =>`. In this case, we only call `submit` once.  ",
        "createdAt" : "2019-05-31T09:18:36Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      },
      {
        "id" : "a68fc39e-d830-4e4d-bcae-871496c9a56f",
        "parentId" : "8512f269-1f17-4c86-bebe-a430a666529f",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "It's also a couple times in tests, but it's ok with me.",
        "createdAt" : "2019-05-31T10:06:41Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "89edc091-f75c-4158-a029-0fc52d997d60",
        "parentId" : "8512f269-1f17-4c86-bebe-a430a666529f",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "I personally think it's more readable with the leading `() =>` at call-sites. It's only for APIs that are used a lot like `Option[T].getOrElse(=>T)` where I think by-name is justified.",
        "createdAt" : "2019-05-31T10:09:29Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@  override def toString(): String = s\"CompilerJobQueue($executor)\"\n  def shutdown(): Unit = executor.shutdown()\n  def submit(fn: () => Unit): Unit = {\n    submit(new CompletableFuture[Unit](), fn)\n  }"
  }
]