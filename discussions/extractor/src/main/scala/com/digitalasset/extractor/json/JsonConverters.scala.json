[
  {
    "id" : "dded574f-9cbb-46cb-8faf-ba34024d48a5",
    "prId" : 9528,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef174c50-37fd-4d90-b788-cfbbf27dd07d",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "`JsBoolean` has a custom unapply.",
        "createdAt" : "2021-04-29T07:30:57Z",
        "updatedAt" : "2021-04-29T09:04:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "94275008086af6fa6c1f971d095f7d2c1a71e9ac",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +29,33 @@      case sj.JsString(v) => Json fromString v\n      case sj.JsNumber(v) => Json fromBigDecimal v\n      case sj.JsTrue => Json fromBoolean true\n      case sj.JsFalse => Json fromBoolean false\n      case sj.JsObject(v) => Json fromFields (v transform ((_, e) => sprayToCirce(e)))"
  },
  {
    "id" : "6e7ec113-7f09-4ec8-8597-8d8ede9785ef",
    "prId" : 3121,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b61236e-ca98-47f2-aafa-d6fa52767ec7",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "shouldn't both be set to `true` by default? or is it set this way for backward compatibility? Do we really care about backward compatibility here?",
        "createdAt" : "2019-10-09T17:33:52Z",
        "updatedAt" : "2019-10-10T11:43:34Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "73c08a22-a83b-4850-ba56-6b1bea82ec6a",
        "parentId" : "9b61236e-ca98-47f2-aafa-d6fa52767ec7",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "> shouldn't both be set to `true` by default?\r\n\r\nNo; the reasons true is good in other contexts are bad reasons here; in fact it would be better to make them both false here.\r\n\r\n> is it set this way for backward compatibility?\r\n\r\nYes. \r\n\r\n> Do we really care about backward compatibility here?\r\n\r\nYes.\r\n\r\nI don't know what queries have been written against extractor, so I'm minimizing the change while still accomplishing our goal of encoding unification.",
        "createdAt" : "2019-10-09T22:05:39Z",
        "updatedAt" : "2019-10-10T11:43:34Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "52a470129873a3be85c9b40a992b70fabb5cfb74",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +19,23 @@      extends ApiCodecCompressed[String](\n        encodeDecimalAsString = true,\n        encodeInt64AsString = false\n      ) {\n    import spray.json._, ApiCodecCompressed.JsonImplicits.StringJsonFormat"
  },
  {
    "id" : "5f672d03-82d9-4631-a348-a9b48cb8ef3d",
    "prId" : 1117,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54771924-49fb-4bb5-ab40-550ae13fcb27",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "cc @bitonic @remyhaemmerle-da @leo-da for JSON-pinions",
        "createdAt" : "2019-05-14T22:38:03Z",
        "updatedAt" : "2019-05-15T22:56:55Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "f5d1a140-3401-434c-9793-0e62e82c4d63",
        "parentId" : "54771924-49fb-4bb5-ab40-550ae13fcb27",
        "authorId" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "body" : "Yes, i think we should change this to use string representations, as we did with the old JSON-through-LfTypeEncoding. Feel free to change this in the next PR though.",
        "createdAt" : "2019-05-15T10:03:19Z",
        "updatedAt" : "2019-05-15T22:56:55Z",
        "lastEditedBy" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "tags" : [
        ]
      }
    ],
    "commit" : "a933c9948d4fd9990fc99ba78d4a2703561922c0",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +108,112 @@\n  // TODO SC this matches the prior behavior of JSON-ing the dates and timestamps\n  // as days-since and micros-since epoch, but maybe we'd like something else?\n  implicit val lfDateEncoder: Encoder[Time.Date] =\n    Encoder[Int].contramap(_.days)"
  },
  {
    "id" : "afa0746b-289f-4d72-a40b-8187466e3484",
    "prId" : 1117,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9715c28a-bcdc-442f-961f-4f40b92ef598",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "we convert `record.fields` to sequence twice for no reason, no matter which if/else branch we go... could reuse the value returned by the 1st `toSeq` call.\r\n\r\nI hope we have a test case for a record with one label present `Some(x)`, and one absent `None`. Not sure if `record.fields.toSeq.map(_.asJson).asJson` will do the right thing.",
        "createdAt" : "2019-05-15T16:55:24Z",
        "updatedAt" : "2019-05-15T22:56:55Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "a37f48bb-1006-4c52-a2ef-644a395ddecf",
        "parentId" : "9715c28a-bcdc-442f-961f-4f40b92ef598",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "> we convert `record.fields` to sequence twice for no reason, no matter which if/else branch we go... could reuse the value returned by the 1st `toSeq` call.\r\n\r\n`toSeq` is ridiculously cheap, little value in combining.\r\n\r\n> I hope we have a test case for a record with one label present `Some(x)`, and one absent `None`.\r\n\r\nNope! I'll add one.",
        "createdAt" : "2019-05-15T17:08:32Z",
        "updatedAt" : "2019-05-15T22:56:55Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "a933c9948d4fd9990fc99ba78d4a2703561922c0",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +28,32 @@\n  implicit val recordEncoder: Encoder[OfCid[V.ValueRecord]] = record =>\n    if (record.fields.toSeq.forall(_._1.isDefined))\n      JsonObject(\n        record.fields.toSeq"
  }
]