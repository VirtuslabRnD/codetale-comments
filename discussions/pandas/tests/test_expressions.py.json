[
  {
    "id" : "5895ed1f-ec1a-4120-a9be-0df1c4b941f2",
    "prId" : 22416,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22416#pullrequestreview-188426936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8df8038-9800-418d-b585-397e7783eb13",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update as I indicated",
        "createdAt" : "2018-12-29T15:51:04Z",
        "updatedAt" : "2018-12-31T06:11:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "83be97ab-1345-4808-8505-07fed1987516",
        "parentId" : "d8df8038-9800-418d-b585-397e7783eb13",
        "authorId" : "b53b1458-6bc3-4c6a-b7be-f184dcf7d1fe",
        "body" : "@jreback i modify code! is it okay?",
        "createdAt" : "2018-12-30T02:30:21Z",
        "updatedAt" : "2018-12-31T06:11:34Z",
        "lastEditedBy" : "b53b1458-6bc3-4c6a-b7be-f184dcf7d1fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fe9effd2dc92aa44cc65c502221f4033262c342",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +453,457 @@                   columns=['a', 'b', 'c', 'dtype']),\n         DataFrame([[False, False], [False, False],\n                   [False, False]], columns=['a', 'dtype'])),\n    ])\n    def test_bool_ops_column_name_dtype(self, test_input, expected):"
  },
  {
    "id" : "22afc237-33d9-4de2-960d-905713aac943",
    "prId" : 27773,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27773#pullrequestreview-271379321",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9bc9136-cbcb-479b-be7a-c294d38c0229",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this is clearer if done with two separate pytest.mark.parametrize lines",
        "createdAt" : "2019-08-06T14:18:30Z",
        "updatedAt" : "2019-08-14T18:58:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0100aba65a833542f78d2e9e410b1019f266158b",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +434,438 @@    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):"
  },
  {
    "id" : "a7c4ea75-8d12-4c4d-bb03-aec62bc0c4eb",
    "prId" : 27773,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27773#pullrequestreview-276700171",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8df2e59-6835-422d-9a66-51c29f876461",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What does this do?",
        "createdAt" : "2019-08-07T22:18:17Z",
        "updatedAt" : "2019-08-14T18:58:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "5c31dc5f-1c70-4207-862e-44285a639b0e",
        "parentId" : "a8df2e59-6835-422d-9a66-51c29f876461",
        "authorId" : "6abf7eb4-67c3-4359-930c-2853e9e42b5a",
        "body" : "There is an overhead in using numexpr for computations that makes it not worth using for a low number of computations. The values of this defaults to: 10,000. In this test suite we are trying to verify that numexpr is being invoked correctly however the function _can_use_numexpr checks that the objects operated on are sufficient size:\r\n\r\n```python\r\ndef _can_use_numexpr(op, op_str, a, b, dtype_check):\r\n    \"\"\" return a boolean if we WILL be using numexpr \"\"\"\r\n    if op_str is not None:\r\n        # required min elements (otherwise we are adding overhead)\r\n        if np.prod(a.shape) > _MIN_ELEMENTS:\r\n            # further dtype checks to check compatibility may return True\r\n    return False\r\n```\r\n\r\nWe can therefore run the test suite exclusively on objects where the number of elements > 10,000 or set the min elements to zero to always try and use numexpr.\r\n\r\nThis is what is meant by a \"large DataFrame\". Anything where the size of the objects is large enough to warrant using numexpr fails because of the regression, anything that is smaller than the threshold will succeed because numexpr evaluation will not even be considered.",
        "createdAt" : "2019-08-08T12:57:40Z",
        "updatedAt" : "2019-08-14T18:58:00Z",
        "lastEditedBy" : "6abf7eb4-67c3-4359-930c-2853e9e42b5a",
        "tags" : [
        ]
      },
      {
        "id" : "67b0a611-ec3d-47a2-8fb5-da83f5d0f999",
        "parentId" : "a8df2e59-6835-422d-9a66-51c29f876461",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hmm is affecting global state, right? I worry about this leaking into other tests...\r\n\r\nCan you use the `monkeypatch` fixture, and do this setting with (IIRC) `monkeypatch.setattr`? That way it'll be undone when the test exits.",
        "createdAt" : "2019-08-12T13:58:30Z",
        "updatedAt" : "2019-08-14T18:58:00Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5fe93e30-032e-4cd6-9b35-40265ccc11b2",
        "parentId" : "a8df2e59-6835-422d-9a66-51c29f876461",
        "authorId" : "6abf7eb4-67c3-4359-930c-2853e9e42b5a",
        "body" : "It is but this is handled in the test classes teardown method on line 57 so the global state won't be affected permanently. I can move my test out of the class and handle this with monkeypatch or we can keep the setup/teardown framework already implemented in the TestExpressions class.",
        "createdAt" : "2019-08-12T19:01:19Z",
        "updatedAt" : "2019-08-14T18:58:00Z",
        "lastEditedBy" : "6abf7eb4-67c3-4359-930c-2853e9e42b5a",
        "tags" : [
        ]
      },
      {
        "id" : "afbff85a-b1d7-4394-a10c-10349383dd1c",
        "parentId" : "a8df2e59-6835-422d-9a66-51c29f876461",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Thanks, I wasn't familiar with these tests.",
        "createdAt" : "2019-08-19T17:19:32Z",
        "updatedAt" : "2019-08-19T17:19:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0100aba65a833542f78d2e9e410b1019f266158b",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +447,451 @@            other = self.frame.iloc[:, 0]\n\n        expr._MIN_ELEMENTS = 0\n\n        op_func = getattr(df, arith)"
  },
  {
    "id" : "4c21a5ed-5a63-478d-8acc-3b4b7c3418d2",
    "prId" : 27773,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27773#pullrequestreview-272811787",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "786b249a-ed3a-43fc-a7da-807730694508",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you add GH number as a comment here?",
        "createdAt" : "2019-08-07T22:18:35Z",
        "updatedAt" : "2019-08-14T18:58:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ea1cf340-8d54-4b7a-a85b-9d76a08985ae",
        "parentId" : "786b249a-ed3a-43fc-a7da-807730694508",
        "authorId" : "6abf7eb4-67c3-4359-930c-2853e9e42b5a",
        "body" : "Added",
        "createdAt" : "2019-08-08T20:13:49Z",
        "updatedAt" : "2019-08-14T18:58:00Z",
        "lastEditedBy" : "6abf7eb4-67c3-4359-930c-2853e9e42b5a",
        "tags" : [
        ]
      }
    ],
    "commit" : "0100aba65a833542f78d2e9e410b1019f266158b",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +438,442 @@    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n"
  },
  {
    "id" : "66d3f8be-fa7b-4241-a38d-65120038725f",
    "prId" : 28478,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28478#pullrequestreview-289458980",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17a6d4de-69d1-4ef1-842d-445306b3ba05",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Do you find `list(zip(...)` clearer than writing out the pairs?\r\n\r\n```python\r\n[('/', 'truediv'), ...]\r\n```",
        "createdAt" : "2019-09-17T16:40:52Z",
        "updatedAt" : "2019-09-17T16:42:17Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "45ab2406-8c44-4973-b1d5-dba65675fc32",
        "parentId" : "17a6d4de-69d1-4ef1-842d-445306b3ba05",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Good idea.  Will change in next pass.",
        "createdAt" : "2019-09-17T18:23:11Z",
        "updatedAt" : "2019-09-17T18:23:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "70e3f7e392e98d637d7e9133fc93049dc9e66bfe",
    "line" : 162,
    "diffHunk" : "@@ -1,1 +333,337 @@\n    @pytest.mark.parametrize(\n        \"op_str,opname\", list(zip([\"/\", \"//\", \"**\"], [\"truediv\", \"floordiv\", \"pow\"]))\n    )\n    def test_bool_ops_raise_on_arithmetic(self, op_str, opname):"
  },
  {
    "id" : "4e02dff3-a562-4962-9d7f-87e42e36b326",
    "prId" : 28493,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28493#pullrequestreview-290028877",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bac7eb72-ccdc-433b-836d-74eecfc4d1f5",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is this function even necessary? I think this could be cleaned up a lot if all of these functions were just parametrized instead of indirected across a few functions",
        "createdAt" : "2019-09-18T15:20:56Z",
        "updatedAt" : "2019-09-18T15:20:56Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "5b3c9593-c136-47f5-95f6-55d8a74ab789",
        "parentId" : "bac7eb72-ccdc-433b-836d-74eecfc4d1f5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think we can clean it up further if we get the run_binary thing working more consistently",
        "createdAt" : "2019-09-18T15:56:50Z",
        "updatedAt" : "2019-09-18T15:56:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f2ef966a9101a40f84aef39d2c415a21fe15d74",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +101,105 @@                tm.assert_equal(expected, result)\n\n    def run_frame(self, df, other, run_binary=True):\n        self.run_arithmetic(df, other)\n        if run_binary:"
  },
  {
    "id" : "fc030298-d810-4142-9ee3-82d4597dd4ca",
    "prId" : 36552,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36552#pullrequestreview-494973644",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b74485dd-0b26-44ef-8a8d-579327b4322c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I see it is done like that in other tests as well (so doesn't need to be fixed here), but that doesn't seem a very clean way to patch this, as it will influence other tests as well",
        "createdAt" : "2020-09-23T19:06:34Z",
        "updatedAt" : "2020-09-30T17:59:19Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "254821c2-be94-4276-ae8a-c03d0dea870a",
        "parentId" : "b74485dd-0b26-44ef-8a8d-579327b4322c",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "this is an class with a teardown_method that resets _MIN_ELEMENTS ",
        "createdAt" : "2020-09-23T19:13:06Z",
        "updatedAt" : "2020-09-30T17:59:19Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "05e64a86-1b58-434d-81fb-45ac5263a5de",
        "parentId" : "b74485dd-0b26-44ef-8a8d-579327b4322c",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "but yes we should replace with a fixture.",
        "createdAt" : "2020-09-23T19:13:39Z",
        "updatedAt" : "2020-09-30T17:59:19Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "b396c820-97f6-4ddd-9f81-e334f18974ab",
        "parentId" : "b74485dd-0b26-44ef-8a8d-579327b4322c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, didn't see the teardown/setup, only the import at the top ..",
        "createdAt" : "2020-09-23T19:16:23Z",
        "updatedAt" : "2020-09-30T17:59:19Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f9b91d56ad4812fc15e134159e5714e939195aa",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +395,399 @@    def test_python_semantics_with_numexpr_installed(self, op, box, scalar):\n        # https://github.com/pandas-dev/pandas/issues/36047\n        expr._MIN_ELEMENTS = 0\n        data = np.arange(-50, 50)\n        obj = box(data)"
  },
  {
    "id" : "95db9153-a233-42b6-b938-c4ce54584843",
    "prId" : 40445,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40445#pullrequestreview-615459507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c14f438f-eceb-4b60-b6d7-9529b3074b1c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we *really* need to use fixtures for this module.....can you create an issue",
        "createdAt" : "2021-03-16T20:32:50Z",
        "updatedAt" : "2021-03-23T11:10:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f69ce5bd-a46c-4b00-8500-c7410c71ba38",
        "parentId" : "c14f438f-eceb-4b60-b6d7-9529b3074b1c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yeah, opened https://github.com/pandas-dev/pandas/issues/40497 for this",
        "createdAt" : "2021-03-18T14:30:33Z",
        "updatedAt" : "2021-03-23T11:10:36Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4463064c6e5161a409a9e5c8a9107299a0645f6",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +41,45 @@\n_array_mixed = _mixed[\"D\"].values.copy()\n_array_mixed2 = _mixed2[\"D\"].values.copy()\n\n"
  }
]