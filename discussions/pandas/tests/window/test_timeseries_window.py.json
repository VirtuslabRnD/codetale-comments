[
  {
    "id" : "75a2d0bd-d1d6-41a2-93d8-07651f43ebcb",
    "prId" : 27305,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27305#pullrequestreview-259571097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "008f962d-071f-4eff-abe3-b1db406489c3",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Good case for parametrization here (and a few functions below)",
        "createdAt" : "2019-07-09T15:12:36Z",
        "updatedAt" : "2019-07-10T16:25:37Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7012d11b4dce1d160957e0e0dcc381d7751b8201",
    "line" : 352,
    "diffHunk" : "@@ -1,1 +350,354 @@    def test_ragged_std(self):\n\n        df = self.ragged\n        result = df.rolling(window=\"1s\", min_periods=1).std(ddof=0)\n        expected = df.copy()"
  },
  {
    "id" : "0866ecdd-f9dc-4f83-a174-ecfd8c89df07",
    "prId" : 28297,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28297#pullrequestreview-304244942",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd2f7c5e-c10d-473e-8a42-7ebb00ced6ed",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is a very odd way of calling this as it should be a scalar. why do you think we should allow this way?",
        "createdAt" : "2019-10-16T12:46:46Z",
        "updatedAt" : "2019-10-19T20:11:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bea75281-f1a4-4c3e-9530-2ec7bc323237",
        "parentId" : "fd2f7c5e-c10d-473e-8a42-7ebb00ced6ed",
        "authorId" : "2c23abce-829f-478d-a108-e7b7cc34173c",
        "body" : "not sure if I understand you. how about passing something like `level = 0` to identify the datetime column of multi index to use for comparing rolling window?",
        "createdAt" : "2019-10-18T14:53:20Z",
        "updatedAt" : "2019-10-19T20:11:02Z",
        "lastEditedBy" : "2c23abce-829f-478d-a108-e7b7cc34173c",
        "tags" : [
        ]
      },
      {
        "id" : "3d319deb-b8aa-4de2-af7f-f8aee86036d3",
        "parentId" : "fd2f7c5e-c10d-473e-8a42-7ebb00ced6ed",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right what I mean, is that this doesn't make rolling any more friendly to a Multi-index. we would need to add a ``level=`` kwarg that can be used internall to create the on. Would take a followup PR for that.",
        "createdAt" : "2019-10-18T17:39:38Z",
        "updatedAt" : "2019-10-19T20:11:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4d3593b3-0605-45c7-bab5-482ef19605b7",
        "parentId" : "fd2f7c5e-c10d-473e-8a42-7ebb00ced6ed",
        "authorId" : "2c23abce-829f-478d-a108-e7b7cc34173c",
        "body" : "ok",
        "createdAt" : "2019-10-20T07:04:11Z",
        "updatedAt" : "2019-10-20T07:04:11Z",
        "lastEditedBy" : "2c23abce-829f-478d-a108-e7b7cc34173c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b46dc504c715ecc3ea7d81240eb0a8bb4e0c441",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +733,737 @@            ),\n        )\n        result = df.rolling(\"10d\", on=df.index.get_level_values(\"date\")).sum()\n        expected = DataFrame(\n            {\"column\": [0.0, 1.0, 3.0, 6.0, 10.0, 15.0]}, index=df.index"
  },
  {
    "id" : "bd5fb381-8c0f-4106-9eea-d31185b1e933",
    "prId" : 28297,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28297#pullrequestreview-304036716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56565ce0-e71b-4d33-a814-d3be98236504",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the issue number as a comment",
        "createdAt" : "2019-10-18T17:37:02Z",
        "updatedAt" : "2019-10-19T20:11:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b46dc504c715ecc3ea7d81240eb0a8bb4e0c441",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +116,120 @@    def test_non_monotonic_on(self):\n        # GH 19248\n        df = DataFrame(\n            {\"A\": date_range(\"20130101\", periods=5, freq=\"s\"), \"B\": range(5)}\n        )"
  },
  {
    "id" : "6b569d6b-b12a-49fe-8740-08fd26d3f04b",
    "prId" : 28297,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28297#pullrequestreview-366865243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d22c3d60-3bfd-44cf-8b0a-d3a7e36606fe",
        "parentId" : null,
        "authorId" : "118622be-28e8-4a6a-9776-9244ac355638",
        "body" : "It seems to me that the 2 seconds time window is not respected, but the minimum is taken over the whole dataframe. To my understanding, the excpected results would be [3, 4, 2, 1, 1] (closed interval limits) or [3, 4, 2, 2, 1] (open interval end). Even if you consider the next 2 seconds in time order, i.e. the other way round, you would have [3, 3, 4, 2, 1].",
        "createdAt" : "2019-11-28T09:27:00Z",
        "updatedAt" : "2019-11-28T09:27:01Z",
        "lastEditedBy" : "118622be-28e8-4a6a-9776-9244ac355638",
        "tags" : [
        ]
      },
      {
        "id" : "02487c07-8bf7-4e40-b6e7-7f2b2e47f379",
        "parentId" : "d22c3d60-3bfd-44cf-8b0a-d3a7e36606fe",
        "authorId" : "ad73ea01-1e28-4c7d-bb2e-c4d481ba5033",
        "body" : "Same issue found here. By using df.rolling().apply(func), we can print the window inside func and it is the while dataframe till current offset.",
        "createdAt" : "2020-02-16T07:06:54Z",
        "updatedAt" : "2020-02-16T07:08:40Z",
        "lastEditedBy" : "ad73ea01-1e28-4c7d-bb2e-c4d481ba5033",
        "tags" : [
        ]
      },
      {
        "id" : "9cc8f2b4-0ea7-431f-b7e2-95774541678f",
        "parentId" : "d22c3d60-3bfd-44cf-8b0a-d3a7e36606fe",
        "authorId" : "2c23abce-829f-478d-a108-e7b7cc34173c",
        "body" : "You're right, the expected result is wrong. I debugged it a bit and found out that `VariableWindowIndexer` indeed works only if the index is monotonic and increasing. I will create another PR to finally fix this.\r\n\r\nEDIT: Here it comes: https://github.com/pandas-dev/pandas/pull/32386",
        "createdAt" : "2020-03-01T15:04:04Z",
        "updatedAt" : "2020-03-01T16:01:26Z",
        "lastEditedBy" : "2c23abce-829f-478d-a108-e7b7cc34173c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b46dc504c715ecc3ea7d81240eb0a8bb4e0c441",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +721,725 @@        result = df.rolling(\"2s\").min()\n        expected = DataFrame(\n            {\"column\": [3.0, 3.0, 3.0, 2.0, 1.0]}, index=reversed(index)\n        )\n        tm.assert_frame_equal(result, expected)"
  },
  {
    "id" : "23480cc9-d426-463d-857b-f58650c3cc82",
    "prId" : 32386,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32386#pullrequestreview-371436813",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "935acc17-0ae9-4ee0-801e-cdca131338e4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you confrm that we have tests for min/max on an empty frame ",
        "createdAt" : "2020-03-04T13:35:41Z",
        "updatedAt" : "2020-03-09T18:42:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0632b8dd-fb10-47b1-8f55-9bd71fad6196",
        "parentId" : "935acc17-0ae9-4ee0-801e-cdca131338e4",
        "authorId" : "2c23abce-829f-478d-a108-e7b7cc34173c",
        "body" : "test added ",
        "createdAt" : "2020-03-09T18:42:28Z",
        "updatedAt" : "2020-03-09T18:42:28Z",
        "lastEditedBy" : "2c23abce-829f-478d-a108-e7b7cc34173c",
        "tags" : [
        ]
      }
    ],
    "commit" : "281152a512e46f22fd2c4d1e021664d12c359436",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +710,714 @@\n    def test_rolling_on_decreasing_index(self):\n        # GH-19248, GH-32385\n        index = [\n            Timestamp(\"20190101 09:00:30\"),"
  }
]