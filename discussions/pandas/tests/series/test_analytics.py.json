[
  {
    "id" : "8d6d7c2a-2856-43f9-ad13-e4b42ab8f2d7",
    "prId" : 21332,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21332#pullrequestreview-134826080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1f4d69b-e8d2-4d97-8e8b-88c0c142b826",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Could you add a comment with the issue number, like `GH #21332`",
        "createdAt" : "2018-07-05T21:34:36Z",
        "updatedAt" : "2018-07-06T14:29:26Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0af475822bd69ec074a97682f8520b4da1fe29b1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +337,341 @@        tm.assert_series_equal(result, expected)\n\n    def test_describe_with_tz(self, tz_naive_fixture):\n        # GH 21332\n        tz = tz_naive_fixture"
  },
  {
    "id" : "60537f4c-fc9d-4621-8005-0c17aae28dd5",
    "prId" : 21614,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21614#pullrequestreview-134869767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a37f16a3-d0be-4837-aa01-501b5570dbca",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is the `check_stacklevel=False` needed?",
        "createdAt" : "2018-07-05T16:56:33Z",
        "updatedAt" : "2018-07-06T03:12:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "3c849a1a-0783-4beb-b59c-5041cec98cdf",
        "parentId" : "a37f16a3-d0be-4837-aa01-501b5570dbca",
        "authorId" : "db2002f5-d426-4f7c-9815-4de0d8b60e7d",
        "body" : "Yes - it seems to be required, not for this particular check(i.e. `assert s.ptp() == 13`), but for e.g. the following\r\n```python\r\ntm.assert_series_equal(s.ptp(level=0), expected)\r\n```\r\nwithout it, this test was failing with `AssertionError: Warning not set with correct stacklevel.`\r\n\r\nI also did trial-and-error with different stacklevels, without any success (though stacklevel=4 seems to be appropriate for where the warning is raised)\r\n\r\nAny suggestions? Thanks",
        "createdAt" : "2018-07-06T02:14:02Z",
        "updatedAt" : "2018-07-06T03:12:46Z",
        "lastEditedBy" : "db2002f5-d426-4f7c-9815-4de0d8b60e7d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cede49640aca5b70f02399dd3dd12c742ffd8066",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1404,1408 @@        # GH11163\n        s = Series([3, 5, np.nan, -3, 10])\n        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n            assert s.ptp() == 13\n            assert pd.isna(s.ptp(skipna=False))"
  },
  {
    "id" : "ee3dc7ce-6e77-4b27-96ab-db467d17b290",
    "prId" : 22684,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22684#pullrequestreview-155888723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b56a112-215c-4a14-a351-5441083bba75",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hmm I care less about testing this exact way of computing the correlation, and more about ensure that the method is dispatched to.\r\n\r\nWould it be possible to define a very simple \"correlation\" function that just returns something like the index of the columns? So the correlation of the nth or and mth column would be like `(n + m)`. Not sure if that's possible.",
        "createdAt" : "2018-09-13T11:51:38Z",
        "updatedAt" : "2018-09-26T02:23:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f4b77565-fdaf-432c-89e3-cb258437631a",
        "parentId" : "7b56a112-215c-4a14-a351-5441083bba75",
        "authorId" : "2168b726-a3a4-4844-9740-7c45b2d39bea",
        "body" : "ok will re-write the test tomorrow",
        "createdAt" : "2018-09-13T15:48:32Z",
        "updatedAt" : "2018-09-26T02:23:27Z",
        "lastEditedBy" : "2168b726-a3a4-4844-9740-7c45b2d39bea",
        "tags" : [
        ]
      },
      {
        "id" : "73ef65ea-bb14-4548-84b3-36c73f947599",
        "parentId" : "7b56a112-215c-4a14-a351-5441083bba75",
        "authorId" : "2168b726-a3a4-4844-9740-7c45b2d39bea",
        "body" : "The test now includes a simpler correlation function. It is not possible to identify the nth/mth column as in your example because the correlation function itself does not know about the dataframe as a whole but only as each series on its own. The correlation function I chose is a simple `1 if exact equality else 0`",
        "createdAt" : "2018-09-17T11:58:22Z",
        "updatedAt" : "2018-09-26T02:23:27Z",
        "lastEditedBy" : "2168b726-a3a4-4844-9740-7c45b2d39bea",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbfd95fb18bb6b0322c7130a59f5272ad2eef43a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +790,794 @@            s1.corr(s2, method=\"____\")\n\n    def test_corr_callable_method(self):\n        # simple correlation example\n        # returns 1 if exact equality, 0 otherwise"
  },
  {
    "id" : "c1af111e-72e8-4063-84c3-fb7c3f764ed2",
    "prId" : 22684,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22684#pullrequestreview-158810216",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cddf1cf6-4044-4a58-8c63-422e0dd71eea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you use result= and expected= here, rather than expected_1 and such. its much easier to follow",
        "createdAt" : "2018-09-23T13:15:25Z",
        "updatedAt" : "2018-09-26T02:23:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b1d2db26-19bf-4182-9e9e-ecde8f47957e",
        "parentId" : "cddf1cf6-4044-4a58-8c63-422e0dd71eea",
        "authorId" : "2168b726-a3a4-4844-9740-7c45b2d39bea",
        "body" : "done",
        "createdAt" : "2018-09-26T02:15:35Z",
        "updatedAt" : "2018-09-26T02:23:27Z",
        "lastEditedBy" : "2168b726-a3a4-4844-9740-7c45b2d39bea",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbfd95fb18bb6b0322c7130a59f5272ad2eef43a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +794,798 @@        # returns 1 if exact equality, 0 otherwise\n        my_corr = lambda a, b: 1. if (a == b).all() else 0.\n\n        # simple example\n        s1 = Series([1, 2, 3, 4, 5])"
  },
  {
    "id" : "25e7dc11-deda-44c8-824c-5d897a370b06",
    "prId" : 24356,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24356#pullrequestreview-186673732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27818303-8591-41b6-a17f-d68c1836bb06",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@gfyoung are these tests for uses of `nv.validate*` collected anywhere?  I couldn't find where they were.",
        "createdAt" : "2018-12-19T17:31:16Z",
        "updatedAt" : "2018-12-19T20:52:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5ea770b0-b02d-4c6c-8d60-50e8d2620252",
        "parentId" : "27818303-8591-41b6-a17f-d68c1836bb06",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "No, we do not.  Leaving them organized as they are (in their respective function tests) is fine.",
        "createdAt" : "2018-12-19T17:56:20Z",
        "updatedAt" : "2018-12-19T20:52:55Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed5308fd18dd59f52c7afb46486af8b7eb5c1f3f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1642,1646 @@        tm.assert_series_equal(idx.value_counts(normalize=True), exp)\n\n    @pytest.mark.parametrize(\"func\", [np.any, np.all])\n    @pytest.mark.parametrize(\"kwargs\", [\n        dict(keepdims=True),"
  },
  {
    "id" : "b9f52430-ce2b-4399-9f3c-fefd7f487413",
    "prId" : 26157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26157#pullrequestreview-228939333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c45936c6-ec3a-4630-a802-64a9228baed1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some more elements here [True, False, True, True] as another case",
        "createdAt" : "2019-04-21T16:16:08Z",
        "updatedAt" : "2019-04-22T02:09:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cc038d4c-44d8-4345-8ed5-532f8855b588",
        "parentId" : "c45936c6-ec3a-4630-a802-64a9228baed1",
        "authorId" : "4923bc19-2375-4220-92e4-c0c7bf206ecd",
        "body" : "Update the test with `pytest.mark.parametrize`",
        "createdAt" : "2019-04-22T02:10:16Z",
        "updatedAt" : "2019-04-22T02:10:16Z",
        "lastEditedBy" : "4923bc19-2375-4220-92e4-c0c7bf206ecd",
        "tags" : [
        ]
      }
    ],
    "commit" : "3259878365de808956e741331017a037cc409532",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1335,1339 @@                              ([True, False, True, True], [True])])\n    def test_boolean(self, data, expected):\n        # GH 26154 : ensure True > False\n        s = Series(data)\n        result = s.nlargest(1)"
  },
  {
    "id" : "0da067e7-420d-497f-ba39-0a7c04e1700b",
    "prId" : 27184,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27184#pullrequestreview-257081528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28b4aed7-191d-41ce-bac6-5bd59054cb86",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually you use np.nan here",
        "createdAt" : "2019-07-02T18:45:03Z",
        "updatedAt" : "2019-07-03T02:19:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b811c63fc1651a28aea13519dea7d4aac1af038",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +47,51 @@        s = pd.Series([None, None], dtype=object)\n        result = s.describe()\n        expected = pd.Series([0, 0, np.nan, np.nan], dtype=object,\n                             index=['count', 'unique', 'top', 'freq'])\n        tm.assert_series_equal(result, expected)"
  },
  {
    "id" : "41e2338a-9fe6-4eec-9768-fc00fe2829c8",
    "prId" : 28016,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28016#pullrequestreview-276723873",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9d41086-e236-467e-8b5b-2ae75e34e5e5",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Huh, I can't say that I understand why this would be.",
        "createdAt" : "2019-08-19T17:29:28Z",
        "updatedAt" : "2019-08-19T17:29:28Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "397a2dfa-6a8d-4112-adf2-7e314d044ef0",
        "parentId" : "d9d41086-e236-467e-8b5b-2ae75e34e5e5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "in _recode_for_categories we're going through an ensure_object path and problems crop up around then.  I'm not sure exactly why, but I think the solution will involve casting from datetime64[D] to datetime64[ns] without going through object",
        "createdAt" : "2019-08-19T18:04:18Z",
        "updatedAt" : "2019-08-19T18:04:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "88f4340d052f7e8815441a3f53999aca4a019b30",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1492,1496 @@        tc1 = Series(Categorical(input1, categories=cat_array, ordered=ordered_fixture))\n        if dtype == \"datetime64[D]\":\n            # pre-empty flaky xfail, tc1 values are seemingly-random\n            if not (np.array(tc1) == input1).all():\n                pytest.xfail(reason=\"GH#7996\")"
  }
]