[
  {
    "id" : "c5479440-8fd0-40d3-8ce1-05d6a8646e8e",
    "prId" : 13477,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc0e6c7c-ec53-4e87-8738-859803b0d281",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh I c, this is essentially an invalid test because of the integer. oh then.\n",
        "createdAt" : "2016-07-06T21:57:15Z",
        "updatedAt" : "2016-07-10T22:11:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a017a8c2f84ecfdd8243e2a4a3215a6ca7c43af3",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +708,712 @@\n        # because iNaT is int, not coerced to timedelta\n        td = Series([np.timedelta64(300000000), tslib.iNaT])\n        self.assertEqual(td.dtype, 'object')\n"
  },
  {
    "id" : "dfceed3c-ac2d-4434-8bf2-58e1fc6a3392",
    "prId" : 19884,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19884#pullrequestreview-99146902",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3552107b-645a-4918-8406-48b9c10b8005",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Maybe could decorate tests like this one with `@pytest.mark.skipif(not PY36, reason=\"Python 3.6 specific behavior\")` and only test the PY36 path.  Not sure if we're gaining much testing the non-PY36 path.  Would wait to see what others think before making this change though.",
        "createdAt" : "2018-02-24T20:56:19Z",
        "updatedAt" : "2018-03-02T11:18:35Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "ced749bb-e5c4-4f4a-81e4-69e7c65d132f",
        "parentId" : "3552107b-645a-4918-8406-48b9c10b8005",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Pandas has clearly defined ordering for python < 3.6 also (sort  by values). So it's nneeded to test this distinction and not use a skipif, IMO.",
        "createdAt" : "2018-02-25T07:36:08Z",
        "updatedAt" : "2018-03-02T11:18:35Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "45b493ab-1ca9-424c-803b-5f106e448979",
        "parentId" : "3552107b-645a-4918-8406-48b9c10b8005",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@topper-123 let's go ahead and make 2 different tests here, 1 for >= 3.6 and one for less, they should skip on the alternative, same for the tests in frame.",
        "createdAt" : "2018-02-25T15:54:53Z",
        "updatedAt" : "2018-03-02T11:18:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "473f564268d8c6c14590b5fddd226864ceea81cc",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +812,816 @@        assert_series_equal(result, expected)\n\n    def test_constructor_dict_order(self):\n        # GH19018\n        # initialization ordering: by insertion order if python>= 3.6, else"
  },
  {
    "id" : "6eff816f-539b-4468-9258-a6e205ac2d2c",
    "prId" : 21456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21456#pullrequestreview-129013594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a7f15bc-6cd3-42c1-99e5-d9be70c3704f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have these tests for Index as well (I think we do)?",
        "createdAt" : "2018-06-14T10:17:01Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b1730519-93be-4491-afa0-bc810da9565c",
        "parentId" : "4a7f15bc-6cd3-42c1-99e5-d9be70c3704f",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "üòÆ : That's a bug!\r\n\r\n~~~python\r\n>>> Index([\"a\", \"b\", \"c\"], dtype=float)\r\nIndex([[\"a\", \"b\", \"c\"], dtype=object)\r\n~~~",
        "createdAt" : "2018-06-14T22:37:22Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "d607c278-7063-449c-ba38-16c0c7e67a28",
        "parentId" : "4a7f15bc-6cd3-42c1-99e5-d9be70c3704f",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "See #21311",
        "createdAt" : "2018-06-14T22:45:46Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "f97fa373-48db-41eb-85f7-30ecabc52a7e",
        "parentId" : "4a7f15bc-6cd3-42c1-99e5-d9be70c3704f",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "@jschendel @jreback : I'll add an `xfail` test for this.",
        "createdAt" : "2018-06-15T00:31:27Z",
        "updatedAt" : "2018-06-19T17:01:00Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "27caec97a7367fde1a2b4f8a9d441b9f86ab86ab",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +546,550 @@        with tm.assert_raises_regex(ValueError, msg):\n            Series([\"a\", \"b\", \"c\"], dtype=float)\n\n    def test_constructor_unsigned_dtype_overflow(self, uint_dtype):\n        # see gh-15832"
  },
  {
    "id" : "c5c04988-b23c-4439-b128-3aba454349a5",
    "prId" : 22564,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22564#pullrequestreview-152019483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43432ea3-7c43-41f2-8fe7-ff54645ed14b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls parametrize these tests",
        "createdAt" : "2018-09-04T11:22:15Z",
        "updatedAt" : "2018-11-20T13:17:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0692db00f91ea5e9a19d2f3cd02238dae4bd2935",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +135,139 @@        assert result.index.tolist() == ['b', 'a', 'c']\n\n    def test_constructor_no_data_string_type(self):\n        # GH 22477\n        result = pd.Series(index=[1], dtype=str)"
  },
  {
    "id" : "89d98aa2-cf33-48c8-b4bd-87d45b489861",
    "prId" : 22564,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22564#pullrequestreview-152019483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05aea570-d7b2-4256-b96d-f20fc10f11e5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "check the value using iloc instead here which returns a scalar",
        "createdAt" : "2018-09-04T11:22:51Z",
        "updatedAt" : "2018-11-20T13:17:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0692db00f91ea5e9a19d2f3cd02238dae4bd2935",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +139,143 @@        result = pd.Series(index=[1], dtype=str)\n        assert np.isnan(result.iloc[0])\n\n    @pytest.mark.parametrize('item', ['entry', '—ê', 13])\n    def test_constructor_string_element_string_type(self, item):"
  },
  {
    "id" : "857d9df0-e8b3-437f-9de3-31f4f2e5a445",
    "prId" : 22681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22681#pullrequestreview-154895883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2606fdd-fbc0-45b0-95d2-d3a80b7bb62a",
        "parentId" : null,
        "authorId" : "021d01df-a487-48a6-a91d-4a42dce73f5c",
        "body" : "I think there might have been a confusion between `message` and `match` here: message is the error printed on failure, `match` is the error message we check in the caught exception.",
        "createdAt" : "2018-09-12T20:42:01Z",
        "updatedAt" : "2018-09-13T18:41:26Z",
        "lastEditedBy" : "021d01df-a487-48a6-a91d-4a42dce73f5c",
        "tags" : [
        ]
      },
      {
        "id" : "d17f87bb-e490-4175-b3ff-249116687892",
        "parentId" : "e2606fdd-fbc0-45b0-95d2-d3a80b7bb62a",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "That does appear to be the case.  Good catch!",
        "createdAt" : "2018-09-13T00:51:38Z",
        "updatedAt" : "2018-09-13T18:41:26Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0f2bedec14c8abbccd3fb075abf5f0ce03c43b8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +466,470 @@        # raises an error\n        msg = 'Length of passed values is 3, index implies 4'\n        with pytest.raises(ValueError, match=msg):\n            Series(input, index=np.arange(4))\n"
  },
  {
    "id" : "058f3800-2052-4d36-a7ef-c0346feb95a2",
    "prId" : 24812,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24812#pullrequestreview-193605937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec646f86-0c5b-4efd-8ae5-a70a0c9c0b4b",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "this is raising `missing 1 required positional argument: 'x'` because of the lambda and not failing as intended. correcting this with the conversion to context manger is only failing on windows and again from the error message is probably not failing as intended",
        "createdAt" : "2019-01-17T12:33:14Z",
        "updatedAt" : "2019-01-17T12:33:14Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "bf1ecc4b-b72b-44cf-be53-296daa1dcdfe",
        "parentId" : "ec646f86-0c5b-4efd-8ae5-a70a0c9c0b4b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this *should* be raising TypeError, what happens when you use the context manager",
        "createdAt" : "2019-01-17T12:37:08Z",
        "updatedAt" : "2019-01-17T12:37:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "27bc710f-66f0-4dfa-856a-ba8ab6beb13e",
        "parentId" : "ec646f86-0c5b-4efd-8ae5-a70a0c9c0b4b",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "it _is_ raising TypeError in master because of the lambda. this is a bad test.\r\n\r\ncorrecting it with the context manager raises `TypeError: cannot astype a datetimelike from [datetime64[ns]] to [int32]` but only on the windows tests (see ci failures)\r\n\r\ni've reverted the changes to the test, but the ci is failing on an unrelated conda error at the moment.\r\n\r\nwith the changes in this PR there will still be 823 uses of pytest.raises without the cm. so i don't want to get bogged down with bad tests at the moment.\r\n",
        "createdAt" : "2019-01-17T12:46:08Z",
        "updatedAt" : "2019-01-17T12:46:08Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "a9a60cf9-6322-467b-904a-33d3cb89c445",
        "parentId" : "ec646f86-0c5b-4efd-8ae5-a70a0c9c0b4b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k that's fine (though happy to take your change, though it should raise on windows as well). can you create an issue about this.",
        "createdAt" : "2019-01-17T12:47:59Z",
        "updatedAt" : "2019-01-17T12:48:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "eae318a47e3825b59fd22733b67515e673c8f912",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +686,690 @@        # with pytest.raises(TypeError, match=msg):\n        #     Series(Series(dates).astype('int') / 1000000, dtype='M8[ms]')\n        pytest.raises(TypeError, lambda x: Series(\n            Series(dates).astype('int') / 1000000, dtype='M8[ms]'))\n"
  },
  {
    "id" : "cb132aa1-33bb-4e75-823a-2c6c35acdb29",
    "prId" : 24812,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24812#pullrequestreview-193618750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e585bc1-7285-411a-b20b-dbb9c0f2f9c1",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "i think this test is also not failing as intended and was masked by another lambda error. will do a follow-up PR to address theses cases.",
        "createdAt" : "2019-01-17T13:20:04Z",
        "updatedAt" : "2019-01-17T13:20:04Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "eae318a47e3825b59fd22733b67515e673c8f912",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +692,696 @@               r\" 'datetime64\\[ns\\]' instead\\.\")\n        with pytest.raises(ValueError, match=msg):\n            Series(dates, dtype='datetime64')\n\n        # invalid dates can be help as object"
  },
  {
    "id" : "e8305b96-7982-417d-8669-aff683ab21a4",
    "prId" : 25690,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25690#pullrequestreview-215568409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2dfc98d2-7c0c-4a75-98be-54d340744fea",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Rather than duplicating is there a logical way to replace it? The amount of parametrization here is more comprehensive so would make sense to leverage",
        "createdAt" : "2019-03-18T04:54:14Z",
        "updatedAt" : "2019-03-27T11:23:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "8b36e000-9710-42cc-a456-651eff402507",
        "parentId" : "2dfc98d2-7c0c-4a75-98be-54d340744fea",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this seems ok here. ok with some duplication if its easier to read / grok.",
        "createdAt" : "2019-03-18T12:29:13Z",
        "updatedAt" : "2019-03-27T11:23:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "05ab6704189c6044e41fd12599245c11d9c48229",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +30,34 @@\n    @pytest.mark.parametrize('constructor,check_index_type', [\n        # NOTE: some overlap with test_constructor_empty but that test does not\n        # test for None or an empty generator.\n        # test_constructor_pass_none tests None but only with the index also"
  },
  {
    "id" : "f588b613-fdf0-4494-a257-5117f9db9e9f",
    "prId" : 28399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28399#pullrequestreview-287192964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca2c25dc-25f7-4dfd-9ef0-01e4185ca47f",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "no material change here, just cleaning up by using  `parametrize` and removing some unnecessary lines (unassigned `repr`/`str` calls)",
        "createdAt" : "2019-09-12T05:00:59Z",
        "updatedAt" : "2020-01-05T22:12:33Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ece42763dd890fdfcdd6441eb523f12035549b57",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +969,973 @@\n    @pytest.mark.parametrize(\"interval_constructor\", [IntervalIndex, IntervalArray])\n    def test_construction_interval(self, interval_constructor):\n        # construction from interval & array of intervals\n        intervals = interval_constructor.from_breaks(np.arange(3), closed=\"right\")"
  },
  {
    "id" : "961f1c15-fc8e-405f-a7f6-134988281ca7",
    "prId" : 28399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28399#pullrequestreview-287192964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f4c2cfc-ffc9-4f8c-95b9-4aec8b88a088",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "no material change here, just cleaning up by using `parametrize`",
        "createdAt" : "2019-09-12T05:01:14Z",
        "updatedAt" : "2020-01-05T22:12:33Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ece42763dd890fdfcdd6441eb523f12035549b57",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +1015,1019 @@        \"data_constructor\", [list, np.array], ids=[\"list\", \"ndarray[object]\"]\n    )\n    def test_constructor_infer_period(self, data_constructor):\n        data = [pd.Period(\"2000\", \"D\"), pd.Period(\"2001\", \"D\"), None]\n        result = pd.Series(data_constructor(data))"
  }
]