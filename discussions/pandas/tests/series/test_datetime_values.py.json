[
  {
    "id" : "55c07913-8258-46d8-8c51-639846cac8bb",
    "prId" : 23289,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23289#pullrequestreview-167306193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3095b850-aff1-46ec-9730-1da4d77b6f0c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add the commit number",
        "createdAt" : "2018-10-23T09:15:33Z",
        "updatedAt" : "2018-10-26T21:59:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a70b90382954f2ae032d80d29325cf018174d911",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +525,529 @@        pd.DataFrame([pd.NaT, pd.NaT]),\n        pd.DataFrame([pd.NaT, pd.Timedelta('nat')]),\n        pd.DataFrame([pd.Timedelta('nat'), pd.Timedelta('nat')])])\n    def test_minmax_nat_dataframe(self, nat):\n        assert nat.min()[0] is pd.NaT"
  },
  {
    "id" : "08181f81-cc61-412c-929f-eb6f77c7e272",
    "prId" : 23406,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23406#pullrequestreview-169881753",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9c87fc3-510a-48ce-96aa-b745a3653530",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I'm almost inclined to have parameterization on `nonexistent`, but up to you.",
        "createdAt" : "2018-10-30T00:00:45Z",
        "updatedAt" : "2018-10-31T04:52:57Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "8a2b1131-c71e-4c32-a647-e23bdb7a7bdb",
        "parentId" : "c9c87fc3-510a-48ce-96aa-b745a3653530",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "I'm inclined to keep the format of this test. IMO parameterization over nonexistent would obfuscate the test too much. ",
        "createdAt" : "2018-10-30T01:57:06Z",
        "updatedAt" : "2018-10-31T04:52:57Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "2b086518-9774-4b6a-9718-49f8f527995f",
        "parentId" : "c9c87fc3-510a-48ce-96aa-b745a3653530",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "No problem.  Just a thought. üëç \r\n\r\nMore general question, to what extent are we using `pytest.raises` vs `tm.assert_raises_regex` ?\r\n\r\ncc @jreback ",
        "createdAt" : "2018-10-30T04:14:30Z",
        "updatedAt" : "2018-10-31T04:52:57Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "efac6b6c-47e0-402e-bdcd-0d1d36f22f5f",
        "parentId" : "c9c87fc3-510a-48ce-96aa-b745a3653530",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok with ``pytest.raises`` to the extent we are just checking the type of the error. so ok here",
        "createdAt" : "2018-10-30T12:15:17Z",
        "updatedAt" : "2018-10-31T04:52:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "28a82308-8977-4f87-b0fe-bb9b78e393e2",
        "parentId" : "c9c87fc3-510a-48ce-96aa-b745a3653530",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "@jreback : `pytest.raises` is also checking the error message here...\r\n\r\n(that's why I asked about this)",
        "createdAt" : "2018-10-30T16:50:14Z",
        "updatedAt" : "2018-10-31T04:52:57Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "b31f034f5da9a0311ccaf99c9cae18437e6943b0",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +302,306 @@        with pytest.raises(pytz.NonExistentTimeError,\n                           message='2018-03-11 02:00:00'):\n            getattr(s.dt, method)(freq, nonexistent='raise')\n\n    def test_dt_namespace_accessor_categorical(self):"
  },
  {
    "id" : "36bf60c0-9bae-4bf1-b9d0-595bb1d7dcb3",
    "prId" : 24426,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24426#pullrequestreview-187809303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74681a71-60f6-4725-b876-a2894155b096",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you test this for the other accessors as well. I think you can assert that the result.index is not the s.index to test.",
        "createdAt" : "2018-12-25T23:23:17Z",
        "updatedAt" : "2018-12-26T01:15:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6b4fab3f-477a-4b22-872c-1d2eff43a7ec",
        "parentId" : "74681a71-60f6-4725-b876-a2894155b096",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can leave this test and add some in pandas/series/test_api.py",
        "createdAt" : "2018-12-25T23:25:13Z",
        "updatedAt" : "2018-12-26T01:15:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8326b9ad1481a4060f3eceb987abf6a51fe693f8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +486,490 @@        assert not hasattr(ser, 'dt')\n\n    def test_dt_accessor_updates_on_inplace(self):\n        s = Series(pd.date_range('2018-01-01', periods=10))\n        s[2] = None"
  },
  {
    "id" : "20fed9e7-e2f3-4637-891a-41b45dd4c328",
    "prId" : 33595,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33595#pullrequestreview-394987127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c83242a1-ee76-4864-a5fb-78d6dc6b65e5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2020-04-16T20:49:43Z",
        "updatedAt" : "2020-05-25T22:16:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "acf2bbba95188aaf333db51d045f7fc8ab24df80",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +694,698 @@def test_week_and_weekofyear_are_deprecated():\n    # GH#33595 Deprecate week and weekofyear\n    series = pd.to_datetime(pd.Series([\"2020-01-01\"]))\n    with tm.assert_produces_warning(FutureWarning):\n        series.dt.week"
  },
  {
    "id" : "8dfa7a32-6891-4779-871d-6a963618dce6",
    "prId" : 36050,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36050#pullrequestreview-481858365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "982fc7eb-8483-47ff-b952-09828dc204c9",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is there another implementation somewhere (maybe stdlib calendar) we can use to compare against?",
        "createdAt" : "2020-09-02T23:40:24Z",
        "updatedAt" : "2020-09-03T17:29:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d9f39f6b-f038-4125-b026-4de5b791a567",
        "parentId" : "982fc7eb-8483-47ff-b952-09828dc204c9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i guess datetime.isocalendar would make sense",
        "createdAt" : "2020-09-02T23:41:47Z",
        "updatedAt" : "2020-09-03T17:29:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "164f4d9c-458d-46cf-a464-5a075f1033d4",
        "parentId" : "982fc7eb-8483-47ff-b952-09828dc204c9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "https://github.com/python/cpython/blob/master/Modules/_datetimemodule.c#L3355",
        "createdAt" : "2020-09-02T23:43:23Z",
        "updatedAt" : "2020-09-03T17:29:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "43b9b596-291c-4fbd-9049-a6f2fa53ad2c",
        "parentId" : "982fc7eb-8483-47ff-b952-09828dc204c9",
        "authorId" : "9164c634-311a-47a7-96af-8590b019e4ae",
        "body" : "@jbrockmendel I didn't want to change the current implementation too much, but I tested with `datetime.isocalendar` locally.\r\n\r\nhttps://github.com/pandas-dev/pandas/pull/36050#discussion_r481532226\r\n",
        "createdAt" : "2020-09-03T00:09:44Z",
        "updatedAt" : "2020-09-03T17:29:57Z",
        "lastEditedBy" : "9164c634-311a-47a7-96af-8590b019e4ae",
        "tags" : [
        ]
      },
      {
        "id" : "f5bb93b4-be63-48da-bc17-76d9beb02f79",
        "parentId" : "982fc7eb-8483-47ff-b952-09828dc204c9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Can you add in `tests.tslibs.test_ccalendar` (OK for follow-up):\r\n\r\n```\r\nfrom hypothesis import given, strategies as st\r\n\r\n@given(st.datetimes(min_value=pd.Timestamp.min.to_pydatetime(), max_value=pd.Timestamp.max.to_pydatetime())\r\ndef test_isocalendar(dt):\r\n    expected = dt.isocalendar()\r\n    result = ccalendar.get_iso_calendar(dt.year, dt.month, dt.day)\r\n    assert result == expected\r\n```",
        "createdAt" : "2020-09-03T00:53:08Z",
        "updatedAt" : "2020-09-03T17:29:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "983fa27c-48c2-4d71-8c49-c86ad3392ab0",
        "parentId" : "982fc7eb-8483-47ff-b952-09828dc204c9",
        "authorId" : "9164c634-311a-47a7-96af-8590b019e4ae",
        "body" : "@jbrockmendel Unsure how to resolve the CI failures. should I just add `warn=False` in the `to_pydatetime` call?\r\nhttps://dev.azure.com/pandas-dev/pandas/_build/results?buildId=41452&view=ms.vss-test-web.build-test-results-tab&runId=2135520&resultId=100016&paneView=debug\r\n\r\n",
        "createdAt" : "2020-09-03T13:49:44Z",
        "updatedAt" : "2020-09-03T17:29:57Z",
        "lastEditedBy" : "9164c634-311a-47a7-96af-8590b019e4ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "030bc88f5b61884f12900bc763695c3f929ec154",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +685,689 @@            # see GH#36032\n            [[\"2016-01-08\", \"2016-01-04\"], [[2016, 1, 5], [2016, 1, 1]]],\n            [[\"2016-01-07\", \"2016-01-01\"], [[2016, 1, 4], [2015, 53, 5]]],\n        ],\n    )"
  }
]