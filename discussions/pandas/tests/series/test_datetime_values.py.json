[
  {
    "id" : "55c07913-8258-46d8-8c51-639846cac8bb",
    "prId" : 23289,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23289#pullrequestreview-167306193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3095b850-aff1-46ec-9730-1da4d77b6f0c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add the commit number",
        "createdAt" : "2018-10-23T09:15:33Z",
        "updatedAt" : "2018-10-26T21:59:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a70b90382954f2ae032d80d29325cf018174d911",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +525,529 @@        pd.DataFrame([pd.NaT, pd.NaT]),\n        pd.DataFrame([pd.NaT, pd.Timedelta('nat')]),\n        pd.DataFrame([pd.Timedelta('nat'), pd.Timedelta('nat')])])\n    def test_minmax_nat_dataframe(self, nat):\n        assert nat.min()[0] is pd.NaT"
  },
  {
    "id" : "08181f81-cc61-412c-929f-eb6f77c7e272",
    "prId" : 23406,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23406#pullrequestreview-169881753",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9c87fc3-510a-48ce-96aa-b745a3653530",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I'm almost inclined to have parameterization on `nonexistent`, but up to you.",
        "createdAt" : "2018-10-30T00:00:45Z",
        "updatedAt" : "2018-10-31T04:52:57Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "8a2b1131-c71e-4c32-a647-e23bdb7a7bdb",
        "parentId" : "c9c87fc3-510a-48ce-96aa-b745a3653530",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "I'm inclined to keep the format of this test. IMO parameterization over nonexistent would obfuscate the test too much. ",
        "createdAt" : "2018-10-30T01:57:06Z",
        "updatedAt" : "2018-10-31T04:52:57Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "2b086518-9774-4b6a-9718-49f8f527995f",
        "parentId" : "c9c87fc3-510a-48ce-96aa-b745a3653530",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "No problem.  Just a thought. üëç \r\n\r\nMore general question, to what extent are we using `pytest.raises` vs `tm.assert_raises_regex` ?\r\n\r\ncc @jreback ",
        "createdAt" : "2018-10-30T04:14:30Z",
        "updatedAt" : "2018-10-31T04:52:57Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "efac6b6c-47e0-402e-bdcd-0d1d36f22f5f",
        "parentId" : "c9c87fc3-510a-48ce-96aa-b745a3653530",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok with ``pytest.raises`` to the extent we are just checking the type of the error. so ok here",
        "createdAt" : "2018-10-30T12:15:17Z",
        "updatedAt" : "2018-10-31T04:52:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "28a82308-8977-4f87-b0fe-bb9b78e393e2",
        "parentId" : "c9c87fc3-510a-48ce-96aa-b745a3653530",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "@jreback : `pytest.raises` is also checking the error message here...\r\n\r\n(that's why I asked about this)",
        "createdAt" : "2018-10-30T16:50:14Z",
        "updatedAt" : "2018-10-31T04:52:57Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "b31f034f5da9a0311ccaf99c9cae18437e6943b0",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +302,306 @@        with pytest.raises(pytz.NonExistentTimeError,\n                           message='2018-03-11 02:00:00'):\n            getattr(s.dt, method)(freq, nonexistent='raise')\n\n    def test_dt_namespace_accessor_categorical(self):"
  },
  {
    "id" : "36bf60c0-9bae-4bf1-b9d0-595bb1d7dcb3",
    "prId" : 24426,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24426#pullrequestreview-187809303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74681a71-60f6-4725-b876-a2894155b096",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you test this for the other accessors as well. I think you can assert that the result.index is not the s.index to test.",
        "createdAt" : "2018-12-25T23:23:17Z",
        "updatedAt" : "2018-12-26T01:15:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6b4fab3f-477a-4b22-872c-1d2eff43a7ec",
        "parentId" : "74681a71-60f6-4725-b876-a2894155b096",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can leave this test and add some in pandas/series/test_api.py",
        "createdAt" : "2018-12-25T23:25:13Z",
        "updatedAt" : "2018-12-26T01:15:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8326b9ad1481a4060f3eceb987abf6a51fe693f8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +486,490 @@        assert not hasattr(ser, 'dt')\n\n    def test_dt_accessor_updates_on_inplace(self):\n        s = Series(pd.date_range('2018-01-01', periods=10))\n        s[2] = None"
  },
  {
    "id" : "20fed9e7-e2f3-4637-891a-41b45dd4c328",
    "prId" : 33595,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33595#pullrequestreview-394987127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c83242a1-ee76-4864-a5fb-78d6dc6b65e5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2020-04-16T20:49:43Z",
        "updatedAt" : "2020-05-25T22:16:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "acf2bbba95188aaf333db51d045f7fc8ab24df80",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +694,698 @@def test_week_and_weekofyear_are_deprecated():\n    # GH#33595 Deprecate week and weekofyear\n    series = pd.to_datetime(pd.Series([\"2020-01-01\"]))\n    with tm.assert_produces_warning(FutureWarning):\n        series.dt.week"
  }
]