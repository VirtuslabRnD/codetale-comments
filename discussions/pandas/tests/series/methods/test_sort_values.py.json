[
  {
    "id" : "1524cea8-13ea-4d03-aaec-a1500eaa897e",
    "prId" : 30402,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30402#pullrequestreview-336455517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "545972e2-b6fe-45b8-bab8-50f5efb924a6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you test for inplace as well",
        "createdAt" : "2019-12-26T00:48:18Z",
        "updatedAt" : "2019-12-26T08:31:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8b044512-c9b2-4b35-ba87-27cc7eb4fde2",
        "parentId" : "545972e2-b6fe-45b8-bab8-50f5efb924a6",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "tests added",
        "createdAt" : "2019-12-26T08:32:03Z",
        "updatedAt" : "2019-12-26T08:32:04Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d02b651792de516ab73c21be7430681c8e17dde5",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +165,169 @@        ],\n    )\n    def test_sort_values_ignore_index(\n        self, original_list, sorted_list, ignore_index, output_index\n    ):"
  },
  {
    "id" : "e73cb95b-9bf8-4244-ab01-6638bf68a1e0",
    "prId" : 42684,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/42684#pullrequestreview-714303750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "945b098b-0ad2-46db-9ddd-159cacd73381",
        "parentId" : null,
        "authorId" : "00fd25ec-10ce-4da2-b282-338650c2fd94",
        "body" : "would it not be better to separate the raises ValueError test and the functional tests?\r\nAlso, would it not be better to parametrize the functional tests as follows:\r\n```\r\n@pytest.mark.parametrize(\"ascending\", [False, 0, 1, True])\r\ndef test_sort_values_validate_ascending(self, ascending):\r\n    ...\r\n    sorted_ser = ser.sort_values(ascending=ascending)\r\n    ...\r\n    if ascending:\r\n        expected = expected[::-1]\r\n    ...\r\n```",
        "createdAt" : "2021-07-25T05:46:03Z",
        "updatedAt" : "2021-07-25T05:46:27Z",
        "lastEditedBy" : "00fd25ec-10ce-4da2-b282-338650c2fd94",
        "tags" : [
        ]
      },
      {
        "id" : "0fe99404-2223-416c-a609-d7f7a0481407",
        "parentId" : "945b098b-0ad2-46db-9ddd-159cacd73381",
        "authorId" : "0581a33c-b2f8-47a5-821e-65e263d7ae76",
        "body" : "Thanks @attack68. I agree, code will look more clean and short. Pushed a change for this, please check.\r\n\r\nAlso, I was thinking, does it make more sense to parameterize `test_sort_values_validate_ascending_for_value_error` test function with `msg` as a parameter and move code from line 54 to 68 (code attached below) in this test?\r\n\r\n```\r\n        msg = 'For argument \"ascending\" expected type bool, received type NoneType.'\r\n        with pytest.raises(ValueError, match=msg):\r\n            ts.sort_values(ascending=None)\r\n        msg = r\"Length of ascending \\(0\\) must be 1 for Series\"\r\n        with pytest.raises(ValueError, match=msg):\r\n            ts.sort_values(ascending=[])\r\n        msg = r\"Length of ascending \\(3\\) must be 1 for Series\"\r\n        with pytest.raises(ValueError, match=msg):\r\n            ts.sort_values(ascending=[1, 2, 3])\r\n        msg = r\"Length of ascending \\(2\\) must be 1 for Series\"\r\n        with pytest.raises(ValueError, match=msg):\r\n            ts.sort_values(ascending=[False, False])\r\n        msg = 'For argument \"ascending\" expected type bool, received type str.'\r\n        with pytest.raises(ValueError, match=msg):\r\n            ts.sort_values(ascending=\"foobar\")\r\n```\r\n",
        "createdAt" : "2021-07-25T10:56:38Z",
        "updatedAt" : "2021-07-25T11:10:17Z",
        "lastEditedBy" : "0581a33c-b2f8-47a5-821e-65e263d7ae76",
        "tags" : [
        ]
      }
    ],
    "commit" : "1170905c5119d071cd8fec18c67ae3981185c8f5",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +211,215 @@        ser = Series([23, 7, 21])\n\n        msg = 'For argument \"ascending\" expected type bool, received type str.'\n        with pytest.raises(ValueError, match=msg):\n            ser.sort_values(ascending=\"False\")"
  }
]