[
  {
    "id" : "2771eb80-1b2e-454a-8b1d-39f1eab63ff6",
    "prId" : 14799,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14799#pullrequestreview-11917128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ea20444-2328-4110-b116-5887dadd927c",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you add another test with non-uniform spacing in the index. e.g. `pd.to_timedelta([1, 2, 4])` and ensure that it gets interpolated to the correct value.",
        "createdAt" : "2016-12-07T22:48:32Z",
        "updatedAt" : "2016-12-10T11:17:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "6b1018dc-4323-4b70-a7da-8f2f791d9982",
        "parentId" : "7ea20444-2328-4110-b116-5887dadd927c",
        "authorId" : "85f2e63d-d62f-4024-b337-34d47994bac9",
        "body" : "sure, would it be better if i add it as one more in the existing test or as a new test?",
        "createdAt" : "2016-12-07T22:52:22Z",
        "updatedAt" : "2016-12-10T11:17:50Z",
        "lastEditedBy" : "85f2e63d-d62f-4024-b337-34d47994bac9",
        "tags" : [
        ]
      },
      {
        "id" : "937e3069-5e12-4fc0-9457-4e7ed4b36191",
        "parentId" : "7ea20444-2328-4110-b116-5887dadd927c",
        "authorId" : "85f2e63d-d62f-4024-b337-34d47994bac9",
        "body" : "@TomAugspurger i have added non uniform spacing as a test case now",
        "createdAt" : "2016-12-07T23:05:13Z",
        "updatedAt" : "2016-12-10T11:17:50Z",
        "lastEditedBy" : "85f2e63d-d62f-4024-b337-34d47994bac9",
        "tags" : [
        ]
      }
    ],
    "commit" : "562a793265174780f10bcfe55ae1509eacc70704",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +892,896 @@            s.interpolate(method='spline', order=0)\n\n    def test_interp_timedelta64(self):\n        # GH 6424\n        df = Series([1, np.nan, 3],"
  },
  {
    "id" : "b2bc542c-b919-41f5-a423-3fa9c8efa4f4",
    "prId" : 17744,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17744#pullrequestreview-66559716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae00a45f-2bca-40bc-9d62-85b4800b7b84",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What is the difference between both of the above cases ?\r\n\r\n(also , the `errors` has no effect)",
        "createdAt" : "2017-10-02T19:01:28Z",
        "updatedAt" : "2017-10-05T12:20:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d6a3f4db-43bc-4546-984b-43faa998e7f3",
        "parentId" : "ae00a45f-2bca-40bc-9d62-85b4800b7b84",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right the kw is pretty much ignored in .where (that's part of the problem); its used in other routines. This is pretty much a mess internally, though making progress.",
        "createdAt" : "2017-10-02T19:09:21Z",
        "updatedAt" : "2017-10-05T12:20:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "552437b5457177ee9b27baee0494937c19cf410d",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +301,305 @@        result = s.where([True, False],\n                         Timestamp('20130101', tz='US/Eastern'),\n                         errors='ignore')\n        assert_series_equal(result, expected)\n"
  },
  {
    "id" : "93d429e6-296d-4f6b-b136-41bc8ce58a0a",
    "prId" : 18794,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18794#pullrequestreview-83864156",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c06a85cd-f6b1-4a9b-bf6a-bfa002590fbc",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "There were a few instances where part of the function required ``scipy`` and the other part did not. I parametrized these using ``kwargs`` to give better visibility into what is being passed / skipped, especially on machines that don't have ``scipy`` installed",
        "createdAt" : "2017-12-15T16:49:48Z",
        "updatedAt" : "2017-12-15T16:49:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aa0b7f2f350dcbaae4bcd0485ba82de8496b181",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +918,922 @@    def test_interpolate_corners(self, kwargs):\n        s = Series([np.nan, np.nan])\n        assert_series_equal(s.interpolate(**kwargs), s)\n\n        s = Series([]).interpolate()"
  },
  {
    "id" : "9bb85f76-7a52-47af-9558-890ec3813880",
    "prId" : 23538,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23538#pullrequestreview-182928956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa8e05d2-5033-42de-8e82-4b63ebd07ce5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why do you need to do this?",
        "createdAt" : "2018-12-07T13:08:43Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "47c43370-0b85-440e-8fbb-d25d7122288b",
        "parentId" : "aa8e05d2-5033-42de-8e82-4b63ebd07ce5",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "`ser.index` is a `RangeIndex`. `Index([1.25..., 2.75])` is a `Float64Index`. Due to not being compatible they produce an object dtype Index, which then needs to be cast back to float.\r\n\r\nThis operation is not what was being checked in this test, and was just a matter of the mechanics of the new behavior to get the actual check to work.",
        "createdAt" : "2018-12-08T02:49:47Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      }
    ],
    "commit" : "b840f49f2f520b4f5676f50029365cdf89bc2209",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +930,934 @@        # interpolate at new_index\n        new_index = ser.index.union(\n            Index([1.25, 1.5, 1.75, 2.25, 2.5, 2.75])\n        ).astype(float)\n        interp_s = ser.reindex(new_index).interpolate(method='akima')"
  },
  {
    "id" : "e94f06dc-1a2e-445b-a194-ef5e6114acbc",
    "prId" : 25394,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25394#pullrequestreview-207111653",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07944111-466d-42e8-9aa6-9a34433ed111",
        "parentId" : null,
        "authorId" : "6827138b-8bd6-4b10-83f8-644ea7da387d",
        "body" : "@jreback, parameterized the test on different indexes.\r\nNote that, ```TimedeltaIndex``` currently supports `time`, `index`, `values` and `pchip` methods of interpolation. In generic.py because of the check of numeric and datetime64 types, even for these methods it will raise the ValueError.\r\n\r\nShould I change the if condition to contain the timedelta and period and interval types as well and create a test for each index to xfail? in case of timedelta then some will pass and some will xfail\r\nor\r\nwrite an if else logic in the generic.py to cover those timedelta cases?",
        "createdAt" : "2019-02-23T05:33:58Z",
        "updatedAt" : "2019-03-24T19:04:34Z",
        "lastEditedBy" : "6827138b-8bd6-4b10-83f8-644ea7da387d",
        "tags" : [
        ]
      },
      {
        "id" : "73abbb85-d728-43f9-aa5f-81b5726c0713",
        "parentId" : "07944111-466d-42e8-9aa6-9a34433ed111",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ideally this PR is just changing the error as the original issue + tests (xfailednif need be for anything else)\r\n\r\nif after that is passing you want to try to remove the xfails would be ok\r\n\r\nbut letâ€™s get the tests correct first",
        "createdAt" : "2019-02-23T14:34:24Z",
        "updatedAt" : "2019-03-24T19:04:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d227f8abd074119e67d0768f5456429cd2de95e3",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1421,1425 @@            pd.period_range(start=\"2019-01-01\", periods=4),\n            pd.interval_range(start=0, end=4),\n        ])\n    def test_interp_non_timedelta_index(self, interp_methods_ind, ind):\n        # gh 21662"
  }
]