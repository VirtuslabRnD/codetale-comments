[
  {
    "id" : "731bc714-6278-4868-b069-1e601918b5fe",
    "prId" : 5224,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40f280bd-a1e2-4e25-abc6-62028de68248",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "future reference - you can use `assert_produces_warning()` here as well, so you could get down to:\n\n``` python\nwith tm.assert_produces_warning():\n    result = values.str.match('.*(BAD[_]+).*(BAD)')\n```\n",
        "createdAt" : "2013-10-31T00:51:42Z",
        "updatedAt" : "2013-10-31T00:51:42Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b832d020035c06dcdcdab93cb0cfd8851235ad1",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +420,424 @@        values = Series([u('fooBAD__barBAD'), NA, u('foo')])\n\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter('always')\n            result = values.str.match('.*(BAD[_]+).*(BAD)')"
  },
  {
    "id" : "a35b2aa5-4f32-4310-a3aa-53bb3cff227e",
    "prId" : 9439,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcbe37f7-725e-40c7-aa95-db9ae0ceca32",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "ugh... I guess we still support Python 3.2 :(\n",
        "createdAt" : "2015-02-07T01:19:40Z",
        "updatedAt" : "2015-02-07T01:19:40Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "01c038fc-92e2-4caf-b900-2955b220f9e1",
        "parentId" : "dcbe37f7-725e-40c7-aa95-db9ae0ceca32",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Isn't 3.2 tested in below? I've expected `compat.unichr` can work for 3.2 also.\n\nhttps://travis-ci.org/pydata/pandas/jobs/49806158\n",
        "createdAt" : "2015-02-07T02:19:25Z",
        "updatedAt" : "2015-02-07T02:19:25Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "cf904e10-4637-4deb-866b-3148073b6571",
        "parentId" : "dcbe37f7-725e-40c7-aa95-db9ae0ceca32",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "I know, it works!\n\nI was going to suggest just using `u'¼'` but the `u` unicode literal is not supported on Python 3.2.\n",
        "createdAt" : "2015-02-07T02:21:08Z",
        "updatedAt" : "2015-02-07T02:21:08Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "3ee673af-1a47-44e5-a097-3ed57669c62d",
        "parentId" : "dcbe37f7-725e-40c7-aa95-db9ae0ceca32",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "I see. I also tried to use `u` at first and failed... Will wait a conclusion of #9118.\n",
        "createdAt" : "2015-02-07T02:26:36Z",
        "updatedAt" : "2015-02-07T02:26:36Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "7bd377d3-4fc3-4558-831b-074dc330a0e3",
        "parentId" : "dcbe37f7-725e-40c7-aa95-db9ae0ceca32",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "u(...) is the way to handle 3.2 compat\n",
        "createdAt" : "2015-02-07T02:28:26Z",
        "updatedAt" : "2015-02-07T02:28:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "41503957-128e-4e66-a974-66f323f1a92e",
        "parentId" : "dcbe37f7-725e-40c7-aa95-db9ae0ceca32",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "I think we can't use `u( )` here because escaped unicode is not handled as numeric or decimal.\n",
        "createdAt" : "2015-02-07T02:36:48Z",
        "updatedAt" : "2015-02-07T02:36:48Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "004610035b156b4e5e2c8694878e65f055e30db3",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +667,671 @@        # 0x1378: ፸ ETHIOPIC NUMBER SEVENTY\n        # 0xFF13: ３ Em 3\n        values = ['A', '3', unichr(0x00bc), unichr(0x2605),\n                  unichr(0x1378), unichr(0xFF13), 'four']\n        s = Series(values)"
  },
  {
    "id" : "3c034cf8-0717-41c8-98e4-1f4525fb79bd",
    "prId" : 10031,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60583847-2116-4f24-bf30-5f64e14eae26",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't know to what extent we want to really have such unicode characters in our source files?\n",
        "createdAt" : "2015-05-01T12:42:08Z",
        "updatedAt" : "2015-05-04T04:17:07Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e18456fe-fadc-49eb-abfe-18b76f9b7fb0",
        "parentId" : "60583847-2116-4f24-bf30-5f64e14eae26",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "This is an alternative expression of normal unicode string, such as \"u'ＡＢＣ'\" to work both on 2.x and 3.x. Unable to use `six.u` here, because it escapes unicode literal and change the result.\n",
        "createdAt" : "2015-05-01T13:47:22Z",
        "updatedAt" : "2015-05-04T04:17:07Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "5acdde45-44ac-4c63-9be2-832b72713b16",
        "parentId" : "60583847-2116-4f24-bf30-5f64e14eae26",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "Once we remove Python 3.2 support we can finally use `u`....\n",
        "createdAt" : "2015-05-01T17:46:35Z",
        "updatedAt" : "2015-05-04T04:17:07Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "4f2aba8f-5c01-493d-9b56-b774d565e9eb",
        "parentId" : "60583847-2116-4f24-bf30-5f64e14eae26",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@shoyer 0.17? see https://github.com/pydata/pandas/issues/9118, maybe we should just decide when the 'finally' will be\n\n@sinhrks sorry to be unclear, I just meant the unicode in the comment (what the unistr forms). I know our source files are unicode (or at least this one is), but I was just wondering to what extent we should also really use such characters (eg for when people with older or misconfigured editors looking at this file). But probably not a big deal\n",
        "createdAt" : "2015-05-01T18:10:08Z",
        "updatedAt" : "2015-05-04T04:17:07Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "84afe26aa513c29f8511f82dc2dd1679cb3d9176",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1561,1565 @@                  unistr([0xFF11, 0xFF12, 0xFF13]), # １２３\n                  np.nan,\n                  unistr([0xFF71, 0xFF72, 0xFF74])] # ｱｲｴ\n        s = Series(values, index=['a', 'b', 'c', 'd', 'e'])\n"
  },
  {
    "id" : "54aade64-474d-4d20-b893-edf0b852b139",
    "prId" : 10052,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcafbc03-8027-475d-bb47-fcff5940d7bb",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Could you add below testcases, though it shouldn't fail based on current impl.\n- `test_empty_str_methods`\n- With Series with non-string values\n",
        "createdAt" : "2015-05-06T02:53:26Z",
        "updatedAt" : "2015-05-08T17:52:53Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "b4ab8fa2-d700-4932-a383-4941411ca292",
        "parentId" : "dcafbc03-8027-475d-bb47-fcff5940d7bb",
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "for the first one, you mean testing `s.str.translate()` when some of the strings are empty? \n",
        "createdAt" : "2015-05-06T03:10:59Z",
        "updatedAt" : "2015-05-08T17:52:53Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      },
      {
        "id" : "09707e68-bc27-4cf0-84c1-1a963582b1c1",
        "parentId" : "dcafbc03-8027-475d-bb47-fcff5940d7bb",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "No, dtype check for when `Series` itself is empty. You can find `test_empty_str_methods` in \"test_string.py\" which has a group of this check.\n",
        "createdAt" : "2015-05-06T03:14:24Z",
        "updatedAt" : "2015-05-08T17:52:53Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "9ea59b21-f403-43ec-8c02-e22884b44a3b",
        "parentId" : "dcafbc03-8027-475d-bb47-fcff5940d7bb",
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "ah i see, sure will do \n",
        "createdAt" : "2015-05-06T03:16:01Z",
        "updatedAt" : "2015-05-08T17:52:53Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      },
      {
        "id" : "ca18edea-d55d-4e7c-b7ed-340d459b1595",
        "parentId" : "dcafbc03-8027-475d-bb47-fcff5940d7bb",
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "updated \n",
        "createdAt" : "2015-05-06T03:22:15Z",
        "updatedAt" : "2015-05-08T17:52:53Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "52a067c95ee874d097d31f0b0f46fc79cfcf62b4",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1046,1050 @@            result = values.str.pad(5, fillchar=5)\n\n    def test_translate(self):\n        for klass in [Series, Index]:\n            s = klass(['abcdefg', 'abcc', 'cdddfg', 'cdefggg'])"
  },
  {
    "id" : "726717a5-84a4-4a34-8cb7-decf3588f4c6",
    "prId" : 10303,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bfd6e4b-e1d7-445a-88ea-c3fb7f206b3a",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Can you add some cases using  `maxsplit` and `expand=True`?\n",
        "createdAt" : "2015-06-06T21:10:08Z",
        "updatedAt" : "2015-06-08T17:13:46Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "b2e772de-d545-4f32-b641-31d1f5bd98c2",
        "parentId" : "2bfd6e4b-e1d7-445a-88ea-c3fb7f206b3a",
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "it's added \n",
        "createdAt" : "2015-06-08T17:29:47Z",
        "updatedAt" : "2015-06-08T17:29:47Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc66f436c94557c7ecabc8a8679aeed7801782f3",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +1244,1248 @@        tm.assert_series_equal(result, exp)\n\n    def test_rsplit(self):\n        values = Series(['a_b_c', 'c_d_e', NA, 'f_g_h'])\n        result = values.str.rsplit('_')"
  },
  {
    "id" : "bb9c6648-8e2e-4e6f-a643-2327f7fcedc7",
    "prId" : 10303,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f49ec76-6680-4c60-9cce-956d48400945",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should this raise? (though not obvious how to detect this is a regex)\n",
        "createdAt" : "2015-06-08T11:45:45Z",
        "updatedAt" : "2015-06-08T17:13:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d80b275c-0dd7-4d6d-8d1a-6a3d66078285",
        "parentId" : "4f49ec76-6680-4c60-9cce-956d48400945",
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "Yeah it's not clear how we would catch this - the user could in theory mean the literally string even if it looks like a regex\n",
        "createdAt" : "2015-06-08T17:29:26Z",
        "updatedAt" : "2015-06-08T17:29:26Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc66f436c94557c7ecabc8a8679aeed7801782f3",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +1283,1287 @@\n        # regex split is not supported by rsplit\n        values = Series([u('a,b_c'), u('c_d,e'), NA, u('f,g,h')])\n        result = values.str.rsplit('[,_]')\n        exp = Series([[u('a,b_c')],"
  }
]