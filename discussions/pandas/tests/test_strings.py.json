[
  {
    "id" : "731bc714-6278-4868-b069-1e601918b5fe",
    "prId" : 5224,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40f280bd-a1e2-4e25-abc6-62028de68248",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "future reference - you can use `assert_produces_warning()` here as well, so you could get down to:\n\n``` python\nwith tm.assert_produces_warning():\n    result = values.str.match('.*(BAD[_]+).*(BAD)')\n```\n",
        "createdAt" : "2013-10-31T00:51:42Z",
        "updatedAt" : "2013-10-31T00:51:42Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b832d020035c06dcdcdab93cb0cfd8851235ad1",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +420,424 @@        values = Series([u('fooBAD__barBAD'), NA, u('foo')])\n\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter('always')\n            result = values.str.match('.*(BAD[_]+).*(BAD)')"
  },
  {
    "id" : "a35b2aa5-4f32-4310-a3aa-53bb3cff227e",
    "prId" : 9439,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcbe37f7-725e-40c7-aa95-db9ae0ceca32",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "ugh... I guess we still support Python 3.2 :(\n",
        "createdAt" : "2015-02-07T01:19:40Z",
        "updatedAt" : "2015-02-07T01:19:40Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "01c038fc-92e2-4caf-b900-2955b220f9e1",
        "parentId" : "dcbe37f7-725e-40c7-aa95-db9ae0ceca32",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Isn't 3.2 tested in below? I've expected `compat.unichr` can work for 3.2 also.\n\nhttps://travis-ci.org/pydata/pandas/jobs/49806158\n",
        "createdAt" : "2015-02-07T02:19:25Z",
        "updatedAt" : "2015-02-07T02:19:25Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "cf904e10-4637-4deb-866b-3148073b6571",
        "parentId" : "dcbe37f7-725e-40c7-aa95-db9ae0ceca32",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "I know, it works!\n\nI was going to suggest just using `u'¼'` but the `u` unicode literal is not supported on Python 3.2.\n",
        "createdAt" : "2015-02-07T02:21:08Z",
        "updatedAt" : "2015-02-07T02:21:08Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "3ee673af-1a47-44e5-a097-3ed57669c62d",
        "parentId" : "dcbe37f7-725e-40c7-aa95-db9ae0ceca32",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "I see. I also tried to use `u` at first and failed... Will wait a conclusion of #9118.\n",
        "createdAt" : "2015-02-07T02:26:36Z",
        "updatedAt" : "2015-02-07T02:26:36Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "7bd377d3-4fc3-4558-831b-074dc330a0e3",
        "parentId" : "dcbe37f7-725e-40c7-aa95-db9ae0ceca32",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "u(...) is the way to handle 3.2 compat\n",
        "createdAt" : "2015-02-07T02:28:26Z",
        "updatedAt" : "2015-02-07T02:28:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "41503957-128e-4e66-a974-66f323f1a92e",
        "parentId" : "dcbe37f7-725e-40c7-aa95-db9ae0ceca32",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "I think we can't use `u( )` here because escaped unicode is not handled as numeric or decimal.\n",
        "createdAt" : "2015-02-07T02:36:48Z",
        "updatedAt" : "2015-02-07T02:36:48Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "004610035b156b4e5e2c8694878e65f055e30db3",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +667,671 @@        # 0x1378: ፸ ETHIOPIC NUMBER SEVENTY\n        # 0xFF13: ３ Em 3\n        values = ['A', '3', unichr(0x00bc), unichr(0x2605),\n                  unichr(0x1378), unichr(0xFF13), 'four']\n        s = Series(values)"
  },
  {
    "id" : "3c034cf8-0717-41c8-98e4-1f4525fb79bd",
    "prId" : 10031,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60583847-2116-4f24-bf30-5f64e14eae26",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't know to what extent we want to really have such unicode characters in our source files?\n",
        "createdAt" : "2015-05-01T12:42:08Z",
        "updatedAt" : "2015-05-04T04:17:07Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e18456fe-fadc-49eb-abfe-18b76f9b7fb0",
        "parentId" : "60583847-2116-4f24-bf30-5f64e14eae26",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "This is an alternative expression of normal unicode string, such as \"u'ＡＢＣ'\" to work both on 2.x and 3.x. Unable to use `six.u` here, because it escapes unicode literal and change the result.\n",
        "createdAt" : "2015-05-01T13:47:22Z",
        "updatedAt" : "2015-05-04T04:17:07Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "5acdde45-44ac-4c63-9be2-832b72713b16",
        "parentId" : "60583847-2116-4f24-bf30-5f64e14eae26",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "Once we remove Python 3.2 support we can finally use `u`....\n",
        "createdAt" : "2015-05-01T17:46:35Z",
        "updatedAt" : "2015-05-04T04:17:07Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "4f2aba8f-5c01-493d-9b56-b774d565e9eb",
        "parentId" : "60583847-2116-4f24-bf30-5f64e14eae26",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@shoyer 0.17? see https://github.com/pydata/pandas/issues/9118, maybe we should just decide when the 'finally' will be\n\n@sinhrks sorry to be unclear, I just meant the unicode in the comment (what the unistr forms). I know our source files are unicode (or at least this one is), but I was just wondering to what extent we should also really use such characters (eg for when people with older or misconfigured editors looking at this file). But probably not a big deal\n",
        "createdAt" : "2015-05-01T18:10:08Z",
        "updatedAt" : "2015-05-04T04:17:07Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "84afe26aa513c29f8511f82dc2dd1679cb3d9176",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1561,1565 @@                  unistr([0xFF11, 0xFF12, 0xFF13]), # １２３\n                  np.nan,\n                  unistr([0xFF71, 0xFF72, 0xFF74])] # ｱｲｴ\n        s = Series(values, index=['a', 'b', 'c', 'd', 'e'])\n"
  },
  {
    "id" : "54aade64-474d-4d20-b893-edf0b852b139",
    "prId" : 10052,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcafbc03-8027-475d-bb47-fcff5940d7bb",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Could you add below testcases, though it shouldn't fail based on current impl.\n- `test_empty_str_methods`\n- With Series with non-string values\n",
        "createdAt" : "2015-05-06T02:53:26Z",
        "updatedAt" : "2015-05-08T17:52:53Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "b4ab8fa2-d700-4932-a383-4941411ca292",
        "parentId" : "dcafbc03-8027-475d-bb47-fcff5940d7bb",
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "for the first one, you mean testing `s.str.translate()` when some of the strings are empty? \n",
        "createdAt" : "2015-05-06T03:10:59Z",
        "updatedAt" : "2015-05-08T17:52:53Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      },
      {
        "id" : "09707e68-bc27-4cf0-84c1-1a963582b1c1",
        "parentId" : "dcafbc03-8027-475d-bb47-fcff5940d7bb",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "No, dtype check for when `Series` itself is empty. You can find `test_empty_str_methods` in \"test_string.py\" which has a group of this check.\n",
        "createdAt" : "2015-05-06T03:14:24Z",
        "updatedAt" : "2015-05-08T17:52:53Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "9ea59b21-f403-43ec-8c02-e22884b44a3b",
        "parentId" : "dcafbc03-8027-475d-bb47-fcff5940d7bb",
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "ah i see, sure will do \n",
        "createdAt" : "2015-05-06T03:16:01Z",
        "updatedAt" : "2015-05-08T17:52:53Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      },
      {
        "id" : "ca18edea-d55d-4e7c-b7ed-340d459b1595",
        "parentId" : "dcafbc03-8027-475d-bb47-fcff5940d7bb",
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "updated \n",
        "createdAt" : "2015-05-06T03:22:15Z",
        "updatedAt" : "2015-05-08T17:52:53Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "52a067c95ee874d097d31f0b0f46fc79cfcf62b4",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1046,1050 @@            result = values.str.pad(5, fillchar=5)\n\n    def test_translate(self):\n        for klass in [Series, Index]:\n            s = klass(['abcdefg', 'abcc', 'cdddfg', 'cdefggg'])"
  },
  {
    "id" : "726717a5-84a4-4a34-8cb7-decf3588f4c6",
    "prId" : 10303,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bfd6e4b-e1d7-445a-88ea-c3fb7f206b3a",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Can you add some cases using  `maxsplit` and `expand=True`?\n",
        "createdAt" : "2015-06-06T21:10:08Z",
        "updatedAt" : "2015-06-08T17:13:46Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "b2e772de-d545-4f32-b641-31d1f5bd98c2",
        "parentId" : "2bfd6e4b-e1d7-445a-88ea-c3fb7f206b3a",
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "it's added \n",
        "createdAt" : "2015-06-08T17:29:47Z",
        "updatedAt" : "2015-06-08T17:29:47Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc66f436c94557c7ecabc8a8679aeed7801782f3",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +1244,1248 @@        tm.assert_series_equal(result, exp)\n\n    def test_rsplit(self):\n        values = Series(['a_b_c', 'c_d_e', NA, 'f_g_h'])\n        result = values.str.rsplit('_')"
  },
  {
    "id" : "bb9c6648-8e2e-4e6f-a643-2327f7fcedc7",
    "prId" : 10303,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f49ec76-6680-4c60-9cce-956d48400945",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should this raise? (though not obvious how to detect this is a regex)\n",
        "createdAt" : "2015-06-08T11:45:45Z",
        "updatedAt" : "2015-06-08T17:13:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d80b275c-0dd7-4d6d-8d1a-6a3d66078285",
        "parentId" : "4f49ec76-6680-4c60-9cce-956d48400945",
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "Yeah it's not clear how we would catch this - the user could in theory mean the literally string even if it looks like a regex\n",
        "createdAt" : "2015-06-08T17:29:26Z",
        "updatedAt" : "2015-06-08T17:29:26Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc66f436c94557c7ecabc8a8679aeed7801782f3",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +1283,1287 @@\n        # regex split is not supported by rsplit\n        values = Series([u('a,b_c'), u('c_d,e'), NA, u('f,g,h')])\n        result = values.str.rsplit('[,_]')\n        exp = Series([[u('a,b_c')],"
  },
  {
    "id" : "b5262805-446e-435c-9a02-fc7b610136e1",
    "prId" : 15456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15456#pullrequestreview-24793724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b3ca45c-e0a7-47b4-88a3-0afbb4e49e29",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so looks like this is failing of the builds: https://circleci.com/gh/pandas-dev/pandas/188?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link\r\n\r\nThis is a build where we override LOCALE='C' You can tests locally by adding \r\n\r\n```\r\nimport locale\r\nlocale.setlocale(locale.LC_ALL, 'C')\r\n```\r\n\r\nat the top of ``pandas/pandas/__init__.py``\r\n\r\nand running with 3.5\r\n\r\nnot entirely sure what is happening",
        "createdAt" : "2017-03-02T13:55:36Z",
        "updatedAt" : "2017-03-05T11:23:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d952cfec-21a6-4b5f-8b11-87cd13a379fe",
        "parentId" : "5b3ca45c-e0a7-47b4-88a3-0afbb4e49e29",
        "authorId" : "4bdd0fe8-ed1b-42c9-89ed-c4c5ca99cf82",
        "body" : "Thanks for tracing it out. I believe the issue is related to `re` in python 3.4 requiring an integer for `flags` (similar to the same requirement for 2.7). I'll look to fix it today.",
        "createdAt" : "2017-03-02T17:34:32Z",
        "updatedAt" : "2017-03-05T11:23:05Z",
        "lastEditedBy" : "4bdd0fe8-ed1b-42c9-89ed-c4c5ca99cf82",
        "tags" : [
        ]
      }
    ],
    "commit" : "624637f67528fb9f85e2d26e5faa2ddcc0983f22",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +478,482 @@        result = values.str.replace(pat, '')\n        exp = Series(['foobar', NA])\n        tm.assert_series_equal(result, exp)\n\n        # mixed"
  },
  {
    "id" : "548cc106-bae7-42e6-9720-e07cf3f23879",
    "prId" : 19075,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19075#pullrequestreview-86784894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19c4067c-cfba-42d4-ac60-22329ce27914",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "By test comments, @jreback meant a comment with the issue number, so like `# GH-19075` just below the `def test_`",
        "createdAt" : "2018-01-04T23:01:42Z",
        "updatedAt" : "2018-01-05T15:50:14Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "12f94de43c870ab036510396d7572ebaf9bd26ea",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1083,1087 @@        (['a3', 'b3', 'd4c2'], ('i1', 'i2')),\n    ])\n    def test_extractall_no_matches(self, data, names):\n        # GH19075 extractall with no matches should return a valid MultiIndex\n        n = len(data)"
  },
  {
    "id" : "61a50d4f-cbf8-4cf6-b37a-a3853834b922",
    "prId" : 22170,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22170#pullrequestreview-171196284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5adb7f60-9840-4c53-9641-0ef766cff171",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the issue number where needed here (maybe just move these to a separate test)",
        "createdAt" : "2018-10-18T16:03:38Z",
        "updatedAt" : "2018-11-18T22:18:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c9518e51-856a-473d-b877-30c8486058c3",
        "parentId" : "5adb7f60-9840-4c53-9641-0ef766cff171",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@pulkitmaloo can you make this update? I think a new test seems like a good idea.",
        "createdAt" : "2018-11-02T17:21:21Z",
        "updatedAt" : "2018-11-18T22:18:09Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "44b36a4eb1326676331f037df698fcdccdeb94ec",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +516,520 @@        # gh 22158\n\n        # na for category\n        values = Series([\"a\", \"b\", \"c\", \"a\", np.nan], dtype=\"category\")\n        result = values.str.contains('a', na=True)"
  },
  {
    "id" : "edd1334e-66a2-427a-99ce-0229305b2c26",
    "prId" : 23167,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23167#pullrequestreview-244590555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fea2fd2b-f321-4582-a306-e19096af9367",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "nice on removing some of the xfails; ideally we can remove the rest in future PRs",
        "createdAt" : "2019-06-01T15:02:37Z",
        "updatedAt" : "2019-06-01T15:02:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f62e344f49dfe5df95a4d7caf26585e387de5386",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +210,214 @@\n        # TODO: get rid of these xfails\n        if (method_name in ['partition', 'rpartition'] and box == Index\n                and inferred_dtype == 'empty'):\n            pytest.xfail(reason='Method cannot deal with empty Index')"
  },
  {
    "id" : "40d8dec4-bdda-4240-96ab-779b96bc0eb0",
    "prId" : 23187,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23187#pullrequestreview-166514228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02161cd9-adeb-4da1-988a-15f43f2be8d8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add the issue number here",
        "createdAt" : "2018-10-19T13:08:33Z",
        "updatedAt" : "2018-10-22T14:21:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "deb912eb8b60aeec8bee1ed7d30504de492eb8e9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +302,306 @@            s.str.cat([u, [u, d]])\n\n        # forbidden input type: set\n        # GH 23009\n        with tm.assert_raises_regex(TypeError, rgx):"
  },
  {
    "id" : "637ba22b-626b-43ea-ba25-c3d5a53a6f01",
    "prId" : 23582,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23582#pullrequestreview-173701923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b29d95fa-efbc-4b6b-932c-d86aca0fb678",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see my comment above",
        "createdAt" : "2018-11-11T15:15:23Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a53a28e70393e5ba853dbcfbdd610d339f97acb5",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +206,210 @@        types_passing_constructor = ['string', 'unicode', 'empty',\n                                     'bytes', 'mixed', 'mixed-integer']\n        if inferred_dtype in types_passing_constructor:\n            # GH 6106\n            assert isinstance(t.str, strings.StringMethods)"
  },
  {
    "id" : "e7224ddb-0cc2-44f4-9d10-e3b9bc27b7b0",
    "prId" : 23582,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23582#pullrequestreview-174620388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd6200cb-dfd6-4692-99c3-fc2b62c7876e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can actually make this 2 tests by putting the xfails in a function. then the test becomes single purpose and you don't have the if statement near the bottom.",
        "createdAt" : "2018-11-11T15:15:58Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "93618e20-dd53-48ce-b894-7455e7daa39f",
        "parentId" : "bd6200cb-dfd6-4692-99c3-fc2b62c7876e",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "I don't understand what you're asking for here, sorry.\r\n\r\nThe test is already very single-purpose (except the xfails, which will be gone with #23167 and follow-up PRs), and the final if-switch makes it transparent which types are actually passing the constructor, with all other types raising. this would only get harder to understand if it's split into two, no?",
        "createdAt" : "2018-11-11T17:34:35Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "8545dbe2-e2e4-4e48-b014-c32220f197f6",
        "parentId" : "bd6200cb-dfd6-4692-99c3-fc2b62c7876e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no you have an if else branch. it makes reasoning about this impossible as its very fixture / data dependent. ",
        "createdAt" : "2018-11-11T17:43:20Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "aad14490-a9bd-4883-b063-aa2b24e61da0",
        "parentId" : "bd6200cb-dfd6-4692-99c3-fc2b62c7876e",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "The if branch is transparently for the cases where the `.str`-accessor raises or not. I do not understand how you want me to structure this test (resp. this function you mentioned).",
        "createdAt" : "2018-11-11T22:16:34Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "bd268c17-2dbc-4581-904a-c4fb1f757d66",
        "parentId" : "bd6200cb-dfd6-4692-99c3-fc2b62c7876e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if/else make the test very hard to understand. pls break in 2",
        "createdAt" : "2018-11-11T23:35:08Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "99b8bd62-2c66-49ae-ae34-347ab4d8787b",
        "parentId" : "bd6200cb-dfd6-4692-99c3-fc2b62c7876e",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "This particular test can be broken into `_passes` and `_raises`, but that last if condition is really not that hard. Don't get that objection, tbh.\r\n```\r\nif inferred_dtype in types_passing_constructor:\r\n    # pass\r\nelse:\r\n    # raise",
        "createdAt" : "2018-11-12T07:36:46Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "40595623-6e82-4a7a-a174-16b02e36eb3c",
        "parentId" : "bd6200cb-dfd6-4692-99c3-fc2b62c7876e",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Respectfully, I find it an unrealistic criterion to not be able to use *one* simple if-condition in a test (aside from xfails, which will be gone soon after). The whole point is that it's got an extensively parametrized fixture (`any_skipna_inferred_dtype`), and I have to make a single distinction based on the content of that fixture.\r\n\r\nEven if I were to split this test into `_passes` and `_raises`, I'd have to use the *same* kind of if-condition, unless I were to needlessly break up the parametrized fixtures into smaller subsets.",
        "createdAt" : "2018-11-13T22:33:03Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a53a28e70393e5ba853dbcfbdd610d339f97acb5",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +182,186 @@        inferred_dtype, values = any_skipna_inferred_dtype\n\n        t = box(values, dtype=dtype)  # explicit dtype to avoid casting\n\n        # TODO: get rid of these xfails"
  },
  {
    "id" : "6790984b-cf92-4c9e-994b-3175595c3597",
    "prId" : 23582,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23582#pullrequestreview-173776285",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50ca1b3c-3998-4c5d-887e-c78e0946c268",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same comment as above",
        "createdAt" : "2018-11-11T15:17:06Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f4919b39-119f-4707-b328-5049da3fe8f4",
        "parentId" : "50ca1b3c-3998-4c5d-887e-c78e0946c268",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "These xfails will be gone, and then the test reads very clearly, IMO",
        "createdAt" : "2018-11-11T17:36:49Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "a38fd55e-f95e-42a7-b5cf-836a4793e7ab",
        "parentId" : "50ca1b3c-3998-4c5d-887e-c78e0946c268",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "this test cannot be broken up as easily, because the allowed types depend on the method being checked!",
        "createdAt" : "2018-11-12T07:37:17Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a53a28e70393e5ba853dbcfbdd610d339f97acb5",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +230,234 @@\n        # TODO: get rid of these xfails\n        if (method_name not in ['encode', 'decode', 'len']\n                and inferred_dtype == 'bytes'):\n            pytest.xfail(reason='Not raising for \"bytes\", see GH 23011;'"
  },
  {
    "id" : "ec5e287f-0253-4f87-b342-22a61b5e06e6",
    "prId" : 23582,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23582#pullrequestreview-174620388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fcf5e8e-99f4-44d8-87c6-8118159ba36c",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "These are the remnants of `test_str_accessor_api_for_categorical` after parametrization.",
        "createdAt" : "2018-11-13T22:43:20Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a53a28e70393e5ba853dbcfbdd610d339f97acb5",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +274,278 @@                method(*args, **kwargs)\n\n    def test_api_for_categorical(self, any_string_method):\n        # https://github.com/pandas-dev/pandas/issues/10661\n        s = Series(list('aabb'))"
  },
  {
    "id" : "5babcd60-f928-495c-b18c-2afe7168ac22",
    "prId" : 23618,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23618#pullrequestreview-173721950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f944057-86e1-4ca8-9443-127bab1a2619",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use a ``None`` here for one of the ``np.nan``",
        "createdAt" : "2018-11-11T23:03:47Z",
        "updatedAt" : "2018-11-18T12:44:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "52666a5e-ba7f-4bcb-ba7f-8303da97a045",
        "parentId" : "5f944057-86e1-4ca8-9443-127bab1a2619",
        "authorId" : "22f671cb-1ec5-4ca3-8d21-dddd8c003c7a",
        "body" : "added multiple None's in the tests",
        "createdAt" : "2018-11-11T23:48:24Z",
        "updatedAt" : "2018-11-18T12:44:41Z",
        "lastEditedBy" : "22f671cb-1ec5-4ca3-8d21-dddd8c003c7a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a200945e75f179cd1cceb599a82729f5037bf32",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +2541,2545 @@\n        result = values.str.partition('_')\n        exp = Index([('a', '_', 'b_c'), ('c', '_', 'd_e'),\n                     ('f', '_', 'g_h'), (np.nan, np.nan, np.nan),\n                     (None, None, None)])"
  },
  {
    "id" : "2f4790fa-348d-43ae-992e-f61e9d5c341b",
    "prId" : 27949,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27949#pullrequestreview-290204179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67bb2e11-4d91-4936-b046-5c5d261263c2",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "indent?  otherwise youre asserting twice for Series case",
        "createdAt" : "2019-09-18T21:11:12Z",
        "updatedAt" : "2019-10-04T14:03:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e92cded0ca1e3747d02b417d27d4d7d039fe1b4",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +3293,3297 @@        assert all(result[columns].dtypes == \"string\")\n        result[columns] = result[columns].astype(object)\n    tm.assert_equal(result, expected)"
  },
  {
    "id" : "6a52056f-0104-4343-813d-8a945f8adc56",
    "prId" : 29986,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29986#pullrequestreview-327029781",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eebb12fc-23bf-4e3d-b728-df0b46b5611a",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Small nit, but those comments are no longer up to date (also above)",
        "createdAt" : "2019-12-04T07:51:48Z",
        "updatedAt" : "2019-12-04T07:51:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cf81d093-f940-46dc-acf0-12634ccfc3c6",
        "parentId" : "eebb12fc-23bf-4e3d-b728-df0b46b5611a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "updated #29985 to remove these comments",
        "createdAt" : "2019-12-04T17:37:45Z",
        "updatedAt" : "2019-12-04T17:37:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "96b47c5d362d4f05d90455b858819419904361f1",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +2978,2982 @@\n        # str.rpartition\n        # using sep -> no warning\n        expected = values.str.rpartition(sep=\"_\")\n        result = values.str.rpartition(\"_\")"
  },
  {
    "id" : "c4891594-d2bf-431f-8ddb-0b530ab2ee7b",
    "prId" : 30239,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30239#pullrequestreview-331503343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23c2c26c-0847-4171-aa57-02beb2cf8b8f",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can anyone with a 32-bit platform confirm the behavior on master for `.str` methods returning int dtype? Is it int32 or int64?\r\n\r\nWe may have been inconsistent before, and returned int32 for empty, but int64 for non-empty.",
        "createdAt" : "2019-12-12T18:13:28Z",
        "updatedAt" : "2019-12-12T21:02:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "dd64e50c-0e0a-4421-8da4-96eb7d1cd486",
        "parentId" : "23c2c26c-0847-4171-aa57-02beb2cf8b8f",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think this is correct; not sure we return a platform int save maybe niche cases",
        "createdAt" : "2019-12-12T20:26:32Z",
        "updatedAt" : "2019-12-12T21:02:39Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b83d677048ec550dff52e61a51abf068feb226d4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1826,1830 @@    def test_empty_str_methods(self):\n        empty_str = empty = Series(dtype=object)\n        empty_int = Series(dtype=\"int64\")\n        empty_bool = Series(dtype=bool)\n        empty_bytes = Series(dtype=object)"
  },
  {
    "id" : "572da257-27ff-4dde-beb1-90637a0eb743",
    "prId" : 31684,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31684#pullrequestreview-355682176",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0baef3a-fabe-4175-ae7c-83239ff81b59",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make a new test (call it test_repeat_with_null)",
        "createdAt" : "2020-02-09T18:09:33Z",
        "updatedAt" : "2020-02-11T04:25:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ef56b436-97c2-44d5-823f-9baba138078a",
        "parentId" : "b0baef3a-fabe-4175-ae7c-83239ff81b59",
        "authorId" : "d705e2fe-0c9b-4946-83ef-053374236fa1",
        "body" : "Done.",
        "createdAt" : "2020-02-10T04:03:34Z",
        "updatedAt" : "2020-02-11T04:25:59Z",
        "lastEditedBy" : "d705e2fe-0c9b-4946-83ef-053374236fa1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e50a2c0197ba38268c9fc95937742490eddc379",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1155,1159 @@\n    def test_repeat_with_null(self):\n        # GH: 31632\n        values = Series([\"a\", None], dtype=\"string\")\n        result = values.str.repeat([3, 4])"
  },
  {
    "id" : "a74d186b-f99e-4f34-a0f1-9d03fcf70812",
    "prId" : 32807,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32807#pullrequestreview-380666264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7dcdb0f-4548-4d87-978a-0537c45f0ed3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the issue number here as a comment",
        "createdAt" : "2020-03-22T00:26:05Z",
        "updatedAt" : "2020-03-24T05:33:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f61fbd60-6e73-4941-afce-76e90aada2cb",
        "parentId" : "f7dcdb0f-4548-4d87-978a-0537c45f0ed3",
        "authorId" : "296ac7bb-111f-4c6e-bedc-692544151c69",
        "body" : "Added a comment with the issue number in commit 2f94e0c .\r\nThe syntax I used was:\r\n```\r\n# GH 32806\r\n```\r\nPlease let me know if I should be using a different format to avoid messing up any automated tooling for these issue references.",
        "createdAt" : "2020-03-24T20:21:14Z",
        "updatedAt" : "2020-03-24T20:21:15Z",
        "lastEditedBy" : "296ac7bb-111f-4c6e-bedc-692544151c69",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ff52035db7decd0a5df7bb2bc94bd423b061c0d",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1212,1216 @@    def test_fullmatch(self):\n        # GH 32806\n        values = Series([\"fooBAD__barBAD\", \"BAD_BADleroybrown\", np.nan, \"foo\"])\n        result = values.str.fullmatch(\".*BAD[_]+.*BAD\")\n        exp = Series([True, False, np.nan, False])"
  }
]