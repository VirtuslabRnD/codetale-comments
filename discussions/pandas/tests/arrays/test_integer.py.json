[
  {
    "id" : "9d4d710e-8314-4a77-8ce9-0a838c0e8f7a",
    "prId" : 22762,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22762#pullrequestreview-164030379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89fe92ec-0eaf-4aaa-8266-ea17ea1d6022",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you then repeat this test for eg mean and assert the above is float (in a case where the mean is a rounded number) ?",
        "createdAt" : "2018-10-11T21:51:56Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "995df238-495a-4ddf-9eb6-05ccf6d36b3a",
        "parentId" : "89fe92ec-0eaf-4aaa-8266-ea17ea1d6022",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "(that's what I tried to ask with my previous comments on this)",
        "createdAt" : "2018-10-11T21:52:29Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "aeaf5f32c0939d6bedc99240b47dd54252dda96a",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +607,611 @@    # op\n    result = getattr(df.C, op)()\n    assert isinstance(result, int)\n\n    # groupby"
  },
  {
    "id" : "ac835402-0f85-4e0a-83be-5a425f0613a1",
    "prId" : 23155,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23155#pullrequestreview-166165329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1aa800a-ad37-4f9c-a512-d6272885abc8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm it must be as you are using it here",
        "createdAt" : "2018-10-18T15:47:02Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "03a367e047456de392d9af0bfcd0e58839dff9fe",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +309,313 @@    def test_rpow_one_to_na(self):\n        # https://github.com/pandas-dev/pandas/issues/22022\n        arr = integer_array([np.nan, np.nan])\n        result = np.array([1.0, 2.0]) ** arr\n        expected = np.array([1.0, np.nan])"
  },
  {
    "id" : "f130ef31-701a-4a0e-a2e7-262755e12e03",
    "prId" : 23155,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23155#pullrequestreview-166192611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "968242eb-28b9-401e-8fa1-6b7a2f2dc875",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "note I don't think we have a test that uses None / np.nan in integer_array construction (e.g. that they are both actually interpreted the same) if you want to add one (this test of course implicitiy asserts this)",
        "createdAt" : "2018-10-18T15:47:52Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "297271ba-6915-4461-9ffd-414ccc6e94fe",
        "parentId" : "968242eb-28b9-401e-8fa1-6b7a2f2dc875",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Mostly works, just a failing case on `integer_array([None])` in https://github.com/pandas-dev/pandas/issues/23224",
        "createdAt" : "2018-10-18T16:46:01Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "03a367e047456de392d9af0bfcd0e58839dff9fe",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +303,307 @@        a = integer_array([1, np.nan, np.nan, 1])\n        b = integer_array([1, np.nan, 1, np.nan])\n        result = a ** b\n        expected = pd.core.arrays.integer_array([1, np.nan, np.nan, 1])\n        tm.assert_extension_array_equal(result, expected)"
  },
  {
    "id" : "7dd09af7-db59-4d79-85b4-e31e5a705aef",
    "prId" : 23601,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23601#pullrequestreview-181241742",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5066f2c0-4448-4f94-ac88-225c59b6f8d8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these are somehow justified?",
        "createdAt" : "2018-12-04T00:01:09Z",
        "updatedAt" : "2018-12-04T00:01:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "60ab72e4-1ec0-4097-a20b-c0e43d4be9a7",
        "parentId" : "5066f2c0-4448-4f94-ac88-225c59b6f8d8",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Justified, as in \"vertically aligned\"? Here's the repr\r\n\r\n```python\r\nIn [10]: data\r\nOut[10]:\r\n<IntegerArray>\r\n[  1,   2, NaN,   1,   2, NaN,   1,   2, NaN,   1,\r\n ...\r\n NaN,   1,   2, NaN,   1,   2, NaN,   1,   2, NaN]\r\nLength: 3000, dtype: Int64\r\n```\r\n\r\nThe NaN pattern there makes the formatting a bt strange, but I think unavoidable.",
        "createdAt" : "2018-12-04T12:38:52Z",
        "updatedAt" : "2018-12-04T12:38:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "0957c25d-cdbf-4b8c-831a-aa1f6416b987",
        "parentId" : "5066f2c0-4448-4f94-ac88-225c59b6f8d8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no this is ok, was just wondering about",
        "createdAt" : "2018-12-04T12:57:07Z",
        "updatedAt" : "2018-12-04T12:57:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad113b374641b6eb1f0cb7b28d7d38e24099902",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +72,76 @@    expected = (\n        \"<IntegerArray>\\n\"\n        \"[  1,   2, NaN,   1,   2, NaN,   1,   2, NaN,   1,\\n\"\n        \" ...\\n\"\n        \" NaN,   1,   2, NaN,   1,   2, NaN,   1,   2, NaN]\\n\""
  },
  {
    "id" : "ac8176d8-22f0-400c-8a71-e6911a2681a8",
    "prId" : 29964,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29964#pullrequestreview-326648239",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ce12712-da23-44ae-9041-d231bc58d17b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In https://github.com/pandas-dev/pandas/pull/29961 I have found this TestComparisonOps tests not fully covering. Eg, I think you will also want to test comparing with a scalar `pd.NA`",
        "createdAt" : "2019-12-04T08:14:33Z",
        "updatedAt" : "2019-12-30T16:13:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5d6832f7f7f21a3a1f19ab0f56eaa48c25845de",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +423,427 @@        expected[data._mask] = pd.NA\n\n        tm.assert_series_equal(result, expected)\n\n        # series"
  }
]