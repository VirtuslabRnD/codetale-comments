[
  {
    "id" : "9d4d710e-8314-4a77-8ce9-0a838c0e8f7a",
    "prId" : 22762,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22762#pullrequestreview-164030379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89fe92ec-0eaf-4aaa-8266-ea17ea1d6022",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you then repeat this test for eg mean and assert the above is float (in a case where the mean is a rounded number) ?",
        "createdAt" : "2018-10-11T21:51:56Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "995df238-495a-4ddf-9eb6-05ccf6d36b3a",
        "parentId" : "89fe92ec-0eaf-4aaa-8266-ea17ea1d6022",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "(that's what I tried to ask with my previous comments on this)",
        "createdAt" : "2018-10-11T21:52:29Z",
        "updatedAt" : "2018-10-12T11:40:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "aeaf5f32c0939d6bedc99240b47dd54252dda96a",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +607,611 @@    # op\n    result = getattr(df.C, op)()\n    assert isinstance(result, int)\n\n    # groupby"
  },
  {
    "id" : "ac835402-0f85-4e0a-83be-5a425f0613a1",
    "prId" : 23155,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23155#pullrequestreview-166165329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1aa800a-ad37-4f9c-a512-d6272885abc8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm it must be as you are using it here",
        "createdAt" : "2018-10-18T15:47:02Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "03a367e047456de392d9af0bfcd0e58839dff9fe",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +309,313 @@    def test_rpow_one_to_na(self):\n        # https://github.com/pandas-dev/pandas/issues/22022\n        arr = integer_array([np.nan, np.nan])\n        result = np.array([1.0, 2.0]) ** arr\n        expected = np.array([1.0, np.nan])"
  },
  {
    "id" : "f130ef31-701a-4a0e-a2e7-262755e12e03",
    "prId" : 23155,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23155#pullrequestreview-166192611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "968242eb-28b9-401e-8fa1-6b7a2f2dc875",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "note I don't think we have a test that uses None / np.nan in integer_array construction (e.g. that they are both actually interpreted the same) if you want to add one (this test of course implicitiy asserts this)",
        "createdAt" : "2018-10-18T15:47:52Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "297271ba-6915-4461-9ffd-414ccc6e94fe",
        "parentId" : "968242eb-28b9-401e-8fa1-6b7a2f2dc875",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Mostly works, just a failing case on `integer_array([None])` in https://github.com/pandas-dev/pandas/issues/23224",
        "createdAt" : "2018-10-18T16:46:01Z",
        "updatedAt" : "2018-10-18T21:26:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "03a367e047456de392d9af0bfcd0e58839dff9fe",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +303,307 @@        a = integer_array([1, np.nan, np.nan, 1])\n        b = integer_array([1, np.nan, 1, np.nan])\n        result = a ** b\n        expected = pd.core.arrays.integer_array([1, np.nan, np.nan, 1])\n        tm.assert_extension_array_equal(result, expected)"
  },
  {
    "id" : "7dd09af7-db59-4d79-85b4-e31e5a705aef",
    "prId" : 23601,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23601#pullrequestreview-181241742",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5066f2c0-4448-4f94-ac88-225c59b6f8d8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these are somehow justified?",
        "createdAt" : "2018-12-04T00:01:09Z",
        "updatedAt" : "2018-12-04T00:01:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "60ab72e4-1ec0-4097-a20b-c0e43d4be9a7",
        "parentId" : "5066f2c0-4448-4f94-ac88-225c59b6f8d8",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Justified, as in \"vertically aligned\"? Here's the repr\r\n\r\n```python\r\nIn [10]: data\r\nOut[10]:\r\n<IntegerArray>\r\n[  1,   2, NaN,   1,   2, NaN,   1,   2, NaN,   1,\r\n ...\r\n NaN,   1,   2, NaN,   1,   2, NaN,   1,   2, NaN]\r\nLength: 3000, dtype: Int64\r\n```\r\n\r\nThe NaN pattern there makes the formatting a bt strange, but I think unavoidable.",
        "createdAt" : "2018-12-04T12:38:52Z",
        "updatedAt" : "2018-12-04T12:38:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "0957c25d-cdbf-4b8c-831a-aa1f6416b987",
        "parentId" : "5066f2c0-4448-4f94-ac88-225c59b6f8d8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no this is ok, was just wondering about",
        "createdAt" : "2018-12-04T12:57:07Z",
        "updatedAt" : "2018-12-04T12:57:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad113b374641b6eb1f0cb7b28d7d38e24099902",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +72,76 @@    expected = (\n        \"<IntegerArray>\\n\"\n        \"[  1,   2, NaN,   1,   2, NaN,   1,   2, NaN,   1,\\n\"\n        \" ...\\n\"\n        \" NaN,   1,   2, NaN,   1,   2, NaN,   1,   2, NaN]\\n\""
  },
  {
    "id" : "ac8176d8-22f0-400c-8a71-e6911a2681a8",
    "prId" : 29964,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29964#pullrequestreview-326648239",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ce12712-da23-44ae-9041-d231bc58d17b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In https://github.com/pandas-dev/pandas/pull/29961 I have found this TestComparisonOps tests not fully covering. Eg, I think you will also want to test comparing with a scalar `pd.NA`",
        "createdAt" : "2019-12-04T08:14:33Z",
        "updatedAt" : "2019-12-30T16:13:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5d6832f7f7f21a3a1f19ab0f56eaa48c25845de",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +423,427 @@        expected[data._mask] = pd.NA\n\n        tm.assert_series_equal(result, expected)\n\n        # series"
  },
  {
    "id" : "dc29ab10-0843-45bc-8a2d-78c241b80de4",
    "prId" : 30183,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30183#pullrequestreview-330102627",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2de2155-7c0e-450a-962b-b9f8f8bb46ac",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i didnt know about `shares_memory`, neat!",
        "createdAt" : "2019-12-10T19:52:35Z",
        "updatedAt" : "2019-12-10T21:10:21Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0264f991eb579ce28833a12ba93afcc83d47a59",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +405,409 @@    def test_no_shared_mask(self, data):\n        result = data + 1\n        assert np.shares_memory(result._mask, data._mask) is False\n\n    def test_compare_to_string(self, any_nullable_int_dtype):"
  },
  {
    "id" : "a5ba3bd3-4851-41b4-9997-afe49b37c1b8",
    "prId" : 30183,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30183#pullrequestreview-330257521",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d126abea-1d3c-46d7-84bc-4b109258cd60",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "small nitpick but maybe a little more concise to do:\r\n```python\r\nexpected = np.array([np.nan, np.inf, -np.inf, np.nan])\r\nif negative:\r\n    expected *= -1\r\n```",
        "createdAt" : "2019-12-10T21:26:16Z",
        "updatedAt" : "2019-12-10T21:26:59Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "e2807270-9fc1-4d8f-8ab7-7772c1a4b676",
        "parentId" : "d126abea-1d3c-46d7-84bc-4b109258cd60",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Given that CI is passing, I think I'm OK with how things are now :)",
        "createdAt" : "2019-12-10T22:40:45Z",
        "updatedAt" : "2019-12-10T22:40:46Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "24288a6f-16ba-4aa7-a5ca-d73056c4f695",
        "parentId" : "d126abea-1d3c-46d7-84bc-4b109258cd60",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "see tests.arithmetic.test_numeric.adjust_negative_zero",
        "createdAt" : "2019-12-11T01:51:57Z",
        "updatedAt" : "2019-12-11T01:51:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0264f991eb579ce28833a12ba93afcc83d47a59",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +350,354 @@        else:\n            values = [np.nan, np.inf, -np.inf, np.nan]\n        expected = np.array(values)\n        tm.assert_numpy_array_equal(result, expected)\n"
  },
  {
    "id" : "a359d74c-fbee-4edf-8cea-796d845e3c24",
    "prId" : 30183,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30183#pullrequestreview-330518815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca50b1d1-0413-47c4-8d3e-98496fdfde25",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "might be good to make a fixture for zeros as we do a lot of these types of tests for series ops, cc @jbrockmendel ",
        "createdAt" : "2019-12-11T12:57:41Z",
        "updatedAt" : "2019-12-11T12:58:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0264f991eb579ce28833a12ba93afcc83d47a59",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +340,344 @@            opa(np.arange(len(s)).reshape(-1, len(s)))\n\n    @pytest.mark.parametrize(\"zero, negative\", [(0, False), (0.0, False), (-0.0, True)])\n    def test_divide_by_zero(self, zero, negative):\n        # https://github.com/pandas-dev/pandas/issues/27398"
  },
  {
    "id" : "71e39554-924c-4a72-9d30-7467bd0cc787",
    "prId" : 30345,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30345#pullrequestreview-335176281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f04379a-9df9-4dc6-8426-81969f858900",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "if this warning should be suppressed, the place to do it is in the relevant code, not in the tests",
        "createdAt" : "2019-12-19T16:05:07Z",
        "updatedAt" : "2020-01-20T19:27:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e8c57cdf-7717-4c58-9c59-74fe64d979fa",
        "parentId" : "0f04379a-9df9-4dc6-8426-81969f858900",
        "authorId" : "304eb542-5ffd-4288-957c-0241ea5efff4",
        "body" : "Indeed, the numpy people are working on it. See the linked bug. Until this is resolved, I don't see another way of handling it than to filter this warning here. It's very specific, too, so we're not accidentally filtering anything else.",
        "createdAt" : "2019-12-20T10:23:05Z",
        "updatedAt" : "2020-01-20T19:27:06Z",
        "lastEditedBy" : "304eb542-5ffd-4288-957c-0241ea5efff4",
        "tags" : [
        ]
      }
    ],
    "commit" : "44f77935f041a501042d83842e6d98743e1813d2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +896,900 @@@pytest.mark.parametrize(\"ufunc\", [np.abs, np.sign])\n# np.sign emits a warning with nans, <https://github.com/numpy/numpy/issues/15127>\n@pytest.mark.filterwarnings(\"ignore:invalid value encountered in sign\")\ndef test_ufuncs_single_int(ufunc):\n    a = integer_array([1, 2, -3, np.nan])"
  },
  {
    "id" : "21c3294c-59ba-4571-8b3e-7183ced9cf73",
    "prId" : 31484,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31484#pullrequestreview-351581897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb633b00-4833-4b9f-a439-19ef9d0bd387",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It would be good to have a test in the base extensions tests as well (`base/setitem.py`), those can mimic the recently added tests in getitem.py (testing for nullable integer, nullable bool, the different errors, etc)",
        "createdAt" : "2020-01-31T12:09:56Z",
        "updatedAt" : "2020-02-01T12:00:52Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ee70a427-d81f-4f18-b3be-5fcabf856270",
        "parentId" : "bb633b00-4833-4b9f-a439-19ef9d0bd387",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "i added a couple tests, not fully sure if it is what you mean, feel free to review, thanks @jorisvandenbossche ",
        "createdAt" : "2020-01-31T15:28:29Z",
        "updatedAt" : "2020-02-01T12:00:52Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "edd4514ac82aefe1f86b5c6d16f689f23c6858b0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1075,1079 @@\n\ndef test_array_setitem_nullable_boolean_mask():\n    # GH 31446\n    ser = pd.Series([1, 2], dtype=\"Int64\")"
  },
  {
    "id" : "29b1c3f9-7916-4247-bb71-2aa6b610b661",
    "prId" : 32538,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32538#pullrequestreview-373774916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0731d847-c235-431e-bc37-c6eecb26238b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have tests with None, np.nan here as well?",
        "createdAt" : "2020-03-11T02:50:53Z",
        "updatedAt" : "2020-03-12T17:50:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f042be32-2b6f-42e5-9970-8f1b518573aa",
        "parentId" : "0731d847-c235-431e-bc37-c6eecb26238b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i guess those would go in the test for pd.array inference in tests.arrays.test_array, where I see a test for `[1, None]`",
        "createdAt" : "2020-03-12T17:49:12Z",
        "updatedAt" : "2020-03-12T17:50:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "87dc843ecd99b4d28598a5255673c39d74d7b0c5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +634,638 @@        tm.assert_series_equal(result, expected)\n\n    def test_astype_dt64(self):\n        # GH#32435\n        arr = pd.array([1, 2, 3, pd.NA]) * 10 ** 9"
  }
]