[
  {
    "id" : "71450081-f6d6-4964-80e9-fb083c5663ee",
    "prId" : 29842,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29842#pullrequestreview-323475976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dc8b549-6a6a-41a5-bc7f-1ffc7cc304cc",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "A careful review of these new test cases would be greatly appreciated. I've tried to make them as clear as possible, while covering all the cases.",
        "createdAt" : "2019-11-25T22:01:04Z",
        "updatedAt" : "2019-12-06T21:40:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "51e2926a-25c3-4fb2-8d6e-a54c0de12cae",
        "parentId" : "5dc8b549-6a6a-41a5-bc7f-1ffc7cc304cc",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I went through the tests, very clear, added a few comments, for the rest looks good to me!",
        "createdAt" : "2019-11-27T08:50:32Z",
        "updatedAt" : "2019-12-06T21:40:16Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "31c2bc6dc3c8d7ef7cbf7aea41d6d686f7ff58ca",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +417,421 @@            getattr(a, all_logical_operators)(other)\n\n    def test_kleene_or(self):\n        # A clear test of behavior.\n        a = pd.array([True] * 3 + [False] * 3 + [None] * 3, dtype=\"boolean\")"
  },
  {
    "id" : "240e125c-675a-43cd-96c7-15f509df5a2b",
    "prId" : 29842,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29842#pullrequestreview-323475976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b31595c1-71db-4532-a19b-c28307a108b0",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you also test the case where the scalar is True or False here? (that is still related to Kleene, since there is a missing value in the array)",
        "createdAt" : "2019-11-27T08:27:48Z",
        "updatedAt" : "2019-12-06T21:40:16Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c3a63cdb-b79b-4cd9-9e65-e21011a0b669",
        "parentId" : "b31595c1-71db-4532-a19b-c28307a108b0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Or integrate with test case below?",
        "createdAt" : "2019-11-27T08:48:54Z",
        "updatedAt" : "2019-12-06T21:40:16Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "31c2bc6dc3c8d7ef7cbf7aea41d6d686f7ff58ca",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +437,441 @@            b, pd.array([True, False, None] * 3, dtype=\"boolean\")\n        )\n\n    @pytest.mark.parametrize(\n        \"other, expected\","
  },
  {
    "id" : "b69efe46-efc2-4173-b234-dce9a536cd43",
    "prId" : 30077,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30077#pullrequestreview-327730527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c723b5d-e5fd-4de0-957a-205286011941",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is this todo actionable now or do we have to wait until [condition]?",
        "createdAt" : "2019-12-05T17:27:36Z",
        "updatedAt" : "2019-12-18T14:19:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c5ec7ad5-1e8d-4e33-895d-ba1fdda8ad1d",
        "parentId" : "8c723b5d-e5fd-4de0-957a-205286011941",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It's not yet implemented, open issue for this is https://github.com/pandas-dev/pandas/issues/30038",
        "createdAt" : "2019-12-05T17:38:09Z",
        "updatedAt" : "2019-12-18T14:19:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ed8650366f434bd4ab36c40f3ae0e1a549859c4",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +765,769 @@    arr = pa.array(data)\n\n    # TODO use to_numpy(na_value=None) here\n    data_object = np.array(data, dtype=object)\n    data_object[data.isna()] = None"
  },
  {
    "id" : "fd9b00b2-0f4d-47e2-98a9-dd86db63d842",
    "prId" : 30824,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30824#pullrequestreview-340697558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd97710a-0fe0-4308-b738-cddd05fb6fdf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is the result an object dtyped Series when dropna=True? (add a test as well)",
        "createdAt" : "2020-01-09T02:31:43Z",
        "updatedAt" : "2020-01-09T15:29:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "510eed62-216e-4ce2-9acc-835305fd9dab",
        "parentId" : "fd97710a-0fe0-4308-b738-cddd05fb6fdf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In neither cases (dropna True of False) is the result an object dtype series, it is always integer (it are just counts).\r\n\r\nThat said, should the result here rather be a nullable integer type? Not that there are nulls here, but in the light of \"trying to return nullable types as much as possible from operations involving nullable types\". ",
        "createdAt" : "2020-01-09T08:51:58Z",
        "updatedAt" : "2020-01-09T15:29:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "28749ead-4aea-4fc8-aad5-7430856c957d",
        "parentId" : "fd97710a-0fe0-4308-b738-cddd05fb6fdf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, yeah i think we should just move this to return a nullable integer (as this is new api). will promote consistency in the future.",
        "createdAt" : "2020-01-09T13:19:39Z",
        "updatedAt" : "2020-01-09T15:29:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cc58499b-6e99-4f71-a70a-b2c3c1f2d1ac",
        "parentId" : "fd97710a-0fe0-4308-b738-cddd05fb6fdf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hmm, OK, will update these.",
        "createdAt" : "2020-01-09T13:53:31Z",
        "updatedAt" : "2020-01-09T15:29:58Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b2d0d68a-d473-412a-b56a-544cf53ea4cc",
        "parentId" : "fd97710a-0fe0-4308-b738-cddd05fb6fdf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "And so API breaking change for IntegerARrray.value_counts to return a nullalble int dtype too?",
        "createdAt" : "2020-01-09T13:58:07Z",
        "updatedAt" : "2020-01-09T15:29:58Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a83a7b09-f4c8-4304-83e7-b03d148ceb63",
        "parentId" : "fd97710a-0fe0-4308-b738-cddd05fb6fdf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would consider doing that, yes.",
        "createdAt" : "2020-01-09T14:09:06Z",
        "updatedAt" : "2020-01-09T15:29:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "119a9a76-8fd2-4145-87a5-08eb4d35a6e9",
        "parentId" : "fd97710a-0fe0-4308-b738-cddd05fb6fdf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> That said, should the result here rather be a nullable integer type? Not that there are nulls here, but in the light of \"trying to return nullable types as much as possible from operations involving nullable types\".\r\n\r\nI think the \"trying to return nullable...\" would suggest we would want to keep the dtype for the _index_ here, not the values.  It seems weird that the values would be anything other than np.int64",
        "createdAt" : "2020-01-09T16:23:50Z",
        "updatedAt" : "2020-01-09T16:23:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a2febf42-a708-49fd-9c27-e79022673b2f",
        "parentId" : "fd97710a-0fe0-4308-b738-cddd05fb6fdf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This discussion was about the values, not the index. I think the idea is to keep operations on these nullable types in the nullable type arena.",
        "createdAt" : "2020-01-09T16:40:48Z",
        "updatedAt" : "2020-01-09T16:40:49Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "929f1eed-a615-41d2-8627-669de8fee1d0",
        "parentId" : "fd97710a-0fe0-4308-b738-cddd05fb6fdf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Right, and I'm saying it _doesnt_ make sense to keep the values nullable",
        "createdAt" : "2020-01-09T16:50:46Z",
        "updatedAt" : "2020-01-09T16:50:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2d33b46f-f81d-4dc2-82f0-998cd2354808",
        "parentId" : "fd97710a-0fe0-4308-b738-cddd05fb6fdf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you expand on why you find it weird?\r\n\r\nIt's true that the result of a value_counts will always have no NAs, but returning a nullable int type prevents a reintroduction of NAs in subsequent operations from converting to float.",
        "createdAt" : "2020-01-09T16:52:32Z",
        "updatedAt" : "2020-01-09T16:52:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "d6c14dfc-ec8d-4d67-9681-093a126bc900",
        "parentId" : "fd97710a-0fe0-4308-b738-cddd05fb6fdf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Can you expand on why you find it weird?\r\n\r\nThe motivation is to maintain consistency of \"operations with nullable types return nullable types\".  But making value_counts().values return IntNA breaks the consistency of \"values_counts().values is always np.int64\".  So it's a wash on \"maintaining consistency\".\r\n\r\nIdeally we'd retain the dtype in the value_counts().index, and it seems like we're saying here \"well we cant do that, so let's shoehorn the dtype into the values\"",
        "createdAt" : "2020-01-09T17:00:29Z",
        "updatedAt" : "2020-01-09T17:00:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "44d0f3bf-fea0-4db4-bb39-e7febaea0936",
        "parentId" : "fd97710a-0fe0-4308-b738-cddd05fb6fdf",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> it seems like we're saying here \"well we cant do that, so let's shoehorn the dtype into the values\"\r\n\r\nNo, I don't think we're saying that. I think we're saying we find a nullable integer dtype to be more useful.",
        "createdAt" : "2020-01-09T17:11:58Z",
        "updatedAt" : "2020-01-09T17:11:59Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "262b8bcd-146f-4d2f-bef7-2997208777b8",
        "parentId" : "fd97710a-0fe0-4308-b738-cddd05fb6fdf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not a hill I want to die on.",
        "createdAt" : "2020-01-09T17:16:52Z",
        "updatedAt" : "2020-01-09T17:16:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f32f4613-54d2-4659-b562-d98a1474f29c",
        "parentId" : "fd97710a-0fe0-4308-b738-cddd05fb6fdf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "commented below",
        "createdAt" : "2020-01-09T17:39:46Z",
        "updatedAt" : "2020-01-09T17:39:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "67c0c06f902773b1260370d4224bfe2ae21fd035",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +859,863 @@\n\ndef test_value_counts_na():\n    arr = pd.array([True, False, pd.NA], dtype=\"boolean\")\n    result = arr.value_counts(dropna=False)"
  }
]