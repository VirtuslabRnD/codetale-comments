[
  {
    "id" : "f593571d-3442-4fe4-8d79-bd68836a0c7f",
    "prId" : 24483,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24483#pullrequestreview-188416629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efcbe8a4-e916-4fc0-9cfc-85d9a545a4e0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this near other repeat tests",
        "createdAt" : "2018-12-29T16:14:32Z",
        "updatedAt" : "2018-12-29T18:45:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d72ec57b-e439-4aca-b60e-aee626afa3f9",
        "parentId" : "efcbe8a4-e916-4fc0-9cfc-85d9a545a4e0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "There are no other repeat tests AFAICT; I think those are in the tests.extension part of 24024",
        "createdAt" : "2018-12-29T16:41:13Z",
        "updatedAt" : "2018-12-29T18:45:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "33342c0e-8027-4af8-8c2c-24f83121a734",
        "parentId" : "efcbe8a4-e916-4fc0-9cfc-85d9a545a4e0",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "```\r\n(pandas) bash-3.2$ grep -r test_repeat pandas/tests\r\npandas/tests/series/test_analytics.py:    def test_repeat(self):\r\npandas/tests/extension/base/methods.py:    def test_repeat(self, data, repeats, as_series, use_numpy):\r\npandas/tests/extension/base/methods.py:    def test_repeat_raises(self, data, repeats, kwargs, error, msg, use_numpy):\r\nBinary file pandas/tests/extension/base/__pycache__/methods.cpython-36.pyc matches\r\npandas/tests/io/test_stata.py:    def test_repeated_column_labels(self):\r\npandas/tests/test_multilevel.py:    def test_repeat(self):\r\npandas/tests/test_strings.py:    def test_repeat(self):\r\npandas/tests/indexes/multi/test_reshape.py:def test_repeat():\r\npandas/tests/indexes/period/test_period.py:    def test_repeat_freqstr(self, index, use_numpy):\r\npandas/tests/indexes/common.py:    def test_repeat(self):\r\npandas/tests/indexes/datetimes/test_ops.py:    def test_repeat_range(self, tz_naive_fixture):\r\npandas/tests/indexes/datetimes/test_ops.py:    def test_repeat(self, tz_naive_fixture):\r\npandas/tests/indexes/timedeltas/test_ops.py:    def test_repeat(self):\r\npandas/tests/indexes/test_base.py:    def test_repeat(self):\r\n```",
        "createdAt" : "2018-12-29T16:51:32Z",
        "updatedAt" : "2018-12-29T18:45:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3682abf4-df34-46a9-9cff-6d2cce2ee954",
        "parentId" : "efcbe8a4-e916-4fc0-9cfc-85d9a545a4e0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "right, i meant repeat tests for DTA/TDA/PA.  There are more coming up in the tests.extension part of 24024.",
        "createdAt" : "2018-12-29T16:54:00Z",
        "updatedAt" : "2018-12-29T18:45:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e18aece0-77bb-4e07-8014-b7644beb06a7",
        "parentId" : "efcbe8a4-e916-4fc0-9cfc-85d9a545a4e0",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, i guess that 's fine. need a followup then to consolidate DTI/DTA test for common methods at some point then.",
        "createdAt" : "2018-12-29T16:55:33Z",
        "updatedAt" : "2018-12-29T18:45:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a7a5f1ccf3cd9ae04e4edb213d8434a0fde1a83",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +113,117 @@        a[0] = pd.Timestamp(\"2000\", tz=\"US/Central\")\n        assert a.freq is None\n\n    def test_repeat_preserves_tz(self):\n        dti = pd.date_range('2000', periods=2, freq='D', tz='US/Central')"
  },
  {
    "id" : "65f8b59a-5f5d-40d6-89c6-e48d8f4dace7",
    "prId" : 24484,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24484#pullrequestreview-188416370",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0554183a-b3ee-4dfd-8a92-78e9694fcf4a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in test_reductions?",
        "createdAt" : "2018-12-29T16:43:02Z",
        "updatedAt" : "2018-12-29T20:32:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "49e8e1ca-bfee-4669-8f4b-12740774c92b",
        "parentId" : "0554183a-b3ee-4dfd-8a92-78e9694fcf4a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "before long, yah.  For now i want to make rebasing 24024 easy on tom",
        "createdAt" : "2018-12-29T16:46:44Z",
        "updatedAt" : "2018-12-29T20:32:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf9960748aef4ccb984b7e988a8f093f4fd4c403",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +131,135 @@class TestReductions(object):\n\n    @pytest.mark.parametrize(\"tz\", [None, \"US/Central\"])\n    def test_min_max(self, tz):\n        arr = DatetimeArray._from_sequence(["
  },
  {
    "id" : "0e15a991-780d-462c-bcdf-64dbb03eba21",
    "prId" : 24663,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24663#pullrequestreview-190507527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6eb01d1e-e6bc-4bb9-b9ab-771afa4c9a26",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Is there a test that verifies mixed tz example from the issue raises?  I didn't see one quickly glancing over this file, but could be missing it or it could be elsewhere.  If not, you could maybe parametrize over a `data` variable that does both orders for aware/naive and the aware/aware case and get ride of the `for obj` loop, i.e.\r\n\r\n```python\r\n@pytest.mark.parametrize('data', [\r\n    [pd.Timestamp('2000', tz='CET'), pd.Timestamp('2000')],\r\n    [pd.Timestamp('2000'), pd.Timestamp('2000', tz='CET')],\r\n    [pd.Timestamp('2000', tz=\"US/Central\"), pd.Timestamp('2000', tz='CET')]])\r\ndef test_mixing_naive_tzaware_raises(self):\r\n    arr = np.array(data)\r\n```",
        "createdAt" : "2019-01-07T19:24:55Z",
        "updatedAt" : "2019-01-07T21:40:16Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "24cb92e0-ae86-42a4-8d63-41d618e77930",
        "parentId" : "6eb01d1e-e6bc-4bb9-b9ab-771afa4c9a26",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Or alternatively parametrizing over timezone pairs if it seems cleaner, e.g.\r\n```python\r\n@pytest.mark.parametrize('tz1, 'tz2', [(\"CET\", None), (None, \"CET\"), (\"US/Central\", \"CET\")])\r\n```",
        "createdAt" : "2019-01-07T19:27:44Z",
        "updatedAt" : "2019-01-07T21:40:16Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "5a9668cc-9431-4a81-9c08-e135097e7734",
        "parentId" : "6eb01d1e-e6bc-4bb9-b9ab-771afa4c9a26",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think this does does hit the case from this original issue, in the `DatetimeArray._from_sequence` case.",
        "createdAt" : "2019-01-07T19:35:38Z",
        "updatedAt" : "2019-01-07T21:40:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b2510eef-9e0e-48d6-b354-c610fdc4da96",
        "parentId" : "6eb01d1e-e6bc-4bb9-b9ab-771afa4c9a26",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Yes, agreed that the `DatetimeArray._from_sequence` case hits the original issue.\r\n\r\nI think my comment was a bit unclear; what I was asking is if we have coverage for the working mixed tz example you also provided in the issue: `mix = np.array([pd.Timestamp('2000', tz=\"US/Central\"), pd.Timestamp('2000', tz='CET')])`.  I didn't see a test for that anywhere, and figured we could shoehorn it into this test if it's indeed not covered.",
        "createdAt" : "2019-01-08T23:31:45Z",
        "updatedAt" : "2019-01-08T23:31:45Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "a68e6ab6-0bd7-40b5-b120-dbd6152cd2bc",
        "parentId" : "6eb01d1e-e6bc-4bb9-b9ab-771afa4c9a26",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Not a pressing issue or anything though, so if it's not covered it we could just make it a follow-up item; don't want this to block other work.",
        "createdAt" : "2019-01-08T23:37:08Z",
        "updatedAt" : "2019-01-08T23:37:09Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "72e46b2fd901110326d494036d0299768f27ba68",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +23,27 @@    def test_mixing_naive_tzaware_raises(self, meth):\n        # GH#24569\n        arr = np.array([pd.Timestamp('2000'), pd.Timestamp('2000', tz='CET')])\n\n        msg = ('Cannot mix tz-aware with tz-naive values|'"
  }
]