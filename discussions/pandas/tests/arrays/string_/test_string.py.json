[
  {
    "id" : "8f3bd8ba-85e4-4209-b67b-f4fe4a5c6293",
    "prId" : 29483,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29483#pullrequestreview-317091799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2d92ad8-cffb-48d5-ad49-8ee6a6e7cd12",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this still accurate (the version number)?",
        "createdAt" : "2019-11-14T16:28:06Z",
        "updatedAt" : "2019-11-19T11:09:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7049721d-9d77-40cc-876d-dc5c38242005",
        "parentId" : "a2d92ad8-cffb-48d5-ad49-8ee6a6e7cd12",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, the released version will be 1.0, but using 0.15.1.dev here so the tests run with arrow master",
        "createdAt" : "2019-11-14T16:30:54Z",
        "updatedAt" : "2019-11-19T11:09:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "5290afca06ac9904c9374190cd9de19755eb0763",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +174,178 @@\n\n@td.skip_if_no(\"pyarrow\", min_version=\"0.15.1.dev\")\ndef test_arrow_roundtrip():\n    # roundtrip possible from arrow 1.0.0"
  },
  {
    "id" : "6257373c-f32d-4532-81e5-14666beb99cb",
    "prId" : 30980,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30980#pullrequestreview-342092711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef8cbf72-ab15-499e-b9e5-da29c794c764",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you add a test for pd.NaT as well? I guess could get in there if passing a bunch of ISO strings",
        "createdAt" : "2020-01-13T19:43:29Z",
        "updatedAt" : "2020-01-14T12:06:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "08e049dd95bc2fdbef9939a2bd35920a2ff52f53",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +195,199 @@        pd.arrays.StringArray(np.array([]))\n\n    with pytest.raises(ValueError, match=\"strings or pandas.NA\"):\n        pd.arrays.StringArray(np.array([\"a\", np.nan], dtype=object))\n"
  },
  {
    "id" : "a32d791f-8fdd-4093-9b3c-8244a43aacf8",
    "prId" : 33351,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33351#pullrequestreview-399851694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51285116-7d0f-4f75-bbf1-34ed4ab9d606",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why isn't this return the same, IIRC numpy just dispatches back to the array, so this should yield the same as above?",
        "createdAt" : "2020-04-10T17:33:43Z",
        "updatedAt" : "2020-04-24T19:50:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fb5f3650-60f7-43a5-b1d3-ad0ebe846a1c",
        "parentId" : "51285116-7d0f-4f75-bbf1-34ed4ab9d606",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "It's pretty much the same test, I only separated it out so we're only testing numpy min / max once (no need to parametrize over skipna). I could add a few lines to the test above and remove this if that's less clutter",
        "createdAt" : "2020-04-10T18:30:03Z",
        "updatedAt" : "2020-04-24T19:50:01Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "a62399d7-fce7-4533-94cc-4794f77b8a7f",
        "parentId" : "51285116-7d0f-4f75-bbf1-34ed4ab9d606",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think it is fine (cleaner) to keep the tests separate like this",
        "createdAt" : "2020-04-24T11:09:03Z",
        "updatedAt" : "2020-04-24T19:50:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fcd2005b2f38bcc3b46d150d6f99d995f7fba36",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +253,257 @@def test_min_max_numpy(method, arr):\n    result = getattr(np, method)(arr)\n    expected = \"a\" if method == \"min\" else \"c\"\n    assert result == expected\n"
  },
  {
    "id" : "1f3cc256-faf2-49b3-839c-bd767eea2e57",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-530360539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2195fc8-3332-4d73-9dac-469555fd4407",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Why is mypy failing here? (it seems we have such combination of a value with a pytest.param in many other places as well)",
        "createdAt" : "2020-11-12T20:31:52Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "68ef6e92-c177-415c-b5e5-63b3098802dc",
        "parentId" : "c2195fc8-3332-4d73-9dac-469555fd4407",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I think we decided that'll we'll ignore these inference issues in tests rather than jump through hoops to appease mypy\r\n\r\ndoes occur elsewhere..\r\nhttps://github.com/pandas-dev/pandas/blob/792cc46588f880c457018bde1b60864e7b4020ad/pandas/tests/window/conftest.py#L77-L83",
        "createdAt" : "2020-11-13T19:00:53Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "16a16254-16d4-47ad-a86e-c8ab8cc46d08",
        "parentId" : "c2195fc8-3332-4d73-9dac-469555fd4407",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yeah, my question was more why the heck mypy *needs* the be pleased here .. ;)\r\n\r\nBut anyway, fully agree it is not worth going through hoops here if it is needed, but then let's just add the `# type:ignore`, and not all the lines with the error message from mypy, as that is rather distracting IMO",
        "createdAt" : "2020-11-13T19:36:11Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "dbda8bc0-a492-489a-95d6-29f0e65f4a3d",
        "parentId" : "c2195fc8-3332-4d73-9dac-469555fd4407",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I'd rather keep the message. If you don't want the message can you open an issue for that conversation. see #37715 and #37556",
        "createdAt" : "2020-11-13T19:39:54Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "2e454668-d37e-4013-afbd-944437fcec03",
        "parentId" : "c2195fc8-3332-4d73-9dac-469555fd4407",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But is this specific case fixable?",
        "createdAt" : "2020-11-13T19:45:53Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e78bf639-1982-4c9b-b571-0313fa5c4d62",
        "parentId" : "c2195fc8-3332-4d73-9dac-469555fd4407",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "that's why #37715 has been opened.. to get more eyeballs on these. if it is a mypy issue then we should have a mypy issue ref. if not the message could help someone with fixing.\r\n\r\nI have added the messages in lots of places and don't want to change one case here. If you strongly disagree with this approach please open an issue. I'll then have more to say to justify this.",
        "createdAt" : "2020-11-13T19:51:06Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +21,25 @@        pytest.param(\n            \"arrow_string\", marks=skip_if_no_pyarrow\n        ),  # type:ignore[list-item]\n    ]\n)"
  },
  {
    "id" : "7e1c0610-0e22-4ea2-b9be-8b2bfee4fe6f",
    "prId" : 35259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35259#pullrequestreview-530585103",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bea3013-a2e5-4846-93d0-d44f0fc49870",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Also here I think it's actually working, but the expected needs to be updated. In case of the arrow dtype, this expected needs to be wrapped in a `pa.chunked_array([...])`",
        "createdAt" : "2020-11-12T20:57:04Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "187be349-e36e-4f15-aa4d-dc9dc11d84a6",
        "parentId" : "1bea3013-a2e5-4846-93d0-d44f0fc49870",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "you are happy with `__arrow_array__` returning the chunked array? The reason for parameterising the current string tests was to keep the behaviour of ArrowStringArray the same as the current StringArray and so the implementation details are hidden from the user.\r\n\r\nfrom https://github.com/pandas-dev/pandas/pull/35259#issuecomment-712399778\r\n\r\n> am I correct in assuming that ArrowStringArray and PythonStringArray should behave identically?\r\n\r\n",
        "createdAt" : "2020-11-13T20:14:47Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "61d3a5e3-87bc-403d-8bdf-a120021f4698",
        "parentId" : "1bea3013-a2e5-4846-93d0-d44f0fc49870",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> you are happy with `__arrow_array__` returning the chunked array?\r\n\r\nYes, we explicitly changed that in pyarrow to accept both arrays and chunked arrays for the `__arrow_array__` protocol (triggered by fletcher using chunked arrays)\r\n\r\n>  The reason for parameterising the current string tests was to keep the behaviour of ArrowStringArray the same as the current StringArray and so the implementation details are hidden from the user.\r\n\r\nYes, but conversion to pyarrow is not directly exposed in pandas, so I think that is OK to differ between both StringArray implementations.",
        "createdAt" : "2020-11-14T15:11:21Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6de39e93-cbad-4ef5-98c7-24929b7738f3",
        "parentId" : "1bea3013-a2e5-4846-93d0-d44f0fc49870",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "will update test",
        "createdAt" : "2020-11-14T15:31:07Z",
        "updatedAt" : "2020-11-17T11:08:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "125cb6f044c905694f458d0cbf9c271691ae75f4",
    "line" : 486,
    "diffHunk" : "@@ -1,1 +430,434 @@    data = pd.array([\"a\", \"b\", \"c\"], dtype=dtype)\n    arr = pa.array(data)\n    expected = pa.array(list(data), type=pa.string(), from_pandas=True)\n    if dtype == \"arrow_string\":\n        expected = pa.chunked_array(expected)"
  }
]