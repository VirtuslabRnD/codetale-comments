[
  {
    "id" : "84f89601-0c34-47ad-af4a-1511fba5cfcb",
    "prId" : 34307,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34307#pullrequestreview-434663909",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1974635d-9dfc-4f04-9b40-b1475c52ac36",
        "parentId" : null,
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "Do you need to add tests here (now or maybe later pending the `np.nan`/`NA` decision) with `na_value=np.nan` ?",
        "createdAt" : "2020-05-22T15:56:02Z",
        "updatedAt" : "2020-09-30T08:18:10Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "a2c3f081-d06e-4275-8c19-b2213ababa55",
        "parentId" : "1974635d-9dfc-4f04-9b40-b1475c52ac36",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There is already one covering that above in `test_to_numpy_float` (however, what would probably still be useful to add is a case where we have both NaN and NA in the FloatingArray, and then use an `na_value` that is *not* np.nan, to ensure we only convert the NA)",
        "createdAt" : "2020-05-22T16:17:46Z",
        "updatedAt" : "2020-09-30T08:18:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "39ca05eb-0138-4dbb-872b-5774bc369f28",
        "parentId" : "1974635d-9dfc-4f04-9b40-b1475c52ac36",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Added a test",
        "createdAt" : "2020-06-22T08:06:45Z",
        "updatedAt" : "2020-09-30T08:18:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "edf9618d49de3f04d8f18e099c60310ae40296f7",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +69,73 @@\n    arr = con([0.0, 1.0, None], dtype=\"Float64\")\n    result = arr.to_numpy(dtype=object, na_value=None)\n    expected = np.array([0.0, 1.0, None], dtype=\"object\")\n    tm.assert_numpy_array_equal(result, expected)"
  }
]