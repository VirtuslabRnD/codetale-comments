[
  {
    "id" : "2b55f61e-4b11-4d5a-bd21-056c13610906",
    "prId" : 21815,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21815#pullrequestreview-135247031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa05e0a7-2d7c-4473-bee9-ed06d22d182a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k for now, maybe split to sub-dirs at some point",
        "createdAt" : "2018-07-08T22:03:00Z",
        "updatedAt" : "2018-07-08T22:03:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b9358611e0cf47b231bdd0f6cbeeef4c73302eb",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +27,31 @@\n\nclass TestTimedeltaArray(object):\n    def test_from_tdi(self):\n        tdi = pd.TimedeltaIndex(['1 Day', '3 Hours'])"
  },
  {
    "id" : "92af8478-5d4a-404e-a4cf-ff326868adac",
    "prId" : 22961,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22961#pullrequestreview-161368160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45917ded-9e72-4b61-9027-2538d9529d12",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "shouldn't this rather be called 'period_array' ? (since this is in the array tests directory, and is meant to later become the actual array tests?)",
        "createdAt" : "2018-10-03T21:02:49Z",
        "updatedAt" : "2018-10-05T03:31:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4891adff-f417-4234-bf7e-6c2904da1bb1",
        "parentId" : "45917ded-9e72-4b61-9027-2538d9529d12",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> shouldn't this rather be called 'period_array' \r\n\r\nNo, the fixture is specifically returning a PeriodIndex.  I imagine at some point when these are more fleshed out they'll go up in conftest, or parts might go in pd.util.testing",
        "createdAt" : "2018-10-03T21:22:46Z",
        "updatedAt" : "2018-10-05T03:31:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "927e4bdc4e258ca0d2015451a9138309ce2ccc90",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +13,17 @@# TODO: more freq variants\n@pytest.fixture(params=['D', 'B', 'W', 'M', 'Q', 'Y'])\ndef period_index(request):\n    \"\"\"\n    A fixture to provide PeriodIndex objects with different frequencies."
  },
  {
    "id" : "2dfc359f-4a74-4b66-a856-56f95fdc0ece",
    "prId" : 22961,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22961#pullrequestreview-162620959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "244f0377-88a1-4253-b21a-19126cdbcd6f",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hmm, sorry forgot to mention this earlier. Is it possible to include a name on these? It may complicate the tests a bit.\r\n\r\nOr maybe just double check that we have other tests ensure that the index `.to_timestamp` and `.to_period` assert the name is passed through.",
        "createdAt" : "2018-10-03T21:02:52Z",
        "updatedAt" : "2018-10-05T03:31:22Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2c9126c0-5e37-41a1-9fa6-a411e5a6942d",
        "parentId" : "244f0377-88a1-4253-b21a-19126cdbcd6f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Is it possible to include a name on these?\r\n\r\nSure I guess.  My thought for both of these fixtures is to try to do something hypothesis-like to cover the whole space of Period/DatetimeIndexes that might occur in the wild.\r\n\r\n> assert the name is passed through.\r\n\r\n... but it isn't.  The Array classes don't have a `name`.  Or am I not understanding the suggestion?",
        "createdAt" : "2018-10-03T21:17:50Z",
        "updatedAt" : "2018-10-05T03:31:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f62e7482-2686-41ac-b7b5-86fe46d3a5fe",
        "parentId" : "244f0377-88a1-4253-b21a-19126cdbcd6f",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I probably wasn't being clear, and I think I misunderstood the eventual goal of these tests. This looks fine, and I've verified that we do have other tests for `PeriodIndex.to_timestmap`'s name.",
        "createdAt" : "2018-10-08T20:07:12Z",
        "updatedAt" : "2018-10-08T20:07:13Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "927e4bdc4e258ca0d2015451a9138309ce2ccc90",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +23,27 @@    freqstr = request.param\n    # TODO: non-monotone indexes; NaTs, different start dates\n    pi = pd.period_range(start=pd.Timestamp('2000-01-01'),\n                         periods=100,\n                         freq=freqstr)"
  },
  {
    "id" : "53ebf4d5-6f26-4af8-bf41-1bd99032fc29",
    "prId" : 22961,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22961#pullrequestreview-161383225",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11f29042-2944-4238-aa78-e6a30737a0cc",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I am not sure we should test the equivalence between the index and array method in the array tests, that feels a bit out of place (since it is the index one that is calling the array)",
        "createdAt" : "2018-10-03T21:37:55Z",
        "updatedAt" : "2018-10-05T03:31:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "78f2e491-b353-430c-8de9-076f7f004279",
        "parentId" : "11f29042-2944-4238-aa78-e6a30737a0cc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The point is that we have fairly robust tests for the Index methods.  Instead of effectively re-implementing all those tests, we can just test that the Index/Array methods behave identically.",
        "createdAt" : "2018-10-03T22:02:02Z",
        "updatedAt" : "2018-10-05T03:31:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "37040702-f773-4127-9e57-5055e3788f96",
        "parentId" : "11f29042-2944-4238-aa78-e6a30737a0cc",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, that makes sense (at least for now) \r\nBut you could still have fixtures for the arrays and create the index of it if needed inside the test (instead of currently the other way around) ?",
        "createdAt" : "2018-10-03T22:11:28Z",
        "updatedAt" : "2018-10-05T03:31:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "927e4bdc4e258ca0d2015451a9138309ce2ccc90",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +79,83 @@        # placeholder until these become actual EA subclasses and we can use\n        #  an EA-specific tm.assert_ function\n        tm.assert_index_equal(pd.Index(result), pd.Index(expected))\n\n    @pytest.mark.parametrize('propname', pd.DatetimeIndex._bool_ops)"
  },
  {
    "id" : "30b47490-eb01-4942-a2fa-ffddb5c3fde0",
    "prId" : 22961,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22961#pullrequestreview-162261379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2872c8d-17f2-45c1-aa3d-4ef190527e73",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think we have a fixture for this?",
        "createdAt" : "2018-10-06T15:21:57Z",
        "updatedAt" : "2018-10-06T15:24:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6036636c-4825-403f-a93b-a8b9a89466c4",
        "parentId" : "d2872c8d-17f2-45c1-aa3d-4ef190527e73",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I don't see it anywhere.  I'll make one at the same time as moving these to conftest.",
        "createdAt" : "2018-10-06T15:39:25Z",
        "updatedAt" : "2018-10-06T15:39:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f1e49c27-b930-46ee-9992-644d1aaba70c",
        "parentId" : "d2872c8d-17f2-45c1-aa3d-4ef190527e73",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pandas/tests/tseries/offsets/conftest.py ? (those are the classes, but imagine have the abbrevs also.",
        "createdAt" : "2018-10-06T15:40:48Z",
        "updatedAt" : "2018-10-06T15:40:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a74253ac-8a53-4df9-8a3c-dd583df84ad7",
        "parentId" : "d2872c8d-17f2-45c1-aa3d-4ef190527e73",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Those don't exist at the moment.  I'll make them in the same pass as the other fixture stuff discussed here.",
        "createdAt" : "2018-10-06T15:49:56Z",
        "updatedAt" : "2018-10-06T15:49:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8b3451f9-a8bb-4dce-8df2-002335abc88f",
        "parentId" : "d2872c8d-17f2-45c1-aa3d-4ef190527e73",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k cool",
        "createdAt" : "2018-10-06T15:54:35Z",
        "updatedAt" : "2018-10-06T15:54:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "927e4bdc4e258ca0d2015451a9138309ce2ccc90",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +11,15 @@\n\n# TODO: more freq variants\n@pytest.fixture(params=['D', 'B', 'W', 'M', 'Q', 'Y'])\ndef period_index(request):"
  },
  {
    "id" : "7ee5bfed-caf4-4c4b-aa9d-b66465770406",
    "prId" : 22961,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22961#pullrequestreview-162260907",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2de51ca1-29b7-4aeb-90e6-6627291133bf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "at some point should move these to a pandas/tests/arrays/conftest.py (or event the very to-level conftest)",
        "createdAt" : "2018-10-06T15:23:16Z",
        "updatedAt" : "2018-10-06T15:24:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "45ec918d-4d9b-4734-8e93-3e2d3534663e",
        "parentId" : "2de51ca1-29b7-4aeb-90e6-6627291133bf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Definitely.  This is bare-bones at the moment and needs some major buffing-up.  Current thought is to move them up once they are closer to \"done\".",
        "createdAt" : "2018-10-06T15:36:43Z",
        "updatedAt" : "2018-10-06T15:36:43Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "94ad80c4-534a-4c39-8c92-8217992a1244",
        "parentId" : "2de51ca1-29b7-4aeb-90e6-6627291133bf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure ",
        "createdAt" : "2018-10-06T15:39:29Z",
        "updatedAt" : "2018-10-06T15:39:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "927e4bdc4e258ca0d2015451a9138309ce2ccc90",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +29,33 @@\n\n@pytest.fixture(params=['D', 'B', 'W', 'M', 'Q', 'Y'])\ndef datetime_index(request):\n    \"\"\""
  },
  {
    "id" : "979b5396-f6b6-473a-b910-0dabb0b1a5d9",
    "prId" : 23524,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23524#pullrequestreview-172300763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a9ed5f9-12e0-45f9-8dec-72ef2eadde8b",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Assert that this is no copy? Or is that covered elsewhere?",
        "createdAt" : "2018-11-06T17:57:52Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "0c121dd9-a4a0-4bef-a213-c3201cf7fc61",
        "parentId" : "4a9ed5f9-12e0-45f9-8dec-72ef2eadde8b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Good idea, will do.  Not sure off the top if it is covered elsewhere.  At some point we may want to collect the TDI/DTI tests for array-like behavior along with the TDI/DTA tests.",
        "createdAt" : "2018-11-07T00:45:28Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7f5cd66bea1266994f93d0ef93d3ef434a0fdf",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +80,84 @@\n        expected = dti.asi8.view('M8[ns]')\n        result = np.array(arr)\n        tm.assert_numpy_array_equal(result, expected)\n"
  },
  {
    "id" : "1b4acb3a-36cd-4762-9a85-1842f81af1d4",
    "prId" : 23524,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23524#pullrequestreview-173337567",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aff3748a-a856-400f-9bda-c887946a8ab6",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It think it would be good to add such a test to the base extension tests as well? ",
        "createdAt" : "2018-11-08T15:04:01Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "663d4d9e-d4c2-4f17-bc70-ae78d080334a",
        "parentId" : "aff3748a-a856-400f-9bda-c887946a8ab6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I don't know those tests well enough to have an informed opinion.  AFAIK ExtensionArray doesn't implement `__array__`, so it isn't clear that this is supported in the general case.",
        "createdAt" : "2018-11-08T16:07:14Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "71a195c7-3635-46a9-9693-47110443c7b1",
        "parentId" : "aff3748a-a856-400f-9bda-c887946a8ab6",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "EA implements `__iter__`, which should be sufficient.\r\n\r\nThis test would be slightly opinionated for a base test, in case an EA wants to be converted to a specific NumPy type, but I think it's OK.",
        "createdAt" : "2018-11-08T16:37:52Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2231b44d-373c-4ca2-9469-f023cc3a7162",
        "parentId" : "aff3748a-a856-400f-9bda-c887946a8ab6",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I guess we have `base.interface.BaseInterfaceTests.test_array_interface` which checks\r\n\r\n```python\r\n    def test_array_interface(self, data):\r\n        result = np.array(data)\r\n        assert result[0] == data[0]\r\n```",
        "createdAt" : "2018-11-08T16:40:59Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "582a773f-3609-4ec4-b8c6-fbb162e3adf0",
        "parentId" : "aff3748a-a856-400f-9bda-c887946a8ab6",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, yes, that's already a generic test. OK, since that does not actually test the return dtype, it's good to have more explicit tests here.\r\n\r\nShould we expect from EA that `np.array(EA, dtype=object)` always works (returns an object array of scalars)? \r\nThat seems like an OK assumption to me, since this already happens if you don't implement `__array__`, so we can expect this as well *if* the EA author implements a custom `__array__` I think.\r\n",
        "createdAt" : "2018-11-09T09:48:51Z",
        "updatedAt" : "2018-11-09T16:43:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7f5cd66bea1266994f93d0ef93d3ef434a0fdf",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +58,62 @@class TestDatetimeArray(object):\n\n    def test_array_object_dtype(self, tz_naive_fixture):\n        # GH#23524\n        tz = tz_naive_fixture"
  },
  {
    "id" : "ab797bbb-3c7a-4fa4-be53-68bc6d645392",
    "prId" : 23587,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23587#pullrequestreview-173665714",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc936719-ced2-41d5-84b3-5e1cedb0068a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did the inheritance chain change?",
        "createdAt" : "2018-11-10T04:22:30Z",
        "updatedAt" : "2018-11-12T10:53:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "979aae14-3a1d-497e-841d-b22c3ae2483f",
        "parentId" : "dc936719-ced2-41d5-84b3-5e1cedb0068a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No.  Just getting the cosmetic parts of the diff out of the way now so they don't clog up the diffs in later steps.",
        "createdAt" : "2018-11-10T15:57:50Z",
        "updatedAt" : "2018-11-12T10:53:40Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7211f79c0ce4e1f8c9a035ce0c00364885d29c8",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +6,10 @@from pandas.core.arrays import (\n    DatetimeArrayMixin as DatetimeArray, PeriodArray,\n    TimedeltaArrayMixin as TimedeltaArray)\nimport pandas.util.testing as tm\n"
  },
  {
    "id" : "4e3f8aa8-f926-4e14-96a9-203ead762073",
    "prId" : 23593,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23593#pullrequestreview-180568845",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d726c1d-eb51-43b0-8468-331f8be0f779",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what about other dtypes?",
        "createdAt" : "2018-12-02T16:52:06Z",
        "updatedAt" : "2019-01-05T20:26:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4120586e626a4d3815a7f69132af70429a54dea8",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +546,550 @@        expected = np.array(list(arr), dtype=object)\n        tm.assert_numpy_array_equal(result, expected)\n\n        # to other dtype always copies\n        result = np.asarray(arr, dtype='int64')"
  },
  {
    "id" : "1fcba1de-5bbf-47b0-8f1e-4bc554dcd6d6",
    "prId" : 23593,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23593#pullrequestreview-186218855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9579031a-c5b4-4ee6-bb32-86deead81498",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what about other dtypes?",
        "createdAt" : "2018-12-02T16:52:16Z",
        "updatedAt" : "2019-01-05T20:26:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2473a677-5746-48b6-8251-428e5cbaf7c4",
        "parentId" : "9579031a-c5b4-4ee6-bb32-86deead81498",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "object and int are tested below, which others do you want?",
        "createdAt" : "2018-12-13T17:14:10Z",
        "updatedAt" : "2019-01-05T20:26:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "398f3fb4-e9aa-4316-b8a3-1af90b1ae63f",
        "parentId" : "9579031a-c5b4-4ee6-bb32-86deead81498",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "well, ``str``, ``float``, basically ones which are weird",
        "createdAt" : "2018-12-18T12:56:44Z",
        "updatedAt" : "2019-01-05T20:26:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f35bbcdb-aaa3-4d28-8881-1bff7c23f68c",
        "parentId" : "9579031a-c5b4-4ee6-bb32-86deead81498",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Though, if wed don't explicitly handle them in our `__array__` NumPy takes care of it.",
        "createdAt" : "2018-12-18T18:35:26Z",
        "updatedAt" : "2019-01-05T20:26:04Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4120586e626a4d3815a7f69132af70429a54dea8",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +638,642 @@\n        # default asarray gives objects\n        result = np.asarray(arr)\n        expected = np.array(list(arr), dtype=object)\n        tm.assert_numpy_array_equal(result, expected)"
  },
  {
    "id" : "7da94de9-d4c2-4b69-bc59-0f86de4e099e",
    "prId" : 23593,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23593#pullrequestreview-188994264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac52ccdb-3dad-4caf-8630-4c704f1d1597",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what changed here?",
        "createdAt" : "2019-01-03T12:21:26Z",
        "updatedAt" : "2019-01-05T20:26:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1306958c-4702-4d07-a148-89587d024400",
        "parentId" : "ac52ccdb-3dad-4caf-8630-4c704f1d1597",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is as a follow-up to https://github.com/pandas-dev/pandas/pull/23524 that added it \"wrongly\" (as I commented there as well). \r\nAnd with \"wrongly\", I mean not following numpy semantics. Numpy always copies if the dtype is not exactly equal, even if a copy would not strictly be necessary. So doing `np.asarray(M8_array, dtype='int64')` still copies the data. I decided to follow that logic here as well (by not implementing it, and letting numpy do the work).",
        "createdAt" : "2019-01-03T12:36:18Z",
        "updatedAt" : "2019-01-05T20:26:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4120586e626a4d3815a7f69132af70429a54dea8",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +331,335 @@        tm.assert_numpy_array_equal(result, expected)\n\n        # check that we are still making copies when setting copy=False\n        result = np.array(arr, dtype='i8', copy=False)\n        assert result.base is not expected.base"
  },
  {
    "id" : "be89be32-e098-4725-8bb1-9c738e98df25",
    "prId" : 23643,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23643#pullrequestreview-174121440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de343043-1408-4afa-89cf-229d93c6a043",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We should not need to add such basic tests I think, as those are covered by the base Extension tests (we should of course test datetime specific aspects).\r\n\r\nIs there anything in this test not tested by the base tests?",
        "createdAt" : "2018-11-12T20:41:45Z",
        "updatedAt" : "2018-11-14T12:56:37Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "253b05a2-42ca-4ce3-8760-1e4884f5eea2",
        "parentId" : "de343043-1408-4afa-89cf-229d93c6a043",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The class-specific tests have tests for invalid fill_values",
        "createdAt" : "2018-11-12T22:28:58Z",
        "updatedAt" : "2018-11-14T12:56:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cb072e7ec33c860183c8c20bd3596e0a3bff2a0",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +60,64 @@    index_cls = None\n\n    def test_take(self):\n        data = np.arange(100, dtype='i8')\n        np.random.shuffle(data)"
  },
  {
    "id" : "59e84db2-f4d6-480f-8de0-b1c3af95974c",
    "prId" : 23643,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23643#pullrequestreview-174550201",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96045c7c-119b-4089-99a9-f188cd870990",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "As I think also commented on one of the previous PRs that started doing this, I don't think we should test `_concat_same_type` here directly. It is already tested by the base extension tests and by all the tests that actually use it under the hood.",
        "createdAt" : "2018-11-12T20:42:46Z",
        "updatedAt" : "2018-11-14T12:56:37Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "59773100-351b-4e75-9c09-674ccb8e304c",
        "parentId" : "96045c7c-119b-4089-99a9-f188cd870990",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, most of these tests were salvaged from one of those older PRs.  I don't see much downside to having the tests, but am pretty happy to pawn this decision/PR off on Tom",
        "createdAt" : "2018-11-12T22:29:59Z",
        "updatedAt" : "2018-11-14T12:56:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2c997646-4809-4bf9-b207-1299a5f23fe2",
        "parentId" : "96045c7c-119b-4089-99a9-f188cd870990",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We still want the fail cases (different dtypes) here.\r\n\r\nAt this point, we should be able to simplify `core/dtypes/concat.py::concat_datetimetz` and `DatetimeIndex._concat_same_dtype` right? I'll take a look.",
        "createdAt" : "2018-11-13T19:37:41Z",
        "updatedAt" : "2018-11-14T12:56:37Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cb072e7ec33c860183c8c20bd3596e0a3bff2a0",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +104,108 @@                     fill_value=pd.Timestamp.now().time)\n\n    def test_concat_same_type(self):\n        data = np.arange(10, dtype='i8')\n"
  },
  {
    "id" : "c5f486f5-a4b0-4051-8b81-02f63385a784",
    "prId" : 24461,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24461#pullrequestreview-188379344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4069764c-a087-4cc2-988e-8f998adea6b1",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Do we think that's deliberate on NumPy's part? I don't see any issues about it.",
        "createdAt" : "2018-12-28T22:28:08Z",
        "updatedAt" : "2018-12-28T22:28:08Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b5a6a2b8-5681-4e45-b927-1ddf0f91bfde",
        "parentId" : "4069764c-a087-4cc2-988e-8f998adea6b1",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/numpy/numpy/issues/12629",
        "createdAt" : "2018-12-28T22:33:42Z",
        "updatedAt" : "2018-12-28T22:33:42Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "9873c12ecead738f6da0e4963fac36910f218489",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +179,183 @@\n        # Following numpy convention, NaT goes at the beginning\n        #  (unlike NaN which goes at the end)\n        result = arr.searchsorted(pd.NaT)\n        assert result == 0"
  },
  {
    "id" : "000bdf5d-2ed0-4b1a-bb73-862b3446d885",
    "prId" : 27331,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27331#pullrequestreview-260744169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7dbd34a-5f11-4423-a7f8-add5a4f0eb8d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are there other setitem tests? put near those",
        "createdAt" : "2019-07-11T14:40:21Z",
        "updatedAt" : "2019-07-11T15:20:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "228174953999b1185afbf08e7015790494bf1a03",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +652,656 @@        expected = np.asarray(arr).astype(\"S20\")\n        tm.assert_numpy_array_equal(result, expected)\n\n\n@pytest.mark.parametrize("
  },
  {
    "id" : "bee001cb-f72b-4dee-be32-2a991b18fbe1",
    "prId" : 27331,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27331#pullrequestreview-260827703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8aa5663d-9d4c-458e-8fcd-01b7f9c8612a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make another level of parameterization to make these truly separate tests?",
        "createdAt" : "2019-07-11T16:41:30Z",
        "updatedAt" : "2019-07-11T16:41:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4ae8e5ee-3cf5-4af6-9f40-53f98cffd944",
        "parentId" : "8aa5663d-9d4c-458e-8fcd-01b7f9c8612a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I don't think so; the `casting_nats` parameter depends on the `array` parameter.\r\n\r\nI've been looking at pytest extensions that might make this kind of thing possible",
        "createdAt" : "2019-07-11T16:47:47Z",
        "updatedAt" : "2019-07-11T16:47:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "228174953999b1185afbf08e7015790494bf1a03",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +672,676 @@    expected = type(array)._from_sequence([pd.NaT, array[1], array[2]])\n\n    for nat in casting_nats:\n        arr = array.copy()\n        arr[0] = nat"
  },
  {
    "id" : "f94d7b93-deab-4a61-8f33-091607b96e24",
    "prId" : 29583,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29583#pullrequestreview-315927764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2246da1-3495-4be0-b4a1-f8e23761b2ba",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "This change isn't directly related to the PR but something I noticed along the way.  I don't think the previous version is completely valid: `DatetimeIndex` delegates to `DatetimeArray` for `strftime` so it was basically testing against itself.",
        "createdAt" : "2019-11-13T00:08:17Z",
        "updatedAt" : "2019-11-13T00:10:57Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f86a848a5c796d6977bfeb53a94c69314ace643",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +474,478 @@\n        result = arr.strftime(\"%Y %b\")\n        expected = np.array([ts.strftime(\"%Y %b\") for ts in arr], dtype=object)\n        tm.assert_numpy_array_equal(result, expected)\n"
  },
  {
    "id" : "83be707b-5cd5-4779-8f75-1d3409db944a",
    "prId" : 29583,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29583#pullrequestreview-315927764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a4f18f1-9c64-45eb-b6e3-cb7989c18a44",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Same thing as my other comment about this pattern for `DatetimeArray`.",
        "createdAt" : "2019-11-13T00:09:03Z",
        "updatedAt" : "2019-11-13T00:10:57Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f86a848a5c796d6977bfeb53a94c69314ace643",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +688,692 @@\n        result = arr.strftime(\"%Y\")\n        expected = np.array([per.strftime(\"%Y\") for per in arr], dtype=object)\n        tm.assert_numpy_array_equal(result, expected)\n"
  },
  {
    "id" : "31c80f13-a230-4dbe-86d4-4ae9fc1d2b5a",
    "prId" : 29583,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29583#pullrequestreview-315927764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a52ef528-fe2e-417c-95c5-9f5a40f07a6e",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "This is working fine for `PeriodArray` and `PeriodIndex` on master; added this test since I didn't see an existing one for this behavior.",
        "createdAt" : "2019-11-13T00:10:00Z",
        "updatedAt" : "2019-11-13T00:10:57Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f86a848a5c796d6977bfeb53a94c69314ace643",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +693,697 @@    def test_strftime_nat(self):\n        # GH 29578\n        arr = PeriodArray(PeriodIndex([\"2019-01-01\", pd.NaT], dtype=\"period[D]\"))\n\n        result = arr.strftime(\"%Y-%m-%d\")"
  },
  {
    "id" : "648c7f22-84fb-4e20-ab9b-b306909cbc0b",
    "prId" : 29985,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29985#pullrequestreview-325990048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1675b895-000b-45b7-94d2-1e1c7396038d",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Why not just return `pd.date_range(...)`",
        "createdAt" : "2019-12-03T09:20:10Z",
        "updatedAt" : "2019-12-12T04:21:41Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef1124e976ad268f81182a9fd9727139eb3cf76f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +42,46 @@    # TODO: non-monotone indexes; NaTs, different start dates, timezones\n    dti = pd.date_range(start=pd.Timestamp(\"2000-01-01\"), periods=100, freq=freqstr)\n    return dti\n\n"
  },
  {
    "id" : "50a1ac3f-8681-4440-a1b4-d50105c9110f",
    "prId" : 32764,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32764#pullrequestreview-376483314",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42070692-0ad7-4ad3-81a9-79636a0b5ac6",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "do we have sufficient tests for if we have non-matching dtypes e.g. integers?\r\n\r\nwhat about different timezones, or tzawareness-compat?  (or periodarray freq mismatch)",
        "createdAt" : "2020-03-17T23:38:56Z",
        "updatedAt" : "2020-03-25T14:52:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c5221986-9c5d-4752-8fe3-23e0638ed0d5",
        "parentId" : "42070692-0ad7-4ad3-81a9-79636a0b5ac6",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Added some tests for type mismatches",
        "createdAt" : "2020-03-18T00:01:14Z",
        "updatedAt" : "2020-03-25T14:52:06Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb399917d41c5dcdd38adb9b4abc1cae9c3b3904",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +829,833 @@    expected = np.array([0, 1], dtype=result.dtype)\n\n    tm.assert_numpy_array_equal(result, expected)\n\n"
  },
  {
    "id" : "3433c1e3-4166-439d-b263-7a9cbd9343e1",
    "prId" : 32764,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32764#pullrequestreview-378095619",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c333016f-dc0e-44e9-bdfa-d34ef2ffd468",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you also test for a TDI and a PeriodIndex.",
        "createdAt" : "2020-03-19T21:09:57Z",
        "updatedAt" : "2020-03-25T14:52:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb399917d41c5dcdd38adb9b4abc1cae9c3b3904",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +841,845 @@)\n@pytest.mark.parametrize(\n    \"arg\", [[1, 2], [\"a\", \"b\"], [pd.Timestamp(\"2020-01-01\", tz=\"Europe/London\")] * 2]\n)\ndef test_searchsorted_datetimelike_with_listlike_invalid_dtype(values, arg):"
  },
  {
    "id" : "b296eec4-0e9b-421c-981c-9f1b67b97459",
    "prId" : 33304,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33304#pullrequestreview-388147525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f63b1c4-3f97-4d17-8c81-c9d13bb92566",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "can you add the issue number.\r\n\r\n",
        "createdAt" : "2020-04-06T11:10:35Z",
        "updatedAt" : "2020-04-10T13:49:13Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "483c975f15961e47bbff478a4a33c2332f85b90c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +901,905 @@\n@pytest.mark.parametrize(\"klass\", [list, tuple, np.array, pd.Series])\ndef test_period_index_construction_from_strings(klass):\n    # https://github.com/pandas-dev/pandas/issues/26109\n    strings = [\"2020Q1\", \"2020Q2\"] * 2"
  },
  {
    "id" : "57277cb4-63d6-41a6-9ed3-53fce6fe78d8",
    "prId" : 33304,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33304#pullrequestreview-388184796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11c0e715-c058-49fb-9d88-bf08031137da",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "could maybe add these cases to test_period_array_ok instead/as well.",
        "createdAt" : "2020-04-06T12:07:41Z",
        "updatedAt" : "2020-04-10T13:49:13Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "483c975f15961e47bbff478a4a33c2332f85b90c",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +900,904 @@\n\n@pytest.mark.parametrize(\"klass\", [list, tuple, np.array, pd.Series])\ndef test_period_index_construction_from_strings(klass):\n    # https://github.com/pandas-dev/pandas/issues/26109"
  },
  {
    "id" : "cedc90f7-c31b-4c3a-b1e2-d074754ff1db",
    "prId" : 33685,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33685#pullrequestreview-397660378",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9abdf4e-3387-4485-bd97-12345787959f",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I _think_ normally shouldn't need str in f-string. could this be a numpy bug?",
        "createdAt" : "2020-04-21T19:53:27Z",
        "updatedAt" : "2020-04-21T19:53:27Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "e90f48f5-b9f4-47e1-a553-71a7669c9ca6",
        "parentId" : "d9abdf4e-3387-4485-bd97-12345787959f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i forget exactly which case broke without the extra `str`, but plausibly numpy",
        "createdAt" : "2020-04-21T20:42:55Z",
        "updatedAt" : "2020-04-21T20:42:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "de2b8f7f1a6ee6c577b405094f26cb20cc5d3f7a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +510,514 @@\n        value = np.timedelta64(\"NaT\", \"ns\")\n        msg = f\"'fill_value' should be a {self.dtype}. Got '{str(value)}'.\"\n        with pytest.raises(ValueError, match=msg):\n            # require appropriate-dtype if we have a NA value"
  },
  {
    "id" : "3117094d-66e0-4700-b3fc-47515bb77d14",
    "prId" : 36902,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36902#pullrequestreview-502560286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eeee4b48-2878-4bf7-8414-24640877a6f8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "wouldn't object to pushing to pandas/conftest.py itself (but if more clear here okie dokie), followon for sure.",
        "createdAt" : "2020-10-06T03:33:13Z",
        "updatedAt" : "2020-10-06T03:33:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbecbe3607708b6a11ab6571b51256642c18fd15",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +18,22 @@# TODO: more freq variants\n@pytest.fixture(params=[\"D\", \"B\", \"W\", \"M\", \"Q\", \"Y\"])\ndef freqstr(request):\n    return request.param\n"
  },
  {
    "id" : "c997a947-f864-47cc-8ff3-73d28552cead",
    "prId" : 40468,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40468#pullrequestreview-613707262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c772f512-e140-4f5c-8ac9-6474fde16756",
        "parentId" : null,
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "@MarcoGorelli I wonder is there a way to make the pre-commit check not trigger in cases like this (seems like this might be a false positive)?",
        "createdAt" : "2021-03-16T18:32:07Z",
        "updatedAt" : "2021-03-16T18:32:07Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "f5cc6cf7-0a03-49e6-b4f4-b481f9766133",
        "parentId" : "c772f512-e140-4f5c-8ac9-6474fde16756",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "yes...we can probably check that, if <name> has been imported from `pandas` _and_ there is `pd.`<name>, then trigger, but don't if it was imported from somewhere else\r\n\r\nI do think I prefer aliasing `array` here if it's not from pandas, but I'll look into this nonetheless, thanks for bringing it up",
        "createdAt" : "2021-03-16T19:05:41Z",
        "updatedAt" : "2021-03-16T19:05:42Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      },
      {
        "id" : "f8b1c0de-941c-495d-82d1-2a038a4404ec",
        "parentId" : "c772f512-e140-4f5c-8ac9-6474fde16756",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Personally I would say we should do ``import array`` / ``array.array(...)``. That should be clear?",
        "createdAt" : "2021-03-16T20:45:00Z",
        "updatedAt" : "2021-03-16T20:45:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2505a8ae53bccba199e30333a3d42c6af2771272",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1373,1377 @@    elif name == \"array\":\n        # stdlib array\n        from array import array as array_stdlib\n\n        data = array_stdlib(\"i\", arr)"
  }
]