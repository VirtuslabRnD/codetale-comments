[
  {
    "id" : "e06e5c0c-b45b-4e87-bd6e-ba057b0e6b52",
    "prId" : 4458,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9c8c470-08e3-4f71-ad81-e1f409d381ab",
        "parentId" : null,
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "@jreback the weird assert_frame_equal bug is here (if you remove the hack, this fails, and can't repo outside of this)\n",
        "createdAt" : "2013-08-26T22:41:11Z",
        "updatedAt" : "2013-08-26T23:04:03Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      },
      {
        "id" : "90e6077f-b164-47c7-8f3f-36f81a75797c",
        "parentId" : "e9c8c470-08e3-4f71-ad81-e1f409d381ab",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh...i see, `nan` in indices is very odd (but _somewhat_ supported), prob `assert_frame_equal` just does `.equals` on the indicies which I think fails when it has `nan`...let me look\n",
        "createdAt" : "2013-08-26T22:44:23Z",
        "updatedAt" : "2013-08-26T23:04:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1681a6e6-6632-48d3-a341-405b00d98dd7",
        "parentId" : "e9c8c470-08e3-4f71-ad81-e1f409d381ab",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm..that's not it...let me look further\n",
        "createdAt" : "2013-08-26T22:45:23Z",
        "updatedAt" : "2013-08-26T23:04:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3e371472-4b47-4da8-b99e-481803312de8",
        "parentId" : "e9c8c470-08e3-4f71-ad81-e1f409d381ab",
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "I don't know if you read my comment above: https://github.com/pydata/pandas/pull/4458#issuecomment-22103898 (I blame numpy)\n",
        "createdAt" : "2013-08-26T23:08:02Z",
        "updatedAt" : "2013-08-26T23:08:02Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      },
      {
        "id" : "b6bfdca4-9876-4422-95be-f369c172e864",
        "parentId" : "e9c8c470-08e3-4f71-ad81-e1f409d381ab",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@hayd I actually think this is a more general issue; your hack ok for now....\n",
        "createdAt" : "2013-08-26T23:21:50Z",
        "updatedAt" : "2013-08-26T23:21:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8fa9dd2c-00cc-471d-8b20-c1f973d7fb15",
        "parentId" : "e9c8c470-08e3-4f71-ad81-e1f409d381ab",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "funny thing is I canno repro this, e.g. `Index(['a','b',np.nan]).equals(Index(['a','b',np.nan]))` is True!\n\nwhile in your example, the same is False!\n",
        "createdAt" : "2013-08-26T23:40:00Z",
        "updatedAt" : "2013-08-26T23:40:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "638dac54-377c-4a54-92a9-2992304a0a52",
        "parentId" : "e9c8c470-08e3-4f71-ad81-e1f409d381ab",
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "I know! It's really weird... it's the`np.testing.assert_array_equal` which is failing (and it's supposed to ignore nan!). The good thing is, with get_dummies in master we _can_ now repo this. :)\n",
        "createdAt" : "2013-08-27T00:06:57Z",
        "updatedAt" : "2013-08-27T00:06:57Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      }
    ],
    "commit" : "876528810d2fb2ea990b6495cca4c651521ab2f9",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +199,203 @@        # hack (NaN handling in assert_index_equal)\n        exp_just_na.columns = res_just_na.columns\n        assert_frame_equal(res_just_na, exp_just_na)\n\n"
  },
  {
    "id" : "e2a2bb9e-3104-4d5e-966c-bca06803f0cf",
    "prId" : 4458,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a34f94b-ba3b-4251-a3da-c5ac62153b1a",
        "parentId" : null,
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "ha! I was _just_ looking at that test before I saw it failed and thinking \"hmmm does that work in python 3\" - doh!\n",
        "createdAt" : "2013-08-27T00:17:37Z",
        "updatedAt" : "2013-08-27T00:17:37Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      },
      {
        "id" : "3f02a118-f064-4592-be30-94a42e0a3060",
        "parentId" : "0a34f94b-ba3b-4251-a3da-c5ac62153b1a",
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "obviously should be using `exp_na.reindex_axis(['a', 'b', np.nan], 1)`\n",
        "createdAt" : "2013-08-27T00:19:21Z",
        "updatedAt" : "2013-08-27T00:19:21Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      },
      {
        "id" : "d5a5c98f-0fa0-4726-9f06-dd18c89d5061",
        "parentId" : "0a34f94b-ba3b-4251-a3da-c5ac62153b1a",
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "pushed fix to master\n",
        "createdAt" : "2013-08-27T00:26:44Z",
        "updatedAt" : "2013-08-27T00:26:44Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      }
    ],
    "commit" : "876528810d2fb2ea990b6495cca4c651521ab2f9",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +190,194 @@        exp_na = DataFrame({nan: {0: 0.0, 1: 0.0, 2: 1.0},\n                            'a': {0: 1.0, 1: 0.0, 2: 0.0},\n                            'b': {0: 0.0, 1: 1.0, 2: 0.0}}).iloc[:, [1, 2, 0]]\n        # hack (NaN handling in assert_index_equal)\n        exp_na.columns = res_na.columns"
  },
  {
    "id" : "ae645bad-a4b8-43f0-a2d0-36bf0e24f92d",
    "prId" : 8140,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9efd9d21-bba9-4396-8d79-90a185a27cbb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Now, with a Series, the nan column 'looks' like `NaN` in the repr:\n\n```\nIn [54]: pd.get_dummies(ss, dummy_na=True)\nOut[54]:\n    a    b   NaN\n0    1    0    0\n1    0    1    0\n2    1    0    0\n3    0    0    1\n```\n\nSo my first thought was: shouldn't this break? But it appeared the `NaN` was not a string but a real `nan` value. \nBut apart from that, to keep it 'visually' the same as the Series case, maybe use `A_NaN` and `B_NaN` ?\n",
        "createdAt" : "2014-08-31T17:10:20Z",
        "updatedAt" : "2014-08-31T17:10:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1933c833-723c-4a46-96a5-490906ce818e",
        "parentId" : "9efd9d21-bba9-4396-8d79-90a185a27cbb",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Good point. I'd prefer a string with `'name_NaN'` than having multiple real `NaN`s in the output, agreed?\n",
        "createdAt" : "2014-08-31T17:14:27Z",
        "updatedAt" : "2014-08-31T17:14:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a54ec12a-d993-4122-92de-d44e0edda963",
        "parentId" : "9efd9d21-bba9-4396-8d79-90a185a27cbb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "really try not to have actual nan in an index value - not friendly to indexing\n",
        "createdAt" : "2014-08-31T17:15:51Z",
        "updatedAt" : "2014-08-31T17:15:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7ae87134-86fe-41e4-953a-b32cf140c2f8",
        "parentId" : "9efd9d21-bba9-4396-8d79-90a185a27cbb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "yes, certainly agree (I would even wanted to argue that in a Series case it should also be a string, but that is another discussion, and also somewhat difficult if you dummify numerical values)\n",
        "createdAt" : "2014-08-31T17:17:06Z",
        "updatedAt" : "2014-08-31T17:17:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1f6ecf11-8b68-4408-b43b-8b1535ec5490",
        "parentId" : "9efd9d21-bba9-4396-8d79-90a185a27cbb",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "FYI this is the same as current behavior (master):\n`s` is a Series.\n\n``` python\nIn [10]: pd.get_dummies(s, dummy_na=True, prefix='A')\nOut[10]: \n   A_a  A_b  A_c  A_nan\n0    1    0    0      0\n1    0    1    0      0\n2    1    0    0      0\n3    0    0    1      0\n4    0    0    0      1\n```\n\nI can fix if you want, but it will be an API change. The problem is that str(np.nan) is called.\n",
        "createdAt" : "2014-08-31T17:29:19Z",
        "updatedAt" : "2014-08-31T17:29:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "57a3dad0-538f-4528-a826-1c77088be83a",
        "parentId" : "9efd9d21-bba9-4396-8d79-90a185a27cbb",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah yes, in that case, maybe leave it as is. Don't think it is worth an API change. \n",
        "createdAt" : "2014-08-31T17:32:13Z",
        "updatedAt" : "2014-08-31T17:32:13Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6a8a6dc06ec156f74386dfd9e0d5588830710d7",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +301,305 @@        expected = DataFrame({'C': [1, 2, 3, np.nan], 'A_a': [1., 0, 1, 0],\n            'A_b': [0., 1, 0, 0], 'A_nan': [0., 0, 0, 1], 'B_b': [1., 1, 0, 0],\n            'B_c': [0., 0, 1, 0], 'B_nan': [0., 0, 0, 1]})\n        expected = expected[['C', 'A_a', 'A_b', 'A_nan', 'B_b', 'B_c',\n                             'B_nan']]"
  }
]