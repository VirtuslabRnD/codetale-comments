[
  {
    "id" : "b450f361-249d-4d63-836e-ae311b468c83",
    "prId" : 31359,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31359#pullrequestreview-350386247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7eaf59cb-2302-4af5-b25e-adfa103e40e9",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Another test change. The expected result here is less clear I think. You could argue for either categorical or not...",
        "createdAt" : "2020-01-29T15:27:53Z",
        "updatedAt" : "2020-01-29T19:29:57Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a11085bc-7263-43d9-9f45-8b01613e1fa9",
        "parentId" : "7eaf59cb-2302-4af5-b25e-adfa103e40e9",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is an API change from 0.25.x. Dunno what to do here :/\r\n\r\n",
        "createdAt" : "2020-01-29T16:15:53Z",
        "updatedAt" : "2020-01-29T19:29:57Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4654ce20-c904-4898-923e-8a953c1bff41",
        "parentId" : "7eaf59cb-2302-4af5-b25e-adfa103e40e9",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "On 0.25.x, we have the following\r\n\r\n```python\r\nIn [42]: df = pd.DataFrame({\"A\": ['a', 'b']}, dtype='category', index=pd.date_range('2000', periods=2))\r\n\r\nIn [43]: df.resample(\"2D\").agg(lambda x: 'a')\r\nOut[43]:\r\n   A\r\n0  a\r\n\r\nIn [44]: df.resample(\"2D\").agg(lambda x: 'c')\r\nOut[44]:\r\n     A\r\n0  NaN\r\n```\r\n\r\nWe're potentially changing the *values* of the result by returning a CategoricalDtype there. I don't think that behavior is correct, so I'm in favor of making this breaking change... I think... ",
        "createdAt" : "2020-01-29T17:14:50Z",
        "updatedAt" : "2020-01-29T19:29:57Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "52f50120-6415-4dba-8077-fde64c10e838",
        "parentId" : "7eaf59cb-2302-4af5-b25e-adfa103e40e9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> We're potentially changing the values of the result by returning a CategoricalDtype there. I don't think that behavior is correct, so I'm in favor of making this breaking change... I think...\r\n\r\nThat seems exactly the bug we were fixing initially. For groupby it was a regression, so fine to do it as a fix for resample I think.",
        "createdAt" : "2020-01-29T18:48:06Z",
        "updatedAt" : "2020-01-29T19:29:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "edbfc45c-ee2c-444f-ac20-e6e8262ffdbd",
        "parentId" : "7eaf59cb-2302-4af5-b25e-adfa103e40e9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I see now that I commented about in two different places (also in the whatsnew), with a contradicting message ...\r\n\r\nI don't know what is best for now in this PR, but in general: if we are going to take the rule of \"only trying to cast back if the scalars are of the dtype.type\", then I think we should try to cast to categorical (meaning, we should see the string \"a\" as a valid scalar of a categorical dtype with string categories). The specific case of strings is a bit difficult of course, as also the categories' dtype is object and can hold anything.\r\n\r\nNow, long term, I am thinking we should maybe not use this \"scalar of dtype.type\" rule (we can say that to explain it, but not as actual check in the code). But we could rather dictate that `_from_sequence` should be strict. And then it's `_from_sequence` that can hold the logic to know if it's a proper scalar (eg to know that pd.NA is also fine, or to know that \"a\" is a proper scalar for a categorical with categories that include \"a\", or knowing that a python int is also fine in addition to np.int64 scalar for an IntDtype, etc). \r\nFor the specific case of categorical, it could then fail if it's getting scalars (eg \"c\" in the example above) which cannot be a scalar of its dtype (since the categories are part of the dtype, it can know \"c\" is not a valid scalar in that case). \r\n\r\nYou will still get variable behaviour depending on what the agg function returns, eg `.agg(lambda x: 'a')` you get back categorical and `.agg(lambda x: 'c')` not, while both are simple functions that return a string. But with any rule such small differences will be unavoidable for the *default* behaviour (hence having a keyword to have full control might be interesting to investigate)",
        "createdAt" : "2020-01-29T19:05:58Z",
        "updatedAt" : "2020-01-29T19:29:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cdf81a71-67ca-47ca-8103-dfe31120f4d1",
        "parentId" : "7eaf59cb-2302-4af5-b25e-adfa103e40e9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Sorry for the long comment here :) That should probably be moved to the follow-up issue.  \r\nAbout what is best for *this* PR, I am not fully sure. I suppose what you have now is fine. The `isinstance(result[0], dtype.type)` check just doesn't really work for categoricals ..",
        "createdAt" : "2020-01-29T19:09:03Z",
        "updatedAt" : "2020-01-29T19:29:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "dcc7d22c-101b-405d-89c5-e2dadbd217f7",
        "parentId" : "7eaf59cb-2302-4af5-b25e-adfa103e40e9",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Sorry, missed this earlier. I'm writing up the followup issue now, but will address this there.",
        "createdAt" : "2020-01-29T20:00:15Z",
        "updatedAt" : "2020-01-29T20:00:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b826bb710f4fb6f480127042b3c4e26ebb00f7e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +106,110 @@    )\n    expected = expected.reindex([\"Group_obj\", \"Group\"], axis=1)\n    expected[\"Group\"] = expected[\"Group_obj\"]\n    tm.assert_frame_equal(result, expected)\n"
  },
  {
    "id" : "72744538-f1f4-4669-90e7-20f688b6460b",
    "prId" : 33498,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33498#pullrequestreview-394919587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44f340b8-ba26-4936-85c8-bbd6184a4851",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "do we expect the freqs to match?",
        "createdAt" : "2020-04-16T18:33:45Z",
        "updatedAt" : "2020-05-09T16:24:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2c8bda91-870f-436c-bbe0-6762f4af9333",
        "parentId" : "44f340b8-ba26-4936-85c8-bbd6184a4851",
        "authorId" : "60d0b690-e46d-489b-9e53-1306cfe27fca",
        "body" : "Yes. I just added an asert.",
        "createdAt" : "2020-04-16T19:04:07Z",
        "updatedAt" : "2020-05-09T16:24:22Z",
        "lastEditedBy" : "60d0b690-e46d-489b-9e53-1306cfe27fca",
        "tags" : [
        ]
      }
    ],
    "commit" : "71438d6f7509191d532b60dbb6359b4c0bb87f24",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +149,153 @@    result = s.resample(resample_freq).min()\n    expected_index = pd.timedelta_range(freq=resample_freq, start=start, end=end)\n    tm.assert_index_equal(result.index, expected_index)\n    assert result.index.freq == expected_index.freq\n    assert not np.isnan(result[-1])"
  }
]