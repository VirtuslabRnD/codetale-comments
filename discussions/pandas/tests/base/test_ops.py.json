[
  {
    "id" : "de55a752-dc68-492a-99b3-a8d23d0763dd",
    "prId" : 30147,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30147#pullrequestreview-348382232",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f19c590b-e302-4e63-bf53-d0ce0d751bd8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we have all kinds of fixtures for ops *already* in pandas/conftest.py, see if you can use them",
        "createdAt" : "2019-12-11T13:06:00Z",
        "updatedAt" : "2020-02-01T11:49:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4425a24f-3a5b-4562-abe4-3d6f7c794a95",
        "parentId" : "f19c590b-e302-4e63-bf53-d0ce0d751bd8",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "Thanks for your comment. I checked the fixtures in this file now, but it doesn't seem like they're suitable. I'd need a way to derive the symbol for the operations as well. I don't see a way to do this with the existing fixtures.",
        "createdAt" : "2020-01-23T22:55:20Z",
        "updatedAt" : "2020-02-01T11:49:28Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      },
      {
        "id" : "e413a1d9-3a34-477c-866a-170f4088eb7c",
        "parentId" : "f19c590b-e302-4e63-bf53-d0ce0d751bd8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so you want to use all_arithmetic_functions, then simply do\r\nthen use pandas.core.ops.__get_opstr",
        "createdAt" : "2020-01-26T01:24:39Z",
        "updatedAt" : "2020-02-01T11:49:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "48814c40-9b5f-47db-83d8-5cb35148066d",
        "parentId" : "f19c590b-e302-4e63-bf53-d0ce0d751bd8",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "Great! Thanks for the hint",
        "createdAt" : "2020-01-26T14:18:02Z",
        "updatedAt" : "2020-02-01T11:49:28Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "87247a5d64111b0dd8baf3a792470827758f5e61",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +87,91 @@    \"op_name, op\",\n    [\n        (\"add\", \"+\"),\n        (\"sub\", \"-\"),\n        (\"mul\", \"*\"),"
  },
  {
    "id" : "5b41e768-6eb2-444b-a67c-d105760fdd5a",
    "prId" : 31138,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31138#pullrequestreview-345488220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3c5d9a8-f468-458d-b2ae-6b15ba5d0325",
        "parentId" : null,
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "I think that the CI is red because, if it's never entering the ```if``` statement above, ```msg``` never gets defined.",
        "createdAt" : "2020-01-20T08:48:43Z",
        "updatedAt" : "2020-01-21T19:45:46Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "79be427d-d3f2-4a5c-850e-7d9232787c9d",
        "parentId" : "d3c5d9a8-f468-458d-b2ae-6b15ba5d0325",
        "authorId" : "b311bceb-431e-4776-bc31-d85fb31d0046",
        "body" : "Oops!Thanks @MomIsBestFriend for reviewing this.Have edited it in the latest commit.",
        "createdAt" : "2020-01-20T18:57:11Z",
        "updatedAt" : "2020-01-21T19:45:46Z",
        "lastEditedBy" : "b311bceb-431e-4776-bc31-d85fb31d0046",
        "tags" : [
        ]
      }
    ],
    "commit" : "02de253f9ce53ba1ec48a5f7baa904fdcb25942b",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +128,132 @@                    if issubclass(type(o), DatetimeIndexOpsMixin):\n                        err = TypeError\n                    with pytest.raises(err, match=msg):\n                        getattr(o, op)\n"
  },
  {
    "id" : "c33760a2-909d-432a-af87-1915b9f66794",
    "prId" : 32046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32046#pullrequestreview-362785669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3181d723-3c15-4014-b67b-0576b1f346e8",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "does this occur?  this seems like of like `hypothesis`'s `assume(len(o) >= 1)`",
        "createdAt" : "2020-02-21T17:08:55Z",
        "updatedAt" : "2020-02-23T15:30:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a614b76b-19ec-454e-a141-08b138a5d0c9",
        "parentId" : "3181d723-3c15-4014-b67b-0576b1f346e8",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "Yes it does, as we have an [empty in the indices fixture](https://github.com/pandas-dev/pandas/blob/master/pandas/conftest.py#L973)\r\n",
        "createdAt" : "2020-02-21T17:11:05Z",
        "updatedAt" : "2020-02-23T15:30:15Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      },
      {
        "id" : "565d694f-c763-4338-930b-597302fbce44",
        "parentId" : "3181d723-3c15-4014-b67b-0576b1f346e8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thanks",
        "createdAt" : "2020-02-21T17:14:23Z",
        "updatedAt" : "2020-02-23T15:30:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "10bab1c16c61cd6dae0cc2e95275473d24d7764d",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +144,148 @@            pytest.skip(\"IntervalIndex doesn't support assignment\")\n        if len(series) < 1:\n            pytest.skip(\"Test doesn't make sense on empty data\")\n\n        # bug brought up by #1079"
  },
  {
    "id" : "3d1458c5-fbbd-4f5c-827c-e174e7da4ceb",
    "prId" : 32046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32046#pullrequestreview-363042131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cbfa440-ec8e-4d25-aeb2-f1bf9a031b2f",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "these last two lines look like they belong somewhere else",
        "createdAt" : "2020-02-21T17:11:51Z",
        "updatedAt" : "2020-02-23T15:30:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a2c1bac6-978d-4066-8e4b-6c60545f379a",
        "parentId" : "1cbfa440-ec8e-4d25-aeb2-f1bf9a031b2f",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "Indeed. I wouldn't want to address it in this PR yet though",
        "createdAt" : "2020-02-22T18:00:53Z",
        "updatedAt" : "2020-02-23T15:30:15Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "10bab1c16c61cd6dae0cc2e95275473d24d7764d",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +204,208 @@\n        assert Index([1]).item() == 1\n        assert Series([1]).item() == 1\n\n    def test_value_counts_unique_nunique(self, index_or_series_obj):"
  },
  {
    "id" : "41497836-e31a-4525-8e8b-346e1fe31635",
    "prId" : 32046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32046#pullrequestreview-363092509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8b8d455-f474-4b86-9834-e15928bc292d",
        "parentId" : null,
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "Just fixed indentation",
        "createdAt" : "2020-02-23T12:50:50Z",
        "updatedAt" : "2020-02-23T15:30:15Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "10bab1c16c61cd6dae0cc2e95275473d24d7764d",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +185,189 @@            assert not result.iat[1]\n\n    def test_ndarray_compat_properties(self, index_or_series_obj):\n        obj = index_or_series_obj\n"
  },
  {
    "id" : "9eb22c06-b61a-46c5-a942-b47dcc7fd355",
    "prId" : 32046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32046#pullrequestreview-363092509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71ab9ea1-fdeb-4b32-87a7-48748e1ecc5e",
        "parentId" : null,
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "Fixed indentation and added xfail. All other changes are marked with comments",
        "createdAt" : "2020-02-23T12:51:23Z",
        "updatedAt" : "2020-02-23T15:30:15Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "10bab1c16c61cd6dae0cc2e95275473d24d7764d",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +206,210 @@        assert Series([1]).item() == 1\n\n    def test_value_counts_unique_nunique(self, index_or_series_obj):\n        orig = index_or_series_obj\n        obj = orig.copy()"
  },
  {
    "id" : "0835fc96-7a77-4298-b066-f70de0235d9b",
    "prId" : 32046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32046#pullrequestreview-363092509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e68d4e1-9b10-46e0-b379-7daf49e5752d",
        "parentId" : null,
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "Made the length of range dynamic as not all values of `index_or_series_obj ` share the same length",
        "createdAt" : "2020-02-23T12:52:06Z",
        "updatedAt" : "2020-02-23T15:30:15Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "10bab1c16c61cd6dae0cc2e95275473d24d7764d",
    "line" : 190,
    "diffHunk" : "@@ -1,1 +236,240 @@\n        expected_s = Series(\n            range(len(orig), 0, -1), index=expected_index, dtype=\"int64\"\n        )\n"
  },
  {
    "id" : "5c6ba665-f2ee-4e45-9e5e-25d0bb6d6e25",
    "prId" : 32046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32046#pullrequestreview-363092509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66058776-5d94-43bf-aca6-36492c5aee98",
        "parentId" : null,
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "Fixed indentation and added skips. All other changes are marked with comments",
        "createdAt" : "2020-02-23T12:52:51Z",
        "updatedAt" : "2020-02-23T15:30:15Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "10bab1c16c61cd6dae0cc2e95275473d24d7764d",
    "line" : 261,
    "diffHunk" : "@@ -1,1 +265,269 @@\n    @pytest.mark.parametrize(\"null_obj\", [np.nan, None])\n    def test_value_counts_unique_nunique_null(self, null_obj, index_or_series_obj):\n        orig = index_or_series_obj\n        obj = orig.copy()"
  },
  {
    "id" : "7626f863-3758-4e22-83ca-012d436530ba",
    "prId" : 32046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32046#pullrequestreview-363092509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e7cc472-fe09-4716-a8f4-06d6bda30ebf",
        "parentId" : null,
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "- length of expected_data is now dynamic\r\n- using append instead of inline if/else statement",
        "createdAt" : "2020-02-23T12:55:45Z",
        "updatedAt" : "2020-02-23T15:30:15Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "10bab1c16c61cd6dae0cc2e95275473d24d7764d",
    "line" : 391,
    "diffHunk" : "@@ -1,1 +332,336 @@        expected_data_na = expected_data.copy()\n        if expected_data_na:\n            expected_data_na.append(3)\n        expected_s_na = Series(\n            expected_data_na,"
  },
  {
    "id" : "6d067e01-d12c-4ac3-8a6a-f6c903c06637",
    "prId" : 32046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32046#pullrequestreview-363102604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f9b75cc-1479-4aa0-9e89-bca479c95918",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "change to use nulls_fixtures",
        "createdAt" : "2020-02-23T15:06:53Z",
        "updatedAt" : "2020-02-23T15:30:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c1e3b7e3-7065-4575-9441-c1b89adec9ea",
        "parentId" : "8f9b75cc-1479-4aa0-9e89-bca479c95918",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "I'd take care of this in a follow-up PR. The tests are breaking with `NaT`, so it would require some extra effort to fix/skip it, but the PR is already pretty big",
        "createdAt" : "2020-02-23T15:24:01Z",
        "updatedAt" : "2020-02-23T15:30:15Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "10bab1c16c61cd6dae0cc2e95275473d24d7764d",
    "line" : 261,
    "diffHunk" : "@@ -1,1 +265,269 @@\n    @pytest.mark.parametrize(\"null_obj\", [np.nan, None])\n    def test_value_counts_unique_nunique_null(self, null_obj, index_or_series_obj):\n        orig = index_or_series_obj\n        obj = orig.copy()"
  },
  {
    "id" : "a13f9970-93b1-4302-aafb-24eb28ba42c1",
    "prId" : 32046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32046#pullrequestreview-363101435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfa2a4b8-d2ec-44b2-9e7e-bb0ab385a82e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "future PR, let's break these huge tests up ",
        "createdAt" : "2020-02-23T15:07:59Z",
        "updatedAt" : "2020-02-23T15:30:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "10bab1c16c61cd6dae0cc2e95275473d24d7764d",
    "line" : 375,
    "diffHunk" : "@@ -1,1 +316,320 @@            obj = obj.repeat(range(1, len(obj) + 1))\n            obj.name = \"a\"\n\n        # check values has the same dtype as the original\n        assert obj.dtype == orig.dtype"
  },
  {
    "id" : "c0ee9ca9-0faa-4628-b5cc-1635f8a467e5",
    "prId" : 32046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32046#pullrequestreview-363111183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbebd6df-cd28-4e5c-b364-f10f86a05744",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this can be simplified; the else path *should* work for all",
        "createdAt" : "2020-02-23T17:03:14Z",
        "updatedAt" : "2020-02-23T17:05:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "56d62b93-b78b-4c5f-afed-2be0e3e85c37",
        "parentId" : "dbebd6df-cd28-4e5c-b364-f10f86a05744",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "xref: #32205",
        "createdAt" : "2020-02-23T17:46:39Z",
        "updatedAt" : "2020-02-23T17:46:40Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "10bab1c16c61cd6dae0cc2e95275473d24d7764d",
    "line" : 277,
    "diffHunk" : "@@ -1,1 +281,285 @@        # special assign to the numpy array\n        if is_datetime64tz_dtype(obj):\n            if isinstance(obj, DatetimeIndex):\n                v = obj.asi8\n                v[0:2] = iNaT"
  },
  {
    "id" : "01166e72-3dec-468f-bf24-c89dc12e7a9c",
    "prId" : 32046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32046#pullrequestreview-363108816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "516c4bad-a859-431b-8eb8-e813641bb880",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is also duplicative here",
        "createdAt" : "2020-02-23T17:03:32Z",
        "updatedAt" : "2020-02-23T17:05:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "10bab1c16c61cd6dae0cc2e95275473d24d7764d",
    "line" : 295,
    "diffHunk" : "@@ -1,1 +290,294 @@                values = obj._values\n\n        elif needs_i8_conversion(obj):\n            values[0:2] = iNaT\n            values = obj._shallow_copy(values)"
  },
  {
    "id" : "ad26470d-9c9e-4d40-bd65-c3f2abf8a772",
    "prId" : 32046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32046#pullrequestreview-363108816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6887dd65-cfeb-484c-acb6-f8a65276501c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this can't possibly be true (as the first if already catches this)",
        "createdAt" : "2020-02-23T17:04:41Z",
        "updatedAt" : "2020-02-23T17:05:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "10bab1c16c61cd6dae0cc2e95275473d24d7764d",
    "line" : 364,
    "diffHunk" : "@@ -1,1 +309,313 @@            obj.name = \"a\"\n        else:\n            if isinstance(obj, DatetimeIndex):\n                expected_index = orig._values._shallow_copy(values)\n            else:"
  },
  {
    "id" : "5153121c-1097-4012-903f-ce327d06f78c",
    "prId" : 32281,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32281#pullrequestreview-365902797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c14fb678-7464-42bc-86f9-bccd27a81af6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you split the test right below as well (alternatively maybe able to combine with the above as they are duplicative, but no big deal)",
        "createdAt" : "2020-02-27T12:38:57Z",
        "updatedAt" : "2020-03-03T21:34:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "afe54c05-b9a8-4f78-9f26-7353ca5fb034",
        "parentId" : "c14fb678-7464-42bc-86f9-bccd27a81af6",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "@jreback Done - please have another look. I think the `test_x_null` cases are sufficiently different to not merge them with the non-null ones.",
        "createdAt" : "2020-02-27T18:37:49Z",
        "updatedAt" : "2020-03-03T21:34:26Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad541b20ecc9f4002915c6ab90de91bd6414a77a",
    "line" : 290,
    "diffHunk" : "@@ -1,1 +314,318 @@        # sort_index to avoid switched order when values share the same count\n        result = result.sort_index()\n        expected = expected.sort_index()\n        tm.assert_series_equal(result, expected)\n"
  },
  {
    "id" : "64c6e96e-2028-41ec-bc52-4ee0658a439b",
    "prId" : 32281,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32281#pullrequestreview-368329672",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72670995-14c3-4642-8483-ea4f507b6c4c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why do you need dict.fromkeys?",
        "createdAt" : "2020-03-03T03:05:45Z",
        "updatedAt" : "2020-03-03T21:34:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4a43a11a-d1db-4453-8ac5-4c8bc9419f5d",
        "parentId" : "72670995-14c3-4642-8483-ea4f507b6c4c",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "It seemed like the easiest way to get the unique values of obj while preserving the order. I'm open to alternatives though",
        "createdAt" : "2020-03-03T21:15:50Z",
        "updatedAt" : "2020-03-03T21:34:26Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad541b20ecc9f4002915c6ab90de91bd6414a77a",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +211,215 @@        result = obj.unique()\n\n        # dict.fromkeys preserves the order\n        unique_values = list(dict.fromkeys(obj.values))\n        if isinstance(obj, pd.MultiIndex):"
  },
  {
    "id" : "43d4ee93-52a6-4843-a3e0-26b4da3c1716",
    "prId" : 32281,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32281#pullrequestreview-368953041",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96ff82ce-ec9d-4635-87de-3ab5b116a2ae",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you use nulls_fixture",
        "createdAt" : "2020-03-03T03:06:07Z",
        "updatedAt" : "2020-03-03T21:34:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "98951803-aaf4-41a8-8abf-60824b29eafe",
        "parentId" : "96ff82ce-ec9d-4635-87de-3ab5b116a2ae",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "I tried using `nulls_fixture` and `unique_nulls_fixture`. Nearly all configurations break for `pd.NaT` and `pd.NA` though...",
        "createdAt" : "2020-03-03T21:25:32Z",
        "updatedAt" : "2020-03-03T21:35:21Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      },
      {
        "id" : "25cd6af1-a5f7-48df-9867-d19b374d0ba2",
        "parentId" : "96ff82ce-ec9d-4635-87de-3ab5b116a2ae",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, yeah we need to test these, can you create an issue. we will want to add these even if they need xfailing for now as there is no testing on them.",
        "createdAt" : "2020-03-04T13:50:28Z",
        "updatedAt" : "2020-03-04T13:51:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e16c76d4-bd6e-4fb6-8e4c-cb8cb5deb572",
        "parentId" : "96ff82ce-ec9d-4635-87de-3ab5b116a2ae",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "xref: #32437",
        "createdAt" : "2020-03-04T16:56:26Z",
        "updatedAt" : "2020-03-04T16:56:29Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad541b20ecc9f4002915c6ab90de91bd6414a77a",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +226,230 @@            tm.assert_numpy_array_equal(result, expected)\n\n    @pytest.mark.parametrize(\"null_obj\", [np.nan, None])\n    def test_unique_null(self, null_obj, index_or_series_obj):\n        obj = index_or_series_obj"
  },
  {
    "id" : "55e7a23c-02d8-4598-9f70-3317fb57e242",
    "prId" : 32281,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32281#pullrequestreview-367675574",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2263b295-2d44-4a56-9d27-b18036f09b03",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2020-03-03T03:06:29Z",
        "updatedAt" : "2020-03-03T21:34:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad541b20ecc9f4002915c6ab90de91bd6414a77a",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +275,279 @@\n    @pytest.mark.parametrize(\"null_obj\", [np.nan, None])\n    def test_nunique_null(self, null_obj, index_or_series_obj):\n        obj = index_or_series_obj\n"
  },
  {
    "id" : "ebca8be2-0c07-4bad-ac40-7b6a86db61c8",
    "prId" : 32311,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32311#pullrequestreview-368804256",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a728c727-d472-40e2-825d-be40f21386dc",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you not just use np.take here instead?",
        "createdAt" : "2020-03-03T01:10:07Z",
        "updatedAt" : "2020-03-05T15:09:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "2aea9afa-6ff8-40ce-8b46-3a02ee0ed5c7",
        "parentId" : "a728c727-d472-40e2-825d-be40f21386dc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can use expected_uniques.take is better",
        "createdAt" : "2020-03-03T02:46:12Z",
        "updatedAt" : "2020-03-05T15:09:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b6ca3776-26da-4110-ba53-f7c4d2973437",
        "parentId" : "a728c727-d472-40e2-825d-be40f21386dc",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "I don't think I can use `take` here. I want to construct an array containing the indices in `expected_uniques` of the values of `obj`.\r\n\r\n```\r\n# given\r\nobj = Series([1, 2, 1, 3, 5])\r\nexpected_uniques = obj.unique()  # array([1, 2, 3, 5])\r\n\r\n# needed\r\nexpected_codes = array([0, 1, 0, 2, 3])\r\n```\r\n\r\nI could only use `take` if already have the indices and need the values. I basically need the reverse of `take`.\r\n\r\nI guess I could use `where` somehow, but it will probably be more complex than just using vanilla python `list.index()`",
        "createdAt" : "2020-03-03T21:05:18Z",
        "updatedAt" : "2020-03-05T15:09:49Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      },
      {
        "id" : "eb3745a1-060b-4399-8acf-bf4b706180e6",
        "parentId" : "a728c727-d472-40e2-825d-be40f21386dc",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think you can just use `pd.factorize` then\r\n\r\n```python\r\nIn [7]: import pandas as pd\r\nIn [8]: obj = pd.Series([1, 2, 1, 3, 5])\r\nIn [10]: pd.factorize(obj)\r\nOut[10]: (array([0, 1, 0, 2, 3]), Int64Index([1, 2, 3, 5], dtype='int64'))\r\n```",
        "createdAt" : "2020-03-03T21:10:26Z",
        "updatedAt" : "2020-03-05T15:09:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "cb76fb1f-6ec9-4d43-a750-bbca79f6f7c3",
        "parentId" : "a728c727-d472-40e2-825d-be40f21386dc",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "I'm testing factorize here, so I need an alternative implementation 😄",
        "createdAt" : "2020-03-03T21:13:12Z",
        "updatedAt" : "2020-03-05T15:09:49Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      },
      {
        "id" : "9f3957a7-5c7c-43bc-ab16-ad6b7757e036",
        "parentId" : "a728c727-d472-40e2-825d-be40f21386dc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok you can actually use ``.get_loc`` but a simple impl is better; can you add a comment explaining what you are doing (factorizing)",
        "createdAt" : "2020-03-04T14:07:01Z",
        "updatedAt" : "2020-03-05T15:09:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "76d73cc3073bd89b272a0c9c8e28aedacdfc7177",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +551,555 @@        expected_uniques_list = list(expected_uniques)\n        expected_codes = [expected_uniques_list.index(val) for val in obj]\n        expected_codes = np.asarray(expected_codes, dtype=np.intp)\n\n        tm.assert_numpy_array_equal(result_codes, expected_codes)"
  },
  {
    "id" : "aea95708-b2d7-46ed-8793-34932c73dfe1",
    "prId" : 32311,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32311#pullrequestreview-368326854",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "654aa08a-adeb-4549-93f2-a28cc6556e00",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i think we have a sort fixture",
        "createdAt" : "2020-03-03T02:45:10Z",
        "updatedAt" : "2020-03-05T15:09:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "52597ef7-b8dc-4431-89fa-70424bcd1c19",
        "parentId" : "654aa08a-adeb-4549-93f2-a28cc6556e00",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "We only have a sort fixture for the index setops in `tests/indexes/conftest.py`, but that one uses different values (`[None, False]`). There's nothing yet for `[True, False]` values. I could create a follow-up issue though",
        "createdAt" : "2020-03-03T21:11:11Z",
        "updatedAt" : "2020-03-05T15:09:49Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "76d73cc3073bd89b272a0c9c8e28aedacdfc7177",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +534,538 @@        tm.assert_series_equal(result2, expected_s)\n\n    @pytest.mark.parametrize(\"sort\", [True, False])\n    def test_factorize(self, index_or_series_obj, sort):\n        obj = index_or_series_obj"
  },
  {
    "id" : "7d16a62e-5ab1-45fc-948b-a35bb0c7635e",
    "prId" : 32313,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32313#pullrequestreview-367577069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8c7805b-fed5-46ec-a1d4-681e87119bcd",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is this something that should work but doesnt, or will never work?",
        "createdAt" : "2020-02-29T18:43:28Z",
        "updatedAt" : "2020-03-02T22:28:32Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "95a88ebf-1d34-4840-951d-1b0f8139d26c",
        "parentId" : "c8c7805b-fed5-46ec-a1d4-681e87119bcd",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "It's bugged, see #14833. I also added that reference as a comment",
        "createdAt" : "2020-03-02T22:29:21Z",
        "updatedAt" : "2020-03-02T22:29:22Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc7d05d31bd6eef198532856b3bb8d316e4bc9cc",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +845,849 @@        if isinstance(obj, pd.MultiIndex):\n            # See gh-14833\n            pytest.skip(\"np.searchsorted doesn't work on pd.MultiIndex\")\n\n        max_obj = max(obj, default=0)"
  },
  {
    "id" : "6f0b2ce5-b783-48da-a5c4-0c14fad84416",
    "prId" : 32313,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32313#pullrequestreview-367577610",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcb7f530-8773-49df-9b67-6264557a15a0",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "name distinguish that this is about np.searchsorted, not obj.searchsorted",
        "createdAt" : "2020-02-29T18:43:48Z",
        "updatedAt" : "2020-03-02T22:28:32Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "329337e2-0945-4731-a34d-bff8964e0b12",
        "parentId" : "fcb7f530-8773-49df-9b67-6264557a15a0",
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "turns out `np.searchsorted` actually calls `obj.searchsorted` under the hood... I added a comment to highlight this surprising fact",
        "createdAt" : "2020-03-02T22:30:24Z",
        "updatedAt" : "2020-03-02T22:30:24Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc7d05d31bd6eef198532856b3bb8d316e4bc9cc",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +838,842 @@        assert total_usage == non_index_usage + index_usage\n\n    def test_searchsorted(self, index_or_series_obj):\n        # numpy.searchsorted calls obj.searchsorted under the hood.\n        # See gh-12238"
  }
]