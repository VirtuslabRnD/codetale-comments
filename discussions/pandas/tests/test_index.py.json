[
  {
    "id" : "ef0ab116-3b58-48d4-ab43-d5d622447627",
    "prId" : 7874,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab77df9b-7dd5-46b3-857b-1cf029fa22da",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is their a test for the reverse \neg len(levels) == 2 but level =1 ?\n",
        "createdAt" : "2014-07-29T21:12:16Z",
        "updatedAt" : "2014-07-30T18:15:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9da121e857994fcde74bd63ce6030519aa6818c6",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +1680,1684 @@\n        # should have equal lengths\n        with tm.assertRaisesRegexp(TypeError, 'list of lists-like'):\n            self.index.set_levels(levels[0], level=[0, 1])\n"
  },
  {
    "id" : "06e0214c-71fa-4058-bc37-4a4125fc9446",
    "prId" : 8184,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a845a50-ee4d-4e4c-843a-80639d275245",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "not sure if it belongs here or somewhere else but you need more tests for numeric operations. Specifically:\n- timedeltaindex + timedelta\n- timedeltaindex - timedelta\n- timedeltaindex \\* timedelta (should raise)\n- timedeltaindex / timedelta (float64index?)\n- timedeltaindex + datetime (datetimeindex?)\n- timedeltaindex - datetime (raises)\n",
        "createdAt" : "2014-09-09T03:45:38Z",
        "updatedAt" : "2014-09-13T22:29:57Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "18c2639a-d6b3-46a6-b509-884104377b7e",
        "parentId" : "3a845a50-ee4d-4e4c-843a-80639d275245",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "its amazing how many combination their are for addition ops (and the reverse ops are not automatically implemented):\n\n`tdi=timedeltaindex, dti=datetimeindex, td=timedelta,dt=datetime`\n\n```\ntdi + td\ntd + tdi\ntdi + dt\ndt + tdi\ntd + dt\ndt + td\ntdi + dti\ndti + tdi\n```\n",
        "createdAt" : "2014-09-09T14:21:23Z",
        "updatedAt" : "2014-09-13T22:29:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "618cb739-5172-4617-a0d9-983e7a074c8a",
        "parentId" : "3a845a50-ee4d-4e4c-843a-80639d275245",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "note:these are all in tseries/test_base.py\n",
        "createdAt" : "2014-09-09T20:28:15Z",
        "updatedAt" : "2014-09-13T22:29:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f8af44860fffad6535d157e15f5052b64a30781",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +1663,1667 @@        return pd.to_timedelta(range(5),unit='d') + pd.offsets.Hour(1)\n\n    def test_numeric_compat(self):\n\n        idx = self._holder(np.arange(5,dtype='int64'))"
  },
  {
    "id" : "fe105422-8c86-4f5c-815c-609ad6835b3c",
    "prId" : 9258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cbb0b89-57a7-44c2-9c4f-5a42ec2c49fe",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe tests with tz-aware index (result should be the same w.r.t. to the tz)\n",
        "createdAt" : "2015-02-11T14:43:11Z",
        "updatedAt" : "2015-02-18T03:00:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1164210248e6be262cfbf08bf899f1d1781c0fc",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +1995,1999 @@\n    def test_get_loc(self):\n        idx = pd.date_range('2000-01-01', periods=3)\n\n        for method in [None, 'pad', 'backfill', 'nearest']:"
  },
  {
    "id" : "e8504efe-444e-484a-99dd-5f3065502313",
    "prId" : 9258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "785baf04-8d05-41f0-b4c5-cba284eb7fce",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need a test for passing invalid `method` (put in Base so its tested for all Index classes). Though since you override the checking, might be necessary to have some individual tests for this.\n",
        "createdAt" : "2015-02-11T14:46:27Z",
        "updatedAt" : "2015-02-18T03:00:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1164210248e6be262cfbf08bf899f1d1781c0fc",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1,5 @@# -*- coding: utf-8 -*-\n# pylint: disable=E1101,E1103,W0232\n\nfrom datetime import datetime, timedelta, time\nfrom pandas.compat import range, lrange, lzip, u, zip"
  },
  {
    "id" : "177ad577-3bce-427a-bff0-e315fef9c18b",
    "prId" : 9741,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dae3dffe-edc4-40d8-bad5-3a2715735b60",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "Let's add a similar assert to verify that integer codes aren't contained in the index\n",
        "createdAt" : "2015-04-11T02:30:19Z",
        "updatedAt" : "2015-04-20T11:19:36Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecf8514cf14a12511368abf0e61373775cc65c6d",
    "line" : 479,
    "diffHunk" : "@@ -1,1 +1517,1521 @@        self.assertTrue('z' not in ci)\n        self.assertTrue('e' not in ci)\n        self.assertTrue(np.nan not in ci)\n\n        # assert codes NOT in index"
  },
  {
    "id" : "9f0e5e7b-dc48-4658-939d-c263972b310b",
    "prId" : 9741,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bddb49e-77b4-4af3-9701-03d29a3bb916",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "Let's make sure this works if the argument to isin is a mismatched categorical?\n",
        "createdAt" : "2015-04-11T02:31:40Z",
        "updatedAt" : "2015-04-20T11:19:36Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecf8514cf14a12511368abf0e61373775cc65c6d",
    "line" : 645,
    "diffHunk" : "@@ -1,1 +1683,1687 @@        tm.assert_index_equal(eval(repr(ci)),ci,exact=True)\n\n    def test_isin(self):\n\n        ci = CategoricalIndex(list('aabca') + [np.nan],categories=['c','a','b',np.nan])"
  },
  {
    "id" : "15aa8325-ae3d-48d8-8022-287686dbc374",
    "prId" : 9741,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48fa6ef3-ba81-4b2b-ad11-9643e25d9307",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should there also be a test for `identical`? (or is it already somewhere else?)\n",
        "createdAt" : "2015-04-11T11:10:19Z",
        "updatedAt" : "2015-04-20T11:19:36Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecf8514cf14a12511368abf0e61373775cc65c6d",
    "line" : 672,
    "diffHunk" : "@@ -1,1 +1710,1714 @@        self.assertFalse(ci1.equals(ci2))\n        self.assertTrue(ci1.equals(ci1.astype(object)))\n        self.assertTrue(ci1.astype(object).equals(ci1))\n\n        self.assertTrue((ci1 == ci1).all())"
  }
]