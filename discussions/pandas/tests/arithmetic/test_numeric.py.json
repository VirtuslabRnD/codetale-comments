[
  {
    "id" : "e170307f-4101-45c6-8af4-04bed97d2659",
    "prId" : 22254,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22254#pullrequestreview-144660940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc5118f2-823c-4ae5-a4f1-fee82a51661d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "duplicate of conftest (maybe that's ok)",
        "createdAt" : "2018-08-09T00:26:46Z",
        "updatedAt" : "2018-08-09T00:27:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "02113324-b449-44bc-bb02-20c091a01de0",
        "parentId" : "bc5118f2-823c-4ae5-a4f1-fee82a51661d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, I'm not going to worry about fixture duplication until after tests.test_arithmetic is moved to tests.arithmetic.test_timedelta64",
        "createdAt" : "2018-08-09T01:05:02Z",
        "updatedAt" : "2018-08-09T01:05:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d255a6b2b8dde6ea2876a745ef40ff97fabbcf53",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +21,25 @@                        pd.RangeIndex(5)],\n                ids=lambda x: type(x).__name__)\ndef idx(request):\n    return request.param\n"
  },
  {
    "id" : "33036650-1183-4708-baf9-aec407e5e250",
    "prId" : 22254,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22254#pullrequestreview-144660844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ad2d3b7-55e8-4df0-9e9a-128184431df2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are these specific to Index tests? or are they moving so that you can consolidate later?",
        "createdAt" : "2018-08-09T00:27:26Z",
        "updatedAt" : "2018-08-09T00:27:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3bc25865-cc83-41ae-b723-56afeb134518",
        "parentId" : "1ad2d3b7-55e8-4df0-9e9a-128184431df2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> or are they moving so that you can consolidate later?\r\n\r\nYes, very nearly everything in this PR is moved with minimal changes so they can be de-duplicated and parametrized/fixturized in an upcoming pass.",
        "createdAt" : "2018-08-09T01:04:19Z",
        "updatedAt" : "2018-08-09T01:04:19Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d255a6b2b8dde6ea2876a745ef40ff97fabbcf53",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +127,131 @@class TestDivisionByZero(object):\n\n    def test_div_zero(self, zero, idx):\n        expected = pd.Index([np.nan, np.inf, np.inf, np.inf, np.inf],\n                            dtype=np.float64)"
  },
  {
    "id" : "362269ca-d95a-4f54-adca-641c858d918b",
    "prId" : 22267,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22267#pullrequestreview-145052133",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b0d733d-8abd-4854-8b36-3ae6a1d81fcd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "future nit, might as well import the other ``operator`` to ``ops`` to make things consistent",
        "createdAt" : "2018-08-09T22:40:17Z",
        "updatedAt" : "2018-08-09T22:42:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f18ba2e9652d2a2cca6023f5bcd91a18ee92224d",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +386,390 @@        tm.assert_index_equal(result, expected)\n\n    @pytest.mark.parametrize('op', [operator.mul, ops.rmul, operator.floordiv])\n    def test_mul_int_identity(self, op, idx, box):\n        idx = tm.box_expected(idx, box)"
  },
  {
    "id" : "7472d5e9-1859-42cc-8e9d-9f13cbb65f13",
    "prId" : 22559,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22559#pullrequestreview-152075508",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e030de36-a05e-4aed-b459-074f510b067b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't these be in test_datetime64?",
        "createdAt" : "2018-09-04T11:33:02Z",
        "updatedAt" : "2018-09-04T11:34:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9eb20d2e-dc06-43bf-8548-a17b2602c0ea",
        "parentId" : "e030de36-a05e-4aed-b459-074f510b067b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No, this is specifically testing that the numeric-dtypes are correctly handling the presence of datetime64-dtype, not vice-versa.",
        "createdAt" : "2018-09-04T13:51:59Z",
        "updatedAt" : "2018-09-04T13:51:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "30472ee07311349c4b4f77ebdecd81d6d599a86d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +51,55 @@        with pytest.raises(TypeError):\n            df < ts\n        with pytest.raises(TypeError):\n            ts < df\n        with pytest.raises(TypeError):"
  },
  {
    "id" : "40a10889-a20a-4826-b3a5-01a1042266ee",
    "prId" : 22559,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22559#pullrequestreview-152075984",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "817dc222-283b-4c76-9727-936bd72205d3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add for tz as well (use the fixture)",
        "createdAt" : "2018-09-04T11:33:16Z",
        "updatedAt" : "2018-09-04T11:34:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5208cccb-57ad-48eb-a4d0-fe49ad9a5c1f",
        "parentId" : "817dc222-283b-4c76-9727-936bd72205d3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Sure; follow-up.  This PR is pretty specifically only-moving.",
        "createdAt" : "2018-09-04T13:53:00Z",
        "updatedAt" : "2018-09-04T13:53:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "30472ee07311349c4b4f77ebdecd81d6d599a86d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +55,59 @@        with pytest.raises(TypeError):\n            ts > df\n\n        assert not (df == ts).any().any()\n        assert (df != ts).all().all()"
  },
  {
    "id" : "448da405-7297-442b-90e6-795da0909722",
    "prId" : 22559,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22559#pullrequestreview-152076413",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7a24350-31eb-4b75-ba23-550b9e49052e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are there timedelta tests that should be moved (ok for followup, just indicate)",
        "createdAt" : "2018-09-04T11:34:34Z",
        "updatedAt" : "2018-09-04T11:34:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0d4d9d98-a5cd-4c4c-ac67-3295d26dbf58",
        "parentId" : "d7a24350-31eb-4b75-ba23-550b9e49052e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Those should all be in test_arithmetic, which this PR moves to arithmetic.test_timedelta64",
        "createdAt" : "2018-09-04T13:53:47Z",
        "updatedAt" : "2018-09-04T13:53:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "30472ee07311349c4b4f77ebdecd81d6d599a86d",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +69,73 @@\n# ------------------------------------------------------------------\n# Numeric dtypes Arithmetic with Timedelta Scalar\n\nclass TestNumericArraylikeArithmeticWithTimedeltaLike(object):"
  },
  {
    "id" : "a6411e0a-6f0b-456e-a5e0-5aedeb89a1c9",
    "prId" : 23827,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23827#pullrequestreview-177798015",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2745387f-0854-43ef-8997-99b9d69e9601",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do you want to do that todo here?",
        "createdAt" : "2018-11-21T09:28:07Z",
        "updatedAt" : "2018-11-21T09:28:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7f3fd095-bb9a-4fd9-9853-bc918bfd5b1e",
        "parentId" : "2745387f-0854-43ef-8997-99b9d69e9601",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Un-commited changes in my local branch make this a hassle I'd rather avoid.",
        "createdAt" : "2018-11-22T01:13:57Z",
        "updatedAt" : "2018-11-22T01:13:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "24b83b80-d348-45e4-9401-4d790eb3a9bb",
        "parentId" : "2745387f-0854-43ef-8997-99b9d69e9601",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah let's not increase scope of things, plenty to do already.",
        "createdAt" : "2018-11-23T02:37:15Z",
        "updatedAt" : "2018-11-23T02:37:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "14cb2de443072d19f7a4b3169c6ec039e24df644",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +599,603 @@\n    # TODO: this came from tests.series.test_analytics, needs cleannup and\n    #  de-duplication with test_modulo above\n    def test_modulo2(self):\n        with np.errstate(all='ignore'):"
  },
  {
    "id" : "b0c806a1-2612-4fff-8d56-a5cefa842826",
    "prId" : 27239,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27239#pullrequestreview-258462541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2e23bb1-b624-4aff-ae1c-8cd140b6d249",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "RuntimeWarning?",
        "createdAt" : "2019-07-05T15:25:48Z",
        "updatedAt" : "2019-07-06T21:07:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2d407a94-c815-412e-94f1-62891e4b43bc",
        "parentId" : "f2e23bb1-b624-4aff-ae1c-8cd140b6d249",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is broken off of the previous test, which uses the context in the same way.",
        "createdAt" : "2019-07-05T15:29:57Z",
        "updatedAt" : "2019-07-06T21:07:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2ff5e306-83f8-458e-85bb-8d71a5fb6d47",
        "parentId" : "f2e23bb1-b624-4aff-ae1c-8cd140b6d249",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k",
        "createdAt" : "2019-07-05T15:33:56Z",
        "updatedAt" : "2019-07-06T21:07:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "36371faa71371d10b7de42d8db3a456ffa07aa59",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +684,688 @@    def test_modulo_zero_int(self):\n        # GH#9144\n        with np.errstate(all=\"ignore\"):\n            s = Series([0, 1])\n"
  },
  {
    "id" : "733dafa3-d06c-4cae-bb38-dbe9c8dbbf64",
    "prId" : 27321,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27321#pullrequestreview-260414883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3842d472-3b26-4c00-922e-13fc01260b9d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in future PR can you give some comments on what you ar doing here (filling np.inf on the integer divide)",
        "createdAt" : "2019-07-10T23:45:32Z",
        "updatedAt" : "2019-07-11T03:22:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e7680d7d-eea6-4d24-9e17-ab921fc49270",
        "parentId" : "3842d472-3b26-4c00-922e-13fc01260b9d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure",
        "createdAt" : "2019-07-11T00:09:13Z",
        "updatedAt" : "2019-07-11T03:22:19Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "14010c802d8cb36d663f702db4b356f654162457",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +334,338 @@        # GH#27321 pandas convention is to set 1 // 0 to np.inf, as opposed\n        #  to numpy which sets to np.nan; patch `expected[0]` below\n        expected = left // right, left % right\n        expected = list(expected)\n        expected[0] = expected[0].astype(np.float64)"
  },
  {
    "id" : "ba7d5cb0-6f1c-457a-8630-b0f688619ca8",
    "prId" : 28362,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28362#pullrequestreview-287509892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f0a4d77-e6fc-4484-b7d1-6345595f4d23",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Who / what is this from?",
        "createdAt" : "2019-09-10T20:47:48Z",
        "updatedAt" : "2019-09-12T15:02:26Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5de40f83-b154-4021-aeaf-9bf13334cdc9",
        "parentId" : "6f0a4d77-e6fc-4484-b7d1-6345595f4d23",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "in ensure_python_int we have a `assert new_value == value` (inside a try/except) that numpy is warning about when `value` is a np.datetime64 obj",
        "createdAt" : "2019-09-10T20:56:21Z",
        "updatedAt" : "2019-09-12T15:02:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f4bbcaea-d423-4cd1-88ee-ada150071e25",
        "parentId" : "6f0a4d77-e6fc-4484-b7d1-6345595f4d23",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This raises for me with NumPy 1.17\r\n\r\n```python\r\n\r\nIn [13]: a = np.datetime64(10, 'ns')\r\n\r\nIn [14]: pd.core.dtypes.common.ensure_python_int(a)\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n~/sandbox/pandas/pandas/core/dtypes/common.py in ensure_python_int(value)\r\n    203         new_value = int(value)\r\n--> 204         assert new_value == value\r\n    205     except (TypeError, ValueError, AssertionError):\r\n\r\nAssertionError:\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-14-a45e0cb68b99> in <module>\r\n----> 1 pd.core.dtypes.common.ensure_python_int(a)\r\n\r\n~/sandbox/pandas/pandas/core/dtypes/common.py in ensure_python_int(value)\r\n    204         assert new_value == value\r\n    205     except (TypeError, ValueError, AssertionError):\r\n--> 206         raise TypeError(msg.format(type(value), value))\r\n    207     return new_value\r\n    208\r\n\r\nTypeError: Wrong type <class 'numpy.datetime64'> for value 1970-01-01T00:00:00.000000010\r\n```\r\n\r\nIt just warned earlier? If so, then +1",
        "createdAt" : "2019-09-10T21:12:11Z",
        "updatedAt" : "2019-09-12T15:02:26Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8d439be8-bfdb-4d25-a761-01697554d972",
        "parentId" : "6f0a4d77-e6fc-4484-b7d1-6345595f4d23",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> This raises for me with NumPy 1.17\r\n\r\nYah, the assertion raises on master, shouldn't be affected by this PR.  This PR makes `pd.Series([0]) + pd.Timestamp.now().to_datetime64()` raise TypeError, which doesn't happen now.",
        "createdAt" : "2019-09-10T21:19:24Z",
        "updatedAt" : "2019-09-12T15:02:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "018d9d54-8e78-4c9e-b019-fd917b10939b",
        "parentId" : "6f0a4d77-e6fc-4484-b7d1-6345595f4d23",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we need a followup for @TomAugspurger point above? (merging in any event)",
        "createdAt" : "2019-09-12T13:12:24Z",
        "updatedAt" : "2019-09-12T15:02:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "18b19589-6f9d-4945-9565-6a775174ee9c",
        "parentId" : "6f0a4d77-e6fc-4484-b7d1-6345595f4d23",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "IIUC, there's no additional work needed.\r\n\r\nDoes someone with, say NumPy 1.14 see a warning then an error? It's not the cleanest but I'm probably OK with that. Working around that seems a bit messy.",
        "createdAt" : "2019-09-12T15:18:30Z",
        "updatedAt" : "2019-09-12T15:18:30Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bded108d48054ba0041f849e30674d8e458815e",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +245,249 @@        ],\n    )\n    @pytest.mark.filterwarnings(\"ignore:elementwise comp:DeprecationWarning\")\n    def test_add_sub_datetimelike_invalid(self, numeric_idx, other, box):\n        # GH#28080 numeric+datetime64 should raise; Timestamp raises"
  },
  {
    "id" : "e29e31ef-3443-4a8d-bec1-13e58fda0943",
    "prId" : 29725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29725#pullrequestreview-402337107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a5534b8-494f-4e8b-83cc-c364449678af",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@simonjayhawkins any idea if this is something we can address?",
        "createdAt" : "2020-04-29T02:55:04Z",
        "updatedAt" : "2020-04-29T02:55:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "89e69123c740edef3cd13bf9e3abb8377204d49c",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +32,36 @@\n\n# TODO: remove this kludge once mypy stops giving false positives here\n# List comprehension has incompatible type List[PandasObject]; expected List[RangeIndex]\n#  See GH#?????"
  }
]