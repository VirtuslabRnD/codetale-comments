[
  {
    "id" : "abd96494-95bb-4192-a57d-a8b39d83c7a3",
    "prId" : 23425,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23425#pullrequestreview-170525024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe90c7c4-df3b-4379-aca0-c1452398a878",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2018-11-01T00:57:47Z",
        "updatedAt" : "2018-11-06T16:16:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d3d38d29f83b08c78031febfd18ee31a0f06114",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +737,741 @@\n    def test_td64arr_add_sub_td64_nat(self, box):\n        # GH#23320 special handling for timedelta64(\"NaT\")\n        tdi = pd.TimedeltaIndex([NaT, Timedelta('1s')])\n        other = np.timedelta64(\"NaT\")"
  },
  {
    "id" : "9e84646d-ef74-4f8b-86e1-633b84cf274a",
    "prId" : 23642,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23642#pullrequestreview-176325188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe966fa4-29a9-4c05-9e9b-fd5bedb5a1ea",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "something similar is not needed in the other files in `tests/arithmetic` ?",
        "createdAt" : "2018-11-16T19:58:28Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f6dc99d8-1405-4131-ace7-6f4df74f39d2",
        "parentId" : "fe966fa4-29a9-4c05-9e9b-fd5bedb5a1ea",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Eventually we'll want something like this, probably put it next to `tm.box_expected`.  After this I'll end up rebasing #23734 and see if this can be re-used in the other files.  There are enough special cases that it isn't obvious off the top of my head.",
        "createdAt" : "2018-11-16T20:10:11Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "16cf1ebf-4d73-4d7a-b738-ae836f4321ef",
        "parentId" : "fe966fa4-29a9-4c05-9e9b-fd5bedb5a1ea",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did you rebase off of #23734? isn't this basically box_expected with another arg? there are a LOT of helpers out there. too many.....",
        "createdAt" : "2018-11-19T03:41:06Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cc188a6d-020e-4af6-999f-517879f90060",
        "parentId" : "fe966fa4-29a9-4c05-9e9b-fd5bedb5a1ea",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes this has been rebased.  This is about determining what box to use when we are parametrizing over two box types.  I agree it may be nice to cut down on the helpers; in fact I think we may be able to get rid of `tm.box_expected` if we're lucky (fixing the transpose thing...)",
        "createdAt" : "2018-11-19T14:38:07Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2df7d65b6e6f87c8facac41c33cca9044f1ce1cc",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +17,21 @@\n\ndef get_upcast_box(box, vector):\n    \"\"\"\n    Given two box-types, find the one that takes priority"
  },
  {
    "id" : "c97def10-f6a5-4737-a6c7-f4cb646e3598",
    "prId" : 23829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23829#pullrequestreview-177131722",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b29c937e-2ef3-4c1e-bbaf-3a92f09375b9",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Unless the error message is truly meaningless, `pytest.raises(<error-cls>, match=<msg>)` should definitely be preferred over just `pytest.raises(<error-cls>)`.\r\n\r\nThis comment applies to all of your added `pytest.raises` checks.",
        "createdAt" : "2018-11-21T08:59:32Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72bf9053803d1a9239682fd47b4a0ca7aaa0c06",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +1150,1154 @@        with pytest.raises(TypeError, match='Cannot divide'):\n            # GH#23829\n            1 / idx\n\n    def test_td64arr_div_tdlike_scalar(self, two_hours, box_with_array):"
  },
  {
    "id" : "ce745e71-a079-4d93-8768-886348ab430a",
    "prId" : 23829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23829#pullrequestreview-178067161",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbc3425e-5bee-4ab2-83ff-2926dbeff8b7",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Nit: this variable name is misleading given that you overwrite it two lines later.",
        "createdAt" : "2018-11-21T09:00:20Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "2dda0e8b-973f-43d9-a3d3-4ddc117b5dd5",
        "parentId" : "cbc3425e-5bee-4ab2-83ff-2926dbeff8b7",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "You're right, but this pattern is repeated all over these tests.",
        "createdAt" : "2018-11-21T17:46:09Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bb09419b-ce81-4b78-9bec-e514742a2cbe",
        "parentId" : "cbc3425e-5bee-4ab2-83ff-2926dbeff8b7",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Fair enough.  Don't 100% agree with the pattern, but we can always clean it up in a follow-up.",
        "createdAt" : "2018-11-25T02:05:32Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72bf9053803d1a9239682fd47b4a0ca7aaa0c06",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +1185,1189 @@        # GH#22631\n        rng = TimedeltaIndex(['1 days', pd.NaT, '2 days'])\n        expected = pd.Float64Index([12, np.nan, 24])\n\n        rng = tm.box_expected(rng, box_with_array)"
  },
  {
    "id" : "c659cae3-a7d1-44fa-9f2a-4c8ea9c447f0",
    "prId" : 23829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23829#pullrequestreview-177252402",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9045d2c5-9afa-4b07-909f-e553d0c135c1",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Is it possible to parameterize this?  Potentially via flags to indicate what transformation to perform on `obj` before testing for the error?\r\n\r\nDefinitely the outer-loop can be parameterized (just use `[1, 2, 3, 4]` and `[1, 2]`), unless there's a really strong reason for using `mismatched` and `mismatched[:2]`.",
        "createdAt" : "2018-11-21T09:02:10Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "f69c01b6-15b6-4afd-8256-3fa02ab83daa",
        "parentId" : "9045d2c5-9afa-4b07-909f-e553d0c135c1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It's possible, but I'm trying to push back a little bit against over-parametrization.  The pytest setup cost is non-trivial",
        "createdAt" : "2018-11-21T14:02:07Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72bf9053803d1a9239682fd47b4a0ca7aaa0c06",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +1224,1228 @@        for obj in [mismatched, mismatched[:2]]:\n            # one shorter, one longer\n            for other in [obj, np.array(obj), pd.Index(obj)]:\n                with pytest.raises(ValueError):\n                    rng / other"
  },
  {
    "id" : "1603cb4a-3ca0-42f8-8f88-bca38b979c43",
    "prId" : 23829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23829#pullrequestreview-179050115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13586c65-f36c-4682-965f-635209aff408",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Wouldn't this converted the expected list to an DatetimeArray, while the expected result is on object ndarray? (so it's not really testing that?)",
        "createdAt" : "2018-11-27T21:28:41Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "28219637-0e02-4f6b-bf1d-1af02a51a01e",
        "parentId" : "13586c65-f36c-4682-965f-635209aff408",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No.  In the case where `xbox` is `tm.to_array` (the only case that could conceivably give a DatetimeArray), `tm.to_array(any_list)` returning `np.array(that_list)`",
        "createdAt" : "2018-11-27T21:43:30Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b23915bc-8612-4ba1-9fae-9720b710ecb6",
        "parentId" : "13586c65-f36c-4682-965f-635209aff408",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, OK, all a bit opaque .. (I checked what `get_upcast_box` and `box_expected` do, but not `box_with_array` :-))",
        "createdAt" : "2018-11-27T22:47:29Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "245d6052-1b36-48ee-8dc2-e0219f25bd00",
        "parentId" : "13586c65-f36c-4682-965f-635209aff408",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, I'm hoping to simplify some of it, and ideally even get rid of box_expected, but it'll be a while before thats feasible.",
        "createdAt" : "2018-11-27T22:52:02Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72bf9053803d1a9239682fd47b4a0ca7aaa0c06",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +1459,1463 @@            else:\n                expected = [tdser[n] / vector[n] for n in range(len(tdser))]\n            expected = tm.box_expected(expected, xbox)\n            tm.assert_equal(result, expected)\n"
  },
  {
    "id" : "2b7548bc-8803-4c00-b77b-4f134bc70167",
    "prId" : 23885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23885#pullrequestreview-178067447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a89f3e7b-0ceb-40c6-9acf-37cbbcb49654",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Check error message.",
        "createdAt" : "2018-11-25T02:11:15Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "683f6f33-1070-4a89-be70-aca25e3c7b42",
        "parentId" : "a89f3e7b-0ceb-40c6-9acf-37cbbcb49654",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Will do.",
        "createdAt" : "2018-11-25T02:27:48Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "987eecdba662c14ddf9d364d9de73af189cb4d71",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +1352,1356 @@\n        with pytest.raises(TypeError):\n            2 % tdarr\n\n        if box_with_array is pd.DataFrame:"
  },
  {
    "id" : "637d4c5d-16de-4121-88a6-2aa150e11d98",
    "prId" : 23885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23885#pullrequestreview-178067449",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86b2a7eb-8478-4d7f-aa40-6ce19e6a34e6",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "You have two distinct tests here as delineated by this `xfail` check.  In the interest of modularity, IMO this test should be broken up into two.\r\n\r\nSimilar comment goes for your other tests where there is an `xfail` like this.",
        "createdAt" : "2018-11-25T02:13:08Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "f6358df0-c2f0-4794-935f-678d071451bd",
        "parentId" : "86b2a7eb-8478-4d7f-aa40-6ce19e6a34e6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sounds good",
        "createdAt" : "2018-11-25T02:27:57Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "987eecdba662c14ddf9d364d9de73af189cb4d71",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1335,1339 @@\n        if box_with_array is pd.DataFrame:\n            pytest.xfail(\"DataFrame does not have __divmod__ or __rdivmod__\")\n\n        result = divmod(tdarr, three_days)"
  },
  {
    "id" : "4c300c29-a31b-4def-a92d-83219dc552cc",
    "prId" : 33497,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33497#pullrequestreview-393090464",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93daab6a-13bf-437a-8213-232b123f3b6f",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is this a bugfix with the `freq`? Worth a whatsnew?",
        "createdAt" : "2020-04-14T15:14:57Z",
        "updatedAt" : "2020-04-14T15:15:09Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "cf41cdd8-9be5-478e-853c-2a58d620904f",
        "parentId" : "93daab6a-13bf-437a-8213-232b123f3b6f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No.  ATM assert_index_equal doesnt check for matching `freq`.  Moving towards adding that check, but ATM it breaks about 500 tests.  Honestly not sure why this edit made it into this branch.",
        "createdAt" : "2020-04-14T16:21:03Z",
        "updatedAt" : "2020-04-14T16:21:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f003c17c94fb9918cd8777e4b0ccfa6c78d678d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +315,319 @@        result = dti - td\n        expected = DatetimeIndex(\n            [\"20121231\", \"20130101\", \"20130102\"], freq=\"D\", name=\"bar\"\n        )\n        tm.assert_index_equal(result, expected, check_names=False)"
  },
  {
    "id" : "140d32ae-27bd-47c2-ad7b-2fca32bda8a2",
    "prId" : 38626,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38626#pullrequestreview-556799292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db874e25-6309-4f97-8ba4-859add72b066",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a reason you are passing strict? we default to true - eg if these are fixed we want the tests to fail (as a hint to remove the xfail)",
        "createdAt" : "2020-12-22T02:50:32Z",
        "updatedAt" : "2020-12-22T03:47:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cf7bc3f3-4435-4fcb-ab4f-18a6d4c20f51",
        "parentId" : "db874e25-6309-4f97-8ba4-859add72b066",
        "authorId" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "body" : "Problem I ran into is that some parameterizations actually pass, so `strict=True` fails for these. Couldn't figure out a way to `xfail` only the failing combinations because the parameterizations are complex (2 defined elsewhere in fixtures, 1 uses multiple calls to `pytest.mark.parametrize`). ",
        "createdAt" : "2020-12-22T03:02:34Z",
        "updatedAt" : "2020-12-22T03:47:14Z",
        "lastEditedBy" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "tags" : [
        ]
      },
      {
        "id" : "e15cf644-5c24-496a-9ba2-83ae947d16d1",
        "parentId" : "db874e25-6309-4f97-8ba4-859add72b066",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok that's fine\n\nping on green",
        "createdAt" : "2020-12-22T03:07:54Z",
        "updatedAt" : "2020-12-22T03:47:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9f3f8e9c-9ff1-497f-aec6-cd0b4bb6fe55",
        "parentId" : "db874e25-6309-4f97-8ba4-859add72b066",
        "authorId" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "body" : "Seeing 2 failures where `pandas/tests/io/parser/test_common.py::test_chunks_have_consistent_numerical_type[python] `gives unexpected `ResourceWarning`. \r\n\r\nDo you know if this warning occurs consistently? Should something in the test be modified to handle a potential `ResourceWarning`? Or just another xfail case?",
        "createdAt" : "2020-12-22T03:35:27Z",
        "updatedAt" : "2020-12-22T03:47:14Z",
        "lastEditedBy" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "tags" : [
        ]
      },
      {
        "id" : "263ff64c-c164-47f5-b803-fb375fb38417",
        "parentId" : "db874e25-6309-4f97-8ba4-859add72b066",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we ar trying to track these cases down as something is leaking \n\nif they r causing actual failures then ok to xfail (and list these in the associated issue with checkboxes)",
        "createdAt" : "2020-12-22T03:40:28Z",
        "updatedAt" : "2020-12-22T03:47:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8193ea1bbd1474de434e791dd33ceb05b1f3bd03",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +544,548 @@        tm.assert_index_equal(result, expected)\n\n    @pytest.mark.xfail(reason=\"GH38630\", strict=False)\n    def test_tda_add_dt64_object_array(self, box_with_array, tz_naive_fixture):\n        # Result should be cast back to DatetimeArray"
  },
  {
    "id" : "e36d9a01-e958-4687-a243-8d8068142a97",
    "prId" : 39753,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39753#pullrequestreview-591999893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afd08778-49c5-45c0-8555-5ae3692972dd",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this is sub-optimal.  can you add a TODO to try to retain the correct dtype",
        "createdAt" : "2021-02-13T00:11:47Z",
        "updatedAt" : "2021-02-15T19:14:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "1bb0d36b-7427-4068-94c6-84f8d143a704",
        "parentId" : "afd08778-49c5-45c0-8555-5ae3692972dd",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't fully understand your comment. Of course it's sub-optimal, as it's a bug (but an existing one, and I opened an issue about it)",
        "createdAt" : "2021-02-13T08:48:20Z",
        "updatedAt" : "2021-02-15T19:14:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "780b8dea-3d05-4b5b-8ec9-37f83fa9cd59",
        "parentId" : "afd08778-49c5-45c0-8555-5ae3692972dd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> but an existing one\r\n\r\nnow im confused; we only get here if `using_array_manager`",
        "createdAt" : "2021-02-13T17:43:13Z",
        "updatedAt" : "2021-02-15T19:14:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "95bb63b0-c322-4bf6-a6d4-17bbdcb1a60b",
        "parentId" : "afd08778-49c5-45c0-8555-5ae3692972dd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i.e. if the expected isnt actually what we want, better to xfail",
        "createdAt" : "2021-02-13T17:43:41Z",
        "updatedAt" : "2021-02-15T19:14:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "4f788606-1b0e-488b-8b2c-702d85037d34",
        "parentId" : "afd08778-49c5-45c0-8555-5ae3692972dd",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> now im confused; we only get here if using_array_manager\r\n\r\nYes, I \"uncovered\" the bug by adding array manager tests, but the bug itself is not related to ArrayManager, it's a bug in TimedeltaArray (and you can run into it without ArrayManager as well, just not covered by any test)\r\n\r\nBut indeed, an xfail might be more appropriate since I am now asserting the buggy behaviour. The problem is that I would then no longer test the other parts of this test (the other columns) which is actually working fine. \r\nSo I would prefer to keep it this way (but will update the comment to make it more clear this is buggy)",
        "createdAt" : "2021-02-15T11:05:22Z",
        "updatedAt" : "2021-02-15T19:14:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d805881d-1839-4cb7-b763-1cf7902785b3",
        "parentId" : "afd08778-49c5-45c0-8555-5ae3692972dd",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok can you open an issue to address this in BM. (and ideally an INFO / TODO) for future reference. I am getting increasinly worried that things are changed, but we have no idea where except for PR comments, which are not very useful forward looking.",
        "createdAt" : "2021-02-15T16:46:58Z",
        "updatedAt" : "2021-02-15T19:14:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cfd9e91e-7a96-4624-bc3a-302cf49d5e53",
        "parentId" : "afd08778-49c5-45c0-8555-5ae3692972dd",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "As mentioned above, and already included in the comment as well, I already opened an issue (it's https://github.com/pandas-dev/pandas/issues/39750)",
        "createdAt" : "2021-02-15T17:45:15Z",
        "updatedAt" : "2021-02-15T19:14:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "afe33f08-da69-4088-8098-2f0163d5aa35",
        "parentId" : "afd08778-49c5-45c0-8555-5ae3692972dd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> and you can run into it without ArrayManager as well, just not covered by any test\r\n\r\nOK.  Can you add a non-ArrayManager test that will hit it?",
        "createdAt" : "2021-02-15T18:34:12Z",
        "updatedAt" : "2021-02-15T19:14:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9cc104d3-9bef-4f3f-a349-dc78fabc386d",
        "parentId" : "afd08778-49c5-45c0-8555-5ae3692972dd",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I added additional examples that don't involve ArrayManager to the issue (#39750)",
        "createdAt" : "2021-02-17T09:37:53Z",
        "updatedAt" : "2021-02-17T09:38:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbffcadf902af751cffcf13c51a784e992125acf",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +2092,2096 @@                # Changing the expected instead of xfailing to continue to test\n                # the correct behaviour for the other columns\n                expected[2] = Series([pd.NaT, pd.NaT], dtype=object)\n\n            tm.assert_equal(result, expected)"
  },
  {
    "id" : "2b4b3299-3321-488c-91d6-868f430a92bc",
    "prId" : 39753,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39753#pullrequestreview-590702279",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68d9f689-0f96-4b9e-bd1b-c5750cd17e2c",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "why is expected different and is one behavior more desirable than the other?",
        "createdAt" : "2021-02-15T18:33:03Z",
        "updatedAt" : "2021-02-15T19:14:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "89410110-f527-492c-b06a-9192406d43f7",
        "parentId" : "68d9f689-0f96-4b9e-bd1b-c5750cd17e2c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "ArrayManager performs the op column-wise, and thus can preserve dtypes (floordiv gives ints). Will add a comment about it in the line of https://github.com/pandas-dev/pandas/pull/39753/files#r576350947",
        "createdAt" : "2021-02-15T18:44:23Z",
        "updatedAt" : "2021-02-15T19:14:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bbbc4d44-51f9-477e-acfd-f63bdd716de4",
        "parentId" : "68d9f689-0f96-4b9e-bd1b-c5750cd17e2c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thanks",
        "createdAt" : "2021-02-15T18:56:57Z",
        "updatedAt" : "2021-02-15T19:14:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbffcadf902af751cffcf13c51a784e992125acf",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1768,1772 @@            # performs ops column-wise and thus preserves int64 dtype for\n            # columns without missing values\n            expected[[0, 1]] = expected[[0, 1]].astype(\"int64\")\n\n        result = left // right"
  }
]