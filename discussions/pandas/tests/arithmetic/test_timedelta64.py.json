[
  {
    "id" : "abd96494-95bb-4192-a57d-a8b39d83c7a3",
    "prId" : 23425,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23425#pullrequestreview-170525024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe90c7c4-df3b-4379-aca0-c1452398a878",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2018-11-01T00:57:47Z",
        "updatedAt" : "2018-11-06T16:16:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d3d38d29f83b08c78031febfd18ee31a0f06114",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +737,741 @@\n    def test_td64arr_add_sub_td64_nat(self, box):\n        # GH#23320 special handling for timedelta64(\"NaT\")\n        tdi = pd.TimedeltaIndex([NaT, Timedelta('1s')])\n        other = np.timedelta64(\"NaT\")"
  },
  {
    "id" : "9e84646d-ef74-4f8b-86e1-633b84cf274a",
    "prId" : 23642,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23642#pullrequestreview-176325188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe966fa4-29a9-4c05-9e9b-fd5bedb5a1ea",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "something similar is not needed in the other files in `tests/arithmetic` ?",
        "createdAt" : "2018-11-16T19:58:28Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f6dc99d8-1405-4131-ace7-6f4df74f39d2",
        "parentId" : "fe966fa4-29a9-4c05-9e9b-fd5bedb5a1ea",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Eventually we'll want something like this, probably put it next to `tm.box_expected`.  After this I'll end up rebasing #23734 and see if this can be re-used in the other files.  There are enough special cases that it isn't obvious off the top of my head.",
        "createdAt" : "2018-11-16T20:10:11Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "16cf1ebf-4d73-4d7a-b738-ae836f4321ef",
        "parentId" : "fe966fa4-29a9-4c05-9e9b-fd5bedb5a1ea",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did you rebase off of #23734? isn't this basically box_expected with another arg? there are a LOT of helpers out there. too many.....",
        "createdAt" : "2018-11-19T03:41:06Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cc188a6d-020e-4af6-999f-517879f90060",
        "parentId" : "fe966fa4-29a9-4c05-9e9b-fd5bedb5a1ea",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes this has been rebased.  This is about determining what box to use when we are parametrizing over two box types.  I agree it may be nice to cut down on the helpers; in fact I think we may be able to get rid of `tm.box_expected` if we're lucky (fixing the transpose thing...)",
        "createdAt" : "2018-11-19T14:38:07Z",
        "updatedAt" : "2018-11-20T01:20:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2df7d65b6e6f87c8facac41c33cca9044f1ce1cc",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +17,21 @@\n\ndef get_upcast_box(box, vector):\n    \"\"\"\n    Given two box-types, find the one that takes priority"
  },
  {
    "id" : "c97def10-f6a5-4737-a6c7-f4cb646e3598",
    "prId" : 23829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23829#pullrequestreview-177131722",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b29c937e-2ef3-4c1e-bbaf-3a92f09375b9",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Unless the error message is truly meaningless, `pytest.raises(<error-cls>, match=<msg>)` should definitely be preferred over just `pytest.raises(<error-cls>)`.\r\n\r\nThis comment applies to all of your added `pytest.raises` checks.",
        "createdAt" : "2018-11-21T08:59:32Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72bf9053803d1a9239682fd47b4a0ca7aaa0c06",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +1150,1154 @@        with pytest.raises(TypeError, match='Cannot divide'):\n            # GH#23829\n            1 / idx\n\n    def test_td64arr_div_tdlike_scalar(self, two_hours, box_with_array):"
  },
  {
    "id" : "ce745e71-a079-4d93-8768-886348ab430a",
    "prId" : 23829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23829#pullrequestreview-178067161",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbc3425e-5bee-4ab2-83ff-2926dbeff8b7",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Nit: this variable name is misleading given that you overwrite it two lines later.",
        "createdAt" : "2018-11-21T09:00:20Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "2dda0e8b-973f-43d9-a3d3-4ddc117b5dd5",
        "parentId" : "cbc3425e-5bee-4ab2-83ff-2926dbeff8b7",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "You're right, but this pattern is repeated all over these tests.",
        "createdAt" : "2018-11-21T17:46:09Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bb09419b-ce81-4b78-9bec-e514742a2cbe",
        "parentId" : "cbc3425e-5bee-4ab2-83ff-2926dbeff8b7",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Fair enough.  Don't 100% agree with the pattern, but we can always clean it up in a follow-up.",
        "createdAt" : "2018-11-25T02:05:32Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72bf9053803d1a9239682fd47b4a0ca7aaa0c06",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +1185,1189 @@        # GH#22631\n        rng = TimedeltaIndex(['1 days', pd.NaT, '2 days'])\n        expected = pd.Float64Index([12, np.nan, 24])\n\n        rng = tm.box_expected(rng, box_with_array)"
  },
  {
    "id" : "c659cae3-a7d1-44fa-9f2a-4c8ea9c447f0",
    "prId" : 23829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23829#pullrequestreview-177252402",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9045d2c5-9afa-4b07-909f-e553d0c135c1",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Is it possible to parameterize this?  Potentially via flags to indicate what transformation to perform on `obj` before testing for the error?\r\n\r\nDefinitely the outer-loop can be parameterized (just use `[1, 2, 3, 4]` and `[1, 2]`), unless there's a really strong reason for using `mismatched` and `mismatched[:2]`.",
        "createdAt" : "2018-11-21T09:02:10Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "f69c01b6-15b6-4afd-8256-3fa02ab83daa",
        "parentId" : "9045d2c5-9afa-4b07-909f-e553d0c135c1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It's possible, but I'm trying to push back a little bit against over-parametrization.  The pytest setup cost is non-trivial",
        "createdAt" : "2018-11-21T14:02:07Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72bf9053803d1a9239682fd47b4a0ca7aaa0c06",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +1224,1228 @@        for obj in [mismatched, mismatched[:2]]:\n            # one shorter, one longer\n            for other in [obj, np.array(obj), pd.Index(obj)]:\n                with pytest.raises(ValueError):\n                    rng / other"
  },
  {
    "id" : "1603cb4a-3ca0-42f8-8f88-bca38b979c43",
    "prId" : 23829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23829#pullrequestreview-179050115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13586c65-f36c-4682-965f-635209aff408",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Wouldn't this converted the expected list to an DatetimeArray, while the expected result is on object ndarray? (so it's not really testing that?)",
        "createdAt" : "2018-11-27T21:28:41Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "28219637-0e02-4f6b-bf1d-1af02a51a01e",
        "parentId" : "13586c65-f36c-4682-965f-635209aff408",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No.  In the case where `xbox` is `tm.to_array` (the only case that could conceivably give a DatetimeArray), `tm.to_array(any_list)` returning `np.array(that_list)`",
        "createdAt" : "2018-11-27T21:43:30Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b23915bc-8612-4ba1-9fae-9720b710ecb6",
        "parentId" : "13586c65-f36c-4682-965f-635209aff408",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, OK, all a bit opaque .. (I checked what `get_upcast_box` and `box_expected` do, but not `box_with_array` :-))",
        "createdAt" : "2018-11-27T22:47:29Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "245d6052-1b36-48ee-8dc2-e0219f25bd00",
        "parentId" : "13586c65-f36c-4682-965f-635209aff408",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, I'm hoping to simplify some of it, and ideally even get rid of box_expected, but it'll be a while before thats feasible.",
        "createdAt" : "2018-11-27T22:52:02Z",
        "updatedAt" : "2018-11-29T02:49:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72bf9053803d1a9239682fd47b4a0ca7aaa0c06",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +1459,1463 @@            else:\n                expected = [tdser[n] / vector[n] for n in range(len(tdser))]\n            expected = tm.box_expected(expected, xbox)\n            tm.assert_equal(result, expected)\n"
  },
  {
    "id" : "2b7548bc-8803-4c00-b77b-4f134bc70167",
    "prId" : 23885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23885#pullrequestreview-178067447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a89f3e7b-0ceb-40c6-9acf-37cbbcb49654",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Check error message.",
        "createdAt" : "2018-11-25T02:11:15Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "683f6f33-1070-4a89-be70-aca25e3c7b42",
        "parentId" : "a89f3e7b-0ceb-40c6-9acf-37cbbcb49654",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Will do.",
        "createdAt" : "2018-11-25T02:27:48Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "987eecdba662c14ddf9d364d9de73af189cb4d71",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +1352,1356 @@\n        with pytest.raises(TypeError):\n            2 % tdarr\n\n        if box_with_array is pd.DataFrame:"
  },
  {
    "id" : "637d4c5d-16de-4121-88a6-2aa150e11d98",
    "prId" : 23885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23885#pullrequestreview-178067449",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86b2a7eb-8478-4d7f-aa40-6ce19e6a34e6",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "You have two distinct tests here as delineated by this `xfail` check.  In the interest of modularity, IMO this test should be broken up into two.\r\n\r\nSimilar comment goes for your other tests where there is an `xfail` like this.",
        "createdAt" : "2018-11-25T02:13:08Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "f6358df0-c2f0-4794-935f-678d071451bd",
        "parentId" : "86b2a7eb-8478-4d7f-aa40-6ce19e6a34e6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sounds good",
        "createdAt" : "2018-11-25T02:27:57Z",
        "updatedAt" : "2018-12-03T01:35:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "987eecdba662c14ddf9d364d9de73af189cb4d71",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1335,1339 @@\n        if box_with_array is pd.DataFrame:\n            pytest.xfail(\"DataFrame does not have __divmod__ or __rdivmod__\")\n\n        result = divmod(tdarr, three_days)"
  }
]