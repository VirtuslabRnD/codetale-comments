[
  {
    "id" : "0f3f9fa6-5e3b-4776-a7ec-7092f4c3674a",
    "prId" : 32512,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32512#pullrequestreview-371886612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59945098-86b1-4532-a393-a1ecf9b3d272",
        "parentId" : null,
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "Can you add a comment that points to the original issue?\r\n\r\nsomething like:\r\n\r\n```\r\n# https://github.com/pandas-dev/pandas/issues/32493\r\n```\r\n\r\nShould do it",
        "createdAt" : "2020-03-10T11:55:27Z",
        "updatedAt" : "2020-03-15T00:47:55Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7002818ae30d9f008e90dbaa116c1f93b3a5d52",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +634,638 @@def test_downcast_empty(dc1, dc2):\n    # GH32493\n\n    tm.assert_numpy_array_equal(\n        pd.to_numeric([], downcast=dc1),"
  },
  {
    "id" : "ddcdcc7a-0b2b-4a6f-ac11-a7b4a7fc2d0a",
    "prId" : 32560,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32560#pullrequestreview-372743748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55025f2a-2bcf-4183-916d-8048d5d3d811",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I think this is a good test, but we generally add the OP example as a test too.",
        "createdAt" : "2020-03-10T21:54:23Z",
        "updatedAt" : "2020-03-11T13:51:07Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "9cff6d38-8f4a-435b-af71-b14337d2eca9",
        "parentId" : "55025f2a-2bcf-4183-916d-8048d5d3d811",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is basically the OP example, you know, since the first thing that `to_numeric` does is putting that scalar value in a object array (the bug was about the \"uint64\" string, not about whether it was passed as a list, series, array or scalar)",
        "createdAt" : "2020-03-11T13:14:00Z",
        "updatedAt" : "2020-03-11T13:51:07Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "a30d0baf98105c79570d7e74b4a37faf9917dec3",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +633,637 @@    # GH 32394\n    result = to_numeric(\"uint64\", errors=\"coerce\")\n    assert np.isnan(result)\n\n    ser = Series([32, 64, np.nan])"
  },
  {
    "id" : "d23ba1bc-7424-4cf1-a04a-07e7d33b9e21",
    "prId" : 37268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37268#pullrequestreview-512960066",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c144ac6-cffe-4b86-a889-7d216e2e8ca4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add an example that has mixed values (e.g. '3' and 2 and 2.0 as well)",
        "createdAt" : "2020-10-20T17:15:18Z",
        "updatedAt" : "2020-10-20T17:19:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb60c77b861c3d5953c7ca3cae87be1e24ae72f0",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +714,718 @@    [\n        ([\"1\", \"2\", None], Series([1, 2, np.nan])),\n        ([\"1\", \"2\", \"3\"], Series([1, 2, 3])),\n        ([\"1\", \"2\", 3], Series([1, 2, 3])),\n        ([\"1\", \"2\", 3.5], Series([1, 2, 3.5])),"
  },
  {
    "id" : "fe0105e0-0637-4eb9-ae00-a7a4790483ac",
    "prId" : 38746,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38746#pullrequestreview-559267204",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4633610c-0040-4b26-a4c2-86d23940d3f0",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add some cases with missing values?",
        "createdAt" : "2020-12-28T10:37:34Z",
        "updatedAt" : "2020-12-30T07:27:05Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "11e10be0-103c-4760-ba0d-42067a8d7f69",
        "parentId" : "4633610c-0040-4b26-a4c2-86d23940d3f0",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "Done",
        "createdAt" : "2020-12-28T17:00:58Z",
        "updatedAt" : "2020-12-30T07:27:05Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      },
      {
        "id" : "9e7fc664-6fee-4bdd-9055-f5b44ab13e22",
        "parentId" : "4633610c-0040-4b26-a4c2-86d23940d3f0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Thanks!\r\n\r\nDoes it also work when starting with Float data *with* NA to downcast to integer?",
        "createdAt" : "2020-12-28T18:53:51Z",
        "updatedAt" : "2020-12-30T07:27:05Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b59c468c-cf76-48eb-a2a1-dd788e2e5156",
        "parentId" : "4633610c-0040-4b26-a4c2-86d23940d3f0",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "Yes. Added those cases to the test in 23c4ae6",
        "createdAt" : "2020-12-28T19:06:09Z",
        "updatedAt" : "2020-12-30T07:27:05Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "56747da00609dff1b48a5d1ab04bf0bb468392a9",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +736,740 @@        ([1, pd.NA], \"Int64\", \"integer\", \"Int8\"),\n        ([450, 300], \"Int64\", \"integer\", \"Int16\"),\n        ([1, 1], \"Float64\", \"integer\", \"Int8\"),\n        ([np.iinfo(np.int64).max - 1, 1], \"Int64\", \"integer\", \"Int64\"),\n        ([1, 1], \"Int64\", \"signed\", \"Int8\"),"
  },
  {
    "id" : "7888f6bc-4fcc-41ae-a7ac-7da352202eb2",
    "prId" : 38746,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38746#pullrequestreview-559875437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58bdb9ee-d986-419c-bbda-f323e39f0fff",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you also try a *really* large int and uint  (e.g. np.iinfo(int64).max-1) and be sure that this is correctly handled",
        "createdAt" : "2020-12-28T23:16:44Z",
        "updatedAt" : "2020-12-30T07:27:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "98e645b8-b01a-4dac-a6f9-baf5fb325f2a",
        "parentId" : "58bdb9ee-d986-419c-bbda-f323e39f0fff",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "It works for large int\r\n\r\nFor unsigned int with large uint the constructor fails - I opened #38798 to track and xfailed the testcase here",
        "createdAt" : "2020-12-30T06:23:56Z",
        "updatedAt" : "2020-12-30T07:27:05Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "56747da00609dff1b48a5d1ab04bf0bb468392a9",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +741,745 @@        ([1.0, 1.0], \"Float32\", \"signed\", \"Int8\"),\n        ([1.0, 1.1], \"Float64\", \"signed\", \"Float64\"),\n        ([1, pd.NA], \"Int64\", \"signed\", \"Int8\"),\n        ([450, -300], \"Int64\", \"signed\", \"Int16\"),\n        pytest.param("
  }
]