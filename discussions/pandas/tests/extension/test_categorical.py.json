[
  {
    "id" : "0d58d9a1-9f17-4c4f-967c-ed63130a080c",
    "prId" : 24047,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24047#pullrequestreview-209892747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "139ada62-f5de-4635-b335-14ef9a14d693",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment (skipping because its NotImplemented)",
        "createdAt" : "2019-03-03T03:16:04Z",
        "updatedAt" : "2019-03-16T11:45:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d80b58ab440bb72414d8190e33dee3a5aababc8",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +218,222 @@        # GH 23287\n        # skipping because it is not implemented\n        pass\n\n    def _check_divmod_op(self, s, op, other, exc=NotImplementedError):"
  },
  {
    "id" : "c7aa3134-2ba9-49b8-902c-fb40645ab009",
    "prId" : 28762,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28762#pullrequestreview-297817574",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "940a85e1-34ec-492c-ba87-cc0837dac0dd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the test for the original issue as well (leave this here it is good), that test the merging.",
        "createdAt" : "2019-10-05T23:07:06Z",
        "updatedAt" : "2019-10-07T00:37:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "99ef14b3-1775-4a69-970f-b4e55781bbf1",
        "parentId" : "940a85e1-34ec-492c-ba87-cc0837dac0dd",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Added a test for the merging in either direction since that was relevant to the issue, but unfortunately the dtype of the column depends on join order (is this still a bug?) so I had to force the dtypes to be equal before the assertion.\r\n\r\nAs a side note I tried setting `check_dtype=False` in `assert_frame_equal` and got this error, which seems odd since I'm asking it to ignore dtypes: `AssertionError: IntervalArray Expected type <class 'pandas.core.arrays.interval.IntervalArray'>, found <class 'pandas.core.arrays.numpy_.PandasArray'> instead`",
        "createdAt" : "2019-10-06T03:28:31Z",
        "updatedAt" : "2019-10-07T00:37:48Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "261854062c4e5a3cc4cbd6aa64211db7241e57e6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +208,212 @@            s.astype(int)\n\n    @pytest.mark.parametrize(\n        \"expected\",\n        ["
  },
  {
    "id" : "e7759521-6c02-4e67-9e0e-b3e7ce1a5495",
    "prId" : 28762,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28762#pullrequestreview-297864792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f8dce81-acce-4708-9357-336798a914ff",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add in a datetime w/tz, and a timedelta case",
        "createdAt" : "2019-10-05T23:08:19Z",
        "updatedAt" : "2019-10-07T00:37:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b1d855d3-d3b1-43f1-a01b-263365ed4eac",
        "parentId" : "6f8dce81-acce-4708-9357-336798a914ff",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Added a datetime test but wasn't sure how to get a timedelta that'd be considered an extension dtype",
        "createdAt" : "2019-10-06T04:02:12Z",
        "updatedAt" : "2019-10-07T00:37:48Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "fe6789df-f9b3-454c-b294-c4b55bfdfe0f",
        "parentId" : "6f8dce81-acce-4708-9357-336798a914ff",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "just use dtype='timedelta64'",
        "createdAt" : "2019-10-06T22:33:32Z",
        "updatedAt" : "2019-10-07T00:37:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "261854062c4e5a3cc4cbd6aa64211db7241e57e6",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +213,217 @@            pd.Series([\"2019\", \"2020\"], dtype=\"datetime64[ns, UTC]\"),\n            pd.Series([0, 0], dtype=\"timedelta64[ns]\"),\n            pd.Series([pd.Period(\"2019\"), pd.Period(\"2020\")], dtype=\"period[A-DEC]\"),\n            pd.Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype=\"interval\"),\n            pd.Series([1, np.nan], dtype=\"Int64\"),"
  },
  {
    "id" : "73b3705b-eff4-423b-bc0e-1220cd15fa30",
    "prId" : 29269,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29269#pullrequestreview-309018932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9054bb1-e785-49a8-ab18-0444b3b579f8",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "The OP uses `asarray` which is different than what is being tested here. Can you not do `asarray` in the test? The return type should be a date time array",
        "createdAt" : "2019-10-29T17:02:35Z",
        "updatedAt" : "2019-10-31T10:39:20Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3c49eed8-5382-4af8-a9a9-5c5c6d338e47",
        "parentId" : "d9054bb1-e785-49a8-ab18-0444b3b579f8",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "As in, `pandas.arrays.DatetimeArray`? `pd.Categorical(data).astype(dtype)` is only of that type in the second case (when `dtype` is `datetime64[ns, MET]`).\r\n\r\nIn the first case (when `dtype` is `datetime64[ns]`), it is of type `np.array`.",
        "createdAt" : "2019-10-29T17:12:32Z",
        "updatedAt" : "2019-10-31T10:39:20Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      },
      {
        "id" : "fd84a630-f606-4b61-8226-53af76f2541f",
        "parentId" : "d9054bb1-e785-49a8-ab18-0444b3b579f8",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm well I think that is a problem that as type would return a numpy array for \"datetime64[ns]\" and a DatetimeArray for \"datetime64[ns, <TZ>]\" but @jbrockmendel or @TomAugspurger might know more",
        "createdAt" : "2019-10-29T17:15:03Z",
        "updatedAt" : "2019-10-31T10:39:20Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e6f56f90-4fb5-4e3c-99de-e4222daa99a5",
        "parentId" : "d9054bb1-e785-49a8-ab18-0444b3b579f8",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Sorry, I don't totally follow the discussion but it seems like https://github.com/pandas-dev/pandas/issues/28448 is about `Categorical.astype(datetime64[ns, tz])`, which return a DatatimeArray.\r\n\r\nSo I think the test should be something like\r\n\r\n```python\r\nresult = pd.Categorical(data).astype(dtype)\r\ntm.assert_equal(result, expected)\r\n```\r\n\r\nno asarray.",
        "createdAt" : "2019-10-29T17:55:15Z",
        "updatedAt" : "2019-10-31T10:39:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8967bda9-44b6-487c-aace-e2d8ecd614d5",
        "parentId" : "d9054bb1-e785-49a8-ab18-0444b3b579f8",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Right I think so too. But the problem is `Categorical.astype(\"datetime64[ns]\")` returns a NumPy array, so tz-naive date times would be a numpy array where tz-aware would be a DTA.\r\n\r\nThat seems odd to me but I don't know the entire history of these",
        "createdAt" : "2019-10-29T17:57:43Z",
        "updatedAt" : "2019-10-31T10:39:20Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f93f8f4a-681a-4479-a8bf-e8e5b8aab16d",
        "parentId" : "d9054bb1-e785-49a8-ab18-0444b3b579f8",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "In theory `Categorical.astype('datetime64[ns]')` could return a tz-naive DatetimeArray. I'm not sure if it was discussed explicitly when DatetimeArray was added, but changing that would be API-breaking and IMO not worth it.",
        "createdAt" : "2019-10-29T19:23:48Z",
        "updatedAt" : "2019-10-31T10:39:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f8d8ca17-6e41-447c-8a95-744a2be78d27",
        "parentId" : "d9054bb1-e785-49a8-ab18-0444b3b579f8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@WillAyd I tend to agree with everyone above in that this is sub-optimal behavior but not worth changing on its own\\*.  Is this a problem or A Problem?\r\n\r\n\\* There's been some discussion of making EA.astype _always_ return EA at some point, which I think would include this.",
        "createdAt" : "2019-10-29T22:17:58Z",
        "updatedAt" : "2019-10-31T10:39:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "26c12fd6-2ecc-4aeb-bbe8-cf5d4e85db40",
        "parentId" : "d9054bb1-e785-49a8-ab18-0444b3b579f8",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "If you guys don't think so then no. I just wasn't aware of the historical context hence the ping - thanks for the insights.\r\n\r\nSo @MarcoGorelli still should update the tests to use `asarray` but vary expectation accordingly",
        "createdAt" : "2019-10-29T22:23:22Z",
        "updatedAt" : "2019-10-31T10:39:20Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ef713c5c-6ef7-49ab-b3b8-fb95689b380f",
        "parentId" : "d9054bb1-e785-49a8-ab18-0444b3b579f8",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "Ok, thanks all for your feedback - I've updated the tests",
        "createdAt" : "2019-10-30T08:12:01Z",
        "updatedAt" : "2019-10-31T10:39:20Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      }
    ],
    "commit" : "0be007fb44ab3b714b7e4d00150a14c60469d29b",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +240,244 @@    )\n    def test_consistent_casting(self, dtype, expected):\n        # GH 28448\n        result = pd.Categorical(\"2015-01-01\").astype(dtype)\n        assert result == expected"
  },
  {
    "id" : "5a7f2ff4-e456-47f4-aa92-e8aa40edd781",
    "prId" : 33522,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33522#pullrequestreview-441448188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c02eabe-616c-44b5-9460-dc442632a113",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do we have an issue for this? (it seems we shouldn't cast to object when only needing to append NaNs?)",
        "createdAt" : "2020-07-02T08:12:21Z",
        "updatedAt" : "2020-07-02T08:12:21Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "13c1fe7e52043ab0a2ef5afbba94ce50e8253e7a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +95,99 @@class TestReshaping(base.BaseReshapingTests):\n    def test_concat_with_reindex(self, data):\n        pytest.xfail(reason=\"Deliberately upcast to object?\")\n\n"
  },
  {
    "id" : "dbd27cac-9543-48c3-b503-df7175cfa0b3",
    "prId" : 37867,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37867#pullrequestreview-540411697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8babed1-1068-444a-aa74-1acc154d5612",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This duplicates what you have in `tests/arrays/categorical/test_operators.py ` ? ",
        "createdAt" : "2020-11-28T15:04:07Z",
        "updatedAt" : "2020-11-29T17:36:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "02dabd8c-c7c5-4233-bd16-434468cf8bcb",
        "parentId" : "f8babed1-1068-444a-aa74-1acc154d5612",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Unfortunately not: `Categorical` already had a `__contains__` method and it's more permissive than the new one. So, in this file we have (below)  `assert na_value_type in data_missing`, while the base tests method is `assert na_value_type not in data_missing` (notice the `not`).\r\n\r\nna values is also more complicated in categoricals, because in some cases we want to accept `pd.NaT` and in other cases not. I'd like to take it in another round (or let it slide)",
        "createdAt" : "2020-11-28T15:34:26Z",
        "updatedAt" : "2020-11-29T17:36:22Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "96d87ad1-ac03-4a76-b481-af116bbf8578",
        "parentId" : "f8babed1-1068-444a-aa74-1acc154d5612",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "To be clear, I was not referring to the base tests that this is overriding, but the original test you added to `tests/arrays/categorical/test_operators.py ` which also tests this more permissive behaviour?",
        "createdAt" : "2020-11-28T18:59:52Z",
        "updatedAt" : "2020-11-29T17:36:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e1d67107-d2f4-463d-a7c0-73e7a0b77222",
        "parentId" : "f8babed1-1068-444a-aa74-1acc154d5612",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Yeah. I'll delete the ones in `tests/arrays/categorical/test_operators.py`.",
        "createdAt" : "2020-11-28T19:13:54Z",
        "updatedAt" : "2020-11-29T17:36:23Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "245c99ae37b1fbeffaa1e27a14d26bf91f5fbdf9",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +91,95 @@        # GH-37867\n        # na value handling in Categorical.__contains__ is deprecated.\n        # See base.BaseInterFaceTests.test_contains for more details.\n\n        na_value = data.dtype.na_value"
  }
]