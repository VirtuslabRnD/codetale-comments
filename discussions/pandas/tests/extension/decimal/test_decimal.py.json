[
  {
    "id" : "c53ad1f0-c8c5-4cd3-aa42-eb45a2700ea7",
    "prId" : 21185,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21185#pullrequestreview-129944043",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad0f74da-d5b6-493b-a117-2909a706097e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you actually implement this? (only change needed would be to register DecimalDtype I think?) \r\nAs that way we actually have a test for external dtypes registering?",
        "createdAt" : "2018-06-04T10:12:00Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "156e8c31-b362-4a89-88be-1b9be13e3de2",
        "parentId" : "ad0f74da-d5b6-493b-a117-2909a706097e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I do in subsequent PR's trying to keep this diff down.",
        "createdAt" : "2018-06-19T12:25:59Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2c91d706510b16a8a9f82dbeafa7d35396697d1",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +115,119 @@    def test_from_dtype(self, data):\n        # construct from our dtype & string dtype\n        pass\n\n"
  },
  {
    "id" : "bd35ab25-4fe9-482e-8eb8-87b165afc04f",
    "prId" : 21185,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21185#pullrequestreview-129944088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cbb24ac-5398-4d28-b795-8a66a52c155e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think you can change the AssertionError to a ValueError in the code, and then we can still test this.",
        "createdAt" : "2018-06-04T10:13:32Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8b3ce910-55c7-4c65-8618-d94c4df32e63",
        "parentId" : "9cbb24ac-5398-4d28-b795-8a66a52c155e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is ok for now",
        "createdAt" : "2018-06-19T12:26:09Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2c91d706510b16a8a9f82dbeafa7d35396697d1",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +165,169 @@@pytest.mark.xfail(reason=(\n    \"raising AssertionError as this is not implemented, \"\n    \"though easy enough to do\"))\ndef test_series_constructor_coerce_data_to_extension_dtype_raises():\n    xpr = (\"Cannot cast data to extension dtype 'decimal'. Pass the \""
  },
  {
    "id" : "5b69f1f8-5d69-47b4-a571-ced52f8ee76c",
    "prId" : 21261,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21261#pullrequestreview-131356233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df041ed7-ea89-40b2-84a9-4f63cb3c72c4",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is this needed? It seems you are not changing anything in the implementation",
        "createdAt" : "2018-06-22T14:43:44Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a2ac1ffc-06bc-4576-9b1a-c765b1a3ce9d",
        "parentId" : "df041ed7-ea89-40b2-84a9-4f63cb3c72c4",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "Yes, this is needed because the super `check_opname` has a default of `exc=NotImplementedError`.  So this overrides that default.",
        "createdAt" : "2018-06-22T21:46:09Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fc93e49a28eccc4c66294e7238ba63f0e7bda29",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +198,202 @@    def check_opname(self, s, op_name, other, exc=None):\n        super(TestArithmeticOps, self).check_opname(s, op_name,\n                                                    other, exc=None)\n\n    def test_arith_array(self, data, all_arithmetic_operators):"
  },
  {
    "id" : "89ab849b-2692-47ec-a5dd-baed9d01be02",
    "prId" : 22343,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22343#pullrequestreview-147597142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc6f0c20-db27-47c5-aa1c-fae021130150",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why don't we add a test in base which raises NotImplementedError so that authors are forced to cover this? ",
        "createdAt" : "2018-08-16T10:50:09Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6c36040c-6b17-4e16-adb0-e87bff03ce60",
        "parentId" : "cc6f0c20-db27-47c5-aa1c-fae021130150",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But is it useful to force EA authors to do it? This is basically checking the pandas dispatch (which we can do here), not the actual EA.astype implementation",
        "createdAt" : "2018-08-16T11:25:18Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6cae0066-8c20-4e84-8e5d-e29984c9dd6c",
        "parentId" : "cc6f0c20-db27-47c5-aa1c-fae021130150",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Or how about something like\r\n\r\n```python\r\n@pytest.mark.parametrize('typ, check', [\r\n    ('category', 'is_categorical_dtype'),\r\n    ...\r\n])\r\ndef test_astype_category(self, data):\r\n    assert check(data.astype(dtype))\r\n```\r\n\r\nWould that make sense as a base test? I think our default implementation would need to be updated to not fail that.\r\n\r\nMy main concern is that it would be difficult to override (e.g. skip) just some of the dtypes, so maybe we would have to write those as separate tests?",
        "createdAt" : "2018-08-16T11:25:23Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "66c58f62-098c-4f95-b749-d7071d462a08",
        "parentId" : "cc6f0c20-db27-47c5-aa1c-fae021130150",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm mildly concerned that EA authors will not correctly handle extension types. Our base implementation currently fails to handle them. Although we document it as `Cast to a NumPy array with 'dtype'.`. Should we make the return type `Union[ndarray, ExtensionArray]`?\r\n\r\n",
        "createdAt" : "2018-08-16T11:28:27Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f99042cc-581b-47ee-82d9-bee872e0c0fe",
        "parentId" : "cc6f0c20-db27-47c5-aa1c-fae021130150",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would leave such a test until we better figure out how to handle those cross EA/non-EA astype calls (the discussion we were having above in this PR )\r\n\r\n> Should we make the return type Union[ndarray, ExtensionArray]?\r\n\r\nYeah, probably yes in any case (since EAs authors that provide multiple dtypes already do that, like IntegerArray)",
        "createdAt" : "2018-08-16T11:37:12Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bf331548-7be2-4656-9a37-a5a5a04c6b99",
        "parentId" : "cc6f0c20-db27-47c5-aa1c-fae021130150",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would add an issue to make this test, not blocking this PR on it.",
        "createdAt" : "2018-08-20T11:06:44Z",
        "updatedAt" : "2018-08-20T11:06:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2606d02bb738fa914d48d5b460725b506d8e0a0a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +206,210 @@\n\n@pytest.mark.parametrize(\"frame\", [True, False])\ndef test_astype_dispatches(frame):\n    # This is a dtype-specific test that ensures Series[decimal].astype"
  },
  {
    "id" : "fbcddf53-775b-45a5-beb3-f01374a2761c",
    "prId" : 22997,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22997#pullrequestreview-164671314",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "573af0cb-5e52-4db0-9af0-a987d3a76579",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "dont' you have a ``@unhashable`` decorator for this?",
        "createdAt" : "2018-10-15T11:58:06Z",
        "updatedAt" : "2018-10-15T15:42:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a3f50a7c-ec15-4407-bb10-e16176f1510f",
        "parentId" : "573af0cb-5e52-4db0-9af0-a987d3a76579",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Not sure if we can use it. I've only used that as a regular `skip`, not as a pytestmark or as a `skipif`",
        "createdAt" : "2018-10-15T12:02:04Z",
        "updatedAt" : "2018-10-15T15:42:24Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "e17d3976fc9d6f37822c4f78b0933de4a4964b9a",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +178,182 @@\nclass TestGroupby(BaseDecimal, base.BaseGroupbyTests):\n    pytestmark = pytest.mark.skipif(compat.PY2,\n                                    reason=\"Unhashble dtype in Py2.\")\n"
  }
]