[
  {
    "id" : "c53ad1f0-c8c5-4cd3-aa42-eb45a2700ea7",
    "prId" : 21185,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21185#pullrequestreview-129944043",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad0f74da-d5b6-493b-a117-2909a706097e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you actually implement this? (only change needed would be to register DecimalDtype I think?) \r\nAs that way we actually have a test for external dtypes registering?",
        "createdAt" : "2018-06-04T10:12:00Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "156e8c31-b362-4a89-88be-1b9be13e3de2",
        "parentId" : "ad0f74da-d5b6-493b-a117-2909a706097e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I do in subsequent PR's trying to keep this diff down.",
        "createdAt" : "2018-06-19T12:25:59Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2c91d706510b16a8a9f82dbeafa7d35396697d1",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +115,119 @@    def test_from_dtype(self, data):\n        # construct from our dtype & string dtype\n        pass\n\n"
  },
  {
    "id" : "bd35ab25-4fe9-482e-8eb8-87b165afc04f",
    "prId" : 21185,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21185#pullrequestreview-129944088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cbb24ac-5398-4d28-b795-8a66a52c155e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think you can change the AssertionError to a ValueError in the code, and then we can still test this.",
        "createdAt" : "2018-06-04T10:13:32Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8b3ce910-55c7-4c65-8618-d94c4df32e63",
        "parentId" : "9cbb24ac-5398-4d28-b795-8a66a52c155e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is ok for now",
        "createdAt" : "2018-06-19T12:26:09Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2c91d706510b16a8a9f82dbeafa7d35396697d1",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +165,169 @@@pytest.mark.xfail(reason=(\n    \"raising AssertionError as this is not implemented, \"\n    \"though easy enough to do\"))\ndef test_series_constructor_coerce_data_to_extension_dtype_raises():\n    xpr = (\"Cannot cast data to extension dtype 'decimal'. Pass the \""
  },
  {
    "id" : "5b69f1f8-5d69-47b4-a571-ced52f8ee76c",
    "prId" : 21261,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21261#pullrequestreview-131356233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df041ed7-ea89-40b2-84a9-4f63cb3c72c4",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is this needed? It seems you are not changing anything in the implementation",
        "createdAt" : "2018-06-22T14:43:44Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a2ac1ffc-06bc-4576-9b1a-c765b1a3ce9d",
        "parentId" : "df041ed7-ea89-40b2-84a9-4f63cb3c72c4",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "Yes, this is needed because the super `check_opname` has a default of `exc=NotImplementedError`.  So this overrides that default.",
        "createdAt" : "2018-06-22T21:46:09Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fc93e49a28eccc4c66294e7238ba63f0e7bda29",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +198,202 @@    def check_opname(self, s, op_name, other, exc=None):\n        super(TestArithmeticOps, self).check_opname(s, op_name,\n                                                    other, exc=None)\n\n    def test_arith_array(self, data, all_arithmetic_operators):"
  },
  {
    "id" : "89ab849b-2692-47ec-a5dd-baed9d01be02",
    "prId" : 22343,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22343#pullrequestreview-147597142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc6f0c20-db27-47c5-aa1c-fae021130150",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why don't we add a test in base which raises NotImplementedError so that authors are forced to cover this? ",
        "createdAt" : "2018-08-16T10:50:09Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6c36040c-6b17-4e16-adb0-e87bff03ce60",
        "parentId" : "cc6f0c20-db27-47c5-aa1c-fae021130150",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But is it useful to force EA authors to do it? This is basically checking the pandas dispatch (which we can do here), not the actual EA.astype implementation",
        "createdAt" : "2018-08-16T11:25:18Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6cae0066-8c20-4e84-8e5d-e29984c9dd6c",
        "parentId" : "cc6f0c20-db27-47c5-aa1c-fae021130150",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Or how about something like\r\n\r\n```python\r\n@pytest.mark.parametrize('typ, check', [\r\n    ('category', 'is_categorical_dtype'),\r\n    ...\r\n])\r\ndef test_astype_category(self, data):\r\n    assert check(data.astype(dtype))\r\n```\r\n\r\nWould that make sense as a base test? I think our default implementation would need to be updated to not fail that.\r\n\r\nMy main concern is that it would be difficult to override (e.g. skip) just some of the dtypes, so maybe we would have to write those as separate tests?",
        "createdAt" : "2018-08-16T11:25:23Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "66c58f62-098c-4f95-b749-d7071d462a08",
        "parentId" : "cc6f0c20-db27-47c5-aa1c-fae021130150",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm mildly concerned that EA authors will not correctly handle extension types. Our base implementation currently fails to handle them. Although we document it as `Cast to a NumPy array with 'dtype'.`. Should we make the return type `Union[ndarray, ExtensionArray]`?\r\n\r\n",
        "createdAt" : "2018-08-16T11:28:27Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f99042cc-581b-47ee-82d9-bee872e0c0fe",
        "parentId" : "cc6f0c20-db27-47c5-aa1c-fae021130150",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would leave such a test until we better figure out how to handle those cross EA/non-EA astype calls (the discussion we were having above in this PR )\r\n\r\n> Should we make the return type Union[ndarray, ExtensionArray]?\r\n\r\nYeah, probably yes in any case (since EAs authors that provide multiple dtypes already do that, like IntegerArray)",
        "createdAt" : "2018-08-16T11:37:12Z",
        "updatedAt" : "2018-08-16T12:47:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bf331548-7be2-4656-9a37-a5a5a04c6b99",
        "parentId" : "cc6f0c20-db27-47c5-aa1c-fae021130150",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would add an issue to make this test, not blocking this PR on it.",
        "createdAt" : "2018-08-20T11:06:44Z",
        "updatedAt" : "2018-08-20T11:06:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2606d02bb738fa914d48d5b460725b506d8e0a0a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +206,210 @@\n\n@pytest.mark.parametrize(\"frame\", [True, False])\ndef test_astype_dispatches(frame):\n    # This is a dtype-specific test that ensures Series[decimal].astype"
  },
  {
    "id" : "fbcddf53-775b-45a5-beb3-f01374a2761c",
    "prId" : 22997,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22997#pullrequestreview-164671314",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "573af0cb-5e52-4db0-9af0-a987d3a76579",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "dont' you have a ``@unhashable`` decorator for this?",
        "createdAt" : "2018-10-15T11:58:06Z",
        "updatedAt" : "2018-10-15T15:42:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a3f50a7c-ec15-4407-bb10-e16176f1510f",
        "parentId" : "573af0cb-5e52-4db0-9af0-a987d3a76579",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Not sure if we can use it. I've only used that as a regular `skip`, not as a pytestmark or as a `skipif`",
        "createdAt" : "2018-10-15T12:02:04Z",
        "updatedAt" : "2018-10-15T15:42:24Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "e17d3976fc9d6f37822c4f78b0933de4a4964b9a",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +178,182 @@\nclass TestGroupby(BaseDecimal, base.BaseGroupbyTests):\n    pytestmark = pytest.mark.skipif(compat.PY2,\n                                    reason=\"Unhashble dtype in Py2.\")\n"
  },
  {
    "id" : "db457d09-6a24-4530-a588-e3fec979d993",
    "prId" : 23284,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23284#pullrequestreview-171730019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a96041a0-bdef-4e02-a2b7-363808ba7f02",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, we *could* add this support I think though, create an issue?",
        "createdAt" : "2018-11-05T19:29:57Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6930c5de-6182-4cd2-8320-b29606695def",
        "parentId" : "a96041a0-bdef-4e02-a2b7-363808ba7f02",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Right now we have a pretty clear answer of \"decimal isn't supported\". I'm hesitant to even partially support it :)",
        "createdAt" : "2018-11-05T19:51:15Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "56e5f2fc31669e6708ffb15340da91d6e9e696e3",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +66,70 @@    def assert_series_equal(self, left, right, *args, **kwargs):\n        def convert(x):\n            # need to convert array([Decimal(NaN)], dtype='object') to np.NaN\n            # because Series[object].isnan doesn't recognize decimal(NaN) as\n            # NA."
  },
  {
    "id" : "09f1d328-4c33-456d-8255-956ef541ac47",
    "prId" : 23284,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23284#pullrequestreview-172547010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d25b6ca-b231-46a6-bef7-8ed5a9226276",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "where does this come up now? e.g. whats an example",
        "createdAt" : "2018-11-05T19:30:21Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "96b42a6c-e769-4028-a766-d1150aad6ef3",
        "parentId" : "6d25b6ca-b231-46a6-bef7-8ed5a9226276",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "```python\r\nIn [21]: import pandas as pd\r\n\r\nIn [22]: import pandas.util.testing as tm\r\n\r\nIn [23]: from pandas.tests.extension.decimal import to_decimal\r\n\r\nIn [24]: ser = pd.Series(to_decimal(['1.0', 'NaN']))\r\n\r\nIn [25]: tm.assert_series_equal(ser.astype(object), ser.astype(object))\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-25-5356adf50e72> in <module>\r\n----> 1 tm.assert_series_equal(ser.astype(object), ser.astype(object))\r\n\r\n~/sandbox/pandas/pandas/util/testing.py in assert_series_equal(left, right, check_dtype, check_index_type, check_series_type, check_less_precise, check_names, check_exact, check_datetimelike_compat, check_categorical, obj)\r\n   1293                                      check_less_precise=check_less_precise,\r\n   1294                                      check_dtype=check_dtype,\r\n-> 1295                                      obj='{obj}'.format(obj=obj))\r\n   1296\r\n   1297     # metadata comparison\r\n\r\n~/sandbox/pandas/pandas/_libs/testing.pyx in pandas._libs.testing.assert_almost_equal()\r\n     64\r\n     65\r\n---> 66 cpdef assert_almost_equal(a, b,\r\n     67                           check_less_precise=False,\r\n     68                           bint check_dtype=True,\r\n\r\n~/sandbox/pandas/pandas/_libs/testing.pyx in pandas._libs.testing.assert_almost_equal()\r\n    178             msg = '{0} values are different ({1} %)'.format(\r\n    179                 obj, np.round(diff * 100.0 / na, 5))\r\n--> 180             raise_assert_detail(obj, msg, lobj, robj)\r\n    181\r\n    182         return True\r\n\r\n~/sandbox/pandas/pandas/util/testing.py in raise_assert_detail(obj, message, left, right, diff)\r\n   1080         msg += \"\\n[diff]: {diff}\".format(diff=diff)\r\n   1081\r\n-> 1082     raise AssertionError(msg)\r\n   1083\r\n   1084\r\n\r\nAssertionError: Series are different\r\n\r\nSeries values are different (50.0 %)\r\n[left]:  [1.0, NaN]\r\n[right]: [1.0, NaN]\r\n```\r\n\r\nWe do the astype(object) to build the expected.",
        "createdAt" : "2018-11-05T19:42:49Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f2b9b3dc-47a5-478b-9175-777b6d351606",
        "parentId" : "6d25b6ca-b231-46a6-bef7-8ed5a9226276",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think this is a bug, and would solve the aboe i think.\r\n\r\n```\r\nIn [7]: ser.astype(object).isna()\r\nOut[7]: \r\n0    False\r\n1    False\r\ndtype: bool\r\n```",
        "createdAt" : "2018-11-06T02:32:15Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c4e21a6a-bf94-44eb-85f8-a62ac3347832",
        "parentId" : "6d25b6ca-b231-46a6-bef7-8ed5a9226276",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@TomAugspurger actually, can you explain why the current code in master is not working fine? Why do you need to convert to object? Because before, there was already the calls to `isna` to check NaNs and non-NaNs separately.",
        "createdAt" : "2018-11-06T15:13:58Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9fbd6430-a320-406b-ad72-4594a2275894",
        "parentId" : "6d25b6ca-b231-46a6-bef7-8ed5a9226276",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is my point. I think there is a bug somewhere here, e.g. isna is maybe not dispatching to the EA?",
        "createdAt" : "2018-11-06T15:17:47Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e144b9b5-ef59-4ced-9cdb-fb6ffd3723c1",
        "parentId" : "6d25b6ca-b231-46a6-bef7-8ed5a9226276",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "DecimalArray.isna and Series[Decimal].isna is working fine, so that's why I don't understand why the original code here in `BaseDecimal.assert_series_equal` is not already fine as is.",
        "createdAt" : "2018-11-06T15:25:43Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d9c6f9dd-6fb1-4746-bb7b-ea58a0345b6f",
        "parentId" : "6d25b6ca-b231-46a6-bef7-8ed5a9226276",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "To construct the expected in `test_untsack` base test, we do `ser.astype(object).untsack(level=level)`. That means we convert the Series[Decimal] to Series[object], which has the incorrect `isna`.",
        "createdAt" : "2018-11-06T15:34:19Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "cea356c5-0f10-4057-8c32-e0d4355e9dae",
        "parentId" : "6d25b6ca-b231-46a6-bef7-8ed5a9226276",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "So it's all about creating the expected result. When we go to do the final assert that the values match, we do\r\n\r\n```python\r\n            result = result.astype(object)\r\n\r\n            self.assert_frame_equal(result, expected)\r\n```\r\n\r\nbut `self.assert_frame_equal` will say that `Series([Decimal('NaN')], dtype='object')` isn't equal to itself, since it doesn't consider that value NA.",
        "createdAt" : "2018-11-06T15:35:36Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "101999eb-1e5a-42b2-b735-c72fda1236be",
        "parentId" : "6d25b6ca-b231-46a6-bef7-8ed5a9226276",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, OK, I somehow thought you were doing the `astype(object)` inside the assert testing machinery above, not in the actual expected result. Yes, that makes sense now. \r\n\r\nFor me it is fine to keep this hack in here for now. In the end that is somehow the purpose of using the class instances for `assert_.._equal` so a specific EA can override it.",
        "createdAt" : "2018-11-06T15:51:04Z",
        "updatedAt" : "2018-11-06T17:10:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "11bf416e-e613-4626-bc3b-3327a90c9a6e",
        "parentId" : "6d25b6ca-b231-46a6-bef7-8ed5a9226276",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think the ``.astype(object)`` for Decimal is incorrect.\r\n\r\n```\r\nIn [5]: ser.values\r\nOut[5]: DecimalArray(array([Decimal('1.0'), Decimal('NaN')], dtype=object))\r\n\r\nIn [6]: ser.astype(object)\r\nOut[6]: \r\n0    1.0\r\n1    NaN\r\ndtype: object\r\n\r\nIn [7]: ser.astype(object).values\r\nOut[7]: array([Decimal('1.0'), Decimal('NaN')], dtype=object)\r\n```\r\n\r\non the these should be converted to ``np.nan`` and not ``Decimal('NaN')`` I think as this is just a numpy array. ",
        "createdAt" : "2018-11-07T14:11:46Z",
        "updatedAt" : "2018-11-07T14:11:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b05863e8-60ec-43de-b210-25e2f92a6856",
        "parentId" : "6d25b6ca-b231-46a6-bef7-8ed5a9226276",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "object-dtype can store anything, including decimal objects. It'd be strange to only convert `Decimal(\"NaN\")` to `np.nan`, and not `Decimal('1.0')` to 1.0, no?",
        "createdAt" : "2018-11-07T14:19:52Z",
        "updatedAt" : "2018-11-07T14:19:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "75f48bf8-3a40-4a42-8834-2925b86cf0af",
        "parentId" : "6d25b6ca-b231-46a6-bef7-8ed5a9226276",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yeah, this seems correct to me. \r\n\r\nGoing to merge, if we need to further discuss this, we can do that in another issue (it's not really related anymore with actually fixing unstack)",
        "createdAt" : "2018-11-07T15:31:50Z",
        "updatedAt" : "2018-11-07T15:31:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "56e5f2fc31669e6708ffb15340da91d6e9e696e3",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +67,71 @@        def convert(x):\n            # need to convert array([Decimal(NaN)], dtype='object') to np.NaN\n            # because Series[object].isnan doesn't recognize decimal(NaN) as\n            # NA.\n            try:"
  },
  {
    "id" : "f1460bea-1153-4f76-80fa-382a40a80d97",
    "prId" : 24047,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24047#pullrequestreview-187809787",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79d750d0-a1a4-4274-bf76-d1221069ee33",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so thinking we should either call this: ``data_for_ones`` or have just a scalar fixture in each test ea\r\n\r\n@TomAugspurger ",
        "createdAt" : "2018-12-05T14:27:07Z",
        "updatedAt" : "2019-03-16T11:45:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "34279f7f-3431-4331-b22b-673b63ec3d5b",
        "parentId" : "79d750d0-a1a4-4274-bf76-d1221069ee33",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think either of those makes sense.\r\n\r\nWould the default be to `raise NotImpelmentedError` like the other `data` fixtures?",
        "createdAt" : "2018-12-05T14:31:12Z",
        "updatedAt" : "2019-03-16T11:45:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f75a1f2e-1d42-494f-9e55-18f5a1944996",
        "parentId" : "79d750d0-a1a4-4274-bf76-d1221069ee33",
        "authorId" : "5d486e53-1409-4c5f-9cac-03c066f838b9",
        "body" : "Then I don't fixturize and move each array of ones inside every test functions?",
        "createdAt" : "2018-12-06T13:55:47Z",
        "updatedAt" : "2019-03-16T11:45:19Z",
        "lastEditedBy" : "5d486e53-1409-4c5f-9cac-03c066f838b9",
        "tags" : [
        ]
      },
      {
        "id" : "2cd900ee-1e89-47f4-a043-69adb4a17c08",
        "parentId" : "79d750d0-a1a4-4274-bf76-d1221069ee33",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@makbigc no, fixturize, but just rename it, alternatively have a fixture for each EA that returns a scalar, then inside the test functions you can create a list of those.",
        "createdAt" : "2018-12-11T19:46:39Z",
        "updatedAt" : "2019-03-16T11:45:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "26686fce-9bc4-42fb-9556-e926ae430562",
        "parentId" : "79d750d0-a1a4-4274-bf76-d1221069ee33",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you rename",
        "createdAt" : "2018-12-25T23:58:54Z",
        "updatedAt" : "2019-03-16T11:45:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d80b58ab440bb72414d8190e33dee3a5aababc8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +24,28 @@\n\n@pytest.fixture\ndef data_for_twos():\n    return DecimalArray([decimal.Decimal(2) for _ in range(100)])"
  },
  {
    "id" : "d7710d7a-759a-4c9c-9a2c-89510b035cb7",
    "prId" : 29926,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29926#pullrequestreview-324642443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "097f4e0a-d2df-4494-8133-0ada383b0942",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is not fully fool proof, as such an Exception could be catched somewhere in the indexing code. But I at least verified that for the `s[s > 0.5]` case, this test actually failed as desired before making the fix.",
        "createdAt" : "2019-11-29T10:43:05Z",
        "updatedAt" : "2019-12-03T10:52:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "263e31a2ce6cf332ad10698c9bd7aae1f3191768",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +487,491 @@\n    def DecimalArray__array__(self, dtype=None):\n        raise Exception(\"tried to convert a DecimalArray to a numpy array\")\n\n    monkeypatch.setattr(DecimalArray, \"__array__\", DecimalArray__array__, raising=False)"
  },
  {
    "id" : "bc283b25-b630-4c1a-8cd0-bd57768fdd0e",
    "prId" : 29926,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29926#pullrequestreview-324865260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c236742-27d3-4ba0-9c36-92753af396b8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make this test more generic (e.g. hit more EA arrays)?",
        "createdAt" : "2019-11-29T22:54:01Z",
        "updatedAt" : "2019-12-03T10:52:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "263e31a2ce6cf332ad10698c9bd7aae1f3191768",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +485,489 @@    # Ensure that indexing operations do not materialize (convert to a numpy\n    # array) the ExtensionArray unnecessary\n\n    def DecimalArray__array__(self, dtype=None):\n        raise Exception(\"tried to convert a DecimalArray to a numpy array\")"
  },
  {
    "id" : "488b7aa6-6400-4099-b667-2b06fd4f0908",
    "prId" : 38939,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38939#pullrequestreview-610877110",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "839f33ae-e26a-4e36-9bb3-b4fbe10cad08",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@jorisvandenbossche any idea why this might happen?",
        "createdAt" : "2021-02-13T23:08:55Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "09bd728f-1972-4eb3-8d63-1b47e20e824b",
        "parentId" : "839f33ae-e26a-4e36-9bb3-b4fbe10cad08",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Debugged a bit, and turns out that it is the constructor in concat that looses it, and that's because you now copy EAs in the constructor, and so it's DecimalArray.copy() that looses the context  .. ;)\r\n\r\n```\r\nIn [11]: data.astype(DecimalDtype(ctx)).dtype\r\nOut[11]: DecimalDtype(context=Context(prec=5, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999, capitals=1, clamp=0, flags=[], traps=[InvalidOperation, DivisionByZero, Overflow]))\r\n\r\nIn [12]: data.astype(DecimalDtype(ctx)).copy().dtype\r\nOut[12]: DecimalDtype(context=Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999, capitals=1, clamp=0, flags=[], traps=[InvalidOperation, DivisionByZero, Overflow]))\r\n```\r\n\r\nPassing throughself.dtype` here should fix it I think:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/6c0f95225426a3e06f30a5b279bf9c7a650dce57/pandas/tests/extension/decimal/array.py#L149-L150",
        "createdAt" : "2021-03-05T16:27:11Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "dc04d8b2-4e07-407b-a3fd-68d556190dff",
        "parentId" : "839f33ae-e26a-4e36-9bb3-b4fbe10cad08",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Passing throughself.dtype` here should fix it I think:\r\n\r\ntried this and no dice",
        "createdAt" : "2021-03-08T22:03:15Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "20eff6d8-3b42-4c92-88f8-f20d2714f2ed",
        "parentId" : "839f33ae-e26a-4e36-9bb3-b4fbe10cad08",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It's apparently the `context` that needs to be specified, and not the ``dtype``(something that should maybe be fixed though (separately)):\r\n\r\n```diff\r\n     def copy(self):\r\n-        return type(self)(self._data.copy())\r\n+        return type(self)(self._data.copy(), context=self.dtype.context)\r\n```",
        "createdAt" : "2021-03-12T15:09:30Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "98b6dff1f6a51f1a621b4d99e75dd4aaf32e6d1b",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +268,272 @@            True,\n            marks=pytest.mark.xfail(\n                reason=\"pd.concat call inside NDFrame.astype reverts the dtype\"\n            ),\n        ),"
  },
  {
    "id" : "791c3932-1088-40a7-8e3a-03711919f758",
    "prId" : 39381,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39381#pullrequestreview-575513186",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce907bc5-b01a-4a88-8c6c-2f137f1c3a74",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should we be handling this error *inside* the EA e.g. isn't this a reason that DecimalArray should define values_for_argsort?",
        "createdAt" : "2021-01-25T14:33:52Z",
        "updatedAt" : "2021-01-25T14:33:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f58bcf26-5ef5-4d03-ac63-9febaf9971e5",
        "parentId" : "ce907bc5-b01a-4a88-8c6c-2f137f1c3a74",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "until we have a general ExtensionIndex, values_for_argsort wont help",
        "createdAt" : "2021-01-25T15:10:42Z",
        "updatedAt" : "2021-01-25T15:10:42Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "6ac080b9-8dfa-40b5-b3ee-c82e02c1ba82",
        "parentId" : "ce907bc5-b01a-4a88-8c6c-2f137f1c3a74",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh because this is the index of value counts itself.",
        "createdAt" : "2021-01-25T15:30:18Z",
        "updatedAt" : "2021-01-25T15:30:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d9396fd973ac3e411c9a8d1bf1cb1cdab7b37bd",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +184,188 @@\n        with decimal.localcontext() as ctx:\n            # avoid raising when comparing Decimal(\"NAN\") < Decimal(2)\n            ctx.traps[decimal.InvalidOperation] = False\n"
  }
]