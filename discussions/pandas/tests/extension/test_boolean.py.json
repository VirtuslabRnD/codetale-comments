[
  {
    "id" : "86175b8e-5e04-4462-9112-fba6fb422045",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322298463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a139200-8f5a-40c1-8276-7c602298b013",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this right?",
        "createdAt" : "2019-11-25T13:56:38Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "84c2e791-d8d9-441d-9380-8b7febff0e46",
        "parentId" : "3a139200-8f5a-40c1-8276-7c602298b013",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It's what numpy does, eg:\r\n\r\n```\r\nIn [17]: np.array([True, False]) ** 2                                                                                                                                                                              \r\nOut[17]: array([1, 0], dtype=int8)\r\n```\r\n\r\nSo for those ops, I just followed numpy's behaviour with boolean arrays.",
        "createdAt" : "2019-11-25T14:29:49Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +130,134 @@            ):\n                # combine keeps boolean type\n                expected = expected.astype(\"Int8\")\n            elif op_name in (\"__truediv__\", \"__rtruediv__\"):\n                # combine with bools does not generate the correct result"
  },
  {
    "id" : "442325ae-0b15-4f20-a08e-31489f360e50",
    "prId" : 29555,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29555#pullrequestreview-322298463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dda31c48-dd1b-46e3-8ba0-48b22165f87a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do you need these overrides here? (you are already doing it above)",
        "createdAt" : "2019-11-25T13:57:50Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6876ea58-a5f8-446b-9445-7a194b98379c",
        "parentId" : "dda31c48-dd1b-46e3-8ba0-48b22165f87a",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, it's to override that there is no exception being raised (will add a comment about that).\r\n\r\n(above is for the arithmetic ones)",
        "createdAt" : "2019-11-25T14:30:43Z",
        "updatedAt" : "2019-11-25T14:33:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb3ca2430614982bcf097039f6feb17d70a6894",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +154,158 @@\nclass TestComparisonOps(base.BaseComparisonOpsTests):\n    def check_opname(self, s, op_name, other, exc=None):\n        # overwriting to indicate ops don't raise an error\n        super().check_opname(s, op_name, other, exc=None)"
  }
]