[
  {
    "id" : "ffee3004-b038-4974-9e0e-aa0f01001381",
    "prId" : 20582,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20582#pullrequestreview-108615151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df6e940a-66a3-4447-a919-75b2d55597e1",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@TomAugspurger I didn't find any existing tests for `take`, so not sure the indexing tests is the best place (maybe rather the `BaseMethodsTests`). \r\nAnd, I could also add tests for the actual use cases where you get this (eg `reindex` on an empty series)",
        "createdAt" : "2018-04-02T12:52:21Z",
        "updatedAt" : "2018-04-16T11:03:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "75a8d6ab-077a-407c-9677-0f401e7b6a4b",
        "parentId" : "df6e940a-66a3-4447-a919-75b2d55597e1",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This seems like the right place for testing a behavior specific to take.",
        "createdAt" : "2018-04-02T13:30:22Z",
        "updatedAt" : "2018-04-16T11:03:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5d357f66dadeddadd375fd1f3f07fb0fc77f354",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +139,143 @@\n        with tm.assert_raises_regex(IndexError, \"cannot do a non-empty take\"):\n            empty.take([0, 1])\n\n    @pytest.mark.xfail(reason=\"Series.take with extension array buggy for -1\")"
  },
  {
    "id" : "a331123a-d45a-49e0-9add-552200c434c1",
    "prId" : 20814,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20814#pullrequestreview-115696266",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "257fe0d3-c323-46ed-843d-bd88078d86fc",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The test above (can't comment on the exact line), should actually fail now, as it is still testing the old behaviour (-1 giving NaN). So need to edit the test to check for `data[len(data)-1]` instead of `nvalue`",
        "createdAt" : "2018-04-26T15:33:08Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d88e0811-9ed4-4afd-aa00-7c1c30df6874",
        "parentId" : "257fe0d3-c323-46ed-843d-bd88078d86fc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This was missing an `assert na_cmp` (just had `na_cmp(a, b)`, which was False but not asserted.",
        "createdAt" : "2018-04-26T18:27:34Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec0cecd292947aa4d8416991e9f8920a4cd9a831",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +136,140 @@        with tm.assert_raises_regex(IndexError, \"out of bounds\"):\n            data.take([len(data) + 1])\n\n    def test_take_empty(self, data, na_value, na_cmp):\n        empty = data[:0]"
  },
  {
    "id" : "2ca5aa0b-abe9-483a-8f3c-b21abbaa4641",
    "prId" : 20885,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20885#pullrequestreview-117827990",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1abff6e2-5cda-40a7-95cc-5ba7d0349b34",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some cases with an out-of-range integer",
        "createdAt" : "2018-05-05T14:36:08Z",
        "updatedAt" : "2018-05-06T00:04:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d25c6eaf-847a-45cf-b60e-ad348ad29dc5",
        "parentId" : "1abff6e2-5cda-40a7-95cc-5ba7d0349b34",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "done",
        "createdAt" : "2018-05-06T00:06:19Z",
        "updatedAt" : "2018-05-06T00:06:20Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "65087a6de08b35ccc696051f508275747deabaf6",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +140,144 @@        expected = s.iloc[[1, 2, 3]]\n        self.assert_series_equal(result, expected)\n\n        result = s.get('Z')\n        assert result is None"
  },
  {
    "id" : "35a37a08-be99-474f-ac7b-631c4db55bc4",
    "prId" : 30318,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30318#pullrequestreview-333935866",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a3696dc-1cdb-4fc1-89f4-d6ae9b8aa03e",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I wanted to add a more exact test for the type of the object (`assert isinstance(result, data.dtype.type)`), but this actually doesn't hold for all our dtypes (eg for categorical dtype)",
        "createdAt" : "2019-12-18T08:27:35Z",
        "updatedAt" : "2019-12-18T08:27:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8c857a44-699b-447f-9bb3-3349472f7a5a",
        "parentId" : "5a3696dc-1cdb-4fc1-89f4-d6ae9b8aa03e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think we had an issue about that somewhere. But this seems sufficient.",
        "createdAt" : "2019-12-18T12:30:58Z",
        "updatedAt" : "2019-12-18T12:30:58Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "53954df08472c45ecc61f50c5f4da3d8f5356ddc",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +272,276 @@        s = pd.Series(data)\n        result = s[:1].item()\n        assert result == data[0]"
  },
  {
    "id" : "3d59a864-3451-45ef-a1fc-1c101fb4921a",
    "prId" : 31203,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31203#pullrequestreview-346714128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4276ae27-5946-4ffc-b8e7-eaaedd4fb9ba",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this sort of changes the interface.  do we want authors to handle this on their own?",
        "createdAt" : "2020-01-22T16:04:13Z",
        "updatedAt" : "2020-01-22T16:04:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a1660379-dc34-412a-a354-185d1ca946e0",
        "parentId" : "4276ae27-5946-4ffc-b8e7-eaaedd4fb9ba",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "How does it change the interface?\r\n\r\nWe are reducing coverage of `_from_sequence` inferring the dtype from an untyped list. We could restore that if desired (and probably skip for problematic arrays).",
        "createdAt" : "2020-01-22T16:11:58Z",
        "updatedAt" : "2020-01-22T16:11:58Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "d1dd9816-66cc-4e56-9980-9d03e867d1e0",
        "parentId" : "4276ae27-5946-4ffc-b8e7-eaaedd4fb9ba",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> We are reducing coverage of _from_sequence inferring the dtype from an untyped list.\r\n\r\nYah, i guess that is a better description than \"changes the interface\"",
        "createdAt" : "2020-01-22T16:14:26Z",
        "updatedAt" : "2020-01-22T16:14:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "78514cf40bd8c77d6cec7ef2a6938b3ed0099584",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +248,252 @@        array = data_missing._from_sequence(\n            [na, fill_value, na], dtype=data_missing.dtype\n        )\n        result = array.take([-1, 1], fill_value=fill_value, allow_fill=True)\n        expected = array.take([1, 1])"
  },
  {
    "id" : "9c4b22e0-87f5-4687-9f48-c7fbd58d77cc",
    "prId" : 31591,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31591#pullrequestreview-356381074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b236214-b970-45d5-ba5b-a6baeae55d5c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you take here something with True's as well? (now it will give an empty result)",
        "createdAt" : "2020-02-10T14:51:37Z",
        "updatedAt" : "2020-02-21T19:44:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9553828b-86a9-4f85-a78b-2d876ba23291",
        "parentId" : "9b236214-b970-45d5-ba5b-a6baeae55d5c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "it would be good to run the test also for both a boolean array and a list as mask (to ensure the list works)",
        "createdAt" : "2020-02-10T14:52:24Z",
        "updatedAt" : "2020-02-21T19:44:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "58774b35-e3ff-4922-8007-96880e63f030",
        "parentId" : "9b236214-b970-45d5-ba5b-a6baeae55d5c",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Looks like the list input may not be working properly, will work on fixing that",
        "createdAt" : "2020-02-10T16:06:51Z",
        "updatedAt" : "2020-02-21T19:44:27Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "35a9cf4c-5406-459a-be67-842618bdf65e",
        "parentId" : "9b236214-b970-45d5-ba5b-a6baeae55d5c",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "@jorisvandenbossche So I think the issue with list masks containing bools and pd.NA was that `is_bool_indexer` from `pandas/core/common.py` didn't consider these to be valid boolean indexers because it was trying to cast to a bool numpy array: https://github.com/pandas-dev/pandas/blob/master/pandas/core/common.py#L142\r\n\r\nMade an update there to recognize pd.NA and also updated the test; hopefully CI will still pass. The assumption that boolean indexers are ones that can be cast as _numpy_ boolean arrays seems to happen in a lot of places (e.g., https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/base.py#L4147) so I could see this causing problems.",
        "createdAt" : "2020-02-10T21:12:28Z",
        "updatedAt" : "2020-02-21T19:44:27Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "bef61831-4974-4b1a-81f9-3248c6573e54",
        "parentId" : "9b236214-b970-45d5-ba5b-a6baeae55d5c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Hmm, the \"old\" code of still accepting object dtype makes this a bit more complex indeed. Maybe instead of casting to a numpy array, we could use `pd.array`, so it will handle the case with boolean values better?",
        "createdAt" : "2020-02-10T22:21:12Z",
        "updatedAt" : "2020-02-21T19:44:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "5a409033-8217-4b12-931f-3a4882f4f8d5",
        "parentId" : "9b236214-b970-45d5-ba5b-a6baeae55d5c",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "I think that should theoretically work in combination with the right change to `is_bool_indexer`",
        "createdAt" : "2020-02-11T01:43:15Z",
        "updatedAt" : "2020-02-21T19:44:27Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "080d1d2129f101460af12b23d6f2b400e1a66e61",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +161,165 @@    def test_getitem_boolean_na_treated_as_false(self, data):\n        # https://github.com/pandas-dev/pandas/issues/31503\n        mask = pd.array(np.zeros(data.shape, dtype=\"bool\"), dtype=\"boolean\")\n        mask[:2] = pd.NA\n        mask[2:4] = True"
  },
  {
    "id" : "ee14670e-5bd0-4f73-831e-1ef8a9710225",
    "prId" : 31591,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31591#pullrequestreview-358190442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54b9ea40-44e9-418e-96a1-022468fd87b0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add this issue number (and on any changed tests)",
        "createdAt" : "2020-02-13T12:53:12Z",
        "updatedAt" : "2020-02-21T19:44:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "080d1d2129f101460af12b23d6f2b400e1a66e61",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +163,167 @@        mask = pd.array(np.zeros(data.shape, dtype=\"bool\"), dtype=\"boolean\")\n        mask[:2] = pd.NA\n        mask[2:4] = True\n\n        result = data[mask]"
  },
  {
    "id" : "8080fe59-78b8-46d2-a993-643d9de90209",
    "prId" : 32959,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32959#pullrequestreview-391613532",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34eea8b0-073c-49e6-8399-c8231828f4cf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some ```df.iloc[:, -1:]``` as well",
        "createdAt" : "2020-04-10T16:15:31Z",
        "updatedAt" : "2020-04-10T17:44:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6e7774cf-5dc0-4685-b8de-582d574ce083",
        "parentId" : "34eea8b0-073c-49e6-8399-c8231828f4cf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "updated+green",
        "createdAt" : "2020-04-10T19:13:48Z",
        "updatedAt" : "2020-04-10T19:13:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "02f0be8019368cfe2576a0a71fcb46cbee0be529",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +57,61 @@        self.assert_frame_equal(result, df)\n\n        result = df.iloc[:, :2]\n        self.assert_frame_equal(result, df)\n"
  }
]