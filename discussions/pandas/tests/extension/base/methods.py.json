[
  {
    "id" : "f575fd2f-7180-4c59-9a70-c7af117fe75c",
    "prId" : 21183,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21183#pullrequestreview-126415950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb8a3b76-eb5a-49bf-8524-4363a60b2d42",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you give a 1-liner explaining what this is testing. the name of the test is uninformative.",
        "createdAt" : "2018-06-05T21:25:14Z",
        "updatedAt" : "2018-06-07T15:45:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9cff0e07-7fa1-4d7f-9908-0b485085dacb",
        "parentId" : "fb8a3b76-eb5a-49bf-8524-4363a60b2d42",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "done",
        "createdAt" : "2018-06-06T14:59:49Z",
        "updatedAt" : "2018-06-07T15:45:34Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ca28b2c672a7a0401474ba26e6719d63fb55de1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +105,109 @@        self.assert_extension_array_equal(u1, u2)\n\n    def test_combine_le(self, data_repeated):\n        # GH 20825\n        # Test that combine works when doing a <= (le) comparison"
  },
  {
    "id" : "b0902db3-9e9b-4390-bcce-f982202e00bf",
    "prId" : 22026,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22026#pullrequestreview-152486183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46d45385-8dce-431f-87a3-6fc9a524638e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what surfaces the error here?",
        "createdAt" : "2018-09-05T11:34:20Z",
        "updatedAt" : "2018-09-05T12:46:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d7e761ec-329a-43b7-a39a-4669c103421d",
        "parentId" : "46d45385-8dce-431f-87a3-6fc9a524638e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "When testing with Int8 dtype, you get an overflow warning for summing the scalars (the `a + b` below)",
        "createdAt" : "2018-09-05T12:45:00Z",
        "updatedAt" : "2018-09-05T12:46:40Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d37f30eb-54fa-41fa-957c-eaa058d3bbc5",
        "parentId" : "46d45385-8dce-431f-87a3-6fc9a524638e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm ok, maybe we should actually move this to the integer tests rather than here then?",
        "createdAt" : "2018-09-05T12:46:15Z",
        "updatedAt" : "2018-09-05T12:46:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2b0a9721-345d-4a25-b01a-e7d8dc189719",
        "parentId" : "46d45385-8dce-431f-87a3-6fc9a524638e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think it is fine to ignore it here (it's numpy behaviour to warn, not something we need to test), but it's true that we might want to add explicit test for the behaviour we want on the Series level in the integer tests. \r\n\r\nThe behaviour currently to silently ignore it in the case of series is consistent with a Series with numpy dtype int8:\r\n\r\n```\r\nIn [38]: s = pd.Series([50, 100], dtype='Int8')\r\n\r\nIn [39]: s[0] + s[1]\r\n/home/joris/miniconda3/envs/dev/bin/ipython:1: RuntimeWarning: overflow encountered in byte_scalars\r\n  #!/home/joris/miniconda3/envs/dev/bin/python\r\nOut[39]: -106\r\n\r\nIn [40]: s + s[::-1].reset_index(drop=True)\r\nOut[40]: \r\n0    -106\r\n1    -106\r\ndtype: Int8\r\n```\r\n\r\n",
        "createdAt" : "2018-09-05T12:51:43Z",
        "updatedAt" : "2018-09-05T12:51:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8868559b-8f75-4982-b6bd-194f30100373",
        "parentId" : "46d45385-8dce-431f-87a3-6fc9a524638e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i understand though this may be indicative of an error in other extension types. ok for now",
        "createdAt" : "2018-09-05T13:11:28Z",
        "updatedAt" : "2018-09-05T13:11:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "db2836c2be2bf7a8cd352449ffc02e5664b4e721",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +128,132 @@        s2 = pd.Series(orig_data2)\n        result = s1.combine(s2, lambda x1, x2: x1 + x2)\n        with np.errstate(over='ignore'):\n            expected = pd.Series(\n                orig_data1._from_sequence([a + b for (a, b) in"
  },
  {
    "id" : "3352b572-acb2-45e1-83ca-130d98209ad1",
    "prId" : 24149,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24149#pullrequestreview-182862671",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa8c82bb-c428-46af-9ce0-b7d0657388c0",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is a test for the original bug from the issue. Unfortunately, it doesn't run yet since `Series.where` loses the extension dtype. #24147 is fixing that.",
        "createdAt" : "2018-12-07T20:33:48Z",
        "updatedAt" : "2018-12-07T20:34:07Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "3be6e0dd9e848c90306e82f7333947efb4aa472f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +165,169 @@        self.assert_series_equal(result, expected)\n\n    @pytest.mark.xfail(reason=\"GH-24147\", strict=True)\n    def test_combine_first(self, data):\n        # https://github.com/pandas-dev/pandas/issues/24147"
  },
  {
    "id" : "a7786c95-62bc-4ac6-957c-db8fdd48d40a",
    "prId" : 26854,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26854#pullrequestreview-250018221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "537b388c-3718-4157-9e30-8beeb18ede5f",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "add the issue number",
        "createdAt" : "2019-06-14T17:00:17Z",
        "updatedAt" : "2019-06-23T03:02:49Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc99129471279445b8e82fc54c636d358f9cda6b",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +50,54 @@        ('first', np.array([1, 2, 0], dtype='int64'))\n    ])\n    def test_nargsort(self, data_missing_for_sorting, na_position, expected):\n        # GH 25439\n        result = nargsort(data_missing_for_sorting, na_position=na_position)"
  },
  {
    "id" : "0a358b4f-545d-432a-9c34-6f609b35f1b6",
    "prId" : 33674,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33674#pullrequestreview-400543323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ddedefb-b752-436d-971a-e5bd918ce413",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make this into a new test (and leave the original unchanged)",
        "createdAt" : "2020-04-26T20:01:03Z",
        "updatedAt" : "2020-04-30T23:45:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d54a0583f5cec59c562285ddd305fa7776851a1",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +34,38 @@        values = np.array(data[~data.isna()])\n\n        result = (\n            pd.Series(data, dtype=data.dtype).value_counts(normalize=True).sort_index()\n        )"
  },
  {
    "id" : "c46d3d9d-de26-4903-ad5e-683fd97b0b75",
    "prId" : 33674,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33674#pullrequestreview-403489577",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8142e298-38cc-49da-a082-21d1476adf0e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the issue number here as a comment",
        "createdAt" : "2020-04-30T12:53:52Z",
        "updatedAt" : "2020-04-30T23:45:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d54a0583f5cec59c562285ddd305fa7776851a1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +31,35 @@    def test_value_counts_with_normalize(self, data):\n        # GH 33172\n        data = data[:10].unique()\n        values = np.array(data[~data.isna()])\n"
  },
  {
    "id" : "08b8aebe-3eff-46fe-94cb-adf30ab38e55",
    "prId" : 37310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37310#pullrequestreview-520746293",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d47ea7dd-c2d1-4c59-ab24-b62a0a0366f9",
        "parentId" : null,
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "Some of our parametrizations in `data_for_sorting` contain duplicates and some don't. Since they are all structured the same way, we can detect different expected sort orders by checking the number of unique values. If it looks ugly to you, we could split `data_for_sorting` for this test.",
        "createdAt" : "2020-10-23T13:05:32Z",
        "updatedAt" : "2020-10-31T04:50:04Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      },
      {
        "id" : "4474a71c-0297-420a-b626-b85bc7bab6ba",
        "parentId" : "d47ea7dd-c2d1-4c59-ab24-b62a0a0366f9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok this is fine",
        "createdAt" : "2020-10-30T14:54:05Z",
        "updatedAt" : "2020-10-31T04:50:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d09da99cfa410193989195d29fd3833efa8cb9a1",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +130,134 @@                expected = ser.iloc[[0, 1, 2]]\n            else:\n                expected = ser.iloc[[1, 0, 2]]\n\n        self.assert_series_equal(result, expected)"
  }
]