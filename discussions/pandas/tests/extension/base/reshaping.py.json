[
  {
    "id" : "184f2d3c-bd7a-478d-9f24-588dbf57a935",
    "prId" : 20745,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20745#pullrequestreview-114204020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75155d52-82bd-483e-9e30-4057b4159150",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you prob should test with with the ``how=join_type`` fixture.",
        "createdAt" : "2018-04-21T16:43:30Z",
        "updatedAt" : "2018-04-21T16:44:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7761fe31-f3de-4101-b16d-2d70a55036aa",
        "parentId" : "75155d52-82bd-483e-9e30-4057b4159150",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "They both need a different expected result, I don't think it is really worth it here in this case? \r\n(the test is also not meant to be a full cover of the merge function (for that we already have other tests), just to test that basic use cases of concatting works with extension arrays)\r\n",
        "createdAt" : "2018-04-21T19:16:42Z",
        "updatedAt" : "2018-04-21T19:16:42Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b316f883-227f-4857-a0a2-32a50391af05",
        "parentId" : "75155d52-82bd-483e-9e30-4057b4159150",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, its worth doing way more tests than a single usecase. but ok here I guess.",
        "createdAt" : "2018-04-22T14:53:30Z",
        "updatedAt" : "2018-04-22T14:53:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cf8cfeb5b1de11cacd5ce766373d5e337f73b46",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +97,101 @@        assert df.dtypes['A'] == data.dtype\n\n    def test_merge(self, data, na_value):\n        # GH-20743\n        df1 = pd.DataFrame({'ext': data[:3], 'int1': [1, 2, 3],"
  },
  {
    "id" : "7d23c5fe-94e2-4b98-9f52-dfd9fee424f5",
    "prId" : 20840,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20840#pullrequestreview-116134395",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e981842d-e82f-46c8-b974-4aea14b33f44",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this just for axis=1? I would make this a separate test.",
        "createdAt" : "2018-04-27T10:35:35Z",
        "updatedAt" : "2018-04-28T12:19:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5c28563d-9ff4-4392-a0ee-a29a4c70920a",
        "parentId" : "e981842d-e82f-46c8-b974-4aea14b33f44",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The bug is just with `axis=0`, the default, which this is testing.\r\n\r\nFor `axis=1` there's not any up-casting required.\r\n\r\nThough I don't see any tests for `concat(..., axis='columns')` with the extension array. Can you add some Joris? concat EA and EA, mix of EA and non-EA, aligned and no aligned. Or should I?",
        "createdAt" : "2018-04-28T11:01:29Z",
        "updatedAt" : "2018-04-28T12:19:17Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "e3fd7ebc-cce8-4956-86eb-aa3844e9f10a",
        "parentId" : "e981842d-e82f-46c8-b974-4aea14b33f44",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Hmm, thought we already had some, but indeed, apparently not. Will add some.",
        "createdAt" : "2018-04-28T12:07:53Z",
        "updatedAt" : "2018-04-28T12:19:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "964a5ffecf7e5df68ea951896ef809ffcd5b22c7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +65,69 @@        self.assert_frame_equal(result, expected)\n\n        result = pd.concat([df1['A'], df2['A']])\n        expected = pd.concat([df1['A'].astype('object'),\n                              df2['A'].astype('object')])"
  }
]