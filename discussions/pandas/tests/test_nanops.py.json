[
  {
    "id" : "5c6d410d-48d3-481f-b136-0d195b7afa1a",
    "prId" : 7440,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b363a1b7-0b6b-4083-b50d-fb9212e1cb5a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can just pass `check_less_precise=True` if its a complex number (or explicty astype before the comparison)\n",
        "createdAt" : "2014-06-12T14:29:08Z",
        "updatedAt" : "2014-06-12T14:54:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "24a98b66-3949-465a-961c-8041ca57e619",
        "parentId" : "b363a1b7-0b6b-4083-b50d-fb9212e1cb5a",
        "authorId" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "body" : "I tried that, it doesn't fix the problem.  It still raises an AssertionError even if they only differ in their 16th digit.\n",
        "createdAt" : "2014-06-12T14:32:22Z",
        "updatedAt" : "2014-06-12T14:54:12Z",
        "lastEditedBy" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "tags" : [
        ]
      },
      {
        "id" : "2307da86-93a6-4e5e-affb-cd9fe03c9373",
        "parentId" : "b363a1b7-0b6b-4083-b50d-fb9212e1cb5a",
        "authorId" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "body" : "``` Python\n>>> a=np.array([1+.1111111111111111*1j])\n>>> b=np.array([1+.1111111111111112*1j])\n>>> tm.assert_almost_equal(a, b, check_less_precise=True)\nAssertionError: (1+0.1111111111111111j) != (1+0.1111111111111112j)\n```\n",
        "createdAt" : "2014-06-12T14:37:03Z",
        "updatedAt" : "2014-06-12T14:54:12Z",
        "lastEditedBy" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "tags" : [
        ]
      },
      {
        "id" : "5314fd46-7f57-44bd-a57a-6ddd8f63b913",
        "parentId" : "b363a1b7-0b6b-4083-b50d-fb9212e1cb5a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "compare the real and imag pars separately and then it works correctly. side issue is to patch `tm.assert_almost_equal` to deal with complex numbers by this method\n\n```\nIn [1]: a=np.array([1+.1111111111111111*1j])\n\nIn [2]: b=np.array([1+.1111111111111112*1j])\n\nIn [4]: tm.assert_almost_equal(a.real, b.real)\nOut[4]: True\n\nIn [5]: tm.assert_almost_equal(a.imag, b.imag)\nOut[5]: True\n```\n",
        "createdAt" : "2014-06-12T14:41:44Z",
        "updatedAt" : "2014-06-12T14:54:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "99b14c55-aaee-4fe7-8546-9de1fdf2da0f",
        "parentId" : "b363a1b7-0b6b-4083-b50d-fb9212e1cb5a",
        "authorId" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "body" : "Done.\n",
        "createdAt" : "2014-06-12T14:58:10Z",
        "updatedAt" : "2014-06-12T14:58:10Z",
        "lastEditedBy" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "tags" : [
        ]
      }
    ],
    "commit" : "562b86ea402fcb75912818e8a3840f25704e39d5",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +121,125 @@        if axis != 0 and hasattr(targ, 'shape') and targ.ndim:\n            res = np.split(res, [targ.shape[0]], axis=0)[0]\n        try:\n            tm.assert_almost_equal(targ, res)\n        except:"
  },
  {
    "id" : "e0731863-6e95-4973-aa26-55054cf8a4bf",
    "prId" : 10172,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e13c959-de9d-45b0-aa42-2926d828ae1c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what does numpy do in < 1.9.0?\n",
        "createdAt" : "2015-05-29T23:37:16Z",
        "updatedAt" : "2015-05-29T23:37:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a771f0be-35ed-49f5-a175-1a8970a2b67d",
        "parentId" : "2e13c959-de9d-45b0-aa42-2926d828ae1c",
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "for `numpy` < 1.9.0: (wrong result)\n\n```\nIn [1]: import numpy as np\n\nIn [2]: np.__version__\nOut[2]: '1.8.2'\n\nIn [3]: a = 20150515061816532\n\nIn [4]: arr = np.array(np.ones(500) * a, dtype=np.int64)\n\nIn [5]: arr.mean()\nOut[5]: 20150515061816464.0\n```\n\n`numpy` >= 1.9.0: (correct result)\n\n```\nIn [1]: import numpy as np\n\nIn [2]: np.__version__\nOut[2]: '1.9.0'\n\nIn [3]: a = 20150515061816532\n\nIn [4]: arr = np.array(np.ones(500) * a, dtype=np.int64)\n\nIn [5]: arr.mean()\nOut[5]: 20150515061816532.0\n```\n",
        "createdAt" : "2015-05-30T01:54:32Z",
        "updatedAt" : "2015-05-30T02:11:25Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      },
      {
        "id" : "5535c98c-f0d2-4b9c-8d5f-cecbc2252992",
        "parentId" : "2e13c959-de9d-45b0-aa42-2926d828ae1c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh, ok\n",
        "createdAt" : "2015-05-30T02:13:14Z",
        "updatedAt" : "2015-05-30T02:13:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3896e5eb2f554cb7dcae6ba785c187d9f6ae3fd3",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +330,334 @@        from pandas import Series\n\n        # numpy < 1.9.0 is not computing this correctly\n        from distutils.version import LooseVersion\n        if LooseVersion(np.__version__) >= '1.9.0':"
  },
  {
    "id" : "27e5b58e-1a9a-42a6-9d60-a58778fc6f1e",
    "prId" : 28433,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28433#pullrequestreview-288240995",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "170ab80d-aab4-4c7b-821f-71e8f1a38bcc",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is a string an allowable value here? Not familiar but most of the other exceptions seem to require numeric",
        "createdAt" : "2019-09-13T20:35:35Z",
        "updatedAt" : "2019-09-13T20:35:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "602e5c94-87dc-4f29-abeb-1e406d7baf2f",
        "parentId" : "170ab80d-aab4-4c7b-821f-71e8f1a38bcc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "\"1\" or \"2.0\" or \"3+5j\" are all acceptable",
        "createdAt" : "2019-09-13T20:38:52Z",
        "updatedAt" : "2019-09-13T20:38:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8dcc3305b5af346f21c9aec60d41c896f971ee82",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +914,918 @@\n        # with the wrong type, python raises TypeError for us\n        msg = \"argument must be a string or a number\"\n        with pytest.raises(TypeError, match=msg):\n            nanops._ensure_numeric({})"
  },
  {
    "id" : "2d3da628-0cc7-4121-bbb3-3f0f04bf8cec",
    "prId" : 28553,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28553#pullrequestreview-291724664",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13338b59-88ea-4168-91f7-ad01ffda0215",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Not here and no action required but maybe want to expand to cover unsigned and 8 bit versions. I've seen that in a few other PRs so should become a fixture if not already",
        "createdAt" : "2019-09-20T23:48:55Z",
        "updatedAt" : "2019-09-20T23:52:08Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f9d330d6-c72a-4fa5-b677-5246f7042e23",
        "parentId" : "13338b59-88ea-4168-91f7-ad01ffda0215",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Good idea",
        "createdAt" : "2019-09-21T00:02:04Z",
        "updatedAt" : "2019-09-21T00:02:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "83959301-a334-4066-a25d-5cc8a46f79bc",
        "parentId" : "13338b59-88ea-4168-91f7-ad01ffda0215",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we also have our fixtures for dtypes (not blocking this PR)",
        "createdAt" : "2019-09-23T12:00:14Z",
        "updatedAt" : "2019-09-23T12:01:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "73bb58fb63c0811bf79c69e8b3863d1cb38604fa",
    "line" : 216,
    "diffHunk" : "@@ -1,1 +314,318 @@        \"dtype\",\n        [\n            np.int16,\n            np.int32,\n            np.int64,"
  },
  {
    "id" : "1a89b55e-6e91-4136-ae94-c9cfbd39c65f",
    "prId" : 28553,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28553#pullrequestreview-291437955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09813b10-6aba-41a3-812c-34fa7bca3c98",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is there a good way to convert this to a skip if not available?",
        "createdAt" : "2019-09-20T23:49:36Z",
        "updatedAt" : "2019-09-20T23:52:08Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "501293c2-179e-4194-b7ae-14bf03539151",
        "parentId" : "09813b10-6aba-41a3-812c-34fa7bca3c98",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I guess we could make this:\r\n\r\n```\r\npytest.param(getattr(np, \"float128\", None), marks=pytest.skipif(not hasattr(np, \"float128\"))\r\n```\r\n\r\nTough call whether the explicit skip is worth the added verbosity",
        "createdAt" : "2019-09-21T00:04:20Z",
        "updatedAt" : "2019-09-21T00:04:21Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "73bb58fb63c0811bf79c69e8b3863d1cb38604fa",
    "line" : 221,
    "diffHunk" : "@@ -1,1 +319,323 @@            np.float32,\n            np.float64,\n            getattr(np, \"float128\", None),\n        ],\n    )"
  },
  {
    "id" : "42247ce7-a305-4448-8392-aaa789fe0b6b",
    "prId" : 28553,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28553#pullrequestreview-291724664",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6a950b1-d50a-4bf5-b91d-aaf07b8f7fc2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "likely can be parmaterize using our aggregation fixtures",
        "createdAt" : "2019-09-23T12:01:12Z",
        "updatedAt" : "2019-09-23T12:01:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "73bb58fb63c0811bf79c69e8b3863d1cb38604fa",
    "line" : 240,
    "diffHunk" : "@@ -1,1 +328,332 @@\n        s = Series(range(10), dtype=dtype)\n        group_a = [\"mean\", \"std\", \"var\", \"skew\", \"kurt\"]\n        group_b = [\"min\", \"max\"]\n        for method in group_a + group_b:"
  },
  {
    "id" : "d779fc7e-1c78-4049-b237-5c531d6f0d2b",
    "prId" : 32607,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32607#pullrequestreview-372446612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68de2c7c-47ad-449c-b8a7-4716319d345b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could be in pandas/conftest.py (can move later)",
        "createdAt" : "2020-03-11T02:53:36Z",
        "updatedAt" : "2020-03-11T02:54:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b93dc50b8635550ab40a80f050833a47a5b1884",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +20,24 @@\n\n@pytest.fixture(params=[True, False])\ndef skipna(request):\n    \"\"\""
  },
  {
    "id" : "c4e9e4c5-7b7d-4940-b8dc-727bcbb6c02c",
    "prId" : 37148,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37148#pullrequestreview-510866558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1673b97a-98f3-4074-94d9-9e5ee7c7d6bd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you try with tz aware as well for M8",
        "createdAt" : "2020-10-16T01:02:33Z",
        "updatedAt" : "2020-10-19T02:00:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ead025ac-0684-43aa-ab85-009801cca5a0",
        "parentId" : "1673b97a-98f3-4074-94d9-9e5ee7c7d6bd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "not here since the nanops func is ndarray-only, but i think in the DTA tests is viable",
        "createdAt" : "2020-10-16T01:13:20Z",
        "updatedAt" : "2020-10-19T02:00:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3c5665a1-4607-45c4-a856-7ccd884f7de0",
        "parentId" : "1673b97a-98f3-4074-94d9-9e5ee7c7d6bd",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "kk np",
        "createdAt" : "2020-10-16T01:17:02Z",
        "updatedAt" : "2020-10-19T02:00:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "66e58106-0476-403a-ad9f-54bfbc9018d6",
        "parentId" : "1673b97a-98f3-4074-94d9-9e5ee7c7d6bd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "getting the test for DTA will require some changes to the DTA method that id like to do in a separate PR",
        "createdAt" : "2020-10-17T02:23:34Z",
        "updatedAt" : "2020-10-19T02:00:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3987063c84173a510ebfca6a4568ddeac57640af",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1006,1010 @@            assert result == expected\n\n    @pytest.mark.parametrize(\"dtype\", [\"M8[ns]\", \"m8[ns]\"])\n    def test_nanmean_skipna_false(self, dtype):\n        arr = np.arange(12).astype(np.int64).view(dtype).reshape(4, 3)"
  },
  {
    "id" : "c3843580-a3c6-4dad-aa34-041eb9dec7c4",
    "prId" : 41102,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41102#pullrequestreview-642750531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5449127-f461-48b0-a507-58af0763af0e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we need this ? (same reason above)",
        "createdAt" : "2021-04-22T19:34:17Z",
        "updatedAt" : "2021-05-05T23:42:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a5fd65bf-4bd3-474f-9595-6e354670c3ec",
        "parentId" : "d5449127-f461-48b0-a507-58af0763af0e",
        "authorId" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "body" : "Similar response - think more for coverage than matching numpy. Since the nanop gets indirectly tested for all other any/all reductions, I think it could be removed",
        "createdAt" : "2021-04-22T22:44:38Z",
        "updatedAt" : "2021-05-05T23:42:31Z",
        "lastEditedBy" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1f532637682775293c918b792fed0438eeea416",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +271,275 @@        return func(value, **kwargs)\n\n    @pytest.mark.xfail(reason=\"GH12863: numpy result won't match for object type\")\n    @pytest.mark.parametrize(\n        \"nan_op,np_op\", [(nanops.nanany, np.any), (nanops.nanall, np.all)]"
  }
]