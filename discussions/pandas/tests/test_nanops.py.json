[
  {
    "id" : "5c6d410d-48d3-481f-b136-0d195b7afa1a",
    "prId" : 7440,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b363a1b7-0b6b-4083-b50d-fb9212e1cb5a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can just pass `check_less_precise=True` if its a complex number (or explicty astype before the comparison)\n",
        "createdAt" : "2014-06-12T14:29:08Z",
        "updatedAt" : "2014-06-12T14:54:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "24a98b66-3949-465a-961c-8041ca57e619",
        "parentId" : "b363a1b7-0b6b-4083-b50d-fb9212e1cb5a",
        "authorId" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "body" : "I tried that, it doesn't fix the problem.  It still raises an AssertionError even if they only differ in their 16th digit.\n",
        "createdAt" : "2014-06-12T14:32:22Z",
        "updatedAt" : "2014-06-12T14:54:12Z",
        "lastEditedBy" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "tags" : [
        ]
      },
      {
        "id" : "2307da86-93a6-4e5e-affb-cd9fe03c9373",
        "parentId" : "b363a1b7-0b6b-4083-b50d-fb9212e1cb5a",
        "authorId" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "body" : "``` Python\n>>> a=np.array([1+.1111111111111111*1j])\n>>> b=np.array([1+.1111111111111112*1j])\n>>> tm.assert_almost_equal(a, b, check_less_precise=True)\nAssertionError: (1+0.1111111111111111j) != (1+0.1111111111111112j)\n```\n",
        "createdAt" : "2014-06-12T14:37:03Z",
        "updatedAt" : "2014-06-12T14:54:12Z",
        "lastEditedBy" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "tags" : [
        ]
      },
      {
        "id" : "5314fd46-7f57-44bd-a57a-6ddd8f63b913",
        "parentId" : "b363a1b7-0b6b-4083-b50d-fb9212e1cb5a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "compare the real and imag pars separately and then it works correctly. side issue is to patch `tm.assert_almost_equal` to deal with complex numbers by this method\n\n```\nIn [1]: a=np.array([1+.1111111111111111*1j])\n\nIn [2]: b=np.array([1+.1111111111111112*1j])\n\nIn [4]: tm.assert_almost_equal(a.real, b.real)\nOut[4]: True\n\nIn [5]: tm.assert_almost_equal(a.imag, b.imag)\nOut[5]: True\n```\n",
        "createdAt" : "2014-06-12T14:41:44Z",
        "updatedAt" : "2014-06-12T14:54:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "99b14c55-aaee-4fe7-8546-9de1fdf2da0f",
        "parentId" : "b363a1b7-0b6b-4083-b50d-fb9212e1cb5a",
        "authorId" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "body" : "Done.\n",
        "createdAt" : "2014-06-12T14:58:10Z",
        "updatedAt" : "2014-06-12T14:58:10Z",
        "lastEditedBy" : "7541636a-d24d-4ee9-9027-3d80fc972781",
        "tags" : [
        ]
      }
    ],
    "commit" : "562b86ea402fcb75912818e8a3840f25704e39d5",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +121,125 @@        if axis != 0 and hasattr(targ, 'shape') and targ.ndim:\n            res = np.split(res, [targ.shape[0]], axis=0)[0]\n        try:\n            tm.assert_almost_equal(targ, res)\n        except:"
  },
  {
    "id" : "e0731863-6e95-4973-aa26-55054cf8a4bf",
    "prId" : 10172,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e13c959-de9d-45b0-aa42-2926d828ae1c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what does numpy do in < 1.9.0?\n",
        "createdAt" : "2015-05-29T23:37:16Z",
        "updatedAt" : "2015-05-29T23:37:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a771f0be-35ed-49f5-a175-1a8970a2b67d",
        "parentId" : "2e13c959-de9d-45b0-aa42-2926d828ae1c",
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "for `numpy` < 1.9.0: (wrong result)\n\n```\nIn [1]: import numpy as np\n\nIn [2]: np.__version__\nOut[2]: '1.8.2'\n\nIn [3]: a = 20150515061816532\n\nIn [4]: arr = np.array(np.ones(500) * a, dtype=np.int64)\n\nIn [5]: arr.mean()\nOut[5]: 20150515061816464.0\n```\n\n`numpy` >= 1.9.0: (correct result)\n\n```\nIn [1]: import numpy as np\n\nIn [2]: np.__version__\nOut[2]: '1.9.0'\n\nIn [3]: a = 20150515061816532\n\nIn [4]: arr = np.array(np.ones(500) * a, dtype=np.int64)\n\nIn [5]: arr.mean()\nOut[5]: 20150515061816532.0\n```\n",
        "createdAt" : "2015-05-30T01:54:32Z",
        "updatedAt" : "2015-05-30T02:11:25Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      },
      {
        "id" : "5535c98c-f0d2-4b9c-8d5f-cecbc2252992",
        "parentId" : "2e13c959-de9d-45b0-aa42-2926d828ae1c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh, ok\n",
        "createdAt" : "2015-05-30T02:13:14Z",
        "updatedAt" : "2015-05-30T02:13:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3896e5eb2f554cb7dcae6ba785c187d9f6ae3fd3",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +330,334 @@        from pandas import Series\n\n        # numpy < 1.9.0 is not computing this correctly\n        from distutils.version import LooseVersion\n        if LooseVersion(np.__version__) >= '1.9.0':"
  }
]