[
  {
    "id" : "22a0315b-6bcb-4635-a81c-eaaef29baa60",
    "prId" : 6734,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c15d18f1-4579-49dc-8067-dd35998f1753",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is fine, though `array_equavalent` will match this (as it uses pd.isnull() under the hood which handles NaT properly). even `np.array_equal` works here. The actual `pd.NaT` values are translated to `pd.tslib.iNaT` which is actually an integer; this type of testing is even easier that floats FYI.\n",
        "createdAt" : "2014-04-06T14:18:04Z",
        "updatedAt" : "2014-04-06T14:21:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "91befdd7c8d1b2ba3450fd0b934ab8d0f333ba04",
    "line" : 215,
    "diffHunk" : "@@ -1,1 +371,375 @@            # numpy_array_equal cannot compare pd.NaT\n            self.assert_numpy_array_equal(unique[:3], expected)\n            self.assertTrue(unique[3] is pd.NaT or unique[3].astype('int64') == pd.tslib.iNaT)\n\n            self.assertEquals(s.nunique(), 4)"
  }
]