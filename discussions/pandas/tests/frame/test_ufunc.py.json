[
  {
    "id" : "f337b626-6d21-4e64-856b-070c042aaf09",
    "prId" : 39260,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39260#pullrequestreview-571508546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2ad607f-9847-47ee-8ef4-2b022c0a0564",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Mmm, I'd like this to be more than \"in theory\". I'd consider this a buggy test, since things should be done blockwise for axis=0.\r\n\r\nCan you you change the test case to have just floats or just ints (even if you have to manually split it for test coverage?).",
        "createdAt" : "2021-01-18T21:43:25Z",
        "updatedAt" : "2021-01-19T15:12:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "bb37ca52-8b6b-4132-bf6c-bf817faadd4c",
        "parentId" : "a2ad607f-9847-47ee-8ef4-2b022c0a0564",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I specifically used two dtypes to have two blocks to ensure we handle this case correctly for axis=1 (which can never be done clockwise)\r\n\r\nJust above there is already a case with only ints that preserves the int dtype.",
        "createdAt" : "2021-01-18T21:46:27Z",
        "updatedAt" : "2021-01-19T15:12:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "06f545fa-b177-48da-9432-4e5506dd724b",
        "parentId" : "a2ad607f-9847-47ee-8ef4-2b022c0a0564",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Note that before pandas 1.2.0, this also didn't preserve the dtypes per column, and 1.2.0 itself didn't calculate a proper result (so I would call this PR a strict improvement ;))",
        "createdAt" : "2021-01-18T21:48:24Z",
        "updatedAt" : "2021-01-19T15:12:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "691dd702-cbcc-4caf-94ef-fa2f7b845e35",
        "parentId" : "a2ad607f-9847-47ee-8ef4-2b022c0a0564",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "agreed re preserving for axis=0.  couldn't we still use mgr.apply in that case?",
        "createdAt" : "2021-01-18T22:55:05Z",
        "updatedAt" : "2021-01-19T15:12:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b88a13b2-6238-4eb2-99b6-9156f1606164",
        "parentId" : "a2ad607f-9847-47ee-8ef4-2b022c0a0564",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "To be clear, I *could* certainly detect the special case of accumulate with axis=0, and then pass axis=1 to the blocks, but:\r\n\r\n1\\) that requires special case code like this in array_ufunc:\r\n\r\n```python\r\nelse:\r\n    # the ufunc(dataframe) case\r\n    ...\r\n    elif method == \"accumulate\" and (\"axis\" not in kwargs or (\"axis\" in kwargs and kwargs[\"axis\"] == 0)):\r\n        # swap axis for the transposed Block values\r\n        kwargs[\"axis\"] = 1\r\n        result = mgr.apply(getattr(ufunc, method), **kwargs)\r\n```\r\n\r\n2\\) that requires `Block.apply` to be \"aware\" of `axis`. Currently it simply passes through keywords, but in this case it would need to interpret `axis` differently depending on whether its values are stored as 2D or 1D (and I know we already need to take this axis swapping into account in many places, eg with `NDFrame._get_block_manager_axis(axis)`, and in the internals as well, but that's typically when axis is a keyword of our own, and not a user-specified kwarg of a generic applied function). So I certainly could add an ExtensionBlock.apply override to take this into account. But we could also decide to leave this as is for now.",
        "createdAt" : "2021-01-19T07:47:58Z",
        "updatedAt" : "2021-01-19T15:12:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "61e795ea-b42e-4c4c-a016-e7b1a29858ef",
        "parentId" : "a2ad607f-9847-47ee-8ef4-2b022c0a0564",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> but in this case it would need to interpret axis differently depending on whether its values are stored as 2D or 1D \r\n\r\nOnce more with feeling: this wouldn't be an issue with 2D EAs.",
        "createdAt" : "2021-01-19T16:35:25Z",
        "updatedAt" : "2021-01-19T16:35:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "37ae71c2-19b6-447f-bbb7-bc93e849b4d1",
        "parentId" : "a2ad607f-9847-47ee-8ef4-2b022c0a0564",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> Once more with feeling: this wouldn't be an issue with 2D EAs.\r\n\r\nAnd I can also say: this wouldn't be an issue with only 1D arrays ..",
        "createdAt" : "2021-01-19T17:54:39Z",
        "updatedAt" : "2021-01-19T17:54:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cf4c6fb9-baa3-435b-b7ea-92c32b5651ec",
        "parentId" : "a2ad607f-9847-47ee-8ef4-2b022c0a0564",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@TomAugspurger @jbrockmendel I opened https://github.com/pandas-dev/pandas/issues/39275 to keep track of the fact that this can be improved to preserve dtypes",
        "createdAt" : "2021-01-19T18:00:19Z",
        "updatedAt" : "2021-01-19T18:00:19Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "13dcd5c89af0941057aabe00db157b202cc840ad",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +129,133 @@    # in theory could preserve int dtype for default axis=0\n    expected = pd.DataFrame({\"a\": [1.0, 3.0, 3.0, 4.0], \"b\": [0.1, 4.0, 4.0, 4.0]})\n    tm.assert_frame_equal(result, expected)\n\n    result = np.maximum.accumulate(df, axis=0)"
  },
  {
    "id" : "e8c1d264-5412-4ddd-b06d-af5871ed5153",
    "prId" : 40878,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40878#pullrequestreview-633609442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have any documentation that out is actually a ndarray? this is a very strange result. At the very least document this, and let's open an issue. This should work with out=DataFrame, or simply raise (preferred)",
        "createdAt" : "2021-04-12T12:01:52Z",
        "updatedAt" : "2021-04-12T12:36:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1317ee4d-0971-40bd-a9fe-5466d3020c6b",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "yep. I thought this was strange. https://github.com/pandas-dev/pandas/issues/40662#issuecomment-817307177\r\n\r\nshould we defer to 1.2.5 to allow more discussion? or put 1.2.4 release on hold for a day or two?",
        "createdAt" : "2021-04-12T12:05:03Z",
        "updatedAt" : "2021-04-12T12:36:06Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "7f50edd4-2153-4f3b-95ea-f54fbb32d593",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah let's defer this. i dont' think this is the correct behavior and we should actually fix it (which may mean that we simply do this for 1.3)",
        "createdAt" : "2021-04-12T12:13:14Z",
        "updatedAt" : "2021-04-12T12:36:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "66e3a530-d7e3-48cf-8da0-e3f05ac55d14",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "moving to 1.2.5 (if we do it)",
        "createdAt" : "2021-04-12T12:13:43Z",
        "updatedAt" : "2021-04-12T12:36:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7260c704-1cd6-4932-992f-0ac84c3e5c88",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> This should work with out=DataFrame, or simply raise (preferred)\r\n\r\nThis does raise when passing a DataFrame to `out` (as numpy expects an array as `out` argument), but what is being tested here is the return value of the ufunc *in case of* passing an array to `out`. In that case, `out` is also being returned, and since `out` is an ndarray, the return value is also an ndarray. \r\n\r\n(to me this seems correct behaviour, and thus I don't think this needs to hold up merging this for the release)",
        "createdAt" : "2021-04-12T12:26:08Z",
        "updatedAt" : "2021-04-12T12:36:06Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ca3e3734-e6cb-48c2-aa7d-60fdc03e15fc",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "the return type is a DataFrame when out is specified and this has been added to the test\r\n\r\n```\r\n expected = pd.DataFrame(expected)\r\n tm.assert_frame_equal(result, expected)\r\n```",
        "createdAt" : "2021-04-12T12:29:56Z",
        "updatedAt" : "2021-04-12T12:36:06Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "1ba4955e-56e7-4cf0-81c5-292dd2753daa",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "the very fact that you can specify out as a ndarray while the input is a DataFrame is just very strange behavior and should simply not be allowed. This needs fixing and much more testing.",
        "createdAt" : "2021-04-12T12:30:45Z",
        "updatedAt" : "2021-04-12T12:36:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "153ac900-de67-47d5-9a22-289e6b746a5b",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> the return type is a DataFrame when out is specified and this has been added to the test\r\n\r\nWhoops, sorry, was testing in the wrong env. Indeed, the return value is properly wrapped in a DataFrame. Indeed, now it correctly returns a DataFrame while the `out` ndarray *is* updated\r\n\r\n> the very fact that you can specify out as a ndarray while the input is a DataFrame is just very strange behavior and should simply not be allowed. This needs fixing and much more testing.\r\n\r\nBefore DataFrame implemented this itself (with `__array_ufunc__`), any input to a numpy ufunc was coerced to an array, and `out` could also be an ndarray. This is longstanding behaviour (and IMO also fine that this works). \r\n\r\nIf we want to change this, it can be deprecated, but for now fixing this severe regression (you silently get different values) seems the best thing to do. \r\n(the fix is also tiny, it's just passing through the `kwargs`, which was an oversight that this was not done before)\r\n\r\nAnd note this is not only about `out`, but also about other kwargs being ignored.",
        "createdAt" : "2021-04-12T12:48:13Z",
        "updatedAt" : "2021-04-12T12:48:13Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "82d732fb-b1aa-46e3-90a4-ad5e3c455207",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> And note this is not only about `out`, but also about other kwargs being ignored.\r\n\r\nthat was the response to my comment in #40662 https://github.com/pandas-dev/pandas/issues/40662#issuecomment-817310283 so was happy to approve and I am happy to include in 1.2.4 (but I still also think the out behavior is strange) ",
        "createdAt" : "2021-04-12T12:57:23Z",
        "updatedAt" : "2021-04-12T12:57:24Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "56900583-5a3a-4032-9474-2fc492686f0b",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok i guess ok for 1.2.4 as this fixes the regression. but this is REALLY strange and we need to fix this (e.g. out being an ndarray), this is just plain wrong, yes this is a numpy ufunc but is so unexpected, we can simply raise an error if out is not a DataFrame I think would make this way better.",
        "createdAt" : "2021-04-12T13:03:21Z",
        "updatedAt" : "2021-04-12T13:03:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c96ed2d4-b49f-4596-a727-5506e3c79a01",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "on 2nd thought, it think this should be fixed before releasing. ",
        "createdAt" : "2021-04-12T13:04:10Z",
        "updatedAt" : "2021-04-12T13:04:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e3ef984d-83f0-4c39-826b-855c088d7f79",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so again let's not do a last minute PR , not reason.",
        "createdAt" : "2021-04-12T13:04:30Z",
        "updatedAt" : "2021-04-12T13:04:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "100a4d8b-07a4-49a6-b6d3-79f320bbb55c",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Jeff, this is a tiny bugfix (look at the diff, it's just passing through `**kwargs`), that fixes a quite serious regression (you silently get wrong values when passing any additional keyword argument). \r\nThe behavior you are objecting to is a long-standing behaviour, that we can discuss separately, but is not specific to this PR (this PR is *not* only for `out`, but fixes the regression for any keyword argument, such as `where`)",
        "createdAt" : "2021-04-12T13:21:46Z",
        "updatedAt" : "2021-04-12T13:21:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "980726d4-d07f-4586-8a7d-109578c16d9f",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> on 2nd thought, it think this should be fixed before releasing.\r\n\r\nWhat needs to be fixed? \r\nIf you want to change how we handle the `out` keyword (eg raising an error if it isn't a DataFrame), that can go through a deprecation cycle and thus is for another PR targeting 1.3 (and if so, please open an issue about it)\r\n\r\n",
        "createdAt" : "2021-04-12T13:23:07Z",
        "updatedAt" : "2021-04-12T13:23:07Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ef0b1926-a2d8-4e8f-b929-80895c001b2f",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I disagree. This is PR enables this itself by passing thru the out keyword. You say its a bug fix, but this a problem. Releasing this PR is enabling this terrible behavior.",
        "createdAt" : "2021-04-12T13:28:38Z",
        "updatedAt" : "2021-04-12T13:28:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5c7cd4d0-0867-4811-82f3-0ea450070ad3",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This \"terrible\" behaviour is *long-standing* (and IMO correct) behaviour on which users rely. Again, if we want to change this, we can discuss it and it can go through a deprecation cycle. But for now let's fix the regression. ",
        "createdAt" : "2021-04-12T13:36:23Z",
        "updatedAt" : "2021-04-12T13:36:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4906941b-0215-4a55-9906-a5a7f1a1a171",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "and would make DataFrame consistent with Series.. on master..\r\n\r\n```\r\n>>> foo = np.array([1, 2, 3, 4])\r\n>>> foo\r\narray([1, 2, 3, 4])\r\n>>>\r\n>>> ser = pd.Series(foo)\r\n>>> ser\r\n0    1\r\n1    2\r\n2    3\r\n3    4\r\ndtype: int32\r\n>>>\r\n>>> bar = np.zeros_like(ser)\r\n>>> bar\r\narray([0, 0, 0, 0])\r\n>>>\r\n>>> np.add(ser, 1, out=bar)\r\n0    2\r\n1    3\r\n2    4\r\n3    5\r\ndtype: int32\r\n>>>\r\n>>> bar\r\narray([2, 3, 4, 5])\r\n>>>\r\n```",
        "createdAt" : "2021-04-12T13:47:38Z",
        "updatedAt" : "2021-04-12T13:47:39Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "0ab43d22-166a-496a-85be-c5cc10293fa1",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback do you have time to hop on a quick call to resolve this dispute? ",
        "createdAt" : "2021-04-12T13:48:46Z",
        "updatedAt" : "2021-04-12T13:48:46Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0423661e-1518-452c-b4e2-0d3dbd909d73",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> This \"terrible\" behaviour is long-standing (and IMO correct) behaviour on which users rely. \r\n\r\nhow is this correct in any way? this was a bug from the original impl.",
        "createdAt" : "2021-04-12T13:59:16Z",
        "updatedAt" : "2021-04-12T13:59:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5df180ae-5814-4737-99a5-8a317121c327",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "That was not a bug, that's how numpy functions work: they coerce array-like input to arrays. So whether one of the arguments was a DataFrame vs an ndarray, did not have any effect on allowing an `out` argument or not",
        "createdAt" : "2021-04-12T14:09:50Z",
        "updatedAt" : "2021-04-12T14:09:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c7cf3e1a-21d4-4350-8111-ad023761a516",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok fine. how about a follow to make this *really* clear (in docs) on master. I would however also deprecate / remove this as it not intuitive at all (e.g. we do not have an out argument anywhere else)",
        "createdAt" : "2021-04-12T14:16:50Z",
        "updatedAt" : "2021-04-12T14:16:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "186a6d64-758e-4501-8242-ad2409d9a4df",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> e.g. we do not have an out argument anywhere else\r\n\r\nThis keyword is not in a pandas function or method, but in a NumPy function (which has `out` in many places)",
        "createdAt" : "2021-04-12T14:29:23Z",
        "updatedAt" : "2021-04-12T14:29:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4e9e5dc1-786e-457b-a5be-425d3908cb1d",
        "parentId" : "06bfdbdb-20bd-4ce0-a858-a09d8a227800",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i know, but this is *very* confusing if someone is doing this (and doesnt; realize it). ",
        "createdAt" : "2021-04-12T14:30:47Z",
        "updatedAt" : "2021-04-12T14:30:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c5772774e88cf81fc3b572ed8e69b04358d0f2f",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +93,97 @@\n    expected = np.array(expected).reshape(2, 2)\n    tm.assert_numpy_array_equal(result_inplace, expected)\n\n    expected = pd.DataFrame(expected)"
  }
]