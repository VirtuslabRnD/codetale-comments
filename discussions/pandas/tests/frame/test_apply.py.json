[
  {
    "id" : "f77943e1-b550-4861-9696-d0fc86c1aabd",
    "prId" : 14668,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14668#pullrequestreview-12346598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1738a37f-3deb-4260-a996-ba12b8c5d238",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add here also `frame.transform('sqrt')`?",
        "createdAt" : "2016-12-10T12:31:05Z",
        "updatedAt" : "2017-04-14T13:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae6c6f6cbd4b760ec70b1d48b27fe53b6644e208",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +499,503 @@            result = self.frame.apply(np.sqrt)\n            assert_frame_equal(result, expected)\n\n            result = self.frame.transform(np.sqrt)\n            assert_frame_equal(result, expected)"
  },
  {
    "id" : "f8ea6b17-c5d4-4ede-8f51-834f0c32be38",
    "prId" : 16458,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16458#pullrequestreview-41098445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0222dfc2-a55a-448d-9c80-bf7a0e743997",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment of ``.size`` here (and how its a property of Series/DataFrame and hence we allow this)",
        "createdAt" : "2017-05-30T23:08:00Z",
        "updatedAt" : "2017-06-01T10:34:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a367c6ba13ffc71021fd56c925a64f9a57df17f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +638,642 @@\n    def test_non_callable_aggregates(self):\n\n        # GH 16405\n        # 'size' is a property of frame/series"
  },
  {
    "id" : "2ca96461-660b-4dab-aeae-6946bf1d56d0",
    "prId" : 18577,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18577#pullrequestreview-93430641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4662c568-6b75-41e3-b4e4-49eb41d4abe9",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There is some inconsistency here in how we handle this compared to `axis=1` (but that is certainly something that can be discussed in a follow-up issue)",
        "createdAt" : "2018-01-28T21:06:23Z",
        "updatedAt" : "2018-02-07T10:59:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "19427a7d-ec88-45a2-bc14-2ae0d222c4d4",
        "parentId" : "4662c568-6b75-41e3-b4e4-49eb41d4abe9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I don't think there IS an inconsistency. We cannot set the column names of the result frame, UNLESS a Series is returned. Sure we *can*, but it would then be inconsistent depending on the length of the returned result (e.g. if it matches in columns we can, but then if it doesn't we cannot set them). Simply better to say that infer does not set column names at all.",
        "createdAt" : "2018-01-28T23:49:39Z",
        "updatedAt" : "2018-02-07T10:59:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5dfff888-217e-4b82-baf6-a108bef88599",
        "parentId" : "4662c568-6b75-41e3-b4e4-49eb41d4abe9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes there is. I was not speaking about the column names, since this is axis=0, they are of course preserved. But the equivalent for what we have been discussing here in this PR about what the resulting column names are, would be the index labels in this case. \r\nAnd depending on the length of the array that is returned by the numpy function, we either preserve the index labels, or we create a new default range index.\r\n\r\nBut as I said, certainly not for this PR :) (I am also not fully sure what the best route would be, although being consistent with the axis=1 case would be nice, but that would break the test below).",
        "createdAt" : "2018-02-01T20:56:20Z",
        "updatedAt" : "2018-02-07T10:59:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d933801870e40f4ef58d9f96cd0f3eab353b83e",
    "line" : 209,
    "diffHunk" : "@@ -1,1 +564,568 @@        # if row shape is changing, infer it\n        df = pd.DataFrame(np.random.rand(10, 2))\n        result = df.apply(np.fft.fft, axis=0)\n        assert result.shape == (10, 2)\n"
  }
]