[
  {
    "id" : "f77943e1-b550-4861-9696-d0fc86c1aabd",
    "prId" : 14668,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14668#pullrequestreview-12346598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1738a37f-3deb-4260-a996-ba12b8c5d238",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add here also `frame.transform('sqrt')`?",
        "createdAt" : "2016-12-10T12:31:05Z",
        "updatedAt" : "2017-04-14T13:45:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae6c6f6cbd4b760ec70b1d48b27fe53b6644e208",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +499,503 @@            result = self.frame.apply(np.sqrt)\n            assert_frame_equal(result, expected)\n\n            result = self.frame.transform(np.sqrt)\n            assert_frame_equal(result, expected)"
  },
  {
    "id" : "f8ea6b17-c5d4-4ede-8f51-834f0c32be38",
    "prId" : 16458,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16458#pullrequestreview-41098445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0222dfc2-a55a-448d-9c80-bf7a0e743997",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment of ``.size`` here (and how its a property of Series/DataFrame and hence we allow this)",
        "createdAt" : "2017-05-30T23:08:00Z",
        "updatedAt" : "2017-06-01T10:34:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a367c6ba13ffc71021fd56c925a64f9a57df17f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +638,642 @@\n    def test_non_callable_aggregates(self):\n\n        # GH 16405\n        # 'size' is a property of frame/series"
  },
  {
    "id" : "2ca96461-660b-4dab-aeae-6946bf1d56d0",
    "prId" : 18577,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18577#pullrequestreview-93430641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4662c568-6b75-41e3-b4e4-49eb41d4abe9",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There is some inconsistency here in how we handle this compared to `axis=1` (but that is certainly something that can be discussed in a follow-up issue)",
        "createdAt" : "2018-01-28T21:06:23Z",
        "updatedAt" : "2018-02-07T10:59:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "19427a7d-ec88-45a2-bc14-2ae0d222c4d4",
        "parentId" : "4662c568-6b75-41e3-b4e4-49eb41d4abe9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I don't think there IS an inconsistency. We cannot set the column names of the result frame, UNLESS a Series is returned. Sure we *can*, but it would then be inconsistent depending on the length of the returned result (e.g. if it matches in columns we can, but then if it doesn't we cannot set them). Simply better to say that infer does not set column names at all.",
        "createdAt" : "2018-01-28T23:49:39Z",
        "updatedAt" : "2018-02-07T10:59:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5dfff888-217e-4b82-baf6-a108bef88599",
        "parentId" : "4662c568-6b75-41e3-b4e4-49eb41d4abe9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes there is. I was not speaking about the column names, since this is axis=0, they are of course preserved. But the equivalent for what we have been discussing here in this PR about what the resulting column names are, would be the index labels in this case. \r\nAnd depending on the length of the array that is returned by the numpy function, we either preserve the index labels, or we create a new default range index.\r\n\r\nBut as I said, certainly not for this PR :) (I am also not fully sure what the best route would be, although being consistent with the axis=1 case would be nice, but that would break the test below).",
        "createdAt" : "2018-02-01T20:56:20Z",
        "updatedAt" : "2018-02-07T10:59:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d933801870e40f4ef58d9f96cd0f3eab353b83e",
    "line" : 209,
    "diffHunk" : "@@ -1,1 +564,568 @@        # if row shape is changing, infer it\n        df = pd.DataFrame(np.random.rand(10, 2))\n        result = df.apply(np.fft.fft, axis=0)\n        assert result.shape == (10, 2)\n"
  },
  {
    "id" : "eaa5513d-fe01-48a3-81fc-95509117f360",
    "prId" : 21224,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21224#pullrequestreview-137446184",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44bb6d54-c2bf-4fa1-afb4-e331e77fcdd3",
        "parentId" : null,
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "having \"absolute\" come before \"sqrt\" maintains alphabetical ordering, and makes creating multindexes easier below.",
        "createdAt" : "2018-07-16T14:17:25Z",
        "updatedAt" : "2018-07-26T21:03:35Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "39ced290b257435e97c74dc95aff2391fdf7fd02",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +844,848 @@\n            f_abs = np.abs(self.frame)\n            f_sqrt = np.sqrt(self.frame)\n\n            # ufunc"
  },
  {
    "id" : "abce8a8b-d65f-47fb-8a90-123f5a4b2450",
    "prId" : 22730,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22730#pullrequestreview-157952681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb1825a9-0565-4ea2-bf68-f20147bc1ac2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "e.g. i think this is the correct way (but maybe search github docs for this answer)",
        "createdAt" : "2018-09-23T21:21:07Z",
        "updatedAt" : "2018-10-07T23:13:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9ac846e0-691e-42f9-b6c9-d555f7d6534f",
        "parentId" : "fb1825a9-0565-4ea2-bf68-f20147bc1ac2",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Continuing conversation [here](https://github.com/pandas-dev/pandas/pull/22730#discussion_r219711912)",
        "createdAt" : "2018-09-23T21:33:39Z",
        "updatedAt" : "2018-10-07T23:13:12Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca369425c24f17f846f257f1e0bf6e4cf60f82af",
    "line" : 231,
    "diffHunk" : "@@ -1,1 +680,684 @@        assert_series_equal(result, expected)\n\n        # GH 17970\n        df = DataFrame({\"a\": [1, 2, 3]}, index=list('abc'))\n"
  },
  {
    "id" : "ee060bcf-b126-4ee0-bef0-5d1a85223287",
    "prId" : 23441,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23441#pullrequestreview-170668917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb2fb557-d1db-4e5a-933e-8df6c7e34362",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Generally, we would prefer that separate changes go into separate PR's, but these are small enough that it should be okay.",
        "createdAt" : "2018-11-01T08:30:30Z",
        "updatedAt" : "2018-11-01T08:30:30Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "e38a9d16-9bb6-4875-896a-e87d43f2dfe9",
        "parentId" : "fb2fb557-d1db-4e5a-933e-8df6c7e34362",
        "authorId" : "5ca0e966-b0a3-4384-b202-a62f29c82e87",
        "body" : "It's *kinda* related in that this is input to the test that was timing out, but point taken - I'll try to split future changes like this into multiple PRs :smile: ",
        "createdAt" : "2018-11-01T12:45:53Z",
        "updatedAt" : "2018-11-01T12:45:53Z",
        "lastEditedBy" : "5ca0e966-b0a3-4384-b202-a62f29c82e87",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf05e077a427c34a83c3d233e69f0e1c565df937",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +1157,1161 @@            df.agg(func, axis=axis)\n\n    @given(index=indices(max_length=5), num_columns=integers(0, 5))\n    def test_frequency_is_original(self, index, num_columns):\n        # GH 22150"
  },
  {
    "id" : "99ce453d-ac6f-4f90-8980-4e29472d94fa",
    "prId" : 25230,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25230#pullrequestreview-201727916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98afdfd9-1ac8-41a7-a311-e29e574ee316",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you add GH issue number as comment here?",
        "createdAt" : "2019-02-08T18:38:42Z",
        "updatedAt" : "2019-02-08T18:54:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a16481ba46fedf43680e27d56d8e2b2058d2815",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +321,325 @@    def test_apply_reduce_rows_to_dict(self):\n        # GH 25196\n        data = pd.DataFrame([[1, 2], [3, 4]])\n        expected = pd.Series([{0: 1, 1: 3}, {0: 2, 1: 4}])\n        result = data.apply(dict)"
  },
  {
    "id" : "e950b38f-f658-4239-9c17-24a95e1d990f",
    "prId" : 29632,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29632#pullrequestreview-317723637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b0e7233-c38b-4971-ba0d-6edfc1c61769",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can we say something snide about this user?  i dislike this hypothetical user.",
        "createdAt" : "2019-11-15T16:18:51Z",
        "updatedAt" : "2019-11-15T16:18:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e324253e4ca38f1abfe848710f4bcc095dc060bf",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1261,1265 @@\n    def test_agg_listlike_result(self):\n        # GH-29587 user defined function returning list-likes\n        df = DataFrame(\n            {\"A\": [2, 2, 3], \"B\": [1.5, np.nan, 1.5], \"C\": [\"foo\", None, \"bar\"]}"
  },
  {
    "id" : "b36e6e2c-7a9c-4305-a0fa-48d8ffd593cf",
    "prId" : 31614,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31614#pullrequestreview-353397963",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a634dcb-b4ac-42f6-8d1f-b94d855874c1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i would also test this w/o the col.copy(), e.g. df.apply(lambda col: col)",
        "createdAt" : "2020-02-05T00:30:17Z",
        "updatedAt" : "2020-02-05T07:41:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "785da59c7c95e42e476bd5433c502afc41c21134",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +706,710 @@    def test_apply_noreduction_tzaware_object(self):\n        # https://github.com/pandas-dev/pandas/issues/31505\n        df = pd.DataFrame({\"foo\": [pd.Timestamp(\"2020\", tz=\"UTC\")]}, dtype=\"object\")\n        result = df.apply(lambda x: x)\n        tm.assert_frame_equal(result, df)"
  },
  {
    "id" : "42c374df-17d6-42b3-88d3-b80bba964c05",
    "prId" : 32425,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32425#pullrequestreview-368429965",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d718bbc9-8549-4f15-b85e-c6cdb173f1f5",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you just make a separate test for this and reference GH issue number?",
        "createdAt" : "2020-03-04T00:46:48Z",
        "updatedAt" : "2020-03-05T21:40:56Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f3b16f75-8214-48c3-9b64-63a47f68cfd4",
        "parentId" : "d718bbc9-8549-4f15-b85e-c6cdb173f1f5",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Also can you assert that this is getting passed a 1D array?",
        "createdAt" : "2020-03-04T00:47:53Z",
        "updatedAt" : "2020-03-05T21:40:56Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e66cd23b1a073efbbcb1f2f91d1f914f0b9b2b50",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +236,240 @@            df.apply(lambda x: Series([1, 2]), axis=1, result_type=\"broadcast\")\n\n    def test_apply_raw(self, float_frame, mixed_type_frame):\n        def _assert_raw(x):\n            assert isinstance(x, np.ndarray)"
  },
  {
    "id" : "d60e3e5b-5c1f-499b-92d8-72357c220c92",
    "prId" : 34183,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34183#pullrequestreview-420098925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "addbd7a8-00ca-4667-9f0b-92b333cebfa8",
        "parentId" : null,
        "authorId" : "74135b99-72a6-4787-b5da-8908b48d3233",
        "body" : "i guess this is a small change in behavior, type inference is done and is detected type is used after using `apply`",
        "createdAt" : "2020-05-14T21:28:18Z",
        "updatedAt" : "2020-06-02T13:59:57Z",
        "lastEditedBy" : "74135b99-72a6-4787-b5da-8908b48d3233",
        "tags" : [
        ]
      },
      {
        "id" : "1eaf46dc-fb86-4a1e-bb18-d9df019812e8",
        "parentId" : "addbd7a8-00ca-4667-9f0b-92b333cebfa8",
        "authorId" : "74135b99-72a6-4787-b5da-8908b48d3233",
        "body" : "I am not sure if the same change i did would solve them, but it seems that there are a couple of issues regarding dtypes of the apply result",
        "createdAt" : "2020-05-17T19:10:33Z",
        "updatedAt" : "2020-06-02T13:59:57Z",
        "lastEditedBy" : "74135b99-72a6-4787-b5da-8908b48d3233",
        "tags" : [
        ]
      },
      {
        "id" : "25b64ab8-b162-4b5a-8a9f-a06cdcca3137",
        "parentId" : "addbd7a8-00ca-4667-9f0b-92b333cebfa8",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "We can probably remove that code check; I think this is a legit use case\r\n\r\nAlternately could do things like in #24748 though I do find this cleaner. Let's see what others think",
        "createdAt" : "2020-05-20T03:23:23Z",
        "updatedAt" : "2020-06-02T13:59:57Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "41ee9d3a-22b6-4d6b-a882-88b32507420a",
        "parentId" : "addbd7a8-00ca-4667-9f0b-92b333cebfa8",
        "authorId" : "74135b99-72a6-4787-b5da-8908b48d3233",
        "body" : "I am guessing you meant the other conversation regarding checking a function was called once in the unittests.\r\n\r\nI find mock much cleaner.\r\nWaiting for your decision",
        "createdAt" : "2020-05-20T17:55:35Z",
        "updatedAt" : "2020-06-02T13:59:57Z",
        "lastEditedBy" : "74135b99-72a6-4787-b5da-8908b48d3233",
        "tags" : [
        ]
      },
      {
        "id" : "ed9d1305-de4d-4438-a270-83b2d64959fe",
        "parentId" : "addbd7a8-00ca-4667-9f0b-92b333cebfa8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what happens with the original example? can you parameterize over dtype as well (you may need to pass in the expected result as well); so let's see what's different",
        "createdAt" : "2020-05-28T13:26:03Z",
        "updatedAt" : "2020-06-02T13:59:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "55db8716727c0769effd4ff597c1344a76e4e6e2",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +720,724 @@        # https://github.com/pandas-dev/pandas/issues/31505\n        df = pd.DataFrame(\n            {\"foo\": [pd.Timestamp(\"2020\", tz=\"UTC\")]}, dtype=\"datetime64[ns, UTC]\"\n        )\n        result = df.apply(lambda x: x)"
  },
  {
    "id" : "fa636339-50f8-43d5-9e7b-b073004d6e1a",
    "prId" : 34183,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34183#pullrequestreview-417897308",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39f7d1b5-70da-41d3-90f5-9708ce9cb11b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i really don't want to use mock here, rather look at how we test using groupby.apply. We use very explict functions that themselves can append to a list.\r\n\r\nThis is much more transparent that using mock.",
        "createdAt" : "2020-05-25T23:12:23Z",
        "updatedAt" : "2020-06-02T13:59:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "55db8716727c0769effd4ff597c1344a76e4e6e2",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +727,731 @@        tm.assert_frame_equal(result, df)\n\n    def test_apply_function_runs_once(self):\n        # https://github.com/pandas-dev/pandas/issues/30815\n"
  },
  {
    "id" : "a735840d-b643-49d8-b0d7-e0ca6e36b0fe",
    "prId" : 34183,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34183#pullrequestreview-422351329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93821177-08b8-41e3-b830-e3127967ce31",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this a specific issue number? you have 3 listed issues can you make sure that we have tests that cover all",
        "createdAt" : "2020-05-28T13:29:13Z",
        "updatedAt" : "2020-06-02T13:59:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "61e6ee94-f206-47f7-9d57-d0261446ae7d",
        "parentId" : "93821177-08b8-41e3-b830-e3127967ce31",
        "authorId" : "74135b99-72a6-4787-b5da-8908b48d3233",
        "body" : "I Only found a task to remove the documentation about the bug (even though it was unsolved) https://github.com/pandas-dev/pandas/pull/31695\r\nI will search again.\r\nShould i open an issue if there is no issue regarding this?",
        "createdAt" : "2020-05-28T14:37:17Z",
        "updatedAt" : "2020-06-02T13:59:57Z",
        "lastEditedBy" : "74135b99-72a6-4787-b5da-8908b48d3233",
        "tags" : [
        ]
      },
      {
        "id" : "ad80dad1-b4a0-4562-a1b1-d55d83a11587",
        "parentId" : "93821177-08b8-41e3-b830-e3127967ce31",
        "authorId" : "74135b99-72a6-4787-b5da-8908b48d3233",
        "body" : "Couldn't find an issue for that except for this old one https://github.com/pandas-dev/pandas/issues/25878\r\n\r\nShould i open an issue and add to the test + solve it with this PR?",
        "createdAt" : "2020-06-02T05:26:45Z",
        "updatedAt" : "2020-06-02T13:59:57Z",
        "lastEditedBy" : "74135b99-72a6-4787-b5da-8908b48d3233",
        "tags" : [
        ]
      }
    ],
    "commit" : "55db8716727c0769effd4ff597c1344a76e4e6e2",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +769,773 @@\n    def test_applymap_function_runs_once(self):\n\n        df = pd.DataFrame({\"a\": [1, 2, 3]})\n        values = []  # Save values function is applied to"
  },
  {
    "id" : "84e09423-b5db-49fb-b45e-0c2b457c645c",
    "prId" : 34183,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34183#pullrequestreview-422680434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37e2cfe6-e282-41cd-9691-caadb12c713e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the issue number you create here",
        "createdAt" : "2020-06-02T13:18:37Z",
        "updatedAt" : "2020-06-02T13:59:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b103f3bf-dbed-4027-a7a9-ec616c27cf96",
        "parentId" : "37e2cfe6-e282-41cd-9691-caadb12c713e",
        "authorId" : "74135b99-72a6-4787-b5da-8908b48d3233",
        "body" : "Its listed in comment in the first row of test function,\r\nYou want it also in the `reason`?",
        "createdAt" : "2020-06-02T13:34:19Z",
        "updatedAt" : "2020-06-02T13:59:57Z",
        "lastEditedBy" : "74135b99-72a6-4787-b5da-8908b48d3233",
        "tags" : [
        ]
      }
    ],
    "commit" : "55db8716727c0769effd4ff597c1344a76e4e6e2",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +747,751 @@\n    @pytest.mark.xfail(\n        reason=\"The 'run once' enhancement for apply_raw not implemented yet.\"\n    )\n    def test_apply_raw_function_runs_once(self):"
  }
]