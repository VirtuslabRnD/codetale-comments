[
  {
    "id" : "42791936-64e0-4698-a8fb-8a0cc9def64d",
    "prId" : 30402,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30402#pullrequestreview-336455495",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87204cdd-67bc-4b43-b45e-132d0d3ec930",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you test for inplace as well",
        "createdAt" : "2019-12-26T00:48:00Z",
        "updatedAt" : "2019-12-26T08:31:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f4770079-4a85-4e23-8ba8-060f7bc93be3",
        "parentId" : "87204cdd-67bc-4b43-b45e-132d0d3ec930",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "tests added",
        "createdAt" : "2019-12-26T08:31:59Z",
        "updatedAt" : "2019-12-26T08:32:00Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d02b651792de516ab73c21be7430681c8e17dde5",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +482,486 @@    )\n    def test_sort_values_ignore_index(\n        self, original_dict, sorted_dict, ignore_index, output_index\n    ):\n        # GH 30114"
  },
  {
    "id" : "f3c6dfc0-8953-4cb9-8816-ea8868b7e2d1",
    "prId" : 36385,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36385#pullrequestreview-492151809",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c02d440d-fdf0-4aa2-9e82-c8eeffdaa329",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you try when the categorical is ordered=False as well (parameterize)",
        "createdAt" : "2020-09-15T22:22:10Z",
        "updatedAt" : "2020-09-15T23:29:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8f4fb35d-471d-4bf5-ba42-ec7ee29c08d0",
        "parentId" : "c02d440d-fdf0-4aa2-9e82-c8eeffdaa329",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Yeah this is broken actually. Will need to be more careful above.",
        "createdAt" : "2020-09-15T22:36:37Z",
        "updatedAt" : "2020-09-15T23:29:40Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "7bf6a014-b506-40c2-8d57-0013d340561d",
        "parentId" : "c02d440d-fdf0-4aa2-9e82-c8eeffdaa329",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Or maybe my expectation is off about how this should behave when the categorical is unordered. This is odd (it seems to respect the order in which categories are given even when ordered=False):\r\n\r\n```python\r\n[ins] In [1]: import pandas as pd\r\n         ...:\r\n         ...:\r\n         ...: values = [\"a\", \"b\", \"c\"]\r\n         ...:\r\n         ...: cat = pd.Categorical(values, categories=[\"a\", \"b\", \"c\"], ordered=False)\r\n         ...: print(cat.sort_values())\r\n         ...:\r\n         ...: cat = pd.Categorical(values, categories=[\"c\", \"b\", \"a\"], ordered=False)\r\n         ...: print(cat.sort_values())\r\n         ...:\r\n         ...: print(pd.__version__)\r\n         ...:\r\n['a', 'b', 'c']\r\nCategories (3, object): ['a', 'b', 'c']\r\n['c', 'b', 'a']\r\nCategories (3, object): ['c', 'b', 'a']\r\n1.2.0.dev0+390.g595791b6f.dirty\r\n```\r\n\r\nMaybe sorting an unordered categorical should actually be raising.",
        "createdAt" : "2020-09-15T23:06:09Z",
        "updatedAt" : "2020-09-15T23:29:40Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "58c4b68b-c12a-439f-a772-9eaa1378d81e",
        "parentId" : "c02d440d-fdf0-4aa2-9e82-c8eeffdaa329",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> Maybe sorting an unordered categorical should actually be raising.\r\n\r\nhad this discussion with @jorisvandenbossche a while back......\r\n\r\nyeah sorting just gives back the same ordering as the categories that you have, they just don't *mean* anything.\r\n\r\nso we do allow it.",
        "createdAt" : "2020-09-15T23:11:31Z",
        "updatedAt" : "2020-09-15T23:29:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e8a40dbe-351f-4838-9a89-9fef23cea974",
        "parentId" : "c02d440d-fdf0-4aa2-9e82-c8eeffdaa329",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what I think is broken is actually this\r\n\r\n```\r\nIn [184]: pd.Categorical(pd.Categorical(values, categories=[\"a\", \"b\", \"c\"], ordered=False), ordered=True)                                                       \r\nOut[184]: \r\n[a, b, c]\r\nCategories (3, object): [a < b < c]\r\n```",
        "createdAt" : "2020-09-15T23:12:08Z",
        "updatedAt" : "2020-09-15T23:29:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4aa7dfa2-1e26-428b-b1ae-b1348b886869",
        "parentId" : "c02d440d-fdf0-4aa2-9e82-c8eeffdaa329",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I *think* this should raise, though we do allow this via `.set_ordered()` so maybe its ok\r\n\r\ncc @TomAugspurger \r\n\r\n",
        "createdAt" : "2020-09-15T23:12:51Z",
        "updatedAt" : "2020-09-15T23:29:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "81d56acb-f185-41fe-9fd1-18b705dc82a2",
        "parentId" : "c02d440d-fdf0-4aa2-9e82-c8eeffdaa329",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "since we aren't actually testing this likely i think prob ok to merge this and open an issue for discussion.",
        "createdAt" : "2020-09-15T23:13:19Z",
        "updatedAt" : "2020-09-15T23:29:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bce4396d-e80d-4c90-b850-5aec0da891e2",
        "parentId" : "c02d440d-fdf0-4aa2-9e82-c8eeffdaa329",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "I would almost expect sorting an unordered categorical to simply return the original array (since maybe you could argue it's already \"trivially ordered\" in some sense) if it weren't to raise",
        "createdAt" : "2020-09-15T23:36:12Z",
        "updatedAt" : "2020-09-15T23:36:12Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "9dd532fe-c2f8-4548-8d95-e003b24baa34",
        "parentId" : "c02d440d-fdf0-4aa2-9e82-c8eeffdaa329",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Actually, R does the same thing as pandas interestingly enough:\r\n```R\r\n> x <- factor(c(\"a\", \"b\", \"c\", \"a\"), levels = c(\"c\", \"b\", \"a\"), ordered = FALSE)\r\n> x\r\n[1] a b c a\r\nLevels: c b a\r\n> sort(x)\r\n[1] c b a a\r\nLevels: c b a\r\n```\r\nI guess because it's easiest just to always sort by the underlying codes.",
        "createdAt" : "2020-09-17T00:56:46Z",
        "updatedAt" : "2020-09-17T00:56:46Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "30e75059-89d1-48b4-b843-9a693742872f",
        "parentId" : "c02d440d-fdf0-4aa2-9e82-c8eeffdaa329",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> I would almost expect sorting an unordered categorical to simply return the original array (since maybe you could argue it's already \"trivially ordered\" in some sense)\r\n\r\n@dsaxton strings also don't necessarily have a meaningfull order, but we still sort them lexicographically. In the same way, we still sort an unordered categorical, using the order of the categories (which is the same as lexicographically sorted in most cases, unless you specified the categories manually in a certain order). \r\n\r\nThere are lots of reasons to allow sorting for an \"unordered\" categorical. One example is to get a deterministic order of your values, which can be useful regardless of the order of the categories having a meaning or not.",
        "createdAt" : "2020-09-19T19:39:02Z",
        "updatedAt" : "2020-09-19T19:39:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "37d73e3c869094247748cc7fb63b4040e74a4fe5",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +699,703 @@        df = pd.DataFrame({\"x\": [1, 1, 1], \"y\": [\"a\", \"b\", \"c\"]})\n\n        def sorter(key):\n            if key.name == \"y\":\n                return pd.Series("
  }
]