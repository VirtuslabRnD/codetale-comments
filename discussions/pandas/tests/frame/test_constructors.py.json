[
  {
    "id" : "c4b4a300-f41d-4d70-81ab-8716b2bfc163",
    "prId" : 18529,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18529#pullrequestreview-91703936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8652f819-ca15-41e2-8ee8-10b8569d0b04",
        "parentId" : null,
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "It seems that some of the dataframe constructors don't allow duplicated columns while others do so I had to change the ``from_items`` in this test to ``from_records`` and ``from_dict(OrderedDict())`` to get the test passing. But I'm not sure if it still tests for the original issue correctly (#2079)\r\n\r\nAll of the other tests in this file using ``from_items`` are directly testing ``from_items`` so I left the check for the deprecation warning rather than trying to replace ``from_items`` with a different constructor.",
        "createdAt" : "2018-01-25T23:09:10Z",
        "updatedAt" : "2018-01-30T22:34:20Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "1838f65bf8ede9b83c3e227b95e50dde3abf4920",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +1284,1288 @@        tm.assert_frame_equal(df, edf)\n\n        idf = DataFrame.from_records([(8, 5)],\n                                     columns=['a', 'a'])\n"
  },
  {
    "id" : "d5870147-8fdb-46ab-bf2e-08c14092fd5d",
    "prId" : 18600,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18600#pullrequestreview-95661287",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d4750d7-e761-4359-8188-b0f6ce49443d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is this changing?",
        "createdAt" : "2018-02-05T11:21:30Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1e7d63d5-412b-4fea-8259-1ae03d8bcd12",
        "parentId" : "8d4750d7-e761-4359-8188-b0f6ce49443d",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Because it was wrong: an ``int`` should not upcast to ``object`` (the passed dtype is currently not considered). issue? whatsnew?",
        "createdAt" : "2018-02-05T14:33:20Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "770267c9-5b5b-487b-af7f-1e8213f9af90",
        "parentId" : "8d4750d7-e761-4359-8188-b0f6ce49443d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, yeah this looks suspect. I would make a new issue for this",
        "createdAt" : "2018-02-10T17:31:19Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "054ca351-f7cb-41ed-9112-06bd4783068c",
        "parentId" : "8d4750d7-e761-4359-8188-b0f6ce49443d",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "#19646",
        "createdAt" : "2018-02-11T16:29:33Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "22701fcf9e2f9daae4020d50af1ff9042803691b",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +796,800 @@        # does not error but ends up float\n        df = DataFrame(index=lrange(10), columns=['a', 'b'], dtype=int)\n        assert df.values.dtype == np.dtype('float64')\n\n        # #1783 empty dtype object"
  },
  {
    "id" : "aa19a6fd-a9c9-411f-8a47-4b2bf6f1c027",
    "prId" : 21987,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21987#pullrequestreview-139304097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f79fd88-0fe8-47df-9a7f-ac2630fa7903",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Reference the issue number in a comment below the functional definition.\r\n\r\nApplies to all newly-added tests.",
        "createdAt" : "2018-07-22T22:46:31Z",
        "updatedAt" : "2018-07-25T11:33:03Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2ace52186f418fd2a3371df484ec827b97c2c43",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +958,962 @@        result = DataFrame(Iter())\n        tm.assert_frame_equal(result, expected)\n\n    def test_constructor_iterator(self):\n"
  },
  {
    "id" : "a10b01e1-545a-4554-bc63-095b0deb9bc1",
    "prId" : 22963,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22963#pullrequestreview-161436751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18695515-f507-4e48-a0cd-ee4c3e74dc7d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can u rename ans -> expected",
        "createdAt" : "2018-10-04T03:33:13Z",
        "updatedAt" : "2018-10-04T04:05:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7efa9d32cd12eab92306411ac80624908b49128",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +804,808 @@\n    @pytest.mark.parametrize(\"data, index, columns, dtype, expected\", [\n        (None, lrange(10), ['a', 'b'], object, np.object_),\n        (None, None, ['a', 'b'], 'int64', np.dtype('int64')),\n        (None, lrange(10), ['a', 'b'], int, np.dtype('float64')),"
  },
  {
    "id" : "2e97a347-f69e-4416-8643-0b1da75a3a3b",
    "prId" : 23796,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23796#pullrequestreview-177433362",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4216061-52e9-4cbe-af4f-38c60c842e6e",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Not sure if this *ancient* code path (that has been commented out since forever) is worth keeping. It's failing on `PY2`, passing on `PY3`",
        "createdAt" : "2018-11-21T21:22:35Z",
        "updatedAt" : "2018-11-25T13:01:37Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce5bd94125310571c6ca9cfa3ab4aed31b49dcde",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +167,171 @@        if PY3:\n            # unicode error under PY2\n            rec.dtype.names = list(rec.dtype.names)[::-1]\n\n        index = self.frame.index"
  },
  {
    "id" : "a86b12bb-64b2-4a22-a369-8676a981911f",
    "prId" : 25089,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25089#pullrequestreview-199803861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8f335a0-347b-4f8a-863b-601b07f5538f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add the issue number as a comment",
        "createdAt" : "2019-02-04T21:01:05Z",
        "updatedAt" : "2019-02-05T05:04:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e424effd3976eb1734a74a40bbae126daffbf62",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1186,1190 @@    def test_constructor_mixed_type_rows(self):\n        # Issue 25075\n        data = [[1, 2], (3, 4)]\n        result = DataFrame(data)\n        expected = DataFrame([[1, 2], [3, 4]])"
  },
  {
    "id" : "ee7b0257-4c95-4c6c-a253-d1e9fe632dda",
    "prId" : 26343,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26343#pullrequestreview-236390273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc407406-c619-4945-8eae-ae0c5abe3567",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I would reference the issue as a comment above this line as well.",
        "createdAt" : "2019-05-11T18:05:24Z",
        "updatedAt" : "2019-05-12T12:19:25Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "37a0dec3-4678-49dd-9314-1c48d0f47b08",
        "parentId" : "fc407406-c619-4945-8eae-ae0c5abe3567",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Oh, this is just an existing test that has been moved. It already passed before this PR.",
        "createdAt" : "2019-05-11T19:43:42Z",
        "updatedAt" : "2019-05-12T12:19:25Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "96706f0534d2a3ab777c355909bb7e68d3912175",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1009,1013 @@\n    def test_constructor_list_of_ranges(self):\n        result = DataFrame([range(10), range(10)])\n        expected = DataFrame([list(range(10)), list(range(10))])\n        tm.assert_frame_equal(result, expected)"
  },
  {
    "id" : "d1227027-34d4-45a0-8668-c0ba70cc0123",
    "prId" : 26356,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26356#pullrequestreview-236424926",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aba1af79-8be3-4a03-833c-b270d31945de",
        "parentId" : null,
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "This worked in master, but I just added this test as ensurance against problems like in #26342",
        "createdAt" : "2019-05-12T15:47:25Z",
        "updatedAt" : "2019-05-19T20:06:55Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "29834d7bd71761a379684ce2715993e9a962b67f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +537,541 @@        # GH 26356\n        data = {'a': range(3), 'b': range(3, 6)}\n\n        result = DataFrame(data)\n        expected = DataFrame({'a': [0, 1, 2], 'b': [3, 4, 5]})"
  },
  {
    "id" : "f9a3b06d-1c6b-4841-a5b1-93675d3bdbf5",
    "prId" : 26356,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26356#pullrequestreview-239210266",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1194302-74ff-4b2f-8eb0-b51d598f7fe1",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "might be worth using `range(2, -1, -1)` for b so that the expected is the same for all three tests.",
        "createdAt" : "2019-05-18T00:01:55Z",
        "updatedAt" : "2019-05-19T20:06:55Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "d640ba7a-9341-485a-a77a-2b14bb9369fa",
        "parentId" : "b1194302-74ff-4b2f-8eb0-b51d598f7fe1",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Hi,\r\n\r\nI did it this way to by copying ``test_constructor_dict_of_tuples`` just above. Probably not worth it to align all of these styles, though in principle it would be clearer IMO.",
        "createdAt" : "2019-05-18T19:14:18Z",
        "updatedAt" : "2019-05-19T20:06:55Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "054018b1-c40d-4fa0-a4f0-8dedb78f2bcd",
        "parentId" : "b1194302-74ff-4b2f-8eb0-b51d598f7fe1",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "the reason i mentioned it is that it would make parametrization easier. either in this PR or a follow-on. you could potentially then parametrize `a` and `b` independently to create the cartesian product (not sure if this would work simply with generators or whether they would be exhausted) and then add in list, tuple, series and index for completeness. this would ensure that the independence of the column parsing for each item in the dictionary.",
        "createdAt" : "2019-05-18T19:23:34Z",
        "updatedAt" : "2019-05-19T20:06:55Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "74be17eb-c75c-44bc-8b4a-42df1bb4e4a3",
        "parentId" : "b1194302-74ff-4b2f-8eb0-b51d598f7fe1",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Agree this would be a good issue for a follow-up. This module looks like it is from before Pandas switched to pytest, so parametrization could make things clearer.",
        "createdAt" : "2019-05-18T19:38:27Z",
        "updatedAt" : "2019-05-19T20:06:55Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "29834d7bd71761a379684ce2715993e9a962b67f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +536,540 @@    def test_constructor_dict_of_ranges(self):\n        # GH 26356\n        data = {'a': range(3), 'b': range(3, 6)}\n\n        result = DataFrame(data)"
  },
  {
    "id" : "105b4ff1-3bc2-4dde-9fdf-8d5e58112f95",
    "prId" : 26356,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26356#pullrequestreview-239201554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4a484f5-4a4e-483b-930f-f07ef3384b97",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the issue number",
        "createdAt" : "2019-05-18T15:07:56Z",
        "updatedAt" : "2019-05-19T20:06:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "29834d7bd71761a379684ce2715993e9a962b67f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +536,540 @@    def test_constructor_dict_of_ranges(self):\n        # GH 26356\n        data = {'a': range(3), 'b': range(3, 6)}\n\n        result = DataFrame(data)"
  },
  {
    "id" : "d9fe799e-e385-4cbf-bfdf-9a3d4b59d97c",
    "prId" : 27309,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27309#pullrequestreview-259680571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e0c45da-e763-458b-8b6f-f954b22d2769",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What is the order here if YYY precedes Second? Somewhat wary of making assertions about ordering in 2D ",
        "createdAt" : "2019-07-09T17:55:45Z",
        "updatedAt" : "2019-07-16T00:14:05Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "8f576da8-d976-4256-824f-ccf8363dc99f",
        "parentId" : "7e0c45da-e763-458b-8b6f-f954b22d2769",
        "authorId" : null,
        "body" : "Sorry. `XXXX` and `YYYY` will appear after every column included in the first dict. Other than that,  their respective order is undefined.",
        "createdAt" : "2019-07-09T18:14:30Z",
        "updatedAt" : "2019-07-16T00:14:05Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "4592c169-e3d2-40c6-b414-a20478b66f29",
        "parentId" : "7e0c45da-e763-458b-8b6f-f954b22d2769",
        "authorId" : "0c662bd8-117d-4fae-ac4a-91ec3c9dc4d7",
        "body" : "yeah, it's tricky... as mentioned in my general comment, we could probably use `dict.update()` as a guide. As I understand it the guiding principle is insertion order - whatever is inserted first stays where it is. You don't have to deal with reordering things that were already inserted, just tack the new keys on to the end in the order you get them.",
        "createdAt" : "2019-07-09T18:14:39Z",
        "updatedAt" : "2019-07-16T00:14:05Z",
        "lastEditedBy" : "0c662bd8-117d-4fae-ac4a-91ec3c9dc4d7",
        "tags" : [
        ]
      },
      {
        "id" : "e92a9273-d4f2-48c8-931f-d52b2fca45e9",
        "parentId" : "7e0c45da-e763-458b-8b6f-f954b22d2769",
        "authorId" : null,
        "body" : "btw, I really appreciate how responsive you are to PRs. Just wanted to say thank you.",
        "createdAt" : "2019-07-09T18:23:32Z",
        "updatedAt" : "2019-07-16T00:14:05Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "0d194f1047984df534382b7a7b66885fe784ae3b",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1346,1350 @@            {\"First\": 1, \"Second\": 4, \"Third\": 7, \"Fourth\": 10},\n            {\"Second\": 5, \"First\": 2, \"Fourth\": 11, \"Third\": 8},\n            {\"Second\": 6, \"First\": 3, \"Fourth\": 12, \"Third\": 9, \"YYY\": 14, \"XXX\": 13},\n        ]\n        expected = DataFrame("
  },
  {
    "id" : "cbc25abe-f58a-4bed-ad0c-bc56b9ef14ae",
    "prId" : 27309,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27309#pullrequestreview-260888620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0af2cecf-5f03-4204-9dc5-66ea61251d35",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think XXX and YYY need to be switched in order? (to match the input data)",
        "createdAt" : "2019-07-11T18:50:18Z",
        "updatedAt" : "2019-07-16T00:14:05Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d194f1047984df534382b7a7b66885fe784ae3b",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1354,1358 @@                \"Third\": [7, 8, 9],\n                \"Fourth\": [10, 11, 12],\n                \"YYY\": [None, None, 14],\n                \"XXX\": [None, None, 13],\n            }"
  },
  {
    "id" : "ca7fcaa6-7dd8-4ea0-92f9-4f5672b33d2b",
    "prId" : 27999,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27999#pullrequestreview-285154734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e2c93df-982b-42fd-af6f-d2e4acf9fbe0",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Could you make this a separate test?",
        "createdAt" : "2019-08-30T18:13:52Z",
        "updatedAt" : "2020-03-14T23:03:44Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "c1ebe23c-2452-422c-b801-773d41998320",
        "parentId" : "6e2c93df-982b-42fd-af6f-d2e4acf9fbe0",
        "authorId" : "e141fe89-fd1b-4c99-8661-8ba876236c93",
        "body" : "I split the tests into 3 different tests",
        "createdAt" : "2019-09-07T03:49:17Z",
        "updatedAt" : "2020-03-14T23:03:44Z",
        "lastEditedBy" : "e141fe89-fd1b-4c99-8661-8ba876236c93",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8fa453c87863d674959bba4fccc238b7b320cff",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1382,1386 @@        from dataclasses import make_dataclass\n\n        # varying types\n        Point = make_dataclass(\"Point\", [(\"x\", int), (\"y\", int)])\n        HLine = make_dataclass(\"HLine\", [(\"x0\", int), (\"x1\", int), (\"y\", int)])"
  },
  {
    "id" : "86e18fd3-71ac-468c-825a-84c1a8a77650",
    "prId" : 27999,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27999#pullrequestreview-285608326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07924c16-7d61-45a9-980d-b665df6ae0b1",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Sorry didn't notice this tucked away here so ignore comment asking to add, but typically for things that raise we create them as a separate test. So would be better to break this off into a test called `test_constructor_dataclass_with_others_raises` or something to the effect",
        "createdAt" : "2019-08-30T18:19:25Z",
        "updatedAt" : "2020-03-14T23:03:44Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b5f92572-c672-4bcc-a165-63fb6b698534",
        "parentId" : "07924c16-7d61-45a9-980d-b665df6ae0b1",
        "authorId" : "e141fe89-fd1b-4c99-8661-8ba876236c93",
        "body" : "I did as asked",
        "createdAt" : "2019-09-07T03:49:41Z",
        "updatedAt" : "2020-03-14T23:03:44Z",
        "lastEditedBy" : "e141fe89-fd1b-4c99-8661-8ba876236c93",
        "tags" : [
        ]
      },
      {
        "id" : "5b506015-380c-4e86-8254-aca2c1df4860",
        "parentId" : "07924c16-7d61-45a9-980d-b665df6ae0b1",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think Point isn't defined anymore. Can you move the definition of those to somewhere else? Probably just at the top of this file, not sure.",
        "createdAt" : "2019-09-09T15:53:58Z",
        "updatedAt" : "2020-03-14T23:03:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8fa453c87863d674959bba4fccc238b7b320cff",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +1402,1406 @@\n        # expect TypeError\n        with pytest.raises(TypeError):\n            DataFrame([Point(0, 0), {\"x\": 1, \"y\": 0}])\n"
  },
  {
    "id" : "e54f42c6-e3f8-4078-a80d-b5449dd25563",
    "prId" : 30222,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30222#pullrequestreview-331520338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "572dc447-afd6-4846-ae65-ad989ac424c5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can parameterize (later ok too)",
        "createdAt" : "2019-12-12T13:24:38Z",
        "updatedAt" : "2019-12-12T18:25:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ce81fa90-dc3c-4947-bcab-a7addfccedcf",
        "parentId" : "572dc447-afd6-4846-ae65-ad989ac424c5",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "@jbrockmendel : do you plan on addressing this here or later?",
        "createdAt" : "2019-12-12T19:57:17Z",
        "updatedAt" : "2019-12-12T19:57:17Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "c1b9bd54-6bac-4313-befa-f6865c5e96b0",
        "parentId" : "572dc447-afd6-4846-ae65-ad989ac424c5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "later",
        "createdAt" : "2019-12-12T20:58:10Z",
        "updatedAt" : "2019-12-12T20:58:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce531f7b2a386fc449f0c9cdc7fe27e5baa2f6fa",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1726,1730 @@        tm.assert_frame_equal(df, expected)\n\n    def test_constructor_datetimes_with_nulls(self):\n        # gh-15869, GH#11220\n        for arr in ["
  },
  {
    "id" : "7a1263a7-9e53-4e72-9296-28cd458cbaa7",
    "prId" : 30507,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30507#pullrequestreview-337469710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1594c3c6-7730-490b-932a-09d5bef473e7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make this test more generic and add to the EA tests instead (followup ok)",
        "createdAt" : "2020-01-01T03:16:35Z",
        "updatedAt" : "2020-01-01T03:22:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e408206450a4289855c0515ee6be31f7836be40f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2553,2557 @@        assert (res.dtypes == expected_dtypes).all()\n\n    def test_from_2d_ndarray_with_dtype(self):\n        # GH#12513\n        array_dim2 = np.arange(10).reshape((5, 2))"
  },
  {
    "id" : "14548bae-774f-4bda-9320-8c93025625e1",
    "prId" : 32300,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32300#pullrequestreview-365886219",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8293461-0658-48a8-bce8-e2b1acd2c401",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "maybe add a TODO for spliting out the Series test or parameterising.\r\n\r\nas an aside where will the Series and Frame tests go. does this need to move again?",
        "createdAt" : "2020-02-27T18:09:26Z",
        "updatedAt" : "2020-02-27T18:09:27Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "f1d08df8-e922-4165-ab41-dbb0b6bfabc2",
        "parentId" : "b8293461-0658-48a8-bce8-e2b1acd2c401",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> as an aside where will the Series and Frame tests go\r\n\r\nFor tests like this that are mostly testing Frame with a little bit of Series test on the side, it'll probably stay mixed for the foreseeable future.  For tests where we can share/parametrize tests between Series/Frame, maybe tests.generic? (though the tests currently in that directory are not in great shape)",
        "createdAt" : "2020-02-27T18:13:11Z",
        "updatedAt" : "2020-02-27T18:13:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "25fb91ca4763a7eb2e3e955d3a71346c7065b9a9",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +2476,2480 @@        assert df[\"Forecasting\"][0] == dates[0][1]\n\n        s = Series(arr[\"Date\"])\n        assert isinstance(s[0], Timestamp)\n        assert s[0] == dates[0][0]"
  },
  {
    "id" : "faaaa646-ab1f-47e3-9ec2-0b09ece70d75",
    "prId" : 34920,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34920#pullrequestreview-434886278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01f6b16f-b941-44b1-b3bc-5b631954a2d9",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Could you create a separate test function?",
        "createdAt" : "2020-06-21T15:57:25Z",
        "updatedAt" : "2020-06-22T12:44:13Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "48c68fc2-e2a7-4080-a926-56be98a906e8",
        "parentId" : "01f6b16f-b941-44b1-b3bc-5b631954a2d9",
        "authorId" : "d705e2fe-0c9b-4946-83ef-053374236fa1",
        "body" : "Done",
        "createdAt" : "2020-06-22T12:45:05Z",
        "updatedAt" : "2020-06-22T12:45:06Z",
        "lastEditedBy" : "d705e2fe-0c9b-4946-83ef-053374236fa1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a0fd42aa53c835af2c9be16f7cfffc7cb2a9016",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1645,1649 @@\n    def test_constructor_empty_with_string_extension(self):\n        # GH 34915\n        expected = DataFrame(index=[], columns=[\"c1\"], dtype=\"string\")\n        df = DataFrame(columns=[\"c1\"], dtype=\"string\")"
  },
  {
    "id" : "06d29484-ac96-4cf0-9d2d-449121bd755a",
    "prId" : 35966,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35966#pullrequestreview-480188547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4abb658b-ca66-4d17-8f64-39a504d33678",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a test for Interval as well",
        "createdAt" : "2020-09-01T23:43:46Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "320e8d3ce5baac0d212f3980eba7c429e44cc297",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +720,724 @@    @pytest.mark.parametrize(\n        \"data,dtype\",\n        [\n            (pd.Period(\"2012-01\", freq=\"M\"), \"period[M]\"),\n            (pd.Period(\"2012-02-01\", freq=\"D\"), \"period[D]\"),"
  },
  {
    "id" : "6f1988cb-1a9e-47dc-8270-63885cf0a443",
    "prId" : 35966,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35966#pullrequestreview-483168569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8dd17c9-e7c2-48df-9a39-6a5cbc03c5fb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have sufficient coverage in a Series for this?",
        "createdAt" : "2020-09-01T23:45:20Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b61ad16f-1d7e-4fe7-b31c-915fc52ca9f7",
        "parentId" : "a8dd17c9-e7c2-48df-9a39-6a5cbc03c5fb",
        "authorId" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "body" : "Not sure what you are asking here?",
        "createdAt" : "2020-09-04T19:44:57Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "tags" : [
        ]
      },
      {
        "id" : "cc8e4f44-14fa-4f84-adb4-774b51d739ad",
        "parentId" : "a8dd17c9-e7c2-48df-9a39-6a5cbc03c5fb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I mean if we do ```pd.Series({0: pd.Period(...)})``` is this tested?",
        "createdAt" : "2020-09-04T22:00:47Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "950420e7-ed1f-4c1b-9b6d-ee2fe3ff3824",
        "parentId" : "a8dd17c9-e7c2-48df-9a39-6a5cbc03c5fb",
        "authorId" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "body" : "It looks like that already works correctly on the existing master branch and is unaffected by the changes of this PR. \r\n\r\n```python\r\npd.Series({0: pd.Period('2020-01')})\r\n\r\n0    2020-01\r\ndtype: period[M]\r\n```\r\n\r\nBut I don't know where the Series construction is tested, so I'm not sure if there is coverage yet. I'm happy to do whatever but would need more info from you on where to check for existing tests / where to create a new one.",
        "createdAt" : "2020-09-04T23:10:11Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "tags" : [
        ]
      },
      {
        "id" : "ab63aac4-8cc0-487c-b190-aa6bf8277a9a",
        "parentId" : "a8dd17c9-e7c2-48df-9a39-6a5cbc03c5fb",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "Series tests are in `pandas/tests/series/test_period.py` and also \r\nhttps://github.com/pandas-dev/pandas/blob/9820c426a035495ca14dfb0fefe873e96f7483e0/pandas/tests/series/test_constructors.py#L1022-L1060\r\nI didn't see `pd.Series({0: pd.Period(...)})` but might have missed it",
        "createdAt" : "2020-09-04T23:38:22Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      },
      {
        "id" : "c41348ef-a9e8-442a-bbee-ad9218dd3fbc",
        "parentId" : "a8dd17c9-e7c2-48df-9a39-6a5cbc03c5fb",
        "authorId" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "body" : "Great, thank you, I added a test",
        "createdAt" : "2020-09-06T19:52:22Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "d17a0f86-ff19-4f3c-9e85-22a616d73a7b",
        "tags" : [
        ]
      }
    ],
    "commit" : "320e8d3ce5baac0d212f3980eba7c429e44cc297",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +722,726 @@        [\n            (pd.Period(\"2012-01\", freq=\"M\"), \"period[M]\"),\n            (pd.Period(\"2012-02-01\", freq=\"D\"), \"period[D]\"),\n            (Interval(left=0, right=5), IntervalDtype(\"int64\")),\n            (Interval(left=0.1, right=0.5), IntervalDtype(\"float64\")),"
  },
  {
    "id" : "63d39ac7-f39f-468e-b945-6dfbef73f3ad",
    "prId" : 35966,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35966#pullrequestreview-480189240",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0af4bd77-6b32-40af-b0b1-c47e07a5a030",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "construct the expected dataframe (e.g. use a list of the data) and use `tm.assert_frame_equal`)",
        "createdAt" : "2020-09-01T23:45:59Z",
        "updatedAt" : "2020-09-06T22:33:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "320e8d3ce5baac0d212f3980eba7c429e44cc297",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +730,734 @@        # scalar periods\n        df = DataFrame({\"a\": data}, index=[0])\n        assert df[\"a\"].dtype == dtype\n\n        expected = DataFrame(index=[0], columns=[\"a\"], data=data)"
  },
  {
    "id" : "39de121c-fdba-496a-b6be-f82dd894e904",
    "prId" : 37972,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37972#pullrequestreview-535646114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06f32f34-b731-46d7-8492-59abcc692989",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add string here as well",
        "createdAt" : "2020-11-20T17:36:10Z",
        "updatedAt" : "2020-11-20T17:45:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2ac33465-d32a-4671-bcd7-731f8062f578",
        "parentId" : "06f32f34-b731-46d7-8492-59abcc692989",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "Done",
        "createdAt" : "2020-11-20T17:45:23Z",
        "updatedAt" : "2020-11-20T17:45:28Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3db81ed9492fe13fec2b455f24ae672f299b6bb",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1008,1012 @@        \"data,input_dtype,expected_dtype\",\n        (\n            ([True, False, None], \"boolean\", pd.BooleanDtype),\n            ([1.0, 2.0, None], \"Float64\", pd.Float64Dtype),\n            ([1, 2, None], \"Int64\", pd.Int64Dtype),"
  },
  {
    "id" : "70bd1a07-e007-46f3-a4b8-f17b186b7b76",
    "prId" : 38857,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38857#pullrequestreview-560536117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e5a4d6a-afb8-4f42-bcaf-835f2739cb86",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "may pay to split out this test file as getting kind of big",
        "createdAt" : "2020-12-31T18:55:01Z",
        "updatedAt" : "2021-01-01T21:10:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b0a17d60-6cdc-45aa-b9ef-1370ebb2367a",
        "parentId" : "2e5a4d6a-afb8-4f42-bcaf-835f2739cb86",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ive been thinking that myself.  will address before long",
        "createdAt" : "2020-12-31T19:08:51Z",
        "updatedAt" : "2021-01-01T21:10:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cd0dede8c41488e0452426896e7a64730ae54c9",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +1949,1953 @@        tm.assert_frame_equal(df, expected)\n\n    def test_construct_from_listlikes_mismatched_lengths(self):\n        # invalid (shape)\n        msg = r\"Shape of passed values is \\(6, 2\\), indices imply \\(3, 2\\)\""
  },
  {
    "id" : "97f65da1-d5d0-42a5-8471-92405126ca2f",
    "prId" : 38939,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38939#pullrequestreview-572523433",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b2dbaec-0079-487f-b581-8938fcf967ce",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "test_constructors.py should be in pandas/tests/frame/constructors, \r\n\r\nalso this should be in pandas/tests/frame/constructors/test_from_dict no?",
        "createdAt" : "2021-01-13T13:57:24Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fede2ab6-3a35-4d69-9789-9f0de6b5285c",
        "parentId" : "9b2dbaec-0079-487f-b581-8938fcf967ce",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thats specific to the DataFrame.from_dict method (there's a prominent comment in that file to that effect)\r\n\r\nbut you're right more generally that this file needs to be cleaned/split",
        "createdAt" : "2021-01-20T18:44:29Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "98b6dff1f6a51f1a621b4d99e75dd4aaf32e6d1b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +2312,2316 @@        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\"copy\", [False, True])\n    @td.skip_array_manager_not_yet_implemented\n    def test_dict_nocopy(self, copy, any_nullable_numeric_dtype, any_numpy_dtype):"
  },
  {
    "id" : "4a82628f-613b-4708-a12d-e14b15957ab8",
    "prId" : 38939,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38939#pullrequestreview-613638582",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eba4c703-330d-419f-b891-ca5231aef0bf",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't really understand that comment, which is about non_EA, but the assert itself is only testing that the EA is still a view?",
        "createdAt" : "2021-03-05T16:31:44Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "230cc092-d95b-4d4d-b687-851b0248a6fc",
        "parentId" : "eba4c703-330d-419f-b891-ca5231aef0bf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you see if you can clarify this code/comment a bit?",
        "createdAt" : "2021-03-12T15:26:33Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "842625e4-b1ec-4776-859a-9fb5cce5758b",
        "parentId" : "eba4c703-330d-419f-b891-ca5231aef0bf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "edited.  LMK if still unclear",
        "createdAt" : "2021-03-14T23:37:01Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "08936519-790f-4d39-a045-d56567133f4c",
        "parentId" : "eba4c703-330d-419f-b891-ca5231aef0bf",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Thanks, yes, that clarifies",
        "createdAt" : "2021-03-16T19:23:07Z",
        "updatedAt" : "2021-03-30T22:56:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "98b6dff1f6a51f1a621b4d99e75dd4aaf32e6d1b",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +2364,2368 @@            #  df._mgr.arrays corresponds to df[\"c\"], we just check that exactly\n            #  one of these arrays is `c`.  GH#38939\n            assert sum(x is c for x in df._mgr.arrays) == 1\n            # TODO: we can call check_views if we stop consolidating\n            #  in setitem_with_indexer"
  },
  {
    "id" : "2414f3d0-0f44-4561-a48b-2629b2c2591f",
    "prId" : 39442,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39442#pullrequestreview-577844626",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64d8851b-592d-4291-9ab7-a9deb84c2682",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can you also parametrize over contiguity",
        "createdAt" : "2021-01-27T21:35:37Z",
        "updatedAt" : "2021-01-28T18:54:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "4fd7092c-9a75-407f-aec2-83d567cc9be7",
        "parentId" : "64d8851b-592d-4291-9ab7-a9deb84c2682",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "Like this?",
        "createdAt" : "2021-01-27T22:02:27Z",
        "updatedAt" : "2021-01-28T18:54:37Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      },
      {
        "id" : "fcb8bdfc-65ed-4a58-8a04-472abfa023ad",
        "parentId" : "64d8851b-592d-4291-9ab7-a9deb84c2682",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yes, thanks",
        "createdAt" : "2021-01-27T23:16:14Z",
        "updatedAt" : "2021-01-28T18:54:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "85f0bd405088aec19c0cfe7b6814ace221fe88b5",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1785,1789 @@            dtype=dtype,\n            order=order,\n        )\n        df = DataFrame(na)\n        expected = DataFrame("
  },
  {
    "id" : "ec3acfb3-413b-473f-960a-c65ab5b45eca",
    "prId" : 39442,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39442#pullrequestreview-578701751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "855b6e2b-1938-4c06-b039-cb9754c7322e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do the same with timedelta? not sure if that is broken as well.",
        "createdAt" : "2021-01-28T02:25:44Z",
        "updatedAt" : "2021-01-28T18:54:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "92556d1f-3b13-4c34-ad94-b3a87baa6666",
        "parentId" : "855b6e2b-1938-4c06-b039-cb9754c7322e",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "This uses numpy astype under the hood, is fine. Added tests. \r\n\r\nIs there a way to create a df without a numpy or pandas array which has a dtype other than timedelta64[ns]?\r\nI casted back to compare them",
        "createdAt" : "2021-01-28T18:55:40Z",
        "updatedAt" : "2021-01-28T18:55:41Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      },
      {
        "id" : "43a336e4-2a4a-4216-805f-7281b72b531b",
        "parentId" : "855b6e2b-1938-4c06-b039-cb9754c7322e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "umm not sure i understand what you are asking",
        "createdAt" : "2021-01-28T20:01:49Z",
        "updatedAt" : "2021-01-28T20:01:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d5cbb444-4154-4154-92f4-21a450067893",
        "parentId" : "855b6e2b-1938-4c06-b039-cb9754c7322e",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "Sorry, here an example:\r\n```\r\nexpected = DataFrame(\r\n    [\r\n        [Timedelta(days=1), Timedelta(days=2)],\r\n        [Timedelta(days=3), Timedelta(days=4)]\r\n    ], dtype=\"timedelta64[ms]\"\r\n)\r\n```\r\n\r\nreturns \r\n```\r\n             0            1\r\n0   86400000.0  172800000.0\r\n1  259200000.0  345600000.0\r\n```\r\nwith dtype float\r\nwhile\r\n\r\n```\r\nna = np.array(\r\n    [\r\n        [np.timedelta64(1, 'D'), np.timedelta64(2, 'D')],\r\n        [np.timedelta64(4, 'D'), np.timedelta64(5, 'D')]\r\n    ],\r\n    dtype=\"timedelta64[ms]\",\r\n)\r\ndf = DataFrame(na)\r\n```\r\nreturns \r\n```\r\n       0      1\r\n0 1 days 2 days\r\n1 4 days 5 days\r\n```\r\n\r\nwhere dtype is timedelta64[ms]",
        "createdAt" : "2021-01-28T20:05:07Z",
        "updatedAt" : "2021-01-28T20:05:07Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      },
      {
        "id" : "e2b17a04-3db5-4a96-878b-b9570d9209f9",
        "parentId" : "855b6e2b-1938-4c06-b039-cb9754c7322e",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "Question is if we can create the expected in a way to have timedelta64[ms] without using numpy or pandas array",
        "createdAt" : "2021-01-28T20:05:45Z",
        "updatedAt" : "2021-01-28T20:05:45Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      },
      {
        "id" : "c31a1350-f019-4842-85fc-248199b5ce42",
        "parentId" : "855b6e2b-1938-4c06-b039-cb9754c7322e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i dont think so, no.  if it were float or int we could use a memoryview directly",
        "createdAt" : "2021-01-28T20:08:25Z",
        "updatedAt" : "2021-01-28T20:08:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "152c88a5-6cba-4bfb-aac1-87393c04c4dd",
        "parentId" : "855b6e2b-1938-4c06-b039-cb9754c7322e",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "Casting to timedelta64[ns] may seem a bit odd, but does what we want here, so I would keep the current layout. Thx",
        "createdAt" : "2021-01-28T20:10:42Z",
        "updatedAt" : "2021-01-28T20:10:42Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      },
      {
        "id" : "0e10c9c7-32bf-4427-840c-ecbae92b93b2",
        "parentId" : "855b6e2b-1938-4c06-b039-cb9754c7322e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah agree, i think what you did is fine for the tests.",
        "createdAt" : "2021-01-28T20:11:31Z",
        "updatedAt" : "2021-01-28T20:11:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "85f0bd405088aec19c0cfe7b6814ace221fe88b5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1763,1767 @@        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\"order\", [\"K\", \"A\", \"C\", \"F\"])\n    @pytest.mark.parametrize(\n        \"dtype\","
  }
]