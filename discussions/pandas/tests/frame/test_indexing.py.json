[
  {
    "id" : "f0bb9200-8616-43cc-b185-1d52c76a5e1b",
    "prId" : 19973,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19973#pullrequestreview-100924566",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3569f8f2-bee6-4795-a88f-65008bc332d4",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Reference issue number for both tests.",
        "createdAt" : "2018-03-02T21:48:59Z",
        "updatedAt" : "2018-08-02T10:59:26Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b9649c8957a9e0fdc25a8a1a2a4039eedfeba7e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3136,3140 @@        assert_frame_equal(result, expected)\n\n    def test_scalar_assignment(self):\n        # issue #19843\n        df = pd.DataFrame(index=(0, 1, 2))"
  },
  {
    "id" : "3d8052da-e5a9-40fa-a099-0ab799226b25",
    "prId" : 20770,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20770#pullrequestreview-114242733",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ffb9119-9b35-4512-8e1c-b83544b34604",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you also test on the row dim (maybe make these 2 a separate test), may already be an existing test",
        "createdAt" : "2018-04-21T17:01:04Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "658bb4b2-665a-4857-857e-af76b660ba17",
        "parentId" : "8ffb9119-9b35-4512-8e1c-b83544b34604",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "(done)",
        "createdAt" : "2018-04-23T04:51:10Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "c62973b28b29f2884f27d335b0b93c0440928b82",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +398,402 @@        df = DataFrame(np.random.randn(8, 4))\n        # ix does label-based indexing when having an integer index\n        with pytest.raises(KeyError):\n            df.ix[[-1]]\n"
  },
  {
    "id" : "d8cbbf3d-329d-48d1-9f91-92ec46ac1c61",
    "prId" : 22163,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22163#pullrequestreview-146008034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad81e1f9-d797-4f35-9e32-e052d732636e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "let's strip out the mixed_frame to another function (even though that duplicates some code), bonus can parametrize this test.",
        "createdAt" : "2018-08-08T10:12:46Z",
        "updatedAt" : "2018-08-10T14:11:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "35401969-c608-44af-913e-be6b64730702",
        "parentId" : "ad81e1f9-d797-4f35-9e32-e052d732636e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> bonus can parametrize this test.\r\n\r\nI don't think `tsframe`, `mixed_frame`, `mixed_float`, `mixed_int` are available in the namespace.",
        "createdAt" : "2018-08-08T17:42:37Z",
        "updatedAt" : "2018-08-10T14:11:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ebca56dd-da6d-4590-aad9-1f7a124691fd",
        "parentId" : "ad81e1f9-d797-4f35-9e32-e052d732636e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these need to be made fixtures. this becomes so much easier. ",
        "createdAt" : "2018-08-09T10:36:05Z",
        "updatedAt" : "2018-08-10T14:11:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7541ff4c-7001-45e6-a138-982e165a0c91",
        "parentId" : "ad81e1f9-d797-4f35-9e32-e052d732636e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I agree, am starting to implement this in the test_arithmetic sequence of PRs.  Will update this test when that lands.",
        "createdAt" : "2018-08-09T19:46:49Z",
        "updatedAt" : "2018-08-10T14:11:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8c582b0d-5e77-4fe5-ac4a-8955ef25a9f4",
        "parentId" : "ad81e1f9-d797-4f35-9e32-e052d732636e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k thanks",
        "createdAt" : "2018-08-14T10:43:23Z",
        "updatedAt" : "2018-08-14T10:44:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b62135b945ea015ef5531af8dc9502f6c018511",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +275,279 @@                   self.mixed_float, self.mixed_int]:\n            if compat.PY3 and df is self.mixed_frame:\n                continue\n\n            data = df._get_numeric_data()"
  },
  {
    "id" : "93e1967f-9c66-46a0-ab47-971e8373e723",
    "prId" : 22699,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22699#pullrequestreview-155976869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35c2ae06-b09a-4dea-abb9-afc593336be2",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Same comment as before but just wonder if perhaps the `pytest.mark.filterwarnings` decorator could give flexibility to apply at function level to minimize diff",
        "createdAt" : "2018-09-17T15:24:55Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4990fc2d984b536e5c7c97ad55d4f550ae661867",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +365,369 @@\n        with catch_warnings(record=True):\n            simplefilter(\"ignore\", DeprecationWarning)\n            result = df.ix[[1, 10]]\n            expected = df.ix[Index([1, 10], dtype=object)]"
  },
  {
    "id" : "d9afd412-fd14-4ed4-9437-3a9c552e799b",
    "prId" : 22699,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22699#pullrequestreview-156322279",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1373f5cd-e2fe-442f-b384-ae484c23e645",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "grr....we should just remove all of this .ix bizness",
        "createdAt" : "2018-09-18T11:44:07Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4990fc2d984b536e5c7c97ad55d4f550ae661867",
    "line" : 257,
    "diffHunk" : "@@ -1,1 +1176,1180 @@\n        with catch_warnings(record=True):\n            simplefilter(\"ignore\", DeprecationWarning)\n            df.ix[:3] = b\n            out = b.ix[:3]"
  },
  {
    "id" : "a15b3a8c-f0f7-42f5-9113-53bedd0fa68d",
    "prId" : 24543,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24543#pullrequestreview-188678311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7838ebff-a83e-4be9-95d4-f3adec22f11e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a comment here on what you are checking",
        "createdAt" : "2019-01-02T12:22:54Z",
        "updatedAt" : "2019-01-02T13:37:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a9114eb5-0cef-415b-bd5a-dbeabd3ffb47",
        "parentId" : "7838ebff-a83e-4be9-95d4-f3adec22f11e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "should be covered by the comment 2 lines up",
        "createdAt" : "2019-01-02T13:35:14Z",
        "updatedAt" : "2019-01-02T13:37:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f9aa23ec07127d8adffdb5b20a92977c0ccbd8c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3246,3250 @@        b2 = df._data.blocks[2]\n        assert b1.values.equals(b2.values)\n        if b1.values.values.base is not None:\n            # base being None suffices to assure a copy was made\n            assert id(b1.values.values.base) != id(b2.values.values.base)"
  },
  {
    "id" : "aac67095-219d-4677-8e65-9b8f041fec74",
    "prId" : 25633,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25633#pullrequestreview-212612705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b718f13-5744-4f7f-b8be-b6552a9e9922",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "rather than do this, either parameterize or break to smaller tests",
        "createdAt" : "2019-03-10T17:13:31Z",
        "updatedAt" : "2019-06-27T22:33:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "99db4241-b838-4d62-bf3a-4349f19bdca8",
        "parentId" : "6b718f13-5744-4f7f-b8be-b6552a9e9922",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "I get that, but again: this is only translation, reorg can happen later.",
        "createdAt" : "2019-03-10T17:19:24Z",
        "updatedAt" : "2019-06-27T22:33:15Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "22227e96-e76d-4c85-90ef-1d2e9e8a5f25",
        "parentId" : "6b718f13-5744-4f7f-b8be-b6552a9e9922",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "well, I think this is worthile to do here in this pr",
        "createdAt" : "2019-03-10T17:22:08Z",
        "updatedAt" : "2019-06-27T22:33:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e48d447d87eefed333977d49e8d9e6247f06625",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +230,234 @@        tm.assert_frame_equal(df, expected)\n\n    def test_getitem_boolean(self, float_string_frame, mixed_float_frame,\n                             mixed_int_frame, datetime_frame):\n        # boolean indexing"
  },
  {
    "id" : "0b7741af-4f55-4fcc-95f2-6c68ea56893b",
    "prId" : 25633,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25633#pullrequestreview-216493057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e54e826-da53-4425-9fc3-aa5f543aa319",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this i not what i meant. you want a single test that is parametrized.",
        "createdAt" : "2019-03-10T21:43:30Z",
        "updatedAt" : "2019-06-27T22:33:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "87123833-d19e-4a82-9cbb-0d0cbfe6d9cb",
        "parentId" : "8e54e826-da53-4425-9fc3-aa5f543aa319",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Well, these fixtures can't be parametrized without some serious gymnastics that I'm not going to go into here (limitations on using fixtures as parameters, limitations on combining fixtures into a fixture with e.g. yield, having to paste fixtures together in conftest [not as easy as for DTYPES], importing fixtures directly).\r\n\r\nIn this PR, you can have a simple translation, or a simple split.",
        "createdAt" : "2019-03-11T06:39:19Z",
        "updatedAt" : "2019-06-27T22:33:15Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "3819558b-494e-4532-83a0-fb3cfd703536",
        "parentId" : "8e54e826-da53-4425-9fc3-aa5f543aa319",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "let's revert this particular section (IOW leave the loop). this is getting too much / messy.",
        "createdAt" : "2019-03-20T01:29:14Z",
        "updatedAt" : "2019-06-27T22:33:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e48d447d87eefed333977d49e8d9e6247f06625",
    "line" : 203,
    "diffHunk" : "@@ -1,1 +265,269 @@            assert_frame_equal(subframe_obj, subframe)\n\n        # test df[df > 0]\n        for df in [datetime_frame, float_string_frame,\n                   mixed_float_frame, mixed_int_frame]:"
  },
  {
    "id" : "20ff33aa-4bd3-41a3-a896-cb06119f5e9d",
    "prId" : 25633,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25633#pullrequestreview-244648026",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4eecefb8-bec4-4bd2-ade3-211f5e7c3928",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you split this test",
        "createdAt" : "2019-06-02T23:46:14Z",
        "updatedAt" : "2019-06-27T22:33:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e48d447d87eefed333977d49e8d9e6247f06625",
    "line" : 723,
    "diffHunk" : "@@ -1,1 +1329,1333 @@        tm.assert_frame_equal(exp, f)\n\n        # slice of mixed-frame\n        with catch_warnings(record=True):\n            simplefilter(\"ignore\", FutureWarning)"
  },
  {
    "id" : "c617eec5-0b87-4263-a208-ffe145c06685",
    "prId" : 25633,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25633#pullrequestreview-244648026",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36d9ceeb-6b16-411a-9ac8-201905b4b746",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you split",
        "createdAt" : "2019-06-02T23:47:17Z",
        "updatedAt" : "2019-06-27T22:33:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e48d447d87eefed333977d49e8d9e6247f06625",
    "line" : 1146,
    "diffHunk" : "@@ -1,1 +2445,2449 @@        assert_frame_equal(result, df)\n\n    def test_xs(self, float_frame, datetime_frame):\n        idx = float_frame.index[5]\n        xs = float_frame.xs(idx)"
  },
  {
    "id" : "7d4866f4-24f9-40cd-8a24-d8c80f0da545",
    "prId" : 25633,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25633#pullrequestreview-244648026",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01beb4a4-857b-4fca-a954-18ab31cd9ec5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you split",
        "createdAt" : "2019-06-02T23:47:23Z",
        "updatedAt" : "2019-06-27T22:33:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e48d447d87eefed333977d49e8d9e6247f06625",
    "line" : 1184,
    "diffHunk" : "@@ -1,1 +2594,2598 @@            df[df > 0.3] = 1\n\n    def test_where(self, float_string_frame, mixed_float_frame,\n                   mixed_int_frame):\n        default_frame = DataFrame(np.random.randn(5, 3),"
  },
  {
    "id" : "68fe7e1f-86de-498a-a213-4fa36ef3ee08",
    "prId" : 26438,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26438#pullrequestreview-239211742",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8532c488-c66f-404c-8439-81df06422694",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think we should change these to assert_produces_warning(FutureWarning) as its more consistent with our style (could be a followup too)",
        "createdAt" : "2019-05-18T14:01:09Z",
        "updatedAt" : "2019-05-18T14:01:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cb443d9b-3454-4dd0-877a-aa4c7faafd12",
        "parentId" : "8532c488-c66f-404c-8439-81df06422694",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "i'm not so sure.. shouldn't we only require `assert_produces_warning` for a test that specifically tests that the warning is raised (preferably with a message check) and use `@pytest.mark.filterwarnings` for all the tests where it's encountered?",
        "createdAt" : "2019-05-18T15:51:52Z",
        "updatedAt" : "2019-05-18T15:51:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "4be56acd-40bd-4731-b791-e08522cee93c",
        "parentId" : "8532c488-c66f-404c-8439-81df06422694",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we are inconsistent in the code base for sure. but I think we *mostly* use ``assert_produces_warning``, meaning if we suddently took out the warning (or changed it), these *should* fail. checking the test of the message is ok maybe in a single case (otherwise this is overkill)",
        "createdAt" : "2019-05-18T15:56:59Z",
        "updatedAt" : "2019-05-18T15:56:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3e4ce29c-10fd-4df3-b870-47b8b74bffbc",
        "parentId" : "8532c488-c66f-404c-8439-81df06422694",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "yeah... i think we do agree, i.e. that `with catch_warnings` should not be used and replaced with either `assert_produces_warnings` or `@pytest.mark.filterwarnings`. maybe a different viewpoint on which and how often each are used?",
        "createdAt" : "2019-05-18T16:21:34Z",
        "updatedAt" : "2019-05-18T16:21:35Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "ea762d75-c852-40d2-8c34-a96f6d29438c",
        "parentId" : "8532c488-c66f-404c-8439-81df06422694",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Whatever the discussion / decision what is best here (for new code), I don't think it is worth updating code that we won't touch until we remove it in some months / next year.\r\n\r\nOn the actual discussion, I think indeed rather the filterwarnings with pytest is the way to go for those nowadays (certainly if you need to apply it to a lot of existing cases). Of course in addition to a few tests with assert_produces_warning to actually test the warning. ",
        "createdAt" : "2019-05-18T16:26:53Z",
        "updatedAt" : "2019-05-18T16:26:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e8339d47-ab3a-4f47-912d-c0d199567701",
        "parentId" : "8532c488-c66f-404c-8439-81df06422694",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> Whatever the discussion / decision what is best here (for new code), I don't think it is worth updating code that we won't touch until we remove it in some months / next year.\r\n\r\nagreed. as @jreback said, could be a follow-up. I don't mind looking into that.",
        "createdAt" : "2019-05-18T16:44:27Z",
        "updatedAt" : "2019-05-18T16:44:27Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "d2e64e2d-73b1-4a11-869f-cb76d1aad388",
        "parentId" : "8532c488-c66f-404c-8439-81df06422694",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : ">  could be a follow-up. I don't mind looking into that.\r\n\r\nYou are free to spend your time how you want of course ;-) but I personally don't think it is worth the time. We will be removing this code shortly anyhow. There are plenty of other testing related things that are more useful IMO.\r\n\r\nAnd wanted to suggest: like documenting our standard what to do in those case, but it is actually already quite good documented: http://pandas-docs.github.io/pandas-docs-travis/development/contributing.html#testing-warnings (and so exactly how you suggested it above)",
        "createdAt" : "2019-05-18T19:39:38Z",
        "updatedAt" : "2019-05-18T19:39:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "074eebe7-f301-489d-ba57-997416b8c4f8",
        "parentId" : "8532c488-c66f-404c-8439-81df06422694",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "i'll need to check, but from memory I think `.ix` is used in a few tests to generate the expected result for testing the other indexers.\r\n\r\nSo maybe the first step would be to eliminate these, (would need to be done before .ix deprecation anyway). This would allow the removal of some catch_warnings.\r\n\r\nI would guess that in theory it should be possible to remove all `.ix` occurrences from test files outside the test_ix module.",
        "createdAt" : "2019-05-18T20:23:41Z",
        "updatedAt" : "2019-05-18T20:23:41Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "aff04814-3dda-4b85-b1d1-981321bb81c6",
        "parentId" : "8532c488-c66f-404c-8439-81df06422694",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yep that would be great; best to just use iloc for the expected",
        "createdAt" : "2019-05-18T20:28:30Z",
        "updatedAt" : "2019-05-18T20:28:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb93f63e04091ab861ffdc7d45df3cedd2556354",
    "line" : 283,
    "diffHunk" : "@@ -1,1 +1137,1141 @@        df = df_orig.copy()\n\n        with catch_warnings(record=True):\n            simplefilter(\"ignore\", FutureWarning)\n            df.ix[:, 0] = b"
  }
]