[
  {
    "id" : "6dd28ee7-80ff-4aa1-a3f9-c03d08845b9f",
    "prId" : 18363,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18363#pullrequestreview-77649698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68801de4-5ad1-4ff1-8e68-782c7600244a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the 2nd example you had in the issue as well, e.g. ``df[['a', 'b']].stack(0)`` (though different starting frame as well i think.",
        "createdAt" : "2017-11-19T15:40:16Z",
        "updatedAt" : "2017-11-19T16:15:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1099f53f-bd19-4e26-9ad2-e786a05bb498",
        "parentId" : "68801de4-5ad1-4ff1-8e68-782c7600244a",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "(done)\r\nping",
        "createdAt" : "2017-11-19T17:48:44Z",
        "updatedAt" : "2017-11-19T17:48:44Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d267a27b98a7e3d8645ef562960a3ddbe04ad40",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +147,151 @@        df = DataFrame(1, index=levels[0],\n                       columns=MultiIndex.from_product(levels[1:]))\n        result = df.stack(1)\n        expected = DataFrame(1, index=MultiIndex.from_product([levels[0],\n                                                               levels[2]]),"
  },
  {
    "id" : "d9131183-e344-4f17-8aef-d57e5d13f5d6",
    "prId" : 18460,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18460#pullrequestreview-84131522",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89d3b475-a0d2-418c-9a1f-01e9361f3f9c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we have an exact expected frame and assert_frame_equal (maybe more code, but it really locks it down to the exact result).",
        "createdAt" : "2017-11-24T19:45:21Z",
        "updatedAt" : "2018-01-15T14:17:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "59173001-890a-4ba3-a87b-05414bf8538f",
        "parentId" : "89d3b475-a0d2-418c-9a1f-01e9361f3f9c",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "The frame _is_ an exact copy, but ``assert_frame_equal`` fails (two lines below) because of #18455 . So until that is fixed, I guess I can only add a check on the dtypes.",
        "createdAt" : "2017-11-24T19:55:44Z",
        "updatedAt" : "2018-01-15T14:17:33Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "3df29ea0-7881-4ce1-b7e0-ff194942a96b",
        "parentId" : "89d3b475-a0d2-418c-9a1f-01e9361f3f9c",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "> So until that is fixed, I guess I can only add a check on the dtypes.\r\n\r\n(shall I?)",
        "createdAt" : "2017-11-24T20:04:07Z",
        "updatedAt" : "2018-01-15T14:17:33Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "8b6cb905-39c8-4ef8-8d45-74ec8576ad84",
        "parentId" : "89d3b475-a0d2-418c-9a1f-01e9361f3f9c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think worthwhile to fix #18455 first actually.",
        "createdAt" : "2017-11-24T20:07:23Z",
        "updatedAt" : "2018-01-15T14:17:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6e4b2569-f9d1-43e7-8271-9942c9166d08",
        "parentId" : "89d3b475-a0d2-418c-9a1f-01e9361f3f9c",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "@jreback : seems like #18455 won't be fixed before #18600, #18626, #18769... and the present PR (probably together with #18562) is hanging only for a workaround in a test. Still want to wait?",
        "createdAt" : "2017-12-18T13:29:36Z",
        "updatedAt" : "2018-01-15T14:17:33Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "a629b82cbec104c0fe12fd7439f2627cae1a6ea2",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +603,607 @@            cols = pd.MultiIndex.from_product([[0, 1], col_level])\n            expected = pd.DataFrame(exp_data.reshape(3, 6),\n                                    index=idx_level, columns=cols)\n            # Broken (GH 18455):\n            # tm.assert_frame_equal(result, expected)"
  },
  {
    "id" : "8b23b6ff-f9c5-44dd-869b-10658dfc94f3",
    "prId" : 18460,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18460#pullrequestreview-88830664",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a3e4386-5c19-4724-9d48-1c82c5a40697",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I believe you had 2 cases for #18562 does this cover both?",
        "createdAt" : "2018-01-15T13:56:26Z",
        "updatedAt" : "2018-01-15T14:17:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "236e1ecf-141a-4439-919c-a26b3fef73e8",
        "parentId" : "5a3e4386-5c19-4724-9d48-1c82c5a40697",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "yes, they are the two \"cols\" values",
        "createdAt" : "2018-01-15T14:09:30Z",
        "updatedAt" : "2018-01-15T14:17:33Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "a629b82cbec104c0fe12fd7439f2627cae1a6ea2",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +614,618 @@    @pytest.mark.parametrize(\"cols\", [['A', 'C'], slice(None)])\n    def test_unstack_unused_level(self, cols):\n        # GH 18562 : unused labels on the unstacked level\n        df = pd.DataFrame([[2010, 'a', 'I'],\n                           [2011, 'b', 'II']],"
  },
  {
    "id" : "9b07e51a-87bb-4a1c-8f0d-9b5c6360361c",
    "prId" : 22093,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22093#pullrequestreview-141538289",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dacf0544-c67f-41e9-ab21-71dc1c1ddfea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think ordered is a fixture already",
        "createdAt" : "2018-07-28T12:50:19Z",
        "updatedAt" : "2018-07-28T16:31:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3c7cb537-66ec-4369-845b-224a698c5989",
        "parentId" : "dacf0544-c67f-41e9-ab21-71dc1c1ddfea",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not in conftest. ",
        "createdAt" : "2018-07-28T16:19:16Z",
        "updatedAt" : "2018-07-28T16:31:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7c55a6d6-b43c-4111-b6a2-a3e8b8af1ac2",
        "parentId" : "dacf0544-c67f-41e9-ab21-71dc1c1ddfea",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pandas/tests//arrays/categorical/conftest.py\r\n\r\nmaybe can simply move it to top level and use it",
        "createdAt" : "2018-07-29T15:41:41Z",
        "updatedAt" : "2018-07-29T15:41:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3d37c944-8aeb-4a37-8c1d-2906307655f5",
        "parentId" : "dacf0544-c67f-41e9-ab21-71dc1c1ddfea",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Honestly, I would love to create a helper in `utils/testing.py` to generate boolean fixtures like these.  Not sure if it's possible, but just throwing it out there for thought.",
        "createdAt" : "2018-07-30T13:44:39Z",
        "updatedAt" : "2018-07-30T13:44:46Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7d2e265c2b2fca06f432ae9cdd3c9288469a1d6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +856,860 @@        assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize('ordered', [False, True])\n    @pytest.mark.parametrize('labels', [list(\"yxz\"), list(\"yxy\")])\n    def test_stack_preserve_categorical_dtype(self, ordered, labels):"
  },
  {
    "id" : "fcc35c0c-5c7c-45de-a3fe-b7c07b6126dd",
    "prId" : 30838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30838#pullrequestreview-340705972",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d75c0c4-6c19-4d5a-b066-d14cf9bbfb67",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'd feel slightly more comfortable if this were constructed directly, rather than via unstack. If you have time to update that, then great. Otherwise, I'll merge before tagging the release in a few hours.",
        "createdAt" : "2020-01-09T15:55:40Z",
        "updatedAt" : "2020-01-09T18:09:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "41356598-163f-4a70-8c7e-32d0afad64bb",
        "parentId" : "2d75c0c4-6c19-4d5a-b066-d14cf9bbfb67",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "@TomAugspurger \r\n\r\n```\r\nexpected = pd.DataFrame(\r\n    [[9.5, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 8.0]],\r\n    pd.Index([\"Alice\", \"Bob\"], name=\"name\"),\r\n    columns=pd.MultiIndex.from_tuples(\r\n        [\r\n            (\"score\", \"female\", False, 0),\r\n            (\"score\", \"female\", True, 0),\r\n            (\"score\", \"male\", False, 0),\r\n            (\"score\", \"male\", True, 0),\r\n        ],\r\n        names=[None, \"gender\", \"employed\", \"kids\"],\r\n    ),\r\n)\r\n```\r\n\r\nwould this be ok?",
        "createdAt" : "2020-01-09T16:14:17Z",
        "updatedAt" : "2020-01-09T18:09:35Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "c70913bb-c1c8-42f8-81d9-14b1af2d9d0d",
        "parentId" : "2d75c0c4-6c19-4d5a-b066-d14cf9bbfb67",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "don't need the pds though.",
        "createdAt" : "2020-01-09T16:15:20Z",
        "updatedAt" : "2020-01-09T18:09:35Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "dd4e85bc-7375-4226-a042-18abfb09c29a",
        "parentId" : "2d75c0c4-6c19-4d5a-b066-d14cf9bbfb67",
        "authorId" : "6100017c-0d5f-44dd-a219-2adda7cf6936",
        "body" : "I can change that. What is meant by pds ?",
        "createdAt" : "2020-01-09T17:02:30Z",
        "updatedAt" : "2020-01-09T18:09:35Z",
        "lastEditedBy" : "6100017c-0d5f-44dd-a219-2adda7cf6936",
        "tags" : [
        ]
      },
      {
        "id" : "10bc0220-47b1-4070-91d9-fe304ba9ae94",
        "parentId" : "2d75c0c4-6c19-4d5a-b066-d14cf9bbfb67",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "Index, MultiIndex and DataFrame are imported. so adding the pd prefix isn't necessary.",
        "createdAt" : "2020-01-09T17:04:38Z",
        "updatedAt" : "2020-01-09T18:09:35Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "9b01e374-0f87-4e30-b47b-dc0d6a0e1ac3",
        "parentId" : "2d75c0c4-6c19-4d5a-b066-d14cf9bbfb67",
        "authorId" : "6100017c-0d5f-44dd-a219-2adda7cf6936",
        "body" : "Ok. Got it. Thanks",
        "createdAt" : "2020-01-09T17:07:32Z",
        "updatedAt" : "2020-01-09T18:09:35Z",
        "lastEditedBy" : "6100017c-0d5f-44dd-a219-2adda7cf6936",
        "tags" : [
        ]
      },
      {
        "id" : "9ac663ca-b88b-4d3a-abc4-409005be2343",
        "parentId" : "2d75c0c4-6c19-4d5a-b066-d14cf9bbfb67",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I also missed `index=` so should be\r\n\r\n```\r\n    expected = DataFrame(\r\n        [[9.5, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 8.0]],\r\n        index=Index([\"Alice\", \"Bob\"], name=\"name\"),\r\n        columns=MultiIndex.from_tuples(\r\n            [\r\n                (\"score\", \"female\", False, 0),\r\n                (\"score\", \"female\", True, 0),\r\n                (\"score\", \"male\", False, 0),\r\n                (\"score\", \"male\", True, 0),\r\n            ],\r\n            names=[None, \"gender\", \"employed\", \"kids\"],\r\n        ),\r\n    )\r\n```",
        "createdAt" : "2020-01-09T17:07:51Z",
        "updatedAt" : "2020-01-09T18:09:35Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "5eefaeed-e9d7-4dc6-b2aa-9281b8e10483",
        "parentId" : "2d75c0c4-6c19-4d5a-b066-d14cf9bbfb67",
        "authorId" : "6100017c-0d5f-44dd-a219-2adda7cf6936",
        "body" : "Added this",
        "createdAt" : "2020-01-09T17:54:28Z",
        "updatedAt" : "2020-01-09T18:09:35Z",
        "lastEditedBy" : "6100017c-0d5f-44dd-a219-2adda7cf6936",
        "tags" : [
        ]
      }
    ],
    "commit" : "2809c5518564a5b4987455be31ae6ae6674629dc",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1144,1148 @@    df = df.set_index([\"name\", \"employed\", \"kids\", \"gender\"])\n    df = df.unstack([\"gender\"], fill_value=0)\n    expected = df.unstack(\"employed\", fill_value=0).unstack(\"kids\", fill_value=0)\n    result = df.unstack([\"employed\", \"kids\"], fill_value=0)\n    expected = DataFrame("
  }
]