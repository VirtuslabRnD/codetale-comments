[
  {
    "id" : "5ad2f2d3-06fa-481d-ba32-961fe33f7fcf",
    "prId" : 19611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19611#pullrequestreview-97308205",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4164a6dc-0b0d-448b-96b6-30313e7ce853",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does this represent a change in user facing API?",
        "createdAt" : "2018-02-16T18:38:51Z",
        "updatedAt" : "2018-02-16T23:34:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "598fb322-740e-4cdb-af13-a1fab1b6d9ca",
        "parentId" : "4164a6dc-0b0d-448b-96b6-30313e7ce853",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No, just a case that is not currently tested.  I made a mistake in an early commit in this PR; this test would have caught it.",
        "createdAt" : "2018-02-16T20:33:10Z",
        "updatedAt" : "2018-02-16T23:34:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "118cd5d47ea025aad5e5759ea0a34cf86e0a390a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +74,78 @@\nclass TestFrameFlexArithmetic(object):\n    def test_df_add_flex_filled_mixed_dtypes(self):\n        # GH#19611\n        dti = pd.date_range('2016-01-01', periods=3)"
  },
  {
    "id" : "05e3ea6c-c401-49e9-babf-35ccd95ae9df",
    "prId" : 22267,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22267#pullrequestreview-145052952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7026d1ab-1673-4c5b-b1b5-88388d14b58b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "woa needs parametrization big time :>",
        "createdAt" : "2018-08-09T22:41:21Z",
        "updatedAt" : "2018-08-09T22:42:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e627203a-fd7a-4bc5-b980-dd0bc131e54f",
        "parentId" : "7026d1ab-1673-4c5b-b1b5-88388d14b58b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Very much so.",
        "createdAt" : "2018-08-09T22:43:55Z",
        "updatedAt" : "2018-08-09T22:43:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f18ba2e9652d2a2cca6023f5bcd91a18ee92224d",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +111,115 @@            aliases = {'div': 'truediv'}\n\n        for op in ops:\n            try:\n                alias = aliases.get(op, op)"
  },
  {
    "id" : "e6ecb31e-53ed-4a05-b3e8-85b92f03ae35",
    "prId" : 22267,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22267#pullrequestreview-145053778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d99de1b-e733-4d96-b6e8-a436b52afbb4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "aren't you moving things *to* ``pandas/tests/arithmetic`` ?  ",
        "createdAt" : "2018-08-09T22:41:58Z",
        "updatedAt" : "2018-08-09T22:42:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "24a6ec20-4696-4da9-9361-97fd0c5f0cf3",
        "parentId" : "2d99de1b-e733-4d96-b6e8-a436b52afbb4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The focus is on tests that can be shared across Index/Series/DataFrame(/EA).  `flex` ops don't satisfy that criterion.",
        "createdAt" : "2018-08-09T22:45:05Z",
        "updatedAt" : "2018-08-09T22:45:05Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d7edab4a-dbf7-48fa-a479-01313bc75ab8",
        "parentId" : "2d99de1b-e733-4d96-b6e8-a436b52afbb4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "In case unclear, the tests added to tests.frame.test_arithmetic were moved from tests.frame.test_operators; so this is a strictly better location.",
        "createdAt" : "2018-08-09T22:45:46Z",
        "updatedAt" : "2018-08-09T22:45:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "92114b04-80f8-4b6d-ae3c-fe9295512b3f",
        "parentId" : "2d99de1b-e733-4d96-b6e8-a436b52afbb4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah its ok.",
        "createdAt" : "2018-08-09T22:47:52Z",
        "updatedAt" : "2018-08-09T22:47:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f18ba2e9652d2a2cca6023f5bcd91a18ee92224d",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +0,4 @@# -*- coding: utf-8 -*-\nimport operator\n\nimport pytest"
  },
  {
    "id" : "25a91410-1260-4c70-8691-7ee083fbb7e0",
    "prId" : 22694,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22694#pullrequestreview-155711883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "431edfc4-e907-408a-8e26-fbfcea230610",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I generally prefer that the `expected` be as explicit as possible i.e., write out the actual result of those \"sums\" instead of the expression.  You can add a comment if needed to describe that we expected `dti + tdi` and `tdi + tdi`.",
        "createdAt" : "2018-09-14T04:50:34Z",
        "updatedAt" : "2018-09-14T04:50:35Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "6edbd0b8-5471-4b34-bd82-8ca45a533ebe",
        "parentId" : "431edfc4-e907-408a-8e26-fbfcea230610",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I agree with you generally, but these types of tests its ok.",
        "createdAt" : "2018-09-15T11:52:53Z",
        "updatedAt" : "2018-09-15T11:52:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f31407c7ad778d64e8b09a373b63513d6f45c7cf",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +110,114 @@        result = df.add(tser, axis=0)\n        expected = pd.DataFrame({0: dti + tdi,\n                                 1: tdi + tdi})\n        tm.assert_frame_equal(result, expected)\n"
  },
  {
    "id" : "9069c2cf-73db-41ea-aae0-aa48a4077dbf",
    "prId" : 22696,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22696#pullrequestreview-155650812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98be4eef-985a-45e0-ad1d-304ae1440c6c",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Any relevant error message to check for?",
        "createdAt" : "2018-09-14T04:54:28Z",
        "updatedAt" : "2018-10-02T01:38:36Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "01f0401b-a54f-48bb-a22c-1869f5b98820",
        "parentId" : "98be4eef-985a-45e0-ad1d-304ae1440c6c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not really.  It may be worth standardizing these once they all happen in one place, but at the moment its a hodge-podge.",
        "createdAt" : "2018-09-14T20:29:47Z",
        "updatedAt" : "2018-10-02T01:38:36Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6f7fbf261e7528e32721b6707c303bd8d71ef7d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +275,279 @@        other = pd.DataFrame([1, 2, 3], index=tdi)  # indexed like `df`\n        with pytest.raises(TypeError):\n            df + other\n        with pytest.raises(TypeError):\n            other + df"
  },
  {
    "id" : "d94eed26-a997-42ea-8c9d-22348547859d",
    "prId" : 22736,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22736#pullrequestreview-156406806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11eef813-b5ea-4b7f-b902-f900fd3024a5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "might be more clear to move these to a separate test (from here down)",
        "createdAt" : "2018-09-18T11:52:55Z",
        "updatedAt" : "2018-09-26T09:19:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ef60f709-3216-4dcb-8352-9df064082871",
        "parentId" : "11eef813-b5ea-4b7f-b902-f900fd3024a5",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "I don't want to get into orthogonal changes here. I haven't changed anything about this except removing the indentation. This goes for the test split requested below as well.",
        "createdAt" : "2018-09-18T14:46:56Z",
        "updatedAt" : "2018-09-26T09:19:27Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0b82a7cbcf1cf47cb660cb3e8f7ebe0427bc63d",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +153,157 @@        f = getattr(operator, op)\n\n        # vs mix int\n        result = getattr(mixed_int_frame, op)(2 + mixed_int_frame)\n        exp = f(mixed_int_frame, 2 + mixed_int_frame)"
  },
  {
    "id" : "36c8fb63-bdb5-4a95-8083-579d638d31ac",
    "prId" : 22736,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22736#pullrequestreview-157151165",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78952c38-70a7-4c71-b939-c3e70ebd2ee1",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Broke up the test like you wanted",
        "createdAt" : "2018-09-20T08:07:51Z",
        "updatedAt" : "2018-09-26T09:19:27Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0b82a7cbcf1cf47cb660cb3e8f7ebe0427bc63d",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +148,152 @@        _check_mixed_float(result, dtype=dict(C=None))\n\n    @pytest.mark.parametrize('op', ['__add__', '__sub__', '__mul__'])\n    def test_arith_flex_frame_mixed(self, op, int_frame, mixed_int_frame,\n                                    mixed_float_frame):"
  },
  {
    "id" : "36e273e4-fc26-4595-92af-d099d4f8be70",
    "prId" : 22736,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22736#pullrequestreview-157151165",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73e82e20-80df-40d5-a5e2-3a7c30f44c8a",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "> can you add a comment here on what this is testing\r\n\r\nAdded (and expanded)",
        "createdAt" : "2018-09-20T08:08:48Z",
        "updatedAt" : "2018-09-26T09:19:27Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0b82a7cbcf1cf47cb660cb3e8f7ebe0427bc63d",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +182,186 @@        op = all_arithmetic_operators\n\n        # Check that arrays with dim >= 3 raise\n        for dim in range(3, 6):\n            arr = np.ones((1,) * dim)"
  },
  {
    "id" : "f9cf62e0-bd35-4536-8a1c-6231fe8e2c5f",
    "prId" : 22736,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22736#pullrequestreview-158896124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "736d8be0-e065-4439-a189-1d9241979acf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jbrockmendel pls have a look here",
        "createdAt" : "2018-09-23T13:07:54Z",
        "updatedAt" : "2018-09-26T09:19:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ffc46d0b-cea2-4512-bf36-c1939f68c74b",
        "parentId" : "736d8be0-e065-4439-a189-1d9241979acf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is fine.  The alternative would be to do a lookup in core.ops, but I think for a reader who is unfamiliar with core.ops this is clearer.",
        "createdAt" : "2018-09-26T00:05:12Z",
        "updatedAt" : "2018-09-26T09:19:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ef0d5731-fb8e-4bff-829d-d7e50a62bc30",
        "parentId" : "736d8be0-e065-4439-a189-1d9241979acf",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Modified comment slightly",
        "createdAt" : "2018-09-26T09:03:49Z",
        "updatedAt" : "2018-09-26T09:19:41Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0b82a7cbcf1cf47cb660cb3e8f7ebe0427bc63d",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +135,139 @@            # r-versions not in operator-stdlib; get op without \"r\" and invert\n            if op.startswith('__r'):\n                return getattr(operator, op.replace('__r', '__'))(y, x)\n            return getattr(operator, op)(x, y)\n"
  },
  {
    "id" : "c355dde0-e6bc-40c0-a65a-1a2e8396c719",
    "prId" : 23000,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23000#pullrequestreview-162110278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea80098a-e71c-4091-a44e-d968a0cf5571",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have sufficient converage for a broadcast op with a non-homogenous frame? ",
        "createdAt" : "2018-10-05T12:20:15Z",
        "updatedAt" : "2018-10-06T16:43:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4b8a567d-efdb-41c8-bb8d-3bbb85c670ca",
        "parentId" : "ea80098a-e71c-4091-a44e-d968a0cf5571",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "its pretty scattered.  specifically within this module its pretty bare",
        "createdAt" : "2018-10-05T16:25:30Z",
        "updatedAt" : "2018-10-06T16:43:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "01ab2b505b40f00e7ef1a8f950b3f5234c8ea7a2",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +100,104 @@\nclass TestFrameFlexArithmetic(object):\n\n    def test_df_add_td64_columnwise(self):\n        # GH#22534 Check that column-wise addition broadcasts correctly"
  },
  {
    "id" : "9b9b8cd0-f423-434e-9d32-0771c56793e4",
    "prId" : 23000,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23000#pullrequestreview-162261921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f86e0f1e-2fe4-42b2-b2bd-b843f7690316",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you expand to use the all_arithmetic_ops fixture? (or some of them)?",
        "createdAt" : "2018-10-06T15:54:09Z",
        "updatedAt" : "2018-10-06T16:43:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ee5fd153-df03-4cf1-9606-31ebfabb5410",
        "parentId" : "f86e0f1e-2fe4-42b2-b2bd-b843f7690316",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Sure.  I'll keep these tests as-is because they have nice explicitly-written-out `expected`s, and add another pair of tests using the fixtures.",
        "createdAt" : "2018-10-06T16:11:51Z",
        "updatedAt" : "2018-10-06T16:43:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "01ab2b505b40f00e7ef1a8f950b3f5234c8ea7a2",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +254,258 @@\nclass TestFrameArithmetic(object):\n    def test_df_add_2d_array_rowlike_broadcasts(self):\n        # GH#23000\n        arr = np.arange(6).reshape(3, 2)"
  },
  {
    "id" : "b2fe6604-68fd-4e8c-a9a3-eeca639e8dd7",
    "prId" : 23060,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23060#pullrequestreview-163621672",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94bb82be-d56b-47bb-8e5f-9a77685e413c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should parameterize if you can",
        "createdAt" : "2018-10-11T00:57:49Z",
        "updatedAt" : "2018-10-28T05:18:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0ab38676-5471-4650-b30b-91c641afd580",
        "parentId" : "94bb82be-d56b-47bb-8e5f-9a77685e413c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, the point of collecting these arithmetic tests is to parametrize/fixturize and especially de-duplicate them in an upcoming pass.",
        "createdAt" : "2018-10-11T01:37:01Z",
        "updatedAt" : "2018-10-28T05:18:19Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c43137380768f09b64e4de19bab5d03f98479e34",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +73,77 @@                            'stringcol': list(tm.rands(10))})\n        df.loc[np.random.rand(len(df)) > 0.5, 'dates2'] = pd.NaT\n        ops = {'gt': 'lt', 'lt': 'gt', 'ge': 'le', 'le': 'ge', 'eq': 'eq',\n               'ne': 'ne'}\n"
  },
  {
    "id" : "81890cf0-f055-480d-bfc1-3de3dc0d0602",
    "prId" : 23060,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23060#pullrequestreview-163615332",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4df137f9-7620-43d5-92cf-d0ef3532fe52",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "needs paramaterization!",
        "createdAt" : "2018-10-11T00:58:25Z",
        "updatedAt" : "2018-10-28T05:18:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c43137380768f09b64e4de19bab5d03f98479e34",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +161,165 @@        assert df.eq(df).values.all()\n        assert not df.ne(df).values.any()\n        for op in ['eq', 'ne', 'gt', 'lt', 'ge', 'le']:\n            f = getattr(df, op)\n            o = getattr(operator, op)"
  },
  {
    "id" : "e72aec0c-ab37-47fd-a17a-f8324b27c947",
    "prId" : 23060,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23060#pullrequestreview-163615332",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e160c50-49cc-4d98-b793-ec97bcdfec60",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pull lthis out to a separatate, parameterized test (future PR is ok for these, though since you are moving around, maybe better here)",
        "createdAt" : "2018-10-11T00:59:09Z",
        "updatedAt" : "2018-10-28T05:18:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c43137380768f09b64e4de19bab5d03f98479e34",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +177,181 @@                f(ndim_5)\n\n        # Series\n        def _test_seq(df, idx_ser, col_ser):\n            idx_eq = df.eq(idx_ser, axis=0)"
  },
  {
    "id" : "4fbe7fc9-0634-47b6-b4a4-e7e960bfae19",
    "prId" : 23060,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23060#pullrequestreview-167196111",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77dcd6d5-701d-4c52-8931-0d9db0858739",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you parameterize this (next pass ok)",
        "createdAt" : "2018-10-23T03:14:07Z",
        "updatedAt" : "2018-10-28T05:18:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c43137380768f09b64e4de19bab5d03f98479e34",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +30,34 @@                result = x == y\n                expected = pd.DataFrame({col: x[col] == y[col]\n                                         for col in x.columns},\n                                        index=x.index, columns=x.columns)\n                tm.assert_frame_equal(result, expected)"
  },
  {
    "id" : "aea2f720-57ab-4302-a150-f6671e41454c",
    "prId" : 28600,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28600#pullrequestreview-293266127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b4fbbae-266a-48d5-a2f1-05fd6b163e48",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you reference this issue in these.",
        "createdAt" : "2019-09-25T18:08:03Z",
        "updatedAt" : "2019-09-25T18:24:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "131d832eb1e47a9ee4139d062bb4a7ec2aa60a5f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +668,672 @@def test_frame_with_zero_len_series_corner_cases():\n    # GH#28600\n    # easy all-float case\n    df = pd.DataFrame(np.random.randn(6).reshape(3, 2), columns=[\"A\", \"B\"])\n    ser = pd.Series(dtype=np.float64)"
  },
  {
    "id" : "089e0abe-0dbf-4f0f-83bc-b18ab25983b9",
    "prId" : 32734,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32734#pullrequestreview-375159741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cec10d5-370d-460f-988e-ef8f8fda73db",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This tests `x ** nan  == x`.\r\n\r\nCan you add a test for `nan ** 0 == 1`?\r\n\r\nPerhaps parametrize over series & frame ops?",
        "createdAt" : "2020-03-16T12:18:53Z",
        "updatedAt" : "2020-03-17T01:38:38Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4da72981061e4697f1cac55061a8b139aa444e19",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +831,835 @@    right = pd.DataFrame(index=[0, 1, 2])\n\n    result = left ** right\n    expected = pd.DataFrame({\"A\": [np.nan, 1.0, np.nan]})\n    tm.assert_frame_equal(result, expected)"
  },
  {
    "id" : "0212c0a2-25c8-44f8-b666-ae6de9e6be47",
    "prId" : 34537,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34537#pullrequestreview-430225071",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd80d9b2-b872-4a85-879c-4962a905b952",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use a skip here if numexpr is not installed",
        "createdAt" : "2020-06-14T14:39:45Z",
        "updatedAt" : "2020-06-14T17:17:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a067c925da1f3c804bb85bf95e886088f999d250",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +377,381 @@\n    @pytest.mark.skipif(not _NUMEXPR_INSTALLED, reason=\"numexpr not installed\")\n    @pytest.mark.parametrize(\"opname\", [\"floordiv\", \"pow\"])\n    def test_floordiv_axis0_numexpr_path(self, opname):\n        # case that goes through numexpr and has to fall back to masked_arith_op"
  },
  {
    "id" : "a42d9422-1130-4dbf-bf61-a107fed2598c",
    "prId" : 37132,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37132#pullrequestreview-509396221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26409880-ce42-4fe7-bf49-d7b16d0778ec",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you try the reverse op as well,  a single element and no elements in the list",
        "createdAt" : "2020-10-15T12:29:38Z",
        "updatedAt" : "2020-10-16T11:15:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "00c97cb0-15a3-4283-bf88-3c1a89acca97",
        "parentId" : "26409880-ce42-4fe7-bf49-d7b16d0778ec",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "Added one-element list and reverse op to the test. Zero elements in the list throws \"Unable to coerce to Series, length must be 2: given 0\", and we already test for this error in `test_alignment_non_pandas`. I believe it's enough, but if you'd like to test for the error in the new test too, please tell me.",
        "createdAt" : "2020-10-15T13:46:07Z",
        "updatedAt" : "2020-10-16T11:15:04Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "50fc0ee6aad19be8d51a1e8ccdab4fc25659fd92",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1590,1594 @@    with pytest.raises(ValueError, match=msg):\n        df + to_add\n    with pytest.raises(ValueError, match=msg):\n        to_add + df"
  },
  {
    "id" : "a7cfb1c5-605d-433a-bead-d88607840d61",
    "prId" : 41161,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41161#pullrequestreview-644561789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23f493dc-61bf-40d5-bf85-fe5bde29a50b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This was a wrong test, but because putting `assert_produces_warning` inside `pytest.raises` doesn't fail if it doesn't warn, this wasn't noticed (encountered this in https://github.com/pandas-dev/pandas/pull/40325#discussion_r591396009 as well). \r\nThe ops for which we raise a warning vs raise NotImplementedError are not overlapping. ",
        "createdAt" : "2021-04-26T11:30:26Z",
        "updatedAt" : "2021-04-27T06:26:40Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "a61e6099749f5124591f7a175fd70e0691c85dec",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +951,955 @@                msg = \"operator '.*' not implemented for .* dtypes\"\n                with pytest.raises(NotImplementedError, match=msg):\n                    op(s, e.value)\n\n        else:"
  },
  {
    "id" : "dbd8adf7-c617-4230-9fd7-3599a6bf1aca",
    "prId" : 41161,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41161#pullrequestreview-646887095",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "773d5a4b-38d4-4178-9f00-189fa244f510",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The fact that it is no longer warning is I *think* correct, since we are not using numexpr for such a small test case (so the warning about \"not supported by numexpr\" is not relevant for the user). \r\nBut, we should still test that we *do* raise the warning when numexpr is used. This can probably be done in a similar was as https://github.com/pandas-dev/pandas/pull/40463",
        "createdAt" : "2021-04-26T11:35:20Z",
        "updatedAt" : "2021-04-27T06:26:40Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "52fc9417-4bd3-45c6-8b88-34d3f22f89f0",
        "parentId" : "773d5a4b-38d4-4178-9f00-189fa244f510",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Will take care of this in https://github.com/pandas-dev/pandas/pull/41178",
        "createdAt" : "2021-04-28T10:21:58Z",
        "updatedAt" : "2021-04-28T10:21:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "a61e6099749f5124591f7a175fd70e0691c85dec",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +946,950 @@                # with tm.assert_produces_warning(UserWarning):\n                #     # \"evaluating in Python space because ...\"\n                op(s, e.value)\n\n            else:"
  },
  {
    "id" : "cd7d24c9-6ce5-4437-8590-6792c367255f",
    "prId" : 41178,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41178#pullrequestreview-649416568",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d466733-0079-4ba6-a601-336a0169ab30",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I copy/pasted this fixture from the `tests/arithmetic/`. Is there a way to share such an autouse fixture?\r\n\r\nA ``from pandas.tests.arithmetic.conftest import switch_numexpr_min_elements`` would do the trick, but for some reason we disallow explicit imports from `conftest.py` files.",
        "createdAt" : "2021-04-27T09:45:37Z",
        "updatedAt" : "2021-04-28T10:26:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bd571a4c-800d-4081-9fe8-3dbaae0e0248",
        "parentId" : "3d466733-0079-4ba6-a601-336a0169ab30",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i don't think this needs to be autouse if you are using this explicity (which you are), so just put it in the conftest in tests/frame",
        "createdAt" : "2021-04-27T12:56:55Z",
        "updatedAt" : "2021-04-28T10:26:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b3a41e84-48be-42dc-a455-4a9966488a48",
        "parentId" : "3d466733-0079-4ba6-a601-336a0169ab30",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It is autoused by all tests in this file, I didn't add it to each test function signature.",
        "createdAt" : "2021-04-27T12:59:49Z",
        "updatedAt" : "2021-04-28T10:26:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "57f9fa79-ff7a-4b5c-be18-ccbb019cd9a5",
        "parentId" : "3d466733-0079-4ba6-a601-336a0169ab30",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Is there a way to share such an autouse fixture?\r\n\r\nonly thing that comes to mind is defining it as non-autouse in a high-level conftest and then\r\n\r\n```\r\n@pytest.fixture(autouse=True)\r\ndef switch_numexpr_min_elements(switch_numexpr_min_elements_non_auotuse):\r\n    yield from switch_numexpr_min_elements_non_autouse()\r\n```",
        "createdAt" : "2021-04-27T21:02:27Z",
        "updatedAt" : "2021-04-28T10:26:43Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c439a1b0-2ed7-4e8e-b857-ae0b9090b056",
        "parentId" : "3d466733-0079-4ba6-a601-336a0169ab30",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I am not sure that can work with a fixture as the base function. Because if a fixture is passed as an argument like this, I think it is already what is yielded from that function that is being passed to the new fixture? (it might be possible, but in any case I don't get it to work)\r\n\r\n",
        "createdAt" : "2021-04-28T10:16:34Z",
        "updatedAt" : "2021-04-28T10:26:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "702caf83-b781-449c-bf8b-b82f64707876",
        "parentId" : "3d466733-0079-4ba6-a601-336a0169ab30",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "fair enough; its pretty magical.  maybe with `yield switch_numexpr_min_elements_non_autouse` instead of `yield switch_numexpr_min_elements_non_autouse()`?",
        "createdAt" : "2021-04-29T16:53:26Z",
        "updatedAt" : "2021-04-29T16:53:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5c5d755e-8f81-4146-b998-9e63f284a15e",
        "parentId" : "3d466733-0079-4ba6-a601-336a0169ab30",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think I tried that as well (I tried a few variants, and none directly worked), but not fully sure anymore. ",
        "createdAt" : "2021-04-30T17:06:02Z",
        "updatedAt" : "2021-04-30T17:06:02Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1cbe9c8963d737fd05697aaf2d1d9ffe2da1f4f",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +35,39 @@    _MIN_ELEMENTS = expr._MIN_ELEMENTS\n    expr._MIN_ELEMENTS = request.param\n    yield request.param\n    expr._MIN_ELEMENTS = _MIN_ELEMENTS\n"
  }
]