[
  {
    "id" : "f100d9e4-52d3-4cb6-8214-421ea28bb4f5",
    "prId" : 21235,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21235#pullrequestreview-180550172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce6908b0-ff32-4eba-ae53-4ea2be16c8f6",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Do you need the selection of ['vals'] here? Think it should get the same result without it no? If so you could make this expression the same as the one in the else block, but then move it out of the condition altogether",
        "createdAt" : "2018-11-30T15:14:45Z",
        "updatedAt" : "2018-12-12T07:07:59Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "37de5716-729e-4f30-acb8-3573cbe58942",
        "parentId" : "ce6908b0-ff32-4eba-ae53-4ea2be16c8f6",
        "authorId" : "49ae3d9e-14b6-4fd3-bb5a-1847cbe2ad19",
        "body" : "By selecting on ['vals'] here, it means the pct_change is called on the series, and since there is a separate method for pct_change for series vs. dataframe, it seems necessary in order to test each. By moving it out of the conditional we would end up only testing one of those two groupby methods.",
        "createdAt" : "2018-12-01T22:47:46Z",
        "updatedAt" : "2018-12-12T07:07:59Z",
        "lastEditedBy" : "49ae3d9e-14b6-4fd3-bb5a-1847cbe2ad19",
        "tags" : [
        ]
      },
      {
        "id" : "ffc579c1-28de-4995-abd1-e94c13b5a143",
        "parentId" : "ce6908b0-ff32-4eba-ae53-4ea2be16c8f6",
        "authorId" : "49ae3d9e-14b6-4fd3-bb5a-1847cbe2ad19",
        "body" : "I could still reduce the code count by doing something like this. Let me know if you think it's cleaner and I'll add it to my next commit (along with adding back a datetime index w.r.t the comment below)\r\n\r\n> ```python\r\n>   gb = df.groupby('key')\r\n>   gb_kwargs = dict(periods=periods, fill_method=fill_method, limit=limit,\r\n>      freq=freq)\r\n>    if test_series:\r\n>        result = gb['vals'].pct_change(**gb_kwargs)\r\n>        tm.assert_series_equal(result, expected)\r\n>    else:\r\n>        result = gb.pct_change(**gb_kwargs)\r\n>        tm.assert_frame_equal(result, expected.to_frame('vals'))\r\n",
        "createdAt" : "2018-12-01T23:23:33Z",
        "updatedAt" : "2018-12-12T07:07:59Z",
        "lastEditedBy" : "49ae3d9e-14b6-4fd3-bb5a-1847cbe2ad19",
        "tags" : [
        ]
      },
      {
        "id" : "b3129a0d-fb8f-4f2a-bf71-851644f6b41e",
        "parentId" : "ce6908b0-ff32-4eba-ae53-4ea2be16c8f6",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Ignore my comment this is fine as is",
        "createdAt" : "2018-12-02T07:14:50Z",
        "updatedAt" : "2018-12-12T07:07:59Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "01d705fa246d792f9d0e52a614f9b68a0a7f6f3b",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +789,793 @@\n    if test_series:\n        result = df.groupby('key')['vals'].pct_change(\n            periods=periods, fill_method=fill_method, limit=limit, freq=freq)\n        tm.assert_series_equal(result, expected)"
  },
  {
    "id" : "2dfcfb34-7985-4f0e-aa0e-ca372acacfb1",
    "prId" : 26134,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26134#pullrequestreview-228410185",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edfe4719-fc2a-42ef-83fc-310a9969af68",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Why is this hard coded to 1?",
        "createdAt" : "2019-04-18T16:12:41Z",
        "updatedAt" : "2019-04-20T06:22:11Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b3020c19-2595-4cf1-a0da-2f8223f6a1fc",
        "parentId" : "edfe4719-fc2a-42ef-83fc-310a9969af68",
        "authorId" : "c8f1077d-aaaa-4f3d-9551-a08361333db3",
        "body" : "because labels is already hard-coded to [0, 0, 0, 0], and that means there's one group",
        "createdAt" : "2019-04-18T17:24:46Z",
        "updatedAt" : "2019-04-20T06:22:11Z",
        "lastEditedBy" : "c8f1077d-aaaa-4f3d-9551-a08361333db3",
        "tags" : [
        ]
      }
    ],
    "commit" : "41befd18fa55af800275fdb9d59cf1055c785542",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +472,476 @@\n    labels = np.array([0, 0, 0, 0], dtype=np.int64)\n    ngroups = 1\n    pd_op(ans, data, labels, ngroups, is_datetimelike)\n"
  },
  {
    "id" : "5ac1e04b-ce0c-47e7-8e51-e81d2929a248",
    "prId" : 26162,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26162#pullrequestreview-231476352",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d4de71a-16f9-4f04-862d-c1f4f3a2d4aa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add another example using 'key' as well here",
        "createdAt" : "2019-04-28T16:00:40Z",
        "updatedAt" : "2019-05-13T18:52:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7958d071-652a-466e-9257-d6e2a6db133f",
        "parentId" : "2d4de71a-16f9-4f04-862d-c1f4f3a2d4aa",
        "authorId" : "c8f1077d-aaaa-4f3d-9551-a08361333db3",
        "body" : "not sure what you're looking for here? `df_g` no longer has a column `'key'`, and this section of code is only used to compute `expected`, it's not what's being tested",
        "createdAt" : "2019-04-28T16:31:45Z",
        "updatedAt" : "2019-05-13T18:52:13Z",
        "lastEditedBy" : "c8f1077d-aaaa-4f3d-9551-a08361333db3",
        "tags" : [
        ]
      },
      {
        "id" : "1ef4ea4e-9e24-4f4a-b4df-8b35a4228a4a",
        "parentId" : "2d4de71a-16f9-4f04-862d-c1f4f3a2d4aa",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why did u have to change it?is the expected difference for these cases?",
        "createdAt" : "2019-04-28T16:34:05Z",
        "updatedAt" : "2019-05-13T18:52:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ebf8003f-a06b-45b4-bd1a-aa36e22fcf42",
        "parentId" : "2d4de71a-16f9-4f04-862d-c1f4f3a2d4aa",
        "authorId" : "c8f1077d-aaaa-4f3d-9551-a08361333db3",
        "body" : "The old test called something like `df.groupy('key').ffill().groupby('key').shift()`, which is no longer valid, as the first groupby won't return the `'key'` column. The expected is still the same, just needs to be written differently.",
        "createdAt" : "2019-04-28T16:37:04Z",
        "updatedAt" : "2019-05-13T18:52:13Z",
        "lastEditedBy" : "c8f1077d-aaaa-4f3d-9551-a08361333db3",
        "tags" : [
        ]
      }
    ],
    "commit" : "01057a436e3d547dab105f8e508cdcc004ac2292",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +790,794 @@\n    df_g = getattr(df.groupby('key'), fill_method)(limit=limit)\n    grp = df_g.groupby(df.key)\n\n    expected = grp['vals'].obj / grp['vals'].shift(periods) - 1"
  },
  {
    "id" : "3cc7a49c-0b88-44ef-a4aa-50a356f3f92e",
    "prId" : 27467,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27467#pullrequestreview-264464012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffc63b9e-83a8-4d9a-a704-fca49fb1cb32",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you parametrize these instead?",
        "createdAt" : "2019-07-19T16:47:51Z",
        "updatedAt" : "2019-07-25T18:18:07Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a68ff6d9-3bc4-45d1-8d7e-733afc1e4d1e",
        "parentId" : "ffc63b9e-83a8-4d9a-a704-fca49fb1cb32",
        "authorId" : null,
        "body" : "I don't think that's needed. Parameterize with one case is not useful, and as a smoke test there doesn't need to be more than one. Also lots of similar tests in this file.",
        "createdAt" : "2019-07-19T23:15:31Z",
        "updatedAt" : "2019-07-25T18:18:07Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "e9343e1c1506a57a55a7561bc61850b36daea1d9",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1008,1012 @@    df = DataFrame(dict(a=[0, 1, 1, 2]))\n    g = df.groupby([\"a\", \"b\", \"b\", \"c\"])\n    with pytest.raises(ValueError, match=\"not a valid function name\"):\n        g.transform(\"some_arbitrary_name\")\n"
  },
  {
    "id" : "b5f539bb-c6d8-4044-b981-043f7a2430e8",
    "prId" : 27467,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27467#pullrequestreview-264318146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6da2408-e93d-490b-80a9-07cfffe897e9",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you add GH number as comment?",
        "createdAt" : "2019-07-19T16:49:35Z",
        "updatedAt" : "2019-07-25T18:18:07Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9343e1c1506a57a55a7561bc61850b36daea1d9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1004,1008 @@\n\ndef test_transform_invalid_name_raises():\n    # GH#27486\n    df = DataFrame(dict(a=[0, 1, 1, 2]))"
  },
  {
    "id" : "32f5a62c-76e4-4a4d-882b-d31f0c5ff3b1",
    "prId" : 27467,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27467#pullrequestreview-265717057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eaf9e68e-5240-4dcf-b0f2-e9b475279da3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so we need an additional test here. you are partitioning the whitelist into 3 things: reductions, transforms, and other. We need to assert that if another function is added to the whitelist it is *also* added to one of these three categories. So I would add where you define the partitioning (in pandas.core.groupby.base) to actually define the other   (as a list of functions); \r\n\r\nthen you can have a test that asserts the above; automatically testing that we satisfy the invariant (this could also be done via asserts in the code), but i think a test is more informative.",
        "createdAt" : "2019-07-21T00:13:47Z",
        "updatedAt" : "2019-07-25T18:18:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "30976acd-20b7-467a-8c49-18cef51debce",
        "parentId" : "eaf9e68e-5240-4dcf-b0f2-e9b475279da3",
        "authorId" : null,
        "body" : "> We need to assert that if another function is added to the whitelist\r\n\r\nNot if the whitelist is a strictly defined as the union of the two. Would an comment be enough? \"NOTE: do not edit this directly!\". What we want to enforce is that every future addition must be classified as one or the other.\r\n",
        "createdAt" : "2019-07-21T14:56:20Z",
        "updatedAt" : "2019-07-25T18:18:07Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "8ea9d40d-79fc-48ce-aaa8-e551c860bfc2",
        "parentId" : "eaf9e68e-5240-4dcf-b0f2-e9b475279da3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "a comment is not enough \r\n\r\nneed a test to enforce this",
        "createdAt" : "2019-07-21T15:32:50Z",
        "updatedAt" : "2019-07-25T18:18:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2bd272c3-a713-4e5e-95e1-4612d3f8e061",
        "parentId" : "eaf9e68e-5240-4dcf-b0f2-e9b475279da3",
        "authorId" : null,
        "body" : "> you are partitioning the whitelist into 3 things: \r\n\r\nWhat is contained in the `other` category? take `corr` for example, which I initially included by mistake as a reduction. It returns multiple items per group, so its not a reduction. and it returns a multiIndex, so it isn't like-indexed which is the definition of a transformation.\r\n\r\nSo I don't think `corr` has anything to do with `transform(name)` (it's not a transformation, nor is it a reduction which can be broadcasted to make it a transformation), it's just an unrelated method on Grouper, so I don't think there's any third category to have in the whitelist for `transform`. \r\n\r\nIf you don't agree, can you give an example?\r\n\r\n\r\n\r\n",
        "createdAt" : "2019-07-22T03:46:21Z",
        "updatedAt" : "2019-07-25T18:18:07Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "3c02eec0-589b-428d-aa40-223b57d83b63",
        "parentId" : "eaf9e68e-5240-4dcf-b0f2-e9b475279da3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "other = whitelist - reductions - transforms. we have to cover *every* single method.\r\n\r\nbasically the leftovers. put it it this way, if you add a function to the grouper (or change something in the reductions / transforms / other), then this test should fail. you have to do *both*. this ensures that these are always updated in sync.\r\n\r\ndoc comments don't work here.",
        "createdAt" : "2019-07-23T22:32:26Z",
        "updatedAt" : "2019-07-25T18:18:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "44685688-5293-4982-97c2-f4f4a8b00d49",
        "parentId" : "eaf9e68e-5240-4dcf-b0f2-e9b475279da3",
        "authorId" : null,
        "body" : "ah, that makes sense. Will do.",
        "createdAt" : "2019-07-23T22:49:46Z",
        "updatedAt" : "2019-07-25T18:18:07Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "e9343e1c1506a57a55a7561bc61850b36daea1d9",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +1002,1006 @@\n    assert_frame_equal(result, expected)\n\n\ndef test_transform_invalid_name_raises():"
  },
  {
    "id" : "99b9e087-04aa-49e9-b409-ed7476c050c2",
    "prId" : 31101,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31101#pullrequestreview-347755131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77180718-3df3-4598-8c3e-d58058ccc525",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think instead of concat-ing like this would be easier if you did something like:\r\n\r\n```python\r\ngrp = df.groupby(\"A\")\r\nresult = test_op(grp)\r\nexpected = mock_op(grp)\r\n```\r\n\r\nBut let me know if overlooking something",
        "createdAt" : "2020-01-23T22:11:24Z",
        "updatedAt" : "2020-01-24T05:12:20Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "35b5e4b1-c839-4a90-a398-92b35c3638c9",
        "parentId" : "77180718-3df3-4598-8c3e-d58058ccc525",
        "authorId" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "body" : "It's easier, but I just thought this removes the dependency on implementation of groupby functions (e.g. `groupby.fillna`, `groupby.ffill`), which may share the same root with what we are testing (e.g. `groupby.transform('fillna', ...)`, `groupby.transform('ffill')`).\r\n\r\nUsing `concat` on the other hand is clean and explicit.",
        "createdAt" : "2020-01-24T04:17:19Z",
        "updatedAt" : "2020-01-24T05:12:20Z",
        "lastEditedBy" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "tags" : [
        ]
      },
      {
        "id" : "0df5da15-ce1d-43c3-8560-2b3b882ffabb",
        "parentId" : "77180718-3df3-4598-8c3e-d58058ccc525",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Gotcha. Ok for now though might be nice in a follow up to extend this test to reduction functions as well, which I think would require this ",
        "createdAt" : "2020-01-24T04:29:24Z",
        "updatedAt" : "2020-01-24T05:12:20Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f2fedaca-3220-4bc4-887c-8bb3c20b0ffa",
        "parentId" : "77180718-3df3-4598-8c3e-d58058ccc525",
        "authorId" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "body" : "Sure. There are quite a few things we need to fix / cleanup here, such as moving corrwith from transformation_kernels to reduction_kernels referenced in xfails. I will fix these one by one, and create this parallel test for reduction functions.",
        "createdAt" : "2020-01-24T05:20:12Z",
        "updatedAt" : "2020-01-24T05:20:13Z",
        "lastEditedBy" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bd45d4f5deb79f03a4d17287f84ee2763c32831",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +338,342 @@\n    result = test_op(df.groupby(\"A\"))\n    groups = [df[[\"B\"]].iloc[:4], df[[\"B\"]].iloc[4:6], df[[\"B\"]].iloc[6:]]\n    expected = concat([mock_op(g) for g in groups])\n"
  }
]