[
  {
    "id" : "4bd7283f-7dad-46dc-834a-67a7e2fed1dc",
    "prId" : 29500,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29500#pullrequestreview-314554265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67823b2a-49ff-4572-8719-709d3b3920b0",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Reference issue number above as a comment",
        "createdAt" : "2019-11-09T11:38:23Z",
        "updatedAt" : "2019-11-12T19:51:28Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "38067edeb69915b07c29d0016e3368a5477f39e3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +28,32 @@def test_series_grouper_requires_nonempty_raises():\n    # GH#29500\n    obj = Series(np.random.randn(10))\n    dummy = obj[:0]\n    labels = np.array([-1, -1, -1, 0, 0, 0, 1, 1, 1, 1], dtype=np.int64)"
  },
  {
    "id" : "324f7c4e-a67a-4a1a-92da-9ad50ac88e5d",
    "prId" : 29500,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29500#pullrequestreview-314584120",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fdaab9c-88e5-4f67-987e-c026162d5b0e",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is this visible from an end user perspective?",
        "createdAt" : "2019-11-10T00:29:08Z",
        "updatedAt" : "2019-11-12T19:51:28Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "8f6966a7-5865-4917-a54d-2c63ca089e0b",
        "parentId" : "7fdaab9c-88e5-4f67-987e-c026162d5b0e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this should never be raised to the user, just seemed like the behavior change merited a test.",
        "createdAt" : "2019-11-10T00:37:49Z",
        "updatedAt" : "2019-11-12T19:51:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "38067edeb69915b07c29d0016e3368a5477f39e3",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +32,36 @@    labels = np.array([-1, -1, -1, 0, 0, 0, 1, 1, 1, 1], dtype=np.int64)\n\n    with pytest.raises(ValueError, match=\"SeriesGrouper requires non-empty `series`\"):\n        libreduction.SeriesGrouper(dummy, np.mean, labels, 2, dummy)\n"
  },
  {
    "id" : "ac347605-2009-4c0b-b953-cb24c12591e8",
    "prId" : 32561,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32561#pullrequestreview-372223143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b44d0a2-cae1-45d4-b23e-79a64c33932a",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can you return cumsum().max() like the OP",
        "createdAt" : "2020-03-10T18:37:43Z",
        "updatedAt" : "2020-03-11T16:50:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "def42526-0fc9-4162-9708-d69657943f21",
        "parentId" : "6b44d0a2-cae1-45d4-b23e-79a64c33932a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "never mind, i see that would require making a new `expected`",
        "createdAt" : "2020-03-10T18:38:43Z",
        "updatedAt" : "2020-03-11T16:50:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7060dd34d749c072039f5fedda1dbedc9f1512d9",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +60,64 @@def cumsum_max(x):\n    x.cumsum().max()\n    return 0\n\n"
  },
  {
    "id" : "ebeb24e1-c33a-4fd9-8cad-492fb2c4a409",
    "prId" : 32561,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32561#pullrequestreview-372713145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1881d52-ed6d-4982-9b9a-366e1ff9a30c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "If this fails, the assertion errors bubbles up?",
        "createdAt" : "2020-03-11T12:21:34Z",
        "updatedAt" : "2020-03-11T16:50:48Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "35400aee-fa1a-4654-a3e1-6713040c6c0a",
        "parentId" : "b1881d52-ed6d-4982-9b9a-366e1ff9a30c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah\r\n\r\n```diff\r\ndiff --git a/pandas/tests/groupby/test_bin_groupby.py b/pandas/tests/groupby/test_bin_groupby.py\r\nindex 152086c241..b6518c1962 100644\r\n--- a/pandas/tests/groupby/test_bin_groupby.py\r\n+++ b/pandas/tests/groupby/test_bin_groupby.py\r\n@@ -53,7 +53,7 @@ def test_series_bin_grouper():\r\n \r\n \r\n def assert_block_lengths(x):\r\n-    assert len(x) == len(x._data.blocks[0].mgr_locs)\r\n+    assert len(x) == len(x._data.blocks[0].mgr_locs) + 1\r\n     return 0\r\n```\r\n\r\n```python\r\n___________________________________________________________________ test_mgr_locs_updated[assert_block_lengths] ____________________________________________________________________\r\n\r\nfunc = <function assert_block_lengths at 0x122354b90>\r\n\r\n    @pytest.mark.parametrize(\"func\", [cumsum_max, assert_block_lengths])\r\n    def test_mgr_locs_updated(func):\r\n        # https://github.com/pandas-dev/pandas/issues/31802\r\n        # Some operations may require creating new blocks, which requires\r\n        # valid mgr_locs\r\n        df = pd.DataFrame({\"A\": [\"a\", \"a\", \"a\"], \"B\": [\"a\", \"b\", \"b\"], \"C\": [1, 1, 1]})\r\n>       result = df.groupby([\"A\", \"B\"]).agg(func)\r\n\r\npandas/tests/groupby/test_bin_groupby.py:71:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\npandas/core/groupby/generic.py:939: in aggregate\r\n    return self._python_agg_general(func, *args, **kwargs)\r\npandas/core/groupby/groupby.py:926: in _python_agg_general\r\n    result, counts = self.grouper.agg_series(obj, f)\r\npandas/core/groupby/ops.py:640: in agg_series\r\n    return self._aggregate_series_fast(obj, func)\r\npandas/core/groupby/ops.py:665: in _aggregate_series_fast\r\n    result, counts = grouper.get_result()\r\npandas/_libs/reduction.pyx:377: in pandas._libs.reduction.SeriesGrouper.get_result\r\n    res, initialized = self._apply_to_group(cached_typ, cached_ityp,\r\npandas/_libs/reduction.pyx:195: in pandas._libs.reduction._BaseGrouper._apply_to_group\r\n    res = self.f(cached_typ)\r\npandas/core/groupby/groupby.py:913: in <lambda>\r\n    f = lambda x: func(x, *args, **kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nx = Series([], Name: C, dtype: int64)\r\n\r\n    def assert_block_lengths(x):\r\n>       assert len(x) == len(x._data.blocks[0].mgr_locs) + 1\r\nE       assert 1 == (1 + 1)\r\nE        +  where 1 = len(0    1\\nName: C, dtype: int64)\r\nE        +  and   1 = len(BlockPlacement(slice(0, 1, 1)))\r\nE        +    where BlockPlacement(slice(0, 1, 1)) = IntBlock: 1 dtype: int64.mgr_locs\r\n\r\npandas/tests/groupby/test_bin_groupby.py:56: AssertionError\r\n==================================================================== 1 failed, 1 passed, 9 deselected in 0.24s =====================================================================\r\n```",
        "createdAt" : "2020-03-11T12:29:30Z",
        "updatedAt" : "2020-03-11T16:50:48Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7060dd34d749c072039f5fedda1dbedc9f1512d9",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +54,58 @@\ndef assert_block_lengths(x):\n    assert len(x) == len(x._data.blocks[0].mgr_locs)\n    return 0\n"
  },
  {
    "id" : "2e692dd0-b7ea-4f2c-bb7f-120acc7f68d0",
    "prId" : 34183,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34183#pullrequestreview-412813350",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b408cb5b-23af-4058-b33d-9865b02eab64",
        "parentId" : null,
        "authorId" : "74135b99-72a6-4787-b5da-8908b48d3233",
        "body" : "It seems to me that groupby doesn't actually use this function.",
        "createdAt" : "2020-05-15T16:54:24Z",
        "updatedAt" : "2020-06-02T13:59:57Z",
        "lastEditedBy" : "74135b99-72a6-4787-b5da-8908b48d3233",
        "tags" : [
        ]
      }
    ],
    "commit" : "55db8716727c0769effd4ff597c1344a76e4e6e2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +154,158 @@\n        dummy = Series(0.0, index=np.arange(100))\n        result, _ = libreduction.compute_reduction(\n            arr, np.sum, dummy=dummy, labels=Index(np.arange(4))\n        )"
  },
  {
    "id" : "841d74b6-a208-46d6-8da0-3efff81faab1",
    "prId" : 40835,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40835#pullrequestreview-635572218",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92c2451b-9c24-4760-a6cd-ec5a1d39f2e1",
        "parentId" : null,
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Issue number",
        "createdAt" : "2021-04-13T21:00:56Z",
        "updatedAt" : "2021-04-14T12:42:22Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "2b8f15fd-5e04-4cfc-b1b4-4c0edca81a6c",
        "parentId" : "92c2451b-9c24-4760-a6cd-ec5a1d39f2e1",
        "authorId" : "32d3d9c9-b191-405d-acc8-d2e82172e15c",
        "body" : "Added.",
        "createdAt" : "2021-04-14T12:43:41Z",
        "updatedAt" : "2021-04-14T12:43:41Z",
        "lastEditedBy" : "32d3d9c9-b191-405d-acc8-d2e82172e15c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b89eee0d4d653c6b5f9b7b3bb6b5f12a77b2d583",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +30,34 @@def test_series_grouper_result_length_difference():\n    # GH 40014\n    obj = Series(np.random.randn(10), dtype=\"float64\")\n    obj.index = obj.index.astype(\"O\")\n    labels = np.array([-1, -1, -1, 0, 0, 0, 1, 1, 1, 1], dtype=np.intp)"
  }
]