[
  {
    "id" : "90b58ba9-0aa4-46a0-99ef-710dcccc570d",
    "prId" : 32546,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32546#pullrequestreview-408730240",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1d0adfc-5501-4ced-990c-6a1206c4c495",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you provide a 1-liner here about this this test is actually testing",
        "createdAt" : "2020-05-09T19:44:39Z",
        "updatedAt" : "2020-06-13T10:49:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "68691551-d205-406a-bd8e-43251482f52c",
        "parentId" : "f1d0adfc-5501-4ced-990c-6a1206c4c495",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "Have added a description (longer than one line though, is that OK?)",
        "createdAt" : "2020-05-10T10:24:01Z",
        "updatedAt" : "2020-06-13T10:49:11Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3352211c0d5d09a2633baaf612375bad40dde0e",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1212,1216 @@    # and a non-categorical key, doesn't try to expand the output to include\n    # non-observed categories but instead matches the input shape.\n    # GH 32494\n    df_with_categorical = pd.DataFrame(\n        {"
  },
  {
    "id" : "fc09b3d3-6536-4016-bc83-17a956e21316",
    "prId" : 32546,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32546#pullrequestreview-408730248",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d21c5d45-0f66-4bd6-9078-e6dd0b4974de",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is ok, but can you also put in an explicit constructedr result (e.g. a dataframe / series that is constructed directly). you can leave these as well.",
        "createdAt" : "2020-05-09T19:45:42Z",
        "updatedAt" : "2020-06-13T10:49:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1fad9fa4-39ee-4312-9c35-741fe2179cd4",
        "parentId" : "d21c5d45-0f66-4bd6-9078-e6dd0b4974de",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "Sure, done",
        "createdAt" : "2020-05-10T10:24:06Z",
        "updatedAt" : "2020-06-13T10:49:11Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3352211c0d5d09a2633baaf612375bad40dde0e",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1226,1230 @@    # DataFrame case\n    result = df_with_categorical.groupby([\"A\", \"C\"], observed=observed).transform(\"sum\")\n    expected = df_without_categorical.groupby([\"A\", \"C\"]).transform(\"sum\")\n    tm.assert_frame_equal(result, expected)\n    expected_explicit = pd.DataFrame({\"B\": [4, 2, 4]})"
  },
  {
    "id" : "5afacd6f-d2d2-4b44-9e41-daf7df431c4f",
    "prId" : 32546,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32546#pullrequestreview-429911447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69588f69-fc6c-42df-9172-2e89a6d4d06e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "observed is already a fixture, can remove this parameterization",
        "createdAt" : "2020-06-12T17:17:49Z",
        "updatedAt" : "2020-06-13T10:49:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3352211c0d5d09a2633baaf612375bad40dde0e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1208,1212 @@\n\ndef test_categorical_and_not_categorical_key(observed):\n    # Checks that groupby-transform, when grouping by both a categorical\n    # and a non-categorical key, doesn't try to expand the output to include"
  },
  {
    "id" : "02968d87-e4eb-4bc7-9cf7-6b95a3135156",
    "prId" : 34453,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34453#pullrequestreview-421360296",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d33d188-3986-4624-9916-d934f0cae917",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What differs between this branch and the last `else`? Should they not be the same?",
        "createdAt" : "2020-05-29T15:39:51Z",
        "updatedAt" : "2020-06-03T02:16:50Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ef5ed66f-0b94-429f-985f-6b7f90b8db1c",
        "parentId" : "1d33d188-3986-4624-9916-d934f0cae917",
        "authorId" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "body" : "No they are not the same, the difference is in ``mock_op``. \r\n\r\nNote that the ``test_op`` is applied onto `df.groupby(\"A\")`, whereas ``mock_op`` is applied onto individual `DataFrame` segments, and not on the grouper. \r\n\r\nIn this case if I leave it to the last `else`, it leads to a ``AttributeError``, because `DataFrame` object does not have attribute ``cumcount``.\r\n\r\nI deliberately avoided using `groupby` level functions (e.g. `groupby.ffill`, `groupby.cumcount`) for testing, because they share the same root in implementation. Instead, I explicitly split the groups and concatenate the results in the test to make sure test result is correct.",
        "createdAt" : "2020-05-30T00:38:45Z",
        "updatedAt" : "2020-06-03T02:16:50Z",
        "lastEditedBy" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb6edf9fd3cd338e88538a9451c05cb2500e2dcf",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +329,333 @@\n    if transformation_func == \"cumcount\":\n        test_op = lambda x: x.transform(\"cumcount\")\n        mock_op = lambda x: Series(range(len(x)), x.index)\n    elif transformation_func == \"fillna\":"
  },
  {
    "id" : "4da514d2-fd7e-4c5a-b97c-188df3bb3d74",
    "prId" : 36350,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36350#pullrequestreview-530589910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45129688-7f37-453f-a576-041cc727e9c2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh i c you are doing this because we want to compare to ints, got it ,then this is fine.",
        "createdAt" : "2020-11-14T16:50:08Z",
        "updatedAt" : "2020-11-14T16:50:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fc43f6c64075e53739e877b77cc1d763274d916",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +171,175 @@    if transformation_func == \"diff\":\n        # Result contains nans, so transpose coerces to float\n        expected[\"b\"] = expected[\"b\"].astype(\"int64\")\n\n    # cumcount returns Series; the rest are DataFrame"
  }
]