[
  {
    "id" : "3a98bb0b-bcfb-4a8a-a757-dbefca03a848",
    "prId" : 14952,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14952#pullrequestreview-14137781",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8db7a363-360e-4cb5-88f5-4dc5514ecd75",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add the ``.get_group`` call as well here. ping on green.",
        "createdAt" : "2016-12-22T11:24:28Z",
        "updatedAt" : "2016-12-23T03:13:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c1621168af47d32fad745daa1a3d85dbf6988ef",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +3941,3945 @@        dates = ['2015-01-05', '2015-01-04', '2015-01-03',\n                 '2015-01-02', '2015-01-01']\n        expected = {pd.Timestamp(date): pd.DatetimeIndex([date], name='date')\n                    for date in dates}\n        tm.assert_dict_equal(result, expected)"
  },
  {
    "id" : "fcebff33-f817-4b2d-910a-507b6407707c",
    "prId" : 16859,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16859#pullrequestreview-48863607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49ff6478-f2e2-4b05-b1ad-73a391ab7798",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a 1-liner about what this is testing",
        "createdAt" : "2017-07-10T10:32:08Z",
        "updatedAt" : "2017-08-21T06:55:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a98db9aec22696d60f9581deba1d20573fe370a3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3893,3897 @@\n    def test_gb_key_len_equal_axis_len(self):\n            # GH16843\n            # test ensures that index and column keys are recognized correctly\n            # when number of keys equals axis length of groupby"
  },
  {
    "id" : "a94e5b96-5543-4bc7-b61a-26e117fac373",
    "prId" : 17871,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17871#pullrequestreview-69921839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f338093e-0a8d-4b03-8aa7-da5b0ace0e90",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a tests on SeriesGroupBy",
        "createdAt" : "2017-10-17T10:19:11Z",
        "updatedAt" : "2017-10-17T23:38:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "21d15009-4bae-4874-b168-a949dfd2aef5",
        "parentId" : "f338093e-0a8d-4b03-8aa7-da5b0ace0e90",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "Ok",
        "createdAt" : "2017-10-17T15:15:34Z",
        "updatedAt" : "2017-10-17T23:38:45Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "608a0e48b1481180d59fbb7f8cb5c0bfa15f1257",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +3822,3826 @@                             index=index)\n\n        assert_series_equal(expected, result)\n\n        # test SeriesGroupby.pipe"
  },
  {
    "id" : "a7416df4-e8a8-4d13-9f32-987e47de52c3",
    "prId" : 19610,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19610#pullrequestreview-95626012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "640e82ea-e383-436f-a501-ef2cbde1f53e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a tests with the numeric ops on groupby / object and assert they raise",
        "createdAt" : "2018-02-09T12:16:52Z",
        "updatedAt" : "2018-02-09T12:17:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1f05f9b9-40dd-461c-907e-34fabc5dd5e7",
        "parentId" : "640e82ea-e383-436f-a501-ef2cbde1f53e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Assuming you want this in a different change no problem. That said, do you consider the numeric ops to be `add`, `prod`, `min`, `max`, `mean`, `median`, `var`, `ohlc`, `cumprod`, `cumsum`, `cummin`, `cummax` and `rank`? The tests are one thing, but these don't all raise at the moment so would have to couple that with some refactoring of the `groupby` module",
        "createdAt" : "2018-02-09T20:31:02Z",
        "updatedAt" : "2018-02-09T20:31:02Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4e8f3429-f0ed-4439-9aee-5d9378cc7a9c",
        "parentId" : "640e82ea-e383-436f-a501-ef2cbde1f53e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes let's do this in another change.",
        "createdAt" : "2018-02-10T16:08:29Z",
        "updatedAt" : "2018-02-10T16:08:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa63b47595546d4583b0fa7dbfd9e9bff393c76e",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +2085,2089 @@        result = df.groupby(bins).median()\n        expected = df.groupby(bins).agg(lambda x: x.median())\n        assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\"dtype\", ["
  },
  {
    "id" : "7127fd22-0459-4d6a-a7a9-64e30c2dc40b",
    "prId" : 20081,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20081#pullrequestreview-102834667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc87e22f-7ea8-41ec-a4b8-822bf68aab97",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you provide a 1-line comment",
        "createdAt" : "2018-03-10T01:19:18Z",
        "updatedAt" : "2018-03-10T01:40:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9a656333-2f59-4ca3-af40-0533a967332c",
        "parentId" : "cc87e22f-7ea8-41ec-a4b8-822bf68aab97",
        "authorId" : "00662f94-8b2a-4eda-b6eb-1a32816139c6",
        "body" : "done in my last commit.",
        "createdAt" : "2018-03-10T01:41:26Z",
        "updatedAt" : "2018-03-10T01:41:26Z",
        "lastEditedBy" : "00662f94-8b2a-4eda-b6eb-1a32816139c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac6d5aec2eff44f896deab8b10ca60ffcca30e28",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +235,239 @@\n    def test_apply_trivial(self):\n        # GH 20066\n        # trivial apply: ignore input and return a constant dataframe.\n        df = pd.DataFrame({'key': ['a', 'a', 'b', 'b', 'a'],"
  },
  {
    "id" : "67516faf-eb4c-4e84-804f-572d07a7d829",
    "prId" : 20405,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20405#pullrequestreview-179095513",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a11eeaf-ec6d-434d-8ed5-e6708d1dcdc9",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "There is some inconsistency between the `apply_result` and the standard / agg counterparts, whereby the former is adding `.8` as the name. I don't think that's necessarily desirable but orthogonal to this change as the root cause there is somewhere within `.apply`",
        "createdAt" : "2018-08-07T20:01:42Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4aac49bc-8404-4ec5-aa0b-aca8f694e6e6",
        "parentId" : "6a11eeaf-ec6d-434d-8ed5-e6708d1dcdc9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, no this is definitily an api change you are making here, and not a good one. you *do* need to set the group name on the resulting index. we do this on purpose.",
        "createdAt" : "2018-11-27T01:56:48Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d63a9f8c-33d6-45a4-8815-0132d3f7596e",
        "parentId" : "6a11eeaf-ec6d-434d-8ed5-e6708d1dcdc9",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What is the purpose of the API to set the index name to the value of the `q` argument via `apply` but not `agg`? \r\n\r\nNote that the `check_names=False` is applied to `agg_result` but I would think if anything the expectation is backwards on these, as I'm not aware of any other function that would do this",
        "createdAt" : "2018-11-28T02:05:38Z",
        "updatedAt" : "2019-02-28T07:01:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec013bf03c03a4c5124150bba7549f64d4f9ca90",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +224,228 @@    apply_result = df_grouped.apply(DataFrame.quantile, .8)\n    expected = df_grouped.quantile(.8)\n    assert_frame_equal(apply_result, expected, check_names=False)\n    assert_frame_equal(agg_result, expected)\n"
  },
  {
    "id" : "6ab200df-f208-4404-9a0f-fc6be6079b99",
    "prId" : 20681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20681#pullrequestreview-112206624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5768fde-29a0-4198-a436-1ea4f7f73361",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "also happy to have in another PR, move all of the rank tests to test_functional (you can do it here as well). We may want to move other things too, so maybe new PR. test_groupby is getting large.",
        "createdAt" : "2018-04-14T12:44:09Z",
        "updatedAt" : "2018-04-21T18:23:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6eb1d8fbfa094d2b9ed2edd789d76e9345eb3cbe",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1966,1970 @@        assert_frame_equal(result, exp_df)\n\n    @pytest.mark.parametrize(\"grps\", [\n        ['qux'], ['qux', 'quux']])\n    @pytest.mark.parametrize(\"vals\", ["
  },
  {
    "id" : "d5a6375c-79f0-4960-8d84-3167f88c3971",
    "prId" : 20681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20681#pullrequestreview-113148486",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5a190b0-29ef-4e38-90aa-1c359f8d87c1",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "To err on the side of caution is it possible to test percentage display here as well? The other tests appear to do so",
        "createdAt" : "2018-04-14T15:35:08Z",
        "updatedAt" : "2018-04-21T18:23:09Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "55f0c283-04d0-47f8-a910-6018d246fecf",
        "parentId" : "a5a190b0-29ef-4e38-90aa-1c359f8d87c1",
        "authorId" : "4cd6c97a-353d-414a-949a-1e0cfc3a0c8a",
        "body" : "You are right. I just found out when pct is true, and ties_method is \"dense\". The ranks are not calculated as expected. ( with and without inf/nan)\r\n```\r\nIn [61]: df_test = pd.DataFrame({\"A\":[1,1,2,2],\"B\":[1,1,1,1]})\r\n\r\nIn [62]: df_test.groupby(\"B\").rank(method=\"dense\", ascending=True, pct=False, na_option='top')\r\nOut[62]:\r\n     A\r\n0  1.0\r\n1  1.0\r\n2  2.0\r\n3  2.0\r\n\r\nIn [63]: df_test.groupby(\"B\").rank(method=\"dense\", ascending=True, pct=True, na_option='top')\r\nOut[63]:\r\n      A\r\n0  0.25\r\n1  0.25\r\n2  0.50\r\n3  0.50\r\n```\r\nThe expected output should be \r\n```\r\nIn [65]: df_test['A'].rank(method=\"dense\", ascending=True, pct=True, na_option='top')\r\nOut[65]:\r\n0    0.5\r\n1    0.5\r\n2    1.0\r\n3    1.0\r\nName: A, dtype: float64\r\n```\r\nMaybe another PR ? Or fix it here?  It is similar to #15639 @jreback ",
        "createdAt" : "2018-04-18T03:11:44Z",
        "updatedAt" : "2018-04-21T18:23:09Z",
        "lastEditedBy" : "4cd6c97a-353d-414a-949a-1e0cfc3a0c8a",
        "tags" : [
        ]
      },
      {
        "id" : "7766d755-eac2-49f3-ae9b-a8e3c56c5d6b",
        "parentId" : "a5a190b0-29ef-4e38-90aa-1c359f8d87c1",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "If it's broken even without `np.inf` then I think another PR is fine - can you open an issue for it?",
        "createdAt" : "2018-04-18T04:01:31Z",
        "updatedAt" : "2018-04-21T18:23:09Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "05c7de5b-70b7-4b7c-ab2b-d5db3f8032c6",
        "parentId" : "a5a190b0-29ef-4e38-90aa-1c359f8d87c1",
        "authorId" : "4cd6c97a-353d-414a-949a-1e0cfc3a0c8a",
        "body" : "#20731",
        "createdAt" : "2018-04-18T09:45:40Z",
        "updatedAt" : "2018-04-21T18:23:09Z",
        "lastEditedBy" : "4cd6c97a-353d-414a-949a-1e0cfc3a0c8a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6eb1d8fbfa094d2b9ed2edd789d76e9345eb3cbe",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1971,1975 @@        [-np.inf, -np.inf, np.nan, 1., np.nan, np.inf, np.inf],\n    ])\n    @pytest.mark.parametrize(\"ties_method,ascending,na_option,exp\", [\n        ('average', True, 'keep', [1.5, 1.5, np.nan, 3, np.nan, 4.5, 4.5]),\n        ('average', True, 'top', [3.5, 3.5, 1.5, 5., 1.5, 6.5, 6.5]),"
  },
  {
    "id" : "774118af-38d8-420d-ae18-d6fb7163b9ef",
    "prId" : 21323,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21323#pullrequestreview-129785763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "781fd16d-152e-4c69-b013-25c6a49a40a0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the issue number here",
        "createdAt" : "2018-06-19T00:42:44Z",
        "updatedAt" : "2018-09-25T19:09:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c234b364847a3e06dd471d805e554f1c852f8419",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +627,631 @@def test_as_index_series_column_slice_raises(df):\n    # GH15072\n    grouped = df.groupby('A', as_index=False)\n    msg = r\"Column\\(s\\) C already selected\"\n"
  },
  {
    "id" : "a8481152-4228-4af2-b8da-2123c9fee5c1",
    "prId" : 22699,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22699#pullrequestreview-156322279",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2af08ae0-702e-45c7-babe-dd1c0de67009",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we could prob split the panel tests to a separate file (and just ignore warnings there), maybe make an issue",
        "createdAt" : "2018-09-18T11:45:34Z",
        "updatedAt" : "2018-09-18T15:03:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4990fc2d984b536e5c7c97ad55d4f550ae661867",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +506,510 @@    assert_frame_equal(agged, expected)\n\n\n@pytest.mark.parametrize('op', [lambda x: x.sum(), lambda x: x.mean()])\n@pytest.mark.filterwarnings(\"ignore:\\\\nPanel:FutureWarning\")"
  },
  {
    "id" : "7d79259d-0ef0-4489-9f9e-7a18de4e3070",
    "prId" : 24748,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24748#pullrequestreview-192678228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea009f8a-0844-4165-96c6-1a92f0c64567",
        "parentId" : null,
        "authorId" : "96febc42-f659-4fe2-8e4e-2abe86f95dab",
        "body" : "@jreback This is the only test I am modifying in this PR. Essentially it tracks how often the function is applied to a given row/group by appending the groups name to a list. \r\nPrevious behavior: Apply it twice to the first row. The first apply is done to check for `fast_apply` compatibility. The second apply is due to looping again from 0 to 2. \r\nIn my change I propose to perform the initial `fast_apply` compatibility check _within_ the loop to save one iteration. \r\n\r\nIs this what you had in mind or what scenario would you like me to test?",
        "createdAt" : "2019-01-15T14:40:55Z",
        "updatedAt" : "2019-03-26T03:47:22Z",
        "lastEditedBy" : "96febc42-f659-4fe2-8e4e-2abe86f95dab",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecb7294a21802382edf8de890179db4c02fccc91",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1384,1388 @@    df.groupby('a', sort=False, group_keys=False).apply(f)\n\n    expected_names = [0, 1, 2]\n    assert names == expected_names\n"
  },
  {
    "id" : "99d7c49c-7cd2-47e3-9c19-b5fe8aac39d8",
    "prId" : 25224,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25224#pullrequestreview-213556570",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "535f841e-3c30-49ef-9fd5-a45dccea39e7",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "So the only change in behavior is that the output order is now (consistently) the arguments passed to `.agg`?\r\n\r\nSince we did `['sum', 'ohlc']` the output order is `'sum', 'open', 'high', 'low', 'close'`?\r\n\r\nIf so, let's add an entry to the release notes, under the Groupby bug fix section, saying that `.agg` now respects the order of arguments when `'ohlc'` is one of the aggfuncs.",
        "createdAt" : "2019-03-12T17:08:08Z",
        "updatedAt" : "2019-03-12T17:08:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "7c05e5c5-4abb-4014-9309-4a11a38996ce",
        "parentId" : "535f841e-3c30-49ef-9fd5-a45dccea39e7",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This might be rather difficult to express in a whatsnew since it's really just applicable to `_aggregate_multiple_funcs` here. \r\n\r\nPerhaps a follow up to consistently use OrderedDict's in the groupby module is in order?",
        "createdAt" : "2019-03-12T17:15:48Z",
        "updatedAt" : "2019-03-12T17:15:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "69a43c28-4e30-4e5f-9ff6-9de10f0f04a1",
        "parentId" : "535f841e-3c30-49ef-9fd5-a45dccea39e7",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is `_aggregate_multiple_funcs` called by just by functions like `ohlc` that have multiple outputs per input? Or is it also called by `.agg([funcs])`?",
        "createdAt" : "2019-03-12T17:42:09Z",
        "updatedAt" : "2019-03-12T17:42:09Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "23eea9f7-0d7b-4225-979d-c214fe388a37",
        "parentId" : "535f841e-3c30-49ef-9fd5-a45dccea39e7",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "The latter. So this has implications to ordering which previously would have been non-deterministic in Py35. \r\n\r\nSo I think it might make sense as a follow up to use a OrderedDict and make better guarantees about the returned column order, but don't think that should hold this one up",
        "createdAt" : "2019-03-12T17:46:42Z",
        "updatedAt" : "2019-03-12T17:46:42Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "9b769a84-2e68-4677-ac50-6303a7a92c09",
        "parentId" : "535f841e-3c30-49ef-9fd5-a45dccea39e7",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "See #25692 as follow up",
        "createdAt" : "2019-03-12T17:56:43Z",
        "updatedAt" : "2019-03-12T17:56:44Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1557c211b59e8ad45dc2a381669c7a52df874c1e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1691,1695 @@        [1, 1, 1, 1, 1]\n    ], columns=pd.MultiIndex.from_tuples((\n        ('foo', 'sum', 'foo'), ('foo', 'ohlc', 'open'),\n        ('foo', 'ohlc', 'high'), ('foo', 'ohlc', 'low'),\n        ('foo', 'ohlc', 'close'))), index=pd.date_range("
  },
  {
    "id" : "b0e4c630-fdc7-429e-9057-3a231500bb59",
    "prId" : 26332,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26332#pullrequestreview-235918858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e7077d2-49c9-4d05-834f-31b006c34a4d",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This was a little bit more movement on the test than I had hoped for but the original test mentions something of this reshaping to be \"a little bit crude\" so it may be in order; new test should have the same coverage but with less reshaping",
        "createdAt" : "2019-05-10T04:15:41Z",
        "updatedAt" : "2019-05-10T04:15:41Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "729edeaa27c4ef1af712084b4ec1d196496e3429",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +517,521 @@    result1 = op(grouped)\n\n    keys = []\n    values = []\n    for n1, gp1 in data.groupby('A'):"
  },
  {
    "id" : "714c1e47-04ea-440c-b907-73b669d5c963",
    "prId" : 26374,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26374#pullrequestreview-239256404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "590c2193-b771-4134-979c-75753f9a752e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you give a 1-line description of what this is testing",
        "createdAt" : "2019-05-19T17:18:18Z",
        "updatedAt" : "2019-05-19T22:20:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cd25f0b5-b53c-458c-8461-21b87014b809",
        "parentId" : "590c2193-b771-4134-979c-75753f9a752e",
        "authorId" : "22a123c1-4cda-4016-b3b1-8768233d6e4d",
        "body" : "sure. will do so in the next commit",
        "createdAt" : "2019-05-19T21:39:20Z",
        "updatedAt" : "2019-05-19T22:20:01Z",
        "lastEditedBy" : "22a123c1-4cda-4016-b3b1-8768233d6e4d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea023dea46ef77d798f8208d1264728525103e2e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1740,1744 @@\ndef test_groupby_groups_in_BaseGrouper():\n    # GH 26326\n    # Test if DataFrame grouped with a pandas.Grouper has correct groups\n    mi = pd.MultiIndex.from_product([['A', 'B'],"
  }
]