[
  {
    "id" : "572a2f24-0d55-4c64-a25c-724ab42fbdd1",
    "prId" : 25693,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25693#pullrequestreview-214864926",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "222ef2dd-69ba-4ec2-b969-9484d3af8ca2",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "For my curiosity, what was the old order for various python versions?",
        "createdAt" : "2019-03-14T21:29:59Z",
        "updatedAt" : "2019-03-18T17:16:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b151fbfb-e2ef-45a4-94f2-f92ab793f631",
        "parentId" : "222ef2dd-69ba-4ec2-b969-9484d3af8ca2",
        "authorId" : "851a6d4e-e0c5-475a-a532-fd33a2a93062",
        "body" : "Index(['max', 'mean', 'min', 'ohlc', 'sum'], dtype='object'). This would have been the result in all python versions previous to the changes I made in concat (#25224). After the changes, this would have been the return for the versions below Python 3.6, and the order observed in this PR for 3.6 and above. This is why we converted dicts to OrderedDicts in the aggregation functions, to ensure that result would be consistent in all versions.",
        "createdAt" : "2019-03-15T04:44:56Z",
        "updatedAt" : "2019-03-18T17:16:55Z",
        "lastEditedBy" : "851a6d4e-e0c5-475a-a532-fd33a2a93062",
        "tags" : [
        ]
      }
    ],
    "commit" : "6690b00ae6d7c1111d716419bdfbb8d505f1e563",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +313,317 @@    result = res.columns.levels[1]\n\n    expected = pd.Index(['sum', 'max', 'mean', 'ohlc', 'min'])\n\n    tm.assert_index_equal(result, expected)"
  },
  {
    "id" : "deb31b72-303c-493c-89b6-06c9a2fe92a8",
    "prId" : 26359,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26359#pullrequestreview-238129405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efd8e2d8-bd41-4405-beef-0503692f4871",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can we add test coverage for a value that exceeds the upper limit of an int64?",
        "createdAt" : "2019-05-13T20:02:29Z",
        "updatedAt" : "2019-05-16T18:40:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "8a8166ab-5e9d-42a7-9857-01e7b53d0c60",
        "parentId" : "efd8e2d8-bd41-4405-beef-0503692f4871",
        "authorId" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "body" : "It's not immediately clear to me what we would be testing for in that case. Issue #26310 is basically that there is some method `f` such that `f(x) != f(y)`, even though `x == y`, when `x` is of type `np.int64` and `y` is of type `np.uint64`.\r\n\r\nIf the value of `y` would exceed the upper limit of `np.int64` you couldn't represent it as an `np.int64` (?) and I'm not sure how you could pick `x` in that case to produce the above situation.\r\n\r\nIf I have misunderstood, please elaborate.",
        "createdAt" : "2019-05-14T17:58:52Z",
        "updatedAt" : "2019-05-16T18:40:21Z",
        "lastEditedBy" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "tags" : [
        ]
      },
      {
        "id" : "5ee1d3c1-6a60-42ec-9db3-dce3504bd1ec",
        "parentId" : "efd8e2d8-bd41-4405-beef-0503692f4871",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "The problem here is going to be with unsigned integers in the range of 2**63 through 2**64-1 (range where uint64 exceeds int64). I'm not sure if that would even work with these agg functions and don't want to open up a Pandora's box here but if that doesn't work we might just need to reword the whatsnew",
        "createdAt" : "2019-05-14T19:19:27Z",
        "updatedAt" : "2019-05-16T18:40:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "10f5c7b4-1774-43e2-b792-9b9f9a024061",
        "parentId" : "efd8e2d8-bd41-4405-beef-0503692f4871",
        "authorId" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "body" : "I suggest rewording whatsnew here and dealing with that in another pull request. What do you think @WillAyd? How would you like the whatsnew to be worded?",
        "createdAt" : "2019-05-15T05:15:56Z",
        "updatedAt" : "2019-05-16T18:40:21Z",
        "lastEditedBy" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "tags" : [
        ]
      },
      {
        "id" : "1ea20616-a696-42f4-b3e7-99570602f858",
        "parentId" : "efd8e2d8-bd41-4405-beef-0503692f4871",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, input uint64's *should* work with your code change, but @mahepe ok to make an issue about this.",
        "createdAt" : "2019-05-16T00:20:49Z",
        "updatedAt" : "2019-05-16T18:40:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce22d54829b18d1fd6496c97083909b98783de81",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +325,329 @@    df.x = df.x.astype(dtype)\n    result = df.groupby('y').agg({'x': how})\n    result.x = result.x.astype(np.int64)\n    tm.assert_frame_equal(result, expected, check_exact=True)"
  },
  {
    "id" : "2b237137-2527-4129-a2e4-ee5f5fd97dc9",
    "prId" : 26359,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26359#pullrequestreview-237402360",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3eecea77-af7d-4d1b-92cd-936110d14f13",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Just out of curiosity how did you select these methods? The issue would cover more than just these right?\r\n\r\nJust asking as at some point we should probably add a shared fixture for the different aggregation / transformation methods. Probably a separate PR but just curious if this subset is intentional",
        "createdAt" : "2019-05-13T20:05:54Z",
        "updatedAt" : "2019-05-16T18:40:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "7e941d51-6494-4f1f-bf3e-28ae7bb23194",
        "parentId" : "3eecea77-af7d-4d1b-92cd-936110d14f13",
        "authorId" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "body" : "This subset is not intentional.\r\n\r\nI tried to select a set that would satisfy the requests by the other reviewer. Since this PR alters a pretty generic method, I'm sure you could test for a way larger set of methods. It's just that I don't know the codebase well enough to design such tests.",
        "createdAt" : "2019-05-14T17:44:28Z",
        "updatedAt" : "2019-05-16T18:40:21Z",
        "lastEditedBy" : "093d4877-be84-4d27-a655-b3adee9eed25",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce22d54829b18d1fd6496c97083909b98783de81",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +317,321 @@\n@pytest.mark.parametrize('dtype', [np.int64, np.uint64])\n@pytest.mark.parametrize('how', ['first', 'last', 'min',\n                                 'max', 'mean', 'median'])\ndef test_uint64_type_handling(dtype, how):"
  },
  {
    "id" : "418dd217-5495-436c-813a-953a3e76916a",
    "prId" : 26399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26399#pullrequestreview-238469126",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f075980-c33f-4d6d-9080-048790ff701e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is a tuple required? I would say yes, otherwise should raise",
        "createdAt" : "2019-05-16T00:00:08Z",
        "updatedAt" : "2019-05-29T13:32:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fe48fb25-3e0f-48f6-96d5-0e3c69fd31d1",
        "parentId" : "6f075980-c33f-4d6d-9080-048790ff701e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yes (this test is asserting that we raise when the values aren't 2-tuples.)",
        "createdAt" : "2019-05-16T15:25:36Z",
        "updatedAt" : "2019-05-29T13:32:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "25dca1ae55918302e6541f5650ced279a48af381",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +405,409 @@        with pytest.raises(TypeError, match=match):\n            grouped.agg(foo=1)\n\n        with pytest.raises(TypeError, match=match):\n            grouped.agg()"
  },
  {
    "id" : "e845d346-4f82-4f6b-9710-62af4689d056",
    "prId" : 26399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26399#pullrequestreview-238124606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "561d3691-e23c-4c1e-9f0d-208da1068b94",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you test for a non-found column (KeyError) with a nice message",
        "createdAt" : "2019-05-16T00:00:37Z",
        "updatedAt" : "2019-05-29T13:32:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "25dca1ae55918302e6541f5650ced279a48af381",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +409,413 @@            grouped.agg()\n\n        with pytest.raises(TypeError, match=match):\n            grouped.agg(a=('B', 'max'), b=(1, 2, 3))\n"
  },
  {
    "id" : "ac315611-e3b9-4987-bd1e-ee0d4660f9c0",
    "prId" : 26399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26399#pullrequestreview-238170881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "511bce33-2051-404a-a378-63234336421f",
        "parentId" : null,
        "authorId" : "6375e888-43ef-4fba-928c-affe0957c74b",
        "body" : "In order for this test to cover more ground, could we include a third test with all possible _aggfunc_ types in the test?\r\n\r\nSomething like:\r\n\r\n```python\r\n        #earlier: from functools import partial\r\n        p98 = partial(np.percentile, q=98)\r\n        result = df.groupby('group').agg(\r\n            b_min=(\"B\", \"min\"),                         # string aggfunc\r\n            a_min=(\"A\", min),                           # built-in\r\n            a_average=(\"A\", np.mean),                   # numpy function\r\n            a_p98=(\"A\", p98),                           # partial function\r\n            b_p98=(\"B\", lambda x: np.percentile(x, 98)) # lambda function\r\n        )\r\n```",
        "createdAt" : "2019-05-16T04:12:14Z",
        "updatedAt" : "2019-05-29T13:32:50Z",
        "lastEditedBy" : "6375e888-43ef-4fba-928c-affe0957c74b",
        "tags" : [
        ]
      }
    ],
    "commit" : "25dca1ae55918302e6541f5650ced279a48af381",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +368,372 @@                                 'a_min', 'b_max', 'b_min']]\n        tm.assert_frame_equal(result, expected)\n\n    def test_agg_relabel_non_identifier(self):\n        df = pd.DataFrame({\"group\": ['a', 'a', 'b', 'b'],"
  },
  {
    "id" : "96572ae5-1deb-4d24-ab12-0233790bf76e",
    "prId" : 26399,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26399#pullrequestreview-238474694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f69df7f9-3654-4f53-b379-6b96884187bb",
        "parentId" : null,
        "authorId" : "6375e888-43ef-4fba-928c-affe0957c74b",
        "body" : "Why doesn't this work? These are not lambda functions. Do you mean that the (\"selected colname\", \"aggfunc `__name__`\") pairs must be all unique?",
        "createdAt" : "2019-05-16T04:14:37Z",
        "updatedAt" : "2019-05-29T13:32:50Z",
        "lastEditedBy" : "6375e888-43ef-4fba-928c-affe0957c74b",
        "tags" : [
        ]
      },
      {
        "id" : "7786befd-1ac1-4752-b6df-c9cd10001ada",
        "parentId" : "f69df7f9-3654-4f53-b379-6b96884187bb",
        "authorId" : "6375e888-43ef-4fba-928c-affe0957c74b",
        "body" : "I'd like to add, that ideally:\r\n* the (\"selected colname\", \"aggfunc `__name__`\") pairs should **not** have to be all unique\r\n* the (\"renamed dest col\", \"selected colname\", \"aggfunc `__name__`\") pairs **must** be all unique\r\n\r\nIf the above holds, then using multiple lambdas and/or multiple partials based on the same base function would work and this would solve the issues mentioned in the initial post of #18366.\r\n\r\nI suppose that this implementation-related limitation is the one you were referring to at the end of your comment in https://github.com/pandas-dev/pandas/issues/18366#issuecomment-492784947",
        "createdAt" : "2019-05-16T05:14:00Z",
        "updatedAt" : "2019-05-29T13:32:50Z",
        "lastEditedBy" : "6375e888-43ef-4fba-928c-affe0957c74b",
        "tags" : [
        ]
      },
      {
        "id" : "9960b05b-4263-456a-b49f-1663f92250ac",
        "parentId" : "f69df7f9-3654-4f53-b379-6b96884187bb",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> Do you mean that the (\"selected colname\", \"aggfunc __name__\") pairs must be all unique?\r\n\r\nYes. This could perhaps be relaxed in the future.",
        "createdAt" : "2019-05-16T15:34:18Z",
        "updatedAt" : "2019-05-29T13:32:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "25dca1ae55918302e6541f5650ced279a48af381",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +384,388 @@        df = pd.DataFrame({\"A\": [0, 0, 1, 1], \"B\": [1, 2, 3, 4]})\n        with pytest.raises(SpecificationError, match=\"Function names\"):\n            df.groupby(\"A\").agg(a=(\"A\", \"min\"), b=(\"A\", \"min\"))\n\n    def test_agg_relabel_with_level(self):"
  },
  {
    "id" : "bc597f11-a516-4faf-b2f9-1707fbdcdb14",
    "prId" : 28428,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28428#pullrequestreview-289047494",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b32ebf84-b6f2-4ae6-885f-ac4ab240cd94",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is this duplicating an existing test?",
        "createdAt" : "2019-09-16T21:05:57Z",
        "updatedAt" : "2019-12-03T14:45:01Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "d136f38b-b0ee-466b-a938-52efdcff358e",
        "parentId" : "b32ebf84-b6f2-4ae6-885f-ac4ab240cd94",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "emm, you mean the name of the test? or the test itself? I dont think it's duplicating an existing test, at least i look up the tests and corresponding error message, this doesn't seem to be a duplicate to me. @TomAugspurger ",
        "createdAt" : "2019-09-17T06:44:29Z",
        "updatedAt" : "2019-12-03T14:45:01Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8eaeceeb02a2d7d7f780887a32e3bea1a922a17b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +354,358 @@\n\ndef test_func_duplicates_raises():\n    # GH28426\n    msg = \"Function names\""
  },
  {
    "id" : "2598ebb5-9918-4e10-ae1e-f2f4c48067bd",
    "prId" : 28428,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28428#pullrequestreview-289074586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2221a607-b189-45eb-a5c1-956895e8a1b8",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you also add a test using `functools.partial` as in the original issue?",
        "createdAt" : "2019-09-16T21:06:39Z",
        "updatedAt" : "2019-12-03T14:45:01Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "9a8d4756-f1bf-4fe3-8819-e8020a59980d",
        "parentId" : "2221a607-b189-45eb-a5c1-956895e8a1b8",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "genius!! really have sharp eyes!! this will not raise an error, but will produce wrong result, detailed result is pushed! It seems not as easy as directly removing error message, might be inappropriate for Series agg, I will debug a bit and let you know in details. @TomAugspurger ",
        "createdAt" : "2019-09-17T07:13:45Z",
        "updatedAt" : "2019-12-03T14:45:01Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      },
      {
        "id" : "6cbb1ed1-51a9-43b1-a933-aefc72ef075a",
        "parentId" : "2221a607-b189-45eb-a5c1-956895e8a1b8",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "this might come down to having named aggregation in Series? i need time to look deeper in code base. Will update later.",
        "createdAt" : "2019-09-17T07:46:13Z",
        "updatedAt" : "2019-12-03T14:45:01Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8eaeceeb02a2d7d7f780887a32e3bea1a922a17b",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +458,462 @@        )\n        tm.assert_frame_equal(grouped, expected)\n\n        quant50 = functools.partial(np.percentile, q=50)\n        quant70 = functools.partial(np.percentile, q=70)"
  },
  {
    "id" : "a2e0c0f8-631d-41b1-a0c0-0bac65eeed57",
    "prId" : 29504,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29504#pullrequestreview-315110483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8948f3bb-e657-4252-a390-557fae0e3a3b",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you split this and the test below into two separate tests? Seem to be testing different things",
        "createdAt" : "2019-11-11T19:24:40Z",
        "updatedAt" : "2019-11-11T19:49:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a30180d5-e5ae-4488-8734-58387a33baea",
        "parentId" : "8948f3bb-e657-4252-a390-557fae0e3a3b",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "thanks for your comment, will split!",
        "createdAt" : "2019-11-11T19:33:14Z",
        "updatedAt" : "2019-11-11T19:49:52Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e138de68c2b608b17c225c4c4eabd4001856093",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +555,559 @@    df.columns = pd.MultiIndex.from_tuples([(\"x\", \"group\"), (\"y\", \"A\"), (\"y\", \"B\")])\n\n    with pytest.raises(KeyError, match=\"does not exist\"):\n        df.groupby((\"x\", \"group\")).agg(a=((\"Y\", \"a\"), \"max\"))\n"
  },
  {
    "id" : "f18c3341-d13c-4adb-8f08-b66156b67d69",
    "prId" : 29866,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29866#pullrequestreview-323738000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75f81add-86a8-4fa2-9cc7-0438af7dc623",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "can you add the issue number as a comment",
        "createdAt" : "2019-11-26T22:18:38Z",
        "updatedAt" : "2019-11-27T14:59:32Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "4d846852-b28e-48b0-b610-8fbb57680346",
        "parentId" : "75f81add-86a8-4fa2-9cc7-0438af7dc623",
        "authorId" : "d705e2fe-0c9b-4946-83ef-053374236fa1",
        "body" : "added issue number and modified test to fail on 0.25.x (verified on 0.25.3)...",
        "createdAt" : "2019-11-27T15:00:57Z",
        "updatedAt" : "2019-11-27T15:00:57Z",
        "lastEditedBy" : "d705e2fe-0c9b-4946-83ef-053374236fa1",
        "tags" : [
        ]
      }
    ],
    "commit" : "1229c49a4855e43dec7f3db34862a138551124e9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +93,97 @@\n\ndef test_groupby_aggregation_multi_level_column():\n    # GH 29772\n    lst = ["
  },
  {
    "id" : "1ab78de4-3d81-49d6-b56e-eeda44d427c7",
    "prId" : 30856,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30856#pullrequestreview-345525717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6620fb1d-c249-4a62-bfc4-0aee4cd8029c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "move all of these tests to pandas/tests/test_aggregation.py",
        "createdAt" : "2020-01-20T20:02:23Z",
        "updatedAt" : "2020-01-20T22:05:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f93bf68c-05d4-4f5c-bb2a-7b83344f5416",
        "parentId" : "6620fb1d-c249-4a62-bfc4-0aee4cd8029c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "just the tests where you are moving the code (e.g. the maybe_mangle.....) and such",
        "createdAt" : "2020-01-20T20:03:04Z",
        "updatedAt" : "2020-01-20T22:05:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d896456c-81f2-45ae-abd2-2a8aba3844bf",
        "parentId" : "6620fb1d-c249-4a62-bfc4-0aee4cd8029c",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "yeah, I was thinking it as a follow-up, but maybe good to have it in a go here! I moved all tests related to functions in aggregation to `pandas/tests/test_aggregation.py`",
        "createdAt" : "2020-01-20T20:45:35Z",
        "updatedAt" : "2020-01-20T22:05:51Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "64a999181424cf6b9f354505db5b8d509075f89b",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +631,635 @@\n\nclass TestLambdaMangling:\n    def test_basic(self):\n        df = pd.DataFrame({\"A\": [0, 0, 1, 1], \"B\": [1, 2, 3, 4]})"
  },
  {
    "id" : "9fb4504e-97a2-4c61-a504-b1e401ec7a9c",
    "prId" : 30858,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30858#pullrequestreview-404602001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7b72e29-f0ab-419a-be9e-1137ed3ef881",
        "parentId" : null,
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "This is thrown by\r\n```python\r\nassert col in right\r\n```\r\nin `assert_frame_equal`",
        "createdAt" : "2020-05-03T10:06:55Z",
        "updatedAt" : "2020-07-14T18:13:29Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb3ba5c79c629392990d9f581d9d6c1dfe550bed",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +308,312 @@    # PerformanceWarning is thrown by `assert col in right` in assert_frame_equal\n    with tm.assert_produces_warning(PerformanceWarning):\n        tm.assert_frame_equal(result, expected)\n\n"
  },
  {
    "id" : "71b6c071-836a-4b15-b00a-c608f511e1bd",
    "prId" : 30858,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30858#pullrequestreview-448443842",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "192e8dbf-d9db-4e35-b897-8f90970d9dc8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment why we have a PerformanceWarning",
        "createdAt" : "2020-05-17T21:43:50Z",
        "updatedAt" : "2020-07-14T18:13:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2e182e9d-53b6-4e42-90e7-db736942e2ff",
        "parentId" : "192e8dbf-d9db-4e35-b897-8f90970d9dc8",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Generally for this, we would just silence / filter the warning. We don't specifically care that there's a warning here.",
        "createdAt" : "2020-07-14T20:34:33Z",
        "updatedAt" : "2020-07-14T20:34:42Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb3ba5c79c629392990d9f581d9d6c1dfe550bed",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +307,311 @@    )\n    # PerformanceWarning is thrown by `assert col in right` in assert_frame_equal\n    with tm.assert_produces_warning(PerformanceWarning):\n        tm.assert_frame_equal(result, expected)\n"
  },
  {
    "id" : "b20b6f0f-3c8b-468e-b8c0-eec10de75ba3",
    "prId" : 31477,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31477#pullrequestreview-353117307",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3550b873-bec6-4fb6-9b46-9fdfe59be108",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you move these to test_timegrouper.py (same dir)",
        "createdAt" : "2020-02-01T14:39:53Z",
        "updatedAt" : "2020-02-04T21:30:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fff1e559-84d1-4c68-8d2c-efb6c1ccf003",
        "parentId" : "3550b873-bec6-4fb6-9b46-9fdfe59be108",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Since we're grouping by an int column and only aggregating the period column (not using a time grouper), does the current location make more sense?",
        "createdAt" : "2020-02-01T17:05:50Z",
        "updatedAt" : "2020-02-04T21:30:16Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "00b91173-4c3a-4bc7-a3e8-b7d3cc134230",
        "parentId" : "3550b873-bec6-4fb6-9b46-9fdfe59be108",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This location seems OK since we're grouping by integers, not time.",
        "createdAt" : "2020-02-04T16:26:46Z",
        "updatedAt" : "2020-02-04T21:30:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "61b1016a3c4dd36c2bea469abccdc1b0b9f5f4e7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +685,689 @@\n\n@pytest.mark.parametrize(\"func\", [\"min\", \"max\"])\ndef test_groupby_aggregate_period_column(func):\n    # GH 31471"
  },
  {
    "id" : "a1a1cb62-6bc9-42ad-aada-64c14cebc7fa",
    "prId" : 32121,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32121#pullrequestreview-361773053",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec7d716d-9017-4643-9ecb-dd5676c4b884",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think a better approach here would be to Mock a function and examine the call_count after application. There's an example using `create_autospec` in the Python docs\r\n\r\nhttps://docs.python.org/3/library/unittest.mock.html",
        "createdAt" : "2020-02-20T03:59:35Z",
        "updatedAt" : "2020-02-20T03:59:58Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e99fa6c8-0191-48cd-a825-2888713b35b7",
        "parentId" : "ec7d716d-9017-4643-9ecb-dd5676c4b884",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we already use this pattern elsewhere",
        "createdAt" : "2020-02-20T10:04:31Z",
        "updatedAt" : "2020-02-20T10:04:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae3bc66c7efba9badfbf1298225331d7407a979b",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +19,23 @@    gb = df.groupby(\"key\")[\"value\"]\n\n    def dummy_func(x):\n        assert len(x) != 0\n        return x.sum()"
  },
  {
    "id" : "2fbf6c82-9765-4c06-8cfe-c9751a3ed49a",
    "prId" : 33086,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33086#pullrequestreview-383438132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8acc60b-3d5f-40d1-84ff-a2d454540c16",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "parameterize over the 2 cases here (result, result_2) (you can put the kwargs in the parameterization)",
        "createdAt" : "2020-03-29T15:12:14Z",
        "updatedAt" : "2020-06-14T16:32:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9b32616b-c365-44a3-9b5e-bc7fccdc09f8",
        "parentId" : "d8acc60b-3d5f-40d1-84ff-a2d454540c16",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "Thanks! Done.",
        "createdAt" : "2020-03-29T18:01:29Z",
        "updatedAt" : "2020-06-14T16:32:28Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      }
    ],
    "commit" : "51f636e2a4ae1858188a85f55c89222265cf0b2d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +736,740 @@def test_groupby_aggregate_empty_key(kwargs):\n    # GH: 32580\n    df = pd.DataFrame({\"a\": [1, 1, 2], \"b\": [1, 2, 3], \"c\": [1, 2, 4]})\n    result = df.groupby(\"a\").agg(kwargs)\n    expected = pd.DataFrame("
  },
  {
    "id" : "ff7866a7-4f60-49f5-a5fd-a89d54ffb17e",
    "prId" : 33086,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33086#pullrequestreview-383438265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b78eb87-12c7-4e57-9c24-8eb3e28da6e1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you might be able to include this case in the above parmaterization as well, if too many gymnastics, then ok to have this test separate",
        "createdAt" : "2020-03-29T15:13:25Z",
        "updatedAt" : "2020-06-14T16:32:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a5b00d57-dd24-445c-9055-a9ad75293cf5",
        "parentId" : "3b78eb87-12c7-4e57-9c24-8eb3e28da6e1",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "I think the parametrization would be more complex and longer than the second test case, because we would have to parametrize the whole expected DataFrame. \r\n\r\nI would like to avoid that",
        "createdAt" : "2020-03-29T18:02:29Z",
        "updatedAt" : "2020-06-14T16:32:28Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      }
    ],
    "commit" : "51f636e2a4ae1858188a85f55c89222265cf0b2d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +747,751 @@\ndef test_groupby_aggregate_empty_key_empty_return():\n    # GH: 32580 Check if everything works, when return is empty\n    df = pd.DataFrame({\"a\": [1, 1, 2], \"b\": [1, 2, 3], \"c\": [1, 2, 4]})\n    result = df.groupby(\"a\").agg({\"b\": []})"
  },
  {
    "id" : "416050a3-2159-41a2-b219-3916785c4fbb",
    "prId" : 35039,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35039#pullrequestreview-439207940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85fd6505-0ba9-470a-8de3-33c98d26f980",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "prob should have been in test_category.py",
        "createdAt" : "2020-06-29T12:55:49Z",
        "updatedAt" : "2020-06-29T12:55:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bc5891da-9054-44b1-a332-1fdca5700e72",
        "parentId" : "85fd6505-0ba9-470a-8de3-33c98d26f980",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "There are two other tests for categorical in that file, test_agg_cython_category_not_implemented_fallback and test_aggregate_categorical_lost_index. move those as well?",
        "createdAt" : "2020-06-29T13:03:09Z",
        "updatedAt" : "2020-06-29T13:03:09Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "e82d5649-8053-47be-9fb6-c9e8e23ed0f2",
        "parentId" : "85fd6505-0ba9-470a-8de3-33c98d26f980",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah prob ",
        "createdAt" : "2020-06-29T13:26:41Z",
        "updatedAt" : "2020-06-29T13:26:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e6f319d6-b5bf-47ae-9389-16392417a434",
        "parentId" : "85fd6505-0ba9-470a-8de3-33c98d26f980",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "moved in #35052",
        "createdAt" : "2020-06-29T14:35:12Z",
        "updatedAt" : "2020-06-29T14:35:12Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b41c055fa3d6343ff31cb90901e00fa2234247f4",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +998,1002 @@\ndef test_aggregate_categorical_with_isnan():\n    # GH 29837\n    df = pd.DataFrame(\n        {"
  },
  {
    "id" : "a4432c64-4cd0-4d57-8814-45dcde72b06d",
    "prId" : 39311,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39311#pullrequestreview-573912857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db775900-a753-4e46-98ce-151257146406",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this new?",
        "createdAt" : "2021-01-21T18:33:47Z",
        "updatedAt" : "2021-01-21T18:33:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1eb1d62b-a3aa-45a9-9202-e5f651e7ecdc",
        "parentId" : "db775900-a753-4e46-98ce-151257146406",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "With regards to idxmax/idxmin, no. Those are the two reduction_func that support axis=1 (whereas all others do not). However, they fail here because `df` has string and numeric columns.",
        "createdAt" : "2021-01-22T02:46:00Z",
        "updatedAt" : "2021-01-22T02:46:00Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a0e9d2e7b1cd0b8881a31b15e766a8494f6c857",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +206,210 @@def test_agg_str_with_kwarg_axis_1_raises(df, reduction_func):\n    gb = df.groupby(level=0)\n    if reduction_func in (\"idxmax\", \"idxmin\"):\n        error = TypeError\n        msg = \"reduction operation '.*' not allowed for this dtype\""
  },
  {
    "id" : "4d2affa9-ac8f-4cd7-9b1f-d294c015670b",
    "prId" : 40835,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40835#pullrequestreview-634656775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e10608e-2957-4387-9ea9-c8abff540ff3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a 1-liner comment about the expected index here",
        "createdAt" : "2021-04-13T12:44:17Z",
        "updatedAt" : "2021-04-14T12:42:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5228b563-a6dc-4b9d-8e20-e5ab5f071095",
        "parentId" : "1e10608e-2957-4387-9ea9-c8abff540ff3",
        "authorId" : "32d3d9c9-b191-405d-acc8-d2e82172e15c",
        "body" : "I wasnt quite sure what you meant/expected, but I added a comment. Let me know if I misinterpreted something.",
        "createdAt" : "2021-04-13T14:24:26Z",
        "updatedAt" : "2021-04-14T12:42:22Z",
        "lastEditedBy" : "32d3d9c9-b191-405d-acc8-d2e82172e15c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b89eee0d4d653c6b5f9b7b3bb6b5f12a77b2d583",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1225,1229 @@\ndef test_groupby_index_object_dtype():\n    # GH 40014\n    df = DataFrame({\"c0\": [\"x\", \"x\", \"x\"], \"c1\": [\"x\", \"x\", \"y\"], \"p\": [0, 1, 2]})\n    df.index = df.index.astype(\"O\")"
  }
]