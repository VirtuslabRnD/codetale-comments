[
  {
    "id" : "b1a2c92a-f036-4afd-beb4-f055b7925c75",
    "prId" : 16586,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16586#pullrequestreview-48495658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d246729d-44f5-4abb-bc92-324641c193c3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you also add the tests from the original issue (it was on PI) as a specific test.",
        "createdAt" : "2017-07-04T14:18:54Z",
        "updatedAt" : "2017-07-07T10:29:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "65dd3ee4-8828-459c-9814-7b3b26088bb5",
        "parentId" : "d246729d-44f5-4abb-bc92-324641c193c3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I mean this test here: https://github.com/pandas-dev/pandas/issues/16541#issue-232356015",
        "createdAt" : "2017-07-06T22:48:39Z",
        "updatedAt" : "2017-07-07T10:29:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6404e4f6-3f09-49f8-b452-e425a7c960ec",
        "parentId" : "d246729d-44f5-4abb-bc92-324641c193c3",
        "authorId" : "b640884a-d4a1-49d9-80e8-e108ea20e1fe",
        "body" : "do mean mean add the code that generated the issue as a test (joining two randomly generated 5x5 DataFrames)?  I don't really understand what you're asking me to do.",
        "createdAt" : "2017-07-07T00:12:45Z",
        "updatedAt" : "2017-07-07T10:29:25Z",
        "lastEditedBy" : "b640884a-d4a1-49d9-80e8-e108ea20e1fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "2aea2b54ae09a9e8fcbdee904c3ed261617e762c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +935,939 @@        assert index[:0].empty\n\n    @pytest.mark.parametrize('how', ['outer', 'inner', 'left', 'right'])\n    def test_join_self_unique(self, how):\n        index = self.create_index()"
  },
  {
    "id" : "67984417-376a-4af3-935a-54e7fc7db0b7",
    "prId" : 17272,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17272#pullrequestreview-545668584",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2195faf6-ead9-4300-a6fe-ceba6fa9b642",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@jschendel why is CategoricalIndex excluded here?",
        "createdAt" : "2020-12-06T03:59:04Z",
        "updatedAt" : "2020-12-06T03:59:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "41e59d7f9947518f85dc2c38ac9da7ac6eaec64b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +140,144 @@                continue\n\n            if index.is_unique or isinstance(index, CategoricalIndex):\n                indexer = index.get_indexer(index[0:2])\n                assert isinstance(indexer, np.ndarray)"
  },
  {
    "id" : "4045eb72-923c-445b-968e-1f29c82e3216",
    "prId" : 17815,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17815#pullrequestreview-67902634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84629b8d-4034-4b80-97df-ade3f15565b1",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There is at least one in the `create_index` indices that has a name? (or at least one that has no name)",
        "createdAt" : "2017-10-09T07:27:02Z",
        "updatedAt" : "2017-10-09T07:38:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "68ad08db-408a-4232-8986-39c1e44c9350",
        "parentId" : "84629b8d-4034-4b80-97df-ade3f15565b1",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yes, there is.",
        "createdAt" : "2017-10-09T07:32:49Z",
        "updatedAt" : "2017-10-09T07:38:20Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c0aaec3cc03bdb2f58a993d008ba4d4ed36c8ee",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +55,59 @@        # see gh-15230\n        idx = self.create_index()\n        name = idx.name or 0\n\n        df = idx.to_frame()"
  },
  {
    "id" : "675aa7fc-e261-48a7-9a35-055e9bd2e44f",
    "prId" : 18707,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18707#pullrequestreview-82354099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45b54abb-16d3-4494-bf10-6fa07db62b62",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can do this in 1 test",
        "createdAt" : "2017-12-10T15:47:47Z",
        "updatedAt" : "2017-12-10T17:57:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec05208ba2f24cb5c9da5134bbc1e1081f5fb5a3",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +61,65 @@        assert s.index is idx\n        assert s.name == idx.name\n\n        # name kwarg\n        idx = self.create_index()"
  },
  {
    "id" : "14dd49c8-c3f3-461b-b8e9-083c89d36fc6",
    "prId" : 20611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20611#pullrequestreview-109412132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1911356-a8a3-414c-9bb4-9acd14dfe095",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Made this change since `IntervalArray` currently isn't mutable. Worth talking about that.",
        "createdAt" : "2018-04-04T16:56:54Z",
        "updatedAt" : "2018-07-13T01:00:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "385ce59f79ff1921a44f3bbaa17044032e3ed4d3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +887,891 @@\n                idx = index.copy()\n                values = np.asarray(idx.values)\n\n                if len(index) == 0:"
  },
  {
    "id" : "6475513f-c855-4976-ba51-8262fd4271b5",
    "prId" : 21902,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21902#pullrequestreview-137240619",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75e4206c-c59b-44cb-919c-795a9f3e7341",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this a duplicate these (pun intended) or are not testing indices duplicated currently?",
        "createdAt" : "2018-07-14T14:16:49Z",
        "updatedAt" : "2018-08-09T08:05:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b6d67a1b-65ec-463e-a92e-b9ad00e547ec",
        "parentId" : "75e4206c-c59b-44cb-919c-795a9f3e7341",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "@jreback `.duplicated` is hardly ever tested directly, only indirectly for stuff like `.drop_duplicates`. Regardless of the changes to `.duplicated` in #21645, I think duplicated should be tested separately.",
        "createdAt" : "2018-07-14T14:31:50Z",
        "updatedAt" : "2018-08-09T08:05:54Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "85be5ac9-3b2b-4352-bf20-60690588550e",
        "parentId" : "75e4206c-c59b-44cb-919c-795a9f3e7341",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so these are not relevant?\r\n```\r\npandas/tests/indexes/common.py:    def test_duplicates(self, indices):\r\npandas/tests/indexes/test_category.py:    def test_duplicates(self):\r\npandas/tests/indexes/test_range.py:    def test_duplicates(self):\r\n```",
        "createdAt" : "2018-07-14T14:57:26Z",
        "updatedAt" : "2018-08-09T08:05:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8ea9afe7-548c-4723-b802-6887f837d087",
        "parentId" : "75e4206c-c59b-44cb-919c-795a9f3e7341",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "@jreback No, `test_duplicates` (at least for `pandas/tests/indexes/common.py`, which is what this PR is about) tests `.is_unique` and `.has_duplicates`, but not the `.duplicated`-method itself.",
        "createdAt" : "2018-07-14T15:02:58Z",
        "updatedAt" : "2018-08-09T08:05:54Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "1075b4c2-4fa8-43e4-aec4-e328f7422a73",
        "parentId" : "75e4206c-c59b-44cb-919c-795a9f3e7341",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you point to the coverage that shows this is NOT tested?",
        "createdAt" : "2018-07-14T15:07:05Z",
        "updatedAt" : "2018-08-09T08:05:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "33481f31-4da0-409b-92cf-5445eedd8b05",
        "parentId" : "75e4206c-c59b-44cb-919c-795a9f3e7341",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "@jreback I never said that it is not tested, just that it is only tested *implicitly*. Any call to `.drop_duplicates` will invoke `duplicated`, so obviously the coverage works out.",
        "createdAt" : "2018-07-14T15:09:55Z",
        "updatedAt" : "2018-08-09T08:05:54Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9c9aab75b63bf3367f5c9818c3f4a833efbe393",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +352,356 @@        assert idx.has_duplicates\n\n    @pytest.mark.parametrize('keep', ['first', 'last', False])\n    def test_duplicated(self, indices, keep):\n        if type(indices) is not self._holder:"
  },
  {
    "id" : "0a854895-df83-45d5-92e6-4d298aa12af3",
    "prId" : 21902,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21902#pullrequestreview-143478094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "956fd15b-41f0-4b70-90a1-4b31b4373978",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you use isinstance here",
        "createdAt" : "2018-07-16T10:58:56Z",
        "updatedAt" : "2018-08-09T08:05:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "06ce647f-edfc-41b4-862a-d321ff967d3b",
        "parentId" : "956fd15b-41f0-4b70-90a1-4b31b4373978",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "@jreback `isinstance` of what? I copied the checks from other tests, because I didn't know all the different cases that flow into `common.py`.",
        "createdAt" : "2018-07-16T11:01:49Z",
        "updatedAt" : "2018-08-09T08:05:54Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "745c8a76-4f5a-4dc3-9980-629e2d0ab93f",
        "parentId" : "956fd15b-41f0-4b70-90a1-4b31b4373978",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "isinstance of self._holder, is this what we do elsewhere?",
        "createdAt" : "2018-07-16T11:04:06Z",
        "updatedAt" : "2018-08-09T08:05:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3a347272-cd65-4579-959f-e7a50f03e1ce",
        "parentId" : "956fd15b-41f0-4b70-90a1-4b31b4373978",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "not in `indexes/common.py`, as far as I can see. There's several `isinstance` of course, but never for `self._holder`, which can apparently be `None` as well.",
        "createdAt" : "2018-07-16T15:11:54Z",
        "updatedAt" : "2018-08-09T08:05:54Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "06a7874a-fcee-4473-bf4e-d8f45f3ead9e",
        "parentId" : "956fd15b-41f0-4b70-90a1-4b31b4373978",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "@jreback If I change\r\n```\r\nif type(indices) is not self._holder:\r\n```\r\nto\r\n```\r\nif not isinstance(indices, self._holder):\r\n```\r\nI get 9 failures (instead of skips), all of which are from\r\n\r\n`tests/indexes/test_numeric.TestInt64Index`, when run against `DatetimeIndex`, `PeriodIndex` or `TimedeltaIndex`, mainly because of `TypeError: Unsafe NumPy casting, you must explicitly cast` it seems.",
        "createdAt" : "2018-07-16T15:35:07Z",
        "updatedAt" : "2018-08-09T08:05:54Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "ee77dfa7-e869-4c69-85f9-ef1b1e5186a0",
        "parentId" : "956fd15b-41f0-4b70-90a1-4b31b4373978",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "@jreback Seem to have found something: in my normal workbook, I get\r\n```\r\npd.__version__\r\n# '0.24.0.dev0+321.g0fe6ded52.dirty'\r\nisinstance(pd.PeriodIndex, pd.Int64Index)\r\n# False\r\n```\r\nbut for some reason, within `tests/indexes/common.py`, this is the opposite:\r\n```\r\n    [...output of test run...]\r\n    \r\n    @pytest.mark.parametrize('keep', ['first', 'last', False])\r\n    def test_duplicated(self, indices, keep):\r\n        if not isinstance(indices, self._holder):\r\n            pytest.skip('Can only check if we know the index type')\r\n        if not len(indices) or isinstance(indices, (MultiIndex)):\r\n            # MultiIndex tested separately in:\r\n            # tests/indexes/multi/test_unique_and_duplicates\r\n            pytest.skip('Skip check for empty Index and MultiIndex')\r\n        if isinstance(indices, (PeriodIndex, DatetimeIndex)):\r\n            # this branch should be impossible for Int64Index\r\n            # after the instance-check above!\r\n>           raise ValueError(f'{type(indices).__name__}, {self._holder.__name__}, '\r\n                             f'{isinstance(indices, self._holder)}, {type(indices) is self._holder}')\r\nE           ValueError: PeriodIndex, Int64Index, True, False\r\n```\r\nSame happens for `DatetimeIndex`. It *does* work for the original `is not` variant, so I'm leaving that as it is for now.",
        "createdAt" : "2018-07-16T16:00:16Z",
        "updatedAt" : "2018-08-09T08:05:54Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "f22944d9-74a0-413f-bb9a-6d0fbb65900e",
        "parentId" : "956fd15b-41f0-4b70-90a1-4b31b4373978",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Opened a follow-up: #22211",
        "createdAt" : "2018-08-06T06:38:49Z",
        "updatedAt" : "2018-08-09T08:05:54Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "7df7e2bc-fe2e-4cb7-8b15-f468340fa44b",
        "parentId" : "956fd15b-41f0-4b70-90a1-4b31b4373978",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Nevermind, I had gotten confused between instances and classes.\r\n\r\nSo `DatetimeIndex`, `PeriodIndex` and `TimedeltaIndex` are subclasses of `Int64Index` - but are unsafe to cast to Int64...? I guess this is intentional?\r\n\r\nIn any case, under these circumstances, I'm even more convinced that it's best to just stay with the `if type(indices) is not self._holder:` condition.",
        "createdAt" : "2018-08-06T07:30:15Z",
        "updatedAt" : "2018-08-09T08:05:54Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9c9aab75b63bf3367f5c9818c3f4a833efbe393",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +354,358 @@    @pytest.mark.parametrize('keep', ['first', 'last', False])\n    def test_duplicated(self, indices, keep):\n        if type(indices) is not self._holder:\n            pytest.skip('Can only check if we know the index type')\n        if not len(indices) or isinstance(indices, MultiIndex):"
  },
  {
    "id" : "318d6726-7512-4dc5-9afb-9da4ee655566",
    "prId" : 21902,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21902#pullrequestreview-139059331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34d934b5-a54e-441b-b8ce-b53738944cfc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I hate to check as a numpy array, much prefer to check the type and use assert_index_equal or assert_series_equal. is this how the other tests are?",
        "createdAt" : "2018-07-20T13:04:52Z",
        "updatedAt" : "2018-08-09T08:05:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dcf54a77-f667-4219-976a-ff0d55fdd4fa",
        "parentId" : "34d934b5-a54e-441b-b8ce-b53738944cfc",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Um, `index.duplicated()` (without `return_inverse`) yields a numpy array - this is the documented signature (I guess because selecting on an `Index` really only needs an `ndarray`).\r\n\r\nAll the manual `duplicated`-tests actually create their own data, and _know_ what the correct outcome should be. Here, we're feeding tons of different things through that test, so we need to determine - as I'm doing with `duplicated_selection` what is actually duplicate; `self._holder(idx.values[duplicated_selection])` is then a duplicate Index of the correct type, but we know where its duplicates are (from inspecting `duplicated_selection`), and therefore can validate.",
        "createdAt" : "2018-07-20T13:36:57Z",
        "updatedAt" : "2018-08-09T08:05:54Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9c9aab75b63bf3367f5c9818c3f4a833efbe393",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +373,377 @@        n, k = len(idx), 10\n        duplicated_selection = np.random.choice(n, k * n)\n        expected = pd.Series(duplicated_selection).duplicated(keep=keep).values\n        idx = self._holder(idx.values[duplicated_selection])\n"
  },
  {
    "id" : "e04609c5-0bad-43aa-857a-48754de79025",
    "prId" : 23796,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23796#pullrequestreview-176519062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3585b43-44cb-4c46-b660-ee32c3a6cff7",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "should the version number be removed or updated?",
        "createdAt" : "2018-11-19T21:54:41Z",
        "updatedAt" : "2018-11-25T13:01:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0473c56b-91da-4e34-8573-0c9812b9af80",
        "parentId" : "e3585b43-44cb-4c46-b660-ee32c3a6cff7",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Ufuncs are here to stay now, no? That's why I removed it.\r\n\r\nUnless you mean that the set of ufuncs is related to the version number?",
        "createdAt" : "2018-11-19T22:06:19Z",
        "updatedAt" : "2018-11-25T13:01:37Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce5bd94125310571c6ca9cfa3ab4aed31b49dcde",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +664,668 @@\n    def test_numpy_ufuncs(self):\n        # test ufuncs of numpy, see:\n        # http://docs.scipy.org/doc/numpy/reference/ufuncs.html\n"
  }
]