[
  {
    "id" : "1f37ab33-8e34-4041-9b60-747742d8fec4",
    "prId" : 21254,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21254#pullrequestreview-124343525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68d694b3-cf55-49f1-9b48-034873b4c883",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "This is being skipped due to the following behavior:\r\n```python\r\nIn [2]: cat = pd.Categorical([pd.Interval(0, 1), pd.Interval(1, 2), pd.Interval(0, 1)])\r\n\r\nIn [3]: pd.Index(cat, dtype='interval')\r\nOut[3]: CategoricalIndex([(0, 1], (1, 2], (0, 1]], categories=[(0, 1], (1, 2]], ordered=False, dtype='category')\r\n```\r\n\r\nThis happens because the `Index` code is structured so that categorical takes precedence over interval:\r\nhttps://github.com/pandas-dev/pandas/blob/c85ab083919b59ce84c220d5baf7d34ff4a0bcf2/pandas/core/indexes/base.py#L262-L273\r\n\r\nThe code above could be restructured so that the `dtype` argument, if present, takes precedence over the type of `data`.  Seems like that would be more sensible than the current approach for this corner case, but on the fence about it. ",
        "createdAt" : "2018-05-30T06:55:00Z",
        "updatedAt" : "2018-05-30T06:55:01Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "5e40fc63-cad2-4003-843f-e62c91b02e07",
        "parentId" : "68d694b3-cf55-49f1-9b48-034873b4c883",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I c. ok can open an issue about this, but yes I would agree should infer with a passed dtype *first* before switching on the type of the data.",
        "createdAt" : "2018-05-30T10:39:15Z",
        "updatedAt" : "2018-05-30T10:42:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "770fe10301f64ce961979bf296a30c2b635cb4a9",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +119,123 @@        if isinstance(constructor, partial) and constructor.func is Index:\n            # Index is defined to create CategoricalIndex from categorical data\n            pytest.skip()\n\n        breaks = np.arange(10, dtype='int64')"
  }
]