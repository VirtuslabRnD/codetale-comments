[
  {
    "id" : "53f21522-0bb7-4c80-9569-678dfec29d60",
    "prId" : 25913,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25913#pullrequestreview-220719602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d28477f3-e35c-4706-9bbf-eb755790ff93",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Similar to the `whatsnew` comments, reference an issue number as a comment beneath the function definition if possible.",
        "createdAt" : "2019-03-28T19:29:47Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "8d7751f1-2ef9-4a1c-bf7c-c83f363d73a1",
        "parentId" : "d28477f3-e35c-4706-9bbf-eb755790ff93",
        "authorId" : "e6e3c674-c60b-4d28-bb04-2413947f6bb9",
        "body" : "Added",
        "createdAt" : "2019-03-29T19:22:50Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "e6e3c674-c60b-4d28-bb04-2413947f6bb9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d7205dc3c501a9ff3125debbede7e66d3a564b7",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +79,83 @@\n    @pytest.mark.parametrize(\"sort\", [None, False])\n    def test_intersection_equal(self, sort):\n        # GH 24471 Test intersection outcome given the sort keyword\n        # for equal indicies intersection should return the original index"
  },
  {
    "id" : "c994f6e3-f1b3-4b0a-addb-9a14b2c9065a",
    "prId" : 25913,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25913#pullrequestreview-222944551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0df7fe2-c9d2-48bd-b669-06cff076e28a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we not have generic test_setops (that hit Timedeltas)?",
        "createdAt" : "2019-03-30T18:47:17Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1a325098-b72c-4696-ac6a-323873ce8ad5",
        "parentId" : "c0df7fe2-c9d2-48bd-b669-06cff076e28a",
        "authorId" : "e6e3c674-c60b-4d28-bb04-2413947f6bb9",
        "body" : "@jreback Again, not 100% clear where to find that generic test_setops.",
        "createdAt" : "2019-04-02T09:43:29Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "e6e3c674-c60b-4d28-bb04-2413947f6bb9",
        "tags" : [
        ]
      },
      {
        "id" : "99900554-c286-4667-ac2c-d42932e99ae8",
        "parentId" : "c0df7fe2-c9d2-48bd-b669-06cff076e28a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pandas/tests/indexes/test_setops.py",
        "createdAt" : "2019-04-02T12:33:10Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "68063719-cddc-49b1-b1f6-da0b6ac83632",
        "parentId" : "c0df7fe2-c9d2-48bd-b669-06cff076e28a",
        "authorId" : "e6e3c674-c60b-4d28-bb04-2413947f6bb9",
        "body" : "No there exists no pandas/tests/indexes/test_setops.py , I checked this before but then decided to add the tests here. Happy to move the test_setops that is in pandas/tests/indexes/timedeltas one level up but was not sure that this is appropriate. ",
        "createdAt" : "2019-04-04T07:11:59Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "e6e3c674-c60b-4d28-bb04-2413947f6bb9",
        "tags" : [
        ]
      },
      {
        "id" : "4faf6c6c-da5d-4014-8c81-10f4822ea08b",
        "parentId" : "c0df7fe2-c9d2-48bd-b669-06cff076e28a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sorry these are in: pandas/tests/indexes/test_base.py\r\n\r\nI think we need to move them to a new file though. If you can do it here would be great, otherwise need to consolidate all of this as a followup",
        "createdAt" : "2019-04-04T12:40:00Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8eef11f2-91de-48b0-9641-4b5c7494c201",
        "parentId" : "c0df7fe2-c9d2-48bd-b669-06cff076e28a",
        "authorId" : "e6e3c674-c60b-4d28-bb04-2413947f6bb9",
        "body" : "I am happy to work on it but maybe as a followup to this issue if that is ok?",
        "createdAt" : "2019-04-04T18:55:13Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "e6e3c674-c60b-4d28-bb04-2413947f6bb9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d7205dc3c501a9ff3125debbede7e66d3a564b7",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +125,129 @@            (timedelta_range('1 day', periods=10, freq='h', name='idx')[5:],\n             TimedeltaIndex([], name='idx'))])\n    @pytest.mark.parametrize(\"sort\", [None, False])\n    def test_intersection(self, rng, expected, sort):\n        # GH 4690 (with tz)"
  },
  {
    "id" : "ec799a66-8d60-4573-a936-1bd5c817a2e2",
    "prId" : 25913,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25913#pullrequestreview-222955136",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0353e1e-1760-4ac1-828d-151e6c620943",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need a test to assert that a 0-len self or other is actually a copy.",
        "createdAt" : "2019-04-02T12:33:30Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "331a31ec-1ae4-4bec-8523-a9d7bdfa91f2",
        "parentId" : "f0353e1e-1760-4ac1-828d-151e6c620943",
        "authorId" : "e6e3c674-c60b-4d28-bb04-2413947f6bb9",
        "body" : "@jreback While digging into this test a bit more I came across the following case. It turns out that we don't actually hit the 0-length intersection case because \r\n\r\nhttps://github.com/pandas-dev/pandas/blob/ed6c61ddd15d4256a692ce63c2d52bd6db0d0b4f/pandas/core/indexes/datetimelike.py#L550-L558\r\n\r\nthe `not other.freq.isAnchored()` will always trigger this elif argument for timedeltas that have a tick based frequency. As far as I can tell this is because frequencies that inherent from the ``Tick`` class will by default return False for the `isAnchored()` function. I am assuming here that isAnchored refers to a timeindex etc to be anchored to a specific date/weekday? The documentation here is not quiet clear.\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/ed6c61ddd15d4256a692ce63c2d52bd6db0d0b4f/pandas/tseries/offsets.py#L307-L310\r\n\r\nand for Tick class specifically:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/ed6c61ddd15d4256a692ce63c2d52bd6db0d0b4f/pandas/tseries/offsets.py#L2341-L2342\r\n\r\nMaybe you or @reidy-p have an idea why we testing for anchoring here or shine some more light on this function/property. \r\nThere are currently three possibilities I see this moving forward:\r\n1)Move the checks for 0-length index before the elif that includes the `isAnchored()` check so that we make sure this is hit.\r\n2) Maybe we don't need the check for `isAnchored()` before and can move it further back.\r\n3) Design the test such that `isAnchored()` is not triggered.\r\n\r\nSome input would be welcome.",
        "createdAt" : "2019-04-04T08:02:44Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "e6e3c674-c60b-4d28-bb04-2413947f6bb9",
        "tags" : [
        ]
      },
      {
        "id" : "ea0f210c-f574-4657-82c8-5cd91f78778b",
        "parentId" : "f0353e1e-1760-4ac1-828d-151e6c620943",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so I would try to move the checks right below the .equals() check and see what happens",
        "createdAt" : "2019-04-04T12:40:34Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "44729932-9f41-44c4-a4cd-d2bc1c2af165",
        "parentId" : "f0353e1e-1760-4ac1-828d-151e6c620943",
        "authorId" : "e6e3c674-c60b-4d28-bb04-2413947f6bb9",
        "body" : "add, also just wanted to thank you for your patience and continuous comments!",
        "createdAt" : "2019-04-04T19:18:30Z",
        "updatedAt" : "2019-04-29T18:33:03Z",
        "lastEditedBy" : "e6e3c674-c60b-4d28-bb04-2413947f6bb9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d7205dc3c501a9ff3125debbede7e66d3a564b7",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +157,161 @@        base = TimedeltaIndex(['1 hour', '2 hour', '4 hour', '3 hour'],\n                              name='idx')\n        result = base.intersection(rng, sort=sort)\n        if sort is None:\n            expected = expected.sort_values()"
  }
]