[
  {
    "id" : "fd5fcb78-4263-44c9-8d37-aa32c7cd36e6",
    "prId" : 16826,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16826#pullrequestreview-48318102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8db25a8b-4b29-45c2-a9f8-7f5cae50912c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use \r\n\r\n```\r\nexpected = np.array([0, 1, 2], dtype=np.intp)\r\ntm.assert_numpy_array_equal(indexer, expected)\r\n```",
        "createdAt" : "2017-07-04T23:16:52Z",
        "updatedAt" : "2017-07-06T11:24:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "91e62e2a-97df-49f2-b9e4-5f9fdbdb0a3d",
        "parentId" : "8db25a8b-4b29-45c2-a9f8-7f5cae50912c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls update to use this",
        "createdAt" : "2017-07-06T12:14:43Z",
        "updatedAt" : "2017-07-06T12:14:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ec2dd3fa-fb1b-4fd5-bee8-25047fd59538",
        "parentId" : "8db25a8b-4b29-45c2-a9f8-7f5cae50912c",
        "authorId" : "a26ad2df-061f-4683-aff0-4fdecd4e88c1",
        "body" : "Issue with that is that some of the indexes are empty or categorical indexes so not unique positions so can't assume that [0, 1, 2] are returned",
        "createdAt" : "2017-07-06T12:33:28Z",
        "updatedAt" : "2017-07-06T12:33:28Z",
        "lastEditedBy" : "a26ad2df-061f-4683-aff0-4fdecd4e88c1",
        "tags" : [
        ]
      },
      {
        "id" : "83eb1cdf-92d3-4793-b83c-cc1242fd14b4",
        "parentId" : "8db25a8b-4b29-45c2-a9f8-7f5cae50912c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok",
        "createdAt" : "2017-07-06T12:36:37Z",
        "updatedAt" : "2017-07-06T12:36:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1b85cb0b35b42c82872096e0127785b04d610e0",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1136,1140 @@        for name, index in self.indices.items():\n            indexer = index.get_indexer(index[0:2])\n            assert isinstance(indexer, np.ndarray)\n            assert indexer.dtype == np.intp\n"
  },
  {
    "id" : "7aeee376-6e4d-481b-b796-cb1370513067",
    "prId" : 17366,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17366#pullrequestreview-59192679",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5de4cc1-f995-47c1-8912-d87a50d863ec",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in reality, there are a bunch of specific tests here *just* on ``Index`` which are one-offs and not generally testing things. but ok.",
        "createdAt" : "2017-08-29T10:10:01Z",
        "updatedAt" : "2017-08-29T10:10:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "13ae8e796ff055bdf009adec11be378191585f0e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +664,668 @@        assert intersect.name is None\n\n    def test_intersect_str_dates(self):\n        dt_dates = [datetime(2012, 2, 9), datetime(2012, 2, 22)]\n"
  },
  {
    "id" : "acdf4647-cdb2-435b-bd0d-cb33997aafb5",
    "prId" : 18300,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18300#pullrequestreview-79004452",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4aa2d46-cc87-4940-aa0f-0e519441c1b4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can also be done generically",
        "createdAt" : "2017-11-25T14:44:45Z",
        "updatedAt" : "2017-11-25T14:45:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e40103261b31126da621a899a248706e608fd206",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +458,462 @@        tm.assert_index_equal(Index(['a']), null_index.insert(0, 'a'))\n\n        # GH 18295 (test missing)\n        expected = Index(['a', np.nan, 'b', 'c'])\n        for na in (np.nan, pd.NaT, None):"
  },
  {
    "id" : "c2977b00-e0c0-42eb-b7cd-c1ebdcaf0050",
    "prId" : 18514,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18514#pullrequestreview-79183106",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1de6315-4a76-48d2-a3f2-22c9babc5728",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "make this is a new test.\r\n\r\nparametrize on input types (iterator, tuple, list) & (np.nan, None) for a missing value",
        "createdAt" : "2017-11-27T11:22:50Z",
        "updatedAt" : "2017-11-28T08:38:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "19e421c7-76fc-4118-b3b7-0e735714f5e6",
        "parentId" : "e1de6315-4a76-48d2-a3f2-22c9babc5728",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "(done)\r\n\r\n@jreback ping",
        "createdAt" : "2017-11-27T14:28:22Z",
        "updatedAt" : "2017-11-28T08:38:48Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea824a3731c81e817c44b3ab93598e7bcf506e47",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +106,110 @@        assert isinstance(idx2, Index)\n        assert not isinstance(idx2, MultiIndex)\n\n    @pytest.mark.parametrize('na_value', [None, np.nan])\n    @pytest.mark.parametrize('vtype', [list, tuple, iter])"
  },
  {
    "id" : "6c61c6d5-da8d-4a5f-9c25-25b86e544cad",
    "prId" : 19849,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19849#pullrequestreview-102085580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ed643db-6c41-4aea-9532-a09da40765e5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls use parameterize",
        "createdAt" : "2018-03-07T20:30:07Z",
        "updatedAt" : "2018-11-06T13:10:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa7311ad48b2af262f403db824836bf87f126ffd",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +800,804 @@        # Test unions with various name combinations\n        # Do not test MultiIndex or repeats\n\n        if isinstance(indices, MultiIndex) or not indices.is_unique:\n            pytest.skip(\"Not for MultiIndex or repeated indices\")"
  },
  {
    "id" : "e3f267b1-08d8-4608-8968-b5963132e48d",
    "prId" : 20062,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20062#pullrequestreview-103648816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27cd7aac-d949-4f5a-b859-e5d6b1e6acce",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a test which tries to construct all indices as empty",
        "createdAt" : "2018-03-09T11:23:04Z",
        "updatedAt" : "2018-03-14T20:11:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a519cd82-ef7a-4124-9869-a903d6235f27",
        "parentId" : "27cd7aac-d949-4f5a-b859-e5d6b1e6acce",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "@jreback for a test to construct all indices as empty, is this a test of the public API's (which have to differ based on the specific index class), or a test of the private `Index._shallow_copy([])` ?\r\n\r\nFor example, `pd.RangeIndex([])` currently fails with `TypeError: RangeIndex(...) must be called with integers, list was passed for start`, which is correct.\r\n",
        "createdAt" : "2018-03-12T19:11:46Z",
        "updatedAt" : "2018-03-14T20:11:29Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "0a83f508-ecd3-4dff-aff4-b97ee32654c9",
        "parentId" : "27cd7aac-d949-4f5a-b859-e5d6b1e6acce",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right you would skip that one. I think there is already a test of construct empty (pretty sure), but make just point it out and make it IS testing everything.",
        "createdAt" : "2018-03-13T23:23:45Z",
        "updatedAt" : "2018-03-14T20:11:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3df7ce665e1df8a60ab753ce9f742281ab9fe00e",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +1065,1069 @@        assert result.name == 'new_name'\n\n    def test_difference_type(self):\n        # GH 20040\n        # If taking difference of a set and itself, it"
  },
  {
    "id" : "a083d241-c792-422b-8e0d-b5ce7dcd2730",
    "prId" : 20062,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20062#pullrequestreview-102616021",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bdf4e0f-af2d-4443-a188-cb3963bf2074",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "for followup PR (or can change here if want to update where needed).  a function to return yeld the key, idx while filtering on certain types would be great. (like what you are doing but in a module level function)",
        "createdAt" : "2018-03-09T11:26:00Z",
        "updatedAt" : "2018-03-14T20:11:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3df7ce665e1df8a60ab753ce9f742281ab9fe00e",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +1080,1084 @@        # empty index produces the same index as the difference\n        # of an index with itself.  Test for all types\n        skip_index_keys = ['repeats']\n        for key, idx in self.generate_index_types(skip_index_keys):\n            inter = idx.intersection(idx.drop(idx))"
  },
  {
    "id" : "be376227-fd39-4bce-b5d7-71ba1cf0f8c9",
    "prId" : 20544,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20544#pullrequestreview-108386320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac2e90c7-4744-47d2-85ff-bbdc7610608e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need to remove the usage from all tests or catch the warnings\r\n\r\n```\r\n(pandas) bash-3.2$ grep -r get_duplicates pandas\r\npandas/core/reshape/concat.py:                overlap = concat_index.get_duplicates()\r\nBinary file pandas/core/reshape/__pycache__/concat.cpython-36.pyc matches\r\nBinary file pandas/core/__pycache__/frame.cpython-36.pyc matches\r\npandas/core/frame.py:            duplicates = index.get_duplicates()\r\nBinary file pandas/core/indexes/__pycache__/datetimelike.cpython-36.pyc matches\r\nBinary file pandas/core/indexes/__pycache__/base.cpython-36.pyc matches\r\npandas/core/indexes/datetimelike.py:    def get_duplicates(self):\r\npandas/core/indexes/datetimelike.py:        values = Index.get_duplicates(self)\r\npandas/core/indexes/base.py:    def get_duplicates(self):\r\npandas/core/indexes/base.py:        >>> pd.Index([1, 2, 2, 3, 3, 3, 4]).get_duplicates()\r\npandas/core/indexes/base.py:        >>> pd.Index([1., 2., 2., 3., 3., 3., 4.]).get_duplicates()\r\npandas/core/indexes/base.py:        >>> pd.Index(['a', 'b', 'b', 'c', 'c', 'c', 'd']).get_duplicates()\r\npandas/core/indexes/base.py:        >>> pd.Index(dates).get_duplicates()\r\npandas/core/indexes/base.py:        >>> pd.Index([1, 2, 3, 2, 3, 4, 3]).get_duplicates()\r\npandas/core/indexes/base.py:        >>> pd.Index([1, 2, 3, 4]).get_duplicates()\r\npandas/core/indexes/base.py:        >>> pd.Index(dates).get_duplicates()\r\npandas/core/indexes/base.py:    _get_duplicates = get_duplicates\r\nBinary file pandas/tests/indexes/__pycache__/test_multi.cpython-36-PYTEST.pyc matches\r\nBinary file pandas/tests/indexes/datetimes/__pycache__/test_datetime.cpython-36-PYTEST.pyc matches\r\npandas/tests/indexes/datetimes/test_datetime.py:    def test_get_duplicates(self):\r\npandas/tests/indexes/datetimes/test_datetime.py:        result = idx.get_duplicates()\r\nBinary file pandas/tests/indexes/timedeltas/__pycache__/test_timedelta.cpython-36-PYTEST.pyc matches\r\npandas/tests/indexes/timedeltas/test_timedelta.py:    def test_get_duplicates(self):\r\npandas/tests/indexes/timedeltas/test_timedelta.py:        result = idx.get_duplicates()\r\npandas/tests/indexes/test_multi.py:            assert mi.get_duplicates() == []\r\npandas/tests/indexes/test_multi.py:                assert mi.get_duplicates() == []\r\n```",
        "createdAt" : "2018-03-30T17:42:03Z",
        "updatedAt" : "2018-04-23T23:19:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "94376e46c40387c1dc1657be4dc2e9be4f788f5d",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +2076,2080 @@    def test_cached_properties_not_settable(self):\n        idx = pd.Index([1, 2, 3])\n        with tm.assert_raises_regex(AttributeError, \"Can't set attribute\"):\n            idx.is_unique = False\n"
  },
  {
    "id" : "c0f4b345-9754-4482-9a46-a36ae93a7184",
    "prId" : 20624,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20624#pullrequestreview-110136841",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0509fdf4-577e-4491-a744-9a0c0cd40d77",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you audit for whether we use ``pd.Index`` (and similar) or ``Index`` (we are not generally consistent), like to be consistent within in a module",
        "createdAt" : "2018-04-06T16:45:41Z",
        "updatedAt" : "2018-04-23T15:49:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c9f2401e-fdf2-4eba-a05a-bfc6ca7c3661",
        "parentId" : "0509fdf4-577e-4491-a744-9a0c0cd40d77",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "```sh\r\ngrep \" Index(\" -r pandas/tests --include=\"*.py\" | wc -l\r\n     891\r\ngrep \" pd.Index(\" -r pandas/tests --include=\"*.py\" | wc -l\r\n     264\r\n```\r\n\r\nMay be a more robust way of doing it but assuming directionally accurate first is more widely used. Particular to this module I see numbers of 175 and 48, respectively.\r\n\r\nI personally prefer `pd.Index` for explicitness but am fine to change to `Index` for module-consistency. lmk\r\n",
        "createdAt" : "2018-04-06T17:00:32Z",
        "updatedAt" : "2018-04-23T15:49:27Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e46b57bc99e70b96eb6de448ab12ff7930a2d10",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +216,220 @@                return self.array\n\n        expected = pd.Index(array)\n        result = pd.Index(ArrayLike(array))\n        tm.assert_index_equal(result, expected)"
  },
  {
    "id" : "5f07f342-82f1-4a0b-9607-4da57761535e",
    "prId" : 20624,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20624#pullrequestreview-110131478",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d0c01d9-2f49-4409-8e71-a6ec441d768a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This is similar to a lot of the tests below and could arguably be built with parameters of \"vals,dtype,klass\" but I felt it was cleaner and less repetition to just break the tests by dtype",
        "createdAt" : "2018-04-06T16:46:07Z",
        "updatedAt" : "2018-04-23T15:49:27Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e46b57bc99e70b96eb6de448ab12ff7930a2d10",
    "line" : 329,
    "diffHunk" : "@@ -1,1 +314,318 @@        [1., 2., 3.], np.array([1., 2., 3.], dtype=float)\n    ])\n    def test_constructor_dtypes_to_int64(self, vals):\n        idx = Index(vals, dtype=int)\n        assert isinstance(idx, Int64Index)"
  },
  {
    "id" : "56c265f7-e3cd-4738-92d1-34cb9033506e",
    "prId" : 20624,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20624#pullrequestreview-110814579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0211b79-c05c-4752-a02b-1bfbb20fc0d4",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "In general some of these magic class methods could probably be replaced with pytest functionality. I haven't looked in too much detail just yet but was planning on reviewing after giving the module a first pass at parametrization without changing class behavior",
        "createdAt" : "2018-04-06T16:48:40Z",
        "updatedAt" : "2018-04-23T15:49:27Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "501cf585-f12a-42c8-ba8f-4c9ab1a4e15e",
        "parentId" : "a0211b79-c05c-4752-a02b-1bfbb20fc0d4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes see my comments below",
        "createdAt" : "2018-04-06T16:51:40Z",
        "updatedAt" : "2018-04-23T15:49:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ac333aeb-861e-4456-9586-9bfb5223de32",
        "parentId" : "a0211b79-c05c-4752-a02b-1bfbb20fc0d4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "note there is already a fixture of ``indices`` which works, so have 3 methods of specifying things ATM:\r\n\r\n- ``indices`` fixture\r\n- ``generate_index_types(...)``\r\n- ``self.indices``\r\n\r\nneeds to clean this and just make fixtures that we can use generally (in conftest) with docs",
        "createdAt" : "2018-04-11T02:12:57Z",
        "updatedAt" : "2018-04-23T15:49:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e46b57bc99e70b96eb6de448ab12ff7930a2d10",
    "line" : 516,
    "diffHunk" : "@@ -1,1 +418,422 @@        skip_index_keys = [\"repeats\", \"periodIndex\", \"rangeIndex\",\n                           \"tuples\"]\n        for key, idx in self.generate_index_types(skip_index_keys):\n            empty = idx.__class__([])\n            assert isinstance(empty, idx.__class__)"
  },
  {
    "id" : "f4c96be1-f457-4fa6-bba6-43162d1823eb",
    "prId" : 20624,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20624#pullrequestreview-110132309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d97d5cd-4c18-41a6-99cb-97db404b8777",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "note that some of the tests here should really be parametreized on index types themselves, there is an open issue on that (eg. these set type ops, test_delete and such), are generally tested by the subclasses, but we need a more general cleanup on that",
        "createdAt" : "2018-04-06T16:49:59Z",
        "updatedAt" : "2018-04-23T15:49:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e46b57bc99e70b96eb6de448ab12ff7930a2d10",
    "line" : 590,
    "diffHunk" : "@@ -1,1 +502,506 @@        (-1, Index(['a', 'b', 'c'], name='idx'))\n    ])\n    def test_delete(self, pos, exp):\n        idx = Index(['a', 'b', 'c', 'd'], name='idx')\n        result = idx.delete(pos)"
  },
  {
    "id" : "cce78b19-e3f0-4746-9be8-4c06950fb501",
    "prId" : 20624,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20624#pullrequestreview-110814579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b03fe0a9-d751-4680-b2b8-fd666c54c61f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "move this to pandas/tests/indexes/timedeltas/test_construction (maybe duplicate)",
        "createdAt" : "2018-04-11T02:11:43Z",
        "updatedAt" : "2018-04-23T15:49:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e46b57bc99e70b96eb6de448ab12ff7930a2d10",
    "line" : 492,
    "diffHunk" : "@@ -1,1 +403,407 @@    @pytest.mark.parametrize(\"attr\", ['values', 'asi8'])\n    @pytest.mark.parametrize(\"klass\", [pd.Index, pd.TimedeltaIndex])\n    def test_constructor_dtypes_timedelta(self, attr, klass):\n        idx = pd.timedelta_range('1 days', periods=5)\n        dtype = idx.dtype"
  },
  {
    "id" : "f642f02a-807f-485a-a39d-51059e03897c",
    "prId" : 20624,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20624#pullrequestreview-110814579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2237d30-4022-4096-a611-878d2f0262d4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "might be duplicated elsewhere. am iffy on where to put things like this. maybe worth extracting things from this file and makign a ``test_construction`` for things like this",
        "createdAt" : "2018-04-11T02:13:39Z",
        "updatedAt" : "2018-04-23T15:49:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e46b57bc99e70b96eb6de448ab12ff7930a2d10",
    "line" : 533,
    "diffHunk" : "@@ -1,1 +424,428 @@\n    @pytest.mark.parametrize(\"empty,klass\", [\n        (PeriodIndex([], freq='B'), PeriodIndex),\n        (RangeIndex(step=1), pd.RangeIndex),\n        (MultiIndex(levels=[[1, 2], ['blue', 'red']],"
  },
  {
    "id" : "0504c2f5-cee2-444d-8d13-fabf6a4c77d6",
    "prId" : 20813,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20813#pullrequestreview-114923987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb8f95ba-2804-418a-836a-14ed6e16ecde",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this notion of klass we have all over the place, sometimes its also called box (not necessary to do here, just letting you know, prob best to update the issue you created)",
        "createdAt" : "2018-04-24T19:07:16Z",
        "updatedAt" : "2018-04-25T17:59:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "25af5dc821f8581ee0ee92f6490db337469700c4",
    "line" : 572,
    "diffHunk" : "@@ -1,1 +746,750 @@        assert tm.equalContents(union, everything)\n\n    @pytest.mark.parametrize(\"klass\", [\n        np.array, Series, list])\n    def test_union_from_iterables(self, klass):"
  },
  {
    "id" : "43cfeb87-f527-4f98-840b-adbfffca0fcd",
    "prId" : 20931,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20931#pullrequestreview-117009127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65dc2504-43e1-4451-90dd-7b57df7f050b",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I suppose the call signature here is different than what was previously in the test but I don't think that this should have any arguments (?)",
        "createdAt" : "2018-05-02T18:10:15Z",
        "updatedAt" : "2018-05-02T23:46:26Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2aae882e5f5c3de21eea60d7ace6f33f4d4cd609",
    "line" : 666,
    "diffHunk" : "@@ -1,1 +1693,1697 @@        expected = Index([getattr(str, method)(x) for x in index.values])\n\n        result = getattr(index.str, method)()\n        tm.assert_index_equal(result, expected)\n"
  },
  {
    "id" : "aa0e68ec-2b69-4a0f-a161-125f26d7237e",
    "prId" : 20931,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20931#pullrequestreview-117112342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8f1cb45-b30e-45b0-8826-86817aeea27f",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I split this test up, but conceptually do we even want / need this here? Seems like it would be better placed in the Series modules if even required",
        "createdAt" : "2018-05-02T18:11:18Z",
        "updatedAt" : "2018-05-02T23:46:26Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e8eacb1a-4122-476e-82ee-56be6c0f427b",
        "parentId" : "d8f1cb45-b30e-45b0-8826-86817aeea27f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes, feel free to move tests as appropriate (can be followups to make diffs easier)",
        "createdAt" : "2018-05-03T00:29:15Z",
        "updatedAt" : "2018-05-03T00:30:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2aae882e5f5c3de21eea60d7ace6f33f4d4cd609",
    "line" : 704,
    "diffHunk" : "@@ -1,1 +1727,1731 @@        assert isinstance(result, np.ndarray)\n\n    def test_str_bool_series_indexing(self):\n        index = Index(['a1', 'a2', 'b1', 'b2'])\n        s = Series(range(4), index=index)"
  },
  {
    "id" : "2882ce89-0ef9-46a4-a48b-a98165e87dfd",
    "prId" : 20931,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20931#pullrequestreview-117112342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb96352c-7189-4258-be6d-b3bc63e5766e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could makes these a fixture as well (maybe fill_names_fixture)",
        "createdAt" : "2018-05-03T00:25:50Z",
        "updatedAt" : "2018-05-03T00:30:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2aae882e5f5c3de21eea60d7ace6f33f4d4cd609",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1286,1290 @@        tm.assert_numpy_array_equal(result, expected)\n\n    @pytest.mark.parametrize(\"method\", [None, 'pad', 'backfill', 'nearest'])\n    def test_get_loc(self, method):\n        index = pd.Index([0, 1, 2])"
  },
  {
    "id" : "eaad088d-1a85-4deb-8138-de459d0e740c",
    "prId" : 20979,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20979#pullrequestreview-118684502",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34c783c6-6605-4e7f-95d3-c533af320376",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "later on would move these repr tests to a separate test file (in future PR)",
        "createdAt" : "2018-05-09T10:21:21Z",
        "updatedAt" : "2018-05-09T10:22:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "60d91b6d8c444322eeac3903e95711e940e54812",
    "line" : 302,
    "diffHunk" : "@@ -1,1 +1972,1976 @@          u\"      dtype='object')\")),\n        # truncated\n        (pd.Index([u'あ', u'いい', u'ううう'] * 100),\n         (u\"Index([u'あ', u'いい', u'ううう', u'あ', u'いい', \"\n          u\"u'ううう', u'あ', u'いい', u'ううう', u'あ',\\n\""
  },
  {
    "id" : "d034e216-2f60-4387-b825-66b2a14a0c54",
    "prId" : 21216,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21216#pullrequestreview-123826654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cc3378d-99f4-43fd-88a1-f641a57bbbd6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a bit of commentary on what is tested here",
        "createdAt" : "2018-05-29T01:11:51Z",
        "updatedAt" : "2018-06-14T06:34:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc7e5c03d9abba90e3e9b4d3bc3f6f7f77a1aaa4",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +408,412 @@    @pytest.mark.parametrize(\"klass\", [pd.Index, pd.DatetimeIndex])\n    def test_constructor_dtypes_datetime(self, tz_naive_fixture, attr, utc,\n                                         klass):\n        # Test constructing with a datetimetz dtype\n        # .values produces numpy datetimes, so these are considered naive"
  },
  {
    "id" : "21ccca5d-2c6b-4bca-91e9-7f85b214f48a",
    "prId" : 21981,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21981#pullrequestreview-139206890",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e99ef1d-2916-47fb-9ae9-2118a08e7dc6",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Can we also add tests where element-wise subtraction should fail.",
        "createdAt" : "2018-07-20T04:16:10Z",
        "updatedAt" : "2018-07-20T21:00:25Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "f9845477-c162-4e37-ba66-618b8d520871",
        "parentId" : "7e99ef1d-2916-47fb-9ae9-2118a08e7dc6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "There are already some in the test just above this, but more couldn’t hurt.  Will do.",
        "createdAt" : "2018-07-20T04:25:07Z",
        "updatedAt" : "2018-07-20T21:00:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "aa189c4e-bd77-4739-a0f8-eab3cb08844e",
        "parentId" : "7e99ef1d-2916-47fb-9ae9-2118a08e7dc6",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Ah, yes, thanks for pointing that out.  Two things would be good there:\r\n\r\n* We should rename that test above to be `test_sub_fail`\r\n* Add a couple of tests where element-wise subtraction should fail",
        "createdAt" : "2018-07-20T04:27:20Z",
        "updatedAt" : "2018-07-20T21:00:25Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "97e12095-c5d6-41d0-b730-a3530075cfc2",
        "parentId" : "7e99ef1d-2916-47fb-9ae9-2118a08e7dc6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "You got it.",
        "createdAt" : "2018-07-20T20:50:15Z",
        "updatedAt" : "2018-07-20T21:00:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd6e88c504098492b585fb8d6472442a2e9cf1f1",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +882,886 @@        result = index - pd.Index([Decimal(1), Decimal(1)])\n        tm.assert_index_equal(result, expected)\n\n        with pytest.raises(TypeError):\n            index - 'foo'"
  },
  {
    "id" : "ccaa613a-0e19-4ed1-bc71-1af937982c61",
    "prId" : 22207,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22207#pullrequestreview-144705897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2599017f-0511-412a-88be-3112d9a6db6a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so this test seems now very restrictive?",
        "createdAt" : "2018-08-08T10:44:03Z",
        "updatedAt" : "2018-08-08T10:45:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ce585763-dbd0-4597-9633-bdbedf8cb655",
        "parentId" : "2599017f-0511-412a-88be-3112d9a6db6a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did you remove the PYPY on purpose? ",
        "createdAt" : "2018-08-08T10:44:29Z",
        "updatedAt" : "2018-08-08T10:45:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "76c4fc57-9043-4c12-8978-64e7c0a10aac",
        "parentId" : "2599017f-0511-412a-88be-3112d9a6db6a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "cc @mattip can you comment on the equivalence of nulls here? we don't test on PYPY, can you see if this still fails?",
        "createdAt" : "2018-08-08T10:45:37Z",
        "updatedAt" : "2018-08-08T10:45:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1c768b15-e757-49f9-b4a4-fd51008ef887",
        "parentId" : "2599017f-0511-412a-88be-3112d9a6db6a",
        "authorId" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "body" : "@jreback After the fix the behavior is less subtle:\r\n\r\n``` \r\nIndex([nulls_fixture]).isin([nulls_fixture2])\r\n```\r\n\r\nis always `True` as long as `nulls_fixture` and `nulls_fixture2`  are nans, no matter whether those are the same nan-objects or different nan-objects. Thus PyPy is no longer a special case. But I must confess, I didn't test with PyPy and assumed this would be done somewhere in CI.\r\n\r\nIt seems as if the purpose of this test is to check, that the identity of the object is preserved (something similar to bug #22160). In this case `np.nan`  is no longer a good tool to do this check, because `isin`  bcomes agnostic to the exact identity of the nan-object.",
        "createdAt" : "2018-08-08T11:43:20Z",
        "updatedAt" : "2018-08-08T11:43:20Z",
        "lastEditedBy" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "tags" : [
        ]
      },
      {
        "id" : "1730d5b2-40d0-4c83-b987-eae77aeef830",
        "parentId" : "2599017f-0511-412a-88be-3112d9a6db6a",
        "authorId" : "6ce9b37d-3c90-4ab0-b29b-fdf21b27a7d8",
        "body" : "will check it on PyPy, thanks for the heads up.",
        "createdAt" : "2018-08-08T16:20:06Z",
        "updatedAt" : "2018-08-08T16:20:06Z",
        "lastEditedBy" : "6ce9b37d-3c90-4ab0-b29b-fdf21b27a7d8",
        "tags" : [
        ]
      },
      {
        "id" : "f2513a49-343a-4627-85f7-44bc9bbf1a7c",
        "parentId" : "2599017f-0511-412a-88be-3112d9a6db6a",
        "authorId" : "6ce9b37d-3c90-4ab0-b29b-fdf21b27a7d8",
        "body" : "this particular test in its 25 variants passes on PyPy. There are other failures but they seem unrelated.",
        "createdAt" : "2018-08-09T06:34:24Z",
        "updatedAt" : "2018-08-09T06:34:24Z",
        "lastEditedBy" : "6ce9b37d-3c90-4ab0-b29b-fdf21b27a7d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cc5e0fa90f3eb15787935478c01195b79ce0284",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1663,1667 @@        # mangle the various types (save a corner case with PyPy)\n\n        # all nans are the same\n        if (isinstance(nulls_fixture, float) and\n                isinstance(nulls_fixture2, float) and"
  },
  {
    "id" : "4459aa80-e1a0-49f8-8495-81929689b923",
    "prId" : 24533,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24533#pullrequestreview-188564560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "821a8aff-daf9-444a-9f38-2757db4ffc60",
        "parentId" : null,
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "There are a couple of places where the above warning was given. But now that the ``safe_sort`` function is used the warning is no longer given because ``safe_sort`` tries to sort some \"unorderable\" types:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/091cfbb053c8522acd4f851f6a93626751e77dbb/pandas/core/sorting.py#L448-L466",
        "createdAt" : "2019-01-01T18:24:48Z",
        "updatedAt" : "2019-01-01T18:24:49Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      },
      {
        "id" : "4920d96d-b223-4f74-a61b-c4bd567d2a4c",
        "parentId" : "821a8aff-daf9-444a-9f38-2757db4ffc60",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yep, this is the intent of the function",
        "createdAt" : "2019-01-01T18:25:21Z",
        "updatedAt" : "2019-01-01T18:25:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8bfb9185298e7ab58c5f2130fb5e380d6e507d5",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +2242,2246 @@        s2 = Series(3, index=second[:-1])\n\n        s3 = s1 * s2\n\n        assert s3.index.name == 'mario'"
  },
  {
    "id" : "caeef206-d328-49e3-be96-eb6ffbee9720",
    "prId" : 24708,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24708#pullrequestreview-191514043",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d74af347-0f23-4d9f-b8a6-bf10313bf75a",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yep, the \"screw it\" approach was gonna be my suggestion too",
        "createdAt" : "2019-01-11T04:28:01Z",
        "updatedAt" : "2019-01-11T12:59:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8332c40626f001577fa585f695cb1e93e05b6c38",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +423,427 @@        # Index will have an frame, throwing off the expected.\n        with tm.assert_produces_warning(ex_warn, check_stacklevel=False,\n                                        clear=modules):\n            result = klass(arg, tz=tz_naive_fixture)\n        tm.assert_index_equal(result, index)"
  },
  {
    "id" : "55d7bc11-8399-43e6-a5b3-2a6a0b2c2fee",
    "prId" : 25063,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25063#pullrequestreview-199218804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3641f79-9db4-4c6e-8376-b10fc3e32ad2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are commenting these? is True not a legitimate value? and doesn't it actually work like this now? This is very strange.",
        "createdAt" : "2019-02-01T13:03:09Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "574ad797-f041-4837-8e5a-16dfddb5ce47",
        "parentId" : "f3641f79-9db4-4c6e-8376-b10fc3e32ad2",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I thought that’s what you wanted in the other PR. It’s what you agreed to in https://github.com/pandas-dev/pandas/pull/25007#issuecomment-459385344",
        "createdAt" : "2019-02-01T13:23:27Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4da837a7-102f-444a-b0c3-81a194561dae",
        "parentId" : "f3641f79-9db4-4c6e-8376-b10fc3e32ad2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right, but does ``sort=True`` do *anything* now (is it accepted)?",
        "createdAt" : "2019-02-01T13:41:53Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7572046b-b9a5-4eff-ad68-ccff784c4ddc",
        "parentId" : "f3641f79-9db4-4c6e-8376-b10fc3e32ad2",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "It raises. This PR is just changing the keyword for the currently implemented behavior from True to None. It’s not adding anything that wasn’t previously implemented (sorting always).",
        "createdAt" : "2019-02-01T13:47:45Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3881c4dd-728c-4f7c-993f-c10fae30503a",
        "parentId" : "f3641f79-9db4-4c6e-8376-b10fc3e32ad2",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It is explicitly disallowed (meaning: it will raise an error if passed), only None and False are accepted",
        "createdAt" : "2019-02-01T13:48:46Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "437b7eb6-f85a-48a2-b1f8-7c7048694918",
        "parentId" : "f3641f79-9db4-4c6e-8376-b10fc3e32ad2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh ok, that's fine. are you explicity testing that? (I realize why you are having the commented out ones, *maybe* better to xfail those though)",
        "createdAt" : "2019-02-01T13:51:39Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3d615ea9-e4eb-4420-9c32-6eb4098d7f3f",
        "parentId" : "f3641f79-9db4-4c6e-8376-b10fc3e32ad2",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Moved the `true` cases to their own tests and failed them in 2e181ac",
        "createdAt" : "2019-02-01T18:57:25Z",
        "updatedAt" : "2019-02-01T20:06:14Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c5a0376dd93c38ffe71225cec9cea15fd9624f0",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +829,833 @@    @pytest.mark.parametrize('slice_', [slice(None), slice(0)])\n    def test_union_sort_special_true(self, slice_):\n        # TODO decide on True behaviour\n        # sort=True\n        idx = pd.Index([1, 0, 2])"
  },
  {
    "id" : "149d2eea-7a2c-44eb-9deb-5af4a3009eac",
    "prId" : 25447,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25447#pullrequestreview-209053482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "927e7278-6ae5-40a0-ae3e-aac0a59b44fd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did you mean to just remove this test completely? (and replace with one below)",
        "createdAt" : "2019-02-28T12:47:05Z",
        "updatedAt" : "2019-02-28T12:47:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4aa5c771-fda7-4402-83b2-c6104fdf25e1",
        "parentId" : "927e7278-6ae5-40a0-ae3e-aac0a59b44fd",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "the original test has been split",
        "createdAt" : "2019-02-28T12:52:36Z",
        "updatedAt" : "2019-02-28T12:52:36Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c0f7d392842f7b463a0e302f973f50d30fd600c",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +492,496 @@            Index([\"a\", \"b\", \"c\"], dtype=float)\n\n    def test_view_with_args(self):\n        restricted = ['unicodeIndex', 'strIndex', 'catIndex', 'boolIndex',\n                      'empty']"
  },
  {
    "id" : "00e82f72-1a81-478e-9425-9c8ea697d829",
    "prId" : 28865,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28865#pullrequestreview-299743450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aac3706c-8131-47a9-9dcc-281c5a9fb249",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "I think this is pretty much the only non-standard thing I had to do.  A lot of the tests in this file only tested a subset of the indexes in `indices`, so I needed a way to mimic that with fixtures.  The idea here is to use indirect parametrization to allow this behavior, e.g. \r\n```python\r\n@pytest.mark.parametrize(\"index\", [\"int\", \"uint\", \"float\"], indirect=True)\r\n```\r\nWould result in this fixture returning the three indexes keyed by `\"int\"`, `\"uint\"`, `\"float\"` in `indices_dict`.",
        "createdAt" : "2019-10-09T05:01:48Z",
        "updatedAt" : "2019-10-09T05:28:21Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "4bd1c74e-edc9-499b-90ec-b1c449dbe5be",
        "parentId" : "aac3706c-8131-47a9-9dcc-281c5a9fb249",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> I think this is pretty much the only non-standard thing I had to do\r\n\r\nthis is OK. used in io.formats.test_to_html for the biggie_df_fixture.\r\n\r\nthe alternative is to create a fixture yielding just the ids which is then requested by the indices fixture. (see filepath_or_buffer_id and filepath_or_buffer fixtures in io.formats.test_format.) and then override the id fixture directly at function, class or module level.\r\n\r\nboth patterns (direct and indirect parameterisation) are equivalent.",
        "createdAt" : "2019-10-09T12:52:18Z",
        "updatedAt" : "2019-10-09T12:52:18Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "d519b64c-411e-479e-bc99-5c958b0338b5",
        "parentId" : "aac3706c-8131-47a9-9dcc-281c5a9fb249",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "looking at this in detail. I don't think you need to create a separate fixture in order to do this. you could apply indirect parametrisation to the indices fixture.",
        "createdAt" : "2019-10-09T23:03:20Z",
        "updatedAt" : "2019-10-09T23:47:21Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "286a81c1fcb811a242c92cf77da44b1828c4382a",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +51,55 @@\n    @pytest.fixture\n    def index(self, request):\n        \"\"\"\n        Fixture for selectively parametrizing indices_dict via indirect parametrization"
  },
  {
    "id" : "2a207c1c-55f8-49ec-b804-f07462c325cb",
    "prId" : 28865,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28865#pullrequestreview-299743450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "811c652b-4cfc-419c-8714-f04ae8b26bc8",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "we shouldn't really be importing from a conftest file. probably best to move indices_dict to common and then import from there.",
        "createdAt" : "2019-10-09T22:59:36Z",
        "updatedAt" : "2019-10-09T23:47:21Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "286a81c1fcb811a242c92cf77da44b1828c4382a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +42,46 @@from pandas.core.sorting import safe_sort\nfrom pandas.tests.indexes.common import Base\nfrom pandas.tests.indexes.conftest import indices_dict\nimport pandas.util.testing as tm\nfrom pandas.util.testing import assert_almost_equal"
  },
  {
    "id" : "79ec0ebc-3e75-4113-aea5-92e0cda3c31f",
    "prId" : 28865,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28865#pullrequestreview-299743450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8618492-c0b8-4f87-92dd-981b8d6f1f58",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "here and elsewhere I think `result` may be more appropriate than `new_index`",
        "createdAt" : "2019-10-09T23:09:45Z",
        "updatedAt" : "2019-10-09T23:47:21Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "286a81c1fcb811a242c92cf77da44b1828c4382a",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +72,76 @@    @pytest.mark.parametrize(\"index\", [\"datetime\"], indirect=True)\n    def test_new_axis(self, index):\n        new_index = index[None, :]\n        assert new_index.ndim == 2\n        assert isinstance(new_index, np.ndarray)"
  },
  {
    "id" : "4888f675-d823-4b46-add1-a3ca55b097a3",
    "prId" : 28865,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28865#pullrequestreview-299743450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4865b78-62a8-4088-866c-dfc1c5cfcda7",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "tests of a single index type probably don't belong in base.",
        "createdAt" : "2019-10-09T23:15:27Z",
        "updatedAt" : "2019-10-09T23:47:21Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "286a81c1fcb811a242c92cf77da44b1828c4382a",
    "line" : 190,
    "diffHunk" : "@@ -1,1 +699,703 @@        assert not ind1.is_(ind2)\n\n    @pytest.mark.parametrize(\"index\", [\"datetime\"], indirect=True)\n    def test_asof(self, index):\n        d = index[0]"
  },
  {
    "id" : "b5731305-5168-40a6-b12a-f976cf0441c8",
    "prId" : 28865,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28865#pullrequestreview-299743450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5fea201-af64-4261-b234-d346d0dd210a",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "why has this changed?",
        "createdAt" : "2019-10-09T23:17:22Z",
        "updatedAt" : "2019-10-09T23:47:21Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "286a81c1fcb811a242c92cf77da44b1828c4382a",
    "line" : 236,
    "diffHunk" : "@@ -1,1 +745,749 @@\n    def test_fancy(self):\n        index = self.create_index()\n        sl = index[[1, 2, 3]]\n        for i in sl:"
  },
  {
    "id" : "8c47ccba-5560-4580-b040-b28d807b06d4",
    "prId" : 28865,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28865#pullrequestreview-299743450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce5423cd-5eed-439a-9223-b6c039ac1a50",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "why has this changed?",
        "createdAt" : "2019-10-09T23:21:03Z",
        "updatedAt" : "2019-10-09T23:47:21Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "286a81c1fcb811a242c92cf77da44b1828c4382a",
    "line" : 342,
    "diffHunk" : "@@ -1,1 +1017,1021 @@    def test_union_dt_as_obj(self, sort):\n        # TODO: Replace with fixturesult\n        index = self.create_index()\n        date_index = pd.date_range(\"2019-01-01\", periods=10)\n        first_cat = index.union(date_index)"
  },
  {
    "id" : "b99f21d3-d553-4b63-b1bc-4e5256b967f0",
    "prId" : 28865,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28865#pullrequestreview-299743450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1993fc38-c303-4235-9f2c-4133d7c7af89",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "rather than duplicating the parameterisation, is it worth making mapper a fixture?",
        "createdAt" : "2019-10-09T23:23:35Z",
        "updatedAt" : "2019-10-09T23:47:21Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "286a81c1fcb811a242c92cf77da44b1828c4382a",
    "line" : 406,
    "diffHunk" : "@@ -1,1 +1099,1103 @@        tm.assert_index_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"mapper\",\n        ["
  },
  {
    "id" : "b06cf5ce-0d16-4cd2-ab11-c44e4be77df7",
    "prId" : 28865,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28865#pullrequestreview-299743450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8d47a1b-dccb-44f0-a1c9-c6c5bf7746bf",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "only used twice, probably best to inline.",
        "createdAt" : "2019-10-09T23:30:57Z",
        "updatedAt" : "2019-10-09T23:47:21Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "286a81c1fcb811a242c92cf77da44b1828c4382a",
    "line" : 668,
    "diffHunk" : "@@ -1,1 +1445,1449 @@\n    def _check_method_works(self, method, index):\n        method(index)\n\n    def test_get_indexer(self):"
  },
  {
    "id" : "54aee6c4-d3eb-457d-be53-a111ab350a6c",
    "prId" : 28865,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28865#pullrequestreview-299743450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0df73361-b5e4-4478-b8e8-e77ce1406e38",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "why is this changing?",
        "createdAt" : "2019-10-09T23:32:52Z",
        "updatedAt" : "2019-10-09T23:47:21Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "286a81c1fcb811a242c92cf77da44b1828c4382a",
    "line" : 640,
    "diffHunk" : "@@ -1,1 +1409,1413 @@            assert formatted == expected\n\n        Index([]).format()\n\n    @pytest.mark.parametrize(\"vals\", [[1, 2.0 + 3.0j, 4.0], [\"a\", \"b\", \"c\"]])"
  },
  {
    "id" : "94709a5b-078e-436b-b997-52de1324e3ad",
    "prId" : 28865,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28865#pullrequestreview-299743450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2b7a38d-f2bf-4692-840f-59c52c01972f",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "if this combination is common could create an alias to the mark.",
        "createdAt" : "2019-10-09T23:36:37Z",
        "updatedAt" : "2019-10-09T23:47:21Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "286a81c1fcb811a242c92cf77da44b1828c4382a",
    "line" : 697,
    "diffHunk" : "@@ -1,1 +1778,1782 @@        tm.assert_index_equal(dropped, expected)\n\n    @pytest.mark.parametrize(\"index\", [\"string\", \"int\", \"float\"], indirect=True)\n    @pytest.mark.parametrize(\"keys\", [[\"foo\", \"bar\"], [\"1\", \"bar\"]])\n    def test_drop_by_str_label_raises_missing_keys(self, index, keys):"
  },
  {
    "id" : "fa50373b-8751-4562-9e54-b89ce0433512",
    "prId" : 28865,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28865#pullrequestreview-299743450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24c135a1-605b-4532-9cf6-e1dab7eede46",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "may be more appropriate to skip on IntervalIndex",
        "createdAt" : "2019-10-09T23:42:24Z",
        "updatedAt" : "2019-10-09T23:47:21Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "286a81c1fcb811a242c92cf77da44b1828c4382a",
    "line" : 791,
    "diffHunk" : "@@ -1,1 +2425,2429 @@    def test_deprecated_contains(self, indices):\n        # deprecated for all types except IntervalIndex\n        warning = FutureWarning if not isinstance(indices, pd.IntervalIndex) else None\n        with tm.assert_produces_warning(warning):\n            indices.contains(1)"
  },
  {
    "id" : "bf203b47-c72b-48ea-b3ee-d60cc81a92dd",
    "prId" : 31134,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31134#pullrequestreview-345025496",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4106429d-f227-4642-9dc3-dbc5cf3735a0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this rather be a TypeError / AssertionError?",
        "createdAt" : "2020-01-19T20:43:02Z",
        "updatedAt" : "2020-01-19T20:43:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4a88b5fa-d63a-4995-9d9e-95d9998a02c4",
        "parentId" : "4106429d-f227-4642-9dc3-dbc5cf3735a0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "only if we add the checks inside get_value.  My thought is that for internal methods with annotated types, we should be able to assume they are called correctly.",
        "createdAt" : "2020-01-19T20:46:55Z",
        "updatedAt" : "2020-01-19T20:46:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e0b24edbc4b82f36942d1b301d0d989426403f3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1917,1921 @@\n        with pytest.raises(AttributeError, match=\"has no attribute '_values'\"):\n            # Index.get_value requires a Series, not an ndarray\n            index.get_value(values, value)\n"
  },
  {
    "id" : "259150a9-f10f-438a-8047-0a946a1933f6",
    "prId" : 31401,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31401#pullrequestreview-351288383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09520b7a-5af5-4b75-a8ba-db2e2277bffc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k, we should try to split this out the setops to a separate test file (IIRC there is another PR doing of some of this)",
        "createdAt" : "2020-01-31T03:05:48Z",
        "updatedAt" : "2020-01-31T16:39:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8e14ddeb-db37-4b95-af2e-6c12a2cc78c5",
        "parentId" : "09520b7a-5af5-4b75-a8ba-db2e2277bffc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "agreed.  i have a local branch separating some of this into tests/indexes/object/... will push it before long",
        "createdAt" : "2020-01-31T04:31:54Z",
        "updatedAt" : "2020-01-31T16:39:36Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bff494454ea2b33f7b52c8d86256148fc7873d0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1048,1052 @@            getattr(idx1, method)(idx2, sort=True)\n\n    def test_setops_preserve_object_dtype(self):\n        idx = pd.Index([1, 2, 3], dtype=object)\n        result = idx.intersection(idx[1:])"
  },
  {
    "id" : "cebea41d-2020-4106-b928-071182d93a31",
    "prId" : 31401,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31401#pullrequestreview-351894763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b16d8bbf-3cb3-4aee-b6be-1f297854b4e6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are you not testing the public method?",
        "createdAt" : "2020-01-31T03:06:22Z",
        "updatedAt" : "2020-01-31T16:39:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7d693731-e3ab-4934-b850-a1213d7f8134",
        "parentId" : "b16d8bbf-3cb3-4aee-b6be-1f297854b4e6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "we could test that too, this is just \"closer\" to the bug",
        "createdAt" : "2020-01-31T04:32:25Z",
        "updatedAt" : "2020-01-31T16:39:36Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2cb030ea-3f6c-4384-8299-604b31b9d340",
        "parentId" : "b16d8bbf-3cb3-4aee-b6be-1f297854b4e6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "updated the test to test the public method as well as the private one",
        "createdAt" : "2020-02-01T17:28:16Z",
        "updatedAt" : "2020-02-01T17:28:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bff494454ea2b33f7b52c8d86256148fc7873d0",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1059,1063 @@        tm.assert_index_equal(result, expected)\n\n        result = idx._union(idx[1:], sort=None)\n        expected = idx\n        tm.assert_index_equal(result, expected)"
  },
  {
    "id" : "144bb43b-1f6b-4bae-8c55-b35ab86a9cc3",
    "prId" : 31701,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31701#pullrequestreview-359291503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e40485d5-3f2e-4151-9221-74bfe0e00479",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we really want to avoid this import (but understand doing this in steps)",
        "createdAt" : "2020-02-15T01:11:39Z",
        "updatedAt" : "2020-02-15T01:12:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e865e9056d19834be404283f8f539111db3f6e9e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +35,39 @@)\nimport pandas._testing as tm\nfrom pandas.conftest import indices_dict\nfrom pandas.core.indexes.api import (\n    Index,"
  },
  {
    "id" : "391078fb-2006-4d45-b23f-30e56ba504d9",
    "prId" : 32242,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32242#pullrequestreview-368372572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3ae7680-af35-40fe-9ef7-f4b527692900",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We should also test that `repr(arr)` is the correct string.",
        "createdAt" : "2020-03-03T22:29:34Z",
        "updatedAt" : "2020-03-04T13:58:38Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "e43fd8dee4f2f44162cd052c4bfdf2a772479067",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2469,2473 @@        out2 = \"Index([True, False, nan], dtype='object')\"\n        assert out2 == exp2\n\n\nclass TestIndexUtils:"
  },
  {
    "id" : "d3eb8149-c08e-49e2-a563-b515631ac4ab",
    "prId" : 32916,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32916#pullrequestreview-379340976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1002710-4e05-4dc8-aba7-2c512bfd1acc",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "hmm, I _think_ the intention of the explicitly renaming was to ensure that the labels being tested were not already in the index.",
        "createdAt" : "2020-03-23T11:26:22Z",
        "updatedAt" : "2020-03-23T11:26:23Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "e36a74f0ca99a9097e2b0cd163565c299c04bad0",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1834,1838 @@        index = indices\n        if isinstance(index, MultiIndex):\n            index = index.rename([\"foo\", \"bar\"] + index.names[2:])\n            msg = f\"'Level {label} not found'\"\n        else:"
  },
  {
    "id" : "6dd8ae89-99d6-4eb6-ad43-60d307de2def",
    "prId" : 36767,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36767#pullrequestreview-500666493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4966afe0-b036-4541-be00-a64c5e354f10",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we generally add the issue number here as a comment",
        "createdAt" : "2020-10-01T19:47:00Z",
        "updatedAt" : "2020-10-01T19:48:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb9012cd2d2129f66812ac48dc71a6890df21dbd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2224,2228 @@\n    def test_sortlevel(self):\n        index = pd.Index([5, 4, 3, 2, 1])\n        with pytest.raises(Exception, match=\"ascending must be a single bool value or\"):\n            index.sortlevel(ascending=\"True\")"
  },
  {
    "id" : "387ae929-ca67-4879-8f4c-cd73637504f9",
    "prId" : 36767,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36767#pullrequestreview-500666493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cac6193e-777c-46c4-80dd-e0f7d6bfbc10",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this should be 2 tests, one for the exceptions, one for the working cases (which could be parameterized)",
        "createdAt" : "2020-10-01T19:47:24Z",
        "updatedAt" : "2020-10-01T19:48:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb9012cd2d2129f66812ac48dc71a6890df21dbd",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2236,2240 @@            index.sortlevel(ascending=[\"True\"])\n\n        expected = pd.Index([1, 2, 3, 4, 5])\n        result = index.sortlevel(ascending=[True])\n        tm.assert_index_equal(result[0], expected)"
  },
  {
    "id" : "47dbcded-4544-4fd5-b574-afab57c40c53",
    "prId" : 38251,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38251#pullrequestreview-545049638",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31300d4c-85d8-42d1-9275-47cde6a7c978",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What's the reason for changing the behaviour here? \r\nDid you consider this a bug?",
        "createdAt" : "2020-12-04T14:38:04Z",
        "updatedAt" : "2020-12-04T14:38:07Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b0c5076f-659a-4ac0-acad-af99b782f958",
        "parentId" : "31300d4c-85d8-42d1-9275-47cde6a7c978",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes.  As mentioned in the OP, as far as i can tell it isnt actually affecting anything",
        "createdAt" : "2020-12-04T15:18:40Z",
        "updatedAt" : "2020-12-04T15:18:40Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f53cd87a9fe8bed3bfa19309e9380c5bf0ee11f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1252,1256 @@            missing = np.arange(3, dtype=np.intp)\n            tm.assert_numpy_array_equal(result[0], expected)\n            tm.assert_numpy_array_equal(result[1], missing)\n\n    def test_get_indexer_with_NA_values("
  }
]