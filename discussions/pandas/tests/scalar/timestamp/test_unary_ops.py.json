[
  {
    "id" : "0965afe6-6320-4ba5-b8b2-59b6ed63a370",
    "prId" : 19240,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19240#pullrequestreview-94707893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71ebc25f-8f06-429b-8868-8fe2f0e3ba54",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a NaT here as well",
        "createdAt" : "2018-02-07T13:33:32Z",
        "updatedAt" : "2018-02-07T14:29:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1901fc8410d5b057c88d963a801d129cdd3632da",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +94,98 @@        assert result == expected\n\n    @pytest.mark.parametrize('test_input, rounder, freq, expected', [\n        ('2117-01-01 00:00:45', 'floor', '15s', '2117-01-01 00:00:45'),\n        ('2117-01-01 00:00:45', 'ceil', '15s', '2117-01-01 00:00:45'),"
  },
  {
    "id" : "f98590fa-9c94-4df2-9133-5a26e96ca681",
    "prId" : 22802,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22802#pullrequestreview-157944725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b9b2afe-9f1c-4c01-9a08-03e8dfccecaf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are there round errors in timedelta ops as well?",
        "createdAt" : "2018-09-23T12:01:12Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b90da06d-7f9f-44e6-b291-cf9e42333794",
        "parentId" : "8b9b2afe-9f1c-4c01-9a08-03e8dfccecaf",
        "authorId" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "body" : "Yes, also `timedeltas` are affected by rounding errors, but it is very unlikely that these will be found in real world applications.\r\n\r\nBTW I found #22591 processing real scientific data, in which I had timestamps for 2018 measurements with about 1 Âµs resolution. On the contrary I cannot imagine of an application in which you have 50 years time deltas with such a small resolution.\r\n\r\nOf course you could create a round-trip example:\r\n```\r\nTimedate -> Timedelta -> round() -> Timedate \r\n```\r\nwhich gives different results with respect to \r\n```\r\nTimedate -> round().\r\n```\r\nNevertheless I would suggest to postpone the resolution of the timedelta issue after this PR is merged.\r\n\r\n(Please note also that the current complex machinery, which tries to improve rounding errors, is implemented only for Timedate and not for Timedelta.)",
        "createdAt" : "2018-09-23T15:58:04Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "tags" : [
        ]
      },
      {
        "id" : "e6472298-dace-4f28-bcba-17954632ec88",
        "parentId" : "8b9b2afe-9f1c-4c01-9a08-03e8dfccecaf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no i get it, that's why I asked. Ok to fix later, esp if its not very common.",
        "createdAt" : "2018-09-23T16:43:59Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "988e5e30f87fad277c3a5b714d75738ff2545f21",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +184,188 @@\n        # test ceil\n        result = dt.ceil(freq)\n        assert result.value % unit == 0, \"ceil not a {} multiple\".format(freq)\n        assert 0 <= result.value - dt.value < unit, \"ceil error\""
  },
  {
    "id" : "d15bd8df-9b69-4e1f-859d-510573c4c6ac",
    "prId" : 23634,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23634#pullrequestreview-174137276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0ca3a3b-4890-4ee9-b8d8-d71245275231",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a normalize_nat test as well?",
        "createdAt" : "2018-11-12T13:12:09Z",
        "updatedAt" : "2018-11-18T00:58:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dcc63987-0739-4fce-b838-dbe4495c90ee",
        "parentId" : "a0ca3a3b-4890-4ee9-b8d8-d71245275231",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "We don't define `normalize` for `NaT`.",
        "createdAt" : "2018-11-12T23:27:44Z",
        "updatedAt" : "2018-11-18T00:58:36Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "6e714a48-b152-4155-b48f-f0ac149e9b03",
        "parentId" : "a0ca3a3b-4890-4ee9-b8d8-d71245275231",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "We could have one for Timstamp mirroring (another issue). Probably would just return `NaT`",
        "createdAt" : "2018-11-12T23:29:16Z",
        "updatedAt" : "2018-11-18T00:58:36Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb11dcfb3af96b2c47df5680bd5e9d6af33d60b4",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +332,336 @@    # Timestamp.normalize\n\n    @pytest.mark.parametrize('arg', ['2013-11-30', '2013-11-30 12:00:00'])\n    def test_normalize(self, tz_naive_fixture, arg):\n        tz = tz_naive_fixture"
  },
  {
    "id" : "71697b67-1ac5-44f2-a34f-a19804568c5d",
    "prId" : 25046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25046#pullrequestreview-198731638",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e0d34bc-a9b8-4ed5-9f01-d57b11f34a1d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a test where we pass fold=1 in the constructor itself",
        "createdAt" : "2019-01-31T12:35:18Z",
        "updatedAt" : "2019-01-31T19:12:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8c74bab9-f72a-400b-9cb7-ba5c362d11c3",
        "parentId" : "6e0d34bc-a9b8-4ed5-9f01-d57b11f34a1d",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "I prefer if we tackle `fold` in the constructor in another PR. `fold` doesn't have any formal handling in the `Timestamp` constructor besides just being carried along by `datetime.datetime`",
        "createdAt" : "2019-01-31T17:56:44Z",
        "updatedAt" : "2019-01-31T19:12:22Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "59a6857c-aeb3-4a6c-8259-7c31205ad9e8",
        "parentId" : "6e0d34bc-a9b8-4ed5-9f01-d57b11f34a1d",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "https://github.com/pandas-dev/pandas/issues/25057",
        "createdAt" : "2019-01-31T17:57:23Z",
        "updatedAt" : "2019-01-31T19:12:22Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cb5d02e076a664ea951d523ea634d00cce81bf0",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +331,335 @@\n    @pytest.mark.skipif(not PY36, reason='Fold not available until PY3.6')\n    @pytest.mark.parametrize('fold', [0, 1])\n    @pytest.mark.parametrize('tz', ['dateutil/Europe/London', 'Europe/London'])\n    def test_replace_dst_fold(self, fold, tz):"
  }
]