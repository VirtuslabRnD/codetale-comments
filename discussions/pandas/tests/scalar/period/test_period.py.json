[
  {
    "id" : "d5dfb559-cd58-4747-97ae-6451659e0a37",
    "prId" : 22093,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22093#pullrequestreview-141320967",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "562e8c2f-2cda-47aa-a67c-692a4ede4615",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe move these 2 lines to the top of the file?",
        "createdAt" : "2018-07-28T12:50:48Z",
        "updatedAt" : "2018-07-28T16:31:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fa2d4c2b-b770-4c46-b794-79df6b40e031",
        "parentId" : "562e8c2f-2cda-47aa-a67c-692a4ede4615",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "If we use them more than once it makes sense, but ATM they are defined right next to where they are used, which is pretty ideal.",
        "createdAt" : "2018-07-28T16:18:07Z",
        "updatedAt" : "2018-07-28T16:31:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7d2e265c2b2fca06f432ae9cdd3c9288469a1d6",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1038,1042 @@            dt1 + dt2\n\n    boxes = [lambda x: x, lambda x: pd.Series([x]), lambda x: pd.Index([x])]\n    ids = ['identity', 'Series', 'Index']\n"
  },
  {
    "id" : "b9c8ffd6-5da8-4031-a1e6-0668d9e71137",
    "prId" : 23681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23681#pullrequestreview-174986322",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "773f61e4-fc20-4329-a644-268f7c67954b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can parametrize next pass (and maybe split to 2 tests, working and error condtiions)",
        "createdAt" : "2018-11-14T12:51:47Z",
        "updatedAt" : "2018-11-15T19:33:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "20a6e95c-2745-4ca8-9135-058275ffe907",
        "parentId" : "773f61e4-fc20-4329-a644-268f7c67954b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, I've got another branch focusing more closely on the scalar tests, will work this in there.",
        "createdAt" : "2018-11-14T17:32:01Z",
        "updatedAt" : "2018-11-15T19:33:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddb1662bc226bb663680e3184d8e70abf511f17d",
    "line" : 485,
    "diffHunk" : "@@ -1,1 +406,410 @@        with pytest.raises(ValueError, match=msg):\n            Period('2011-01', freq='0M')\n\n    def test_period_cons_combined(self):\n        p = [(Period('2011-01', freq='1D1H'),"
  },
  {
    "id" : "b9a9007d-d4fb-424c-8b57-93822bd42d01",
    "prId" : 23681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23681#pullrequestreview-174842956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21452eb9-6e4c-4211-8cee-46b721475ff7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you parametrize next pass",
        "createdAt" : "2018-11-14T12:52:50Z",
        "updatedAt" : "2018-11-15T19:33:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddb1662bc226bb663680e3184d8e70abf511f17d",
    "line" : 744,
    "diffHunk" : "@@ -1,1 +702,706 @@        assert i1.freqstr == 'T'\n\n    def test_period_deprecated_freq(self):\n        cases = {\"M\": [\"MTH\", \"MONTH\", \"MONTHLY\", \"Mth\", \"month\", \"monthly\"],\n                 \"B\": [\"BUS\", \"BUSINESS\", \"BUSINESSLY\", \"WEEKDAY\", \"bus\"],"
  },
  {
    "id" : "d5f3b4d1-b74f-4f63-98ba-26acb13cf493",
    "prId" : 34449,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34449#pullrequestreview-421847684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97a44225-9c0c-46cb-bad5-7516120ca51a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you test how='B', and is this result correct?",
        "createdAt" : "2020-05-29T17:24:34Z",
        "updatedAt" : "2020-05-30T14:51:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d9727573-eae3-45f4-8345-04042cfce4aa",
        "parentId" : "97a44225-9c0c-46cb-bad5-7516120ca51a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "we have tests for the other case, and it is the correct result.\r\n\r\ni got this test by going into the PeriodArray.to_timestamp code and computing the same thing element-wise, then asserting that they matched.  this is one of the cases that failed",
        "createdAt" : "2020-05-29T17:43:09Z",
        "updatedAt" : "2020-05-30T14:51:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "528d2c9e-07df-4088-a3d5-6818a9edb1b2",
        "parentId" : "97a44225-9c0c-46cb-bad5-7516120ca51a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I don't think this is correct, 1/6 is a sunday, by-definition not a business day",
        "createdAt" : "2020-05-31T22:43:28Z",
        "updatedAt" : "2020-05-31T22:43:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bebc2b5f-c5e8-4d0d-b931-522bd150110f",
        "parentId" : "97a44225-9c0c-46cb-bad5-7516120ca51a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you are missing my point, should this not be ``pd.Timestamp('1990-01-8') - pd.Timedelta(nanoseconds=1)``, IOW 1 nano less than the next period which *starts* on 1990-01-8\r\n\r\ne.g. (not including this PR)\r\n```\r\nIn [1]: p = pd.Period(\"1990-01-05\", \"B\")                                                                                                                      \r\n\r\nIn [2]: p                                                                                                                                                     \r\nOut[2]: Period('1990-01-05', 'B')\r\n\r\nIn [3]: p.start_time                                                                                                                                          \r\nOut[3]: Timestamp('1990-01-05 00:00:00')\r\n\r\nIn [4]: p.end_time                                                                                                                                            \r\nOut[4]: Timestamp('1990-01-07 23:59:59.999999999')\r\n\r\nIn [6]: pd.Timestamp('1990-01-6') - pd.Timedelta(nanoseconds=1)                                                                                               \r\nOut[6]: Timestamp('1990-01-05 23:59:59.999999999')\r\n\r\nIn [8]: pd.Timestamp('1990-01-8') - pd.Timedelta(nanoseconds=1)                                                                                               \r\nOut[8]: Timestamp('1990-01-07 23:59:59.999999999')\r\n```\r\n\r\nI believe we should be making [4] == [8]\r\n\r\n[6] (what you are testing) does not seem right as it *does*n't include the weekend. I believe we cover the complete space with the end-times, IOW you can line the periods up and there is NO space in-between.",
        "createdAt" : "2020-06-01T13:36:35Z",
        "updatedAt" : "2020-06-01T13:40:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbebada2b4c2cfd83ae4f8097ceacf477854cbfe",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +636,640 @@\n    def test_to_timestamp_business_end(self):\n        per = pd.Period(\"1990-01-05\", \"B\")  # Friday\n        result = per.to_timestamp(\"B\", how=\"E\")\n"
  }
]