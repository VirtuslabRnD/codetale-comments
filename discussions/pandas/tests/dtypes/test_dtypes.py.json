[
  {
    "id" : "5d6e2545-2c91-48b6-a629-67b90591aa24",
    "prId" : 16015,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16015#pullrequestreview-61666993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efe24641-e894-4f38-b3f6-dcbe8f9da214",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "assert not equality as well",
        "createdAt" : "2017-09-09T17:43:55Z",
        "updatedAt" : "2017-09-23T16:33:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "43f90cc13786b57b89709cdb7dd8d2c023adaee6",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +566,570 @@        c1 = CategoricalDtype([1, 2, 3])\n        c2 = CategoricalDtype([1., 2., 3.])\n        assert c1 is not c2\n        assert c1 != c2\n"
  },
  {
    "id" : "3a150dc7-3e90-4eb5-8fe6-5e20d16095c6",
    "prId" : 16015,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16015#pullrequestreview-61666993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "953f582f-2380-4c17-80c0-205263413dbc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add test for raises on invalid type for ``ordered`` (e.g. 'foo')",
        "createdAt" : "2017-09-09T17:44:38Z",
        "updatedAt" : "2017-09-23T16:33:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "43f90cc13786b57b89709cdb7dd8d2c023adaee6",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +609,613 @@    def test_categorical_equality(self, ordered, other, expected):\n        c1 = CategoricalDtype(['a', 'b'], ordered)\n        result = c1 == other\n        assert result == expected\n"
  },
  {
    "id" : "805a002b-d67e-49d6-b14b-53ff9449160e",
    "prId" : 16015,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16015#pullrequestreview-63228393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "353a1aa0-6e6e-44dc-af2d-89114d1686ca",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "might add a test for passing just a string for the first argument (should fail)\r\ne.g.\r\n``CategoricalDtype('category')`` (see my comment about a ``from_string`` above, which we should add for compat.",
        "createdAt" : "2017-09-17T14:43:48Z",
        "updatedAt" : "2017-09-23T16:33:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "43f90cc13786b57b89709cdb7dd8d2c023adaee6",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +613,617 @@\n    def test_invalid_raises(self):\n        with tm.assert_raises_regex(TypeError, 'ordered'):\n            CategoricalDtype(['a', 'b'], ordered='foo')\n"
  },
  {
    "id" : "3325a04f-1997-435c-8219-bd45beffa619",
    "prId" : 19268,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19268#pullrequestreview-93155249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83bb8e88-dc48-461b-8b54-d1a6429404bc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you test all of the exposed methods / properties",
        "createdAt" : "2018-02-01T00:21:28Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5a7d4d62-3998-4086-bba1-719e8da654bd",
        "parentId" : "83bb8e88-dc48-461b-8b54-d1a6429404bc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The only thing I could test on the dummy ones is `kind`, which returns just 'O' and `names`, which I'm hopeful we can remove.\r\n\r\nAll the other methods are abstract or rely on an abstract method.\r\n\r\nI do have real classes that implement the interface, but waiting for the interface to settle a bit before rewriting those classes and the tests.",
        "createdAt" : "2018-02-01T03:01:07Z",
        "updatedAt" : "2018-02-01T20:55:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "34134f2f9633cca26b4efd382475927c1eb3fe5a",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +762,766 @@        pd.Series(pd.Categorical([])),\n        DummyDtype(),\n        DummyArray(),\n    ])\n    def test_is_extension_array_dtype(self, values):"
  },
  {
    "id" : "43f0e1df-0d6c-4a52-90b4-6693680b861a",
    "prId" : 21185,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21185#pullrequestreview-125490428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49240035-0dde-4297-be49-f5a03aef66d8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "can you replace this (or also add) one that is not the default? \r\nEg `('interval[datetime64[ns]]', IntervalDtype('datetime64[ns]')),`",
        "createdAt" : "2018-06-04T09:44:14Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e1591269-c8b7-4710-85a1-3e0fae2b503e",
        "parentId" : "49240035-0dde-4297-be49-f5a03aef66d8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "(although that is maybe covered with the period or datetime64 one below. Is `'interval[datetime64[ns]]'` already tested for IntervalDtype?)",
        "createdAt" : "2018-06-04T10:16:18Z",
        "updatedAt" : "2018-07-02T23:20:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2c91d706510b16a8a9f82dbeafa7d35396697d1",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +788,792 @@    [('int64', None),\n     ('interval', IntervalDtype()),\n     ('interval[int64]', IntervalDtype()),\n     ('interval[datetime64[ns]]', IntervalDtype('datetime64[ns]')),\n     ('category', CategoricalDtype()),"
  },
  {
    "id" : "953cc434-9525-4dd1-a1c5-014e0a9b2af4",
    "prId" : 23917,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23917#pullrequestreview-178129927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccf72a4b-8586-4cdf-8d67-ef1f9e7ed19d",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "If each call is supposed to generate a warning, this will need more context managers.",
        "createdAt" : "2018-11-26T04:25:21Z",
        "updatedAt" : "2018-11-27T16:39:59Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bdc157d786d3cacd5af0521bd2767b7e7a60dab",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +230,234 @@        assert not is_datetime64tz_dtype(1.0)\n\n        with tm.assert_produces_warning(FutureWarning):\n            assert is_datetimetz(s)\n            assert is_datetimetz(s.dtype)"
  },
  {
    "id" : "480feb30-5b10-4a82-9dcb-e59b26226158",
    "prId" : 26403,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26403#pullrequestreview-256536959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef941b24-3c1f-4702-a247-0a2303b33fe1",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "if your comment is correct that this can be removed again, shouldn't it then be `ordered=False` ?",
        "createdAt" : "2019-07-01T18:16:36Z",
        "updatedAt" : "2019-07-03T02:20:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f339026d-ad48-47fc-a62d-56a7045e5faa",
        "parentId" : "ef941b24-3c1f-4702-a247-0a2303b33fe1",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "My read is that the intention here is to test the default construction for `CategoricalDtype`, which is still currently `ordered=None`; just explicitly specified it to avoid needing to catch more warnings.\r\n\r\nIt looks like specifying `ordered=False` doesn't actually break anything though, so I could make that change now if you want.",
        "createdAt" : "2019-07-01T20:08:37Z",
        "updatedAt" : "2019-07-03T02:20:44Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "219f03cf499c18b013ccc772358ccd4d722dd4db",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +57,61 @@    def create(self):\n        # TODO(GH 26403): Remove when default ordered becomes False\n        return CategoricalDtype(ordered=None)\n\n    def test_pickle(self):"
  },
  {
    "id" : "b7af6644-e28f-481a-8162-fcbafaf3c28a",
    "prId" : 26403,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26403#pullrequestreview-256614876",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45f313d7-c82a-4a6e-9d20-602d785ba60f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you give some explanation on what you are testing here (the cases)",
        "createdAt" : "2019-07-02T00:16:10Z",
        "updatedAt" : "2019-07-03T02:20:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "219f03cf499c18b013ccc772358ccd4d722dd4db",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +822,826 @@            expected_ordered = dtype.ordered\n\n        # GH 26336\n        if new_ordered is ordered_sentinel and ordered_fixture is True:\n            with tm.assert_produces_warning(FutureWarning,"
  },
  {
    "id" : "ef7505bd-ea20-4d0a-851e-98c66b051b5c",
    "prId" : 31594,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31594#pullrequestreview-352160998",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a52da05a-0991-4d8d-9405-872bfab4b8b1",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think we simply shouldn't test the message here, we are literally testing numpy here",
        "createdAt" : "2020-02-03T10:41:15Z",
        "updatedAt" : "2020-02-03T10:41:15Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa12b78387abfd12c5c9d60d33ffa3d4ef3d5f7a",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +45,49 @@        msg = \"|\".join(\n            [\"data type not understood\", \"Cannot interpret '.*' as a data type\"]\n        )\n        with pytest.raises(TypeError, match=msg):\n            np.dtype(dtype)"
  },
  {
    "id" : "a2fffcd7-4534-444b-be53-de38560930db",
    "prId" : 32672,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32672#pullrequestreview-374180910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fe84107-267e-4bc7-88dc-b8a1e4b98bb2",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I _think_ this is a bug, see #27388. so maybe add a comment.\r\n```suggestion\r\n        # https://github.com/pandas-dev/pandas/issues/27388\r\n        msg = \"object has no attribute 'freqstr'\"\r\n```",
        "createdAt" : "2020-03-13T10:15:07Z",
        "updatedAt" : "2020-03-17T23:25:49Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "34c3b8f7e8a54460e6122d2151fc133bd81b82dc",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +481,485 @@        dt = PeriodDtype()\n        # https://github.com/pandas-dev/pandas/issues/27388\n        msg = \"object has no attribute 'freqstr'\"\n        with pytest.raises(AttributeError, match=msg):\n            str(dt)"
  }
]