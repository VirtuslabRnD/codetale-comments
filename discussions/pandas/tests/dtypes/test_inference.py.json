[
  {
    "id" : "761ddeb6-81f5-4efc-9ac5-ca535a68d1f5",
    "prId" : 16026,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16026#pullrequestreview-33120263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e500267d-7339-44c3-9c67-eca504b6892c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "nice!",
        "createdAt" : "2017-04-18T00:23:51Z",
        "updatedAt" : "2017-04-18T00:23:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a786627060b13cbfccbae0b305c669cb396b312d",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +76,80 @@])\ndef test_is_nested_list_like_passes(inner, outer):\n    result = outer([inner for _ in range(5)])\n    assert inference.is_list_like(result)\n"
  },
  {
    "id" : "ee0f929f-e04f-4e09-923f-1ba022ceb287",
    "prId" : 16426,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16426#pullrequestreview-39564460",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83cde60c-1f55-4cdf-a1b1-ad63b5ed9b24",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Sorry, could you add a test with a mix of Decimal and non-decimal (like floats) and make sure that the return is `mixed`? Or search through and see if we have a test that already covers this. Other than that, this looks great.",
        "createdAt" : "2017-05-22T19:24:15Z",
        "updatedAt" : "2017-05-22T22:27:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f158cb23cbfc51b35f9109a65e2929721f1e9a2",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +469,473 @@        result = lib.infer_dtype(arr)\n        assert result == 'decimal'\n\n        arr = np.array([1.0, 2.0, Decimal(3)])\n        result = lib.infer_dtype(arr)"
  },
  {
    "id" : "d52dda36-6e59-4bdb-a2b4-a825c819dab1",
    "prId" : 17823,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17823#pullrequestreview-68040757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "731a9041-42eb-404f-ba88-2dfbb2770e91",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should we do this as a parameterize instead of fixture? (I don't know whether are some 'rules' where it is better to use one or the other, but in this case it really seems to be a parameterizing of the test, so I would find it easier to read the code if it uses paramatrize)",
        "createdAt" : "2017-10-09T09:12:07Z",
        "updatedAt" : "2017-10-09T16:49:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1009cfb9-80b2-40b7-b641-c26bcd2c122c",
        "parentId" : "731a9041-42eb-404f-ba88-2dfbb2770e91",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I use fixture whenever I find myself using the same parametrization multiple times.  As you can see below, I use it three times.",
        "createdAt" : "2017-10-09T16:29:45Z",
        "updatedAt" : "2017-10-09T16:49:26Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "93e52e9e57393d30a99bf3d0224445eb838d9c3e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +42,46 @@@pytest.fixture(params=[True, False], ids=lambda val: str(val))\ndef coerce(request):\n    return request.param\n\n"
  },
  {
    "id" : "be9cb735-4b8b-4706-865a-98376439e11b",
    "prId" : 18361,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18361#pullrequestreview-78414794",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4046fb98-aaa9-42fd-8aba-5daf5d160646",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add strings, ints, float, and a python object \r\n\r\ne.g. \r\n```\r\nclass Foo():\r\n    pass;\r\nFoo()\r\n```\r\nshould all return mixed (as this is a date infered)",
        "createdAt" : "2017-11-22T11:36:03Z",
        "updatedAt" : "2017-11-23T02:49:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6f9181428cbd682d0d34686b062cf48c4d0655a",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +693,697 @@\n    @pytest.mark.parametrize(\n        \"data\",\n        [\n            [\"2017-06-12\", \"2017-03-11\"],"
  },
  {
    "id" : "368fd53f-153d-432a-ae38-c1b6073bc2b3",
    "prId" : 23422,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23422#pullrequestreview-170311645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac88e3d0-df74-4466-9f41-2f0c9c4675e3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "also tests these ndarrays",
        "createdAt" : "2018-10-31T12:14:55Z",
        "updatedAt" : "2018-11-03T15:59:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "45423934-deab-44b0-91a8-3bb30a6be097",
        "parentId" : "ac88e3d0-df74-4466-9f41-2f0c9c4675e3",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "hope I understood this correctly. Parametrizing over `box` in `[pd.Series, np.array]`. ",
        "createdAt" : "2018-10-31T16:14:04Z",
        "updatedAt" : "2018-11-03T15:59:59Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "19cf2dd8e66f33de7b2b49d9a1d4d67f4d649a04",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +605,609 @@        arr = box([missing, missing], dtype=dtype)\n\n        result = lib.infer_dtype(arr, skipna=skipna)\n        assert result == expected\n"
  },
  {
    "id" : "cb403612-e84a-4cdc-9c00-56715dfd003f",
    "prId" : 23582,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23582#pullrequestreview-176162453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2980830-56fd-4a0f-b87a-4ebed13ecbea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "its nice that you added this, but you didn't remove any code. if you are not going to do that , then not much point of putting the fixture in conftest.py in the first place. ",
        "createdAt" : "2018-11-18T18:20:19Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a044ea45-1dd1-4a1c-9bfc-d0f136315b7c",
        "parentId" : "b2980830-56fd-4a0f-b87a-4ebed13ecbea",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "@jreback \r\nThis is coming out of your review above:\r\n> > I'm asking if you want me to move this particular fixture to `pandas/conftest.py` and then test it within the dtype tests (because this is effectively a dtype thing).\r\n\r\n> Yes\r\n\r\nAnd I don't get how adding this fixture is tied to code removal? I'm testing the `.str`-accessor on all the inferred dtypes to make sure it raises correctly, that's what I mainly need this fixture for.\r\n\r\nThat I'm testing the validity of the fixture in `test_inference.py` is for consistency, because it belongs there thematically (but could otherwise test that directly in the fixture constructor).",
        "createdAt" : "2018-11-19T06:52:30Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "72ecb3a3-22f6-42f4-b47a-a60a534b2a2c",
        "parentId" : "b2980830-56fd-4a0f-b87a-4ebed13ecbea",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "@jreback \r\nThis fixture would be a perfect candidate for splitting off a PR, but then, I'm afraid you're gonna say it doesn't do anything interesting (yet).\r\n\r\nDo you want me to:\r\n* split it up, and have the fixture being unusued until this PR is merged,\r\n* or do want me to keep things logically together (i.e. in this PR)?",
        "createdAt" : "2018-11-19T06:58:35Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a53a28e70393e5ba853dbcfbdd610d339f97acb5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +498,502 @@\n    def test_inferred_dtype_fixture(self, any_skipna_inferred_dtype):\n        # see pandas/conftest.py\n        inferred_dtype, values = any_skipna_inferred_dtype\n"
  },
  {
    "id" : "6be5b8aa-96d1-4e34-9d30-7297731b4185",
    "prId" : 23696,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23696#pullrequestreview-174973866",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14f08db1-dd8e-482d-a3df-457b209e46c7",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Is the noqa still needed?",
        "createdAt" : "2018-11-14T16:55:02Z",
        "updatedAt" : "2018-11-14T16:55:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ff0fe707-2288-4077-9e2f-b89fb58fd43d",
        "parentId" : "14f08db1-dd8e-482d-a3df-457b209e46c7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes, this has to do with liniing things up.",
        "createdAt" : "2018-11-14T17:05:14Z",
        "updatedAt" : "2018-11-14T17:05:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "eddd73205b79bc580ac05e3148a9c4e54806eae6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +60,64 @@    (set(),                     'set', 'set-empty'),            # noqa: E241\n    (frozenset({'a', 1}),       'set', 'frozenset'),            # noqa: E241\n    (frozenset(),               'set', 'frozenset-empty'),      # noqa: E241\n    (iter([1, 2]),              True,  'iterator'),             # noqa: E241\n    (iter([]),                  True,  'iterator-empty'),       # noqa: E241"
  }
]