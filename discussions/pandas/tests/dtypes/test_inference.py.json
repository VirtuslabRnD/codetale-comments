[
  {
    "id" : "761ddeb6-81f5-4efc-9ac5-ca535a68d1f5",
    "prId" : 16026,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16026#pullrequestreview-33120263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e500267d-7339-44c3-9c67-eca504b6892c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "nice!",
        "createdAt" : "2017-04-18T00:23:51Z",
        "updatedAt" : "2017-04-18T00:23:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a786627060b13cbfccbae0b305c669cb396b312d",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +76,80 @@])\ndef test_is_nested_list_like_passes(inner, outer):\n    result = outer([inner for _ in range(5)])\n    assert inference.is_list_like(result)\n"
  },
  {
    "id" : "ee0f929f-e04f-4e09-923f-1ba022ceb287",
    "prId" : 16426,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16426#pullrequestreview-39564460",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83cde60c-1f55-4cdf-a1b1-ad63b5ed9b24",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Sorry, could you add a test with a mix of Decimal and non-decimal (like floats) and make sure that the return is `mixed`? Or search through and see if we have a test that already covers this. Other than that, this looks great.",
        "createdAt" : "2017-05-22T19:24:15Z",
        "updatedAt" : "2017-05-22T22:27:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f158cb23cbfc51b35f9109a65e2929721f1e9a2",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +469,473 @@        result = lib.infer_dtype(arr)\n        assert result == 'decimal'\n\n        arr = np.array([1.0, 2.0, Decimal(3)])\n        result = lib.infer_dtype(arr)"
  },
  {
    "id" : "d52dda36-6e59-4bdb-a2b4-a825c819dab1",
    "prId" : 17823,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17823#pullrequestreview-68040757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "731a9041-42eb-404f-ba88-2dfbb2770e91",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should we do this as a parameterize instead of fixture? (I don't know whether are some 'rules' where it is better to use one or the other, but in this case it really seems to be a parameterizing of the test, so I would find it easier to read the code if it uses paramatrize)",
        "createdAt" : "2017-10-09T09:12:07Z",
        "updatedAt" : "2017-10-09T16:49:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1009cfb9-80b2-40b7-b641-c26bcd2c122c",
        "parentId" : "731a9041-42eb-404f-ba88-2dfbb2770e91",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I use fixture whenever I find myself using the same parametrization multiple times.  As you can see below, I use it three times.",
        "createdAt" : "2017-10-09T16:29:45Z",
        "updatedAt" : "2017-10-09T16:49:26Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "93e52e9e57393d30a99bf3d0224445eb838d9c3e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +42,46 @@@pytest.fixture(params=[True, False], ids=lambda val: str(val))\ndef coerce(request):\n    return request.param\n\n"
  },
  {
    "id" : "be9cb735-4b8b-4706-865a-98376439e11b",
    "prId" : 18361,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18361#pullrequestreview-78414794",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4046fb98-aaa9-42fd-8aba-5daf5d160646",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add strings, ints, float, and a python object \r\n\r\ne.g. \r\n```\r\nclass Foo():\r\n    pass;\r\nFoo()\r\n```\r\nshould all return mixed (as this is a date infered)",
        "createdAt" : "2017-11-22T11:36:03Z",
        "updatedAt" : "2017-11-23T02:49:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6f9181428cbd682d0d34686b062cf48c4d0655a",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +693,697 @@\n    @pytest.mark.parametrize(\n        \"data\",\n        [\n            [\"2017-06-12\", \"2017-03-11\"],"
  },
  {
    "id" : "368fd53f-153d-432a-ae38-c1b6073bc2b3",
    "prId" : 23422,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23422#pullrequestreview-170311645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac88e3d0-df74-4466-9f41-2f0c9c4675e3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "also tests these ndarrays",
        "createdAt" : "2018-10-31T12:14:55Z",
        "updatedAt" : "2018-11-03T15:59:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "45423934-deab-44b0-91a8-3bb30a6be097",
        "parentId" : "ac88e3d0-df74-4466-9f41-2f0c9c4675e3",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "hope I understood this correctly. Parametrizing over `box` in `[pd.Series, np.array]`. ",
        "createdAt" : "2018-10-31T16:14:04Z",
        "updatedAt" : "2018-11-03T15:59:59Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "19cf2dd8e66f33de7b2b49d9a1d4d67f4d649a04",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +605,609 @@        arr = box([missing, missing], dtype=dtype)\n\n        result = lib.infer_dtype(arr, skipna=skipna)\n        assert result == expected\n"
  },
  {
    "id" : "cb403612-e84a-4cdc-9c00-56715dfd003f",
    "prId" : 23582,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23582#pullrequestreview-176162453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2980830-56fd-4a0f-b87a-4ebed13ecbea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "its nice that you added this, but you didn't remove any code. if you are not going to do that , then not much point of putting the fixture in conftest.py in the first place. ",
        "createdAt" : "2018-11-18T18:20:19Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a044ea45-1dd1-4a1c-9bfc-d0f136315b7c",
        "parentId" : "b2980830-56fd-4a0f-b87a-4ebed13ecbea",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "@jreback \r\nThis is coming out of your review above:\r\n> > I'm asking if you want me to move this particular fixture to `pandas/conftest.py` and then test it within the dtype tests (because this is effectively a dtype thing).\r\n\r\n> Yes\r\n\r\nAnd I don't get how adding this fixture is tied to code removal? I'm testing the `.str`-accessor on all the inferred dtypes to make sure it raises correctly, that's what I mainly need this fixture for.\r\n\r\nThat I'm testing the validity of the fixture in `test_inference.py` is for consistency, because it belongs there thematically (but could otherwise test that directly in the fixture constructor).",
        "createdAt" : "2018-11-19T06:52:30Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "72ecb3a3-22f6-42f4-b47a-a60a534b2a2c",
        "parentId" : "b2980830-56fd-4a0f-b87a-4ebed13ecbea",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "@jreback \r\nThis fixture would be a perfect candidate for splitting off a PR, but then, I'm afraid you're gonna say it doesn't do anything interesting (yet).\r\n\r\nDo you want me to:\r\n* split it up, and have the fixture being unusued until this PR is merged,\r\n* or do want me to keep things logically together (i.e. in this PR)?",
        "createdAt" : "2018-11-19T06:58:35Z",
        "updatedAt" : "2018-11-26T08:11:14Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a53a28e70393e5ba853dbcfbdd610d339f97acb5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +498,502 @@\n    def test_inferred_dtype_fixture(self, any_skipna_inferred_dtype):\n        # see pandas/conftest.py\n        inferred_dtype, values = any_skipna_inferred_dtype\n"
  },
  {
    "id" : "6be5b8aa-96d1-4e34-9d30-7297731b4185",
    "prId" : 23696,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23696#pullrequestreview-174973866",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14f08db1-dd8e-482d-a3df-457b209e46c7",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Is the noqa still needed?",
        "createdAt" : "2018-11-14T16:55:02Z",
        "updatedAt" : "2018-11-14T16:55:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ff0fe707-2288-4077-9e2f-b89fb58fd43d",
        "parentId" : "14f08db1-dd8e-482d-a3df-457b209e46c7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes, this has to do with liniing things up.",
        "createdAt" : "2018-11-14T17:05:14Z",
        "updatedAt" : "2018-11-14T17:05:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "eddd73205b79bc580ac05e3148a9c4e54806eae6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +60,64 @@    (set(),                     'set', 'set-empty'),            # noqa: E241\n    (frozenset({'a', 1}),       'set', 'frozenset'),            # noqa: E241\n    (frozenset(),               'set', 'frozenset-empty'),      # noqa: E241\n    (iter([1, 2]),              True,  'iterator'),             # noqa: E241\n    (iter([]),                  True,  'iterator-empty'),       # noqa: E241"
  },
  {
    "id" : "bbf2999a-ce65-45c8-8a80-7ca826609271",
    "prId" : 27392,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27392#pullrequestreview-267546672",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0c721fa-d25c-4a85-a8de-012aceae7211",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Can we parameterize `arr` as well here?",
        "createdAt" : "2019-07-28T06:18:27Z",
        "updatedAt" : "2019-07-30T01:06:52Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "335fe300-8fd1-4af5-9518-daf1c0436ef3",
        "parentId" : "f0c721fa-d25c-4a85-a8de-012aceae7211",
        "authorId" : "f7f26e80-fbf6-4c86-9239-b1f32f9f4826",
        "body" : "Parameterization done",
        "createdAt" : "2019-07-29T02:37:26Z",
        "updatedAt" : "2019-07-30T01:06:52Z",
        "lastEditedBy" : "f7f26e80-fbf6-4c86-9239-b1f32f9f4826",
        "tags" : [
        ]
      }
    ],
    "commit" : "fad37c8d931f0992f76c89694018032388deae25",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +591,595 @@        result = lib.infer_dtype(arr, skipna=skipna)\n        expected = \"integer\" if skipna else \"integer-na\"\n        assert result == expected\n\n    def test_deprecation(self):"
  },
  {
    "id" : "a8d46610-66d8-40a3-80e7-f7059c1a53de",
    "prId" : 27392,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27392#pullrequestreview-268118251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59740b40-1337-46db-9624-ac613cbabed2",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Don't forget to drop the `expected` fixture from your parameterization setup!\r\n\r\n(look at your test function signature and tuples)",
        "createdAt" : "2019-07-29T10:32:30Z",
        "updatedAt" : "2019-07-30T01:06:52Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "e364df24-bc0f-424b-a6b9-07e9875968e8",
        "parentId" : "59740b40-1337-46db-9624-ac613cbabed2",
        "authorId" : "f7f26e80-fbf6-4c86-9239-b1f32f9f4826",
        "body" : "Oh, right, sorry, sure",
        "createdAt" : "2019-07-30T01:35:23Z",
        "updatedAt" : "2019-07-30T01:35:24Z",
        "lastEditedBy" : "f7f26e80-fbf6-4c86-9239-b1f32f9f4826",
        "tags" : [
        ]
      }
    ],
    "commit" : "fad37c8d931f0992f76c89694018032388deae25",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +581,585 @@        \"arr, skipna\",\n        [\n            (np.array([1, 2, np.nan, np.nan, 3], dtype=\"O\"), False),\n            (np.array([1, 2, np.nan, np.nan, 3], dtype=\"O\"), True),\n            (np.array([1, 2, 3, np.int64(4), np.int32(5), np.nan], dtype=\"O\"), False),"
  },
  {
    "id" : "280f59c4-8bf4-4855-b9f3-14db9ee56858",
    "prId" : 29114,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29114#pullrequestreview-304749703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66133f22-4816-4f32-8312-f0271448f1fe",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Out of curiosity is there any issue you saw that suggested doing this? I don't think its evident why this would need to exist without knowing the context of this PR.\r\n\r\nIf it is an issue with mypy or typeshed would sometimes prefer to wait for a fix upstream; generally not in a rush with these",
        "createdAt" : "2019-10-21T03:41:19Z",
        "updatedAt" : "2019-10-21T03:41:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "c013a50f-a2b1-4c43-9401-b477bb85109a",
        "parentId" : "66133f22-4816-4f32-8312-f0271448f1fe",
        "authorId" : "a187c357-eff4-4cea-a4b5-cf50f1cedf7d",
        "body" : "mypy does not infer that the `collections.namedtuple()` call returns a class of user-defined type. It, for some reason, assumes that it returns a tuple. `tuple()` expects an argument of Iterable[Any], which is why we see the error `pandas\\tests\\dtypes\\test_inference.py:291: error: Argument 1 to \"tuple\" has incompatible type \"int\"; expected \"Iterable[Any]\"`.\r\n\r\nmypy also does not seem to infer that `list('abc')` is a literal of type List[str]. The error doesn't show up if the above one isn't corrected, but if you change `['a', 'b', 'c']` to `list('abc')` in the committed code, then you get the error `pandas/tests/dtypes/test_inference.py:291: error: List or tuple literal expected as the second argument to namedtuple()`. mypy does infer that `['a', 'b', 'c']` is of type List[str].\r\n\r\nIMO these do seem to be limitations in mypy.\r\n",
        "createdAt" : "2019-10-21T17:48:19Z",
        "updatedAt" : "2019-10-21T17:49:43Z",
        "lastEditedBy" : "a187c357-eff4-4cea-a4b5-cf50f1cedf7d",
        "tags" : [
        ]
      },
      {
        "id" : "f9cf10f2-2489-4ec6-99eb-ad46ba418a4a",
        "parentId" : "66133f22-4816-4f32-8312-f0271448f1fe",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "OK thanks for confirming. It would be good for future edits in this project and the entire python eco-system as a whole if those were raised as issues with MyPy, if not already\r\n\r\nNot saying this was a problem merging, but especially for internal-only annotations like this there is no rush. If something like that is raised with MyPy and looks like it would be available in a few releases would rather wait than making code edits here",
        "createdAt" : "2019-10-21T17:52:06Z",
        "updatedAt" : "2019-10-21T17:52:07Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3b8aee55-a2f7-49e2-bf70-5c550ad0b5dc",
        "parentId" : "66133f22-4816-4f32-8312-f0271448f1fe",
        "authorId" : "a187c357-eff4-4cea-a4b5-cf50f1cedf7d",
        "body" : "Opened two issues with [typeshed](https://github.com/python/typeshed) -\r\n1. `namedtuple()` inferred as type tuple: https://github.com/python/typeshed/issues/3394\r\n2. `list('abc')` not inferred as type List[str]: https://github.com/python/typeshed/issues/3395",
        "createdAt" : "2019-10-21T18:08:16Z",
        "updatedAt" : "2019-10-21T18:08:17Z",
        "lastEditedBy" : "a187c357-eff4-4cea-a4b5-cf50f1cedf7d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2786b1b8513c01d3eafcc0424ac6ff2d33edd2ed",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +289,293 @@\n\ntest_tuple = collections.namedtuple(\"Test\", [\"a\", \"b\", \"c\"])\n\n"
  },
  {
    "id" : "0617cb0c-5f5c-421c-91c8-c20adc361707",
    "prId" : 29876,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29876#pullrequestreview-323423286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b568d4eb-34e7-40a0-86b2-84ab35ad1052",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I would rename the test to call it something like `test_default`.",
        "createdAt" : "2019-11-27T04:27:40Z",
        "updatedAt" : "2019-11-27T21:37:33Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "f44e3ad42cb81c8978860c10d42d6280426593c8",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +635,639 @@\n        result = lib.infer_dtype(arr)\n        assert result == \"integer\"\n\n    def test_bools(self):"
  },
  {
    "id" : "c533493f-734c-4607-bec8-06d83a3daeb3",
    "prId" : 30473,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30473#pullrequestreview-336389310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddba5da0-3b95-493c-bed3-7c9ddca342d5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would be nice to compare if you can",
        "createdAt" : "2019-12-25T23:47:28Z",
        "updatedAt" : "2019-12-26T00:10:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9508b8d7dd98df6bafd930e1a80582043381764b",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1131,1135 @@        r = record(5, 6)\n        values = [r]\n        lib.to_object_array_tuples(values)\n\n    def test_object(self):"
  }
]