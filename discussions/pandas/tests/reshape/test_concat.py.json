[
  {
    "id" : "9c53fe46-bdc0-4492-8ee5-4419b53814f6",
    "prId" : 19021,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19021#pullrequestreview-112220298",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4f7f07b-578f-4ef1-badc-9a712f9ec837",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can just use 2 parameterize here, one for df_columns and one for series_index; you don't need combinations, pytest already does this.",
        "createdAt" : "2018-02-22T02:14:08Z",
        "updatedAt" : "2018-04-17T17:28:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "79634899-0c75-4f57-9049-2354c31d669a",
        "parentId" : "f4f7f07b-578f-4ef1-badc-9a712f9ec837",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "I don't get this approach to work, AFAIKS, parametrize doesn't do this for you, and I've googled it without results. Can you give an example? ",
        "createdAt" : "2018-04-14T22:00:38Z",
        "updatedAt" : "2018-04-17T17:28:41Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "13537ae0513c0c96b25c11cb9aae2799db2c5d48",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +878,882 @@        assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\"df_columns, series_index\",\n                             combinations(indexes_can_append, r=2),\n                             ids=lambda x: x.__class__.__name__)"
  },
  {
    "id" : "86f3b41d-0bc3-4cc3-b852-a5b7f3f14bb6",
    "prId" : 19021,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19021#pullrequestreview-666216748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3efcfdaf-2ef5-4d68-8604-104d1070306a",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@topper-123 can you help me understand why raising is the correct thing to do here?  i have a branch that fixes a Series construction bug:\r\n\r\n```\r\n    def test_constructor_dict_multiindex_reindex_flat(self):\r\n        # construction involves reindexing with a MultiIndex corner case\r\n        data = {('i', 'i'): 0, ('i', 'j'): 1, ('j', 'i'): 2, \"j\": np.nan}\r\n        expected = Series(data)\r\n\r\n        result = Series(expected[:-1].to_dict(), index=expected.index)\r\n        tm.assert_series_equal(result, expected)\r\n```\r\n\r\nbut the fix for that (in MultiIndex.reindex) causes this test to fail",
        "createdAt" : "2021-05-22T23:20:06Z",
        "updatedAt" : "2021-05-22T23:20:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "13537ae0513c0c96b25c11cb9aae2799db2c5d48",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +907,911 @@        # GH18359\n        # Dataframe.append will raise if IntervalIndex/MultiIndex appends\n        # or is appended to a different index type\n        #\n        # See also test 'test_append_different_columns_types' above for"
  },
  {
    "id" : "1bbcf772-d45f-4e20-bd6b-5064e9a22f5d",
    "prId" : 20613,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20613#pullrequestreview-116282054",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3b8fd09-8b0d-4219-99b3-1379ffbcda89",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not that I don't mind more tests, but are any of these duplicates of existing ones?",
        "createdAt" : "2018-04-29T21:14:00Z",
        "updatedAt" : "2018-05-01T00:20:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "865919aa-5863-435d-8f6d-77f223469f19",
        "parentId" : "e3b8fd09-8b0d-4219-99b3-1379ffbcda89",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah, probably. I'll try to de-duplicate a bit.",
        "createdAt" : "2018-04-30T13:15:07Z",
        "updatedAt" : "2018-05-01T00:20:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e1b0241358c10893939d135e91ab16cfa48cadd",
    "line" : 396,
    "diffHunk" : "@@ -1,1 +2387,2391 @@                            columns=['a', 'b', 'c'])\n    tm.assert_frame_equal(result, expected)\n\n    result = pd.concat([df, df[['c', 'b']]], join='inner', sort=True,\n                       ignore_index=True)"
  },
  {
    "id" : "b71809a9-6247-4606-9ce3-99151e59add2",
    "prId" : 22318,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22318#pullrequestreview-148462777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cb17a2d-e126-466b-ab26-691ab7eaa52a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "issue number\r\n\r\nrename test to test_concat_join_axes_deprecated",
        "createdAt" : "2018-08-22T12:48:21Z",
        "updatedAt" : "2019-07-03T02:21:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc9c79b03dc9897a436a1cff8cbc26e4d10f2f59",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +725,729 @@    def test_concat_join_axes_deprecated(self, axis):\n        # GH21951\n        one = pd.DataFrame([[0., 1.], [2., 3.]], columns=list('ab'))\n        two = pd.DataFrame([[10., 11.], [12., 13.]], index=[1, 2],\n                           columns=list('bc'))"
  },
  {
    "id" : "aedb5928-2eb5-4689-8a65-6bc9f6e264d8",
    "prId" : 23499,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23499#pullrequestreview-171855055",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8380da6-1397-4189-840a-d46279a8bc06",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls make a new test name",
        "createdAt" : "2018-11-06T03:16:24Z",
        "updatedAt" : "2018-11-06T03:39:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "daa61392-ed79-45c6-ac10-2f3a874f40b9",
        "parentId" : "b8380da6-1397-4189-840a-d46279a8bc06",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "done",
        "createdAt" : "2018-11-06T03:41:08Z",
        "updatedAt" : "2018-11-06T03:41:08Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e624e899dc53ed24aed6e0599018511bb160f60",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1620,1624 @@\n    def test_concat_series_axis1_names_applied(self):\n        # ensure names argument is not ignored on axis=1, #23490\n        s = Series([1, 2, 3])\n        s2 = Series([4, 5, 6])"
  },
  {
    "id" : "f2bdfc49-72cc-4038-8784-fa5d626b5a94",
    "prId" : 23538,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23538#pullrequestreview-173686138",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "917c1fc3-8968-42c1-b62b-2e0980faf875",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, I think this is a significant change, can you explain?",
        "createdAt" : "2018-11-11T16:11:09Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ae10caf7-e98a-43a0-af79-2f217240e5f8",
        "parentId" : "917c1fc3-8968-42c1-b62b-2e0980faf875",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "s1.index -> RangeIndex(start=0, stop=3, step=1)\r\ns2.index -> Index([], dtype='object')\r\n\r\nthe implicit union called in concat is casting to dtype('O') since these index types are incompatible and empty indexes are no longer ignored (at least before indexes are cast to object)",
        "createdAt" : "2018-11-12T01:08:06Z",
        "updatedAt" : "2019-05-21T00:53:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      }
    ],
    "commit" : "b840f49f2f520b4f5676f50029365cdf89bc2209",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +2031,2035 @@        s2 = pd.Series(name='y')\n        res = pd.concat([s1, s2], axis=1)\n        exp = pd.DataFrame({'x': [1, 2, 3], 'y': [np.nan, np.nan, np.nan]},\n                           index=pd.Index([0, 1, 2], dtype='O'))\n        tm.assert_frame_equal(res, exp)"
  },
  {
    "id" : "fbc741cf-d2ec-4802-8e61-df493a9a833f",
    "prId" : 23685,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23685#pullrequestreview-185224731",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc79fbd4-d573-4b40-bd94-d703f6c117c9",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@mroeschke what were the expected dtypes of result and expected here?\r\n\r\nOn master, everything is object, which may not have been intended.\r\n\r\nOn #24024, expected has `datetime64[ns, tzutc()]` dtype for the `date` column.",
        "createdAt" : "2018-12-13T13:51:51Z",
        "updatedAt" : "2018-12-13T13:51:51Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "139b119f-fe50-4233-8f70-9d2a240608e1",
        "parentId" : "bc79fbd4-d573-4b40-bd94-d703f6c117c9",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "@TomAugspurger `datetime64[ns, tzutc()]` would be the correct dtype. I may have cast to object due to an append bug that existed prior. Feel free to change this test in #24024",
        "createdAt" : "2018-12-14T18:12:10Z",
        "updatedAt" : "2018-12-14T18:12:11Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d563aa1a5e6c644255bf3832f109ed7350b04c2",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1024,1028 @@            object\n        )\n        assert_frame_equal(result, expected)\n\n"
  }
]