[
  {
    "id" : "ffdc2f0a-4550-4646-83af-5bfc41a214b6",
    "prId" : 16489,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16489#pullrequestreview-40171640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9679f20-3ec1-45d1-bca7-fa7137586898",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "blank line here",
        "createdAt" : "2017-05-24T22:57:40Z",
        "updatedAt" : "2017-05-25T19:52:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5756ef70cfbec247a9f6dc13d972a0b10aa1e5f",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1088,1092 @@        all_cols = result['TOTAL', '']\n        exp_cols = df.groupby(['a']).size().astype('i8')\n        # to keep index.name\n        exp_margin = Series([len(df)], index=Index(['TOTAL'], name='a'))\n        exp_cols = exp_cols.append(exp_margin)"
  },
  {
    "id" : "036e2687-69e8-4044-bed8-3690e42cd035",
    "prId" : 17842,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17842#pullrequestreview-68447193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc98e88d-352c-4efc-b7b5-014a8d884c60",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I wanted to flag this change in the tests. AFAICT, this is actually the desired behavior? Looking for issues about this now.",
        "createdAt" : "2017-10-10T22:37:31Z",
        "updatedAt" : "2017-10-11T00:05:31Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c78053715e977851ab2abacb0494735903f770ba",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +117,121 @@        result_false = df.pivot_table(index='B', columns='A', values='C',\n                                      dropna=False)\n        expected_columns = (\n            Series(['a', 'b', 'c', 'd'], name='A').astype('category')\n        )"
  },
  {
    "id" : "f325ceaa-1c65-42a1-9a85-ccf6f49ddda9",
    "prId" : 17842,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17842#pullrequestreview-68461011",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f72ac8e2-9f3e-4e41-8424-73e5525e97f3",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "how is this change related?",
        "createdAt" : "2017-10-10T22:49:44Z",
        "updatedAt" : "2017-10-11T00:05:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a0028db4-3e66-450f-9f50-9b0c653eff7c",
        "parentId" : "f72ac8e2-9f3e-4e41-8424-73e5525e97f3",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Not sure :) The fact that it's only not a CategoricalIndex when in the columns and dropna=True seems like a bug on master.\r\n\r\n```python\r\n# This is on master\r\nIn [7]: df.pivot_table(index=\"B\", columns=\"A\", values=\"C\", dropna=False).columns\r\nOut[7]: Index(['a', 'b', 'c', 'd'], dtype='object', name='A')\r\n\r\nIn [8]: df.pivot_table(index=\"A\", columns=\"B\", values=\"C\", dropna=False).index\r\nOut[8]: CategoricalIndex(['a', 'b', 'c', 'd'], categories=['a', 'b', 'c', 'd'], ordered=False, name='A', dtype='category')\r\n```\r\n\r\nI've added a whatsnew.",
        "createdAt" : "2017-10-11T00:02:50Z",
        "updatedAt" : "2017-10-11T00:05:31Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c78053715e977851ab2abacb0494735903f770ba",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +119,123 @@        expected_columns = (\n            Series(['a', 'b', 'c', 'd'], name='A').astype('category')\n        )\n        expected_false = DataFrame([[0.0, 3.0, 6.0, np.NaN],\n                                    [1.0, 4.0, 7.0, np.NaN],"
  },
  {
    "id" : "7009f073-facb-4900-ab9a-89755f613648",
    "prId" : 18636,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18636#pullrequestreview-86356801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57c44e20-13f9-4df7-a635-540459601e7b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a test with a MultiIndex and pass values as a tuple",
        "createdAt" : "2017-12-18T14:37:47Z",
        "updatedAt" : "2018-03-20T15:31:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "45e3ce4b-8fb7-4764-9ca2-11f94128fa85",
        "parentId" : "57c44e20-13f9-4df7-a635-540459601e7b",
        "authorId" : "aa3f2cf3-675f-4594-90ca-5727e0c17262",
        "body" : "Are you looking for something like the following? (please correct me if I am wrong)\r\n```\r\n    bar          baz       \r\n  first second first second\r\n0   one      A     1      x\r\n1   one      B     2      y\r\n2   one      C     3      z\r\n3   two      A     4      q\r\n4   two      B     5      w\r\n5   two      C     6      t \r\n```\r\n\r\nthen pivot it:\r\n``` \r\ndf.pivot(index=('bar', 'first'), columns=('bar', 'second'), values=('baz', 'first'))\r\n ```\r\n\r\nso the output would be:\r\n```\r\n     A   B   C\r\none  1   2   3\r\ntwo  4   5   6\r\n```\r\n\r\n",
        "createdAt" : "2017-12-19T06:06:06Z",
        "updatedAt" : "2018-03-20T15:31:42Z",
        "lastEditedBy" : "aa3f2cf3-675f-4594-90ca-5727e0c17262",
        "tags" : [
        ]
      },
      {
        "id" : "8074de3c-79d5-43b3-a5f6-a3223d9e24e6",
        "parentId" : "57c44e20-13f9-4df7-a635-540459601e7b",
        "authorId" : "aa3f2cf3-675f-4594-90ca-5727e0c17262",
        "body" : "ping @jreback",
        "createdAt" : "2018-01-02T08:13:05Z",
        "updatedAt" : "2018-03-20T15:31:42Z",
        "lastEditedBy" : "aa3f2cf3-675f-4594-90ca-5727e0c17262",
        "tags" : [
        ]
      },
      {
        "id" : "8ecda9b6-df24-4a34-96e8-5b93c91d9eff",
        "parentId" : "57c44e20-13f9-4df7-a635-540459601e7b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yep",
        "createdAt" : "2018-01-03T12:27:04Z",
        "updatedAt" : "2018-03-20T15:31:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e29374164ff7d3c6e4f974c64602699808cb8c7a",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +415,419 @@                ['C', np.nan, 3, np.nan]]\n        index = Index(data=['q', 't', 'w', 'x', 'y', 'z'], name='zoo')\n        columns = MultiIndex(levels=[['bar', 'baz'], ['one', 'two']],\n                             labels=[[0, 0, 1, 1], [0, 1, 0, 1]],\n                             names=[None, 'foo'])"
  },
  {
    "id" : "1b97e448-15d4-4658-b9f3-818dece4100a",
    "prId" : 18636,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18636#pullrequestreview-86530112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15c28540-5098-434e-8694-3ed37c702adc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a test with values as a tuple (it should fail)",
        "createdAt" : "2018-01-04T00:32:18Z",
        "updatedAt" : "2018-03-20T15:31:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e29374164ff7d3c6e4f974c64602699808cb8c7a",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +406,410 @@                           'zoo': ['x', 'y', 'z', 'q', 'w', 't']})\n\n        result = df.pivot(index='zoo', columns='foo', values=values)\n\n        data = [[np.nan, 'A', np.nan, 4],"
  },
  {
    "id" : "fb24d242-9560-4179-b484-65ee7f999d99",
    "prId" : 18636,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18636#pullrequestreview-100773474",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71148149-534f-4fbf-b4c6-dd4be5ebd930",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Where are all the NaNs coming from? They don't seem to be there in the docstring example",
        "createdAt" : "2018-03-02T13:56:12Z",
        "updatedAt" : "2018-03-20T15:31:42Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "03dddccf-4c7c-4a45-b193-c9db381078cd",
        "parentId" : "71148149-534f-4fbf-b4c6-dd4be5ebd930",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, I see, because here 'zoo' is used for index and not 'foo'. \r\nCan you add a test for that as well?",
        "createdAt" : "2018-03-02T13:57:02Z",
        "updatedAt" : "2018-03-20T15:31:42Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e29374164ff7d3c6e4f974c64602699808cb8c7a",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +413,417 @@                ['A', np.nan, 1, np.nan],\n                ['B', np.nan, 2, np.nan],\n                ['C', np.nan, 3, np.nan]]\n        index = Index(data=['q', 't', 'w', 'x', 'y', 'z'], name='zoo')\n        columns = MultiIndex(levels=[['bar', 'baz'], ['one', 'two']],"
  },
  {
    "id" : "514e606b-f6b4-4c1b-814b-750f31d072ee",
    "prId" : 18810,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18810#pullrequestreview-84308140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45523006-1b04-4d38-a2b5-82fed0fe7365",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Add that this test is for correctness.",
        "createdAt" : "2017-12-18T23:58:02Z",
        "updatedAt" : "2017-12-23T20:43:02Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "e24d2325d3f7b17af6a6e8e451d2acd31ee91dbd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1111,1115 @@\n    def test_pivot_string_as_func(self):\n        # GH #18713\n        # for correctness purposes\n        data = DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar',"
  },
  {
    "id" : "ee7795a6-e8fc-4ffb-872d-5f8d028e83ae",
    "prId" : 21252,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21252#pullrequestreview-126975054",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ea0bf3e-0a6c-448f-84d2-0b8b2c15d1c9",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Can you also add tests where `columns`/`values` and `index`/`columns`/`values` are specified for `pivot_table`?  It looks like these fail with a similar setup on 0.23.0.\r\n\r\nUsing the same definition of `df` as you used in your test, `columns`/`values` is incorrect:\r\n```python\r\nIn [3]: pd.__version__\r\nOut[3]: '0.23.0'\r\n\r\nIn [4]: df.pivot_table(columns='A', values='B')\r\nOut[4]:\r\nA  NaN  low\r\nB  2.0  3.0\r\n```\r\n\r\nSimilarly `index`/`columns`/`values` is incorrect:\r\n```python\r\nIn [5]: df['AA'] = df['A']\r\n\r\nIn [6]: df.pivot_table(index='A', columns='AA', values='B')\r\nOut[6]:\r\nAA   NaN  low\r\nA\r\nNaN  2.0  NaN\r\nlow  NaN  3.0\r\n```",
        "createdAt" : "2018-05-30T07:25:49Z",
        "updatedAt" : "2018-06-07T22:04:24Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "7078111d-06b0-4ca5-b6ad-4de049ccfebd",
        "parentId" : "4ea0bf3e-0a6c-448f-84d2-0b8b2c15d1c9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jschendel I tested that those are working correctly with this PR, but given I wanted to get this in for the release I already merged. But it's indeed true it would be good to add those as additional test case",
        "createdAt" : "2018-06-07T22:07:23Z",
        "updatedAt" : "2018-06-07T22:07:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "809bcb47-c6a2-40bc-9d34-1ed70b6e1e36",
        "parentId" : "4ea0bf3e-0a6c-448f-84d2-0b8b2c15d1c9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Opened https://github.com/pandas-dev/pandas/issues/21370 to keep track of this",
        "createdAt" : "2018-06-07T22:09:35Z",
        "updatedAt" : "2018-06-07T22:09:35Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "683fd9e578bdfcd03d222551429cbf0fdaa8d76f",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +161,165 @@\n        tm.assert_frame_equal(result, expected)\n\n    def test_pass_array(self):\n        result = self.data.pivot_table("
  },
  {
    "id" : "b97be1c0-61d5-46a8-8936-d566c9fc033e",
    "prId" : 22019,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22019#pullrequestreview-146169978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d4ea0bc-d3a1-4b66-ba3f-4a1c63d76757",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this changing is not great, the point of these ops is that the dtypes won't change on the pivot",
        "createdAt" : "2018-07-28T13:26:50Z",
        "updatedAt" : "2018-10-02T22:17:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ebb26f94-b059-43a6-a1c4-b7962204d63d",
        "parentId" : "5d4ea0bc-d3a1-4b66-ba3f-4a1c63d76757",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The change is happening because ATM the casting is done at the Block-level, while with the PR casting is done at the column-level.  `pd.crosstab(df.a, df.b, normalize='columns')` ATM returns\r\n\r\n```\r\nb    3    4\r\na          \r\n1  0.5  0.0\r\n2  0.5  1.0\r\n```\r\n\r\nand under the PR gives:\r\n\r\n```\r\nb    3    4\r\na          \r\n1  0.5  0\r\n2  0.5  1\r\n```\r\n\r\ni.e. the `4` column is `int64`.  Note that the original inputs `df.a` and `df.b` are both int64 to begin with.  I don't know `crosstab` well enough to comment on the ideal output, but it's hard to call this less-correct.",
        "createdAt" : "2018-07-28T16:08:37Z",
        "updatedAt" : "2018-10-02T22:17:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d899d21d-6e78-41e8-9841-51f7442534f0",
        "parentId" : "5d4ea0bc-d3a1-4b66-ba3f-4a1c63d76757",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think the correct way to answer this is ask \"was the upcast from int to float the result of coercing to a single dtype for multiple columns?\" If so, then we should preserve integer dtype where we can, i.e.\r\n\r\n\r\nFor an all-integer `crosstab`, we preserve integer dtype:\r\n\r\n```python\r\nIn [27]: a = pd.Series([1, 2])\r\n\r\nIn [28]: pd.crosstab(a, a)\r\nOut[28]:\r\ncol_0  1  2\r\nrow_0\r\n1      1  0\r\n2      0  1\r\n``` \r\n\r\nso this change seems good (and maybe worth explicitly testing rather than astyping the output, to ensure that we don't regress)?",
        "createdAt" : "2018-08-14T17:27:37Z",
        "updatedAt" : "2018-10-02T22:17:41Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "5832c2b81bc7999877f3fc83ddc29484fe6e5da6",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1568,1572 @@                              row_normal)\n        tm.assert_frame_equal(\n            pd.crosstab(df.a, df.b, normalize='columns').astype('f8'),\n            col_normal)\n        tm.assert_frame_equal(pd.crosstab(df.a, df.b, normalize=1),"
  }
]