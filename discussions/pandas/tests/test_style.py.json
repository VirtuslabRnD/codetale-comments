[
  {
    "id" : "5e0985ff-c256-4b8b-8bd6-76c3d7d8610c",
    "prId" : 10250,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "671cecdd-5b51-4d19-a0f9-f7d76bd6abd4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "skip of no jinja2 (but add a test that checks raising if you try df.style and don't have jinja2 installed)\n",
        "createdAt" : "2015-11-07T17:39:40Z",
        "updatedAt" : "2015-11-15T20:26:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2a80dbd7-ba54-4b06-abe1-2814fb341249",
        "parentId" : "671cecdd-5b51-4d19-a0f9-f7d76bd6abd4",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "test looks like\n\n``` python\ndef test_no_jinja():\n    # Separate so it isn't skipped by setUp\n    df = pd.DataFrame({'A': [1]})\n    if not has_jinja:\n        with tm.assertRaises(ImportError):\n            Styler(df)\n        with tm.assertRaises(ImportError):\n            df.style\n```\n\nso it always runs, but only really checks when there's not a jinja. Know of a better way to handle this. I did some brief searches and didn't find much for testing for ImportErrors, and I don't really want to muck with the import machinery and caches :)\n",
        "createdAt" : "2015-11-07T18:07:18Z",
        "updatedAt" : "2015-11-15T20:26:30Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "702d63ee9b72999d6d16cfa2bc9b2c5fa09cfa5c",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +31,35 @@        self.df = DataFrame({'A': [0, 1], 'B': np.random.randn(2)})\n        self.f = lambda x: x\n        self.g = lambda x: x\n\n        def h(x, foo='bar'):"
  }
]