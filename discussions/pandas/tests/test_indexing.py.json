[
  {
    "id" : "d9558a97-f020-42ea-acd3-807936e64db4",
    "prId" : 4850,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c18dc11-6a76-46d6-b47a-3c213b0910b4",
        "parentId" : null,
        "authorId" : "5362e572-ef9a-4b5d-8aa4-ca6f8ee7f944",
        "body" : "Fancy indexes that should also produce the same result:\n\n```\ns[[2.5]]\ns.ix[[2.5]]\ns.loc[[2.5]]\n```\n",
        "createdAt" : "2013-09-25T13:55:28Z",
        "updatedAt" : "2013-09-25T16:21:17Z",
        "lastEditedBy" : "5362e572-ef9a-4b5d-8aa4-ca6f8ee7f944",
        "tags" : [
        ]
      }
    ],
    "commit" : "60efe85bc2ce9578e8f5e0c88907c5cc6b6b7b31",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1538,1542 @@        result1 = s[1.0:3.0]\n        result2 = s.ix[1.0:3.0]\n        result3 = s.loc[1.0:3.0]\n        assert_series_equal(result1, result2)\n        assert_series_equal(result1, result3)"
  },
  {
    "id" : "e8483b32-891a-42dc-a1e8-e719d765cb15",
    "prId" : 4850,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f09e3db7-3164-43fa-95f4-65c695c3c700",
        "parentId" : null,
        "authorId" : "5362e572-ef9a-4b5d-8aa4-ca6f8ee7f944",
        "body" : "This might be a good place for a test like:\n\n```\nexpected = Series([3, 0], index=Float64Index([5.0, 0.0]))\nfor fancy_idx in [[5.0, 0.0], [5, 0], np.array([5.0, 0.0]), np.array([5, 0])]:\n    assert_series_equal(s[fancy_idx], expected)\n    assert_series_equal(s.loc[fancy_idx], expected)\n    assert_series_equal(s.ix[fancy_idx], expected)\n```\n",
        "createdAt" : "2013-09-25T14:00:21Z",
        "updatedAt" : "2013-09-25T16:21:17Z",
        "lastEditedBy" : "5362e572-ef9a-4b5d-8aa4-ca6f8ee7f944",
        "tags" : [
        ]
      }
    ],
    "commit" : "60efe85bc2ce9578e8f5e0c88907c5cc6b6b7b31",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +1556,1560 @@\n        self.assert_(s[5.0] == s[5])\n\n        # value not found (and no fallbacking at all)\n"
  },
  {
    "id" : "03611400-f890-4011-880a-3487fd4820e1",
    "prId" : 4850,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ff0ca61-c3fc-4030-9f7b-fa25a09b5675",
        "parentId" : null,
        "authorId" : "5362e572-ef9a-4b5d-8aa4-ca6f8ee7f944",
        "body" : "```\nresult5 = s.loc[[2.5, 5]]\n```\n",
        "createdAt" : "2013-09-25T14:02:45Z",
        "updatedAt" : "2013-09-25T16:21:17Z",
        "lastEditedBy" : "5362e572-ef9a-4b5d-8aa4-ca6f8ee7f944",
        "tags" : [
        ]
      }
    ],
    "commit" : "60efe85bc2ce9578e8f5e0c88907c5cc6b6b7b31",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +1576,1580 @@        result2 = s.loc[2.0:5.0]\n        result3 = s.loc[2.0:5]\n        result4 = s.loc[2.1:5]\n        assert_series_equal(result1, result2)\n        assert_series_equal(result1, result3)"
  },
  {
    "id" : "cfd9afa0-f693-41fe-a282-e6f773638e87",
    "prId" : 4850,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "632e6399-fe9b-443f-bf7f-fe688e8979b5",
        "parentId" : null,
        "authorId" : "5362e572-ef9a-4b5d-8aa4-ca6f8ee7f944",
        "body" : "result5 = s.ix[[2.5, 5]]\n",
        "createdAt" : "2013-09-25T14:03:06Z",
        "updatedAt" : "2013-09-25T16:21:17Z",
        "lastEditedBy" : "5362e572-ef9a-4b5d-8aa4-ca6f8ee7f944",
        "tags" : [
        ]
      }
    ],
    "commit" : "60efe85bc2ce9578e8f5e0c88907c5cc6b6b7b31",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +1593,1597 @@        result2 = s.ix[2.0:5.0]\n        result3 = s.ix[2.0:5]\n        result4 = s.ix[2.1:5]\n        assert_series_equal(result1, result2)\n        assert_series_equal(result1, result3)"
  },
  {
    "id" : "4b2d641c-8f15-48b7-a47a-f4552a828457",
    "prId" : 4850,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3103e747-10b6-4cd3-a1e9-304064a7988a",
        "parentId" : null,
        "authorId" : "5362e572-ef9a-4b5d-8aa4-ca6f8ee7f944",
        "body" : "....doh, and now I get this far into the diff I discover you did add some of these tests after all :-). Well, the above might be useful, I guess...\n\n(Except for the one that assumes fancy indexing with an unrecognized index gives a KeyError, I didn't realize that the rule in pandas is for those to return nan. Oops again.)\n",
        "createdAt" : "2013-09-25T14:05:38Z",
        "updatedAt" : "2013-09-25T16:21:17Z",
        "lastEditedBy" : "5362e572-ef9a-4b5d-8aa4-ca6f8ee7f944",
        "tags" : [
        ]
      }
    ],
    "commit" : "60efe85bc2ce9578e8f5e0c88907c5cc6b6b7b31",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +1627,1631 @@        assert_series_equal(result1, result2)\n        assert_series_equal(result1, result3)\n        assert_series_equal(result1, Series([0.0,np.nan,np.nan],index=[0,1,2]))\n\n        result1 = s.loc[[2.5, 5]]"
  },
  {
    "id" : "1511bd0b-943b-4037-aed5-3508b5b905e7",
    "prId" : 5390,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d53fdf6-db8b-447d-a573-089a577799a3",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "so don't you need to catch the warning here?\n",
        "createdAt" : "2013-11-02T02:39:22Z",
        "updatedAt" : "2013-11-06T00:06:07Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7aa7880fa0113f37c2a2956e8f305d23a3730cbd",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +1735,1739 @@        pd.set_option('chained_assignment','warn')\n        df = DataFrame({'A':['aaa','bbb','ccc'],'B':[1,2,3]})\n        df.loc[0]['A'] = 111\n\n    def test_floating_index_doc_example(self):"
  },
  {
    "id" : "807880a6-b85f-4363-b201-a78f0db9b690",
    "prId" : 5390,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35dc106e-91e4-4824-9b7c-5457adbbcc71",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "so the logic of this is that it's okay to do 'chained-ish' assignment on Series, but can't do fancy indexing on copies?\n",
        "createdAt" : "2013-11-02T02:40:21Z",
        "updatedAt" : "2013-11-06T00:06:07Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7aa7880fa0113f37c2a2956e8f305d23a3730cbd",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1692,1696 @@\n        df['A'][0] = -5\n        df['A'][1] = -6\n        assert_frame_equal(df, expected)\n"
  },
  {
    "id" : "5e464883-4076-4630-87ac-f88e0ca59c41",
    "prId" : 9741,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "776a3cfe-4fe0-41e1-bb2a-350191222d36",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Here, `B` in the expected should not be categorical? (the two ones below as well)\n",
        "createdAt" : "2015-04-09T15:13:17Z",
        "updatedAt" : "2015-04-20T11:19:36Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b9a67646-b4d7-4815-b33b-ee340df4dc48",
        "parentId" : "776a3cfe-4fe0-41e1-bb2a-350191222d36",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no, that's the point, you are indexing with a list, which by definition will give you back an `Index`. This was @shoyer point. The return type is ONLY dependent on the dtype of the input, NOT on the values themselves (or the existing index type, because then you would have to raise if its not compatible). \n\nYou get back the dtype of what you put in.\n",
        "createdAt" : "2015-04-09T15:22:13Z",
        "updatedAt" : "2015-04-20T11:19:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5cfb176b-bc5a-4457-a760-11bebd485bba",
        "parentId" : "776a3cfe-4fe0-41e1-bb2a-350191222d36",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that test was wrong (so @jorisvandenbossche you are right), odd that it worked....\n",
        "createdAt" : "2015-04-09T15:24:39Z",
        "updatedAt" : "2015-04-20T11:19:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ad515d5d-bd67-4c2c-bd44-5c198a895013",
        "parentId" : "776a3cfe-4fe0-41e1-bb2a-350191222d36",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I suppose it did not work .. :-) you had the same test above but correctly\n",
        "createdAt" : "2015-04-09T15:26:23Z",
        "updatedAt" : "2015-04-20T11:19:36Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecf8514cf14a12511368abf0e61373775cc65c6d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4542,4546 @@        expected = DataFrame({'A' : [0,1,5,2,3,np.nan],\n                              'B' : Series(list('aaabbe')) }).set_index('B')\n        assert_frame_equal(result, expected)\n\n        result = self.df2.reindex(['a','b'])"
  },
  {
    "id" : "5bd183e8-77ef-4db0-b51c-4c907a990b10",
    "prId" : 9741,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdafdc78-6cb7-46aa-851b-6e0f7bb00608",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "@jreback you are my hero :)\n",
        "createdAt" : "2015-04-11T02:32:34Z",
        "updatedAt" : "2015-04-20T11:19:36Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecf8514cf14a12511368abf0e61373775cc65c6d",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +4501,4505 @@        self.assertRaises(KeyError, lambda : self.df2.loc[['a','d']])\n\n    def test_reindexing(self):\n\n        # reindexing"
  },
  {
    "id" : "589d3563-477c-4ecb-bb30-3d7dcd2be54c",
    "prId" : 9983,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb5d7fc9-7f2b-431c-b5b5-1ec81cf4005c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need a comment with the issue number\n",
        "createdAt" : "2015-04-28T00:28:51Z",
        "updatedAt" : "2015-04-30T03:29:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d51affcaaffbf741c5ac929034577cdec4034b6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4446,4450 @@    def test_indexing_dtypes_on_empty(self):\n        # Check that .iloc and .ix return correct dtypes GH9983\n        df = DataFrame({'a':[1,2,3],'b':['b','b2','b3']})\n        df2 = df.ix[[],:]\n"
  },
  {
    "id" : "4ea8bc6f-884b-4cec-81b9-722182ead374",
    "prId" : 9983,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbd02bdf-b265-415a-a753-114a98e43157",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "note you can also contruct this like (you can change if you want)\n\n```\nexpected = DataFrame({'A' : Series(dtype='int64'), 'B' : Series(dtype='float64'), 'New' : Series(dtype='float64') })\n```\n",
        "createdAt" : "2015-04-28T00:31:27Z",
        "updatedAt" : "2015-04-30T03:29:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d51affcaaffbf741c5ac929034577cdec4034b6",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +3434,3438 @@        # GH5720, GH5744\n        # don't create rows when empty\n        expected = DataFrame(columns=['A','B','New'])\n        expected['A'] = expected['A'].astype('int64')\n        expected['B'] = expected['B'].astype('float64')"
  }
]