[
  {
    "id" : "bf943d98-6618-4145-85be-e00d3b6f1289",
    "prId" : 16244,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16244#pullrequestreview-39322546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3ea293e-6a1d-434f-ae75-3f02f6128f0f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "also test again using ``ss.rolling(2).cov()`` (will be the same for this case).\r\n\r\nI don't know if we have any tests for a non-regular date range, where ``freq=2`` and ``freq='2h'`` are actually different.",
        "createdAt" : "2017-05-19T01:08:44Z",
        "updatedAt" : "2017-05-30T21:39:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9d97db81-d83e-4ed0-9dca-f33a06d819f2",
        "parentId" : "c3ea293e-6a1d-434f-ae75-3f02f6128f0f",
        "authorId" : "b02eecb9-140a-485e-9af1-554c2013559a",
        "body" : "test added",
        "createdAt" : "2017-05-20T00:25:21Z",
        "updatedAt" : "2017-05-30T21:39:52Z",
        "lastEditedBy" : "b02eecb9-140a-485e-9af1-554c2013559a",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5582ec85b365d64d16b9a75a0f1e27dab3d5e0e",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +3841,3845 @@        ss = pd.Series(np.arange(len(idx)), index=idx)\n\n        result = ss.rolling('2h').cov()\n        expected = pd.Series([np.nan] + [0.5 for _ in range(len(idx) - 1)],\n                             index=idx)"
  },
  {
    "id" : "032f83fb-e4ed-4441-8c44-43ca8e3edff5",
    "prId" : 20584,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20584#pullrequestreview-108778404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ec21ad5-524b-4597-8850-ad698e10ea82",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if anyone is interested to see why this doesn't work, would be hepful, @WillAyd (you have some xp in this area)",
        "createdAt" : "2018-04-02T14:09:50Z",
        "updatedAt" : "2018-04-16T13:09:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "91808a77-14c0-4b84-8bc6-787407925ca4",
        "parentId" : "1ec21ad5-524b-4597-8850-ad698e10ea82",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "It looks like rows [20:39] of the series in use here contains NA values. `preserve_nan` is assuming that those will still be NA after the function application, but isn't it by design with expanding functions that the NA values do not get preserved?  Ex:\r\n\r\n```python\r\n>>> ser = pd.Series(range(5))\r\n>>> ser[2] = np.nan\r\n>>> ser.expanding().sum()\r\n0    0.0\r\n1    1.0\r\n2    1.0\r\n3    4.0\r\n4    8.0\r\ndtype: float64\r\n```\r\n\r\nSo I think this keyword is necessary by design of the expanding function",
        "createdAt" : "2018-04-02T15:46:58Z",
        "updatedAt" : "2018-04-16T13:09:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "7561262d-7a5b-4a11-909e-195e69c398e6",
        "parentId" : "1ec21ad5-524b-4597-8850-ad698e10ea82",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah exactly - so wondering if the current impl (eg master) is actually wrong",
        "createdAt" : "2018-04-02T22:10:51Z",
        "updatedAt" : "2018-04-16T13:09:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8329f722-e343-4ad8-adcb-091379c54331",
        "parentId" : "1ec21ad5-524b-4597-8850-ad698e10ea82",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I haven't looked at the implementation in detail but I'm assuming this ties back to the default argument of `min_periods=1` that the Expanding class uses - I think that would make it almost impossible for NA data to appear while expanding. \r\n\r\nI'd buy the argument that the default here should match the Rolling impl (i.e. 0) and Expanding should deal with \"expected\" NAs (i.e. forward looking values in the window that just haven't been reached yet) vs \"unexpected\" NA (data from a previous entry in the window) in  a more robust fashion. \r\n\r\nIt would be a breaking change; happy to open the ticket if you agree",
        "createdAt" : "2018-04-02T23:15:43Z",
        "updatedAt" : "2018-04-16T13:09:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "9ac24e49-e3be-444f-bee8-39e456660ab3",
        "parentId" : "1ec21ad5-524b-4597-8850-ad698e10ea82",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah this might be a bit of an unexplored corner\r\n\r\nyeah if i can show a simple example would be great to open an issue\r\n\r\nafter all expanding is just rolling with the window len of the len of the obj",
        "createdAt" : "2018-04-02T23:18:46Z",
        "updatedAt" : "2018-04-16T13:09:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "63b85e3f-ad75-4bfb-8ada-8a593a69cd47",
        "parentId" : "1ec21ad5-524b-4597-8850-ad698e10ea82",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Maybe it shouldn't be though? I.e. should the window size of expanding be `i for i in range(N)` instead of `N for i in range(N)`? The difference can be illustrated looking at the third element below (elements 4 and 5 are expected to differ from window size)\r\n\r\n```python\r\n>>> ser = pd.Series([0, np.nan, 2, 3, 4])\r\nIn [127]: ser.rolling(window=2, min_periods=2).sum()\r\nOut[127]: \r\n0    NaN\r\n1    NaN\r\n2    NaN  # Doesn't populate here; there aren't 2 non-NA entries at this point\r\n3    5.0\r\n4    7.0\r\ndtype: float64\r\n\r\nIn [128]: ser.rolling(window=len(ser), min_periods=2).sum()\r\nOut[128]: \r\n0    NaN\r\n1    NaN\r\n2    2.0  # Populates here, even though this is the first non-NA record and min_periods is 2\r\n3    5.0\r\n4    9.0\r\ndtype: float64\r\n```\r\n",
        "createdAt" : "2018-04-02T23:52:18Z",
        "updatedAt" : "2018-04-16T13:09:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab46058dc6b32d7da1533527f89e49dd043094f4",
    "line" : 928,
    "diffHunk" : "@@ -1,1 +2890,2894 @@            return result\n\n        # TODO(jreback), needed to add preserve_nan=False\n        # here to make this pass\n        self._check_expanding(expanding_mean, np.mean, preserve_nan=False)"
  },
  {
    "id" : "dc450c72-f1a7-4d11-95f6-922848f5c2a0",
    "prId" : 26910,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26910#pullrequestreview-251530001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5baf3741-064a-4a71-bf7d-1f2ceead3f2c",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you walk me through why this is expected for `closed='right'`? For some reason, this looks like `closed='left'` to me, but I'm probably missing something.",
        "createdAt" : "2019-06-17T21:27:32Z",
        "updatedAt" : "2019-06-21T07:14:17Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b0ddefaf-bd17-4b6d-9e5f-559e2711a37d",
        "parentId" : "5baf3741-064a-4a71-bf7d-1f2ceead3f2c",
        "authorId" : "fd6a3bb0-1e01-4fbd-9d3f-28cd7cd4505e",
        "body" : "Just wanted to enclose other options for closed argument. `left` and `neither` options are causing issues as you stated. Could be removed if unnecessary",
        "createdAt" : "2019-06-17T21:36:58Z",
        "updatedAt" : "2019-06-21T07:14:17Z",
        "lastEditedBy" : "fd6a3bb0-1e01-4fbd-9d3f-28cd7cd4505e",
        "tags" : [
        ]
      },
      {
        "id" : "c2be8bb2-fc96-4812-94d1-6bbb78e2dc40",
        "parentId" : "5baf3741-064a-4a71-bf7d-1f2ceead3f2c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you should the results of all 4 of these cases *in* the PR itself (you can update the top is good), just to get an easy visual on the results.",
        "createdAt" : "2019-06-19T00:16:04Z",
        "updatedAt" : "2019-06-21T07:14:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e5043361-f767-4b85-8bfb-3a5ab73ac6fb",
        "parentId" : "5baf3741-064a-4a71-bf7d-1f2ceead3f2c",
        "authorId" : "fd6a3bb0-1e01-4fbd-9d3f-28cd7cd4505e",
        "body" : "@TomAugspurger Sorry, I just realize I misread your comment. @jreback @TomAugspurger  I tried to explain all 4 cases at the top of PR. ",
        "createdAt" : "2019-06-19T07:57:49Z",
        "updatedAt" : "2019-06-21T07:14:17Z",
        "lastEditedBy" : "fd6a3bb0-1e01-4fbd-9d3f-28cd7cd4505e",
        "tags" : [
        ]
      }
    ],
    "commit" : "51e89c4b367c18fefe98a419c4c1f8bf7c70dc40",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +596,600 @@\n    @pytest.mark.parametrize(\"closed,expected\", [\n        ('right', [0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8]),\n        ('both', [0, 0.5, 1, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5]),\n        ('neither', [np.nan, 0, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5]),"
  },
  {
    "id" : "b8a5c72b-2cfb-4129-9145-ec36e96b6be0",
    "prId" : 27140,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27140#pullrequestreview-256580262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "526f087e-1c0b-4d19-b654-e3d394a65efb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok this is fine; can you do a followup to use this fixture as much as possible in this file?",
        "createdAt" : "2019-07-01T21:55:49Z",
        "updatedAt" : "2019-07-01T21:55:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "843ff6dc5cf02361e61735df6a2e2839af8692fd",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +49,53 @@\n\n@pytest.fixture(params=[\"sum\", \"mean\", \"median\", \"max\", \"min\",\n                        \"var\", \"std\", \"kurt\", \"skew\"])\ndef arithmetic_win_operators(request):"
  }
]