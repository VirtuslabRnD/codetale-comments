[
  {
    "id" : "fd0524f9-3e1e-4a29-847a-8d46ed56bd41",
    "prId" : 13876,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5c760a9-ed59-484f-abd9-74e87e28f45d",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Unrelated to the fix itself, but adding more tests to `duplicated` (this test revealed the bug). \n",
        "createdAt" : "2016-08-01T23:51:43Z",
        "updatedAt" : "2016-08-01T23:51:43Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "00244d0ea9d81016307a7a6b0d82de94dce34bcb",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +789,793 @@            # index\n            for idx in [pd.Index(case), pd.Index(case, dtype='category'),\n                        pd.Index(case, dtype=object)]:\n                res_first = idx.duplicated(keep='first')\n                tm.assert_numpy_array_equal(res_first, exp_first)"
  },
  {
    "id" : "2bc89dc3-b7c6-4f4f-95c2-2f0fc235d87c",
    "prId" : 15776,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15776#pullrequestreview-28273690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cf9cb58-c693-4905-be90-f25082b96839",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@gfyoung FYI it seems we have another skip on 32-bit in here as well, so not specific to uint64. I think there is a n issue somewhere. but pretty hard to debug.",
        "createdAt" : "2017-03-22T00:34:44Z",
        "updatedAt" : "2017-03-22T00:34:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "45a12744-5af3-4285-b834-9efbd474a23a",
        "parentId" : "0cf9cb58-c693-4905-be90-f25082b96839",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "This is indicative of a flakiness, but I'm not sure how to secure proper ordering in this case.  I would hate to skip just because we can't ordering right, but I don't see how at this point.",
        "createdAt" : "2017-03-22T00:36:39Z",
        "updatedAt" : "2017-03-22T00:37:12Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "88f0f0d13e7d3960da296b12f0138c9d6926b14f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +649,653 @@        result = algos.value_counts(arr)\n\n        # 32-bit linux has a different ordering\n        if not compat.is_platform_32bit():\n            tm.assert_series_equal(result, expected)"
  },
  {
    "id" : "a5b1c763-4f17-4bf9-9f03-f24e03ca826a",
    "prId" : 16543,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16543#pullrequestreview-41095725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19cd178b-b437-45b0-93c5-9e9d7235ff10",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "also add an example of this in ``pd.unique`` itself.",
        "createdAt" : "2017-05-30T22:49:36Z",
        "updatedAt" : "2017-05-31T21:55:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb7c18f56d4c175b4248f35045343126750ddb26",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +931,935 @@\n    @pytest.mark.parametrize('arr, unique', [\n        ([(0, 0), (0, 1), (1, 0), (1, 1), (0, 0), (0, 1), (1, 0), (1, 1)],\n         [(0, 0), (0, 1), (1, 0), (1, 1)]),\n        ([('b', 'c'), ('a', 'b'), ('a', 'b'), ('b', 'c')],"
  },
  {
    "id" : "0c069daa-5a30-4597-911f-5d5bba5ff46d",
    "prId" : 17108,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17108#pullrequestreview-53070396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6907c07-8019-472a-b906-739f8b30b631",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Put the issue number (in this case, the PR number) below this function definition (e.g. \"see #17108\")",
        "createdAt" : "2017-07-29T06:23:19Z",
        "updatedAt" : "2017-07-30T06:13:44Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "822a4dc514e940ca805bae655e67c8da3b86314a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +420,424 @@        (('foo',), np.array(['foo'], dtype=object))\n    ])\n    def test_tuple_with_strings(self, arg, expected):\n        # see GH 17108\n        result = pd.unique(arg)"
  },
  {
    "id" : "683919d4-73f6-4181-b9e5-1a143d09ab3a",
    "prId" : 22986,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22986#pullrequestreview-165612151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25da0854-a539-4550-a228-d2a0d14f53d7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i would rather you not test unrelated things directly here; these are pure unit tests\r\n\r\nit just makes the test confusing. add with the other duplicated tests if you must\r\nthough i think these are already well covered, but if not you can add",
        "createdAt" : "2018-10-14T17:25:39Z",
        "updatedAt" : "2018-10-18T06:24:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1cae02bf-6926-48ba-92c9-3f8d50ad44f7",
        "parentId" : "25da0854-a539-4550-a228-d2a0d14f53d7",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "This is not unrelated - it's the central functionality of `factorize`, and a bit more thorough than the few hand-made tests further up.\r\n\r\nThe code for `duplicated` is completely separate (in cython) and so this should have a separate test as well IMO",
        "createdAt" : "2018-10-14T19:21:31Z",
        "updatedAt" : "2018-10-18T06:24:19Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "8c129be8-8f0c-4b6a-8e5e-0096ba4cb93a",
        "parentId" : "25da0854-a539-4550-a228-d2a0d14f53d7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i know you really want to show that this works, but these tests need hard coded expectations. It is very hard for a reader to assert what you are doing, because you are computing the results here as well. I think its pretty easy to cook an example where you start with a duplicated array and just can assert the results directly. We do lots of these kinds of things already in the drop_duplicates testing.",
        "createdAt" : "2018-10-17T12:53:16Z",
        "updatedAt" : "2018-10-18T06:24:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d0e86b0f62a63902ff35bc6575d6f3c3e82b6a2",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +1384,1388 @@        na_mask = s_duplicated.isna().values\n\n        result_inverse, result_unique = htable().factorize(s_duplicated.values)\n\n        # drop_duplicates has own cython code (hash_table_func_helper.pxi)"
  },
  {
    "id" : "ec656d1e-3b8d-432a-a761-216e1fcc6bde",
    "prId" : 23592,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23592#pullrequestreview-173527057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77b51aaa-0cbd-45e4-99bb-be661bf329a6",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I don't get why we don't want to assert that those raise anymore",
        "createdAt" : "2018-11-09T10:46:02Z",
        "updatedAt" : "2018-11-10T18:23:37Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "82d8a3dd-409e-4d45-8778-7ae012b94b68",
        "parentId" : "77b51aaa-0cbd-45e4-99bb-be661bf329a6",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "* `pytest` has no native way of checking that exceptions are not raised.\r\n* This is also simpler.  These method calls should run without breaking.  Thus, if an `OverflowError` occurs, the test will fail, just as it would have before.",
        "createdAt" : "2018-11-09T18:08:11Z",
        "updatedAt" : "2018-11-10T18:23:37Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b7fb246cd51e4df917c579ebb41b25fc723f83e",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +1693,1697 @@    # the addition overflows. We don't check the result but just\n    # the fact that an OverflowError is not raised.\n    algos.checked_add_with_arr(np.array([m, m]), np.array([m, m]),\n                               arr_mask=np.array([True, True]))\n    algos.checked_add_with_arr(np.array([m, m]), np.array([m, m]),"
  },
  {
    "id" : "65094e0a-101c-4c75-90e9-f030715542be",
    "prId" : 25249,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25249#pullrequestreview-202097365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b1808d3-5461-4b3e-b073-5d223e21eb19",
        "parentId" : null,
        "authorId" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "body" : "The reason this is needed is that algo is a class member (which is subsequently called using `self.algo(...)`.\r\n\r\nUntil now group_var_float64 was a cython builtin function which, for some reason, was not bound to self when called, so it was basically treated as a staticmethod.\r\n\r\nWith this PR, group_var_float64 (and all the other functions moved from tempita to a fused types implementation) is a cython fused type function, which gets bound to self when called using `self.algo`, so self is passed as the first argument which shifts all the arguments and causes problems with the test.\r\n\r\nThe solve this, I wrapped group_var_float64 as a staticmethod in the test.",
        "createdAt" : "2019-02-09T20:21:33Z",
        "updatedAt" : "2019-02-11T18:51:42Z",
        "lastEditedBy" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "tags" : [
        ]
      },
      {
        "id" : "24671aa3-c2f4-4231-92a3-0625c8d4a150",
        "parentId" : "3b1808d3-5461-4b3e-b073-5d223e21eb19",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should prob just move these to regular test functions and parameterize as needed to avoid this; but that's for a future followup",
        "createdAt" : "2019-02-11T13:13:50Z",
        "updatedAt" : "2019-02-11T18:51:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cb991b7c6b778ab9036529b4b0b27450644fb51",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1223,1227 @@    __test__ = True\n\n    algo = staticmethod(libgroupby.group_var_float64)\n    dtype = np.float64\n    rtol = 1e-5"
  }
]