[
  {
    "id" : "4c64f09b-ddd0-4068-8456-033a6a0424d6",
    "prId" : 15952,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15952#pullrequestreview-31710580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ce66ccb-49ec-4814-bdbc-72b6d54687ed",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use pytest.raises",
        "createdAt" : "2017-04-08T20:59:46Z",
        "updatedAt" : "2017-04-08T21:22:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8023d3b9-86e7-42ba-98d5-93fc56eeb25a",
        "parentId" : "2ce66ccb-49ec-4814-bdbc-72b6d54687ed",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yep, done.",
        "createdAt" : "2017-04-08T21:20:52Z",
        "updatedAt" : "2017-04-08T21:22:39Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "82e11c1da7a848b36114dbdde7b2e94dac261abb",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +2256,2260 @@        sql.execute('INSERT INTO test VALUES(\"foo\", \"bar\", 1.234)', self.conn)\n        self.conn.close()\n\n        with pytest.raises(Exception):\n            tquery(\"select * from test\", con=self.conn)"
  },
  {
    "id" : "fd00e6ff-67e7-4c6d-ba8f-b51aa4d995e9",
    "prId" : 16528,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16528#pullrequestreview-40803324",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fde8b41e-a2c6-47c4-a66f-d703336a78bc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you would need to do\r\n\r\n```\r\npg8000 = pytest.importorskip('pg8000')  # noqa\r\n```\r\n\r\nyou need to explicitly install this though in the requirements-2.7.pip (and other ones if needed)\r\n\r\ncc @jorisvandenbossche ",
        "createdAt" : "2017-05-29T16:04:17Z",
        "updatedAt" : "2017-05-29T18:37:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "43ef9a14-236a-4ace-b7da-15af43892129",
        "parentId" : "fde8b41e-a2c6-47c4-a66f-d703336a78bc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@neirbowj ahh I see what you posted on the issue. ok then your fix is fine (just need the noqa), and put an explanation of what is going on here.",
        "createdAt" : "2017-05-29T16:24:57Z",
        "updatedAt" : "2017-05-29T18:37:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e22541b9e4ccf447be901a65260feae797b33a90",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +938,942 @@\n        # using driver that will not be installed on Travis to trigger error\n        # in sqlalchemy.create_engine -> test passing of this error to user\n        try:\n            # the rest of this test depends on pg8000's being absent"
  },
  {
    "id" : "09687a10-7ec1-4751-a61d-2d7d6c29d16a",
    "prId" : 19664,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19664#pullrequestreview-99011988",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4e61d1e-ef41-4b58-b6b4-2d41d774d969",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you explicity test which backends support this.",
        "createdAt" : "2018-02-18T18:00:41Z",
        "updatedAt" : "2018-03-07T21:54:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "99e5415d-0ba9-4b5f-bd85-9a610a7ad917",
        "parentId" : "e4e61d1e-ef41-4b58-b6b4-2d41d774d969",
        "authorId" : "3f100cd2-6aa7-459a-b558-3ff7894a5d79",
        "body" : "@jreback  I believe I've done this by adding a class variable to the below classes. Let me know if that addresses this concern",
        "createdAt" : "2018-02-23T18:46:02Z",
        "updatedAt" : "2018-03-07T21:54:32Z",
        "lastEditedBy" : "3f100cd2-6aa7-459a-b558-3ff7894a5d79",
        "tags" : [
        ]
      }
    ],
    "commit" : "f298de101762a97e2f3f856679e58f8b9c392942",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1666,1670 @@        tm.assert_frame_equal(df, expected)\n\n    def test_insert_multivalues(self):\n        # issues addressed\n        # https://github.com/pandas-dev/pandas/issues/14315"
  },
  {
    "id" : "d88fb3c0-c3b7-4c44-8e15-6dd04f5201ac",
    "prId" : 22515,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22515#pullrequestreview-153160415",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21231e71-0e8d-42d9-a3cf-e61757c23679",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm I realize this is not something you have introduced but we seem to be ambiguously using both the classic xunit-style setup and a fixture. I think we should just use one or the other. Probably easiest to just remove the fixture decorator for now",
        "createdAt" : "2018-08-29T04:35:27Z",
        "updatedAt" : "2018-09-06T20:10:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "83a873b0-be4d-48f8-81bc-3d78c8174064",
        "parentId" : "21231e71-0e8d-42d9-a3cf-e61757c23679",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "If we remove the fixture annotation this will cause the tests to fail in the current implementation. It seems like this is somewhat common to mix the old xunit style setup and fixtures. See @nicoddemus first comment on this issue. https://github.com/pytest-dev/pytest/issues/517",
        "createdAt" : "2018-08-30T00:05:27Z",
        "updatedAt" : "2018-09-06T20:10:21Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      },
      {
        "id" : "a54d7c16-2ac2-4acf-8d32-9744ae42bd66",
        "parentId" : "21231e71-0e8d-42d9-a3cf-e61757c23679",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "But definitely agree we should maybe look at getting rid of the xunit style set up eventually :)",
        "createdAt" : "2018-08-30T00:06:47Z",
        "updatedAt" : "2018-09-06T20:10:21Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      },
      {
        "id" : "fe61847b-b317-488a-8c05-562682759f7e",
        "parentId" : "21231e71-0e8d-42d9-a3cf-e61757c23679",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What failure did that cause? In the provided link AFAICT it is showcasing an easy transition from old style to new, which is what I'm suggesting here as well",
        "createdAt" : "2018-08-30T01:07:25Z",
        "updatedAt" : "2018-09-06T20:10:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4477f2f1-1f85-4835-bb5e-836f06c89bc1",
        "parentId" : "21231e71-0e8d-42d9-a3cf-e61757c23679",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "The xunit setup is applied before any fixtures if we remove the annotation. For example in the test: `TestSQLApi.test_read_sql_iris`. The function `self.load_test_data_and_sql()` will be invoked before the `load_iris_data` fixture ( when `@pytest.fixture(autouse=True)` is not present ). \r\n\r\nSince `self.load_test_data_and_sql()` requires self.conn to be set, this will error. \r\n\r\nHope that explains the issue clearly :)",
        "createdAt" : "2018-08-30T21:44:21Z",
        "updatedAt" : "2018-09-06T20:10:21Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      },
      {
        "id" : "1c5080d4-6777-463b-8aaa-d87548409e28",
        "parentId" : "21231e71-0e8d-42d9-a3cf-e61757c23679",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "hey a friendly ping: @WillAyd are you happy to review ?  Hope my explanation addressed the concerns here",
        "createdAt" : "2018-09-03T21:09:50Z",
        "updatedAt" : "2018-09-06T20:10:21Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      },
      {
        "id" : "e27907ad-2fc2-43bf-bf6c-39c1a445648b",
        "parentId" : "21231e71-0e8d-42d9-a3cf-e61757c23679",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm OK understood on the issues you are facing but just seems like this can be simplified instead of adding new methods. Is it not possible to set the connection here instead of having it as a separate method?",
        "createdAt" : "2018-09-03T21:14:35Z",
        "updatedAt" : "2018-09-06T20:10:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "06a8b698-31bd-4717-bbd1-cae235b3e3ee",
        "parentId" : "21231e71-0e8d-42d9-a3cf-e61757c23679",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Thanks for getting back to me appreciate it - My thinking behind having it as a separate method was that the `_TestSQLAlchemy` class already has a separate method `setup_connect`. I did the same in `TestSQLiteFallback` and `_TestSQLApi`  so that my fixture `load_iris_data`  used across all these test classes could call the same method to do the required connection set up.  \r\n\r\nPerhaps we need to consider a larger refactor of this file in order to make this set up just solely use fixtures, but with regards to getting rid of 100+ warnings in the 3.6 build mentioned #22338  this was the simplest and clearest change I could think of, let me know if you think otherwise, would be interested to see. Thanks as always for taking a look!\r\n\r\n",
        "createdAt" : "2018-09-03T23:28:25Z",
        "updatedAt" : "2018-09-06T20:10:21Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      },
      {
        "id" : "508eec66-815b-4c11-880e-ddd06a9baa24",
        "parentId" : "21231e71-0e8d-42d9-a3cf-e61757c23679",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Thanks for the explanation and your patience. I do see your point; could you open a follow up issue to refactor this module to use fixtures exclusively instead of the mix with inheritance? ",
        "createdAt" : "2018-09-04T23:09:56Z",
        "updatedAt" : "2018-09-06T20:10:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "116dc027-cf84-4ce5-834d-431348f9bb11",
        "parentId" : "21231e71-0e8d-42d9-a3cf-e61757c23679",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Sure i've raised here #22624. Mind adding the Tags, \"Testing\", \"IO SQL\" and perhaps \"Medium Difficulty\"",
        "createdAt" : "2018-09-06T23:39:29Z",
        "updatedAt" : "2018-09-06T23:39:29Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "7427924af150b9240a2689a3681a8a2824a1d14d",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +1167,1171 @@\n    @pytest.fixture(autouse=True)\n    def setup_method(self, load_iris_data):\n        self.load_test_data_and_sql()\n"
  },
  {
    "id" : "de6400f5-99e6-46c7-a3d4-419e11b39302",
    "prId" : 22515,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22515#pullrequestreview-150789540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bc30025-4b7a-4259-a3a4-9af5373809b6",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Any reason this is a dedicated method? Seems like a simple enough expression to have just included in the setup method alone",
        "createdAt" : "2018-08-29T04:36:11Z",
        "updatedAt" : "2018-09-06T20:10:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "30a26750-0ac7-4d75-a118-ee25dba36a46",
        "parentId" : "2bc30025-4b7a-4259-a3a4-9af5373809b6",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "`load_iris_data` fixture basically requires that self has a conn attribute set, see line 262. I basically wanted to separate out the connection setup for each test classes. Since `_TestSQLAlchemy` already did this I though it would be nice to keep it consistent",
        "createdAt" : "2018-08-29T23:16:27Z",
        "updatedAt" : "2018-09-06T20:10:21Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "7427924af150b9240a2689a3681a8a2824a1d14d",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +508,512 @@    mode = None\n\n    def setup_connect(self):\n        self.conn = self.connect()\n"
  },
  {
    "id" : "3278523f-a041-43cd-84d2-4a024c090df9",
    "prId" : 22515,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22515#pullrequestreview-155241111",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da47915d-e819-4781-8823-6a5a34502c98",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is there a technical reason the path needs to passed here as a param (instead of how it was before)? \r\nWe use `datapath` like this in many other places in the tests",
        "createdAt" : "2018-09-07T12:44:39Z",
        "updatedAt" : "2018-09-07T12:45:29Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "18205f49-74a8-4746-86b8-208dc4fd1619",
        "parentId" : "da47915d-e819-4781-8823-6a5a34502c98",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Hi @jorisvandenbossche yes there is, in all the other places we pass in `datapath` we don't call it directly as a function. Like this code originally did `datapath('io', 'data', 'iris.csv')`. Which is now deprecated, see this [pytest issue](https://github.com/pytest-dev/pytest/issues/3661),  with the suggested refactor. ",
        "createdAt" : "2018-09-07T13:51:13Z",
        "updatedAt" : "2018-09-07T13:51:13Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      },
      {
        "id" : "16788e21-4a9d-4b94-8547-ca085c4c5c20",
        "parentId" : "da47915d-e819-4781-8823-6a5a34502c98",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What do you mean with \"we don't call it directly as a function\" (the `datapath` fixture itself, or the function that it is passed to?).  Because the fixture `datapath` itself is called directly in many other places in the code base.",
        "createdAt" : "2018-09-07T14:10:25Z",
        "updatedAt" : "2018-09-07T14:10:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "13b99ffe-afee-4f77-a339-48dc1a5ee0a8",
        "parentId" : "da47915d-e819-4781-8823-6a5a34502c98",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@alimcmaster1 can you respond here?\r\n\r\nI'm in the middle of a PR fixing transitioning warnings to errors. Going to skip sql for now, but this will need to be merged first.",
        "createdAt" : "2018-09-13T17:29:39Z",
        "updatedAt" : "2018-09-13T17:29:40Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "0e0d85a8-1a09-463e-8040-43ccb96a2327",
        "parentId" : "da47915d-e819-4781-8823-6a5a34502c98",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "But, if I go from memory, is it because it's passed as a fixture to the caller of this method? The classes  `setup_method`, which then passes it through to `load_iris_data` as a function, not a fixture?",
        "createdAt" : "2018-09-13T17:31:37Z",
        "updatedAt" : "2018-09-13T17:31:37Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2070f949-c567-46c1-9e9d-a29494bc1e4a",
        "parentId" : "da47915d-e819-4781-8823-6a5a34502c98",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Firstly apologies for the delayed response I havn't had internet access for the past few days. Yes @jorisvandenbossche agree we do, I worded that badly, but I basically meant what @TomAugspurger said above, we want to avoid passing it like `self._load_iris_data(datapath)`. Then calling datapath directly. \r\n\r\nBut I see your original point and you are quite right we could write as so\r\n```\r\n@pytest.fixture()\r\ndef load_iris_data(self, datapath)\r\n     csv = datapath('io', 'data', 'iris.csv')\r\n```\r\n\r\nThe code in setup_method would remain as i've currently implemented. But I thought why not parameterize? In case we have another data-set we want to run these tests against in the future? ",
        "createdAt" : "2018-09-13T19:41:49Z",
        "updatedAt" : "2018-09-13T19:41:49Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "7427924af150b9240a2689a3681a8a2824a1d14d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +254,258 @@            return self.conn.cursor()\n\n    @pytest.fixture(params=[('io', 'data', 'iris.csv')])\n    def load_iris_data(self, datapath, request):\n        import io"
  },
  {
    "id" : "506587a2-f5b8-4922-9ec7-f1e5456aba13",
    "prId" : 23370,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23370#pullrequestreview-173417889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39e97bae-b2d1-4761-b5a4-fa062ba904d1",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Looks that the other two tests import `pymysql` locally. This is the only one that should have it (also locally, as in some builds `pymysql` is not installed, and travis is failing",
        "createdAt" : "2018-11-08T20:51:11Z",
        "updatedAt" : "2018-11-18T22:28:28Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "5e904ad0-e29b-4345-bcad-dddd566a67ec",
        "parentId" : "39e97bae-b2d1-4761-b5a4-fa062ba904d1",
        "authorId" : "851a6d4e-e0c5-475a-a532-fd33a2a93062",
        "body" : "Does this mean I should have it imported right before the try statement like I had it imported before? I did that previously because that's how it was done throughout the file.",
        "createdAt" : "2018-11-09T13:50:34Z",
        "updatedAt" : "2018-11-18T22:28:28Z",
        "lastEditedBy" : "851a6d4e-e0c5-475a-a532-fd33a2a93062",
        "tags" : [
        ]
      },
      {
        "id" : "e65908e6-5c8e-4f2f-9adf-34ee1e7c3034",
        "parentId" : "39e97bae-b2d1-4761-b5a4-fa062ba904d1",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Sorry if I made you change that, I didn't see it was an optional dependency. Yes, at the beginning of the function.",
        "createdAt" : "2018-11-09T13:53:00Z",
        "updatedAt" : "2018-11-18T22:28:28Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a86779a12c68d15035d3e71192a79d6235f4283",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1835,1839 @@            r1 = connection.execute(proc)  # noqa\n            trans.commit()\n        except pymysql.Error:\n            trans.rollback()\n            raise"
  },
  {
    "id" : "4e8eea9f-5a1e-4d74-b29c-b36a2417c1d5",
    "prId" : 25597,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25597#pullrequestreview-212024532",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cc82561-9db6-4439-ac56-c09db99508fb",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "dummy message for unconditionally skipped test. xref #20536",
        "createdAt" : "2019-03-07T20:51:31Z",
        "updatedAt" : "2019-03-07T20:51:32Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "29f7145f-bd29-44d4-b507-a5b7c254cf27",
        "parentId" : "8cc82561-9db6-4439-ac56-c09db99508fb",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yep, that makes sense.",
        "createdAt" : "2019-03-07T21:17:01Z",
        "updatedAt" : "2019-03-07T21:17:01Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3d342b4cd8c86e57a13578c0961c5366b904b4a",
    "line" : 230,
    "diffHunk" : "@@ -1,1 +2670,2674 @@\n        # test if invalid value for if_exists raises appropriate error\n        with pytest.raises(ValueError, match=\"<insert message here>\"):\n            sql.to_sql(frame=df_if_exists_1, con=self.conn, name=table_name,\n                       if_exists='notvalidvalue')"
  },
  {
    "id" : "e9643501-8f8a-4619-ada0-6ec32a39a506",
    "prId" : 37823,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37823#pullrequestreview-542352916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "222282d7-139e-4f5f-85e9-242e46c11e68",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make this tests assert the results, otherwise its not actually testing anything",
        "createdAt" : "2020-11-15T17:34:03Z",
        "updatedAt" : "2020-12-13T23:27:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c57fc526-22f9-4ec5-8c79-9fb41ea19fb0",
        "parentId" : "222282d7-139e-4f5f-85e9-242e46c11e68",
        "authorId" : "f33f82fd-4780-460e-b89e-d30a51353756",
        "body" : "Done",
        "createdAt" : "2020-12-01T22:33:12Z",
        "updatedAt" : "2020-12-13T23:27:47Z",
        "lastEditedBy" : "f33f82fd-4780-460e-b89e-d30a51353756",
        "tags" : [
        ]
      }
    ],
    "commit" : "29a7c267b742fbdd7abfafadef9d58c87a7e39fb",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +807,811 @@    )\n    def test_custom_dateparsing_error(self, read_sql, text, mode, error):\n        if self.mode in mode:\n            expected = self.types_test[self.flavor].astype(\n                {\"DateCol\": \"datetime64[ns]\"}"
  },
  {
    "id" : "50dbede3-a9e5-4735-be72-a0dc1317530e",
    "prId" : 40556,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40556#pullrequestreview-637717728",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edcadfa3-68a2-4a07-a8d0-03da58e526ef",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a test here which raises if the io.sql.engine is specified but not supported",
        "createdAt" : "2021-04-12T13:35:12Z",
        "updatedAt" : "2021-04-30T19:09:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "83e69c16-9505-45d4-8249-060ea06155d8",
        "parentId" : "edcadfa3-68a2-4a07-a8d0-03da58e526ef",
        "authorId" : "700858ee-28b2-49c3-b706-9a18315b5898",
        "body" : "I think that's already done in the first test here\r\nhttps://github.com/pandas-dev/pandas/blob/dbf0cfa9337789a24afbd1034bee1fb69a058b57/pandas/tests/io/test_sql.py#L2076-L2079\r\nwhich calls a method that passes the engine param (in this case, an invalid one named `bad_engine`) to the function\r\nhttps://github.com/pandas-dev/pandas/blob/dbf0cfa9337789a24afbd1034bee1fb69a058b57/pandas/tests/io/test_sql.py#L580-L595\r\n\r\nDoes this suffice? Or did you have something else in mind?\r\n\r\nThe test that I left as `# TODO` is for ensuring that when importing 3rd party libraries for the upcoming engines it raises the correct Exceptions if it can't import them",
        "createdAt" : "2021-04-12T16:17:54Z",
        "updatedAt" : "2021-04-30T19:09:53Z",
        "lastEditedBy" : "700858ee-28b2-49c3-b706-9a18315b5898",
        "tags" : [
        ]
      },
      {
        "id" : "928f123a-0f16-4a18-a8e9-a53f7a329e32",
        "parentId" : "edcadfa3-68a2-4a07-a8d0-03da58e526ef",
        "authorId" : "700858ee-28b2-49c3-b706-9a18315b5898",
        "body" : "@jreback you marked this as resolved, assuming it's ok then?",
        "createdAt" : "2021-04-16T13:48:10Z",
        "updatedAt" : "2021-04-30T19:09:53Z",
        "lastEditedBy" : "700858ee-28b2-49c3-b706-9a18315b5898",
        "tags" : [
        ]
      }
    ],
    "commit" : "36adf43ccc03f1c5395a49581102ede9a485d432",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +2106,2110 @@        # if engines aren't installed vs. are installed but bad version\n        pass\n        # TODO fill this in when we add more engines\n\n"
  },
  {
    "id" : "0c2d5a74-8ded-4e0d-9099-c03bda6debbf",
    "prId" : 40696,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40696#pullrequestreview-627132534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "503f84ef-287b-4814-98ed-cf05f3372c78",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok normally would want to do this with an xfail, but ok",
        "createdAt" : "2021-04-02T17:16:58Z",
        "updatedAt" : "2021-04-09T11:23:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7063a28f7e7b632dd5e83c4148060a2c1ad88c23",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +2018,2022 @@            # for pymysql version >= 0.10\n            # TODO: remove this version check after GH 36465 is fixed\n            import pymysql\n\n            if pymysql.VERSION[0:3] >= (0, 10, 0) and \"infe0\" in df.columns:"
  }
]