[
  {
    "id" : "94dd091a-2b69-4af3-90c5-c210675c1848",
    "prId" : 16930,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16930#pullrequestreview-50675707",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dab7451-ba0c-4e58-885f-06f5f9e23117",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Can you reference issue number below the test function definition?  Something like \"see gh-16928\" will suffice.",
        "createdAt" : "2017-07-18T16:56:07Z",
        "updatedAt" : "2017-07-21T14:55:32Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "c01caaf3c265ccb291dcd0748c6fe20d6c0ed555",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +950,954 @@\n@pytest.mark.slow\ndef test_importcheck_thread_safety():\n    # see gh-16928\n"
  },
  {
    "id" : "852351c5-b206-49c9-93d1-86fc35af16c2",
    "prId" : 16930,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16930#pullrequestreview-51604948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b9f2572-424f-4499-9172-e48b284d76c1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not needed here",
        "createdAt" : "2017-07-19T10:15:13Z",
        "updatedAt" : "2017-07-21T14:55:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "20e97be4-ac31-4918-a8c4-799c092bbf4c",
        "parentId" : "4b9f2572-424f-4499-9172-e48b284d76c1",
        "authorId" : "8e7cbf5c-2e0d-4cf5-8a89-6ed7b0c65d87",
        "body" : "Can you elaborate?",
        "createdAt" : "2017-07-19T10:54:50Z",
        "updatedAt" : "2017-07-21T14:55:32Z",
        "lastEditedBy" : "8e7cbf5c-2e0d-4cf5-8a89-6ed7b0c65d87",
        "tags" : [
        ]
      },
      {
        "id" : "226c1e7b-6278-4e84-b574-b953021f414a",
        "parentId" : "4b9f2572-424f-4499-9172-e48b284d76c1",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "@3553x : He means to just remove the line.  I thought that line would be useful for clarity?",
        "createdAt" : "2017-07-19T15:14:28Z",
        "updatedAt" : "2017-07-21T14:55:32Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "56c468b5-a489-4eff-9716-29b8e97a30c2",
        "parentId" : "4b9f2572-424f-4499-9172-e48b284d76c1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if this is not supported in py2, then you should either conditionally import it, or set ``reload=None`` and check it (and skip in a test).",
        "createdAt" : "2017-07-21T10:28:04Z",
        "updatedAt" : "2017-07-21T14:55:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "db9411c2-9077-4d5a-912d-fc361c4ed337",
        "parentId" : "4b9f2572-424f-4499-9172-e48b284d76c1",
        "authorId" : "8e7cbf5c-2e0d-4cf5-8a89-6ed7b0c65d87",
        "body" : "`reload` is a built-in in Python2. There is no need to import it unless you are using Python3.",
        "createdAt" : "2017-07-21T14:51:52Z",
        "updatedAt" : "2017-07-21T14:55:32Z",
        "lastEditedBy" : "8e7cbf5c-2e0d-4cf5-8a89-6ed7b0c65d87",
        "tags" : [
        ]
      },
      {
        "id" : "191642ae-d67e-4437-9441-d413b09c6112",
        "parentId" : "4b9f2572-424f-4499-9172-e48b284d76c1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok",
        "createdAt" : "2017-07-21T23:24:37Z",
        "updatedAt" : "2017-07-21T23:24:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c01caaf3c265ccb291dcd0748c6fe20d6c0ed555",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +8,12 @@\n\n# imports needed for Python 3.x but will fail under Python 2.x\ntry:\n    from importlib import import_module, reload"
  },
  {
    "id" : "fafc9842-a260-47df-8f11-7406b22a4220",
    "prId" : 16930,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16930#pullrequestreview-51439392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4693aec-9150-4239-9918-d0aa1ac540c0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if you can only test under py3 then use a ``@pytest.mark.skipf(not compat.PY3, reason=.....)`` decorator",
        "createdAt" : "2017-07-19T10:16:06Z",
        "updatedAt" : "2017-07-21T14:55:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "516786a3-4bbb-4dc1-9d73-a392ffb901c8",
        "parentId" : "e4693aec-9150-4239-9918-d0aa1ac540c0",
        "authorId" : "8e7cbf5c-2e0d-4cf5-8a89-6ed7b0c65d87",
        "body" : "I've just tested it with ``python3 `which pytest` test_html.py::test_importcheck_thread_safety`` and  ``python2 `which pytest` test_html.py::test_importcheck_thread_safety`` for both cases (with and without fix). The test seems to work for both versions on my system.",
        "createdAt" : "2017-07-19T10:53:58Z",
        "updatedAt" : "2017-07-21T14:55:32Z",
        "lastEditedBy" : "8e7cbf5c-2e0d-4cf5-8a89-6ed7b0c65d87",
        "tags" : [
        ]
      },
      {
        "id" : "f4da994b-e514-4b8b-9c60-32c6153a1605",
        "parentId" : "e4693aec-9150-4239-9918-d0aa1ac540c0",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so if this works, then remove the comment above",
        "createdAt" : "2017-07-21T10:28:38Z",
        "updatedAt" : "2017-07-21T14:55:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c01caaf3c265ccb291dcd0748c6fe20d6c0ed555",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +950,954 @@\n@pytest.mark.slow\ndef test_importcheck_thread_safety():\n    # see gh-16928\n"
  },
  {
    "id" : "1bfec50a-d14c-4714-add8-60e28031fe01",
    "prId" : 20047,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20047#pullrequestreview-102144034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c7092c0-8dba-4e7c-9f63-94f39f532bb5",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Blatant copy/paste of the method above. I was kind of surprised how few tests were shared between the parsers, so there's opportunity here to consolidate a lot of these tests into a base class but I figured that was better done comprehensively than trying to shimmy into this change",
        "createdAt" : "2018-03-07T23:56:09Z",
        "updatedAt" : "2018-03-09T16:31:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3093879826e9970eb87581889333b5e639637bc3",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +930,934 @@        self.read_html(data, header=[0, 1])\n\n    @pytest.mark.parametrize(\"displayed_only,exp0,exp1\", [\n        (True, DataFrame([\"foo\"]), None),\n        (False, DataFrame([\"foo  bar  baz  qux\"]), DataFrame([\"foo\"]))])"
  },
  {
    "id" : "a57df840-dced-486b-9d0d-fb4df50ae8ab",
    "prId" : 20293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20293#pullrequestreview-102922020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75f84baa-b281-4d21-b6a1-1b45de6d1073",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I changed this test to remove a seek back to the start of the file that `lxml` was fine with. By definition of unseekable I'm not sure how that `seek` call was allowed...",
        "createdAt" : "2018-03-12T04:35:14Z",
        "updatedAt" : "2018-03-13T23:39:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "50d072dbdce2bd44d1b83044743c1e511f7c1f25",
    "line" : 422,
    "diffHunk" : "@@ -1,1 +848,852 @@            <table><tr><td>spam<foobr />eggs</td></tr></table>''')\n\n        assert self.read_html(bad)\n\n        with pytest.raises(ValueError,"
  },
  {
    "id" : "19d55bef-16e3-4319-a599-247fd3bc0b73",
    "prId" : 21487,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21487#pullrequestreview-130829574",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9d3f800-363f-42bc-9ba1-3763598b0e26",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What was the point of changing some of these?",
        "createdAt" : "2018-06-21T03:22:56Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e825ab3c-3cdd-4ed3-beb8-989a7d3f7188",
        "parentId" : "e9d3f800-363f-42bc-9ba1-3763598b0e26",
        "authorId" : "118d302a-504a-4e64-ba06-999c7b546b21",
        "body" : "These tests are all run twice: once with `lxml` and once with `bs4`. But `read_html()`'s logic is, \"try `lxml`, and if it fails use `bs4`.\" So it overcomes the entire purpose of the unit tests -- if the lxml backend _crashes_ while we're testing it, we won't know because `read_html()` will fall back to `bs4`.\r\n\r\nFrom my reading of the code, `self.read_html()` is always correct, and `read_html()` is always a bug.",
        "createdAt" : "2018-06-21T14:00:13Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "118d302a-504a-4e64-ba06-999c7b546b21",
        "tags" : [
        ]
      },
      {
        "id" : "5a2b10a5-b43b-47ef-b879-28c6ec592e41",
        "parentId" : "e9d3f800-363f-42bc-9ba1-3763598b0e26",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "OK thanks for the clarification. I suppose these are fine to leave as is though if there are more better to do in a separate change to keep that cleanup orthogonal to the original issue",
        "createdAt" : "2018-06-21T14:01:42Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fd863bb3611093aefcda7e0f16573d77a3190d4",
    "line" : 574,
    "diffHunk" : "@@ -1,1 +950,954 @@\n        expected_df = DataFrame({'a': ['N/A', 'NA']})\n        html_df = self.read_html(html_data, keep_default_na=False)[0]\n        tm.assert_frame_equal(expected_df, html_df)\n"
  },
  {
    "id" : "174a8678-006f-4e2f-b26e-32b61756c94d",
    "prId" : 23550,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23550#pullrequestreview-172704338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fb69a3a-5973-4e5f-babb-e02a66d77ae3",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "We had a test for invalid flavors, but we were not checking the error message 😮 \r\n\r\nShould definitely discourage use of `pytest.raises` (with no `match` argument) unless there is a good reason for our not wanting to check the error message.",
        "createdAt" : "2018-11-07T21:20:08Z",
        "updatedAt" : "2018-11-07T21:20:08Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "edfe3a03c5d84fab76fb76dc8a7d29a647c16be0",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +67,71 @@\n    with tm.assert_raises_regex(ValueError, msg):\n        read_html(url, \"google\", flavor=flavor)\n\n"
  },
  {
    "id" : "dc7233d6-83a5-478a-8d3f-7c84e2d5ba9c",
    "prId" : 26735,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26735#pullrequestreview-247379833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eac8fe2b-8463-4e97-ad0d-287ab8461521",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "There are some of these in test_excel as well. Not sure if you meant to do all in this PR or not but if so worth a double check of other modules",
        "createdAt" : "2019-06-08T19:36:54Z",
        "updatedAt" : "2019-06-08T19:36:54Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ec080c79-0647-4dca-99fa-2dbd28c4cd95",
        "parentId" : "eac8fe2b-8463-4e97-ad0d-287ab8461521",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "left them intentionally to avoid conflicts with your PRs.\r\n\r\nhave checked other modules, no other use of safe_import except one case of a test decorator where I think skip_if_no could be used directly. (change that in this PR?)\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/ee6b1318ff07806ead79dac8119ad9ce580afe1c/pandas/tests/io/test_gcs.py#L67-L69\r\n\r\nand test_safe_import.\r\n\r\n",
        "createdAt" : "2019-06-08T19:45:47Z",
        "updatedAt" : "2019-06-08T19:45:48Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "c982e196b9208112a14bbefa2fb732f841a74c88",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +78,82 @@\n@pytest.mark.parametrize(\"flavor\", [\n    pytest.param('bs4', marks=td.skip_if_no('lxml')),\n    pytest.param('lxml', marks=td.skip_if_no('lxml'))], scope=\"class\")\nclass TestReadHtml:"
  },
  {
    "id" : "a90d1ed4-b2b3-4001-bec6-9904bdb1a965",
    "prId" : 27094,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27094#pullrequestreview-255808380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6d4925d-3a54-43cc-ac04-2adc67fed8bb",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "two versions of this test get run and each take 150s locally",
        "createdAt" : "2019-06-28T14:41:47Z",
        "updatedAt" : "2019-06-28T16:01:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bee2e39975ed1dc8bbd21d8603fa08f201284f3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +264,268 @@    @network\n    @pytest.mark.slow\n    def test_invalid_url(self):\n        try:\n            with pytest.raises(URLError):"
  },
  {
    "id" : "8552f9c2-6eef-4b48-aca7-ee7dc70d7a30",
    "prId" : 28857,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28857#pullrequestreview-299052576",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a413351-f8a1-44e8-9f0c-83f4cbf39365",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think you might have mentioned in the past but is there a flake8 rule for single character variable names? Worth turning on?",
        "createdAt" : "2019-10-08T20:53:04Z",
        "updatedAt" : "2019-10-11T15:21:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "6ac2b114-7a77-4673-9b2c-468955150d4e",
        "parentId" : "7a413351-f8a1-44e8-9f0c-83f4cbf39365",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "IIRC there is a rule that excludes lower-case \"l\", upper-case \"I\", and upper-case \"O\" as ambiguous.  My complaint about the more general case is that these are hard to grep for.",
        "createdAt" : "2019-10-08T21:11:19Z",
        "updatedAt" : "2019-10-11T15:21:35Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb4b08aa001a7d6bf37b335b2fab0c3f962681e7",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1234,1238 @@                try:\n                    super().run()\n                except Exception as err:\n                    self.err = err\n                else:"
  },
  {
    "id" : "16a70a59-e1cb-44a4-b8a6-581e9a69ebbb",
    "prId" : 30544,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30544#pullrequestreview-336979826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7561435c-26e4-4402-8078-ac0b5fb44338",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "did you change this from the decorator in response to my comment?  if so, thats not what i meant.  the decorator is preferred, but without the `strict=False`",
        "createdAt" : "2019-12-29T22:41:16Z",
        "updatedAt" : "2019-12-31T13:59:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2c47f3f5-face-4019-a969-1fd7904c3691",
        "parentId" : "7561435c-26e4-4402-8078-ac0b5fb44338",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "\r\nYeah just want to xfail one particular parameterization - `bs4` and the parameterization is at class scope - agree decorator is usually preferred.\r\n\r\nUpdated now - think its easiest to do this in the function itself for this case - unless you know a more elegant way?",
        "createdAt" : "2019-12-29T22:43:43Z",
        "updatedAt" : "2019-12-31T13:59:03Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      },
      {
        "id" : "3fb1f299-2c54-472f-8712-f3f44ae6baa9",
        "parentId" : "7561435c-26e4-4402-8078-ac0b5fb44338",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Just seen I can potentially go for the same approach as you did here https://github.com/pandas-dev/pandas/pull/30521/files? Will update unless you think otherwise?",
        "createdAt" : "2019-12-29T22:50:19Z",
        "updatedAt" : "2019-12-31T13:59:03Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      },
      {
        "id" : "cd89dc94-e30a-4909-be65-40bc8eccca50",
        "parentId" : "7561435c-26e4-4402-8078-ac0b5fb44338",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "if the test doesnt use the class fixture(s), could it just be moved out of the class?\r\n\r\nIf not then the approach in 30521 would be my preference, yes.",
        "createdAt" : "2019-12-29T23:03:46Z",
        "updatedAt" : "2019-12-31T13:59:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a9c04c63-e342-4e6a-8ef4-564becae1ae5",
        "parentId" : "7561435c-26e4-4402-8078-ac0b5fb44338",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Some class fixtures are used so easier to keep where is. Updated - thanks!",
        "createdAt" : "2019-12-29T23:15:38Z",
        "updatedAt" : "2019-12-31T13:59:03Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "7faa5ef864f54f8b70213e9111186698aa65f393",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +392,396 @@            reason = \"fails for bs4 version >= 4.8.0\"\n            request.node.add_marker(pytest.mark.xfail(reason=reason))\n\n        all_non_nan_table_index = -2\n        macau_data = datapath(\"io\", \"data\", \"html\", \"macau.html\")"
  }
]