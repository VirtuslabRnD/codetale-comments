[
  {
    "id" : "ba22c458-fc21-4f93-b818-4fc24c3cd1a3",
    "prId" : 15838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15838#pullrequestreview-29833083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ba84c04-5246-4658-8754-05ecd1c891d9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "cc @martindurant",
        "createdAt" : "2017-03-29T17:43:28Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0c9188c2-8ebc-405b-8685-18ccda03aa50",
        "parentId" : "6ba84c04-5246-4658-8754-05ecd1c891d9",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "If a column has object dtype, there are a few encoding options. Most typical is UTF8 for strings, but 'infer' will guess from the values; the only way to encode mixed types like this would be JSON or BSON. ",
        "createdAt" : "2017-03-29T17:58:16Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      },
      {
        "id" : "81da86d1-93e3-4e94-88af-609bc65e4c57",
        "parentId" : "6ba84c04-5246-4658-8754-05ecd1c891d9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this done at the user level?",
        "createdAt" : "2017-03-29T18:04:11Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1978d19e-c0a6-4f63-8c69-c244bf0c7c60",
        "parentId" : "6ba84c04-5246-4658-8754-05ecd1c891d9",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "Yes, the user can specify the \"object_encoding\" keyword to fastparquet.writer.write. A value of \"infer\" will default to JSON representation only for dicts and lists (as guessed from the first ten values) - perhaps it should be for all types that are not str or bytes?",
        "createdAt" : "2017-03-29T18:07:25Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      },
      {
        "id" : "59b48cf3-6bd8-4ad6-89fe-a59dee659ede",
        "parentId" : "6ba84c04-5246-4658-8754-05ecd1c891d9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I see you have *lots* of options in ``fastparquet.write``. since I don't want to duplicate them at all! maybe just pass thru to you directly. going to think about this.",
        "createdAt" : "2017-03-29T18:08:38Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "67809c0b-6bf2-4604-9955-2760b03e55e7",
        "parentId" : "6ba84c04-5246-4658-8754-05ecd1c891d9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "added passing thru kwargs, so this should be easy to test",
        "createdAt" : "2017-03-29T20:24:37Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f553a5fbce80b98c4a55bd6469859e8f8922b162",
    "line" : 358,
    "diffHunk" : "@@ -1,1 +356,360 @@        self.check_error_on_write(df, fp, ValueError)\n\n        # mixed\n        df = pd.DataFrame({'a': ['a', 1, 2.0]})\n        self.check_error_on_write(df, fp, ValueError)"
  },
  {
    "id" : "ee8381a4-a586-402f-9e0f-9292ab1b19ad",
    "prId" : 15838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15838#pullrequestreview-32537151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bc8a97e-c52b-493d-acbc-f66484be1b62",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "cc @martindurant this warning is odd btw.",
        "createdAt" : "2017-03-29T17:43:44Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "12c14463-86ec-4548-9611-7dab291249cb",
        "parentId" : "2bc8a97e-c52b-493d-acbc-f66484be1b62",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "Parquet does not store timezone information (except maybe in specialized key-value metadata), so this would amount to a silent loss of data.",
        "createdAt" : "2017-03-29T18:00:20Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      },
      {
        "id" : "be433f19-4aa1-4281-a323-a5423d5664f5",
        "parentId" : "2bc8a97e-c52b-493d-acbc-f66484be1b62",
        "authorId" : "55206695-bb42-4d72-886f-f5370a77363e",
        "body" : "We should create a spec document for \"Python metadata\" (that we can implement in either library) to store as key-value metadata so that we can persist anything that does not fit into the format as is",
        "createdAt" : "2017-03-29T19:05:59Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "55206695-bb42-4d72-886f-f5370a77363e",
        "tags" : [
        ]
      },
      {
        "id" : "be79b395-996a-4f1b-9b5e-84d53fb84075",
        "parentId" : "2bc8a97e-c52b-493d-acbc-f66484be1b62",
        "authorId" : "87ae8b7b-5811-4dca-9610-338ff52f130d",
        "body" : "The to_stata function warns when it writes things that won't load back the same way or when it's changing things - I think that'd also be very cool, and there could be a strict_mode=True that will raise exceptions instead.",
        "createdAt" : "2017-04-13T02:35:20Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "87ae8b7b-5811-4dca-9610-338ff52f130d",
        "tags" : [
        ]
      },
      {
        "id" : "b70f8a9b-0ee2-483c-ae76-0330a0f74276",
        "parentId" : "2bc8a97e-c52b-493d-acbc-f66484be1b62",
        "authorId" : "87ae8b7b-5811-4dca-9610-338ff52f130d",
        "body" : "Aside from this, it'd be very helpful from an interop perspective to know what things are parquet-native and thus readable from another application, vs what things are pandas-only.",
        "createdAt" : "2017-04-13T02:45:16Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "87ae8b7b-5811-4dca-9610-338ff52f130d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f553a5fbce80b98c4a55bd6469859e8f8922b162",
    "line" : 372,
    "diffHunk" : "@@ -1,1 +370,374 @@\n        # warns on the coercion\n        with catch_warnings(record=True):\n            self.check_round_trip(df, fp, df.astype('datetime64[ns]'),\n                                  compression=None)"
  },
  {
    "id" : "6ad2843b-7519-4340-b11d-65b36fc9a445",
    "prId" : 18216,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18216#pullrequestreview-76437598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b087c485-8fbe-4575-a712-a775fe73e7c1",
        "parentId" : null,
        "authorId" : "43286cbe-b727-4437-8153-2f8d73977f69",
        "body" : "I would refactor this helper function to have the following signature:\r\n\r\ndef check_round_trip(self, df, engine, expected=None, write_kwargs=None, read_kwargs=None)\r\n\r\n",
        "createdAt" : "2017-11-14T09:26:33Z",
        "updatedAt" : "2017-11-14T13:47:15Z",
        "lastEditedBy" : "43286cbe-b727-4437-8153-2f8d73977f69",
        "tags" : [
        ]
      },
      {
        "id" : "4b61c548-cde3-429b-a153-71446d42b299",
        "parentId" : "b087c485-8fbe-4575-a712-a775fe73e7c1",
        "authorId" : "baa0ca18-cc19-4991-8297-4dd7a454cdd6",
        "body" : "Yeah, this is definitly the way to go.\r\nTests until now only worked because pyarrow.parquet.write_table ignores extra kwargs, and the fastparquet implementation did not pass kwargs through to the write method - else the tests would have failed on the  (read-only) parameter columns already.",
        "createdAt" : "2017-11-14T13:24:08Z",
        "updatedAt" : "2017-11-14T13:47:15Z",
        "lastEditedBy" : "baa0ca18-cc19-4991-8297-4dd7a454cdd6",
        "tags" : [
        ]
      }
    ],
    "commit" : "edbd937dc3e642fd497315bb86e929985a4e5bb5",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +189,193 @@                to_parquet(df, path, engine, compression=None)\n\n    def check_round_trip(self, df, engine, expected=None,\n                         write_kwargs=None, read_kwargs=None):\n        if write_kwargs is None:"
  },
  {
    "id" : "d9e700f8-757e-4434-a5ab-15c4fd14c3e0",
    "prId" : 18662,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18662#pullrequestreview-82094665",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba5ed25a-1989-43cd-ac05-348934d5ff03",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can remove this after we change the dep (@dhirschfeld PR)",
        "createdAt" : "2017-12-08T02:16:29Z",
        "updatedAt" : "2017-12-08T08:47:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9f92a1da-e56c-4a03-b05b-c5345a706264",
        "parentId" : "ba5ed25a-1989-43cd-ac05-348934d5ff03",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "yep. For the rest any comments?",
        "createdAt" : "2017-12-08T08:47:38Z",
        "updatedAt" : "2017-12-08T08:47:38Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "6161f656f6cf27441bec3bd6da6ed0c0f15d37fa",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +333,337 @@        # additional supported types for pyarrow\n        import pyarrow\n        if LooseVersion(pyarrow.__version__) >= LooseVersion('0.7.0'):\n            df['datetime_tz'] = pd.date_range('20130101', periods=3,\n                                              tz='Europe/Brussels')"
  },
  {
    "id" : "9db6a19f-ab2f-4fd4-b73b-8d8b345b36d6",
    "prId" : 19135,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19135#pullrequestreview-87699145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be2e0bc1-210c-4e51-abe5-d6e1376c3ba5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the same test to FP, but assert that it raises.",
        "createdAt" : "2018-01-10T00:16:02Z",
        "updatedAt" : "2018-01-17T10:47:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9dbc77cefd3eb53d96daaa99596765725ad8392e",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +443,447 @@        self.check_error_on_write(df, pa, NotImplementedError)\n\n    def test_s3_roundtrip(self, df_compat, s3_resource, pa):\n        # GH #19134\n        self.check_round_trip(df_compat, pa,"
  },
  {
    "id" : "0e04178a-d668-4b16-a050-4736d2edaf1e",
    "prId" : 19135,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19135#pullrequestreview-88695122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "718781e6-d7aa-4306-817a-e0a0269d0b35",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a comment on why this is NI",
        "createdAt" : "2018-01-14T21:36:52Z",
        "updatedAt" : "2018-01-17T10:47:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9dbc77cefd3eb53d96daaa99596765725ad8392e",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +508,512 @@\n    def test_s3_roundtrip(self, df_compat, s3_resource, fp):\n        # GH #19134\n        self.check_round_trip(df_compat, fp,\n                              path='s3://pandas-test/fastparquet.parquet')"
  },
  {
    "id" : "57c4e2fb-7818-459e-8dea-7b567d5fddab",
    "prId" : 23321,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23321#pullrequestreview-171350135",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed05a862-3e14-48dc-94ad-70fd0449a8ae",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what happens with a non-list-like partition column? does this need checking?",
        "createdAt" : "2018-10-30T12:33:13Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bbf45448-b688-4987-a8c0-fc66d956d454",
        "parentId" : "ed05a862-3e14-48dc-94ad-70fd0449a8ae",
        "authorId" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "body" : "both fastparquet and pyarrow require a list as input. So even if only one column is required, it is given as a list. ",
        "createdAt" : "2018-11-04T05:19:42Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b455473733352e10c321d4f08b9fadc286b4c84",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +546,550 @@            assert len(actual_partition_cols) == 2\n\n    def test_partition_on_supported(self, fp, df_full):\n        # GH #23283\n        partition_cols = ['bool', 'int']"
  },
  {
    "id" : "b04422b8-98f7-4d00-b736-8a3bd37fd827",
    "prId" : 27341,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27341#pullrequestreview-260867757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9589029-7df7-4bdb-885f-84d72aea54d5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the github issue number as a comment",
        "createdAt" : "2019-07-11T18:06:41Z",
        "updatedAt" : "2019-07-11T18:25:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae8e024f5c4470eb2e9524d14bf61a46991f5715",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +474,478 @@    def test_empty_dataframe(self, pa):\n        # GH #27339\n        df = pd.DataFrame()\n        check_round_trip(df, pa)\n"
  },
  {
    "id" : "d99437c1-3a18-4683-aa51-8af46ad2ee2c",
    "prId" : 27341,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27341#pullrequestreview-260867757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cbf2702-bf77-4661-b63b-9090d60c6371",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same here",
        "createdAt" : "2019-07-11T18:06:51Z",
        "updatedAt" : "2019-07-11T18:25:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae8e024f5c4470eb2e9524d14bf61a46991f5715",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +575,579 @@    def test_empty_dataframe(self, fp):\n        # GH #27339\n        df = pd.DataFrame()\n        expected = df.copy()\n        expected.index.name = \"index\""
  },
  {
    "id" : "f9a87e15-c379-4d96-92cf-8d629c0a8032",
    "prId" : 28018,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28018#pullrequestreview-296011755",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09c8e67a-e186-426c-900f-d4b8582e5507",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@jorisvandenbossche this isn't released yet, right? Should we wait to merge until 0.15.0 is released?",
        "createdAt" : "2019-08-30T18:58:10Z",
        "updatedAt" : "2019-10-04T17:48:27Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "876154f7-d261-43f6-a565-306f5cd49e9f",
        "parentId" : "09c8e67a-e186-426c-900f-d4b8582e5507",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, this isn't released yet. I can assure that it runs locally for me on Arrow master (if I change the version check to `> LooseVersion(\"0.14.1.dev\")`), so I am OK to merge this, but also fine to wait a bit more (0.15.0 will normally happen somewhere end of next week)",
        "createdAt" : "2019-09-11T08:14:48Z",
        "updatedAt" : "2019-10-04T17:48:27Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a337ac80-5b10-4f91-b6a4-dfe89f532ac3",
        "parentId" : "09c8e67a-e186-426c-900f-d4b8582e5507",
        "authorId" : "2dcd3b71-9611-4d94-bfa1-ad321793a02c",
        "body" : "Since Arrow 0.15.0 has been released, can we merge this now?",
        "createdAt" : "2019-10-02T04:48:05Z",
        "updatedAt" : "2019-10-04T17:48:27Z",
        "lastEditedBy" : "2dcd3b71-9611-4d94-bfa1-ad321793a02c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd08e1668818a416a73c7dfb3d084659038c8ab9",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +477,481 @@        )\n\n        if LooseVersion(pyarrow.__version__) >= LooseVersion(\"0.15.0\"):\n            check_round_trip(df, pa)\n        else:"
  },
  {
    "id" : "f85bce4d-aa6e-4a75-b266-884bdabcfa33",
    "prId" : 28357,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28357#pullrequestreview-286874443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6f38a7e-05d8-4a99-aafa-bdd9e055c0e7",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In principle this also depends on the fastparquet version, but probably easier to just skip it altogether like you do. It might that this fails on 0.13 as well, not sure.",
        "createdAt" : "2019-09-11T09:33:15Z",
        "updatedAt" : "2019-09-11T15:20:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "fe9816ea-8c79-4da3-b50f-a7872006f5d2",
        "parentId" : "a6f38a7e-05d8-4a99-aafa-bdd9e055c0e7",
        "authorId" : "6bfa1922-c427-4971-9e7f-6e6257a1d5bb",
        "body" : "It was failing for 0.13 too and I've added this to the XFail.",
        "createdAt" : "2019-09-11T15:21:14Z",
        "updatedAt" : "2019-09-11T15:21:14Z",
        "lastEditedBy" : "6bfa1922-c427-4971-9e7f-6e6257a1d5bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "84f95fe9c48027b096fd3c70a690fa47ecb3e912",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +246,250 @@        pytest.xfail(\n            \"Reading fastparquet with pyarrow in 0.14 fails: \"\n            \"https://issues.apache.org/jira/browse/ARROW-6492\"\n        )\n"
  },
  {
    "id" : "80c82eef-4d64-4e3c-9793-4efc191e9d54",
    "prId" : 30039,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30039#pullrequestreview-326826489",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4f8a3d5-e76a-4d17-a6cd-d2af235628cc",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "shouldn't this be an xfail?",
        "createdAt" : "2019-12-04T11:53:16Z",
        "updatedAt" : "2019-12-04T11:54:48Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "6b27c1d9-78fa-4b29-9d0c-43148f1b62c8",
        "parentId" : "f4f8a3d5-e76a-4d17-a6cd-d2af235628cc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jorisvandenbossche yeah this should be ok now?",
        "createdAt" : "2019-12-04T12:44:58Z",
        "updatedAt" : "2019-12-04T12:44:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f899347e-f046-4dfd-b8c8-438d19befe20",
        "parentId" : "f4f8a3d5-e76a-4d17-a6cd-d2af235628cc",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It's a test that got broken recently, because we were not testing it .. (https://github.com/pandas-dev/pandas/issues/29976). Will fix it one of the coming days, but so for now needs to be skipped (or xfailed, that's semantically more correct yes)",
        "createdAt" : "2019-12-04T12:58:19Z",
        "updatedAt" : "2019-12-04T12:58:19Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1933491e3cdcc946344117fc25f8eb2eb43fbf2",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +505,509 @@        check_round_trip(df, pa)\n\n    @pytest.mark.skip(reason=\"broken test\")\n    @td.skip_if_no(\"pyarrow\", min_version=\"0.15.0\")\n    def test_additional_extension_arrays(self, pa):"
  },
  {
    "id" : "17aae363-18d4-47bf-8b8d-1c6c008457f1",
    "prId" : 30213,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30213#pullrequestreview-331070440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c985915-1b21-4f9a-b295-25f254101134",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Reference issue number above this line.",
        "createdAt" : "2019-12-12T08:52:09Z",
        "updatedAt" : "2019-12-12T23:41:08Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f5922f6c226677b24d9978927d090196e3c0bce",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +502,506 @@    def test_partition_cols_string(self, pa, df_full):\n        # GH #27117\n        partition_cols = \"bool\"\n        partition_cols_list = [partition_cols]\n        df = df_full"
  },
  {
    "id" : "22cdf9f6-3c91-4420-b18d-f0e9e4fb82fe",
    "prId" : 31242,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31242#pullrequestreview-347214533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c2a0bdc-f3fc-4a73-9e2a-93424316e179",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should test bool and uint as well",
        "createdAt" : "2020-01-23T11:04:32Z",
        "updatedAt" : "2020-11-28T19:49:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1375bad8bcf7967c2aed0a3aad3a7343554cdaec",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +850,854 @@        expected = pd.DataFrame(\n            {\n                \"a\": pd.array([1, 2, 3, None], dtype=\"Int64\"),\n                \"b\": pd.array([1, 2, 3, None], dtype=\"UInt8\"),\n                \"c\": pd.array([\"a\", \"b\", \"c\", None], dtype=\"string\"),"
  },
  {
    "id" : "2865be36-3aa2-44d8-8143-6a3e624408e4",
    "prId" : 31242,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31242#pullrequestreview-540413684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac3b5b5f-71ae-4872-8a8f-0e0b4aa31c22",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need a test that this fails on fastparquet",
        "createdAt" : "2020-11-28T17:22:27Z",
        "updatedAt" : "2020-11-28T19:49:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e13a10aa-f5c6-4f41-accc-e3ccabf0098d",
        "parentId" : "ac3b5b5f-71ae-4872-8a8f-0e0b4aa31c22",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Test added",
        "createdAt" : "2020-11-28T19:49:59Z",
        "updatedAt" : "2020-11-28T19:49:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1375bad8bcf7967c2aed0a3aad3a7343554cdaec",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +830,834 @@\n    @td.skip_if_no(\"pyarrow\", min_version=\"0.16\")\n    def test_use_nullable_dtypes(self, pa):\n        import pyarrow.parquet as pq\n"
  },
  {
    "id" : "694caf6b-cfa9-4edd-9d6a-2399665ffd9c",
    "prId" : 33361,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33361#pullrequestreview-390295186",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8e7d326-e90b-4574-b50f-04c338de02ea",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Looks like you're repeating the same twice for `pyarrow` and `fastparquet` (which makes sense). But it'd probably be worth to just implement things once, and parametrize (with pytest).\r\n\r\nYou can search for `@pytest.mark.parametrize`, and you'll find lots of examples of parametrized tests. The idea is that the test will receive a set of variables for each of `pyarrow` and `fastparquet`, and pytest will execute it twice with each set of variables.",
        "createdAt" : "2020-04-08T11:52:21Z",
        "updatedAt" : "2020-04-08T14:38:21Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "cdbd1651-da4a-41e4-b857-821f2a9c72d7",
        "parentId" : "d8e7d326-e90b-4574-b50f-04c338de02ea",
        "authorId" : "88c77245-99d2-4050-ae96-470fd174b91f",
        "body" : "Yeah, I thought about parametrizing, but in this case it's tricky: the error message will only ever show up if _both_ pyarrow _and_ fastparquet are inadequately installed (i.e. not installed, or bad version installed). This is embodied in the conditional:\r\n```\r\nif not have_usable_pa and not have_usable_fp:\r\n```\r\nThe `and`'ed conditions can't be decoupled. So we'd still need both the lines of code you highlight above. \r\n\r\nThe only thing that could be de-duplicated with parametrization, is the contents of the `if` block. But even that doesn't feel quite right; it's just two aspects of the same situation. \r\n\r\nMaybe the best thing to do if we want to be absolutely strict, is to take all the boolean flagging that is currently in these two sections\r\n```\r\n    # Do we have engines installed, but a bad version of them?\r\n[...]\r\n    # Do we have usable engines installed?\r\n```\r\nand move it outside of the test function, to module level. And use `pytest.mark.skipif` (or one of those wacky fixtures that inject `pytest.mark.skip`) to only run the test when we expect an error message. \r\n\r\nAt this point, I'm going to ask: how important is it that we do it this way? Because I'm slowly running out of steam for this.\r\n\r\n",
        "createdAt" : "2020-04-08T14:23:33Z",
        "updatedAt" : "2020-04-08T20:06:42Z",
        "lastEditedBy" : "88c77245-99d2-4050-ae96-470fd174b91f",
        "tags" : [
        ]
      },
      {
        "id" : "874ffb83-86e0-4601-9c30-84442c2c67c5",
        "parentId" : "d8e7d326-e90b-4574-b50f-04c338de02ea",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this test is kind of overkill , but ok.",
        "createdAt" : "2020-04-08T16:45:31Z",
        "updatedAt" : "2020-04-08T16:45:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fe861a47-47cd-4181-a931-63b4bc113677",
        "parentId" : "d8e7d326-e90b-4574-b50f-04c338de02ea",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I see, didn't realize you need to know about both versions at the same time.\r\n\r\nI think you could write this in a very compact way, if we create the `_HAVE_USABLE_PYARROW`... variables at the beginning of the file, like `_HAVE_PYARROW`. Then the parametrization would be trivial. But not that important.\r\n\r\nThanks for the work on this!",
        "createdAt" : "2020-04-08T16:47:33Z",
        "updatedAt" : "2020-04-08T16:47:33Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "590b40cb-8123-4dae-8005-7ebbad6a52d8",
        "parentId" : "d8e7d326-e90b-4574-b50f-04c338de02ea",
        "authorId" : "88c77245-99d2-4050-ae96-470fd174b91f",
        "body" : "Cool. I'm happy to come back to it later if someone sees this as adding value. Though I tend to agree with @jreback that we're bordering overkill. Anyhoo, I'm glad to have this closed before everything drops out of mental cache over Easter. \r\nCheers all for the good input!!",
        "createdAt" : "2020-04-08T20:10:58Z",
        "updatedAt" : "2020-04-08T20:10:58Z",
        "lastEditedBy" : "88c77245-99d2-4050-ae96-470fd174b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d58483f73b4084c718ab796a0642ec934302a79",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +232,236 @@    # Do we have engines installed, but a bad version of them?\n    pa_min_ver = VERSIONS.get(\"pyarrow\")\n    fp_min_ver = VERSIONS.get(\"fastparquet\")\n    have_pa_bad_version = (\n        False"
  },
  {
    "id" : "d55d5f23-2a22-4e33-8af2-cf3f8a34038d",
    "prId" : 34266,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34266#pullrequestreview-419558396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4147485-3613-4f96-98d1-c86e309cc2f5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "parquet tests will now need to skip if fsscpec is not installed. \r\n\r\nHowever we DO seem to depend on it in places, so ok with adding this requirement (pls add in io.rst and the doc-strings). e.g. need either fastparquet / pyarrow AND fsspec.",
        "createdAt" : "2020-05-25T23:05:29Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2d267133-8750-4143-bc0a-30841f3a584c",
        "parentId" : "f4147485-3613-4f96-98d1-c86e309cc2f5",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "Parquet read/write local and read from http will not be affected",
        "createdAt" : "2020-05-26T13:08:14Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      },
      {
        "id" : "873c9806-e46d-4050-b554-b27f3b889c62",
        "parentId" : "f4147485-3613-4f96-98d1-c86e309cc2f5",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "(plus, `s3fs` depends on `fsspec`, so those that depend on the former will already be skipped)",
        "createdAt" : "2020-05-27T19:50:03Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b80a622035b3eaba3bdb790444b7d699822a28",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +555,559 @@\n    @td.skip_if_no(\"s3fs\")\n    @pytest.mark.parametrize(\"partition_col\", [[\"A\"], []])\n    def test_s3_roundtrip_for_dir(self, df_compat, s3_resource, pa, partition_col):\n        # GH #26388"
  }
]