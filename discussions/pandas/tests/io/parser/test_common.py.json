[
  {
    "id" : "f1a740f8-666b-4b8f-a5e6-677123c54167",
    "prId" : 24837,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24837#pullrequestreview-194406423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc54d72c-b152-44ac-ab11-ee84ee045f92",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "maybe use psutil to track memory?",
        "createdAt" : "2019-01-19T16:20:52Z",
        "updatedAt" : "2019-01-20T00:05:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "432bf214-039b-4752-a5cc-bf9b483ae62a",
        "parentId" : "dc54d72c-b152-44ac-ab11-ee84ee045f92",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "u can do asvs for memory now\r\n\r\ngrep for mem_",
        "createdAt" : "2019-01-19T16:26:39Z",
        "updatedAt" : "2019-01-20T00:05:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2ff23e40-0a65-46c9-b894-913e8453a81a",
        "parentId" : "dc54d72c-b152-44ac-ab11-ee84ee045f92",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Cool.  Let me add that test quickly then.",
        "createdAt" : "2019-01-19T23:35:06Z",
        "updatedAt" : "2019-01-20T00:05:24Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "d8b24471-e478-4e47-8db9-742aa95504c6",
        "parentId" : "dc54d72c-b152-44ac-ab11-ee84ee045f92",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "having an asv is nice, but shouldn't be a substitute for a test, should it?",
        "createdAt" : "2019-01-20T18:22:19Z",
        "updatedAt" : "2019-01-20T18:22:19Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a011ca5e-3f06-47c5-9b0d-19cf0661b6a6",
        "parentId" : "dc54d72c-b152-44ac-ab11-ee84ee045f92",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "looks like a test to me",
        "createdAt" : "2019-01-20T18:27:41Z",
        "updatedAt" : "2019-01-20T18:27:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "58f36917-173d-4e5c-a964-b28539ae50c3",
        "parentId" : "dc54d72c-b152-44ac-ab11-ee84ee045f92",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "its a test that doesn't assert anything, and where the failure mode is crashing.  how much RAM does a machine need before the test will incorrectly pass?",
        "createdAt" : "2019-01-20T18:31:04Z",
        "updatedAt" : "2019-01-20T18:31:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f98bba5f-513c-466e-a336-bd719e606a29",
        "parentId" : "dc54d72c-b152-44ac-ab11-ee84ee045f92",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "@jbrockmendel : I have 16 GB of RAM on my machine, and this test failed before the patch.\r\n\r\nAs described in the issue, the problem is that the memory allocation grows exponentially.",
        "createdAt" : "2019-01-20T18:39:23Z",
        "updatedAt" : "2019-01-20T18:39:58Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "b3e26039-2edb-4498-9895-2b5c1c7f3c80",
        "parentId" : "dc54d72c-b152-44ac-ab11-ee84ee045f92",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "on a 128gb machine I'm getting failures in 2/3 cases pre-patch.  is that expected, or should it be 3/3?\r\n\r\nIt's not that I doubt the correctness of the patch, just that I'm really uncomfortable with the failure mode of the test.",
        "createdAt" : "2019-01-20T18:47:34Z",
        "updatedAt" : "2019-01-20T18:47:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "21404755-0143-4d9e-9309-b01727226f16",
        "parentId" : "dc54d72c-b152-44ac-ab11-ee84ee045f92",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "@jbrockmendel : 2/3 failures pre-patch is what you should get.\r\n\r\n> just that I'm really uncomfortable with the failure mode of the test.\r\n\r\nI understand your concern, though such a failure mode is not uncommon for our CSV tests, especially if it's impacting low-level C engine code.\r\n\r\nIf you feel like you want to add something to do this, by all means.",
        "createdAt" : "2019-01-20T19:51:27Z",
        "updatedAt" : "2019-01-20T19:51:41Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c366a8453827c9e46482dd2b4dddd738981d70b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1921,1925 @@    #\n    # Let's just make sure that we don't crash\n    # as we iteratively process all chunks.\n    parser = all_parsers\n"
  },
  {
    "id" : "a20ab887-c13c-4094-b1de-6e46e462dc98",
    "prId" : 26634,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26634#pullrequestreview-245965041",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56ce9c99-1341-4c06-a9dd-1de2fb8096f9",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "This test is fine to add.  `tm.assert_frame_equal` does the trick.",
        "createdAt" : "2019-06-04T23:31:08Z",
        "updatedAt" : "2019-06-11T07:36:12Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "af8bee4d-9013-4fd2-8ff6-1b28262b4bff",
        "parentId" : "56ce9c99-1341-4c06-a9dd-1de2fb8096f9",
        "authorId" : "a921e8ee-d6d2-43b6-8bc3-eb6392d3015b",
        "body" : "> @LuckyDenis could you also check what `test_utf8_bom` is doing in the test module? It looks to cover the same intention as test added so want to make sure we understand the difference and clarify accordingly\r\n\r\n@WillAyd, I looked at the difference between the tests. In the `test_utf8_bom`, the dataset only checks that it clears the first header from the bom and does not reveal the bug I fixed. My test checks just processing headers and that you grow them correctly.\r\n",
        "createdAt" : "2019-06-05T08:36:39Z",
        "updatedAt" : "2019-06-11T07:36:12Z",
        "lastEditedBy" : "a921e8ee-d6d2-43b6-8bc3-eb6392d3015b",
        "tags" : [
        ]
      },
      {
        "id" : "b9fc3a75-b8be-46fa-b27e-92be67eca91c",
        "parentId" : "56ce9c99-1341-4c06-a9dd-1de2fb8096f9",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Awesome thanks for verifying that!",
        "createdAt" : "2019-06-05T12:12:08Z",
        "updatedAt" : "2019-06-11T07:36:12Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb010d535a74466ad5532ae13c692f72ebf36152",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1937,1941 @@    result = parser.read_csv(StringIO(data), delimiter='\\t')\n    expected = DataFrame(columns=[\"Head1\", \"Head2\", \"Head3\"])\n    tm.assert_frame_equal(result, expected)"
  },
  {
    "id" : "dc885959-047e-455b-9a27-318002e5535d",
    "prId" : 27925,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27925#pullrequestreview-275919293",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18bdfb8e-05e3-428a-ade6-4b876d382e27",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you compare these versus the file read w/o open it?\r\n\r\nsomething like this (for the 2 cases)\r\n\r\n```\r\nexpected = parser.read_csv(fpath....)\r\nresult = .....\r\ntm.assert_frame_equal(....)\r\n\r\nresult = ....\r\ntm.assert....\r\n```",
        "createdAt" : "2019-08-16T12:23:26Z",
        "updatedAt" : "2019-08-19T13:54:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "01741dc6c4a78ce29feb74ed9dbab2a4211dac39",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +2041,2045 @@    fpath = os.path.join(csv_dir_path, fname)\n    expected = parser.read_csv(fpath, encoding=encoding)\n\n    with open(fpath, mode=\"r\", encoding=encoding) as fa:\n        result = parser.read_csv(fa)"
  },
  {
    "id" : "be675edb-2b4b-4535-941c-1ea619018200",
    "prId" : 31383,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31383#pullrequestreview-352129985",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1f72b8e-e6a5-49af-a8ea-6180b365ca1a",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Newline above and below this.",
        "createdAt" : "2020-02-03T08:01:24Z",
        "updatedAt" : "2020-02-03T09:25:42Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "bb95e252-dd7d-4282-b87f-e3cf990a7581",
        "parentId" : "e1f72b8e-e6a5-49af-a8ea-6180b365ca1a",
        "authorId" : "d60186f1-f053-4532-9d2c-ecc6d99ac055",
        "body" : "Done",
        "createdAt" : "2020-02-03T09:51:11Z",
        "updatedAt" : "2020-02-03T10:23:21Z",
        "lastEditedBy" : "d60186f1-f053-4532-9d2c-ecc6d99ac055",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f35f6c1b8e826fff9dcc2bd535fae722a4bb49e",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +2046,2050 @@    msg = \"Argument prefix must be None if argument header is not None\"\n\n    s = StringIO(\"0,1\\n2,3\")\n\n    with pytest.raises(ValueError, match=msg):"
  },
  {
    "id" : "3f5b873f-8847-42f9-a83b-716e26b300e4",
    "prId" : 32598,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32598#pullrequestreview-374759477",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c87bfc8-c664-4401-8c37-6d162d27133a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "We already have some machinery to wrap the function and check for a leak here:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/25e2f8687f0a7033ddbbd6aa1b833d0586f99bad/pandas/util/_test_decorators.py#L236\r\n\r\nCan you use this instead?",
        "createdAt" : "2020-03-13T00:19:02Z",
        "updatedAt" : "2020-03-14T22:59:23Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f54de702-efa5-4543-9370-d17436a10359",
        "parentId" : "0c87bfc8-c664-4401-8c37-6d162d27133a",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "I tried it, but it doesn't trigger on this specific issue. Apparently the file handle gets destroyed by some other means before the check can trigger.\r\nBut I can double check.",
        "createdAt" : "2020-03-13T06:36:17Z",
        "updatedAt" : "2020-03-14T22:59:23Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      },
      {
        "id" : "b43a85e7-9d69-4291-ac9a-87f34e9ead40",
        "parentId" : "0c87bfc8-c664-4401-8c37-6d162d27133a",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "I can choose between using the `tm.ensure_clean` context manager which will close the file as well and therefore prevent the file descriptor leak, or use the `check_file_leaks` context manager, but not both.\r\nPlease express a preference of one above the other.",
        "createdAt" : "2020-03-14T11:19:30Z",
        "updatedAt" : "2020-03-14T22:59:23Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      },
      {
        "id" : "9b127f9f-e3cf-41ab-ad57-7ff0397e40c4",
        "parentId" : "0c87bfc8-c664-4401-8c37-6d162d27133a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think should use the `check_file_leaks` context manager",
        "createdAt" : "2020-03-14T16:48:49Z",
        "updatedAt" : "2020-03-14T22:59:23Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b649e93e-77e5-40eb-a14f-9d016417eebf",
        "parentId" : "0c87bfc8-c664-4401-8c37-6d162d27133a",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "OK, so that means I have to ditch the `tm.ensure_clean` call?",
        "createdAt" : "2020-03-14T17:42:32Z",
        "updatedAt" : "2020-03-14T22:59:23Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      },
      {
        "id" : "fdc8832e-44fb-4340-a893-f2e151a1ae07",
        "parentId" : "0c87bfc8-c664-4401-8c37-6d162d27133a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I'm not clear why they can't both be used together - what error were you getting?",
        "createdAt" : "2020-03-14T19:46:45Z",
        "updatedAt" : "2020-03-14T22:59:23Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "dcb5abff-f3ef-42ad-8030-b286b7fca73d",
        "parentId" : "0c87bfc8-c664-4401-8c37-6d162d27133a",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "Well, the `tm.ensure_clean` basically resolves the file descriptor leaked by `read_csv()`, so that the enclosing `check_file_leaks` does not trigger.\r\nI always make sure that the test fails when I undo my change. And with both in place, the test succeeds even when the bug is present. Therefore the test becomes useless when both constructs are used in combination.",
        "createdAt" : "2020-03-14T22:16:18Z",
        "updatedAt" : "2020-03-14T22:59:23Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      },
      {
        "id" : "8a240c29-684c-462f-ac95-ab996880d5b0",
        "parentId" : "0c87bfc8-c664-4401-8c37-6d162d27133a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "How are you setting that up? I see this as raising on master:\r\n\r\n```python\r\nwith tm.ensure_clean() as path:\r\n    def shouldnt_leak():\r\n        try:\r\n            pd.read_csv(path)\r\n        except EmptyDataError:\r\n            pass\r\n        \r\n    check_file_leaks(shouldnt_leak)()\r\n```\r\n\r\nThough admittedly intermittently",
        "createdAt" : "2020-03-14T22:32:54Z",
        "updatedAt" : "2020-03-14T22:59:23Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "326e34d1-abd7-4c10-8c58-352bf52406c2",
        "parentId" : "0c87bfc8-c664-4401-8c37-6d162d27133a",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "That could work, because now the file leak checking is inside the `tm.ensure_clean` context manager.\r\nI used it as a decorator of the test in this fashion:\r\n```python\r\n@td.check_file_leaks\r\ndef test_bla():\r\n    with tm.ensure_clean() as path:\r\n        try:\r\n            pd.read_csv(path)\r\n        except EmptyDataError:\r\n            pass\r\n```",
        "createdAt" : "2020-03-14T22:50:55Z",
        "updatedAt" : "2020-03-14T22:59:23Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      },
      {
        "id" : "0ce015eb-ee62-4e52-bf97-793de7f55a57",
        "parentId" : "0c87bfc8-c664-4401-8c37-6d162d27133a",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "This seems to work for me, so it is now changed to use td.check_file_leaks in the right manner.",
        "createdAt" : "2020-03-14T23:00:31Z",
        "updatedAt" : "2020-03-14T23:00:32Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      }
    ],
    "commit" : "d08bc10ca07806d677e061e5309b5cb6093c6fdb",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2083,2087 @@\n\ndef test_file_descriptor_leak(all_parsers):\n    # GH 31488\n"
  },
  {
    "id" : "5d750b10-7d57-4614-8605-349b8172a8ce",
    "prId" : 35214,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35214#pullrequestreview-465218700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2eed2e7d-143f-424a-86b7-f40d7d10918e",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "1) should this be xfail?\r\n2) i think the solution will end up involving using td.check_file_leaks in a lot of places.  Is there a non-verbose way to run it once at the module level?",
        "createdAt" : "2020-08-11T03:54:31Z",
        "updatedAt" : "2020-08-11T03:54:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2ca55c20-fb32-4c2e-916e-153a2a6faf51",
        "parentId" : "2eed2e7d-143f-424a-86b7-f40d7d10918e",
        "authorId" : "68476df5-030f-41c1-b3b1-920985d63043",
        "body" : "1. Yes, it should be xfail. I'll submit a PR to fix this.\r\n2. Haven't thought about this. Might need some discussion.",
        "createdAt" : "2020-08-11T16:10:20Z",
        "updatedAt" : "2020-08-11T16:10:21Z",
        "lastEditedBy" : "68476df5-030f-41c1-b3b1-920985d63043",
        "tags" : [
        ]
      }
    ],
    "commit" : "a69ecfe138661aac02e962c792ab766f66793a87",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1153,1157 @@\n\n@pytest.mark.skip(\"unreliable test #35214\")\ndef test_warn_if_chunks_have_mismatched_type(all_parsers):\n    warning_type = None"
  },
  {
    "id" : "5bb914eb-ab70-4d6e-b23f-f4d01c9cd226",
    "prId" : 35510,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35510#pullrequestreview-460401641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eaa67f55-1bc0-4c66-97a8-87957a8fd0cd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see if u can locate this test near others that set options (not kwargs)",
        "createdAt" : "2020-08-02T12:27:41Z",
        "updatedAt" : "2020-08-02T14:57:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "03bfcd27-330d-45cd-8379-01e22bc5959d",
        "parentId" : "eaa67f55-1bc0-4c66-97a8-87957a8fd0cd",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "The others that use options seem to be in more targeted testing files (test_to_html.py, test_printing.py); this is the only one in this file",
        "createdAt" : "2020-08-02T15:19:03Z",
        "updatedAt" : "2020-08-02T15:19:03Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "fd06215f-5bda-4b27-867a-9c3af5e5256d",
        "parentId" : "eaa67f55-1bc0-4c66-97a8-87957a8fd0cd",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "kk",
        "createdAt" : "2020-08-03T23:29:05Z",
        "updatedAt" : "2020-08-03T23:29:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "872c2b4005585909c1a41cb0fb4bf65d8942dc72",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +2183,2187 @@\ndef test_read_csv_with_use_inf_as_na(all_parsers):\n    # https://github.com/pandas-dev/pandas/issues/35493\n    parser = all_parsers\n    data = \"1.0\\nNaN\\n3.0\""
  }
]