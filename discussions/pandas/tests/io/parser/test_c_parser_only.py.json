[
  {
    "id" : "66579646-3c67-42ad-b1ee-91480fd020f8",
    "prId" : 36228,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36228#pullrequestreview-486955961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c85e3dfa-3246-4867-8b25-9108bf310154",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have a test that catches if in an invalid float_precision value is passed?",
        "createdAt" : "2020-09-11T12:58:51Z",
        "updatedAt" : "2020-09-11T22:09:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9307c12c-f278-46a5-a499-393cd75bfea8",
        "parentId" : "c85e3dfa-3246-4867-8b25-9108bf310154",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "- There is no such test\r\n- Currently, in 1.1.1, if you give an incorrect value for `float_precision`, it treats it as `None`\r\n```python\r\n>>> df=pd.read_csv(\"../Misc/pandasDev/foo.csv\", float_precision=\"yo\")\r\n>>> df\r\n     A    B\r\n0  NaN   B1\r\n1  1.0  NaN\r\n>>>\r\n\r\nSo I could add code to reject invalid values and then an appropriate test.  Let me know if I should do that.",
        "createdAt" : "2020-09-11T13:59:21Z",
        "updatedAt" : "2020-09-11T22:09:28Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "6a29da19-f17f-49e2-b0e9-38610bff406a",
        "parentId" : "c85e3dfa-3246-4867-8b25-9108bf310154",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, can you add (and of course reject invalid values)",
        "createdAt" : "2020-09-11T16:33:59Z",
        "updatedAt" : "2020-09-11T22:09:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "be5910dcdd330b89f8f05620d477e58cce8e92be",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +649,653 @@\n\n@pytest.mark.parametrize(\"float_precision\", [None, \"legacy\", \"high\", \"round_trip\"])\n@pytest.mark.parametrize(\n    \"value,expected\","
  }
]