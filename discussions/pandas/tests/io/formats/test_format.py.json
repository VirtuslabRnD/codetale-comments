[
  {
    "id" : "77657c48-b564-4773-aaca-c136620658f0",
    "prId" : 19856,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19856#pullrequestreview-100627269",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e80de01f-33a3-4349-a598-f1905d3f5b2a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a test for Series as well",
        "createdAt" : "2018-03-01T11:33:57Z",
        "updatedAt" : "2018-03-01T23:05:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "39155caf-90e0-4b59-96c1-4abd1a28c583",
        "parentId" : "e80de01f-33a3-4349-a598-f1905d3f5b2a",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We don't have a repr_html for series yet.",
        "createdAt" : "2018-03-01T12:42:57Z",
        "updatedAt" : "2018-03-01T23:05:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "04b09664-1cca-4270-b3ff-e813aac0e6d2",
        "parentId" : "e80de01f-33a3-4349-a598-f1905d3f5b2a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok then!",
        "createdAt" : "2018-03-01T23:04:17Z",
        "updatedAt" : "2018-03-01T23:05:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "42224c9702da3b94bf98f2e0c17b7bea2c3826fb",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1435,1439 @@        tm.reset_display_options()\n\n    def test_repr_html_mathjax(self):\n        df = DataFrame([[1, 2], [3, 4]])\n        assert 'tex2jax_ignore' not in df._repr_html_()"
  },
  {
    "id" : "cbe32a81-affd-452d-8181-23aef42252be",
    "prId" : 21655,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21655#pullrequestreview-132792497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1613d01-862d-49ed-ae7a-e297113dcfa2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should PR  in 0.24.0 (to move this to test_decorators)",
        "createdAt" : "2018-06-28T10:06:15Z",
        "updatedAt" : "2018-07-02T15:28:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a06cffc2-9b5c-4771-9ee3-da0b056dc958",
        "parentId" : "a1613d01-862d-49ed-ae7a-e297113dcfa2",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Forgot to lay out my plan.\r\n\r\nI'd like to merge this with the `try / except`, backport to 0.23.2, and then make a PR removing this and using the `mock` fixture from https://github.com/pandas-dev/pandas/pull/20729\r\n\r\n#20729 isn't being backported, so that seems easiset.",
        "createdAt" : "2018-06-28T10:57:03Z",
        "updatedAt" : "2018-07-02T15:28:05Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4391c241e76f0b914ca3589925f31bc213f7b461",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +311,315 @@        # This is being backported, so doing it directly here.\n        try:\n            from unittest import mock\n        except ImportError:\n            mock = pytest.importorskip(\"mock\")"
  },
  {
    "id" : "2f4fdc02-20a9-4e14-bef2-b46da76cd3fe",
    "prId" : 22308,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22308#pullrequestreview-177955977",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71cc3e0d-3698-4e90-90fe-f04dd93e63fc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you would need to add tests for to_latex and to_html in the appropriate files",
        "createdAt" : "2018-11-23T14:57:33Z",
        "updatedAt" : "2018-11-26T12:27:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9666bd59a6e2b0ac9ca6ba0f620cb559f7a4e26",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1360,1364 @@        assert df_s == expected\n\n    def test_to_string_float_format_no_fixed_width(self):\n\n        # GH 21625"
  },
  {
    "id" : "65a23ea6-4db5-4d62-a4e5-b30aa7f04867",
    "prId" : 22987,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22987#pullrequestreview-174897899",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c207306e-af2a-4c7b-a667-a28d93974f10",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "nitpick: we have a pytest fixture formock now, that does the try / except / skip done above.\r\n\r\nI think it'd be cleanest to split this into a new test here, and accept the `mock` parameter.\r\n\r\n```python\r\ndef test_repr_truncates_terminal_size_full(self, mock):\r\n    ...\r\n```\r\n\r\nAny if you're feeling adventurous, you could change the try / except / skip mock import above to use the fixture as well. Not a big deal though.",
        "createdAt" : "2018-11-14T14:53:22Z",
        "updatedAt" : "2018-11-14T21:20:09Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "82fa50cc6ab636e40b6ea141bf092d5911f2a9a0",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +339,343 @@\n        assert df2.columns[0] in result.split('\\n')[0]\n\n    def test_repr_truncates_terminal_size_full(self, mock):\n        # GH 22984 ensure entire window is filled"
  },
  {
    "id" : "0e45a2eb-e863-4cfd-a4d7-57db0445deef",
    "prId" : 23614,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23614#pullrequestreview-173890827",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d88139e4-fe8f-4443-87de-913cd0b3542e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the issue number",
        "createdAt" : "2018-11-11T14:46:50Z",
        "updatedAt" : "2018-11-15T14:56:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e04cb998-7ca3-40ca-a2bb-71bf19b8ace3",
        "parentId" : "d88139e4-fe8f-4443-87de-913cd0b3542e",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Small thing, but I think we consistently use the format `GH 23614`. \r\n\r\n@gfyoung I think you changed some in a recent PR, can you confirm?",
        "createdAt" : "2018-11-12T13:12:13Z",
        "updatedAt" : "2018-11-15T14:56:32Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddf42c77f64aa874742d2b91ecc51fcb0dee3c7d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1461,1465 @@    def test_to_string_decimal(self):\n        # Issue #23614\n        df = DataFrame({'A': [6.0, 3.1, 2.2]})\n        expected = '     A\\n0  6,0\\n1  3,1\\n2  2,2'\n        assert df.to_string(decimal=',') == expected"
  },
  {
    "id" : "b7fe0645-2768-48b3-a1e4-576020b97325",
    "prId" : 24624,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24624#pullrequestreview-189514270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b2c3b24-eccb-48f4-b793-8c5434bc2245",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Does this reset the attribute after the test or do we need to use the context manager?",
        "createdAt" : "2019-01-04T20:09:54Z",
        "updatedAt" : "2019-01-04T20:28:02Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "75ca9e58-5d7b-4869-8230-db659329dca7",
        "parentId" : "6b2c3b24-eccb-48f4-b793-8c5434bc2245",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "@WillAyd the context manager is only required when patching might break `pytest` or where it is required to undo a patch before the test ends. the `monkeypatch` fixture will undo all patches on test teardown.",
        "createdAt" : "2019-01-04T20:19:14Z",
        "updatedAt" : "2019-01-04T20:28:02Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "9460d52587009011414c72a8c32d8bcd4ec8057e",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +310,314 @@\n        terminal_size = (118, 96)\n        monkeypatch.setattr('pandas.io.formats.console.get_terminal_size',\n                            lambda: terminal_size)\n        monkeypatch.setattr('pandas.io.formats.format.get_terminal_size',"
  },
  {
    "id" : "d5f5e0c3-2e8b-48dc-a04b-948cf1997fd7",
    "prId" : 24863,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24863#pullrequestreview-195446532",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f389366-29f4-4c97-92be-cdfd2c83b511",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "As a general principle, we try to include the original example from the issue in the tests as well, if possible.  I'm not sure I see that here.",
        "createdAt" : "2019-01-23T07:27:06Z",
        "updatedAt" : "2019-01-23T10:38:20Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "13f12540-e267-4a97-a8c8-bc42c6adee7c",
        "parentId" : "8f389366-29f4-4c97-92be-cdfd2c83b511",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The original issue was with rounding (I suppose that was how the issue was discovered), but the rounding itself is not related to it, so I think this test case is actually better.",
        "createdAt" : "2019-01-23T10:31:04Z",
        "updatedAt" : "2019-01-23T10:38:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e19321b185bb021aa069ff235c3d659d9cd34a5b",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +1498,1502 @@                    '5  4.0     bar')\n        assert result == expected\n\n    def test_to_string_decimal(self):\n        # Issue #23614"
  },
  {
    "id" : "255f1bc6-6c96-4cfa-bc83-1c1bd0b33d57",
    "prId" : 25745,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25745#pullrequestreview-215333080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56826b2b-a70d-4009-9e41-1302243339db",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "What did this test used to output (before your changes) ?",
        "createdAt" : "2019-03-16T22:38:19Z",
        "updatedAt" : "2019-04-12T14:24:49Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "9d0db7d2-5d46-4aa5-8c5f-29525d59d828",
        "parentId" : "56826b2b-a70d-4009-9e41-1302243339db",
        "authorId" : "ef214f38-8bb9-43bf-9518-0abe37b71c11",
        "body" : "Before my changes the display.precision that is set to 5 would have been ineffective. The result would be exactly the same as the input i.e. `(0.4467846931321966+0.0715185102060818j) ...` and so on.",
        "createdAt" : "2019-03-16T23:13:30Z",
        "updatedAt" : "2019-04-12T14:24:49Z",
        "lastEditedBy" : "ef214f38-8bb9-43bf-9518-0abe37b71c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fd69e9e4cd8e553470e3c5c6676ce5807cbf711",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1383,1387 @@                        '2  0.26975+0.32506j')\n            assert result == expected\n\n    def test_to_string_ascii_error(self):\n        data = [('0  ', '                        .gitignore ', '     5 ',"
  },
  {
    "id" : "6bb30a47-844c-424c-ba18-5d64ed804201",
    "prId" : 25745,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25745#pullrequestreview-226037199",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a608ca0-ee04-4df3-b702-0344b30484a4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the gh issue number as a comment",
        "createdAt" : "2019-04-12T11:50:41Z",
        "updatedAt" : "2019-04-12T14:24:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fd69e9e4cd8e553470e3c5c6676ce5807cbf711",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1373,1377 @@    def test_to_string_complex_float_formatting(self):\n        # GH #25514\n        with pd.option_context('display.precision', 5):\n            df = DataFrame({'x': [\n                (0.4467846931321966 + 0.0715185102060818j),"
  },
  {
    "id" : "acb57671-0f88-42bc-93bd-be877f7b230a",
    "prId" : 26768,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26768#pullrequestreview-247761182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09313f58-7f39-45a5-a1e4-2d2c02d4f69a",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Reference issue number as a comment above",
        "createdAt" : "2019-06-10T18:10:26Z",
        "updatedAt" : "2019-06-10T23:03:54Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "293da5516581120f3a569fa37d790597641d2a5d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2743,2747 @@def test_format_percentiles_integer_idx():\n    # Issue #26660\n    result = fmt.format_percentiles(np.linspace(0, 1, 10 + 1))\n    expected = ['0%', '10%', '20%', '30%', '40%', '50%',\n                '60%', '70%', '80%', '90%', '100%']"
  },
  {
    "id" : "e63d1b39-3174-4bce-8d63-113a6236fecf",
    "prId" : 26768,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26768#pullrequestreview-247886148",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de1e75ea-ccf4-4e3b-8bdc-a2c45a531f2c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add an additional test that uses .describe, like you did in the OP: https://github.com/pandas-dev/pandas/issues/26660#issue-452509070, add in pandas/tests/frame/test_analytics",
        "createdAt" : "2019-06-10T22:03:01Z",
        "updatedAt" : "2019-06-10T23:03:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b91f64fc-f269-4093-8951-548d3d1ee0a0",
        "parentId" : "de1e75ea-ccf4-4e3b-8bdc-a2c45a531f2c",
        "authorId" : "c388e804-6c0e-4895-9c6d-5837d398c13a",
        "body" : "I've added the test you mentioned. Please comment if it is not sufficient.",
        "createdAt" : "2019-06-10T23:04:21Z",
        "updatedAt" : "2019-06-10T23:04:21Z",
        "lastEditedBy" : "c388e804-6c0e-4895-9c6d-5837d398c13a",
        "tags" : [
        ]
      }
    ],
    "commit" : "293da5516581120f3a569fa37d790597641d2a5d",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +2740,2744 @@        fmt.format_percentiles([0.1, 0.5, 'a'])\n\n\ndef test_format_percentiles_integer_idx():\n    # Issue #26660"
  },
  {
    "id" : "b46ab86d-63f1-48f8-bd35-84149f1772aa",
    "prId" : 28951,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28951#pullrequestreview-305282497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d8a854d-911d-45ab-a2f8-8e141daaa744",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you split the expectation of raising into a different test called `test_filepath_or_buffer_arg_raises`? Easier convention to follow",
        "createdAt" : "2019-10-21T16:43:04Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "9367f911-aa44-4d9d-b513-5b095795c19b",
        "parentId" : "2d8a854d-911d-45ab-a2f8-8e141daaa744",
        "authorId" : "145f6b25-3ffb-418f-8728-6f6e56eb7eca",
        "body" : "Do you mean we should have a separate function called `test_filepath_or_buffer_arg` that tests if `to_string`, `to_latex`, `to_html` work with different `file_path_or_buffer`, and a separate `test_filepath_or_buffer_arg_raises` that also takes into account the encoding?",
        "createdAt" : "2019-10-21T17:37:03Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "145f6b25-3ffb-418f-8728-6f6e56eb7eca",
        "tags" : [
        ]
      },
      {
        "id" : "357ef89f-5be3-4ed1-af45-68ab35c3c2ff",
        "parentId" : "2d8a854d-911d-45ab-a2f8-8e141daaa744",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm I guess I'm just struggling on readability of this test. Is this generating a Cartesian product with the `filepath_or_buffer` fixture or is it zipped up as an argument because it has the same length?",
        "createdAt" : "2019-10-22T00:51:00Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "8c9273b4-6174-48ee-a4ba-91d7fce946b5",
        "parentId" : "2d8a854d-911d-45ab-a2f8-8e141daaa744",
        "authorId" : "145f6b25-3ffb-418f-8728-6f6e56eb7eca",
        "body" : "@simonjayhawkins \r\nhttps://github.com/pandas-dev/pandas/blob/835cdb8f81dea31d2c41eeac371ec1d519f2fb91/pandas/tests/io/formats/test_format.py#L3244-L3246\r\n\r\ngenerates Cartesian product.",
        "createdAt" : "2019-10-22T05:09:23Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "145f6b25-3ffb-418f-8728-6f6e56eb7eca",
        "tags" : [
        ]
      },
      {
        "id" : "a5999871-1410-4868-af40-e75da63af8da",
        "parentId" : "2d8a854d-911d-45ab-a2f8-8e141daaa744",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "The behaviour depends on the combination of `buf` and `encoding`, so I thought best to have a single test with the permutations of `buf` and `encoding`.\r\n\r\nIMO separate tests could make this less clear, or leave gaps.\r\n",
        "createdAt" : "2019-10-22T09:40:15Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "4d92fee3-f283-4374-a939-d801815b7057",
        "parentId" : "2d8a854d-911d-45ab-a2f8-8e141daaa744",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "does a refactor make it clearer?\r\n\r\n```diff\r\ndiff --git a/pandas/tests/io/formats/test_format.py b/pandas/tests/io/formats/test_format.py\r\nindex f48d55a05..300edc3e2 100644\r\n--- a/pandas/tests/io/formats/test_format.py\r\n+++ b/pandas/tests/io/formats/test_format.py\r\n@@ -3,6 +3,7 @@ Test output formatting for Series/DataFrame, including to_string & reprs\r\n \"\"\"\r\n \r\n from datetime import datetime\r\n+from functools import partial\r\n from io import StringIO\r\n import itertools\r\n from operator import methodcaller\r\n@@ -3254,17 +3255,20 @@ def test_filepath_or_buffer_arg(\r\n     df = float_frame\r\n     if encoding == \"gbk\":\r\n         float_frame.iloc[0, 0] = \"造成输出中文显示乱码\"\r\n+\r\n+    do_test = partial(getattr(df, method), buf=filepath_or_buffer, encoding=encoding)\r\n+\r\n     if filepath_or_buffer_id not in [\"string\", \"pathlike\"] and encoding is not None:\r\n         with pytest.raises(\r\n             ValueError, match=\"buf is not a file name and encoding is specified.\"\r\n         ):\r\n-            getattr(df, method)(buf=filepath_or_buffer, encoding=encoding)\r\n+            do_test()\r\n     elif encoding == \"foo\":\r\n         with pytest.raises(LookupError, match=\"unknown encoding\"):\r\n-            getattr(df, method)(buf=filepath_or_buffer, encoding=encoding)\r\n+            do_test()\r\n     else:\r\n         expected = getattr(df, method)()\r\n-        getattr(df, method)(buf=filepath_or_buffer, encoding=encoding)\r\n+        do_test()\r\n         assert_filepath_or_buffer_equals(expected)\r\n \r\n```",
        "createdAt" : "2019-10-22T10:01:43Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "0f04e875-96ca-48a3-a3db-65df9c8dabbe",
        "parentId" : "2d8a854d-911d-45ab-a2f8-8e141daaa744",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Oh OK thanks for clarifying. Nice idea but I don't think the partial would change that much, so OK as is (though if you want the partial change feel free as well)",
        "createdAt" : "2019-10-22T15:04:20Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8917decc3adf7f7f4f40e6b2debaa820f9776f5",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +3257,3261 @@    df = DataFrame([data])\n\n    if filepath_or_buffer_id not in [\"string\", \"pathlike\"] and encoding is not None:\n        with pytest.raises(\n            ValueError, match=\"buf is not a file name and encoding is specified.\""
  },
  {
    "id" : "b174498f-5cca-4d72-8933-bfd9f2da34a0",
    "prId" : 28951,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28951#pullrequestreview-304752270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d030c62b-3d5b-43aa-81a4-785ccb183ff5",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think you can remove the invalid encoding; this doesn't test any function pandas provides rather just builtin Python functionality",
        "createdAt" : "2019-10-21T16:44:01Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "1471746f-29e1-449e-9ea5-fda4df3b10d2",
        "parentId" : "d030c62b-3d5b-43aa-81a4-785ccb183ff5",
        "authorId" : "145f6b25-3ffb-418f-8728-6f6e56eb7eca",
        "body" : "@simonjayhawkins thoughts?",
        "createdAt" : "2019-10-21T17:43:36Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "145f6b25-3ffb-418f-8728-6f6e56eb7eca",
        "tags" : [
        ]
      },
      {
        "id" : "4127a21e-b77f-4dc2-929c-e40ab72d7c34",
        "parentId" : "d030c62b-3d5b-43aa-81a4-785ccb183ff5",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "The reason I asked for it to be added was so that the precedence of the Exceptions was checked and to confirm the encoding parameter was passed to the builtin function.",
        "createdAt" : "2019-10-21T17:46:08Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "4c64a895-ba11-4090-a423-42efa6c84413",
        "parentId" : "d030c62b-3d5b-43aa-81a4-785ccb183ff5",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Oh OK my mistake - just didn't see that was asked for previously (lost in GH comments)",
        "createdAt" : "2019-10-21T17:47:11Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "97746cd9-66f8-475a-a9fa-b8aee18a2e00",
        "parentId" : "d030c62b-3d5b-43aa-81a4-785ccb183ff5",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "so agree with https://github.com/pandas-dev/pandas/pull/28951#discussion_r337124564 but this sort of compensates. If we conform the encoding is passed, then reading back in is only testing Python functionality.\r\n\r\nfloat_frame will probably work with any encoding, so maybe best to modify float_frame if encoding==\"gbq\".",
        "createdAt" : "2019-10-21T17:54:44Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "7cab4cd8-f41d-4e0b-92ba-7d70a9096228",
        "parentId" : "d030c62b-3d5b-43aa-81a4-785ccb183ff5",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "this should work...\r\n\r\n```diff\r\ndiff --git a/pandas/tests/io/formats/test_format.py b/pandas/tests/io/formats/test_format.py\r\nindex 096fc6cb4..490cecb41 100644\r\n--- a/pandas/tests/io/formats/test_format.py\r\n+++ b/pandas/tests/io/formats/test_format.py\r\n@@ -73,17 +73,19 @@ def filepath_or_buffer(filepath_or_buffer_id, tmp_path):\r\n \r\n \r\n @pytest.fixture\r\n-def assert_filepath_or_buffer_equals(filepath_or_buffer, filepath_or_buffer_id):\r\n+def assert_filepath_or_buffer_equals(\r\n+    filepath_or_buffer, filepath_or_buffer_id, encoding\r\n+):\r\n     \"\"\"\r\n     Assertion helper for checking filepath_or_buffer.\r\n     \"\"\"\r\n \r\n     def _assert_filepath_or_buffer_equals(expected):\r\n         if filepath_or_buffer_id == \"string\":\r\n-            with open(filepath_or_buffer) as f:\r\n+            with open(filepath_or_buffer, encoding=encoding) as f:\r\n                 result = f.read()\r\n         elif filepath_or_buffer_id == \"pathlike\":\r\n-            result = filepath_or_buffer.read_text()\r\n+            result = filepath_or_buffer.read_text(encoding=encoding)\r\n         elif filepath_or_buffer_id == \"buffer\":\r\n             result = filepath_or_buffer.getvalue()\r\n         assert result == expected\r\n@@ -3250,6 +3252,8 @@ def test_filepath_or_buffer_arg(\r\n     filepath_or_buffer_id,\r\n ):\r\n     df = float_frame\r\n+    if encoding == \"gbk\":\r\n+        float_frame.iloc[0, 0] = \"造成输出中文显示乱码\"\r\n \r\n     if filepath_or_buffer_id not in [\"string\", \"pathlike\"] and encoding is not None:\r\n         with pytest.raises(\r\n```",
        "createdAt" : "2019-10-21T18:12:32Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8917decc3adf7f7f4f40e6b2debaa820f9776f5",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +3262,3266 @@        ):\n            getattr(df, method)(buf=filepath_or_buffer, encoding=encoding)\n    elif encoding == \"foo\":\n        with pytest.raises(LookupError, match=\"unknown encoding\"):\n            getattr(df, method)(buf=filepath_or_buffer, encoding=encoding)"
  },
  {
    "id" : "15fb7e12-bc26-4853-ad54-1400f767a499",
    "prId" : 28951,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28951#pullrequestreview-304732031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9d4768d-43a1-42e2-889e-3b8055d9bb76",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is this actually asserting anything? It doesn't seem to respect the encoding when reading back in; I think need a test case where the encoding actually makes a difference and validate on read/write",
        "createdAt" : "2019-10-21T16:46:57Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "42df022e-bf53-4faa-9942-76fb13ec4f02",
        "parentId" : "c9d4768d-43a1-42e2-889e-3b8055d9bb76",
        "authorId" : "145f6b25-3ffb-418f-8728-6f6e56eb7eca",
        "body" : "When the test is split into two tests `test_filepath_or_buffer_arg` and `test_filepath_or_buffer_arg_raises` , I think this won't be a problem",
        "createdAt" : "2019-10-21T17:39:03Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "145f6b25-3ffb-418f-8728-6f6e56eb7eca",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8917decc3adf7f7f4f40e6b2debaa820f9776f5",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +3268,3272 @@        expected = getattr(df, method)()\n        getattr(df, method)(buf=filepath_or_buffer, encoding=encoding)\n        assert_filepath_or_buffer_equals(expected)\n\n"
  },
  {
    "id" : "ab41726f-0b60-4068-8345-11994eb9f70d",
    "prId" : 28951,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28951#pullrequestreview-306038662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f8a9497-3472-4ea3-badd-5dc25f50e8db",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is there a reason for this to be a fixture instead of just a global function? This way of invoking the function seems very magical; I think easier if not a fixture",
        "createdAt" : "2019-10-23T15:14:34Z",
        "updatedAt" : "2019-10-23T15:14:37Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d58a9d9f-9ef0-428b-a6f9-97fb8b02a42c",
        "parentId" : "7f8a9497-3472-4ea3-badd-5dc25f50e8db",
        "authorId" : "145f6b25-3ffb-418f-8728-6f6e56eb7eca",
        "body" : "Shall I make this change as a part of this PR itself.",
        "createdAt" : "2019-10-23T16:07:45Z",
        "updatedAt" : "2019-10-23T16:07:46Z",
        "lastEditedBy" : "145f6b25-3ffb-418f-8728-6f6e56eb7eca",
        "tags" : [
        ]
      },
      {
        "id" : "bf7a5b84-04ed-4fcf-8c0d-50de6899da00",
        "parentId" : "7f8a9497-3472-4ea3-badd-5dc25f50e8db",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm sorry thought it was a part of this PR. I think OK to do here but let's see what @simonjayhawkins thinks",
        "createdAt" : "2019-10-23T16:09:25Z",
        "updatedAt" : "2019-10-23T16:09:26Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "43c1361c-5d7a-419c-bc78-dcff6ae5ae49",
        "parentId" : "7f8a9497-3472-4ea3-badd-5dc25f50e8db",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "this is fine as is.",
        "createdAt" : "2019-10-23T16:48:47Z",
        "updatedAt" : "2019-10-23T16:49:09Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8917decc3adf7f7f4f40e6b2debaa820f9776f5",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +3268,3272 @@        expected = getattr(df, method)()\n        getattr(df, method)(buf=filepath_or_buffer, encoding=encoding)\n        assert_filepath_or_buffer_equals(expected)\n\n"
  },
  {
    "id" : "ab5259de-72cd-4aff-958f-b9441d0e0fb1",
    "prId" : 30222,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30222#pullrequestreview-331045377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78dfee04-ba99-4f30-aa04-30324be7855f",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "`DataFrame` is imported directly already FYI.\r\n\r\nSimilar comments for other files.",
        "createdAt" : "2019-12-12T07:59:41Z",
        "updatedAt" : "2019-12-12T18:25:48Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce531f7b2a386fc449f0c9cdc7fe27e5baa2f6fa",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1115,1119 @@        result2 = repr(frame.iloc[:5])\n        assert result.startswith(result2)\n\n    def test_datetimelike_frame(self):\n"
  },
  {
    "id" : "c56576c2-a2be-48a2-b353-debe3c6ddb78",
    "prId" : 32903,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32903#pullrequestreview-431640056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9496c87-9f2a-4f95-bb9c-63ba2ff6da57",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you split all of the error testing into another test called `test_to_string_with_column_specific_col_space_raises`? We use that convention often throughout the tests",
        "createdAt" : "2020-06-16T15:42:24Z",
        "updatedAt" : "2020-06-18T06:38:43Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d14cff25d3a22b6d36351d1f84b0d81692bbb14",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1051,1055 @@        df = DataFrame(np.random.random(size=(3, 3)), columns=[\"a\", \"b\", \"c\"])\n\n        msg = (\n            \"Col_space length\\\\(\\\\d+\\\\) should match \"\n            \"DataFrame number of columns\\\\(\\\\d+\\\\)\""
  },
  {
    "id" : "8a7483ce-942b-4ff3-bcf5-6a4cceef086a",
    "prId" : 33771,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33771#pullrequestreview-401403778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "170cac09-bba1-4429-b48e-5a9d2e6463bd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a test which more closely replicates the bug you are seing. IIRC you are essentially embedding ndim > 2 arrays in a Series / DataFrame? ",
        "createdAt" : "2020-04-24T21:44:16Z",
        "updatedAt" : "2020-05-01T00:29:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e1172550-bab5-40c9-be94-47c2a2a0e22a",
        "parentId" : "170cac09-bba1-4429-b48e-5a9d2e6463bd",
        "authorId" : "296ac7bb-111f-4c6e-bedc-692544151c69",
        "body" : "I've added an additional test case under `TestGenericArrayFormatter` in 17f167a. The new test uses a stub extension type to replicate the original problem that I described in #33770 .",
        "createdAt" : "2020-04-27T23:47:08Z",
        "updatedAt" : "2020-05-01T00:29:06Z",
        "lastEditedBy" : "296ac7bb-111f-4c6e-bedc-692544151c69",
        "tags" : [
        ]
      }
    ],
    "commit" : "c41ebe38697c6a506881064e011f8044827ccbd4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2812,2816 @@\nclass TestGenericArrayFormatter:\n    def test_1d_array(self):\n        # GenericArrayFormatter is used on types for which there isn't a dedicated\n        # formatter. np.bool is one of those types."
  }
]