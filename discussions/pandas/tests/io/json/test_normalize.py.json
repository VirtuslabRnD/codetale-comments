[
  {
    "id" : "529ac487-37e9-45c0-8e04-1e60b6a976e2",
    "prId" : 21164,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21164#pullrequestreview-126859042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "872def2e-113c-47c4-9860-b1a2e1d48610",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I was reading through the commentary of the issue and noticed there was some confusion on the topic, but I don't understand why we would want to drop the `'id': None` record here - is that solely driven by the `elif` statement? If so, perhaps we don't need that at all?",
        "createdAt" : "2018-05-26T23:22:31Z",
        "updatedAt" : "2018-06-07T12:16:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "90ef1e07-a3bc-40f8-a872-9fd116222d36",
        "parentId" : "872def2e-113c-47c4-9860-b1a2e1d48610",
        "authorId" : "57785b86-6207-4652-a0f4-54fc42be097a",
        "body" : "I know I'm late replying to this, but I agree. I don't understand the intention of dropping the top level `'id': None`. I would much rather know explicitly that the value for a field is None than to be guessing or writing extra checks for whether the field exists.",
        "createdAt" : "2018-06-07T16:25:46Z",
        "updatedAt" : "2018-06-07T16:25:46Z",
        "lastEditedBy" : "57785b86-6207-4652-a0f4-54fc42be097a",
        "tags" : [
        ]
      }
    ],
    "commit" : "92a62637a9dedbed9523568dee090f84d97b7b39",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +424,428 @@        result = nested_to_record(data)\n        expected = {\n            'location.id': None,\n            'location.country.id': None,\n            'location.country.state.id': None,"
  },
  {
    "id" : "45c8a0f8-2472-423f-bca5-644eead2a127",
    "prId" : 21164,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21164#pullrequestreview-123824695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc637a58-6a7c-4016-8240-2a3bdbb383f6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does this have the same result if id is NOT repeated (with None), just missing at various levels? e.g. try with a single id with None at the top and bottom levels (in another case, leave this one as well)",
        "createdAt" : "2018-05-29T00:45:16Z",
        "updatedAt" : "2018-06-07T12:16:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "92a62637a9dedbed9523568dee090f84d97b7b39",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +408,412 @@        # make sure it doesnt do a new_d.pop twice and except\n        data = {\n            \"id\": None,\n            \"location\": {\n                \"id\": None,"
  },
  {
    "id" : "bfb6de4c-fdbb-4e3f-a358-83d412ad63ae",
    "prId" : 22804,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22804#pullrequestreview-157958100",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68cc5d6c-614b-46db-b643-31f5cd26b1c3",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "From the comments in the referenced issue I donâ€™t think we always assume this to be a list. Can you parametrize the test to be both with and without a list?",
        "createdAt" : "2018-09-22T17:15:05Z",
        "updatedAt" : "2018-12-12T22:44:12Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "c2add1fc-1e39-4c98-bd81-714ae6127e78",
        "parentId" : "68cc5d6c-614b-46db-b643-31f5cd26b1c3",
        "authorId" : "2317eb5e-8d95-42b7-8bef-7cf737112473",
        "body" : "I think we didn't understand each other on what is a list in the function `_recursive_extract`.\r\nConsider this test case:\r\n```\r\n    d = {'state': 'Florida',\r\n             'governor': 'Rick Scott',\r\n             'counties': [\r\n                 {'name': 'Dade', 'cities': [\r\n                     {'city_name': 'Miami', 'population': 450000},\r\n                     {'city_name': 'Kendall'}]},\r\n                 {'name': 'Broward', 'cities': [\r\n                     {'city_name': 'Fort Lauderdale'},\r\n                     {'city_name': 'Miramar'}]}]}\r\n    result = json_normalize(d, record_path=['counties', 'cities'])\r\n```\r\nAfter one recursive call of `_recursive_extract`, `data` is now `d['counties']` which is a list.\r\nThis was handled correctly in the current code. I don't think we need to add a test for this as it was covered by the existing tests.\r\n\r\nThe added new test case exposes a case where `data` is not a list. In this test, after one call, `data` is `{'governer' : ..., 'counties': [...]}` which is a dict. The old code did not handle this case, hence it raised exception while trying to pull the fields.",
        "createdAt" : "2018-09-24T00:23:03Z",
        "updatedAt" : "2018-12-12T22:44:12Z",
        "lastEditedBy" : "2317eb5e-8d95-42b7-8bef-7cf737112473",
        "tags" : [
        ]
      }
    ],
    "commit" : "db241245ff0b27ffcfdd99d6d04470f7fb2439df",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +135,139 @@                'info': {\n                    'governor': 'Rick Scott',\n                    'counties': [{'name': 'Dade', 'population': 12345},\n                                 {'name': 'Broward', 'population': 40000},\n                                 {'name': 'Palm Beach', 'population': 60000}]}}"
  },
  {
    "id" : "c1f681db-8d7b-4f3a-bdc2-da9d177b3e0d",
    "prId" : 25619,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25619#pullrequestreview-212616405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9e0a511-12ac-4f21-8a5a-921fb02ae9f3",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Hmm...I see conflicting ways in which we have tested for correctness:\r\n\r\n* `tm.assert_frame_equal`\r\n* Converting to `dict` and then checking equality\r\n\r\nI see you have chosen the former.  In which case, would it be possible to tweak the test so that you don't need to pass in `check_like=True` ?",
        "createdAt" : "2019-03-09T18:10:39Z",
        "updatedAt" : "2019-03-13T15:22:58Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "8bb515ea-592b-4725-875c-04d8b2ea05b2",
        "parentId" : "a9e0a511-12ac-4f21-8a5a-921fb02ae9f3",
        "authorId" : "2fbaf3ae-3b69-478e-9217-ba570ca84548",
        "body" : "The reason I added `check_like=True` is because the test suit would fail on some platforms because the columns were not in the same order.\r\n\r\nPerhaps I should convert to a `dict` instead?",
        "createdAt" : "2019-03-09T18:21:47Z",
        "updatedAt" : "2019-03-13T15:22:58Z",
        "lastEditedBy" : "2fbaf3ae-3b69-478e-9217-ba570ca84548",
        "tags" : [
        ]
      },
      {
        "id" : "2bc5238d-6391-4487-9b79-443fb3c357b7",
        "parentId" : "a9e0a511-12ac-4f21-8a5a-921fb02ae9f3",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "That also works.\r\n\r\n> because the test suit would fail on some platforms because the columns were not in the same order.\r\n\r\nIndeed.  That's why I was asking if you could \"tweak it\" so that you could guarantee the same column order (passing in a `dict` to `DataFrame` cannot make such a guarantee cross-platform unfortunately)",
        "createdAt" : "2019-03-09T18:32:30Z",
        "updatedAt" : "2019-03-13T15:22:58Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "95af25f1-26bc-4f74-96e9-51de716f0c64",
        "parentId" : "a9e0a511-12ac-4f21-8a5a-921fb02ae9f3",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What is the `[columns]` needed here for? Would be preferable to just do `tm.assert_frame_equal(result, expected)`. \r\n\r\nWould be more explicit order-wise if you constructed the expected DataFrame from a list of lists rather than dict",
        "createdAt" : "2019-03-10T18:48:05Z",
        "updatedAt" : "2019-03-13T15:22:58Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "35126174-eceb-4d0c-a6c9-5cd7593cacce",
        "parentId" : "a9e0a511-12ac-4f21-8a5a-921fb02ae9f3",
        "authorId" : "2fbaf3ae-3b69-478e-9217-ba570ca84548",
        "body" : "I will do that yes",
        "createdAt" : "2019-03-10T18:55:22Z",
        "updatedAt" : "2019-03-13T15:22:58Z",
        "lastEditedBy" : "2fbaf3ae-3b69-478e-9217-ba570ca84548",
        "tags" : [
        ]
      }
    ],
    "commit" : "57e5b2953548154b41c243d9232cf9023fe8186e",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +382,386 @@        expected = DataFrame(ex_data, columns=columns)\n        tm.assert_frame_equal(result, expected)\n\n    def test_donot_drop_nonevalues(self):\n        # GH21356"
  }
]