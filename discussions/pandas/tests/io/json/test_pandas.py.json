[
  {
    "id" : "25f6d249-ffef-47db-ba66-d419adc3db77",
    "prId" : 18591,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18591#pullrequestreview-82352578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d28b99c-9375-49b3-986a-3c215a47818f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "nice!",
        "createdAt" : "2017-12-10T14:49:32Z",
        "updatedAt" : "2017-12-10T14:49:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b204d093f20c056c0e12578152df0215e7bcc491",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1150,1154 @@        assert size_before == size_after\n\n    @pytest.mark.parametrize('data, expected', [\n        (DataFrame([[1, 2], [4, 5]], columns=['a', 'b']),\n            {'columns': ['a', 'b'], 'data': [[1, 2], [4, 5]]}),"
  },
  {
    "id" : "72176f84-5294-402e-a3fc-a33ac9c0150e",
    "prId" : 19535,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19535#pullrequestreview-130633035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f4f6925-f3d7-4a47-acff-51c4b91e102e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I learned that autouse fixtures can include `yield`, letting us do the tearndown here which is nice.",
        "createdAt" : "2018-03-27T14:18:52Z",
        "updatedAt" : "2018-06-26T15:01:36Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c271465b-db24-4480-8569-e2305d5a9818",
        "parentId" : "8f4f6925-f3d7-4a47-acff-51c4b91e102e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "On the other hand, it also makes this more \"complex\" to understand IMO (the `teardown_method` is rather explicit and easy to understand what is going on, while the `yield` is a less standard fancy feature of pytest ). \r\nHas the `autouse=True` other advantages? (what's the reason you needed that here?)",
        "createdAt" : "2018-03-27T15:12:24Z",
        "updatedAt" : "2018-06-26T15:01:36Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d883a6ba-4070-4038-9461-99af0fb1634f",
        "parentId" : "8f4f6925-f3d7-4a47-acff-51c4b91e102e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Two things\r\n\r\n1. `datapath` can only be called inside a test, since it inspects the `request` context, to see if `--strict-data-files` is set.\r\n2. datapath is a fixture, and you can't mix xUnit style `setup_method` with fixtures. `autouse` fixtures are the easiest way to replicate xUnit stuff, while being able to use fixtures.",
        "createdAt" : "2018-03-27T15:18:13Z",
        "updatedAt" : "2018-06-26T15:01:36Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "df4242bc-ba7d-4230-b2d8-3801dffd5812",
        "parentId" : "8f4f6925-f3d7-4a47-acff-51c4b91e102e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I've done this myself a few times so wanted to chime in. `autouse=True` allows the fixture to yield every test within it's scope without having to explicitly decorating or passing that fixture as an arg.\r\n\r\nThis approach is more in line with how pytest suggests doing setup/teardown (see [here](https://docs.pytest.org/en/2.7.3/fixture.html#fixture)) so I think that's a +1 for it. It also gives you potential visibility into the context of the yield tests (ex: here I think you could replace the `datapath` fixture usage as an argument via an assignment to `self.datapath` before yielding)",
        "createdAt" : "2018-03-27T15:21:40Z",
        "updatedAt" : "2018-06-26T15:01:36Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "36a1a900-b8bd-4334-87f8-597f35b7e597",
        "parentId" : "8f4f6925-f3d7-4a47-acff-51c4b91e102e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, that's a good reason to use an autouse fixture here in this case.\r\n\r\n(you don't need to convince me of the benefit of fixtures in general :), however, I think many people are not that familiar with all those pytest special features and it *has* a steeper learning curve IMO, so there can be a balance in how fancy we go)",
        "createdAt" : "2018-03-27T15:27:04Z",
        "updatedAt" : "2018-06-26T15:01:36Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e2f7a761-2c7e-407e-929f-1a18f4431f95",
        "parentId" : "8f4f6925-f3d7-4a47-acff-51c4b91e102e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah. When documenting this, I'll recommend against autouse for cases like this. I think it'd be better to just have a `categorical` fixture and accept that in the test. But that would have meant a lot more potential for breaking things in this PR :)",
        "createdAt" : "2018-03-27T15:32:14Z",
        "updatedAt" : "2018-06-26T15:01:36Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "605846a3-e679-4cda-8052-94331c08ef16",
        "parentId" : "8f4f6925-f3d7-4a47-acff-51c4b91e102e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah we should really not use this pattern, rather changing to all fixtures. as a temporary workaround this ok, can you create an issue to 'fix' this properly though.",
        "createdAt" : "2018-06-21T00:28:25Z",
        "updatedAt" : "2018-06-26T15:01:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbe0c5758ee7f67474ef63f57b59dbd6d066c4bc",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +61,65 @@        self.categorical = _cat_frame.copy()\n\n        yield\n\n        del self.dirpath"
  },
  {
    "id" : "2d0b3294-9700-4303-bcea-a2bcdc33fdc7",
    "prId" : 21986,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21986#pullrequestreview-140545384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6805dce6-a849-4229-a28e-7c57fbb7b805",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "This test should hit the modification made here: https://github.com/mroeschke/pandas/blob/0d7f07783ad9a42bb3fc7f0e3dda0c01b877fe57/pandas/io/json/json.py#L550",
        "createdAt" : "2018-07-26T00:32:35Z",
        "updatedAt" : "2018-07-28T18:53:13Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "05e4a36cd7d5c8449e362fc30fca03cf867144e0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +643,647 @@        assert_series_equal(result, s, check_index_type=False)\n\n    def test_series_with_dtype(self):\n        # GH 21986\n        s = Series([4.56, 4.56, 4.56])"
  }
]