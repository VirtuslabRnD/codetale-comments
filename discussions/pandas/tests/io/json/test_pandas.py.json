[
  {
    "id" : "25f6d249-ffef-47db-ba66-d419adc3db77",
    "prId" : 18591,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18591#pullrequestreview-82352578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d28b99c-9375-49b3-986a-3c215a47818f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "nice!",
        "createdAt" : "2017-12-10T14:49:32Z",
        "updatedAt" : "2017-12-10T14:49:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b204d093f20c056c0e12578152df0215e7bcc491",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1150,1154 @@        assert size_before == size_after\n\n    @pytest.mark.parametrize('data, expected', [\n        (DataFrame([[1, 2], [4, 5]], columns=['a', 'b']),\n            {'columns': ['a', 'b'], 'data': [[1, 2], [4, 5]]}),"
  },
  {
    "id" : "72176f84-5294-402e-a3fc-a33ac9c0150e",
    "prId" : 19535,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19535#pullrequestreview-130633035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f4f6925-f3d7-4a47-acff-51c4b91e102e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I learned that autouse fixtures can include `yield`, letting us do the tearndown here which is nice.",
        "createdAt" : "2018-03-27T14:18:52Z",
        "updatedAt" : "2018-06-26T15:01:36Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c271465b-db24-4480-8569-e2305d5a9818",
        "parentId" : "8f4f6925-f3d7-4a47-acff-51c4b91e102e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "On the other hand, it also makes this more \"complex\" to understand IMO (the `teardown_method` is rather explicit and easy to understand what is going on, while the `yield` is a less standard fancy feature of pytest ). \r\nHas the `autouse=True` other advantages? (what's the reason you needed that here?)",
        "createdAt" : "2018-03-27T15:12:24Z",
        "updatedAt" : "2018-06-26T15:01:36Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d883a6ba-4070-4038-9461-99af0fb1634f",
        "parentId" : "8f4f6925-f3d7-4a47-acff-51c4b91e102e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Two things\r\n\r\n1. `datapath` can only be called inside a test, since it inspects the `request` context, to see if `--strict-data-files` is set.\r\n2. datapath is a fixture, and you can't mix xUnit style `setup_method` with fixtures. `autouse` fixtures are the easiest way to replicate xUnit stuff, while being able to use fixtures.",
        "createdAt" : "2018-03-27T15:18:13Z",
        "updatedAt" : "2018-06-26T15:01:36Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "df4242bc-ba7d-4230-b2d8-3801dffd5812",
        "parentId" : "8f4f6925-f3d7-4a47-acff-51c4b91e102e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I've done this myself a few times so wanted to chime in. `autouse=True` allows the fixture to yield every test within it's scope without having to explicitly decorating or passing that fixture as an arg.\r\n\r\nThis approach is more in line with how pytest suggests doing setup/teardown (see [here](https://docs.pytest.org/en/2.7.3/fixture.html#fixture)) so I think that's a +1 for it. It also gives you potential visibility into the context of the yield tests (ex: here I think you could replace the `datapath` fixture usage as an argument via an assignment to `self.datapath` before yielding)",
        "createdAt" : "2018-03-27T15:21:40Z",
        "updatedAt" : "2018-06-26T15:01:36Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "36a1a900-b8bd-4334-87f8-597f35b7e597",
        "parentId" : "8f4f6925-f3d7-4a47-acff-51c4b91e102e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, that's a good reason to use an autouse fixture here in this case.\r\n\r\n(you don't need to convince me of the benefit of fixtures in general :), however, I think many people are not that familiar with all those pytest special features and it *has* a steeper learning curve IMO, so there can be a balance in how fancy we go)",
        "createdAt" : "2018-03-27T15:27:04Z",
        "updatedAt" : "2018-06-26T15:01:36Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e2f7a761-2c7e-407e-929f-1a18f4431f95",
        "parentId" : "8f4f6925-f3d7-4a47-acff-51c4b91e102e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah. When documenting this, I'll recommend against autouse for cases like this. I think it'd be better to just have a `categorical` fixture and accept that in the test. But that would have meant a lot more potential for breaking things in this PR :)",
        "createdAt" : "2018-03-27T15:32:14Z",
        "updatedAt" : "2018-06-26T15:01:36Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "605846a3-e679-4cda-8052-94331c08ef16",
        "parentId" : "8f4f6925-f3d7-4a47-acff-51c4b91e102e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah we should really not use this pattern, rather changing to all fixtures. as a temporary workaround this ok, can you create an issue to 'fix' this properly though.",
        "createdAt" : "2018-06-21T00:28:25Z",
        "updatedAt" : "2018-06-26T15:01:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbe0c5758ee7f67474ef63f57b59dbd6d066c4bc",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +61,65 @@        self.categorical = _cat_frame.copy()\n\n        yield\n\n        del self.dirpath"
  },
  {
    "id" : "2d0b3294-9700-4303-bcea-a2bcdc33fdc7",
    "prId" : 21986,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21986#pullrequestreview-140545384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6805dce6-a849-4229-a28e-7c57fbb7b805",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "This test should hit the modification made here: https://github.com/mroeschke/pandas/blob/0d7f07783ad9a42bb3fc7f0e3dda0c01b877fe57/pandas/io/json/json.py#L550",
        "createdAt" : "2018-07-26T00:32:35Z",
        "updatedAt" : "2018-07-28T18:53:13Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "05e4a36cd7d5c8449e362fc30fca03cf867144e0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +643,647 @@        assert_series_equal(result, s, check_index_type=False)\n\n    def test_series_with_dtype(self):\n        # GH 21986\n        s = Series([4.56, 4.56, 4.56])"
  },
  {
    "id" : "2ea75275-568b-410e-a5ee-c6101386e17e",
    "prId" : 25219,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25219#pullrequestreview-201412649",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02123763-1f58-4260-a2f3-dd767e998c41",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add the issue number as a comment",
        "createdAt" : "2019-02-08T02:33:15Z",
        "updatedAt" : "2019-02-23T06:54:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ecf5c6f843591560af326b73929afbeb2585004",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1205,1209 @@    def test_from_json_to_json_table_dtypes(self):\n        # GH21345\n        expected = pd.DataFrame({'a': [1, 2], 'b': [3., 4.], 'c': ['5', '6']})\n        dfjson = expected.to_json(orient='table')\n        result = pd.read_json(dfjson, orient='table')"
  },
  {
    "id" : "2b0f51c3-466e-4958-9320-f82ec3428b8c",
    "prId" : 27618,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27618#pullrequestreview-272176916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa5f6ad1-6822-4519-8303-09550ffa1673",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I commented this out as it was failing the test suite, but I don't think this is actually desired per #12997 . This change actually prevents index / column labels from undesirably being cast to UTC\r\n\r\nThe downside to doing this here is that how we handle timestamps differs slightly now depending on whether the timestamp appears as a JSON object key (for example, index and/or column values) versus as a value\r\n\r\nValues get encoded via the `make_iso_8601_datetime` function that appears in tslibs/src/datetime/np_datetime_strings.c . I know @jbrockmendel was thinking about decoupling this dependency which we may be able to do when fully aligning the logic for creating a label versus encoding the data",
        "createdAt" : "2019-08-07T19:20:53Z",
        "updatedAt" : "2019-08-23T13:09:36Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "439b69539086fadaa8e4b3e90cc98121ee08e205",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +1035,1039 @@        result = read_json(json)\n        expected = df.copy()\n        # expected.index = expected.index.tz_localize(\"UTC\")\n        expected[\"date\"] = expected[\"date\"].dt.tz_localize(\"UTC\")\n        assert_frame_equal(result, expected)"
  },
  {
    "id" : "333ec9b6-3734-4718-947e-dfa3d32438a4",
    "prId" : 27618,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27618#pullrequestreview-272678583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "339e480d-8e42-47f7-9e17-4f37b3c0b76a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Slightly orthogonal as this entire module could use some parametrization but added these here as they were helpful in debugging and I think easy to grok diff",
        "createdAt" : "2019-08-07T19:24:57Z",
        "updatedAt" : "2019-08-23T13:09:36Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3b09560a-28ad-413b-8da7-3fc135f2fa9c",
        "parentId" : "339e480d-8e42-47f7-9e17-4f37b3c0b76a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Given the difficulty of this PR, I'd say anything that can be broken off should be.",
        "createdAt" : "2019-08-08T16:04:34Z",
        "updatedAt" : "2019-08-23T13:09:36Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "439b69539086fadaa8e4b3e90cc98121ee08e205",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1013,1017 @@            assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"date,date_unit\",\n        ["
  },
  {
    "id" : "9dd13895-26a7-4212-8adf-9b18cc5f766f",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-283756597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7531637c-05af-4a18-8de3-58cc535fb867",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this is dependent on the original `ts` having no nanos?",
        "createdAt" : "2019-09-04T15:55:01Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bd4b5bf1-8893-42f7-b904-8c8135b51e40",
        "parentId" : "7531637c-05af-4a18-8de3-58cc535fb867",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm can you clarify? Not sure I understand your question",
        "createdAt" : "2019-09-04T16:32:54Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b5cf1535-bd8c-44cc-8043-3e8ec8c59aff",
        "parentId" : "7531637c-05af-4a18-8de3-58cc535fb867",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "all of the `Timestamp` objects I see have `ts.nanosecond == 0`, which means `ts.to_pydatetime()` is non-lossy.  The question is if we need to (test|worry about) cases with nonzero nanoseconds",
        "createdAt" : "2019-09-04T16:54:28Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 579,
    "diffHunk" : "@@ -1,1 +1311,1315 @@        assert dumps(ts, iso_dates=True) == exp\n        dt = ts.to_pydatetime()\n        assert dumps(dt, iso_dates=True) == exp\n\n    @pytest.mark.parametrize("
  },
  {
    "id" : "5abde58c-a208-4b84-87ba-6c94fb1b489c",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-283757037",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "728e60bb-a150-400b-88fe-554c540862b3",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "will give another go at reviewing the check_all_orients stuff.  If this stalls and you _do_ decide to break this up, everything below this point LGTM.",
        "createdAt" : "2019-09-04T16:55:17Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 520,
    "diffHunk" : "@@ -1,1 +970,974 @@        assert_series_equal(result, ts)\n\n    @pytest.mark.parametrize(\n        \"infer_word\",\n        ["
  },
  {
    "id" : "a8d39c94-36ef-4c65-8962-cae916b94221",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-286444505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51485a72-6761-4324-a945-6c8960a52fb0",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is the \"values\" case new?",
        "createdAt" : "2019-09-10T21:07:51Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "af1cbc2a-b6ec-4231-b16a-3a9d03592d18",
        "parentId" : "51485a72-6761-4324-a945-6c8960a52fb0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "... never mind",
        "createdAt" : "2019-09-10T21:08:09Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "6cf3e1f3-3b83-4f4a-8472-f18a18b3f27e",
        "parentId" : "51485a72-6761-4324-a945-6c8960a52fb0",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea this is equivalent to the original case of `tm.assert_numpy_array_equal(df.values, df_unser.values)` but more explicit as to the object being tested and avoids the `.values` call",
        "createdAt" : "2019-09-10T21:24:47Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +93,97 @@        if orient == \"records\" or orient == \"values\":\n            expected = expected.reset_index(drop=True)\n        if orient == \"values\":\n            expected.columns = range(len(expected.columns))\n"
  },
  {
    "id" : "b7538a15-7f9d-43b8-bc84-9bc2bacc414a",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-286438736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "105ba292-2123-4103-b499-15740393e481",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I noticed the other day that makeObjectSeries is misleadingly named: gives a dt64 Series with an object Index.  I expected an object-dtype Series",
        "createdAt" : "2019-09-10T21:10:16Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "17caf9fb-0ce0-4407-b4cc-2d7e5d342d67",
        "parentId" : "105ba292-2123-4103-b499-15740393e481",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea pretty confusing...definitely will open as a follow up issue. Probably has some implications outside of JSON tests",
        "createdAt" : "2019-09-10T21:12:55Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 434,
    "diffHunk" : "@@ -1,1 +814,818 @@    @pytest.mark.parametrize(\"numpy\", [True, False])\n    def test_series_roundtrip_object(self, orient, numpy, dtype):\n        # TODO: see why tm.makeObjectSeries provides back DTA\n        dtSeries = Series(\n            [str(d) for d in self.objSeries],"
  },
  {
    "id" : "4cee2c12-483d-48fa-a855-fd6ab7f8348c",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-286437833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c23d3b18-0832-40f0-96b1-3341f62cdef0",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "adding this func to my LGTM list",
        "createdAt" : "2019-09-10T21:11:08Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 320,
    "diffHunk" : "@@ -1,1 +555,559 @@        ],\n    )\n    def test_frame_to_json_float_precision(self, value, precision, expected_val):\n        df = pd.DataFrame([dict(a_float=value)])\n        encoded = df.to_json(double_precision=precision)"
  },
  {
    "id" : "ef423384-7f9c-4301-8129-99055ab0d841",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-286437881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9650314-b90f-4bc2-a88e-4aba52302e9f",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "adding this func to my LGTM list",
        "createdAt" : "2019-09-10T21:11:12Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 320,
    "diffHunk" : "@@ -1,1 +555,559 @@        ],\n    )\n    def test_frame_to_json_float_precision(self, value, precision, expected_val):\n        df = pd.DataFrame([dict(a_float=value)])\n        encoded = df.to_json(double_precision=precision)"
  },
  {
    "id" : "dc1e9c22-d12e-416f-a779-f976e07b6d83",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-286438237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d8752b9-0291-47e3-b339-4746566b5a97",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "func LGTM",
        "createdAt" : "2019-09-10T21:11:56Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 263,
    "diffHunk" : "@@ -1,1 +533,537 @@    @pytest.mark.parametrize(\"inf\", [np.inf, np.NINF])\n    @pytest.mark.parametrize(\"dtype\", [True, False])\n    def test_frame_infinity(self, orient, inf, dtype):\n        # infinities get mapped to nulls which get mapped to NaNs during\n        # deserialisation"
  },
  {
    "id" : "505018e0-fa73-449d-ac26-d3856c1f4299",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-286448236",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b890c12e-01bc-4088-9ad4-55955fda2a1d",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "it looks like this makes two changes vs test_frame_from_json_nones on 506:\r\n\r\n- using iloc[0, 2] instead of case-specific indexing (seems fine unless testing the index/column types was important)\r\n- adds two cases with convert_axes=dtype=True.  Seems like a strict improvement, unless there is some non-obvious reason those two were excluded.\r\n\r\nConditional on these being intentional, this func LGTM",
        "createdAt" : "2019-09-10T21:29:37Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b8c9b018-18f6-4da2-a725-66a7c3c80c96",
        "parentId" : "b890c12e-01bc-4088-9ad4-55955fda2a1d",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yep sorry should have commented. The `.iloc` is certainly a change to make it more idiomatic and the `convert_axes` parametrization is to improve test coverage (not sure why previous implementation only tested for False)",
        "createdAt" : "2019-09-10T21:32:36Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 227,
    "diffHunk" : "@@ -1,1 +519,523 @@        assert np.isnan(result.iloc[0, 2])\n\n        obj_df = DataFrame([[\"1\", \"2\"], [\"4\", \"5\", \"6\"]])\n        result = read_json(\n            obj_df.to_json(orient=orient),"
  },
  {
    "id" : "d119bb35-b316-478f-a39e-80e612c1590e",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-286452970",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24addd0c-cb31-482d-b828-7bdd89f10960",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "corresponds to L121-129; LGTM",
        "createdAt" : "2019-09-10T21:43:22Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 142,
    "diffHunk" : "@@ -1,1 +148,152 @@\n    @pytest.mark.parametrize(\"orient\", [\"index\", \"columns\", \"records\"])\n    def test_frame_non_unique_columns_raises(self, orient):\n        df = DataFrame([[\"a\", \"b\"], [\"c\", \"d\"]], index=[1, 2], columns=[\"x\", \"x\"])\n"
  },
  {
    "id" : "dfcb234f-9ca2-4480-a509-1e6de10eebf2",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-286453354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a440a963-7190-440d-93b8-ffb0cc96cf93",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "corrresponds to L104-109; LGTM",
        "createdAt" : "2019-09-10T21:44:21Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +112,116 @@\n    @pytest.mark.parametrize(\"orient\", [\"index\", \"columns\"])\n    def test_frame_non_unique_index_raises(self, orient):\n        df = DataFrame([[\"a\", \"b\"], [\"c\", \"d\"]], index=[1, 1], columns=[\"x\", \"y\"])\n        msg = \"DataFrame index must be unique for orient='{}'\".format(orient)"
  },
  {
    "id" : "f9d04290-3185-453d-bad9-22ebb49b09b1",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-286454082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e9ffe36-9834-4217-b9b9-ac4c83034448",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "func LGTM",
        "createdAt" : "2019-09-10T21:46:09Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +81,85 @@        del self.mixed_frame\n\n    def test_frame_double_encoded_labels(self, orient):\n        df = DataFrame(\n            [[\"a\", \"b\"], [\"c\", \"d\"]],"
  },
  {
    "id" : "15c2c00c-6cd6-4699-8329-b60287f302d0",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-288917532",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28d7f559-ba03-441b-850f-a9d0eea3e33d",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this func maps to L900-L902; LGTM",
        "createdAt" : "2019-09-16T21:42:54Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 496,
    "diffHunk" : "@@ -1,1 +869,873 @@    @pytest.mark.parametrize(\"dtype\", [np.float64, np.int])\n    @pytest.mark.parametrize(\"numpy\", [True, False])\n    def test_series_roundtrip_numeric(self, orient, numpy, dtype):\n        s = Series(range(6), index=[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n        data = s.to_json(orient=orient)"
  },
  {
    "id" : "81dfd4be-af14-4d1a-aeba-4ab83500d99f",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-288919288",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fe0aa81-076b-4d53-aa0c-e9e60639ca61",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "L837-L842 looks like it is the same as L810-L815, and really similar to 852-858, 883-884, possibly others.  I guess this is what _check_orient used to be?\r\n\r\nIf this can be shared, that would be helpful.  If not, comments to the effect of `# this case does foo unlike in test_bar because of baz`",
        "createdAt" : "2019-09-16T21:47:00Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 455,
    "diffHunk" : "@@ -1,1 +834,838 @@            expected = expected.reset_index(drop=True)\n        if orient != \"split\":\n            expected.name = None\n\n        tm.assert_series_equal(result, expected)"
  },
  {
    "id" : "8253c8d7-936c-423f-9902-1982cdcb33ed",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-288919653",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4262977c-28de-4604-951c-ee3ef49db652",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "corresponds to L897; LGTM",
        "createdAt" : "2019-09-16T21:47:57Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 476,
    "diffHunk" : "@@ -1,1 +855,859 @@\n    @pytest.mark.parametrize(\"numpy\", [True, False])\n    def test_series_roundtrip_timeseries(self, orient, numpy):\n        data = self.ts.to_json(orient=orient)\n        result = pd.read_json(data, typ=\"series\", orient=orient, numpy=numpy)"
  },
  {
    "id" : "ee67d532-1ef5-473a-8404-524db9181a49",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-288919974",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07b837cc-78a5-43d1-9e4e-84285ab26592",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "corresponds to L892-895; LGTM",
        "createdAt" : "2019-09-16T21:48:47Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 460,
    "diffHunk" : "@@ -1,1 +839,843 @@\n    @pytest.mark.parametrize(\"numpy\", [True, False])\n    def test_series_roundtrip_empty(self, orient, numpy):\n        data = self.empty_series.to_json(orient=orient)\n        result = pd.read_json(data, typ=\"series\", orient=orient, numpy=numpy)"
  },
  {
    "id" : "63752a3a-1b10-403b-9cc1-8b7daee7a0b8",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-288920556",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad0bd235-f490-45d4-9b2b-dd5b9ad74613",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "L832-L835 look different from the existing logic in _check_version.  am i missing soemthing?",
        "createdAt" : "2019-09-16T21:50:10Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 448,
    "diffHunk" : "@@ -1,1 +827,831 @@            expected = dtSeries.copy()\n        else:\n            expected = self.objSeries.copy()\n\n        if not numpy and PY35 and orient in (\"index\", \"columns\"):"
  },
  {
    "id" : "b3603481-542e-46c7-87bf-3f0d8e9314e2",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-288921605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52600f57-3c04-446b-b005-1a442a036ccc",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "https://github.com/pandas-dev/pandas/pull/27838/files?file-filters%5B%5D=#r324901569 notwithstanding, this func corresponds to L885-L890 and LGTM",
        "createdAt" : "2019-09-16T21:52:33Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 433,
    "diffHunk" : "@@ -1,1 +813,817 @@    @pytest.mark.parametrize(\"dtype\", [False, None])\n    @pytest.mark.parametrize(\"numpy\", [True, False])\n    def test_series_roundtrip_object(self, orient, numpy, dtype):\n        # TODO: see why tm.makeObjectSeries provides back DTA\n        dtSeries = Series("
  },
  {
    "id" : "2db25c79-5ab2-4f61-a735-13ccdd946b18",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-288922030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60227c1d-6d78-4ac5-bee8-b02f566c6e15",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "corresponds to L882; LGTM",
        "createdAt" : "2019-09-16T21:53:33Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 417,
    "diffHunk" : "@@ -1,1 +797,801 @@\n    @pytest.mark.parametrize(\"numpy\", [True, False])\n    def test_series_roundtrip_simple(self, orient, numpy):\n        data = self.series.to_json(orient=orient)\n        result = pd.read_json(data, typ=\"series\", orient=orient, numpy=numpy)"
  },
  {
    "id" : "0ba91662-1f0d-40d0-90da-91ee8d7581af",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-288922166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f522920-1aff-469b-9f8c-9a238751cd7b",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "1-liner corresponds to L883; LGTM",
        "createdAt" : "2019-09-16T21:53:55Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 412,
    "diffHunk" : "@@ -1,1 +793,797 @@        tm.assert_numpy_array_equal(s.values, unser.values)\n\n    def test_series_default_orient(self):\n        assert self.series.to_json() == self.series.to_json(orient=\"index\")\n"
  },
  {
    "id" : "5f86d348-bbf6-47f3-9a4e-83b15cd9a626",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-288922689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a16db044-54fc-4c39-bb0d-4c60b8f3286c",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "corresponds to L506-524; LGTM",
        "createdAt" : "2019-09-16T21:55:15Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 209,
    "diffHunk" : "@@ -1,1 +509,513 @@    @pytest.mark.parametrize(\"convert_axes\", [True, False])\n    @pytest.mark.parametrize(\"numpy\", [True, False])\n    def test_frame_from_json_missing_data(self, orient, convert_axes, numpy, dtype):\n        num_df = DataFrame([[1, 2], [4, 5, 6]])\n        result = read_json("
  },
  {
    "id" : "f11f0cf2-4133-4e61-968a-f9707b3930c3",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-289005428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63497f3d-345d-4887-8149-fd0556e2ae3e",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is the floordiv here new?",
        "createdAt" : "2019-09-16T22:06:59Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "24e8d951-9bff-4fc8-ba32-72cfc5943663",
        "parentId" : "63497f3d-345d-4887-8149-fd0556e2ae3e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Kind of...the previous test only tested the `values` orient using string values, but had a loop wherein it would test more complicated dtypes for the `split` orient. That loop was moved instead to the parametrization to keep things consistent and improve coverage, but in doing so we need to now account for how `values` writes out `Timestamp` objects, which is by default to provide the epoch value in milliseconds. The floordiv here gets us from the internal value in nanoseconds to the epoch value needed.\r\n\r\nThis is worth a comment though so let me push that up after addressing other comments",
        "createdAt" : "2019-09-17T03:45:53Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +141,145 @@                # so divide to get where we need\n                # TODO: a to_epoch method would also solve; see GH 14772\n                expected.iloc[:, 0] = expected.iloc[:, 0].astype(np.int64) // 1000000\n        elif orient == \"split\":\n            expected = df"
  },
  {
    "id" : "32f36f09-cb9e-4d63-ba7e-5825e02a0fee",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-289005715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2853d0cd-f98e-4e93-887e-d5dfa0efc84c",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this case is new right?  it looks like the \"split\" case here correspinds to L142-L154",
        "createdAt" : "2019-09-16T22:07:41Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "337e83a4-4a62-4fe6-b67f-1558483fac54",
        "parentId" : "2853d0cd-f98e-4e93-887e-d5dfa0efc84c",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yes this is related to the comment above. I parametrized to increase coverage but had to add some logic for proper Timestamp handling with `orient == \"values\"`",
        "createdAt" : "2019-09-17T03:47:14Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +134,138 @@            df.to_json(orient=orient), orient=orient, convert_dates=[\"x\"]\n        )\n        if orient == \"values\":\n            expected = pd.DataFrame(data)\n            if expected.iloc[:, 0].dtype == \"datetime64[ns]\":"
  },
  {
    "id" : "6612dbd0-8cc2-488c-9564-0d1f540910ce",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-288927674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9537dc7b-464d-458e-a705-0e09edef9c77",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "pending https://github.com/pandas-dev/pandas/pull/27838/files?file-filters%5B%5D=#r324906825, this corresponds to L142-L154 and LGTM",
        "createdAt" : "2019-09-16T22:08:07Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +128,132 @@        ],\n    )\n    def test_frame_non_unique_columns(self, orient, data):\n        df = DataFrame(data, index=[1, 2], columns=[\"x\", \"x\"])\n"
  },
  {
    "id" : "7a97dbda-9b57-4118-b1dd-b581bbac4f39",
    "prId" : 27838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27838#pullrequestreview-288929628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0e430e0-a6ad-4aba-81f9-fd1e95567120",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "corresponds to L473-504.  pending moving StringIO inside test method, LGTM",
        "createdAt" : "2019-09-16T22:13:49Z",
        "updatedAt" : "2019-09-17T04:19:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "639a464a6d1ba5463165144101f03332a646e9cb",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +502,506 @@        ],\n    )\n    def test_frame_from_json_bad_data_raises(self, data, msg, orient):\n        with pytest.raises(ValueError, match=msg):\n            read_json(StringIO(data), orient=orient)"
  },
  {
    "id" : "ffb52cc1-eb8d-44cc-9e28-6a739935d63d",
    "prId" : 28130,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28130#pullrequestreview-283592307",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "267450be-a79a-41e4-8a20-096870decc37",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i would add indent for some existing tests as this doesn’t test all of the code paths \r\n\r\neg for different types i don’t think u r fully testing \r\n\r\npick a value like 4 and use it consistently ",
        "createdAt" : "2019-08-30T18:31:30Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a8d754d2-26fe-4f60-ad0b-714d8e14223c",
        "parentId" : "267450be-a79a-41e4-8a20-096870decc37",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Sounds good. I'm thinking adding something for each orient will suffice, though if you are thinking more beyond that lmk",
        "createdAt" : "2019-08-30T18:34:29Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "22d5e383-e490-4cad-953c-eb9203741525",
        "parentId" : "267450be-a79a-41e4-8a20-096870decc37",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "looks good. ",
        "createdAt" : "2019-09-04T12:54:26Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f376f121e20e25848a305e31c501500b8a205f2c",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1650,1654 @@\n    @pytest.mark.parametrize(\"indent\", [1, 2, 4])\n    def test_to_json_indent(self, indent):\n        # GH 12004\n        df = pd.DataFrame([[\"foo\", \"bar\"], [\"baz\", \"qux\"]], columns=[\"a\", \"b\"])"
  },
  {
    "id" : "66e48e10-629a-4686-b324-033d493d2f50",
    "prId" : 28130,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28130#pullrequestreview-283706116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c63df26-186b-463e-8cbd-5657eb67dacb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what about invalid values for indent, e.g. < 0 or a non-integer?",
        "createdAt" : "2019-09-04T12:54:40Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "90a61e17-ce9c-45ae-b71b-defa298529b3",
        "parentId" : "0c63df26-186b-463e-8cbd-5657eb67dacb",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "None integers raise a TypeError. I'll add the validation of non-negative",
        "createdAt" : "2019-09-04T15:32:20Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f376f121e20e25848a305e31c501500b8a205f2c",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +1725,1729 @@            (\n                \"columns\",\n                \"\"\"{\n    \"a\":{\n        \"0\":\"foo\","
  },
  {
    "id" : "7413cf61-1843-4495-a899-27ea73f43b28",
    "prId" : 28130,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28130#pullrequestreview-288409067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8537566-b8a5-450f-90c1-81b44a21d43e",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Why do we need this `if-else` logjc again exactly?",
        "createdAt" : "2019-09-16T03:14:58Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "80a68758-d652-4006-a3be-23a83ff93854",
        "parentId" : "c8537566-b8a5-450f-90c1-81b44a21d43e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Comes back to dict ordering - cannot be guaranteed in Py35. Ultimately we'll be dropping Py35 by the time this goes live so somewhat of a moot point, but for now the compat is an easy indication of what needs to be cleaned up when we officially drop 35",
        "createdAt" : "2019-09-16T03:22:14Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d759b8e1-e904-4d8d-a6fd-64b7d2e8c366",
        "parentId" : "c8537566-b8a5-450f-90c1-81b44a21d43e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This comment might help explain more too https://github.com/pandas-dev/pandas/pull/28130/files#r320046798",
        "createdAt" : "2019-09-16T03:49:32Z",
        "updatedAt" : "2019-09-16T15:23:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3018c1a9-3762-4957-b709-d3fd8253fccd",
        "parentId" : "c8537566-b8a5-450f-90c1-81b44a21d43e",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Makes sense.",
        "createdAt" : "2019-09-16T03:52:15Z",
        "updatedAt" : "2019-09-16T15:23:35Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "f376f121e20e25848a305e31c501500b8a205f2c",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +1796,1800 @@            assert json.loads(result) == json.loads(expected)\n        else:\n            assert result == expected\n\n    def test_json_negative_indent_raises(self):"
  },
  {
    "id" : "3325d235-3fe2-4788-959d-1e754ffc43bb",
    "prId" : 28510,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28510#pullrequestreview-291307889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab578374-d05f-4f96-8a68-60bb8beeab7a",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I dont use assign or select_dtypes very often.  Is this just casting to int64 for columns A and B?",
        "createdAt" : "2019-09-20T15:20:28Z",
        "updatedAt" : "2019-09-20T15:20:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "94dfa55c-5977-4984-ae14-be5aad28e1f2",
        "parentId" : "ab578374-d05f-4f96-8a68-60bb8beeab7a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yes that's correct. Happy to change to another way of casting if you prefer",
        "createdAt" : "2019-09-20T15:23:30Z",
        "updatedAt" : "2019-09-20T15:33:53Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b754078b-f668-4ca1-8b93-234cebe459e8",
        "parentId" : "ab578374-d05f-4f96-8a68-60bb8beeab7a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think `df[[\"A\", \"B\"]] = df[[\"A\", \"B\"]].astype(np.int64)` would be clearer.  Might just be me.",
        "createdAt" : "2019-09-20T17:47:48Z",
        "updatedAt" : "2019-09-20T17:47:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a1deaf77ce8b9a94b7f4e217227f2de5e69e1e3",
    "line" : 499,
    "diffHunk" : "@@ -1,1 +350,354 @@\n        expected = df.copy()\n        expected = expected.assign(**expected.select_dtypes(\"number\").astype(np.int64))\n\n        if not numpy and (orient == \"index\" or (PY35 and orient == \"columns\")):"
  },
  {
    "id" : "7659dac9-82d8-44c0-a34e-4a9867d46718",
    "prId" : 28510,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28510#pullrequestreview-291308324",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79776f2b-4079-440d-8492-1756cb6f70cf",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "re-iterating request to share code for ~344-360.  As is I have to look at each version for \"is this subtly different and if so why\"",
        "createdAt" : "2019-09-20T15:21:17Z",
        "updatedAt" : "2019-09-20T15:21:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "88c686f8-6907-4e2d-8693-407840b9a105",
        "parentId" : "79776f2b-4079-440d-8492-1756cb6f70cf",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm I don't know I fully understand what you are asking for. This particular test lines up pretty well to the left (lines 463 - 472) but is more explicit about the expected shape of the result. This idiom of resetting particular axes for values and records is used throughout the module (probably worth a dedicated function, but leaving to a follow up)",
        "createdAt" : "2019-09-20T15:26:08Z",
        "updatedAt" : "2019-09-20T15:33:53Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "9cfa6fca-c73b-4c76-9392-eec72e279b7a",
        "parentId" : "79776f2b-4079-440d-8492-1756cb6f70cf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : ">  This idiom of resetting particular axes for values and records is used throughout the module\r\n\r\nYah, thats what I'm asking for.  OK for follow-up.",
        "createdAt" : "2019-09-20T17:48:38Z",
        "updatedAt" : "2019-09-20T17:48:38Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a1deaf77ce8b9a94b7f4e217227f2de5e69e1e3",
    "line" : 507,
    "diffHunk" : "@@ -1,1 +358,362 @@            expected = expected.reset_index(drop=True)\n        if orient == \"values\":\n            expected.columns = range(len(expected.columns))\n\n        tm.assert_frame_equal(result, expected)"
  },
  {
    "id" : "9abc0c33-5ad4-4c17-9fd7-9b3430f7bc2e",
    "prId" : 28510,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28510#pullrequestreview-291233729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5be1e1fa-914b-4b77-9af4-08733bf3b9cd",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "pending comments, LGTM.  corresponds to 455-472",
        "createdAt" : "2019-09-20T15:22:30Z",
        "updatedAt" : "2019-09-20T15:22:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a1deaf77ce8b9a94b7f4e217227f2de5e69e1e3",
    "line" : 467,
    "diffHunk" : "@@ -1,1 +330,334 @@    @pytest.mark.parametrize(\"convert_axes\", [True, False])\n    @pytest.mark.parametrize(\"numpy\", [True, False])\n    def test_roundtrip_mixed(self, orient, convert_axes, numpy):\n        if numpy and orient != \"split\":\n            pytest.xfail(\"Can't decode directly to array\")"
  },
  {
    "id" : "b98eec04-9e4a-414c-817b-299cc33a537c",
    "prId" : 28510,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28510#pullrequestreview-291234422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a16d7956-fbf8-4552-94a9-33d240a800df",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "LGTM, corresponds to 452-453",
        "createdAt" : "2019-09-20T15:23:40Z",
        "updatedAt" : "2019-09-20T15:23:40Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a1deaf77ce8b9a94b7f4e217227f2de5e69e1e3",
    "line" : 440,
    "diffHunk" : "@@ -1,1 +305,309 @@    @pytest.mark.parametrize(\"convert_axes\", [True, False])\n    @pytest.mark.parametrize(\"numpy\", [True, False])\n    def test_roundtrip_timestamp(self, orient, convert_axes, numpy):\n        # TODO: improve coverage with date_format parameter\n        data = self.tsframe.to_json(orient=orient)"
  },
  {
    "id" : "c2fcabfd-dcda-4390-b507-abe13776a47d",
    "prId" : 28510,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28510#pullrequestreview-291234828",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "595d9499-c698-4441-a19b-b4f7b69194b4",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "LGTM, corresponds to 447-449",
        "createdAt" : "2019-09-20T15:24:23Z",
        "updatedAt" : "2019-09-20T15:24:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a1deaf77ce8b9a94b7f4e217227f2de5e69e1e3",
    "line" : 417,
    "diffHunk" : "@@ -1,1 +287,291 @@    @pytest.mark.parametrize(\"convert_axes\", [True, False])\n    @pytest.mark.parametrize(\"numpy\", [True, False])\n    def test_roundtrip_empty(self, orient, convert_axes, numpy):\n        data = self.empty_frame.to_json(orient=orient)\n        result = pd.read_json("
  },
  {
    "id" : "43afc252-10bd-49ac-8052-f5e385008246",
    "prId" : 28510,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28510#pullrequestreview-291235479",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3db25f33-af60-4f89-bfed-65df4f670383",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "LGTM; corresponds to 444-445",
        "createdAt" : "2019-09-20T15:25:23Z",
        "updatedAt" : "2019-09-20T15:25:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a1deaf77ce8b9a94b7f4e217227f2de5e69e1e3",
    "line" : 381,
    "diffHunk" : "@@ -1,1 +256,260 @@    @pytest.mark.parametrize(\"convert_axes\", [True, False])\n    @pytest.mark.parametrize(\"numpy\", [True, False])\n    def test_roundtrip_categorical(self, orient, convert_axes, numpy):\n        # TODO: create a better frame to test with and improve coverage\n        if orient in (\"index\", \"columns\"):"
  },
  {
    "id" : "27de513d-7d3b-47d5-8f3f-f34c4573889a",
    "prId" : 28510,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28510#pullrequestreview-291234327",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bd10d2a-bbfd-4276-8c5b-cbbf65d4cb1e",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "instead of using the fixture, can you parametrize and xfail these cases?  That way the xfail can be strict instead of short-circuiting",
        "createdAt" : "2019-09-20T15:26:37Z",
        "updatedAt" : "2019-09-20T15:26:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "6d2ca3bd-d5ba-4585-ad98-a125ba4e1f81",
        "parentId" : "7bd10d2a-bbfd-4276-8c5b-cbbf65d4cb1e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Sure - I think I'll do that as a follow up to address the TODO directly above as well if that works for you",
        "createdAt" : "2019-09-20T15:33:25Z",
        "updatedAt" : "2019-09-20T15:33:53Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a1deaf77ce8b9a94b7f4e217227f2de5e69e1e3",
    "line" : 386,
    "diffHunk" : "@@ -1,1 +261,265 @@            pytest.xfail(\n                \"Can't have duplicate index values for orient '{}')\".format(orient)\n            )\n\n        data = self.categorical.to_json(orient=orient)"
  },
  {
    "id" : "51ce0af0-f22a-4138-9d96-7fe04c9cd8e6",
    "prId" : 28510,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28510#pullrequestreview-291309731",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcb430ce-9bc2-4d2b-9e38-932b1804bd4f",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "func LGMT; corresponds to 420-442",
        "createdAt" : "2019-09-20T17:51:22Z",
        "updatedAt" : "2019-09-20T17:51:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a1deaf77ce8b9a94b7f4e217227f2de5e69e1e3",
    "line" : 330,
    "diffHunk" : "@@ -1,1 +211,215 @@    @pytest.mark.parametrize(\"convert_axes\", [True, False])\n    @pytest.mark.parametrize(\"numpy\", [True, False])\n    def test_roundtrip_str_axes(self, orient, convert_axes, numpy, dtype):\n        df = DataFrame(\n            np.zeros((200, 4)),"
  },
  {
    "id" : "118ee9ed-1724-4aa7-82c1-613ccc11d55a",
    "prId" : 28510,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28510#pullrequestreview-291310355",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbb0c57e-c0cb-4f76-83d0-b58bdd0a947d",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "func LGTM.  corresponds to 417-418",
        "createdAt" : "2019-09-20T17:52:33Z",
        "updatedAt" : "2019-09-20T17:52:33Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a1deaf77ce8b9a94b7f4e217227f2de5e69e1e3",
    "line" : 296,
    "diffHunk" : "@@ -1,1 +183,187 @@    @pytest.mark.parametrize(\"convert_axes\", [True, False])\n    @pytest.mark.parametrize(\"numpy\", [True, False])\n    def test_roundtrip_intframe(self, orient, convert_axes, numpy, dtype):\n        data = self.intframe.to_json(orient=orient)\n        result = pd.read_json("
  },
  {
    "id" : "7986f978-a4c0-4ed0-94da-36bf6d1b6955",
    "prId" : 28510,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28510#pullrequestreview-291310642",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b2e21b6-c327-44e0-85a5-84277f0c741a",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "func LGTM.  corresponds to 413-415",
        "createdAt" : "2019-09-20T17:53:08Z",
        "updatedAt" : "2019-09-20T17:53:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a1deaf77ce8b9a94b7f4e217227f2de5e69e1e3",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +161,165 @@    @pytest.mark.parametrize(\"convert_axes\", [True, False])\n    @pytest.mark.parametrize(\"numpy\", [True, False])\n    def test_roundtrip_simple(self, orient, convert_axes, numpy, dtype):\n        data = self.frame.to_json(orient=orient)\n        result = pd.read_json("
  },
  {
    "id" : "ac0f0737-d026-4556-974b-d532730cbf48",
    "prId" : 30295,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30295#pullrequestreview-336847575",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e60f681a-8d2e-44f9-9a7b-8a7d518f1fcb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the strings, 'NaN', '-Infinity', and 'Infinity' to be sure we are not over parsing. also do we parse more common 'Inf' and '-Inf' ?",
        "createdAt" : "2019-12-27T16:05:14Z",
        "updatedAt" : "2020-01-01T23:59:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "daec3e49-fb6a-421d-893f-055b172c52f3",
        "parentId" : "e60f681a-8d2e-44f9-9a7b-8a7d518f1fcb",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Good idea. So note that I also had to add an \"a\" to this as the parsing worked correctly, but a subsequent `astype(\"float64\")` that the JSON code does would turn the strings into their float representation.\r\n\r\nW.r.t \"Inf\" and \"-Inf\" the upside to not doing them is that they aren't part of [EMCA 262](https://www.ecma-international.org/ecma-262/10.0/index.html#Title) so we could point to that document if we don't include. The one gap from EMCA 262 that we don't have is \"+Infinity\" which I am happy to add here",
        "createdAt" : "2019-12-27T19:00:47Z",
        "updatedAt" : "2020-01-01T23:59:50Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f17de89d532391c663ae29328f2d205b345ac7d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1599,1603 @@            pd.DataFrame().to_json(indent=-1)\n\n    def test_emca_262_nan_inf_support(self):\n        # GH 12213\n        data = '[\"a\", NaN, \"NaN\", Infinity, \"Infinity\", -Infinity, \"-Infinity\"]'"
  },
  {
    "id" : "49b4920b-ac84-4eaa-881b-74e667acd129",
    "prId" : 30329,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30329#pullrequestreview-345998196",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecc2fe79-be14-42a5-b4a7-40889bdce9d5",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "IIUC from the issue, the expected output is an object column containing a number and a string? ",
        "createdAt" : "2019-12-19T13:22:47Z",
        "updatedAt" : "2020-01-21T03:17:01Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "635fa7b2-4e92-4468-8be7-3d311eec15a6",
        "parentId" : "ecc2fe79-be14-42a5-b4a7-40889bdce9d5",
        "authorId" : "1dc92f35-7183-4404-83e7-62eb2b54b67f",
        "body" : "They have written the number in a float form. I'll look into generating an object.\r\n\r\n> 3.190044e+19",
        "createdAt" : "2019-12-19T15:09:25Z",
        "updatedAt" : "2020-01-21T03:17:01Z",
        "lastEditedBy" : "1dc92f35-7183-4404-83e7-62eb2b54b67f",
        "tags" : [
        ]
      },
      {
        "id" : "130eeb0a-4e2f-4251-8671-b17483b5f720",
        "parentId" : "ecc2fe79-be14-42a5-b4a7-40889bdce9d5",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I'm happy with the string not being coerced, although I think the issue _may_ need further discussion. see https://github.com/pandas-dev/pandas/issues/30320#issuecomment-567491918.\r\n\r\nWhat happens now when the `encoded_json` is an `int`? Maybe we should test for this too here?",
        "createdAt" : "2019-12-19T15:59:22Z",
        "updatedAt" : "2020-01-21T03:17:01Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "874c771e-fdb7-46c6-9295-77f79ef9b283",
        "parentId" : "ecc2fe79-be14-42a5-b4a7-40889bdce9d5",
        "authorId" : "1dc92f35-7183-4404-83e7-62eb2b54b67f",
        "body" : "@simonjayhawkins Please see and provide guidance on this [comment](https://github.com/pandas-dev/pandas/issues/30320#issuecomment-567602918)",
        "createdAt" : "2020-01-21T03:12:56Z",
        "updatedAt" : "2020-01-21T03:17:01Z",
        "lastEditedBy" : "1dc92f35-7183-4404-83e7-62eb2b54b67f",
        "tags" : [
        ]
      },
      {
        "id" : "bd0ba9fd-2f8e-4872-9e42-de1fcf600277",
        "parentId" : "ecc2fe79-be14-42a5-b4a7-40889bdce9d5",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> @simonjayhawkins Please see and provide guidance on this [comment](https://github.com/pandas-dev/pandas/issues/30320#issuecomment-567602918)\r\n\r\nnot sure about this. @WillAyd?",
        "createdAt" : "2020-01-21T10:43:02Z",
        "updatedAt" : "2020-01-21T10:43:02Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "616c8c75-e048-4e6a-8289-140b314a126f",
        "parentId" : "ecc2fe79-be14-42a5-b4a7-40889bdce9d5",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I don't know the answer either. Probably needs to be done in C but if you see a way to make it happen in the error handler works as well",
        "createdAt" : "2020-01-21T16:07:58Z",
        "updatedAt" : "2020-01-21T16:07:59Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "351a41936687a065bd60817f5965c07fd7724ef3",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1645,1649 @@        # GH 30320\n        encoded_json = json.dumps([{\"col\": \"31900441201190696999\"}, {\"col\": \"Text\"}])\n        expected = DataFrame({\"col\": [\"31900441201190696999\", \"Text\"]})\n        result = read_json(encoded_json)\n        tm.assert_frame_equal(result, expected)"
  },
  {
    "id" : "3fb5b1f6-d0a1-4f6a-9a21-b3d7af44bf2f",
    "prId" : 30496,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30496#pullrequestreview-337510292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "224ab54c-6eeb-441d-8f0e-a7b49debb644",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so this fixes a bug?",
        "createdAt" : "2020-01-01T03:23:43Z",
        "updatedAt" : "2020-01-02T00:00:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b798130f-118a-45fa-b917-4d2990630454",
        "parentId" : "224ab54c-6eeb-441d-8f0e-a7b49debb644",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "No this was intentionally commented out here https://github.com/pandas-dev/pandas/pull/27618/files#r311722007 just coming full circle on that now that date alignment is consistent in JSON whether an item appears in the index or in the values",
        "createdAt" : "2020-01-01T23:52:54Z",
        "updatedAt" : "2020-01-02T00:00:33Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "532bbc253c481483a82f04485529c7af9afabf2b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +855,859 @@        result = read_json(json)\n        expected = df.copy()\n        expected.index = expected.index.tz_localize(\"UTC\")\n        expected[\"date\"] = expected[\"date\"].dt.tz_localize(\"UTC\")\n        tm.assert_frame_equal(result, expected)"
  },
  {
    "id" : "45a7b357-c629-4ef3-b59d-a77b85dcf2a2",
    "prId" : 31191,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31191#pullrequestreview-346319577",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3107e1b0-8f65-4dda-ae74-98a79cb56037",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this looks really similar to test_series_roundtrip_empty and test_series_roundtrip_object.  would it make sense to something like `any_series` fixture for this?",
        "createdAt" : "2020-01-22T01:57:42Z",
        "updatedAt" : "2020-03-18T23:33:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "4f72f005-e45a-40e6-9b91-f3c6b4bd1d68",
        "parentId" : "3107e1b0-8f65-4dda-ae74-98a79cb56037",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea I think a great idea. I’m thinking worth doing after breaking out and setting up test_roundtrip.py with other parametrization unless a blocker here",
        "createdAt" : "2020-01-22T02:47:31Z",
        "updatedAt" : "2020-03-18T23:33:07Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "364b9939-4798-4ded-b5cb-2723d0d011cd",
        "parentId" : "3107e1b0-8f65-4dda-ae74-98a79cb56037",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sounds good.  This LGTM",
        "createdAt" : "2020-01-22T02:49:42Z",
        "updatedAt" : "2020-03-18T23:33:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc2d93e383b5c5e8bcdc5be5ee5137b11178b037",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +659,663 @@\n    @pytest.mark.parametrize(\"numpy\", [True, False])\n    def test_series_roundtrip_timeseries(self, orient, numpy, datetime_series):\n        data = datetime_series.to_json(orient=orient)\n        result = pd.read_json(data, typ=\"series\", orient=orient, numpy=numpy)"
  },
  {
    "id" : "a8d7959e-df71-4402-8b75-b46e16764350",
    "prId" : 31748,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31748#pullrequestreview-355318691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ed7b41a-ca16-4c33-8bbd-f2ec1e16f317",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "@simonjayhawkins do you know of an easy way to add `pd.NA` to `nulls_fixture` inline during injection? Or would adding another fixture on top be the only way?",
        "createdAt" : "2020-02-07T16:11:19Z",
        "updatedAt" : "2020-02-07T22:05:24Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3940dcb3-06c7-48bd-aff0-21a2b9249761",
        "parentId" : "4ed7b41a-ca16-4c33-8bbd-f2ec1e16f317",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "since we already have two nulls_fixtures (nulls_fixture and unique_nulls_fixture), I think adding another could be the simplest way for now. \r\n\r\nI think, in general, simpler to skip than to add a extra parameter (although I've not kept up with the latest pytest releases).\r\n\r\nThere is not a huge number of tests using the nulls_fixture and maybe tests that do should also test for pandas.NA, either now of in the future. So an alternative could be to add pd.NA to the existing nulls fixture and either skip of xfail.",
        "createdAt" : "2020-02-07T17:32:31Z",
        "updatedAt" : "2020-02-07T22:05:24Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f3853e621d2168423c616bd34ab67d9465ef21b",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1678,1682 @@        assert result == '{\"0\":{\"0\":null}}'\n\n    def test_json_pandas_nulls(self, nulls_fixture):\n        # GH 31615\n        result = pd.DataFrame([[nulls_fixture]]).to_json()"
  },
  {
    "id" : "2af4a94b-1970-4fc3-8cb3-4594e9eaf790",
    "prId" : 33148,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33148#pullrequestreview-384097460",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a335c40d-65e9-4791-bdb8-a9925b55c2d9",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Note that `float_frame` and `self.frame` aren't 100% equivalent because the former has the columns labeled ABCD whereas the latter didn't provide labels. I don't think that distinction matters for these tests though",
        "createdAt" : "2020-03-30T17:57:57Z",
        "updatedAt" : "2020-03-30T17:58:42Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d4af6e3a20573c884be9d22ddbeae0b79eaaeb8",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +120,124 @@\n    def test_frame_default_orient(self, float_frame):\n        assert float_frame.to_json() == float_frame.to_json(orient=\"columns\")\n\n    @pytest.mark.parametrize(\"dtype\", [False, float])"
  },
  {
    "id" : "ed83e913-8262-42d0-81c1-a3196d7ddce2",
    "prId" : 33148,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33148#pullrequestreview-384229014",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4011aa58-c14e-4dfb-9ddd-278bfaa5bf61",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Similar to above comment, self.frame and self.frame2 are actually different in that the former uses default column labels whereas the latter used ABCD; I didn't think that distinction was worth creating a separate fixture or object within this test",
        "createdAt" : "2020-03-30T17:58:37Z",
        "updatedAt" : "2020-03-30T17:58:42Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "57914705-3d06-4558-900c-28539b9a4ccf",
        "parentId" : "4011aa58-c14e-4dfb-9ddd-278bfaa5bf61",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure, but this is a historical accident, having a smaller set of common fixtures is better",
        "createdAt" : "2020-03-30T21:04:19Z",
        "updatedAt" : "2020-03-30T21:04:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d4af6e3a20573c884be9d22ddbeae0b79eaaeb8",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +734,738 @@        with tm.ensure_clean(\"test.json\") as path:\n            for df in [\n                float_frame,\n                self.intframe,\n                self.tsframe,"
  },
  {
    "id" : "a6418a81-23b2-4e67-ba09-9d4b90d18522",
    "prId" : 33228,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33228#pullrequestreview-386045473",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd2d9b95-333e-41ce-84c8-48aceeca25cd",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I removed the xfail preceding this because it was no longer applicable, but it unearthed a new issue when `numpy=True` and any orient except split.\r\n\r\nThat keyword is deprecated in #28512  and scheduled for removal in 2.0, so figured not worth investing much in",
        "createdAt" : "2020-04-02T00:57:08Z",
        "updatedAt" : "2020-04-02T22:43:02Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c755c517ecb72258f16e3bd93951aff539126725",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +174,178 @@\n        data = df.to_json(orient=orient)\n        if numpy and orient != \"split\":\n            pytest.xfail(f\"Orient {orient} is broken with numpy=True\")\n"
  }
]