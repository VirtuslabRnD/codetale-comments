[
  {
    "id" : "198c4938-2912-427b-bbda-11a90669523f",
    "prId" : 25092,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25092#pullrequestreview-247870995",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a7c2a20-66c1-4469-ad33-37ef5f25c559",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This should work for now. @simonjayhawkins something we will have to clean up when we get `.odf` files in the mix as well",
        "createdAt" : "2019-06-10T22:12:12Z",
        "updatedAt" : "2019-06-28T14:48:45Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dddc8c5aee1ab2d4529b30e516a86fe3db750c12",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +48,52 @@        Change directory and set engine for read_excel calls.\n        \"\"\"\n        if request.param == 'openpyxl' and read_ext == '.xls':\n            pytest.skip()\n        func = partial(pd.read_excel, engine=request.param)"
  },
  {
    "id" : "c40e8e2a-8b32-48e8-bd70-e93f8043d7a7",
    "prId" : 25427,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25427#pullrequestreview-314562437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5fcebda-31c1-4044-b2f0-7450836ff015",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This test only works when the file is available on master, so have to merge first and then can try again",
        "createdAt" : "2019-06-30T19:38:21Z",
        "updatedAt" : "2019-07-02T12:42:09Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "8b8968c5-3d5d-48c2-97c3-caaf0d692076",
        "parentId" : "c5fcebda-31c1-4044-b2f0-7450836ff015",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Seems like this code is still hanging around ill aim to address it when I tackle: https://github.com/pandas-dev/pandas/issues/29439",
        "createdAt" : "2019-11-09T15:04:12Z",
        "updatedAt" : "2019-11-09T15:04:12Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "4026fc1f5ec58c9482339293928cda0f92143c94",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +459,463 @@    @tm.network\n    def test_read_from_http_url(self, read_ext):\n        if read_ext == '.ods':  # TODO: remove once on master\n            pytest.skip()\n"
  },
  {
    "id" : "b04170a3-2b9b-4d74-bbf2-78df85379be3",
    "prId" : 25427,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25427#pullrequestreview-256866374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd877b2c-1025-4797-a7e0-c3f21394cdb2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why does this have an extra warning?",
        "createdAt" : "2019-07-02T12:33:04Z",
        "updatedAt" : "2019-07-02T12:42:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "87654bb6-105e-4a1a-8def-19dddc72744d",
        "parentId" : "fd877b2c-1025-4797-a7e0-c3f21394cdb2",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "The installation of defusedxml (required by odfpy) unfortunately triggers `DeprecationWarning` and/or `PendingDeprecationWarning` during the XML parsing of ODS and Excel files. This is accounted for at a higher level during the parametrizataion of `read_engine` but needs to be allowed here as well or else this throws an error",
        "createdAt" : "2019-07-02T12:44:23Z",
        "updatedAt" : "2019-07-02T12:44:23Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4026fc1f5ec58c9482339293928cda0f92143c94",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +81,85 @@        with tm.assert_produces_warning(FutureWarning,\n                                        check_stacklevel=False,\n                                        raise_on_extra_warnings=False):\n            with ignore_xlrd_time_clock_warning():\n                df1 = pd.read_excel(\"test1\" + read_ext, \"Sheet1\","
  },
  {
    "id" : "68c6fccd-fa17-481d-9270-3458b2f55d27",
    "prId" : 26755,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26755#pullrequestreview-247416090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09ad3063-8489-41d5-b54c-49350af1d9bd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can remove this test entirely",
        "createdAt" : "2019-06-09T21:41:24Z",
        "updatedAt" : "2019-06-09T21:45:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a5d3a0c27ce707cd6c280615f3de3a2f31ce5c",
    "line" : 481,
    "diffHunk" : "@@ -1,1 +479,483 @@        tm.assert_frame_equal(expected, actual)\n\n    @td.skip_if_no('py.path')\n    def test_read_from_py_localpath(self, read_ext):\n"
  },
  {
    "id" : "a6bc4b88-bd5a-4d3d-8ed6-2c87ebcde501",
    "prId" : 26755,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26755#pullrequestreview-247416090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "370da6a6-691c-4724-b7a1-69b2ad32c50d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can these just be module pytest.importorskip?",
        "createdAt" : "2019-06-09T21:42:48Z",
        "updatedAt" : "2019-06-09T21:45:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a5d3a0c27ce707cd6c280615f3de3a2f31ce5c",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@class TestReaders:\n\n    @pytest.fixture(autouse=True, params=[\n        # Add any engines to test here\n        pytest.param('xlrd', marks=pytest.mark.skipif("
  },
  {
    "id" : "1539132b-285b-41fd-aab2-0f4c4eedc425",
    "prId" : 29171,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29171#pullrequestreview-306156673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afd47b87-5d8a-483f-a7f5-6cfda4f535f8",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Looks good. Do we already have coverage for the `keep_default_na=False` case documented above?",
        "createdAt" : "2019-10-23T15:19:03Z",
        "updatedAt" : "2019-10-23T15:19:03Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "742b30f8-ffd3-4216-a5e2-9776230322cb",
        "parentId" : "afd47b87-5d8a-483f-a7f5-6cfda4f535f8",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Which case are you talking about?  The documentation mentions multiple `keep_default_na=False` cases.",
        "createdAt" : "2019-10-23T19:18:51Z",
        "updatedAt" : "2019-10-23T19:18:52Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "20213adf-5a58-46b7-9569-dc66e7013917",
        "parentId" : "afd47b87-5d8a-483f-a7f5-6cfda4f535f8",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Right was asking if we already have coverage on `keep_default_na=False` since mentioned in docs, but only True here (in contrast to `na_filter`)",
        "createdAt" : "2019-10-23T19:20:08Z",
        "updatedAt" : "2019-10-23T19:20:09Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "100c93f1-656a-4fa9-850f-7b3d76c4e900",
        "parentId" : "afd47b87-5d8a-483f-a7f5-6cfda4f535f8",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "The test above the one I've added has coverage for `keep_default_na=False`.",
        "createdAt" : "2019-10-23T20:06:47Z",
        "updatedAt" : "2019-10-23T20:07:30Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "435f73f160a6b74bcbe6e0100c896e93b32f291c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +881,885 @@        with pd.ExcelFile(\"test5\" + read_ext) as excel:\n            parsed = pd.read_excel(\n                excel, \"Sheet1\", keep_default_na=True, na_values=[\"apple\"], **kwargs\n            )\n"
  },
  {
    "id" : "2810ea85-161f-4496-9046-23a4fe2ae3a1",
    "prId" : 29836,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29836#pullrequestreview-346009750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43c33da8-6cf0-4ea8-a900-e941fedcf610",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I don't think we need both skips in this test? Or do they test different things?",
        "createdAt" : "2020-01-20T17:46:14Z",
        "updatedAt" : "2020-01-20T17:46:33Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a6e30296-7ab1-4838-909a-e8eb99ddbe88",
        "parentId" : "43c33da8-6cf0-4ea8-a900-e941fedcf610",
        "authorId" : "38089028-058a-4d27-8ada-7a6481c940dc",
        "body" : "This test will fail because test1.xlsb contains datetimes. However, the reason for xfailing is not correct in that case so I opted for having two xfails there so it fails for the right reason.",
        "createdAt" : "2020-01-21T16:22:08Z",
        "updatedAt" : "2020-01-21T16:22:09Z",
        "lastEditedBy" : "38089028-058a-4d27-8ada-7a6481c940dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b6bc9a16ae9c6e304986cd4590a5ba664173bd6",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +563,567 @@    @tm.network\n    def test_read_from_http_url(self, read_ext):\n        if read_ext == \".xlsb\":\n            pytest.xfail(\"xlsb files not present in master repo yet\")\n        if pd.read_excel.keywords[\"engine\"] == \"pyxlsb\":"
  },
  {
    "id" : "d31385c1-56ac-448c-b033-174ffdda48bb",
    "prId" : 30456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30456#pullrequestreview-336277730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41b1f190-4a33-4923-ae3f-b48fa8fb93a1",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Would it alternately be possible to just change the scope of this fixture to be class level? This is a decent amount of logic to sift through for parametrization just wondering if we can't strike a better balance with a `scope=\"class\"` argument rather than all of this logic",
        "createdAt" : "2019-12-24T22:31:16Z",
        "updatedAt" : "2019-12-24T22:31:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0bd44879-38f4-491c-8353-db060bf590a8",
        "parentId" : "41b1f190-4a33-4923-ae3f-b48fa8fb93a1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I couldn't find a way to do what you're describing, but agree it would be nice.",
        "createdAt" : "2019-12-24T23:15:13Z",
        "updatedAt" : "2019-12-24T23:15:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "06efa984ce37739d5f4a75c9ec0b6d27f7d52afb",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +90,94 @@    autouse=True,\n    params=[\n        _transfer_marks(eng, ext)\n        for eng in engine_params\n        for ext in read_ext_params"
  },
  {
    "id" : "4688b987-9f9d-4cf7-86cf-3591dedba5ce",
    "prId" : 32544,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32544#pullrequestreview-373244748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88977703-8efa-4261-9b81-c56a3d14a0a6",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you revert this? Not totally equivalent",
        "createdAt" : "2020-03-09T01:17:38Z",
        "updatedAt" : "2020-03-12T02:29:39Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4461fb6e-ed03-481e-907d-d72e75a87c7e",
        "parentId" : "88977703-8efa-4261-9b81-c56a3d14a0a6",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "It is indeed not equivalent, but that is on purpose. The test is faulty. First you open a file and fail to close it, then you check for a file leak. This demonstrates in fact the issue we are having. Ownership of the file handle should be managed at the level it is created, unless you explicitly transfer ownership of the file handle to `ExcelFile`, but IMHO that is not what you would expect (and the reason for the ticket)",
        "createdAt" : "2020-03-09T06:45:04Z",
        "updatedAt" : "2020-03-12T02:29:39Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      },
      {
        "id" : "e901a198-d539-4262-94e8-ab336fd91938",
        "parentId" : "88977703-8efa-4261-9b81-c56a3d14a0a6",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@WillAyd do you know what the original intent of this test was? The blame history just points to a test reorganization.\r\n\r\nSeems like the disagreement is around whether `ExcelFile(obj).__exit__` should close the file when given an open file object.\r\n\r\n@roberthdevries can you check the behavior here on pandas 0.25.3 and 1.0.1? And the behavior on this branch is to not close the file when provided an open file?\r\n\r\nI don't think this changed test is adding much value. It's just testing the behavior of `open` now, which we can probably rely on being correct :)",
        "createdAt" : "2020-03-10T14:03:51Z",
        "updatedAt" : "2020-03-12T02:29:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "02e76043-5d74-454a-a46a-3549485e803e",
        "parentId" : "88977703-8efa-4261-9b81-c56a3d14a0a6",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea I think this test strays a little bit from the OP, where a straight ExcelFile object is closing the handle. In this case the context manager is closing it, which maybe is OK. I can't speak to original history of this.\r\n\r\nSo @roberthdevries can you maybe summarize what you are proposing? Something like:\r\n\r\n 1. ExcelFile Context Manager + path: should manage open/close lifecycle\r\n 2. ExcelFile Context Manager + handle: should not manage open/close lifecycle\r\n 3. ExcelFile + path: should manage open, not close\r\n 4. ExcelFile + handle: should not manage open/close lifecycle\r\n\r\n? \r\n\r\nI think point 2 above is a little ambiguous; if there's a precedent for it elsewhere would be interested",
        "createdAt" : "2020-03-10T15:52:53Z",
        "updatedAt" : "2020-03-12T02:29:39Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "550c10c7-9181-4e0b-8df3-ca77dd035f86",
        "parentId" : "88977703-8efa-4261-9b81-c56a3d14a0a6",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "I think the basic philosophy should be that a resource should be released at the same level where it was created. This is one of the main use cases of context managers.\r\nSo whenever a resource is released at **another** level, you violate this rule. (hence this ticket)\r\nThe original `ExcelFile` code closed a file it got from the outside, and this specific test relied on this (erroneous IMHO) behavior.\r\nSo a nested context manager should work as expected, in the sense that the outside context manager releases the outer resource and the inner context manager releases the inner resource.\r\n\r\nSo:\r\n```python\r\nwith open(\"foo.xlsx\") as f:\r\n    with ExcelFile(f) as xlsx:\r\n        # do stuff\r\n```\r\nIn this specific example the `ExcelFile` context manager should **not** close `f`, as that would be the responsibility of the `open` context manager.\r\n\r\nIn this example:\r\n```python\r\nf = open(\"foo.xlsx\")\r\nwith ExcelFile(f) as xlsx:\r\n    # do stuff\r\n```\r\nWe have a file leak caused by the programmer forgetting to close the file handle. This is a programmer error, and IMHO not something that needs to be fixed.\r\nHowever, whenever `f` goes out of scope, the `__del__` method will be called which will probably close the file anyway.\r\n\r\nFor use cases where `ExcelFile` is used in combination with path names the context manager case implies closing the file.\r\nIn this case:\r\n```python\r\nxlsx = ExcelFile(filename)\r\n```\r\nI would propose to have a `__del__` method which will close the file and the other `ExcelFile` resources.\r\n\r\nSo I agree with you on case 1 and 4.\r\nI also agree with case 2, there is no ambiguity for me. The `ExcelFile` context manager only should manage its own resources, not the file resource.\r\nFor case 3 there should be a nuance in the sense that the `__del__` method should close the resource.\r\nFor case 4, the `ExcelFile` should not touch the open/close lifecyle of the file handle, but the `ExcelFile` resource itself should be closed again in the `__del__` method.",
        "createdAt" : "2020-03-10T19:22:22Z",
        "updatedAt" : "2020-03-12T02:29:39Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      },
      {
        "id" : "44ace61d-6e8e-41ab-9a04-625003923ecb",
        "parentId" : "88977703-8efa-4261-9b81-c56a3d14a0a6",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Thanks for the insights. So agree with what you are saying but not sure that is clearly expressed in the implementation. Shouldn't we alternately just within the ExcelFile construct or `__enter__` keep track of whether or not the resource lifecycle is owned or borrowed? As is I don't think that's ever very clear",
        "createdAt" : "2020-03-11T01:48:03Z",
        "updatedAt" : "2020-03-12T02:29:39Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d8bab7fb-851d-4106-99db-f2f7b2981180",
        "parentId" : "88977703-8efa-4261-9b81-c56a3d14a0a6",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> Shouldn't we alternately just within the ExcelFile constructor\r\n\r\nThat seems most sensible to me. Do we have a standard method for checking if something is a file-like object vs. a path?",
        "createdAt" : "2020-03-11T12:27:08Z",
        "updatedAt" : "2020-03-12T02:29:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "01a71f07-7e99-4d97-ba7e-04c6164fb7d1",
        "parentId" : "88977703-8efa-4261-9b81-c56a3d14a0a6",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "It ends up not being an issue here since ExcelFile doesn't open any files, just the engine.",
        "createdAt" : "2020-03-12T02:40:31Z",
        "updatedAt" : "2020-03-12T02:40:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8ea7bbe38ee21bf685ef7a5cfc7a96817a56cc1",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1032,1036 @@\n    def test_reader_closes_file(self, engine, read_ext):\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            with pd.ExcelFile(f) as xlsx:\n                # parses okay"
  },
  {
    "id" : "a64d3c13-7d96-41c0-8093-d13271712ccb",
    "prId" : 32544,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32544#pullrequestreview-372824435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20ec9221-c82f-491e-8694-88844453f31c",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is there a way to construct this test without the `del` call? This test might not be doing anything, since `del` doesn't really mean `__del__` gets called",
        "createdAt" : "2020-03-11T01:44:03Z",
        "updatedAt" : "2020-03-12T02:29:39Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "cc0ca0c6-26b4-4737-9d37-5b0214380579",
        "parentId" : "20ec9221-c82f-491e-8694-88844453f31c",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "`__del__` will get called in practice when the last reference is `del`eted. This is needed to trigger the erroneous behavior.\r\nThis is literally the code in the OP's issue. (except I replaced `ExcelFile` with `read_excel`, it seems)",
        "createdAt" : "2020-03-11T14:50:40Z",
        "updatedAt" : "2020-03-12T02:29:39Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8ea7bbe38ee21bf685ef7a5cfc7a96817a56cc1",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +637,641 @@        with open(str_path, \"rb\") as f:\n            x = pd.read_excel(f, \"Sheet1\", index_col=0)\n            del x\n            # should not throw an exception because the passed file was closed\n            f.read()"
  },
  {
    "id" : "0322d18c-db68-48b5-8a0c-5138cd39cd4b",
    "prId" : 33982,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33982#pullrequestreview-421532363",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "587ee64a-9df2-4d50-ab4d-3a86549638bc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what exactly is this testing? can you add the issue number as a comment. should we also assert the results?",
        "createdAt" : "2020-05-25T22:15:35Z",
        "updatedAt" : "2020-06-01T00:42:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "aac7de36-0678-47c3-be79-872e75811ffd",
        "parentId" : "587ee64a-9df2-4d50-ab4d-3a86549638bc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you assert the results. as a point of interaction, do not resolve conversions, let the questioner do it.",
        "createdAt" : "2020-05-31T22:11:32Z",
        "updatedAt" : "2020-06-01T00:42:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "41d88e8422242d7a0900df4b69373131a99ebdb9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1087,1091 @@\n    @pytest.mark.parametrize(\"filename\", [\"df_empty.xlsx\", \"df_equals.xlsx\"])\n    def test_header_with_index_col(self, engine, filename):\n        # GH 33476\n        idx = pd.Index([\"Z\"], name=\"I2\")"
  },
  {
    "id" : "c1332862-982d-4d06-98e9-a1b0b2ffbe56",
    "prId" : 34954,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34954#pullrequestreview-437557839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "781020b8-ed16-40b2-b428-383b15154417",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Are the to_pydatetime calls required?",
        "createdAt" : "2020-06-24T19:20:35Z",
        "updatedAt" : "2020-07-08T15:48:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a259f9a7-8e0f-4615-8d5f-7d21a985f8fa",
        "parentId" : "781020b8-ed16-40b2-b428-383b15154417",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "Because when the Excel reader creates the names of the index, the types are of `dt.datetime` not the pandas `datetime`",
        "createdAt" : "2020-06-25T14:15:04Z",
        "updatedAt" : "2020-07-08T15:48:48Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "b78c076b-2b53-4efd-b1a7-71bb1fec1f0a",
        "parentId" : "781020b8-ed16-40b2-b428-383b15154417",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, where is this done? this is unfortunately as these should actually be Timestamp",
        "createdAt" : "2020-06-25T14:27:09Z",
        "updatedAt" : "2020-07-08T15:48:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1acda937-657c-4c48-a576-8fb2d8a25866",
        "parentId" : "781020b8-ed16-40b2-b428-383b15154417",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "> hmm, where is this done? this is unfortunately as these should actually be Timestamp\r\n\r\nSo is this a separate issue - that we don't want the *names* to be dt.datetime ?  If so, I will create an issue for that.",
        "createdAt" : "2020-06-25T14:35:11Z",
        "updatedAt" : "2020-07-08T15:48:48Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ceb77e372a0e4acd2811217b4384986a21d90d1",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1156,1160 @@            [(pd.to_datetime(\"02/29/2020\"), pd.to_datetime(\"03/01/2020\"))],\n            names=[\n                pd.to_datetime(\"02/29/2020\").to_pydatetime(),\n                pd.to_datetime(\"03/01/2020\").to_pydatetime(),\n            ],"
  }
]