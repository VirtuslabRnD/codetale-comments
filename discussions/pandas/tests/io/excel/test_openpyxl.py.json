[
  {
    "id" : "9eb67656-6086-4069-a3a6-0dc88e7df600",
    "prId" : 26755,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26755#pullrequestreview-247416090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be332584-4fe8-4e6f-a40a-55fe9dd6585a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use a pytest.importorskip\r\n\r\nalso I would not use classes unless you have separate discrete cases",
        "createdAt" : "2019-06-09T21:40:46Z",
        "updatedAt" : "2019-06-09T21:45:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a5d3a0c27ce707cd6c280615f3de3a2f31ce5c",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +9,13 @@\n\n@td.skip_if_no('openpyxl')\n@pytest.mark.parametrize(\"ext\", ['.xlsx'])\nclass TestOpenpyxlTests:"
  },
  {
    "id" : "52fb7a81-501e-48e0-9c5e-1a96823eae63",
    "prId" : 26764,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26764#pullrequestreview-247587125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c38cb3c-8709-4657-b76b-fed0cbe12b6b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can move this up",
        "createdAt" : "2019-06-10T12:27:38Z",
        "updatedAt" : "2019-06-10T12:28:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9472b2e379dd8ba9720897bb74463af29a64bc5",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +12,16 @@\ndef test_to_excel_styleconverter(ext):\n    from openpyxl import styles\n\n    hstyle = {"
  },
  {
    "id" : "768dc627-fb54-4470-9d4c-5c362249ba2e",
    "prId" : 26764,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26764#pullrequestreview-247589748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9fa34ed-17f3-4404-af13-e45e3c450a42",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "isn't this just a fixture definition?",
        "createdAt" : "2019-06-10T12:27:46Z",
        "updatedAt" : "2019-06-10T12:28:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "68e3a730-581f-4707-b214-5f4f2277a277",
        "parentId" : "f9fa34ed-17f3-4404-af13-e45e3c450a42",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "do we want more fixtures?\r\n\r\nwe could have a fixture and inject into all tests or we could alias this mark and decorate all tests.\r\n\r\nthis just applies the parametrisation to all tests in module automatically. ",
        "createdAt" : "2019-06-10T12:34:27Z",
        "updatedAt" : "2019-06-10T12:34:27Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "1d2bc4c4-1a32-4c7a-8fea-0672debeaade",
        "parentId" : "f9fa34ed-17f3-4404-af13-e45e3c450a42",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Not yet but we should probably create a `write_ext` fixture for use here and in the writer tests (the existing fixture is applicable to extensions that we read)",
        "createdAt" : "2019-06-10T12:35:15Z",
        "updatedAt" : "2019-06-10T12:36:17Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "859f03c5-5201-47c0-a1a2-98316bdaf0f1",
        "parentId" : "f9fa34ed-17f3-4404-af13-e45e3c450a42",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i just find this very opaque here (we don't use this idiom anywhere else)",
        "createdAt" : "2019-06-10T12:36:08Z",
        "updatedAt" : "2019-06-10T12:36:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e7899def-1aa4-4203-a877-0d1ccca378c6",
        "parentId" : "f9fa34ed-17f3-4404-af13-e45e3c450a42",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Probably better done in a separate PR IMO as that will require a decent amount of updates",
        "createdAt" : "2019-06-10T12:36:14Z",
        "updatedAt" : "2019-06-10T12:36:17Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9472b2e379dd8ba9720897bb74463af29a64bc5",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +8,12 @@openpyxl = pytest.importorskip(\"openpyxl\")\n\npytestmark = pytest.mark.parametrize(\"ext\", ['.xlsx'])\n\n"
  },
  {
    "id" : "7f6d7490-da35-4101-9ea7-4561ac1bd7cf",
    "prId" : 26764,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26764#pullrequestreview-247587125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a9424ee-bd80-4f31-907f-a4662b96bd0d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you move imports to the top",
        "createdAt" : "2019-06-10T12:27:57Z",
        "updatedAt" : "2019-06-10T12:28:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9472b2e379dd8ba9720897bb74463af29a64bc5",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +67,71 @@\ndef test_write_cells_merge_styled(ext):\n    from pandas.io.formats.excel import ExcelCell\n\n    sheet_name = 'merge_styled'"
  },
  {
    "id" : "dee4e9d2-b645-43b7-be45-fc172111d6ab",
    "prId" : 29862,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29862#pullrequestreview-402854796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68d84ca6-2138-454c-a4e6-4792320a2352",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@charlesdong1991 any idea if this TODO can be addressed?",
        "createdAt" : "2020-04-29T02:38:31Z",
        "updatedAt" : "2020-04-29T02:38:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "576d432f-3a24-4dc4-a883-cfadf3d32200",
        "parentId" : "68d84ca6-2138-454c-a4e6-4792320a2352",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "this `xfail` should be removed!! new version of `openpyxl` has fixed the issue @jbrockmendel ",
        "createdAt" : "2020-04-29T16:49:32Z",
        "updatedAt" : "2020-04-29T16:49:33Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      },
      {
        "id" : "e2832332-68aa-4c7c-9d96-d02fe53fb36a",
        "parentId" : "68d84ca6-2138-454c-a4e6-4792320a2352",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "emm, seems have been removed on master.",
        "createdAt" : "2020-04-29T16:50:45Z",
        "updatedAt" : "2020-04-29T16:50:45Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "893b1d404ffdd80bcb6a8491212a07f02ab37284",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +111,115 @@def test_to_excel_with_openpyxl_engine(ext, tmpdir):\n    # GH 29854\n    # TODO: Fix this once newer version of openpyxl fixes the bug\n    df1 = DataFrame({\"A\": np.linspace(1, 10, 10)})\n    df2 = DataFrame({\"B\": np.linspace(1, 20, 10)})"
  },
  {
    "id" : "d9a62197-8dec-4829-82ac-28a87fc3ec5f",
    "prId" : 39586,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39586#pullrequestreview-583897725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e77b322b-a910-4c96-9c0f-fe0e488f3570",
        "parentId" : null,
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "It cannot hurt to call `wb.close()` before `tm.assert_frame_equal`",
        "createdAt" : "2021-02-04T02:29:09Z",
        "updatedAt" : "2021-02-06T01:01:48Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      },
      {
        "id" : "aad90e38-f049-4d58-8340-199327f969f1",
        "parentId" : "e77b322b-a910-4c96-9c0f-fe0e488f3570",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Thanks @twoertwein, added.",
        "createdAt" : "2021-02-04T23:20:01Z",
        "updatedAt" : "2021-02-06T01:01:48Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "224d2a18aa87d6551b9f4a9201a713d1f77eafcc",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +130,134 @@    result = pd.read_excel(wb, engine=\"openpyxl\")\n    wb.close()\n    expected = pd.read_excel(filename)\n    tm.assert_frame_equal(result, expected)\n"
  },
  {
    "id" : "5314f410-124b-4ec4-99df-6d26b1e08d5a",
    "prId" : 40231,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40231#pullrequestreview-641570284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9080756f-cd0a-4b8b-ab92-41f525d425e8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what about other engines?",
        "createdAt" : "2021-03-15T13:58:27Z",
        "updatedAt" : "2021-04-21T19:55:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5a73deb2-75e9-4792-b49b-406d982e99a7",
        "parentId" : "9080756f-cd0a-4b8b-ab92-41f525d425e8",
        "authorId" : "a7f426e2-d5bb-4f2c-998c-ae07ff11555f",
        "body" : "Openpyxl is the only engine which supports append mode currently, and this option only affects append mode",
        "createdAt" : "2021-03-17T19:09:17Z",
        "updatedAt" : "2021-04-21T19:55:20Z",
        "lastEditedBy" : "a7f426e2-d5bb-4f2c-998c-ae07ff11555f",
        "tags" : [
        ]
      },
      {
        "id" : "92b859a6-4005-4977-a893-95a7a7b93b62",
        "parentId" : "9080756f-cd0a-4b8b-ab92-41f525d425e8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, so we completely ignore on other engines is fine. is there a reason to raise / warn in that case if its not None?",
        "createdAt" : "2021-04-20T23:27:23Z",
        "updatedAt" : "2021-04-21T19:55:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d1f7d316-4b10-46aa-b8ef-39a3cd22c957",
        "parentId" : "9080756f-cd0a-4b8b-ab92-41f525d425e8",
        "authorId" : "a7f426e2-d5bb-4f2c-998c-ae07ff11555f",
        "body" : "As it's written at the moment passing `if_sheet_exists` in write mode will raise an error with all engines (mostly as a feedback mechanism for the user)",
        "createdAt" : "2021-04-21T21:37:52Z",
        "updatedAt" : "2021-04-21T21:37:52Z",
        "lastEditedBy" : "a7f426e2-d5bb-4f2c-998c-ae07ff11555f",
        "tags" : [
        ]
      }
    ],
    "commit" : "49c4d3be5f5e614d45c63443e152c7b2d06e4b24",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +163,167 @@    df = DataFrame({\"fruit\": [\"pear\"]})\n    with tm.ensure_clean(ext) as f:\n        with pytest.raises(ValueError, match=re.escape(msg)):\n            df.to_excel(f, \"foo\", engine=\"openpyxl\")\n            with ExcelWriter("
  }
]