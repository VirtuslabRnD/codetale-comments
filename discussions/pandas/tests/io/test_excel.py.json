[
  {
    "id" : "da5b0a42-929a-4cc7-9818-b630d9277d60",
    "prId" : 16522,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16522#pullrequestreview-40934964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e115913-e576-4042-8ef6-fc996da2011f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did this test change?",
        "createdAt" : "2017-05-30T11:38:37Z",
        "updatedAt" : "2017-06-01T16:05:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7fcaaeb0-b0db-48a4-ac4a-6c978b322764",
        "parentId" : "0e115913-e576-4042-8ef6-fc996da2011f",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yes, because `has_index_names` got dropped (test fails in original form).  That's because when we passed in `has_index_names`, the value of the parameter would only change to `True` if they were detected.",
        "createdAt" : "2017-05-30T12:41:46Z",
        "updatedAt" : "2017-06-01T16:05:35Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "f882497afba5baa1d3470e850888f3616555edd0",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +889,893 @@        # We detect headers to determine if index names exist, so\n        # that \"index\" name in the \"names\" version of the data will\n        # now be interpreted as rows that include null data.\n        data = np.array([[None, None, None, None, None],\n                         ['R0C0', 'R0C1', 'R0C2', 'R0C3', 'R0C4'],"
  },
  {
    "id" : "60d8035d-2b8c-44c9-9d88-b2b3a8904c37",
    "prId" : 18600,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18600#pullrequestreview-95661331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "315d7644-d803-40a2-b52d-36db9e41b7e7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is this changing?",
        "createdAt" : "2018-02-05T11:21:42Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "09e1aebd-c4b1-41b1-9861-502fbd216c9c",
        "parentId" : "315d7644-d803-40a2-b52d-36db9e41b7e7",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "The test was wrong and worked by accident. The result is, and should be, of ``object`` dtype; but the \"expected\" one was too, because the passed dtype wasn't being considered (see above).",
        "createdAt" : "2018-02-05T14:42:28Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "0951565d-3c62-44f3-b568-71a0de67d62a",
        "parentId" : "315d7644-d803-40a2-b52d-36db9e41b7e7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok again add this as an example in a new issue",
        "createdAt" : "2018-02-10T17:31:42Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "069af26c-44a4-433b-98c3-321353db938e",
        "parentId" : "315d7644-d803-40a2-b52d-36db9e41b7e7",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Again #19646",
        "createdAt" : "2018-02-11T16:30:37Z",
        "updatedAt" : "2018-04-01T15:27:20Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "22701fcf9e2f9daae4020d50af1ff9042803691b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +462,466 @@        expected_header_none = DataFrame(pd.Series([0], dtype='int64'))\n        tm.assert_frame_equal(actual_header_none, expected_header_none)\n        expected_header_zero = DataFrame(columns=[0])\n        tm.assert_frame_equal(actual_header_zero, expected_header_zero)\n"
  },
  {
    "id" : "39f09bc5-4d9e-4715-9036-e3459dd2034b",
    "prId" : 19829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19829#pullrequestreview-98371846",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6848daa2-8121-4139-a8d8-a038ad63c724",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This test was pretty wonky to begin with. With the parametrization I've split out the tests and given preference to `xlsxwriter` if both that and `openpyxl` are installed with `.xlsx` files, which is what the original function was doing in a roundabout way",
        "createdAt" : "2018-02-21T21:43:57Z",
        "updatedAt" : "2018-02-26T02:31:25Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "872e7d6b969c2fd8d8b482f388802f1dd2d17943",
    "line" : 2385,
    "diffHunk" : "@@ -1,1 +2117,2121 @@            not td.safe_import('xlwt'), reason='No xlwt'))\n    ])\n    def test_ExcelWriter_dispatch(self, klass, ext):\n        with ensure_clean(ext) as path:\n            writer = ExcelWriter(path)"
  },
  {
    "id" : "d16916f4-2966-4487-a2dc-50a254c7de46",
    "prId" : 19829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19829#pullrequestreview-99166807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b5e244c-51dd-4587-9b91-83004b5f3af5",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Rather than creating subclasses and adding arbitrary class metadata it seemed easy enough and clearer to parametrize the writing tests for each engine and the extension it should be serving",
        "createdAt" : "2018-02-21T21:45:29Z",
        "updatedAt" : "2018-02-26T02:31:25Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "95ee1ff8-2975-46a7-b70d-e35e93f0c6d3",
        "parentId" : "3b5e244c-51dd-4587-9b91-83004b5f3af5",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Another thing that came to mind - want me to add parametrization for `.xlsm` with `openpyxl` and `xlsxwriter`? Neither were being tested before, but I think it makes sense to add those extensions for more coverage. \r\n\r\nHappy to add here or in separate change if we don't want to expand the scope further",
        "createdAt" : "2018-02-26T01:21:56Z",
        "updatedAt" : "2018-02-26T02:31:25Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "872e7d6b969c2fd8d8b482f388802f1dd2d17943",
    "line" : 884,
    "diffHunk" : "@@ -1,1 +1049,1053 @@        not td.safe_import('xlsxwriter'), reason='No xlsxwriter'))\n])\nclass TestExcelWriter(_WriterBase):\n    # Base class for test cases to run with different Excel writers.\n"
  },
  {
    "id" : "58da9051-450c-4db9-a3d6-5fd39038d6dd",
    "prId" : 19829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19829#pullrequestreview-98373807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1af38dcd-f403-4d47-86dc-621d77131fd5",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "The original `ExcelWriterBase` class had an explicit setup / teardown method to set / reset options before each test case. Because I parametrized that test the setup / teardown paradigm did not have visibility into the actual fixtures being passes, so setting up an autoused fixture here to wrap each test case was the best option to inspect the parameters and set / reset the appropriate excel options before and after test execution.\r\n\r\nI made this it's own subclass because the three classes that test specific features of `openpyxl`, `xlsxwriter` and `xlwt` still benefit from having this fixture, although it does require them to provide some extra metadata (namely the `merge_cells` fixture) that they don't use.\r\n\r\nIf this is too wonky, I think an alternate approach would be to re-wire the tests to specifically pass the engine fixture as a keyword argument to their read functions (didn't explore that option in detail so could be wrong)",
        "createdAt" : "2018-02-21T21:50:04Z",
        "updatedAt" : "2018-02-26T02:31:25Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "872e7d6b969c2fd8d8b482f388802f1dd2d17943",
    "line" : 839,
    "diffHunk" : "@@ -1,1 +1009,1013 @@\n\nclass _WriterBase(SharedItems):\n\n    @pytest.fixture(autouse=True)"
  },
  {
    "id" : "1f6ea857-f9db-4481-a9ea-e86490679353",
    "prId" : 19829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19829#pullrequestreview-98386515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96f32398-ab28-494c-8d58-4b356a60d5f8",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "More verbose doing this, but with the parametrization of Test Classes performed further down in the module I think it's better to explicitly pass `ext` as an argument rather than creating subclasses that bind their own `ext` variable",
        "createdAt" : "2018-02-21T22:31:50Z",
        "updatedAt" : "2018-02-26T02:31:25Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "872e7d6b969c2fd8d8b482f388802f1dd2d17943",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +68,72 @@        return dfref\n\n    def get_excelfile(self, basename, ext):\n        \"\"\"\n        Return test data ExcelFile instance. Test data path is defined by"
  },
  {
    "id" : "f8e30777-6db6-4332-877b-f3d6751f918f",
    "prId" : 19829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19829#pullrequestreview-98787708",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12e6a418-739d-48c7-8375-67efcc67344a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could put this in the decorator?",
        "createdAt" : "2018-02-22T02:58:07Z",
        "updatedAt" : "2018-02-26T02:31:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1b24e560-9593-4cf8-8cfb-633561b0b9e2",
        "parentId" : "12e6a418-739d-48c7-8375-67efcc67344a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This conditional doesn't skip anything - it just sets a different expectation on the precision of the result. I suppose we could split this into two separate tests and skip one or the other depending on what's installed but I think that is more trouble than its worth, especially considering the current skip_if_no decorator only has a `min_version` but not a `max_version`",
        "createdAt" : "2018-02-22T16:30:38Z",
        "updatedAt" : "2018-02-26T02:31:25Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0dfef31c-f412-4704-a82d-b73f23e9d748",
        "parentId" : "12e6a418-739d-48c7-8375-67efcc67344a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, no prolem.",
        "createdAt" : "2018-02-23T01:26:49Z",
        "updatedAt" : "2018-02-26T02:31:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "872e7d6b969c2fd8d8b482f388802f1dd2d17943",
    "line" : 660,
    "diffHunk" : "@@ -1,1 +668,672 @@\n        # Test reading times with and without milliseconds. GH5945.\n        if LooseVersion(xlrd.__VERSION__) >= LooseVersion(\"0.9.3\"):\n            # Xlrd >= 0.9.3 can handle Excel milliseconds.\n            expected = DataFrame.from_dict({\"Time\": [time(1, 2, 3),"
  },
  {
    "id" : "15abfb91-19d9-40bf-a643-3e1c1743dac1",
    "prId" : 19829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19829#pullrequestreview-99128390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0f50032-dbed-426c-8651-e0e55e03d7e2",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This failed without `xlwt` because the extension was hard-coded to `.xls` all the time, rather than using the `ext` that the fixture provides for all other test cases. I updated that to use the fixture, but in the process discovered that this doesn't work correctly with `openpyxl` so explicitly added a `pytest.xfail` and plan to open an issue to address separately",
        "createdAt" : "2018-02-25T00:50:58Z",
        "updatedAt" : "2018-02-26T02:31:25Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "872e7d6b969c2fd8d8b482f388802f1dd2d17943",
    "line" : 1559,
    "diffHunk" : "@@ -1,1 +1372,1376 @@        tm.assert_frame_equal(expected, recons)\n\n    def test_to_excel_timedelta(self, merge_cells, engine, ext):\n        # GH 19242, GH9155 - test writing timedelta to xls\n        if engine == 'openpyxl':"
  },
  {
    "id" : "9da65f3c-e82b-4db4-8c34-1d0ddc14aafd",
    "prId" : 19829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19829#pullrequestreview-99128404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fe05e92-2051-4d8b-b5b1-d82ed47f0c90",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Figured I might as well parametrize this and the following two functions as part of this",
        "createdAt" : "2018-02-25T00:51:46Z",
        "updatedAt" : "2018-02-26T02:31:25Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "872e7d6b969c2fd8d8b482f388802f1dd2d17943",
    "line" : 1151,
    "diffHunk" : "@@ -1,1 +1143,1147 @@        self.frame.to_excel(self.path, 'test1', index=False)\n\n    @pytest.mark.parametrize(\"np_type\", [\n        np.int8, np.int16, np.int32, np.int64])\n    def test_int_types(self, merge_cells, engine, ext, np_type):"
  },
  {
    "id" : "d62a8257-fc41-47ee-aff3-dbe96fc80952",
    "prId" : 19829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19829#pullrequestreview-99128463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6f492b2-e91a-4489-8557-27329eb87e5a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This and the next test modified the name of the file generated by `ensure_clean`. In these tests, the content manager within the setup fixture is therefore a no-op. Could move these into a separate class or do something tricky to prevent that, but I figure it was easiest just to keep as is",
        "createdAt" : "2018-02-25T00:56:16Z",
        "updatedAt" : "2018-02-26T02:31:25Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "872e7d6b969c2fd8d8b482f388802f1dd2d17943",
    "line" : 1793,
    "diffHunk" : "@@ -1,1 +1515,1519 @@                       columns=[u'X\\u0193', u'Y', u'Z'])\n\n        with ensure_clean('__tmp_to_excel_float_format__.' + ext) as filename:\n            df.to_excel(filename, sheet_name='TestSheet', encoding='utf8')\n            result = read_excel(filename, 'TestSheet', encoding='utf8')"
  },
  {
    "id" : "75b00c7d-1b49-4e7a-8c24-c908c3686899",
    "prId" : 19829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19829#pullrequestreview-99172569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4da03a3-9d0f-4072-8740-5cd4fe75ce0d",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This keeps failing on Travis with Py2, but AppVeyor was fine and I can't reproduce locally (macOS) so I assume it to be linux-only (?). Since this is a \"new\" test I figure just skip for now and I'll open an issue to see if someone on a Linux platform can help troubleshoot. If you have a better idea on how to manage let me know",
        "createdAt" : "2018-02-26T02:34:03Z",
        "updatedAt" : "2018-02-26T02:34:04Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "872e7d6b969c2fd8d8b482f388802f1dd2d17943",
    "line" : 1582,
    "diffHunk" : "@@ -1,1 +1376,1380 @@        if engine == 'openpyxl':\n            pytest.xfail('Timedelta roundtrip broken with openpyxl')\n        if engine == 'xlsxwriter' and (sys.version_info[0] == 2 and\n                                       sys.platform.startswith('linux')):\n            pytest.xfail('Not working on linux with Py2 and xlsxwriter')"
  },
  {
    "id" : "369799c4-5d0f-4574-bbf5-ccbb333ad846",
    "prId" : 22679,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22679#pullrequestreview-155028911",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22f3b8eb-5a1a-40e0-9e25-beda29da8478",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Could we alternately just bump the minimum version of xlrd? 1.0.0 is over 2 years old at this point. Only 1.1.0 has been released since then but even that is over a year old now",
        "createdAt" : "2018-09-13T06:33:59Z",
        "updatedAt" : "2018-09-13T06:33:59Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "9bfd5cff-3cb9-4649-8707-b5ea596eeabd",
        "parentId" : "22f3b8eb-5a1a-40e0-9e25-beda29da8478",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Thought about it, though this seemed easier for now. I don't have a strong preference.",
        "createdAt" : "2018-09-13T10:56:59Z",
        "updatedAt" : "2018-09-13T10:56:59Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "57f4a5ac1d2ce28037a60889b6cb95c9aff0b031",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +106,110 @@    # This is based on ExcelWriterBase\n\n    @td.skip_if_no('xlrd', '1.0.1')  # GH-22682\n    def test_usecols_int(self, ext):\n"
  }
]