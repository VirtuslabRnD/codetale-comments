[
  {
    "id" : "4ff73479-a53e-41a9-8a1e-720644e4c5ef",
    "prId" : 14762,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14762#pullrequestreview-11011827",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2f7558c-c5ab-4e5f-b829-300d729c9d5b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm only these 2 occurences of the original KeyError.....?",
        "createdAt" : "2016-12-01T15:27:20Z",
        "updatedAt" : "2016-12-09T14:58:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2a35608a-e0bc-447d-a47a-260cef9f47bd",
        "parentId" : "d2f7558c-c5ab-4e5f-b829-300d729c9d5b",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "Via my methodology described above, that's all I found. ",
        "createdAt" : "2016-12-01T17:12:57Z",
        "updatedAt" : "2016-12-09T14:58:32Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "76b6434e0fd60a60a0536f2e207f5d03d6552349",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2231,2235 @@        self.assertEqual(df.index.lexsort_depth, 0)\n        with tm.assertRaisesRegexp(\n                UnsortedIndexError,\n                'MultiIndex Slicing requires the index to be fully '\n                r'lexsorted tuple len \\(2\\), lexsort depth \\(0\\)'):"
  },
  {
    "id" : "d2b694a5-500c-4101-9451-28dab4508865",
    "prId" : 17956,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17956#pullrequestreview-72208854",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d184fc29-8a02-4ec2-a4cc-94f11bf337c1",
        "parentId" : null,
        "authorId" : "a6699474-cbaa-4730-8ac4-f757df226d77",
        "body" : "Would it make sense to do a `sys.getrefcount(df)` before and after and assert that it doesn't change? Or is this assertion too strong?",
        "createdAt" : "2017-10-25T12:00:57Z",
        "updatedAt" : "2017-10-27T11:09:20Z",
        "lastEditedBy" : "a6699474-cbaa-4730-8ac4-f757df226d77",
        "tags" : [
        ]
      },
      {
        "id" : "271e68c0-b583-498e-86aa-ed2d62d3422c",
        "parentId" : "d184fc29-8a02-4ec2-a4cc-94f11bf337c1",
        "authorId" : "7c84fc55-a848-4ca2-a014-28c856c6d6e2",
        "body" : "There is no need for that, the `weakref`-based test below already tests that no leak happens.",
        "createdAt" : "2017-10-25T12:02:21Z",
        "updatedAt" : "2017-10-27T11:09:20Z",
        "lastEditedBy" : "7c84fc55-a848-4ca2-a014-28c856c6d6e2",
        "tags" : [
        ]
      },
      {
        "id" : "f88fc72e-ccaa-4aa6-998f-a68e12f964fa",
        "parentId" : "d184fc29-8a02-4ec2-a4cc-94f11bf337c1",
        "authorId" : "a6699474-cbaa-4730-8ac4-f757df226d77",
        "body" : "I was only wondering if the `weakref` can become `None` \"by chance\" if the garbage collector happens to run exactly between the `del` and the assertion. This is of course highly unlikely, but my understanding was that the `None` result does not directly imply that there wasn't a cyclic reference. But I could be wrong about that.",
        "createdAt" : "2017-10-25T12:30:25Z",
        "updatedAt" : "2017-10-27T11:09:20Z",
        "lastEditedBy" : "a6699474-cbaa-4730-8ac4-f757df226d77",
        "tags" : [
        ]
      },
      {
        "id" : "3b4203e2-8097-409f-bed5-7090bbaeb1b3",
        "parentId" : "d184fc29-8a02-4ec2-a4cc-94f11bf337c1",
        "authorId" : "7c84fc55-a848-4ca2-a014-28c856c6d6e2",
        "body" : "Well, In that case the test would fail most of the time.",
        "createdAt" : "2017-10-25T12:35:27Z",
        "updatedAt" : "2017-10-27T11:09:20Z",
        "lastEditedBy" : "7c84fc55-a848-4ca2-a014-28c856c6d6e2",
        "tags" : [
        ]
      },
      {
        "id" : "f9337c9b-af2f-4b59-9b04-cb9f58531b0e",
        "parentId" : "d184fc29-8a02-4ec2-a4cc-94f11bf337c1",
        "authorId" : "a6699474-cbaa-4730-8ac4-f757df226d77",
        "body" : "Why most of the time? It is very unlikely, so it would fail rarely, right?\r\n\r\nYou can check that this assertion erroneously passes with pandas 0.20.3 where there are definitely cyclic references by forcing an \"accidental\" GC:\r\n\r\n```\r\nIn [8]:     def test_no_reference_cycle(happens_to_run_gc):\r\n   ...:         import weakref, gc, sys, pandas as pd\r\n   ...:         df = pd.DataFrame({'a': [0, 1], 'b': [2, 3]})\r\n   ...:         refcount_before = sys.getrefcount(df)\r\n   ...:         for name in ('loc', 'iloc', 'ix', 'at', 'iat'):\r\n   ...:             getattr(df, name)\r\n   ...:         refcount_after = sys.getrefcount(df)\r\n   ...:         print(\"ref counts {} -> {}\".format(refcount_before, refcount_after))\r\n   ...:         wr = weakref.ref(df)\r\n   ...:         del df\r\n   ...:         if happens_to_run_gc:\r\n   ...:             gc.collect()\r\n   ...:         assert wr() is None\r\n   ...:\r\n```",
        "createdAt" : "2017-10-26T11:45:53Z",
        "updatedAt" : "2017-10-27T11:09:20Z",
        "lastEditedBy" : "a6699474-cbaa-4730-8ac4-f757df226d77",
        "tags" : [
        ]
      },
      {
        "id" : "678f05b2-273f-4651-8f71-e9c7aedad4c9",
        "parentId" : "d184fc29-8a02-4ec2-a4cc-94f11bf337c1",
        "authorId" : "7c84fc55-a848-4ca2-a014-28c856c6d6e2",
        "body" : "You said « the weakref can become None \"by chance\" ». If that's the only reason the test succeeds, then it would fail most of the time, since the chance of a GC happening between two consecutive opcodes is slim.\r\n\r\nI'm not sure what your code snippet is supposed to prove.",
        "createdAt" : "2017-10-26T11:53:02Z",
        "updatedAt" : "2017-10-27T11:09:20Z",
        "lastEditedBy" : "7c84fc55-a848-4ca2-a014-28c856c6d6e2",
        "tags" : [
        ]
      },
      {
        "id" : "7b4e0a77-bd00-42e7-aa36-ec3ae4c5f37c",
        "parentId" : "d184fc29-8a02-4ec2-a4cc-94f11bf337c1",
        "authorId" : "a6699474-cbaa-4730-8ac4-f757df226d77",
        "body" : "What I'm trying to say: Checking for `wr() is None` does not guarantee that the operations are ref-cycle-free, which I though was the purpose of the test. That's why I would have preferred `refcount_before == refcount_after` but due to the low probability of an accidental success it doesn't really matter.",
        "createdAt" : "2017-10-26T14:17:32Z",
        "updatedAt" : "2017-10-27T11:09:20Z",
        "lastEditedBy" : "a6699474-cbaa-4730-8ac4-f757df226d77",
        "tags" : [
        ]
      }
    ],
    "commit" : "efe021daebcca3d706aa8ced3eb90c2e12c41fb4",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +885,889 @@    def test_no_reference_cycle(self):\n        df = pd.DataFrame({'a': [0, 1], 'b': [2, 3]})\n        for name in ('loc', 'iloc', 'ix', 'at', 'iat'):\n            getattr(df, name)\n        wr = weakref.ref(df)"
  },
  {
    "id" : "32fbb8b9-18c0-4081-ae71-da443debc5e7",
    "prId" : 19881,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19881#pullrequestreview-188149181",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2658fdf-1006-4f15-9f1e-2e8461f62d0f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the issue number here",
        "createdAt" : "2018-12-27T18:22:44Z",
        "updatedAt" : "2019-01-02T00:28:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a00dd9e37339a0741a5d9ebc60420d7fb6a04542",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +815,819 @@    def test_non_reducing_slice_on_multiindex(self):\n        # GH 19861\n        dic = {\n            ('a', 'd'): [1, 4],\n            ('a', 'c'): [2, 3],"
  },
  {
    "id" : "7e180a4a-dd07-43a6-8471-4b07c1cb4661",
    "prId" : 20770,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20770#pullrequestreview-114242790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1816450-8473-4174-bc42-5f458459aade",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you a comment here on what you are testing (maybe separate test)?",
        "createdAt" : "2018-04-21T17:02:30Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "62e27176-af88-4f79-b760-a02b19b62a50",
        "parentId" : "f1816450-8473-4174-bc42-5f458459aade",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "(done)",
        "createdAt" : "2018-04-23T04:51:47Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "c62973b28b29f2884f27d335b0b93c0440928b82",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +196,200 @@        # List containing only missing label\n        dfnu = DataFrame(np.random.randn(5, 3), index=list('AABCD'))\n        with pytest.raises(KeyError):\n            dfnu.ix[['E']]\n"
  },
  {
    "id" : "49df48c5-8ada-4bae-9f02-fbfd2654b497",
    "prId" : 25567,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25567#pullrequestreview-217721291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "034b26b8-a8c2-434e-bd3c-ec40adb689e2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "might be worth making these a fixture at somepoint (the iteration over indexers)",
        "createdAt" : "2019-03-22T11:57:21Z",
        "updatedAt" : "2019-05-30T12:23:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5473b797-e8b7-4c58-ae38-c9e217980032",
        "parentId" : "034b26b8-a8c2-434e-bd3c-ec40adb689e2",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> the iteration over indexers\r\n\r\nyeah. i appreciate we have duplication of parameterization at the moment, and fixtures may be of use. didn't carry on down that route at the moment as i wasn't sure if these tests were what was required.\r\n\r\nseparately for iteration over the indexes:\r\n\r\nxref https://github.com/pandas-dev/pandas/pull/25748#discussion_r266411287. There is a `indices` fixture in `pandas\\tests\\indexes\\conftest.py`. Maybe worth promoting that up a level so that it can also be used in `pandas\\tests\\indexing`\r\n\r\n\r\n",
        "createdAt" : "2019-03-22T12:10:45Z",
        "updatedAt" : "2019-05-30T12:23:29Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "eaf161b362a0b452f41847908c73787c7768113c",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +64,68 @@            np.random.randn(len(i), len(i)), index=i, columns=i)\n    ], ids=['Series', 'DataFrame'])\n    @pytest.mark.parametrize('idxr, idxr_id', [\n        (lambda x: x, 'getitem'),\n        (lambda x: x.loc, 'loc'),"
  },
  {
    "id" : "d3e0341a-3cfd-4c7b-87d4-dd6aba9a49d4",
    "prId" : 25567,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25567#pullrequestreview-217716784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06a8185a-388e-4ba6-920f-e4673a25b703",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ugg this is why getitem is so complicated.",
        "createdAt" : "2019-03-22T11:57:59Z",
        "updatedAt" : "2019-05-30T12:23:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "eaf161b362a0b452f41847908c73787c7768113c",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +85,89 @@               )\n\n        if (isinstance(obj, Series) and idxr_id == 'getitem'\n                and index.inferred_type in [\n                    'string', 'datetime64', 'period', 'timedelta64',"
  },
  {
    "id" : "9b9dbdbc-d727-49ea-bc1a-c6383305f8bb",
    "prId" : 28588,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28588#pullrequestreview-292136312",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bd30005-03b2-4e07-9ea6-a8fbaef8501e",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This works already on master right? So not a behavior change just additional coverage?",
        "createdAt" : "2019-09-24T01:32:30Z",
        "updatedAt" : "2019-09-24T01:32:30Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3bfbe16d-33cd-48d8-82cd-8c5462a72b04",
        "parentId" : "8bd30005-03b2-4e07-9ea6-a8fbaef8501e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Correct.  This adds coverage for the case where the exception on L1134 is reached",
        "createdAt" : "2019-09-24T01:41:34Z",
        "updatedAt" : "2019-09-24T01:41:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "89a5a4382317a39399f76b16c63e4fcf321ee0f7",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1205,1209 @@\n\ndef test_1tuple_without_multiindex():\n    ser = pd.Series(range(5))\n    key = (slice(3),)"
  },
  {
    "id" : "c100f8ef-723b-48b0-b96e-9f9d6a6185d9",
    "prId" : 30588,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30588#pullrequestreview-340767083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef5fa2f1-b288-4993-b3d9-8652bce194e4",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "same here, is it needed to have both contexts?",
        "createdAt" : "2020-01-09T19:53:02Z",
        "updatedAt" : "2020-01-09T19:55:00Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "74dffbedacb34bde7e5a8fb2396e0fef9efac499",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +106,110 @@        else:\n            with pytest.raises(ValueError, match=msg):\n                with tm.assert_produces_warning(DeprecationWarning):\n                    idxr[nd3]\n"
  },
  {
    "id" : "1f01220c-9ef4-4e99-b61e-482ce4127c9e",
    "prId" : 32886,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32886#pullrequestreview-378925391",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "228e8049-643a-4a02-92ff-70f8cf35d177",
        "parentId" : null,
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "I tried splitting the errors and messages to attribute them to the individual cases. That proved to be _very_ tidious and confusing though. I also don't think it provides much value. After all, the purpose of this test is to verify that this is raising.\r\n\r\nHope this solution is ok. If not, I could create a follow-up issue",
        "createdAt" : "2020-03-21T15:16:10Z",
        "updatedAt" : "2020-03-21T21:22:30Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e09cc3a0e0118f6ce3618bad6f3285c75e3cfce",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +87,91 @@\n        potential_errors = (IndexError, ValueError, NotImplementedError)\n        with pytest.raises(potential_errors, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]"
  },
  {
    "id" : "6814c0b6-822f-4dcd-bfe2-180a250160a9",
    "prId" : 34339,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34339#pullrequestreview-427838915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a361af31-03ee-4415-a061-8a0722b8e519",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "its important to mention this case in the whatsnew as this is a rather big change now",
        "createdAt" : "2020-06-08T01:43:12Z",
        "updatedAt" : "2020-06-18T13:26:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a5e0fc1b-9706-4b7d-a326-37b0ff4f0ba1",
        "parentId" : "a361af31-03ee-4415-a061-8a0722b8e519",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Will do",
        "createdAt" : "2020-06-10T08:42:28Z",
        "updatedAt" : "2020-06-18T13:26:52Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "94fe89d66c1c5e86dcb84100ad3ce07c4075ac7f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1011,1015 @@        {\"A\": pd.array([1, 2], dtype=\"Int64\"), \"B\": np.array([1, 2])}, index=[\"a\", \"b\"],\n    )\n    result = df.loc[\"a\"]\n    expected = pd.Series([1, 1], dtype=\"Int64\", index=[\"A\", \"B\"], name=\"a\")\n    tm.assert_series_equal(result, expected)"
  },
  {
    "id" : "93a170c7-3cb1-4880-978b-58e5581d94d2",
    "prId" : 37728,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37728#pullrequestreview-530571404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2f51226-037c-4306-a8d9-22909f203243",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "not necessarily for this PR, but this line might be a good place to split this into separate tests (if you can identify what each part is testing)",
        "createdAt" : "2020-11-14T01:44:55Z",
        "updatedAt" : "2020-11-18T20:26:40Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "08dbc939-5fdc-4ea7-8b7e-c990514dc87e",
        "parentId" : "e2f51226-037c-4306-a8d9-22909f203243",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "Ok, will look into it.",
        "createdAt" : "2020-11-14T11:14:34Z",
        "updatedAt" : "2020-11-18T20:26:40Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      }
    ],
    "commit" : "b965eeeebc8e6ead13c8bd4bb0c96f6593cf8e4e",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +685,689 @@            left.iloc[slice_one, slice_two] = rhs\n            tm.assert_frame_equal(left, right_iloc)\n\n        xs = np.arange(20).reshape(5, 4)\n        cols = [\"jim\", \"joe\", \"jolie\", \"joline\"]"
  },
  {
    "id" : "b8770f7d-9cbe-4725-9846-193f3e6ec55c",
    "prId" : 38005,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38005#pullrequestreview-536467601",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "898a7e28-455e-4b52-aea5-036b8c89df04",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "may want to elevate these to pandas/conftest so can use in all indexing tests (in series/frame)",
        "createdAt" : "2020-11-23T13:24:23Z",
        "updatedAt" : "2020-11-23T13:24:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f98d4401ef9dab9259cc236ee292c3972b81a5cf",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +19,23 @@\n\ndef getitem(x):\n    return x\n"
  }
]