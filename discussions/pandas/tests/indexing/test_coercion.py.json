[
  {
    "id" : "58109bed-595d-4c23-a0d6-942ec3afb129",
    "prId" : 18721,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18721#pullrequestreview-88301768",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ea8e3fb-38f7-4bfc-8ae2-dac5b6909731",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "where is this used?",
        "createdAt" : "2017-12-13T01:55:48Z",
        "updatedAt" : "2017-12-13T01:55:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "25c9be3d-0df5-471e-91ba-389d44a7e6d9",
        "parentId" : "4ea8e3fb-38f7-4bfc-8ae2-dac5b6909731",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "The ``autouse`` and ``scope`` args make it so that it is used by every class within the module",
        "createdAt" : "2017-12-13T01:58:33Z",
        "updatedAt" : "2017-12-13T01:58:33Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d330db17-3eb2-46b4-90b9-ccab241baef5",
        "parentId" : "4ea8e3fb-38f7-4bfc-8ae2-dac5b6909731",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh, ok, cool. thanks for this patch. Nice work!",
        "createdAt" : "2017-12-13T02:02:29Z",
        "updatedAt" : "2017-12-13T02:02:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f58585a2-e837-48d5-abd4-414c35159848",
        "parentId" : "4ea8e3fb-38f7-4bfc-8ae2-dac5b6909731",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@WillAyd This is neat.  I'm wondering: what would it take to put something like this together to check for permutations of arithmetic operations and operands?  I don't quite grok pytest's namespacing, in particular where `cls.klasses, cls.dtypes, cls.method` come from and what `request.node.session.items` corresponds to.\r\n\r\n<b>Update</b> the klasses/dtypes/method are a bit more clear now that I look at the whole file and not just the diff.",
        "createdAt" : "2018-01-11T02:09:32Z",
        "updatedAt" : "2018-01-11T02:10:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "21b78b4d-6387-46f5-832c-747ce13791a2",
        "parentId" : "4ea8e3fb-38f7-4bfc-8ae2-dac5b6909731",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "`cls.klasses`, `cls.dtypes` and `cls.method` don't have anything to do with `pytest` - they are all class variables built into the tests in this module. I was inspired by [this link](https://docs.pytest.org/en/latest/example/special.html) on how to initially set this up, but had to tweak slightly given that link has a `session`-scoped fixture whereas here we are working with a class-level scope.\r\n\r\nBasically `request.node.session.items` traverses from the fixture to the [node](https://docs.pytest.org/en/features/_modules/_pytest/nodes.html) (`pandas.tests.io.indexing.test_coercion::TestFoo`) and then goes from the node to the session. The session contains all of the test items, so iterating over them this code checks if all of the `klasses`, `dtypes` and `method` combinations set in the \"in-scope\" class are defined somewhere in the suite.\r\n\r\nI don't entirely understand what you are trying to do with operations and operands but assuming you wanted to set up those combinations within a parametrization fixture I believe you could access that metadata by looking at `.callspec.params` on each object in `request.node.session.items`. ",
        "createdAt" : "2018-01-11T06:27:55Z",
        "updatedAt" : "2018-01-11T06:27:55Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "22421559-1aa7-4263-9dcb-003d2d868506",
        "parentId" : "4ea8e3fb-38f7-4bfc-8ae2-dac5b6909731",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> I don't entirely understand what you are trying to do with operations and operands\r\n\r\nI going through #18824 I'm finding lots of cases that are not tested, saw this bit of code and thought it might be possible to enumerate e.g. `op = [__add__, __sub__, ...]`, `vec_classes = [Series, DatetimeIndex, np.ndarray, ...]`, `scalar_types = [...]`, `null_types=[...]`, `right = [...]` and check that all the cases are tested.  \r\n\r\nThat would also be helpful because there are a _ton_ of cases where tests are duplicated because `test_foo` and `test_bar` both test `foo+bar`, `bar+foo`. Not that this is a big problem, but it'd be nice to be systematic about it.\r\n",
        "createdAt" : "2018-01-11T20:50:22Z",
        "updatedAt" : "2018-01-11T20:50:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a072acaeb94771735edeb9626860af01b1e293d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +16,20 @@\n@pytest.fixture(autouse=True, scope='class')\ndef check_comprehensiveness(request):\n    # Iterate over combination of dtype, method and klass\n    # and ensure that each are contained within a collected test"
  },
  {
    "id" : "60f2bc7f-2d1f-4969-ba42-225f9544ebf1",
    "prId" : 22825,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22825#pullrequestreview-158924039",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9236ebc7-fb31-4d44-aa52-f47d569dc82c",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "This test was bizarrely structured above. It was given the wrong arguments for everything to _pass_ before it hit the xfail...\r\n\r\nGood news is that one of the cases is passing, so I am splitting the tz-aware and tz-naive case and properly xfailing the tz-aware case (which was already failing on master and is orthogonal to this change)",
        "createdAt" : "2018-09-25T04:01:20Z",
        "updatedAt" : "2018-09-30T21:54:19Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "fad49c4c-478c-4b0a-b1a8-67d82cff452c",
        "parentId" : "9236ebc7-fb31-4d44-aa52-f47d569dc82c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there an issue for this case? if not can you create one and reference it here",
        "createdAt" : "2018-09-26T10:15:13Z",
        "updatedAt" : "2018-09-30T21:54:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4491d8726d34c52935e7046d2e3206c98a60c2e",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +616,620 @@    @pytest.mark.xfail(\n        reason=\"GH 22839: do not ignore timezone, must be object\")\n    def test_where_index_datetimetz(self):\n        fill_val = pd.Timestamp('2012-01-01', tz='US/Eastern')\n        exp_dtype = np.object"
  },
  {
    "id" : "bd9c49d5-1106-4b4d-88bf-184843b4bdb3",
    "prId" : 27720,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27720#pullrequestreview-270731585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "524f4ba5-3b51-4375-a2e7-839a5eff327f",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "should these three assignments not be removed now?",
        "createdAt" : "2019-08-05T12:23:45Z",
        "updatedAt" : "2019-08-05T12:23:46Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "557b5aa86d2ac928237887d689f8435e82125282",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1041,1045 @@        how = \"series\"\n        from_key = \"datetime64[ns, US/Eastern]\"\n        to_key = \"timedelta64[ns]\"\n\n        index = pd.Index([3, 4], name=\"xyz\")"
  },
  {
    "id" : "f6ad9bbb-fe6b-4f38-8075-4f93f19ff2cb",
    "prId" : 30806,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30806#pullrequestreview-340129710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14c03fbf-25f2-459e-83b6-6e1a62aefed1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@TomAugspurger is this what you are talking about? this I think was just wrong before, not an API change.",
        "createdAt" : "2020-01-08T15:14:00Z",
        "updatedAt" : "2020-01-08T18:34:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "733572af-3962-4222-8ad6-332cd24d495f",
        "parentId" : "14c03fbf-25f2-459e-83b6-6e1a62aefed1",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah. I see now that we raise TypeError for `Timestamp == Timestamp`, which I think is incorrect but not worth changing.\r\n\r\nI still thing think this merits a release note.",
        "createdAt" : "2020-01-08T15:16:53Z",
        "updatedAt" : "2020-01-08T18:34:41Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8284de3a-3517-48ed-8fd0-d9e08be0d8eb",
        "parentId" : "14c03fbf-25f2-459e-83b6-6e1a62aefed1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure, @jbrockmendel can you add for what is the user viisble change.",
        "createdAt" : "2020-01-08T15:22:08Z",
        "updatedAt" : "2020-01-08T18:34:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "85d6c799-08c5-4aa5-919b-f6e1130e0cf6",
        "parentId" : "14c03fbf-25f2-459e-83b6-6e1a62aefed1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "updated with whatsnew + green",
        "createdAt" : "2020-01-08T20:37:42Z",
        "updatedAt" : "2020-01-08T20:37:42Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ff4fb809a08a9b155ca181fffa82745640e9a1b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +434,438 @@\n        if fill_val.tz:\n            msg = \"Cannot compare tz-naive and tz-aware\"\n            with pytest.raises(TypeError, match=msg):\n                obj.insert(1, pd.Timestamp(\"2012-01-01\"))"
  },
  {
    "id" : "954b8dda-1e5b-4458-9b48-fa8ea1fdda7e",
    "prId" : 37402,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37402#pullrequestreview-519248077",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69ff3662-a7d3-4d27-a12a-3c0c5c7742d4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why not just parameterize on this?",
        "createdAt" : "2020-10-26T12:05:28Z",
        "updatedAt" : "2020-10-26T12:05:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d9681676-9558-4c86-a015-111de4beea02",
        "parentId" : "69ff3662-a7d3-4d27-a12a-3c0c5c7742d4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "huh?\r\n\r\nthis is checking if pytest is invoked with `--lf` or `-k foo`",
        "createdAt" : "2020-10-26T15:04:23Z",
        "updatedAt" : "2020-10-26T15:04:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "eb9f7698-9380-488a-ac91-d352a034093e",
        "parentId" : "69ff3662-a7d3-4d27-a12a-3c0c5c7742d4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure, we don't do this anywhere else, so why is this actually needed here?",
        "createdAt" : "2020-10-26T15:06:18Z",
        "updatedAt" : "2020-10-26T15:06:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "576dd5bb-e35c-4433-adb8-9154d0940382",
        "parentId" : "69ff3662-a7d3-4d27-a12a-3c0c5c7742d4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "#23930 this will produce unhelpful errors when running only a subset of tests in this file",
        "createdAt" : "2020-10-26T15:09:56Z",
        "updatedAt" : "2020-10-26T15:09:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "83578f61-4bfd-4881-94ff-7440e213f102",
        "parentId" : "69ff3662-a7d3-4d27-a12a-3c0c5c7742d4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i saw the issue, my question is that this is either a very specific fix, in which case it *might* be ok, or something that actually is generally a problem. I would suggest that we could refactor the tests to simply avoid having to do this, rather than trying to address this very specifically.",
        "createdAt" : "2020-10-26T16:04:09Z",
        "updatedAt" : "2020-10-26T16:04:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cef731f1-bc86-44dc-ac45-a5d57899548e",
        "parentId" : "69ff3662-a7d3-4d27-a12a-3c0c5c7742d4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "big-picture, i think check_comprehensiveness is a good idea and we should eventually hope to use something like it in more contexts.\r\n\r\neven if we refactored the tests in this file (by no means a small feat), if we want to have a check for comprehensiveness it would still look something like this function",
        "createdAt" : "2020-10-26T16:07:02Z",
        "updatedAt" : "2020-10-26T16:07:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "1ae8e12d-7a19-4645-bfa4-bc3d133de26e",
        "parentId" : "69ff3662-a7d3-4d27-a12a-3c0c5c7742d4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok fair, just don't want this to be specific here, e.g. it can easily get lost",
        "createdAt" : "2020-10-29T00:58:33Z",
        "updatedAt" : "2020-10-29T00:58:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b58cd3ddecf149eff3828889bc8afe7bf28f766",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +30,34 @@        )\n\n    opts = request.config.option\n    if opts.lf or opts.keyword:\n        # If we are running with \"last-failed\" or -k foo, we expect to only"
  },
  {
    "id" : "6f582a01-d9b7-4ed0-890d-d400f3464bb2",
    "prId" : 38901,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38901#pullrequestreview-560710918",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca9a1a29-81f3-4d28-8f33-aee10f75acf5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we should just parameterize these (followon)",
        "createdAt" : "2021-01-03T16:52:58Z",
        "updatedAt" : "2021-01-03T17:12:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b14f000c742bd675f2c2fb09b6b3306f1803f19",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +957,961 @@        self._assert_fillna_conversion(obj, fill_val, exp, fill_dtype)\n\n    @pytest.mark.xfail(reason=\"Test not implemented\")\n    def test_fillna_series_int64(self):\n        raise NotImplementedError"
  }
]