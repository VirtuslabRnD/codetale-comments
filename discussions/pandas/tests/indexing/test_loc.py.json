[
  {
    "id" : "7c0c0e89-1ec6-4a51-b1c2-65b358cf1fb9",
    "prId" : 19772,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19772#pullrequestreview-97639410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cf7c355-039e-479c-b5a7-45c1329d1ed4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add Index here as well.",
        "createdAt" : "2018-02-19T19:38:54Z",
        "updatedAt" : "2018-02-22T03:40:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4e4b999537f9c9ddb3870138013885e79721598",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +712,716 @@        original_series[:3] = [7, 8, 9]\n        assert all(sliced_series[:3] == [7, 8, 9])\n\n    @pytest.mark.parametrize(\n        'indexer_type_1',"
  },
  {
    "id" : "e62ec035-0176-48e9-93c1-fbf569ee088f",
    "prId" : 20770,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20770#pullrequestreview-114213936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a983aa2-1860-4f0e-a07f-10a06de7d72b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this reflected in the whatsnew?",
        "createdAt" : "2018-04-21T17:03:37Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1898bf80-a369-41df-b45d-f444f8221b3a",
        "parentId" : "4a983aa2-1860-4f0e-a07f-10a06de7d72b",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "This is not a change in the API: I just fixed the test, which was checking nothing at all (because test objects for floats were missing).",
        "createdAt" : "2018-04-22T20:28:37Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "c62973b28b29f2884f27d335b0b93c0440928b82",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +122,126 @@                          fails=KeyError)\n        self.check_result('label range', 'loc', 'f', 'ix', 'f',\n                          typs=['floats'], fails=KeyError)\n        self.check_result('label range', 'loc', 20, 'ix', 20,\n                          typs=['ints', 'uints', 'mixed'], fails=KeyError)"
  },
  {
    "id" : "113f61ad-c245-4077-a5fe-ee6c5833efda",
    "prId" : 20966,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20966#pullrequestreview-117946233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6eb0f67b-250a-4c37-8fd4-5bda0f3e0f80",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a 1 line comment about what this is about",
        "createdAt" : "2018-05-07T10:07:53Z",
        "updatedAt" : "2018-05-08T00:16:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "375c656d1ef2667eb52d27a4a4e5fa7e72076387",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +787,791 @@\n    def test_loc_uint64(self):\n        # GH20722\n        # Test whether loc accept uint64 max value as index.\n        s = pd.Series([1, 2],"
  },
  {
    "id" : "e293c253-7ffc-4b08-8158-86b3629ea201",
    "prId" : 27928,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27928#pullrequestreview-287095033",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f398277-9a1a-44da-b484-2dc9e2940910",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you add an assert about the result here? `tm.assert_series_equal(df['day'], expected)`",
        "createdAt" : "2019-08-16T11:28:58Z",
        "updatedAt" : "2019-09-13T11:55:15Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "80651aff-5f87-47c2-945f-3bbeb08267a6",
        "parentId" : "8f398277-9a1a-44da-b484-2dc9e2940910",
        "authorId" : "9e4fa26b-3909-4ade-a15d-4e629bb9afc1",
        "body" : "While I update the tests, I found a strange result. (Not sure this is intended.)\r\n\r\n```python\r\ndf = pd.DataFrame({'timestamp': [np.datetime64('2017-01-01 01:02:23'), np.datetime64('2018-11-12 12:34:12')]})\r\ndf['year'] = df.loc[:, 'timestamp'].values.astype('datetime64[Y]')\r\ndf['month'] = df.loc[:, 'timestamp'].values.astype('datetime64[M]')\r\ndf.loc[:, 'day'] = df.loc[:, 'timestamp'].values.astype('datetime64[D]')\r\n```\r\nresult:\r\n```\r\n            timestamp        day      month       year\r\n0 2017-01-01 01:02:23 2017-01-01 2017-01-01 2017-01-01\r\n1 2018-11-12 12:34:12 2018-11-12 2018-11-01 2018-01-01\r\n```\r\n`astype` result is okay.\r\n\r\n```python\r\ndf.loc[:, 'timestamp'].values.astype('datetime64[Y]')\r\n```\r\nresult:\r\n```\r\narray(['2017', '2018'], dtype='datetime64[Y]')\r\n```\r\n\r\nIf this is intended, then I'll make an assert with this result and remove previous test (pandas/tests/dtypes/cast/test_infer_dtype.py)",
        "createdAt" : "2019-08-17T05:51:50Z",
        "updatedAt" : "2019-09-13T11:55:15Z",
        "lastEditedBy" : "9e4fa26b-3909-4ade-a15d-4e629bb9afc1",
        "tags" : [
        ]
      },
      {
        "id" : "63a8c64f-9af9-407c-8a78-d90080d8dc4c",
        "parentId" : "8f398277-9a1a-44da-b484-2dc9e2940910",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Without running the test in master, it isn't obvious to the reader what is being tested.  I suggest something like:\r\n\r\n```\r\n@pytest.mark.parametrize(\"unit\", ...)\r\ndef test_loc_setitem_datetime64_non_ns_converts(self, unit):\r\n     # GH#27928 a few words about how this used to break\r\n    df = DataFrame(\r\n            {\r\n                \"timestamp\": [\r\n                    np.datetime64(\"2017-02-11 12:41:29\"),\r\n                    np.datetime64(\"1991-11-07 04:22:37\"),\r\n                ]\r\n            }\r\n        )\r\n        df[unit] = df[\"timestamp\"].values.astype(\"datetime64[{unit}]\".format(unit=unit))\r\n        df.loc[:, unit] = df[\"timestamp\"].values.astype(\"datetime64[{unit}]\".format(unit=unit))\r\n```\r\n",
        "createdAt" : "2019-09-11T21:52:48Z",
        "updatedAt" : "2019-09-13T11:55:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8eb91f46a1166ad6c81a4f778cea0e4090059e5",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +712,716 @@        expected = Series(df.loc[:, \"expected\"], name=unit)\n        tm.assert_series_equal(df.loc[:, unit], expected)\n\n    def test_loc_setitem_frame(self):\n        df = self.frame_labels"
  },
  {
    "id" : "a7b90116-8e20-4df6-a31a-bb68caa0914b",
    "prId" : 29334,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29334#pullrequestreview-329833560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f88d918-14b3-4bc7-899b-a886610020cf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are these duplicating the frame tests above?",
        "createdAt" : "2019-12-10T13:20:22Z",
        "updatedAt" : "2020-03-14T19:40:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "91b366d8-bfb4-405b-bd3b-a6353bd074e7",
        "parentId" : "3f88d918-14b3-4bc7-899b-a886610020cf",
        "authorId" : "918a1605-8583-422d-a500-13bfb42eee2b",
        "body" : "As far as I know frame only allows setting the whole column whereas using indexer allows setting the column only for certain rows.\r\nframe:\r\n```\r\ndf[[\"A\", \"B\"]] = 1\r\n```\r\nindexer:\r\n```\r\ndf.loc[[0, 1], [\"A\", \"B\"]] = 1\r\n```\r\n",
        "createdAt" : "2019-12-10T13:31:07Z",
        "updatedAt" : "2020-03-14T19:40:59Z",
        "lastEditedBy" : "918a1605-8583-422d-a500-13bfb42eee2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "26ba2a998f8d593f5dbc7d0b5a37905ec1e8f3f1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +632,636 @@        assert is_scalar(result) and result == \"Z\"\n\n    @pytest.mark.parametrize(\n        \"index,box,expected\",\n        ["
  },
  {
    "id" : "794db7b0-eeb7-4154-adae-7b90fbc62052",
    "prId" : 32650,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32650#pullrequestreview-375686151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38bb1512-2549-4f78-b0da-1feefac7fcaa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i would test the reverse as well (e.g. TDI is the index with a DTI as indexer). This should also raise for Period, I think? (these can be handled as followons)",
        "createdAt" : "2020-03-17T01:41:11Z",
        "updatedAt" : "2020-03-17T01:41:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a948a5ec81c9ca6d30db14ccbe5f0e900bf1d833",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1094,1098 @@        df.loc[tdi]\n\n    with pytest.raises(KeyError, match=msg):\n        df[\"a\"].loc[tdi]"
  },
  {
    "id" : "5f709dad-343b-4543-9c33-c9c0302616bd",
    "prId" : 38010,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38010#pullrequestreview-555870582",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88b87eec-3e60-4bc1-acab-25c27eb8d259",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "do we need/want tzaware case?",
        "createdAt" : "2020-12-09T20:17:59Z",
        "updatedAt" : "2021-01-03T21:51:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d598f39e-3d4a-433e-9fc0-f37433d471e9",
        "parentId" : "88b87eec-3e60-4bc1-acab-25c27eb8d259",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "I don't think we need them, since we are indexing with strings?",
        "createdAt" : "2020-12-09T20:56:00Z",
        "updatedAt" : "2021-01-03T21:51:04Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      },
      {
        "id" : "c6e88978-eca3-479f-b827-80d0099e7582",
        "parentId" : "88b87eec-3e60-4bc1-acab-25c27eb8d259",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i meant for the index to be tzaware",
        "createdAt" : "2020-12-17T18:36:17Z",
        "updatedAt" : "2021-01-03T21:51:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "12db8d90-9625-440c-b0b4-159b0500b566",
        "parentId" : "88b87eec-3e60-4bc1-acab-25c27eb8d259",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "Ah, thx. Is this the right fixture?",
        "createdAt" : "2020-12-18T23:05:46Z",
        "updatedAt" : "2021-01-03T21:51:04Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b6beb32f97d5849bf890a45c5b140a2a2d7eb74",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1558,1562 @@        tm.assert_series_equal(sliced, expected)\n\n    @pytest.mark.parametrize(\"indexer_end\", [None, \"2020-01-02 23:59:59.999999999\"])\n    def test_loc_getitem_partial_slice_non_monotonicity(\n        self, tz_aware_fixture, indexer_end, frame_or_series"
  }
]