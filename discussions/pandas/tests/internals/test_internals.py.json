[
  {
    "id" : "c8e16aad-9deb-45fb-92ce-dbf046b7c1cc",
    "prId" : 17779,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17779#pullrequestreview-67343821",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72115f3b-77e3-4cd5-bbaf-a0c6ee44d1bd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually ought to add Timedelta/Timestamp, NaT, np.nan, Period",
        "createdAt" : "2017-10-05T10:25:08Z",
        "updatedAt" : "2017-10-05T10:25:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "72a5da70-8532-4b10-be08-df2a1d71eeb3",
        "parentId" : "72115f3b-77e3-4cd5-bbaf-a0c6ee44d1bd",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The missing data ones are already covered in `test_nanops`. Timedelta / timestamps in handled in `tests/scalar/`. `Period` doesn't support binops.  So we should be good.",
        "createdAt" : "2017-10-05T11:29:44Z",
        "updatedAt" : "2017-10-05T11:29:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed82be6a0266f1a1fd138e0a03c6d6c560800d0",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +1248,1252 @@        (1j, 'complex128'),\n        (True, 'bool'),\n        (np.timedelta64(20, 'ns'), '<m8[ns]'),\n        (np.datetime64(20, 'ns'), '<M8[ns]'),\n    ])"
  },
  {
    "id" : "0bb1c13a-1627-438b-a1b4-567282504ac1",
    "prId" : 22163,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22163#pullrequestreview-144533890",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b04288c-4937-49bf-9188-ed4674d9b234",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pull this out and parametrize",
        "createdAt" : "2018-08-08T10:14:09Z",
        "updatedAt" : "2018-08-10T14:11:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4e79bfe0-395c-4e18-a720-4f34a3496d74",
        "parentId" : "8b04288c-4937-49bf-9188-ed4674d9b234",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This test already has two layers of parametrization; it isn't clear how to pull this out without making it more verbose+repetitive.  Let me give this some thought and circle back.",
        "createdAt" : "2018-08-08T17:49:04Z",
        "updatedAt" : "2018-08-10T14:11:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b62135b945ea015ef5531af8dc9502f6c018511",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1243,1247 @@        s = pd.DataFrame({\"A\": [e.value, e.value]}, dtype=e.dtype)\n\n        invalid = {(operator.pow, '<M8[ns]'),\n                   (operator.mod, '<M8[ns]'),\n                   (operator.truediv, '<M8[ns]'),"
  },
  {
    "id" : "4deb417d-32a4-4899-8cd4-f973417d3e80",
    "prId" : 26396,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26396#pullrequestreview-237488070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b3ea25f-0499-4821-b30e-b149d8221a67",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What was the reason for adding the keyword here? ",
        "createdAt" : "2019-05-14T20:28:20Z",
        "updatedAt" : "2019-05-14T20:30:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0c133dc6-1901-4472-8118-2f5a53016dc9",
        "parentId" : "8b3ea25f-0499-4821-b30e-b149d8221a67",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "That was just to aid readability, I found the meaning of those lists became easier to understand. Though I see now it hasnt been done in all the function calls.",
        "createdAt" : "2019-05-14T20:37:40Z",
        "updatedAt" : "2019-05-14T20:37:40Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "78d7cb672524303b9f2a02f73276f9ac2b610311",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +925,929 @@            for ax in range(mgr.ndim):\n                # take/fancy indexer\n                assert_take_ok(mgr, ax, indexer=[])\n                assert_take_ok(mgr, ax, indexer=[0, 0, 0])\n                assert_take_ok(mgr, ax, indexer=list(range(mgr.shape[ax])))"
  },
  {
    "id" : "b705db7f-d0ee-42a1-b892-8f212e9ad5a9",
    "prId" : 29657,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29657#pullrequestreview-317989607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3931e86-5201-4c17-ad2a-ee7838ae7905",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the issue number here as a comment",
        "createdAt" : "2019-11-16T21:24:02Z",
        "updatedAt" : "2019-11-18T19:00:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7087b6d092f259a1748872a62050110f3379f65",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1302,1306 @@def test_dataframe_not_equal():\n    # see GH28839\n    df1 = pd.DataFrame({\"a\": [1, 2], \"b\": [\"s\", \"d\"]})\n    df2 = pd.DataFrame({\"a\": [\"s\", \"d\"], \"b\": [1, 2]})\n    assert df1.equals(df2) is False"
  },
  {
    "id" : "12f37fdd-4ef7-4695-b6fa-8db88e4b607d",
    "prId" : 30998,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30998#pullrequestreview-345314107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe475040-75e1-4535-aadf-4d9c8692a514",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't think we should test this, this is an internal error message\r\n\r\n(and it's also not a very good error message)",
        "createdAt" : "2020-01-15T07:30:52Z",
        "updatedAt" : "2020-01-17T16:00:07Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1817c577-0553-4f2c-acaa-a2aa74cc43b7",
        "parentId" : "fe475040-75e1-4535-aadf-4d9c8692a514",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> (and it's also not a very good error message)\r\n\r\nIsn't that exactly the reason why we should test them in the first place?  Puts more light on the quality of the error messages that we raise, internal or not.",
        "createdAt" : "2020-01-15T07:37:55Z",
        "updatedAt" : "2020-01-17T16:00:07Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "26ff2054-ed11-4891-86f0-4bde7bd9079c",
        "parentId" : "fe475040-75e1-4535-aadf-4d9c8692a514",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> Isn't that exactly the reason why we should test them in the first place\r\n\r\nIf we, in one go, improve the error message. Yes, that is fine, but otherwise I don't think it is worth the effort.",
        "createdAt" : "2020-01-16T08:37:10Z",
        "updatedAt" : "2020-01-17T16:00:07Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1a0c908e-7a87-40c6-91ed-c3cc382231f8",
        "parentId" : "fe475040-75e1-4535-aadf-4d9c8692a514",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> Yes, that is fine, but otherwise I don't think it is worth the effort.\r\n\r\nDebatable.  If you're someone who has just started working on this codebase, I wouldn't want them to also modify the error message if they don't fully understand what is going.  You can easily spend another PR figuring out what the proper error message is.",
        "createdAt" : "2020-01-16T09:04:03Z",
        "updatedAt" : "2020-01-17T16:00:07Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "5b9b43a5-6554-4f35-91a3-b5e81a3e1de9",
        "parentId" : "fe475040-75e1-4535-aadf-4d9c8692a514",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I agree with @jorisvandenbossche here I don't think worth testing against error messages for `AssertionError`, since that is purely internal",
        "createdAt" : "2020-01-17T23:33:15Z",
        "updatedAt" : "2020-01-17T23:33:20Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "8182178d-7864-4c3c-9755-c37f00710b19",
        "parentId" : "fe475040-75e1-4535-aadf-4d9c8692a514",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> since that is purely internal\r\n\r\nI still don't find that to be valid justification.  Internal or not, we use error messages for a reason: because they provide some utility in development.  If these error messages (not the `Exception` class itself) had no use and won't see the light of day simply because they're internal, we should just get rid of them.  To borrow from @jorisvandenbossche, they aren't worth the effort then.\r\n\r\nError messages can also serve to differentiate between which error is raised.  The `managers.py` file is littered with `AssertionError` lines.  It would be good to know that the correct one is being raised.",
        "createdAt" : "2020-01-17T23:52:46Z",
        "updatedAt" : "2020-01-17T23:54:17Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "aaab43f2-3ec0-4db8-a17d-759ebd08831c",
        "parentId" : "fe475040-75e1-4535-aadf-4d9c8692a514",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I am actually ok with testing these asserts; they are the current behavior. If things change then this test should fail. That said I wouldn; spend too much effort on this.",
        "createdAt" : "2020-01-18T17:09:28Z",
        "updatedAt" : "2020-01-18T17:09:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b830a91a-44c3-4930-9e4d-39084ffa8571",
        "parentId" : "fe475040-75e1-4535-aadf-4d9c8692a514",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> because they provide some utility in development.\r\n\r\nYes, they are useful for that. But also because they are only used in development, they can also easily change when refactoring some internals (without that there are user-facing consequences).\r\n\r\nBut every test (and certainly a test with a match) takes also effort to write, review and maintain (eg update if you update something internally). It's a trade-off. So I am not saying those internal error messages are not useful at all, but I still think they are not worth the effort to properly test with full coverage.",
        "createdAt" : "2020-01-20T13:40:59Z",
        "updatedAt" : "2020-01-20T13:40:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8be057452f13b80a8fe6aa2fbe5992a12a91e08",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +358,362 @@        # test trying to create block manager with overlapping ref locs\n\n        msg = \"Gaps in blk ref_locs\"\n\n        with pytest.raises(AssertionError, match=msg):"
  },
  {
    "id" : "e36b94a6-41d0-487a-9d2f-7ec928a77e7b",
    "prId" : 30998,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30998#pullrequestreview-344973395",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41f5f1f1-8b79-4624-95a6-aaecd478482b",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What is the `None` here for? Can this not be made more specific?",
        "createdAt" : "2020-01-17T23:32:23Z",
        "updatedAt" : "2020-01-17T23:33:20Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "404167fa-7950-4bcd-ab8c-b0bde10e45f7",
        "parentId" : "41f5f1f1-8b79-4624-95a6-aaecd478482b",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "This can be more specific as soon as https://github.com/pandas-dev/pandas/pull/31130 gets merged.",
        "createdAt" : "2020-01-19T02:57:22Z",
        "updatedAt" : "2020-01-19T02:57:22Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8be057452f13b80a8fe6aa2fbe5992a12a91e08",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +299,303 @@        newb = self.fblock.copy()\n\n        with pytest.raises(IndexError, match=None):\n            newb.delete(3)\n"
  },
  {
    "id" : "beb9c902-ef2d-4261-bd50-5c3ca548ebed",
    "prId" : 32256,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32256#pullrequestreview-364579583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e656195-67c0-4cd3-accf-df96627b29fc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this looks misplaced (followon)",
        "createdAt" : "2020-02-26T02:05:46Z",
        "updatedAt" : "2020-02-26T02:05:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea542e78b8c4ea7f026dc08497c0257a2a7e60e0",
    "line" : 213,
    "diffHunk" : "@@ -1,1 +1215,1219 @@\n\ndef test_missing_unicode_key():\n    df = DataFrame({\"a\": [1]})\n    with pytest.raises(KeyError, match=\"\\u05d0\"):"
  }
]