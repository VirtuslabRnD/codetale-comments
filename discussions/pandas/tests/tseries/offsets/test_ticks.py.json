[
  {
    "id" : "3e174833-8a7b-4393-8cc6-8e5688427b6c",
    "prId" : 34486,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34486#pullrequestreview-421534271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f5e0c87-fd69-450d-8454-36499ebb72c5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "was this buggy before? need a whatsnew note if so",
        "createdAt" : "2020-05-31T22:25:05Z",
        "updatedAt" : "2020-05-31T23:57:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4be0da2a-b497-4021-bbb5-2a83348b9279",
        "parentId" : "9f5e0c87-fd69-450d-8454-36499ebb72c5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ATM it raises TypeError for any float, will add whatsnew",
        "createdAt" : "2020-05-31T22:41:48Z",
        "updatedAt" : "2020-05-31T23:57:32Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea127bad7755b28c523c19804ee390b17890a423",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +255,259 @@\n    # Case where we bump up to the next type\n    result = off * 1.25\n    expected = Nano(2500)\n    assert result == expected"
  },
  {
    "id" : "32efdc93-748d-4b09-8484-80764aa29c27",
    "prId" : 36682,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36682#pullrequestreview-498231321",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ed6fa13-161a-44b9-bb16-5cae2b3f98a5",
        "parentId" : null,
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "You could also parametrize this over (left, right) and the different comparisons with only a single pytest.raises in the test",
        "createdAt" : "2020-09-27T15:56:10Z",
        "updatedAt" : "2020-09-30T15:21:43Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "d40d28d9-bf57-4cd8-9293-b4be554c1a58",
        "parentId" : "1ed6fa13-161a-44b9-bb16-5cae2b3f98a5",
        "authorId" : "cce52d31-8c61-4497-9ed4-37350f51e1f0",
        "body" : "will something like this is fine\r\n\r\n        left_instance = '.'.join([type(left).__module__, type(left).__name__]) if not isinstance(left, str) else type(left).__name__\r\n        right_instance = '.'.join([type(right).__module__, type(right).__name__]) if not isinstance(right, str) else type(right).__name__\r\n\r\n        msg = (\r\n            \"'<'|'<='|'>'|'>=' not supported between instances of \"\r\n            f\"'{left_instance}' and '{right_instance}'\"\r\n        )\r\n\r\nAnd can u give me any suggestion on how to acheive this with only one pytest.raises",
        "createdAt" : "2020-09-28T04:44:25Z",
        "updatedAt" : "2020-09-30T15:21:43Z",
        "lastEditedBy" : "cce52d31-8c61-4497-9ed4-37350f51e1f0",
        "tags" : [
        ]
      },
      {
        "id" : "fada99e1-77ef-4e39-bd41-55238a31664b",
        "parentId" : "1ed6fa13-161a-44b9-bb16-5cae2b3f98a5",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Rather than having a for loop, you can instead use @pytest.mark.parametrize above the test to create a test for each case (take a look at L202 for a sketch of how to do this).\r\n\r\nYou could also try parametrizing the comparisons as well, but not really needed.",
        "createdAt" : "2020-09-28T14:48:11Z",
        "updatedAt" : "2020-09-30T15:21:43Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "0b76ebbe-cc85-4d0d-ad49-40b2b1b06e46",
        "parentId" : "1ed6fa13-161a-44b9-bb16-5cae2b3f98a5",
        "authorId" : "cce52d31-8c61-4497-9ed4-37350f51e1f0",
        "body" : "As suggested i have changed it",
        "createdAt" : "2020-09-29T08:29:59Z",
        "updatedAt" : "2020-09-30T15:21:43Z",
        "lastEditedBy" : "cce52d31-8c61-4497-9ed4-37350f51e1f0",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a36b4d813e9b39bc0c13eace1ab90fd7ab7b0c4",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +343,347 @@\n    for left, right in [(\"infer\", off), (off, \"infer\")]:\n        with pytest.raises(TypeError, match=msg):\n            left < right\n        with pytest.raises(TypeError, match=msg):"
  }
]