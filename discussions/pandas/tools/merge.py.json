[
  {
    "id" : "905e5a68-6abd-4f28-ade5-4c33da7feccf",
    "prId" : 8948,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e4ad24d-c700-4a6a-a15a-b01261aaeb01",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this the only case where it needs/should be preserved? (e.g. what about other how's)\n",
        "createdAt" : "2014-12-01T00:28:18Z",
        "updatedAt" : "2014-12-01T00:28:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c56262ab-8fed-4d65-b66f-183eb5418a0c",
        "parentId" : "1e4ad24d-c700-4a6a-a15a-b01261aaeb01",
        "authorId" : "93252f0a-20fd-4fff-a21f-b220eed58210",
        "body" : "in `pandas/src/join.pyx` only `left_outer_join` accepts this extra argument [`sort`](https://github.com/pydata/pandas/blob/2ad9dc79b33a3510d89d446a7c82200a753e132c/pandas/src/join.pyx#L52), which was added in [this](https://github.com/pydata/pandas/commit/21308b2ff75c7c94cb06666394d8e9e80eb6389d) commit to preserve left frame order.\n\nI think it makes sense, because except for the case of left join preserving order is not well defined or I do not see an immediate use for it.\n",
        "createdAt" : "2014-12-01T00:45:41Z",
        "updatedAt" : "2014-12-01T00:45:41Z",
        "lastEditedBy" : "93252f0a-20fd-4fff-a21f-b220eed58210",
        "tags" : [
        ]
      }
    ],
    "commit" : "327830afccb51c09cbd0c94b5fc8885eb7256081",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +480,484 @@            _factorize_keys(left_group_key, right_group_key, sort=sort)\n\n    # preserve left frame order if how == 'left' and sort == False\n    kwargs = {'sort':sort} if how == 'left' else {}\n    join_func = _join_functions[how]"
  },
  {
    "id" : "b21e0f10-0895-4c81-9f10-134a1e250abe",
    "prId" : 10054,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "694019bb-d57a-4e1c-80a0-6d6c7cea0bee",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "your categories are `0,1,2` (with 0 being both) as you are filling above. so why the `[1,2,3]`\n",
        "createdAt" : "2015-08-20T17:31:33Z",
        "updatedAt" : "2015-09-01T15:46:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "54907200-ebde-42d2-9515-574bd5c43308",
        "parentId" : "694019bb-d57a-4e1c-80a0-6d6c7cea0bee",
        "authorId" : "f53db999-ff5e-4777-9ba4-296d2ecbfa0f",
        "body" : "The categories map onto the values of 1,2,3 (with 3 being both). \n",
        "createdAt" : "2015-08-20T17:44:45Z",
        "updatedAt" : "2015-09-01T15:46:44Z",
        "lastEditedBy" : "f53db999-ff5e-4777-9ba4-296d2ecbfa0f",
        "tags" : [
        ]
      },
      {
        "id" : "b21339da-cd98-4989-bfac-1134d28b5456",
        "parentId" : "694019bb-d57a-4e1c-80a0-6d6c7cea0bee",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what is the fillna for then?\n",
        "createdAt" : "2015-08-20T17:46:37Z",
        "updatedAt" : "2015-09-01T15:46:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ecb8d319-c3af-4393-996f-140ce4d94df8",
        "parentId" : "694019bb-d57a-4e1c-80a0-6d6c7cea0bee",
        "authorId" : "f53db999-ff5e-4777-9ba4-296d2ecbfa0f",
        "body" : "The flow is:\n    - Add a column to each input data frame. To left, make column all `1`s. To right, make column all `2`s. \n    - After merge, fill missing to zeros, then sum the two columns. (Otherwise we'd have lots of `1` + np.nan if an observation was only in `left`.)\n    - if only in `left`, sum is 1. If only in `right`, sum is `2`. If in both, sum is `3`.\n",
        "createdAt" : "2015-08-20T17:50:19Z",
        "updatedAt" : "2015-09-01T15:46:44Z",
        "lastEditedBy" : "f53db999-ff5e-4777-9ba4-296d2ecbfa0f",
        "tags" : [
        ]
      },
      {
        "id" : "8ad6d6df-c22d-4f64-ad32-a2bcd76a22e0",
        "parentId" : "694019bb-d57a-4e1c-80a0-6d6c7cea0bee",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "Ahh I c ok\n",
        "createdAt" : "2015-08-20T17:51:51Z",
        "updatedAt" : "2015-09-01T15:46:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "addef51c8b5830a8fcf87d3b6c804ccafe05f9af",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +246,250 @@        result['_right_indicator'] = result['_right_indicator'].fillna(0)\n\n        result[self.indicator_name] = Categorical((result['_left_indicator'] + result['_right_indicator']), categories=[1,2,3])\n        result[self.indicator_name] = result[self.indicator_name].cat.rename_categories(['left_only', 'right_only', 'both'])        \n "
  }
]