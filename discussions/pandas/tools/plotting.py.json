[
  {
    "id" : "bee34ba1-7cb0-4097-beef-fcf6abd97e40",
    "prId" : 4231,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08d1c13a-3103-4ded-a490-009322d4e160",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't you need a .format(colormap) here?\n",
        "createdAt" : "2013-07-13T17:02:35Z",
        "updatedAt" : "2013-07-13T17:04:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "16b24bea-de3c-4c8b-a684-87a53cb381c8",
        "parentId" : "08d1c13a-3103-4ded-a490-009322d4e160",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "gnarf\n",
        "createdAt" : "2013-07-13T17:03:02Z",
        "updatedAt" : "2013-07-13T17:04:19Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e48e52626a9df11d314a52658e9b2753f559372",
    "line" : null,
    "diffHunk" : "@@ -1,1 +101,105 @@            cmap = colormap\n            colormap = cm.get_cmap(colormap)\n            if colormap is None:\n                raise ValueError(\"Colormap {0} is not recognized\".format(cmap))\n        colors = map(colormap, np.linspace(0, 1, num=num_colors))"
  },
  {
    "id" : "c85df923-7cd0-4591-bd05-308c947059cd",
    "prId" : 5638,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2dcc5a5-a81e-40a2-afb9-de5b29b7e746",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Why aren't you passing along the `kwds` anymore?\n",
        "createdAt" : "2014-02-02T17:30:49Z",
        "updatedAt" : "2014-03-18T03:50:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "765b3e09da5948022da05d8b62135500ace1a636",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +1461,1465 @@        if not self.x_compat and self.use_index and self._use_dynamic_x():\n            data = self._maybe_convert_index(self.data)\n            self._make_ts_plot(data)\n        else:\n            from pandas.core.frame import DataFrame"
  },
  {
    "id" : "cfa9eb71-2f13-45ea-8da0-9babea62d69c",
    "prId" : 6656,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80992ce4-e93a-4106-a5a0-203d58143907",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Maybe move this up closer to line 1570 (just after). You're not using `_get_stacked_values` since this is modifying the state of `self._pos/_neg_prior` right?\n\nAnd would this be equivalent to `(if y_values >= 0).all() and not self.subplots: self_pos_priors = y_values`? and then the branch for `y_values <= 0`. Then you can get rid of the `else: pass` since you're guaranteed to have calculated `y_values` which would raise if there was a mix or positive and negatives.\n",
        "createdAt" : "2014-04-28T16:02:45Z",
        "updatedAt" : "2014-04-30T20:56:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "70c10be2-cd1d-46cd-8e0c-58b6c867a228",
        "parentId" : "80992ce4-e93a-4106-a5a0-203d58143907",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Considering area plot, it can't be moved to ahead of `plotf`. At the timing `plotf` called, `y_value` stores the y-coodinates of line, and `_pos_prior` or  `_neg_prior` stores starting points of area filling. Thus, changing `_pos_prior` or `_neg_prior` must be done after `plotf` called.\n\nAnd condition is not equivalent as `(if y_values >= 0).all() and not self.subplots`. The starting point should not be increased when stacking is disabled. \n\nRegarding `else` section, it can be removed (I included to note that it cannot occur though)\n",
        "createdAt" : "2014-04-30T15:18:44Z",
        "updatedAt" : "2014-04-30T20:56:52Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b63a699c1f112964f06783907dd6bdd42f7efead",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +1591,1595 @@                lines.append(newlines[0])\n\n                if self.stacked and not self.subplots:\n                    if (y >= 0).all():\n                        self._pos_prior += y"
  },
  {
    "id" : "32c3c6ec-af82-4bdd-935f-d8a66fabcf14",
    "prId" : 6656,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f306f6e5-15a7-455d-8b84-19243ea12d61",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "same comments as [above](https://github.com/pydata/pandas/pull/6656/files#r12053193)\n",
        "createdAt" : "2014-04-28T16:11:50Z",
        "updatedAt" : "2014-04-30T20:56:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "b63a699c1f112964f06783907dd6bdd42f7efead",
    "line" : 145,
    "diffHunk" : "@@ -1,1 +1659,1663 @@            self._add_legend_handle(newlines[0], label, index=i)\n\n            if self.stacked and not self.subplots:\n                if (y >= 0).all():\n                    self._pos_prior += y"
  },
  {
    "id" : "71780198-484a-4bd6-bd77-dacb6b79a90a",
    "prId" : 6956,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6804708e-554a-47f8-b333-c943c93b3341",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Same thing here with the `data` to `frame` change.\n",
        "createdAt" : "2014-04-30T16:30:16Z",
        "updatedAt" : "2014-05-05T19:26:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1980c7a804ff122072ffc594f106037f39e507fc",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +570,574 @@    return fig\n\n@deprecate_kwarg(old_arg_name='colors', new_arg_name='color')\n@deprecate_kwarg(old_arg_name='data', new_arg_name='frame')\ndef parallel_coordinates(frame, class_column, cols=None, ax=None, color=None,"
  },
  {
    "id" : "9e3ab328-0933-4297-8370-ed9d2d0763ba",
    "prId" : 7225,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c03e8402-8313-4af1-96ed-a81e382deef5",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This should be `compat.OrderedDict(d)` if we want to _always_ return an OrderedDict.\n",
        "createdAt" : "2014-05-27T14:45:36Z",
        "updatedAt" : "2014-05-27T14:45:36Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ea45833f457e4320b3f0ada02d484b9e2d207d3",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +2369,2373 @@                ret[k] = ax\n        elif return_type == 'dict':\n            ret = d\n        elif return_type == 'both':\n            ret = compat.OrderedDict()"
  },
  {
    "id" : "e932f443-ae64-46c0-b923-9c0c4ed92e0f",
    "prId" : 7234,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6cb7880-223b-4aed-9c04-3fb86442bbc0",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We probably don't need both `rot` and `xrot` in the function signature.\n\nI'd just keep it as `rot` (even though its inconsistent with `hist`), and in the function body check\n\n``` python\nxrot = kwargs.get('xrot') or rot\n```\n",
        "createdAt" : "2014-05-30T18:42:29Z",
        "updatedAt" : "2014-07-07T11:04:43Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "647a7c40c5cff64e265c7f57bea1b3673e9b4867",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +2608,2612 @@def grouped_hist(data, column=None, by=None, ax=None, bins=50, figsize=None,\n                 layout=None, sharex=False, sharey=False, rot=90, grid=True,\n                 xlabelsize=None, xrot=None, ylabelsize=None, yrot=None,\n                 **kwargs):\n    \"\"\""
  },
  {
    "id" : "64ef6620-3240-4e05-b5ff-34b2060980d9",
    "prId" : 7780,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f35b515-bb19-476f-bf8f-9c78dd2af715",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is colorboar doc-stringed? should this be c or colormap?\n",
        "createdAt" : "2014-07-23T13:50:50Z",
        "updatedAt" : "2014-09-06T21:39:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "73877ac8-1166-4f49-91d6-0989887b351f",
        "parentId" : "2f35b515-bb19-476f-bf8f-9c78dd2af715",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "colorbar is not doc-stringed, though it was already used by hexbin. I will fix that.\n",
        "createdAt" : "2014-07-25T08:24:58Z",
        "updatedAt" : "2014-09-06T21:39:34Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "67e380a9a92e2338f1ad1e624fedb07c3ce28124",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +2312,2316 @@    a single number (e.g. `mean`, `max`, `sum`, `std`).\n\n    If `kind`='scatter' and the argument `c` is the name of a dataframe column,\n    the values of that column are used to color each point.\n    \"\"\""
  },
  {
    "id" : "bff736b4-12e1-4a44-a33f-9cf60af773a6",
    "prId" : 7809,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbbed145-dad8-43af-a15b-7590344cf520",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "needs to add this to the doc strings for `plot_series/frame`, no?\n",
        "createdAt" : "2014-07-21T17:14:27Z",
        "updatedAt" : "2014-08-11T12:59:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a23a84161444b1ccd3dcb699d93274ed053e94c",
    "line" : 188,
    "diffHunk" : "@@ -1,1 +2027,2031 @@\n# kinds supported by both dataframe and series\n_common_kinds = ['line', 'bar', 'barh', 'kde', 'density', 'area', 'hist']\n# kinds supported by dataframe\n_dataframe_kinds = ['scatter', 'hexbin']"
  },
  {
    "id" : "90bc1a3e-676a-4466-a05c-0859bc88f3fb",
    "prId" : 7998,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4bae04b-0004-48c2-b00c-b87e59297b73",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Should we validate the keys passed in `colors`, and raise if the dictionary contains something other than the expected ones? Right now `df.plot(kind='boxplot', colors={'boxse': 'r')` \"works\", but you don't get what you expect.\n",
        "createdAt" : "2014-08-20T14:48:47Z",
        "updatedAt" : "2014-08-23T11:53:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c5b925ec-6020-4555-99e1-74087c0b3c8e",
        "parentId" : "e4bae04b-0004-48c2-b00c-b87e59297b73",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "OK. Make this to be strict and now raises `ValueError`.\n",
        "createdAt" : "2014-08-23T11:52:58Z",
        "updatedAt" : "2014-08-23T11:53:39Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "656e140bfedd9d297fd31c904f4f3b2dbc63d3d6",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +2099,2103 @@\n    def maybe_color_bp(self, bp):\n        if isinstance(self.color, dict):\n            boxes = self.color.get('boxes', self._boxes_c)\n            whiskers = self.color.get('whiskers', self._whiskers_c)"
  },
  {
    "id" : "55c692c3-6eac-4ced-bd43-d14744a64d40",
    "prId" : 8037,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8331b7f-310c-45b2-862e-c90693fbf552",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I ran coverage.py on this and this line wasn't tested.\n",
        "createdAt" : "2014-09-05T15:40:55Z",
        "updatedAt" : "2014-10-04T01:20:01Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "53cc1b7447ced5fde96d887af414f801b2913494",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +2261,2265 @@            elif y is not None:\n                if com.is_integer(y) and not data.columns.holds_integer():\n                    y = data.columns[y]\n                data = data[y]  # converted to series actually\n                data.index.name = y"
  },
  {
    "id" : "9fa8f8ef-29ca-42fb-952b-4b8ef605959e",
    "prId" : 9321,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfe05191-67f1-43ce-a716-f42dc835c52f",
        "parentId" : null,
        "authorId" : "95fe324c-e973-4cca-9b8d-19248c6f5e92",
        "body" : "You can get argument completition on newer python versions if you (programmatically on import) add a `__signature__` object: see this PR in mpl, which does it for decorators: https://github.com/matplotlib/matplotlib/pull/4829/files#diff-9ffb0d1db51a67ee4f37528e00715b3cR1597 \n\nThere is also a [PR in IPython](https://github.com/ipython/ipython/pull/8795) which would backport this to 2.7 and which mpl will use if IPython is installed.\n",
        "createdAt" : "2015-09-09T19:34:12Z",
        "updatedAt" : "2015-09-10T21:31:56Z",
        "lastEditedBy" : "95fe324c-e973-4cca-9b8d-19248c6f5e92",
        "tags" : [
        ]
      },
      {
        "id" : "f7110a99-18b8-4e47-a85e-c5bbacde4aec",
        "parentId" : "bfe05191-67f1-43ce-a716-f42dc835c52f",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "Good to know. That's probably worth adding once we figure out all the other valid keyword argument...\n",
        "createdAt" : "2015-09-09T21:30:17Z",
        "updatedAt" : "2015-09-10T21:31:56Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a65bd5ad7931114fd61f10db51d887ca31b5f3a",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +3452,3456 @@        axes : matplotlib.AxesSubplot or np.array of them\n        \"\"\"\n        return self(kind='line', **kwds)\n\n    def bar(self, **kwds):"
  },
  {
    "id" : "1aa5b6af-ef6c-4441-946e-24113bab72aa",
    "prId" : 9417,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1959b07e-1339-42e9-b47b-4ee0adc0adc6",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "a very small thing, but can you add `'` around the `%r`? I think that makes the message more clear\n",
        "createdAt" : "2015-02-08T11:21:04Z",
        "updatedAt" : "2015-02-08T12:18:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "98c8b598-94e7-464a-b19e-82c769ad809a",
        "parentId" : "1959b07e-1339-42e9-b47b-4ee0adc0adc6",
        "authorId" : "5789fd5e-81f3-4081-9671-eb284af665ec",
        "body" : "`%r` seems to add the `'`automatically: `print(\"%r\" % \"hi\")` prints: `'hi'`\n",
        "createdAt" : "2015-02-08T11:59:12Z",
        "updatedAt" : "2015-02-08T12:18:26Z",
        "lastEditedBy" : "5789fd5e-81f3-4081-9671-eb284af665ec",
        "tags" : [
        ]
      },
      {
        "id" : "b4748966-59b2-4cf6-b14e-ac6afc2ee3e2",
        "parentId" : "1959b07e-1339-42e9-b47b-4ee0adc0adc6",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "ah, I didn't know that. Perfect then!\n",
        "createdAt" : "2015-02-08T12:00:21Z",
        "updatedAt" : "2015-02-08T12:18:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9031c21b2efb50047684182fbcb0b95dc50af99",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2267,2271 @@        klass = _plot_klass[kind]\n    else:\n        raise ValueError(\"%r is not a valid plot kind\" % kind)\n\n    from pandas import DataFrame"
  },
  {
    "id" : "18b1179d-28e2-40a6-8835-f73130a25e1e",
    "prId" : 9814,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c3470db-0f35-4684-b5dc-16f734b8fb01",
        "parentId" : null,
        "authorId" : "94959a0c-04ab-43dc-b793-f44a623ee69d",
        "body" : ":+1: on returning the artists, but I suggest returning all of the artists (including the `Patch` (iirc) return by `fill_between`.\n",
        "createdAt" : "2015-04-30T16:49:22Z",
        "updatedAt" : "2015-07-22T12:58:44Z",
        "lastEditedBy" : "94959a0c-04ab-43dc-b793-f44a623ee69d",
        "tags" : [
        ]
      },
      {
        "id" : "14b721b7-b481-460b-825b-d53217922279",
        "parentId" : "5c3470db-0f35-4684-b5dc-16f734b8fb01",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "@tacaswell This is only for internal use. End users get `Axes` (or its array) as return value based on #4020.\n",
        "createdAt" : "2015-05-12T12:49:46Z",
        "updatedAt" : "2015-07-22T12:58:44Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "5621d2f8-301a-4170-a968-7c3b9c347536",
        "parentId" : "5c3470db-0f35-4684-b5dc-16f734b8fb01",
        "authorId" : "94959a0c-04ab-43dc-b793-f44a623ee69d",
        "body" : "I think returning Axes is a mistake, the plotting methods should return the artists added, will leave longer comment on the other issue.\n",
        "createdAt" : "2015-05-12T13:03:40Z",
        "updatedAt" : "2015-07-22T12:58:44Z",
        "lastEditedBy" : "94959a0c-04ab-43dc-b793-f44a623ee69d",
        "tags" : [
        ]
      }
    ],
    "commit" : "976a0452c353547936d17078162ff46938085179",
    "line" : 398,
    "diffHunk" : "@@ -1,1 +1749,1753 @@        ax.fill_between(xdata, start, y_values, **kwds)\n        cls._update_stacker(ax, stacking_id, y)\n        return lines\n\n    def _add_legend_handle(self, handle, label, index=None):"
  },
  {
    "id" : "6ca08abb-56d3-4933-882e-9486976afd05",
    "prId" : 11534,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa7b9e18-a85f-4b88-9cb7-4931ed4121e0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "the way to get a massive speedup, is do this ALL in a vectorized way, e.g.\npass in the entire numpy array (`df.values`), and do the calculation, then plot in a loop\n",
        "createdAt" : "2015-11-13T14:02:50Z",
        "updatedAt" : "2015-11-22T23:29:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "12181760-65a2-4337-9b36-e7734dc5805b",
        "parentId" : "aa7b9e18-a85f-4b88-9cb7-4931ed4121e0",
        "authorId" : "bd088d69-b024-47aa-af2f-e29b005a4c14",
        "body" : "Oh, of course. I'll do that and the `asv` benchmark. Will probably be over the weekend.\n",
        "createdAt" : "2015-11-13T14:29:24Z",
        "updatedAt" : "2015-11-22T23:29:33Z",
        "lastEditedBy" : "bd088d69-b024-47aa-af2f-e29b005a4c14",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3cb8131fc96fb22680625b82f8dc18cb28676be",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +573,577 @@    if ax is None:\n        ax = plt.gca(xlim=(-pi, pi))\n    for i in range(n):\n        row = df.iloc[i].values\n        f = function(row)"
  },
  {
    "id" : "27a2beb4-8935-40ca-a77d-dd12e1579eaf",
    "prId" : 12216,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a1b1b42-5180-4870-8478-f6ccbdaa92c9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe add a link to the docs here \n",
        "createdAt" : "2016-09-02T21:29:56Z",
        "updatedAt" : "2016-09-03T20:33:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "60c1c262ffc6336809b5b9dc2ef9ab0b0fd3bade",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +2700,2704 @@\n        When grouping with ``by``, a Series mapping columns to ``return_type``\n        is returned, unless ``return_type`` is None, in which case a NumPy\n        array of axes is returned with the same shape as ``layout``.\n        See the prose documentation for more."
  },
  {
    "id" : "558b7fc7-f62c-4af6-8a2d-efdb0b8a05eb",
    "prId" : 13680,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c908e394-af98-4c87-a600-78f23bf03580",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is this worth warning over? Seems similar to the `subplots=True, axes=...` case, which we do warn about.\n",
        "createdAt" : "2016-07-23T15:58:05Z",
        "updatedAt" : "2016-08-07T12:04:41Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "78c61c1f-a947-456a-8130-0962df20e5ef",
        "parentId" : "c908e394-af98-4c87-a600-78f23bf03580",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Oh, I see below you were moving that from below. Never mind then.\n",
        "createdAt" : "2016-07-23T15:59:36Z",
        "updatedAt" : "2016-08-07T12:04:41Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "968aecc1dfaf3e67f9dce8db685cae98c984b42f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1848,1852 @@        line_kwds = kwds.copy()\n        if cls.mpl_ge_1_5_0():\n            line_kwds.pop('label')\n        lines = MPLPlot._plot(ax, x, y_values, style=style, **line_kwds)\n"
  },
  {
    "id" : "fce1c7b2-d405-4fe7-8274-499f93ee2d01",
    "prId" : 14753,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14753#pullrequestreview-10442089",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fe25dde-c9f7-4ef6-8068-9f9231ba6b90",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "should raise if ``subplots=False`` and input is list-like",
        "createdAt" : "2016-11-28T23:52:14Z",
        "updatedAt" : "2016-12-08T19:03:50Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "59ab880d3de2e52eff5711af4f13a1151d40eb9c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1237,1241 @@                           'unless `subplots=True` is passed')\n                    raise ValueError(msg)\n                self.axes[0].set_title(self.title)\n\n    def _apply_axis_properties(self, axis, rot=None, fontsize=None):"
  }
]