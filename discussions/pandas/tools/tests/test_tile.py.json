[
  {
    "id" : "379aeaa7-08c9-4f37-a5c8-f806fec27b72",
    "prId" : 4954,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9624575-7af2-411b-a9f8-5a3cbf96dda9",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "Can you also test with `Series`? thx\n",
        "createdAt" : "2013-09-24T11:54:53Z",
        "updatedAt" : "2013-09-25T13:46:28Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "166f9070cc0faf4514b43860e14cc3a4f050234c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +116,120 @@\n    def test_inf_handling(self):\n        data = np.arange(6)\n        data_ser = Series(data)\n"
  },
  {
    "id" : "b7f94081-365c-45d3-8016-c261db234de8",
    "prId" : 8153,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a7dabc5-8688-4db0-a324-8da2be5314fe",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`assert_series_equal` does not check for the orderedness of the Categorical at the moment, so the test will not check that part of the issue:\n\n```\nIn [125]: c1 = pd.Series(pd.Categorical(list('abcdaba'), ordered=True))\n\nIn [127]: c2 = pd.Series(pd.Categorical(list('abcdaba'), ordered=False))\n\nIn [129]: pd.util.testing.assert_series_equal(c1, c2)\n```\n\nBut maybe that is for a seperate issue if this should test that or not.\n",
        "createdAt" : "2014-09-01T13:25:32Z",
        "updatedAt" : "2014-09-25T17:45:48Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f282da6aac82fabf0749933fe8259a8bd6f33a6",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +238,242 @@                                            [\"(-0.008, 2.667]\", \"(2.667, 5.333]\", \"(5.333, 8]\"],\n                                            ordered=True))\n        tm.assert_series_equal(res, exp)\n\n    def test_qcut_return_categorical(self):"
  },
  {
    "id" : "c62f2c41-b0ba-40b4-9dd9-e00024cad65b",
    "prId" : 14737,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14737#pullrequestreview-10695450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0403b79-a4f0-4752-a5d7-305125e85c70",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "can u also test:\r\n\r\n- ``list`` of ``np.datetime64``\r\n- ``ndarray`` of ``datetime64`` dtype\r\n- ``DatetimeIndex``",
        "createdAt" : "2016-11-30T02:52:07Z",
        "updatedAt" : "2016-12-03T10:11:16Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "46082cf4-8175-4f4b-934f-1ef89d9c0de8",
        "parentId" : "c0403b79-a4f0-4752-a5d7-305125e85c70",
        "authorId" : "85f2e63d-d62f-4024-b337-34d47994bac9",
        "body" : "@sinhrks I have added tests for list of np.datetime64 and ndarray. I did not get the DatetimeIndex part, to test this do we want to have a series/dataframe with datetime as the index and datetime as the data?",
        "createdAt" : "2016-11-30T05:16:16Z",
        "updatedAt" : "2016-12-03T10:11:16Z",
        "lastEditedBy" : "85f2e63d-d62f-4024-b337-34d47994bac9",
        "tags" : [
        ]
      },
      {
        "id" : "91820ce7-d926-4e6b-8d0e-cb88a7c73f14",
        "parentId" : "c0403b79-a4f0-4752-a5d7-305125e85c70",
        "authorId" : "85f2e63d-d62f-4024-b337-34d47994bac9",
        "body" : "@sinhrks  added test for DatetimeIndex cut in https://github.com/pandas-dev/pandas/pull/14737/commits/be9b2fdcb8b4ee1b0aca9bb6f8d13ef8971c7c30",
        "createdAt" : "2016-11-30T06:00:59Z",
        "updatedAt" : "2016-12-03T10:11:16Z",
        "lastEditedBy" : "85f2e63d-d62f-4024-b337-34d47994bac9",
        "tags" : [
        ]
      }
    ],
    "commit" : "65eae672e7fe503a580a9c0900d96aeb893a50f3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +289,293 @@        # testing for time data to be present as series\n        data = to_datetime(Series(['2013-01-01', '2013-01-02', '2013-01-03']))\n        result, bins = cut(data, 3, retbins=True)\n        expected = Series(['(2012-12-31 23:57:07.200000, 2013-01-01 16:00:00]',\n                          '(2013-01-01 16:00:00, 2013-01-02 08:00:00]',"
  }
]