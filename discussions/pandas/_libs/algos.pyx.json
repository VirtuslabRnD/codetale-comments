[
  {
    "id" : "5b095c36-93da-4c98-807c-eec17a019272",
    "prId" : 21992,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21992#pullrequestreview-140246016",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5302431-f9ab-41f8-9f12-7df228a94635",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "as an aside I think we usually call this diff elsewhere, so maybe can share code, and might thing about renaming (future PR to think about)",
        "createdAt" : "2018-07-25T10:10:11Z",
        "updatedAt" : "2018-07-25T10:11:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebb6d5283d635d7ca93aff975ffda2d34ead7362",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +77,81 @@\n\ncpdef ndarray[int64_t, ndim=1] unique_deltas(ndarray[int64_t] arr):\n    \"\"\"\n    Efficiently find the unique first-differences of the given array."
  },
  {
    "id" : "a5db67cb-ceb3-443f-9e31-c008891e6448",
    "prId" : 22452,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22452#pullrequestreview-148288509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d34a2e5-99b3-448a-9cf0-e0d29abf4839",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Do we need to explicitly use indexing here or is calling also an option? The latter may help reduce the amount of code required (maybe worth exploring in separate PR):\r\n\r\nhttp://docs.cython.org/en/latest/src/userguide/fusedtypes.html#calling",
        "createdAt" : "2018-08-21T23:29:11Z",
        "updatedAt" : "2018-09-18T02:12:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ead2cf40-ff80-4c71-b7a0-0b6da97bfb78",
        "parentId" : "7d34a2e5-99b3-448a-9cf0-e0d29abf4839",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Do we need to explicitly use indexing here or is calling also an option?\r\n\r\nI think you're right that the calling can be simplified, but this way keeps the changes self-contained.",
        "createdAt" : "2018-08-21T23:31:26Z",
        "updatedAt" : "2018-09-18T02:12:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "237931bf-750a-41e7-95a5-09ed251a8675",
        "parentId" : "7d34a2e5-99b3-448a-9cf0-e0d29abf4839",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea for sure - not saying do here but food for thought in subsequent changes or new developments.",
        "createdAt" : "2018-08-21T23:32:49Z",
        "updatedAt" : "2018-09-18T02:12:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e25c39a37704bcf5ddfec84908b170d64444baa5",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +455,459 @@\n\npad_float64 = pad[\"float64_t\"]\npad_float32 = pad[\"float32_t\"]\npad_object = pad[\"object\"]"
  },
  {
    "id" : "9744a673-8dc7-4ea3-a1f7-4984170bb662",
    "prId" : 22452,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22452#pullrequestreview-232007733",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94025337-08d9-415f-9494-36caf554acc5",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Since this is just copy / paste of the below block, what do you think about creating a blank context manager that doesn't really do anything. \r\n\r\n```python\r\nif algos_t is not object:\r\n    cm = nogil\r\nelse:\r\n    cm = dummy_context\r\n```\r\n\r\nAnd then either implementation can share the context manager:\r\n\r\n```python\r\nwith cm:\r\n    ...\r\n```\r\n\r\nWould reduce the copy / paste and make it so we don't miss updates to say one part of the fused type in the future that makes for hard-to-find implementation differences. Could be generalizable in a few instances in Cython.",
        "createdAt" : "2018-08-21T23:45:34Z",
        "updatedAt" : "2018-09-18T02:12:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f993b0e8-8ca0-4be2-aa2d-e727e70a0678",
        "parentId" : "94025337-08d9-415f-9494-36caf554acc5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "That would be great if it can be made to work; a lot of the tempita code takes this form.\r\n\r\nI don't think cython treats `with nogil` as an actual contextmanager.  @scoder any thoughts on this?",
        "createdAt" : "2018-08-22T00:11:34Z",
        "updatedAt" : "2018-09-18T02:12:46Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "779d24cc-3606-4c53-b7e5-d88363067493",
        "parentId" : "94025337-08d9-415f-9494-36caf554acc5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I agree, making this simpler would motivate this PR",
        "createdAt" : "2018-08-22T10:12:10Z",
        "updatedAt" : "2018-09-18T02:12:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "26cbe881-857c-41fc-ab42-a745483939be",
        "parentId" : "94025337-08d9-415f-9494-36caf554acc5",
        "authorId" : "5e54ce7a-48bf-45fc-9fea-7cf39179e458",
        "body" : "Well, `nogil` is really special in Cython and not an actual context manager. I could imagine something like `with nogil.only_if(some_bool_condition)`, which would then duplicate the with-block to generate a True and False version of it and select the right one at runtime. Or even at compile time, if the condition is a compile time constant, such as a type check on fused types (release GIL for native C types, keep for object types). The latter would definitely be possible, whereas duplicating the code block could be messy and is definitely more work.\r\n\r\nNote that `nogil` is also a decorator, so `nogil(something)` is already taken.",
        "createdAt" : "2018-08-23T15:17:03Z",
        "updatedAt" : "2018-09-18T02:12:46Z",
        "lastEditedBy" : "5e54ce7a-48bf-45fc-9fea-7cf39179e458",
        "tags" : [
        ]
      },
      {
        "id" : "d88d6fe6-c755-4caa-b243-fe46a610f33c",
        "parentId" : "94025337-08d9-415f-9494-36caf554acc5",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "@scoder thanks for the info! What would be the next steps to get the functionality you've described? Compile-time evaluation would certainly be ideal",
        "createdAt" : "2018-08-24T00:06:45Z",
        "updatedAt" : "2018-09-18T02:12:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b4832959-03a2-4834-b0a6-ca7409bfad30",
        "parentId" : "94025337-08d9-415f-9494-36caf554acc5",
        "authorId" : "5e54ce7a-48bf-45fc-9fea-7cf39179e458",
        "body" : "1) Read and discuss https://github.com/cython/cython/issues/2579\r\n2) find someone to implement it\r\n\r\n:)",
        "createdAt" : "2018-08-25T09:49:41Z",
        "updatedAt" : "2018-09-18T02:12:46Z",
        "lastEditedBy" : "5e54ce7a-48bf-45fc-9fea-7cf39179e458",
        "tags" : [
        ]
      },
      {
        "id" : "3cb180c5-38fb-40c8-bb1c-9773ce7f9036",
        "parentId" : "94025337-08d9-415f-9494-36caf554acc5",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Looks like this will be released in Cython 3.0 - could have a few uses in our codebase for sure. Thanks!",
        "createdAt" : "2019-04-30T06:24:01Z",
        "updatedAt" : "2019-04-30T06:24:01Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e25c39a37704bcf5ddfec84908b170d64444baa5",
    "line" : 458,
    "diffHunk" : "@@ -1,1 +808,812 @@\n    if algos_t is not object:\n        with nogil:\n            prev = arr[0]\n            for i in range(1, n):"
  },
  {
    "id" : "43d875f6-c63f-48f5-86f0-c3c4beaf88a3",
    "prId" : 23235,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23235#pullrequestreview-166741790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "320a774f-8cac-4c29-ab6f-d633ca66f478",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Are all of these used?",
        "createdAt" : "2018-10-19T21:32:16Z",
        "updatedAt" : "2018-10-23T09:57:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a641ab0f-e1c3-4606-8091-ee5b3dd37bf5",
        "parentId" : "320a774f-8cac-4c29-ab6f-d633ca66f478",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : " NPY_UINT32, NPY_UINT16 and uint23_t and uint16_t are not used. This needs a discussion, see below.",
        "createdAt" : "2018-10-20T07:46:48Z",
        "updatedAt" : "2018-10-23T09:57:02Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a519cc4380470f5e3a67c28a84a47e8f33f77855",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +12,16 @@from numpy cimport (ndarray,\n                    NPY_INT64, NPY_INT32, NPY_INT16, NPY_INT8,\n                    NPY_UINT64, NPY_UINT32, NPY_UINT16, NPY_UINT8,\n                    NPY_FLOAT32, NPY_FLOAT64,\n                    NPY_OBJECT,"
  }
]