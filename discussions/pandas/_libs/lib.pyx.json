[
  {
    "id" : "b8bec5ed-23ab-4468-ab9e-ebb8507da197",
    "prId" : 18059,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18059#pullrequestreview-74419372",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30ae8a68-1842-4967-8af5-020a699e1f20",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so this now makes lib depend on np_datetime.pxd, which is ok as tseries_depends now lists this.",
        "createdAt" : "2017-11-06T13:45:37Z",
        "updatedAt" : "2017-11-06T13:45:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "13b85d88319b86a5461708a498c2083715163f32",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +50,54 @@PyDateTime_IMPORT\n\nfrom tslibs.np_datetime cimport get_timedelta64_value, get_datetime64_value\n\nfrom tslib cimport _check_all_nulls"
  },
  {
    "id" : "599329db-ccce-40d3-9932-595f04e4b1ba",
    "prId" : 18119,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18119#pullrequestreview-74748178",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a16e021-6eeb-430d-8ac0-b63ee523f9c0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i dont' really like this but i guess its how it is currently. this is a python level dep between lib and tslib.",
        "createdAt" : "2017-11-06T13:32:08Z",
        "updatedAt" : "2017-11-06T15:46:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2195e9fc-0b0c-4feb-af4f-e19df8585ca9",
        "parentId" : "2a16e021-6eeb-430d-8ac0-b63ee523f9c0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Timestamp and Timedelta aren't used in lib.  A couple of modules use `lib.Timestamp` instead of `tslib.Timestamp`.  The NaT dependency could be imported directly from tslibs.nattype.  array_to_datetime... not really any good options.",
        "createdAt" : "2017-11-06T15:48:13Z",
        "updatedAt" : "2017-11-06T15:48:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "77e08874-f205-4e0b-b8c8-5d091ea53ce7",
        "parentId" : "2a16e021-6eeb-430d-8ac0-b63ee523f9c0",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah, just mentioning it",
        "createdAt" : "2017-11-07T13:35:57Z",
        "updatedAt" : "2017-11-07T13:35:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0611ad23c76e91f8e2781f175b773f5c456e9f8d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +55,59 @@\nfrom tslib cimport _check_all_nulls\nfrom tslib import NaT, Timestamp, Timedelta, array_to_datetime\nfrom interval import Interval\n"
  },
  {
    "id" : "7a1acc93-3e03-4855-ab5e-97c22a13b8cf",
    "prId" : 22283,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22283#pullrequestreview-153193631",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c4f68d8-b9c1-432f-bf7f-89aa84944363",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this not ever called in cython?",
        "createdAt" : "2018-09-07T03:26:00Z",
        "updatedAt" : "2018-09-07T03:27:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7acad5bd-6f90-4aed-9b4a-86b007303d64",
        "parentId" : "9c4f68d8-b9c1-432f-bf7f-89aa84944363",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yep, easy to confirm via grep",
        "createdAt" : "2018-09-07T03:36:29Z",
        "updatedAt" : "2018-09-07T03:36:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3300de17dac9bbc77b32a88465b961b114c38f88",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +108,112 @@\n\ndef is_scalar(val: object) -> bint:\n    \"\"\"\n    Return True if given value is scalar."
  },
  {
    "id" : "ea163464-7e7f-4f0f-9229-4c477ff06d68",
    "prId" : 22952,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22952#pullrequestreview-162308741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f243c19-9739-4851-9939-785d79373e7f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you put a blank line between cases (as you have done for some)",
        "createdAt" : "2018-10-07T23:03:33Z",
        "updatedAt" : "2018-11-19T21:54:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5f084aa0da7d89e88354aab8615238cab2549fa",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +135,139 @@    >>> dt = pd.datetime.datetime(2018, 10, 3)\n    >>> pd.is_scalar(dt)\n    True\n\n    >>> pd.api.types.is_scalar([2, 3])"
  },
  {
    "id" : "26d76b44-d604-4352-9653-999a8503c2e0",
    "prId" : 23162,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23162#pullrequestreview-165864413",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb0bf04f-09ea-4ad7-a3f0-aa213fc76191",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string here",
        "createdAt" : "2018-10-17T01:08:26Z",
        "updatedAt" : "2018-10-18T02:55:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a0285ec1-898b-4031-a011-999c83bab8c5",
        "parentId" : "eb0bf04f-09ea-4ad7-a3f0-aa213fc76191",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yep, done.",
        "createdAt" : "2018-10-17T22:37:41Z",
        "updatedAt" : "2018-10-18T02:55:17Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddd1be32893c781f366b40f5b1f3d0d5d49d0f79",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +513,517 @@        A new array with the input array's elements casted.\n    \"\"\"\n    cdef:\n        object arr_i\n        Py_ssize_t i, n = arr.size"
  },
  {
    "id" : "e2d15ded-e2fd-4b85-96ba-537b3e6e8715",
    "prId" : 23162,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23162#pullrequestreview-165864403",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34d68deb-b5b5-4480-86fe-6ac57173c53f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2018-10-17T01:08:32Z",
        "updatedAt" : "2018-10-18T02:55:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "003c1029-7bc2-4e61-be5d-2d96b360934b",
        "parentId" : "34d68deb-b5b5-4480-86fe-6ac57173c53f",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yep, done.",
        "createdAt" : "2018-10-17T22:37:39Z",
        "updatedAt" : "2018-10-18T02:55:17Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddd1be32893c781f366b40f5b1f3d0d5d49d0f79",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +547,551 @@        A new array with the input array's elements casted.\n    \"\"\"\n    cdef:\n        object arr_i\n        Py_ssize_t i, n = arr.size"
  },
  {
    "id" : "8204ce11-bf74-473e-90a5-22be19d5cf0c",
    "prId" : 23422,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23422#pullrequestreview-170009382",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dd2d046-db37-482c-8566-f54e471c4889",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I wonder if we can incorporate this `skipna` logic into the for-loop below.  Perhaps have an indicator to tell us whether we have seen an element in the `values` array that is non-null (when `skipna` is `True`).",
        "createdAt" : "2018-10-30T21:24:13Z",
        "updatedAt" : "2018-11-03T15:59:59Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "d8fcc3f7-225e-420e-9b2a-8e6a2a40f13a",
        "parentId" : "1dd2d046-db37-482c-8566-f54e471c4889",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Unfortunately, that's not directly possible (nor performant), because the line directly below (with `_try_infer_map`) will return prematurely as soon as it can grab hold of a dtype.",
        "createdAt" : "2018-10-30T21:30:03Z",
        "updatedAt" : "2018-11-03T15:59:59Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "19cf2dd8e66f33de7b2b49d9a1d4d67f4d649a04",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1184,1188 @@    if skipna:\n        values = values[~isnaobj(values)]\n\n    val = _try_infer_map(values)\n    if val is not None:"
  },
  {
    "id" : "bc0bbce8-64af-4e02-b392-0824c6d50bb9",
    "prId" : 23422,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23422#pullrequestreview-170523067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad91209e-d6c0-4282-a2cc-a3d0f07f2e81",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is a python and not a cimport, why are you not using checknull?",
        "createdAt" : "2018-10-31T12:06:30Z",
        "updatedAt" : "2018-11-03T15:59:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "438f6408-08d1-4df0-a22e-987fbeb66a8c",
        "parentId" : "ad91209e-d6c0-4282-a2cc-a3d0f07f2e81",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "checknull only returns a single bint, and not an array. I would have liked to `cimport` isnaobj, but that didn't work.",
        "createdAt" : "2018-10-31T15:21:07Z",
        "updatedAt" : "2018-11-03T15:59:59Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "6211a970-4959-4935-adc1-42c619f7cf13",
        "parentId" : "ad91209e-d6c0-4282-a2cc-a3d0f07f2e81",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so this isn array, ok, then add ``isnaobj`` to ``missing.pxd`` and make it a ``cpdef``. then you can cimport it. (and you need to type return value)",
        "createdAt" : "2018-11-01T00:40:30Z",
        "updatedAt" : "2018-11-03T15:59:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "19cf2dd8e66f33de7b2b49d9a1d4d67f4d649a04",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1183,1187 @@    values = getattr(values, 'values', values)\n    if skipna:\n        values = values[~isnaobj(values)]\n\n    val = _try_infer_map(values)"
  },
  {
    "id" : "9b4103ef-5bba-4323-b735-7f804f58d2a9",
    "prId" : 23464,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23464#pullrequestreview-171266842",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff398d5d-4e79-454f-9d14-bd4ed73e4bf3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are these changing? what is wrong with bint?",
        "createdAt" : "2018-11-02T20:11:23Z",
        "updatedAt" : "2018-11-02T20:14:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "969f47d5-9f19-4967-8f81-ed91998bd946",
        "parentId" : "ff398d5d-4e79-454f-9d14-bd4ed73e4bf3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "nothing is wrong with bint, but part of the upside of using py3-annotations is that its valid python.  using bint instead of bool defeats that purpose",
        "createdAt" : "2018-11-02T20:51:13Z",
        "updatedAt" : "2018-11-02T20:51:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "45b6f75987989f3853e3aac07499183af6149b80",
    "line" : 198,
    "diffHunk" : "@@ -1,1 +854,858 @@\n\ndef is_bool(obj: object) -> bool:\n    return util.is_bool_object(obj)\n"
  },
  {
    "id" : "f3634905-d93a-45a6-a0d9-537bdeb0a96b",
    "prId" : 23685,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23685#pullrequestreview-174918602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d37333bd-3c83-4d45-91fc-c4f2058b5535",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you comment here on what you are checking",
        "createdAt" : "2018-11-14T15:27:26Z",
        "updatedAt" : "2018-11-14T21:48:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d563aa1a5e6c644255bf3832f109ed7350b04c2",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1649,1653 @@            break\n\n    for j in range(i, n):\n        # Compare val's timezone with the reference timezone\n        # NaT can coexist with tz-aware datetimes, so skip if encountered"
  },
  {
    "id" : "24186583-2e7f-4451-82e2-2047bf659779",
    "prId" : 24050,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24050#pullrequestreview-184656339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2113a37-20b1-4dbe-b982-4fa62c05929f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "default is False",
        "createdAt" : "2018-12-13T13:21:33Z",
        "updatedAt" : "2019-01-04T11:14:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "03c46cd7d2ef541d09226a63741197ce22fc4303",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1090,1094 @@    value : scalar, list, ndarray, or pandas type\n    skipna : bool, default False\n        Ignore NaN values when inferring the type.\n\n        .. versionadded:: 0.21.0"
  },
  {
    "id" : "5a06b554-9cda-4ad4-975a-671d61279451",
    "prId" : 24521,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24521#pullrequestreview-188542860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eefdaf1c-9240-43db-9d08-3ae9184e862a",
        "parentId" : null,
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "``MultiIndex.union`` calls this function so I added a ``sort`` parameter to control the behaviour here and set the default to ``True`` for compatibility",
        "createdAt" : "2018-12-31T20:11:05Z",
        "updatedAt" : "2019-01-19T18:22:04Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      },
      {
        "id" : "fc5b201c-f8b9-4a19-b0d0-0af9d8f9ba5e",
        "parentId" : "eefdaf1c-9240-43db-9d08-3ae9184e862a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string here",
        "createdAt" : "2018-12-31T23:38:46Z",
        "updatedAt" : "2019-01-19T18:22:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b15248d3b8169b3fbde53e91fb02ef091e5ee00",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +201,205 @@@cython.wraparound(False)\n@cython.boundscheck(False)\ndef fast_unique_multiple(list arrays, sort: bool=True):\n    \"\"\"\n    Generate a list of unique values from a list of arrays."
  },
  {
    "id" : "a4a1da44-20be-4ecb-a13c-c582f6676430",
    "prId" : 24521,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24521#pullrequestreview-194370002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eef11128-f229-4f04-9dd4-fd031262c1c1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "might see if using safe_sort makes sense here (you would have to import here, otherwise this would e circular)",
        "createdAt" : "2019-01-13T21:57:28Z",
        "updatedAt" : "2019-01-19T18:22:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "86c3e424-a878-44e3-a93b-606a93c9ff2f",
        "parentId" : "eef11128-f229-4f04-9dd4-fd031262c1c1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "?",
        "createdAt" : "2019-01-15T12:10:30Z",
        "updatedAt" : "2019-01-19T18:22:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ec1265ee-b7b8-4543-acb7-729eb4c4885b",
        "parentId" : "eef11128-f229-4f04-9dd4-fd031262c1c1",
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "I tried using ``safe_sort`` here but it was causing some problems. The issue seems to be that ``uniques`` here is a list of tuples which are then used to construct a ``MultiIndex`` in ``MultiIndex.union``. However, when we use ``safe_sort`` it turns ``uniques`` into an ``np.array`` and doesn't sort it correctly so we get the wrong results. I can have a closer look at trying to resolve this if you want but it might involve changing ``safe_sort`` a bit.",
        "createdAt" : "2019-01-19T18:24:53Z",
        "updatedAt" : "2019-01-19T18:24:53Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      },
      {
        "id" : "1e626b1e-9aa7-487b-bc33-d1e62af8ba75",
        "parentId" : "eef11128-f229-4f04-9dd4-fd031262c1c1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, let's followup up later then (new PR).",
        "createdAt" : "2019-01-19T20:58:09Z",
        "updatedAt" : "2019-01-19T21:04:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b15248d3b8169b3fbde53e91fb02ef091e5ee00",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +234,238 @@    if sort:\n        try:\n            uniques.sort()\n        except Exception:\n            pass"
  },
  {
    "id" : "f3f9a006-bc38-45dd-9214-e7a6db2a7269",
    "prId" : 24647,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24647#pullrequestreview-189610520",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a273c466-7d02-4ac4-88c2-38fe6ce94bf6",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can saw_int's signature be tightened up?",
        "createdAt" : "2019-01-05T22:00:50Z",
        "updatedAt" : "2019-01-05T22:00:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d4edc989-2758-4beb-8251-b75f06742a70",
        "parentId" : "a273c466-7d02-4ac4-88c2-38fe6ce94bf6",
        "authorId" : "d27357e5-3013-4027-a032-3a633c4de0f3",
        "body" : "It can, but I didn't see any significant difference when changing it to `cdef inline saw_int(self, int val)`, so took that out to keep this minimal. That call is only used in this file, and only a few times at that so it'd be fine to tighten it up.",
        "createdAt" : "2019-01-05T22:29:37Z",
        "updatedAt" : "2019-01-05T22:29:37Z",
        "lastEditedBy" : "d27357e5-3013-4027-a032-3a633c4de0f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "73865f1a2a9e1bd7601c86f431a4d434b0313202",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2013,2017 @@            if not seen.null_:\n                val = int(val)\n                seen.saw_int(val)\n\n                if ((seen.uint_ and seen.sint_) or"
  },
  {
    "id" : "ee82913a-b66f-4e48-938a-f6bfe5378d90",
    "prId" : 25382,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25382#pullrequestreview-205900344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eefe9e7b-298e-44f4-bfc6-9db9a681f0ef",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what system actually hits this? AFAIK numpy doesn't use this on a regular basis",
        "createdAt" : "2019-02-20T13:57:53Z",
        "updatedAt" : "2019-02-20T21:29:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a6f30789-b94a-4671-b82a-f8dbcef619ca",
        "parentId" : "eefe9e7b-298e-44f4-bfc6-9db9a681f0ef",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Well, it's as easy to use as `float32` on a 64-bit platform. I just added it for completeness.",
        "createdAt" : "2019-02-20T17:28:31Z",
        "updatedAt" : "2019-02-20T21:29:39Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "c6aed9aa-486a-4612-b716-576214289017",
        "parentId" : "eefe9e7b-298e-44f4-bfc6-9db9a681f0ef",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok see if u can come up with a test then maybe have to force numpy to construct it",
        "createdAt" : "2019-02-20T17:36:00Z",
        "updatedAt" : "2019-02-20T21:29:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "12740f2f878c6efc3b9831ca9e94dbbc50bd62d2",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +940,944 @@    'float64': 'floating',\n    'f': 'floating',\n    'complex64': 'complex',\n    'complex128': 'complex',\n    'c': 'complex',"
  },
  {
    "id" : "c68aa01e-ef8b-4559-96c1-25fe10fe3bd3",
    "prId" : 25731,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25731#pullrequestreview-220849064",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "141eee94-092c-41e2-8c66-98046ae2c19e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "looks like you copied the doc-string from above, can you correct it to this function",
        "createdAt" : "2019-03-26T12:02:03Z",
        "updatedAt" : "2019-03-31T06:34:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e6b48251-308a-4123-9d58-6117743e9e81",
        "parentId" : "141eee94-092c-41e2-8c66-98046ae2c19e",
        "authorId" : "4b2eaa06-54de-412a-ae7f-6f42dadc3d9b",
        "body" : "The doc-string is copied from above, and I have correct it for `tuple`. Is it ok to see \"convert a list of tuples into an object array\"? Since we say \"convert a list of lists ...\" above.",
        "createdAt" : "2019-03-26T12:28:40Z",
        "updatedAt" : "2019-03-31T06:34:31Z",
        "lastEditedBy" : "4b2eaa06-54de-412a-ae7f-6f42dadc3d9b",
        "tags" : [
        ]
      },
      {
        "id" : "90a2b2f9-8fa0-4645-8595-26ae5e3a83a0",
        "parentId" : "141eee94-092c-41e2-8c66-98046ae2c19e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "the parameters are wrong",
        "createdAt" : "2019-03-29T12:12:05Z",
        "updatedAt" : "2019-03-31T06:34:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "97f102ad-6017-4359-be01-f95c6641509d",
        "parentId" : "141eee94-092c-41e2-8c66-98046ae2c19e",
        "authorId" : "4b2eaa06-54de-412a-ae7f-6f42dadc3d9b",
        "body" : "Seems the diff that you were commenting on is out-of-date?",
        "createdAt" : "2019-03-29T14:48:20Z",
        "updatedAt" : "2019-03-31T06:34:31Z",
        "lastEditedBy" : "4b2eaa06-54de-412a-ae7f-6f42dadc3d9b",
        "tags" : [
        ]
      },
      {
        "id" : "1c9ddfc6-d1e6-475c-817f-ab0d33b93e43",
        "parentId" : "141eee94-092c-41e2-8c66-98046ae2c19e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I see rows and a min_width parameter here, but to_object_array_tuples *only* takes rows. ",
        "createdAt" : "2019-03-30T18:32:26Z",
        "updatedAt" : "2019-03-31T06:34:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "50ee7aea-a683-4e07-8ef3-37cbf3867943",
        "parentId" : "141eee94-092c-41e2-8c66-98046ae2c19e",
        "authorId" : "4b2eaa06-54de-412a-ae7f-6f42dadc3d9b",
        "body" : "Got it, sorry for the careless. The `min_width` and is only needed for `to_object_array` and I have removed the extra docstring in `to_object_array_tuples`.",
        "createdAt" : "2019-03-31T06:38:27Z",
        "updatedAt" : "2019-03-31T06:38:27Z",
        "lastEditedBy" : "4b2eaa06-54de-412a-ae7f-6f42dadc3d9b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e41de3d7b8aa5fbcb3c2a4316a3d16f140f2725",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +2307,2311 @@    \"\"\"\n    Convert a list of tuples into an object array. Any subclass of\n    tuple in `rows` will be casted to tuple.\n\n    Parameters"
  },
  {
    "id" : "01a02067-721d-40ac-a899-08eff76488ff",
    "prId" : 27157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27157#pullrequestreview-256443392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e999ece1-1a1d-48c5-af2e-3a8438b68600",
        "parentId" : null,
        "authorId" : null,
        "body" : "This is an awkward little state machine. By my code analysis, this is a false positive. each will either not be referenced or be initialized first. This is just to reassure the compiler.",
        "createdAt" : "2019-07-01T15:48:49Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "1ae5eefb-380f-4b7e-8b33-33c1299742e9",
        "parentId" : "e999ece1-1a1d-48c5-af2e-3a8438b68600",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Makes sense",
        "createdAt" : "2019-07-01T16:34:11Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8f3fa5b997ea78ff33e93a7f711cc5759cd0ce3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +478,482 @@    cdef:\n        Py_ssize_t i, n = len(mask)\n        Py_ssize_t start = 0, end = 0\n        bint started = 0, finished = 0\n"
  },
  {
    "id" : "7adb9302-6988-4bce-a8c1-5b25ee3541f8",
    "prId" : 27157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27157#pullrequestreview-256455267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c8e2c76-f650-40aa-9099-4c77b156a138",
        "parentId" : null,
        "authorId" : null,
        "body" : "real bug. if n ==0, `range` falls through and `i` is referenced uninit on L1646",
        "createdAt" : "2019-07-01T15:51:36Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "107bf011-dd40-4c8d-907c-b56ceb0556b9",
        "parentId" : "2c8e2c76-f650-40aa-9099-4c77b156a138",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Wouldn't the `n == 0` check on the subsequent line which returns prevent this?",
        "createdAt" : "2019-07-01T16:32:34Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "bab37e7f-1be3-49bd-b6fd-45848cafe316",
        "parentId" : "2c8e2c76-f650-40aa-9099-4c77b156a138",
        "authorId" : null,
        "body" : "Yes. false positive then.",
        "createdAt" : "2019-07-01T16:55:58Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "d8f3fa5b997ea78ff33e93a7f711cc5759cd0ce3",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1632,1636 @@    \"\"\"\n    cdef:\n        Py_ssize_t i = 0, j, n = len(values)\n        object base_val, base_tz, val, tz\n"
  },
  {
    "id" : "c3f15eb9-ec08-41f7-8990-f11bb4aa695a",
    "prId" : 27267,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27267#pullrequestreview-258601972",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c55b817-ac21-49d9-a824-a4b4099da4d8",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "we definitely _can_ do this, but IIRC this is a python-space call  whereas the hasattr check would become a C call",
        "createdAt" : "2019-07-06T20:58:48Z",
        "updatedAt" : "2019-07-17T19:24:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0fe39b98-b269-4260-944f-bac7630b11be",
        "parentId" : "1c55b817-ac21-49d9-a824-a4b4099da4d8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ultimately i am not sure this makes any difference (though we could test that at a later point)",
        "createdAt" : "2019-07-06T21:04:34Z",
        "updatedAt" : "2019-07-17T19:24:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e7755b72a7be47aa2579ea810c6c1032a5cc81b",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +932,936 @@cdef inline bint c_is_list_like(object obj, bint allow_sets):\n    return (\n        isinstance(obj, abc.Iterable)\n        # we do not count strings/unicode/bytes as list-like\n        and not isinstance(obj, (str, bytes))"
  },
  {
    "id" : "f5e3c7aa-8e9b-45de-a458-fa676d10b23d",
    "prId" : 27267,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27267#pullrequestreview-258605611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "066cdba1-4931-45ac-be2b-804acf2972b1",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Orthogonal since this is just moving code but do we allow generators here? Wondering if abc.Collection might be more appropriate",
        "createdAt" : "2019-07-07T00:52:26Z",
        "updatedAt" : "2019-07-17T19:24:24Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e7755b72a7be47aa2579ea810c6c1032a5cc81b",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +932,936 @@cdef inline bint c_is_list_like(object obj, bint allow_sets):\n    return (\n        isinstance(obj, abc.Iterable)\n        # we do not count strings/unicode/bytes as list-like\n        and not isinstance(obj, (str, bytes))"
  },
  {
    "id" : "286465b1-47a9-4f04-813d-606634272c39",
    "prId" : 27335,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27335#pullrequestreview-310799910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87d3a0aa-dbec-4276-9e65-ae758efe4858",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "separate issue is we should change line 2083 to use a DatetimeArray (can be separate PR) or here if it works out.\r\n\r\ncan you also update the doc-string (well add it really :->) thanks for workign on this.",
        "createdAt" : "2019-10-30T12:16:28Z",
        "updatedAt" : "2019-11-11T14:10:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3ab606f7-7924-4863-b4e5-6d13c144a4d0",
        "parentId" : "87d3a0aa-dbec-4276-9e65-ae758efe4858",
        "authorId" : "f7f26e80-fbf6-4c86-9239-b1f32f9f4826",
        "body" : "I will leave line 2083 out as it is a separate issue.\r\nWhich version of the doc-string shall I modify?",
        "createdAt" : "2019-11-03T05:17:44Z",
        "updatedAt" : "2019-11-11T14:10:51Z",
        "lastEditedBy" : "f7f26e80-fbf6-4c86-9239-b1f32f9f4826",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc179be1be8a249df3c7e429e250989c50e2b10e",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +2123,2127 @@    if not seen.object_:\n        if not safe:\n            if seen.null_ or seen.nan_:\n                if seen.is_float_or_complex:\n                    if seen.complex_:"
  },
  {
    "id" : "3e6cd96f-3820-49d7-8a44-30a65ca6ef5b",
    "prId" : 27335,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27335#pullrequestreview-315267494",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b913d0c8-446d-40e2-933e-bd50aa6aa5f8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if you can update this doc-string here e.g. Returns / Parameters",
        "createdAt" : "2019-11-08T14:58:06Z",
        "updatedAt" : "2019-11-11T14:10:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5085dbaa-aa1f-4375-a753-64f247f9b276",
        "parentId" : "b913d0c8-446d-40e2-933e-bd50aa6aa5f8",
        "authorId" : "f7f26e80-fbf6-4c86-9239-b1f32f9f4826",
        "body" : "Doc-string added",
        "createdAt" : "2019-11-12T02:46:00Z",
        "updatedAt" : "2019-11-12T02:46:00Z",
        "lastEditedBy" : "f7f26e80-fbf6-4c86-9239-b1f32f9f4826",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc179be1be8a249df3c7e429e250989c50e2b10e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1961,1965 @@                          bint convert_timedelta=0,\n                          bint convert_to_nullable_integer=0):\n    \"\"\"\n    Type inference function-- convert object array to proper dtype\n"
  },
  {
    "id" : "7b83038a-705f-4e71-87f8-7b4b7d48b8d4",
    "prId" : 27461,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27461#pullrequestreview-263975821",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e56ff42a-ae7b-4e62-946a-9491c455f5fe",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "side note (can u make an issue)\r\n\r\ni think we need. way for EA to hook into this for an EA scalar\r\n\r\neg an IPaddress from cyberpandas could register a scalar i think \r\n\r\n",
        "createdAt" : "2019-07-19T01:02:38Z",
        "updatedAt" : "2019-07-20T19:39:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6377ce4b-4021-4519-a1ab-b601255d71ff",
        "parentId" : "e56ff42a-ae7b-4e62-946a-9491c455f5fe",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure",
        "createdAt" : "2019-07-19T01:14:21Z",
        "updatedAt" : "2019-07-20T19:39:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0439f685a5e9d94121723decc7f015b8602f4366",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +164,168 @@            # see np.isscalar\n            or val is None\n            or isinstance(val, (Fraction, Number))\n            or util.is_period_object(val)\n            or is_decimal(val)"
  },
  {
    "id" : "96a01243-ae0f-433d-a46d-552b6a2571ca",
    "prId" : 29314,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29314#pullrequestreview-310751374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "279fbbe9-59cc-437e-a6ed-f47862d4edd7",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "If so, I'm okay with removing in this PR.",
        "createdAt" : "2019-11-02T01:08:32Z",
        "updatedAt" : "2019-11-02T01:08:32Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "4aaa3834-99b7-490d-9170-0d7d966b915d",
        "parentId" : "279fbbe9-59cc-437e-a6ed-f47862d4edd7",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Poor wording on my part.  This function is used inside lib.pyx, but its only non-cython use in in tests.  So the option is to make it `cdef` instead of `cpdef` at the cost of not testing it directly.",
        "createdAt" : "2019-11-02T02:14:58Z",
        "updatedAt" : "2019-11-02T02:14:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "09e5ae4f-1ecb-4ada-8fd9-7e2450f28992",
        "parentId" : "279fbbe9-59cc-437e-a6ed-f47862d4edd7",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Ah okay. Thanks for clarifying that.",
        "createdAt" : "2019-11-02T02:17:49Z",
        "updatedAt" : "2019-11-02T02:17:49Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "83c26a11d0126f70e8dc8efabe340be657440edf",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1677,1681 @@\n\n# TODO: only non-here use is in test\ndef is_datetime_with_singletz_array(values: ndarray) -> bool:\n    \"\"\""
  },
  {
    "id" : "d0966600-1f65-493b-a170-572fccb6746b",
    "prId" : 29314,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29314#pullrequestreview-310748112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "978286e9-559a-44b8-bf2a-765330f03e43",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Same",
        "createdAt" : "2019-11-02T01:08:38Z",
        "updatedAt" : "2019-11-02T01:08:39Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "83c26a11d0126f70e8dc8efabe340be657440edf",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1721,1725 @@\n\n# TODO: only non-here use is in test\ncpdef bint is_timedelta_or_timedelta64_array(ndarray values):\n    \"\"\" infer with timedeltas and/or nat/none \"\"\""
  },
  {
    "id" : "fcba6b61-15e3-42b2-a1fb-c99b98600aee",
    "prId" : 29640,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29640#pullrequestreview-317962067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f9e3d9e-6f5b-4828-8a1c-8c659b3e6345",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you update the docstring here?",
        "createdAt" : "2019-11-16T09:36:15Z",
        "updatedAt" : "2019-11-19T14:36:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4bae5e2e32da8f19c745b0583fa5d5ab553b436",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +2215,2219 @@@cython.wraparound(False)\ndef map_infer_mask(ndarray arr, object f, const uint8_t[:] mask, bint convert=1,\n                   object na_value=_no_default, object dtype=object):\n    \"\"\"\n    Substitute for np.vectorize with pandas-friendly dtype inference"
  },
  {
    "id" : "0a74b840-0b17-40d3-8579-fea84abf8fed",
    "prId" : 29640,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29640#pullrequestreview-318521563",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa5455ac-773e-47b4-a89f-030cc7b2551e",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "`ndarray[uint8]`",
        "createdAt" : "2019-11-18T17:10:40Z",
        "updatedAt" : "2019-11-19T14:36:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f4681ce9-1202-4357-b899-991c88b9bd1b",
        "parentId" : "aa5455ac-773e-47b4-a89f-030cc7b2551e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "How do we handle dtypes in docstrings? I didn't think numpy supported that yet.",
        "createdAt" : "2019-11-18T17:53:39Z",
        "updatedAt" : "2019-11-19T14:36:22Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "04c5fac1-b999-4d9c-934c-251e9fe9f102",
        "parentId" : "aa5455ac-773e-47b4-a89f-030cc7b2551e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this is the pattern we use in the cython docstrings, but we're not super-consistent about it.  looking forward to if/when numpy supports that kind of annotation",
        "createdAt" : "2019-11-18T17:59:48Z",
        "updatedAt" : "2019-11-19T14:36:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4bae5e2e32da8f19c745b0583fa5d5ab553b436",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +2223,2227 @@    arr : ndarray\n    f : function\n    mask : ndarray\n        uint8 dtype ndarray indicating values not to apply `f` to.\n    convert : bool, default True"
  },
  {
    "id" : "02c1aa69-2cba-42c5-8561-9b7fb707e290",
    "prId" : 29640,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29640#pullrequestreview-318516515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae7b8ad9-c172-4025-bcbc-b27b9716e648",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "scalar?",
        "createdAt" : "2019-11-18T17:10:52Z",
        "updatedAt" : "2019-11-19T14:36:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "452eb159-6453-42dc-b616-80ce07b226ac",
        "parentId" : "ae7b8ad9-c172-4025-bcbc-b27b9716e648",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "No, I don't think so. These can return nested objects (e.g. `.str.get`)",
        "createdAt" : "2019-11-18T17:51:21Z",
        "updatedAt" : "2019-11-19T14:36:22Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4bae5e2e32da8f19c745b0583fa5d5ab553b436",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +2227,2231 @@    convert : bool, default True\n        Whether to call `maybe_convert_objects` on the resulting ndarray\n    na_value : Any, optional\n        The result value to use for masked values. By default, the\n        input value is used"
  },
  {
    "id" : "4d5feaba-92ea-4c54-a4d3-f639b45ed6ed",
    "prId" : 30322,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30322#pullrequestreview-339221163",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "739d7309-2f77-4f49-8082-17eda946e9c0",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Should we rename this to `no_default` ? (no leading underscore) ",
        "createdAt" : "2020-01-06T19:22:08Z",
        "updatedAt" : "2020-01-06T20:08:15Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "69cdd7de-a844-4c15-8263-1c958fb3b5b4",
        "parentId" : "739d7309-2f77-4f49-8082-17eda946e9c0",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I thought about it, don't have a strong opinion.",
        "createdAt" : "2020-01-06T19:50:36Z",
        "updatedAt" : "2020-01-06T20:08:15Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8fedcdd1-a213-4a38-9464-6d7eed8fdd1c",
        "parentId" : "739d7309-2f77-4f49-8082-17eda946e9c0",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i agree we should just rename this",
        "createdAt" : "2020-01-07T13:03:09Z",
        "updatedAt" : "2020-01-07T13:05:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "60e44a89-9a3d-410a-8c88-f72f7638403c",
        "parentId" : "739d7309-2f77-4f49-8082-17eda946e9c0",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "note that we have a number of type we use object as the marker (so should change those in a followup)",
        "createdAt" : "2020-01-07T13:03:44Z",
        "updatedAt" : "2020-01-07T13:05:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fff20a02fb120dc30660f2512afcd240b5a6b12d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2234,2238 @@\n# Note: _no_default is exported to the public API in pandas.api.extensions\n_no_default = object()  #: Sentinel indicating the default value.\n\n"
  },
  {
    "id" : "0aac64cc-2b77-4f02-99c8-951c5b8b0147",
    "prId" : 30788,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30788#pullrequestreview-339383735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b9cbd75-5cea-466f-b4c2-fe2d0b18a145",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "having a cdef version (kind of like we have for NaT) would help perf here (not necessary for this PR)",
        "createdAt" : "2020-01-07T17:19:56Z",
        "updatedAt" : "2020-01-07T17:19:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd0a59f698fe28e944f1fa55c3539aace39a8447",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +2271,2275 @@    for i in range(n):\n        if mask[i]:\n            if na_value is no_default:\n                val = arr[i]\n            else:"
  },
  {
    "id" : "fa771a71-fab8-416c-97a1-4bf457564fde",
    "prId" : 30980,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30980#pullrequestreview-342483375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac62ea01-5952-41ac-b3c5-1c30ee9cfb56",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this should be in missing.pyx with the rest of these. I would also give this a more meaningful name",
        "createdAt" : "2020-01-14T04:06:17Z",
        "updatedAt" : "2020-01-14T12:06:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "582578b8-b8c3-469a-b6b3-b20a46b56809",
        "parentId" : "ac62ea01-5952-41ac-b3c5-1c30ee9cfb56",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is overridding the method on the parent Validator class.",
        "createdAt" : "2020-01-14T12:04:47Z",
        "updatedAt" : "2020-01-14T12:06:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "08e049dd95bc2fdbef9939a2bd35920a2ff52f53",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1625,1629 @@        return issubclass(self.dtype.type, np.str_)\n\n    cdef bint is_valid_null(self, object value) except -1:\n        # We deliberately exclude None / NaN here since StringArray uses NA\n        return value is C_NA"
  },
  {
    "id" : "c18f1c6f-7e68-4d38-a380-bb4e70f27f6c",
    "prId" : 31294,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31294#pullrequestreview-348274462",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65e48cac-d329-419a-97c3-445896f6fd1d",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Could arguably just use `PyIter_Check` where needed now and avoid overhead of def call",
        "createdAt" : "2020-01-24T23:05:46Z",
        "updatedAt" : "2020-01-24T23:05:55Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a7f4c863-3e2e-4eb9-8d29-9b25adb54728",
        "parentId" : "65e48cac-d329-419a-97c3-445896f6fd1d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "so far no usage of this in the cython code, it is just replacing the version in core.dtypes.inference",
        "createdAt" : "2020-01-24T23:12:03Z",
        "updatedAt" : "2020-01-24T23:12:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f98f923ca3a332a0edb9acb29aa620022886faa",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +186,190 @@\n\ndef is_iterator(obj: object) -> bool:\n    \"\"\"\n    Check if the object is an iterator."
  },
  {
    "id" : "1fcb355c-7976-4200-8437-177a9f90fa63",
    "prId" : 31877,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31877#pullrequestreview-356738533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05890b9d-27fb-4b7f-834b-b0afcb82bac8",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Do you know if \"S\" is ever used anymore?",
        "createdAt" : "2020-02-11T14:45:29Z",
        "updatedAt" : "2020-02-12T13:30:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "923779e9-5220-46b8-a423-587206063cd2",
        "parentId" : "05890b9d-27fb-4b7f-834b-b0afcb82bac8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "You still get \"S\" with numpy strings (bytes):\r\n\r\n```\r\nIn [18]: np.array([\"a\", \"b\"], dtype=\"S\") \r\nOut[18]: array([b'a', b'b'], dtype='|S1')\r\n\r\nIn [19]: np.array([\"a\", \"b\"], dtype=\"S\").dtype\r\nOut[19]: dtype('S1')\r\n\r\nIn [20]: np.array([\"a\", \"b\"], dtype=\"S\").dtype.name \r\nOut[20]: 'bytes8'\r\n\r\nIn [21]: np.array([\"a\", \"b\"], dtype=\"S\").dtype.kind \r\nOut[21]: 'S'\r\n```\r\n\r\nI was more wondering what the original \"string\" -> \"bytes\" mapping could be for, but I can't think of a case where \"string\" is returned from a numpy dtype's name or kind",
        "createdAt" : "2020-02-11T14:48:29Z",
        "updatedAt" : "2020-02-12T13:30:52Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6b1e862f-f42b-46cc-a946-fcfb9d221533",
        "parentId" : "05890b9d-27fb-4b7f-834b-b0afcb82bac8",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "SGTM.",
        "createdAt" : "2020-02-11T15:13:49Z",
        "updatedAt" : "2020-02-12T13:30:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "45947a8445a6ca5762ed50a409e27fe4d1671cb2",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1007,1011 @@    'c': 'complex',\n    'string': 'string',\n    'S': 'bytes',\n    'U': 'string',\n    'bool': 'boolean',"
  },
  {
    "id" : "6c16f064-12e5-4563-9778-d05764e98720",
    "prId" : 32842,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32842#pullrequestreview-378113844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cd115cf-6c1b-47b3-af5b-3d46ca090989",
        "parentId" : null,
        "authorId" : "b6d1ce85-a87f-4650-9edd-b58264a5a361",
        "body" : "`count()` is handling `-1` by masking them.\r\n\r\n```python\r\n    def count(self):\r\n        \"\"\"\r\n        Compute count of group, excluding missing values.\r\n        Returns\r\n        -------\r\n        DataFrame\r\n            Count of values within each group.\r\n        \"\"\"\r\n        data = self._get_data_to_aggregate()\r\n        ids, _, ngroups = self.grouper.group_info\r\n        mask = ids != -1\r\n\r\n        # TODO(2DEA): reshape would not be necessary with 2D EAs\r\n        vals = ((mask & ~isna(blk.values).reshape(blk.shape)) for blk in data.blocks)\r\n        locs = (blk.mgr_locs for blk in data.blocks)\r\n\r\n        counted = (\r\n            lib.count_level_2d(x, labels=ids, max_bin=ngroups, axis=1) for x in vals\r\n        )\r\n```\r\n\r\n`count_level_2d` was designed to ignore masked values.\r\nThis is essentially reverting this change:\r\nhttps://github.com/pandas-dev/pandas/commit/d968aab3da13f68fabbb05f8eba12927d8bc5836#diff-8fa7422077eecd07a4006c11c78fc93aL1265-L1268",
        "createdAt" : "2020-03-19T21:41:00Z",
        "updatedAt" : "2020-03-31T21:16:47Z",
        "lastEditedBy" : "b6d1ce85-a87f-4650-9edd-b58264a5a361",
        "tags" : [
        ]
      }
    ],
    "commit" : "60289c28bf9aa2e0203ef3edc5d19e85a584e953",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +803,807 @@                for j in range(k):\n                    if mask[i, j]:\n                        counts[i, labels[j]] += 1\n\n    return counts"
  },
  {
    "id" : "5e01b896-bb5c-4720-ae57-9a832f813dcd",
    "prId" : 32842,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32842#pullrequestreview-381680889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "271522ad-0512-45df-86b6-ca0a350e485f",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Sorry if missed before but can you share why this change is required? Isn't the mask only ever 0 or 1?",
        "createdAt" : "2020-03-25T14:56:47Z",
        "updatedAt" : "2020-03-31T21:16:47Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0de584f5-24c9-4a68-815f-dfe2b47a7c26",
        "parentId" : "271522ad-0512-45df-86b6-ca0a350e485f",
        "authorId" : "b6d1ce85-a87f-4650-9edd-b58264a5a361",
        "body" : "The segfault is caused by out-of-bounds access on `counts`, when `labels[i]` is `-1`. If it is checked first whether a value should be counted then out-of-bounds access does not happen.\r\n\r\nThis is also how the code was written originally:\r\nhttps://github.com/pandas-dev/pandas/commit/d968aab3da13f68fabbb05f8eba12927d8bc5836#diff-8fa7422077eecd07a4006c11c78fc93aL1265-L1268\r\n\r\nThat means that `count_level_2d` requires `mask` to be `0` \r\n1. on columns/rows that should not be counted, because the counted-over row index or column index value is `NaN`.\r\n1. for data values that are `NaN`",
        "createdAt" : "2020-03-25T19:15:29Z",
        "updatedAt" : "2020-03-31T21:16:47Z",
        "lastEditedBy" : "b6d1ce85-a87f-4650-9edd-b58264a5a361",
        "tags" : [
        ]
      },
      {
        "id" : "ef5cc5af-39f0-498b-8dea-caab5fcbf07b",
        "parentId" : "271522ad-0512-45df-86b6-ca0a350e485f",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Ah OK I see - thanks for clarifying",
        "createdAt" : "2020-03-26T03:32:20Z",
        "updatedAt" : "2020-03-31T21:16:47Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "60289c28bf9aa2e0203ef3edc5d19e85a584e953",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +795,799 @@                for j in range(k):\n                    if mask[i, j]:\n                        counts[labels[i], j] += 1\n\n    else:  # axis == 1"
  },
  {
    "id" : "607a5225-a68d-4f7a-b2fb-fa05bb28de11",
    "prId" : 33009,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33009#pullrequestreview-381382246",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81e9cccd-37a0-4bf5-b288-6da3e32d3ad3",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can values here be `const int64_t[:]``",
        "createdAt" : "2020-03-25T17:26:36Z",
        "updatedAt" : "2020-03-25T23:55:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e6402157-5ef7-4b86-8bd1-5e7975c13657",
        "parentId" : "81e9cccd-37a0-4bf5-b288-6da3e32d3ad3",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "No, cython raises errors\r\n\r\n<details>\r\n\r\n```\r\n[1/1] Cythonizing pandas/_libs/lib.pyx\r\n\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\n        int64_t l_bin, r_bin, nat_count\r\n        bint right_closed = closed == 'right'\r\n\r\n    nat_count = 0\r\n    if hasnans:\r\n        mask = values == NPY_NAT\r\n                     ^\r\n------------------------------------------------------------\r\n\r\npandas/_libs/lib.pyx:707:22: Invalid types for '==' (const int64_t[:], int64_t)\r\nwarning: pandas/_libs/lib.pyx:709:24: Index should be typed for more efficient access\r\n\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\n\r\n    nat_count = 0\r\n    if hasnans:\r\n        mask = values == NPY_NAT\r\n        nat_count = np.sum(mask)\r\n        values = values[~mask]\r\n                      ^\r\n------------------------------------------------------------\r\n\r\npandas/_libs/lib.pyx:709:23: Cannot convert 'int64_t' to memoryviewslice\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 791, in <module>\r\n    setup_package()\r\n  File \"setup.py\", line 761, in setup_package\r\n    ext_modules=maybe_cythonize(extensions, compiler_directives=directives),\r\n  File \"setup.py\", line 534, in maybe_cythonize\r\n    return cythonize(extensions, *args, **kwargs)\r\n  File \"/home/bummy/miniconda3/envs/pandas-dev/lib/python3.7/site-packages/Cython/Build/Dependencies.py\", line 1102, in cythonize\r\n    cythonize_one(*args)\r\n  File \"/home/bummy/miniconda3/envs/pandas-dev/lib/python3.7/site-packages/Cython/Build/Dependencies.py\", line 1225, in cythonize_one\r\n    raise CompileError(None, pyx_file)\r\nCython.Compiler.Errors.CompileError: pandas/_libs/lib.pyx\r\n\r\n```\r\n\r\n</details>",
        "createdAt" : "2020-03-25T17:36:09Z",
        "updatedAt" : "2020-03-25T23:55:27Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5c70bbd5a2b3f9c4f5a8421297afe9659b78636",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +692,696 @@@cython.boundscheck(False)\n@cython.wraparound(False)\ndef generate_bins_dt64(ndarray[int64_t] values, const int64_t[:] binner,\n                       object closed='left', bint hasnans=False):\n    \"\"\""
  },
  {
    "id" : "f0048bdf-ea58-49a0-b195-02e1aaadd755",
    "prId" : 33749,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33749#pullrequestreview-400336013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3d4d80f-74af-480d-b9f3-4e4e33e636c0",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "It looks like this forces conversion of `target` to `DatetimeIndex` in `get_indexer` (via `DatetimeIndex._maybe_promote`) which will cause issues with out of bounds `date` objects.\r\n\r\nOn this branch:\r\n```python\r\nIn [1]: from datetime import date; import pandas as pd; pd.__version__\r\nOut[1]: '1.1.0.dev0+1352.g30ad99623'\r\n\r\nIn [2]: values = pd.DatetimeIndex([pd.Timestamp(\"2020-01-01\"), pd.Timestamp(\"2020-01-02\")])\r\n\r\nIn [3]: values.get_indexer([pd.Timestamp(\"2020-01-01\"), date(9999, 12, 31)])\r\n---------------------------------------------------------------------------\r\nOutOfBoundsDatetime: Out of bounds nanosecond timestamp: 9999-12-31 00:00:00\r\n```\r\n\r\nThis works `master` albeit probably because the bug happens to return the right answer in this case:\r\n```python\r\nIn [1]: from datetime import date; import pandas as pd; pd.__version__\r\nOut[1]: '1.1.0.dev0+1346.g3db460cbb'\r\n\r\nIn [2]: values = pd.DatetimeIndex([pd.Timestamp(\"2020-01-01\"), pd.Timestamp(\"2020-01-02\")])\r\n\r\nIn [3]: values.get_indexer([pd.Timestamp(\"2020-01-01\"), date(9999, 12, 31)])\r\nOut[3]: array([ 0, -1])\r\n```",
        "createdAt" : "2020-04-23T23:36:11Z",
        "updatedAt" : "2020-05-31T22:53:26Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "db7ff95d-43af-4f03-9fe7-6db9e84e0241",
        "parentId" : "b3d4d80f-74af-480d-b9f3-4e4e33e636c0",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "@jschendel Hmm, on master we also get the OutOfBoundsDatetime error if we interchange the order of the list elements (I think as you showed it's only avoiding the error by accident). Would this be in issue in _maybe_promote rather than the dtype inference itself? I imagine it only needs to not promote if it encounters a situation like this.",
        "createdAt" : "2020-04-24T00:53:40Z",
        "updatedAt" : "2020-05-31T22:53:26Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "cf2b443e-7e05-4bea-8862-beb994f55c48",
        "parentId" : "b3d4d80f-74af-480d-b9f3-4e4e33e636c0",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "> Would this be in issue in _maybe_promote rather than the dtype inference itself?\r\n\r\nI suspect so, but I'm not super well-versed in what we expect to be inferred as `'date'`.\r\n\r\n>  I imagine it only needs to not promote if it encounters a situation like this.\r\n\r\nI think this would miss the case where we have a mixture of `Timestamp`,  and both in and out of bounds `datetime.date` objects, e.g. `values = [pd.Timestamp(\"2020-01-01\"), date(2020, 1, 2), date(9999, 12, 31)]`, as that would fall back to the buggy behavior for `date(2020, 1, 2)`.\r\n\r\nNot sure how to resolve this off the top of my head though.  Definitely seems like a rare corner case, and what's been done already is an improvement, so I don't want it to be a blocker if a fix isn't apparent.  Could maybe open a new issue for it and write an xfailing test here if there's no immediate solution.  I'm also a bit rusty so it's quite possible there's an obvious solution I'm overlooking.",
        "createdAt" : "2020-04-24T23:59:54Z",
        "updatedAt" : "2020-05-31T22:53:26Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "a3afa194-4108-42de-b3c5-b5e0dcc307b8",
        "parentId" : "b3d4d80f-74af-480d-b9f3-4e4e33e636c0",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Ah, yeah I hadn't thought of that case and that would still give incorrect output",
        "createdAt" : "2020-04-25T00:34:35Z",
        "updatedAt" : "2020-05-31T22:53:26Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bfd6c47efbe08638c70eed07cdf982bbc7b1e1e",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1384,1388 @@            return \"datetime\"\n        elif is_date_array(values, skipna=skipna):\n            return \"date\"\n\n    elif PyDate_Check(val):"
  },
  {
    "id" : "34f78154-4e7d-4670-a98c-3958719b0eba",
    "prId" : 37176,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37176#pullrequestreview-510860587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17e4f6de-1314-47f6-bfb9-00706e38b826",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this code hit? don't need new tests?",
        "createdAt" : "2020-10-16T23:23:47Z",
        "updatedAt" : "2020-10-17T01:31:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "45b7d952-c6eb-4dba-a697-958ed303c8d3",
        "parentId" : "17e4f6de-1314-47f6-bfb9-00706e38b826",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this is hit by added test case in test_inference",
        "createdAt" : "2020-10-17T01:04:48Z",
        "updatedAt" : "2020-10-17T01:31:32Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4597993da76d5d4d386fc0385bc914ca0c64b0ca",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1705,1709 @@\n\ncdef class ComplexValidator(Validator):\n    cdef inline bint is_value_typed(self, object value) except -1:\n        return ("
  }
]