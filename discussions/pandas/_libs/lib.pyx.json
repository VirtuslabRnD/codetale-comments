[
  {
    "id" : "b8bec5ed-23ab-4468-ab9e-ebb8507da197",
    "prId" : 18059,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18059#pullrequestreview-74419372",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30ae8a68-1842-4967-8af5-020a699e1f20",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so this now makes lib depend on np_datetime.pxd, which is ok as tseries_depends now lists this.",
        "createdAt" : "2017-11-06T13:45:37Z",
        "updatedAt" : "2017-11-06T13:45:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "13b85d88319b86a5461708a498c2083715163f32",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +50,54 @@PyDateTime_IMPORT\n\nfrom tslibs.np_datetime cimport get_timedelta64_value, get_datetime64_value\n\nfrom tslib cimport _check_all_nulls"
  },
  {
    "id" : "599329db-ccce-40d3-9932-595f04e4b1ba",
    "prId" : 18119,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18119#pullrequestreview-74748178",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a16e021-6eeb-430d-8ac0-b63ee523f9c0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i dont' really like this but i guess its how it is currently. this is a python level dep between lib and tslib.",
        "createdAt" : "2017-11-06T13:32:08Z",
        "updatedAt" : "2017-11-06T15:46:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2195e9fc-0b0c-4feb-af4f-e19df8585ca9",
        "parentId" : "2a16e021-6eeb-430d-8ac0-b63ee523f9c0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Timestamp and Timedelta aren't used in lib.  A couple of modules use `lib.Timestamp` instead of `tslib.Timestamp`.  The NaT dependency could be imported directly from tslibs.nattype.  array_to_datetime... not really any good options.",
        "createdAt" : "2017-11-06T15:48:13Z",
        "updatedAt" : "2017-11-06T15:48:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "77e08874-f205-4e0b-b8c8-5d091ea53ce7",
        "parentId" : "2a16e021-6eeb-430d-8ac0-b63ee523f9c0",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah, just mentioning it",
        "createdAt" : "2017-11-07T13:35:57Z",
        "updatedAt" : "2017-11-07T13:35:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0611ad23c76e91f8e2781f175b773f5c456e9f8d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +55,59 @@\nfrom tslib cimport _check_all_nulls\nfrom tslib import NaT, Timestamp, Timedelta, array_to_datetime\nfrom interval import Interval\n"
  },
  {
    "id" : "7a1acc93-3e03-4855-ab5e-97c22a13b8cf",
    "prId" : 22283,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22283#pullrequestreview-153193631",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c4f68d8-b9c1-432f-bf7f-89aa84944363",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this not ever called in cython?",
        "createdAt" : "2018-09-07T03:26:00Z",
        "updatedAt" : "2018-09-07T03:27:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7acad5bd-6f90-4aed-9b4a-86b007303d64",
        "parentId" : "9c4f68d8-b9c1-432f-bf7f-89aa84944363",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yep, easy to confirm via grep",
        "createdAt" : "2018-09-07T03:36:29Z",
        "updatedAt" : "2018-09-07T03:36:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3300de17dac9bbc77b32a88465b961b114c38f88",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +108,112 @@\n\ndef is_scalar(val: object) -> bint:\n    \"\"\"\n    Return True if given value is scalar."
  },
  {
    "id" : "ea163464-7e7f-4f0f-9229-4c477ff06d68",
    "prId" : 22952,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22952#pullrequestreview-162308741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f243c19-9739-4851-9939-785d79373e7f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you put a blank line between cases (as you have done for some)",
        "createdAt" : "2018-10-07T23:03:33Z",
        "updatedAt" : "2018-11-19T21:54:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5f084aa0da7d89e88354aab8615238cab2549fa",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +135,139 @@    >>> dt = pd.datetime.datetime(2018, 10, 3)\n    >>> pd.is_scalar(dt)\n    True\n\n    >>> pd.api.types.is_scalar([2, 3])"
  },
  {
    "id" : "26d76b44-d604-4352-9653-999a8503c2e0",
    "prId" : 23162,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23162#pullrequestreview-165864413",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb0bf04f-09ea-4ad7-a3f0-aa213fc76191",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string here",
        "createdAt" : "2018-10-17T01:08:26Z",
        "updatedAt" : "2018-10-18T02:55:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a0285ec1-898b-4031-a011-999c83bab8c5",
        "parentId" : "eb0bf04f-09ea-4ad7-a3f0-aa213fc76191",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yep, done.",
        "createdAt" : "2018-10-17T22:37:41Z",
        "updatedAt" : "2018-10-18T02:55:17Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddd1be32893c781f366b40f5b1f3d0d5d49d0f79",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +513,517 @@        A new array with the input array's elements casted.\n    \"\"\"\n    cdef:\n        object arr_i\n        Py_ssize_t i, n = arr.size"
  },
  {
    "id" : "e2d15ded-e2fd-4b85-96ba-537b3e6e8715",
    "prId" : 23162,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23162#pullrequestreview-165864403",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34d68deb-b5b5-4480-86fe-6ac57173c53f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2018-10-17T01:08:32Z",
        "updatedAt" : "2018-10-18T02:55:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "003c1029-7bc2-4e61-be5d-2d96b360934b",
        "parentId" : "34d68deb-b5b5-4480-86fe-6ac57173c53f",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yep, done.",
        "createdAt" : "2018-10-17T22:37:39Z",
        "updatedAt" : "2018-10-18T02:55:17Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddd1be32893c781f366b40f5b1f3d0d5d49d0f79",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +547,551 @@        A new array with the input array's elements casted.\n    \"\"\"\n    cdef:\n        object arr_i\n        Py_ssize_t i, n = arr.size"
  },
  {
    "id" : "8204ce11-bf74-473e-90a5-22be19d5cf0c",
    "prId" : 23422,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23422#pullrequestreview-170009382",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dd2d046-db37-482c-8566-f54e471c4889",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I wonder if we can incorporate this `skipna` logic into the for-loop below.  Perhaps have an indicator to tell us whether we have seen an element in the `values` array that is non-null (when `skipna` is `True`).",
        "createdAt" : "2018-10-30T21:24:13Z",
        "updatedAt" : "2018-11-03T15:59:59Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "d8fcc3f7-225e-420e-9b2a-8e6a2a40f13a",
        "parentId" : "1dd2d046-db37-482c-8566-f54e471c4889",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Unfortunately, that's not directly possible (nor performant), because the line directly below (with `_try_infer_map`) will return prematurely as soon as it can grab hold of a dtype.",
        "createdAt" : "2018-10-30T21:30:03Z",
        "updatedAt" : "2018-11-03T15:59:59Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "19cf2dd8e66f33de7b2b49d9a1d4d67f4d649a04",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1184,1188 @@    if skipna:\n        values = values[~isnaobj(values)]\n\n    val = _try_infer_map(values)\n    if val is not None:"
  },
  {
    "id" : "bc0bbce8-64af-4e02-b392-0824c6d50bb9",
    "prId" : 23422,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23422#pullrequestreview-170523067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad91209e-d6c0-4282-a2cc-a3d0f07f2e81",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is a python and not a cimport, why are you not using checknull?",
        "createdAt" : "2018-10-31T12:06:30Z",
        "updatedAt" : "2018-11-03T15:59:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "438f6408-08d1-4df0-a22e-987fbeb66a8c",
        "parentId" : "ad91209e-d6c0-4282-a2cc-a3d0f07f2e81",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "checknull only returns a single bint, and not an array. I would have liked to `cimport` isnaobj, but that didn't work.",
        "createdAt" : "2018-10-31T15:21:07Z",
        "updatedAt" : "2018-11-03T15:59:59Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "6211a970-4959-4935-adc1-42c619f7cf13",
        "parentId" : "ad91209e-d6c0-4282-a2cc-a3d0f07f2e81",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so this isn array, ok, then add ``isnaobj`` to ``missing.pxd`` and make it a ``cpdef``. then you can cimport it. (and you need to type return value)",
        "createdAt" : "2018-11-01T00:40:30Z",
        "updatedAt" : "2018-11-03T15:59:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "19cf2dd8e66f33de7b2b49d9a1d4d67f4d649a04",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1183,1187 @@    values = getattr(values, 'values', values)\n    if skipna:\n        values = values[~isnaobj(values)]\n\n    val = _try_infer_map(values)"
  },
  {
    "id" : "9b4103ef-5bba-4323-b735-7f804f58d2a9",
    "prId" : 23464,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23464#pullrequestreview-171266842",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff398d5d-4e79-454f-9d14-bd4ed73e4bf3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are these changing? what is wrong with bint?",
        "createdAt" : "2018-11-02T20:11:23Z",
        "updatedAt" : "2018-11-02T20:14:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "969f47d5-9f19-4967-8f81-ed91998bd946",
        "parentId" : "ff398d5d-4e79-454f-9d14-bd4ed73e4bf3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "nothing is wrong with bint, but part of the upside of using py3-annotations is that its valid python.  using bint instead of bool defeats that purpose",
        "createdAt" : "2018-11-02T20:51:13Z",
        "updatedAt" : "2018-11-02T20:51:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "45b6f75987989f3853e3aac07499183af6149b80",
    "line" : 198,
    "diffHunk" : "@@ -1,1 +854,858 @@\n\ndef is_bool(obj: object) -> bool:\n    return util.is_bool_object(obj)\n"
  },
  {
    "id" : "f3634905-d93a-45a6-a0d9-537bdeb0a96b",
    "prId" : 23685,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23685#pullrequestreview-174918602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d37333bd-3c83-4d45-91fc-c4f2058b5535",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you comment here on what you are checking",
        "createdAt" : "2018-11-14T15:27:26Z",
        "updatedAt" : "2018-11-14T21:48:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d563aa1a5e6c644255bf3832f109ed7350b04c2",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1649,1653 @@            break\n\n    for j in range(i, n):\n        # Compare val's timezone with the reference timezone\n        # NaT can coexist with tz-aware datetimes, so skip if encountered"
  },
  {
    "id" : "24186583-2e7f-4451-82e2-2047bf659779",
    "prId" : 24050,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24050#pullrequestreview-184656339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2113a37-20b1-4dbe-b982-4fa62c05929f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "default is False",
        "createdAt" : "2018-12-13T13:21:33Z",
        "updatedAt" : "2019-01-04T11:14:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "03c46cd7d2ef541d09226a63741197ce22fc4303",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1090,1094 @@    value : scalar, list, ndarray, or pandas type\n    skipna : bool, default False\n        Ignore NaN values when inferring the type.\n\n        .. versionadded:: 0.21.0"
  },
  {
    "id" : "5a06b554-9cda-4ad4-975a-671d61279451",
    "prId" : 24521,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24521#pullrequestreview-188542860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eefdaf1c-9240-43db-9d08-3ae9184e862a",
        "parentId" : null,
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "``MultiIndex.union`` calls this function so I added a ``sort`` parameter to control the behaviour here and set the default to ``True`` for compatibility",
        "createdAt" : "2018-12-31T20:11:05Z",
        "updatedAt" : "2019-01-19T18:22:04Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      },
      {
        "id" : "fc5b201c-f8b9-4a19-b0d0-0af9d8f9ba5e",
        "parentId" : "eefdaf1c-9240-43db-9d08-3ae9184e862a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string here",
        "createdAt" : "2018-12-31T23:38:46Z",
        "updatedAt" : "2019-01-19T18:22:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b15248d3b8169b3fbde53e91fb02ef091e5ee00",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +201,205 @@@cython.wraparound(False)\n@cython.boundscheck(False)\ndef fast_unique_multiple(list arrays, sort: bool=True):\n    \"\"\"\n    Generate a list of unique values from a list of arrays."
  },
  {
    "id" : "a4a1da44-20be-4ecb-a13c-c582f6676430",
    "prId" : 24521,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24521#pullrequestreview-194370002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eef11128-f229-4f04-9dd4-fd031262c1c1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "might see if using safe_sort makes sense here (you would have to import here, otherwise this would e circular)",
        "createdAt" : "2019-01-13T21:57:28Z",
        "updatedAt" : "2019-01-19T18:22:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "86c3e424-a878-44e3-a93b-606a93c9ff2f",
        "parentId" : "eef11128-f229-4f04-9dd4-fd031262c1c1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "?",
        "createdAt" : "2019-01-15T12:10:30Z",
        "updatedAt" : "2019-01-19T18:22:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ec1265ee-b7b8-4543-acb7-729eb4c4885b",
        "parentId" : "eef11128-f229-4f04-9dd4-fd031262c1c1",
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "I tried using ``safe_sort`` here but it was causing some problems. The issue seems to be that ``uniques`` here is a list of tuples which are then used to construct a ``MultiIndex`` in ``MultiIndex.union``. However, when we use ``safe_sort`` it turns ``uniques`` into an ``np.array`` and doesn't sort it correctly so we get the wrong results. I can have a closer look at trying to resolve this if you want but it might involve changing ``safe_sort`` a bit.",
        "createdAt" : "2019-01-19T18:24:53Z",
        "updatedAt" : "2019-01-19T18:24:53Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      },
      {
        "id" : "1e626b1e-9aa7-487b-bc33-d1e62af8ba75",
        "parentId" : "eef11128-f229-4f04-9dd4-fd031262c1c1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, let's followup up later then (new PR).",
        "createdAt" : "2019-01-19T20:58:09Z",
        "updatedAt" : "2019-01-19T21:04:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b15248d3b8169b3fbde53e91fb02ef091e5ee00",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +234,238 @@    if sort:\n        try:\n            uniques.sort()\n        except Exception:\n            pass"
  }
]