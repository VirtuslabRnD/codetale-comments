[
  {
    "id" : "a49991a5-5841-4bc1-b6d8-227a4bacb4ce",
    "prId" : 18825,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18825#pullrequestreview-84528389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77b6ec4d-1100-44b7-9d60-ac543e81ef98",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment similiar to in algos_take for using the memory view.\r\n\r\n",
        "createdAt" : "2017-12-19T11:19:02Z",
        "updatedAt" : "2017-12-23T20:56:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bff80cea-60f0-4abf-99e2-98fbbca10ee5",
        "parentId" : "77b6ec4d-1100-44b7-9d60-ac543e81ef98",
        "authorId" : "e602fac6-dffe-49d8-a029-57bc9f68e4c3",
        "body" : "Done. I also noticed that the indenting was a tad off so I re-indented it to be 4 spaces.",
        "createdAt" : "2017-12-19T17:28:50Z",
        "updatedAt" : "2017-12-23T20:56:18Z",
        "lastEditedBy" : "e602fac6-dffe-49d8-a029-57bc9f68e4c3",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddb5247d73345af80f5723d6f3865409f12b3877",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +256,260 @@          ('Int64', 'int64', 'val == iNaT', False)]\n\ndef get_dispatch(dtypes):\n  for (name, dtype, null_condition, float_group) in dtypes:\n    unique_template = \"\"\"\\"
  },
  {
    "id" : "eccfb298-eca0-4d07-a77c-3aa480547a72",
    "prId" : 20473,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20473#pullrequestreview-106870759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "702fa3bf-feda-47ed-97ce-55cc7c866b9b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "when is float_group used? seems superfluous?",
        "createdAt" : "2018-03-25T13:45:18Z",
        "updatedAt" : "2018-03-26T12:15:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1203ec0a-ae39-465c-8135-a9fc5e14fe2e",
        "parentId" : "702fa3bf-feda-47ed-97ce-55cc7c866b9b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Seems to be used in `unique`.",
        "createdAt" : "2018-03-26T11:56:44Z",
        "updatedAt" : "2018-03-26T12:15:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "465d458573c99ee218299c2713c2e5abd305907c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +251,255 @@{{py:\n\n# name, dtype, float_group, default_na_value\ndtypes = [('Float64', 'float64', True, 'nan'),\n          ('UInt64', 'uint64', False, 0),"
  },
  {
    "id" : "71b30120-242a-4f02-ac46-2d643b43a3c0",
    "prId" : 21688,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21688#pullrequestreview-133435286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44ce4216-f1a6-43db-9267-0269db78fceb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we have multiple lookup routines for different drapes - is there a reason to not change them all?\r\n\r\nwhy just lookup? we have many routines which couldnin theory benefit from this",
        "createdAt" : "2018-06-30T19:46:05Z",
        "updatedAt" : "2018-07-07T15:52:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "76e377bd-a038-4f74-a529-c97c6eb7ca9a",
        "parentId" : "44ce4216-f1a6-43db-9267-0269db78fceb",
        "authorId" : "6bfa1922-c427-4971-9e7f-6e6257a1d5bb",
        "body" : "I can make a pass over `hashtable_class_helper.pxi.in` and add `const` specifiers where applicable.",
        "createdAt" : "2018-06-30T20:15:17Z",
        "updatedAt" : "2018-07-07T15:52:23Z",
        "lastEditedBy" : "6bfa1922-c427-4971-9e7f-6e6257a1d5bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4cb62960808931e209ce7b8392221d08c24d234",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +334,338 @@\n    @cython.boundscheck(False)\n    def lookup(self, const {{dtype}}_t[:] values):\n        cdef:\n            Py_ssize_t i, n = len(values)"
  },
  {
    "id" : "7b87bda0-32be-4cc8-aace-8481e683c7af",
    "prId" : 22805,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22805#pullrequestreview-184724267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34e69aa0-6995-4efd-b8c3-2f4851d84f13",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can type the size_hint as a uint_t I think to avoid this problem",
        "createdAt" : "2018-09-23T12:21:19Z",
        "updatedAt" : "2019-01-14T20:09:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f8660463-05e9-466a-bb2b-652ca3aa843d",
        "parentId" : "34e69aa0-6995-4efd-b8c3-2f4851d84f13",
        "authorId" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "body" : "It's getting typed as a `uint` on the next line - we actually want it untyped here so it could accept arbitrarily large values, just needs capped before before being converted to the c-type (what was causing the original error)",
        "createdAt" : "2018-12-13T15:40:53Z",
        "updatedAt" : "2019-01-14T20:09:39Z",
        "lastEditedBy" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3cbb2bf64016f4cd8a719f10dfd1e1459e4f690",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +266,270 @@        self.table = kh_init_{{dtype}}()\n        if size_hint is not None:\n            size_hint = min(size_hint, _SIZE_HINT_LIMIT)\n            kh_resize_{{dtype}}(self.table, size_hint)\n"
  },
  {
    "id" : "af8edced-aa13-498f-8822-87738f02e13b",
    "prId" : 23400,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23400#pullrequestreview-171705320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9243bc8-a7f2-49fb-8754-3ed8a4f9d1d6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "my point was just always construct the inverse, which is just the factorization, and simply leave this as _factorize as that is what it is. Channing the names and conditionally having return_inverse are just not worth the added complexity. I can live with a small perf hit when only uniques are needed. \r\n\r\ni also think we can simply remove na_sentinel as its always -1 (but can do that separately).",
        "createdAt" : "2018-11-04T16:03:59Z",
        "updatedAt" : "2018-11-27T07:08:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f0becd1d-6844-4069-9a2c-f6426ca3b162",
        "parentId" : "b9243bc8-a7f2-49fb-8754-3ed8a4f9d1d6",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "You will see that the block above (previously lines 419-422) got shifted down here verbatim -- that part is only necessary if an inverse is required, and we can avoid more complicated if-conditions (or even checking the bint `return_inverse`) if the case `k == self.table.n_buckets` is tested first.\r\n\r\nMight be more clear if you just expand the unchanged lines in between (it's only 3 lines that got hidden)",
        "createdAt" : "2018-11-05T18:52:48Z",
        "updatedAt" : "2018-11-27T07:08:00Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "00a304d467483135ad2c035d218a562fbdbeecd4",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +448,452 @@                        labels[i] = count\n                        count += 1\n                elif return_inverse:\n                    # k falls into a previous bucket\n                    # only relevant in case we need to construct the inverse"
  },
  {
    "id" : "0ac5b316-47a5-4bb9-a6c5-83483d239907",
    "prId" : 23400,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23400#pullrequestreview-173717110",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca892ff8-450f-4c2b-81eb-204a20156de7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "just always return the inverse as i mentioned, then you don't need all of these if statements",
        "createdAt" : "2018-11-11T18:28:49Z",
        "updatedAt" : "2018-11-27T07:08:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fd58a9ef-e015-45ec-9aec-4f4183022bb6",
        "parentId" : "ca892ff8-450f-4c2b-81eb-204a20156de7",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "this would impact perf (for the non-inverse case) even more than it is already. I can try if you want, but the slowdown will be much more substantial, I believe",
        "createdAt" : "2018-11-11T22:06:24Z",
        "updatedAt" : "2018-11-27T07:08:00Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "00a304d467483135ad2c035d218a562fbdbeecd4",
    "line" : 582,
    "diffHunk" : "@@ -1,1 +1038,1042 @@                labels[i] = idx\n\n        if return_inverse:\n            return uniques.to_array(), np.asarray(labels)\n        return uniques.to_array()"
  },
  {
    "id" : "1d7dbd0a-2b75-49f4-bca3-e4d018c4e762",
    "prId" : 23400,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23400#pullrequestreview-176578967",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fed08f0-574f-4d5b-965a-57be81544fad",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "flip the order of the return here, make this like factorize, otherwise this is very confusing.",
        "createdAt" : "2018-11-20T02:13:37Z",
        "updatedAt" : "2018-11-27T07:08:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "00a304d467483135ad2c035d218a562fbdbeecd4",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +472,476 @@        Returns\n        -------\n        uniques : ndarray[{{dtype}}]\n            Unique values of input, not sorted\n        labels : ndarray[int64] (if return_inverse)"
  },
  {
    "id" : "e2bbed96-2a7c-450d-992f-9247645bd7ac",
    "prId" : 23400,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23400#pullrequestreview-176578967",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "665fa261-f26c-41a4-89a8-fccb88f9a525",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment for here (and above where you are comparing nulls).",
        "createdAt" : "2018-11-20T02:14:33Z",
        "updatedAt" : "2018-11-27T07:08:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "00a304d467483135ad2c035d218a562fbdbeecd4",
    "line" : 334,
    "diffHunk" : "@@ -1,1 +766,770 @@            val = values[i]\n\n            if (ignore_na\n                and (not isinstance(val, (str, unicode))\n                     or (use_na_value and val == na_value))):"
  },
  {
    "id" : "38df10ac-bf85-44bb-9185-7d31167accca",
    "prId" : 23400,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23400#pullrequestreview-178081316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf1abdd3-570e-4908-ac14-a6cccfedfca1",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Is the non-constant signature here (and above) avoidable?",
        "createdAt" : "2018-11-24T17:46:21Z",
        "updatedAt" : "2018-11-27T07:08:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "51c4ffcf-944c-4e44-afea-7c94e1501d19",
        "parentId" : "bf1abdd3-570e-4908-ac14-a6cccfedfca1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "OK, now that I read the conversation I see this has been addressed several times.  The only change in the python code is in the tests; what part of the non-cython code is affected by this decision?",
        "createdAt" : "2018-11-24T17:50:58Z",
        "updatedAt" : "2018-11-27T07:08:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a59bf4bc-2a88-4394-8731-942a66c684d5",
        "parentId" : "bf1abdd3-570e-4908-ac14-a6cccfedfca1",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "@jbrockmendel \r\nThe non-constant signature follows `np.unique` and will eventually extend to `pd.unique`, `Series.unique` etc. This PR prepares the cython backend to have the necessary capability. This will i.a. also allow to solve #21720, and work towards #21357 / #22824",
        "createdAt" : "2018-11-25T13:10:51Z",
        "updatedAt" : "2018-11-27T07:08:00Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "00a304d467483135ad2c035d218a562fbdbeecd4",
    "line" : 388,
    "diffHunk" : "@@ -1,1 +809,813 @@        if return_inverse:\n            return uniques.to_array(), np.asarray(labels)\n        return uniques.to_array()\n\n    def unique(self, ndarray[object] values, bint return_inverse=False):"
  },
  {
    "id" : "8d2eb247-1b9e-47b6-8dad-5d0f8f24d722",
    "prId" : 31939,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31939#pullrequestreview-363100904",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a06b085b-df7e-43c5-9400-062db00d661e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actualy you should use missing.pyx / checknull which has all of these conditions already and is our standard",
        "createdAt" : "2020-02-17T16:58:28Z",
        "updatedAt" : "2020-02-23T04:30:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "32809a8e-ae63-49f5-bfa5-8e7620221933",
        "parentId" : "a06b085b-df7e-43c5-9400-062db00d661e",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Ok, I'm assuming we still need the last condition `use_na_value and val == na_value` if somehow  a custom NA value is specified?",
        "createdAt" : "2020-02-17T18:13:18Z",
        "updatedAt" : "2020-02-23T04:30:16Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "051d1e7e-546d-4fd9-9338-75900d2fc3e7",
        "parentId" : "a06b085b-df7e-43c5-9400-062db00d661e",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "It seems that `checknull` misses some things like `decimal.Decimal(\"nan\")` that is caught by this logic:\r\n\r\n```python\r\nIn [7]: val = decimal.Decimal(\"nan\")                                                                                               \r\n\r\nIn [8]: val != val                                                                                                                 \r\nOut[8]: True\r\n\r\nIn [9]: checknull(val)                                                                                                             \r\nOut[9]: False\r\n```",
        "createdAt" : "2020-02-17T19:46:11Z",
        "updatedAt" : "2020-02-23T04:30:16Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "666300f3-4905-4a54-999b-bbd1353c882a",
        "parentId" : "a06b085b-df7e-43c5-9400-062db00d661e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "decimal is not a first class citizen; you can create an issue about this, but tihs is a highly optimized check ",
        "createdAt" : "2020-02-17T20:11:50Z",
        "updatedAt" : "2020-02-23T04:30:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0f9aa1f1-1bf5-4a5b-854d-94870055a840",
        "parentId" : "a06b085b-df7e-43c5-9400-062db00d661e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think that decimal should probably be added to checknull (checknull is already checking a lot of different things, eg also if it is a complex value)\r\n\r\nBut, if we want to start using `checknull` here, then let's only do that for 1.1, not for 1.0.2, as that starts to no longer be \"just\" a bug fix.",
        "createdAt" : "2020-02-18T07:58:53Z",
        "updatedAt" : "2020-02-23T04:30:16Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "eac2817e-9826-4118-a909-7fdacd7f9f34",
        "parentId" : "a06b085b-df7e-43c5-9400-062db00d661e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls open a new issue an PR for this then for 1.1. this code duplication is horrendous. ",
        "createdAt" : "2020-02-18T23:56:45Z",
        "updatedAt" : "2020-02-23T04:30:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "059e9923-ff20-4007-a6ef-c8a71e80f928",
        "parentId" : "a06b085b-df7e-43c5-9400-062db00d661e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there an issue for this?",
        "createdAt" : "2020-02-23T14:56:04Z",
        "updatedAt" : "2020-02-23T14:56:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d50f963ce0153a53b15bb026924db5fb0f756310",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1034,1038 @@            hash(val)\n\n            if ignore_na and (\n                (val is C_NA)\n                or (val != val)"
  },
  {
    "id" : "9763b7ca-9df1-4f5c-89a5-72b8b955a144",
    "prId" : 32163,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32163#pullrequestreview-362964669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19e9616f-8aaa-475f-ba3c-9e554a640658",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "im not sure this is accurate, might be a string dtype?  IIRC this class isnt used",
        "createdAt" : "2020-02-21T22:53:14Z",
        "updatedAt" : "2020-03-19T02:33:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fc220c077605a9cc4942f94902c1f1201cf644c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +194,198 @@        append_data_string(self.data, x)\n\n    cdef extend(self, ndarray[object] x):\n        for i in range(len(x)):\n            self.append(x[i])"
  },
  {
    "id" : "14d52b75-9be9-40c2-9a81-84a58720cfa9",
    "prId" : 32701,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32701#pullrequestreview-378039552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7560215f-6a06-4b28-9d77-48b0b85a703e",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "```suggestion\r\n                    v = get_c_string(repr(val))\r\n```\r\n\r\nShouldn't need this cast",
        "createdAt" : "2020-03-18T23:35:56Z",
        "updatedAt" : "2020-03-18T23:42:25Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "08a0dede-3875-4ed7-bdd2-e7074fd7eeff",
        "parentId" : "7560215f-6a06-4b28-9d77-48b0b85a703e",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "With this change cython gives the following error:\r\n```\r\npandas/_libs/hashtable_class_helper.pxi:1495:41: str objects do not support coercion to unicode, use a unicode string literal instead (u'')\r\n```",
        "createdAt" : "2020-03-19T19:29:38Z",
        "updatedAt" : "2020-03-19T19:30:19Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      },
      {
        "id" : "f17df674-9658-4e93-8315-a6effcc39504",
        "parentId" : "7560215f-6a06-4b28-9d77-48b0b85a703e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm OK pretty strange; not ideal but I suppose can look in a follow up.\r\n\r\nCan you move the location of this code then as requested separately? Want to localize error handling as much as possible\r\n\r\nOutside of that lgtm",
        "createdAt" : "2020-03-19T19:43:57Z",
        "updatedAt" : "2020-03-19T19:43:57Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2593bd2110e073056437406b07dc36034367efd",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +796,800 @@                if v == NULL:\n                    PyErr_Clear()\n                    v = get_c_string(<str>repr(val))\n                vecs[i] = v\n"
  },
  {
    "id" : "241ebf13-d1d7-4847-a9a7-4b3c6ca73819",
    "prId" : 32701,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32701#pullrequestreview-378043682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "522a2acd-1d0d-43e5-b1e8-da016fb323ea",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you place this in `get_c_string_buf_and_size` instead? Should keep error handling tightly coupled with where it would actually occur",
        "createdAt" : "2020-03-18T23:38:17Z",
        "updatedAt" : "2020-03-18T23:42:26Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "fb581a3f-5cdb-4f24-a9da-ab7853d0ee2f",
        "parentId" : "522a2acd-1d0d-43e5-b1e8-da016fb323ea",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "At the `get_c_string()` level the val is cast to `<str>` which I cannot give to `repr()` anymore. I tried and it crashed on me (segfault). ",
        "createdAt" : "2020-03-19T19:45:45Z",
        "updatedAt" : "2020-03-19T19:45:46Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      },
      {
        "id" : "1c02768a-abcf-40b9-9a59-476b2b6ef5b2",
        "parentId" : "522a2acd-1d0d-43e5-b1e8-da016fb323ea",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Ah OK. I see your point here as well",
        "createdAt" : "2020-03-19T19:49:42Z",
        "updatedAt" : "2020-03-19T19:49:42Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2593bd2110e073056437406b07dc36034367efd",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +794,798 @@                # if ignore_na is False, we also stringify NaN/None/etc.\n                v = get_c_string(<str>val)\n                if v == NULL:\n                    PyErr_Clear()\n                    v = get_c_string(<str>repr(val))"
  },
  {
    "id" : "a4ec0c1e-e66b-464d-8e26-da2c5a8d20f7",
    "prId" : 33064,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33064#pullrequestreview-383138348",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "845a5dba-cb26-4438-a339-82c51e1b9302",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "if we're worried about perf for existing cases, could take this check outside of the loop?",
        "createdAt" : "2020-03-27T18:37:05Z",
        "updatedAt" : "2020-05-09T10:54:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2ffc32d9-84fb-44c1-94f2-ccd97918165e",
        "parentId" : "845a5dba-cb26-4438-a339-82c51e1b9302",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We need to check the mask for each value inside the loop, so not sure what can be moved outside?",
        "createdAt" : "2020-03-27T18:40:52Z",
        "updatedAt" : "2020-05-09T10:54:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e2f99541-100b-423f-80c9-ac24395f4848",
        "parentId" : "845a5dba-cb26-4438-a339-82c51e1b9302",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I was referring to the use_mask check; it would basically become a separate loop or even method",
        "createdAt" : "2020-03-27T18:59:21Z",
        "updatedAt" : "2020-05-09T10:54:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "69f45e22-f6c8-434a-a3a5-1076f01f51a5",
        "parentId" : "845a5dba-cb26-4438-a339-82c51e1b9302",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't think duplicating the full loop is worth it (the loop itself is 40 lines below here), given the minor performance impact I showed in the timings.",
        "createdAt" : "2020-03-27T19:19:13Z",
        "updatedAt" : "2020-05-09T10:54:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f7e99419bfddf060f6ffa4c70dc7a7607408026",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +437,441 @@                val = values[i]\n\n                if ignore_na and use_mask:\n                    if mask_values[i]:\n                        labels[i] = na_sentinel"
  },
  {
    "id" : "5e48e505-bbbf-4b85-aaaf-a81c753ffe1e",
    "prId" : 33235,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33235#pullrequestreview-401948496",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6a7c59a-b8e3-4ae0-949e-992c8eb2f1e5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have anything in the test suite that hits this now? (if we do can you add this issue number there)",
        "createdAt" : "2020-04-19T22:18:09Z",
        "updatedAt" : "2020-04-19T22:18:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3f40bacc-50b5-4de2-bdc3-4d57fc39f215",
        "parentId" : "f6a7c59a-b8e3-4ae0-949e-992c8eb2f1e5",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "This issue was triggered by the following test: pandas/tests/frame/test_api.py::test_column_name_contains_unicode_surrogate\r\nWhich was added because of a fix for #25509",
        "createdAt" : "2020-04-28T15:23:23Z",
        "updatedAt" : "2020-04-28T15:23:23Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      }
    ],
    "commit" : "41ad12d6db0b5eb98f1e1f7a4467be87ea40597f",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +792,796 @@                try:\n                    v = get_c_string(<str>val)\n                except UnicodeEncodeError:\n                    v = get_c_string(<str>repr(val))\n                vecs[i] = v"
  }
]