[
  {
    "id" : "8362566c-69e3-4fb4-a2fa-4fce13d81fe5",
    "prId" : 33723,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33723#pullrequestreview-399306619",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72dad16a-f6de-42fd-b779-9534caa022c4",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm don't think a bint can ever return -1. The only thing I think you could except here is NULL but would really have to refactor to do that\r\n\r\nIs there a particular issue you are trying to solve?",
        "createdAt" : "2020-04-22T15:10:26Z",
        "updatedAt" : "2020-04-27T10:56:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "6c403af2-c445-4ccf-bd67-0578f61543ab",
        "parentId" : "72dad16a-f6de-42fd-b779-9534caa022c4",
        "authorId" : "66ec0813-2a08-4d4e-9fe0-ac843fedcd11",
        "body" : "Thanks for reviewing.\r\n\r\nThe ignored exception led to a segfault in https://github.com/rapidsai/cudf that I'm unable to reproduce at the moment since we've since refactored our code a bit -- apologies.\r\n\r\nHowever, we can demonstrate the issue by raising artificially within `c_is_list_like` -- I believe it's valid to assume that Python exceptions can originate from within this function.\r\n\r\n1. Without the `except -1`:\r\n\r\n```cython\r\ncdef inline bint c_is_list_like(object obj, bint allow_sets):\r\n    raise ZeroDivisionError()\r\n    return (\r\n        isinstance(obj, abc.Iterable)\r\n        # we do not count strings/unicode/bytes as list-like\r\n        and not isinstance(obj, (str, bytes))\r\n        # exclude zero-dimensional numpy arrays, effectively scalars\r\n        and not (util.is_array(obj) and obj.ndim == 0)\r\n        # exclude sets if allow_sets is False\r\n        and not (allow_sets is False and isinstance(obj, abc.Set))\r\n    )\r\n```\r\n\r\n\r\n```python\r\n>>> import pandas as pd\r\n>>> pd.api.types.is_list_like([])\r\nZeroDivisionError\r\nException ignored in: 'pandas._libs.lib.c_is_list_like'\r\nZeroDivisionError:\r\nFalse\r\n```\r\n\r\n2. With the `except -1`:\r\n\r\n```cython\r\ncdef inline bint c_is_list_like(object obj, bint allow_sets) except -1:\r\n    raise ZeroDivisionError()\r\n    return (\r\n        isinstance(obj, abc.Iterable)\r\n        # we do not count strings/unicode/bytes as list-like\r\n        and not isinstance(obj, (str, bytes))\r\n        # exclude zero-dimensional numpy arrays, effectively scalars\r\n        and not (util.is_array(obj) and obj.ndim == 0)\r\n        # exclude sets if allow_sets is False\r\n        and not (allow_sets is False and isinstance(obj, abc.Set))\r\n    )\r\n```\r\n\r\n```python\r\n>>> import pandas as pd\r\n>>>pd.api.types.is_list_like([])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"pandas/_libs/lib.pyx\", line 985, in pandas._libs.lib.is_list_like\r\n    return c_is_list_like(obj, allow_sets)\r\n  File \"pandas/_libs/lib.pyx\", line 989, in pandas._libs.lib.c_is_list_like\r\n    raise ZeroDivisionError()\r\nZeroDivisionError\r\n```\r\n\r\n(`-1` seems to be a [valid value](https://github.com/cython/cython/blob/master/tests/run/bint.pyx#L16) for `bint`)",
        "createdAt" : "2020-04-22T15:47:42Z",
        "updatedAt" : "2020-04-27T10:56:34Z",
        "lastEditedBy" : "66ec0813-2a08-4d4e-9fe0-ac843fedcd11",
        "tags" : [
        ]
      },
      {
        "id" : "a58b9e66-c794-4553-bf61-66814ae24acd",
        "parentId" : "72dad16a-f6de-42fd-b779-9534caa022c4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> The ignored exception led to a segfault\r\n\r\nAny idea what value was being passed?  Its hard to imagine what could cause this to raise unless you specifically rigged it to make isinstance checks fail",
        "createdAt" : "2020-04-22T17:16:31Z",
        "updatedAt" : "2020-04-27T10:56:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e5081345-2dd9-4f81-8623-da8d6a1aef5b",
        "parentId" : "72dad16a-f6de-42fd-b779-9534caa022c4",
        "authorId" : "66ec0813-2a08-4d4e-9fe0-ac843fedcd11",
        "body" : "Aha - so after digging up some old code, it looks the source of the problem was a `RecursionError`, which happened to be thrown within `isinstance` here. ",
        "createdAt" : "2020-04-22T19:43:24Z",
        "updatedAt" : "2020-04-27T10:56:34Z",
        "lastEditedBy" : "66ec0813-2a08-4d4e-9fe0-ac843fedcd11",
        "tags" : [
        ]
      },
      {
        "id" : "9c75a11b-39fb-44fb-9dc9-29ae65e0cafc",
        "parentId" : "72dad16a-f6de-42fd-b779-9534caa022c4",
        "authorId" : "66ec0813-2a08-4d4e-9fe0-ac843fedcd11",
        "body" : "Minimal repro (segfaults for me):\r\n\r\n```\r\nIn [1]: import pandas as pd\r\n\r\nIn [2]: def foo():\r\n   ...:     pd.api.types.is_list_like(\"test\")\r\n   ...:     foo()\r\n```",
        "createdAt" : "2020-04-22T19:57:13Z",
        "updatedAt" : "2020-04-27T10:56:34Z",
        "lastEditedBy" : "66ec0813-2a08-4d4e-9fe0-ac843fedcd11",
        "tags" : [
        ]
      },
      {
        "id" : "20f244c2-de5f-4758-bbf6-4681ad515ac4",
        "parentId" : "72dad16a-f6de-42fd-b779-9534caa022c4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "-1 is appropriate here as it signals cython that there *maybe* is an exception to check.",
        "createdAt" : "2020-04-23T17:10:10Z",
        "updatedAt" : "2020-04-27T10:56:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "50812d891e37b0452bff6e2e757e5ce754b420b1",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +-1,3 @@cdef bint c_is_list_like(object, bint) except -1"
  }
]