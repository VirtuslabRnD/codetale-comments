[
  {
    "id" : "51eaa9d3-3386-4d8d-8da1-4c1a287adc26",
    "prId" : 17289,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17289#pullrequestreview-57382264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93f023c2-7a8e-41c1-9e9e-dbfc01d5b15f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so you shouldn't need this here either",
        "createdAt" : "2017-08-19T21:56:55Z",
        "updatedAt" : "2017-08-20T22:25:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "73348d4e-ec35-45e3-9964-db2c2dbc06e8",
        "parentId" : "93f023c2-7a8e-41c1-9e9e-dbfc01d5b15f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Getting rid of it would be great.  Neither @jorisvandenbossche nor I know how to call `obj.total_seconds()` in C, and are not inclined to guess.  If there's a quick answer I'll edit.",
        "createdAt" : "2017-08-19T23:07:59Z",
        "updatedAt" : "2017-08-20T22:25:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8bd5e083-bf20-4654-b292-e95e4d3925c3",
        "parentId" : "93f023c2-7a8e-41c1-9e9e-dbfc01d5b15f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "look in the CPython source code",
        "createdAt" : "2017-08-20T13:44:22Z",
        "updatedAt" : "2017-08-20T22:25:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "78562375-6f3d-4b9c-a5bc-96a8b279419b",
        "parentId" : "93f023c2-7a8e-41c1-9e9e-dbfc01d5b15f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> look in the CPython source code\r\n\r\nMy attempts so far have resulted in test failures and segfaults.  Having me spend more time futzing with C benefits no one.  If you don't like the PR as it is, feel free to close.",
        "createdAt" : "2017-08-20T18:57:30Z",
        "updatedAt" : "2017-08-20T22:25:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "306fed7b-2ba0-4466-8053-37f96abb0f30",
        "parentId" : "93f023c2-7a8e-41c1-9e9e-dbfc01d5b15f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "well this is reducing some code which is nice. but leaving a loose end. If you want to make an issue for this loose end I would accept. (and add a comment in the code as well).",
        "createdAt" : "2017-08-20T19:51:54Z",
        "updatedAt" : "2017-08-20T22:25:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5b38388e-3b62-4218-a9e7-5eb72f2e406c",
        "parentId" : "93f023c2-7a8e-41c1-9e9e-dbfc01d5b15f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There is no public c api for getting total seconds from a timedelta object (only for days, seconds, microseconds -> https://docs.python.org/3.3/c-api/datetime.html#PyDateTime_DELTA_GET_DAYS, which also is only new in python 3). So through the c-api this is not possible.\r\n\r\nBut, I suppose we can just get the python attribute `total_seconds` without using the c-api ? (or is that only possible in cython ?). \r\n@jbrockmendel does `npy_int64 days = get_long_attr(td, \"total_seconds\");` work?\r\n\r\nOtherwise, I would just merge this as it is a net improvement",
        "createdAt" : "2017-08-20T20:02:41Z",
        "updatedAt" : "2017-08-20T22:25:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d7703541-4583-4d89-8733-250d47d44462",
        "parentId" : "93f023c2-7a8e-41c1-9e9e-dbfc01d5b15f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Just pushed a comment suggesting it be removed.\r\n\r\n\r\n> does `npy_int64 days = get_long_attr(td, \"total_seconds\");` work?\r\n\r\n@jorisvandenbossche I didn't try that specifically because `total_seconds` is a nullary method.  What I tried (and failed) was several variants of `PyObject_CallMethod`\r\n",
        "createdAt" : "2017-08-20T20:56:21Z",
        "updatedAt" : "2017-08-20T22:25:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d2c549e0034b6d80f97ada2e0b205d86a414357",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +339,343 @@}\n\nnpy_float64 total_seconds(PyObject *td) {\n  // Python 2.6 compat\n  // TODO(anyone): remove this legacy workaround with a more"
  },
  {
    "id" : "ba6e3a07-2f13-4265-989c-2622e39ae598",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-185401452",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50e7b54b-7924-4ef1-9da5-bcb1a8c1517d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you comment on this? is this an official method we are supporting?",
        "createdAt" : "2018-12-13T00:57:11Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a9bf380d-ccda-4feb-a7c9-e3e4657a7100",
        "parentId" : "50e7b54b-7924-4ef1-9da5-bcb1a8c1517d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'll add comments here and where I define it.\r\n\r\nI don't think it should be part of the interface.\r\n\r\nFWIW, other EA don't have any problem serializing.",
        "createdAt" : "2018-12-13T02:37:31Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b3caf46e-2c3c-447a-8218-c0adf92e12ce",
        "parentId" : "50e7b54b-7924-4ef1-9da5-bcb1a8c1517d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what exactly is the serializing problem? this smells like something more general.",
        "createdAt" : "2018-12-13T12:48:43Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d5b3446c-aba6-4093-840e-e80910380057",
        "parentId" : "50e7b54b-7924-4ef1-9da5-bcb1a8c1517d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah I don't really understand what's going on. Presumably something to do with DatetimeArray not being recognized as a datetlike, so they values date format isn't being applied to its values?",
        "createdAt" : "2018-12-13T12:56:13Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "abdf55c8-1867-4765-a497-6b04ca8257b0",
        "parentId" : "50e7b54b-7924-4ef1-9da5-bcb1a8c1517d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm sounds like a more general  issue. I agree that the ``.to_json()`` needs to coerce, just see below at like 238, maybe just change this to ``.to_numpy()`` and it will just work. This is really smelly and should not be here (``_to_json_values``).",
        "createdAt" : "2018-12-16T20:10:21Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +227,231 @@    PyObject *values = PyObject_GetAttrString(obj, \"values\");\n    PRINTMARK();\n\n    if (values && !PyArray_CheckExact(values)) {\n"
  },
  {
    "id" : "defcc773-355c-495d-b556-9e21af3751b8",
    "prId" : 26222,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26222#pullrequestreview-231373353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25da8936-96f9-4548-9fd2-b4e4a7aa5883",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This was previously a static PyObject, but the CPython guide says you should never declare static PyObjects. Swapped over to PyTypeObject to match semantics of others in the extension:\r\n\r\nhttps://docs.python.org/3/c-api/intro.html#objects-types-and-reference-counts",
        "createdAt" : "2019-04-26T21:50:05Z",
        "updatedAt" : "2019-04-26T21:51:15Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f478f9faea59be468e618bcf3f44f5fe6cd3fea",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +51,55 @@#define NPY_JSON_BUFSIZE 32768\n\nstatic PyTypeObject *type_decimal;\nstatic PyTypeObject *cls_dataframe;\nstatic PyTypeObject *cls_series;"
  },
  {
    "id" : "3f649a98-354a-4477-8654-abb3427e717f",
    "prId" : 27618,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27618#pullrequestreview-272176916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00e265b0-6130-4711-9472-0b70621edbd7",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Comment says it all but this duplicates logic here:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/358107330d6805829d3af8dcdd49f2e828aaa81d/pandas/_libs/src/ujson/python/objToJSON.c#L1837\r\n\r\nI was thinking of aligning in a follow up as there's a lot of things that can be refactored but happy to do here as well",
        "createdAt" : "2019-08-07T19:23:23Z",
        "updatedAt" : "2019-08-23T13:09:36Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "439b69539086fadaa8e4b3e90cc98121ee08e205",
    "line" : 240,
    "diffHunk" : "@@ -1,1 +1691,1695 @@\t  } else {\n\t    npy_int64 value;\n\t    // TODO: refactor to not duplicate what goes on in beginTypeContext\n\t    if (PyObject_HasAttrString(ts, \"value\")) {\n\t      PRINTMARK();"
  },
  {
    "id" : "d27bffb0-fba3-4644-b205-58cfa4fea67b",
    "prId" : 27618,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27618#pullrequestreview-279191598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c55d35c7-dc01-46a4-ae2c-0092fd8cda08",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is this indentation off?",
        "createdAt" : "2019-08-23T17:47:43Z",
        "updatedAt" : "2019-08-23T17:49:37Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ce831538-cce4-4ca2-a242-9176d516a5a9",
        "parentId" : "c55d35c7-dc01-46a4-ae2c-0092fd8cda08",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think just matching the block but generally indentation is off in the C files. We don’t have any linting here so I think a good follow up generally for extension modules. \r\n\r\nWe have cpplint but I don’t think that really covers C code. gnu indent might be worth looking at",
        "createdAt" : "2019-08-23T19:48:17Z",
        "updatedAt" : "2019-08-23T19:48:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "439b69539086fadaa8e4b3e90cc98121ee08e205",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +168,172 @@            (PyTypeObject *)PyObject_GetAttrString(mod_pandas, \"Series\");\n        cls_timestamp = PyObject_GetAttrString(mod_pandas, \"Timestamp\");\n\tcls_timedelta = PyObject_GetAttrString(mod_pandas, \"Timedelta\");\n        Py_DECREF(mod_pandas);\n    }"
  }
]