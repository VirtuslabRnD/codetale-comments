[
  {
    "id" : "51eaa9d3-3386-4d8d-8da1-4c1a287adc26",
    "prId" : 17289,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17289#pullrequestreview-57382264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93f023c2-7a8e-41c1-9e9e-dbfc01d5b15f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so you shouldn't need this here either",
        "createdAt" : "2017-08-19T21:56:55Z",
        "updatedAt" : "2017-08-20T22:25:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "73348d4e-ec35-45e3-9964-db2c2dbc06e8",
        "parentId" : "93f023c2-7a8e-41c1-9e9e-dbfc01d5b15f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Getting rid of it would be great.  Neither @jorisvandenbossche nor I know how to call `obj.total_seconds()` in C, and are not inclined to guess.  If there's a quick answer I'll edit.",
        "createdAt" : "2017-08-19T23:07:59Z",
        "updatedAt" : "2017-08-20T22:25:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8bd5e083-bf20-4654-b292-e95e4d3925c3",
        "parentId" : "93f023c2-7a8e-41c1-9e9e-dbfc01d5b15f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "look in the CPython source code",
        "createdAt" : "2017-08-20T13:44:22Z",
        "updatedAt" : "2017-08-20T22:25:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "78562375-6f3d-4b9c-a5bc-96a8b279419b",
        "parentId" : "93f023c2-7a8e-41c1-9e9e-dbfc01d5b15f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> look in the CPython source code\r\n\r\nMy attempts so far have resulted in test failures and segfaults.  Having me spend more time futzing with C benefits no one.  If you don't like the PR as it is, feel free to close.",
        "createdAt" : "2017-08-20T18:57:30Z",
        "updatedAt" : "2017-08-20T22:25:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "306fed7b-2ba0-4466-8053-37f96abb0f30",
        "parentId" : "93f023c2-7a8e-41c1-9e9e-dbfc01d5b15f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "well this is reducing some code which is nice. but leaving a loose end. If you want to make an issue for this loose end I would accept. (and add a comment in the code as well).",
        "createdAt" : "2017-08-20T19:51:54Z",
        "updatedAt" : "2017-08-20T22:25:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5b38388e-3b62-4218-a9e7-5eb72f2e406c",
        "parentId" : "93f023c2-7a8e-41c1-9e9e-dbfc01d5b15f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There is no public c api for getting total seconds from a timedelta object (only for days, seconds, microseconds -> https://docs.python.org/3.3/c-api/datetime.html#PyDateTime_DELTA_GET_DAYS, which also is only new in python 3). So through the c-api this is not possible.\r\n\r\nBut, I suppose we can just get the python attribute `total_seconds` without using the c-api ? (or is that only possible in cython ?). \r\n@jbrockmendel does `npy_int64 days = get_long_attr(td, \"total_seconds\");` work?\r\n\r\nOtherwise, I would just merge this as it is a net improvement",
        "createdAt" : "2017-08-20T20:02:41Z",
        "updatedAt" : "2017-08-20T22:25:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d7703541-4583-4d89-8733-250d47d44462",
        "parentId" : "93f023c2-7a8e-41c1-9e9e-dbfc01d5b15f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Just pushed a comment suggesting it be removed.\r\n\r\n\r\n> does `npy_int64 days = get_long_attr(td, \"total_seconds\");` work?\r\n\r\n@jorisvandenbossche I didn't try that specifically because `total_seconds` is a nullary method.  What I tried (and failed) was several variants of `PyObject_CallMethod`\r\n",
        "createdAt" : "2017-08-20T20:56:21Z",
        "updatedAt" : "2017-08-20T22:25:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d2c549e0034b6d80f97ada2e0b205d86a414357",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +339,343 @@}\n\nnpy_float64 total_seconds(PyObject *td) {\n  // Python 2.6 compat\n  // TODO(anyone): remove this legacy workaround with a more"
  },
  {
    "id" : "ba6e3a07-2f13-4265-989c-2622e39ae598",
    "prId" : 24024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24024#pullrequestreview-185401452",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50e7b54b-7924-4ef1-9da5-bcb1a8c1517d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you comment on this? is this an official method we are supporting?",
        "createdAt" : "2018-12-13T00:57:11Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a9bf380d-ccda-4feb-a7c9-e3e4657a7100",
        "parentId" : "50e7b54b-7924-4ef1-9da5-bcb1a8c1517d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'll add comments here and where I define it.\r\n\r\nI don't think it should be part of the interface.\r\n\r\nFWIW, other EA don't have any problem serializing.",
        "createdAt" : "2018-12-13T02:37:31Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b3caf46e-2c3c-447a-8218-c0adf92e12ce",
        "parentId" : "50e7b54b-7924-4ef1-9da5-bcb1a8c1517d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what exactly is the serializing problem? this smells like something more general.",
        "createdAt" : "2018-12-13T12:48:43Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d5b3446c-aba6-4093-840e-e80910380057",
        "parentId" : "50e7b54b-7924-4ef1-9da5-bcb1a8c1517d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah I don't really understand what's going on. Presumably something to do with DatetimeArray not being recognized as a datetlike, so they values date format isn't being applied to its values?",
        "createdAt" : "2018-12-13T12:56:13Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "abdf55c8-1867-4765-a497-6b04ca8257b0",
        "parentId" : "50e7b54b-7924-4ef1-9da5-bcb1a8c1517d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm sounds like a more general  issue. I agree that the ``.to_json()`` needs to coerce, just see below at like 238, maybe just change this to ``.to_numpy()`` and it will just work. This is really smelly and should not be here (``_to_json_values``).",
        "createdAt" : "2018-12-16T20:10:21Z",
        "updatedAt" : "2019-01-02T16:41:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2436214219fc116239640889715c9bc6575f571b",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +227,231 @@    PyObject *values = PyObject_GetAttrString(obj, \"values\");\n    PRINTMARK();\n\n    if (values && !PyArray_CheckExact(values)) {\n"
  },
  {
    "id" : "defcc773-355c-495d-b556-9e21af3751b8",
    "prId" : 26222,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26222#pullrequestreview-231373353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25da8936-96f9-4548-9fd2-b4e4a7aa5883",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This was previously a static PyObject, but the CPython guide says you should never declare static PyObjects. Swapped over to PyTypeObject to match semantics of others in the extension:\r\n\r\nhttps://docs.python.org/3/c-api/intro.html#objects-types-and-reference-counts",
        "createdAt" : "2019-04-26T21:50:05Z",
        "updatedAt" : "2019-04-26T21:51:15Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f478f9faea59be468e618bcf3f44f5fe6cd3fea",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +51,55 @@#define NPY_JSON_BUFSIZE 32768\n\nstatic PyTypeObject *type_decimal;\nstatic PyTypeObject *cls_dataframe;\nstatic PyTypeObject *cls_series;"
  },
  {
    "id" : "3f649a98-354a-4477-8654-abb3427e717f",
    "prId" : 27618,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27618#pullrequestreview-272176916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00e265b0-6130-4711-9472-0b70621edbd7",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Comment says it all but this duplicates logic here:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/358107330d6805829d3af8dcdd49f2e828aaa81d/pandas/_libs/src/ujson/python/objToJSON.c#L1837\r\n\r\nI was thinking of aligning in a follow up as there's a lot of things that can be refactored but happy to do here as well",
        "createdAt" : "2019-08-07T19:23:23Z",
        "updatedAt" : "2019-08-23T13:09:36Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "439b69539086fadaa8e4b3e90cc98121ee08e205",
    "line" : 240,
    "diffHunk" : "@@ -1,1 +1691,1695 @@\t  } else {\n\t    npy_int64 value;\n\t    // TODO: refactor to not duplicate what goes on in beginTypeContext\n\t    if (PyObject_HasAttrString(ts, \"value\")) {\n\t      PRINTMARK();"
  },
  {
    "id" : "d27bffb0-fba3-4644-b205-58cfa4fea67b",
    "prId" : 27618,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27618#pullrequestreview-279191598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c55d35c7-dc01-46a4-ae2c-0092fd8cda08",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is this indentation off?",
        "createdAt" : "2019-08-23T17:47:43Z",
        "updatedAt" : "2019-08-23T17:49:37Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ce831538-cce4-4ca2-a242-9176d516a5a9",
        "parentId" : "c55d35c7-dc01-46a4-ae2c-0092fd8cda08",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think just matching the block but generally indentation is off in the C files. We don’t have any linting here so I think a good follow up generally for extension modules. \r\n\r\nWe have cpplint but I don’t think that really covers C code. gnu indent might be worth looking at",
        "createdAt" : "2019-08-23T19:48:17Z",
        "updatedAt" : "2019-08-23T19:48:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "439b69539086fadaa8e4b3e90cc98121ee08e205",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +168,172 @@            (PyTypeObject *)PyObject_GetAttrString(mod_pandas, \"Series\");\n        cls_timestamp = PyObject_GetAttrString(mod_pandas, \"Timestamp\");\n\tcls_timedelta = PyObject_GetAttrString(mod_pandas, \"Timedelta\");\n        Py_DECREF(mod_pandas);\n    }"
  },
  {
    "id" : "5b8fe939-b049-4dac-9d07-879e19ba65de",
    "prId" : 28144,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28144#pullrequestreview-279635921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebc86ba0-9dcb-414f-8971-af126e1663a4",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "will it complain if an extra indentation goes in here?",
        "createdAt" : "2019-08-26T14:43:13Z",
        "updatedAt" : "2019-08-26T14:43:14Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "19a924fb-a1f3-46cd-a5b9-20d7d67c0554",
        "parentId" : "ebc86ba0-9dcb-414f-8971-af126e1663a4",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Would have to set up a CI rule but clang-format works in the same way as black. It's very opinionated and reformats things for you, so if you tried to add an extra indent and ran the tool it would dedent",
        "createdAt" : "2019-08-26T14:45:11Z",
        "updatedAt" : "2019-08-26T14:45:32Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "77fbf72e58470a4b6a6151f65ac725c0c0227d17",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +242,246 @@\n        if (!is_sparse_array(values) &&\n            PyObject_HasAttrString(values, \"values\")) {\n            PyObject *subvals = get_values(values);\n            PyErr_Clear();"
  },
  {
    "id" : "58efacb3-9ac4-4cec-9808-7a7da09570ec",
    "prId" : 30283,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30283#pullrequestreview-332811044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ad65b60-2c00-4813-881f-d8f1de11ed89",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "how would we get here?  if `len == 0`?",
        "createdAt" : "2019-12-16T18:54:19Z",
        "updatedAt" : "2019-12-18T18:38:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b9bf2e8e-e6d5-40fb-96fe-83df66b86e2c",
        "parentId" : "1ad65b60-2c00-4813-881f-d8f1de11ed89",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This would happen if malloc fails\r\n\r\nhttps://stackoverflow.com/a/12434865/621736",
        "createdAt" : "2019-12-16T19:02:13Z",
        "updatedAt" : "2019-12-18T18:38:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e6d55ba9-aefc-4dbd-8354-7a47d527bb4c",
        "parentId" : "1ad65b60-2c00-4813-881f-d8f1de11ed89",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "So failing to address it would mean getting something like a segfault?  the PyErr_NoMemory just below raises back in py-space?",
        "createdAt" : "2019-12-16T19:24:04Z",
        "updatedAt" : "2019-12-18T18:38:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "682e01af-f5ea-4457-9552-0f976052633c",
        "parentId" : "1ad65b60-2c00-4813-881f-d8f1de11ed89",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think it would segfault if you tried to access the memory if malloc failed to allocate it. `PyErr_NoMemory` would just set the global error indicator so when the extension exits that should raise back in the Python space (assuming nothing else clears it out)\r\n\r\nFWIW the error handling here is copy / paste from here:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/98cb43267eec34203e2a169cbf7c79bed7e9a9c3/pandas/_libs/src/ujson/python/objToJSON.c#L422\r\n\r\nThere are similar checks elsewhere throughout the module (not always consistent) so maybe worth unifying in a follow up",
        "createdAt" : "2019-12-16T19:29:33Z",
        "updatedAt" : "2019-12-18T18:38:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09b00fdb54684aa520e3657a7463871bccc98686",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +419,423 @@    char *result = PyObject_Malloc(*len);\n\n    if (result == NULL) {\n        PyErr_NoMemory();\n        ((JSONObjectEncoder *)tc->encoder)->errorMsg = \"\";"
  },
  {
    "id" : "8d5132c7-b194-40a3-b912-20f0ae7a9cb4",
    "prId" : 30283,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30283#pullrequestreview-332794511",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b25c0f7-9feb-407c-9720-15c8fc599485",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "typing `obj` as `Py_DateTime` an option?",
        "createdAt" : "2019-12-16T18:56:02Z",
        "updatedAt" : "2019-12-18T18:38:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8887991f-c4a3-4361-b208-fb1f34df2739",
        "parentId" : "1b25c0f7-9feb-407c-9720-15c8fc599485",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Maybe possible but would need more work to prevent extra compiler warnings, since all of the other callbacks use JSOBJ for the first argument",
        "createdAt" : "2019-12-16T19:03:36Z",
        "updatedAt" : "2019-12-18T18:38:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "09b00fdb54684aa520e3657a7463871bccc98686",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +449,453 @@\n    if (!PyDateTime_Check(obj)) {\n        // TODO: raise TypeError\n    }\n"
  },
  {
    "id" : "3a6fbf10-a6fe-43ce-b4d3-978a66344446",
    "prId" : 30283,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30283#pullrequestreview-335585078",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d4d1ef5-a6c0-4b25-b65f-82bde2f57002",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "as long as the obj is a valid pydatetime and no tzinfo, i dont think this should ever be reached, is it?",
        "createdAt" : "2019-12-16T18:57:16Z",
        "updatedAt" : "2019-12-18T18:38:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d54fadbf-b419-4833-ade3-f0f0e773c7aa",
        "parentId" : "3d4d1ef5-a6c0-4b25-b65f-82bde2f57002",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Probably not in current state but I think generally with C should always be checking return code of these functions and raising if something goes wrong. ",
        "createdAt" : "2019-12-16T19:04:46Z",
        "updatedAt" : "2019-12-18T18:38:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "2c7ae066-705c-4fd4-9a85-0cdb420e2566",
        "parentId" : "3d4d1ef5-a6c0-4b25-b65f-82bde2f57002",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "fair enough.  i think in the np_datetime code i went in the other direction in an attempt to make it less verbose",
        "createdAt" : "2019-12-21T02:46:51Z",
        "updatedAt" : "2019-12-21T02:46:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "09b00fdb54684aa520e3657a7463871bccc98686",
    "line" : 182,
    "diffHunk" : "@@ -1,1 +497,501 @@                            \"Could not convert PyDateTime to numpy datetime\");\n        }\n        // TODO: is setting errMsg required?\n        //((JSONObjectEncoder *)tc->encoder)->errorMsg = \"\";\n        // return NULL;"
  },
  {
    "id" : "926aebba-c4d8-48da-8de3-b19efc2791c0",
    "prId" : 30283,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30283#pullrequestreview-335585052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12c1733f-c4df-4ea3-a91a-3d7cfd704a7a",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "PyUnicode_AsUTF8AndSize came up in the thread about unicode surrogates.  do we need to worry about those here?",
        "createdAt" : "2019-12-18T20:49:32Z",
        "updatedAt" : "2019-12-18T20:49:33Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "00a18610-263c-4d1f-89e8-792d647d1b9f",
        "parentId" : "12c1733f-c4df-4ea3-a91a-3d7cfd704a7a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@WillAyd i think this is the same function where passing a surrogate unicode character can cause a segfault.  can that be ruled out here?",
        "createdAt" : "2019-12-21T02:46:08Z",
        "updatedAt" : "2019-12-21T02:46:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "09b00fdb54684aa520e3657a7463871bccc98686",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +404,408 @@\nstatic char *PyUnicodeToUTF8(JSOBJ _obj, JSONTypeContext *tc, size_t *_outLen) {\n    return (char *)PyUnicode_AsUTF8AndSize(_obj, (Py_ssize_t *)_outLen);\n}\n"
  },
  {
    "id" : "45150f4e-95a4-44a7-80c2-205f09046586",
    "prId" : 30496,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30496#pullrequestreview-336869308",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0b4f250-6d4a-4685-a82b-e2af047784f0",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "In another follow up I think I'll move the conversion routines to another file and keep only the core JSON serialization functionality within this ones; makes it a little easier to grok the difference between functions used as callbacks and those used to convert values into various formats",
        "createdAt" : "2019-12-27T20:58:47Z",
        "updatedAt" : "2020-01-02T00:00:33Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "532bbc253c481483a82f04485529c7af9afabf2b",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +481,485 @@\n/* JSON callback */\nstatic char *PyDateTimeToIsoCallback(JSOBJ obj, JSONTypeContext *tc,\n                                     size_t *len) {\n"
  },
  {
    "id" : "baeb126b-b3a9-476b-8fe9-d494063a5ebb",
    "prId" : 30496,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30496#pullrequestreview-337510110",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b967aa1a-1d04-485a-bebd-e39c02d1aaa8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do you need a Py_DECREF anywhere here?",
        "createdAt" : "2020-01-01T03:24:01Z",
        "updatedAt" : "2020-01-02T00:00:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "06539190-758e-4735-8359-24c8761c82cc",
        "parentId" : "b967aa1a-1d04-485a-bebd-e39c02d1aaa8",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Don't think so - here's a snippet in NumPy where there is no DECREF\r\n\r\nhttps://github.com/numpy/numpy/blob/5ce770ae3de63861c768229573397cadd052f712/numpy/core/src/multiarray/scalarapi.c#L212\r\n\r\nAnd testing locally did segfault when trying",
        "createdAt" : "2020-01-01T23:48:46Z",
        "updatedAt" : "2020-01-02T00:00:33Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "532bbc253c481483a82f04485529c7af9afabf2b",
    "line" : 162,
    "diffHunk" : "@@ -1,1 +1602,1606 @@                             enc->npyType);\n            }\n            castfunc(dataptr, &longVal, 1, NULL, NULL);\n            if (enc->datetimeIso) {\n                cLabel = int64ToIso(longVal, base, &len);"
  },
  {
    "id" : "e55d4349-a27c-43e3-bb91-28cd641c45d9",
    "prId" : 30977,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30977#pullrequestreview-343430282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28d58a69-4969-431a-ae2d-747a5a920ee3",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This was a memory leak before; new structure makes it easier to clean this up",
        "createdAt" : "2020-01-15T18:30:07Z",
        "updatedAt" : "2020-01-15T18:30:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c102f5b9ed5913af9f4cceed3c216dca2a8d1993",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +1642,1646 @@        memcpy(ret[i], cLabel, len + 1);\n\n        if (is_datetimelike) {\n            PyObject_Free(cLabel);\n        }"
  },
  {
    "id" : "87d330f4-ac5c-4606-9e72-8ab0fc06aae7",
    "prId" : 30977,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30977#pullrequestreview-343430282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d90d6b5b-dd51-4122-95bd-c1064ce6101a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This entire timedelta block was mostly copy / paste with a few changes at the end to fit the memory assumptions; this will be blown away by #30903 ",
        "createdAt" : "2020-01-15T18:30:42Z",
        "updatedAt" : "2020-01-15T18:30:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c102f5b9ed5913af9f4cceed3c216dca2a8d1993",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +1578,1582 @@                if (enc->datetimeIso) {\n                    // TODO: Vectorized Timedelta function\n                    if ((type_num == NPY_TIMEDELTA) || (PyDelta_Check(item))) {\n                        PyObject *td =\n                            PyObject_CallFunction(cls_timedelta, \"(O)\", item);"
  },
  {
    "id" : "6baf2177-3679-4a37-8cdc-3447ae719501",
    "prId" : 32754,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32754#pullrequestreview-375635084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c71f871b-df54-4352-91f6-30f0aac94755",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I guess will see on test cases, but is this really required? AFAICT on master `_internal_get_values` and `values` return the same for a dt64tz array:\r\n\r\n```python\r\n>>> dts = pd.date_range(start=\"2020-01-01\", freq=\"D\", periods=3, tz=\"US/Pacific\")\r\n>>> dts._internal_get_values()\r\narray(['2020-01-01T08:00:00.000000000', '2020-01-02T08:00:00.000000000',\r\n       '2020-01-03T08:00:00.000000000'], dtype='datetime64[ns]')\r\n>>> dts.values\r\narray(['2020-01-01T08:00:00.000000000', '2020-01-02T08:00:00.000000000',\r\n       '2020-01-03T08:00:00.000000000'], dtype='datetime64[ns]')\r\n```",
        "createdAt" : "2020-03-16T22:50:41Z",
        "updatedAt" : "2020-03-16T22:50:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "28fecdad-aadd-4d16-9115-0860a98813ec",
        "parentId" : "c71f871b-df54-4352-91f6-30f0aac94755",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "its Categorical[dt64tz] and Sparse that make the extra `__array__` call necessary",
        "createdAt" : "2020-03-16T22:53:25Z",
        "updatedAt" : "2020-03-16T22:53:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc18c812f6da9576803b7bbbc115c63730d239c0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +223,227 @@    PRINTMARK();\n\n    if (PyObject_TypeCheck(obj, cls_index) || PyObject_TypeCheck(obj, cls_series)) {\n        // The special cases to worry about are dt64tz and category[dt64tz].\n        //  In both cases we want the UTC-localized datetime64 ndarray,"
  },
  {
    "id" : "34206e62-836d-45d9-a059-85bd8ed07655",
    "prId" : 34473,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34473#pullrequestreview-425853114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "118754ba-6888-4a0b-87a1-5cea31031d69",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "So to manage the state properly you should allocate storage for bytes and memcpy whatever PyUnicode_AsUTF8AndSize returns to it. You will need to then free that memory in the callback function for ObjectEnd",
        "createdAt" : "2020-06-07T21:06:19Z",
        "updatedAt" : "2020-06-24T21:12:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c96ae4b63b7df7833a2fa8cbdb84c92a4b969bc",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +2137,2141 @@    char* bytes = PyObject_Malloc(*_outLen + 1);\n    memcpy(bytes, str, *_outLen + 1);\n    GET_TC(tc)->cStr = bytes;\n\n    Py_DECREF(repr);"
  },
  {
    "id" : "426c71c7-cbfb-4019-9a04-f4713f9dabd0",
    "prId" : 34473,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34473#pullrequestreview-433748350",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28504a9b-7dca-40ff-9a5c-4fab8b064906",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think we do need to add a `PyErr_Clear();` within this branch to prevent this from incorrectly propogating an OverflowError (sorry think I mistakenly asked you to remove before)",
        "createdAt" : "2020-06-18T18:55:13Z",
        "updatedAt" : "2020-06-24T21:12:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "6febb2c9-0c7b-430e-8989-d07e45ebdded",
        "parentId" : "28504a9b-7dca-40ff-9a5c-4fab8b064906",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "I think that - if I understand the docstring correctly - `PyLong_AsLongLongAndOverflow` doesn't raise an OverflowError (but will raise an error if there's a problem other than Overflow)\r\n\r\nOne thing I know is this runs ok (including tests) without the `PyErr_Clear()` though I guess it doesn't hurt to add that in?",
        "createdAt" : "2020-06-19T01:21:25Z",
        "updatedAt" : "2020-06-24T21:12:46Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      },
      {
        "id" : "789c6260-471d-432f-9262-589268b6a362",
        "parentId" : "28504a9b-7dca-40ff-9a5c-4fab8b064906",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea I think you are right. Let’s keep this as is",
        "createdAt" : "2020-06-19T01:34:14Z",
        "updatedAt" : "2020-06-24T21:12:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c96ae4b63b7df7833a2fa8cbdb84c92a4b969bc",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1636,1640 @@\n        if (overflow){\n            PRINTMARK();\n            tc->type = JT_BIGNUM;\n        }"
  },
  {
    "id" : "4b7dc39f-00ee-481f-841f-adc1581547b6",
    "prId" : 34473,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34473#pullrequestreview-433807027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7433d10c-10a9-45f8-aec6-a0a27d273518",
        "parentId" : null,
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "@WillAyd This looks like it frees up `cStr`",
        "createdAt" : "2020-06-19T04:12:51Z",
        "updatedAt" : "2020-06-24T21:12:46Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      },
      {
        "id" : "c05f496c-25ba-462a-a71d-4d7894608264",
        "parentId" : "7433d10c-10a9-45f8-aec6-a0a27d273518",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I don't think that is getting hit here. If it would then you would be double freeing those bytes and get a segfault anyway",
        "createdAt" : "2020-06-19T04:30:12Z",
        "updatedAt" : "2020-06-24T21:12:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ef4be632-a943-4345-a865-ba36ed1f952c",
        "parentId" : "7433d10c-10a9-45f8-aec6-a0a27d273518",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "Sorry I meant \r\n``` C\r\nPyObject_Free(GET_TC(tc)->cStr);\r\n```\r\nI think `Object_endTypeContext` gets executed in \r\nhttps://github.com/pandas-dev/pandas/blob/e6e08890cc8bd1b162b920cf5a526a433bab8b30/pandas/_libs/src/ujson/lib/ultrajsonenc.c#L1112",
        "createdAt" : "2020-06-19T04:37:50Z",
        "updatedAt" : "2020-06-24T21:12:46Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      },
      {
        "id" : "231995b6-8cb8-45b0-aa62-6b03c238604d",
        "parentId" : "7433d10c-10a9-45f8-aec6-a0a27d273518",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you check that the free on cStr gets hit there? If so then good to go",
        "createdAt" : "2020-06-19T05:11:10Z",
        "updatedAt" : "2020-06-24T21:12:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b40752b3-26db-4de8-8207-eaf050af02f6",
        "parentId" : "7433d10c-10a9-45f8-aec6-a0a27d273518",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "Checked just now - it does!",
        "createdAt" : "2020-06-19T05:15:07Z",
        "updatedAt" : "2020-06-24T21:12:46Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c96ae4b63b7df7833a2fa8cbdb84c92a4b969bc",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +2111,2115 @@                          GET_TC(tc)->columnLabelsLen);\n        GET_TC(tc)->columnLabels = NULL;\n        PyObject_Free(GET_TC(tc)->cStr);\n        GET_TC(tc)->cStr = NULL;\n        PyObject_Free(tc->prv);"
  },
  {
    "id" : "b03fb215-4aaa-4c5b-8c24-c179ca790ac4",
    "prId" : 34473,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34473#pullrequestreview-434140777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6b2e50a-5d3d-4ed9-b101-b26de2f7c7c8",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "this too",
        "createdAt" : "2020-06-19T14:54:51Z",
        "updatedAt" : "2020-06-24T21:12:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c96ae4b63b7df7833a2fa8cbdb84c92a4b969bc",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1643,1647 @@            goto INVALID;\n        }\n        \n        return;\n    } else if (PyFloat_Check(obj)) {"
  },
  {
    "id" : "19b09a29-8ca4-448a-9fa5-1f15d4c96a88",
    "prId" : 35064,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35064#pullrequestreview-440317891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7d6e74f-ad8f-456c-9f55-add8f8be7517",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "nice cleanup",
        "createdAt" : "2020-06-30T19:09:47Z",
        "updatedAt" : "2020-06-30T21:06:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "985e758c-aa9f-4279-b6a7-543ca52d3361",
        "parentId" : "d7d6e74f-ad8f-456c-9f55-add8f8be7517",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "The type hints in internals were very helpful to notice this, so thank you for the work you've been doing there ",
        "createdAt" : "2020-06-30T19:23:13Z",
        "updatedAt" : "2020-06-30T21:06:28Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "57d3735b4258b844bb62faa5c327489e8664280c",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +753,757 @@\n    for (i = 0; i < PyObject_Length(blocks); i++) {\n        block = PyTuple_GET_ITEM(blocks, i);\n        if (!block) {\n            GET_TC(tc)->iterNext = NpyArr_iterNextNone;"
  }
]