[
  {
    "id" : "acd03550-9679-449c-8221-837619b11a7b",
    "prId" : 23527,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23527#pullrequestreview-173725334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22a5989e-2091-4ea1-b9b2-16471af01bbb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here ",
        "createdAt" : "2018-11-11T16:15:52Z",
        "updatedAt" : "2018-11-12T00:46:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "44474166-eea3-47c1-a85d-8bffeaa39ba5",
        "parentId" : "22a5989e-2091-4ea1-b9b2-16471af01bbb",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yep, done.",
        "createdAt" : "2018-11-12T00:46:52Z",
        "updatedAt" : "2018-11-12T00:46:52Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "17f7822402f9ff45be0d797b712e8da390700925",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +1257,1261 @@\n    int64_t i;\n\n    /**\n     * Before we free up space and trim, we should"
  },
  {
    "id" : "8641bdb2-6739-4e4d-9a2c-f81d83c19094",
    "prId" : 23527,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23527#pullrequestreview-173725349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a72ca698-723f-4609-b61f-5917bc42301a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here",
        "createdAt" : "2018-11-11T16:15:58Z",
        "updatedAt" : "2018-11-12T00:46:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4ceba583-d829-462b-8f83-e97ab59abd6d",
        "parentId" : "a72ca698-723f-4609-b61f-5917bc42301a",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yep, done.",
        "createdAt" : "2018-11-12T00:47:00Z",
        "updatedAt" : "2018-11-12T00:47:00Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "17f7822402f9ff45be0d797b712e8da390700925",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +289,293 @@\n    cap = self->words_cap;\n\n    /**\n     * If we are reading in chunks, we need to be aware of the maximum number"
  },
  {
    "id" : "78772a35-91d1-4515-9954-7dc6cc5fa297",
    "prId" : 27157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27157#pullrequestreview-256424840",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71039ddf-ee7f-47ed-9d51-b5264e210661",
        "parentId" : null,
        "authorId" : null,
        "body" : "1. https://stackoverflow.com/a/56782476\r\n2. cpplint complains about using bare strcpy. \r\n\r\nsnprintf is fine with both.",
        "createdAt" : "2019-07-01T15:53:35Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "d8f3fa5b997ea78ff33e93a7f711cc5759cd0ce3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +425,429 @@    if (self->warn_msg == NULL) {\n        self->warn_msg = (char *)malloc(length + 1);\n        snprintf(self->warn_msg, length + 1, \"%s\", msg);\n    } else {\n        ex_length = strlen(self->warn_msg);"
  },
  {
    "id" : "a66081d4-295f-4241-a9c0-a17e93c167a5",
    "prId" : 27157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27157#pullrequestreview-256561892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b96bd331-2d89-4f9b-8f6c-633897bc4f72",
        "parentId" : null,
        "authorId" : null,
        "body" : "awkward code. Py_HUGE_VAL is a float and is used as an error code with  an implicit cast. made it explicit to silence the warning.",
        "createdAt" : "2019-07-01T15:54:20Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "7d56d5aa-1e8c-430a-b36e-7be0e799e8f4",
        "parentId" : "b96bd331-2d89-4f9b-8f6c-633897bc4f72",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Good find. Does the caller even use this?",
        "createdAt" : "2019-07-01T16:29:39Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "5cdb065d-0d0c-4176-9c7f-09542475c3a4",
        "parentId" : "b96bd331-2d89-4f9b-8f6c-633897bc4f72",
        "authorId" : null,
        "body" : "DIdn't check. Probably err !=0 at least.",
        "createdAt" : "2019-07-01T16:56:33Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "b661e66c-ba6f-45d5-aebc-5439a9b0a982",
        "parentId" : "b96bd331-2d89-4f9b-8f6c-633897bc4f72",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "No worries. Makes sense to suppress build warning though as you can tell there are a lot of opportunities to really clean some of this up. If you say any can certainly push PRs\r\n\r\nResolving this one for now",
        "createdAt" : "2019-07-01T17:17:11Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d40f4ced-07c5-4551-8d75-053319cd666c",
        "parentId" : "b96bd331-2d89-4f9b-8f6c-633897bc4f72",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@pilkibun this part of the code gets less maintenance attention than other parts; is likely to have developed unused/unreachable branches.  Any of those you can identify and remove (separate PR(s)) will be welcome.",
        "createdAt" : "2019-07-01T20:10:12Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "72173c4c-8998-42e0-90cd-1678110c2234",
        "parentId" : "b96bd331-2d89-4f9b-8f6c-633897bc4f72",
        "authorId" : null,
        "body" : "i ph33r the parser code.",
        "createdAt" : "2019-07-01T21:06:24Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "d8f3fa5b997ea78ff33e93a7f711cc5759cd0ce3",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1817,1821 @@    if (maybe_int != NULL) *maybe_int = 0;\n    if (PyErr_Occurred() != NULL) *error = -1;\n    else if (r == Py_HUGE_VAL) *error = (int)Py_HUGE_VAL;\n    PyErr_Clear();\n    return r;"
  },
  {
    "id" : "298d3b30-7869-4286-8ec5-1c1f3209dcad",
    "prId" : 27157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27157#pullrequestreview-256531970",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5a9360c-f6fc-4db7-bd06-b04d8dd799f9",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This doesn't introduce any new warnings right? Implicitly casting size_t to int?",
        "createdAt" : "2019-07-01T19:17:01Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "7822c9bc-da18-47a9-8f7b-d3a3062e4285",
        "parentId" : "a5a9360c-f6fc-4db7-bd06-b04d8dd799f9",
        "authorId" : null,
        "body" : "checked now, looks ok. anyway the original line's RHS looks like it was size_t as well, no?",
        "createdAt" : "2019-07-01T19:56:35Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "d8f3fa5b997ea78ff33e93a7f711cc5759cd0ce3",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1435,1439 @@    int i, status = 0;\n    size_t length0 = (strlen(item) + 1);\n    int bufsize = length0;\n\n    static const char *tstrs[1] = {\"TRUE\"};"
  },
  {
    "id" : "f40b77d9-9a77-4265-b040-d2998a672fbb",
    "prId" : 27157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27157#pullrequestreview-256570954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a409b8cb-9325-4bbb-9239-8f6131e0cf55",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "For my own edification: is there any potential performance difference here?",
        "createdAt" : "2019-07-01T20:07:27Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9581aa5c-9ada-40fd-acdb-da57a4aa685d",
        "parentId" : "a409b8cb-9325-4bbb-9239-8f6131e0cf55",
        "authorId" : null,
        "body" : "potential? sure. effect size? not sure.  I'm not about to benchmark snprintf vs. strcpy for this silliness.\r\nafaict, these are our choices:\r\n\r\n- strncpy causes compiler warning, because this is not how it's meant to be used\r\n- strcpy is flagged by cpplint, and there's no per-line ignore mechanism afaict. can disable printf checking for the whole file using a CPPLINT.cfg file.\r\n- snprintf involves some overhead. at least \"parsing\" \"%s\", some input validation and an additional function call to strcpy. call it a few us per call.\r\n ",
        "createdAt" : "2019-07-01T21:29:17Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "d8f3fa5b997ea78ff33e93a7f711cc5759cd0ce3",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1441,1445 @@\n    tmp = malloc(bufsize);\n    snprintf(tmp,  length0, \"%s\", item);\n    uppercase(tmp);\n"
  }
]