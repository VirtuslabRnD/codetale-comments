[
  {
    "id" : "acd03550-9679-449c-8221-837619b11a7b",
    "prId" : 23527,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23527#pullrequestreview-173725334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22a5989e-2091-4ea1-b9b2-16471af01bbb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here ",
        "createdAt" : "2018-11-11T16:15:52Z",
        "updatedAt" : "2018-11-12T00:46:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "44474166-eea3-47c1-a85d-8bffeaa39ba5",
        "parentId" : "22a5989e-2091-4ea1-b9b2-16471af01bbb",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yep, done.",
        "createdAt" : "2018-11-12T00:46:52Z",
        "updatedAt" : "2018-11-12T00:46:52Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "17f7822402f9ff45be0d797b712e8da390700925",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +1257,1261 @@\n    int64_t i;\n\n    /**\n     * Before we free up space and trim, we should"
  },
  {
    "id" : "8641bdb2-6739-4e4d-9a2c-f81d83c19094",
    "prId" : 23527,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23527#pullrequestreview-173725349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a72ca698-723f-4609-b61f-5917bc42301a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here",
        "createdAt" : "2018-11-11T16:15:58Z",
        "updatedAt" : "2018-11-12T00:46:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4ceba583-d829-462b-8f83-e97ab59abd6d",
        "parentId" : "a72ca698-723f-4609-b61f-5917bc42301a",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yep, done.",
        "createdAt" : "2018-11-12T00:47:00Z",
        "updatedAt" : "2018-11-12T00:47:00Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "17f7822402f9ff45be0d797b712e8da390700925",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +289,293 @@\n    cap = self->words_cap;\n\n    /**\n     * If we are reading in chunks, we need to be aware of the maximum number"
  },
  {
    "id" : "78772a35-91d1-4515-9954-7dc6cc5fa297",
    "prId" : 27157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27157#pullrequestreview-256424840",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71039ddf-ee7f-47ed-9d51-b5264e210661",
        "parentId" : null,
        "authorId" : null,
        "body" : "1. https://stackoverflow.com/a/56782476\r\n2. cpplint complains about using bare strcpy. \r\n\r\nsnprintf is fine with both.",
        "createdAt" : "2019-07-01T15:53:35Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "d8f3fa5b997ea78ff33e93a7f711cc5759cd0ce3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +425,429 @@    if (self->warn_msg == NULL) {\n        self->warn_msg = (char *)malloc(length + 1);\n        snprintf(self->warn_msg, length + 1, \"%s\", msg);\n    } else {\n        ex_length = strlen(self->warn_msg);"
  },
  {
    "id" : "a66081d4-295f-4241-a9c0-a17e93c167a5",
    "prId" : 27157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27157#pullrequestreview-256561892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b96bd331-2d89-4f9b-8f6c-633897bc4f72",
        "parentId" : null,
        "authorId" : null,
        "body" : "awkward code. Py_HUGE_VAL is a float and is used as an error code with  an implicit cast. made it explicit to silence the warning.",
        "createdAt" : "2019-07-01T15:54:20Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "7d56d5aa-1e8c-430a-b36e-7be0e799e8f4",
        "parentId" : "b96bd331-2d89-4f9b-8f6c-633897bc4f72",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Good find. Does the caller even use this?",
        "createdAt" : "2019-07-01T16:29:39Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "5cdb065d-0d0c-4176-9c7f-09542475c3a4",
        "parentId" : "b96bd331-2d89-4f9b-8f6c-633897bc4f72",
        "authorId" : null,
        "body" : "DIdn't check. Probably err !=0 at least.",
        "createdAt" : "2019-07-01T16:56:33Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "b661e66c-ba6f-45d5-aebc-5439a9b0a982",
        "parentId" : "b96bd331-2d89-4f9b-8f6c-633897bc4f72",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "No worries. Makes sense to suppress build warning though as you can tell there are a lot of opportunities to really clean some of this up. If you say any can certainly push PRs\r\n\r\nResolving this one for now",
        "createdAt" : "2019-07-01T17:17:11Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d40f4ced-07c5-4551-8d75-053319cd666c",
        "parentId" : "b96bd331-2d89-4f9b-8f6c-633897bc4f72",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@pilkibun this part of the code gets less maintenance attention than other parts; is likely to have developed unused/unreachable branches.  Any of those you can identify and remove (separate PR(s)) will be welcome.",
        "createdAt" : "2019-07-01T20:10:12Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "72173c4c-8998-42e0-90cd-1678110c2234",
        "parentId" : "b96bd331-2d89-4f9b-8f6c-633897bc4f72",
        "authorId" : null,
        "body" : "i ph33r the parser code.",
        "createdAt" : "2019-07-01T21:06:24Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "d8f3fa5b997ea78ff33e93a7f711cc5759cd0ce3",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1817,1821 @@    if (maybe_int != NULL) *maybe_int = 0;\n    if (PyErr_Occurred() != NULL) *error = -1;\n    else if (r == Py_HUGE_VAL) *error = (int)Py_HUGE_VAL;\n    PyErr_Clear();\n    return r;"
  },
  {
    "id" : "298d3b30-7869-4286-8ec5-1c1f3209dcad",
    "prId" : 27157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27157#pullrequestreview-256531970",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5a9360c-f6fc-4db7-bd06-b04d8dd799f9",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This doesn't introduce any new warnings right? Implicitly casting size_t to int?",
        "createdAt" : "2019-07-01T19:17:01Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "7822c9bc-da18-47a9-8f7b-d3a3062e4285",
        "parentId" : "a5a9360c-f6fc-4db7-bd06-b04d8dd799f9",
        "authorId" : null,
        "body" : "checked now, looks ok. anyway the original line's RHS looks like it was size_t as well, no?",
        "createdAt" : "2019-07-01T19:56:35Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "d8f3fa5b997ea78ff33e93a7f711cc5759cd0ce3",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1435,1439 @@    int i, status = 0;\n    size_t length0 = (strlen(item) + 1);\n    int bufsize = length0;\n\n    static const char *tstrs[1] = {\"TRUE\"};"
  },
  {
    "id" : "f40b77d9-9a77-4265-b040-d2998a672fbb",
    "prId" : 27157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27157#pullrequestreview-256570954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a409b8cb-9325-4bbb-9239-8f6131e0cf55",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "For my own edification: is there any potential performance difference here?",
        "createdAt" : "2019-07-01T20:07:27Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9581aa5c-9ada-40fd-acdb-da57a4aa685d",
        "parentId" : "a409b8cb-9325-4bbb-9239-8f6131e0cf55",
        "authorId" : null,
        "body" : "potential? sure. effect size? not sure.  I'm not about to benchmark snprintf vs. strcpy for this silliness.\r\nafaict, these are our choices:\r\n\r\n- strncpy causes compiler warning, because this is not how it's meant to be used\r\n- strcpy is flagged by cpplint, and there's no per-line ignore mechanism afaict. can disable printf checking for the whole file using a CPPLINT.cfg file.\r\n- snprintf involves some overhead. at least \"parsing\" \"%s\", some input validation and an additional function call to strcpy. call it a few us per call.\r\n ",
        "createdAt" : "2019-07-01T21:29:17Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "d8f3fa5b997ea78ff33e93a7f711cc5759cd0ce3",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1441,1445 @@\n    tmp = malloc(bufsize);\n    snprintf(tmp,  length0, \"%s\", item);\n    uppercase(tmp);\n"
  },
  {
    "id" : "df63138d-10c5-41d1-993a-d09064b5563f",
    "prId" : 30369,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30369#pullrequestreview-336251437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f22d30dc-e753-4539-8a14-474fc8129fef",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is likely *very* expensive.",
        "createdAt" : "2019-12-20T15:16:08Z",
        "updatedAt" : "2020-01-02T00:04:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f8fe2e6f-9cd8-408c-9ded-41f6e9445683",
        "parentId" : "f22d30dc-e753-4539-8a14-474fc8129fef",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this what cython code actually generates with a nogil?",
        "createdAt" : "2019-12-24T16:13:05Z",
        "updatedAt" : "2020-01-02T00:04:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "585bec85-e3ae-4caa-a900-c37efac08ddf",
        "parentId" : "f22d30dc-e753-4539-8a14-474fc8129fef",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This code ensures The GIL, `nogil` by contrast would release it.\r\n\r\nBelow is what master generates for the nogil funcs:\r\n\r\n```c\r\n    /* \"pandas/_libs/parsers.pyx\":1667\r\n *     na_fset = kset_float64_from_list(na_flist)\r\n *     if parser.double_converter_nogil != NULL:  # if it can run without the GIL\r\n *         with nogil:             # <<<<<<<<<<<<<<\r\n *             error = _try_double_nogil(parser, parser.double_converter_nogil,\r\n *                                       col, line_start, line_end,\r\n */\r\n    {\r\n        #ifdef WITH_THREAD\r\n        PyThreadState *_save;\r\n        Py_UNBLOCK_THREADS\r\n        __Pyx_FastGIL_Remember();\r\n        #endif\r\n        /*try:*/ {\r\n\r\n          /* \"pandas/_libs/parsers.pyx\":1668\r\n *     if parser.double_converter_nogil != NULL:  # if it can run without the GIL\r\n *         with nogil:\r\n *             error = _try_double_nogil(parser, parser.double_converter_nogil,             # <<<<<<<<<<<<<<\r\n *                                       col, line_start, line_end,\r\n *                                       na_filter, na_hashset, use_na_flist,\r\n */\r\n          __pyx_v_error = __pyx_f_6pandas_5_libs_7parsers__try_double_nogil(__pyx_v_parser, __pyx_v_parser->double_converter_nogil, __pyx_v_col, __pyx_v_line_start, __pyx_v_line_end, __pyx_v_na_filter, __pyx_v_na_hashset, __pyx_v_use_na_flist, __pyx_v_na_fset, __pyx_v_NA, __pyx_v_data, (&__pyx_v_na_count));\r\n        }\r\n```\r\n\r\nFor simplicity this stays in that block but just ensures The GIL before actually doing anything.\r\n\r\nSo I see your point. An alternate strategy here is to provide a flag within this function if its safe to release The GIL rather than releasing then reacquiring. Let me see what that looks like",
        "createdAt" : "2019-12-24T16:23:41Z",
        "updatedAt" : "2020-01-02T00:04:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4c0e7576-8d55-49c0-b253-5b40d39a9ca3",
        "parentId" : "f22d30dc-e753-4539-8a14-474fc8129fef",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmmm that's not what i mean. why don't we just mark this function as nogil? seems a lot simpler",
        "createdAt" : "2019-12-24T17:16:47Z",
        "updatedAt" : "2020-01-02T00:04:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e4735fa6-de54-415b-b7de-2a66282dd28a",
        "parentId" : "f22d30dc-e753-4539-8a14-474fc8129fef",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Ah...well the function actually interacts with Python objects so it does require the GIL",
        "createdAt" : "2019-12-24T17:23:07Z",
        "updatedAt" : "2020-01-02T00:04:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d099874a-e5b1-4d52-a32a-8883b9addbd1",
        "parentId" : "f22d30dc-e753-4539-8a14-474fc8129fef",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Though could maybe refactor to not use Python objects (really the Exception handling items are the Python objects) if that is preferable",
        "createdAt" : "2019-12-24T17:25:07Z",
        "updatedAt" : "2020-01-02T00:04:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a8b1e5f3-c916-47a7-949c-84880654e885",
        "parentId" : "f22d30dc-e753-4539-8a14-474fc8129fef",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Ref original issue #15140",
        "createdAt" : "2019-12-24T17:33:01Z",
        "updatedAt" : "2020-01-02T00:04:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c8dea4af8a4d8f555a953ddd8e9b989a836b05e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1777,1781 @@    // This is called from a nogil block in parsers.pyx\n    // so need to explicitly get GIL before Python calls\n    PyGILState_STATE gstate;\n    gstate = PyGILState_Ensure();\n"
  },
  {
    "id" : "4bf92e1f-2d40-4f36-a92f-df0d739bce35",
    "prId" : 30369,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30369#pullrequestreview-337511632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f697fb5-cac1-4ea6-bfca-2dee3b8766ee",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh i realize what you are doing here, you are actually turning *on* the gil because this is called in a nogil context. Can you add a comment to that effect.",
        "createdAt" : "2020-01-01T03:32:29Z",
        "updatedAt" : "2020-01-02T00:04:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d84c608b-98ce-4239-acaf-a2cf3e9bf118",
        "parentId" : "8f697fb5-cac1-4ea6-bfca-2dee3b8766ee",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Added",
        "createdAt" : "2020-01-02T00:23:19Z",
        "updatedAt" : "2020-01-02T00:23:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c8dea4af8a4d8f555a953ddd8e9b989a836b05e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1777,1781 @@    // This is called from a nogil block in parsers.pyx\n    // so need to explicitly get GIL before Python calls\n    PyGILState_STATE gstate;\n    gstate = PyGILState_Ensure();\n"
  },
  {
    "id" : "138457f5-c9cf-4b15-8c42-e8821ade051e",
    "prId" : 32566,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32566#pullrequestreview-374757970",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef815337-4b6f-41cf-8413-0729aeeef1a3",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Do you have a handle on why this is required in the first place? I think there is a more general problem with the statement management that this works around (maybe OK)",
        "createdAt" : "2020-03-10T00:35:38Z",
        "updatedAt" : "2020-03-15T07:19:32Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "835d69c2-a490-4800-9a5d-7cb8410b1c89",
        "parentId" : "ef815337-4b6f-41cf-8413-0729aeeef1a3",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "As I have said in the ticket, I am also not certain *why* this works (apart from the obvious fact that this guards against a negative index in the array).\r\nI took the heuristic route and created a test and fiddled around with a couple of options (setting charcount to 0 and to 1).\r\nAs it seemed to work and did not break any other unit tests, I thought that it would be useful to submit as a PR.\r\nHowever, I agree that it does not feel good not knowing exactly *why* this works.\r\nMaybe I put too much trust in unit testing, in the sense that this may break other functionality without unit tests.",
        "createdAt" : "2020-03-10T06:54:15Z",
        "updatedAt" : "2020-03-15T07:19:32Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      },
      {
        "id" : "8135d3df-8810-413b-a3a2-22961cc6f93e",
        "parentId" : "ef815337-4b6f-41cf-8413-0729aeeef1a3",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "@roberthdevries : Is there a test that you added which fails when `char_count = 0` ?",
        "createdAt" : "2020-03-11T04:06:19Z",
        "updatedAt" : "2020-03-15T07:19:32Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "19623510-0cf9-4f25-b9dd-57d5f6bb9436",
        "parentId" : "ef815337-4b6f-41cf-8413-0729aeeef1a3",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "if `char_count` is 0, there will be an endless loop. So that option was abandoned :smile: ",
        "createdAt" : "2020-03-11T15:33:25Z",
        "updatedAt" : "2020-03-15T07:19:32Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      },
      {
        "id" : "e7697d81-5427-4448-bb14-05ebfde7b2d6",
        "parentId" : "ef815337-4b6f-41cf-8413-0729aeeef1a3",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "With respect to the test you wrote, this loop would manifest for all values of `nrows` ?\r\n\r\nAlso, add a comment about `char_count` needing to be at least one.",
        "createdAt" : "2020-03-11T16:47:27Z",
        "updatedAt" : "2020-03-15T07:19:32Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "a33930bc-c197-43f4-a7a5-ccb6263c94d6",
        "parentId" : "ef815337-4b6f-41cf-8413-0729aeeef1a3",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "The original ticket only mentions `nrows=1`. I cannot guarantee that the bug would trigger on other values, only the test would not progress further than the first one.\r\nI added the other numbers of `nrows` to be sure that my fix did not introduce unwanted behavior when multiple rows were being read.\r\n\r\nI did some more experiments and the value that makes some kind of sense to me is `self->stream_len`. If there are no `word_deletions`, the parser must consume something, and the maximum that can be skipped is the `stream_len`.\r\nWith this value all the tests in the `pandas/tests/io/parser` directory keep working.",
        "createdAt" : "2020-03-11T17:22:33Z",
        "updatedAt" : "2020-03-15T07:19:32Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      },
      {
        "id" : "b35cfba0-633b-437d-bd9a-096e3e76579a",
        "parentId" : "ef815337-4b6f-41cf-8413-0729aeeef1a3",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "The fact you can make that modification and still have tests passing concerns me a little.  It is hard to tell whether or not there is coverage for the `else` case.\r\n\r\nTo confirm, if you set `char_count = 0` in the `else` block, do you get test failures?  If not, you may need to add a `sprintf` debug command to see when this case ever gets hit.",
        "createdAt" : "2020-03-11T18:04:59Z",
        "updatedAt" : "2020-03-15T07:19:32Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "ea1da702-ddf7-43ae-aca5-6d7483cb4de9",
        "parentId" : "ef815337-4b6f-41cf-8413-0729aeeef1a3",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "I tested this case, and it passes the test just fine. (Not sure why it failed in the past).\r\nI am investigating this a bit more, stay tuned. But for now it does not seem to matter much which value I put in there, as long as it is smaller or equal to `stream_len`",
        "createdAt" : "2020-03-11T22:26:23Z",
        "updatedAt" : "2020-03-15T07:19:32Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      },
      {
        "id" : "008e36e4-16a8-410c-b105-25e341b91bbb",
        "parentId" : "ef815337-4b6f-41cf-8413-0729aeeef1a3",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "The patch is changed to `char_count = 0`. As `word_deletions == 0`, and `char_count` is used to skip characters, it seems logical to me that if `word_deletions == 0` that `char_count` must be 0 as well.",
        "createdAt" : "2020-03-14T13:20:24Z",
        "updatedAt" : "2020-03-15T07:19:32Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      },
      {
        "id" : "0b506e3e-c77f-44c9-a7bc-9cdefce96768",
        "parentId" : "ef815337-4b6f-41cf-8413-0729aeeef1a3",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I have to say that it's still a little weird that we can't pinpoint an exact reason for setting the value of `char_count`, but at least this number I can understand.  Can you add a comment to explain that reasoning?",
        "createdAt" : "2020-03-14T17:01:30Z",
        "updatedAt" : "2020-03-15T07:19:32Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "438a4602-4ee8-46f5-839a-cb8b38dac744",
        "parentId" : "ef815337-4b6f-41cf-8413-0729aeeef1a3",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "Added",
        "createdAt" : "2020-03-14T22:24:41Z",
        "updatedAt" : "2020-03-15T07:19:32Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6b64c7a907b0dae2dd5cc93ea810799c046f2b5",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1190,1194 @@    /* cannot guarantee that nrows + 1 has been observed */\n    word_deletions = self->line_start[nrows - 1] + self->line_fields[nrows - 1];\n    if (word_deletions >= 1) {\n        char_count = (self->word_starts[word_deletions - 1] +\n                      strlen(self->words[word_deletions - 1]) + 1);"
  },
  {
    "id" : "ecb15e05-b5d4-4fa7-ac6c-69f151056fee",
    "prId" : 35377,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35377#pullrequestreview-464128591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfe8197f-a97e-4cec-b6a6-32309e298c56",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Does the null byte check here serve a purpose?",
        "createdAt" : "2020-08-07T15:25:28Z",
        "updatedAt" : "2020-08-10T10:12:55Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3d4fd5e7-36d1-4d8f-90fd-9773bb1ece3f",
        "parentId" : "cfe8197f-a97e-4cec-b6a6-32309e298c56",
        "authorId" : "e3c73089-9fe7-450c-bd54-3badde18e274",
        "body" : "Yes. `tsep` is null when no thousands separator is defined. But the loop must not skip the terminating null byte in the input string (the second condition) which would happen on e.g. '123\\0'",
        "createdAt" : "2020-08-10T10:52:47Z",
        "updatedAt" : "2020-08-10T10:52:48Z",
        "lastEditedBy" : "e3c73089-9fe7-450c-bd54-3badde18e274",
        "tags" : [
        ]
      }
    ],
    "commit" : "8703ad6e9c6fe81a83a6778c5bab0b7e22287434",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1798,1802 @@    while (isdigit_ascii(*p)) {\n        *dst++ = *p++;\n        p += (tsep != '\\0' && *p == tsep);\n    }\n    // Replace `decimal` with '.'"
  },
  {
    "id" : "11473113-0adf-45c1-90df-0b0bde133c35",
    "prId" : 35377,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35377#pullrequestreview-464128680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a20e8e14-a23c-4c28-bd13-c30bd9613950",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is there a test that hits this?",
        "createdAt" : "2020-08-07T15:28:42Z",
        "updatedAt" : "2020-08-10T10:12:55Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "635469d7-4a03-42e1-9d00-15f535215da4",
        "parentId" : "a20e8e14-a23c-4c28-bd13-c30bd9613950",
        "authorId" : "e3c73089-9fe7-450c-bd54-3badde18e274",
        "body" : "Yes. The \"1,2e1_0\" for instance. I.e something that is prefixed with a number but has extra trailing characters.",
        "createdAt" : "2020-08-10T10:52:56Z",
        "updatedAt" : "2020-08-10T10:52:56Z",
        "lastEditedBy" : "e3c73089-9fe7-450c-bd54-3badde18e274",
        "tags" : [
        ]
      }
    ],
    "commit" : "8703ad6e9c6fe81a83a6778c5bab0b7e22287434",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +1834,1838 @@        *error = -1;\n        if (q != NULL) {\n           // p and pc are different len due to tsep removal. Can't report\n           // how much it has consumed of p. Just rewind to beginning.\n            *q = (char *)p;"
  },
  {
    "id" : "ed9e7eb2-c32c-4dd7-8eb6-a1e75c236a8e",
    "prId" : 37792,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37792#pullrequestreview-529804618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56c13ec3-0c60-4844-8a7c-e6280b824478",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "extra whitespace",
        "createdAt" : "2020-11-13T04:23:14Z",
        "updatedAt" : "2020-11-13T04:25:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2935e235-db09-44bd-ba83-c271a2dabd9c",
        "parentId" : "56c13ec3-0c60-4844-8a7c-e6280b824478",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This is by design to keep all of the slashes right aligned",
        "createdAt" : "2020-11-13T06:34:02Z",
        "updatedAt" : "2020-11-13T06:34:03Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e6e9e672e37b9913cab5876bf5c0f4a26b46727",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +600,604 @@               self->stream_cap))                                             \\\n        int64_t bufsize = 100;                                                \\\n        self->error_msg = malloc(bufsize);                                    \\\n        snprintf(self->error_msg, bufsize,                                    \\\n                 \"Buffer overflow caught - possible malformed input file.\\n\");\\"
  }
]