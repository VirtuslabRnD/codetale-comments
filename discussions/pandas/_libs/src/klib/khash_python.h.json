[
  {
    "id" : "f869fe06-6e48-43f1-b303-b3d4504dd2cc",
    "prId" : 21904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21904#pullrequestreview-137240751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b30e1d9e-2020-4609-930f-191ba1a0a51a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a blank between cases",
        "createdAt" : "2018-07-14T14:58:19Z",
        "updatedAt" : "2018-07-21T06:46:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fbbc4537-0124-410b-9853-54120b52949a",
        "parentId" : "b30e1d9e-2020-4609-930f-191ba1a0a51a",
        "authorId" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "body" : "@jreback Sorry for the silly question: Do you expect me to add a new commit with the improvements to the branch and you will fixup it when merging or should I amend the current commit?",
        "createdAt" : "2018-07-14T15:10:20Z",
        "updatedAt" : "2018-07-21T06:46:39Z",
        "lastEditedBy" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "tags" : [
        ]
      },
      {
        "id" : "4ef5ef75-519f-4719-9064-acfb7a63559c",
        "parentId" : "b30e1d9e-2020-4609-930f-191ba1a0a51a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "generally push new commits.",
        "createdAt" : "2018-07-14T15:14:31Z",
        "updatedAt" : "2018-07-21T06:46:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5163615e-f6a0-498f-a29c-53c891b49031",
        "parentId" : "b30e1d9e-2020-4609-930f-191ba1a0a51a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "needs to add a whatsnew in any event",
        "createdAt" : "2018-07-14T15:14:44Z",
        "updatedAt" : "2018-07-21T06:46:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "124b095bc5cad4d9c3568d6ad9147c5b1e2df207",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +22,26 @@\n// correct for all inputs but not -0.0 and NaNs\n#define kh_float64_hash_func_0_NAN(key) (khint32_t)((asint64(key))>>33^(asint64(key))^(asint64(key))<<11)\n\n// correct for all inputs but not NaNs"
  },
  {
    "id" : "31320573-896d-4d75-8d0c-3615c6fffcf9",
    "prId" : 21904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21904#pullrequestreview-137277284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5047386b-4d14-4a74-a57c-3be72530271d",
        "parentId" : null,
        "authorId" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "body" : "Not sure about `Py_NAN`:\r\n\r\n  1. Must the case of [`Py_NO_NAN`](https://github.com/python/cpython/blob/master/Include/pymath.h#L158) be taken into account?\r\n  2. There is [`PANDAS_NAN`](https://github.com/pandas-dev/pandas/blob/b508a0486d0091c550964718d22b0d4292272587/pandas/_libs/src/skiplist.h#L43), but here `Py_NAN` didn't require additional  includes.\r\n\r\nPS: `NAN` from math.h isn't defined for some plattforms.\r\n\r\n   ",
        "createdAt" : "2018-07-15T20:24:18Z",
        "updatedAt" : "2018-07-21T06:46:39Z",
        "lastEditedBy" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "tags" : [
        ]
      }
    ],
    "commit" : "124b095bc5cad4d9c3568d6ad9147c5b1e2df207",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +31,35 @@// correct for all\n#define kh_float64_hash_func(key) ((key) != (key) ?                       \\\n                                   kh_float64_hash_func_NAN(Py_NAN) :     \\\n                                   kh_float64_hash_func_NAN(key))\n"
  },
  {
    "id" : "cf7e7262-3d40-4cbc-be26-02ccdc81d8cd",
    "prId" : 36729,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36729#pullrequestreview-530472273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b2f086b-943b-4e54-b1d8-209757e378c5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a link here (or in khash.h) to this PR and some text to indicate the hashing strategy so its easy to understand from reading this code.",
        "createdAt" : "2020-10-17T00:12:41Z",
        "updatedAt" : "2020-11-13T21:18:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3d2b0d67-d59a-4446-bf3c-bfd6d1f494ed",
        "parentId" : "5b2f086b-943b-4e54-b1d8-209757e378c5",
        "authorId" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "body" : "I hope this is enough: https://github.com/pandas-dev/pandas/pull/36729/commits/f2496381d1dd088df60f29e6a9604dce30abaf1f#diff-7ac30c345bd6d38838a46337e4c6b5b6feae3e1fd5aea54b5d9e37d20054edf5R18",
        "createdAt" : "2020-11-13T23:09:29Z",
        "updatedAt" : "2020-11-13T23:09:30Z",
        "lastEditedBy" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "tags" : [
        ]
      }
    ],
    "commit" : "e743c79693aa7a62d5fef5c24cadd06590261011",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +14,18 @@// simple hash, viewing the double bytes as an int64 and using khash's default\n// hash for 64 bit integers.\n// GH 13436 showed that _Py_HashDouble doesn't work well with khash\n// GH 28303 showed, that the simple xoring-version isn't good enough\n// See GH 36729 for evaluation of the currently used murmur2-hash version"
  },
  {
    "id" : "df570283-7d15-48ff-8818-4fc963540bc0",
    "prId" : 36729,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36729#pullrequestreview-530587718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0b5ff6b-60a7-4459-9c9f-b5c0a3644a70",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a tiny bit more content here on why this appropach vs the CPython appropach.",
        "createdAt" : "2020-11-13T13:42:05Z",
        "updatedAt" : "2020-11-14T16:15:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f93286ab-d3af-402d-9ea6-5830a374c382",
        "parentId" : "d0b5ff6b-60a7-4459-9c9f-b5c0a3644a70",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this was a late comment, pls update in a followon.",
        "createdAt" : "2020-11-14T16:15:19Z",
        "updatedAt" : "2020-11-14T16:15:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e743c79693aa7a62d5fef5c24cadd06590261011",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +15,19 @@// hash for 64 bit integers.\n// GH 13436 showed that _Py_HashDouble doesn't work well with khash\n// GH 28303 showed, that the simple xoring-version isn't good enough\n// See GH 36729 for evaluation of the currently used murmur2-hash version\n"
  },
  {
    "id" : "c82b834d-1853-455d-a53f-ab99f2d2e7ab",
    "prId" : 41952,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/41952#pullrequestreview-685108284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49be6838-a604-483d-b6d5-02cbec3b2477",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some comments before these of what is going on / why doing is & the issue reference",
        "createdAt" : "2021-06-16T12:35:46Z",
        "updatedAt" : "2021-06-16T12:36:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a35e61725aa05d4ec31611c1e088406508dade4c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +165,169 @@\n// NaN-floats should be in the same equivalency class, see GH 22119\nint PANDAS_INLINE floatobject_cmp(PyFloatObject* a, PyFloatObject* b){\n    return (\n             Py_IS_NAN(PyFloat_AS_DOUBLE(a)) &&"
  }
]