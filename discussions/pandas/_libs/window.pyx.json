[
  {
    "id" : "eb9c8d88-286c-4cfd-9d86-1fde3a8caa88",
    "prId" : 16247,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16247#pullrequestreview-37181994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9ae81e2-6777-4920-b61a-f6b8378fd74c",
        "parentId" : null,
        "authorId" : "dba5a4d5-8dc3-4549-9886-8ed279bce369",
        "body" : "Hadn't realized this before: `skiplist.get` is an O(log win) operation which we now have to perform twice. We also do a `skiplist.insert` and a `skiplist.remove`, which are also O(log win), and probably more expensive than `skiplist.get`, but a pessimistic estimation says the performance of this function will go down by 25%.\r\n\r\nI think there are two things to do here:\r\n\r\n 1. quantify that slow down by running a couple of benchmarks with and without this PR, and leave a record of the results for further reference.\r\n 2. if the slowdown is significant, we could gain the speed back by doing some changes to the skiplist internals: when the first index is fetched, getting the next one is trivially simple and cheap, so we could add a `.get_two()` method to `IndexableSkiplist` and use it here. I think that would be work for another PR, but creating an issue for tracking based on the results of the benchmarks should be part of merging this.",
        "createdAt" : "2017-05-09T09:01:49Z",
        "updatedAt" : "2017-07-07T16:19:20Z",
        "lastEditedBy" : "dba5a4d5-8dc3-4549-9886-8ed279bce369",
        "tags" : [
        ]
      },
      {
        "id" : "9fb3fbd3-4500-4d17-aacc-cb9d7a6fe106",
        "parentId" : "d9ae81e2-6777-4920-b61a-f6b8378fd74c",
        "authorId" : "a849772d-dc25-4b0b-95b1-218052276e07",
        "body" : "I ran some very simple performance tests. The new version is indeed 25% slower.\r\n\r\n*New*\r\n\r\n```python\r\nIn [1]: import pandas\r\nIn [2]: pandas.__version__\r\nOut[2]: '0.20.0+19.g36db9bdaf'\r\nIn [3]: import numpy as np\r\nIn [4]: df = pandas.DataFrame({'a': np.random.random(1000000)})\r\nIn [5]: %timeit df.a.rolling(10).quantile(0.5)\r\n1 loop, best of 3: 1.78 s per loop\r\nIn [6]: %timeit df.a.rolling(10).median()\r\n1 loop, best of 3: 460 ms per loop\r\n```\r\n*Old*\r\n\r\n```python\r\nIn [1]: import pandas\r\nIn [2]: pandas.__version__\r\nOut[2]: '0.20.1'\r\nIn [3]: import numpy as np\r\nIn [4]: df = pandas.DataFrame({'a': np.random.random(1000000)})\r\nIn [5]: %timeit df.a.rolling(10).quantile(0.5)\r\n1 loop, best of 3: 1.4 s per loop\r\nIn [6]: %timeit df.a.rolling(10).median()\r\n1 loop, best of 3: 451 ms per loop\r\n```\r\nYMMV, of course.",
        "createdAt" : "2017-05-09T15:41:26Z",
        "updatedAt" : "2017-07-07T16:19:20Z",
        "lastEditedBy" : "a849772d-dc25-4b0b-95b1-218052276e07",
        "tags" : [
        ]
      },
      {
        "id" : "e9f0edbe-ecd1-4f6c-b7d3-2949d181a410",
        "parentId" : "d9ae81e2-6777-4920-b61a-f6b8378fd74c",
        "authorId" : "dba5a4d5-8dc3-4549-9886-8ed279bce369",
        "body" : "Thanks for doing this! Seeing this, there is a more obvious approach to speeding this in a future PR: use the C implemented skiplist that median uses, instead of the Cython `IndexableSkiplist` used by quantile. But that's clearly a different PR.",
        "createdAt" : "2017-05-09T20:49:04Z",
        "updatedAt" : "2017-07-07T16:19:20Z",
        "lastEditedBy" : "dba5a4d5-8dc3-4549-9886-8ed279bce369",
        "tags" : [
        ]
      },
      {
        "id" : "f60eb3bd-35c6-4e9c-b1fb-bfa916f50649",
        "parentId" : "d9ae81e2-6777-4920-b61a-f6b8378fd74c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jaimefrio the issue is that for median you are only doing a single calculation. when doing *many* calculations (like here) a skip list is far faster. The actual impl of the skiplist could be improved a lot though (it has python objects inside it).",
        "createdAt" : "2017-05-09T23:39:00Z",
        "updatedAt" : "2017-07-07T16:19:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4080942107c217aef2ad54defd09928f6469f7fc",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1401,1405 @@            else:\n                vlow = skiplist.get(idx)\n                vhigh = skiplist.get(idx + 1)\n                output[i] = (vlow + (vhigh - vlow) *\n                                 (quantile * (nobs - 1) - idx))"
  },
  {
    "id" : "de547222-d971-4317-b158-a9c3b82df6c0",
    "prId" : 18065,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18065#pullrequestreview-74748485",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4d8a77d-7754-4c20-8c9b-70ea62ecb88a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the reference to _zero_fperr as well (back to here)",
        "createdAt" : "2017-11-07T13:37:08Z",
        "updatedAt" : "2017-11-07T13:51:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee5a33d6015771f44b9b9e55480a72bc032b2473",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +794,798 @@        #         large number.\n        #\n        #         in core/nanops.py nanskew/nankurt call the function\n        #         _zero_out_fperr(m2) to fix floating error.\n        #         if the variance is less than 1e-14, it could be"
  },
  {
    "id" : "c2c9d5cb-9f3f-43c7-a8b0-1409cd306ff6",
    "prId" : 18921,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18921#pullrequestreview-85867461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72b43a5e-69d9-4010-8ef8-3bdb88694fda",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "nice!",
        "createdAt" : "2017-12-28T18:59:27Z",
        "updatedAt" : "2017-12-29T12:24:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a97e133bbe3e8bbc74fa8ecbc6331c4c7bfc4b77",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +493,497 @@        # fixed window\n\n        range_endpoint = int_max(minp, 1) - 1\n\n        with nogil:"
  },
  {
    "id" : "65d20fc0-824b-43b0-a6a4-141553809225",
    "prId" : 19549,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19549#pullrequestreview-95037797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3243cc12-ada0-4673-93de-55a8fc70c6d9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a description of the algorithm and a link (if available)",
        "createdAt" : "2018-02-08T11:22:29Z",
        "updatedAt" : "2018-02-12T04:37:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "65c0dbe757f9c7b8b138c6627070bccaaddc0f76",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1244,1248 @@\n    output = np.empty(N, dtype=input.dtype)\n\n    Q = deque[int64_t]()\n"
  },
  {
    "id" : "e1b0abbf-8d98-4710-96c4-9c9edc7d941b",
    "prId" : 20497,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20497#pullrequestreview-108439506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af9e90a6-b3f7-4b60-83d7-cbe1b8d10937",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Wouldn't this raise a `KeyError` not a `ValueError`?",
        "createdAt" : "2018-03-30T21:13:58Z",
        "updatedAt" : "2018-04-24T11:29:12Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cc7a71eb919cd84662cee4081269734fbeaf4fb",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +1397,1401 @@\n    try:\n        interpolation_type = interpolation_types[interpolation]\n    except KeyError:\n        raise ValueError(\"Interpolation '{}' is not supported\""
  },
  {
    "id" : "8261843c-e370-4366-a53f-7482744996b9",
    "prId" : 20497,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20497#pullrequestreview-112481860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6427eb25-f5f9-41e6-a34b-b05c630d0f29",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is there a test case to cover that this raises the expected error message when passing an invalid argument? If not can you add?",
        "createdAt" : "2018-04-01T14:56:27Z",
        "updatedAt" : "2018-04-24T11:29:12Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d15b246f-4815-49f6-b97d-200d23987451",
        "parentId" : "6427eb25-f5f9-41e6-a34b-b05c630d0f29",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Minor nit but can you place the name of the passed interpolation in single quotes? Helps distinguish it from the rest of the text in the error message (will need to update test as well)",
        "createdAt" : "2018-04-16T16:07:01Z",
        "updatedAt" : "2018-04-24T11:29:12Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cc7a71eb919cd84662cee4081269734fbeaf4fb",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +1398,1402 @@    try:\n        interpolation_type = interpolation_types[interpolation]\n    except KeyError:\n        raise ValueError(\"Interpolation '{}' is not supported\"\n                         .format(interpolation))"
  }
]