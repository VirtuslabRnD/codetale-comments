[
  {
    "id" : "4eeae559-7423-4a8d-84c5-39ebaf667e8b",
    "prId" : 29878,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29878#pullrequestreview-326883692",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86a46d35-0220-439d-ad06-ea988cbbb9d9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could we do a simple calculcate in start/end to determine if is_monotonic is true here? it likely is quite performant.",
        "createdAt" : "2019-12-04T14:25:38Z",
        "updatedAt" : "2019-12-04T21:56:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ce1967bf6298e53c5cb1483774aaa1e138d7d30",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +200,204 @@            e = end[i]\n\n            if i == 0 or not is_monotonic_bounds:\n\n                # setup"
  },
  {
    "id" : "ac02527a-a956-4b07-9c42-ba91874c050d",
    "prId" : 31935,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31935#pullrequestreview-359421894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14b10862-092f-4d9e-85ed-765ee676cb7a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, why can't this *also* be in-line?",
        "createdAt" : "2020-02-15T01:07:47Z",
        "updatedAt" : "2020-02-15T01:07:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2f998390-9535-42ba-b06a-4cbda08e3508",
        "parentId" : "14b10862-092f-4d9e-85ed-765ee676cb7a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This was the cause of the `warning: pandas/_libs/window/aggregations.pyx:60:4: Buffer unpacking not optimized away.` warning. @mroeschke suggested a potential inline approach that got rid of the warning and used memory views but caused test failures. Could still adjust a few things to make that work but I think without a larger effort this is the best option for now",
        "createdAt" : "2020-02-16T18:43:19Z",
        "updatedAt" : "2020-02-16T18:43:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "bcaa9914-9f2c-43fc-be53-11b4f248325a",
        "parentId" : "14b10862-092f-4d9e-85ed-765ee676cb7a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is a highly optimized path\r\n\r\nif u can show this doesnâ€™t have any perf regressions then ok",
        "createdAt" : "2020-02-16T18:53:09Z",
        "updatedAt" : "2020-02-16T18:53:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "644055bb5adeca32f95a94cd36d4f9785c0f358d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +57,61 @@cdef inline int int_min(int a, int b): return a if a <= b else b\n\ncdef bint is_monotonic_start_end_bounds(\n    ndarray[int64_t, ndim=1] start, ndarray[int64_t, ndim=1] end\n):"
  },
  {
    "id" : "2333ccf6-0e77-40ab-9ce0-d1bf62098893",
    "prId" : 33180,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33180#pullrequestreview-385740991",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f95d3f8-cfd4-40b2-bf45-893280ff6cf2",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Mind running the ASVs for rolling max/min to see if the existing functions don't suffer a performance hit?",
        "createdAt" : "2020-03-31T20:45:27Z",
        "updatedAt" : "2020-04-03T07:34:20Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "3301d145-fcc2-4372-ba7b-c83a0731f506",
        "parentId" : "4f95d3f8-cfd4-40b2-bf45-893280ff6cf2",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "@mroeschke \r\nSure, sorry for missing that we had these in the suite.\r\n\r\nRan the benchmarks in the `rolling.VariableWindowMethods`. No significant changes.\r\n\r\n```\r\n$ asv continuous -f 1.1 master HEAD -b ^rolling.VariableWindowMethods\r\n...\r\nBENCHMARKS NOT SIGNIFICANTLY CHANGED.\r\n```",
        "createdAt" : "2020-04-01T06:25:15Z",
        "updatedAt" : "2020-04-03T07:34:20Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      },
      {
        "id" : "504d3bd4-e0b2-4ea0-b757-08347e9100a0",
        "parentId" : "4f95d3f8-cfd4-40b2-bf45-893280ff6cf2",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Great thanks!",
        "createdAt" : "2020-04-01T16:15:12Z",
        "updatedAt" : "2020-04-03T07:34:20Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "82fe5460dc0a74c00bac4683399651ce277a73fe",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1074,1078 @@        # Anchor output index to values index to provide custom\n        # BaseIndexer support\n        for i in range(N):\n\n            curr_win_size = endi[i] - starti[i]"
  },
  {
    "id" : "7dbf41e2-d77e-4b71-a271-a48d38b60249",
    "prId" : 34839,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34839#pullrequestreview-432776221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87b32a52-da42-4ec6-aba8-53d21b47581e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "as a followup it *should* be possible to implement ewma with this one",
        "createdAt" : "2020-06-17T21:12:33Z",
        "updatedAt" : "2020-07-06T21:33:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1debd809d7b1406ed0ffd8711ad2957cc4e9a664",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1769,1773 @@    -------\n    ndarray\n    \"\"\"\n    cdef:\n        Py_ssize_t i, num_not_nan = 0, N = len(vals)"
  },
  {
    "id" : "cfa3bd27-c109-4d86-a5c3-496e1ba9df88",
    "prId" : 34839,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34839#pullrequestreview-438602441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c346505-b10e-4b3c-b91f-6ecbdfda470f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you you put this in a nogil block? do we have timings on this?",
        "createdAt" : "2020-06-26T20:25:00Z",
        "updatedAt" : "2020-07-06T21:33:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "272183c6-e959-4abf-b0d3-1124f8017998",
        "parentId" : "9c346505-b10e-4b3c-b91f-6ecbdfda470f",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "I tried to `nogil` this but could not since we are doing array arithmetic & broadcasting.\r\n\r\n```\r\n            weights = 0.5 ** ((times[i] - times[mask.view(np.bool_)]) / halflife)\r\n            observations = vals[mask.view(np.bool_)]\r\n            last_result = np.sum(weights * observations) / np.sum(weights)\r\n```\r\n\r\nI can add an ASV for this.",
        "createdAt" : "2020-06-26T20:40:10Z",
        "updatedAt" : "2020-07-06T21:33:06Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "c6bfbc57-67b3-4bb4-88c9-2583cdd1c8c8",
        "parentId" : "9c346505-b10e-4b3c-b91f-6ecbdfda470f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok sure on the asv.\r\n\r\nI think you can convert the mask view to a np.take operation (but can always just add an issue for this) if needed",
        "createdAt" : "2020-06-26T21:21:44Z",
        "updatedAt" : "2020-07-06T21:33:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1debd809d7b1406ed0ffd8711ad2957cc4e9a664",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +1782,1786 @@    last_result = vals[0]\n\n    for i in range(N):\n        is_not_nan = vals[i] == vals[i]\n        num_not_nan += is_not_nan"
  },
  {
    "id" : "07c0468d-7990-4190-bcf3-4e69488dac29",
    "prId" : 36567,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36567#pullrequestreview-497105580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b2a6687-cc39-4aae-a5d4-4eacc46c533f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this new? ok but can you add a comment",
        "createdAt" : "2020-09-27T19:34:49Z",
        "updatedAt" : "2020-10-09T20:07:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e23d1452-e8d2-48cd-ac20-11d2151b40fc",
        "parentId" : "1b2a6687-cc39-4aae-a5d4-4eacc46c533f",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Sure, turns out var/std doesn't use Kahan Summation so using the variable algorithm has a small numerical imprecision",
        "createdAt" : "2020-09-27T19:42:41Z",
        "updatedAt" : "2020-10-09T20:07:15Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "32667ba8d73cf2dc28223f4077f37eea4d0f1347",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +303,307 @@            # Fix for numerical imprecision.\n            # Can be result < 0 once Kahan Summation is implemented\n            if result < 1e-15:\n                result = 0\n    else:"
  }
]