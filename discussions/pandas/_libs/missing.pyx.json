[
  {
    "id" : "8e135884-1541-43a3-87dd-911ac07300c9",
    "prId" : 18357,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18357#pullrequestreview-77649768",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bd9362a-2ab8-4aa6-a805-574565038bca",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a reason for not pulling in ``util._checknull`` here as well, as seems logical? (or just future PR)",
        "createdAt" : "2017-11-19T15:11:08Z",
        "updatedAt" : "2017-11-22T17:49:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bb47cf49-0edb-4cdf-9f3c-13f6c6cedb0b",
        "parentId" : "8bd9362a-2ab8-4aa6-a805-574565038bca",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "You mean defining it here instead of in `util`?  Or importing it into the namespace?  I'd be +1 on the former, indifferent to the latter.",
        "createdAt" : "2017-11-19T17:06:57Z",
        "updatedAt" : "2017-11-22T17:49:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b82020cd-a3f0-4fa0-8fc1-2f21ee36c9c3",
        "parentId" : "8bd9362a-2ab8-4aa6-a805-574565038bca",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think for sure *should* define it here. but then this puts missing as a dep of things like hashing.pyx. ok with it being a dep of any of the tslibs though.\r\n\r\n```\r\n(pandas) bash-3.2$ find pandas -name '*.pyx' | xargs grep _checknull\r\npandas/_libs/hashing.pyx:from util cimport _checknull\r\npandas/_libs/hashing.pyx:        elif _checknull(val):\r\npandas/_libs/interval.pyx:        if util._checknull(interval):\r\npandas/_libs/lib.pyx:from util cimport is_array, _checknull, _checknan\r\npandas/_libs/lib.pyx:        return _checknull(val)\r\npandas/_libs/lib.pyx:        return _checknull(val)\r\npandas/_libs/lib.pyx:        result[i] = val is NaT or util._checknull_old(val)\r\npandas/_libs/lib.pyx:                _checknull(x) and _checknull(y)):\r\npandas/_libs/lib.pyx:    if _checknull(val):\r\npandas/_libs/lib.pyx:        if _checknull(x):\r\npandas/_libs/lib.pyx:            if _checknull(x):\r\npandas/_libs/lib.pyx:            elif _checknull(y):\r\npandas/_libs/src/inference.pyx:        if util._checknull(val):\r\npandas/_libs/src/inference.pyx:        elif util._checknull(v):\r\npandas/_libs/src/inference.pyx:    if util._checknull(v):\r\npandas/_libs/src/inference.pyx:    if util._checknull(v):\r\npandas/_libs/src/inference.pyx:    if util._checknull(v):\r\npandas/_libs/src/inference.pyx:    if util._checknull(v):\r\npandas/_libs/src/inference.pyx:        return util._checknull(value)\r\npandas/_libs/src/inference.pyx:            bint is_generic_null = util._checknull(value)\r\npandas/_libs/tslib.pyx:from tslibs.nattype cimport _checknull_with_nat, NPY_NAT\r\npandas/_libs/tslib.pyx:        if _checknull_with_nat(val):\r\npandas/_libs/tslib.pyx:            if _checknull_with_nat(val):\r\npandas/_libs/tslib.pyx:        if _checknull_with_nat(val):\r\npandas/_libs/tslib.pyx:            if _checknull_with_nat(val):\r\npandas/_libs/tslib.pyx:            if _checknull_with_nat(val):\r\npandas/_libs/tslib.pyx:            if _checknull_with_nat(val):\r\npandas/_libs/tslibs/nattype.pyx:cdef inline bint _checknull_with_nat(object val):\r\npandas/_libs/tslibs/strptime.pyx:from nattype cimport _checknull_with_nat, NPY_NAT\r\npandas/_libs/tslibs/strptime.pyx:            if _checknull_with_nat(val):\r\npandas/_libs/tslibs/timedeltas.pyx:from nattype cimport _checknull_with_nat, NPY_NAT\r\npandas/_libs/tslibs/timedeltas.pyx:    if _checknull_with_nat(ts):\r\npandas/_libs/tslibs/timedeltas.pyx:    if _checknull_with_nat(other):\r\npandas/_libs/tslibs/timedeltas.pyx:        elif _checknull_with_nat(value):\r\n```",
        "createdAt" : "2017-11-19T17:11:18Z",
        "updatedAt" : "2017-11-22T17:49:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a7032623-7489-4063-8482-77b9fe5cb25a",
        "parentId" : "8bd9362a-2ab8-4aa6-a805-574565038bca",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "If we're moving util._checknull anyway, I'd advocate renaming it to e.g. `check_none_or_nan`",
        "createdAt" : "2017-11-19T17:11:54Z",
        "updatedAt" : "2017-11-22T17:49:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "52173b5e-199b-4259-9f0f-7ee6dcc84cac",
        "parentId" : "8bd9362a-2ab8-4aa6-a805-574565038bca",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure",
        "createdAt" : "2017-11-19T17:13:56Z",
        "updatedAt" : "2017-11-22T17:49:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5bd0841b-b689-4a2e-b469-044e70c17513",
        "parentId" : "8bd9362a-2ab8-4aa6-a805-574565038bca",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> I think for sure should define it here. but then this puts missing as a dep of things like hashing.pyx. ok with it being a dep of any of the tslibs though.\r\n\r\nI'll take a look and see which util funcs can be moved without messing with dependencies.\r\n\r\nFWIW this PR already adds missing to the 'pxdfiles` key of hashtable, which cimports missing.checknull.  Previously it was an un-declared dependency on lib.",
        "createdAt" : "2017-11-19T17:26:18Z",
        "updatedAt" : "2017-11-22T17:49:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3ed4f96d-163f-49d7-9787-16ff243e5ee3",
        "parentId" : "8bd9362a-2ab8-4aa6-a805-574565038bca",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Looks like util._checknull_old can be moved to missing (is used there once, nowhere else).  Let's saving util._checknull for later, since it is used in a bunch of places.",
        "createdAt" : "2017-11-19T17:34:30Z",
        "updatedAt" : "2017-11-22T17:49:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e387eb8a-3a8b-4ff9-aa95-fb728f235a50",
        "parentId" : "8bd9362a-2ab8-4aa6-a805-574565038bca",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok with leaving these for later as well",
        "createdAt" : "2017-11-19T17:35:35Z",
        "updatedAt" : "2017-11-22T17:49:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bcc4f338-ae83-4c30-a8cf-8264b0f267c7",
        "parentId" : "8bd9362a-2ab8-4aa6-a805-574565038bca",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Sounds good.  Just pushed commit with docstrings.",
        "createdAt" : "2017-11-19T17:51:39Z",
        "updatedAt" : "2017-11-22T17:49:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e94e01fa8d2022650a85023183df7a2680261ec3",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +90,94 @@    elif util.is_array(val):\n        return False\n    else:\n        return util._checknull(val)\n"
  },
  {
    "id" : "1f9d3760-1d48-44f0-8582-cf1cd08bc7ab",
    "prId" : 29597,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29597#pullrequestreview-316757157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "428733bb-260f-4ea1-b1f0-52de54f48818",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I didn't move this into is_null_datetimelike (where all other checks happen), as right now the tslibs/nattype do not depend on missing.pyx or something from lib.pyx, and this might be on purpose?",
        "createdAt" : "2019-11-13T21:39:09Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6b5e77cc-0911-4aa9-ada0-b24e00dfac0d",
        "parentId" : "428733bb-260f-4ea1-b1f0-52de54f48818",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> right now the tslibs/nattype do not depend on missing.pyx or something from lib.pyx, and this might be on purpose?\r\n\r\nVery much on purpose.  missing.pyx depends on nattype.pyx, and im saying it will need to depend on [wherever you're defining pd.NA] too.  ",
        "createdAt" : "2019-11-13T22:33:11Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "52280339-e9f3-4aed-bcac-d517804fa982",
        "parentId" : "428733bb-260f-4ea1-b1f0-52de54f48818",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "(now that ti look at this in the context of the diff its clear you already did what i had in mind)",
        "createdAt" : "2019-11-13T22:34:25Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "afdaa3d1-702d-4ca1-82b7-02cab3f019fe",
        "parentId" : "428733bb-260f-4ea1-b1f0-52de54f48818",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> Very much on purpose. missing.pyx depends on nattype.pyx, and im saying it will need to depend on [wherever you're defining pd.NA] too.\r\n\r\nThe long term problem, though, is to have `is_null_datetimelike` to recognize NA, it will need to depend on something (eg missing.pyx) outside of tslibs (as it would be strange to define NA in tslibs). \r\nNow, in practice, `is_null_datetimelike` is only used in period.pyx, so not a big priority to have NA working there.",
        "createdAt" : "2019-11-14T07:37:16Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "589a961100f6e2674dd6101a5e4cde8edf31fd03",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +47,51 @@    does *not* consider INF or NEGINF to be NA.\n    \"\"\"\n    return val is C_NA or is_null_datetimelike(val, inat_is_null=False)\n\n"
  },
  {
    "id" : "8b988972-aa57-4250-91c4-a1359a0c411b",
    "prId" : 29597,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29597#pullrequestreview-317172493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ba33b05-0c82-4fb4-b44e-4557de7d6cea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you indicate that this is a singleton",
        "createdAt" : "2019-11-14T16:01:10Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "50f98399-b294-4654-b1aa-f278a6f116b7",
        "parentId" : "3ba33b05-0c82-4fb4-b44e-4557de7d6cea",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Expanded the docstring a bit\r\n\r\n(still need to add a section to the user guide, and can then link to there as well)",
        "createdAt" : "2019-11-14T18:44:31Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "589a961100f6e2674dd6101a5e4cde8edf31fd03",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +326,330 @@    The NA singleton is a missing value indicator defined by pandas. It is\n    used in certain new extension dtypes (currently the \"string\" dtype).\n    \"\"\"\n\n    _instance = None"
  },
  {
    "id" : "1f7aa84c-4fe3-4774-a5b5-03d744a4a94c",
    "prId" : 29597,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29597#pullrequestreview-317106264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0039b74e-066d-41a9-a9c2-d36cfdb2dd55",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "test for this?",
        "createdAt" : "2019-11-14T16:01:31Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f84fc7ac-27ff-4962-a139-4c6031188631",
        "parentId" : "0039b74e-066d-41a9-a9c2-d36cfdb2dd55",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "See `test_thruthiness` at https://github.com/pandas-dev/pandas/pull/29597/files#diff-f9e49517f4c860fedd8d5be50921a2acR23",
        "createdAt" : "2019-11-14T16:50:18Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "589a961100f6e2674dd6101a5e4cde8edf31fd03",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +342,346 @@\n    def __bool__(self):\n        raise TypeError(\"boolean value of NA is ambiguous\")\n\n    def __hash__(self):"
  },
  {
    "id" : "17254956-e0a9-4345-b070-b0d62afd7131",
    "prId" : 29597,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29597#pullrequestreview-317172493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e9d68ce-119c-4f7c-b24b-7a5e8b545cf7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string for these? (auto-construct is ok)",
        "createdAt" : "2019-11-14T16:01:54Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "efb8ff79-5e2d-4100-9644-bd8586445452",
        "parentId" : "7e9d68ce-119c-4f7c-b24b-7a5e8b545cf7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is only for dunder methods, so not a docstring that users typically see? (eg the Series dunder methods also have no docstring) ",
        "createdAt" : "2019-11-14T18:50:10Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "589a961100f6e2674dd6101a5e4cde8edf31fd03",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +306,310 @@        return NA\n\n    method.__name__ = name\n    return method\n"
  },
  {
    "id" : "c9825043-6738-4211-bfca-6c86976267df",
    "prId" : 29597,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29597#pullrequestreview-322619136",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0088317f-65e6-44a9-96af-45890e6be0f0",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "all of these checks should be for C_NA",
        "createdAt" : "2019-11-25T17:05:30Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bdac8724-78b5-487b-92aa-fb783d51ab38",
        "parentId" : "0088317f-65e6-44a9-96af-45890e6be0f0",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is that a style or performance thing? We alias `NA = C_NA` at https://github.com/pandas-dev/pandas/pull/29597/files#diff-c4b0cf199cc6d5bc2362ceb737159458R416",
        "createdAt" : "2019-11-25T17:08:10Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a6e16c08-bfda-4f22-9fec-1787ba61408a",
        "parentId" : "0088317f-65e6-44a9-96af-45890e6be0f0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "performance.  Checking for NA requires a python-space lookup in the module namespace.  Checking for C_NA is a pointer comparison",
        "createdAt" : "2019-11-25T17:12:35Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "93f351de-b63f-4961-b793-7be0486c10f0",
        "parentId" : "0088317f-65e6-44a9-96af-45890e6be0f0",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Thanks. For my own understanding, that's true even though `NA` is aliased in this module to `C_NA`?",
        "createdAt" : "2019-11-25T17:20:28Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "05de78e3-e169-49f8-b4f8-1feb9ffc8915",
        "parentId" : "0088317f-65e6-44a9-96af-45890e6be0f0",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I don't see any notable difference in timings if I go back and forth a few times between this. But it's in the nanoseconds anyway, so probably timing that on my laptop with ``%timeit`` is too noisy to see the effect.",
        "createdAt" : "2019-11-25T17:52:56Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "52602d36-6703-40bc-a109-a5104cefbe18",
        "parentId" : "0088317f-65e6-44a9-96af-45890e6be0f0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Thanks. For my own understanding, that's true even though NA is aliased in this module to C_NA?\r\n\r\nYes.  Nothing prevents a user from doing `pd._libs.missing.NA = 4`, so the compiled cython still has to lookup NA in the namespace every time.  With C_NA the user can't override it, so the check can be optimized.",
        "createdAt" : "2019-11-25T22:25:04Z",
        "updatedAt" : "2019-11-28T12:30:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "589a961100f6e2674dd6101a5e4cde8edf31fd03",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +407,411 @@    def __xor__(self, other):\n        if other is False or other is True or other is C_NA:\n            return NA\n        return NotImplemented\n"
  },
  {
    "id" : "107d2de6-59d5-4a11-a2c1-f9c2e1eb6a7f",
    "prId" : 30245,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30245#pullrequestreview-338412320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c0a0752-2af1-479c-96e0-55edb00abb25",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This seems a bit strange, but I suppose it is to follow numpy behaviour of 0-dim arrays returning scalars from comparison operations? (if so, maybe add a comment about that)",
        "createdAt" : "2019-12-18T12:50:11Z",
        "updatedAt" : "2020-01-05T19:57:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "667bf649-45f1-4c20-ac9b-e750b15aeadf",
        "parentId" : "7c0a0752-2af1-479c-96e0-55edb00abb25",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "> to follow numpy behaviour of 0-dim arrays returning scalars from comparison operations?\r\n\r\nIt's to NumPy scalars. Without this, we'd have\r\n\r\n```python\r\nnp.int64(1) == pd.NA\r\n```\r\n\r\nraise with\r\n\r\n```pytb\r\n>   out[:] = NA\r\nE   IndexError: too many indices for array\r\n```\r\n",
        "createdAt" : "2019-12-20T12:37:24Z",
        "updatedAt" : "2020-01-05T19:57:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "b5c15ba9-e40b-4b2e-9984-40f8c11c6738",
        "parentId" : "7c0a0752-2af1-479c-96e0-55edb00abb25",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "A numpy scalar (which is different from a 0-dim array) is not a ndarray, so wouldn't pass the `isinstance(other, np.ndarray)` test. So I don't fully understand how that example is related.",
        "createdAt" : "2019-12-21T09:50:51Z",
        "updatedAt" : "2020-01-05T19:57:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "76005ca4-c5ea-42df-b927-cca4ae359373",
        "parentId" : "7c0a0752-2af1-479c-96e0-55edb00abb25",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "could call lib.item_from_zerodim at the top?",
        "createdAt" : "2019-12-31T20:20:58Z",
        "updatedAt" : "2020-01-05T19:57:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f81d502b-e67e-4c83-883e-8ab9ec152986",
        "parentId" : "7c0a0752-2af1-479c-96e0-55edb00abb25",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@TomAugspurger can you check this thread? I still don't understand how this relates to scalars, as they shouldn't pass the `isinstance(other, np.ndarray)` check. So not sure the below comment is correct.",
        "createdAt" : "2020-01-01T20:26:05Z",
        "updatedAt" : "2020-01-05T19:57:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7d7e632f-b146-41e9-ad46-c5848c88c48c",
        "parentId" : "7c0a0752-2af1-479c-96e0-55edb00abb25",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "With this\r\n\r\n```diff\r\ndiff --git a/pandas/_libs/missing.pyx b/pandas/_libs/missing.pyx\r\nindex 8d4d2c5568..e2bb6448cd 100644\r\n--- a/pandas/_libs/missing.pyx\r\n+++ b/pandas/_libs/missing.pyx\r\n@@ -295,8 +295,7 @@ def _create_binary_propagating_op(name, is_divmod=False):\r\n \r\n     def method(self, other):\r\n         if (other is C_NA or isinstance(other, str)\r\n-                or isinstance(other, (numbers.Number, np.bool_))\r\n-                or isinstance(other, np.ndarray) and not other.shape):\r\n+                or isinstance(other, (numbers.Number, np.bool_))):\r\n             # Need the other.shape clause to handle NumPy scalars,\r\n             # since we do a setitem on `out` below, which\r\n             # won't work for NumPy scalars.\r\n```\r\n\r\nI have\r\n\r\n```pytb\r\nIn [3]: np.int64(1) == pd.NA\r\n/Users/taugspurger/.virtualenvs/pandas-dev/bin/ipython:1: DeprecationWarning: elementwise comparison failed; this will raise an error in the future.\r\n  #!/Users/taugspurger/Envs/pandas-dev/bin/python\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n<ipython-input-3-209227154583> in <module>\r\n----> 1 np.int64(1) == pd.NA\r\n\r\n~/sandbox/pandas/pandas/_libs/missing.pyx in pandas._libs.missing._create_binary_propagating_op.method()\r\n    307         elif isinstance(other, np.ndarray):\r\n    308             out = np.empty(other.shape, dtype=object)\r\n--> 309             out[:] = NA\r\n    310\r\n    311             if is_divmod:\r\n\r\nIndexError: too many indices for array\r\n```\r\n\r\nSo when we get there, it really does seem like `np.int64(1)` is an ndarray. Is cython doing something?",
        "createdAt" : "2020-01-02T13:21:59Z",
        "updatedAt" : "2020-01-05T19:57:51Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "6b59b8bf-4019-4a92-b3c3-3e53b51730b5",
        "parentId" : "7c0a0752-2af1-479c-96e0-55edb00abb25",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> So when we get there, it really does seem like np.int64(1) is an ndarray. Is cython doing something?\r\n\r\nPossibly, no idea. But I trust you this is indeed needed to get it working ",
        "createdAt" : "2020-01-05T17:31:23Z",
        "updatedAt" : "2020-01-05T19:57:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c30bb47d969d2b778cc55c4b210e85938ce4e67",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +297,301 @@        if (other is C_NA or isinstance(other, str)\n                or isinstance(other, (numbers.Number, np.bool_))\n                or isinstance(other, np.ndarray) and not other.shape):\n            # Need the other.shape clause to handle NumPy scalars,\n            # since we do a setitem on `out` below, which"
  },
  {
    "id" : "05717629-01fc-4912-a190-23393622b99f",
    "prId" : 30245,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30245#pullrequestreview-336012889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d24009a-170f-4f72-8118-03041463bc85",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "util.is_bool_object for the second one of these.  Is numbers.Number something like Union[float, int, complex] that we could use the optimizied funcs for?\r\n\r\nutil.is_array for the isinstance(other, np.ndarray) check.  Even though it is syntactically OK without extra parens, can you put a pair around the isinstance+shape check",
        "createdAt" : "2019-12-21T19:48:33Z",
        "updatedAt" : "2020-01-05T19:57:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "04e3e189-feb7-4590-9597-8830dcdfacd9",
        "parentId" : "7d24009a-170f-4f72-8118-03041463bc85",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Numbers is appropriate since it’s an ABC others can register on. ",
        "createdAt" : "2019-12-22T16:32:47Z",
        "updatedAt" : "2020-01-05T19:57:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "72ab861e-5f90-4735-888f-63cbe9cb41ef",
        "parentId" : "7d24009a-170f-4f72-8118-03041463bc85",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I personally prefer the explicit `isinstance` checks here. It is already complex to fully oversee what types are handled, and using those helper methods only makes it more opaque.",
        "createdAt" : "2019-12-22T16:47:07Z",
        "updatedAt" : "2020-01-05T19:57:50Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ad55fc3e-ee47-4395-b29a-f0b2fbd0e4d8",
        "parentId" : "7d24009a-170f-4f72-8118-03041463bc85",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "in general i agree, but in the cython code we generally lean towards optimizing harder.  no strong opinion.",
        "createdAt" : "2019-12-23T20:41:03Z",
        "updatedAt" : "2020-01-05T19:57:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "934589bc-c067-43bb-94d5-329b4af9e1ac",
        "parentId" : "7d24009a-170f-4f72-8118-03041463bc85",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "That's also a good point (cython does not optimize those automatically like that I suppose?). But note that this is not the most performance sensitive code (it's not in the inner loop of a vectorized operation or so)",
        "createdAt" : "2019-12-23T21:17:32Z",
        "updatedAt" : "2020-01-05T19:57:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c30bb47d969d2b778cc55c4b210e85938ce4e67",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +296,300 @@    def method(self, other):\n        if (other is C_NA or isinstance(other, str)\n                or isinstance(other, (numbers.Number, np.bool_))\n                or isinstance(other, np.ndarray) and not other.shape):\n            # Need the other.shape clause to handle NumPy scalars,"
  },
  {
    "id" : "545036f1-6085-4c5c-948e-cf5ae44336fb",
    "prId" : 30245,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30245#pullrequestreview-335659266",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "372564dd-e7bf-4473-915f-ff1e804e0947",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can `divmod` be changed to `is_divmod`?  dont want to overlap with built-in names",
        "createdAt" : "2019-12-21T19:49:33Z",
        "updatedAt" : "2020-01-05T19:57:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5eb5984d-62ef-4d82-8dae-8d89a542285d",
        "parentId" : "372564dd-e7bf-4473-915f-ff1e804e0947",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Did I define that here or is it called that on master?",
        "createdAt" : "2019-12-22T16:34:20Z",
        "updatedAt" : "2020-01-05T19:57:50Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5702557b-98a4-4a18-b178-8dff1145105f",
        "parentId" : "372564dd-e7bf-4473-915f-ff1e804e0947",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "its like that on master too, still should be changed.  OK for separate PR if thats a hassle",
        "createdAt" : "2019-12-22T16:37:44Z",
        "updatedAt" : "2020-01-05T19:57:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c30bb47d969d2b778cc55c4b210e85938ce4e67",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +293,297 @@\ndef _create_binary_propagating_op(name, is_divmod=False):\n\n    def method(self, other):\n        if (other is C_NA or isinstance(other, str)"
  },
  {
    "id" : "599d3f9c-fb1b-4bfb-8375-7a8d2ea37449",
    "prId" : 30245,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30245#pullrequestreview-337496833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aee704f8-c503-4ac4-a714-1341d3c50211",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "looks like we should have 482 or 483 but not both?",
        "createdAt" : "2020-01-01T17:05:24Z",
        "updatedAt" : "2020-01-05T19:57:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c30bb47d969d2b778cc55c4b210e85938ce4e67",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +480,484 @@                result = result.item()\n            if ufunc.nout > 1:\n                result = (NA,) * ufunc.nout\n\n        return result"
  }
]