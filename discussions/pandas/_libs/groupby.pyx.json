[
  {
    "id" : "8458c0fe-d141-43b8-ab75-fc152df38fff",
    "prId" : 18086,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18086#pullrequestreview-75967736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ea26e80-d8a0-439e-acb2-66f6cbf14290",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't add extraneous things, ok for now",
        "createdAt" : "2017-11-12T18:50:03Z",
        "updatedAt" : "2017-11-12T19:04:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3c090095-4620-4656-8042-9f29d32a09e6",
        "parentId" : "6ea26e80-d8a0-439e-acb2-66f6cbf14290",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This was a dummy commit to force the CI on a TestClipboard failure.",
        "createdAt" : "2017-11-12T19:00:25Z",
        "updatedAt" : "2017-11-12T19:04:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fa05bd68c8cb2a794b1d39f392ca4f4c8ef26c1",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@# -*- coding: utf-8 -*-\n# cython: profile=False\n"
  },
  {
    "id" : "0aa7b6ec-3910-4733-9d7c-759055e687ba",
    "prId" : 19481,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19481#pullrequestreview-94930816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f7ba65b-ae6a-4e59-ae27-ec81aa039e6f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe import directly as the name of the enum?\r\n\r\ncan you also share this name with the non-grouping rank functions?",
        "createdAt" : "2018-02-07T12:37:16Z",
        "updatedAt" : "2018-02-09T18:37:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c11bc1e1-bd14-4904-9a78-40dc823e22f0",
        "parentId" : "1f7ba65b-ae6a-4e59-ae27-ec81aa039e6f",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I tried this back in d09268b1 but all of the Py27 builds failed as a result with the error below (py3 was fine). Tried digging up info but couldn't find anything - any chance you've seen this before?\r\n\r\n```bash\r\n\r\ncythoning pandas/_libs/groupby.pyx to pandas/_libs/groupby.c\r\n\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\n\r\n        if keep_na and (values[_as[i], 0] != values[_as[i], 0]):\r\n            grp_na_count += 1\r\n            out[_as[i], 0] = np.nan\r\n        else:\r\n            if tiebreak == TiebreakEnumType.TIEBREAK_AVERAGE:\r\n                                          ^\r\n------------------------------------------------------------\r\n\r\npandas/_libs/groupby.pyx:178:43: Compiler crash in AnalyseExpressionsTransform\r\n\r\nModuleNode.body = StatListNode(groupby.pyx:4:0)\r\nStatListNode.stats[16] = StatListNode(groupby.pyx:125:0)\r\nStatListNode.stats[0] = CompilerDirectivesNode(groupby.pyx:125:0)\r\nCompilerDirectivesNode.body = StatListNode(groupby.pyx:125:0)\r\nStatListNode.stats[0] = DefNode(groupby.pyx:125:0,\r\n    doc = u'\\n    Only transforms on axis=0\\n    ',\r\n    modifiers = [...]/0,\r\n    name = u'group_rank_object',\r\n    num_required_args = 8,\r\n    py_wrapper_required = True,\r\n    reqd_kw_flags_cname = '0',\r\n    used = True)\r\nFile 'Nodes.py', line 430, in analyse_expressions: StatListNode(groupby.pyx:130:4)\r\nFile 'Nodes.py', line 430, in analyse_expressions: StatListNode(groupby.pyx:170:4)\r\nFile 'Nodes.py', line 6181, in analyse_expressions: ForInStatNode(groupby.pyx:170:4)\r\nFile 'Nodes.py', line 430, in analyse_expressions: StatListNode(groupby.pyx:171:8)\r\nFile 'Nodes.py', line 5842, in analyse_expressions: IfStatNode(groupby.pyx:174:8)\r\nFile 'Nodes.py', line 430, in analyse_expressions: StatListNode(groupby.pyx:178:12)\r\nFile 'Nodes.py', line 5840, in analyse_expressions: IfStatNode(groupby.pyx:178:12)\r\nFile 'Nodes.py', line 5885, in analyse_expressions: IfClauseNode(groupby.pyx:178:15)\r\nFile 'ExprNodes.py', line 541, in analyse_temp_boolean_expression: PrimaryCmpNode(groupby.pyx:178:24,\r\n    operator = u'==',\r\n    result_is_used = True,\r\n    use_managed_ref = True)\r\nFile 'ExprNodes.py', line 11893, in analyse_types: PrimaryCmpNode(groupby.pyx:178:24,\r\n    operator = u'==',\r\n    result_is_used = True,\r\n    use_managed_ref = True)\r\nFile 'ExprNodes.py', line 6329, in analyse_types: AttributeNode(groupby.pyx:178:43,\r\n    attribute = u'TIEBREAK_AVERAGE',\r\n    initialized_check = True,\r\n    is_attribute = 1,\r\n    needs_none_check = True,\r\n    result_is_used = True,\r\n    use_managed_ref = True)\r\nFile 'ExprNodes.py', line 6395, in analyse_as_type_attribute: AttributeNode(groupby.pyx:178:43,\r\n    attribute = u'TIEBREAK_AVERAGE',\r\n    initialized_check = True,\r\n    is_attribute = 1,\r\n    needs_none_check = True,\r\n    result_is_used = True,\r\n    use_managed_ref = True)\r\nFile 'ExprNodes.py', line 6438, in as_name_node: AttributeNode(groupby.pyx:178:43,\r\n    attribute = u'TIEBREAK_AVERAGE',\r\n    initialized_check = True,\r\n    is_attribute = 1,\r\n    needs_none_check = True,\r\n    result_is_used = True,\r\n    use_managed_ref = True)\r\nFile 'ExprNodes.py', line 1906, in analyse_rvalue_entry: NameNode(groupby.pyx:178:43,\r\n    cf_maybe_null = True,\r\n    is_name = True,\r\n    name = u'TIEBREAK_AVERAGE',\r\n    result_is_used = True,\r\n    use_managed_ref = True)\r\nFile 'ExprNodes.py', line 1939, in analyse_entry: NameNode(groupby.pyx:178:43,\r\n    cf_maybe_null = True,\r\n    is_name = True,\r\n    name = u'TIEBREAK_AVERAGE',\r\n    result_is_used = True,\r\n    use_managed_ref = True)\r\nFile 'ExprNodes.py', line 1953, in check_identifier_kind: NameNode(groupby.pyx:178:43,\r\n    cf_maybe_null = True,\r\n    is_name = True,\r\n    name = u'TIEBREAK_AVERAGE',\r\n    result_is_used = True,\r\n    use_managed_ref = True)\r\n\r\nCompiler crash traceback from this point on:\r\n  File \"/Users/williamayd/miniconda3/envs/pandas_dev2/lib/python2.7/site-packages/Cython/Compiler/ExprNodes.py\", line 1953, in check_identifier_kind\r\n    if entry.is_type and entry.type.is_extension_type:\r\nAttributeError: 'NoneType' object has no attribute 'is_type'\r\n\r\n```",
        "createdAt" : "2018-02-07T16:26:34Z",
        "updatedAt" : "2018-02-09T18:37:11Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a3b4fe84-e695-4b38-9ee6-15ae900f7b04",
        "parentId" : "1f7ba65b-ae6a-4e59-ae27-ec81aa039e6f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "thats annoying. havne't seen that ",
        "createdAt" : "2018-02-08T01:22:02Z",
        "updatedAt" : "2018-02-09T18:37:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4578d78e5d4feaf6a8a3caac51acf7d2ebc112",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +17,21 @@\nfrom util cimport numeric, get_nat\nfrom algos cimport (swap, TiebreakEnumType, TIEBREAK_AVERAGE, TIEBREAK_MIN,\n                    TIEBREAK_MAX, TIEBREAK_FIRST, TIEBREAK_DENSE)\nfrom algos import take_2d_axis1_float64_float64, groupsort_indexer, tiebreakers"
  },
  {
    "id" : "6f7eb07b-9c5f-4d17-bf6b-4932adf12d64",
    "prId" : 24954,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24954#pullrequestreview-199796741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64e22898-959f-4c36-9e69-c5a68f8e26f8",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Do we still need these? Thought from a previous comment that they weren't required\r\n\r\nSide note - I see you've been force pushing changes. If you merge master you can push without forcing, which typically does a better job of maintaining comment history",
        "createdAt" : "2019-02-04T19:47:33Z",
        "updatedAt" : "2019-02-04T19:47:38Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "6d2799dc-7ecd-4c77-9e15-1c6876066085",
        "parentId" : "64e22898-959f-4c36-9e69-c5a68f8e26f8",
        "authorId" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "body" : "Yes, they are still needed (to avoid changing the code calling this function). atleast until some logic to handle int64_t differently is added to the _group_add function.\r\n\r\nI force push to keep only 1 commit (avoid the bloat).\r\nI can add commits and squash before merging, do you think that's better? ",
        "createdAt" : "2019-02-04T23:18:09Z",
        "updatedAt" : "2019-02-07T14:27:52Z",
        "lastEditedBy" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "tags" : [
        ]
      }
    ],
    "commit" : "937e44cb2aca62ffb828bd8c05d976b4630fb1c8",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +431,435 @@\n\ngroup_add_float32 = _group_add['float']\ngroup_add_float64 = _group_add['double']\n"
  },
  {
    "id" : "210a4bdb-33fe-46c4-adf2-1d977588169a",
    "prId" : 24954,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24954#pullrequestreview-199796741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d275003-413e-4729-b946-d57ba9464710",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Unrelated to this PR but I see there are some functions at the end of the template file which have been converted to fused types but still remain in the template file. Could make sense to move them here as well (separate PR)",
        "createdAt" : "2019-02-04T19:48:39Z",
        "updatedAt" : "2019-02-04T19:48:39Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "2f18b85b-24ca-4be7-b6b4-48afd1ee15a8",
        "parentId" : "6d275003-413e-4729-b946-d57ba9464710",
        "authorId" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "body" : "I'll take a look at that (for next PR). thanks.",
        "createdAt" : "2019-02-04T20:41:39Z",
        "updatedAt" : "2019-02-07T14:27:52Z",
        "lastEditedBy" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "tags" : [
        ]
      },
      {
        "id" : "b968433b-9c19-4b22-b436-6b5a0de5ebe7",
        "parentId" : "6d275003-413e-4729-b946-d57ba9464710",
        "authorId" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "body" : "@WillAyd which functions did you find that are unnecessary? I couldn't find any.",
        "createdAt" : "2019-02-04T23:16:35Z",
        "updatedAt" : "2019-02-07T14:27:52Z",
        "lastEditedBy" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "tags" : [
        ]
      }
    ],
    "commit" : "937e44cb2aca62ffb828bd8c05d976b4630fb1c8",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +386,390 @@@cython.wraparound(False)\n@cython.boundscheck(False)\ndef _group_add(floating[:, :] out,\n               int64_t[:] counts,\n               floating[:, :] values,"
  },
  {
    "id" : "9c0b1487-194a-4528-bccc-52dd515be51d",
    "prId" : 24954,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24954#pullrequestreview-200403356",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d009ff93-8a9e-4747-baf6-3fe303f6b59e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "just call this group_add",
        "createdAt" : "2019-02-06T03:39:57Z",
        "updatedAt" : "2019-02-06T03:41:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "937e44cb2aca62ffb828bd8c05d976b4630fb1c8",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +386,390 @@@cython.wraparound(False)\n@cython.boundscheck(False)\ndef _group_add(floating[:, :] out,\n               int64_t[:] counts,\n               floating[:, :] values,"
  },
  {
    "id" : "fd27fca2-c2a5-4962-aee2-62b70d30049c",
    "prId" : 25249,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25249#pullrequestreview-202299181",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47725843-d7de-467a-9db0-74ab36c8665f",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "!=",
        "createdAt" : "2019-02-09T20:25:59Z",
        "updatedAt" : "2019-02-11T18:51:42Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "346214ab-dab9-4374-9e16-a990eabac6cc",
        "parentId" : "47725843-d7de-467a-9db0-74ab36c8665f",
        "authorId" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "body" : "I made the minimum amount of changes when I refactored from tempita to fused types.\r\n\r\nSo just to make sure, you would like me to take this opportunity to the fix small issues inside the functions themselves?",
        "createdAt" : "2019-02-09T21:06:21Z",
        "updatedAt" : "2019-02-11T18:51:42Z",
        "lastEditedBy" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "tags" : [
        ]
      },
      {
        "id" : "e7a7404b-1f2e-48e0-b13a-9a0c86357e39",
        "parentId" : "47725843-d7de-467a-9db0-74ab36c8665f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes please.  Be sure to comment to point out where you have made changes.",
        "createdAt" : "2019-02-11T02:18:31Z",
        "updatedAt" : "2019-02-11T18:51:43Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "69e9b140-a1c2-46cf-a45e-54f39fc0491d",
        "parentId" : "47725843-d7de-467a-9db0-74ab36c8665f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "generally when moving large blocks of code best to just move them and not make any other changes. generally prefer to just have these changes in a followup; if very small ok though.",
        "createdAt" : "2019-02-11T13:12:04Z",
        "updatedAt" : "2019-02-11T18:51:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1a2078ed-f48f-4763-9c5e-f011390eeccf",
        "parentId" : "47725843-d7de-467a-9db0-74ab36c8665f",
        "authorId" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "body" : "Fixed.",
        "createdAt" : "2019-02-11T19:38:18Z",
        "updatedAt" : "2019-02-11T19:38:18Z",
        "lastEditedBy" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cb991b7c6b778ab9036529b4b0b27450644fb51",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +453,457 @@        floating[:, :] prodx, nobs\n\n    if not len(values) == len(labels):\n        raise AssertionError(\"len(index) != len(labels)\")\n"
  },
  {
    "id" : "86a8b015-4fd9-4241-bd0c-7d24eecd41c1",
    "prId" : 25249,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25249#pullrequestreview-201938692",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37b2cc82-c162-41c9-bb22-3f7aa83d912a",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Is this overflow safe?",
        "createdAt" : "2019-02-09T20:28:45Z",
        "updatedAt" : "2019-02-11T18:51:42Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3e17a35f-abdc-4ae8-8612-ffaa4164114c",
        "parentId" : "37b2cc82-c162-41c9-bb22-3f7aa83d912a",
        "authorId" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "body" : "I am not sure, kept the same logic as was in tempita.",
        "createdAt" : "2019-02-09T21:10:27Z",
        "updatedAt" : "2019-02-11T18:51:43Z",
        "lastEditedBy" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "tags" : [
        ]
      },
      {
        "id" : "38a51570-33b2-4db4-b1fc-8a5789473d1d",
        "parentId" : "37b2cc82-c162-41c9-bb22-3f7aa83d912a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "OK.  Definitely not something to worry about for this PR.  Ditto with the performance in the variance calculation.",
        "createdAt" : "2019-02-11T02:21:32Z",
        "updatedAt" : "2019-02-11T18:51:43Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cb991b7c6b778ab9036529b4b0b27450644fb51",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +474,478 @@                if val == val:\n                    nobs[lab, j] += 1\n                    prodx[lab, j] *= val\n\n        for i in range(ncounts):"
  },
  {
    "id" : "8a3baea5-8ede-4781-9cb8-ea64dc18c387",
    "prId" : 25249,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25249#pullrequestreview-201878446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a64ad02-9657-4c81-8958-c208bc5f9cb1",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Is this performant?  Seems like a lot of unnecessary operations",
        "createdAt" : "2019-02-09T20:31:54Z",
        "updatedAt" : "2019-02-11T18:51:42Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d9177e71-d1f3-4583-87b1-c2f10e45b792",
        "parentId" : "0a64ad02-9657-4c81-8958-c208bc5f9cb1",
        "authorId" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "body" : "I am not sure. kept logic as-is.",
        "createdAt" : "2019-02-09T21:11:36Z",
        "updatedAt" : "2019-02-11T18:51:43Z",
        "lastEditedBy" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cb991b7c6b778ab9036529b4b0b27450644fb51",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +529,533 @@                    oldmean = mean[lab, j]\n                    mean[lab, j] += (val - oldmean) / nobs[lab, j]\n                    out[lab, j] += (val - mean[lab, j]) * (val - oldmean)\n\n        for i in range(ncounts):"
  },
  {
    "id" : "f9d5038c-a44b-4bd6-a56b-cc26d0b11f32",
    "prId" : 27157,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27157#pullrequestreview-256419910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cca39a3-1554-48ba-b05e-a192f9a0fbb2",
        "parentId" : null,
        "authorId" : null,
        "body" : "possible uninitialized use, probably when periods=0. I don't see it, and I think it's a false positive.",
        "createdAt" : "2019-07-01T15:44:54Z",
        "updatedAt" : "2019-07-01T22:05:19Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "d8f3fa5b997ea78ff33e93a7f711cc5759cd0ce3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +261,265 @@    cdef:\n        Py_ssize_t N, i, j, ii\n        int offset = 0, sign\n        int64_t lab, idxer, idxer_slot\n        int64_t[:] label_seen = np.zeros(ngroups, dtype=np.int64)"
  },
  {
    "id" : "944474b7-1b31-48f2-9e6f-96aedd515c40",
    "prId" : 29137,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29137#pullrequestreview-304926081",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1ab8649-42d7-45d8-b1b8-ae839160aaf3",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What does the object cast buy us here?",
        "createdAt" : "2019-10-22T00:07:25Z",
        "updatedAt" : "2019-10-22T00:08:45Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "be5fe771-6d1e-45d8-a233-925b170b1ba9",
        "parentId" : "c1ab8649-42d7-45d8-b1b8-ae839160aaf3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "https://groups.google.com/forum/#!topic/cython-users/xheRGGOiuYw\r\n\r\nFor reasons unknown, `out.shape` is evaluated as an 8-tuple instead of 2-tuple, and this call raises at runtime without the `<object>` cast.  That's the reason why the status quo doesn't use `out.shape` directly on L458.",
        "createdAt" : "2019-10-22T00:48:37Z",
        "updatedAt" : "2019-10-22T00:48:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "09267fdd-3d0c-4d58-815a-9bf7c5ac9c8e",
        "parentId" : "c1ab8649-42d7-45d8-b1b8-ae839160aaf3",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Pretty interesting...and cast to object here doesn't trigger any underlying functions? Not sure if it just changes the type of pointer Cython uses or if it actually changes the memview",
        "createdAt" : "2019-10-22T00:55:26Z",
        "updatedAt" : "2019-10-22T00:55:27Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1326655ac4287e5212cc389848db5660f293f156",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +456,460 @@        raise ValueError(\"len(index) != len(labels)\")\n\n    nobs = np.zeros((<object>out).shape, dtype=np.int64)\n    sumx = np.zeros_like(out)\n"
  },
  {
    "id" : "14616baa-0486-4f4a-a06c-79ce35f51c1b",
    "prId" : 32758,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32758#pullrequestreview-375656696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65dfc65f-768b-4793-ae92-02ede9aef188",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Does this limitation really apply to any place where we are using memoryviews? Or just isolated to this?",
        "createdAt" : "2020-03-16T23:46:38Z",
        "updatedAt" : "2020-03-16T23:46:39Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "6efc056f-e516-43aa-a527-a48d8712be47",
        "parentId" : "65dfc65f-768b-4793-ae92-02ede9aef188",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "my understanding is that it applies to memoryviews with fused types",
        "createdAt" : "2020-03-16T23:54:48Z",
        "updatedAt" : "2020-03-16T23:54:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "91d55c61ad5a4651364fdaa0dfc78a7cef348e43",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +855,859 @@def group_last(rank_t[:, :] out,\n               int64_t[:] counts,\n               ndarray[rank_t, ndim=2] values,\n               const int64_t[:] labels,\n               Py_ssize_t min_count=-1):"
  },
  {
    "id" : "c4c51dbd-4b95-42b2-9dc8-5cc0262f00f8",
    "prId" : 33462,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33462#pullrequestreview-391758968",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5634f8ea-433f-4604-886d-0a875775167d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here of why we are doing this",
        "createdAt" : "2020-04-10T21:29:51Z",
        "updatedAt" : "2020-04-11T10:22:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "233cd0b3-20bc-4bcc-b304-e8e41a4c57f7",
        "parentId" : "5634f8ea-433f-4604-886d-0a875775167d",
        "authorId" : "5fb5145d-8f57-4209-8878-250222c25181",
        "body" : "Done",
        "createdAt" : "2020-04-11T11:35:41Z",
        "updatedAt" : "2020-04-11T11:35:41Z",
        "lastEditedBy" : "5fb5145d-8f57-4209-8878-250222c25181",
        "tags" : [
        ]
      }
    ],
    "commit" : "41efd576464512e02e3d066c2703ba54750042c5",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +896,900 @@                # None should not be treated like other NA-like\n                # so that it won't be converted to nan\n                if not checknull(val) or val is None:\n                    # NB: use _treat_as_na here once\n                    #  conditional-nogil is available."
  },
  {
    "id" : "79e6e4d2-2577-4187-a7b9-bcede1d5b22b",
    "prId" : 33462,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33462#pullrequestreview-391758981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3a6168d-704d-491e-8e62-d739d5eb9fde",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2020-04-10T21:29:58Z",
        "updatedAt" : "2020-04-11T10:22:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "69c0eecb-8b68-41c6-8b80-fdf52b59efc0",
        "parentId" : "a3a6168d-704d-491e-8e62-d739d5eb9fde",
        "authorId" : "5fb5145d-8f57-4209-8878-250222c25181",
        "body" : "Done",
        "createdAt" : "2020-04-11T11:35:48Z",
        "updatedAt" : "2020-04-11T11:35:49Z",
        "lastEditedBy" : "5fb5145d-8f57-4209-8878-250222c25181",
        "tags" : [
        ]
      }
    ],
    "commit" : "41efd576464512e02e3d066c2703ba54750042c5",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +991,995 @@                # None should not be treated like other NA-like\n                # so that it won't be converted to nan\n                if not checknull(val) or val is None:\n                    # NB: use _treat_as_na here once\n                    #  conditional-nogil is available."
  },
  {
    "id" : "7a82cf4d-ffba-44ed-855d-6f6a25db09f7",
    "prId" : 33644,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33644#pullrequestreview-415206389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e09cb66d-cad1-4762-a8bc-c644638ce49c",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What is this required for? Do we have a test case when this is False?",
        "createdAt" : "2020-04-22T03:37:07Z",
        "updatedAt" : "2020-05-20T15:20:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "df2a1b47-2536-4bba-8c76-5d7ed86cb8c1",
        "parentId" : "e09cb66d-cad1-4762-a8bc-c644638ce49c",
        "authorId" : "b4ea16d2-09c0-4af2-a73d-b4e4e08ff657",
        "body" : "Normally, if labels are not provided or the dataframe is empty, an error message will rise when applying the quantile. However, there are cases where certain operations lead to empty labels, as when time resampling some types of empty dataframe:\r\n\r\nHere is an example of the pipeline:\r\nhttps://dev.azure.com/pandas-dev/pandas/_build/results?buildId=34258&view=logs&j=bef1c175-2c1b-51ae-044a-2437c76fc339&t=770e7bb1-09f5-5ebf-b63b-578d2906aac9&l=127 ",
        "createdAt" : "2020-04-26T17:34:26Z",
        "updatedAt" : "2020-05-20T15:20:48Z",
        "lastEditedBy" : "b4ea16d2-09c0-4af2-a73d-b4e4e08ff657",
        "tags" : [
        ]
      },
      {
        "id" : "b139e893-630f-4b2f-a976-33ab0ebec760",
        "parentId" : "e09cb66d-cad1-4762-a8bc-c644638ce49c",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is this accounted for in the test that you've created? If not, can you add a test for it?",
        "createdAt" : "2020-05-17T17:40:35Z",
        "updatedAt" : "2020-05-20T15:20:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "28370083-3ce0-43ea-a767-ebd796420d9f",
        "parentId" : "e09cb66d-cad1-4762-a8bc-c644638ce49c",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "add two cases that take the if labels.any(): is False path.\r\n\r\n> What is this required for?\r\n\r\notherwise labels.max() can raise `ValueError: zero-size array to reduction operation maximum which has no identity`",
        "createdAt" : "2020-05-20T10:38:51Z",
        "updatedAt" : "2020-05-20T15:20:48Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f21e332d4ee2663fedb8f5166c182e418e34f0f0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +778,782 @@\n    # Get an index of values sorted by labels and then values\n    if labels.any():\n        # Put '-1' (NaN) labels as the last group so it does not interfere\n        # with the calculations."
  },
  {
    "id" : "613bd63f-85d9-4f04-8a25-1b37ae8aa23f",
    "prId" : 34372,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34372#pullrequestreview-425855201",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8aa6bd83-ce00-4833-881c-c122b7a38a7c",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can we just accept kwargs where ddof is required rather than adding it to other signatures? This is a little confusing as any / all would never need it",
        "createdAt" : "2020-06-07T16:31:39Z",
        "updatedAt" : "2020-06-18T20:11:11Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ad866508-3c92-48c3-adb7-200f6d886c86",
        "parentId" : "8aa6bd83-ce00-4833-881c-c122b7a38a7c",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Sorry - I don't quite follow. ddof is only added to var, the function that uses it. I think perhaps you were thinking this was the signature of any/all? That appears just above the change to var in the diff.",
        "createdAt" : "2020-06-07T21:33:39Z",
        "updatedAt" : "2020-06-18T20:11:11Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "64c6c1e5-b091-48e7-b1ac-dcd182976aeb",
        "parentId" : "8aa6bd83-ce00-4833-881c-c122b7a38a7c",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Ah OK - sorry misread it. Thanks for clarifying",
        "createdAt" : "2020-06-07T21:34:30Z",
        "updatedAt" : "2020-06-18T20:11:11Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "33bf96a4b11b364cbe987ef4fd10a6e7b215ab69",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +562,566 @@               const int64_t[:] labels,\n               Py_ssize_t min_count=-1,\n               int64_t ddof=1):\n    cdef:\n        Py_ssize_t i, j, N, K, lab, ncounts = len(counts)"
  },
  {
    "id" : "feaaae14-cc2c-4d1e-8b4d-d8c54213c5c9",
    "prId" : 36061,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36061#pullrequestreview-482695991",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9508cf3-b7b4-488f-9a4d-d2bf530c9203",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think elsewhere we get around this be using `values.shape[0]` instead of `len`.  IIRC this is something we wont need to do anymore in cython3",
        "createdAt" : "2020-09-02T17:04:18Z",
        "updatedAt" : "2020-09-04T04:04:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9ca5eb75-217d-4145-8e14-c630d5242014",
        "parentId" : "f9508cf3-b7b4-488f-9a4d-d2bf530c9203",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There are indeed a few cases of \r\n\r\n```\r\n    # TODO(cython 3.0):\r\n    # Instead of `labels.shape[0]` use `len(labels)`\r\n    if not len(values) == labels.shape[0]:\r\n```\r\n\r\nin this file. But so if we need to update it anyways after cython 3.0, it doesn't maybe matter that much.\r\n",
        "createdAt" : "2020-09-04T11:55:23Z",
        "updatedAt" : "2020-09-04T11:55:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c6d40469-8617-4b06-b671-cb70e8ed8685",
        "parentId" : "f9508cf3-b7b4-488f-9a4d-d2bf530c9203",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah i think ok for now",
        "createdAt" : "2020-09-04T14:25:09Z",
        "updatedAt" : "2020-09-04T14:28:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c166e59fdfa71b8cb4a89b1f4f44db5184f447e",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +486,490 @@        Py_ssize_t len_values = len(values), len_labels = len(labels)\n\n    if len_values != len_labels:\n        raise ValueError(\"len(index) != len(labels)\")\n"
  },
  {
    "id" : "db602b3d-dbb2-49cf-b920-b18ace35dcab",
    "prId" : 40584,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40584#pullrequestreview-619031363",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ef09743-7338-460e-a66e-ff3ce0a4c29d",
        "parentId" : null,
        "authorId" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "body" : "Wanted to be able to do something like if `PyObject_RichCompareBool(val, ..., cmp_method): ...` to simplify the conditional logic, but couldn't find a way to do something like this in Cython without the GIL.",
        "createdAt" : "2021-03-23T14:50:53Z",
        "updatedAt" : "2021-03-23T14:50:54Z",
        "lastEditedBy" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "tags" : [
        ]
      },
      {
        "id" : "1387a708-fa84-448c-b451-05c492c6e3f7",
        "parentId" : "9ef09743-7338-460e-a66e-ff3ce0a4c29d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is there a perf impact here?  its checking compute_max at each step in a nested loop",
        "createdAt" : "2021-03-23T19:44:07Z",
        "updatedAt" : "2021-03-23T19:44:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "97c5b418-174c-450f-9a44-31c1674d8c64",
        "parentId" : "9ef09743-7338-460e-a66e-ff3ce0a4c29d",
        "authorId" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "body" : "I didn't see any perf impact based on ASVs above. For a loop invariant like `compute_max`, I'd guess this check is optimized away by the compiler. (It could also just be negligible compared to the cost of the indexing operations)",
        "createdAt" : "2021-03-23T20:03:03Z",
        "updatedAt" : "2021-03-23T20:03:31Z",
        "lastEditedBy" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "tags" : [
        ]
      },
      {
        "id" : "5f097b0f-55d1-411c-b036-8868d2f2a617",
        "parentId" : "9ef09743-7338-460e-a66e-ff3ce0a4c29d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "makes sense.  worth it to de-duplicate a bunch of code.",
        "createdAt" : "2021-03-23T20:16:15Z",
        "updatedAt" : "2021-03-23T20:16:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "441e8e3d7376a98cc87f360d2dc34fb1eff1929b",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +1235,1239 @@                    else:\n                        if val < group_min_or_max[lab, j]:\n                            group_min_or_max[lab, j] = val\n\n        for i in range(ngroups):"
  },
  {
    "id" : "bccc422d-0f8b-4c21-988f-b8e82c338330",
    "prId" : 40651,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40651#pullrequestreview-626757469",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11e0e082-cde3-4f3c-829f-31ab9ee3310d",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "does it make sense to implement this as a separate function?",
        "createdAt" : "2021-03-28T18:31:43Z",
        "updatedAt" : "2021-04-20T23:23:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b821eb66-6172-41fe-b1c6-4b793cbfcb88",
        "parentId" : "11e0e082-cde3-4f3c-829f-31ab9ee3310d",
        "authorId" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "body" : "I don't have a strong opinion about this. The question would be the tradeoff between a bit more complexity/branching vs duplication/increased package size (if we end up adding masked support to a lot more of these grouped algos)",
        "createdAt" : "2021-03-28T20:37:34Z",
        "updatedAt" : "2021-04-20T23:23:58Z",
        "lastEditedBy" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "tags" : [
        ]
      },
      {
        "id" : "af6443ca-1730-4296-88ae-f17a3a603760",
        "parentId" : "11e0e082-cde3-4f3c-829f-31ab9ee3310d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "any guess what the impact on package size is?\r\n\r\npotential duplication might be addressed by making e.g. refactoring L1340-1347 or L 1302-1308 into helper functions",
        "createdAt" : "2021-03-29T16:08:23Z",
        "updatedAt" : "2021-04-20T23:23:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ddcc374d-5f19-4e8e-9f96-9cc05dc6309c",
        "parentId" : "11e0e082-cde3-4f3c-829f-31ab9ee3310d",
        "authorId" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "body" : "Based on rough estimate, binaries generated from groupby.pyx take up ~5% of total `_libs`. So based on the figure of `_libs` taking up 17MB from #30741, cost of full duplication would be around 0.8-0.9 MB. But like you mentioned above, some duplication could be avoided, 1 MB should be an upper bound.",
        "createdAt" : "2021-04-02T02:36:21Z",
        "updatedAt" : "2021-04-20T23:23:58Z",
        "lastEditedBy" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e1dac42363d76ea32981d784b14ec293cb947a3",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +1356,1360 @@                        out[i, j] = val\n\n                if not val_is_nan:\n                    mval = accum[lab, j]\n                    if compute_max:"
  },
  {
    "id" : "696cd5a9-e196-4a06-9021-0cf55c1c22c1",
    "prId" : 40659,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40659#pullrequestreview-622779297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6485f8cf-e8bf-4326-8933-54c5741e7cbb",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "needs tests?",
        "createdAt" : "2021-03-28T16:40:38Z",
        "updatedAt" : "2021-03-28T20:16:29Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f84fc048-bc8a-4283-ae0c-e3844b7b411a",
        "parentId" : "6485f8cf-e8bf-4326-8933-54c5741e7cbb",
        "authorId" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "body" : "Yep added test for groupby as well",
        "createdAt" : "2021-03-28T20:17:40Z",
        "updatedAt" : "2021-03-28T20:17:40Z",
        "lastEditedBy" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "tags" : [
        ]
      }
    ],
    "commit" : "738ffd1befd9cfa3818729c76d911198f91019bf",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1109,1113 @@        values=values[:, 0],\n        labels=labels,\n        is_datetimelike=is_datetimelike,\n        ties_method=ties_method,\n        ascending=ascending,"
  }
]