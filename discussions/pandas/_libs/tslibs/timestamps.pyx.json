[
  {
    "id" : "ebff4b5f-ad54-4b40-8ed5-2838e7eaf8f6",
    "prId" : 18164,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18164#pullrequestreview-99540684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c08fdd78-8a2b-4c7c-af9c-6bb3355f6867",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can u have this call day_name",
        "createdAt" : "2018-02-27T02:31:33Z",
        "updatedAt" : "2018-03-02T03:27:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d97f43b2a16351aeeaf4e993f7014b5e803e2b4d",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +767,771 @@        warnings.warn(\"`weekday_name` is deprecated and will be removed in a \"\n                      \"future version. Use `day_name` instead\",\n                      DeprecationWarning)\n        return self.day_name()\n"
  },
  {
    "id" : "037da9ef-82c6-4937-ac6f-6fd4d5aa0ce9",
    "prId" : 18369,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18369#pullrequestreview-77649860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7b050c3-24b6-4d1c-b480-f46137457c7c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can cdef these (TODO)",
        "createdAt" : "2017-11-19T17:21:53Z",
        "updatedAt" : "2017-11-20T15:01:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6e4cf4a2-9813-4716-8a93-7d48b3bbf5ed",
        "parentId" : "e7b050c3-24b6-4d1c-b480-f46137457c7c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, in fact a bunch of stuff can be moved up to `_Timestamp`.",
        "createdAt" : "2017-11-19T17:55:08Z",
        "updatedAt" : "2017-11-20T15:01:19Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c00d36b03d06894346102ebba0c77725d94798e2",
    "line" : 950,
    "diffHunk" : "@@ -1,1 +948,952 @@        0 Julian date is noon January 1, 4713 BC.\n        \"\"\"\n        year = self.year\n        month = self.month\n        day = self.day"
  },
  {
    "id" : "1b6358fb-35b6-44c7-bcfe-c35da687f017",
    "prId" : 18539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18539#pullrequestreview-79537325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4bf1977-493f-4e70-8e81-96f840cb1b31",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so why is this in _Timestamp again (as opposed to Timestamp); this is why its cpdef, why not just cdef?",
        "createdAt" : "2017-11-28T11:09:39Z",
        "updatedAt" : "2017-11-28T15:30:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "17a359a6-fef5-4752-8f04-620954d6eafc",
        "parentId" : "c4bf1977-493f-4e70-8e81-96f840cb1b31",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not sure why its in _Timestamp instead of Timestamp (though my understanding is putting it in _Timestamp is slightly more performant and smaller memory footprint); it was that way before I got here.\r\n\r\nIt is `cpdef` and not `cdef` because if it were cdef then calling it from Timestamp would be an AttributeError.  That's why #18446 moved a bunch of properties up to _Timestamp after making it cdef.",
        "createdAt" : "2017-11-28T15:12:18Z",
        "updatedAt" : "2017-11-28T15:30:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9baeb6db0bc459e3431fd42ff16884bceaf61ff9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +305,309 @@        return int(out[0])\n\n    cpdef bint _get_start_end_field(self, str field):\n        cdef:\n            int64_t val"
  },
  {
    "id" : "0d727fb9-51ad-4f74-8672-4d001ee8db80",
    "prId" : 18811,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18811#pullrequestreview-84558575",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20d04bf8-96a6-48c3-881b-f17949fde71b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we use this nomenclature above? if not can you reconcile",
        "createdAt" : "2017-12-19T11:35:31Z",
        "updatedAt" : "2017-12-19T19:12:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "039fc5cb-7713-42a7-85a3-04a8a609ac13",
        "parentId" : "20d04bf8-96a6-48c3-881b-f17949fde71b",
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "yes in the above the doc says:\r\n```\r\n    Notes\r\n    -----\r\n    There are essentially three calling conventions for the constructor. The\r\n    primary form accepts four parameters. They can be passed by position or\r\n    keyword.\r\n\r\n    The other two forms mimic the parameters from ``datetime.datetime``. They\r\n    can be passed by either position or keyword, but not both mixed together.\r\n```",
        "createdAt" : "2017-12-19T19:11:32Z",
        "updatedAt" : "2017-12-19T19:12:09Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcdf2abed53fbebe7bd0e3a4c1136e5f16a534ea",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +408,412 @@    Examples\n    --------\n    Using the primary calling convention:\n\n    This converts a datetime-like string"
  },
  {
    "id" : "e236f653-99d4-4e0b-9c57-e3d4d02fbaf4",
    "prId" : 19889,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19889#pullrequestreview-99147901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee7485d7-82b3-4ef8-9844-1d587b3cd7fe",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "What if we get here with a string ts_input with conflicting nanos? I think it might be better to accept nanos _only_ in combination with other integer args/kwargs.",
        "createdAt" : "2018-02-25T04:48:05Z",
        "updatedAt" : "2018-02-28T04:56:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "57e0721a-7158-4926-9106-1088a83cce71",
        "parentId" : "ee7485d7-82b3-4ef8-9844-1d587b3cd7fe",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Currently (and in this PR), the Timestamp constructor will just parse the string and ignore all additional passed kwargs related to the values of each datetime element:\r\n\r\n```\r\nIn [7]: Timestamp('2010-10-10 12:59:59.999999999', hour=0, nanosecond=16)\r\nOut[7]: Timestamp('2010-10-10 12:59:59.999999999')\r\n``` \r\n\r\nThe nanosecond kwarg will only be used if a datetime.datetime is passed or other datetime element kwargs are passed. As mentioned in my other comment, we might also want to raise in the situation above. ",
        "createdAt" : "2018-02-25T05:35:34Z",
        "updatedAt" : "2018-02-28T04:56:58Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "9577c5c2-2f9c-4151-a5a5-7ec305312b21",
        "parentId" : "ee7485d7-82b3-4ef8-9844-1d587b3cd7fe",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I agree here, the nanoscecond kw must only be used when kwargs are passed",
        "createdAt" : "2018-02-25T16:27:28Z",
        "updatedAt" : "2018-02-28T04:56:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c81ec573e5fc699e3cdb9161bec7513b17dd54c9",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +623,627 @@            tz, tzinfo = tzinfo, None\n\n        ts = convert_to_tsobject(ts_input, tz, unit, 0, 0, nanosecond or 0)\n\n        if ts.value == NPY_NAT:"
  },
  {
    "id" : "1aa9c9cc-01c4-4a36-9271-78ac15500df8",
    "prId" : 22644,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22644#pullrequestreview-156335200",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a67c72e0-64a5-4dc7-80db-ceb32320c704",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, this is now a bit confusing, e.g. there is overlap between errors and nonexistent. Is it possible to use errors instead here? (and not add a new keyword)?",
        "createdAt" : "2018-09-18T12:16:32Z",
        "updatedAt" : "2018-10-24T22:22:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cf16e2f197e8405f27ebdfa4c2718620261df04",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +980,984 @@            - 'raise' will raise an AmbiguousTimeError for an ambiguous time\n\n        nonexistent : 'shift', 'NaT', default 'raise'\n            A nonexistent time does not exist in a particular timezone\n            where clocks moved forward due to DST."
  },
  {
    "id" : "076356ff-4d6e-4e1a-a9a7-2a90124289db",
    "prId" : 22644,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22644#pullrequestreview-160129060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5c2e124-b082-442d-8628-afe5456d2816",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is a top-level yes? (e.g. user callable)",
        "createdAt" : "2018-09-30T14:03:25Z",
        "updatedAt" : "2018-10-24T22:22:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d688a9dc-f775-45af-abfe-8ad1124255d1",
        "parentId" : "f5c2e124-b082-442d-8628-afe5456d2816",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Correct. Users still have access to errors in `Timestamp.tz_localize`",
        "createdAt" : "2018-09-30T21:21:29Z",
        "updatedAt" : "2018-10-24T22:22:30Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cf16e2f197e8405f27ebdfa4c2718620261df04",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +992,996 @@            .. versionadded:: 0.24.0\n\n        errors : 'raise', 'coerce', default None\n            - 'raise' will raise a NonExistentTimeError if a timestamp is not\n               valid in the specified timezone (e.g. due to a transition from"
  },
  {
    "id" : "8b805ab5-14cd-4ece-b8a4-40918a92035a",
    "prId" : 22644,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22644#pullrequestreview-161989084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "883e730a-c14a-44ef-933f-1f1969027017",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you explain here how to replace the existing errors keyword with nonexistent?\r\n\r\n(and the same for the other docstring where this shows up)",
        "createdAt" : "2018-10-05T11:16:30Z",
        "updatedAt" : "2018-10-24T22:22:30Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cf16e2f197e8405f27ebdfa4c2718620261df04",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +999,1003 @@              into the specified timezone. Use ``nonexistent='NaT'`` instead.\n\n              .. deprecated:: 0.24.0\n\n        Returns"
  },
  {
    "id" : "87e60ec6-a65b-4108-b494-ae66d2fb270a",
    "prId" : 22802,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22802#pullrequestreview-157941504",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "128238b2-3a52-4984-b5d0-b8449d14921b",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Cython typing should make this check unnecessary",
        "createdAt" : "2018-09-21T23:20:37Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a6fb8938-082f-4192-915f-63f2624fdbfa",
        "parentId" : "128238b2-3a52-4984-b5d0-b8449d14921b",
        "authorId" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "body" : "As you remarked above, Cython typing does not work on native enum classes. Here I prefer to maintain `enum` semantics and have *enumeration members* instances of the `RoundTo` class. Therefore I dropped the `mode: RoundTo` annotation and kept the `isinstance` check. See 44902695f4adba3406fb4750e819a5776683cae7",
        "createdAt" : "2018-09-23T14:46:06Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "tags" : [
        ]
      }
    ],
    "commit" : "988e5e30f87fad277c3a5b714d75738ff2545f21",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +140,144 @@\n    if not isinstance(mode, RoundTo):\n        raise ValueError('mode should be a RoundTo member')\n\n    unit = to_offset(freq).nanos"
  },
  {
    "id" : "6a3ed58a-3988-4a00-a072-508f57a3cb4f",
    "prId" : 22802,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22802#pullrequestreview-157944694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1617a37-414c-4d15-99b0-7b30afab3f1e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "since the impl is only used once, i would in-line these functions from above.",
        "createdAt" : "2018-09-23T11:58:25Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4e4878f0-44d3-4edc-8e91-43e102c8d19c",
        "parentId" : "e1617a37-414c-4d15-99b0-7b30afab3f1e",
        "authorId" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "body" : "(I'm not sure I fully understand your comment, please correct me if I'm mistaken).\r\n\r\nHere I'm trying to avoid recursive calls still keeping DRY. \r\n\r\n<https://github.com/pandas-dev/pandas/blob/44902695f4adba3406fb4750e819a5776683cae7/pandas/_libs/tslibs/timestamps.pyx#L81-L91> \r\n\r\nThe *simple* rounding modes (`RoundTo.MINUS_INFTY`, `RoundTo.PLUS_INFTY`, `RoundTo.NEAREST_HALF_PLUS_INFTY`, `RoundTo.NEAREST_HALF_MINUS_INFTY`) which can be implemented as one-liners, are inlined for readability and efficiency.\r\n\r\n`RoundTo.NEAREST_HALF_EVEN` is more complex to implement and is not inlined:\r\n<https://github.com/pandas-dev/pandas/blob/44902695f4adba3406fb4750e819a5776683cae7/pandas/_libs/tslibs/timestamps.pyx#L122-L132>\r\n\r\nSome rounding modes of `round_nsint64` are never called, but I prefer to have a more general implementation here, in order to allow future extensions.",
        "createdAt" : "2018-09-23T15:28:21Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "tags" : [
        ]
      },
      {
        "id" : "14bb59c2-3944-4034-bad8-3cf63a92bedf",
        "parentId" : "e1617a37-414c-4d15-99b0-7b30afab3f1e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, just trying to make it much simpler for a new reader here. inline what you can then.",
        "createdAt" : "2018-09-23T16:43:03Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "988e5e30f87fad277c3a5b714d75738ff2545f21",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +148,152 @@    elif mode is RoundTo.PLUS_INFTY:\n        return _ceil_int64(values, unit)\n    elif mode is RoundTo.NEAREST_HALF_MINUS_INFTY:\n        return _rounddown_int64(values, unit)\n    elif mode is RoundTo.NEAREST_HALF_PLUS_INFTY:"
  },
  {
    "id" : "6f2d947b-d465-4eea-a566-423e42486a37",
    "prId" : 22802,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22802#pullrequestreview-158322664",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "261228f6-ae8e-4223-b8a2-4473d9f61e39",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a link to point to define these types of rounding? ",
        "createdAt" : "2018-09-23T11:58:46Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6a5fb2c3-fa77-4949-89b0-c005b86964f0",
        "parentId" : "261228f6-ae8e-4223-b8a2-4473d9f61e39",
        "authorId" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "body" : "The wikipedia article on [rounding](https://en.wikipedia.org/wiki/Rounding) is a handy reference.\r\n\r\n- [`RoundTo.MINUS_INFTY`](https://en.wikipedia.org/wiki/Rounding#Rounding_down)\r\n- [`RoundTo.PLUS_INFTY`](https://en.wikipedia.org/wiki/Rounding#Rounding_up)\r\n- [`RoundTo.NEAREST_HALF_EVEN`](https://en.wikipedia.org/wiki/Rounding#Round_half_to_even)\r\n- [`RoundTo.NEAREST_HALF_PLUS_INFTY`](https://en.wikipedia.org/wiki/Rounding#Round_half_up)\r\n- [`RoundTo.NEAREST_HALF_MINUS_INFTY`](https://en.wikipedia.org/wiki/Rounding#Round_half_down)\r\n\r\nShould I add the to the source code?",
        "createdAt" : "2018-09-23T15:43:20Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "tags" : [
        ]
      },
      {
        "id" : "a8df535c-9a87-45ec-970b-eaa13388a640",
        "parentId" : "261228f6-ae8e-4223-b8a2-4473d9f61e39",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes pls",
        "createdAt" : "2018-09-23T16:42:36Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "322fbfd7-fd2c-48be-a089-cf97cd064c8b",
        "parentId" : "261228f6-ae8e-4223-b8a2-4473d9f61e39",
        "authorId" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "body" : "doc string with refs added",
        "createdAt" : "2018-09-24T22:41:18Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "tags" : [
        ]
      }
    ],
    "commit" : "988e5e30f87fad277c3a5b714d75738ff2545f21",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +144,148 @@    unit = to_offset(freq).nanos\n\n    if mode is RoundTo.MINUS_INFTY:\n        return _floor_int64(values, unit)\n    elif mode is RoundTo.PLUS_INFTY:"
  },
  {
    "id" : "5fccdf16-dc46-43e9-a774-21b17a4875f3",
    "prId" : 23406,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23406#pullrequestreview-169741426",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31b37ab6-321a-4f7c-98c8-b02b4313a73a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same comment as above about the doc-strings",
        "createdAt" : "2018-10-30T12:18:04Z",
        "updatedAt" : "2018-10-31T04:52:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b31f034f5da9a0311ccaf99c9cae18437e6943b0",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +765,769 @@            - 'NaT' will return NaT where there are nonexistent times\n            - 'raise' will raise an NonExistentTimeError if there are\n              nonexistent times\n\n            .. versionadded:: 0.24.0"
  },
  {
    "id" : "1b600115-322f-408d-bdfa-3b7164c5f752",
    "prId" : 23456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23456#pullrequestreview-171099889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac78a0c9-3e0d-457e-a02e-ee08750bfece",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "void?",
        "createdAt" : "2018-11-02T13:30:10Z",
        "updatedAt" : "2018-11-02T13:31:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "afdd39ebbd990a8fe0a92b5e768444d9d9314fa7",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +301,305 @@                return dtval >= other\n\n    cdef _assert_tzawareness_compat(_Timestamp self, datetime other):\n        if self.tzinfo is None:\n            if other.tzinfo is not None:"
  },
  {
    "id" : "1d840c52-07e4-48ba-85e8-2665c30110e0",
    "prId" : 23503,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23503#pullrequestreview-172500481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e10ca429-9f1b-4043-82ab-f3b1f6f586a1",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "What do we expect it to be in this case? Aside from None I guess",
        "createdAt" : "2018-11-05T23:34:50Z",
        "updatedAt" : "2018-11-07T06:32:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0a03af0f-b6dd-406a-b53b-52d4d0133cc5",
        "parentId" : "e10ca429-9f1b-4043-82ab-f3b1f6f586a1",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "This can be a `Timestamp` in which we want to extract its frequency and pass along.",
        "createdAt" : "2018-11-06T01:29:20Z",
        "updatedAt" : "2018-11-07T06:32:11Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "d2008c97-67b5-4f3d-8d2d-ebcaf9be2e3b",
        "parentId" : "e10ca429-9f1b-4043-82ab-f3b1f6f586a1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "IIUC you're referring to `ts_input` being a Timestamp.  I'm asking what `freq` is in this case.  More specifically, anything other than `None` seems like it should be invalid.  Or am I missing something?",
        "createdAt" : "2018-11-06T01:59:33Z",
        "updatedAt" : "2018-11-07T06:32:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d27ca9c5-98e3-47f8-8883-91470af99eca",
        "parentId" : "e10ca429-9f1b-4043-82ab-f3b1f6f586a1",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Ah sorry for misunderstanding. You're correct in that this is essentially swallowing any nonsense frequency and just returning `None`",
        "createdAt" : "2018-11-06T06:11:44Z",
        "updatedAt" : "2018-11-07T06:32:11Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "86ec5459-339e-4e73-a51c-bf1a383a8ef1",
        "parentId" : "e10ca429-9f1b-4043-82ab-f3b1f6f586a1",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "`freq` should only ever be `None`, a offset string, or offset object",
        "createdAt" : "2018-11-06T06:15:44Z",
        "updatedAt" : "2018-11-07T06:32:11Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "985e3dc4-66aa-460f-bdce-6d7aa5345a41",
        "parentId" : "e10ca429-9f1b-4043-82ab-f3b1f6f586a1",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Won't this silently pass if ``freq`` has invalid type? Couldn't we just say that ``freq = getattr(ts_input, 'freq', None) if freq is None else freq``?",
        "createdAt" : "2018-11-07T14:01:59Z",
        "updatedAt" : "2018-11-07T14:01:59Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "218e41897f7ca77bae458a8301c6767a0fc029f5",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +737,741 @@            freq = to_offset(freq)\n        elif not is_offset_object(freq):\n            # GH 22311: Try to extract the frequency of a given Timestamp input\n            freq = getattr(ts_input, 'freq', None)\n"
  },
  {
    "id" : "90681e3e-949f-458e-9983-7bb6e7cba549",
    "prId" : 24021,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24021#pullrequestreview-180569666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43b2bc2d-a1a3-4467-813a-a42094ddf63c",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This should also be done in place of what is currently L229-237",
        "createdAt" : "2018-12-02T17:16:45Z",
        "updatedAt" : "2019-04-01T12:13:40Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfda6c3300e5f2a3fbdc910782003d2bb0206566",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +234,238 @@                return PyObject_RichCompare(other, self, reverse_ops[op])\n            else:\n                return NotImplemented\n\n        self._assert_tzawareness_compat(other)"
  },
  {
    "id" : "5fee53e2-acbb-4956-9963-03c7ef846afa",
    "prId" : 24170,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24170#pullrequestreview-182993241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d970f683-cb02-45eb-8dd2-e717fd70ad44",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I haven't looked at how this is used, but does leaving these as class attributes work?",
        "createdAt" : "2018-12-09T20:25:40Z",
        "updatedAt" : "2018-12-11T13:36:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "98898dc37bcd7c3e1bb7d32e80b92dcd4e5b91d8",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +104,108 @@           https://en.wikipedia.org/wiki/Rounding#Round_half_to_even\n    \"\"\"\n    @property\n    def MINUS_INFTY(self):\n        return 0"
  },
  {
    "id" : "b9efb67a-2b33-4ed3-a77b-a9394ca0d8c2",
    "prId" : 25142,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25142#pullrequestreview-199864300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8ee1b17-dc45-471f-bc93-ecc92574d448",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2019-02-04T23:47:34Z",
        "updatedAt" : "2019-02-16T13:58:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1ffa8ffe795ae89aeac2c6362c4ad3103eddd9f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +346,350 @@        return np.datetime64(self.value, 'ns')\n\n    def to_numpy(self, dtype=None, copy=False):\n        \"\"\"\n        Convert the Timestamp to a NumPy datetime64."
  },
  {
    "id" : "bb098c2b-a83b-4e9c-b244-ac8c7451a68a",
    "prId" : 29821,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29821#pullrequestreview-321936773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10189b31-469e-4cdd-81af-84f021fdca58",
        "parentId" : null,
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "Not sure if this is correct. hope that one of the developers will correct me if needed.",
        "createdAt" : "2019-11-24T01:11:11Z",
        "updatedAt" : "2019-11-25T21:52:11Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "e369b6d3-b824-4896-917d-629f96e1ac0f",
        "parentId" : "10189b31-469e-4cdd-81af-84f021fdca58",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this is correct",
        "createdAt" : "2019-11-24T01:22:19Z",
        "updatedAt" : "2019-11-25T21:52:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bf3ddf99-1736-4510-ad23-b8eca0ca4961",
        "parentId" : "10189b31-469e-4cdd-81af-84f021fdca58",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "thank you @jbrockmendel ",
        "createdAt" : "2019-11-24T01:22:52Z",
        "updatedAt" : "2019-11-25T21:52:11Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ebc05d3dc68d6383c66648c9c1e36c9ba1c64a8",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +658,662 @@\n    @property\n    def week(self) -> int:\n        \"\"\"\n        Return the week number of the year."
  },
  {
    "id" : "229afb2d-0990-4557-8e99-27bc54a272e9",
    "prId" : 29821,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29821#pullrequestreview-321936764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37097f04-597e-4d69-a528-487b4e32adda",
        "parentId" : null,
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "Same here.",
        "createdAt" : "2019-11-24T01:12:03Z",
        "updatedAt" : "2019-11-25T21:52:11Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "74f56a61-2f67-498a-a3e2-1f3c7ad6b39b",
        "parentId" : "37097f04-597e-4d69-a528-487b4e32adda",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "also correct",
        "createdAt" : "2019-11-24T01:22:36Z",
        "updatedAt" : "2019-11-25T21:52:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ebc05d3dc68d6383c66648c9c1e36c9ba1c64a8",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +667,671 @@\n    @property\n    def quarter(self) -> int:\n        \"\"\"\n        Return the quarter of the year."
  },
  {
    "id" : "38fd308b-436a-4d0d-9ed5-9de4be522e94",
    "prId" : 30676,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30676#pullrequestreview-346133856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6e51736-7530-45c4-b851-a0ee3478c2f2",
        "parentId" : null,
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "@jbrockmendel This appears the way to go if we need maximum performance.\r\nWe do lose a bit of speed (between 10 and 20 percent) because we implement the shortcut after errorchecks and `_date_attributes`.\r\nIs this fine or should we hoist it after (or before) `_date_attributes = [year, month, day, hour, minute, second, microsecond, nanosecond]`? I think the current way is tidier, but it's a tradeoff.\r\n",
        "createdAt" : "2020-01-16T07:24:54Z",
        "updatedAt" : "2020-01-24T09:24:11Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      },
      {
        "id" : "29ef8788-755a-4f25-91ab-12880c7588d1",
        "parentId" : "f6e51736-7530-45c4-b851-a0ee3478c2f2",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I'm not sure all of these extra checks are worth adding to improve perf when passing a Timestamp to a Timestamp constructor - @AlexKirko how often are you expecting that to actually happen?",
        "createdAt" : "2020-01-16T20:32:57Z",
        "updatedAt" : "2020-01-24T09:24:11Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b6f0dcf3-5b9b-4701-a2f1-b0b9bb129137",
        "parentId" : "f6e51736-7530-45c4-b851-a0ee3478c2f2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : ">  how often are you expecting that to actually happen?\r\n\r\nFor internal usage there are a lot of places where we do:\r\n\r\n```\r\nif isinstance(obj, (datetime, np.datetime64)):\r\n    obj = Timestamp(obj)\r\n```\r\n\r\nThat's not exactly the usage being checked here, but could benefit in the same way from an optimized no-other-arguments-passed check.",
        "createdAt" : "2020-01-16T23:14:50Z",
        "updatedAt" : "2020-01-24T09:24:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "53faeb14-9312-4e42-bf3f-9d7c3516c969",
        "parentId" : "f6e51736-7530-45c4-b851-a0ee3478c2f2",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "Admittedly, I don't know the library well enough to comment on internal usage, but @jbrockmendel has already done that.\r\n\r\nHowever, what I've done repeatedly in my own projects when on a deadline is take a `Dataframe` column or a `list` and just cast the elements into the type I need, trusting that if it already is that class, the performance loss won't be noticeable in the larger program (I do lots of ad-hoc data science modeling). I don't think it's as much of a problem in production-quality code, but a lot of people I work with use `pandas` to quickly preprocess data for `sklearn`.\r\n\r\nYou tend to rely on being able to cut corners when working with a well-supported package, and, currently, calling Timestamp on a Timestamp is more than 10 000 times slower than the proposed shortcut, which can be a nasty shock for someone expecting to just blitz through type conversions during data wrangling.\r\n\r\n@WillAyd We could make the code a bit more compact with what was proposed in `4c9eb70`, which you can look up above, but this incurs about a 25% performance loss. I believe that if we do the shortcut, might as well add extra two lines. It's a bit grating but the gain is worth it, I think.\r\n",
        "createdAt" : "2020-01-17T06:11:53Z",
        "updatedAt" : "2020-01-24T09:24:11Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      },
      {
        "id" : "e92ed008-0cdc-4a0b-b136-e1ff77e72128",
        "parentId" : "f6e51736-7530-45c4-b851-a0ee3478c2f2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can you add a comment to the effect of \"we do this verbose thing because cython wont optimize a list comprehension (as of cython 0.29.x)\"",
        "createdAt" : "2020-01-20T01:08:12Z",
        "updatedAt" : "2020-01-24T09:24:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c033a583-fddc-48f6-b0e3-92d1ea2da4fc",
        "parentId" : "f6e51736-7530-45c4-b851-a0ee3478c2f2",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "@jbrockmendel Added the comment you requested.",
        "createdAt" : "2020-01-21T19:28:59Z",
        "updatedAt" : "2020-01-24T09:24:11Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba19e26ab76258e11afecaee6573cf533ea9e834",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +401,405 @@                minute is None and second is None and\n                microsecond is None and nanosecond is None and\n                tzinfo is None):\n            return ts_input\n        elif isinstance(ts_input, str):"
  },
  {
    "id" : "e0ae69d0-cf76-4695-9c9a-1f99fbef6c81",
    "prId" : 31563,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31563#pullrequestreview-351926097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c36dce4-e57f-4b62-b5fd-d615d55e0d63",
        "parentId" : null,
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "This is where we write fold into the final object.",
        "createdAt" : "2020-02-02T08:19:39Z",
        "updatedAt" : "2020-02-26T06:22:55Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd02318aca686126c6c96c1ab3cefda4fbe4b128",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +47,51 @@    ts_base = _Timestamp.__new__(Timestamp, dts.year, dts.month,\n                                 dts.day, dts.hour, dts.min,\n                                 dts.sec, dts.us, tz, fold=fold)\n    ts_base.value = value\n    ts_base.freq = freq"
  },
  {
    "id" : "eec2f20a-a203-4b54-a61c-1364b4a941ff",
    "prId" : 31563,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31563#pullrequestreview-352881734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51fd24de-8056-48b6-9861-5979e097adce",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Think it's okay to default `fold=0` like `datetime.datetime` does.",
        "createdAt" : "2020-02-03T18:22:41Z",
        "updatedAt" : "2020-02-26T06:22:55Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "13d877d7-dc0e-43ad-b4f3-08e28ca97088",
        "parentId" : "51fd24de-8056-48b6-9861-5979e097adce",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "Pinged on my comment on raising an error on conflict between `ts_input.fold` and `fold`.",
        "createdAt" : "2020-02-04T10:48:53Z",
        "updatedAt" : "2020-02-26T06:22:55Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd02318aca686126c6c96c1ab3cefda4fbe4b128",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +360,364 @@        tzinfo=None,\n        *,\n        fold=None\n    ):\n        # The parameter list folds together legacy parameter names (the first"
  },
  {
    "id" : "4db8fabf-3e2e-4836-8858-a375aa1e5b79",
    "prId" : 31563,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31563#pullrequestreview-359506696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a232755a-7483-41c3-9468-365c5a5a6442",
        "parentId" : null,
        "authorId" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "body" : "This again seems like an unnecessary degree of freedom, since `fold` can be easily calculated from the other values provided here, and you'll probably want to do that *anyway* because by adding this unnecessary degree of freedom, you introduce a potential error condition: `value` + `tz` may resolve to something with a different value of `fold` than is passed to this function. \r\n\r\nAdmittedly the same argument can be made about the `value` and `dts` components, though - `value` + `tz` should be entirely sufficient to construct `dts` and `fold`.\r\n\r\nI can see it if this function is only ever called by things which are guaranteed to generate harmonious values for `dts` and `fold`, but if that's the case it would be a good idea to document that this function is over-specified and that no validation is done.",
        "createdAt" : "2020-02-10T16:34:16Z",
        "updatedAt" : "2020-02-26T06:22:55Z",
        "lastEditedBy" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "tags" : [
        ]
      },
      {
        "id" : "951943d8-3734-4cae-8555-9dff26e617c1",
        "parentId" : "a232755a-7483-41c3-9468-365c5a5a6442",
        "authorId" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "body" : "I think we can resolve this conversation, since this actually does seem to be a thin wrapper around the `Timestamp` constructor?",
        "createdAt" : "2020-02-16T20:21:59Z",
        "updatedAt" : "2020-02-26T06:22:56Z",
        "lastEditedBy" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "tags" : [
        ]
      },
      {
        "id" : "62d81e00-1c29-47f8-8984-ce97b11ed41a",
        "parentId" : "a232755a-7483-41c3-9468-365c5a5a6442",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "Yes, you are right.",
        "createdAt" : "2020-02-17T06:15:25Z",
        "updatedAt" : "2020-02-26T06:22:56Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd02318aca686126c6c96c1ab3cefda4fbe4b128",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +42,46 @@cdef inline object create_timestamp_from_ts(int64_t value,\n                                            npy_datetimestruct dts,\n                                            object tz, object freq, bint fold):\n    \"\"\" convenience routine to construct a Timestamp from its parts \"\"\"\n    cdef _Timestamp ts_base"
  },
  {
    "id" : "a6287277-a11b-4ab2-86f2-9631a68cf542",
    "prId" : 31563,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31563#pullrequestreview-359510192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db7eaa6d-ec68-4169-a722-09b4fe120824",
        "parentId" : null,
        "authorId" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "body" : "Should `fold` be keyword-only, like it is in `datetime.datetime`?",
        "createdAt" : "2020-02-16T20:39:30Z",
        "updatedAt" : "2020-02-26T06:22:56Z",
        "lastEditedBy" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "tags" : [
        ]
      },
      {
        "id" : "27b5fb73-95e7-4ec3-b4c8-7ec728f8d231",
        "parentId" : "db7eaa6d-ec68-4169-a722-09b4fe120824",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "Yes, we probably should. Done.",
        "createdAt" : "2020-02-17T06:28:29Z",
        "updatedAt" : "2020-02-26T06:22:56Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd02318aca686126c6c96c1ab3cefda4fbe4b128",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +360,364 @@        tzinfo=None,\n        *,\n        fold=None\n    ):\n        # The parameter list folds together legacy parameter names (the first"
  },
  {
    "id" : "f61ccf2a-2d63-4601-9956-28ed5a63f781",
    "prId" : 31563,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31563#pullrequestreview-360881687",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "359fc393-fc4a-4435-9ec9-1255ae69c3c8",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "should \"possibly unambiguous\" be \"possibly ambiguous\"?",
        "createdAt" : "2020-02-19T00:01:05Z",
        "updatedAt" : "2020-02-26T06:22:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "80a3a53e-5a68-44db-9895-153d29743830",
        "parentId" : "359fc393-fc4a-4435-9ec9-1255ae69c3c8",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "@jbrockmendel\r\nNo, the problem here is when we get `fold` specified with `ts_input` that specifies a point in time unambiguously, like nanoseconds since epoch or `str` that includes the offset. In these cases `fold` is either redundant, or there is a conflict, which is why we raise.",
        "createdAt" : "2020-02-19T07:10:18Z",
        "updatedAt" : "2020-02-26T06:22:56Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd02318aca686126c6c96c1ab3cefda4fbe4b128",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +411,415 @@                    getattr(ts_input, 'tzinfo', None) is None)):\n                raise ValueError(\n                    \"Cannot pass fold with possibly unambiguous input: int, \"\n                    \"float, numpy.datetime64, str, or timezone-aware \"\n                    \"datetime-like. Pass naive datetime-like or build \""
  },
  {
    "id" : "47b7fc85-aee2-4efb-b912-d27c60697549",
    "prId" : 31563,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31563#pullrequestreview-360938083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a06a6cb3-ca88-41a4-a453-7c8b9b3fb0d9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "blank line",
        "createdAt" : "2020-02-19T00:10:10Z",
        "updatedAt" : "2020-02-26T06:22:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0ed9e743-5307-4779-a567-e3e01077c90e",
        "parentId" : "a06a6cb3-ca88-41a4-a453-7c8b9b3fb0d9",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "Done.",
        "createdAt" : "2020-02-19T09:03:20Z",
        "updatedAt" : "2020-02-26T06:22:56Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd02318aca686126c6c96c1ab3cefda4fbe4b128",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +202,206 @@        the wall clock hits the ambiguous time\n\n        .. versionadded:: 1.1.0\n\n    Notes"
  },
  {
    "id" : "2351f590-5476-4a63-b2ac-179110110e5f",
    "prId" : 31563,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31563#pullrequestreview-363899225",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95dd4cf6-0be7-4154-9f96-c98e78f6778f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this needed? (e.g. we are passing fold now to all of the construction functions)",
        "createdAt" : "2020-02-23T14:51:24Z",
        "updatedAt" : "2020-02-26T06:22:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "edea6fc6-3acb-4e38-8844-0871d05eb680",
        "parentId" : "95dd4cf6-0be7-4154-9f96-c98e78f6778f",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "It's still needed when we pass a naive datetime, fold, and a timezone.",
        "createdAt" : "2020-02-25T06:38:12Z",
        "updatedAt" : "2020-02-26T06:22:56Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd02318aca686126c6c96c1ab3cefda4fbe4b128",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +423,427 @@                )\n\n            if hasattr(ts_input, 'fold'):\n                ts_input = ts_input.replace(fold=fold)\n"
  },
  {
    "id" : "182a56ba-4689-4f9e-ab7b-bc1830c1bcee",
    "prId" : 31563,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31563#pullrequestreview-363905028",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5524babd-8f3c-4097-941e-310b0369a011",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Could you add a test that hits this exception?",
        "createdAt" : "2020-02-24T06:23:13Z",
        "updatedAt" : "2020-02-26T06:22:56Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "c67364b8-9d84-4291-b32e-10a9d4361414",
        "parentId" : "5524babd-8f3c-4097-941e-310b0369a011",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "Done.",
        "createdAt" : "2020-02-25T06:54:35Z",
        "updatedAt" : "2020-02-26T06:22:56Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd02318aca686126c6c96c1ab3cefda4fbe4b128",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +403,407 @@        if fold is not None:\n            if fold not in [0, 1]:\n                raise ValueError(\n                    \"Valid values for the fold argument are None, 0, or 1.\"\n                )"
  },
  {
    "id" : "995faed7-2540-4330-8628-9b0401150743",
    "prId" : 31653,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31653#pullrequestreview-355919257",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "beac316b-03f1-450f-b40f-486820fb5171",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can't you just \r\n\r\n```\r\ndatetime_kwargs = {\r\n....\r\nyear = year,\r\nmonth=month,\r\nday=day}\r\n```",
        "createdAt" : "2020-02-09T21:45:34Z",
        "updatedAt" : "2020-02-26T01:20:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b312333f-0798-4556-b777-22869606c294",
        "parentId" : "beac316b-03f1-450f-b40f-486820fb5171",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "IOW put all of the args in a dict",
        "createdAt" : "2020-02-09T21:45:43Z",
        "updatedAt" : "2020-02-26T01:20:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9d9e7b9a-ba1c-48e1-ab60-5c94aceff2bb",
        "parentId" : "beac316b-03f1-450f-b40f-486820fb5171",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "We don't want to put e.g. `'year': None` in the dict because it produces a different error message than what we want.",
        "createdAt" : "2020-02-10T00:34:12Z",
        "updatedAt" : "2020-02-26T01:20:08Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "56892be3-2bdc-4a55-b0cb-bea9dceb91f1",
        "parentId" : "beac316b-03f1-450f-b40f-486820fb5171",
        "authorId" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "body" : "Yes, as @mroeschke pointed out, we can't put arguments `year`, `month` or `day` in `datetime_kwargs` because it products a different error message. Doing that is equivalent to `datetime(year=None, month=None, day=None)` whereas we want it to behave like `datetime()` and so that the error message explicitly tells users they are missing an argument (e.g. year), rather than a confusing `integer is required`",
        "createdAt" : "2020-02-10T13:05:38Z",
        "updatedAt" : "2020-02-26T01:20:08Z",
        "lastEditedBy" : "b0a6eeee-8def-464d-ba0c-d3158c1c80bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f495436061568fd39c2d4cfee3a7a6e2fedf2fe",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +421,425 @@                \"second\": second or 0,\n                \"microsecond\": microsecond or 0\n            }\n            if year is not None:\n                datetime_kwargs[\"year\"] = year"
  },
  {
    "id" : "991fb4c0-7a9f-469e-b37e-89b70d1c43ac",
    "prId" : 34143,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34143#pullrequestreview-410525476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "106f4750-82e1-4f5e-831a-057f95da53cd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you don't want to move the nanosecond==0 case up a level? (maybe marginally more clear)\r\ne.g. \r\n```\r\nelif self.nanosecond == 0 and PyDateTime_Check(...)\r\n    .....\r\nelif PyDatetime_Check or is_datetime64.......\r\n```",
        "createdAt" : "2020-05-12T23:38:17Z",
        "updatedAt" : "2020-05-12T23:38:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4c2c21a4-8408-49ea-8dce-4d87c56dc782",
        "parentId" : "106f4750-82e1-4f5e-831a-057f95da53cd",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i considered that, ended up deciding i prefer keeping datetime-scalar-like checks together to mirror what we do elsewhere",
        "createdAt" : "2020-05-13T01:20:26Z",
        "updatedAt" : "2020-05-13T01:20:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb381ed0caf5643e45d01a6979fc0b3ab324216d",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +229,233 @@        elif other is NaT:\n            return op == Py_NE\n        elif PyDateTime_Check(other) or is_datetime64_object(other):\n            if self.nanosecond == 0 and PyDateTime_Check(other):\n                val = self.to_pydatetime()"
  },
  {
    "id" : "72e9d5aa-f11a-4501-b4e0-e90b26f07c96",
    "prId" : 34370,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34370#pullrequestreview-417881612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15b14a2f-2dea-402e-9adb-ceda7e90de2a",
        "parentId" : null,
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "Here as well",
        "createdAt" : "2020-05-25T21:32:19Z",
        "updatedAt" : "2020-05-26T09:37:50Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      }
    ],
    "commit" : "2132119b7bea9961d679babae5fe625f1c78d557",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +195,199 @@        \"no longer supported.  Instead of adding/subtracting `n`, \"\n        \"use `n * obj.freq`\"\n    )\n    return TypeError(int_addsub_msg)\n"
  },
  {
    "id" : "e9858148-641e-45de-9a52-0e44307f2803",
    "prId" : 35036,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35036#pullrequestreview-439566432",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "504b10fc-33a0-4568-b304-3eb187209a08",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't you now need to move freq to _Timestamp?",
        "createdAt" : "2020-06-29T22:56:58Z",
        "updatedAt" : "2020-06-29T22:57:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4fd7679b-3548-4a94-9697-b157c71b8024",
        "parentId" : "504b10fc-33a0-4568-b304-3eb187209a08",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "dont _need_ to, no.  but i do want to.  saving that for next pass",
        "createdAt" : "2020-06-29T23:22:04Z",
        "updatedAt" : "2020-06-29T23:22:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "43023bc21efb9f6f93a8e206fea36910da9e5cb8",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +479,483 @@        Return True if date is first day of month.\n        \"\"\"\n        if self.freq is None:\n            # fast-path for non-business frequencies\n            return self.day == 1"
  },
  {
    "id" : "07e1387f-cdbf-44a1-b95f-8707e903e22d",
    "prId" : 37390,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37390#pullrequestreview-516313401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d8d572c-b9ad-4630-9d5e-eae03d5d2b5c",
        "parentId" : null,
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "You don't need to define a second property, set `dayofweek` to be an alias of `day_of_week`",
        "createdAt" : "2020-10-24T23:25:36Z",
        "updatedAt" : "2020-10-26T13:56:51Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "a07e61a4387a40e21ebe99df98a55a710c54fdd6",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +547,551 @@        return self.weekday()\n\n    @property\n    def day_of_year(self) -> int:\n        \"\"\""
  },
  {
    "id" : "996a5cb4-08f2-4154-a660-bbc82943bba7",
    "prId" : 37904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37904#pullrequestreview-535614046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d82cef4f-c3c1-4adf-abe4-5c675907bbbb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you put a blank line between cases",
        "createdAt" : "2020-11-19T02:45:06Z",
        "updatedAt" : "2021-03-21T11:07:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3651acef-9d07-40c8-b510-03aec8bbd56d",
        "parentId" : "d82cef4f-c3c1-4adf-abe4-5c675907bbbb",
        "authorId" : "8bb32ad4-7074-4e1c-a6a3-c339884ada55",
        "body" : "Done",
        "createdAt" : "2020-11-20T17:08:04Z",
        "updatedAt" : "2021-03-21T11:07:55Z",
        "lastEditedBy" : "8bb32ad4-7074-4e1c-a6a3-c339884ada55",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbf195899dae6beb6e9bd099afa6cb83f440403",
    "line" : 300,
    "diffHunk" : "@@ -1,1 +857,861 @@        >>> ts = pd.Timestamp('2020-03-14T15:32:52.192548651')\n        >>> ts.to_period(freq='Y) # Year end frequency\n        numpy.datetime64('2020-03-14T15:32:52.192548651')\n\n        >>> ts.to_period(freq='M') # Month end frequency"
  },
  {
    "id" : "ad01cb5c-25b7-4bd9-8dd2-4f895bd88439",
    "prId" : 37904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37904#pullrequestreview-535613954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26bbbd21-4aba-4d38-877a-c441245fc743",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you put a blank line between cases",
        "createdAt" : "2020-11-19T02:45:19Z",
        "updatedAt" : "2021-03-21T11:07:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "37563183-5b56-4fbd-b22b-a417166bb9d7",
        "parentId" : "26bbbd21-4aba-4d38-877a-c441245fc743",
        "authorId" : "8bb32ad4-7074-4e1c-a6a3-c339884ada55",
        "body" : "Done",
        "createdAt" : "2020-11-20T17:07:56Z",
        "updatedAt" : "2021-03-21T11:07:55Z",
        "lastEditedBy" : "8bb32ad4-7074-4e1c-a6a3-c339884ada55",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbf195899dae6beb6e9bd099afa6cb83f440403",
    "line" : 440,
    "diffHunk" : "@@ -1,1 +1356,1360 @@\n        >>> ts.round(freq='T') # minute\n        Timestamp('2020-03-14 15:33:00')\n\n        >>> ts.round(freq='S') # seconds"
  },
  {
    "id" : "f4db0e1b-0279-49ba-95d4-bb15fd903bff",
    "prId" : 37904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37904#pullrequestreview-535614190",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b11da173-904d-4c09-9c78-27884d3af81c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2020-11-19T02:45:25Z",
        "updatedAt" : "2021-03-21T11:07:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f4422d37-f0ed-4fc7-ac89-37fa55da9ac2",
        "parentId" : "b11da173-904d-4c09-9c78-27884d3af81c",
        "authorId" : "8bb32ad4-7074-4e1c-a6a3-c339884ada55",
        "body" : "Done",
        "createdAt" : "2020-11-20T17:08:15Z",
        "updatedAt" : "2021-03-21T11:07:55Z",
        "lastEditedBy" : "8bb32ad4-7074-4e1c-a6a3-c339884ada55",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbf195899dae6beb6e9bd099afa6cb83f440403",
    "line" : 481,
    "diffHunk" : "@@ -1,1 +1431,1435 @@        Timestamp('2020-03-14 15:00:00')\n\n        >>> ts.floor(freq='T') # minute\n        Timestamp('2020-03-14 15:32:00')\n"
  },
  {
    "id" : "a2dba024-0c4a-4e03-bf6d-037347370379",
    "prId" : 37904,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37904#pullrequestreview-535614276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47ebfe72-1bf1-462d-8c61-bc8564e273dc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same comment",
        "createdAt" : "2020-11-19T02:46:01Z",
        "updatedAt" : "2021-03-21T11:07:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d49033d3-948e-485f-8bf8-e8233c0ecec7",
        "parentId" : "47ebfe72-1bf1-462d-8c61-bc8564e273dc",
        "authorId" : "8bb32ad4-7074-4e1c-a6a3-c339884ada55",
        "body" : "Done",
        "createdAt" : "2020-11-20T17:08:22Z",
        "updatedAt" : "2021-03-21T11:07:55Z",
        "lastEditedBy" : "8bb32ad4-7074-4e1c-a6a3-c339884ada55",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbf195899dae6beb6e9bd099afa6cb83f440403",
    "line" : 526,
    "diffHunk" : "@@ -1,1 +1508,1512 @@        Timestamp('2020-03-14 15:33:00')\n\n        >>> ts.ceil(freq='S') # seconds\n        Timestamp('2020-03-14 15:32:53')\n"
  }
]