[
  {
    "id" : "ebff4b5f-ad54-4b40-8ed5-2838e7eaf8f6",
    "prId" : 18164,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18164#pullrequestreview-99540684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c08fdd78-8a2b-4c7c-af9c-6bb3355f6867",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can u have this call day_name",
        "createdAt" : "2018-02-27T02:31:33Z",
        "updatedAt" : "2018-03-02T03:27:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d97f43b2a16351aeeaf4e993f7014b5e803e2b4d",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +767,771 @@        warnings.warn(\"`weekday_name` is deprecated and will be removed in a \"\n                      \"future version. Use `day_name` instead\",\n                      DeprecationWarning)\n        return self.day_name()\n"
  },
  {
    "id" : "037da9ef-82c6-4937-ac6f-6fd4d5aa0ce9",
    "prId" : 18369,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18369#pullrequestreview-77649860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7b050c3-24b6-4d1c-b480-f46137457c7c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can cdef these (TODO)",
        "createdAt" : "2017-11-19T17:21:53Z",
        "updatedAt" : "2017-11-20T15:01:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6e4cf4a2-9813-4716-8a93-7d48b3bbf5ed",
        "parentId" : "e7b050c3-24b6-4d1c-b480-f46137457c7c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, in fact a bunch of stuff can be moved up to `_Timestamp`.",
        "createdAt" : "2017-11-19T17:55:08Z",
        "updatedAt" : "2017-11-20T15:01:19Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c00d36b03d06894346102ebba0c77725d94798e2",
    "line" : 950,
    "diffHunk" : "@@ -1,1 +948,952 @@        0 Julian date is noon January 1, 4713 BC.\n        \"\"\"\n        year = self.year\n        month = self.month\n        day = self.day"
  },
  {
    "id" : "1b6358fb-35b6-44c7-bcfe-c35da687f017",
    "prId" : 18539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18539#pullrequestreview-79537325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4bf1977-493f-4e70-8e81-96f840cb1b31",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so why is this in _Timestamp again (as opposed to Timestamp); this is why its cpdef, why not just cdef?",
        "createdAt" : "2017-11-28T11:09:39Z",
        "updatedAt" : "2017-11-28T15:30:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "17a359a6-fef5-4752-8f04-620954d6eafc",
        "parentId" : "c4bf1977-493f-4e70-8e81-96f840cb1b31",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not sure why its in _Timestamp instead of Timestamp (though my understanding is putting it in _Timestamp is slightly more performant and smaller memory footprint); it was that way before I got here.\r\n\r\nIt is `cpdef` and not `cdef` because if it were cdef then calling it from Timestamp would be an AttributeError.  That's why #18446 moved a bunch of properties up to _Timestamp after making it cdef.",
        "createdAt" : "2017-11-28T15:12:18Z",
        "updatedAt" : "2017-11-28T15:30:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9baeb6db0bc459e3431fd42ff16884bceaf61ff9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +305,309 @@        return int(out[0])\n\n    cpdef bint _get_start_end_field(self, str field):\n        cdef:\n            int64_t val"
  },
  {
    "id" : "0d727fb9-51ad-4f74-8672-4d001ee8db80",
    "prId" : 18811,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18811#pullrequestreview-84558575",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20d04bf8-96a6-48c3-881b-f17949fde71b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we use this nomenclature above? if not can you reconcile",
        "createdAt" : "2017-12-19T11:35:31Z",
        "updatedAt" : "2017-12-19T19:12:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "039fc5cb-7713-42a7-85a3-04a8a609ac13",
        "parentId" : "20d04bf8-96a6-48c3-881b-f17949fde71b",
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "yes in the above the doc says:\r\n```\r\n    Notes\r\n    -----\r\n    There are essentially three calling conventions for the constructor. The\r\n    primary form accepts four parameters. They can be passed by position or\r\n    keyword.\r\n\r\n    The other two forms mimic the parameters from ``datetime.datetime``. They\r\n    can be passed by either position or keyword, but not both mixed together.\r\n```",
        "createdAt" : "2017-12-19T19:11:32Z",
        "updatedAt" : "2017-12-19T19:12:09Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcdf2abed53fbebe7bd0e3a4c1136e5f16a534ea",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +408,412 @@    Examples\n    --------\n    Using the primary calling convention:\n\n    This converts a datetime-like string"
  },
  {
    "id" : "e236f653-99d4-4e0b-9c57-e3d4d02fbaf4",
    "prId" : 19889,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19889#pullrequestreview-99147901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee7485d7-82b3-4ef8-9844-1d587b3cd7fe",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "What if we get here with a string ts_input with conflicting nanos? I think it might be better to accept nanos _only_ in combination with other integer args/kwargs.",
        "createdAt" : "2018-02-25T04:48:05Z",
        "updatedAt" : "2018-02-28T04:56:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "57e0721a-7158-4926-9106-1088a83cce71",
        "parentId" : "ee7485d7-82b3-4ef8-9844-1d587b3cd7fe",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Currently (and in this PR), the Timestamp constructor will just parse the string and ignore all additional passed kwargs related to the values of each datetime element:\r\n\r\n```\r\nIn [7]: Timestamp('2010-10-10 12:59:59.999999999', hour=0, nanosecond=16)\r\nOut[7]: Timestamp('2010-10-10 12:59:59.999999999')\r\n``` \r\n\r\nThe nanosecond kwarg will only be used if a datetime.datetime is passed or other datetime element kwargs are passed. As mentioned in my other comment, we might also want to raise in the situation above. ",
        "createdAt" : "2018-02-25T05:35:34Z",
        "updatedAt" : "2018-02-28T04:56:58Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "9577c5c2-2f9c-4151-a5a5-7ec305312b21",
        "parentId" : "ee7485d7-82b3-4ef8-9844-1d587b3cd7fe",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I agree here, the nanoscecond kw must only be used when kwargs are passed",
        "createdAt" : "2018-02-25T16:27:28Z",
        "updatedAt" : "2018-02-28T04:56:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c81ec573e5fc699e3cdb9161bec7513b17dd54c9",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +623,627 @@            tz, tzinfo = tzinfo, None\n\n        ts = convert_to_tsobject(ts_input, tz, unit, 0, 0, nanosecond or 0)\n\n        if ts.value == NPY_NAT:"
  },
  {
    "id" : "1aa9c9cc-01c4-4a36-9271-78ac15500df8",
    "prId" : 22644,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22644#pullrequestreview-156335200",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a67c72e0-64a5-4dc7-80db-ceb32320c704",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, this is now a bit confusing, e.g. there is overlap between errors and nonexistent. Is it possible to use errors instead here? (and not add a new keyword)?",
        "createdAt" : "2018-09-18T12:16:32Z",
        "updatedAt" : "2018-10-24T22:22:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cf16e2f197e8405f27ebdfa4c2718620261df04",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +980,984 @@            - 'raise' will raise an AmbiguousTimeError for an ambiguous time\n\n        nonexistent : 'shift', 'NaT', default 'raise'\n            A nonexistent time does not exist in a particular timezone\n            where clocks moved forward due to DST."
  },
  {
    "id" : "076356ff-4d6e-4e1a-a9a7-2a90124289db",
    "prId" : 22644,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22644#pullrequestreview-160129060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5c2e124-b082-442d-8628-afe5456d2816",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is a top-level yes? (e.g. user callable)",
        "createdAt" : "2018-09-30T14:03:25Z",
        "updatedAt" : "2018-10-24T22:22:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d688a9dc-f775-45af-abfe-8ad1124255d1",
        "parentId" : "f5c2e124-b082-442d-8628-afe5456d2816",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Correct. Users still have access to errors in `Timestamp.tz_localize`",
        "createdAt" : "2018-09-30T21:21:29Z",
        "updatedAt" : "2018-10-24T22:22:30Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cf16e2f197e8405f27ebdfa4c2718620261df04",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +992,996 @@            .. versionadded:: 0.24.0\n\n        errors : 'raise', 'coerce', default None\n            - 'raise' will raise a NonExistentTimeError if a timestamp is not\n               valid in the specified timezone (e.g. due to a transition from"
  },
  {
    "id" : "8b805ab5-14cd-4ece-b8a4-40918a92035a",
    "prId" : 22644,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22644#pullrequestreview-161989084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "883e730a-c14a-44ef-933f-1f1969027017",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you explain here how to replace the existing errors keyword with nonexistent?\r\n\r\n(and the same for the other docstring where this shows up)",
        "createdAt" : "2018-10-05T11:16:30Z",
        "updatedAt" : "2018-10-24T22:22:30Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cf16e2f197e8405f27ebdfa4c2718620261df04",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +999,1003 @@              into the specified timezone. Use ``nonexistent='NaT'`` instead.\n\n              .. deprecated:: 0.24.0\n\n        Returns"
  },
  {
    "id" : "87e60ec6-a65b-4108-b494-ae66d2fb270a",
    "prId" : 22802,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22802#pullrequestreview-157941504",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "128238b2-3a52-4984-b5d0-b8449d14921b",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Cython typing should make this check unnecessary",
        "createdAt" : "2018-09-21T23:20:37Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a6fb8938-082f-4192-915f-63f2624fdbfa",
        "parentId" : "128238b2-3a52-4984-b5d0-b8449d14921b",
        "authorId" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "body" : "As you remarked above, Cython typing does not work on native enum classes. Here I prefer to maintain `enum` semantics and have *enumeration members* instances of the `RoundTo` class. Therefore I dropped the `mode: RoundTo` annotation and kept the `isinstance` check. See 44902695f4adba3406fb4750e819a5776683cae7",
        "createdAt" : "2018-09-23T14:46:06Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "tags" : [
        ]
      }
    ],
    "commit" : "988e5e30f87fad277c3a5b714d75738ff2545f21",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +140,144 @@\n    if not isinstance(mode, RoundTo):\n        raise ValueError('mode should be a RoundTo member')\n\n    unit = to_offset(freq).nanos"
  },
  {
    "id" : "6a3ed58a-3988-4a00-a072-508f57a3cb4f",
    "prId" : 22802,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22802#pullrequestreview-157944694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1617a37-414c-4d15-99b0-7b30afab3f1e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "since the impl is only used once, i would in-line these functions from above.",
        "createdAt" : "2018-09-23T11:58:25Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4e4878f0-44d3-4edc-8e91-43e102c8d19c",
        "parentId" : "e1617a37-414c-4d15-99b0-7b30afab3f1e",
        "authorId" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "body" : "(I'm not sure I fully understand your comment, please correct me if I'm mistaken).\r\n\r\nHere I'm trying to avoid recursive calls still keeping DRY. \r\n\r\n<https://github.com/pandas-dev/pandas/blob/44902695f4adba3406fb4750e819a5776683cae7/pandas/_libs/tslibs/timestamps.pyx#L81-L91> \r\n\r\nThe *simple* rounding modes (`RoundTo.MINUS_INFTY`, `RoundTo.PLUS_INFTY`, `RoundTo.NEAREST_HALF_PLUS_INFTY`, `RoundTo.NEAREST_HALF_MINUS_INFTY`) which can be implemented as one-liners, are inlined for readability and efficiency.\r\n\r\n`RoundTo.NEAREST_HALF_EVEN` is more complex to implement and is not inlined:\r\n<https://github.com/pandas-dev/pandas/blob/44902695f4adba3406fb4750e819a5776683cae7/pandas/_libs/tslibs/timestamps.pyx#L122-L132>\r\n\r\nSome rounding modes of `round_nsint64` are never called, but I prefer to have a more general implementation here, in order to allow future extensions.",
        "createdAt" : "2018-09-23T15:28:21Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "tags" : [
        ]
      },
      {
        "id" : "14bb59c2-3944-4034-bad8-3cf63a92bedf",
        "parentId" : "e1617a37-414c-4d15-99b0-7b30afab3f1e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, just trying to make it much simpler for a new reader here. inline what you can then.",
        "createdAt" : "2018-09-23T16:43:03Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "988e5e30f87fad277c3a5b714d75738ff2545f21",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +148,152 @@    elif mode is RoundTo.PLUS_INFTY:\n        return _ceil_int64(values, unit)\n    elif mode is RoundTo.NEAREST_HALF_MINUS_INFTY:\n        return _rounddown_int64(values, unit)\n    elif mode is RoundTo.NEAREST_HALF_PLUS_INFTY:"
  },
  {
    "id" : "6f2d947b-d465-4eea-a566-423e42486a37",
    "prId" : 22802,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22802#pullrequestreview-158322664",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "261228f6-ae8e-4223-b8a2-4473d9f61e39",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a link to point to define these types of rounding? ",
        "createdAt" : "2018-09-23T11:58:46Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6a5fb2c3-fa77-4949-89b0-c005b86964f0",
        "parentId" : "261228f6-ae8e-4223-b8a2-4473d9f61e39",
        "authorId" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "body" : "The wikipedia article on [rounding](https://en.wikipedia.org/wiki/Rounding) is a handy reference.\r\n\r\n- [`RoundTo.MINUS_INFTY`](https://en.wikipedia.org/wiki/Rounding#Rounding_down)\r\n- [`RoundTo.PLUS_INFTY`](https://en.wikipedia.org/wiki/Rounding#Rounding_up)\r\n- [`RoundTo.NEAREST_HALF_EVEN`](https://en.wikipedia.org/wiki/Rounding#Round_half_to_even)\r\n- [`RoundTo.NEAREST_HALF_PLUS_INFTY`](https://en.wikipedia.org/wiki/Rounding#Round_half_up)\r\n- [`RoundTo.NEAREST_HALF_MINUS_INFTY`](https://en.wikipedia.org/wiki/Rounding#Round_half_down)\r\n\r\nShould I add the to the source code?",
        "createdAt" : "2018-09-23T15:43:20Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "tags" : [
        ]
      },
      {
        "id" : "a8df535c-9a87-45ec-970b-eaa13388a640",
        "parentId" : "261228f6-ae8e-4223-b8a2-4473d9f61e39",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes pls",
        "createdAt" : "2018-09-23T16:42:36Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "322fbfd7-fd2c-48be-a089-cf97cd064c8b",
        "parentId" : "261228f6-ae8e-4223-b8a2-4473d9f61e39",
        "authorId" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "body" : "doc string with refs added",
        "createdAt" : "2018-09-24T22:41:18Z",
        "updatedAt" : "2018-09-26T19:34:12Z",
        "lastEditedBy" : "d78018ab-f3ef-4144-beb2-3c18c4004299",
        "tags" : [
        ]
      }
    ],
    "commit" : "988e5e30f87fad277c3a5b714d75738ff2545f21",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +144,148 @@    unit = to_offset(freq).nanos\n\n    if mode is RoundTo.MINUS_INFTY:\n        return _floor_int64(values, unit)\n    elif mode is RoundTo.PLUS_INFTY:"
  },
  {
    "id" : "5fccdf16-dc46-43e9-a774-21b17a4875f3",
    "prId" : 23406,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23406#pullrequestreview-169741426",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31b37ab6-321a-4f7c-98c8-b02b4313a73a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same comment as above about the doc-strings",
        "createdAt" : "2018-10-30T12:18:04Z",
        "updatedAt" : "2018-10-31T04:52:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b31f034f5da9a0311ccaf99c9cae18437e6943b0",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +765,769 @@            - 'NaT' will return NaT where there are nonexistent times\n            - 'raise' will raise an NonExistentTimeError if there are\n              nonexistent times\n\n            .. versionadded:: 0.24.0"
  },
  {
    "id" : "1b600115-322f-408d-bdfa-3b7164c5f752",
    "prId" : 23456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23456#pullrequestreview-171099889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac78a0c9-3e0d-457e-a02e-ee08750bfece",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "void?",
        "createdAt" : "2018-11-02T13:30:10Z",
        "updatedAt" : "2018-11-02T13:31:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "afdd39ebbd990a8fe0a92b5e768444d9d9314fa7",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +301,305 @@                return dtval >= other\n\n    cdef _assert_tzawareness_compat(_Timestamp self, datetime other):\n        if self.tzinfo is None:\n            if other.tzinfo is not None:"
  },
  {
    "id" : "1d840c52-07e4-48ba-85e8-2665c30110e0",
    "prId" : 23503,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23503#pullrequestreview-172500481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e10ca429-9f1b-4043-82ab-f3b1f6f586a1",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "What do we expect it to be in this case? Aside from None I guess",
        "createdAt" : "2018-11-05T23:34:50Z",
        "updatedAt" : "2018-11-07T06:32:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0a03af0f-b6dd-406a-b53b-52d4d0133cc5",
        "parentId" : "e10ca429-9f1b-4043-82ab-f3b1f6f586a1",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "This can be a `Timestamp` in which we want to extract its frequency and pass along.",
        "createdAt" : "2018-11-06T01:29:20Z",
        "updatedAt" : "2018-11-07T06:32:11Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "d2008c97-67b5-4f3d-8d2d-ebcaf9be2e3b",
        "parentId" : "e10ca429-9f1b-4043-82ab-f3b1f6f586a1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "IIUC you're referring to `ts_input` being a Timestamp.  I'm asking what `freq` is in this case.  More specifically, anything other than `None` seems like it should be invalid.  Or am I missing something?",
        "createdAt" : "2018-11-06T01:59:33Z",
        "updatedAt" : "2018-11-07T06:32:11Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d27ca9c5-98e3-47f8-8883-91470af99eca",
        "parentId" : "e10ca429-9f1b-4043-82ab-f3b1f6f586a1",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Ah sorry for misunderstanding. You're correct in that this is essentially swallowing any nonsense frequency and just returning `None`",
        "createdAt" : "2018-11-06T06:11:44Z",
        "updatedAt" : "2018-11-07T06:32:11Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "86ec5459-339e-4e73-a51c-bf1a383a8ef1",
        "parentId" : "e10ca429-9f1b-4043-82ab-f3b1f6f586a1",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "`freq` should only ever be `None`, a offset string, or offset object",
        "createdAt" : "2018-11-06T06:15:44Z",
        "updatedAt" : "2018-11-07T06:32:11Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "985e3dc4-66aa-460f-bdce-6d7aa5345a41",
        "parentId" : "e10ca429-9f1b-4043-82ab-f3b1f6f586a1",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Won't this silently pass if ``freq`` has invalid type? Couldn't we just say that ``freq = getattr(ts_input, 'freq', None) if freq is None else freq``?",
        "createdAt" : "2018-11-07T14:01:59Z",
        "updatedAt" : "2018-11-07T14:01:59Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "218e41897f7ca77bae458a8301c6767a0fc029f5",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +737,741 @@            freq = to_offset(freq)\n        elif not is_offset_object(freq):\n            # GH 22311: Try to extract the frequency of a given Timestamp input\n            freq = getattr(ts_input, 'freq', None)\n"
  },
  {
    "id" : "90681e3e-949f-458e-9983-7bb6e7cba549",
    "prId" : 24021,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24021#pullrequestreview-180569666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43b2bc2d-a1a3-4467-813a-a42094ddf63c",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This should also be done in place of what is currently L229-237",
        "createdAt" : "2018-12-02T17:16:45Z",
        "updatedAt" : "2019-04-01T12:13:40Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfda6c3300e5f2a3fbdc910782003d2bb0206566",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +234,238 @@                return PyObject_RichCompare(other, self, reverse_ops[op])\n            else:\n                return NotImplemented\n\n        self._assert_tzawareness_compat(other)"
  },
  {
    "id" : "5fee53e2-acbb-4956-9963-03c7ef846afa",
    "prId" : 24170,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24170#pullrequestreview-182993241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d970f683-cb02-45eb-8dd2-e717fd70ad44",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I haven't looked at how this is used, but does leaving these as class attributes work?",
        "createdAt" : "2018-12-09T20:25:40Z",
        "updatedAt" : "2018-12-11T13:36:55Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "98898dc37bcd7c3e1bb7d32e80b92dcd4e5b91d8",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +104,108 @@           https://en.wikipedia.org/wiki/Rounding#Round_half_to_even\n    \"\"\"\n    @property\n    def MINUS_INFTY(self):\n        return 0"
  }
]