[
  {
    "id" : "e8bb7fd2-cf99-4cfc-aa65-848bc7cb94e5",
    "prId" : 17875,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17875#pullrequestreview-72677494",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3725ae07-811e-45cf-9ac1-39d938fc6658",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add an assert n >= 1 here",
        "createdAt" : "2017-10-28T17:50:25Z",
        "updatedAt" : "2017-10-29T22:05:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4b84f90750d3ae251cda6a22bc86f7b10e1f9e0",
    "line" : 470,
    "diffHunk" : "@@ -1,1 +468,472 @@cdef inline bisect_right_i8(int64_t *data, int64_t val, Py_ssize_t n):\n    cdef Py_ssize_t pivot, left = 0, right = n\n\n    assert n >= 1\n"
  },
  {
    "id" : "3b2950a4-ab1e-4cfe-a3bc-88d2823b1471",
    "prId" : 18086,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18086#pullrequestreview-74268820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18aef472-afbc-414d-96f9-4d14e553f88a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a reason for the localization functions to exists here rather than in timezones.pyx?",
        "createdAt" : "2017-11-04T23:35:38Z",
        "updatedAt" : "2017-11-12T19:04:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0385c4f3-c66e-470f-877f-7f2567db5bd4",
        "parentId" : "18aef472-afbc-414d-96f9-4d14e553f88a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Really want to limit the points of contact with `pandas_datetimestruct` and the ensuing dependencies.",
        "createdAt" : "2017-11-04T23:52:36Z",
        "updatedAt" : "2017-11-12T19:04:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fa05bd68c8cb2a794b1d39f392ca4f4c8ef26c1",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +794,798 @@    from pandas._libs.tslib import Timestamp\n    return str(Timestamp(val))\n\n\n# ----------------------------------------------------------------------"
  },
  {
    "id" : "a0b63d85-ca29-410c-9ac8-61a22e2491e1",
    "prId" : 18086,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18086#pullrequestreview-75435835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "885083ec-9dee-4827-ac7d-4010270f60e1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add parameters to doc-strring",
        "createdAt" : "2017-11-09T13:29:24Z",
        "updatedAt" : "2017-11-12T19:04:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fa05bd68c8cb2a794b1d39f392ca4f4c8ef26c1",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +805,809 @@    Normalize each of the (nanosecond) timestamps in the given array by\n    rounding down to the beginning of the day (i.e. midnight).  If `tz`\n    is not None, then this is midnight for this timezone.\n\n    Parameters"
  },
  {
    "id" : "8f05fc50-81ab-43d7-902b-51699c333bdd",
    "prId" : 18086,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18086#pullrequestreview-75435835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "606afb26-3a4b-4725-9c54-24d3d8aa3f1d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2017-11-09T13:29:30Z",
        "updatedAt" : "2017-11-12T19:04:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fa05bd68c8cb2a794b1d39f392ca4f4c8ef26c1",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +843,847 @@    rounding down to the beginning of the day (i.e. midnight) for the\n    given timezone `tz`.\n\n    Parameters\n    ----------"
  },
  {
    "id" : "5469096d-ad2d-4ddd-8b28-18bfb06ce46c",
    "prId" : 18086,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18086#pullrequestreview-75485221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10bb675b-a753-4f52-9a06-802e703319fe",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think you changed the name? ok to de-privatize and rename to normalize_local_timestamps. I prefer more readable function names fyi.",
        "createdAt" : "2017-11-09T13:30:08Z",
        "updatedAt" : "2017-11-12T19:04:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "578293c0-74d9-4356-b098-2e2045cf96e5",
        "parentId" : "10bb675b-a753-4f52-9a06-802e703319fe",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Didn't change the name, no.",
        "createdAt" : "2017-11-09T15:51:54Z",
        "updatedAt" : "2017-11-12T19:04:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fa05bd68c8cb2a794b1d39f392ca4f4c8ef26c1",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +838,842 @@@cython.wraparound(False)\n@cython.boundscheck(False)\ncdef ndarray[int64_t] _normalize_local(ndarray[int64_t] stamps, object tz):\n    \"\"\"\n    Normalize each of the (nanosecond) timestamps in the given array by"
  },
  {
    "id" : "bb2e2ac8-7e0c-4068-8b0f-da54661b2d53",
    "prId" : 18086,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18086#pullrequestreview-75484034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14634cdd-e78f-4803-949d-7bec545fe56a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "doc-string and de-privatize",
        "createdAt" : "2017-11-09T13:30:35Z",
        "updatedAt" : "2017-11-12T19:04:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6ad81cee-cd3b-4d49-99fe-a0f9e2ff8949",
        "parentId" : "14634cdd-e78f-4803-949d-7bec545fe56a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It is private.  Not importable.",
        "createdAt" : "2017-11-09T15:48:48Z",
        "updatedAt" : "2017-11-12T19:04:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fa05bd68c8cb2a794b1d39f392ca4f4c8ef26c1",
    "line" : 213,
    "diffHunk" : "@@ -1,1 +907,911 @@\n\ncdef inline int64_t _normalized_stamp(pandas_datetimestruct *dts) nogil:\n    \"\"\"\n    Normalize the given datetimestruct to midnight, then convert to int64_t."
  },
  {
    "id" : "3719a1cd-9229-4135-bf86-4d1070d6aed2",
    "prId" : 18086,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18086#pullrequestreview-75435835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d45b6c5-989b-43af-825e-763640731085",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add parameters in doc-string\r\n\r\ngood name",
        "createdAt" : "2017-11-09T13:30:55Z",
        "updatedAt" : "2017-11-12T19:04:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fa05bd68c8cb2a794b1d39f392ca4f4c8ef26c1",
    "line" : 238,
    "diffHunk" : "@@ -1,1 +932,936 @@    midnight, i.e. hour == minute == second == 0.  If the optional timezone\n    `tz` is not None, then this is midnight for this timezone.\n\n    Parameters\n    ----------"
  },
  {
    "id" : "a45952c3-41cb-4a59-8045-96a4be31eeac",
    "prId" : 18086,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18086#pullrequestreview-75967428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4f6cd9e-75f7-4531-a8d4-30bb6816ea02",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this looks like it has exactly 2 uses, I would much rather\r\n``Timestamp(...).value`` and remove this routine (and remove the tests for it)\r\n\r\n```\r\n(pandas) bash-3.2$ grep -r pydt_to_i8 pandas/ --include '*.py' --include '*.pyx'\r\npandas//_libs/tslib.pyx:cpdef pydt_to_i8(object pydt):\r\npandas//_libs/tslib.pyx:    Inverse of pydt_to_i8\r\npandas//_libs/tslibs/offsets.pyx:from pandas._libs.tslib import pydt_to_i8, monthrange\r\npandas//_libs/tslibs/offsets.pyx:        i8 = pydt_to_i8(dt)\r\npandas//core/indexes/datetimes.py:    return np.int64(libts.pydt_to_i8(key)).view(_NS_DTYPE)\r\npandas//tests/scalar/test_timestamp.py:                assert tslib.pydt_to_i8(result) == expected\r\npandas//tests/scalar/test_timestamp.py:                assert tslib.pydt_to_i8(result) == expected\r\npandas//tests/scalar/test_timestamp.py:                    assert tslib.pydt_to_i8(result) == expected_tz\r\npandas//tests/scalar/test_timestamp.py:                    assert tslib.pydt_to_i8(result) == expected_tz\r\npandas//tests/scalar/test_timestamp.py:                    assert tslib.pydt_to_i8(result) == expected_utc\r\npandas//tests/scalar/test_timestamp.py:                assert tslib.pydt_to_i8(result) == expected\r\npandas//tests/scalar/test_timestamp.py:                assert tslib.pydt_to_i8(result) == expected\r\npandas//tests/scalar/test_timestamp.py:                assert tslib.pydt_to_i8(result) == expected_tz\r\npandas//tests/scalar/test_timestamp.py:                assert tslib.pydt_to_i8(result) == expected_tz\r\npandas//tests/scalar/test_timestamp.py:                assert tslib.pydt_to_i8(result) == expected_utc\r\n```",
        "createdAt" : "2017-11-12T18:54:48Z",
        "updatedAt" : "2017-11-12T19:04:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fa05bd68c8cb2a794b1d39f392ca4f4c8ef26c1",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +91,95 @@\ncpdef int64_t pydt_to_i8(object pydt) except? -1:\n    \"\"\"\n    Convert to int64 representation compatible with numpy datetime64; converts\n    to UTC"
  },
  {
    "id" : "ca684917-5040-4872-872c-943caa2f6968",
    "prId" : 18228,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18228#pullrequestreview-75962537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcd57d27-3dbe-471d-8ccf-3a344504376e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "return val (see my comment below)",
        "createdAt" : "2017-11-12T15:38:33Z",
        "updatedAt" : "2017-11-12T17:52:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "754dd7bcc2883e582162c75e1b1794d1b125be50",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +447,451 @@\n    if get_timezone(tz2) == 'UTC':\n        return utc_date\n    elif is_tzlocal(tz2):\n        dt64_to_dtstruct(utc_date, &dts)"
  },
  {
    "id" : "f2247351-60c8-4f4e-9ff3-bf2cd08b330e",
    "prId" : 18358,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18358#pullrequestreview-77650028",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44296244-8d47-42da-868e-ff9e02c35264",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "prob should add some checks around this, IOW this could already be ns (TODO ok)",
        "createdAt" : "2017-11-19T15:26:02Z",
        "updatedAt" : "2017-11-19T18:02:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "548d9fba-be93-4cca-95c1-4731d7d2f2e4",
        "parentId" : "44296244-8d47-42da-868e-ff9e02c35264",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, this check is done elsewhere, will not be hard to implement.\r\n\r\nIf it weren't for `datetime64[Y]` and `datetime64[M]` we could take the `pandas_datetime_to_datetimestruct` out of these funcs altogether, avoid converting back and forth.",
        "createdAt" : "2017-11-19T18:01:26Z",
        "updatedAt" : "2017-11-19T18:02:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef759f2d9a55eba8099467665dd689d57f95c36",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +104,108 @@        return result\n\n    unit = get_datetime64_unit(arr.flat[0])\n    for i in range(n):\n        if ivalues[i] != NPY_NAT:"
  },
  {
    "id" : "b760c8b5-f4c5-4d62-9512-d9c3ec7c81f9",
    "prId" : 18602,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18602#pullrequestreview-80714855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "848883ea-793c-4442-a662-9ebb1df80631",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I've been kinda curious how this works namespace-wise.  Why isn't this a recursion error?",
        "createdAt" : "2017-12-02T23:38:32Z",
        "updatedAt" : "2017-12-04T20:21:33Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "02070577-b05e-447f-b5b5-f08ee398531c",
        "parentId" : "848883ea-793c-4442-a662-9ebb1df80631",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Yeah, now that you mention it, this does seem a bit strange, even the way it was originally written with the legacy syntax.  I tried creating similar classes in plain Python and they all raised.\r\n\r\nThat aside, looking further into the code, it doesn't seem like `value` be a property? Or should at least have a setter?  Maybe I'm missing something obvious (not super familiar with this part of the codebase or Cython in general), but it looks like there are places where `value` is being set, e.g.\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/0e168188811677f9de72a6a5b97253e551b6b04a/pandas/_libs/tslibs/conversion.pyx#L250-L256\r\n\r\n(and many other examples further below that)\r\n\r\nTrying something similar on `master` raises, albeit in plain Python:\r\n```python\r\nIn [1]: from pandas._libs.tslibs.conversion import _TSObject\r\n\r\nIn [2]: obj = _TSObject()\r\n\r\nIn [3]: obj.value = 10\r\n---------------------------------------------------------------------------\r\nAttributeError: attribute 'value' of 'pandas._libs.tslibs.conversion._TSObject' objects is not writable\r\n```\r\n\r\nSo I'm a little confused as to how this working in the snippet I posted from the codebase, but again, could just be my relative inexperience with Cython speaking.",
        "createdAt" : "2017-12-03T03:14:25Z",
        "updatedAt" : "2017-12-04T20:21:33Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "304ba28f-6c04-429e-8352-dcef7b921fb5",
        "parentId" : "848883ea-793c-4442-a662-9ebb1df80631",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Are the test failures related to the change in this discussion?",
        "createdAt" : "2017-12-03T08:47:39Z",
        "updatedAt" : "2017-12-04T20:21:33Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "7a60d60b-8a71-4069-b1b2-b468bdff6790",
        "parentId" : "848883ea-793c-4442-a662-9ebb1df80631",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "@gfyoung :  I believe so, but I'm not 100% sure.\r\n\r\nThe test failure reads:\r\n```python\r\n  File \"pandas/_libs/tslibs/conversion.pyx\", line 268, in pandas._libs.tslibs.conversion.convert_to_tsobject (pandas/_libs/tslibs/conversion.c:3771)\r\n    obj.value = ts\r\nAttributeError: can't set attribute\r\n```\r\nwhich is just a few lines below the snipped from `conversion.pyx` I posted.",
        "createdAt" : "2017-12-03T17:16:47Z",
        "updatedAt" : "2017-12-04T20:21:33Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "2d73d7da-7b99-432f-ab7d-62c6a292d217",
        "parentId" : "848883ea-793c-4442-a662-9ebb1df80631",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, maybe it needs a setter as well. I though this was a problem as was trying to access a c-attribute from  a non-cdef, but that's not the case.",
        "createdAt" : "2017-12-03T18:06:56Z",
        "updatedAt" : "2017-12-04T20:21:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2f175127-b8f7-4111-8a79-5531fd4c500f",
        "parentId" : "848883ea-793c-4442-a662-9ebb1df80631",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Okay, so I tried adding a setter, but it still caused a few failures, this time with `TypeError: 'property' object is not callable`.  Looking into it further, it only appears to fail for older Cython versions, specifically 0.23.  Searching around a bit, apparently `@property` syntax wasn't fully supported for older versions like 0.23 (see [here](https://groups.google.com/forum/#!topic/cython-users/eYZDaXdTiis) and [here](https://stackoverflow.com/q/41289669/3339965)).\r\n\r\nI've tried a few things, but couldn't get this working without using some type of property syntax.   Would it be best to just revert this to the legacy syntax, possibly with a TODO note to change once we bump the Cython version?  Or is there a non-property way of getting this to work that I've overlooked?",
        "createdAt" : "2017-12-03T21:20:04Z",
        "updatedAt" : "2017-12-04T20:21:33Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "b68b7cb7-35bd-43b7-9bc1-96aa1b204246",
        "parentId" : "848883ea-793c-4442-a662-9ebb1df80631",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Why don't you revert your changes to this `property` syntax so that you have a clean commit that passes all tests.  Then you can mess around with this problematic instance in a separate commit if need be.",
        "createdAt" : "2017-12-03T21:24:30Z",
        "updatedAt" : "2017-12-04T20:21:33Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "7a195a7c-68e3-405a-ad1f-be58b92916e7",
        "parentId" : "848883ea-793c-4442-a662-9ebb1df80631",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what version of cython supports this?\r\nnot averse to bumping it",
        "createdAt" : "2017-12-03T21:28:22Z",
        "updatedAt" : "2017-12-04T20:21:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8dcd8827-d840-4d36-aedf-82b4c62b55c8",
        "parentId" : "848883ea-793c-4442-a662-9ebb1df80631",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Looks like 0.24.0.  Was able to reproduce the error locally using 0.23.x, then get it working on 0.24.0.",
        "createdAt" : "2017-12-03T21:37:35Z",
        "updatedAt" : "2017-12-04T20:21:33Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "c04aff34-aa69-4798-a67e-aa771e393cfc",
        "parentId" : "848883ea-793c-4442-a662-9ebb1df80631",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok would take this as an update then to 0.24\r\nneed to update setup.py, some ci files, install.rst and add a more in  whatsnew",
        "createdAt" : "2017-12-03T21:39:14Z",
        "updatedAt" : "2017-12-04T20:21:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ebc4aaad-0888-43ff-ad9a-f89af6ce33f8",
        "parentId" : "848883ea-793c-4442-a662-9ebb1df80631",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Sounds good. Will open an issue to have something to reference in the whatsnew, and give this more visibility on the off chance that someone has an objection to the bump.  And here I was thinking that this PR would be an easy and straightforward way to start getting into to the Cython part of the codebase!",
        "createdAt" : "2017-12-03T21:56:26Z",
        "updatedAt" : "2017-12-04T20:21:33Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b136cf3c8011b4c740cbb36fa262df4f0b6b719",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +206,210 @@    @property\n    def value(self):\n        return self.value\n\n"
  },
  {
    "id" : "34b76402-ef52-480f-b37c-d7c7844094a2",
    "prId" : 21727,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21727#pullrequestreview-134454151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6260632f-b41f-4c14-b2df-4ba14f710f6b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "looks good. can you add what this function does in doc-string. and mark as this is private.",
        "createdAt" : "2018-07-04T18:13:24Z",
        "updatedAt" : "2018-07-04T18:14:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b81e0ce4-d1d0-4c3a-9c0a-1b0c4e7f41e1",
        "parentId" : "6260632f-b41f-4c14-b2df-4ba14f710f6b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Mind if I put the docsting in the follow-up?  There’s a couple more coming up in the next few hours.",
        "createdAt" : "2018-07-04T18:29:48Z",
        "updatedAt" : "2018-07-04T18:29:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b05f159d-9d09-4524-921d-9be1e46ed4cd",
        "parentId" : "6260632f-b41f-4c14-b2df-4ba14f710f6b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure",
        "createdAt" : "2018-07-04T18:41:47Z",
        "updatedAt" : "2018-07-04T18:41:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6878a698ceb225785251f6ad67a8930bfdcfacdc",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +610,614 @@\ncdef inline int64_t _tz_convert_tzlocal_utc(int64_t val, tzinfo tz,\n                                            bint to_utc=True):\n    \"\"\"\n    Parameters"
  },
  {
    "id" : "018863e8-d7dd-4329-baed-16a88fb10e80",
    "prId" : 21730,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21730#pullrequestreview-134459124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d033820-6768-4ade-970f-87ca1d258587",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Dispatching by wrapping in an `ndarray` is not my favorite, but I consider the de-duplication worth it.\r\n\r\nI'm hopeful that there's a way to make the argument an `int64_t[:]` which should have less overhead, but that is not yet an option (see comments above on `_tz_convert_dst`)",
        "createdAt" : "2018-07-04T19:22:47Z",
        "updatedAt" : "2018-07-04T19:22:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "522ec038a31de031105d548fc46a9eb00ceebac6",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +743,747 @@    elif get_timezone(tz1) != 'UTC':\n        arr = np.array([val])\n        utc_date = _tz_convert_dst(arr, tz1, to_utc=True)[0]\n    else:\n        utc_date = val"
  },
  {
    "id" : "464c6094-a683-4056-8f95-17b22564726a",
    "prId" : 21730,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21730#pullrequestreview-134459335",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62cc36b1-6254-41d0-ad8a-b11fc4292927",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The conditions are in a different order for the to_utc block above vs this from_utc block, but with `_tz_convert_dst` and `_tz_convert_tzlocal_utc`, the blocks are now identical up to an argument change `to_utc` True/False.  After this PR, both tz_convert and tz_convert_single can be cut in half.",
        "createdAt" : "2018-07-04T19:24:43Z",
        "updatedAt" : "2018-07-04T19:24:43Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "522ec038a31de031105d548fc46a9eb00ceebac6",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +803,807 @@        utc_dates = vals\n\n    if get_timezone(tz2) == 'UTC':\n        return utc_dates\n"
  },
  {
    "id" : "fab7e144-485c-4dbd-9f4e-8078a7f6ee2b",
    "prId" : 21730,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21730#pullrequestreview-134459462",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb5ad81f-56c7-47c6-bee2-adc0db50ae68",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We have to explicitly wrap in `np.array` bc `_tz_convert_dst` returns an `int64_t[:]`.",
        "createdAt" : "2018-07-04T19:25:54Z",
        "updatedAt" : "2018-07-04T19:25:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "522ec038a31de031105d548fc46a9eb00ceebac6",
    "line" : 188,
    "diffHunk" : "@@ -1,1 +817,821 @@    else:\n        # Convert UTC to other timezone\n        return np.array(_tz_convert_dst(utc_dates, tz2, to_utc=False))\n\n"
  },
  {
    "id" : "c5fcb5b2-bf1e-478a-8012-1c7381ca544a",
    "prId" : 21730,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21730#pullrequestreview-134692531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7483202-fa68-43f8-bf8d-bbea82032835",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "``int64_t[:] arr`` is a memory view, should work",
        "createdAt" : "2018-07-04T19:28:33Z",
        "updatedAt" : "2018-07-04T19:28:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e3ad1030-bb8d-4732-bb24-8fe36da3c632",
        "parentId" : "c7483202-fa68-43f8-bf8d-bbea82032835",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ATM that doesn't work because `_tz_convert_dst` takes an `ndarray[int64_t]` and not a memoryview.  I'm hopeful that down the road that can be changed.",
        "createdAt" : "2018-07-04T20:27:06Z",
        "updatedAt" : "2018-07-04T20:27:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3beb729c-b3c9-4888-b9ab-80908ad6c010",
        "parentId" : "c7483202-fa68-43f8-bf8d-bbea82032835",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, ok to make that change here if you can",
        "createdAt" : "2018-07-05T10:43:54Z",
        "updatedAt" : "2018-07-05T10:43:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3c7611c7-9232-4b88-b49a-acf936f74876",
        "parentId" : "c7483202-fa68-43f8-bf8d-bbea82032835",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> hmm, ok to make that change here if you can\r\n\r\nNot an option yet.  To do this we need to get rid of the `values != NPY_NAT` check in `_tz_convert_dst`, which entails a non-trivial redesign of that function.  Need to a) make sure it doesn't break things and b) check perf.\r\n\r\nATM the options are either wrap in a 1-element array or keep duplicated code.",
        "createdAt" : "2018-07-05T15:04:10Z",
        "updatedAt" : "2018-07-05T15:04:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "522ec038a31de031105d548fc46a9eb00ceebac6",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +730,734 @@        int64_t v, offset, utc_date\n        pandas_datetimestruct dts\n        ndarray[int64_t] arr  # TODO: Is there a lighter-weight way to do this?\n\n    # See GH#17734 We should always be converting either from UTC or to UTC"
  },
  {
    "id" : "8e1bfa34-862e-4a57-9d86-dddef3c5f265",
    "prId" : 21730,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21730#pullrequestreview-134466692",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a23fa731-579d-4ba9-8000-14e322e20ba2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think you could do an assignment here that then specifies the type\r\n\r\nliek\r\n\r\n```\r\narr = _tz_convert.....\r\ncdef int64_t result = arr[0]\r\nreturn result\r\n```",
        "createdAt" : "2018-07-04T19:29:55Z",
        "updatedAt" : "2018-07-04T19:29:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "317b5209-cf10-45de-88f9-b4fddd43614b",
        "parentId" : "a23fa731-579d-4ba9-8000-14e322e20ba2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "why does that help in this context?",
        "createdAt" : "2018-07-04T20:16:41Z",
        "updatedAt" : "2018-07-04T20:16:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f69f9a88-7b38-465a-8180-4ab9315a2c10",
        "parentId" : "a23fa731-579d-4ba9-8000-14e322e20ba2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "then the return type is well defined (was reading your comment)",
        "createdAt" : "2018-07-04T20:22:42Z",
        "updatedAt" : "2018-07-04T20:22:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "24c64156-71d2-49ee-8ddb-4cf684325cd8",
        "parentId" : "a23fa731-579d-4ba9-8000-14e322e20ba2",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Ahh gotcha.  Fortunately the version here where _tz_convert_dst returns a memoryview is preferred anyway.  I could remove the comment, but it did take me a few rounds to figure out that was where the problem was coming from.",
        "createdAt" : "2018-07-04T20:29:15Z",
        "updatedAt" : "2018-07-04T20:29:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "522ec038a31de031105d548fc46a9eb00ceebac6",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +758,762 @@        # if it is declared as returning ndarray[int64_t], a compile-time error\n        # is raised.\n        return _tz_convert_dst(arr, tz2, to_utc=False)[0]\n\n"
  },
  {
    "id" : "64a1210c-0c5e-425c-abea-540bd938dc94",
    "prId" : 21730,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21730#pullrequestreview-134726029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f485a85-4d6f-4b17-9ec5-6a7d5b802793",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The other places where `get_dst_info` is used don't do this `tt` thing.\r\n\r\n`_normalize_local`, `period.localize_dt64_arr_to_period`, `resolution._reso_local` all do:\r\n\r\n```\r\ntrans, deltas, typ = get_dst_info(tz)\r\n_pos = trans.searchsorted(stamps, side='right') - 1\r\n if _pos.dtype != np.int64:\r\n        _pos = _pos.astype(np.int64)\r\npos = _pos\r\n```\r\n\r\n`is_date_array_normalized` and `tslib.ints_to_pydatetime` makes `searchsorted` calls pointwise\r\n\r\n```\r\ntrans, deltas, typ = get_dst_info(tz)\r\nfor i in range(n):\r\n    pos = trans.searchsorted(stamps[i]) - 1\r\n```\r\n\r\nI'm checking to see if anything breaks if we change it here to match the others.\r\n\r\nPerf Considerations:\r\n- The `tt` thing here presumably improves perf in cases with many `NaT`s\r\n- Without the `values != NPY_NAT` check we could pass `values` as an `int64_t[:]` which I _think_ would be more performant.\r\n- There is a `cnp.PY_ArraySearchSorted` that could be used to avoid reaching into python-space, but apparently there is a bug in cython's numpy.pxd that makes this non-trivial (https://stackoverflow.com/questions/28184211/calling-pyarray-searchsorted-from-cython-3-or-4-arguments?rq=1)",
        "createdAt" : "2018-07-04T19:35:38Z",
        "updatedAt" : "2018-07-04T19:35:38Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "71219b13-0289-4e26-a6f1-6fa111571b67",
        "parentId" : "2f485a85-4d6f-4b17-9ec5-6a7d5b802793",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> Without the values != NPY_NAT check we could pass values as an int64_t[:] which I think would be more performant.\r\n\r\nwhy? NPY_NAT is i8",
        "createdAt" : "2018-07-05T10:45:20Z",
        "updatedAt" : "2018-07-05T10:45:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ba75b9c7-c765-4712-a2db-128bb3c4b5fc",
        "parentId" : "2f485a85-4d6f-4b17-9ec5-6a7d5b802793",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not sure why you can search an array of timestamps to searchsorted here?",
        "createdAt" : "2018-07-05T10:45:57Z",
        "updatedAt" : "2018-07-05T10:45:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2c9f7fd9-1db0-4116-aa19-bfaa24b27e96",
        "parentId" : "2f485a85-4d6f-4b17-9ec5-6a7d5b802793",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> why? NPY_NAT is i8\r\n\r\nAFAICT `int64_t[:]` doesn't support `__eq__`.  You can basically iterate through it and little else.",
        "createdAt" : "2018-07-05T14:58:54Z",
        "updatedAt" : "2018-07-05T14:58:54Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ade90d55-06df-472b-bee0-f6370246e052",
        "parentId" : "2f485a85-4d6f-4b17-9ec5-6a7d5b802793",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> not sure why you can search an array of timestamps to searchsorted here?\r\n\r\nI don't understand the question.  `trans.searchsorted(x)` assumes (doesn't check) that `trans` is sorted, doesn't care about `x` (which can be array or scalar)",
        "createdAt" : "2018-07-05T15:00:18Z",
        "updatedAt" : "2018-07-05T15:00:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8bbdb01f-38c1-4adf-9eca-15bbd333ad7c",
        "parentId" : "2f485a85-4d6f-4b17-9ec5-6a7d5b802793",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no what i mean is that why can you do ``trans.searchsorted(array_of_time_statmps)`` rather than iteratiing?",
        "createdAt" : "2018-07-05T16:25:35Z",
        "updatedAt" : "2018-07-05T16:25:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "522ec038a31de031105d548fc46a9eb00ceebac6",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +644,648 @@        return values\n\n    posn = trans.searchsorted(tt, side='right')\n\n    j = 0"
  },
  {
    "id" : "45b093ef-038a-4ea9-8082-60d53163906f",
    "prId" : 21738,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21738#pullrequestreview-134596212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2aa02015-c73d-43d9-925d-20d413d6b9ff",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we ought to fix these names (prob rename date_normalize) in future PR",
        "createdAt" : "2018-07-05T10:41:22Z",
        "updatedAt" : "2018-07-05T10:41:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "94239a00587e4cd73fd022eb46650b71d2771e4a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1028,1032 @@\ndef normalize_date(object dt):\n    \"\"\"\n    Normalize datetime.datetime value to midnight. Returns datetime.date as a\n    datetime.datetime at midnight"
  },
  {
    "id" : "e8a394b5-af44-4b23-a588-44973f1488b1",
    "prId" : 21738,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21738#pullrequestreview-134596279",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91ce3e66-f66f-4101-a09b-d6360a02e246",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a raises section",
        "createdAt" : "2018-07-05T10:41:35Z",
        "updatedAt" : "2018-07-05T10:42:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "94239a00587e4cd73fd022eb46650b71d2771e4a",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1038,1042 @@    Returns\n    -------\n    normalized : datetime.datetime or Timestamp\n    \"\"\"\n    if PyDateTime_Check(dt):"
  },
  {
    "id" : "4f551c57-97b4-4f47-8ad5-3870e08a35b3",
    "prId" : 22644,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22644#pullrequestreview-161571829",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5d70df4-afb8-4508-8d43-29c33a3c8125",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in theory should assert the possible values of nonexistent (e.g. what If I pass 'foo'),",
        "createdAt" : "2018-10-04T11:57:24Z",
        "updatedAt" : "2018-10-24T22:22:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cf16e2f197e8405f27ebdfa4c2718620261df04",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +895,899 @@        assert nonexistent in ('raise', None), (\"nonexistent must be one of\"\n                                                \" {'NaT', 'raise', 'shift'}\")\n\n    trans, deltas, typ = get_dst_info(tz)\n"
  },
  {
    "id" : "03342361-0ce3-4d67-8329-952bdb916b53",
    "prId" : 22644,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22644#pullrequestreview-161989084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1826752-63cb-4a29-a8d2-c29c3da684eb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "for internal code I don't think it is needed (but also does not harm much of course)",
        "createdAt" : "2018-10-05T11:14:10Z",
        "updatedAt" : "2018-10-24T22:22:30Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cf16e2f197e8405f27ebdfa4c2718620261df04",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +840,844 @@        If arraylike, must have the same length as vals\n\n        .. versionadded:: 0.24.0\n\n    Returns"
  },
  {
    "id" : "d90bc85b-3919-4c3c-a1e6-acbfe06aa6f1",
    "prId" : 23406,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23406#pullrequestreview-169741426",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d381b6f3-1b16-4731-a509-a39e4f278124",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't we use Py_ssize_t for indexers?",
        "createdAt" : "2018-10-30T12:16:40Z",
        "updatedAt" : "2018-10-31T04:52:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b31f034f5da9a0311ccaf99c9cae18437e6943b0",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +853,857 @@        int64_t *tdata\n        int64_t v, left, right, val, v_left, v_right, new_local, remaining_mins\n        ndarray[int64_t] result, result_a, result_b, dst_hours\n        npy_datetimestruct dts\n        bint infer_dst = False, is_dst = False, fill = False"
  },
  {
    "id" : "f9a76a36-4bc9-49b0-b026-298d33511bc9",
    "prId" : 23408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23408#pullrequestreview-171256057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e025d0d-3f00-44ca-b9ad-134fff6bb4a7",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is this the string 'NaT', or the singleton pd.NaT (or either?) Can we clarify that?",
        "createdAt" : "2018-11-02T17:03:43Z",
        "updatedAt" : "2018-11-02T17:04:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "874e9145-e8de-4977-b92d-9c78c048abbc",
        "parentId" : "5e025d0d-3f00-44ca-b9ad-134fff6bb4a7",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "It seems like the allowed types are a bit inconsistent among all these functions. Can you check whether that's the docs being wrong? or are the just different?",
        "createdAt" : "2018-11-02T17:04:49Z",
        "updatedAt" : "2018-11-02T17:04:52Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3ad3d1bd-a294-4e5f-befd-32ba66f7f52b",
        "parentId" : "5e025d0d-3f00-44ca-b9ad-134fff6bb4a7",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "This will return the pd.NaT singleton. ",
        "createdAt" : "2018-11-02T18:21:40Z",
        "updatedAt" : "2018-11-02T18:21:41Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "cbb06c59-8b79-4ba4-ab01-85cea6ef280a",
        "parentId" : "5e025d0d-3f00-44ca-b9ad-134fff6bb4a7",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I was wondering about whether the input should be `pd.NaT` or `'NaT'`.",
        "createdAt" : "2018-11-02T19:30:30Z",
        "updatedAt" : "2018-11-02T19:30:30Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "22a2b51e-59f3-41a6-99f1-be934c6a6628",
        "parentId" : "5e025d0d-3f00-44ca-b9ad-134fff6bb4a7",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Oh sorry, ambiguous accepts the input `'NaT'` and should raise on `pd.NaT`",
        "createdAt" : "2018-11-02T20:17:23Z",
        "updatedAt" : "2018-11-02T20:17:56Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1026c389b32e95d9e439b3b2fa0e16252908588",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +848,852 @@          times, but the array must have the same length as vals)\n        - bool if True, treat all vals as DST. If False, treat them as non-DST\n        - 'NaT' will return NaT where there are ambiguous times\n\n    nonexistent : str"
  },
  {
    "id" : "a1d05c3c-e865-41ee-9132-d5befcc7fafd",
    "prId" : 23807,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23807#pullrequestreview-177800443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f7f1c8d-3119-4820-af93-a79010e6c034",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are you switching this?",
        "createdAt" : "2018-11-20T15:45:11Z",
        "updatedAt" : "2018-11-22T02:48:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3322a48e-5c5d-49af-86a8-4e0914ba5d3f",
        "parentId" : "8f7f1c8d-3119-4820-af93-a79010e6c034",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "No switching, this is just used here for timezone conversion between tzlocal and tzutc (making sure they are both dateutil timezones so they play nice) https://github.com/pandas-dev/pandas/pull/23807/files/de3c83bb946a7791d29a18db5f004228b24c9b02#diff-66d289312fd0b02e7721bf45fb281797R705",
        "createdAt" : "2018-11-21T18:52:33Z",
        "updatedAt" : "2018-11-22T02:48:40Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "1827749e-e01b-4639-949b-6b8a6d80aa72",
        "parentId" : "8f7f1c8d-3119-4820-af93-a79010e6c034",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok",
        "createdAt" : "2018-11-23T03:10:43Z",
        "updatedAt" : "2018-11-23T03:10:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "15ba5fb8bb462672d2153e2b4e0db4146a2a58d9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +9,13 @@\nimport pytz\nfrom dateutil.tz import tzutc\n\n# stdlib datetime imports"
  },
  {
    "id" : "92a5c8ca-f3c6-41c0-b321-0a7159452fe7",
    "prId" : 23956,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23956#pullrequestreview-179041519",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b787846-e2dd-4e1b-81f6-5813e3ade615",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "To be clear: this change is cosmetic. The real change is below.",
        "createdAt" : "2018-11-27T22:27:15Z",
        "updatedAt" : "2018-11-28T13:37:30Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a77a24ab0cef5131df38c109cf600824100265cc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +100,104 @@    ivalues = arr.view(np.int64).ravel()\n\n    result = np.empty(shape, dtype=NS_DTYPE)\n    iresult = result.ravel().view(np.int64)\n"
  },
  {
    "id" : "d5bd0792-1a03-47c8-9c44-e5600f82df04",
    "prId" : 24031,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24031#pullrequestreview-180568341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91f8f87d-6bae-486f-b62a-b769df33749e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does this hit a currently tested case?",
        "createdAt" : "2018-12-02T16:20:00Z",
        "updatedAt" : "2018-12-02T16:20:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "be826af4-695e-46e1-aaca-032c07c08913",
        "parentId" : "91f8f87d-6bae-486f-b62a-b769df33749e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes.  Within tests/indexes/datetimes there are 14",
        "createdAt" : "2018-12-02T16:36:55Z",
        "updatedAt" : "2018-12-02T16:36:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce040ceb2144c69afe1f71236ce75a0c06b2eb33",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +65,69 @@    ival = get_datetime64_value(val)\n    if ival == NPY_NAT:\n        return NPY_NAT\n\n    unit = get_datetime64_unit(val)"
  },
  {
    "id" : "af670f71-1ddc-462c-a5a4-b3e074f09260",
    "prId" : 24491,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24491#pullrequestreview-188428476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1337708-048b-4b48-96c4-074bbee7fa33",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Design question here: why do we need to allocate an array for `pos` ?  It seems like we're trading off memory for performance, are we not?",
        "createdAt" : "2018-12-30T04:44:33Z",
        "updatedAt" : "2019-01-03T20:52:32Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "6198179c-31dd-4cea-933e-0682ed86304e",
        "parentId" : "e1337708-048b-4b48-96c4-074bbee7fa33",
        "authorId" : "d27357e5-3013-4027-a032-3a633c4de0f3",
        "body" : "We're now having `np.searchsorted()` compute insertion indices for every value in a single call, rather than making `n` `np.searchsorted()` calls. This requires `n` memory and allows `np.searchsorted()` to re-use partial solution information.\r\n\r\nAnd yes... though this would be the 4th such array in this function so it's not changing the broad characteristics here.",
        "createdAt" : "2018-12-30T04:56:38Z",
        "updatedAt" : "2019-01-03T20:52:32Z",
        "lastEditedBy" : "d27357e5-3013-4027-a032-3a633c4de0f3",
        "tags" : [
        ]
      },
      {
        "id" : "68282044-33f9-4e51-b597-4322e8b65ff4",
        "parentId" : "e1337708-048b-4b48-96c4-074bbee7fa33",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> though this would be the 4th such array in this function so it's not changing the broad characteristics here.\r\n\r\nThat is a fair point.",
        "createdAt" : "2018-12-30T05:01:55Z",
        "updatedAt" : "2019-01-03T20:52:32Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "360415ce08175b2b8c9fdcc484f97ea0c08d00fa",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +640,644 @@        Py_ssize_t n = len(values)\n        Py_ssize_t i\n        int64_t[:] pos\n        int64_t[:] result = np.empty(n, dtype=np.int64)\n        ndarray[int64_t] trans"
  },
  {
    "id" : "17431eb5-8d23-4ced-a6fc-a73b1c017932",
    "prId" : 24491,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24491#pullrequestreview-188428438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04100494-791b-40b9-9e86-2ca697436c1e",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "You can just combine this with the `if not tz_is_local` check above?",
        "createdAt" : "2018-12-30T04:47:08Z",
        "updatedAt" : "2019-01-03T20:52:32Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "960a5244-dfbd-4ca0-90c1-54190f9ad1bc",
        "parentId" : "04100494-791b-40b9-9e86-2ca697436c1e",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "See [above](https://github.com/pandas-dev/pandas/pull/24491#discussion_r244524031).",
        "createdAt" : "2018-12-30T04:54:42Z",
        "updatedAt" : "2019-01-03T20:52:32Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "7a8fcbee-3849-4c22-a005-bcec5bbc1938",
        "parentId" : "04100494-791b-40b9-9e86-2ca697436c1e",
        "authorId" : "d27357e5-3013-4027-a032-3a633c4de0f3",
        "body" : "Thanks, will combine in next push",
        "createdAt" : "2018-12-30T04:58:13Z",
        "updatedAt" : "2019-01-03T20:52:32Z",
        "lastEditedBy" : "d27357e5-3013-4027-a032-3a633c4de0f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "360415ce08175b2b8c9fdcc484f97ea0c08d00fa",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +661,665 @@        # overhead dominates the search time so doing it once in bulk\n        # is substantially faster (GH#24603)\n        pos = trans.searchsorted(values, side='right') - 1\n\n    for i in range(n):"
  },
  {
    "id" : "4cce81c0-f519-41c0-a53e-c371c5ebd429",
    "prId" : 24493,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24493#pullrequestreview-188523482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "513443c9-463c-45d9-a9bd-206658feb940",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a practical use of this?",
        "createdAt" : "2018-12-31T13:42:40Z",
        "updatedAt" : "2019-01-03T01:07:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "37811489-f455-407b-840d-200e67378444",
        "parentId" : "513443c9-463c-45d9-a9bd-206658feb940",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "From the original enhancement request https://github.com/pandas-dev/pandas/issues/24466#issue-394621856, there was no way to shift backwards, moreover by a specified amount. I can see how it would be valuable to shift nonexistent times forward or backwards by a specified amount instead of the closest time. (e.g. I want times on the half hours, so be able to shift times to 1:30 or 3:30 and not just 1:59 or 3:00)",
        "createdAt" : "2018-12-31T17:42:51Z",
        "updatedAt" : "2019-01-03T01:07:31Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "14ac9106-074c-4bb2-bd99-34a79936de54",
        "parentId" : "513443c9-463c-45d9-a9bd-206658feb940",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this duplicating shift_backwards though? this seems unecessarily complex to do anything more that doing a snap, eg. to a valid time (forward or backwards). shifting is an independent operation.",
        "createdAt" : "2018-12-31T18:00:38Z",
        "updatedAt" : "2019-01-03T01:07:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e0c3eb2d-55bc-42be-a3fc-e091acd4739a",
        "parentId" : "513443c9-463c-45d9-a9bd-206658feb940",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "IMO it didn't add _too_ much more complexity to the code, but here was @sdementen use case:\r\n\r\n> I do some calculation on a local timestamp without tz, that I shift by 2 hours backward (to say \"take it two hours before\") and then I localize and get a NonExistentTimeError (e.g. Timestamp(\"2018-03-25T04:33:00\") - DateOffset(hours=2)). I would like to get as a result of the tz_localize('CET'), the time \"2018-03-25T01:33:00+0100\" or \"2018-03-25T03:33:00+0200\" (and not \"2018-03-25T01:59:59.99999+0100\" or \"2018-03-25T03:00:00+0200\")",
        "createdAt" : "2018-12-31T18:08:17Z",
        "updatedAt" : "2019-01-03T01:07:31Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "393aa8b0-2ba5-493e-b3de-a5dc537df243",
        "parentId" : "513443c9-463c-45d9-a9bd-206658feb940",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "I can see how in principle how it's very similar to `shift_forward`/ `shift_backwards` then adding an offset, but it can be easier determining how you want to shift from a nonexistent time compared to a nonexistent time that has been snapped to 1:59 or 3:00.",
        "createdAt" : "2018-12-31T18:13:05Z",
        "updatedAt" : "2019-01-03T01:07:31Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "abc782ac-f2f8-48a4-8772-49652f9f695e",
        "parentId" : "513443c9-463c-45d9-a9bd-206658feb940",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "@sdementen care to chime in on thoughts?",
        "createdAt" : "2018-12-31T18:14:25Z",
        "updatedAt" : "2019-01-03T01:07:31Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fd9110f1857828c4da2e6cb003da7cc076a54cd",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +938,942 @@    elif nonexistent == 'shift_backward':\n        shift_backward = True\n    elif PyDelta_Check(nonexistent):\n        shift_delta = delta_to_nanoseconds(nonexistent)\n    elif nonexistent not in ('raise', None):"
  },
  {
    "id" : "f8b0235c-9874-4117-8f55-f96dbd3dbab0",
    "prId" : 24663,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24663#pullrequestreview-190317178",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fa0fc8a-b2a4-4c73-b750-eb4eba33d37d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jbrockmendel is there a reason we cannot remove this routine entirely in favor of using ``array_to_datetime``? can you create an issue about this (though maybe you already did)",
        "createdAt" : "2019-01-08T12:53:20Z",
        "updatedAt" : "2019-01-08T12:53:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bf400dea-251c-4e5c-9b3b-e1cec788748f",
        "parentId" : "4fa0fc8a-b2a4-4c73-b750-eb4eba33d37d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "#24006 does this, but is on hold ATM",
        "createdAt" : "2019-01-08T16:07:40Z",
        "updatedAt" : "2019-01-08T16:07:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "72e46b2fd901110326d494036d0299768f27ba68",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +168,172 @@        npy_datetimestruct dts\n        _TSObject _ts\n        bint found_naive = False\n\n    result = np.empty(n, dtype='M8[ns]')"
  }
]