[
  {
    "id" : "f6851c6e-e613-4a14-989b-5070f45b75ff",
    "prId" : 18085,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18085#pullrequestreview-73988208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5f2a348-efa0-446c-96f4-19ce8b39c272",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "convert_to_timedelta64 is cut/paste",
        "createdAt" : "2017-11-03T02:39:58Z",
        "updatedAt" : "2017-11-08T05:44:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5e8fe0d04e3511aeafc16f0024538f9f2b7ef52",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +97,101 @@\n\ncpdef convert_to_timedelta64(object ts, object unit):\n    \"\"\"\n    Convert an incoming object to a timedelta64 if possible"
  },
  {
    "id" : "4d78c783-06ce-45d5-b132-0895dc09d30e",
    "prId" : 18085,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18085#pullrequestreview-73988233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7e3cae4-fd0c-4999-94ae-b53b514880e5",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "array_to_timedelta64 is cut/paste",
        "createdAt" : "2017-11-03T02:40:14Z",
        "updatedAt" : "2017-11-08T05:44:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5e8fe0d04e3511aeafc16f0024538f9f2b7ef52",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +156,160 @@\n\ncpdef array_to_timedelta64(ndarray[object] values, unit='ns', errors='raise'):\n    \"\"\"\n    Convert an ndarray to an array of timedeltas. If errors == 'coerce',"
  },
  {
    "id" : "e4383244-fba4-4782-8bd0-1c558c7ec5dc",
    "prId" : 18085,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18085#pullrequestreview-73988330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e7b8adf-a274-488a-8410-3f3768357e14",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "`isinstance(other, Timedelta)` --> `PyDelta_Check(other)` effectively equivalent, should be more performant.",
        "createdAt" : "2017-11-03T02:41:45Z",
        "updatedAt" : "2017-11-08T05:44:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5e8fe0d04e3511aeafc16f0024538f9f2b7ef52",
    "line" : 192,
    "diffHunk" : "@@ -1,1 +467,471 @@    # timedelta like or an array of timedeltalike\n    def f(self, other):\n        if hasattr(other, 'delta') and not PyDelta_Check(other):\n            # offsets.Tick\n            return op(self, other.delta)"
  },
  {
    "id" : "064c331b-9319-4f83-ae32-f6ed128a7b4d",
    "prId" : 18085,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18085#pullrequestreview-74280055",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ca865c4-9e5d-47f0-a5ea-8115d44ba595",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "timedeltas should depend on nattype.pxd",
        "createdAt" : "2017-11-05T12:30:12Z",
        "updatedAt" : "2017-11-08T05:44:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5e8fe0d04e3511aeafc16f0024538f9f2b7ef52",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +30,34 @@\nfrom nattype import nat_strings, NaT\nfrom nattype cimport _checknull_with_nat\n\n# ----------------------------------------------------------------------"
  },
  {
    "id" : "78ba975c-0675-42ba-89c6-9d0138270701",
    "prId" : 18961,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18961#pullrequestreview-85756814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf4cb93e-18ef-4947-92c0-6cc9c50aee56",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this what we do for division?\r\nis it not tested now?",
        "createdAt" : "2017-12-28T01:53:15Z",
        "updatedAt" : "2018-01-06T17:58:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d703f35e-e055-43e5-a1ab-3c8cb4c6971f",
        "parentId" : "cf4cb93e-18ef-4947-92c0-6cc9c50aee56",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> is this what we do for division?\r\n\r\nYes.\r\n\r\nThe status quo is... weird.\r\n\r\n```\r\n    def __floordiv__(self, other):\r\n        if hasattr(other, 'dtype'):\r\n            # work with i8\r\n            other = other.astype('m8[ns]').astype('i8')\r\n            return self.value // other\r\n\r\n        elif is_integer_object(other):\r\n            # integers only\r\n            return Timedelta(self.value // other, unit='ns')\r\n\r\n        elif not _validate_ops_compat(other):\r\n            return NotImplemented\r\n\r\n        other = Timedelta(other)\r\n        if other is NaT:\r\n            return np.nan\r\n        return self.value // other.value\r\n\r\n    def __rfloordiv__(self, other):\r\n        if hasattr(other, 'dtype'):\r\n            # work with i8\r\n            other = other.astype('m8[ns]').astype('i8')\r\n            return other // self.value\r\n\r\n        elif not _validate_ops_compat(other):\r\n            return NotImplemented\r\n\r\n        other = Timedelta(other)\r\n        if other is NaT:\r\n            return NaT\r\n        return other.value // self.value\r\n\r\n```\r\n\r\n> is it not tested now?\r\n\r\nNot that I'm aware of.",
        "createdAt" : "2017-12-28T02:08:33Z",
        "updatedAt" : "2018-01-06T17:58:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f101378da9f156f8d563d0566d087a9bdd71dc14",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +1086,1090 @@        other = Timedelta(other)\n        if other is NaT:\n            return np.nan\n        return other.value // self.value\n"
  },
  {
    "id" : "9c3dd5ad-dabf-45da-aaec-45e4548cd1a1",
    "prId" : 19065,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19065#pullrequestreview-86799814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18d0205e-82f0-4c72-90d3-7c0405d8c77d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you should just raise here",
        "createdAt" : "2018-01-05T00:25:49Z",
        "updatedAt" : "2018-01-05T01:32:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a40a8252-6974-4ad2-8d4e-c32bcda6856d",
        "parentId" : "18d0205e-82f0-4c72-90d3-7c0405d8c77d",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Not an expert on Cython but pytest was failing when raising the exception inside of this function. I believe it is attributable to the int64_t function declaration. I could remove that type and raising the exception directly inside the function would work. Otherwise, I was getting the below output during testing.\r\n\r\n```\r\n-------------------------------------------------------------- Captured stderr call --------------------------------------------------------------\r\nAttributeError: 'NoneType' object has no attribute 'groupdict'\r\nException ignored in: 'pandas._libs.tslibs.timedeltas.parse_iso_format_string'\r\nAttributeError: 'NoneType' object has no attribute 'groupdict'\r\n```",
        "createdAt" : "2018-01-05T00:33:12Z",
        "updatedAt" : "2018-01-05T01:32:47Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "9a9d771d-b8b6-4500-b4e7-9a86b4cb05db",
        "parentId" : "18d0205e-82f0-4c72-90d3-7c0405d8c77d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh, you just need to add:\r\n ``except? -1:`` to the declaration; this tells cython that you may raise in a ``cdef`` function so it should check. you don't need to explicity return -1 though.",
        "createdAt" : "2018-01-05T00:36:46Z",
        "updatedAt" : "2018-01-05T01:32:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e7bcd959-b1c6-464c-82fa-da10082bbbae",
        "parentId" : "18d0205e-82f0-4c72-90d3-7c0405d8c77d",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Ah OK thanks. Will make changes and re-push",
        "createdAt" : "2018-01-05T00:38:27Z",
        "updatedAt" : "2018-01-05T01:32:47Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bab9dab85314918d01019f59944e7f278222a28",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +552,556 @@            ns += timedelta_from_spec(v, '0', k)\n\n    else:\n        raise ValueError(\"Invalid ISO 8601 Duration format - \"\n                         \"{}\".format(iso_fmt))"
  },
  {
    "id" : "96f47f61-8e6c-421f-83df-8ea01e065a2c",
    "prId" : 19732,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19732#pullrequestreview-97410272",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cf81767-8545-4f9a-8ffa-89f1391a1ef8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you might be able to do something like this\r\n\r\n``round(frac * 1000, p - 3) // 1000`` (for p >- 3) but haven't looked really closely.",
        "createdAt" : "2018-02-18T17:37:58Z",
        "updatedAt" : "2018-05-19T23:42:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ba45b47110f4ebbd94c0deaf44b8b34c0793504",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +234,238 @@    frac = ts - base\n    if p:\n        frac = round(frac, p)\n    return <int64_t> (base * m) + <int64_t> (frac * m)\n"
  },
  {
    "id" : "bd5f57f8-3002-4100-b366-b299f0d9636d",
    "prId" : 19871,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19871#pullrequestreview-99116870",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64a55fd3-6a7c-46c7-9ed3-0bb2ef7fcbbc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "rather than repeating this code can you make a function?",
        "createdAt" : "2018-02-24T16:08:54Z",
        "updatedAt" : "2018-02-24T16:08:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "34ef3ad6-02b3-4045-8181-91dcac19b3bb",
        "parentId" : "64a55fd3-6a7c-46c7-9ed3-0bb2ef7fcbbc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "thats exactly what this PR is preliminary to, but with more than just these 3 lines.",
        "createdAt" : "2018-02-24T16:27:59Z",
        "updatedAt" : "2018-02-24T16:28:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "97a2fa0a-106f-4cf6-b4b6-150371950a35",
        "parentId" : "64a55fd3-6a7c-46c7-9ed3-0bb2ef7fcbbc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh ok",
        "createdAt" : "2018-02-24T16:37:48Z",
        "updatedAt" : "2018-02-24T16:37:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6225653a18c676c1ceba954f7e6d76f2b5ad3bfb",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +472,476 @@    # timedelta like or an array of timedeltalike\n    def f(self, other):\n        if hasattr(other, '_typ'):\n            # Series, DataFrame, ...\n            if other._typ == 'dateoffset' and hasattr(other, 'delta'):"
  },
  {
    "id" : "b11955d0-995b-4d80-8b80-e245eb926cef",
    "prId" : 21036,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21036#pullrequestreview-120061401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "493ce4d9-797d-4930-b81a-da09ca1ab240",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "you don't need the textwrap dedent if you put the string over multiple lines with implicit line continuation and string concatentation? \r\n\r\n```\r\nmsg = (\" ... \"\r\n       \" ... \")\r\n```\r\n\r\n(I would personally find that a bit cleaner (also don't need to `\\`), but no big deal)",
        "createdAt" : "2018-05-14T19:50:18Z",
        "updatedAt" : "2018-05-15T02:15:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "448318c3-cb27-4547-8f2c-b4e32b84a614",
        "parentId" : "493ce4d9-797d-4930-b81a-da09ca1ab240",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I've been burned so many times by implicit string concatenation across lines that I try to always avoid it in the hope that it'll be removed in Python 4 :)",
        "createdAt" : "2018-05-15T01:25:04Z",
        "updatedAt" : "2018-05-15T02:15:10Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fa7583804393171fbed726f9184c5e143694ff4",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1194,1198 @@                # Backwards compatibility\n                # GH-19761\n                msg = textwrap.dedent(\"\"\"\\\n                Floor division between integer array and Timedelta is\n                deprecated. Use 'array // timedelta.value' instead."
  },
  {
    "id" : "addeb727-f1e5-4702-9744-5ae4d31c86cf",
    "prId" : 21036,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21036#pullrequestreview-120222388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a268752b-d562-455a-a379-ed15fbcaeeac",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Since you updated the example in the docs, maybe we should reflect this as well in the deprecation message?",
        "createdAt" : "2018-05-15T13:06:21Z",
        "updatedAt" : "2018-05-15T13:06:21Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fa7583804393171fbed726f9184c5e143694ff4",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1196,1200 @@                msg = textwrap.dedent(\"\"\"\\\n                Floor division between integer array and Timedelta is\n                deprecated. Use 'array // timedelta.value' instead.\n                \"\"\")\n                warnings.warn(msg, FutureWarning)"
  },
  {
    "id" : "714d6f4e-7639-407e-9062-00a694997ebc",
    "prId" : 21065,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21065#pullrequestreview-120861513",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cc69dc0-c884-44fa-8deb-435450a78292",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this be on the same line with a colon? @TomAugspurger @jorisvandenbossche ",
        "createdAt" : "2018-05-16T23:54:03Z",
        "updatedAt" : "2018-05-16T23:54:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4f20c170-fd9e-4ee8-89d0-1adb2065a085",
        "parentId" : "7cc69dc0-c884-44fa-8deb-435450a78292",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is fine as is. It's typically\r\n\r\n```\r\nname : type\r\n    Explanation\r\n```\r\n\r\nbut when the name is obvious (it'd just be `nanoseconds` here), it can be omitted.",
        "createdAt" : "2018-05-17T00:14:12Z",
        "updatedAt" : "2018-05-17T00:14:12Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "42373917fe49a8cb42381197d3089305521b1669",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +796,800 @@        Returns\n        -------\n        int\n            Number of nanoseconds.\n"
  },
  {
    "id" : "dfa19cd1-d8de-4cec-a9f6-932a60d8b23d",
    "prId" : 22054,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22054#pullrequestreview-155275090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "accaf492-e620-4f03-88e5-e6c5822a0309",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jbrockmendel  I am a bit confused here why simply returning NotImplemented is not sufficient ? \r\n(I tested it, and that doesn't seem to work. Although with a `datetime.timedelta` it does, and that one *does* return NotImplemented ..)\r\n",
        "createdAt" : "2018-09-07T14:04:21Z",
        "updatedAt" : "2018-09-13T21:12:00Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "eaf23993-c09f-4319-8ef2-a0510527d745",
        "parentId" : "accaf492-e620-4f03-88e5-e6c5822a0309",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The `pd.Timedelta` version fails because both `arr.__add__(td)` and `td.__radd__(arr)` return `NotImplemented`.  `arr.__add__(td.to_pytimedelta())` returns OK, so presumably it is something on the numpy implementation.",
        "createdAt" : "2018-09-07T19:39:00Z",
        "updatedAt" : "2018-09-13T21:12:00Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8b0d598e-ba7c-4331-bac4-a53d9ea058a4",
        "parentId" : "accaf492-e620-4f03-88e5-e6c5822a0309",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Was playing a bit with it, and I think Timedelta behaves differently as datetime.timedelta because of the `__array_priority__` we add to the `_Timedelta` class (by commenting it out, the simple example works), which is needed to get other behaviors working I suppose",
        "createdAt" : "2018-09-13T15:45:44Z",
        "updatedAt" : "2018-09-13T21:12:00Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "27f8868f-7fc6-494d-8929-f46a9a1ab858",
        "parentId" : "accaf492-e620-4f03-88e5-e6c5822a0309",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jorisvandenbossche ok otherwise this PR looks ok, are you suggesting that we remove that?",
        "createdAt" : "2018-09-13T16:14:42Z",
        "updatedAt" : "2018-09-13T21:12:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cd8f004e-a2bb-42df-942b-fea3b1db584f",
        "parentId" : "accaf492-e620-4f03-88e5-e6c5822a0309",
        "authorId" : "cf0f316e-9882-4227-91e0-d9b4dc4ff18b",
        "body" : "I'm also confused.",
        "createdAt" : "2018-09-13T21:13:34Z",
        "updatedAt" : "2018-09-13T21:13:34Z",
        "lastEditedBy" : "cf0f316e-9882-4227-91e0-d9b4dc4ff18b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d125b12c6077402eba5710f9bf2f07e4e266567d",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +545,549 @@                return op(self.to_timedelta64(), other)\n            elif other.dtype.kind == 'O':\n                return np.array([op(self, x) for x in other])\n            else:\n                return NotImplemented"
  }
]