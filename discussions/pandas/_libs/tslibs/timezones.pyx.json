[
  {
    "id" : "6d50a7df-1f55-4a2e-8864-dabb2bfb53a2",
    "prId" : 17543,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17543#pullrequestreview-63236784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4fcdfb8-e56a-49a6-adfb-3e08b1b74b11",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so would like to rename these to be more consistent, maybe\r\n``get_timezone_from_dateutil``\r\n\r\nok with doing it in this PR ",
        "createdAt" : "2017-09-17T20:51:44Z",
        "updatedAt" : "2017-09-18T00:13:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6a14c2bf0f628993c0410646c6019a3d7315658",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +101,105 @@        elif tz.startswith('dateutil/'):\n            zone = tz[9:]\n            tz = dateutil_gettz(zone)\n            # On Python 3 on Windows, the filename is not always set correctly.\n            if isinstance(tz, _dateutil_tzfile) and '.tar.gz' in tz._filename:"
  },
  {
    "id" : "0036693b-a373-4a50-bc3a-7a0c67da2280",
    "prId" : 19281,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19281#pullrequestreview-89485695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98836755-070d-4fe1-a26f-2a6bd03fe5dd",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "When you say \"aren't evaluated as such\" are you talking about `==`? i.e. `start == end` is False, but `tz_compare(start, end)` is True?",
        "createdAt" : "2018-01-17T14:53:14Z",
        "updatedAt" : "2018-01-18T00:13:51Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "9c994218-5858-4d8f-acc7-516b41a98e4d",
        "parentId" : "98836755-070d-4fe1-a26f-2a6bd03fe5dd",
        "authorId" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "body" : "@TomAugspurger Yes, the reason for this is that `pytz` generates a separate `tzinfo` object for each unique offset/tzname combination, and that is what is attached when you call `.localize` or `.normalize`. These time zones don't compare equal to one another.\r\n\r\nIt might be worth noting that this function exists only to add a notion of equality to `pytz`-style zones that is compatible with the notion of equality expected of `tzinfo` subclasses.",
        "createdAt" : "2018-01-17T15:34:15Z",
        "updatedAt" : "2018-01-18T00:13:51Z",
        "lastEditedBy" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "tags" : [
        ]
      },
      {
        "id" : "b4256f54-7aa9-4c44-8839-fa7cb32183f7",
        "parentId" : "98836755-070d-4fe1-a26f-2a6bd03fe5dd",
        "authorId" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "body" : "Another thing that might be worth noting is that, as currently written (and probably it would be out of scope to fix this), this will *not* disambiguate zones that are actually links to other zones.\r\n\r\nSee the [backward file](https://github.com/eggert/tz/blob/c225aa9e0152fa54bb7b5011615c70a309655dd0/backward), `US/Eastern` is a link to `America/New_York`, for example, but that information is not accessible either from pytz or from the zoneinfo files, as far as I know. Even though `pytz.timezone(US/Eastern)` and `pytz.timezone(America/New_York)` always generate the same exact rules, they will be treated as different zones for purposes of `tz_compare` (which also means `concat` will merge them and convert to UTC).",
        "createdAt" : "2018-01-17T15:43:58Z",
        "updatedAt" : "2018-01-18T00:13:51Z",
        "lastEditedBy" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e95f16fcd0127a4952617e414eb785d7deb5a693",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +296,300 @@    `<DstTzInfo 'Europe/Paris' LMT+0:09:00 STD>` and\n    `<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>` are essentially same\n    timezones but aren't evaluted such, but the string representation\n    for both of these is `'Europe/Paris'`.\n"
  },
  {
    "id" : "36cec95e-80d0-465a-8459-acc839b23f98",
    "prId" : 31808,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31808#pullrequestreview-361537940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7743fb83-bf45-4f16-9088-1c75553edaf8",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "code check for cython hard-coded ints over 7ish characters?",
        "createdAt" : "2020-02-08T17:09:18Z",
        "updatedAt" : "2020-02-22T10:27:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5aca4b1c-5b32-49e5-96b8-5af7c94b2ba3",
        "parentId" : "7743fb83-bf45-4f16-9088-1c75553edaf8",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "We don't have a code check for that, and it's not cython specific, it's just something I see here and there that I like to fix, would you be interested in a code check for that kind of thing?",
        "createdAt" : "2020-02-14T14:19:57Z",
        "updatedAt" : "2020-02-22T10:27:37Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "e0fbe98a-d0b0-4a85-888b-daca0ecbe24f",
        "parentId" : "7743fb83-bf45-4f16-9088-1c75553edaf8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think we can find better uses of time.",
        "createdAt" : "2020-02-20T00:33:33Z",
        "updatedAt" : "2020-02-22T10:27:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "eaf2d49a87ac5fc962b5a82e4484d57c6c8c8ab3",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +218,222 @@        # e.g. pytz.FixedOffset, matplotlib.dates._UTC,\n        # psycopg2.tz.FixedOffsetTimezone\n        num = int(get_utcoffset(tz, None).total_seconds()) * 1_000_000_000\n        return (np.array([NPY_NAT + 1], dtype=np.int64),\n                np.array([num], dtype=np.int64),"
  },
  {
    "id" : "2612478f-25f1-4022-9e6b-9705dc408037",
    "prId" : 34195,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34195#pullrequestreview-412949492",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "076ca02a-98b5-4804-8f6f-3edfd9628d16",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is there a reason you deprivatize this? It doesn't seem to be used outside of this module?",
        "createdAt" : "2020-05-15T20:17:51Z",
        "updatedAt" : "2020-05-19T22:10:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a2b16272-addb-47ac-be33-829b75935dfc",
        "parentId" : "076ca02a-98b5-4804-8f6f-3edfd9628d16",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this is privatizing, not de-privatizing",
        "createdAt" : "2020-05-15T20:32:02Z",
        "updatedAt" : "2020-05-19T22:10:53Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d5e1a5d6-4271-4539-b312-93be94cc8fab",
        "parentId" : "076ca02a-98b5-4804-8f6f-3edfd9628d16",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "ahum, yeah, ignore my comment :)",
        "createdAt" : "2020-05-15T20:33:29Z",
        "updatedAt" : "2020-05-19T22:10:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe0e4ac1d563c75e81a5ec0786fadd494c3ea434",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +178,182 @@\n\ncdef object _get_utc_trans_times_from_dateutil_tz(tzinfo tz):\n    \"\"\"\n    Transition times in dateutil timezones are stored in local non-dst"
  },
  {
    "id" : "106af8fb-1b8d-4dc0-a59f-23275aa8d685",
    "prId" : 35103,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35103#pullrequestreview-443490733",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fa232b2-8a49-4e7f-96d7-1b8d88cce56f",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Do we have dedicated tests for these last 2 cases?",
        "createdAt" : "2020-07-07T00:47:30Z",
        "updatedAt" : "2020-07-08T17:00:56Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "69025258c5044fb147d87ffcff89b6922f11e5bd",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +105,109 @@    elif isinstance(tz, tzinfo):\n        pass\n    elif tz is None:\n        pass\n    else:"
  },
  {
    "id" : "352c7af3-2ba4-4522-a6e7-6ed6a337df82",
    "prId" : 36004,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36004#pullrequestreview-483892699",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acad43e2-ecd3-47ea-8a42-a8578379db28",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what does the current path e.g. `pytz.timezone(tz)` do with one of these (vs what you are showing). e.g. why fundamentally is this a bug ",
        "createdAt" : "2020-09-06T17:41:08Z",
        "updatedAt" : "2020-10-07T00:09:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6ff6721d-f138-4d2d-b509-4eb26b9d2504",
        "parentId" : "acad43e2-ecd3-47ea-8a42-a8578379db28",
        "authorId" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "body" : "It can't read timezones without names. So if timezone is `Europe/Lisbon` it works, but if it's `+01` it raises exceptions upon reading a parquet file with timezone aware date index. See the tests, all of them throws exceptions without the new patch.",
        "createdAt" : "2020-09-06T18:14:29Z",
        "updatedAt" : "2020-10-07T00:09:02Z",
        "lastEditedBy" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "tags" : [
        ]
      },
      {
        "id" : "8ab351b5-fa42-4773-a0ec-c9779e9f21eb",
        "parentId" : "acad43e2-ecd3-47ea-8a42-a8578379db28",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@alippai jeff is asking for roughly the same thing i asked before: what _pandas_ function behaves incorrectly?",
        "createdAt" : "2020-09-06T19:03:07Z",
        "updatedAt" : "2020-10-07T00:09:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "98d8e092-0ca9-4943-bdea-a168c4c46095",
        "parentId" : "acad43e2-ecd3-47ea-8a42-a8578379db28",
        "authorId" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "body" : "Sorry, `pd.read_parquet` serialized by pandas (using both pyarrow and fastparquet)",
        "createdAt" : "2020-09-06T19:23:44Z",
        "updatedAt" : "2020-10-07T00:09:02Z",
        "lastEditedBy" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "tags" : [
        ]
      },
      {
        "id" : "a3f70008-7709-4aa3-9b2b-427a2bc4a87c",
        "parentId" : "acad43e2-ecd3-47ea-8a42-a8578379db28",
        "authorId" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "body" : "I'm confused about this a little bit, the title and description of this issue links to a minimal example to reproduce the bug. GitHub links the issue in the right sidebar too. Should I organize the issue + PR differently next time I find a bug?\r\n\r\nThe two examples:\r\n```python\r\nidx = [datetime.strptime('2019-01-04T16:41:24+0200', \"%Y-%m-%dT%H:%M:%S%z\")]\r\ndf = pd.DataFrame(index=idx)\r\ndf.to_parquet(\"out.parquet\", engine=\"fastparquet\")  # <-- Exception, can't convert&write timezone `UTC+02:00`\r\n```\r\n```python\r\nidx = [datetime.now(timezone.utc)]\r\ndf = pd.DataFrame(index=idx)\r\ndf.to_parquet('out.parquet')\r\npd.read_parquet('out.parquet')  # <-- Exception, timezone is written as `+00:00`, Pandas can't read it\r\n```",
        "createdAt" : "2020-09-07T10:58:01Z",
        "updatedAt" : "2020-10-07T00:09:02Z",
        "lastEditedBy" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "tags" : [
        ]
      },
      {
        "id" : "619c6417-2657-4b30-8e21-43153a74c555",
        "parentId" : "acad43e2-ecd3-47ea-8a42-a8578379db28",
        "authorId" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "body" : "```python\r\nimport pytz\r\nprint(pytz.timezone('+00:00'))  # pytz.exceptions.UnknownTimeZoneError: '+00:00'\r\nprint(pytz.timezone('UTC+02:00'))  # pytz.exceptions.UnknownTimeZoneError: 'UTC+02:00'\r\n```",
        "createdAt" : "2020-09-07T11:29:18Z",
        "updatedAt" : "2020-10-07T00:09:02Z",
        "lastEditedBy" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "tags" : [
        ]
      },
      {
        "id" : "8575b749-8275-4436-99c7-4a41fde312a0",
        "parentId" : "acad43e2-ecd3-47ea-8a42-a8578379db28",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> I'm confused about this a little bit, the title and description of this issue links to a minimal example to reproduce the bug.\r\n\r\nPoor wording on my part.  I'm asking for a way to demonstrate the incorrect behavior that doesn't depend on pyarrow/fastparquet.\r\n\r\nIt would be helpful to localize the bug to something \"closer\" to the code being changed.  `pd.read_parquet` is not directly calling `maybe_get_tz`, so it isn't obvious how the bug is connected to the code being changed (or if the code being changed is the only/best way to fix the bug)",
        "createdAt" : "2020-09-07T14:47:38Z",
        "updatedAt" : "2020-10-07T00:09:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d7f3e214-f58f-48d2-b55a-e4e8d4c9db48",
        "parentId" : "acad43e2-ecd3-47ea-8a42-a8578379db28",
        "authorId" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "body" : "This makes it clearer, thanks. So both `tz_localize()` and `tz_convert()` used by fastparquet and pyarrow helpers is fed with non-tz parameters and generally this is accepted:\r\n```python\r\npd.DatetimeIndex([datetime(2020, 9, 5)]).tz_localize('Europe/Lisbon') # works\r\npd.DatetimeIndex([datetime(2020, 9, 5)]).tz_localize('+01:00') # doesn't work\r\npd.DatetimeIndex([datetime(2020, 9, 5)]).tz_localize('UTC+01:00') # doesn't work\r\n```\r\nSo my patch fixes this asymmetry. Like you don't have to write\r\n```python \r\npd.DatetimeIndex([datetime(2020, 9, 5)]).tz_localize(pytz.timezone('Europe/Lisbon'))\r\n```\r\nBoth fastparquet and pyarrow feeds the timezone directly into `tz_localize` and `tz_convert`. When they do it with values like `US/Eastern` this works, then they have values like `+01:00` or `UTC+01:00` it raises exceptions. Both `tz_localize` and `tz_convert` depend on `maybe_get_tz` directly (where I added my change).",
        "createdAt" : "2020-09-07T15:47:44Z",
        "updatedAt" : "2020-10-07T00:09:02Z",
        "lastEditedBy" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "tags" : [
        ]
      },
      {
        "id" : "37d892ea-cce8-41ad-9922-69392dcce34f",
        "parentId" : "acad43e2-ecd3-47ea-8a42-a8578379db28",
        "authorId" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "body" : "@jbrockmendel does this add more depth and context to the issue?",
        "createdAt" : "2020-09-07T15:48:16Z",
        "updatedAt" : "2020-10-07T00:09:02Z",
        "lastEditedBy" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "tags" : [
        ]
      },
      {
        "id" : "27e5d65a-e8d5-4adb-8f45-236cf5c2bb50",
        "parentId" : "acad43e2-ecd3-47ea-8a42-a8578379db28",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "That is helpful, thanks.  So for the PR, can you take those currently not-working pd.DatetimeIndex lines and make tests for them?  (i guess for Timestamp too)",
        "createdAt" : "2020-09-07T22:00:38Z",
        "updatedAt" : "2020-10-07T00:09:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "080ca09b-21c5-48f5-a07d-e79886915a04",
        "parentId" : "acad43e2-ecd3-47ea-8a42-a8578379db28",
        "authorId" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "body" : "That sounds useful, I'll add the tests tomorrow. For the pyarrow and fastparquet I'll keep the new \"high-level\" tests too to ensure they don't break this use-case as timezone handling is a custom/fragile part.",
        "createdAt" : "2020-09-07T22:39:29Z",
        "updatedAt" : "2020-10-07T00:09:02Z",
        "lastEditedBy" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "tags" : [
        ]
      },
      {
        "id" : "64bf851e-6f54-48b8-9c81-cc38a1463dbd",
        "parentId" : "acad43e2-ecd3-47ea-8a42-a8578379db28",
        "authorId" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "body" : "Added the new timezeones to `TIMEZONES = []` in conftest.py, that hits the `DatetimeIndex` constructor and other related code paths. ",
        "createdAt" : "2020-09-08T08:07:54Z",
        "updatedAt" : "2020-10-07T00:09:02Z",
        "lastEditedBy" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "tags" : [
        ]
      }
    ],
    "commit" : "177284042a5863740e4a73a82e9c3f4d11712974",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +103,107 @@            if isinstance(tz, _dateutil_tzfile) and '.tar.gz' in tz._filename:\n                tz._filename = zone\n        elif tz[0] in {'-', '+'}:\n            hours = int(tz[0:3])\n            minutes = int(tz[0] + tz[4:6])"
  }
]