[
  {
    "id" : "6d50a7df-1f55-4a2e-8864-dabb2bfb53a2",
    "prId" : 17543,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17543#pullrequestreview-63236784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4fcdfb8-e56a-49a6-adfb-3e08b1b74b11",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so would like to rename these to be more consistent, maybe\r\n``get_timezone_from_dateutil``\r\n\r\nok with doing it in this PR ",
        "createdAt" : "2017-09-17T20:51:44Z",
        "updatedAt" : "2017-09-18T00:13:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6a14c2bf0f628993c0410646c6019a3d7315658",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +101,105 @@        elif tz.startswith('dateutil/'):\n            zone = tz[9:]\n            tz = dateutil_gettz(zone)\n            # On Python 3 on Windows, the filename is not always set correctly.\n            if isinstance(tz, _dateutil_tzfile) and '.tar.gz' in tz._filename:"
  },
  {
    "id" : "0036693b-a373-4a50-bc3a-7a0c67da2280",
    "prId" : 19281,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19281#pullrequestreview-89485695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98836755-070d-4fe1-a26f-2a6bd03fe5dd",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "When you say \"aren't evaluated as such\" are you talking about `==`? i.e. `start == end` is False, but `tz_compare(start, end)` is True?",
        "createdAt" : "2018-01-17T14:53:14Z",
        "updatedAt" : "2018-01-18T00:13:51Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "9c994218-5858-4d8f-acc7-516b41a98e4d",
        "parentId" : "98836755-070d-4fe1-a26f-2a6bd03fe5dd",
        "authorId" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "body" : "@TomAugspurger Yes, the reason for this is that `pytz` generates a separate `tzinfo` object for each unique offset/tzname combination, and that is what is attached when you call `.localize` or `.normalize`. These time zones don't compare equal to one another.\r\n\r\nIt might be worth noting that this function exists only to add a notion of equality to `pytz`-style zones that is compatible with the notion of equality expected of `tzinfo` subclasses.",
        "createdAt" : "2018-01-17T15:34:15Z",
        "updatedAt" : "2018-01-18T00:13:51Z",
        "lastEditedBy" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "tags" : [
        ]
      },
      {
        "id" : "b4256f54-7aa9-4c44-8839-fa7cb32183f7",
        "parentId" : "98836755-070d-4fe1-a26f-2a6bd03fe5dd",
        "authorId" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "body" : "Another thing that might be worth noting is that, as currently written (and probably it would be out of scope to fix this), this will *not* disambiguate zones that are actually links to other zones.\r\n\r\nSee the [backward file](https://github.com/eggert/tz/blob/c225aa9e0152fa54bb7b5011615c70a309655dd0/backward), `US/Eastern` is a link to `America/New_York`, for example, but that information is not accessible either from pytz or from the zoneinfo files, as far as I know. Even though `pytz.timezone(US/Eastern)` and `pytz.timezone(America/New_York)` always generate the same exact rules, they will be treated as different zones for purposes of `tz_compare` (which also means `concat` will merge them and convert to UTC).",
        "createdAt" : "2018-01-17T15:43:58Z",
        "updatedAt" : "2018-01-18T00:13:51Z",
        "lastEditedBy" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e95f16fcd0127a4952617e414eb785d7deb5a693",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +296,300 @@    `<DstTzInfo 'Europe/Paris' LMT+0:09:00 STD>` and\n    `<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>` are essentially same\n    timezones but aren't evaluted such, but the string representation\n    for both of these is `'Europe/Paris'`.\n"
  },
  {
    "id" : "36cec95e-80d0-465a-8459-acc839b23f98",
    "prId" : 31808,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31808#pullrequestreview-361537940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7743fb83-bf45-4f16-9088-1c75553edaf8",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "code check for cython hard-coded ints over 7ish characters?",
        "createdAt" : "2020-02-08T17:09:18Z",
        "updatedAt" : "2020-02-22T10:27:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5aca4b1c-5b32-49e5-96b8-5af7c94b2ba3",
        "parentId" : "7743fb83-bf45-4f16-9088-1c75553edaf8",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "We don't have a code check for that, and it's not cython specific, it's just something I see here and there that I like to fix, would you be interested in a code check for that kind of thing?",
        "createdAt" : "2020-02-14T14:19:57Z",
        "updatedAt" : "2020-02-22T10:27:37Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "e0fbe98a-d0b0-4a85-888b-daca0ecbe24f",
        "parentId" : "7743fb83-bf45-4f16-9088-1c75553edaf8",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think we can find better uses of time.",
        "createdAt" : "2020-02-20T00:33:33Z",
        "updatedAt" : "2020-02-22T10:27:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "eaf2d49a87ac5fc962b5a82e4484d57c6c8c8ab3",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +218,222 @@        # e.g. pytz.FixedOffset, matplotlib.dates._UTC,\n        # psycopg2.tz.FixedOffsetTimezone\n        num = int(get_utcoffset(tz, None).total_seconds()) * 1_000_000_000\n        return (np.array([NPY_NAT + 1], dtype=np.int64),\n                np.array([num], dtype=np.int64),"
  }
]