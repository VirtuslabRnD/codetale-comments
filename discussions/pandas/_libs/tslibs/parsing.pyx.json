[
  {
    "id" : "242d0aee-0d19-4163-865c-02e557938725",
    "prId" : 17363,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17363#pullrequestreview-64769823",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e808eb57-aeee-4a5f-9152-b41c2ed9ee26",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "separately (:>), consider add ing a compat for .pyx which *can* be imported (could also simply be a .pyx that is included) to provide things like this",
        "createdAt" : "2017-08-29T10:30:01Z",
        "updatedAt" : "2017-09-25T15:06:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "87744ec3-8dea-4ec1-98a0-8475563de4e6",
        "parentId" : "e808eb57-aeee-4a5f-9152-b41c2ed9ee26",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Good idea.",
        "createdAt" : "2017-08-29T14:46:58Z",
        "updatedAt" : "2017-09-25T15:06:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8e92c0bd-a89f-4044-9bc2-3652f59d6b2e",
        "parentId" : "e808eb57-aeee-4a5f-9152-b41c2ed9ee26",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add this to the Todo list as well",
        "createdAt" : "2017-09-24T18:52:01Z",
        "updatedAt" : "2017-09-25T15:06:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f89d11e4cc5be5cbf8de4632c4a51bdf4a51bcc9",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@np.import_array()\n\n# Avoid import from outside _libs\nif sys.version_info.major == 2:\n    string_types = basestring"
  },
  {
    "id" : "e905d84e-fe6e-408e-b8d2-b234a87b87be",
    "prId" : 17363,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17363#pullrequestreview-63237366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59f25dd8-5c43-47dc-abbf-6c62c6f1df5f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are you not using ``util.get_nat()``, which is just a cimport",
        "createdAt" : "2017-08-29T10:31:50Z",
        "updatedAt" : "2017-09-25T15:06:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7f07d216-2f20-495b-b4d9-fb27268480dd",
        "parentId" : "59f25dd8-5c43-47dc-abbf-6c62c6f1df5f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "?",
        "createdAt" : "2017-09-17T21:16:58Z",
        "updatedAt" : "2017-09-25T15:06:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f89d11e4cc5be5cbf8de4632c4a51bdf4a51bcc9",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +62,66 @@cdef set _not_datelike_strings = set(['a', 'A', 'm', 'M', 'p', 'P', 't', 'T'])\n\nNAT_SENTINEL = object()\n# This allows us to reference NaT without having to import it\n"
  },
  {
    "id" : "add05886-57bd-416d-b21f-1dfaac44287b",
    "prId" : 17363,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17363#pullrequestreview-63405409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d75399ee-4f3c-449e-a75e-1a8e65d02524",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "_nat_strings should be in datetime.pxd (or maybe in util.pxd)",
        "createdAt" : "2017-09-17T21:16:48Z",
        "updatedAt" : "2017-09-25T15:06:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4b1376ea-9d41-4f00-b2f6-421b5dfe6ba6",
        "parentId" : "d75399ee-4f3c-449e-a75e-1a8e65d02524",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Given the recent build-based threads, I'd like to (at least for now) avoid introducing this dependency, especially for something this small.  Eventually you're right we'll want to put these constants all in one place.",
        "createdAt" : "2017-09-18T16:12:30Z",
        "updatedAt" : "2017-09-25T15:06:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f89d11e4cc5be5cbf8de4632c4a51bdf4a51bcc9",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +49,53 @@    pass\n\n_nat_strings = set(['NaT', 'nat', 'NAT', 'nan', 'NaN', 'NAN'])\n\n_DEFAULT_DATETIME = datetime(1, 1, 1).replace(hour=0, minute=0,"
  },
  {
    "id" : "883ce9c3-0088-40fa-ba72-ba68aa5b3948",
    "prId" : 17363,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17363#pullrequestreview-64767509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3c4a830-2662-4951-970c-2ee411a0132c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I suppose those were for debugging? (if set to True) \r\nWe don't keep those anywhere else (apart from the profile=False), so not sure we should do it here ",
        "createdAt" : "2017-09-24T09:31:05Z",
        "updatedAt" : "2017-09-25T15:06:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "7c0d966e-fb9d-4dcf-8493-73868046e740",
        "parentId" : "f3c4a830-2662-4951-970c-2ee411a0132c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'll be happy to remove these if requested. I habitually keep them around so I don't have to remember what the options are.  Say the word and they're gone.",
        "createdAt" : "2017-09-24T17:04:51Z",
        "updatedAt" : "2017-09-25T15:06:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f89d11e4cc5be5cbf8de4632c4a51bdf4a51bcc9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3,7 @@# cython: linetrace=False\n# distutils: define_macros=CYTHON_TRACE=0\n# distutils: define_macros=CYTHON_TRACE_NOGIL=0\n\"\"\"\nParsing functions for datetime and datetime-like strings."
  },
  {
    "id" : "1ddf5b87-dc6c-401e-93a3-1b7253ec3e50",
    "prId" : 17363,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17363#pullrequestreview-64767567",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79a1d123-dad4-41d2-acd9-2bfba189b8c7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "IIRC we are now defining NAT_SENTINEL in multiple places?",
        "createdAt" : "2017-09-24T13:28:12Z",
        "updatedAt" : "2017-09-25T15:06:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "32b71734-b946-4bdc-82a4-4c942f261353",
        "parentId" : "79a1d123-dad4-41d2-acd9-2bfba189b8c7",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I don't think so, no.",
        "createdAt" : "2017-09-24T17:07:24Z",
        "updatedAt" : "2017-09-25T15:06:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f89d11e4cc5be5cbf8de4632c4a51bdf4a51bcc9",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +62,66 @@cdef set _not_datelike_strings = set(['a', 'A', 'm', 'M', 'p', 'P', 't', 'T'])\n\nNAT_SENTINEL = object()\n# This allows us to reference NaT without having to import it\n"
  },
  {
    "id" : "e10df6ba-0241-41ca-b88a-7efbcb427021",
    "prId" : 18046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18046#pullrequestreview-73342916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f574f82-af37-426d-9e22-a8902e372a8b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add to list to incorporate from nattype",
        "createdAt" : "2017-10-31T22:27:32Z",
        "updatedAt" : "2017-11-01T02:33:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e49a004074f91d8ef1825105a4f2da841b87aa18",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +53,57 @@\n\n_nat_strings = set(['NaT', 'nat', 'NAT', 'nan', 'NaN', 'NAN'])\n\n_DEFAULT_DATETIME = datetime(1, 1, 1).replace(hour=0, minute=0,"
  },
  {
    "id" : "b1727342-a6d3-4ffa-91ba-1fc0e87da57e",
    "prId" : 24520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24520#pullrequestreview-188543192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2ebfce5-3b27-4366-8794-140a83327d21",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this would then be\r\n``_DATEUTIL_LEXER_SPLIT = _timelex.split``",
        "createdAt" : "2018-12-31T23:14:49Z",
        "updatedAt" : "2019-01-01T07:27:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "51a9bc7c-dee0-4238-b146-2e53bb8ec271",
        "parentId" : "f2ebfce5-3b27-4366-8794-140a83327d21",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yep, see my point [above](https://github.com/pandas-dev/pandas/pull/24520#discussion_r244623841).",
        "createdAt" : "2018-12-31T23:51:25Z",
        "updatedAt" : "2019-01-01T07:27:02Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "977fc2376dc986aa381155fcc2694825b044ef92",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +612,616 @@\n_DATEUTIL_LEXER_SPLIT = _timelex.split\n\n\ndef _format_is_iso(f) -> bint:"
  },
  {
    "id" : "f1dafb5f-f254-403e-b974-7349122a95ac",
    "prId" : 24520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24520#pullrequestreview-188548789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "509c997b-0130-4145-a9f1-34733e8689b6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a little color here on why its vendored here",
        "createdAt" : "2018-12-31T23:15:19Z",
        "updatedAt" : "2019-01-01T07:27:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2fe1d1dd-5e55-4722-a082-3af0fc1d2ae1",
        "parentId" : "509c997b-0130-4145-a9f1-34733e8689b6",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yep, done.",
        "createdAt" : "2019-01-01T07:27:15Z",
        "updatedAt" : "2019-01-01T07:27:15Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "977fc2376dc986aa381155fcc2694825b044ef92",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +536,540 @@\n\n# Class copied verbatim from https://github.com/dateutil/dateutil/pull/732\n#\n# We use this class to parse and tokenize date strings. However, as it is"
  },
  {
    "id" : "7e83bcd0-fe55-423b-9694-13a8ed611925",
    "prId" : 24520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24520#pullrequestreview-188543163",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58c12ab5-8b09-4dda-ab4e-0c843ecb862c",
        "parentId" : null,
        "authorId" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "body" : "It occurs to me - does this need to be a Python class or can it be a `cdef` class?\r\n\r\nMaybe you want to do it in two steps, but there are probably a few other ways where this can be Cython-ed up.",
        "createdAt" : "2018-12-31T23:36:03Z",
        "updatedAt" : "2019-01-01T07:27:02Z",
        "lastEditedBy" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "tags" : [
        ]
      },
      {
        "id" : "36e7b2ad-f6f8-4d12-a466-970c4e83cce9",
        "parentId" : "58c12ab5-8b09-4dda-ab4e-0c843ecb862c",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "We probably could do some Cython optimizations, but I think it's best we get the porting done first using the code *as is* (and then do optimizations in subsequent PR's if needed)\r\n\r\nIdeally, we wouldn't even have this class - we would just import it from outside 😉.",
        "createdAt" : "2018-12-31T23:50:29Z",
        "updatedAt" : "2019-01-01T07:27:02Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "977fc2376dc986aa381155fcc2694825b044ef92",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +544,548 @@#\n# Copyright (c) 2017 - dateutil contributors\nclass _timelex(object):\n    def __init__(self, instream):\n        if six.PY2:"
  },
  {
    "id" : "9a892671-9d18-4cc6-a828-b2e6549d98f2",
    "prId" : 24520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24520#pullrequestreview-188542814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa047499-defe-4fe9-9fd8-40a6135104aa",
        "parentId" : null,
        "authorId" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "body" : "Do you still need Python 2 support? I thought the first 2019 release would be 3-only.",
        "createdAt" : "2018-12-31T23:36:38Z",
        "updatedAt" : "2019-01-01T07:27:02Z",
        "lastEditedBy" : "df13c963-1a7e-400d-8549-3b407a6b437e",
        "tags" : [
        ]
      },
      {
        "id" : "ced69d35-e75d-40f2-8bca-d2634997a1f4",
        "parentId" : "fa047499-defe-4fe9-9fd8-40a6135104aa",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is the last release (0.24.x). not out the door yet",
        "createdAt" : "2018-12-31T23:37:32Z",
        "updatedAt" : "2019-01-01T07:27:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "977fc2376dc986aa381155fcc2694825b044ef92",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +546,550 @@class _timelex(object):\n    def __init__(self, instream):\n        if six.PY2:\n            # In Python 2, we can't duck type properly because unicode has\n            # a 'decode' function, and we'd be double-decoding"
  },
  {
    "id" : "d1fac187-0a07-4ba8-b256-90289fe9d908",
    "prId" : 25754,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25754#pullrequestreview-218817333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e09c98a6-498a-4de6-998a-a3aabc812060",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We’ve tried to keep the exposed surface between cython and C limited to np_datetime.  If this dep is strictly necessary, it may be worth putting there.",
        "createdAt" : "2019-03-26T03:32:52Z",
        "updatedAt" : "2019-05-09T21:12:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d49448a6-a8f6-4754-9895-20a6536ba3b7",
        "parentId" : "e09c98a6-498a-4de6-998a-a3aabc812060",
        "authorId" : "be492700-7f0c-4e3f-b2b1-1392960f38a9",
        "body" : "We can do this. As for necessity - yes, it speeds up the `_does_string_look_like_datetime` in at least 7x (up to 10x), because raising/excepting Python exceptions has a high-enough cost compared to Cythonized functions if your functions are fast.",
        "createdAt" : "2019-03-26T10:55:51Z",
        "updatedAt" : "2019-05-09T21:12:28Z",
        "lastEditedBy" : "be492700-7f0c-4e3f-b2b1-1392960f38a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dda33c5469bb9024db468638fb96101beafb5da",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +40,44 @@    int getdigit_ascii(char c, int default) nogil\n\ncdef extern from \"../src/parser/tokenizer.h\":\n    double xstrtod(const char *p, char **q, char decimal, char sci, char tsep,\n                   int skip_trailing, int *error, int *maybe_int)"
  },
  {
    "id" : "c3d32bfd-6f45-4278-b447-4a36f9ddbf0f",
    "prId" : 25754,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25754#pullrequestreview-218968123",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efb68000-c6fb-45e9-9bdf-1578bf4549e1",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can Py_ssize_t be negative?",
        "createdAt" : "2019-03-26T14:46:23Z",
        "updatedAt" : "2019-05-09T21:12:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9ccf369c-81b0-407f-9b7d-6de1b5df5e4b",
        "parentId" : "efb68000-c6fb-45e9-9bdf-1578bf4549e1",
        "authorId" : "be492700-7f0c-4e3f-b2b1-1392960f38a9",
        "body" : "Yes, first `s` in `ssize` stands for `signed`.",
        "createdAt" : "2019-03-26T15:23:21Z",
        "updatedAt" : "2019-05-09T21:12:28Z",
        "lastEditedBy" : "be492700-7f0c-4e3f-b2b1-1392960f38a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dda33c5469bb9024db468638fb96101beafb5da",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +332,336 @@        const char *buf\n        char *endptr = NULL\n        Py_ssize_t length = -1\n        double converted_date\n        char first"
  },
  {
    "id" : "8112dd13-fff7-4f09-9a0c-01acb0f37a65",
    "prId" : 25754,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25754#pullrequestreview-219610611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a021553-86e0-4e58-9914-9770d265d014",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "needs comment explaining that the next three lines are a fancy/fast way to avoid a try/except.\r\n\r\nIf there is a way to avoid needing `xstrtod` dependency that would help with my pet goal of keeping `tslibs` self-contained.  Definitely don't want to re-implement the entire xstrtod, but might be worth it if xstrtod implements machinery not needed here (e.g. scientific notation)",
        "createdAt" : "2019-03-26T14:53:53Z",
        "updatedAt" : "2019-05-09T21:12:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "ba98fbf8-7f58-4a0a-9ef6-f39746615040",
        "parentId" : "0a021553-86e0-4e58-9914-9770d265d014",
        "authorId" : "be492700-7f0c-4e3f-b2b1-1392960f38a9",
        "body" : "My original implementation was calling libc `strtod()` with some juggling to get over the fact that Python always uses `.` as decimal point while `strtod` uses locale-dependent one. This added about 50 extra lines of C code that were searching for the decimal point and replacing it with `.` (plus it might've been lacking the removal of thousands separator).\r\n\r\nSo. while _not_ using `xstrtod()` here is possible, I doubt that it fits the bill of \"not increasing complexity\" and \"not adding new C code\" 😄 \r\n\r\nP.S. We still need scientific notation here because this function is parsing the input from a user, and who knows how users are storing floats in their data files?..",
        "createdAt" : "2019-03-26T15:26:38Z",
        "updatedAt" : "2019-05-09T21:12:28Z",
        "lastEditedBy" : "be492700-7f0c-4e3f-b2b1-1392960f38a9",
        "tags" : [
        ]
      },
      {
        "id" : "2080cb1e-19bc-45e3-b146-204c281930d4",
        "parentId" : "0a021553-86e0-4e58-9914-9770d265d014",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> We still need scientific notation here because this function is parsing the input from a user\r\n\r\nLook at the function in context.  If this pre-check doesn't reject it, it will get passed to other parsing functions, none of which will parse scientific notation into a datetime.",
        "createdAt" : "2019-03-26T15:44:50Z",
        "updatedAt" : "2019-05-09T21:12:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "29ffbb53-8c13-414b-acc8-5dc6fa68759c",
        "parentId" : "0a021553-86e0-4e58-9914-9770d265d014",
        "authorId" : "be492700-7f0c-4e3f-b2b1-1392960f38a9",
        "body" : "Even if so, what's the point of duplicating the code? There is already optimized C code for parsing floats, why re-implement?\r\nIf anything I can only suggest moving it to a separate `.c`/`.h` files under `tslibs` and re-use those in `tokenizer` (which makes some sense, as we might also need some fast integer parsing functions, too). Thoughts?",
        "createdAt" : "2019-03-27T13:33:10Z",
        "updatedAt" : "2019-05-09T21:12:28Z",
        "lastEditedBy" : "be492700-7f0c-4e3f-b2b1-1392960f38a9",
        "tags" : [
        ]
      },
      {
        "id" : "7316beb5-07c6-4410-acae-6013eefa3206",
        "parentId" : "0a021553-86e0-4e58-9914-9770d265d014",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> There is already optimized C code for parsing floats, why re-implement?\r\n\r\n1) If the code in question recognizes formats that we don't want to allow, then it isn't \"optimized\" for this use case.\r\n2) All else equal, we'd rather code be in cython than in C.\r\n3) To keep the dependency graph simple (Note: I'm at the high end of the caring-about-this scale)\r\n\r\n> If anything I can only suggest moving it to a separate .c/.h files under tslibs and re-use those in tokenizer\r\n\r\ntokenizer is a mess of its own (in fact I'm pretty sure there are not-quite-duplicate implementations of `xstrtod`) and I'm wary of scope creep in `tslibs`.",
        "createdAt" : "2019-03-27T16:02:44Z",
        "updatedAt" : "2019-05-09T21:12:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "43b56aaa-b0ae-49f2-a1fa-ecb274f3d6d5",
        "parentId" : "0a021553-86e0-4e58-9914-9770d265d014",
        "authorId" : "be492700-7f0c-4e3f-b2b1-1392960f38a9",
        "body" : "> 2\\. All else equal, we'd rather code be in cython than in C.\r\n\r\nBut that C code is _already_ there 😄 \r\n\r\n\r\n\r\n> 3\\. To keep the dependency graph simple\r\n\r\nSo what is your preference here? I don't want to duplicate code for parsing doubles (that is improper practice IMHO), so re-using `xstrtod()` is a very nice thing to do. How do we proceed with it given your feedback?",
        "createdAt" : "2019-03-27T17:19:14Z",
        "updatedAt" : "2019-05-09T21:12:28Z",
        "lastEditedBy" : "be492700-7f0c-4e3f-b2b1-1392960f38a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dda33c5469bb9024db468638fb96101beafb5da",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +346,350 @@        elif py_string in _not_datelike_strings:\n            return False\n        else:\n            # xstrtod with such paramaters copies behavior of python `float`\n            # cast; for example, \" 35.e-1 \" is valid string for this cast so,"
  },
  {
    "id" : "6ef20053-2e4a-47b1-a27d-052525d8a557",
    "prId" : 25754,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25754#pullrequestreview-235826960",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be986789-e0c7-4a80-8b2e-e015127a3fbe",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string here",
        "createdAt" : "2019-05-09T12:38:18Z",
        "updatedAt" : "2019-05-09T21:12:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "91dbc4cb-eb7d-4612-bbbd-7352306e0988",
        "parentId" : "be986789-e0c7-4a80-8b2e-e015127a3fbe",
        "authorId" : "ac925cd1-7327-4d2a-a9fc-55fc5f720f67",
        "body" : "added",
        "createdAt" : "2019-05-09T21:12:39Z",
        "updatedAt" : "2019-05-09T21:12:39Z",
        "lastEditedBy" : "ac925cd1-7327-4d2a-a9fc-55fc5f720f67",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dda33c5469bb9024db468638fb96101beafb5da",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +329,333 @@    whether given string is a datetime\n    \"\"\"\n    cdef:\n        const char *buf\n        char *endptr = NULL"
  },
  {
    "id" : "66e4ac46-e5d6-4cbd-8b3c-e00a18985238",
    "prId" : 25922,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25922#pullrequestreview-220821792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27ea8a23-5c2c-4b8d-b9b8-c8ae33bbce98",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is this really more performant than `int(s)`?  It looks like this is only used if we already know `s` is 4 characters.  I guess we don't know that it is all digits?",
        "createdAt" : "2019-03-29T18:48:09Z",
        "updatedAt" : "2019-04-19T06:17:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "773042ad-497a-4f50-be89-95019f019689",
        "parentId" : "27ea8a23-5c2c-4b8d-b9b8-c8ae33bbce98",
        "authorId" : "be492700-7f0c-4e3f-b2b1-1392960f38a9",
        "body" : "If you want microbenchmarks I can try to make those, or you can just take my word on it - `int(s)` is _very_ slow for non-integer strings because it uses Python mechanism of raising and catching exceptions, which itself costs at least 10x more than parsing the integer (because Python has to allocate memory, format error message and walk a list of frames to construct the traceback - everything which would be just thrown away here, because the only fact that we care here is \"if it isn't an integer - return `None`\").",
        "createdAt" : "2019-03-30T13:22:31Z",
        "updatedAt" : "2019-04-19T06:17:49Z",
        "lastEditedBy" : "be492700-7f0c-4e3f-b2b1-1392960f38a9",
        "tags" : [
        ]
      },
      {
        "id" : "8fda65ea-6ae9-4804-ae79-016b797ed266",
        "parentId" : "27ea8a23-5c2c-4b8d-b9b8-c8ae33bbce98",
        "authorId" : "be492700-7f0c-4e3f-b2b1-1392960f38a9",
        "body" : "So a quick measurement shows this (figures are from the benchmark presented in this PR):\r\n\r\nsample date| _parse_4digit | int| parse/int ratio\r\n-|-|-|-\r\n03/2010|45.4 ms|54.6 ms|0.83\r\n01/02/2019|17.4 ms|21.8 ms|0.80\r\n\r\nSample implementation:\r\n```cython\r\ncdef inline object parse_delimited_date(object date_string, bint dayfirst,\r\n                                        object tzinfo):\r\n    cdef:\r\n        int day = 1, month = 1, year\r\n        int length = len(date_string)\r\n\r\n    if length == 10:\r\n        if date_string[2] not in ' /-\\\\' or date_string[5] not in ' /-\\\\':\r\n            return None, None\r\n        try:\r\n            day = int(date_string[:2], 10)\r\n            month = int(date_string[3:5], 10)\r\n            year = int(date_string[6:], 10)\r\n        except ValueError:\r\n            return None, None\r\n        reso = 'day'\r\n    elif length == 7:\r\n        if date_string[2] not in ' /-\\\\':\r\n            return None, None\r\n        try:\r\n            month = int(date_string[:2], 10)\r\n            year = int(date_string[3:], 10)\r\n        except ValueError:\r\n            return None, None\r\n        reso = 'month'\r\n    else:\r\n        return None, None\r\n\r\n    if 1 <= month <= MAX_DAYS_IN_MONTH and 1 <= day <= MAX_DAYS_IN_MONTH \\\r\n            and (month <= MAX_MONTH or day <= MAX_MONTH):\r\n        if month > MAX_MONTH or (day < MAX_MONTH and dayfirst):\r\n            day, month = month, day\r\n        return PyDateTimeAPI.DateTime_FromDateAndTime(year, month, day,\r\n                0, 0, 0, 0, tzinfo, PyDateTimeAPI.DateTimeType), reso\r\n\r\n    raise DateParseError(\"Invalid date specified (%d/%d)\" %\r\n                            (month, day))\r\n```\r\n\r\nI won't say it's much easier, but it's at least 20% slower.\r\n",
        "createdAt" : "2019-03-30T13:54:19Z",
        "updatedAt" : "2019-04-19T06:17:49Z",
        "lastEditedBy" : "be492700-7f0c-4e3f-b2b1-1392960f38a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cd971af704fe952fc221bb1d254524c2acd795a",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +66,70 @@\n\ncdef inline int _parse_4digit(const char* s):\n    cdef int result = 0\n    result += getdigit_ascii(s[0], -10) * 1000"
  },
  {
    "id" : "62ceaa04-a8d9-4b5a-a026-142797bb47e4",
    "prId" : 25922,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25922#pullrequestreview-223195334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0877bde2-fd3f-41f3-af5d-bcf86483df0d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these should already be in ccalendar no?",
        "createdAt" : "2019-04-04T12:21:56Z",
        "updatedAt" : "2019-04-19T06:17:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0b521c0a-99a7-4454-b7e2-c3c9ef8c3108",
        "parentId" : "0877bde2-fd3f-41f3-af5d-bcf86483df0d",
        "authorId" : "ac925cd1-7327-4d2a-a9fc-55fc5f720f67",
        "body" : "These variables are not there. Also if they are will be transferred into ccalendar, then extra overhead of pointer dereference will be appeared.",
        "createdAt" : "2019-04-05T10:09:40Z",
        "updatedAt" : "2019-04-19T06:17:49Z",
        "lastEditedBy" : "ac925cd1-7327-4d2a-a9fc-55fc5f720f67",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cd971af704fe952fc221bb1d254524c2acd795a",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +52,56 @@cdef:\n    const char* delimiters = \" /-.\"\n    int MAX_DAYS_IN_MONTH = 31, MAX_MONTH = 12\n\n"
  },
  {
    "id" : "24b8352a-f825-4f25-be4f-8b4ca4bd27ae",
    "prId" : 25922,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25922#pullrequestreview-223192698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6882b1a-d412-460d-8ea3-19f7c6106d1d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some more comments to this code",
        "createdAt" : "2019-04-04T12:22:37Z",
        "updatedAt" : "2019-04-19T06:17:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e069ae11-c99d-49e1-bd33-b6fb556ec24d",
        "parentId" : "d6882b1a-d412-460d-8ea3-19f7c6106d1d",
        "authorId" : "ac925cd1-7327-4d2a-a9fc-55fc5f720f67",
        "body" : "Added",
        "createdAt" : "2019-04-05T10:03:20Z",
        "updatedAt" : "2019-04-19T06:17:49Z",
        "lastEditedBy" : "ac925cd1-7327-4d2a-a9fc-55fc5f720f67",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cd971af704fe952fc221bb1d254524c2acd795a",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +106,110 @@\n    buf = get_c_string_buf_and_size(date_string, &length)\n    if length == 10:\n        # parsing MM?DD?YYYY and DD?MM?YYYY dates\n        if _is_not_delimiter(buf[2]) or _is_not_delimiter(buf[5]):"
  },
  {
    "id" : "9e7fe6ec-e4fb-4aa5-b481-b8c14b0fa754",
    "prId" : 25922,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25922#pullrequestreview-223192867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e224b13-6295-4378-babc-e6295e619527",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls use a proper numpy-doc style doc-string",
        "createdAt" : "2019-04-04T12:22:50Z",
        "updatedAt" : "2019-04-19T06:17:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "507ea8ef-21eb-46de-8ebc-39a850b1d422",
        "parentId" : "0e224b13-6295-4378-babc-e6295e619527",
        "authorId" : "ac925cd1-7327-4d2a-a9fc-55fc5f720f67",
        "body" : "fixed this",
        "createdAt" : "2019-04-05T10:03:43Z",
        "updatedAt" : "2019-04-19T06:17:49Z",
        "lastEditedBy" : "ac925cd1-7327-4d2a-a9fc-55fc5f720f67",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cd971af704fe952fc221bb1d254524c2acd795a",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +94,98 @@    date_string : str\n    dayfirst : bint\n\n    Returns:\n    --------"
  }
]