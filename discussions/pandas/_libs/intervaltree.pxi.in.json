[
  {
    "id" : "49b03dc6-eb42-414a-b4d4-db8ea622b616",
    "prId" : 20651,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20651#pullrequestreview-111099237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3db75c0a-475d-48fa-bae9-4b5b5c4390c7",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Not entirely sure if this is necessary",
        "createdAt" : "2018-04-11T01:07:05Z",
        "updatedAt" : "2018-04-11T06:43:11Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "8190caf7-fded-4f89-bda4-5b49a68d2827",
        "parentId" : "3db75c0a-475d-48fa-bae9-4b5b5c4390c7",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I think it's fine.  Even if your tests pass without it, I would still keep it for consistency.",
        "createdAt" : "2018-04-11T06:21:36Z",
        "updatedAt" : "2018-04-11T06:43:11Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e0ec35e4ec60bcaaa6a6bc90207af7ce68b1b57",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +25,29 @@    int64_t\n    int32_t\n    uint64_t\n\n"
  },
  {
    "id" : "50db755a-4e67-420d-b305-38b59b87b18b",
    "prId" : 23327,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23327#pullrequestreview-178595419",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2677c1bf-2c2e-43cd-9c55-4781d499f3c8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add that you are caching this in _is_overlapping",
        "createdAt" : "2018-10-31T12:56:41Z",
        "updatedAt" : "2018-11-27T03:13:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c879fbee-0c40-40b9-995d-b849b3ade9ee",
        "parentId" : "2677c1bf-2c2e-43cd-9c55-4781d499f3c8",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "done",
        "createdAt" : "2018-11-27T03:14:18Z",
        "updatedAt" : "2018-11-27T03:14:18Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd6349286c2832fc54b33fb928051045f7d79973",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +85,89 @@    def is_overlapping(self):\n        \"\"\"\n        Determine if the IntervalTree contains overlapping intervals.\n        Cached as self._is_overlapping.\n        \"\"\""
  },
  {
    "id" : "8c520f9c-a621-4995-bc1c-bf19a92f155c",
    "prId" : 30560,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30560#pullrequestreview-337182097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7425787a-30d2-4d60-9d5d-f33fa7848c66",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "open to a better naming convention for the fused types to make this less gross",
        "createdAt" : "2019-12-30T17:33:33Z",
        "updatedAt" : "2019-12-30T17:37:26Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "70b4974ce1fb3b148839028220ea2592dd63c3de",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +226,230 @@            fused_prefix = 'uint_'\n        elif dtype.startswith('float'):\n            fused_prefix = ''\n        nodes.append((dtype, dtype.title(),\n                      closed, closed.title(),"
  },
  {
    "id" : "dffcd1be-cd41-45d8-bd4c-058cf9f53486",
    "prId" : 30560,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30560#pullrequestreview-337182097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "797364bd-7028-44de-a719-052ac757eee3",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Need to add these as operations like `IntervalTree[uint64].get_indexer([-1])` will raise an `OverflowError`.  See the associated tests I added.",
        "createdAt" : "2019-12-30T17:35:06Z",
        "updatedAt" : "2019-12-30T17:37:26Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "70b4974ce1fb3b148839028220ea2592dd63c3de",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +139,143 @@            try:\n                self.root.query(result, target[i])\n            except OverflowError:\n                # overflow -> no match, which is already handled below\n                pass"
  },
  {
    "id" : "ec8d9af5-752b-46f0-bdb9-390c95aa1ffd",
    "prId" : 30560,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30560#pullrequestreview-337225495",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4e12a7a-e92c-4cd0-b0ce-1aa7ae0b8f51",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "I think we can drop support for `float32` and `int32` dtypes here, which should help reduce build time. There is no practical way to actually get an `IntervalTree` of these dtypes since `IntervalIndex` is backed by 2 indexes and we don't have a `Float32Index` or `Int32Index`. Will save this for a followup though.",
        "createdAt" : "2019-12-30T17:37:22Z",
        "updatedAt" : "2019-12-30T17:38:58Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "e754e351-7516-423e-91ad-dc61cbbfbf08",
        "parentId" : "b4e12a7a-e92c-4cd0-b0ce-1aa7ae0b8f51",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Soounds good.\r\n\r\nim confused by the naming here: why are the float dtypes included in int_scalar_t/uint_scalar_t?",
        "createdAt" : "2019-12-30T18:14:50Z",
        "updatedAt" : "2019-12-30T18:14:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "966490d9-1155-412d-9050-48e4680baec9",
        "parentId" : "b4e12a7a-e92c-4cd0-b0ce-1aa7ae0b8f51",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Yeah, I couldn't think of a good way to name those.  Idea is that `int_scalar_t`/`uint_scalar_t` are things that are comparable to int/uint, and we want to be able to compare against float in both cases to determine things like 0.5 being in the interval (0, 1).\r\n\r\nI tried it without including floats and got \"no matching type signature\" errors when trying stuff like `IntervalTree[int].get_indexer([0.5])`.",
        "createdAt" : "2019-12-30T18:34:49Z",
        "updatedAt" : "2019-12-30T18:34:49Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "abda4f84-a37a-4a87-954e-e3679268ebe4",
        "parentId" : "b4e12a7a-e92c-4cd0-b0ce-1aa7ae0b8f51",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Wouldnâ€™t comparisons to float be very inaccurate in the 2 ** 63 plus range where we get unsigned?",
        "createdAt" : "2019-12-30T18:54:32Z",
        "updatedAt" : "2019-12-30T18:54:32Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "fdf6846f-e1cd-430b-a5b6-78197beeb6c2",
        "parentId" : "b4e12a7a-e92c-4cd0-b0ce-1aa7ae0b8f51",
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Yes, comparisons will be inaccurate above `2**61`, so the issue is also present on the upper/lower ends of the int64 range.  Comparisons are still valid below this so probably something we'll have to live with, e.g. the same holds for comparisons against `UInt64Index` but the behavior is still allowed there.",
        "createdAt" : "2019-12-30T20:11:34Z",
        "updatedAt" : "2019-12-30T20:11:35Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "70b4974ce1fb3b148839028220ea2592dd63c3de",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +11,15 @@    int32_t\n    float64_t\n    float32_t\n\nctypedef fused uint_scalar_t:"
  }
]