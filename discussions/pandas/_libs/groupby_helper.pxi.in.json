[
  {
    "id" : "d95e0508-84cb-4b0b-ba86-4c4106b966d2",
    "prId" : 18876,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18876#pullrequestreview-85150061",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff566bf3-1a86-4dee-bdc5-4bf7ce4c3e92",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does this work for ``min_count==0``?",
        "createdAt" : "2017-12-21T18:38:27Z",
        "updatedAt" : "2017-12-28T12:36:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6f6b0c99-5a86-40e3-84b5-7bc86755e34d",
        "parentId" : "ff566bf3-1a86-4dee-bdc5-4bf7ce4c3e92",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yeah, `sumx`  starts out as `zeros`, so we just have to avoid setting it to NaN. Same for `prod`, but with ones.",
        "createdAt" : "2017-12-21T18:49:41Z",
        "updatedAt" : "2017-12-28T12:36:26Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e954f84d5e5b2eae643472031c7890da3d98814",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +90,94 @@        for i in range(ncounts):\n            for j in range(K):\n                if nobs[i, j] < min_count:\n                    out[i, j] = NAN\n                else:"
  },
  {
    "id" : "b49c3865-da88-4fa7-b931-f669b8685eef",
    "prId" : 19481,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19481#pullrequestreview-95401920",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42f6daf2-d00f-4d31-862b-e0299f1253c2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "any comments on the impl would be helpful (to future readers)",
        "createdAt" : "2018-02-08T01:23:31Z",
        "updatedAt" : "2018-02-09T18:37:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d01bfa0a-4dd0-463c-bed3-7362ce0bf27f",
        "parentId" : "42f6daf2-d00f-4d31-862b-e0299f1253c2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "nice comments!",
        "createdAt" : "2018-02-09T12:19:20Z",
        "updatedAt" : "2018-02-09T18:37:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4578d78e5d4feaf6a8a3caac51acf7d2ebc112",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +573,577 @@                        if ascending:\n                            out[_as[j], 0] = j + 1 - grp_start\n                        else:\n                            out[_as[j], 0] = 2 * i - j - dups + 2 - grp_start\n                elif tiebreak == TIEBREAK_DENSE:"
  },
  {
    "id" : "f9d5631c-3b20-434b-95c2-34d5eaf073ef",
    "prId" : 19610,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19610#pullrequestreview-95294678",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7939ee53-b4f1-458c-baea-c31ef2f2a0f4",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Was really hoping to not even have this conditional, but when trying `resx = np.empty_like(out)` and even `resx = np.empty_like(out, dtype='object')` it kept SegFaulting on objects",
        "createdAt" : "2018-02-09T01:44:42Z",
        "updatedAt" : "2018-02-09T03:29:45Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa63b47595546d4583b0fa7dbfd9e9bff393c76e",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +363,367 @@    nobs = np.zeros((<object> out).shape, dtype=np.int64)\n    {{if name=='object'}}\n    resx = np.empty((<object> out).shape, dtype=object)\n    {{else}}\n    resx = np.empty_like(out)"
  },
  {
    "id" : "c9b2d826-4aee-44cc-9868-53696f3c0f0d",
    "prId" : 19679,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19679#pullrequestreview-96268733",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c904b93b-51d4-4b8a-8ca1-4c911009dc30",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah this prob returns a platform int. this is ok",
        "createdAt" : "2018-02-13T19:26:33Z",
        "updatedAt" : "2018-02-13T19:26:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe5245b28c150943713b40ab3bbf6953b23363f4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +532,536 @@    # the mask helps you differentiate missing values before\n    # performing sort on the actual values\n    _as = np.lexsort(order).view(dtype=np.int64)\n\n    if not ascending:"
  },
  {
    "id" : "c30c0520-16b2-49dc-bbf2-fabc5913cb17",
    "prId" : 20681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20681#pullrequestreview-112236635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe8990a5-d064-4b89-a20f-427f67229443",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This is tough to describe in one line so I'm not sure of the best way but I think it can be improved by simply changing \"groups\" to \"values\"",
        "createdAt" : "2018-04-14T15:33:05Z",
        "updatedAt" : "2018-04-21T18:23:09Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "163aa06f-7d3c-4641-9166-57300253ba4e",
        "parentId" : "fe8990a5-d064-4b89-a20f-427f67229443",
        "authorId" : "4cd6c97a-353d-414a-949a-1e0cfc3a0c8a",
        "body" : "https://github.com/pandas-dev/pandas/blob/5edc5c4acde1f0d05b598825ab5c6a86fe551484/pandas/core/groupby/groupby.py#L1848-L1857\r\n\r\nYes, I agree. It is hard to describe those methods. So I copied from there to save some time. Btw, there are some typos there too. I've raise another issue #20694. I think we should come up with something consistent for both places.",
        "createdAt" : "2018-04-15T12:46:48Z",
        "updatedAt" : "2018-04-21T18:23:09Z",
        "lastEditedBy" : "4cd6c97a-353d-414a-949a-1e0cfc3a0c8a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6eb1d8fbfa094d2b9ed2edd789d76e9345eb3cbe",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +435,439 @@        * max: highest rank in group\n        * first: ranks assigned in order they appear in the array\n        * dense: like 'min', but rank always increases by 1 between groups\n    ascending : boolean, default True\n        False for ranks by high (1) to low (N)"
  },
  {
    "id" : "dfd3c385-717a-4e1d-bb64-8ddeec7f2b6f",
    "prId" : 21285,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21285#pullrequestreview-127618462",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82043385-98bb-483a-b1a7-f8af19de2060",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can this be simplified to just:\r\n\r\n```python\r\nif labels[_as[i]] == labels[_as[i+1]]:\r\n```\r\n\r\nSince all of the other conditions are already accounted for higher up in the scope?",
        "createdAt" : "2018-06-11T15:25:08Z",
        "updatedAt" : "2018-06-13T04:02:28Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbb05d40ff6435922110b3382f975af61f95d666",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +555,559 @@                # coming up. the conditional also needs to handle nan equality\n                # and the end of iteration\n                if (i == N - 1 or\n                        (masked_vals[_as[i]] != masked_vals[_as[i+1]]) or\n                        (mask[_as[i]] ^ mask[_as[i+1]])):"
  },
  {
    "id" : "adb5c3cf-efed-439e-b16f-08d70aac178e",
    "prId" : 21285,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21285#pullrequestreview-128028769",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f41189e-0fa2-4409-90f9-c2d67338753d",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "If the above is true could maybe use else more effective here to reduce code",
        "createdAt" : "2018-06-11T15:27:21Z",
        "updatedAt" : "2018-06-13T04:02:28Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "6f6863ce-d498-4236-b277-32210bb6a9c1",
        "parentId" : "0f41189e-0fa2-4409-90f9-c2d67338753d",
        "authorId" : "4cd6c97a-353d-414a-949a-1e0cfc3a0c8a",
        "body" : "How about i == N -1 scenario ? I can rewrite it to the following\r\n``` \r\nIf labels[_as[i]] == labels[_as[i+1]]:  (_increment temp values_) \r\n else: (_setting grp_size_)\r\n```\r\nThis is not equivalent to my current fix.\r\nThose two clauses are mutually exclusive. Then I have to do,\r\n```\r\nlabels[_as[i]] == labels[_as[i+1]] and i != N -1: ( _increment temp values_) \r\nelif i==N-1: (_increment temp values and set grp_size_)\r\nelse: (_set grp_size_)\r\n```\r\nIt is less readable",
        "createdAt" : "2018-06-12T05:03:59Z",
        "updatedAt" : "2018-06-13T04:02:28Z",
        "lastEditedBy" : "4cd6c97a-353d-414a-949a-1e0cfc3a0c8a",
        "tags" : [
        ]
      },
      {
        "id" : "d974ac76-f6c7-4b48-850c-f9d3e94cbb80",
        "parentId" : "0f41189e-0fa2-4409-90f9-c2d67338753d",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm OK thanks for talking me through - I think you are right that that wouldn't improve readability. ",
        "createdAt" : "2018-06-12T15:45:10Z",
        "updatedAt" : "2018-06-13T04:02:28Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbb05d40ff6435922110b3382f975af61f95d666",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +568,572 @@                # group encountered (used by pct calculations later). also be\n                # sure to reset any of the items helping to calculate dups\n                if i == N - 1 or labels[_as[i]] != labels[_as[i+1]]:\n                    if tiebreak != TIEBREAK_DENSE:\n                        for j in range(grp_start, i + 1):"
  },
  {
    "id" : "13ae07e1-ad36-40d6-9f93-ef2bdd662d5f",
    "prId" : 23022,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23022#pullrequestreview-164506401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "103926fa-5971-409d-8afa-48d54de40494",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can u make this more generic ? she what if we expand this to other int types?",
        "createdAt" : "2018-10-06T23:55:04Z",
        "updatedAt" : "2018-10-17T00:41:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "af897bd2-2d8a-41e5-8060-396c63abbc3d",
        "parentId" : "103926fa-5971-409d-8afa-48d54de40494",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Presumably.  The MO with these PRs is to keep the logic unchanged.\r\n\r\nI think there is also a cost in compile-time.",
        "createdAt" : "2018-10-07T00:21:25Z",
        "updatedAt" : "2018-10-17T00:41:01Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "05a5554e-375a-42e5-83d1-a4a30f316bb6",
        "parentId" : "103926fa-5971-409d-8afa-48d54de40494",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is a small cost of compile time (actually maybe nothing as cython is pretty smart). but i suppose can handle later.",
        "createdAt" : "2018-10-10T11:55:52Z",
        "updatedAt" : "2018-10-17T00:41:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6d1d92aa-2794-4f0c-9d2c-8b98b9f516a1",
        "parentId" : "103926fa-5971-409d-8afa-48d54de40494",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Fair enough.  Easy to implement if/when its actually needed.",
        "createdAt" : "2018-10-10T13:46:13Z",
        "updatedAt" : "2018-10-17T00:41:01Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "87b126d5-b219-487a-aff8-aac29608f202",
        "parentId" : "103926fa-5971-409d-8afa-48d54de40494",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see some comments above",
        "createdAt" : "2018-10-14T17:09:53Z",
        "updatedAt" : "2018-10-17T00:41:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "400e708f03517a992150001aef74acb445219158",
    "line" : 409,
    "diffHunk" : "@@ -1,1 +757,761 @@    N, K = (<object> values).shape\n    accum = np.empty_like(values)\n    if groupby_t is int64_t:\n        accum.fill(_int64_max)\n    else:"
  },
  {
    "id" : "41321e63-a45d-4b4f-9483-de2372fae64d",
    "prId" : 23022,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23022#pullrequestreview-164506401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2249b7b-aaff-48c2-827b-74d7b7163531",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can u comment / add a Todo here",
        "createdAt" : "2018-10-14T17:07:26Z",
        "updatedAt" : "2018-10-17T00:41:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "400e708f03517a992150001aef74acb445219158",
    "line" : 263,
    "diffHunk" : "@@ -1,1 +628,632 @@\n    maxx = np.empty_like(out)\n    if groupby_t is int64_t:\n        # Note: evaluated at compile-time\n        maxx.fill(-_int64_max)"
  },
  {
    "id" : "1bbeaf40-89b5-4a7b-9a35-553265536533",
    "prId" : 23022,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23022#pullrequestreview-165421411",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8783bcfa-11c6-4ca5-8103-cd9e765120da",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we should have a function that does the null comparisons though with the template code it is slightly \r\ntricky, maybe have a suite of isna_int, isna_float functions",
        "createdAt" : "2018-10-14T17:09:01Z",
        "updatedAt" : "2018-10-17T00:41:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4c5aa59f-fd57-4d40-aa66-b12c42e8bf69",
        "parentId" : "8783bcfa-11c6-4ca5-8103-cd9e765120da",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> we should have a function that does the null comparisons though with the template code \r\n\r\nI've been thinking about something similar, will give it a go in the next pass.",
        "createdAt" : "2018-10-14T18:05:51Z",
        "updatedAt" : "2018-10-17T00:41:01Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3af315ec-9fc5-4d90-aac2-f1888757b8f6",
        "parentId" : "8783bcfa-11c6-4ca5-8103-cd9e765120da",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k",
        "createdAt" : "2018-10-17T00:47:47Z",
        "updatedAt" : "2018-10-17T00:47:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "400e708f03517a992150001aef74acb445219158",
    "line" : 292,
    "diffHunk" : "@@ -1,1 +656,660 @@                else:\n                    if val == val and val != nan_val:\n                        nobs[lab, j] += 1\n                        if val > maxx[lab, j]:\n                            maxx[lab, j] = val"
  },
  {
    "id" : "7cb8593c-1bf4-49c3-90b7-bdc92dbc30cc",
    "prId" : 23022,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23022#pullrequestreview-164506401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74a48bd7-bad2-40d0-ac87-945a555a88b9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we DO need to expand these to all int/unit dtypes \r\nFYI",
        "createdAt" : "2018-10-14T17:09:35Z",
        "updatedAt" : "2018-10-17T00:41:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "400e708f03517a992150001aef74acb445219158",
    "line" : 307,
    "diffHunk" : "@@ -1,1 +670,674 @@group_max_float64 = group_max[\"float64_t\"]\ngroup_max_float32 = group_max[\"float32_t\"]\ngroup_max_int64 = group_max[\"int64_t\"]\n\n"
  },
  {
    "id" : "f974ed38-398b-4fc1-b0bb-f4fcb3f41af6",
    "prId" : 23022,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23022#pullrequestreview-165432160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eddbfb14-416e-416c-a514-a87aa40f3f33",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is c_type the name we are calling this in other files? ideally try to be consistent",
        "createdAt" : "2018-10-17T00:51:02Z",
        "updatedAt" : "2018-10-17T00:53:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a649b78f-6606-46fb-b1fa-af26a0d70b67",
        "parentId" : "eddbfb14-416e-416c-a514-a87aa40f3f33",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "There's some variation, but c_type is a common one.",
        "createdAt" : "2018-10-17T02:02:03Z",
        "updatedAt" : "2018-10-17T02:02:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "400e708f03517a992150001aef74acb445219158",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +15,19 @@{{py:\n\n# name, c_type\ndtypes = [('float64', 'float64_t'),\n          ('float32', 'float32_t')]"
  },
  {
    "id" : "890efd97-67de-401f-bde9-44fb6b8be5f6",
    "prId" : 24932,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24932#pullrequestreview-196688290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d939d01a-9ee4-468c-98e1-5380248a055f",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Can values be const?",
        "createdAt" : "2019-01-25T18:43:25Z",
        "updatedAt" : "2019-01-26T10:51:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c5ab9330-2a90-4b02-ac26-74656cd6915a",
        "parentId" : "d939d01a-9ee4-468c-98e1-5380248a055f",
        "authorId" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "body" : "I wasn't able to compile that with cython.\r\n\r\nI suspect that cython does not support const memory views with type object and object is one of the types used for {{name}}.",
        "createdAt" : "2019-01-25T20:03:09Z",
        "updatedAt" : "2019-01-26T10:51:28Z",
        "lastEditedBy" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b5c8d9e2dc67fd6e441079378a00f3a008892c1",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +296,300 @@def group_last_{{name}}({{c_type}}[:, :] out,\n                        int64_t[:] counts,\n                        {{c_type}}[:, :] values,\n                        const int64_t[:] labels,\n                        Py_ssize_t min_count=-1):"
  },
  {
    "id" : "45a7dc8a-cea2-4cdc-8d61-a2ceae59bc34",
    "prId" : 24932,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24932#pullrequestreview-196795423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19d697ee-0741-4f00-adec-2014c2e230b3",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "A challenge in this file if you’re up to it: use fused types instead of tempita.  Last time I tried I got weird errors that I never figured out.",
        "createdAt" : "2019-01-25T18:49:17Z",
        "updatedAt" : "2019-01-26T10:51:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "28ffd9d7-7d5a-4394-8f45-dd42241525c7",
        "parentId" : "19d697ee-0741-4f00-adec-2014c2e230b3",
        "authorId" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "body" : "I think it can be done. Can I do it in another PR after this is (hopefully) merged?",
        "createdAt" : "2019-01-26T16:16:29Z",
        "updatedAt" : "2019-01-26T16:16:29Z",
        "lastEditedBy" : "7e74fb24-2f96-4cb7-8b24-bacafb9fec58",
        "tags" : [
        ]
      },
      {
        "id" : "7594c03b-cb0d-41de-83ee-e9d68acff84b",
        "parentId" : "19d697ee-0741-4f00-adec-2014c2e230b3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, definitely separate PR.",
        "createdAt" : "2019-01-26T17:21:07Z",
        "updatedAt" : "2019-01-26T17:21:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b5c8d9e2dc67fd6e441079378a00f3a008892c1",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +29,33 @@\n@cython.wraparound(False)\n@cython.boundscheck(False)\ndef group_add_{{name}}({{c_type}}[:, :] out,\n                       int64_t[:] counts,"
  },
  {
    "id" : "17864f1f-3e17-4cc8-84cb-eeb5e6adc40d",
    "prId" : 28886,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28886#pullrequestreview-300066121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc85bd3b-ef74-483d-9655-87dd6cd0a596",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you create an issue to expand these int types at some point (to other common ones)",
        "createdAt" : "2019-10-10T12:47:09Z",
        "updatedAt" : "2019-10-10T20:21:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "41047be1-a97e-4995-8559-019cc3b0424d",
        "parentId" : "fc85bd3b-ef74-483d-9655-87dd6cd0a596",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Will do.  The impetus for this is actually needing a uint64_t version to fix some of the groupby Exception catching",
        "createdAt" : "2019-10-10T13:28:47Z",
        "updatedAt" : "2019-10-10T20:21:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "76b20c6fe3ede2c3ee398888e587735698a6efb0",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +16,20 @@    float64_t\n    float32_t\n    int64_t\n    object\n"
  },
  {
    "id" : "e8b4f7c5-8dcb-48b5-a759-b3c11318097b",
    "prId" : 28886,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28886#pullrequestreview-300185066",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48478531-7fea-4d97-aad6-01067b7dc81b",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I love the fused types here but can we just wait for Cython 0.30 to get released? I might be overlooking the benefit in the interim but feel like there is only risk to changing this conditional nogil only to revert back in the future",
        "createdAt" : "2019-10-10T15:59:01Z",
        "updatedAt" : "2019-10-10T20:21:31Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "fa112b74-14a1-4a79-8578-012243e65b5f",
        "parentId" : "48478531-7fea-4d97-aad6-01067b7dc81b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> the benefit in the interim\r\n\r\nIn the ongoing catch-less process in core.groupby I'm finding that the lack of uint64_t versions of some of these functions is a blocker (presumably with perf impact).  I find it easier to implement the uint64_t version with fused types than without, so figured get this out of the way.",
        "createdAt" : "2019-10-10T16:06:04Z",
        "updatedAt" : "2019-10-10T20:21:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "76b20c6fe3ede2c3ee398888e587735698a6efb0",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +49,53 @@    N, K = (<object>values).shape\n\n    if rank_t is object:\n        # TODO: De-duplicate once conditional-nogil is available\n        for i in range(N):"
  },
  {
    "id" : "0eeda2ab-6183-440a-945d-a7c095032386",
    "prId" : 28886,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28886#pullrequestreview-300326432",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "375054a0-0523-4dcd-b096-846eb466aeb6",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "FWIW I don't think we really even want this #19560",
        "createdAt" : "2019-10-10T18:10:59Z",
        "updatedAt" : "2019-10-10T20:21:31Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "9f30eaec-40ac-4f78-acf7-7c388d5e0a0b",
        "parentId" : "375054a0-0523-4dcd-b096-846eb466aeb6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "OK.  The comment seemed appropriate since we are using the same fused type.  Could add a reference to 19560 in the comment?",
        "createdAt" : "2019-10-10T20:18:13Z",
        "updatedAt" : "2019-10-10T20:21:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "76b20c6fe3ede2c3ee398888e587735698a6efb0",
    "line" : 350,
    "diffHunk" : "@@ -1,1 +398,402 @@group_rank_float32 = group_rank[\"float32_t\"]\ngroup_rank_int64 = group_rank[\"int64_t\"]\n# Note: we do not have a group_rank_object because that would require a\n#  not-nogil implementation, see GH#19560\n"
  },
  {
    "id" : "c496b1a0-8080-4ab9-9190-ca2efa23c909",
    "prId" : 28886,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28886#pullrequestreview-300326504",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "098940c7-6fc5-48ad-9c13-38639311e479",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Do you see any harm in putting this condition in the object block as well? Not sure if this is covered by tests but could see someone mistakenly assuming that the gil and nogil blocks are identical when 0.30 gets released and missing this on refactor",
        "createdAt" : "2019-10-10T18:13:51Z",
        "updatedAt" : "2019-10-10T20:21:31Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e535e4bb-40fd-43a3-af0f-360e8312df3a",
        "parentId" : "098940c7-6fc5-48ad-9c13-38639311e479",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i like this idea, will do",
        "createdAt" : "2019-10-10T20:18:21Z",
        "updatedAt" : "2019-10-10T20:21:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "76b20c6fe3ede2c3ee398888e587735698a6efb0",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +105,109 @@                for j in range(K):\n                    if nobs[i, j] == 0:\n                        if rank_t is int64_t:\n                            out[i, j] = NPY_NAT\n                        else:"
  },
  {
    "id" : "7ca20f70-a126-4511-a109-2694af7bcf37",
    "prId" : 28931,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28931#pullrequestreview-301017585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7baccbbe-dc62-4369-80d0-4bdd8be9213e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "where are these caught?",
        "createdAt" : "2019-10-12T17:01:47Z",
        "updatedAt" : "2019-10-14T17:18:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "31fe0f5d-b983-4134-998c-e2bfcdb0a5f3",
        "parentId" : "7baccbbe-dc62-4369-80d0-4bdd8be9213e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this would get caught by one of the `except Exception`s in the groupby code that i'm trying to make more specific.",
        "createdAt" : "2019-10-12T18:35:27Z",
        "updatedAt" : "2019-10-14T17:18:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "77a0b7e83312c18dbc298e239fa3aebbc8d249e8",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +118,122 @@\n    if runtime_error:\n        # We cannot raise directly above because that is within a nogil\n        #  block.\n        raise RuntimeError(\"empty group with uint64_t\")"
  },
  {
    "id" : "2bb09b66-118b-490b-b8cb-eb943314336b",
    "prId" : 28934,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28934#pullrequestreview-300946874",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29cee9f0-739c-4714-b24d-9da7413e9df1",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is this only applicable in groupby or should it go in util?",
        "createdAt" : "2019-10-11T21:18:35Z",
        "updatedAt" : "2019-10-16T17:04:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "716cfe28-1c36-40f4-aebd-bb32ee561faf",
        "parentId" : "29cee9f0-739c-4714-b24d-9da7413e9df1",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Only here.  As I mention in comments below, I'm not wild about the fact that is_datetimelike is effectively hard-coded to True in several places.  Will try to see if that causes problems in follow-up(s)",
        "createdAt" : "2019-10-11T22:03:12Z",
        "updatedAt" : "2019-10-16T17:04:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "18038441768da08eed1c6c0119ace328a82c0041",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +21,25 @@\n\ncdef inline bint _treat_as_na(rank_t val, bint is_datetimelike) nogil:\n    if rank_t is object:\n        # Should never be used, but we need to avoid the `val != val` below"
  },
  {
    "id" : "808dda15-3ae9-43de-a39a-5b726b56ef63",
    "prId" : 28934,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28934#pullrequestreview-300954705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44f8d811-4420-4e03-8edb-63c6ba690f24",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Somewhat counter-intuitive that this works - out of curiosity what was the complaint?",
        "createdAt" : "2019-10-11T21:19:27Z",
        "updatedAt" : "2019-10-16T17:04:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "67b12eb3-5dc4-48d2-80df-c699655d800b",
        "parentId" : "44f8d811-4420-4e03-8edb-63c6ba690f24",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "AFAICT the `val != val` check requires calling `val.__ne__` which requires the gil",
        "createdAt" : "2019-10-11T22:03:47Z",
        "updatedAt" : "2019-10-16T17:04:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "89add8e6-6400-453b-9492-d97b404984f6",
        "parentId" : "44f8d811-4420-4e03-8edb-63c6ba690f24",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn’t need the gil if these are c level object (eg ints or floats)",
        "createdAt" : "2019-10-11T22:27:20Z",
        "updatedAt" : "2019-10-16T17:04:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d4974d17-8091-4eb2-b9f5-a34a76b01b6c",
        "parentId" : "44f8d811-4420-4e03-8edb-63c6ba690f24",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Right, we just need to exclude the object case from getting to the `val == val` step, thats all this check is doing",
        "createdAt" : "2019-10-11T22:33:33Z",
        "updatedAt" : "2019-10-16T17:04:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "18038441768da08eed1c6c0119ace328a82c0041",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +22,26 @@\ncdef inline bint _treat_as_na(rank_t val, bint is_datetimelike) nogil:\n    if rank_t is object:\n        # Should never be used, but we need to avoid the `val != val` below\n        #  or else cython will raise about gil acquisition."
  },
  {
    "id" : "272dfb53-e7a3-4093-ba85-055dab18b488",
    "prId" : 28934,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28934#pullrequestreview-300947360",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83707fd6-7fd8-4b02-8362-af6f1fe4080d",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is this totally equivalent to what's in place? Looks like we are losing the `NPY_NAT` check?",
        "createdAt" : "2019-10-11T21:25:14Z",
        "updatedAt" : "2019-10-16T17:04:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ea9058b4-2428-4409-80a2-7ac4adb37bd6",
        "parentId" : "83707fd6-7fd8-4b02-8362-af6f1fe4080d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is in the `rank_t is object` case where we cant use _treat_as_na.  (comment just below here)",
        "createdAt" : "2019-10-11T22:04:48Z",
        "updatedAt" : "2019-10-16T17:04:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "18038441768da08eed1c6c0119ace328a82c0041",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +74,78 @@                val = values[i, j]\n\n                if val == val:\n                    # NB: use _treat_as_na here once\n                    #  conditional-nogil is available."
  },
  {
    "id" : "fa4e4a36-f9e0-492f-aec6-b25d8fda3429",
    "prId" : 28934,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28934#pullrequestreview-301017409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10306ebd-79db-4d93-812e-b4a2a741d08d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is pretty odd, why dont you return an enum here (true, false, raise) and handle in code appropriately.",
        "createdAt" : "2019-10-12T17:04:57Z",
        "updatedAt" : "2019-10-16T17:04:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fba0e4ef-ac4b-4faf-a4c9-2710985000e8",
        "parentId" : "10306ebd-79db-4d93-812e-b4a2a741d08d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "the vicissitudes of cython fused types",
        "createdAt" : "2019-10-12T18:30:12Z",
        "updatedAt" : "2019-10-16T17:04:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "18038441768da08eed1c6c0119ace328a82c0041",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +24,28 @@    if rank_t is object:\n        # Should never be used, but we need to avoid the `val != val` below\n        #  or else cython will raise about gil acquisition.\n        raise NotImplementedError\n"
  }
]