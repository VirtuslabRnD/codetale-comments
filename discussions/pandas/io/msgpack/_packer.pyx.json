[
  {
    "id" : "8a6d89cc-af5e-450d-87bc-6c578eeecc67",
    "prId" : 28398,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28398#pullrequestreview-287614976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a44a9dbb-c192-4f40-a3a5-c6fc0e680547",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "doesnt need to be for this PR, but most/all of the PyFoo_Check calls can be replaced with their pure-python equivalents; cython will now automatically make the optimization",
        "createdAt" : "2019-09-12T04:19:47Z",
        "updatedAt" : "2019-09-12T17:28:14Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "44f192fd-4c60-4180-92a8-f7265badc25d",
        "parentId" : "a44a9dbb-c192-4f40-a3a5-c6fc0e680547",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "So basically replace this with `isinstance` checks right? I think OK as a separate PR @amunch if that's something you'd also like to tackle",
        "createdAt" : "2019-09-12T15:53:29Z",
        "updatedAt" : "2019-09-12T17:28:14Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "59a7dbc2-9186-4973-967b-efae7f6053e2",
        "parentId" : "a44a9dbb-c192-4f40-a3a5-c6fc0e680547",
        "authorId" : "8582eb6c-8955-4b2b-b30f-c0760eeb5a0a",
        "body" : "Sounds good, I will replace these checks in a separate pull request.",
        "createdAt" : "2019-09-12T18:15:07Z",
        "updatedAt" : "2019-09-12T18:15:07Z",
        "lastEditedBy" : "8582eb6c-8955-4b2b-b30f-c0760eeb5a0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3496256c076271521ab574e4e190d04e34006cb8",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +11,15 @@from cpython.object cimport PyCallable_Check\nfrom cpython.tuple cimport PyTuple_Check\nfrom cpython.unicode cimport PyUnicode_Check, PyUnicode_AsEncodedString\n\nfrom libc.stdlib cimport free, malloc"
  },
  {
    "id" : "9a553f4a-4f00-4c3a-aba8-3d14ec8b9d91",
    "prId" : 29271,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29271#pullrequestreview-308808756",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b62fe710-6eeb-4df6-9ebc-ef7847e240bc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "really? cython doesn't understand the else here?",
        "createdAt" : "2019-10-29T20:18:05Z",
        "updatedAt" : "2019-10-29T20:18:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8c77b062-d52e-4706-977a-3958d5ee40ae",
        "parentId" : "b62fe710-6eeb-4df6-9ebc-ef7847e240bc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Its clang giving a \"code will never be executed\" warning",
        "createdAt" : "2019-10-29T20:23:30Z",
        "updatedAt" : "2019-10-29T20:23:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "19ec86ab40062c149491caa38630cea194567180",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +236,240 @@            else:\n                raise TypeError(\"can't serialize {thing!r}\".format(thing=o))\n            break\n        return ret\n"
  },
  {
    "id" : "1df4bed1-8d95-4ee3-add3-321226db5d31",
    "prId" : 29870,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29870#pullrequestreview-323658551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4c08643-921a-4a90-b3b9-0c31eb874fc5",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "is there a reason not to use the `!r` syntax?",
        "createdAt" : "2019-11-26T20:59:37Z",
        "updatedAt" : "2019-11-27T11:41:42Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "1d5c6abd-7c27-4085-bb3e-48339172cc74",
        "parentId" : "b4c08643-921a-4a90-b3b9-0c31eb874fc5",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "I just followed [pep-498](https://www.python.org/dev/peps/pep-0498/#s-r-and-a-are-redundant) (```!s, !r, and !a are redundant``` section).\r\n\r\nPlus as someone who is new to python, at first I didn't understand the ```!r``` syntax. I do think that if we use ```repr()``` it will increase code readability (for new developers at least). ",
        "createdAt" : "2019-11-26T23:02:59Z",
        "updatedAt" : "2019-11-27T11:41:42Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "d92c5df6-d81c-4b5e-b954-9ec6cb5bfd4e",
        "parentId" : "b4c08643-921a-4a90-b3b9-0c31eb874fc5",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "fair enough but not seen this conversion in other PRs for #29547\r\n\r\nto ensure consistency, could either update the issue with additional instructions or add a code check to disallow the redundant sytnax in f-strings (as a follow-on).",
        "createdAt" : "2019-11-27T09:35:09Z",
        "updatedAt" : "2019-11-27T11:41:42Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "c49c8f6c-2c16-4e26-a01d-7709e8ddf212",
        "parentId" : "b4c08643-921a-4a90-b3b9-0c31eb874fc5",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "Sure! love the idea of making a code style in the issue tab.\r\n\r\nI don't have the confident to write this mini style guide, I really don't want to mislead people.",
        "createdAt" : "2019-11-27T11:46:14Z",
        "updatedAt" : "2019-11-27T11:46:15Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "c8c7ab03-fb12-4392-94ec-6ab1110260c8",
        "parentId" : "b4c08643-921a-4a90-b3b9-0c31eb874fc5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@MomIsBestFriend ok if you'd make an issue about standarizing on repr(...) rather than ``!r`` agree that its more explicit; we would need to change any code and add a code-check.",
        "createdAt" : "2019-11-27T13:07:23Z",
        "updatedAt" : "2019-11-27T13:07:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "27bbe410e9f9bbf1861aae2c473abb705e760320",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +235,239 @@                continue\n            else:\n                raise TypeError(f\"can't serialize {repr(o)}\")\n            break\n        return ret"
  }
]