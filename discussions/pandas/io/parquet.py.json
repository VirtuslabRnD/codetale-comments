[
  {
    "id" : "ea3e1660-854a-45e1-baf5-add029b4db88",
    "prId" : 15838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15838#pullrequestreview-53685109",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ecebc7b-a6d4-4cc7-99e5-146a4a2459a9",
        "parentId" : null,
        "authorId" : "55206695-bb42-4d72-886f-f5370a77363e",
        "body" : "We might want to remove `timestamps_to_ms` here, or add a pandas compatibility wrapper in pyarrow. Ultimately this is going away",
        "createdAt" : "2017-07-29T14:03:47Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "55206695-bb42-4d72-886f-f5370a77363e",
        "tags" : [
        ]
      },
      {
        "id" : "27517efa-1e4a-4d41-a012-8b255a94d66a",
        "parentId" : "7ecebc7b-a6d4-4cc7-99e5-146a4a2459a9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@wesm is there a JIRA link for this? maybe link it in #17102 so we don't forget to do this.",
        "createdAt" : "2017-08-01T22:27:58Z",
        "updatedAt" : "2017-08-01T22:28:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "39e24758-4410-4ffd-b4e2-e09507cd41e2",
        "parentId" : "7ecebc7b-a6d4-4cc7-99e5-146a4a2459a9",
        "authorId" : "55206695-bb42-4d72-886f-f5370a77363e",
        "body" : "added link to ARROW-622",
        "createdAt" : "2017-08-02T02:25:43Z",
        "updatedAt" : "2017-08-02T02:25:43Z",
        "lastEditedBy" : "55206695-bb42-4d72-886f-f5370a77363e",
        "tags" : [
        ]
      }
    ],
    "commit" : "f553a5fbce80b98c4a55bd6469859e8f8922b162",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +63,67 @@    def write(self, df, path, compression='snappy', **kwargs):\n        path, _, _ = get_filepath_or_buffer(path)\n        table = self.api.Table.from_pandas(df, timestamps_to_ms=True)\n        self.api.parquet.write_table(\n            table, path, compression=compression, **kwargs)"
  },
  {
    "id" : "8090defb-222a-4ecb-b760-2adabd346a1b",
    "prId" : 18155,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18155#pullrequestreview-74908961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb7530b4-07b5-4c41-aa4f-c94d70b3693b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a version added tag",
        "createdAt" : "2017-11-07T20:55:22Z",
        "updatedAt" : "2017-11-08T13:04:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a1234d8b-c486-4408-8cb3-c4476d693f3e",
        "parentId" : "fb7530b4-07b5-4c41-aa4f-c94d70b3693b",
        "authorId" : "43286cbe-b727-4437-8153-2f8d73977f69",
        "body" : "done",
        "createdAt" : "2017-11-07T21:11:11Z",
        "updatedAt" : "2017-11-08T13:04:26Z",
        "lastEditedBy" : "43286cbe-b727-4437-8153-2f8d73977f69",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b22c889ca4463d7c5ebcd3acbcf3e6067d0a1c2",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +189,193 @@    path : string\n        File path\n    columns: list, default=None\n        If not None, only these columns will be read from the file.\n"
  },
  {
    "id" : "c0a2564c-43c3-43b5-948b-3fe0c3bbe259",
    "prId" : 18155,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18155#pullrequestreview-75074293",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb396b39-e2ea-42d8-af15-36511c02e881",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i’d like to pass thru kwargs as well; these won’t be specific names args just pass thru to the engine to validate\r\nfor both fp and pyarrow \r\ncould just be a simple test with row_groups",
        "createdAt" : "2017-11-08T11:53:36Z",
        "updatedAt" : "2017-11-08T13:04:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e1b9de96-383c-413c-8348-ae10dfa09d64",
        "parentId" : "fb396b39-e2ea-42d8-af15-36511c02e881",
        "authorId" : "43286cbe-b727-4437-8153-2f8d73977f69",
        "body" : "Ok, i think it is good to pass explicit options like columns which are supported by both backends and also pass the kwargs to be able to provide additional engine specific kwargs.\r\n\r\nHave to look at the test case.",
        "createdAt" : "2017-11-08T11:57:12Z",
        "updatedAt" : "2017-11-08T13:04:26Z",
        "lastEditedBy" : "43286cbe-b727-4437-8153-2f8d73977f69",
        "tags" : [
        ]
      },
      {
        "id" : "110ebf69-9609-461e-9964-e34a57ba52c8",
        "parentId" : "fb396b39-e2ea-42d8-af15-36511c02e881",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok that’s fine\r\nreally want row_group support :) (next PR!)\r\nalso if u want: https://github.com/pandas-dev/pandas/issues/17102",
        "createdAt" : "2017-11-08T12:03:44Z",
        "updatedAt" : "2017-11-08T13:04:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b22c889ca4463d7c5ebcd3acbcf3e6067d0a1c2",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +79,83 @@    def read(self, path, columns=None):\n        path, _, _ = get_filepath_or_buffer(path)\n        return self.api.parquet.read_table(path, columns=columns).to_pandas()\n\n"
  },
  {
    "id" : "198bab78-3d01-4fb4-b865-15162dde527b",
    "prId" : 18629,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18629#pullrequestreview-81831445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56e0e223-0385-4707-93ba-83a761c8efae",
        "parentId" : null,
        "authorId" : "94a17c08-0252-471b-a2a2-a32eb6cb15a9",
        "body" : "For fastparquet I haven't bothered reading the metadata to pull out the index columns since even if you do you still hit the `NotImplementedError`. I figure if fastparquet do add support for multi-indexes they might implement a solution similar to pyarrow so that the user doesn't have to introspect the metadata to reconstruct the correct DataFrame.",
        "createdAt" : "2017-12-07T12:08:33Z",
        "updatedAt" : "2017-12-11T17:00:04Z",
        "lastEditedBy" : "94a17c08-0252-471b-a2a2-a32eb6cb15a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fbdc14ac336f3a29fe531fffd7b4b5b7c766691",
    "line" : 205,
    "diffHunk" : "@@ -1,1 +198,202 @@        path, _, _ = get_filepath_or_buffer(path)\n        parquet_file = self.api.ParquetFile(path)\n        return parquet_file.to_pandas(columns=columns, **kwargs)\n\n"
  },
  {
    "id" : "6cb559f9-63cc-4050-bccc-e6ab2b2fb41b",
    "prId" : 19135,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19135#pullrequestreview-89063202",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0bd6bc5-af7b-43db-90d0-a3c9d21ba5ec",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a comment on what is happening here",
        "createdAt" : "2018-01-16T11:24:56Z",
        "updatedAt" : "2018-01-17T10:47:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9dbc77cefd3eb53d96daaa99596765725ad8392e",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +196,200 @@        # Use tobytes() instead.\n\n        if is_s3_url(path):\n            # path is s3:// so we need to open the s3file in 'wb' mode.\n            # TODO: Support 'ab'"
  },
  {
    "id" : "bbb676b3-6050-4789-833b-d892086980cd",
    "prId" : 22266,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22266#pullrequestreview-147847262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7a1a64c-8b3d-40b7-a499-e9b08081180c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versionadded ",
        "createdAt" : "2018-08-20T22:35:36Z",
        "updatedAt" : "2018-09-19T23:09:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7dc53a19320162218671654d7a406f5777730ddc",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +263,267 @@        If ``True``, include the dataframe's index(es) in the file output. If\n        ``False``, they will not be written to the file. If ``None``, the\n        engine's default behavior will be used.\n\n        .. versionadded 0.24.0"
  },
  {
    "id" : "2364b58a-fc4b-459d-84fc-4cfd106cfd46",
    "prId" : 22266,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22266#pullrequestreview-157055230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30d305aa-304d-45a5-95f1-96f19e499b22",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can u always pass this? and just set index= if it’s None or does that change things?",
        "createdAt" : "2018-09-05T13:30:32Z",
        "updatedAt" : "2018-09-19T23:09:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0a4804bf-6eb8-4a7a-9922-4b570a3693a3",
        "parentId" : "30d305aa-304d-45a5-95f1-96f19e499b22",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I am not sure if `preserve_index=None` is a valid value for pyarrow (at least not according to the docstring)",
        "createdAt" : "2018-09-05T14:29:44Z",
        "updatedAt" : "2018-09-19T23:09:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9ccc5ee9-742e-4b7f-84e3-280162ffeb43",
        "parentId" : "30d305aa-304d-45a5-95f1-96f19e499b22",
        "authorId" : "50b69844-f7de-4554-9a4d-e8e8c4ea6836",
        "body" : "I'd rather avoid messing with pyarrow like that, as it's fairly finicky in my experience.",
        "createdAt" : "2018-09-19T23:01:24Z",
        "updatedAt" : "2018-09-19T23:11:48Z",
        "lastEditedBy" : "50b69844-f7de-4554-9a4d-e8e8c4ea6836",
        "tags" : [
        ]
      }
    ],
    "commit" : "7dc53a19320162218671654d7a406f5777730ddc",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +114,118 @@        if index is None:\n            from_pandas_kwargs = {}\n        else:\n            from_pandas_kwargs = {'preserve_index': index}\n"
  },
  {
    "id" : "3615e552-69c3-4dc8-8692-e2e669d48523",
    "prId" : 23321,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23321#pullrequestreview-169375055",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05cb7e6d-77a2-4b84-a7cb-71022e581d83",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "What if a user does\r\n\r\n```python\r\ndf.to_parquet(\"/tmp/a\", engine=\"fastparquet\", partition_on=['foo'])\r\n```\r\n\r\nI think that would raise an error, since you've specified `partition_on` twice. It should use the user-provided `partition_on`.",
        "createdAt" : "2018-10-29T12:11:46Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "86c5c76a-ec8c-4e1a-ab3d-9574f1ff5e8b",
        "parentId" : "05cb7e6d-77a2-4b84-a7cb-71022e581d83",
        "authorId" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "body" : "i feel using one argument for partitioning makes more sense. Why don't we raise an error, asking them to use partition_cols instead in that case",
        "createdAt" : "2018-10-29T12:30:51Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "tags" : [
        ]
      },
      {
        "id" : "efacfa62-0fcc-45c3-b217-9559bac8e1c9",
        "parentId" : "05cb7e6d-77a2-4b84-a7cb-71022e581d83",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This will break existing users code who are using partition on and fastparquet. We shouldn’t do that.\r\n\r\nIt’s fine to recommend a single keyword and document it, but we need to handle the old working way as well. \r\n\r\nWe can also raise an issue with fastparquet and pyarrow to standardize the interface.  ",
        "createdAt" : "2018-10-29T13:26:13Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "535ce29c-1b04-468d-abab-c35f9b5ae0c6",
        "parentId" : "05cb7e6d-77a2-4b84-a7cb-71022e581d83",
        "authorId" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "body" : "make sense.. will handle it such that partition_on gets more priority than partition_cols with a warning",
        "createdAt" : "2018-10-29T15:34:01Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "tags" : [
        ]
      },
      {
        "id" : "a8c2259f-33c9-4c4a-8d28-b6a330a53347",
        "parentId" : "05cb7e6d-77a2-4b84-a7cb-71022e581d83",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm not sure it should even be a warning. If a warning is going to be emitted, then that should be done by fastparquet.",
        "createdAt" : "2018-10-29T15:48:25Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b455473733352e10c321d4f08b9fadc286b4c84",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +192,196 @@        with catch_warnings(record=True):\n            self.api.write(path, df, compression=compression,\n                           write_index=index, partition_on=partition_cols,\n                           **kwargs)\n"
  },
  {
    "id" : "8d302a9c-0269-460f-8524-d9b868226199",
    "prId" : 23321,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23321#pullrequestreview-171563593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e8783c3-a130-48c3-8a06-1e0a451936ab",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this not defaulted pyarrow? if you don't specify what is the default? ",
        "createdAt" : "2018-10-29T12:46:00Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c177d066-05ac-4d82-bd3d-1ae7db737519",
        "parentId" : "9e8783c3-a130-48c3-8a06-1e0a451936ab",
        "authorId" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "body" : "this is for fastparquet. Default file_scheme is simple. In simple _metadata file will not be generated. _metadata file is necessary to perform a read on a directory in fastparquet",
        "createdAt" : "2018-10-29T15:23:15Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "tags" : [
        ]
      },
      {
        "id" : "d4a18219-b61a-417d-8071-53d81e8d384e",
        "parentId" : "9e8783c3-a130-48c3-8a06-1e0a451936ab",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "To be specific, simple means one file only, and is not appropriate for dask. There is also Drill scheme, where the directory names are different from the Hive variant (*if* using directory partitioning, no difference otherwise). Spark defaults to the Hive format, it's a reasonable default in every case.",
        "createdAt" : "2018-10-29T16:01:08Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      },
      {
        "id" : "10617c91-430a-4553-9dce-4a12b80f67bc",
        "parentId" : "9e8783c3-a130-48c3-8a06-1e0a451936ab",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "(the _metadata file is longer necessary for the fastparquet branch, actually, but it is preferred)",
        "createdAt" : "2018-10-29T16:07:39Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      },
      {
        "id" : "791fcf48-51fa-4f5c-a840-dae2ce9821e3",
        "parentId" : "9e8783c3-a130-48c3-8a06-1e0a451936ab",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment above this describing what you said above, e.g. for compat with fp",
        "createdAt" : "2018-10-30T12:32:01Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4f0038cc-e7bb-434b-a6c7-c673d1ee9211",
        "parentId" : "9e8783c3-a130-48c3-8a06-1e0a451936ab",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Need a comment here sayings what's going on.",
        "createdAt" : "2018-11-05T12:05:05Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ae6b1cfd-0f59-4c8d-a59d-c9fc7289e2dc",
        "parentId" : "9e8783c3-a130-48c3-8a06-1e0a451936ab",
        "authorId" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "body" : "Default file_scheme for fastparquet is simple, which applies for a single file. \r\nWhen we go for storing partitioned parquet files in a directory, it is preferred to have a _metadata file along.\r\n\r\nFor compatibility, if a file_scheme is not provided, and engine is fastparquet, we can default to hive file scheme as, it provides the additional _metadata file.\r\n\r\n@martindurant  I am not able to read from the partitioned dataset when _metadata file is not present. I am on v0.1.6, and the error i get is that the _metadata file is missing.",
        "createdAt" : "2018-11-05T12:28:23Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "tags" : [
        ]
      },
      {
        "id" : "91cee423-54f7-40a3-bf99-1f5400f846ee",
        "parentId" : "9e8783c3-a130-48c3-8a06-1e0a451936ab",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "That is expected in 0.1.6, you would need to pass the whole list of data files rather than the root directory. This may be fixed in master.",
        "createdAt" : "2018-11-05T13:54:57Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b455473733352e10c321d4f08b9fadc286b4c84",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +178,182 @@\n        if partition_cols is not None:\n            kwargs['file_scheme'] = 'hive'\n\n        if is_s3_url(path):"
  },
  {
    "id" : "c0e7ec8a-43a9-47a1-9299-19b796158fce",
    "prId" : 23321,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23321#pullrequestreview-171677655",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6218b444-4924-48f5-8e8f-ce8803f48fb1",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Should check that `partition_cols` is None before doing this. We would want to raise on\r\n\r\n```python\r\ndf.to_parquet(engine='fastparquet', partition_cols=['a', 'b'], partition_on=['b', 'c'])\r\n```",
        "createdAt" : "2018-11-05T12:04:32Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "8bb290f7-b165-474e-bd8e-4ebf05a2a3c8",
        "parentId" : "6218b444-4924-48f5-8e8f-ce8803f48fb1",
        "authorId" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "body" : "done",
        "createdAt" : "2018-11-05T17:47:00Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b455473733352e10c321d4f08b9fadc286b4c84",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +175,179 @@                             \"partitioning data\")\n        elif 'partition_on' in kwargs:\n            partition_cols = kwargs.pop('partition_on')\n\n        if partition_cols is not None:"
  },
  {
    "id" : "6912cf6b-6ebd-4a3e-8bc8-ee0746049c15",
    "prId" : 23321,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23321#pullrequestreview-171869150",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29292d95-220c-4d62-8c34-58eed1d6224e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "versionchanged tag here",
        "createdAt" : "2018-11-06T04:00:32Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a1715124-3dc6-47f1-8655-b8006a6c1252",
        "parentId" : "29292d95-220c-4d62-8c34-58eed1d6224e",
        "authorId" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "body" : "done",
        "createdAt" : "2018-11-06T05:36:01Z",
        "updatedAt" : "2018-11-10T05:30:17Z",
        "lastEditedBy" : "321231c6-6642-4125-90a1-bdf4e9e4a005",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b455473733352e10c321d4f08b9fadc286b4c84",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +221,225 @@    path : str\n        File path or Root Directory path. Will be used as Root Directory path\n        while writing a partitioned dataset.\n\n        .. versionchanged:: 0.24.0"
  },
  {
    "id" : "1b9d071b-bba6-41fb-be5e-e8e440218d54",
    "prId" : 31242,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31242#pullrequestreview-482584681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09e006fe-fe53-41c4-a2d9-fd0511ab6de1",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "versionadded\r\n\r\nalso should this option be marked as experimental so that it can be freely changed between now and 2.0 is desired. also should using this keyword issue a FutureWarning",
        "createdAt" : "2020-04-15T15:46:25Z",
        "updatedAt" : "2020-11-28T19:49:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "ede76c50-2822-47bd-8f14-39e6a544ff73",
        "parentId" : "09e006fe-fe53-41c4-a2d9-fd0511ab6de1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls add a versionadded",
        "createdAt" : "2020-05-25T17:28:38Z",
        "updatedAt" : "2020-11-28T19:49:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b7ba1121-a8f6-4ff3-aaa5-f03b28689b17",
        "parentId" : "09e006fe-fe53-41c4-a2d9-fd0511ab6de1",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I added a versionadded and a note that this keyword is experimental. I would personally leave out the future warning, as that gets annoying (but for sure much more explicit about it being experimental).",
        "createdAt" : "2020-09-04T11:46:47Z",
        "updatedAt" : "2020-11-28T19:49:52Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1375bad8bcf7967c2aed0a3aad3a7343554cdaec",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +444,448 @@        for the resulting DataFrame (only applicable for ``engine=\"pyarrow\"``).\n        As new dtypes are added that support ``pd.NA`` in the future, the\n        output with this option will change to use those dtypes.\n        Note: this is an experimental option, and behaviour (e.g. additional\n        support dtypes) may change without notice."
  },
  {
    "id" : "28e83ad5-9250-43d5-b738-4ec55f632acf",
    "prId" : 31242,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31242#pullrequestreview-540493637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe20c89f-2d0c-4201-8e2d-47282cb11040",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we should have a global option to turn this on (pls add an issue for this)",
        "createdAt" : "2020-05-25T17:29:05Z",
        "updatedAt" : "2020-11-28T19:49:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0bbce84e-73fd-4640-9261-98c1f0d49a50",
        "parentId" : "fe20c89f-2d0c-4201-8e2d-47282cb11040",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think this generally worth it, if you can add an issue for this / PR welcome too! (bot blocking for this PR)",
        "createdAt" : "2020-11-29T16:09:32Z",
        "updatedAt" : "2020-11-29T16:09:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1375bad8bcf7967c2aed0a3aad3a7343554cdaec",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +289,293 @@        self, path, columns=None, storage_options: StorageOptions = None, **kwargs\n    ):\n        use_nullable_dtypes = kwargs.pop(\"use_nullable_dtypes\", False)\n        if use_nullable_dtypes:\n            raise ValueError("
  },
  {
    "id" : "86353b4a-82a3-4737-9c22-a2149e48128e",
    "prId" : 31242,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31242#pullrequestreview-540413808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1f46bdd-fbec-40d4-9ed4-0094b10a08c6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you instead import from the arrays locations.",
        "createdAt" : "2020-11-28T17:20:38Z",
        "updatedAt" : "2020-11-28T19:49:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "70522a9c-3fe9-4ae9-a845-e6fd91a731f4",
        "parentId" : "a1f46bdd-fbec-40d4-9ed4-0094b10a08c6",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We also import eg DataFrame from the main namespace in this file",
        "createdAt" : "2020-11-28T19:52:13Z",
        "updatedAt" : "2020-11-28T19:52:13Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1375bad8bcf7967c2aed0a3aad3a7343554cdaec",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +193,197 @@                import pandas as pd\n\n                mapping = {\n                    self.api.int8(): pd.Int8Dtype(),\n                    self.api.int16(): pd.Int16Dtype(),"
  },
  {
    "id" : "11a36933-2dc2-4f63-9781-c4dc4ea9956a",
    "prId" : 31242,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31242#pullrequestreview-540413210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5394584-b5f1-4b42-bd81-b65f1d2cffb7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is this different than the actual import? ",
        "createdAt" : "2020-11-28T17:21:22Z",
        "updatedAt" : "2020-11-28T19:49:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8c7da023-ec64-42b5-9edd-29b154dd6bdc",
        "parentId" : "d5394584-b5f1-4b42-bd81-b65f1d2cffb7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I wrote that code at a moment that 0.16 was not yet released (so needed to use the `> 0.15.1dev` instead of `>= 0.16` to test this with arrow master at the time). I updated all version checks to use 0.16 now.",
        "createdAt" : "2020-11-28T19:41:23Z",
        "updatedAt" : "2020-11-28T19:49:52Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1375bad8bcf7967c2aed0a3aad3a7343554cdaec",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +208,212 @@            else:\n                raise ValueError(\n                    \"'use_nullable_dtypes=True' is only supported for pyarrow >= 0.16 \"\n                    f\"({self.api.__version__} is installed\"\n                )"
  },
  {
    "id" : "7aaf2a3a-06b9-499f-81aa-7fd204484d0c",
    "prId" : 31242,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31242#pullrequestreview-540405308",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "705cd187-ef45-4298-8a7f-647665029abd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this tested",
        "createdAt" : "2020-11-28T17:21:40Z",
        "updatedAt" : "2020-11-28T19:49:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1375bad8bcf7967c2aed0a3aad3a7343554cdaec",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +292,296 @@        if use_nullable_dtypes:\n            raise ValueError(\n                \"The 'use_nullable_dtypes' argument is not supported for the \"\n                \"fastparquet engine\"\n            )"
  },
  {
    "id" : "0db1344b-3a1c-4f6e-b1d6-82602c4a552f",
    "prId" : 33632,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33632#pullrequestreview-397880837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "568ad6a3-d76f-4bbc-8c97-4ad95d75ae22",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is this `filesystem=get_fs_for_path(path)` needed? What happens if you just pass the path? (which I assume has eg a `s3://..` in it?)",
        "createdAt" : "2020-04-20T15:05:46Z",
        "updatedAt" : "2020-04-26T20:58:45Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "aef26eca-b8db-4926-b725-f35d3c9d1240",
        "parentId" : "568ad6a3-d76f-4bbc-8c97-4ad95d75ae22",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "pyarrow seems to only allow a file path opposed to a dir path. Removing filesystem arg here throws:\r\n```\r\n            for path in path_or_paths:\r\n                if not fs.isfile(path):\r\n                    raise IOError('Passed non-file path: {0}'\r\n>                                 .format(path))\r\nE                   OSError: Passed non-file path: s3://pandas-test/parquet_dir\r\n\r\n../../../.conda/envs/pandas-dev/lib/python3.7/site-packages/pyarrow/parquet.py:1229: OSError\r\n```\r\nTo repo see the test case `test_s3_roundtrip_for_dir` I wrote below",
        "createdAt" : "2020-04-21T22:54:43Z",
        "updatedAt" : "2020-04-26T20:58:45Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      },
      {
        "id" : "1bccf166-d253-415f-99ac-34797959cb8e",
        "parentId" : "568ad6a3-d76f-4bbc-8c97-4ad95d75ae22",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, OK. I see now in pyarrow that apparently string URIs with \"s3://...\" are not supported (while \"hdfs://\" is supported). That's something we should fix on the pyarrow side as well. But of course until then this is fine.",
        "createdAt" : "2020-04-22T06:34:16Z",
        "updatedAt" : "2020-04-26T20:58:45Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a1a85caecccc7578e6b36b1cc62921bf257cfb5",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +124,128 @@    def read(self, path, columns=None, **kwargs):\n        parquet_ds = self.api.parquet.ParquetDataset(\n            path, filesystem=get_fs_for_path(path), **kwargs\n        )\n        kwargs[\"columns\"] = columns"
  },
  {
    "id" : "73809dd0-3d74-4ec5-85d7-74b9cf0c38e3",
    "prId" : 33632,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33632#pullrequestreview-421326096",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d33bd35-7023-4c0c-85be-52501ef310d2",
        "parentId" : null,
        "authorId" : "d7208b33-223b-4a69-9659-9673e91eb73c",
        "body" : "@alimcmaster1 \r\n\r\nThis change breaks clients that pass a file-like object for `path`. `ParquetDataset` doesn't provide the same file-like object handling that the original `get_filepath_or_buffer` did.\r\n\r\nHere's the call stack I'm seeing:\r\n```python\r\n.tox/test/lib/python3.7/site-packages/pandas/io/parquet.py:315: in read_parquet\r\n    return impl.read(path, columns=columns, **kwargs)\r\n.tox/test/lib/python3.7/site-packages/pandas/io/parquet.py:131: in read\r\n    path, filesystem=get_fs_for_path(path), **kwargs\r\n.tox/test/lib/python3.7/site-packages/pyarrow/parquet.py:1162: in __init__\r\n    self.paths = _parse_uri(path_or_paths)\r\n.tox/test/lib/python3.7/site-packages/pyarrow/parquet.py:47: in _parse_uri\r\n    path = _stringify_path(path)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n```",
        "createdAt" : "2020-05-29T21:40:03Z",
        "updatedAt" : "2020-05-29T21:40:03Z",
        "lastEditedBy" : "d7208b33-223b-4a69-9659-9673e91eb73c",
        "tags" : [
        ]
      },
      {
        "id" : "8dbf1219-4cc3-4c43-8727-8aec9093a705",
        "parentId" : "1d33bd35-7023-4c0c-85be-52501ef310d2",
        "authorId" : "d7208b33-223b-4a69-9659-9673e91eb73c",
        "body" : "I filed bug report #34467 ",
        "createdAt" : "2020-05-29T22:14:08Z",
        "updatedAt" : "2020-05-29T22:14:08Z",
        "lastEditedBy" : "d7208b33-223b-4a69-9659-9673e91eb73c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a1a85caecccc7578e6b36b1cc62921bf257cfb5",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +123,127 @@\n    def read(self, path, columns=None, **kwargs):\n        parquet_ds = self.api.parquet.ParquetDataset(\n            path, filesystem=get_fs_for_path(path), **kwargs\n        )"
  },
  {
    "id" : "0e95f145-e36e-4abf-95ac-aa993dab16cf",
    "prId" : 33645,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33645#pullrequestreview-397287022",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f80a8b2-27e6-436f-8886-3656df6baac6",
        "parentId" : null,
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "For some reason we only have this logic in read. Should add to write too",
        "createdAt" : "2020-04-19T00:42:53Z",
        "updatedAt" : "2020-04-21T01:43:52Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      },
      {
        "id" : "dd5937fa-ab86-4025-b6b6-3c9aae971455",
        "parentId" : "9f80a8b2-27e6-436f-8886-3656df6baac6",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, can you open an issue for this",
        "createdAt" : "2020-04-20T22:11:51Z",
        "updatedAt" : "2020-04-21T01:43:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bb65e885-8a23-41da-a237-f6c544380cdf",
        "parentId" : "9f80a8b2-27e6-436f-8886-3656df6baac6",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "For which bit? File basically needs to be closed post write for s3fs to throw as expected. @TomAugspurger mention it here: https://github.com/pandas-dev/pandas/issues/32486#issuecomment-595992013",
        "createdAt" : "2020-04-21T01:53:02Z",
        "updatedAt" : "2020-04-21T01:53:03Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      },
      {
        "id" : "8f8eb907-456e-4744-8f64-c3ee913bd6c4",
        "parentId" : "9f80a8b2-27e6-436f-8886-3656df6baac6",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> For some reason we only have this logic in read. Should add to write too\r\n\r\nyour comment here. ",
        "createdAt" : "2020-04-21T12:38:34Z",
        "updatedAt" : "2020-04-21T12:38:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7bd1c9fc96627a65dc70ed64f10ff2740a13c1df",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +93,97 @@    ):\n        self.validate_dataframe(df)\n        path, _, _, should_close = get_filepath_or_buffer(path, mode=\"wb\")\n\n        from_pandas_kwargs: Dict[str, Any] = {\"schema\": kwargs.pop(\"schema\", None)}"
  },
  {
    "id" : "18ae53b8-8e76-4961-9f92-079e8407ce14",
    "prId" : 34266,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34266#pullrequestreview-420113575",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b351826-4ed9-4d77-a3c7-820d2d75880b",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "`import_optional_dependency`",
        "createdAt" : "2020-05-28T13:49:14Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b80a622035b3eaba3bdb790444b7d699822a28",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +125,129 @@        if is_fsspec_url(path) and \"filesystem\" not in kwargs:\n            import_optional_dependency(\"fsspec\")\n            import fsspec.core\n\n            fs, path = fsspec.core.url_to_fs(path)"
  },
  {
    "id" : "e29acb29-b026-44ed-b9b9-c7accc694431",
    "prId" : 34266,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34266#pullrequestreview-435772658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71d3368d-caa1-4847-8458-5efb941b71be",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you additionally check that `use_legacy_dataset=False` is not in the `kwargs` ? As long as https://github.com/intake/filesystem_spec/issues/295 is not solved, converting a string URI into a path + fsspec filesystem would make that option unusable.",
        "createdAt" : "2020-06-04T12:41:53Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "adee63dc-227b-4cfd-bac7-7fd1ec94bd89",
        "parentId" : "71d3368d-caa1-4847-8458-5efb941b71be",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you check this comment? \r\n(I will try if I can write a test that would catch it)",
        "createdAt" : "2020-06-18T07:39:20Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d60c27b1-a219-43bd-aecd-0a46dc683b29",
        "parentId" : "71d3368d-caa1-4847-8458-5efb941b71be",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "ping for this one",
        "createdAt" : "2020-06-23T13:06:49Z",
        "updatedAt" : "2020-06-23T13:09:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f724adb5-68e1-4af0-9b15-ca3c6c7c2c13",
        "parentId" : "71d3368d-caa1-4847-8458-5efb941b71be",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "(I am also fine with doing this as a follow-up myself)",
        "createdAt" : "2020-06-23T13:15:39Z",
        "updatedAt" : "2020-06-23T13:15:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1206eb94-4c88-4832-bc54-dd787d889128",
        "parentId" : "71d3368d-caa1-4847-8458-5efb941b71be",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "I thought you meant that you intended to handle it; and yes please, you are in the best place to check the finer details of the calls to pyarrow.",
        "createdAt" : "2020-06-23T13:19:37Z",
        "updatedAt" : "2020-06-23T13:19:37Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b80a622035b3eaba3bdb790444b7d699822a28",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +123,127 @@\n    def read(self, path, columns=None, **kwargs):\n        if is_fsspec_url(path) and \"filesystem\" not in kwargs:\n            import_optional_dependency(\"fsspec\")\n            import fsspec.core"
  },
  {
    "id" : "b1765073-9c10-43f0-9b7a-66311f33c1a0",
    "prId" : 34266,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34266#pullrequestreview-429369008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23790671-a6fc-4d12-8942-6ebc46fa4ac7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does fsspec handle closing itself?",
        "createdAt" : "2020-06-11T16:32:30Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3c91dd7e-a5d8-4571-ab6f-aede6578a081",
        "parentId" : "23790671-a6fc-4d12-8942-6ebc46fa4ac7",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "The file system does not need to be closed, and files are closed when they fall out of scope",
        "createdAt" : "2020-06-11T21:01:49Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      },
      {
        "id" : "01c38098-cde2-4469-9267-64ee87483dd5",
        "parentId" : "23790671-a6fc-4d12-8942-6ebc46fa4ac7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok",
        "createdAt" : "2020-06-11T23:55:09Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b80a622035b3eaba3bdb790444b7d699822a28",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +127,131 @@            import fsspec.core\n\n            fs, path = fsspec.core.url_to_fs(path)\n            should_close = False\n        else:"
  },
  {
    "id" : "d70871e3-278d-4bd8-b730-3bb4a6f0e7a2",
    "prId" : 34266,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34266#pullrequestreview-434223679",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f67ed26-b8ed-4d60-8f49-e031dc99fe10",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It might have been discussed before in this PR, but why this change from `file_obj_or_path` to `path` ? Because with this change, `file_obj_or_path` is basically never used?",
        "createdAt" : "2020-06-18T07:35:21Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "fc15115e-dd4b-499f-8480-f6eccb9625e1",
        "parentId" : "9f67ed26-b8ed-4d60-8f49-e031dc99fe10",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "You know what, this can be made simpler...\r\n\r\nThe reason is, pyarrow can take a filesystem+path and do the right thing, and for the partitioning case, this is the only way. I think we can deal without opening the file in the pandas code at all. I'll push that suggestion, and add comments for what the blocks do to be clearer.",
        "createdAt" : "2020-06-18T13:44:34Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      },
      {
        "id" : "bf72211b-8ffd-4015-8f09-aa4cd8d96550",
        "parentId" : "9f67ed26-b8ed-4d60-8f49-e031dc99fe10",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The new code above certainly looks fine, I am only wondering if there were things that `get_filepath_or_buffer` was doing before we might now be missing.\r\n\r\nIt gets a buffer for urls, but I don't think this actually works for *writing*. \r\nIn addition, it also seems to do a `os.path.expanduser` on strings. I suppose this is not tested (and not sure many people would rely on that), but that might lead to a regression. ",
        "createdAt" : "2020-06-19T08:38:20Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "42f636ae-14ba-4825-b3bb-880e70526d7e",
        "parentId" : "9f67ed26-b8ed-4d60-8f49-e031dc99fe10",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "You want to add `expanduser` to the function? I wouldn't bother going through `get_filepath_or_buffer` just for this, and as you say, it isn't tested or documented anywhere. In fact, test may be a little tricky for the various OSs, I'm not sure you can guarantee that `\"~/afile\"`-> `\"${HOME}/afile\"`.",
        "createdAt" : "2020-06-19T13:57:47Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      },
      {
        "id" : "fa650b41-64cf-4e14-8c19-14905403113c",
        "parentId" : "9f67ed26-b8ed-4d60-8f49-e031dc99fe10",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Confirmed that it works on master\r\n\r\n```python\r\nIn [2]: df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\r\n\r\nIn [3]: df.to_parquet(\"~/test-4.parquet\")\r\n```\r\n\r\nand raises on this branch.\r\n\r\n```python\r\nIn [3]: df.to_parquet(\"~/test-5.parquet\")\r\n---------------------------------------------------------------------------\r\nFileNotFoundError                         Traceback (most recent call last)\r\n<ipython-input-3-c7dcbbaae894> in <module>\r\n----> 1 df.to_parquet(\"~/test-5.parquet\")\r\n\r\n~/sandbox/pandas/pandas/util/_decorators.py in wrapper(*args, **kwargs)\r\n    197                 else:\r\n    198                     kwargs[new_arg_name] = new_arg_value\r\n--> 199             return func(*args, **kwargs)\r\n    200\r\n    201         return cast(F, wrapper)\r\n\r\n~/sandbox/pandas/pandas/core/frame.py in to_parquet(self, path, engine, compression, index, partition_cols, **kwargs)\r\n   2323             index=index,\r\n   2324             partition_cols=partition_cols,\r\n-> 2325             **kwargs,\r\n   2326         )\r\n   2327\r\n\r\n~/sandbox/pandas/pandas/io/parquet.py in to_parquet(df, path, engine, compression, index, partition_cols, **kwargs)\r\n    266         index=index,\r\n    267         partition_cols=partition_cols,\r\n--> 268         **kwargs,\r\n    269     )\r\n    270\r\n\r\n~/sandbox/pandas/pandas/io/parquet.py in write(self, df, path, compression, index, partition_cols, **kwargs)\r\n    118         else:\r\n    119             # write to single output file\r\n--> 120             self.api.parquet.write_table(table, path, compression=compression, **kwargs)\r\n    121\r\n    122     def read(self, path, columns=None, **kwargs):\r\n\r\n~/Envs/pandas-dev/lib/python3.7/site-packages/pyarrow/parquet.py in write_table(table, where, row_group_size, version, use_dictionary, compression, write_statistics, use_deprecated_int96_timestamps, coerce_timestamps, allow_truncated_timestamps, data_page_size, flavor, filesystem, compression_level, **kwargs)\r\n   1341                 use_deprecated_int96_timestamps=use_int96,\r\n   1342                 compression_level=compression_level,\r\n-> 1343                 **kwargs) as writer:\r\n   1344             writer.write_table(table, row_group_size=row_group_size)\r\n   1345     except Exception:\r\n\r\n~/Envs/pandas-dev/lib/python3.7/site-packages/pyarrow/parquet.py in __init__(self, where, schema, filesystem, flavor, version, use_dictionary, compression, write_statistics, use_deprecated_int96_timestamps, compression_level, **options)\r\n    434         filesystem, path = resolve_filesystem_and_path(where, filesystem)\r\n    435         if filesystem is not None:\r\n--> 436             sink = self.file_handle = filesystem.open(path, 'wb')\r\n    437         else:\r\n    438             sink = where\r\n\r\n~/Envs/pandas-dev/lib/python3.7/site-packages/pyarrow/filesystem.py in open(self, path, mode)\r\n    242         \"\"\"\r\n    243         path = _stringify_path(path)\r\n--> 244         return open(path, mode=mode)\r\n    245\r\n    246     @property\r\n\r\nFileNotFoundError: [Errno 2] No such file or directory: '~/test-5.parquet'\r\n```\r\n\r\npandas consistently expands `~` to the homedir, so we'll need to ensure we don't regress on this.",
        "createdAt" : "2020-06-19T14:53:28Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "0e467e2b-ce00-4d71-b3de-f554aafd834c",
        "parentId" : "9f67ed26-b8ed-4d60-8f49-e031dc99fe10",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "but how do we test this reliably?",
        "createdAt" : "2020-06-19T15:13:05Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      },
      {
        "id" : "df393bd0-dfb1-4485-a789-64908cd9e97c",
        "parentId" : "9f67ed26-b8ed-4d60-8f49-e031dc99fe10",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We should have similar tests for csv. ",
        "createdAt" : "2020-06-19T15:47:03Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "f393d0d0-75e3-4c48-87bc-2d3cffcddf49",
        "parentId" : "9f67ed26-b8ed-4d60-8f49-e031dc99fe10",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "We test the common utility: https://github.com/pandas-dev/pandas/blob/80ba4c4294a1ce1d95aeeb8e5de86d33ebb6edf4/pandas/tests/io/test_common.py#L55-L68\r\n\r\nand then probaby suppose that all IO methods use those common utilities.",
        "createdAt" : "2020-06-19T16:58:28Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "01cc3aef-70e4-4b87-85d6-84b645be7f9a",
        "parentId" : "9f67ed26-b8ed-4d60-8f49-e031dc99fe10",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "A little weak...\r\nI'll put in something. By the way, I expect that expanding the home dir didn't work before either when partitioning.",
        "createdAt" : "2020-06-19T17:00:55Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b80a622035b3eaba3bdb790444b7d699822a28",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +120,124 @@        else:\n            # write to single output file\n            self.api.parquet.write_table(table, path, compression=compression, **kwargs)\n\n    def read(self, path, columns=None, **kwargs):"
  },
  {
    "id" : "d95ad062-947e-4e80-81a2-92dcb83cfac6",
    "prId" : 34266,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34266#pullrequestreview-435795026",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fefa7267-3b74-443f-bfb8-2eb4c9e96277",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "No blocking comment (could also be as a follow-up), but for my understanding (and could maybe use a code comment): what was the reason again that this whole `is_fsspec_url(path): .. else: ..` block cannot be handled by `get_filepath_or_buffer` ? \r\n(which would eg handle the `_expand_user` as well)",
        "createdAt" : "2020-06-23T13:09:20Z",
        "updatedAt" : "2020-06-23T13:09:24Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ce3cca01-ceda-44e6-84be-0443efb110b4",
        "parentId" : "fefa7267-3b74-443f-bfb8-2eb4c9e96277",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "That we are not getting an open file, we are passing a path and filesystem to arrow for it to handle. This is important for the partitioning case, but works for the simple case too. Wasn't it your suggestion?",
        "createdAt" : "2020-06-23T13:17:51Z",
        "updatedAt" : "2020-06-23T13:17:52Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      },
      {
        "id" : "034f03c2-cadc-4cc7-b3ef-3632ea2248e3",
        "parentId" : "fefa7267-3b74-443f-bfb8-2eb4c9e96277",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> Wasn't it your suggestion?\r\n\r\nI don't think so, since this was already there from the beginning of the PR before my first review ;) Not that it matters much.\r\n\r\nAnyway, to answer my own question (I think): on a second look, this is simply because `get_filepath_or_buffer` doesn't return a filesystem (and which is indeed needed here, as you indicated). I was just confused about that for a moment.",
        "createdAt" : "2020-06-23T13:42:45Z",
        "updatedAt" : "2020-06-23T13:42:45Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b80a622035b3eaba3bdb790444b7d699822a28",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +132,136 @@            fs = kwargs.pop(\"filesystem\", None)\n            should_close = False\n            path = _expand_user(path)\n\n        if not fs:"
  },
  {
    "id" : "ce9b7451-bb51-4fda-b751-ce0a8460efef",
    "prId" : 34500,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34500#pullrequestreview-422970359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "870f2f77-861f-4847-bd14-0ca5ba42b473",
        "parentId" : null,
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "We have some similar logic on the fastparquet side. Should consolidate in the future: https://github.com/pandas-dev/pandas/blob/master/pandas/io/parquet.py#L188",
        "createdAt" : "2020-06-02T18:57:08Z",
        "updatedAt" : "2020-06-12T18:14:55Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "882f5a81aa894d530447a6bca5a74c935cfba790",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +125,129 @@        fs = get_fs_for_path(path)\n        should_close = None\n        # Avoid calling get_filepath_or_buffer for s3/gcs URLs since\n        # since it returns an S3File which doesn't support dir reads in arrow\n        if not fs:"
  },
  {
    "id" : "888246a6-c66a-4df7-b3cc-ac5d39afe064",
    "prId" : 36305,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36305#pullrequestreview-487580899",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a23e9190-4e0e-4f54-a91a-4da4d9724962",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a test for this",
        "createdAt" : "2020-09-13T22:24:41Z",
        "updatedAt" : "2020-11-19T01:05:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "06b2febf-3fb6-4e66-a4f9-30ca776aba38",
        "parentId" : "a23e9190-4e0e-4f54-a91a-4da4d9724962",
        "authorId" : "7d7c6d70-2454-462c-b7f2-ebce81b40fc3",
        "body" : "@jreback Since the enhancement is to add support for MultiIndex columns in parquet and the check is to handle MultiIndex columns in addition to single-level Index columns, I've added both round-trip and error-on-write tests for both MultiIndexes and single-level Indexes for columns in parquet format.\r\n\r\nDo let me know if the coverage from the added tests are sufficient based on my latest commit - and whether additional tests are needed. :)",
        "createdAt" : "2020-09-14T09:33:37Z",
        "updatedAt" : "2020-11-19T01:05:06Z",
        "lastEditedBy" : "7d7c6d70-2454-462c-b7f2-ebce81b40fc3",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab24628bff72c23c13ff12c3aef944e37cdd179a",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +92,96 @@        # must have value column names for all index levels (strings only)\n        if isinstance(df.columns, MultiIndex):\n            if not all(\n                x.inferred_type in {\"string\", \"empty\"} for x in df.columns.levels\n            ):"
  },
  {
    "id" : "6a84c11d-8fbb-47b5-95bb-9e0a04f2b54c",
    "prId" : 37129,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37129#pullrequestreview-510999732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd5e80f0-6c26-483b-b5e2-bef3ff8e1e6e",
        "parentId" : null,
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "Getting a mypy error here:\r\n```\r\npandas/io/parquet.py:312: error: Incompatible types in assignment (expression has type \"Union[str, Path, IO[Any], IOBase]\", variable has type \"BytesIO\")  [assignment]\r\n```\r\nwhich doesn't make sense because `BytesIO` subclasses `IOBase`",
        "createdAt" : "2020-10-16T19:42:10Z",
        "updatedAt" : "2020-10-21T13:05:23Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      },
      {
        "id" : "fffee840-66fb-4603-b350-890c1bd3d8ab",
        "parentId" : "fd5e80f0-6c26-483b-b5e2-bef3ff8e1e6e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you need to assert that path_or_buf is bytes i think.",
        "createdAt" : "2020-10-17T16:14:47Z",
        "updatedAt" : "2020-10-21T13:05:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "461ffa00-a166-4416-8c92-059cc6cd4b7a",
        "parentId" : "fd5e80f0-6c26-483b-b5e2-bef3ff8e1e6e",
        "authorId" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "body" : "that does it (along with explicitly typing path_or_buf)",
        "createdAt" : "2020-10-17T16:58:08Z",
        "updatedAt" : "2020-10-21T13:05:23Z",
        "lastEditedBy" : "8a5d728c-e241-4a19-b667-385656e4fd50",
        "tags" : [
        ]
      }
    ],
    "commit" : "46bbe2303f9c225f906c7bb12ac980de21260332",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +324,328 @@    if path is None:\n        assert isinstance(path_or_buf, io.BytesIO)\n        return path_or_buf.getvalue()\n    else:\n        return None"
  },
  {
    "id" : "643a7785-ae60-4864-af97-1610288490f4",
    "prId" : 37639,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37639#pullrequestreview-527192081",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4a1db14-933e-4691-9d00-a8677bcbb3c5",
        "parentId" : null,
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "parquet is difficult:\r\n\r\n1. `FastParquetImpl` does not support file handles for writing (`PyArrowImpl` does)\r\n2. `to_parquet` can write multiple files to a folder (a folder cannot be opened)\r\n\r\nI kept mostly the old code but replaced the calls to `get_filepath_or_buffer`.",
        "createdAt" : "2020-11-07T18:17:17Z",
        "updatedAt" : "2020-11-13T06:00:02Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      },
      {
        "id" : "21e80647-5f8b-48ea-8e4e-f06b2582cb69",
        "parentId" : "f4a1db14-933e-4691-9d00-a8677bcbb3c5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add this as a comment here (e.g. about why we are not using get_handle in this particular io reader) (like what you wrote here but comments in the code)",
        "createdAt" : "2020-11-10T13:24:36Z",
        "updatedAt" : "2020-11-13T06:00:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f1fad83f29ac6dd0055221678a9b727050efa81",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +12,16 @@from pandas import DataFrame, get_option\n\nfrom pandas.io.common import get_handle, is_fsspec_url, stringify_path\n\n"
  }
]