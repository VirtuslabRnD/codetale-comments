[
  {
    "id" : "977e03a0-8e66-4ecd-9d96-8f1874ddc13d",
    "prId" : 4770,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76cf13f2-d5ba-4e30-af37-3c430f7459dd",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "(default True)\n",
        "createdAt" : "2013-10-02T11:10:02Z",
        "updatedAt" : "2013-10-03T02:03:27Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "feda49a1-d4d3-49c1-9ee4-8ce66bab775e",
        "parentId" : "76cf13f2-d5ba-4e30-af37-3c430f7459dd",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "I removed the `default your-default-value-here` bc u can see them in the function signature. can put them back if you think that's a bad idea\n",
        "createdAt" : "2013-10-02T13:22:41Z",
        "updatedAt" : "2013-10-03T02:03:27Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "bea34eb10fa5536caf6227dfbbc4744937d5e98f",
    "line" : 552,
    "diffHunk" : "@@ -1,1 +785,789 @@        See :func:`~pandas.read_csv` for details.\n\n    tupleize_cols : bool, optional\n        If ``False`` try to parse multiple header rows into a\n        :class:`~pandas.MultiIndex`, otherwise return raw tuples. Defaults to"
  },
  {
    "id" : "8fdb4674-f391-494f-aa1e-7adaa03edf1a",
    "prId" : 7323,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49b6e71b-74fb-47e4-a353-6d4e6fc597e9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should this default to `None`, then set to `utf-8`? (or just not set and leave as `None`)\n",
        "createdAt" : "2014-06-03T15:36:15Z",
        "updatedAt" : "2014-06-04T14:00:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7af162fd-762a-4846-9fc2-8142cf22920f",
        "parentId" : "49b6e71b-74fb-47e4-a353-6d4e6fc597e9",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "it defaults to `None` (from the `read_html` entry point) because I didn't want to enforce an encoding if `bs4` or `lxml` can parse it from HTML meta information.\n",
        "createdAt" : "2014-06-03T15:38:17Z",
        "updatedAt" : "2014-06-04T14:00:46Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "83cb3a8e-1d30-4b98-96f0-fda5b215f907",
        "parentId" : "49b6e71b-74fb-47e4-a353-6d4e6fc597e9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k...sounds good\n",
        "createdAt" : "2014-06-03T15:41:50Z",
        "updatedAt" : "2014-06-04T14:00:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "341ace642786c8d9268e2995312ccf021b66cf55",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +169,173 @@    functionality.\n    \"\"\"\n    def __init__(self, io, match, attrs, encoding):\n        self.io = io\n        self.match = match"
  },
  {
    "id" : "5eb92393-a6c6-4d5b-930d-a98d35d90209",
    "prId" : 20047,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20047#pullrequestreview-102144408",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfd6dd18-f2fc-4fb4-a45e-d365322b9746",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I didn't add encoding as part of this change but it looks to have been undocumented from whenever it was added. Tossed something in there for now, assuming the sprint this weekend may address in more detail.\r\n\r\nThe docstrings throughout this module I think technically violate the standard by introducing blank space in between each parameter, but figured better left to the sprint than tossing in this change",
        "createdAt" : "2018-03-07T23:57:59Z",
        "updatedAt" : "2018-03-09T16:31:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3093879826e9970eb87581889333b5e639637bc3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +161,165 @@        List of HTML <table> element attributes to match.\n\n    encoding : str\n        Encoding to be used by parser\n"
  },
  {
    "id" : "2380b6ad-2cd6-43f3-8c97-bddbe8f66344",
    "prId" : 20047,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20047#pullrequestreview-102515617",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb5ea93a-490e-4ec1-b716-5bd16656bdef",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a versionadded tag",
        "createdAt" : "2018-03-09T00:56:21Z",
        "updatedAt" : "2018-03-09T16:31:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3093879826e9970eb87581889333b5e639637bc3",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +165,169 @@\n    displayed_only : bool\n        Whether or not items with \"display:none\" should be ignored\n\n        .. versionadded:: 0.23.0"
  },
  {
    "id" : "152f6dee-a3b9-47aa-b1d5-4de33701b896",
    "prId" : 20047,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20047#pullrequestreview-102515617",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8501294-b1a9-4cfc-a4ba-f430ed80a87e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add this to the attributes list",
        "createdAt" : "2018-03-09T00:56:38Z",
        "updatedAt" : "2018-03-09T16:31:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3093879826e9970eb87581889333b5e639637bc3",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +201,205 @@        * :func:`_parse_tfoot`\n    See each method's respective documentation for details on their\n    functionality.\n    \"\"\"\n"
  },
  {
    "id" : "640c76d1-60c9-42bf-955a-f67a5ca47833",
    "prId" : 20293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20293#pullrequestreview-102920610",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "861317dc-1791-4b1c-8896-12eb2afe69ec",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This conditional is required for Py27 compat - in Python3 you can simply provide a call to urlopen on self.io directly as an argument to parse (i.e. without explicitly using the context manager)",
        "createdAt" : "2018-03-12T04:16:13Z",
        "updatedAt" : "2018-03-13T23:39:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "50d072dbdce2bd44d1b83044743c1e511f7c1f25",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +609,613 @@        try:\n            if _is_url(self.io):\n                with urlopen(self.io) as f:\n                    r = parse(f, parser=parser)\n            else:"
  },
  {
    "id" : "3c369bec-8f05-459f-a7d5-70479c43b975",
    "prId" : 20293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20293#pullrequestreview-102921118",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "566dbcd2-eb57-4fb9-925c-6433b6f637c5",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This is a change in behavior giving lxml a little more power to work through malformed HTML. May or may not be acceptable (see other comments)",
        "createdAt" : "2018-03-12T04:23:03Z",
        "updatedAt" : "2018-03-13T23:39:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "50d072dbdce2bd44d1b83044743c1e511f7c1f25",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +605,609 @@        from lxml.html import parse, fromstring, HTMLParser\n        from lxml.etree import XMLSyntaxError\n        parser = HTMLParser(recover=True, encoding=self.encoding)\n\n        try:"
  },
  {
    "id" : "4d49378c-2a82-4f22-aba0-94191f1fcc83",
    "prId" : 20293,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20293#pullrequestreview-102921716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3e0f774-5cfd-4991-9eca-451f1f90c24e",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Because `_parse_td` with this parser doesn't really differentiate between `td` and `th` elements it was incorrectly parsing headers for things like `spam.html` where `td` and `th` elements are intermixed in the header. Hence to make the parsing more robust and pass the tests, I added an initial search for `th` elements before falling back to the existing behavior.\r\n\r\nEven with that I'd argue it's confusing that `_parse_td` is implemented to return `td` and `th` elements and should be refactored to more clearly delineate, but I am trying to minimize behavior change with this PR",
        "createdAt" : "2018-03-12T04:31:10Z",
        "updatedAt" : "2018-03-13T23:39:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "50d072dbdce2bd44d1b83044743c1e511f7c1f25",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +649,653 @@        if thead:\n            # Grab any directly descending table headers first\n            ths = thead[0].xpath('./th')\n            if ths:\n                cols = [_remove_whitespace(x.text_content()) for x in ths]"
  },
  {
    "id" : "fdf3cd31-2ed7-427c-9433-69ab1462d12e",
    "prId" : 21487,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21487#pullrequestreview-134057588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15ecd193-121c-472c-96b7-999816f3f79c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "aren't these the same as in the super class?",
        "createdAt" : "2018-06-15T16:36:21Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d56aac69-166a-4753-b076-6ea08c008707",
        "parentId" : "15ecd193-121c-472c-96b7-999816f3f79c",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I thought this too on initial glance but the attribute of `obj` used to determine equality differs across implementations. An alternate approach could be to make that attribute a property that the subclasses need to implement, though not sure that is that much cleaner",
        "createdAt" : "2018-06-15T16:43:54Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d01ba594-08b6-4942-9f06-cab8a2e7ed59",
        "parentId" : "15ecd193-121c-472c-96b7-999816f3f79c",
        "authorId" : "118d302a-504a-4e64-ba06-999c7b546b21",
        "body" : "My answer is either \"no\" or \"I don't understand the question\" :).\r\n\r\nBut I did notice and nix `_contains_tag()`, which did not belong. So thanks for focusing here :).",
        "createdAt" : "2018-06-15T16:47:37Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "118d302a-504a-4e64-ba06-999c7b546b21",
        "tags" : [
        ]
      },
      {
        "id" : "9ca753af-c8a8-4473-9a6e-171348445ee4",
        "parentId" : "15ecd193-121c-472c-96b7-999816f3f79c",
        "authorId" : "118d302a-504a-4e64-ba06-999c7b546b21",
        "body" : "The bizarre inheritance used in this module makes \"node-like\" values different across implementations. It isn't duck-typing: they're completely different beasts. That's what it was like before I started this pull request.",
        "createdAt" : "2018-06-15T17:17:46Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "118d302a-504a-4e64-ba06-999c7b546b21",
        "tags" : [
        ]
      },
      {
        "id" : "bd37b0f2-263a-4092-94d6-3fc7433d31c8",
        "parentId" : "15ecd193-121c-472c-96b7-999816f3f79c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok happy to take follow-ups to make this simpler / easier for implementation.",
        "createdAt" : "2018-07-03T15:45:14Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fd863bb3611093aefcda7e0f16573d77a3190d4",
    "line" : 499,
    "diffHunk" : "@@ -1,1 +689,693 @@        return tables\n\n    def _equals_tag(self, obj, tag):\n        return obj.tag == tag\n"
  },
  {
    "id" : "eba078e6-b56d-40c4-a0d2-c03fd47c676c",
    "prId" : 21487,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21487#pullrequestreview-129321630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c843927d-b184-4a2e-a313-84a7dfc1ebb5",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Thanks for the comment before about iteration. Can you help point me to where `remainder` first gets values populated for it? I'm still somewhat concerned about the number of mutations done to that variable. \r\n\r\nI have the feeling some of this can be better and more safely expressed using enumerate but direction on where to begin with this would be helpful",
        "createdAt" : "2018-06-15T17:36:22Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "bf0f1681-b565-43cc-bc2e-02f0b4f2167e",
        "parentId" : "c843927d-b184-4a2e-a313-84a7dfc1ebb5",
        "authorId" : "118d302a-504a-4e64-ba06-999c7b546b21",
        "body" : "`remainder` is initialized on line 447 and flipped with `next_remainder` on line 485.\r\n\r\nIt's valid to worry about an evil web page forcing lots of `remainder` mutations ... to a point. If I were generating a website to foil Pandas, here's what I'd do:\r\n\r\n```html\r\n<table>\r\n  <tr>\r\n    <td colspan=\"2147483647\">This will crash your puny parser.</td>\r\n  </tr>\r\n</table>\r\n```\r\n\r\nI don't expect this to spin forever because of mutations: I expect it to crash with out-of-memory as it grows an enormous list.\r\n\r\nReal-world tables will be fine. Usually colspan/rowspan are only in header cells, and there are rarely many items here.\r\n\r\nBig-O analysis: for a table with `N` output cells (N = WxH), each `.pop(0)` generates a cell. That means there are at most `N` list-removals, meaning at most `N` list-insertions. Each insertion is `O(1)` but each removal is `O(W)`. (According to https://wiki.python.org/moin/TimeComplexity, list pop is O(k).) That removal is the slowest operation, so running time is `O(NW)`.\r\n\r\nShall I switch to a `collection.deque` to make it `O(N)`?",
        "createdAt" : "2018-06-15T19:50:12Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "118d302a-504a-4e64-ba06-999c7b546b21",
        "tags" : [
        ]
      },
      {
        "id" : "5f25bfa3-e619-4f6d-a0c2-15e07ba4af73",
        "parentId" : "c843927d-b184-4a2e-a313-84a7dfc1ebb5",
        "authorId" : "118d302a-504a-4e64-ba06-999c7b546b21",
        "body" : "Incidentally: I, too, started by writing `enumerate()`. But that fell apart. The index of a cell in the output depends on two inputs: both `td`'s index in `row` and the number of items in `remainder` that pre-empt it.\r\n\r\nAn alternate strategy is be to make `remainder` a list of mostly-`None`, sometimes-tuple values and modify them in-place. That, too, would be `O(N)` ... but it wouldn't involve as many allocations.",
        "createdAt" : "2018-06-15T19:55:09Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "118d302a-504a-4e64-ba06-999c7b546b21",
        "tags" : [
        ]
      },
      {
        "id" : "94043c20-f9a9-47b3-af38-cc5b3f2b55f4",
        "parentId" : "c843927d-b184-4a2e-a313-84a7dfc1ebb5",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Have to think through that in more detail. I'm less concerned about the choice of container; I just feel like there's a more readable and concise way to approach this that would be easier for future contributors / maintainers to use",
        "createdAt" : "2018-06-15T21:26:43Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fd863bb3611093aefcda7e0f16573d77a3190d4",
    "line" : 361,
    "diffHunk" : "@@ -1,1 +455,459 @@                # Append texts from previous rows with rowspan>1 that come\n                # before this <td>\n                while remainder and remainder[0][0] <= index:\n                    prev_i, prev_text, prev_rowspan = remainder.pop(0)\n                    texts.append(prev_text)"
  },
  {
    "id" : "5b8a01a0-e706-400f-aad0-3f50860c097d",
    "prId" : 21487,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21487#pullrequestreview-129337688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f17e6e6-5954-4818-be94-9b753e0515ea",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think this can be simplified in one of two ways:\r\n\r\n1. Simply use `td.get('rowspan', 1)` if td allows for that in both implementations\r\n2. Move the implementation of `_attr_getter` into the base class\r\n\r\nFor point 2 above it looks like the subclasses both have the same implementation so it would be easier to just move to the base class",
        "createdAt" : "2018-06-15T21:28:48Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "cac279c9-1352-4622-b1dc-41df98a7d036",
        "parentId" : "5f17e6e6-5954-4818-be94-9b753e0515ea",
        "authorId" : "118d302a-504a-4e64-ba06-999c7b546b21",
        "body" : "Okay -- pulled up to the base class (though that seems strange to me)",
        "createdAt" : "2018-06-15T22:53:31Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "118d302a-504a-4e64-ba06-999c7b546b21",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fd863bb3611093aefcda7e0f16573d77a3190d4",
    "line" : 371,
    "diffHunk" : "@@ -1,1 +465,469 @@                # Append the text from this <td>, colspan times\n                text = _remove_whitespace(self._text_getter(td))\n                rowspan = int(self._attr_getter(td, 'rowspan') or 1)\n                colspan = int(self._attr_getter(td, 'colspan') or 1)\n"
  },
  {
    "id" : "695aa3d0-612d-481a-832f-f2f67498c4e8",
    "prId" : 21487,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21487#pullrequestreview-130834331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0def9759-4730-4446-96b0-cca485989697",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Conceptually makes sense but is this comment necessary? We aren't enforcing that row be of a certain tag",
        "createdAt" : "2018-06-21T03:30:58Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d71cdd8b-e502-47e4-86ef-6ebb477afd11",
        "parentId" : "0def9759-4730-4446-96b0-cca485989697",
        "authorId" : "118d302a-504a-4e64-ba06-999c7b546b21",
        "body" : "It is nonsensical that `_parse_td()` be called with a `thead` element, because it is nonsensical that a `thead` element contain `td` or `th` children. The `_parse_td` comment says parameter is a DOM `<tr>` node.\r\n\r\nIt's an ugly hack. I think that nonsense deserves a comment.",
        "createdAt" : "2018-06-21T14:11:52Z",
        "updatedAt" : "2018-07-05T17:45:52Z",
        "lastEditedBy" : "118d302a-504a-4e64-ba06-999c7b546b21",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fd863bb3611093aefcda7e0f16573d77a3190d4",
    "line" : 489,
    "diffHunk" : "@@ -1,1 +654,658 @@\n    def _parse_td(self, row):\n        # Look for direct children only: the \"row\" element here may be a\n        # <thead> or <tfoot> (see _parse_thead_tr).\n        return row.xpath('./td|./th')"
  }
]