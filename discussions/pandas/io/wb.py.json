[
  {
    "id" : "dae5e9f7-b8d6-48ed-ac59-c8d5f1b1b7e4",
    "prId" : 8551,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f00b096-bb24-4aa8-9bce-0ce2ae8abe12",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "didn't realize this was implemented this way. can you use `pd.read_json` here? (should be much simpler)\n",
        "createdAt" : "2014-10-16T17:56:57Z",
        "updatedAt" : "2014-10-27T12:40:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c6d3b0d1-45b0-4aea-9d1f-97fa7ee89cad",
        "parentId" : "1f00b096-bb24-4aa8-9bce-0ce2ae8abe12",
        "authorId" : "9a1012dc-c7e7-40bb-990e-eca1b4833832",
        "body" : "Will take a look.\n",
        "createdAt" : "2014-10-16T22:01:06Z",
        "updatedAt" : "2014-10-27T12:40:11Z",
        "lastEditedBy" : "9a1012dc-c7e7-40bb-990e-eca1b4833832",
        "tags" : [
        ]
      },
      {
        "id" : "71922c67-19fe-4cfc-b0ed-f8e1224d93f1",
        "parentId" : "1f00b096-bb24-4aa8-9bce-0ce2ae8abe12",
        "authorId" : "9a1012dc-c7e7-40bb-990e-eca1b4833832",
        "body" : "I can't get `pd.read_json` to work.  The World Bank responses are of the form:\n\n``` json\n[\n   {\"page\":1,\"pages\":1,\"per_page\":\"25000\",\"total\":4},\n   [\n      {\"indicator\":{\"id\":\"NY.GNS.ICTR.GN.ZS\",\"value\":\"Gross savings (% of GNI)\"},\"country\":\n      {\"id\":\"US\",\"value\":\"United States\"},\"value\":\"17.7933251151429\",\"decimal\":\"0\",\"date\":\"2005\"},\n      {\"indicator\":{\"id\":\"NY.GNS.ICTR.GN.ZS\",\"value\":\"Gross savings (% of GNI)\"},\"country\":\n      {\"id\":\"US\",\"value\":\"United States\"},\"value\":\"17.4456668552402\",\"decimal\":\"0\",\"date\":\"2004\"},\n      {\"indicator\":{\"id\":\"NY.GNS.ICTR.GN.ZS\",\"value\":\"Gross savings (% of GNI)\"},\"country\":\n      {\"id\":\"US\",\"value\":\"United States\"},\"value\":\"17.2580393882146\",\"decimal\":\"0\",\"date\":\"2003\"},\n      {\"indicator\":{\"id\":\"NY.GNS.ICTR.GN.ZS\",\"value\":\"Gross savings (% of GNI)\"},\"country\":\n      {\"id\":\"US\",\"value\":\"United States\"},\"value\":\"17.995555464956\",\"decimal\":\"0\",\"date\":\"2002\"}\n   ]\n]\n```\n\nWhich doesn't fit into any of the orient modes (split / records / index / columns / values) ...because the pagination info.  The original author of the code you referenced, intercepts the data from the pagination info, with the `[1]`.\n\nI got `read_json` to actually parse the json, from a hacked up string, using `orient='records'` but even after I did, I ended up with a data frame which looked like this:\n\n```\n                                      country  date  decimal  \\\n0  {u'id': u'US', u'value': u'United States'}  2005        0   \n1  {u'id': u'US', u'value': u'United States'}  2004        0   \n2  {u'id': u'US', u'value': u'United States'}  2003        0   \n3  {u'id': u'US', u'value': u'United States'}  2002        0   \n\n                                           indicator      value  \n0  {u'id': u'NY.GNS.ICTR.GN.ZS', u'value': u'Gros...  17.793325  \n1  {u'id': u'NY.GNS.ICTR.GN.ZS', u'value': u'Gros...  17.445667  \n2  {u'id': u'NY.GNS.ICTR.GN.ZS', u'value': u'Gros...  17.258039  \n3  {u'id': u'NY.GNS.ICTR.GN.ZS', u'value': u'Gros...  17.995555  \n\n[4 rows x 5 columns]\n```\n\n...which would require manually cleaning up anyway.\n\nIs there something I'm missing about read_json?\n\nIf not, I think we should just leave the original `json.load`\n\nEdit: Ninja edit, meant `orient=records`, not `orient=split`.\n",
        "createdAt" : "2014-10-18T02:53:09Z",
        "updatedAt" : "2014-10-27T12:40:11Z",
        "lastEditedBy" : "9a1012dc-c7e7-40bb-990e-eca1b4833832",
        "tags" : [
        ]
      },
      {
        "id" : "e28ef5a9-83be-41dd-bd4e-6fd1bc069ffd",
        "parentId" : "1f00b096-bb24-4aa8-9bce-0ce2ae8abe12",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "try using json_normalize\n",
        "createdAt" : "2014-10-18T03:20:23Z",
        "updatedAt" : "2014-10-27T12:40:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e2dbdc34-b0fa-4808-b230-d8d2a9dc9de1",
        "parentId" : "1f00b096-bb24-4aa8-9bce-0ce2ae8abe12",
        "authorId" : "9a1012dc-c7e7-40bb-990e-eca1b4833832",
        "body" : "I got json_normalize to work but it takes a dict or list of dicts, so we don't get rid of json.loads.\n\n...I'll push the changes, but IMO it's all more complicated and less readable.\n",
        "createdAt" : "2014-10-18T16:08:16Z",
        "updatedAt" : "2014-10-27T12:40:11Z",
        "lastEditedBy" : "9a1012dc-c7e7-40bb-990e-eca1b4833832",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a7ff40e60fac30cbb7f5444c9b7895791ac2bce",
    "line" : 247,
    "diffHunk" : "@@ -1,1 +202,206 @@            \n    # Parse JSON file\n    data = json.loads(data)[1]\n    country = [x['country']['value'] for x in data]\n    iso_code = [x['country']['id'] for x in data]"
  }
]