[
  {
    "id" : "bb2b316e-3e49-485c-8aa0-4df595034c1e",
    "prId" : 4945,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73146ed9-b21d-4127-8920-e47761fa78e7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this runs or both PythonParser and c-parse?\n",
        "createdAt" : "2013-09-23T22:03:44Z",
        "updatedAt" : "2013-09-24T00:04:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fedb26dc58560189f9a4cbca3e4d5f34f201774a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +234,238 @@        tm.assert_frame_equal(df, expected)\n\n    def test_separator_date_conflict(self):\n        # Regression test for issue #4678: make sure thousands separator and\n        # date parsing do not conflict."
  },
  {
    "id" : "8f153189-a415-4bb2-8f7b-a1e8c673f711",
    "prId" : 4955,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "so this one actually needs to work on Python 2 as well. I know it's a little annoying to do that.  Also, can this handle non-utf8?\n",
        "createdAt" : "2013-09-28T15:52:52Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "7f492d10-c7b0-4c35-9581-2f633ef24a26",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "body" : "I just copied it from `test_BytesIO_input` line 2103 which also skips it.\n",
        "createdAt" : "2013-09-28T16:00:03Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "tags" : [
        ]
      },
      {
        "id" : "9fdd4034-8b1f-46d7-9e89-cbdf3ebffcba",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "body" : "And also the problem is that in Python2 i don't get a unicode string from the reader even if I pass the encoding. I think this is a bug on the reader :-/\n",
        "createdAt" : "2013-09-28T16:05:03Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "tags" : [
        ]
      },
      {
        "id" : "21698a80-7331-4b93-8c87-8f376c65c9a4",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "I'm sure this isn't the case, but are you sure it isn't because we've missed a function call somewhere that was supposed to get an encoding?\n",
        "createdAt" : "2013-09-28T16:06:10Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "640de32d-5601-4e35-a8af-e23bed3c6fb4",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "body" : "I'm sure that in the `FixedWidthReader` when I call `next(self.f)` i get `<type 'str'>` :) Is that what I should get?\n",
        "createdAt" : "2013-09-28T16:09:55Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "tags" : [
        ]
      },
      {
        "id" : "5ba7974c-d1ed-4179-9e86-a52e1cf239ce",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "@alefnula I think that's right. It should always be converted to str at that point in both py3 and py2. I'm not great with unicode in Python 2.  Anyways, can you try the input on master? If it doesn't come out how you expect in Python 2, we'll create a separate issue about it. Please leave something like `# TODO: Get this working with Python 2` within the `test_variable_width_unicode` body. That way it'll show up to look back later on.\n",
        "createdAt" : "2013-09-28T16:13:14Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "47334710-4a40-4deb-8c5f-871692a2839c",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "body" : "@jtratner \"It should always be converted to str at that point in both py3 and py2.\"\n\nDo you mean: to `str` in py3 and `unicode` in py2 or you mean `str` in py3 and `bytes` in py2 (bytes == str in py2)?\n",
        "createdAt" : "2013-09-28T16:18:24Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "tags" : [
        ]
      },
      {
        "id" : "2fa1b46d-a420-4f04-b459-e8b72cd54759",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "as I wrote that, I realized I wasn't sure. It ought to be unicode in py2.\n",
        "createdAt" : "2013-09-28T16:19:12Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "7baaa48d-926b-48f5-9e68-57496432f6e6",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "body" : "Also tried it on master I get `str` (`bytes`) in py2 not `unicode`.\n",
        "createdAt" : "2013-09-28T16:21:30Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "tags" : [
        ]
      },
      {
        "id" : "e18b7b37-fe59-4fcd-a38a-eba37adc30f0",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "body" : "If I pass a unicode in, it works in both py2 and py3.\n\n``` python\ndef test_variable_width_unicode(self):\n    test = u'''\nשלום שלום\nום   שלל\nשל   ום\n'''.strip('\\r\\n')\n    expected = pd.read_fwf(StringIO(test),\n                           colspecs=[(0, 4), (5, 9)], header=None)\n    tm.assert_frame_equal(expected, read_fwf(StringIO(test),\n                                             header=None))\n```\n",
        "createdAt" : "2013-09-28T16:31:38Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "tags" : [
        ]
      },
      {
        "id" : "1781c02f-1869-40a7-8349-5e1ae59bdf54",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "body" : "@jtratner `parsers.py` line [1282](https://github.com/pydata/pandas/blob/master/pandas/io/parsers.py#L1282)\n\n``` python\nelif compat.PY3 and isinstance(f, compat.BytesIO):\n    from io import TextIOWrapper\n    f = TextIOWrapper(f, encoding=self.encoding)\n```\n\nThis should always be done, not just for PY3. But it brakes a lot of things :-/\n",
        "createdAt" : "2013-09-28T16:38:45Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "tags" : [
        ]
      },
      {
        "id" : "51ead68c-618a-4e19-a33d-945d5b43341e",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "@alefnula there's no equivalent to IOWrapper for Python 2.\n",
        "createdAt" : "2013-09-28T16:49:06Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "4bcca256-dcaa-457d-a54a-371e40ffa57f",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "body" : "@jtratner \n\n```\n$ python\nPython 2.7.5 |Continuum Analytics, Inc.| (default, Jun 28 2013, 22:20:13)\n>>> import io\n>>> io.TextIOWrapper\n<type '_io.TextIOWrapper'>\n```\n\n```\n$ python\nPython 2.6.8 |Continuum Analytics, Inc.| (unknown, Jun 28 2013, 22:26:34)\n>>> import io\n>>> io.TextIOWrapper\n<class 'io.TextIOWrapper'>\n```\n",
        "createdAt" : "2013-09-28T16:53:10Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "tags" : [
        ]
      },
      {
        "id" : "df3c80b8-818b-4f28-a719-ff47e243496d",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "wow, I stand corrected - great! (and apparently it's on python 2.6 as well.  So then it should work if you remove compat.PY3 from there. Plus you could move the TextIOWrapper imports to the top of the file and eliminate the duplication (if any).\n",
        "createdAt" : "2013-09-28T16:56:13Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "3146f717-89f2-4c40-b9be-c5252a1df509",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "but I'm okay with creating a separate issue for this instead so this can be merged.\n",
        "createdAt" : "2013-09-28T16:57:45Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "a24fb024-14df-494a-9a26-0405fa6deed8",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "body" : "@jtratner OK, should I change anything then? Just add a todo? Also the `compat` module is, let's say, not perfect. Ever thought about using `six`?\n",
        "createdAt" : "2013-09-28T17:06:18Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "tags" : [
        ]
      },
      {
        "id" : "49bc4cb5-a77c-45b8-915a-d059a661f6ce",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "@alefnula you don't need to change anything here, probably just open an issue. What specifically is wrong with the compat module? \n",
        "createdAt" : "2013-09-28T17:12:21Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "75ad77dd-bc45-4d42-94cc-69181c37478d",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "body" : "@jtratner My mistake. I was confused by some things, but then I realised why are they there. So just forget the last comment. :) The `compat` is not the problem. The problem is that the `StringIO` is he same as `BytesIO` for 2.X, but the `six` does the same thing, so there is no clear distinction between a `unicode` and a `bytes` stream. I would always use `io.StringIO` and `io.BytesIO` everywhere. But that would be a **HUGE** change in the whole `pandas` library and a lot of work...\n",
        "createdAt" : "2013-09-28T17:25:47Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "tags" : [
        ]
      },
      {
        "id" : "71ca5c6e-e1da-4cce-ae5e-c417deca9e48",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "@alefnula yeah, I mean half the module is copied over from six (with explicit attribution) :). The major difference is that it doesn't use the `moves` namespace.\n\nI'm really surprised because I didn't even realize the `io` module was available in Python 2.X. Does TextIOWrapper have the read1 issue that Python 3.2 has?\n\nI don't understand the difference between StringIO and BytesIO in 2.X. Isn't Py2 `str` equivalent to Py 3`bytes` ? (or at least `bytes` is a synonym for `str` in 2.X)\n",
        "createdAt" : "2013-09-28T17:28:40Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "4cf9dab1-1f36-4d83-9f88-69223a910bea",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "body" : "@jtratner I'm not familiar with the `read1` issue.\n\nAnd the problem about the `StringIO` is the following:\n\n``` python\nIn [2]: type(pd.compat.StringIO(u'test').read())\nOut[2]: unicode\n\nIn [3]: type(pd.compat.StringIO('test').read())\nOut[3]: str\n```\n\nIf I get a `StringIO` object I have no idea if I will get bytes or strings from it.\n\nOn the other hand:\n\n``` python\nIn [7]: type(io.StringIO(u'test').read())\nOut[7]: unicode\n\nIn [8]: type(io.StringIO('test').read())\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-8-ec84dbdb83c4> in <module>()\n----> 1 type(io.StringIO('test').read())\n\nTypeError: initial_value must be unicode or None, not str\n```\n",
        "createdAt" : "2013-09-28T17:36:36Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "tags" : [
        ]
      },
      {
        "id" : "4ac0c204-46db-475b-ae54-0bde9e955b17",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "not a huge deal, encountered it in other places. anyways, many many test cases use `StringIO(some_str)` to pass into functions, so we can't really deprecate support for it.\n\nHelp me out here though - why does it actually matter to wrap in Python 2? The issue in Python 3 is that you can't use string methods on bytes, but in Python 2 that's not a problem.  Anyways, we should probably put this in a separate issue so we don't get too sidetracked here.\n",
        "createdAt" : "2013-09-28T17:40:46Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "e042f758-5b6a-40e6-8c9e-89e50edf50d7",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "body" : "@jtratner \"The issue in Python 3 is that you can't use string methods on bytes, but in Python 2 that's not a problem.\"\nThis is not true. Yes, it's true that you can use them, but they **won't** produce a **correct** result. Here is a simple example:\n\n``` python\n>>> s = u'абвгдђежз'\n>>> print s.upper()\nАБВГДЂЕЖЗ\n>>> print s.encode('utf8').upper()\nабвгдђежз\n>>> print s.encode('utf8').upper().decode('utf-8')\nабвгдђежз\n```\n\nThe method wont raises an error, but the result won't be correct. That's why it's important to wrap everything to be unicode. None of the `Series.str` methods would work correctly with python 2 strings if you have unicode data. Example:\n\n``` python\nIn [21]: s1 = pd.Series(['фоо', 'бар', 'баз'])\n\nIn [22]: s2 = pd.Series([u'фоо', u'бар', u'баз'])\n\nIn [23]: s1.str.upper()\nOut[23]:\n0    фоо\n1    бар\n2    баз\ndtype: object\n\nIn [24]: s2.str.upper()\nOut[24]:\n0    ФОО\n1    БАР\n2    БАЗ\ndtype: object\n```\n\nI encountered the same problem when I wrote the column detection for `read_fwf` function. Unless the strings are unicode, I cannot determine the correct widths of the columns for variable byte encodings like `utf-8`.\nYes, of course I can use the encoding and check if the thing I got is `bytes` and then decode it using the encoding, calculate the thing I need, and so on. But that is not DRY. You will have to do that all over the place in every method that does something with strings.\nInstead of that, my proposal is to fix the `PythonParser.__init__` function to create a stream object (`f`) that will **always** return unicode strings, and have the logic **only** in one place. The same thing would apply for the C parser.\n",
        "createdAt" : "2013-09-28T19:49:23Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "tags" : [
        ]
      },
      {
        "id" : "2eea82c1-06c1-4f24-881b-d801b5138505",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "Yes, that's basically what is already the case with Python 3. (you might have to put it in two places because of how things are currently set up). So are you thinking you'd always read StringIO fully (or at least one line) and then handle appropriately (remember there are both cStringIO and StringIO in Python 2)? then after that you could use TextIOWrapper, right?\n",
        "createdAt" : "2013-09-28T19:57:43Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "4d4c6f7b-966f-4ade-b32a-0ae3a3fa0068",
        "parentId" : "3e4964e6-356d-4269-975c-719edce2c5f0",
        "authorId" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "body" : "Actually there are 3 :D - `cStringIO.StringIO` which accepts only `bytes` or strings that can be decoded using the `ascii` encoding, `StringIO.StringIO` that accepts both `bytes` and `str` and returns the same thing it was created with, and `io.StringIO` which accepts only `str` (I'm using the python 3 terminology so `str` == `unicode`).\n\nYes the idea is to create something like the django's `safe_str` method, but `SafeStringIO` that will accept any of them and always emit unicode...\n\nBut I'll create a new issue and we can discuss that there, I'll reference this conversation from there.\n",
        "createdAt" : "2013-09-28T20:09:18Z",
        "updatedAt" : "2013-09-29T20:52:54Z",
        "lastEditedBy" : "c30a0d58-a3f2-43df-ac1a-5fc6e1ba4bd8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f5e5ff9a5643bc535476f2435c7a40570070bcb",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +2315,2319 @@            raise nose.SkipTest('Bytes-related test - only needs to work on Python 3')\n        test = '''\nשלום שלום\nום   שלל\nשל   ום"
  }
]