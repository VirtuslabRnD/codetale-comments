[
  {
    "id" : "5bc2c477-6b7a-44b0-8594-192aa576f7ab",
    "prId" : 4177,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f47421b9-89b1-4986-8eff-bef917a67e2b",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "Is there any way to catch the error here, like below?\n",
        "createdAt" : "2013-07-09T16:15:01Z",
        "updatedAt" : "2013-07-10T13:23:03Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "51b8cee3-50ae-433d-9f8a-cb2458c9ebaa",
        "parentId" : "f47421b9-89b1-4986-8eff-bef917a67e2b",
        "authorId" : "69bb3c84-e6a9-46c9-8328-ad025ce4150d",
        "body" : "Since this test may be run by Travis (with root authentication) or by a user (with authentication provided in a defaults file), there is really only an error to catch if BOTH fail.\n",
        "createdAt" : "2013-07-09T17:01:30Z",
        "updatedAt" : "2013-07-10T13:23:03Z",
        "lastEditedBy" : "69bb3c84-e6a9-46c9-8328-ad025ce4150d",
        "tags" : [
        ]
      },
      {
        "id" : "9bed2145-7abc-42ca-b4cc-f5d345f0bcc9",
        "parentId" : "f47421b9-89b1-4986-8eff-bef917a67e2b",
        "authorId" : "69bb3c84-e6a9-46c9-8328-ad025ce4150d",
        "body" : "...but I'll concede that this approach, equivalent to nest `try` blocks, is inelegant. I couldn't think of a better way, but I'd be glad for a better suggestion.\n",
        "createdAt" : "2013-07-09T17:10:07Z",
        "updatedAt" : "2013-07-10T13:23:03Z",
        "lastEditedBy" : "69bb3c84-e6a9-46c9-8328-ad025ce4150d",
        "tags" : [
        ]
      },
      {
        "id" : "04c8bcb6-325c-443d-85f8-728427bfd6db",
        "parentId" : "f47421b9-89b1-4986-8eff-bef917a67e2b",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "i don't mind nested try blocks, but they can get ugly and are hard to follow given significant nesting. i just twitch a little when i see `except:`, it's not that it's not elegant it's that it hides errors\n",
        "createdAt" : "2013-07-09T17:12:27Z",
        "updatedAt" : "2013-07-10T13:23:03Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "f26b21078743a575641e5e2a5ac5ee9ea10404db",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +252,256 @@            self.db = MySQLdb.connect(host='localhost', user='root', passwd='',\n                                    db='pandas_nosetest')\n        except:\n            pass\n        else:"
  },
  {
    "id" : "6af3be5f-9d2e-47ea-a751-ac4d17418743",
    "prId" : 6735,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b3382f6-6a3b-4ed5-81d7-218199e36ef9",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "what's the benefit to changing the naming here? Not a big deal, just might be nice to enumerate the reason\n",
        "createdAt" : "2014-03-30T05:17:27Z",
        "updatedAt" : "2014-04-14T11:44:13Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "9c3ada58-83a0-49b7-8cba-6ff0d196f7ab",
        "parentId" : "5b3382f6-6a3b-4ed5-81d7-218199e36ef9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "To be consistent with other places in pandas (eg hdf uses 'index/level_0/1' I think, and I am now following the names that are given in `reset_index`). As far as I know this is the only place where `pandas_index` is used. It is also new (in 0.13 writing the index was not included in to_sql), so not really changing the behaviour for the user. See also https://github.com/pydata/pandas/pull/6642#issuecomment-37738409 for some discussion.\n",
        "createdAt" : "2014-03-30T09:16:51Z",
        "updatedAt" : "2014-04-14T11:44:13Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "18bd0d64bf1fcdc7e86e743332dab29e9a155909",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +480,484 @@        sql.to_sql(temp_frame, 'test_index_label', self.conn)\n        frame = sql.read_table('test_index_label', self.conn)\n        self.assertEqual(frame.columns[0], 'index')\n\n        # specifying index_label"
  },
  {
    "id" : "560b8f8a-54fc-4231-b19f-f6665bb87fff",
    "prId" : 6875,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14b88238-93ce-464c-80fe-46cd86a670d3",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you put this here as 'normal' comments (with some `#`)? \n",
        "createdAt" : "2014-04-12T15:59:08Z",
        "updatedAt" : "2014-04-13T18:38:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "977ac8e8-a27e-4ecf-aeba-a5201d3e9279",
        "parentId" : "14b88238-93ce-464c-80fe-46cd86a670d3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "To be clear: it is super that you put docstrings, certainly. But for some reason, when you run the test suite it displays the docstring if there is any, and you have a better overview when it uses just the name of the test functions, so that's is the reason.\n",
        "createdAt" : "2014-04-12T16:01:18Z",
        "updatedAt" : "2014-04-13T18:38:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c126dedd3a74de01e3bc34df804848679062cf5",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +526,530 @@        is closed between the writing and reading (as in many real\n        situations).\n        \"\"\"\n\n        self._load_test2_data()"
  },
  {
    "id" : "553c06b8-cefd-4936-a039-66354b00e944",
    "prId" : 7952,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "614d2c92-abf3-4b9e-9b4e-d6a2a35e6a3d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do you have a test which raises in mysql/sqlite? (and checks the non-suppor error)\n",
        "createdAt" : "2014-08-29T20:29:46Z",
        "updatedAt" : "2014-08-31T22:05:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "73339f48-8b12-4c46-bf53-c1b56f47a94a",
        "parentId" : "614d2c92-abf3-4b9e-9b4e-d6a2a35e6a3d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "For now, I don't check or catch anything here in pandas, but just let sqlalchemy (or the underlying dbapi driver) do the work.\n\nSo for sqlite, using `df.to_sql('test', engine_sqlite, schema='other')` gives you `OperationalError: (OperationalError) unknown database \"other\" 'PRAGMA \"other\".ta\nble_info(\"test\")' ()`\n\nFor mysql, it actually does work. Mysql does not have a distinct 'schema' concept, but schema is actually some kind of alias for table. So using `schema` with mysql just accesses other database tables than the one the connection/engine was set-up with.\n",
        "createdAt" : "2014-08-29T21:06:55Z",
        "updatedAt" : "2014-08-31T22:05:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c7c49772-b4b9-46e4-8ce1-266eb6506e42",
        "parentId" : "614d2c92-abf3-4b9e-9b4e-d6a2a35e6a3d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "But as it are not errors raised in pandas, I don't test for them. \n",
        "createdAt" : "2014-08-29T21:08:37Z",
        "updatedAt" : "2014-08-31T22:05:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e90ba311a951a58966931060f4cf69f55572c53",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +1215,1219 @@\n    def test_schema_support(self):\n        # only test this for postgresql (schema's not supported in mysql/sqlite)\n        df = DataFrame({'col1':[1, 2], 'col2':[0.1, 0.2], 'col3':['a', 'n']})\n"
  },
  {
    "id" : "2345f30e-a920-47a4-a297-ca4a35012137",
    "prId" : 8022,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d46ed240-f081-4786-9d49-69bea3fb1117",
        "parentId" : null,
        "authorId" : "002fe2e0-eafa-49d2-9208-6fd30f14d6b0",
        "body" : "This is unrelated, but I changed this because I think it is a bug --- assert_frame_equal does not take an error message argument.\n",
        "createdAt" : "2014-08-15T20:05:06Z",
        "updatedAt" : "2014-08-15T21:16:49Z",
        "lastEditedBy" : "002fe2e0-eafa-49d2-9208-6fd30f14d6b0",
        "tags" : [
        ]
      },
      {
        "id" : "011c2bc8-c1f0-4c9c-b822-2d7094046996",
        "parentId" : "d46ed240-f081-4786-9d49-69bea3fb1117",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "yep, indeed, good catch\n",
        "createdAt" : "2014-08-15T20:28:37Z",
        "updatedAt" : "2014-08-15T21:16:49Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d83aa2bb8ed661deec49f05a9e00081a575faed",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +651,655 @@        iris_frame2 = sql.read_sql(\n            \"SELECT * FROM iris\", self.conn)\n        tm.assert_frame_equal(iris_frame1, iris_frame2)\n\n        iris_frame1 = sql.read_sql_table('iris', self.conn)"
  },
  {
    "id" : "f1aa2505-34fd-43fe-9c51-80840bbef975",
    "prId" : 8232,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12ffa217-aa73-4224-b008-6ae7423aeeca",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Was this not working? (I mean, the tests passed now. Is there a reason they don't pass anymore?)\n",
        "createdAt" : "2014-09-12T20:59:06Z",
        "updatedAt" : "2014-09-15T08:33:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8e78f5f2-13d5-4c87-b6df-6102b2339ed2",
        "parentId" : "12ffa217-aa73-4224-b008-6ae7423aeeca",
        "authorId" : "002fe2e0-eafa-49d2-9208-6fd30f14d6b0",
        "body" : "Previous `get_schema` --- which was a different code base --- did not escape column names as sqlalchemy-generated SQL statements do.\n",
        "createdAt" : "2014-09-12T22:14:00Z",
        "updatedAt" : "2014-09-15T08:33:08Z",
        "lastEditedBy" : "002fe2e0-eafa-49d2-9208-6fd30f14d6b0",
        "tags" : [
        ]
      },
      {
        "id" : "15a77898-cdc5-4608-9cdb-675ee139ac36",
        "parentId" : "12ffa217-aa73-4224-b008-6ae7423aeeca",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "ah, yes, it is in checking of the create statement. I thought it was in running code. OK, but not problem then.\n",
        "createdAt" : "2014-09-12T22:18:12Z",
        "updatedAt" : "2014-09-15T08:33:08Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "5065232e16b88558a891d72e35796a6f60ba6264",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1555,1559 @@        create_sql = sql.get_schema(frame, 'test', 'sqlite', keys=['A', 'B'],)\n        lines = create_sql.splitlines()\n        self.assertTrue('PRIMARY KEY ([A],[B])' in create_sql)\n        cur = self.db.cursor()\n        cur.execute(create_sql)"
  },
  {
    "id" : "935cfa70-beee-475c-b7f4-7b882d9bb26c",
    "prId" : 8278,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "260d3343-1b1a-40f0-bdab-0f282a0ebd6f",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is not needed anymore I think? (TestMySQLLegacy inherits from TestSQLiteLegacy)\n",
        "createdAt" : "2014-09-16T10:25:30Z",
        "updatedAt" : "2014-09-16T21:08:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "30c66798ac6aa1869a7a1239709483313eda72dd",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1096,1100 @@\n    def test_transactions(self):\n        self._transaction_test()\n\nclass TestSQLiteAlchemy(_TestSQLAlchemy):"
  }
]