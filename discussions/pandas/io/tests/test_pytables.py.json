[
  {
    "id" : "05ef30ad-4986-4eb7-9e64-5ec35875c175",
    "prId" : 4482,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d550f19-4654-4c96-9de1-a5ba353b5c3e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@cpcloud I guess will just leave this in here...and see what happens\n",
        "createdAt" : "2013-08-07T15:49:59Z",
        "updatedAt" : "2013-08-07T23:57:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e78cae754853300f28c492912878c70ecd4073c3",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +2423,2427 @@                expected = df[df.x != 'none']\n                assert_frame_equal(result,expected)\n            except Exception as detail:\n                print(\"[{0}]\".format(detail))\n                print(store)"
  },
  {
    "id" : "e86dfc3a-f667-46e5-a35a-a3b79445d803",
    "prId" : 6968,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "326f16ad-49e3-4454-9fba-fb0f6770adeb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do these tz's actually store differently? (except that they use the dateutil tzs of course)\n",
        "createdAt" : "2014-05-23T16:05:18Z",
        "updatedAt" : "2014-06-03T14:25:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b57dbd0e-4823-448a-8891-42829729d2d4",
        "parentId" : "326f16ad-49e3-4454-9fba-fb0f6770adeb",
        "authorId" : "5a947098-5ab4-4c2e-9a62-26cc13b35333",
        "body" : "`dateutil` doesn't distinguish DST vs STD with different timezone objects, so I think all five times will store with the same tz. `pytz` definitely does distinguish though so the test has value.\n\nThis is just a duplicate of the original test (test_append_with_timezones_pytz) but using `dateutil` not `pytz` to ensure we cover the same areas of the code for both timezone libraries.\n",
        "createdAt" : "2014-05-28T09:36:31Z",
        "updatedAt" : "2014-06-03T14:25:23Z",
        "lastEditedBy" : "5a947098-5ab4-4c2e-9a62-26cc13b35333",
        "tags" : [
        ]
      }
    ],
    "commit" : "e420855f1aa27bf8c9a751ef26a29652c7b0e513",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +2083,2087 @@\n            _maybe_remove(store, 'df_tz')\n            df = DataFrame(dict(A=[ Timestamp('20130102 2:00:00', tz=dateutil.tz.gettz('US/Eastern')) + timedelta(hours=1) * i for i in range(5) ]))\n            store.append('df_tz', df, data_columns=['A'])\n            result = store['df_tz']"
  },
  {
    "id" : "188e5410-de49-49bd-9f08-2efbf7566cd9",
    "prId" : 10098,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d1ef5f2-c5f9-47c9-929c-0f9f5307d180",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "for the ones that should run, I would then select out say the first element and make sure you are getting a non-zero length frame, e.g. \n\n```\nresult = pd.read_hdf(path,'df',where=\"index = [{0}]\".format(df.index[0]))\n```\n",
        "createdAt" : "2015-05-13T11:35:19Z",
        "updatedAt" : "2015-06-06T02:14:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f258bd05-281d-4998-a1be-4476042f56dd",
        "parentId" : "4d1ef5f2-c5f9-47c9-929c-0f9f5307d180",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update to my comments?\n",
        "createdAt" : "2015-06-05T21:39:23Z",
        "updatedAt" : "2015-06-06T02:14:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b187a3b4-4682-42d3-a75d-334cadbfb2db",
        "parentId" : "4d1ef5f2-c5f9-47c9-929c-0f9f5307d180",
        "authorId" : "c4d3325c-d2b0-4acc-9a38-07f2d6877dfc",
        "body" : "Sorry, I'm not following. Do you want me address this comment above? I thought that I did so two lines down...\n",
        "createdAt" : "2015-06-05T22:19:25Z",
        "updatedAt" : "2015-06-06T02:14:30Z",
        "lastEditedBy" : "c4d3325c-d2b0-4acc-9a38-07f2d6877dfc",
        "tags" : [
        ]
      },
      {
        "id" : "85bede13-f429-4afb-a346-26818c9a16a5",
        "parentId" : "4d1ef5f2-c5f9-47c9-929c-0f9f5307d180",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ahh, didn't see that\n",
        "createdAt" : "2015-06-05T22:58:02Z",
        "updatedAt" : "2015-06-06T02:14:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "33cfaeae47bfccb13a6d7a1420835b4a9d610902",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +4665,4669 @@        for index in types_should_run:\n            df = DataFrame(np.random.randn(10, 2), columns=index(2))\n            with ensure_clean_path(self.path) as path:\n                df.to_hdf(path, 'df', format='table', data_columns=True)\n                result = pd.read_hdf(path, 'df', where=\"index = [{0}]\".format(df.index[0]))"
  },
  {
    "id" : "022e5b0c-0413-44fa-826c-52c0d8e4372a",
    "prId" : 10473,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49b969ef-202f-452c-9baf-8a92a7afc7d3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "So if `index=False` this will not raise. So either we need to not allow a `data_columns` for complex at all (e.g. you can check when its creating), or allow it, but have a check when selecting (as you already check on the indexing of it). I think the latter is better, as its not a 'problem' to create them, just select from them / index with them. (e.g. you might want to export the data and data_columns is the only way to specify that you need non-aggregated columns)\n",
        "createdAt" : "2015-07-01T15:50:04Z",
        "updatedAt" : "2015-07-13T11:56:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5b35d2d7-f1df-4707-9668-c2f4779ebb7d",
        "parentId" : "49b969ef-202f-452c-9baf-8a92a7afc7d3",
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "> So if index=False this will not raise. So either we need to not allow a data_columns for complex at all (e.g. you can check when its creating), or allow it, but have a check when selecting (as you already check on the indexing of it). I think the latter is better, as its not a 'problem' to create them, just select from them / index with them. (e.g. you might want to export the data and data_columns is the only way to specify that you need non-aggregated columns)\n\nI agree with the latter as a single point to catch this issue and provide an explanation.\n",
        "createdAt" : "2015-07-02T18:45:55Z",
        "updatedAt" : "2015-07-13T11:56:05Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      }
    ],
    "commit" : "271ae441c1d0256b9c8b61449b21644e39c70cbf",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +4862,4866 @@                       index=list('abcd'))\n        with ensure_clean_store(self.path) as store:\n            self.assertRaises(TypeError, store.append, 'df', df, data_columns=['C'])\n\n    def test_complex_series_error(self):"
  },
  {
    "id" : "11391263-ff87-4baa-ad5b-de6a5e6f7529",
    "prId" : 13010,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36ec0dd7-bea2-4a37-96d1-253852f44e48",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Not sure if this a problem, but these function calls aren't quite equivalent (closed vs. open interval for `random_integers` and `randint` respectively).\n",
        "createdAt" : "2016-04-27T15:08:19Z",
        "updatedAt" : "2016-04-27T17:29:42Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "55501406-b3a4-4b3c-af8f-c57295312cbe",
        "parentId" : "36ec0dd7-bea2-4a37-96d1-253852f44e48",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "they seem the same.\n",
        "createdAt" : "2016-04-27T16:11:15Z",
        "updatedAt" : "2016-04-27T17:29:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c144a9d9-af72-407b-9935-61a2ac28b11b",
        "parentId" : "36ec0dd7-bea2-4a37-96d1-253852f44e48",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "It's a moot point if Travis is still happy, but for reference, they are not equivalent by definition.\n",
        "createdAt" : "2016-04-27T16:14:09Z",
        "updatedAt" : "2016-04-27T17:29:42Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "65ed3afd092908130905e7d86ff1b6b9c2002d00",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +854,858 @@                              dtype=np.uint16),\n                'u32': Series(np.random.randint(0, high=2**30, size=5),\n                              dtype=np.uint32),\n                'u64': Series([2**58, 2**59, 2**60, 2**61, 2**62],\n                              dtype=np.uint64)}, index=np.arange(5))"
  }
]