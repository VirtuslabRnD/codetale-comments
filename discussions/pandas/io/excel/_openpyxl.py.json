[
  {
    "id" : "29f59d9b-d835-4d44-a85f-836319763e50",
    "prId" : 25092,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25092#pullrequestreview-249257800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26c10a1d-d9c9-462e-80cf-479fa660e3e3",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Move this to top level as well",
        "createdAt" : "2019-06-11T12:09:24Z",
        "updatedAt" : "2019-06-28T14:48:45Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3368d956-e475-477b-85eb-da7815b6b156",
        "parentId" : "26c10a1d-d9c9-462e-80cf-479fa660e3e3",
        "authorId" : "e56d2a4d-ce5a-4b87-90bb-9f43725365df",
        "body" : "Are you sure about this? I followed the structure of /`pandas/io/excel/_xlrd.py`, and there all imports of the engine are delayed until the function is called. Wouldn't top level imports cause import errors if `openpyxl` is not installed?",
        "createdAt" : "2019-06-13T07:21:27Z",
        "updatedAt" : "2019-06-28T14:48:45Z",
        "lastEditedBy" : "e56d2a4d-ce5a-4b87-90bb-9f43725365df",
        "tags" : [
        ]
      },
      {
        "id" : "22ce4a24-e5c0-4e7b-a034-3129b18f3ba3",
        "parentId" : "26c10a1d-d9c9-462e-80cf-479fa660e3e3",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea you are correct so keep this where it is. There is a new helper method in panda.common._optional you should use to simplify though (new as of yesterday)",
        "createdAt" : "2019-06-13T10:26:10Z",
        "updatedAt" : "2019-06-28T14:48:45Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dddc8c5aee1ab2d4529b30e516a86fe3db750c12",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +477,481 @@    @property\n    def _workbook_class(self):\n        from openpyxl import Workbook\n        return Workbook\n"
  },
  {
    "id" : "e3fcbf6c-5b3c-4bba-8723-3427dc69647c",
    "prId" : 25092,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25092#pullrequestreview-248131086",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "388ba16f-db7c-4f08-8878-545eca248128",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Same here",
        "createdAt" : "2019-06-11T12:09:30Z",
        "updatedAt" : "2019-06-28T14:48:45Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dddc8c5aee1ab2d4529b30e516a86fe3db750c12",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +481,485 @@\n    def load_workbook(self, filepath_or_buffer: FilePathOrBuffer):\n        from openpyxl import load_workbook\n        return load_workbook(filepath_or_buffer,\n                             read_only=True, data_only=True)"
  },
  {
    "id" : "f6825a17-24dc-429e-8dd7-e2ada08f3d6d",
    "prId" : 25092,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25092#pullrequestreview-255908844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee5dc59a-20d4-4058-a918-8804f465badf",
        "parentId" : null,
        "authorId" : "d591f70f-41bb-4397-b5ea-eebb9b832797",
        "body" : "FWIW, you almost certainly want `keep_links=False` in there as well. On files that include data from other workbooks, Excel creates caches of the relevant worksheets and openpyxl preserves them by default. These can be pretty big and are read into memory and almost certainly irrelevant for Pandas.from_excel(). For an example see openpyxl bug #494.",
        "createdAt" : "2019-06-28T16:54:56Z",
        "updatedAt" : "2019-06-28T16:54:56Z",
        "lastEditedBy" : "d591f70f-41bb-4397-b5ea-eebb9b832797",
        "tags" : [
        ]
      },
      {
        "id" : "ae2351ec-8d61-4c55-82cf-04ca223b2bce",
        "parentId" : "ee5dc59a-20d4-4058-a918-8804f465badf",
        "authorId" : "e56d2a4d-ce5a-4b87-90bb-9f43725365df",
        "body" : "Good suggestion\r\n\r\nfor the record:\r\n - https://openpyxl.readthedocs.io/en/stable/api/openpyxl.reader.excel.html?highlight=keep_links\r\n - https://bitbucket.org/openpyxl/openpyxl/issues/494",
        "createdAt" : "2019-06-28T18:14:29Z",
        "updatedAt" : "2019-06-28T18:14:29Z",
        "lastEditedBy" : "e56d2a4d-ce5a-4b87-90bb-9f43725365df",
        "tags" : [
        ]
      }
    ],
    "commit" : "dddc8c5aee1ab2d4529b30e516a86fe3db750c12",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +483,487 @@        from openpyxl import load_workbook\n        return load_workbook(filepath_or_buffer,\n                             read_only=True, data_only=True)\n\n    @property"
  },
  {
    "id" : "ba997beb-570b-4a45-8af1-a2d19e00ef0d",
    "prId" : 36022,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36022#pullrequestreview-479390143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a649c894-ee4d-4702-998b-b91df8677259",
        "parentId" : null,
        "authorId" : "68476df5-030f-41c1-b3b1-920985d63043",
        "body" : "openpyxl verion < 2.6 would raise import error here.",
        "createdAt" : "2020-09-01T04:23:08Z",
        "updatedAt" : "2020-09-01T16:45:51Z",
        "lastEditedBy" : "68476df5-030f-41c1-b3b1-920985d63043",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d0781a41cb95222a6ded6279e6981f12df207b6",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +489,493 @@\n        from openpyxl.cell.cell import TYPE_BOOL, TYPE_ERROR, TYPE_NUMERIC\n\n        if cell.is_date:\n            return cell.value"
  },
  {
    "id" : "bb04b7db-add9-4592-b969-50b91820e8e7",
    "prId" : 36022,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36022#pullrequestreview-479933782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40b7c2b9-3e3f-461b-80c0-7a40dcac80a1",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Should just be able to move this to module scope",
        "createdAt" : "2020-09-01T15:59:55Z",
        "updatedAt" : "2020-09-01T16:45:51Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ca3c6520-ae54-43c9-bcfe-28544b82df10",
        "parentId" : "40b7c2b9-3e3f-461b-80c0-7a40dcac80a1",
        "authorId" : "68476df5-030f-41c1-b3b1-920985d63043",
        "body" : "Importing this in module scope would cause an error if openpyxl is not installed.",
        "createdAt" : "2020-09-01T16:44:21Z",
        "updatedAt" : "2020-09-01T16:45:51Z",
        "lastEditedBy" : "68476df5-030f-41c1-b3b1-920985d63043",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d0781a41cb95222a6ded6279e6981f12df207b6",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +488,492 @@    def _convert_cell(self, cell, convert_float: bool) -> Scalar:\n\n        from openpyxl.cell.cell import TYPE_BOOL, TYPE_ERROR, TYPE_NUMERIC\n\n        if cell.is_date:"
  },
  {
    "id" : "2a243712-00c6-48ff-b8b7-73952f2287fa",
    "prId" : 37639,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37639#pullrequestreview-528861863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbee41d9-5a3c-4169-aedd-dd6fb51ab9ab",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "'a' doesn't matter here anymore? (or these are now canoncial)",
        "createdAt" : "2020-11-10T13:23:22Z",
        "updatedAt" : "2020-11-13T06:00:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7c4a3cf0-ceae-4b34-b769-17704c0f5eee",
        "parentId" : "fbee41d9-5a3c-4169-aedd-dd6fb51ab9ab",
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "When a user calls `to_excel` they can use 'a' but the `ExcelWriter` base class now replaces 'a' with 'r+'. Previously,  a user provided a string (the excel backend first read it and then wrote to it) if we open the file ourselves it needs to be both readable and writeable. It passes the tests (it didn't work with 'a'), but let me double check that logic :) I think this also means that previously 'a' didn't work when the user provided a file handle that wasn't read+writeable (probably should also add a test case for that).",
        "createdAt" : "2020-11-10T22:37:00Z",
        "updatedAt" : "2020-11-13T06:00:02Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      },
      {
        "id" : "d3e72e30-f2d1-474d-8dad-b221a1024a16",
        "parentId" : "fbee41d9-5a3c-4169-aedd-dd6fb51ab9ab",
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "\"a\" was and is used to let the user choose whether to (over-)write an excel file or whether to append to an existing file. Previously, we didn't open the file (except for `fsspec` URLs) and used mode to use slightly different code paths. Now, we actual open the file, 'a' (and 'w') cannot be used to open the file: 'a' would append bits to the existing file (appending a new sheet are different). 'r+' allows us to first read the entire excel file and then replace its content with the new Excel file. We also need to append 'b' internally as Excel files are opened in binary mode. I added comments about that in `Openxl` and in `ExcelWriter`. It seems that fsspec does not support the mode 'r+': we cannot append to it (technically we could open it first to read and then to write)",
        "createdAt" : "2020-11-12T08:43:56Z",
        "updatedAt" : "2020-11-13T06:00:02Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f1fad83f29ac6dd0055221678a9b727050efa81",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +25,29 @@        # ExcelWriter replaced \"a\" by \"r+\" to allow us to first read the excel file from\n        # the file and later write to it\n        if \"r+\" in self.mode:  # Load from existing workbook\n            from openpyxl import load_workbook\n"
  },
  {
    "id" : "276c9e6f-fcf0-4485-8079-6a52d27687cb",
    "prId" : 39547,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39547#pullrequestreview-582882350",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "204b5a85-e31e-4caf-9f29-0c33fedeb7f9",
        "parentId" : null,
        "authorId" : "03ed8624-dfd2-4639-966d-c8cd042f7235",
        "body" : "With some xlsx files I get an error:\r\n\r\n`max() arg is an empty sequence`\r\n\r\nI am pretty sure this happens when data object is empty",
        "createdAt" : "2021-02-03T10:59:34Z",
        "updatedAt" : "2021-02-08T13:43:33Z",
        "lastEditedBy" : "03ed8624-dfd2-4639-966d-c8cd042f7235",
        "tags" : [
        ]
      },
      {
        "id" : "f20cdce3-9ac4-41d5-b13f-f92c8460fbb7",
        "parentId" : "204b5a85-e31e-4caf-9f29-0c33fedeb7f9",
        "authorId" : "03ed8624-dfd2-4639-966d-c8cd042f7235",
        "body" : "I can't share the file but I can tell it starts with empty rows and empty columns.",
        "createdAt" : "2021-02-03T11:00:34Z",
        "updatedAt" : "2021-02-08T13:43:33Z",
        "lastEditedBy" : "03ed8624-dfd2-4639-966d-c8cd042f7235",
        "tags" : [
        ]
      },
      {
        "id" : "4906c46a-6579-4f75-8f75-a6163d770a26",
        "parentId" : "204b5a85-e31e-4caf-9f29-0c33fedeb7f9",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Yep - thanks for catching this!",
        "createdAt" : "2021-02-03T23:03:29Z",
        "updatedAt" : "2021-02-08T13:43:33Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8773c32feed3bae3d64e0f277ef876d93ddab0ea",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +559,563 @@        if version >= \"3.0.0\" and is_readonly and len(data) > 0:\n            # With dimension reset, openpyxl no longer pads rows\n            max_width = max(len(data_row) for data_row in data)\n            if min(len(data_row) for data_row in data) < max_width:\n                empty_cell: List[Scalar] = [\"\"]"
  },
  {
    "id" : "f40e2640-5c2d-48c3-b19e-0271b6a5151f",
    "prId" : 40231,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40231#pullrequestreview-607203514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40524760-73b9-4046-b695-a6036a8c659d",
        "parentId" : null,
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "In what situation is this else block hit?",
        "createdAt" : "2021-03-07T13:56:15Z",
        "updatedAt" : "2021-04-21T19:55:20Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "8a459ed9-3a0b-4b0f-af4d-dd2eeb05e92f",
        "parentId" : "40524760-73b9-4046-b695-a6036a8c659d",
        "authorId" : "a7f426e2-d5bb-4f2c-998c-ae07ff11555f",
        "body" : "This is hit if we write to the same sheet multiple times with the same write mode writer. E.g.\r\n\r\n```python\r\nimport pandas as pd\r\nimport io\r\n\r\ndf1 = pd.DataFrame({\r\n    \"col1\": [\"apple\", \"banana\"],\r\n    \"col2\": [1, 2],\r\n})\r\n\r\n\r\nexcel = io.BytesIO()\r\n\r\nwith pd.ExcelWriter(excel, engine=\"openpyxl\", mode=\"w\") as writer:\r\n    # write two sheets\r\n    df1.to_excel(writer, sheet_name=\"sheet1\", index=False)\r\n    df1.to_excel(writer, sheet_name=\"sheet1\", index=False, startcol=3)\r\n\r\ndf = pd.read_excel(excel)\r\nprint(df)\r\n\r\n#      col1  col2  Unnamed: 2  col1.1  col2.1\r\n# 0   apple     1         NaN   apple       1\r\n# 1  banana     2         NaN  banana       2\r\n```\r\n\r\nThis is the same across all of the engines and I don't think there is any reason to change it. This situation doesn't need the same set of options because they can easily be replicated in user code.\r\n\r\nIt doesn't look like there are any tests for this though, for any of the engines. Should I add one to `test_writers`?",
        "createdAt" : "2021-03-07T16:40:59Z",
        "updatedAt" : "2021-04-21T19:55:20Z",
        "lastEditedBy" : "a7f426e2-d5bb-4f2c-998c-ae07ff11555f",
        "tags" : [
        ]
      },
      {
        "id" : "8a67721d-ae32-4990-9c4a-922db13f6561",
        "parentId" : "40524760-73b9-4046-b695-a6036a8c659d",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Thanks - makes sense. Yes, a test would be great.",
        "createdAt" : "2021-03-07T16:47:33Z",
        "updatedAt" : "2021-04-21T19:55:20Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "40e6a7fa-5a53-4460-ada3-14a64dde1458",
        "parentId" : "40524760-73b9-4046-b695-a6036a8c659d",
        "authorId" : "a7f426e2-d5bb-4f2c-998c-ae07ff11555f",
        "body" : "Created a separate issue to track this #40289 , I assume that the intention is the same across the engines but the behaviour isn't.",
        "createdAt" : "2021-03-09T09:43:52Z",
        "updatedAt" : "2021-04-21T19:55:20Z",
        "lastEditedBy" : "a7f426e2-d5bb-4f2c-998c-ae07ff11555f",
        "tags" : [
        ]
      }
    ],
    "commit" : "49c4d3be5f5e614d45c63443e152c7b2d06e4b24",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +438,442 @@                    )\n            else:\n                wks = self.sheets[sheet_name]\n        else:\n            wks = self.book.create_sheet()"
  }
]