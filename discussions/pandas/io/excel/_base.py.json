[
  {
    "id" : "5ff88c61-e343-4b27-b4c5-1f0bbca297f3",
    "prId" : 25092,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25092#pullrequestreview-202513443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01f1c85f-e997-4a0a-9b19-66694183ce3d",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What was the requirement for this change?",
        "createdAt" : "2019-02-11T22:20:13Z",
        "updatedAt" : "2019-06-28T14:48:45Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "94dd1324-4a7c-4fe9-ad72-b2e298bf6445",
        "parentId" : "01f1c85f-e997-4a0a-9b19-66694183ce3d",
        "authorId" : "e56d2a4d-ce5a-4b87-90bb-9f43725365df",
        "body" : "sheet.nrows is an abstraction leakage of xlrd, an openpyxl sheet does not have this attribute. I think checking for if there is data is more explicit end general.",
        "createdAt" : "2019-02-12T07:21:34Z",
        "updatedAt" : "2019-06-28T14:48:45Z",
        "lastEditedBy" : "e56d2a4d-ce5a-4b87-90bb-9f43725365df",
        "tags" : [
        ]
      }
    ],
    "commit" : "dddc8c5aee1ab2d4529b30e516a86fe3db750c12",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +423,427 @@            usecols = _maybe_convert_usecols(usecols)\n\n            if not data:\n                output[asheetname] = DataFrame()\n                continue"
  },
  {
    "id" : "ca511b23-b911-48d7-a418-fa39b793eadd",
    "prId" : 25153,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25153#pullrequestreview-199914659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d74100a9-33a3-435c-9550-b46b86e5a07a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Had to move this into the class as it would be a circular reference otherwise, though ideally this shouldn't be required at all in the base class",
        "createdAt" : "2019-02-05T04:50:33Z",
        "updatedAt" : "2019-02-11T00:59:28Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "85f2fe8d2f4c7c39f4744e442fecbbe3e538b1d5",
    "line" : 752,
    "diffHunk" : "@@ -1,1 +750,754 @@    \"\"\"\n\n    from pandas.io.excel._xlrd import _XlrdReader\n\n    _engines = {"
  },
  {
    "id" : "3710d751-b4b9-44d7-9874-06b7294498ad",
    "prId" : 25153,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25153#pullrequestreview-200888051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ca16b0b-3ae8-459d-9312-7f23730ef013",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Why do we need to create this `error` variable?",
        "createdAt" : "2019-02-07T01:28:31Z",
        "updatedAt" : "2019-02-11T00:59:28Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "85f2fe8d2f4c7c39f4744e442fecbbe3e538b1d5",
    "line" : 595,
    "diffHunk" : "@@ -1,1 +593,597 @@                    error = ValueError(\"No engine for filetype: '{ext}'\"\n                                       .format(ext=ext))\n                    raise error\n            cls = get_writer(engine)\n"
  },
  {
    "id" : "0bb908e6-e6ed-4820-9b1f-0454d793cb57",
    "prId" : 26553,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26553#pullrequestreview-243042409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2782085f-d49a-42dd-877a-7547d925a642",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This isn't a user-facing bug but trying to import any of the ExcelWriter subclasses would exhibit rather surprising behavior which causes a test failure when getting rid of the subclassing. For instance:\r\n\r\n```python\r\n>>> from pandas.io.excel._openpyxl import _OpenpyxlWriter\r\n>>> writer = _OpenpyxlWriter('foo.xlsx')\r\n>>> type(writer)\r\n<class 'pandas.io.excel._xlsxwriter._XlsxWriter'>\r\n```\r\n\r\nFrom the comment directly preceding this it appears this condition was backwards, so changed as such",
        "createdAt" : "2019-05-29T05:20:00Z",
        "updatedAt" : "2019-05-29T05:21:24Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "39e4d4e37dca818ce73ed06924a1a79c323bd797",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +592,596 @@        # only switch class if generic(ExcelWriter)\n\n        if cls is ExcelWriter:\n            if engine is None or (isinstance(engine, str) and\n                                  engine == 'auto'):"
  },
  {
    "id" : "bd5b24ca-7e27-4726-85a2-2180246eb19d",
    "prId" : 26736,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26736#pullrequestreview-247385968",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "782167e6-02fe-4069-b4df-84239fe36fa7",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is `io.engine` ever None? Coverage here might be a little suspect for cases like:\r\n\r\n```python\r\nread_excel(ExcelFile(), engine='xlrd')\r\n```\r\n\r\nwhich I suppose should work fine (assuming xlrd is default) but may not be covered here explicitly",
        "createdAt" : "2019-06-08T16:20:21Z",
        "updatedAt" : "2019-06-10T20:55:11Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e8e22e16-ae32-4e08-994c-64857240f0cb",
        "parentId" : "782167e6-02fe-4069-b4df-84239fe36fa7",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Current behaviour is `io.engine` in this line will default to 'xlrd' since that's in the ExcelFile constuctor -> added a test case to make this more explicit.",
        "createdAt" : "2019-06-09T00:20:24Z",
        "updatedAt" : "2019-06-10T20:55:11Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "f52a53aa8bfc9b2a8576bfd1a694743ea133f4af",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +290,294 @@    if not isinstance(io, ExcelFile):\n        io = ExcelFile(io, engine=engine)\n    elif engine and engine != io.engine:\n        raise ValueError(\"Engine should not be specified when passing \"\n                         \"an ExcelFile - ExcelFile already has the engine set\")"
  },
  {
    "id" : "5daadaf2-c36e-4be5-a80c-a4013bcfdfa5",
    "prId" : 30519,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30519#pullrequestreview-338026893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f3fb0ca-db28-43ca-ba01-7bcc4474360e",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is BytesIO absolutely required here? Seems like we could treat str / bytes more consistently",
        "createdAt" : "2020-01-03T00:58:11Z",
        "updatedAt" : "2020-01-03T11:16:23Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "dd429b80-725a-4181-870a-8c573d3401e9",
        "parentId" : "1f3fb0ca-db28-43ca-ba01-7bcc4474360e",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> Seems like we could treat str / bytes more consistently\r\n\r\n@WillAyd : Consistently how?\r\n\r\nI could see some refactoring of this logic (there's a lot of duplicate `load_workbook` code), but in general, I think this addition makes sense.",
        "createdAt" : "2020-01-03T01:34:20Z",
        "updatedAt" : "2020-01-03T11:16:23Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "48dcd472-1842-4895-b7d8-64e052069d09",
        "parentId" : "1f3fb0ca-db28-43ca-ba01-7bcc4474360e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "We aren't wrapping str with an IO object so asking if that's really required for bytes",
        "createdAt" : "2020-01-03T01:35:33Z",
        "updatedAt" : "2020-01-03T11:16:23Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "aca0fef7-3b79-40b4-b11b-5b3d2efe2226",
        "parentId" : "1f3fb0ca-db28-43ca-ba01-7bcc4474360e",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Gotcha.  Thanks for clarifying!\r\n\r\n@ftruzzi : Can you confirm if `BytesIO` is needed or not?\r\n\r\nI suspect the answer is yes, but makes sense to double check for future reference.",
        "createdAt" : "2020-01-03T02:04:58Z",
        "updatedAt" : "2020-01-03T11:16:23Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "eefec2b3-c807-443b-b8a0-4190374d4a58",
        "parentId" : "1f3fb0ca-db28-43ca-ba01-7bcc4474360e",
        "authorId" : "53234afb-349b-4fe3-8dbe-64f563e84041",
        "body" : "Yes I think it is needed. Probably `str` works just for filenames and not for stringified objects?\r\n\r\nI had tried to treat `str` and `buffer` the same way, which could work with xlrd by passing the file contents to the `file_contents` kwarg in `xlrd.open_workbook` but I found no way to do the same thing in openpyxl and other engines.\r\n\r\nAnd just by skipping `BytesIO`, engines complain as they try to open the thing as if it was a file:\r\n```\r\nFile \"...\\xlrd\\__init__.py\", line 111, in open_workbook\r\n    with open(filename, \"rb\") as f:\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x91 in position 14: invalid start byte\r\n```\r\nand\r\n```\r\nopenpyxl.utils.exceptions.InvalidFileException: openpyxl does not support b'.relspk\\x05\\x06\\x00\\x00\\x00\\x00\\x1d\\x00\\x1d\\x00\\xe1\\x07\\x00\\x00\\x8f\\xa9\\x0e\\x00\\x00\\x00' file format, please check you can open it with Excel first. Supported formats are: .xlsx,.xlsm,.xltx,.xltm\r\n```",
        "createdAt" : "2020-01-03T10:42:37Z",
        "updatedAt" : "2020-01-03T11:16:23Z",
        "lastEditedBy" : "53234afb-349b-4fe3-8dbe-64f563e84041",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ab35b2672e2e5b134f63d370a27ec9e90c79850",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +352,356 @@            self.book = self.load_workbook(filepath_or_buffer)\n        elif isinstance(filepath_or_buffer, bytes):\n            self.book = self.load_workbook(BytesIO(filepath_or_buffer))\n        else:\n            raise ValueError("
  },
  {
    "id" : "2e1a12e3-bf1c-4bd7-9bc4-4bcc47276f80",
    "prId" : 32544,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32544#pullrequestreview-372827916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b83f4b0-8ad8-492e-9e28-b13b383c6c5e",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Would it make sense to make this an abstract method, and make child classes be explicit on how the close is performed (including when no close is performed)?",
        "createdAt" : "2020-03-11T12:50:07Z",
        "updatedAt" : "2020-03-12T02:29:39Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "deba416f-c80b-4d92-8e0c-1bb3a34d3041",
        "parentId" : "7b83f4b0-8ad8-492e-9e28-b13b383c6c5e",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "In an earlier version of this PR, this was an abstract method, but the powers that be preferred this.",
        "createdAt" : "2020-03-11T14:35:07Z",
        "updatedAt" : "2020-03-12T02:29:39Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      },
      {
        "id" : "c2b35fec-9632-41e4-b6c4-671439f0912c",
        "parentId" : "7b83f4b0-8ad8-492e-9e28-b13b383c6c5e",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We can't make a new abstract method in a bugfix release. Any child not implementing it would fail when the class is instantiated.",
        "createdAt" : "2020-03-11T14:46:36Z",
        "updatedAt" : "2020-03-12T02:29:39Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8ea7bbe38ee21bf685ef7a5cfc7a96817a56cc1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +367,371 @@        pass\n\n    def close(self):\n        pass\n"
  },
  {
    "id" : "21d3306e-c170-44df-b669-46cc4e618d66",
    "prId" : 32911,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32911#pullrequestreview-401958995",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0dd9e3b-bb15-4a06-849e-b566b8c8f8db",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Rather than this should register the writer globally\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/120e9d9fae447be2e1cea3fd83a1f19501972cca/pandas/core/config_init.py#L576",
        "createdAt" : "2020-04-22T03:45:36Z",
        "updatedAt" : "2020-06-24T12:34:28Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b4c190d4-3f8f-42ac-a4fa-7c802dcf0b99",
        "parentId" : "e0dd9e3b-bb15-4a06-849e-b566b8c8f8db",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "The weird thing is that this stuff does not seem to be used anywhere. Correct me if I'm wrong. I added a similar bit for the OpenOffice file format, but it did not seem to be called/tested anywhere.",
        "createdAt" : "2020-04-28T15:33:44Z",
        "updatedAt" : "2020-06-24T12:34:28Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e2684fd69f51ca7fa8b0b0f98d708054273ccaa",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +851,855 @@            else:\n                ext = os.path.splitext(str(path_or_buffer))[-1]\n                if ext == \".ods\":\n                    engine = \"odf\"\n        if engine not in self._engines:"
  },
  {
    "id" : "c5fd5012-b00c-47e5-a3e8-1e1a9313f241",
    "prId" : 34261,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34261#pullrequestreview-419239200",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccfbf8e6-c806-42be-b671-0bdfdfca1f6c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we type this? (not sure its easy)",
        "createdAt" : "2020-05-27T12:38:57Z",
        "updatedAt" : "2020-05-29T20:47:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b7c7eee3-b28b-441a-995c-a0cb7baddf1b",
        "parentId" : "ccfbf8e6-c806-42be-b671-0bdfdfca1f6c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Out of scope for this PR I think.",
        "createdAt" : "2020-05-27T13:29:24Z",
        "updatedAt" : "2020-05-29T20:47:24Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3c772995-edb6-407c-bb82-5dee6535cc66",
        "parentId" : "ccfbf8e6-c806-42be-b671-0bdfdfca1f6c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure",
        "createdAt" : "2020-05-27T14:01:21Z",
        "updatedAt" : "2020-05-29T20:47:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fda069b8a960a28c75f16a6d42d727a5382562f",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +832,836 @@\n        # Could be a str, ExcelFile, Book, etc.\n        self.io = io\n        # Always a string\n        self._io = stringify_path(io)"
  },
  {
    "id" : "2d3e1d4d-6053-4405-bafc-7e195e4227f8",
    "prId" : 35029,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35029#pullrequestreview-440868878",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "470c01fd-106c-472f-9422-fb67b75803bc",
        "parentId" : null,
        "authorId" : "20e5c7f7-c999-48f9-9390-465c5aeb60bf",
        "body" : "```suggestion\r\nif ext == \".xls\":\r\n    engine = \"xlrd\"\r\n```\r\nGiven that openpyxl doesn't support old `.xls` files.",
        "createdAt" : "2020-06-29T20:04:08Z",
        "updatedAt" : "2020-12-01T22:05:27Z",
        "lastEditedBy" : "20e5c7f7-c999-48f9-9390-465c5aeb60bf",
        "tags" : [
        ]
      },
      {
        "id" : "abda68b6-a659-445c-acf8-98ae0bf125a4",
        "parentId" : "470c01fd-106c-472f-9422-fb67b75803bc",
        "authorId" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "body" : "Added",
        "createdAt" : "2020-07-01T13:28:38Z",
        "updatedAt" : "2020-12-01T22:05:27Z",
        "lastEditedBy" : "92af78be-4738-4bc6-b40e-4ef15a6e8b70",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe10a898b3a0f3d224e9f5635b62dc1e641e5152",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +954,958 @@                if ext == \".ods\":\n                    engine = \"odf\"\n\n            if (\n                import_optional_dependency("
  },
  {
    "id" : "5cd57405-16fe-442e-9f87-4f29e8cfce3d",
    "prId" : 35029,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35029#pullrequestreview-541904240",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bddfa977-7e62-4a25-ba72-b730d2764882",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "obviously as much of the formatting you can do here as well",
        "createdAt" : "2020-12-01T13:46:00Z",
        "updatedAt" : "2020-12-01T22:05:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe10a898b3a0f3d224e9f5635b62dc1e641e5152",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +916,920 @@           used to determine the engine.\n\n           - If ``path_or_buffer`` is an OpenDocument format (.odf, .ods, .odt),\n             then `odf <https://pypi.org/project/odfpy/>`_ will be used.\n           - Otherwise if ``path_or_buffer`` is a bytes stream, the file has the"
  },
  {
    "id" : "c4593a37-2953-4ede-b8de-d582baeb1b4d",
    "prId" : 35974,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35974#pullrequestreview-493081145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76292172-e681-42c5-a0e5-3088115c784f",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this looks like its causing failures on master",
        "createdAt" : "2020-09-22T00:01:09Z",
        "updatedAt" : "2020-09-22T00:01:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "75834f78-3162-4ea5-8893-44a45c2687fe",
        "parentId" : "76292172-e681-42c5-a0e5-3088115c784f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yep: https://dev.azure.com/pandas-dev/pandas/_build/results?buildId=43000&view=logs&j=b1c7b65e-b3ce-541a-7fd5-29b4ba56ce18&t=46ecc253-e38f-5abc-2ea7-addca6b44d0a\r\n\r\n@jbrockmendel can you revert for now and we can reopen",
        "createdAt" : "2020-09-22T01:34:49Z",
        "updatedAt" : "2020-09-22T01:34:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b242ca395110d08667df6779f65a0d63b522a5fe",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +469,473 @@                skiprows_nrows = 0\n            else:\n                skiprows_nrows = len(skiprows)\n\n            data = self.get_sheet_data("
  },
  {
    "id" : "d4c3b5a6-88d8-4e6d-b5a4-03b2ed1f67ce",
    "prId" : 37639,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37639#pullrequestreview-527192081",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d228bd5-b8b0-4f09-ac8f-2c21d79a15ea",
        "parentId" : null,
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "`to_excel` does not take the `storage_options` argument. It would make sense to add it (`read_excel` takes this argument). Probably better to do that in a follow-up PR.",
        "createdAt" : "2020-11-07T19:27:08Z",
        "updatedAt" : "2020-11-13T06:00:02Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      },
      {
        "id" : "7942b221-328f-40a2-b827-30801d77130c",
        "parentId" : "2d228bd5-b8b0-4f09-ac8f-2c21d79a15ea",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yep",
        "createdAt" : "2020-11-10T13:22:39Z",
        "updatedAt" : "2020-11-13T06:00:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f1fad83f29ac6dd0055221678a9b727050efa81",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +732,736 @@        self.handles = IOHandles(path, compression={\"copression\": None})\n        if not isinstance(path, ExcelWriter):\n            self.handles = get_handle(path, mode, is_text=False)\n        self.sheets = {}\n        self.cur_sheet = None"
  },
  {
    "id" : "bf86470e-e83b-4a16-b771-80bb08f837f5",
    "prId" : 38517,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38517#pullrequestreview-560595678",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "497894bb-a977-4ae3-99de-12547d77b9f4",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I could be wrong but the +1 feels a little arbitrary here - what would happen if there were say two consecutive rows in the column with missing data?",
        "createdAt" : "2020-12-31T01:38:56Z",
        "updatedAt" : "2021-01-01T17:01:56Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e6cdae43-56a3-4ab7-a8fd-c658845cf5eb",
        "parentId" : "497894bb-a977-4ae3-99de-12547d77b9f4",
        "authorId" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "body" : "Good point, thanks for bringing this up. Will add another test for this, but I think the +1 is ok here. It's not about handling 1 empty row, the problem was that `offset` was the line containing MI names when index names were present. `offset` is the position from which forward filling logic started, so the names were being used to forward fill missing MI values. The +1 is to make sure that `offset` points to the first line of MI values instead, so forward filling only includes actual values.\r\n",
        "createdAt" : "2020-12-31T02:56:01Z",
        "updatedAt" : "2021-01-01T17:01:56Z",
        "lastEditedBy" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "tags" : [
        ]
      },
      {
        "id" : "379686c0-aeb9-4e2a-990a-75faea474fd4",
        "parentId" : "497894bb-a977-4ae3-99de-12547d77b9f4",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "This explanation (paraphrased) would be good to include as a comment.",
        "createdAt" : "2021-01-01T00:04:07Z",
        "updatedAt" : "2021-01-01T17:01:56Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "12b242e8-6cff-4845-b6b1-8e0f9b8cbfbc",
        "parentId" : "497894bb-a977-4ae3-99de-12547d77b9f4",
        "authorId" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "body" : "Added test for multiple blanks after name and a clearer comment",
        "createdAt" : "2021-01-01T17:03:57Z",
        "updatedAt" : "2021-01-01T17:03:57Z",
        "lastEditedBy" : "5c5b3e8f-505d-4592-b7d0-03291400d46a",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d126e369c4bceb255468690558621e28ced518d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +520,524 @@                # from the first MI value instead of the name\n                if has_index_names:\n                    offset += 1\n\n                # Check if we have an empty dataset"
  },
  {
    "id" : "49caf5cb-d473-4bf9-bf55-9ea1afa9ab15",
    "prId" : 38571,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38571#pullrequestreview-557423131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24749493-6a6d-4ac2-874b-5be5c2735c7d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "What happens if xlrd>=2 is installed (and openpyxl not), then here no engine is assigned? ",
        "createdAt" : "2020-12-22T22:27:08Z",
        "updatedAt" : "2020-12-23T20:37:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1857cfc0-d3dd-40d5-8f80-5933b78c071a",
        "parentId" : "24749493-6a6d-4ac2-874b-5be5c2735c7d",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Thanks - I missed this case. Should be fixed now.",
        "createdAt" : "2020-12-22T23:24:35Z",
        "updatedAt" : "2020-12-23T20:37:34Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "05a6f0963b0516200523ee2b05722f97301b70d0",
    "line" : 279,
    "diffHunk" : "@@ -1,1 +1079,1083 @@                    engine = \"openpyxl\"\n                else:\n                    engine = \"xlrd\"\n\n        if engine == \"xlrd\" and ext != \"xls\" and xlrd_version is not None:"
  },
  {
    "id" : "f479cf44-097a-423a-ab42-167ec9aa51de",
    "prId" : 38710,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38710#pullrequestreview-558972592",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d73db9d-fed1-4c46-b896-1314ffb00d63",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versionadded 1.3",
        "createdAt" : "2020-12-27T22:47:55Z",
        "updatedAt" : "2021-01-01T21:47:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "97fa0a1e-ab81-4c46-a350-510b0c7077ab",
        "parentId" : "7d73db9d-fed1-4c46-b896-1314ffb00d63",
        "authorId" : "8bcc6ff5-c629-4dcd-bcad-c702786f797e",
        "body" : "@jreback this is already part of a versionchanged block(1.2.0). Should i just update the versionchanged to 1.3.0?",
        "createdAt" : "2020-12-28T01:23:38Z",
        "updatedAt" : "2021-01-01T21:47:58Z",
        "lastEditedBy" : "8bcc6ff5-c629-4dcd-bcad-c702786f797e",
        "tags" : [
        ]
      },
      {
        "id" : "154146cb-f3a5-402f-8fd0-e71be926d76a",
        "parentId" : "7d73db9d-fed1-4c46-b896-1314ffb00d63",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can add a version updated 1.2 / alt i guess this is a backport so would be ok for 1.2.1 ",
        "createdAt" : "2020-12-28T01:45:39Z",
        "updatedAt" : "2021-01-01T21:47:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7c9cec8d52ae2c114691a5e1c909931437268aa",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1014,1018 @@           - Otherwise if ``path_or_buffer`` is an xls format,\n             ``xlrd`` will be used.\n           - Otherwise if ``path_or_buffer`` is in xlsb format,\n             `pyxlsb <https://pypi.org/project/pyxlsb/>`_ will be used.\n"
  },
  {
    "id" : "2b2adfbb-23a0-48a9-a058-42482b9a4dda",
    "prId" : 38710,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38710#pullrequestreview-560345923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9281369-fec2-4233-82f1-c1197a960dfc",
        "parentId" : null,
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Let's link to `` `pyxlsb <https://pypi.org/project/pyxlsb/>`_ `` here, as is with the other engines.",
        "createdAt" : "2020-12-31T13:30:12Z",
        "updatedAt" : "2021-01-01T21:47:58Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7c9cec8d52ae2c114691a5e1c909931437268aa",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +125,129 @@         ``xlrd`` will be used.\n       - Otherwise if ``path_or_buffer`` is in xlsb format,\n         ``pyxlsb`` will be used.\n\n         .. versionadded:: 1.3.0"
  },
  {
    "id" : "3ec92eb5-27bb-4f6b-a876-1c384a1999be",
    "prId" : 39586,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39586#pullrequestreview-582979986",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b92b738b-034a-44cb-b450-172827ea27db",
        "parentId" : null,
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "could probably remove the nesting (I assume we always have to use `ext=\"xls\"` even if `engine` is not `None`):\r\n\r\n```py\r\nif xlrd_version is not None and isinstance(path_or_buffer, xlrd.Book):\r\n    ...\r\nelif engine is not None:\r\n    ....\r\n```\r\n\r\n\r\nedit: forget about that, I didn't see the context of the code, there are more blocks in the `engine is None` block.",
        "createdAt" : "2021-02-04T02:18:08Z",
        "updatedAt" : "2021-02-06T01:01:48Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "224d2a18aa87d6551b9f4a9201a713d1f77eafcc",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1073,1077 @@        if engine is None:\n            # Only determine ext if it is needed\n            if xlrd_version is not None and isinstance(path_or_buffer, xlrd.Book):\n                ext = \"xls\"\n            else:"
  },
  {
    "id" : "22375155-8776-4d40-a50e-28f5fe050327",
    "prId" : 40231,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40231#pullrequestreview-616910903",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f5acb8e-9eda-44b4-904f-cae25cac6d55",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is too many options, new /replace / error are fine, overwrite is just to specific here and confusing.",
        "createdAt" : "2021-03-15T14:00:11Z",
        "updatedAt" : "2021-04-21T19:55:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "17df7574-4091-4a02-9769-57506752da09",
        "parentId" : "9f5acb8e-9eda-44b4-904f-cae25cac6d55",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "If the formatting is preserved, then it seems to me this is a commonly desired feature - [SO search](https://stackoverflow.com/search?q=pandas+excel+template&searchOn=3). I've wanted to use this in my own work, where instead I used openpyxl directly and wrote out a frame cell-by-cell.\r\n\r\nIf formatting is not preserved, then I agree overwrite should not be added.",
        "createdAt" : "2021-03-15T22:34:17Z",
        "updatedAt" : "2021-04-21T19:55:20Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "50b26ee5-273e-443f-a507-063e14ac603c",
        "parentId" : "9f5acb8e-9eda-44b4-904f-cae25cac6d55",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I am also -1 on implementing overwrite ",
        "createdAt" : "2021-03-15T22:40:31Z",
        "updatedAt" : "2021-04-21T19:55:20Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "791439ce-f90a-4562-acf1-f06452e411b3",
        "parentId" : "9f5acb8e-9eda-44b4-904f-cae25cac6d55",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "@WillAyd - Can I get your thoughts as to why? (Assuming formatting is preserved) To me it seems useful and commonly asked for, and the implementation is two lines.",
        "createdAt" : "2021-03-15T22:56:04Z",
        "updatedAt" : "2021-04-21T19:55:20Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "9a04ff7c-0bc0-4e05-9ca1-0376b62f4667",
        "parentId" : "9f5acb8e-9eda-44b4-904f-cae25cac6d55",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Overwrite versus replace isn't the best semantically. We also don't support overwrite with any other type of IO methods, and to your point above there is a lot of ambiguity as to what \"overwrite\" should actually overwrite",
        "createdAt" : "2021-03-16T16:04:13Z",
        "updatedAt" : "2021-04-21T19:55:20Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0144fc74-ae42-49df-8b8c-2946274b9311",
        "parentId" : "9f5acb8e-9eda-44b4-904f-cae25cac6d55",
        "authorId" : "a7f426e2-d5bb-4f2c-998c-ae07ff11555f",
        "body" : "I agree they are close semantically but I think these are the two most useful options and they have fairly different use cases:\r\n\r\nReplace: I want to write a table to a \"raw data\" tab in a spreadsheet with other sheets showing views of that data.\r\n\r\nOverwrite: I want to write a table to a specific location in a sheet which contains other stuff - text, graphs, images, other tables, formatting, etc.\r\n\r\nI was working in an Excel-heavy area for the last couple of months and I've seen both of these a lot, and they are both well represented in SO questions etc. I think omitting either of them would leave a hole in the API. Do you think there is a way we could make the names and/or docs for these options clearer?\r\n\r\nIf I was going to suggest an option to get rid of it would be `new`. This is the current behaviour but I'm not sure I can think of a good justification for it, and it can be fairly easily replicated in user code e.g.\r\n```\r\nwith ExcelWriter(...) as writer:\r\n    if \"sheetname\" in writer.book.sheetnames:\r\n        new_sheet_name = new_sheet_names()\r\n    df.to_excel(writer, new_sheet_name)\r\n```",
        "createdAt" : "2021-03-17T19:20:27Z",
        "updatedAt" : "2021-04-21T19:55:20Z",
        "lastEditedBy" : "a7f426e2-d5bb-4f2c-998c-ae07ff11555f",
        "tags" : [
        ]
      },
      {
        "id" : "41c7b4f3-5a3b-4b92-aa02-feb47f1ea63b",
        "parentId" : "9f5acb8e-9eda-44b4-904f-cae25cac6d55",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "We can continue the discussion in a dedicated issue for it but I think trying to do overwrite as part of this PR is going to be a tough sell. It might be better as a separate library, or if it is something we discuss more and want to include in pandas we I think would just want to spend a little bit more time going over the API. Would rather not hold up the other components you have here just for that",
        "createdAt" : "2021-03-18T01:25:09Z",
        "updatedAt" : "2021-04-21T19:55:20Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "46ff0598-717b-4ae3-9db8-6b922bca2512",
        "parentId" : "9f5acb8e-9eda-44b4-904f-cae25cac6d55",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "> We also don't support overwrite with any other type of IO methods\r\n\r\nI don't believe other IO methods have the use case of writing to an existing template for formatting purposes, which is what I see as being the primary case here.\r\n\r\n> and to your point above there is a lot of ambiguity as to what \"overwrite\" should actually overwrite\r\n\r\nThat was not my point, I merely wanted to make sure existing formatting was preserved if the DataFrame was not formatted and indeed that is the case. Not certain what you find unclear.\r\n\r\n> or if it is something we discuss more and want to include in pandas we I think would just want to spend a little bit more time going over the API\r\n\r\nOther than  what name to call this, what API choices are there?",
        "createdAt" : "2021-03-18T10:02:09Z",
        "updatedAt" : "2021-04-21T19:55:20Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      },
      {
        "id" : "37c901c3-4280-4fd3-a3bc-be451df5ce98",
        "parentId" : "9f5acb8e-9eda-44b4-904f-cae25cac6d55",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "@jreback - would like to get your thoughts here as well, to see if you found my arguments above at all compelling.",
        "createdAt" : "2021-03-20T13:02:20Z",
        "updatedAt" : "2021-04-21T19:55:20Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "49c4d3be5f5e614d45c63443e152c7b2d06e4b24",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +671,675 @@        * error: raise a ValueError.\n        * new: Create a new sheet, with a name determined by the engine.\n        * replace: Delete the contents of the sheet before writing to it.\n\n        .. versionadded:: 1.3.0"
  },
  {
    "id" : "d7e6984a-c68f-41c0-be3d-3ca49b147e9c",
    "prId" : 40430,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40430#pullrequestreview-611753797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f402684-63aa-4541-9dba-2f172ac04939",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "versionadded 1.3",
        "createdAt" : "2021-03-14T23:47:01Z",
        "updatedAt" : "2021-03-15T20:56:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b75a4e9ea47a17614c04cf761e95c72757e59b0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +669,673 @@        .. versionadded:: 1.2.0\n    engine_kwargs : dict, optional\n        Keyword arguments to be passed into the engine.\n\n        .. versionadded:: 1.3.0"
  },
  {
    "id" : "42f67a2a-6514-417a-bdf9-7a45b4cff704",
    "prId" : 40430,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40430#pullrequestreview-612614469",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ae829a4-9545-417f-a098-055dd0477a3a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't you simply do `engine_kwargs = kwargs` here?",
        "createdAt" : "2021-03-14T23:47:42Z",
        "updatedAt" : "2021-03-15T20:56:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "95dc5178-9261-4e20-a4db-bb7c92961f31",
        "parentId" : "6ae829a4-9545-417f-a098-055dd0477a3a",
        "authorId" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "body" : "Both engine_kwargs and kwargs go entirely unused in `_base.ExcelWriter.__new__` and `_base.ExcelWriter.__init__`; they are only utilized in the subclasses for each engine.",
        "createdAt" : "2021-03-15T20:27:18Z",
        "updatedAt" : "2021-03-15T20:56:44Z",
        "lastEditedBy" : "2393de1d-e145-40f2-85ac-13c36f13a76c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b75a4e9ea47a17614c04cf761e95c72757e59b0",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +774,778 @@                FutureWarning,\n                stacklevel=2,\n            )\n\n        # only switch class if generic(ExcelWriter)"
  },
  {
    "id" : "25b2dc4d-d9ed-4deb-8660-488dfd8a38fb",
    "prId" : 40430,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40430#pullrequestreview-611753797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c448dafc-2496-4ab0-b116-8ab3838608ec",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "and not do this",
        "createdAt" : "2021-03-14T23:47:50Z",
        "updatedAt" : "2021-03-15T20:56:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b75a4e9ea47a17614c04cf761e95c72757e59b0",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +866,870 @@        storage_options: StorageOptions = None,\n        engine_kwargs: Optional[Dict] = None,\n        **kwargs,\n    ):\n        # validate that this engine can handle the extension"
  },
  {
    "id" : "94e6f633-ac8e-413c-a725-67d274e59350",
    "prId" : 40430,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40430#pullrequestreview-611753797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b796eb8a-5623-4262-8e59-8001a1219a0f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a test for this",
        "createdAt" : "2021-03-14T23:48:24Z",
        "updatedAt" : "2021-03-15T20:56:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b75a4e9ea47a17614c04cf761e95c72757e59b0",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +769,773 @@        if kwargs:\n            if engine_kwargs is not None:\n                raise ValueError(\"Cannot use both engine_kwargs and **kwargs\")\n            warnings.warn(\n                \"Use of **kwargs is deprecated, use engine_kwargs instead.\","
  }
]