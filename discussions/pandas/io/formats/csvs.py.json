[
  {
    "id" : "e38ae371-2ad5-49eb-a62d-007e66ae4f0f",
    "prId" : 21300,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21300#pullrequestreview-130527450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "997b7290-33b2-47d2-957b-aadff8767e99",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is this actually required? If we already have a handle aren't we just round tripping here anyway by converting the handle to a name then back to a handle?",
        "createdAt" : "2018-06-04T18:48:35Z",
        "updatedAt" : "2018-06-04T22:46:09Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a717fb81-1380-43bd-bc93-c9cf74487150",
        "parentId" : "997b7290-33b2-47d2-957b-aadff8767e99",
        "authorId" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "body" : "Hi, I think so it's required because we need to generate a new handle from _get_handle (potentially with compression and encoding requirement) when a external handle is passed. currently when a file handle is passed, no compression is done even when specified https://github.com/pandas-dev/pandas/issues/21227",
        "createdAt" : "2018-06-04T18:55:19Z",
        "updatedAt" : "2018-06-04T22:46:09Z",
        "lastEditedBy" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "tags" : [
        ]
      },
      {
        "id" : "88f33c9a-c74d-4d51-a3b9-ac9d0447d0eb",
        "parentId" : "997b7290-33b2-47d2-957b-aadff8767e99",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Aren't we leaving a file handle open then? To illustrate:\r\n\r\n```python\r\n>>> f1 = open('foo.txt')\r\n>>> name = f1.name\r\n>>> f2, handles = _get_handle(name, 'r')\r\n>>> f2.close()\r\n>>> f1.closed\r\nFalse\r\n>>> f2.closed\r\nTrue\r\n```\r\n\r\nAFAICT with your code you eventually would close the second object but the first would stay open, no?",
        "createdAt" : "2018-06-04T19:19:45Z",
        "updatedAt" : "2018-06-04T22:46:09Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f944658b-f033-419d-835e-ade4d09db1f6",
        "parentId" : "997b7290-33b2-47d2-957b-aadff8767e99",
        "authorId" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "body" : "the first is up to the user to call f.close() no? hope below is a good example.\r\n\r\nhttps://github.com/pandas-dev/pandas/pull/21300/files#diff-a29a0a64b2800c1c30a53a178d871645\r\n\r\n",
        "createdAt" : "2018-06-04T19:26:05Z",
        "updatedAt" : "2018-06-04T22:46:09Z",
        "lastEditedBy" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "tags" : [
        ]
      },
      {
        "id" : "e592a942-e9cf-49fd-b5c5-5ef9b78b4add",
        "parentId" : "997b7290-33b2-47d2-957b-aadff8767e99",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm OK I see your point, but do we have test coverage for all of the branches? It just seems a little strange to me that we are opening two handles to the same location when a handle gets passed to this function. I feel like that's asking for some strange behavior to pop up, but would feel more comfortable if the test coverage was there to hit all three branches. lmk",
        "createdAt" : "2018-06-04T21:23:56Z",
        "updatedAt" : "2018-06-04T22:46:09Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "6c99e0f8-2b0f-463d-b4f4-75f43287b7fc",
        "parentId" : "997b7290-33b2-47d2-957b-aadff8767e99",
        "authorId" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "body" : "see your point. though two file handles have separate BufferIO and states. added tests using file-handle as input and assert equivalence. we also have compress_size test with file-handle showing they fix #21227 \r\n\r\nwe already have tests for path and buffer IO as they are existing use cases.",
        "createdAt" : "2018-06-04T22:49:28Z",
        "updatedAt" : "2018-06-04T22:49:28Z",
        "lastEditedBy" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "tags" : [
        ]
      },
      {
        "id" : "8aa1f7d6-b5ac-43b6-ac87-c1fd1d30eb6d",
        "parentId" : "997b7290-33b2-47d2-957b-aadff8767e99",
        "authorId" : "59248465-b088-41c0-a836-e2466bf44d64",
        "body" : "According to the issue #21561 we have a bug if the file is `sys.stdout`. Basically the library creates a file named `<stdout>`and write stuff in it",
        "createdAt" : "2018-06-20T18:11:54Z",
        "updatedAt" : "2018-06-20T18:11:54Z",
        "lastEditedBy" : "59248465-b088-41c0-a836-e2466bf44d64",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e914ff8e05006c2ad6df6684c779d07f3ce67de",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +135,139 @@            # path_or_buf is path\n            path_or_buf = self.path_or_buf\n        elif hasattr(self.path_or_buf, 'name'):\n            # path_or_buf is file handle\n            path_or_buf = self.path_or_buf.name"
  },
  {
    "id" : "2453b1d1-0f66-4039-879a-a1a0bf8aa9b1",
    "prId" : 30398,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30398#pullrequestreview-336243679",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47028155-c066-43c8-aa8e-92eb522e945c",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "```suggestion\r\n        cols: Sequence[Hashable] = None,\r\n```",
        "createdAt" : "2019-12-23T18:39:00Z",
        "updatedAt" : "2019-12-25T18:10:30Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "6fa4f5e8-9604-4296-b514-8f5d67d80d94",
        "parentId" : "47028155-c066-43c8-aa8e-92eb522e945c",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "Any suggestions?\r\n\r\n---\r\n\r\nmypy's log for 3 diffrent annotations:\r\n\r\n```python\r\ncols: Sequence[Hashable] = None\r\n```\r\n\r\n```\r\n$ mypy pandas\r\npandas/io/formats/csvs.py:34: error: Incompatible default for argument \"cols\" (default has type \"None\", argument has type \"Sequence[Hashable]\")\r\npandas/core/generic.py:3171: error: Argument \"cols\" to \"CSVFormatter\" has incompatible type \"Optional[Sequence[Optional[Hashable]]]\"; expected \"Sequence[Hashable]\"\r\nFound 2 errors in 2 files (checked 816 source files)\r\n```\r\n---\r\n\r\n```python\r\ncols: Optional[Sequence[Hashable]] = None\r\n```\r\n\r\n```\r\n$ mypy pandas\r\npandas/io/formats/csvs.py:128: error: Argument 1 to \"list\" has incompatible type \"Optional[Sequence[Hashable]]\"; expected \"Iterable[Hashable]\"\r\npandas/io/formats/csvs.py:139: error: Argument 1 to \"len\" has incompatible type \"Optional[Sequence[Hashable]]\"; expected \"Sized\"\r\npandas/core/generic.py:3171: error: Argument \"cols\" to \"CSVFormatter\" has incompatible type \"Optional[Sequence[Optional[Hashable]]]\"; expected \"Optional[Sequence[Hashable]]\"\r\nFound 3 errors in 2 files (checked 816 source files)\r\n```\r\n---\r\n\r\n```python\r\ncols: Optional[Sequence[Optional[Hashable]]] = None\r\n```\r\n\r\n```\r\n$ mypy pandas\r\npandas/io/formats/csvs.py:128: error: Argument 1 to \"list\" has incompatible type \"Optional[Sequence[Optional[Hashable]]]\"; expected \"Iterable[Optional[Hashable]]\"\r\npandas/io/formats/csvs.py:139: error: Argument 1 to \"len\" has incompatible type \"Optional[Sequence[Optional[Hashable]]]\"; expected \"Sized\"\r\nFound 2 errors in 2 files (checked 816 source files)\r\n```",
        "createdAt" : "2019-12-24T11:58:03Z",
        "updatedAt" : "2019-12-25T18:10:30Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "8cc956a8-34c2-45d4-b765-83ebc10a172f",
        "parentId" : "47028155-c066-43c8-aa8e-92eb522e945c",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "It looks like the annotations for `columns` might not be consistent in the IO methods. Can you open up a follow up issue for this and just leave unannotated for now? I think might be more difficult so OK to branch off given there's already a good deal in this PR",
        "createdAt" : "2019-12-24T16:38:58Z",
        "updatedAt" : "2019-12-25T18:10:30Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fcab9c2d7b6d6539ffdaa41ab70654efd3ff24f",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +39,43 @@        na_rep: str = \"\",\n        float_format: Optional[str] = None,\n        cols=None,\n        header: Union[bool, Sequence[Hashable]] = True,\n        index: bool = True,"
  },
  {
    "id" : "d6e35812-ae62-4162-b376-3da494d91338",
    "prId" : 30398,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30398#pullrequestreview-336546577",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc047790-c0b7-46a5-86bc-ae5acfeb6682",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "```suggestion\r\n        compression: Optional[Union[str, Mapping[str, str]]] = \"infer\",\r\n```",
        "createdAt" : "2019-12-26T15:18:38Z",
        "updatedAt" : "2019-12-26T15:18:39Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fcab9c2d7b6d6539ffdaa41ab70654efd3ff24f",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +45,49 @@        mode: str = \"w\",\n        encoding: Optional[str] = None,\n        compression: Union[str, Mapping[str, str], None] = \"infer\",\n        quoting: Optional[int] = None,\n        line_terminator=\"\\n\","
  },
  {
    "id" : "756a3de2-637f-41ec-a4b2-d26513e88ee0",
    "prId" : 30398,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30398#pullrequestreview-336548431",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95144473-be49-4b91-96f2-05b58799bc67",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "question for @WillAyd - do we want ` Sequence[Optional[Hashable]]] ` or is this for readability and only add `Optional` when mypy complains?",
        "createdAt" : "2019-12-26T15:22:13Z",
        "updatedAt" : "2019-12-26T15:22:14Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "627b4660-d2d8-4d05-993c-74cccf520088",
        "parentId" : "95144473-be49-4b91-96f2-05b58799bc67",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Personal preference for only when complaining but it isn't strong if you feel otherwise",
        "createdAt" : "2019-12-26T15:23:15Z",
        "updatedAt" : "2019-12-26T15:23:15Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "33759e77-660e-4aa5-912c-b242d959f66c",
        "parentId" : "95144473-be49-4b91-96f2-05b58799bc67",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "fine with that. (although may need to make exception for public apis)",
        "createdAt" : "2019-12-26T15:27:08Z",
        "updatedAt" : "2019-12-26T15:27:08Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fcab9c2d7b6d6539ffdaa41ab70654efd3ff24f",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +40,44 @@        float_format: Optional[str] = None,\n        cols=None,\n        header: Union[bool, Sequence[Hashable]] = True,\n        index: bool = True,\n        index_label: Optional[Union[bool, Hashable, Sequence[Hashable]]] = None,"
  },
  {
    "id" : "6838c9fd-6f1e-493e-8aaa-a28078fde598",
    "prId" : 33645,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33645#pullrequestreview-395964067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b115299-5957-41b9-8bcc-26023fae93eb",
        "parentId" : null,
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "@TomAugspurger - you pointer here was the exact problem https://github.com/pandas-dev/pandas/issues/32486#issuecomment-595992013",
        "createdAt" : "2020-04-19T00:42:02Z",
        "updatedAt" : "2020-04-21T01:43:52Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "7bd1c9fc96627a65dc70ed64f10ff2740a13c1df",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +63,67 @@        compression, self.compression_args = get_compression_method(compression)\n\n        self.path_or_buf, _, _, self.should_close = get_filepath_or_buffer(\n            path_or_buf, encoding=encoding, compression=compression, mode=mode\n        )"
  },
  {
    "id" : "266ee564-12ed-4a3a-aa77-64876014ab16",
    "prId" : 36046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36046#pullrequestreview-483059003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d2fe54f-2376-4efe-aadf-7203ddcae882",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "cc @jbrockmendel this could use block.apply in the future",
        "createdAt" : "2020-09-05T14:32:03Z",
        "updatedAt" : "2020-09-06T18:45:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8e7c50c2-29ed-4856-856e-a0d153ae9108",
        "parentId" : "2d2fe54f-2376-4efe-aadf-7203ddcae882",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah i think this and one other place in the pytables code.  i'll take another swing at these today",
        "createdAt" : "2020-09-05T14:37:04Z",
        "updatedAt" : "2020-09-06T18:45:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e08f6564070807c1608911a6343104def57e5393",
    "line" : 463,
    "diffHunk" : "@@ -1,1 +343,347 @@        df = self.obj.iloc[slicer]\n\n        for block in df._mgr.blocks:\n            d = block.to_native_types(**self._number_format)\n"
  }
]