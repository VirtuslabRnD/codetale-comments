[
  {
    "id" : "c2f65df1-6b71-4bd7-b97d-03dcd68bd44a",
    "prId" : 16141,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16141#pullrequestreview-77647241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b76ca5cf-98c3-4b44-9f4b-55731b24ba25",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "how does subset make sense here? does it make sense to hide *some* columns?",
        "createdAt" : "2017-05-12T11:52:22Z",
        "updatedAt" : "2017-11-18T03:03:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0f9a2c19-4374-474c-af66-b7789215bf63",
        "parentId" : "b76ca5cf-98c3-4b44-9f4b-55731b24ba25",
        "authorId" : "094bec66-3b8c-44cd-a713-86654d681dc6",
        "body" : "The idea is that you may have columns that are needed for formatting -- determining the color of a row, for example -- but you may not want to display them.  For example, lets say you had a dataframe with columns City and AvgTemp.  Avg Temp was used by Styler to color each row.  But in the final rendering, you only want to display city (colored appropriately).  AFAIK there is no way to do that right now, but with this change you could do df.style.hide_columns(['AvgTemp']).  You only want to hide AvgTemp.  ",
        "createdAt" : "2017-05-12T14:41:10Z",
        "updatedAt" : "2017-11-18T03:03:19Z",
        "lastEditedBy" : "094bec66-3b8c-44cd-a713-86654d681dc6",
        "tags" : [
        ]
      },
      {
        "id" : "e6663d62-997a-4c64-b5a3-060683e00215",
        "parentId" : "b76ca5cf-98c3-4b44-9f4b-55731b24ba25",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "this is a bit unusual for pandas, but I think it's fine here. It's kind of like `drop`, except it's hiding instead of dropping.",
        "createdAt" : "2017-05-15T20:00:55Z",
        "updatedAt" : "2017-11-18T03:03:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "affcdda7-0578-46e8-a991-98823e1f09c2",
        "parentId" : "b76ca5cf-98c3-4b44-9f4b-55731b24ba25",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe we should support ``df.style[list_of_selected_columns]`` for showing *some* columns. (separate discussion)",
        "createdAt" : "2017-11-19T16:14:38Z",
        "updatedAt" : "2017-11-19T16:14:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb779ec02f45634f73635b7f3f97b5cd7b4d6dfb",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +809,813 @@        \"\"\"\n        Hide columns from rendering.\n\n        .. versionadded:: 0.22.0\n"
  },
  {
    "id" : "cb371a1f-0f56-4fda-b0c6-ca63005a730f",
    "prId" : 17474,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17474#pullrequestreview-61685983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f594356b-e694-41c3-a061-ec88b9565942",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a ``See Also`` here (pointing to .applymap) and the reciprical one there",
        "createdAt" : "2017-09-10T14:25:40Z",
        "updatedAt" : "2017-09-10T14:48:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "82ae1dce8f10f2ad63e393ddd963481bcf7aaf49",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +652,656 @@        Returns\n        -------\n        self : Styler\n\n        See Also"
  },
  {
    "id" : "6c88c933-9a10-4d2e-88db-066d0978ad3e",
    "prId" : 18577,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18577#pullrequestreview-92064033",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d529bdf4-3c00-499c-95ab-add000b6d749",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@TomAugspurger I had to do this work-around here to push a list-like result into a frame (which we are breaking generally in this patch, but here style is relying on this, so kind of ok with this behavior, I have to add some more tests); this is from ``pandas/tests/io/formats/test_style.test_apply_axis``\r\n\r\n. e.g.\r\n\r\n```\r\nIn [5]:         df = pd.DataFrame({'A': [0, 0], 'B': [1, 1]})\r\n   ...:         f = lambda x: ['val: {max}'.format(max=x.max()) for v in x]\r\n   ...: \r\n\r\nIn [6]: df\r\nOut[6]: \r\n   A  B\r\n0  0  1\r\n1  0  1\r\n\r\nIn [7]: df.apply(f, axis=1)\r\nOut[7]: \r\n0    [val: 1, val: 1]\r\n1    [val: 1, val: 1]\r\ndtype: object\r\n\r\nIn [8]: df.apply(f, axis=1, result_type='infer')\r\nOut[8]: \r\n        A       B\r\n0  val: 1  val: 1\r\n1  val: 1  val: 1\r\n\r\n```\r\n\r\nI am not entirely sure why you need this this way.",
        "createdAt" : "2017-12-28T23:17:02Z",
        "updatedAt" : "2018-02-07T10:59:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "768a4fba-5627-4f0a-a1cc-53eae5bceb36",
        "parentId" : "d529bdf4-3c00-499c-95ab-add000b6d749",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The above snippet is no longer correct (I mean: in the meantime we have chosen to not preserve the original columns names when a list is returned, so this will have column names [0, 1]). \r\n\r\nThis has no impact on the style code?",
        "createdAt" : "2018-01-28T20:49:52Z",
        "updatedAt" : "2018-02-07T10:59:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d933801870e40f4ef58d9f96cd0f3eab353b83e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +510,514 @@        data = self.data.loc[subset]\n        if axis is not None:\n            result = data.apply(func, axis=axis,\n                                result_type='expand', **kwargs)\n            result.columns = data.columns"
  },
  {
    "id" : "a9a00c1a-6018-41a7-8397-f0073b7d09a0",
    "prId" : 19856,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19856#pullrequestreview-100540032",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14760118-2379-4344-a031-3395c4e80021",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hmmm, I'm not sure about the option affecting `Styler`. Does anyone else (@jorisvandenbossche, @chris-b1) have thoughts?\r\n\r\nAdding classes to the `Styler` is pretty easy, and you're always able to add them since you're generating the Styler. With `DataFrame._repr_html`, you don't have that option.",
        "createdAt" : "2018-03-01T12:45:53Z",
        "updatedAt" : "2018-03-01T23:05:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "63447b6a-4686-4663-bfdd-03fcb346cf1f",
        "parentId" : "14760118-2379-4344-a031-3395c4e80021",
        "authorId" : "2b2e6c6d-bc9f-49ca-8ee1-d2c72122ec57",
        "body" : "It's true this issue is solved by `df.style.set_table_attributes('class=\"tex2jax_ignore\"')`. One could argue that this PR is unnecessary because the solution is already possible in pandas.\r\n\r\nBut this solution requires knowledge of how MathJax works – something that I've learnt whilst making this PR. The new option `display.html.use_mathjax` is there to make it easier for users to find the solution.",
        "createdAt" : "2018-03-01T18:04:26Z",
        "updatedAt" : "2018-03-01T23:05:56Z",
        "lastEditedBy" : "2b2e6c6d-bc9f-49ca-8ee1-d2c72122ec57",
        "tags" : [
        ]
      },
      {
        "id" : "7e79701f-561d-46a9-b4b2-1c541f201ca7",
        "parentId" : "14760118-2379-4344-a031-3395c4e80021",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "To be clear, the changes to frames repr html are great.\r\n\r\nI just worry about injecting “noise” into Styler’s generated HTML from a config option, when it’s relatively easy to do that yourself.\r\n\r\nThat said, an extra class isn’t the worst thing in the world, and it’s simple to toggle on and off. Your current PR is probably fine. ",
        "createdAt" : "2018-03-01T18:21:16Z",
        "updatedAt" : "2018-03-01T23:05:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "30cc18b5-d67b-46d6-82a6-84eead78c7e7",
        "parentId" : "14760118-2379-4344-a031-3395c4e80021",
        "authorId" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "body" : "Yeah, I could see the argument for not doing it in `Styler` but I agree the PR is fine, especially where it is off by default, and is sort of an obscure thing to look up.",
        "createdAt" : "2018-03-01T18:25:00Z",
        "updatedAt" : "2018-03-01T23:05:56Z",
        "lastEditedBy" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "tags" : [
        ]
      }
    ],
    "commit" : "42224c9702da3b94bf98f2e0c17b7bea2c3826fb",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +326,330 @@            body.append(row_es)\n\n        table_attr = self.table_attributes\n        use_mathjax = get_option(\"display.html.use_mathjax\")\n        if not use_mathjax:"
  },
  {
    "id" : "336dc93f-c327-477c-9505-18c65adf6990",
    "prId" : 21263,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21263#pullrequestreview-125022080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc670814-0fab-48de-b270-ce6b986a1c28",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you also add a Raises section for the docstring?",
        "createdAt" : "2018-06-01T01:00:34Z",
        "updatedAt" : "2018-06-03T20:48:22Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "41911af6b41ecc191d0a8de29b1560b9f61b694e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +865,869 @@    def background_gradient(self, cmap='PuBu', low=0, high=0, axis=0,\n                            subset=None, text_color_threshold=0.408):\n        \"\"\"\n        Color the background in a gradient according to\n        the data in each column (optionally row)."
  },
  {
    "id" : "16edd5a8-354e-463b-9052-c94b9777bae8",
    "prId" : 21263,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21263#pullrequestreview-126763158",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca53290f-f517-4f90-a1d0-8c07b25cc91c",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Add `, default 0.408`.\r\n\r\nAnd may a note as to why that's the default?",
        "createdAt" : "2018-06-06T21:38:04Z",
        "updatedAt" : "2018-06-06T21:41:45Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "eff61f31-33f3-4608-a054-e26cec279333",
        "parentId" : "ca53290f-f517-4f90-a1d0-8c07b25cc91c",
        "authorId" : "7f591c66-d19e-4476-8d77-26e58d5c7185",
        "body" : "We chose `0.408` to stay consistent with the Seaborn implementation. Should I ask the Seaborn author for the underlying reason, just reference seaborn, or leave the value without explanation?",
        "createdAt" : "2018-06-06T22:04:09Z",
        "updatedAt" : "2018-06-06T22:04:10Z",
        "lastEditedBy" : "7f591c66-d19e-4476-8d77-26e58d5c7185",
        "tags" : [
        ]
      },
      {
        "id" : "de98f8a2-9f30-4ad0-8f35-11bf3500eb3a",
        "parentId" : "ca53290f-f517-4f90-a1d0-8c07b25cc91c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "No worries, was just curious.",
        "createdAt" : "2018-06-07T12:47:55Z",
        "updatedAt" : "2018-06-07T12:47:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "41911af6b41ecc191d0a8de29b1560b9f61b694e",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +880,884 @@        subset: IndexSlice\n            a valid slice for ``data`` to limit the style application to\n        text_color_threshold: float or int\n            luminance threshold for determining text color. Facilitates text\n            visibility across varying background colors. From 0 to 1."
  },
  {
    "id" : "32bc1cd7-fa6b-4ecb-9836-5468db5382fd",
    "prId" : 21263,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21263#pullrequestreview-126763291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "399f62ee-6f53-4f35-bc1a-3edef2139535",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Single backtick for parameter names.",
        "createdAt" : "2018-06-06T21:38:19Z",
        "updatedAt" : "2018-06-06T21:41:45Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a700d61d-e876-4a13-9dad-99b71d9866ee",
        "parentId" : "399f62ee-6f53-4f35-bc1a-3edef2139535",
        "authorId" : "7f591c66-d19e-4476-8d77-26e58d5c7185",
        "body" : "Thanks, I did double tick because I saw it in other places, for example for `high` and `low` in the notes section. Do you want me to update them to single tick as well? Does the same go for `data` in the subset section and the expressions in the note section?",
        "createdAt" : "2018-06-06T22:04:04Z",
        "updatedAt" : "2018-06-06T22:04:04Z",
        "lastEditedBy" : "7f591c66-d19e-4476-8d77-26e58d5c7185",
        "tags" : [
        ]
      },
      {
        "id" : "148f41b3-ee6c-470d-a2c0-0b6afa90a7fa",
        "parentId" : "399f62ee-6f53-4f35-bc1a-3edef2139535",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yes, I noticed that after posting. Probably fine to be consistent w/ the rest of the docstring here.",
        "createdAt" : "2018-06-07T12:48:16Z",
        "updatedAt" : "2018-06-07T12:48:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "41911af6b41ecc191d0a8de29b1560b9f61b694e",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +901,905 @@        ------\n        ValueError\n            If ``text_color_threshold`` is not a value from 0 to 1.\n        \"\"\"\n        subset = _maybe_numeric_slice(self.data, subset)"
  },
  {
    "id" : "929f583a-8275-4dcd-b017-1f987fb14a3a",
    "prId" : 23384,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23384#pullrequestreview-169071690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0176dc87-38ae-496a-ba2f-a3109b003d4e",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Well, that was pretty easy. 🙂 \r\n\r\nMakes me more in favor of this enhancement. 👍 ",
        "createdAt" : "2018-10-27T22:03:30Z",
        "updatedAt" : "2018-11-28T13:04:33Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "726d01de55432f662f0844265ab979360369d9fb",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +1303,1307 @@        ...    .set_caption(\"Results with minimum conversion highlighted.\"))\n        \"\"\"\n        return com._pipe(self, func, *args, **kwargs)\n\n"
  },
  {
    "id" : "f7f31ea4-04da-4d35-8f1f-7eb76e051eeb",
    "prId" : 23384,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23384#pullrequestreview-170712313",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39f80f37-06b8-4d4f-a9dc-7b2a1ef0edae",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does this pass the validation checks? doc-tests? @datapythonista ",
        "createdAt" : "2018-10-28T03:20:08Z",
        "updatedAt" : "2018-11-28T13:04:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9ddb042e-7a46-4a1c-868d-4f62b65c6266",
        "parentId" : "39f80f37-06b8-4d4f-a9dc-7b2a1ef0edae",
        "authorId" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "body" : "If you mean the `./scripts/validate_docstrings.py` script, it now passes, modulo doctests.\r\n\r\nThe doctests in this module are presumably not run right now, because when I manually run them, the existing doctests fail.  Two clear examples are the [`format` method](https://github.com/pandas-dev/pandas/blob/a2e599499667b256bc5b8b13a75f0601eccfd432/pandas/io/formats/style.py#L386), which doesn't list output, and the [`apply` method](https://github.com/pandas-dev/pandas/blob/a2e599499667b256bc5b8b13a75f0601eccfd432/pandas/io/formats/style.py#L599), which is missing a line continuation (\"...\").\r\n",
        "createdAt" : "2018-10-30T01:55:48Z",
        "updatedAt" : "2018-11-28T13:04:33Z",
        "lastEditedBy" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "tags" : [
        ]
      },
      {
        "id" : "e544f10d-37fd-415f-8e19-3757970a9b2a",
        "parentId" : "39f80f37-06b8-4d4f-a9dc-7b2a1ef0edae",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Does `./scripts/validate_docstrings.py pandas.io.formats.style.Styler.pipe` pass the doctests?",
        "createdAt" : "2018-10-31T19:17:32Z",
        "updatedAt" : "2018-11-28T13:04:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "9745504f-dca4-4bbf-b253-88621f7ad085",
        "parentId" : "39f80f37-06b8-4d4f-a9dc-7b2a1ef0edae",
        "authorId" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "body" : "I am traveling at the moment and am not able to copy-paste the output at this moment. But my recollection is:\r\n1.  There were no docstring style issues identified by the `validate_docstrings.py` script, in my most recent version.\r\n2.  The initial doctests on line 1260 (namely `>>> f(g(df.style.set_precision(3), arg1=a), arg2=b, arg3=c)`) and the subsequent rewritten version fail because the functions f and g are not defined.  I suppose the same thing happens in the analogous [DataFrame.pipe doctest](\r\nhttps://github.com/pandas-dev/pandas/blob/0409521665bd436a10aea7e06336066bf07ff057/pandas/core/generic.py#L4230).\r\n3. The later doctest on line 1287 executes as intended, but fails when the actual output (a string like `<pandas.io.formats.style.Styler at 0xaabcd538364>`) does not match the listed output in the doctest (no output included).  I could change this to make it formally pass, but it would require a `doctest: +ELLIPSIS` directive (to accommodate the memory address in the string), and it would be inconsistent with other doctests in this module (which don’t show the styler’s string representation as output).",
        "createdAt" : "2018-11-01T14:36:35Z",
        "updatedAt" : "2018-11-28T13:04:33Z",
        "lastEditedBy" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "tags" : [
        ]
      }
    ],
    "commit" : "726d01de55432f662f0844265ab979360369d9fb",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1236,1240 @@        return MyStyler\n\n    def pipe(self, func, *args, **kwargs):\n        \"\"\"\n        Apply ``func(self, *args, **kwargs)``, and return the result."
  },
  {
    "id" : "0b66734f-6933-4c3f-8b5c-4049ba6edeb3",
    "prId" : 23384,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23384#pullrequestreview-173676506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a604b772-dbcd-4a9e-b784-249247b6ed18",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think this should be the summary more than a Notes section.",
        "createdAt" : "2018-10-28T03:37:37Z",
        "updatedAt" : "2018-11-28T13:04:33Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "a0cbca67-6f08-4eb9-83b0-ad6e71b74c3a",
        "parentId" : "a604b772-dbcd-4a9e-b784-249247b6ed18",
        "authorId" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "body" : "I'm inclined to leave this as \"notes\", for consistency with [pandas.DataFrame.pipe](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pipe.html).  \r\n\r\nAnother reason to separate this from the function specification is that this section alludes to specific use cases for `pipe`, and conventions for the user-defined functions.  But I wouldn't want users to get the impression that they must use `pipe` like this -- there may be several other useful applications for the method that creative users will devise.",
        "createdAt" : "2018-10-30T02:15:23Z",
        "updatedAt" : "2018-11-28T13:04:33Z",
        "lastEditedBy" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "tags" : [
        ]
      },
      {
        "id" : "7e54c0d4-4174-4691-8e8e-3d63fb46be64",
        "parentId" : "a604b772-dbcd-4a9e-b784-249247b6ed18",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "We'll chage `DataFrame.pipe` then (you can open yourself another PR for it). We should show this in the examples (no code blocks should be in any other section). And the code needs to show real-world examples, and needs to be runnable. ",
        "createdAt" : "2018-11-06T07:05:08Z",
        "updatedAt" : "2018-11-28T13:04:33Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "6c182a43-d1f6-4f42-973e-4a441d454b4f",
        "parentId" : "a604b772-dbcd-4a9e-b784-249247b6ed18",
        "authorId" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "body" : "This was added at the request of @gfyoung [earlier in the review process](https://github.com/pandas-dev/pandas/pull/23384#discussion_r228727737), who asked:\r\n\r\n> Also, for what purpose?\r\n> \r\n> (yes, as reviewers, we can see what the rationale was from your PR, so just put that rationale into the docstring)\r\n\r\n@TomAugspurger [suggested making this a code block](https://github.com/pandas-dev/pandas/pull/23384#issuecomment-435075033).\r\n\r\nI think removing the code block may increase compliance with some developer rules for docstrings, but would make \"rationale\" part of the docstring less clear to end users.\r\n\r\n@gfyoung, do you think the text-only rationale, without the code examples, is sufficient?\r\n",
        "createdAt" : "2018-11-10T16:16:07Z",
        "updatedAt" : "2018-11-28T13:04:33Z",
        "lastEditedBy" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "tags" : [
        ]
      },
      {
        "id" : "63f78063-1727-4aff-b938-fa5a00172304",
        "parentId" : "a604b772-dbcd-4a9e-b784-249247b6ed18",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I like the code block here.",
        "createdAt" : "2018-11-10T20:17:48Z",
        "updatedAt" : "2018-11-28T13:04:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "cf586547-ab47-40ee-a2d9-9d52349db744",
        "parentId" : "a604b772-dbcd-4a9e-b784-249247b6ed18",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Not a big deal, but I don't think the code block will be run in the doctests, or validated for pep8 in the docstring validation. That's why I would prefer to have the code in the example, and not in code blocks (besides a personal preference on keeping all the code together).",
        "createdAt" : "2018-11-10T21:36:39Z",
        "updatedAt" : "2018-11-28T13:04:33Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "4debf843-dd79-476f-bb42-bf97fb3fbd11",
        "parentId" : "a604b772-dbcd-4a9e-b784-249247b6ed18",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This code block is more for showing why `pipe` is still useful despite being functionally equivalent to nested function calls. It's not intended as an actual example.",
        "createdAt" : "2018-11-10T21:49:57Z",
        "updatedAt" : "2018-11-28T13:04:33Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "726d01de55432f662f0844265ab979360369d9fb",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1262,1266 @@            modify the dataframe's styling.\n\n        Notes\n        -----\n        Like :meth:`DataFrame.pipe`, this method can simplify the"
  },
  {
    "id" : "0ed13957-9d12-44df-bc4e-ca5b50b925f8",
    "prId" : 23384,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23384#pullrequestreview-173665834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6643fa3-1d8e-4364-b40f-ac7f8d99419d",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Is this true? My understanding is that the result of `func` is used in the cells of the styler, and that a new styler is returned.",
        "createdAt" : "2018-11-06T07:00:57Z",
        "updatedAt" : "2018-11-28T13:04:33Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "526bc24d-097e-48f8-95ea-85ab8ab8089d",
        "parentId" : "d6643fa3-1d8e-4364-b40f-ac7f8d99419d",
        "authorId" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "body" : "I think you're confusing this method with some of the other Styler methods, like [Styler.applymap](https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.io.formats.style.Styler.applymap.html).\r\n",
        "createdAt" : "2018-11-10T16:04:58Z",
        "updatedAt" : "2018-11-28T13:04:33Z",
        "lastEditedBy" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "tags" : [
        ]
      }
    ],
    "commit" : "726d01de55432f662f0844265ab979360369d9fb",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1254,1258 @@        -------\n        object :\n            The value returned by ``func``.\n\n        See Also"
  },
  {
    "id" : "d15c6dbf-4f04-4cd3-86f6-69963ce8bac3",
    "prId" : 23384,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23384#pullrequestreview-173665667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffd3c117-830f-4c08-8c3d-a108e705e33d",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Not exactly true, what happens with the `Styler` instance where this is being called? Don't we modify its result?",
        "createdAt" : "2018-11-06T07:02:40Z",
        "updatedAt" : "2018-11-28T13:04:33Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "586c5fbb-60eb-4308-a056-dac0290876fe",
        "parentId" : "ffd3c117-830f-4c08-8c3d-a108e705e33d",
        "authorId" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "body" : "I'm not sure I understand your second question.\r\n\r\nThe user-supplied function `func` may or may not modify the styler; it may or may not have side-effects; and it may return the styler, some other result, or None.\r\n\r\nConsider the `pandas.Series` case.  A user could write any of the following:\r\n\r\n```\r\n>>> s = pandas.Series(...)\r\n>>> s.dropna().shift().pipe(normalize)        # Returns Series\r\n>>> s.dropna().shift().pipe(trimmed_mean)     # Returns scalar\r\n>>> s.dropna().shift().pipe(insert_initial_value)  # Unconventional, not \"pand-onic\"\r\n>>> s.dropna().shift().pipe(save_to_disk)     # Returns string filename\r\n```\r\n\r\n\r\n",
        "createdAt" : "2018-11-10T15:56:16Z",
        "updatedAt" : "2018-11-28T13:04:33Z",
        "lastEditedBy" : "7e49d4d0-898e-47b4-910d-64f38d46a4b1",
        "tags" : [
        ]
      }
    ],
    "commit" : "726d01de55432f662f0844265ab979360369d9fb",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1238,1242 @@    def pipe(self, func, *args, **kwargs):\n        \"\"\"\n        Apply ``func(self, *args, **kwargs)``, and return the result.\n\n        .. versionadded:: 0.24.0"
  },
  {
    "id" : "869549b0-fcd9-4486-af57-126f6d18cd07",
    "prId" : 25551,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25551#pullrequestreview-210843843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04f988df-9507-4be8-9057-112333b10d9d",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I'm actually surprised this isn't failing CI due to the description not starting with a capital letter. Not something to fix here but I wonder if there's something awry with CI @datapythonista ",
        "createdAt" : "2019-03-05T18:24:17Z",
        "updatedAt" : "2019-03-06T22:39:29Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3075eef6-4d56-4284-82da-cbd0d56ef0e0",
        "parentId" : "04f988df-9507-4be8-9057-112333b10d9d",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Scratch that looks this PR is still outstanding (#25232)",
        "createdAt" : "2019-03-05T18:26:30Z",
        "updatedAt" : "2019-03-06T22:39:29Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b1c6f0733c649fdb8d90e36cfb03779ce149360",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +578,582 @@            column labels when ``axis=None``\n        axis : {0 or 'index', 1 or 'columns', None}, default 0\n            apply to each column (``axis=0`` or ``'index'``), to each row\n            (``axis=1`` or ``'columns'``), or to the entire DataFrame at once\n            with ``axis=None``."
  },
  {
    "id" : "73ab1bc5-e108-412c-9a63-58178dabcf7a",
    "prId" : 28539,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28539#pullrequestreview-291136212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4a4ebe5-10f7-47fa-b7be-0cefcd3fadab",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Looks like there are too many newlines here",
        "createdAt" : "2019-09-20T00:03:18Z",
        "updatedAt" : "2019-09-20T12:08:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e345b978-1742-46ff-964d-62752587c398",
        "parentId" : "c4a4ebe5-10f7-47fa-b7be-0cefcd3fadab",
        "authorId" : "0faf6c58-f261-4f64-9d02-23572a6a8bc6",
        "body" : "Thanks @jbrockmendel,  I have removed the extra new line that was added.",
        "createdAt" : "2019-09-20T12:41:02Z",
        "updatedAt" : "2019-09-20T12:41:02Z",
        "lastEditedBy" : "0faf6c58-f261-4f64-9d02-23572a6a8bc6",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dadc1fa10d2f406a612962ecae1e930bdd49d1a",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +1357,1361 @@        **kwargs : optional\n            A dictionary of keyword arguments passed into ``func``.\n\n        Returns\n        -------"
  },
  {
    "id" : "3bbead2e-801d-43c1-8b76-24e35b7be949",
    "prId" : 29118,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29118#pullrequestreview-314573727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70c26236-bbfa-426f-9638-f4447b523805",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you add a test case that hits this?",
        "createdAt" : "2019-11-09T19:35:41Z",
        "updatedAt" : "2019-11-24T14:37:29Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "79353593021ccca7a450926ef9c62dd1475d0bfe",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +1544,1548 @@        return lambda x: na_rep if pd.isna(x) else formatter_func(x)\n    else:\n        msg = \"Expected a string, got {na_rep} instead\".format(na_rep=na_rep)\n        raise TypeError(msg)"
  },
  {
    "id" : "d8910911-d015-4096-8f3d-a03da83dee0a",
    "prId" : 29118,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29118#pullrequestreview-318067557",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc4abd52-a501-4bf6-8d31-37b5e28500fd",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Not required here but if you wanted to in a follow up annotate other arguments would be super helpful",
        "createdAt" : "2019-11-18T01:52:42Z",
        "updatedAt" : "2019-11-24T14:37:29Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "79353593021ccca7a450926ef9c62dd1475d0bfe",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +428,432 @@        )\n\n    def format(self, formatter, subset=None, na_rep: Optional[str] = None):\n        \"\"\"\n        Format the text display value of cells."
  },
  {
    "id" : "05334de6-8ce4-4529-8338-5fb3a448e90c",
    "prId" : 29245,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29245#pullrequestreview-310589124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddf9311a-3a08-4e56-8d42-aa9468b8b380",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "OK with this but can just use default constructor without `dtype` argument I think? As it it seems like this is trying to coerce, which I'm not sure why that would be needed",
        "createdAt" : "2019-10-31T22:34:35Z",
        "updatedAt" : "2019-11-01T16:54:26Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "87db59f3-260d-4e06-9817-0ce0da1dd8b1",
        "parentId" : "ddf9311a-3a08-4e56-8d42-aa9468b8b380",
        "authorId" : "8f8a272f-aa86-41b6-97eb-27cd759ef2bc",
        "body" : "unfortunately, `.to_numpy()` alone will produce `dtype=object` and rejected by matplotlib.\r\nOTOH, it will immediately convert to float anyway since `cmap` require normalizing to [0,1], nothing to loose for coercing in the first place.",
        "createdAt" : "2019-11-01T17:25:44Z",
        "updatedAt" : "2019-11-01T17:25:45Z",
        "lastEditedBy" : "8f8a272f-aa86-41b6-97eb-27cd759ef2bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "cecf5bd302acd2216d91e8e2939b42d372588e9f",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +1065,1069 @@            # matplotlib colors.Normalize modifies inplace?\n            # https://github.com/matplotlib/matplotlib/issues/5427\n            rgbas = plt.cm.get_cmap(cmap)(norm(s.to_numpy(dtype=float)))\n\n            def relative_luminance(rgba):"
  },
  {
    "id" : "bf037dda-5561-4c70-aeef-c996cbcc6d79",
    "prId" : 29953,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29953#pullrequestreview-324983478",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a52b258c-b9bc-4eda-b735-16d27978c2a7",
        "parentId" : null,
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "Same here.",
        "createdAt" : "2019-12-02T01:33:43Z",
        "updatedAt" : "2019-12-09T11:15:18Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "aea8b84ffb11c1f00976781aa626c19ce67ee0e0",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +644,648 @@            raise ValueError(\n                f\"Function {repr(func)} returned the wrong shape.\\n\"\n                f\"Result has shape: {result.shape}\\n\"\n                f\"Expected shape:   {expected_shape}\"\n            )"
  },
  {
    "id" : "d60583fb-3774-4dac-ba84-11f712a32457",
    "prId" : 30403,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30403#pullrequestreview-335669516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7323bfd7-773d-4831-b967-bfd582410c28",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can the inputs by typed?",
        "createdAt" : "2019-12-22T16:18:52Z",
        "updatedAt" : "2020-01-20T10:37:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "60b408fe-062a-48e9-b37c-a7ac07a40f11",
        "parentId" : "7323bfd7-773d-4831-b967-bfd582410c28",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "The problem is that ```mypy``` is giving false positives, I typed the 'row' as ```str``` and the 'col' as ```int``` and it went through with no errors.",
        "createdAt" : "2019-12-22T20:43:31Z",
        "updatedAt" : "2020-01-20T10:37:58Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f0438ec9ee1fc1c663980299a5a94833638edb7",
    "line" : 517,
    "diffHunk" : "@@ -1,1 +1512,1516 @@\n\ndef _is_visible(idx_row, idx_col, lengths) -> bool:\n    \"\"\"\n    Index -> {(idx_row, idx_col): bool})."
  },
  {
    "id" : "c2ec1d87-df18-488c-96bb-2cce8a963daa",
    "prId" : 30403,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30403#pullrequestreview-335670110",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88cb70dd-656e-4b4b-b17f-9f6802901726",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is it float or int?",
        "createdAt" : "2019-12-22T16:21:20Z",
        "updatedAt" : "2020-01-20T10:37:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "60a41c61-e695-44f9-a946-f4b89ae1de53",
        "parentId" : "88cb70dd-656e-4b4b-b17f-9f6802901726",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "float, want me to assign it the value of  ```100.0```?",
        "createdAt" : "2019-12-22T21:01:14Z",
        "updatedAt" : "2020-01-20T10:37:58Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f0438ec9ee1fc1c663980299a5a94833638edb7",
    "line" : 447,
    "diffHunk" : "@@ -1,1 +1254,1258 @@        axis: Optional[Axis] = 0,\n        color=\"#d65f5f\",\n        width: float = 100,\n        align: str = \"left\",\n        vmin: Optional[float] = None,"
  },
  {
    "id" : "8cedbdee-b3fb-4e68-b785-ec68189273fb",
    "prId" : 30403,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30403#pullrequestreview-343607534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf45da07-2fbd-465d-92dc-a37f89796567",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "float or int?",
        "createdAt" : "2019-12-22T16:22:51Z",
        "updatedAt" : "2020-01-20T10:37:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "4b59cf6d-a636-496c-a192-6790ae89c75a",
        "parentId" : "cf45da07-2fbd-465d-92dc-a37f89796567",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "float",
        "createdAt" : "2019-12-22T21:14:37Z",
        "updatedAt" : "2020-01-20T10:37:58Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "c934b635-ba32-4f9b-863f-8a503740d17b",
        "parentId" : "cf45da07-2fbd-465d-92dc-a37f89796567",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "While mypy won't complain because of type hierarchies I think better to do an explicit `Union[int, float]` for readability",
        "createdAt" : "2020-01-16T00:23:27Z",
        "updatedAt" : "2020-01-20T10:37:58Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "051488c5-b67e-419a-acab-f113678d460e",
        "parentId" : "cf45da07-2fbd-465d-92dc-a37f89796567",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Comment is applicable in a few places",
        "createdAt" : "2020-01-16T00:23:44Z",
        "updatedAt" : "2020-01-20T10:37:58Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f0438ec9ee1fc1c663980299a5a94833638edb7",
    "line" : 358,
    "diffHunk" : "@@ -1,1 +1021,1025 @@        cmap=\"PuBu\",\n        low: float = 0,\n        high: float = 0,\n        axis: Optional[Axis] = 0,\n        subset=None,"
  },
  {
    "id" : "7b5461ea-c87e-47c4-bfa4-968100a7fc57",
    "prId" : 30403,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30403#pullrequestreview-336225535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4420a6b-c223-422f-b5bd-9f18895359eb",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i dont actually use this code, is the uuid here going to be specifically a hex str?  if so, we should look into whether there is a more specific annotatiton for that",
        "createdAt" : "2019-12-22T16:25:34Z",
        "updatedAt" : "2020-01-20T10:37:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "6512d88d-ecef-4c06-9985-db7a51f8e371",
        "parentId" : "c4420a6b-c223-422f-b5bd-9f18895359eb",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I _think_ the mechanism for this would be NewType, https://mypy.readthedocs.io/en/latest/more_types.html#newtypes\r\n",
        "createdAt" : "2019-12-23T09:59:16Z",
        "updatedAt" : "2020-01-20T10:37:58Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "259be2e8-3288-452d-9d59-29711598d86a",
        "parentId" : "c4420a6b-c223-422f-b5bd-9f18895359eb",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "@simonjayhawkins Don't you think that's a bit of an overkill?\r\nBy overkill I mean, creating a new class just to annotate one variable in one function, just seems too much.",
        "createdAt" : "2019-12-24T15:06:33Z",
        "updatedAt" : "2020-01-20T10:37:58Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f0438ec9ee1fc1c663980299a5a94833638edb7",
    "line" : 297,
    "diffHunk" : "@@ -1,1 +883,887 @@        return self\n\n    def set_uuid(self, uuid: str) -> \"Styler\":\n        \"\"\"\n        Set the uuid for a Styler."
  },
  {
    "id" : "7a149971-d3a1-4043-8024-c2ea5faead65",
    "prId" : 30403,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30403#pullrequestreview-338958397",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43b4313e-a1ad-4199-a739-96e3e65434b8",
        "parentId" : null,
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "@simonjayhawkins Do you have any suggestion on how to annotate ```subset```?\r\n\r\nOr in other words how to represent ```IndexSlice``` in a typing form?",
        "createdAt" : "2019-12-24T15:09:34Z",
        "updatedAt" : "2020-01-20T10:37:58Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "31d33c14-6d66-4202-9518-3ce9f46c5a6e",
        "parentId" : "43b4313e-a1ad-4199-a739-96e3e65434b8",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "from pandas.core.indexing import _IndexSlice (maybe in an if TYPE_CHECKING although not necessary)\r\n\r\n```suggestion\r\n    def format(self, formatter, subset: Optional[_IndexSlice] = None, na_rep: Optional[str] = None) -> \"Styler\":\r\n``` ",
        "createdAt" : "2019-12-31T13:17:20Z",
        "updatedAt" : "2020-01-20T10:37:58Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "baf06c98-4d2c-4a77-87ce-3d6e5eaf10b5",
        "parentId" : "43b4313e-a1ad-4199-a739-96e3e65434b8",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "```mypy``` is raising errors.\r\n\r\nI stopped after a few, the error messages got pretty linear.\r\n\r\nAny suggestions @simonjayhawkins ?\r\n\r\n---\r\n\r\n#### MYPY's logs:\r\n\r\nFor\r\n\r\n```python\r\nsubset: Optional[_IndexSlice]\r\n```\r\n\r\n```\r\n$ mypy pandas\r\npandas/io/formats/style.py:486: error: Argument 1 to \"len\" has incompatible type \"Optional[_IndexSlice]\"; expected \"Sized\"\r\npandas/io/formats/style.py:487: error: Incompatible types in assignment (expression has type \"Tuple[Optional[_IndexSlice], Any]\", variable has type \"Optional[_IndexSlice]\")\r\nFound 2 errors in 1 file (checked 844 source files)\r\n```\r\n\r\n---\r\n\r\nFor\r\n\r\n```python\r\nsubset: Tuple[Optional[_IndexSlice], Any]\r\n```\r\n\r\n```\r\n$ mypy pandas\r\npandas/io/formats/style.py:436: error: Incompatible default for argument \"subset\" (default has type \"None\", argument has type \"Tuple[Optional[_IndexSlice], Any]\")\r\npandas/io/formats/style.py:487: error: Incompatible types in assignment (expression has type \"Tuple[Tuple[Optional[_IndexSlice], Any], Any]\", variable has type \"Tuple[Optional[_IndexSlice], Any]\")\r\nFound 2 errors in 1 file (checked 844 source files)\r\n```\r\n\r\n---\r\n\r\nFor \r\n\r\n```python\r\nsubset: Tuple[Tuple[Optional[_IndexSlice], Any], Any]\r\n```\r\n\r\n```\r\n$ mypy pandas\r\npandas/io/formats/style.py:436: error: Incompatible default for argument \"subset\" (default has type \"None\", argument has type \"Tuple[Tuple[Optional[_IndexSlice], Any], Any]\")\r\npandas/io/formats/style.py:487: error: Incompatible types in assignment (expression has type \"Tuple[Tuple[Tuple[Optional[_IndexSlice], Any], Any], Any]\", variable has type \"Tuple[Tuple[Optional[_IndexSlice], Any], Any]\")\r\nFound 2 errors in 1 file (checked 844 source files)\r\n```\r\n\r\n---\r\n\r\nFor\r\n\r\n```python\r\nsubset: Tuple[Tuple[Tuple[Optional[_IndexSlice], Any], Any], Any]\r\n```\r\n\r\n```\r\n$ mypy pandas\r\npandas/io/formats/style.py:436: error: Incompatible default for argument \"subset\" (default has type \"None\", argument has type \"Tuple[Tuple[Tuple[Optional[_IndexSlice], Any], Any], Any]\")\r\npandas/io/formats/style.py:487: error: Incompatible types in assignment (expression has type \"Tuple[Tuple[Tuple[Tuple[Optional[_IndexSlice], Any], Any], Any], Any]\", variable has type \"Tuple[Tuple[Tuple[Optional[_IndexSlice], Any], Any], Any]\")\r\nFound 2 errors in 1 file (checked 844 source files)\r\n```",
        "createdAt" : "2020-01-06T23:33:40Z",
        "updatedAt" : "2020-01-20T10:37:58Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f0438ec9ee1fc1c663980299a5a94833638edb7",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +435,439 @@        )\n\n    def format(self, formatter, subset=None, na_rep: Optional[str] = None) -> \"Styler\":\n        \"\"\"\n        Format the text display value of cells."
  }
]