[
  {
    "id" : "20cd340d-edaf-461f-98c4-b1a6c1863854",
    "prId" : 31876,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31876#pullrequestreview-359415129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9ea440e-86b1-407e-96c6-88b13c2bb8c3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "some point later type these",
        "createdAt" : "2020-02-16T16:43:03Z",
        "updatedAt" : "2020-02-18T10:21:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5597914c5265ab20e338a55f9d6573a1d813e40e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@\ndef info(\n    data, verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None\n) -> None:\n    \"\"\""
  },
  {
    "id" : "d2390de0-7583-4777-a520-1d53e11bb245",
    "prId" : 33625,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33625#pullrequestreview-396050773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ea00029-fb02-48a0-a94e-98d187ec60dd",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Is there a particular reason to use `__getitem__` instead of `iloc` here? (same with `counts` below)",
        "createdAt" : "2020-04-19T18:46:20Z",
        "updatedAt" : "2020-04-19T18:46:21Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "ca7dd4a7-2b37-494d-be92-8756ad15bd6e",
        "parentId" : "6ea00029-fb02-48a0-a94e-98d187ec60dd",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "Because in #31796, in the case that `data` is a Series, I make `counts` an `Index` (which has no attribute `.iloc`)",
        "createdAt" : "2020-04-19T18:57:14Z",
        "updatedAt" : "2020-04-19T18:57:14Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      },
      {
        "id" : "c67befed-cbf6-4590-a3e2-93a1bbf04104",
        "parentId" : "6ea00029-fb02-48a0-a94e-98d187ec60dd",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "I see. Thanks for the explanation",
        "createdAt" : "2020-04-19T18:59:07Z",
        "updatedAt" : "2020-04-19T18:59:07Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cee2fd5321e266f6b136a76e598be72761bc488",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +231,235 @@\n        for i, col in enumerate(cols):\n            dtype = dtypes[i]\n            col = pprint_thing(col)\n"
  },
  {
    "id" : "d168595a-d96e-4545-920d-fd89b9a9bfd8",
    "prId" : 34092,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34092#pullrequestreview-408754364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b271c3d4-f0f7-48de-8b40-502f2f263233",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "where is this useful?",
        "createdAt" : "2020-05-10T15:06:20Z",
        "updatedAt" : "2020-05-11T18:36:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "74fe99e8-e9c8-4e24-bd4c-89ef16a6e8bd",
        "parentId" : "b271c3d4-f0f7-48de-8b40-502f2f263233",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "@jreback if I rebase #31796 onto this, the diff is a little easier to read as all that needs to change for this part is a\r\n```python\r\nif isinstance(data, Series)\r\n```\r\ninside this helper function",
        "createdAt" : "2020-05-10T15:12:38Z",
        "updatedAt" : "2020-05-11T18:36:03Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      },
      {
        "id" : "a0fcf335-6672-46f2-9b8d-73a5a9ee9e6b",
        "parentId" : "b271c3d4-f0f7-48de-8b40-502f2f263233",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, please add a doc-string",
        "createdAt" : "2020-05-10T15:14:14Z",
        "updatedAt" : "2020-05-11T18:36:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7bceaf398368ec4857087bc3fb1f6b342d304d38",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +40,44 @@\n\ndef _get_ids_and_dtypes(data: FrameOrSeries) -> Tuple[\"Index\", \"Series\"]:\n    \"\"\"\n    Get DataFrame's columns and dtypes."
  },
  {
    "id" : "eecf6bbc-68c3-476f-ac43-bb869381cbd3",
    "prId" : 34092,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34092#pullrequestreview-408754364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f857cd73-1ad5-46a9-8f1c-3bdfd13de6ba",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string",
        "createdAt" : "2020-05-10T15:14:06Z",
        "updatedAt" : "2020-05-11T18:36:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7bceaf398368ec4857087bc3fb1f6b342d304d38",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +14,18 @@\n\ndef _put_str(s: Union[str, Dtype], space: int) -> str:\n    \"\"\"\n    Make string of specified length, padding to the right if necessary."
  },
  {
    "id" : "a886a6b1-7b7b-4d70-8e79-2cc090983a41",
    "prId" : 34743,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34743#pullrequestreview-430157361",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b99c5658-8d87-42a3-b4f7-888356dcfe5e",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think easier if you just make this an ABC",
        "createdAt" : "2020-06-13T18:31:29Z",
        "updatedAt" : "2020-06-21T07:47:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f87bc22781f3f7e943696daca0e05f71aaca1d56",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +96,100 @@\n    @abstractmethod\n    def _get_mem_usage(self, deep: bool) -> int:\n        \"\"\"\n        Get memory usage in bytes."
  },
  {
    "id" : "a951e56d-4feb-4fc5-877d-301393a94979",
    "prId" : 34743,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34743#pullrequestreview-433010810",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe3b2200-9cc1-4aac-9bf9-c73c77713790",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why do you need the pragma here?",
        "createdAt" : "2020-06-14T14:41:56Z",
        "updatedAt" : "2020-06-21T07:47:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d1ae3f97-343e-4f81-b5e8-accd50fa8441",
        "parentId" : "fe3b2200-9cc1-4aac-9bf9-c73c77713790",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Noticed this is in the current implementation. Not sure of reasoning but yea probably safe to remove",
        "createdAt" : "2020-06-15T19:16:04Z",
        "updatedAt" : "2020-06-21T07:47:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "beffdacb-224c-465f-9e34-399125315983",
        "parentId" : "fe3b2200-9cc1-4aac-9bf9-c73c77713790",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "Yes, it was from the current implementation - have removed",
        "createdAt" : "2020-06-18T07:29:40Z",
        "updatedAt" : "2020-06-21T07:47:48Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      }
    ],
    "commit" : "f87bc22781f3f7e943696daca0e05f71aaca1d56",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +83,87 @@        null_counts: Optional[bool] = None,\n    ):\n        if buf is None:  # pragma: no cover\n            buf = sys.stdout\n        if memory_usage is None:"
  },
  {
    "id" : "8f8c74f1-cfea-43db-a4df-e77e55a3d432",
    "prId" : 36752,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36752#pullrequestreview-501601023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d70c332-8088-48d9-a9b8-23fe97047676",
        "parentId" : null,
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : ":thinking: not sure if `FrameOrSeries` is correct here, as the comment near it says\r\n```\r\n# FrameOrSeriesUnion  means either a DataFrame or a Series. E.g.\r\n# `def func(a: FrameOrSeriesUnion) -> FrameOrSeriesUnion: ...` means that if a Series\r\n# is passed in, either a Series or DataFrame is returned, and if a DataFrame is passed\r\n# in, either a DataFrame or a Series is returned.\r\n```\r\n, while `__init__` doesn't return anything. However, `FrameOrSeriesUnion` also talks about either a Series or a DataFrame being returned, so I'm not sure how to type this if nothing is returned... @topper-123 any suggestions?",
        "createdAt" : "2020-10-01T06:17:11Z",
        "updatedAt" : "2020-10-20T12:33:53Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      },
      {
        "id" : "229fdab5-ffd5-4f3f-9bb4-99771f487d14",
        "parentId" : "2d70c332-8088-48d9-a9b8-23fe97047676",
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Looking at the documentation, I guess ``FrameOrSeries`` means the following.\r\nConsider ``x: FrameOrSeries``.\r\nFunction ``f(x) -> FrameOrSeries``.\r\nLet us say, that now ``x`` is a dataframe, then ``f(x)`` must return ``DataFrame``, but not ``Series``.\r\nMeanwhile ``FrameOrSeriesUnion`` allows that ``f(x)`` returns different type.",
        "createdAt" : "2020-10-03T14:58:36Z",
        "updatedAt" : "2020-10-20T12:33:53Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      },
      {
        "id" : "eb007aae-80f7-4b24-8224-040257494769",
        "parentId" : "2d70c332-8088-48d9-a9b8-23fe97047676",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "Yes, that's my understanding too, although technically `__init__` doesn't return anything, so...just `Union[Series, DataFrame]`?",
        "createdAt" : "2020-10-03T15:08:18Z",
        "updatedAt" : "2020-10-20T12:33:53Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      },
      {
        "id" : "b0706986-15ae-4c1b-9a80-61f59f5aa54e",
        "parentId" : "2d70c332-8088-48d9-a9b8-23fe97047676",
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "``FrameOrSeriesUnion = Union[\"DataFrame\", \"Series\"]``, I can use it.\r\n\r\nIt we use ``FrameOrSeries``, then it does not mean that we must return.\r\nIt just means that **if** we return, we **must** return the same type.\r\n\r\nIt is not like I object against changes.\r\nI only mean that these are not required.\r\nmypy would raise issues if any.",
        "createdAt" : "2020-10-03T15:29:58Z",
        "updatedAt" : "2020-10-20T12:33:53Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      },
      {
        "id" : "7dea00f0-4a74-49d1-a344-5c3f20dbda93",
        "parentId" : "2d70c332-8088-48d9-a9b8-23fe97047676",
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "I tried ``FrameOrSeriesUnion`` and it leads to mypy complains.\r\n\r\n```\r\npandas/io/formats/info.py:140: error: Incompatible return value type (got \"Union[Any, ExtensionDtype]\", expected \"Series\")  [return-value]\r\npandas/io/formats/info.py:201: error: Incompatible return value type (got \"Union[Any, ExtensionDtype]\", expected \"Series\")  [return-value]\r\n```\r\n\r\nSo, I leave it as it is for now.",
        "createdAt" : "2020-10-03T15:37:34Z",
        "updatedAt" : "2020-10-20T12:33:53Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      },
      {
        "id" : "fc31d682-b208-40b6-80fd-c0d5f8fe1253",
        "parentId" : "2d70c332-8088-48d9-a9b8-23fe97047676",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "I think you're right, e.g. `pandas/io/pytables.py` contains:\r\n```python\r\ndef to_hdf(\r\n    path_or_buf,\r\n    key: str,\r\n    value: FrameOrSeries,\r\n    mode: str = \"a\",\r\n    complevel: Optional[int] = None,\r\n    complib: Optional[str] = None,\r\n    append: bool = False,\r\n    format: Optional[str] = None,\r\n    index: bool = True,\r\n    min_itemsize: Optional[Union[int, Dict[str, int]]] = None,\r\n    nan_rep=None,\r\n    dropna: Optional[bool] = None,\r\n    data_columns: Optional[Union[bool, List[str]]] = None,\r\n    errors: str = \"strict\",\r\n    encoding: str = \"UTF-8\",\r\n):\r\n```\r\n\r\nLet's keep as is then, thanks for explaining!",
        "createdAt" : "2020-10-04T08:19:02Z",
        "updatedAt" : "2020-10-20T12:33:53Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      }
    ],
    "commit" : "70c6e22e1fc748ff1b018b0a23a15e976c235d0a",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +98,102 @@    def __init__(\n        self,\n        data: FrameOrSeries,\n        memory_usage: Optional[Union[bool, str]] = None,\n    ):"
  },
  {
    "id" : "7407596b-29f7-49e5-8c88-5dd550e73b72",
    "prId" : 36752,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36752#pullrequestreview-500910591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5919345a-244a-4e26-9880-f208afa68a1f",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm at first glance I think this delegation pattern is a little confusing but maybe I am overlooking something. What is the advantage to calling `DataFrameInfo.to_buffer` from `.info` instead of calling `InfoPrinter.to_buffer` instead?",
        "createdAt" : "2020-10-01T17:40:31Z",
        "updatedAt" : "2020-10-20T12:33:53Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "81584854-7931-43b6-a2c3-4d9013f41138",
        "parentId" : "5919345a-244a-4e26-9880-f208afa68a1f",
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "I call ``DataFrameInfo.to_buffer`` from ``DataFrame`` because of the following reasons.\r\n1. Mainly did not want to mess with the docstring (which is defined in ``DataFrameInfo.to_buffer``)\r\n2. I wanted to avoid import of ``InfoPrinter`` into ``pandas/core/frame.py``\r\n3. Probably it is a good idea to make public API function as disconnected from the internal API as possible. Right now changes inside ``pandas/io/formats/io.py`` will have slight effect on ``DataFrame`` class, since the info printing functionality is encapsulated inside ``DataFrameInfo``. If, however, we call ``InfoPrinter.to_buffer`` from ``DataFrame.info()``, then we would need to ensure that all the possible changes made inside ``InfoPrinter`` and ``DataFrameInfo`` are properly communicated to ``DataFrame.info``. I hope it makes sense.\r\n\r\nBut I do not strongly object against having ``InfoPrinter.to_buffer`` called from ``DataFrame.info()``.",
        "createdAt" : "2020-10-02T07:25:52Z",
        "updatedAt" : "2020-10-20T12:33:53Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "70c6e22e1fc748ff1b018b0a23a15e976c235d0a",
    "line" : 228,
    "diffHunk" : "@@ -1,1 +267,271 @@        %(examples_sub)s\n        \"\"\"\n        printer = InfoPrinter(\n            info=self,\n            max_cols=max_cols,"
  },
  {
    "id" : "33903bb8-d7d1-4071-9805-4426ce0f311f",
    "prId" : 36752,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36752#pullrequestreview-505839402",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86b499c7-1ac5-45b3-a1ce-199d7685cbcb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you reduce the builder abstraction a bit. this is too java-esque. you can just pass parameterize / use partial functions. I find this style too different from the rest of pandas. let's make this simpler. ",
        "createdAt" : "2020-10-07T02:54:35Z",
        "updatedAt" : "2020-10-20T12:33:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "43e2c076-53d3-403e-93ad-6d7d987319bb",
        "parentId" : "86b499c7-1ac5-45b3-a1ce-199d7685cbcb",
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "As you requested, I dropped ``DataFrameTableBuilderVerboseNoCounts`` and ``DataFrameTableBuilderVerboseWithCounts``.\r\nInstead, I parametrized ``DataFrameTableBuilderVerbose`` (with_counts = True/False). I personally prefer the original implementation, but this one is also OK. My concerns with the new implementation are rather minor. Two if statements checking for ``with_counts`` in two separate functions (fragile), and presence of ``_gen_non_null_counts``, which is required for the table with counts and is irrelevant for table without counts.\r\n\r\nI leave ``TableBuilderAbstract`` as @MarcoGorelli is working on series info, thus it will be reasonable for the builders to have the same interface.",
        "createdAt" : "2020-10-07T07:18:51Z",
        "updatedAt" : "2020-10-20T12:33:53Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      },
      {
        "id" : "fef25b63-b104-49df-8329-a3ed2eeadd5c",
        "parentId" : "86b499c7-1ac5-45b3-a1ce-199d7685cbcb",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "Regarding Series.info - if you want to work on it I'm happy for you to take it over (else I'll go back to it once this PR is in)",
        "createdAt" : "2020-10-07T16:18:04Z",
        "updatedAt" : "2020-10-20T12:33:53Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      },
      {
        "id" : "2dc72e9f-ca89-4b21-a827-ba80a551ac41",
        "parentId" : "86b499c7-1ac5-45b3-a1ce-199d7685cbcb",
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "@MarcoGorelli, I can work on Series.info from the code point of view. Since you already have documentation and tests, it seems to be quite manageable for me.",
        "createdAt" : "2020-10-07T16:29:54Z",
        "updatedAt" : "2020-10-20T12:33:53Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      },
      {
        "id" : "d5c49a57-79db-42ae-af8e-f002e1ceadd7",
        "parentId" : "86b499c7-1ac5-45b3-a1ce-199d7685cbcb",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "Cool, I'll close that PR then! If for whatever reason you change your mind, please ping me and I'll take it up again",
        "createdAt" : "2020-10-07T16:38:59Z",
        "updatedAt" : "2020-10-20T12:33:53Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      },
      {
        "id" : "cd98c4db-9835-404e-bf0e-2e7a43bf4af4",
        "parentId" : "86b499c7-1ac5-45b3-a1ce-199d7685cbcb",
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Good. I will start working on series info once this PR is merged.",
        "createdAt" : "2020-10-09T16:49:36Z",
        "updatedAt" : "2020-10-20T12:33:53Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "70c6e22e1fc748ff1b018b0a23a15e976c235d0a",
    "line" : 424,
    "diffHunk" : "@@ -1,1 +383,387 @@\n\nclass DataFrameTableBuilder(TableBuilderAbstract):\n    \"\"\"Abstract builder for dataframe info table.\"\"\"\n"
  },
  {
    "id" : "4610f148-6e7d-4556-ba07-70a05065477b",
    "prId" : 36766,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36766#pullrequestreview-501518533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a93c951b-2257-4df6-8989-f06ac5405c6e",
        "parentId" : null,
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Note that this was starting playing role only when number of columns was over 1000. Because below 1000 ``max_id < len_id``. Therefore below 1000 columns there were no issues.",
        "createdAt" : "2020-10-03T03:58:44Z",
        "updatedAt" : "2020-10-07T09:32:18Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "489bcd47479ab2bee619aa45468364032e3981a0",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +293,297 @@        # in front of the number\n        # this allows maintain two spaces gap between columns\n        max_id = len(pprint_thing(col_count)) + 1\n        len_id = len(pprint_thing(id_head))\n        space_num = max(max_id, len_id) + col_space"
  },
  {
    "id" : "784d4e5b-8409-47ae-a4d8-ed0538aa80ad",
    "prId" : 37868,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37868#pullrequestreview-532532704",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea4437b3-480b-4b18-810b-3becd73de2a7",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "`@abstractmethod`?",
        "createdAt" : "2020-11-17T13:10:55Z",
        "updatedAt" : "2020-11-22T15:18:07Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "d019e2a7-185a-4caf-8f56-d2bb1d22aad0",
        "parentId" : "ea4437b3-480b-4b18-810b-3becd73de2a7",
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Yes, I guess ``abstractmethod`` should be there.\r\nFixed.",
        "createdAt" : "2020-11-17T16:08:29Z",
        "updatedAt" : "2020-11-22T15:18:07Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc8370686aae5fea3c53a3be111b3caaba092c08",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +111,115 @@    @property\n    @abstractmethod\n    def dtypes(self) -> Iterable[Dtype]:\n        \"\"\"\n        Dtypes."
  },
  {
    "id" : "99cf9a03-bfab-49cf-95e1-ef5cf0e91063",
    "prId" : 37868,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37868#pullrequestreview-536061223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3653bc4a-dbbc-474e-9e43-5cae30806761",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are we using FrameOrSeries? cc @simonjayhawkins ",
        "createdAt" : "2020-11-18T19:07:32Z",
        "updatedAt" : "2020-11-22T15:18:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2b9d3d0e-7ab1-46c2-a016-db72e1ab86bc",
        "parentId" : "3653bc4a-dbbc-474e-9e43-5cae30806761",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "see https://github.com/pandas-dev/pandas/pull/37868#discussion_r525126264",
        "createdAt" : "2020-11-22T13:14:43Z",
        "updatedAt" : "2020-11-22T15:18:07Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc8370686aae5fea3c53a3be111b3caaba092c08",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +106,110 @@    \"\"\"\n\n    data: FrameOrSeriesUnion\n    memory_usage: Union[bool, str]\n"
  }
]