[
  {
    "id" : "4031bfa4-dad3-4312-8901-62c6c83669eb",
    "prId" : 17821,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17821#pullrequestreview-67892084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e08b38ac-a678-4615-9efd-755d09a5c6fe",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Not sure if this is overkill, but you can do `encoding = self.encoding or ('ascii' if compat.PY2 else 'utf-8')` to condense this whole block of if-else logic.",
        "createdAt" : "2017-10-09T05:31:03Z",
        "updatedAt" : "2017-10-11T00:09:12Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "074e0642-d5a9-41cf-a50a-855f928a6602",
        "parentId" : "e08b38ac-a678-4615-9efd-755d09a5c6fe",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "IMO, matter of taste here.  I prefer the block-logic because its easier to read I find.",
        "createdAt" : "2017-10-09T06:04:37Z",
        "updatedAt" : "2017-10-11T00:09:12Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "c222ee82eb60cab4c35b89f5dd5cb6c23c3119b7",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1580,1584 @@                encoding = 'utf-8'\n        else:\n            encoding = self.encoding\n\n        if hasattr(self.path_or_buf, 'write'):"
  },
  {
    "id" : "4843997b-68a2-47e2-8ddc-87f217286b3f",
    "prId" : 18083,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18083#pullrequestreview-74764627",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d46e2ed2-ac47-426e-b4d4-936234ea743e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@jorisvandenbossche Thoughts on this one? The multiline `{ options... }` format was giving warnings (block quotes I think?). I couldn't figure out the correct values in the formatting, so I just made a list.",
        "createdAt" : "2017-11-07T13:38:36Z",
        "updatedAt" : "2017-11-08T22:40:21Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "89d62ed3-e61b-4be9-926b-40d8822355ab",
        "parentId" : "d46e2ed2-ac47-426e-b4d4-936234ea743e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "See https://github.com/numpy/numpydoc/issues/87. In the end I think the conclusion is that using `\\` is the best way to deal with multi-line type specifications. \r\n\r\nOn the other hand, if the list becomes too long of all options, I think it is good to not list them all in the type specification (but keep it there to simply 'string') but give more explanation in the description.",
        "createdAt" : "2017-11-07T14:28:14Z",
        "updatedAt" : "2017-11-08T22:40:21Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1b25e91d3636105b125b1aaa801f9e795c37fbb",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +90,94 @@        of the box. Valid values are\n\n        * left\n        * right\n        * center"
  },
  {
    "id" : "27152d7f-b1a1-474c-af74-d4ea44fcc09d",
    "prId" : 22308,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22308#pullrequestreview-145998633",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "093128fc-d133-46d4-8c2b-f912b6556946",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you see if u can change ``fixed_width`` to a cached property instead of setting it (need to remove from the signature as well)",
        "createdAt" : "2018-08-13T11:35:31Z",
        "updatedAt" : "2018-11-26T12:27:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "18679e2d-60c2-4132-b85a-807e2705e853",
        "parentId" : "093128fc-d133-46d4-8c2b-f912b6556946",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this possible?",
        "createdAt" : "2018-08-14T00:07:35Z",
        "updatedAt" : "2018-11-26T12:27:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "516d2bdb-f844-4c77-9030-bd416999902a",
        "parentId" : "093128fc-d133-46d4-8c2b-f912b6556946",
        "authorId" : "9d35d7cc-818e-4d6a-aa21-dbe273b5e112",
        "body" : "There is a good chance I'm not understanding the comment, but I'm not sure we can set this as a cached property (using the `cache_readonly` decorator?) since it is set in the base class. As I say I might be missing something...",
        "createdAt" : "2018-08-14T08:19:27Z",
        "updatedAt" : "2018-11-26T12:27:12Z",
        "lastEditedBy" : "9d35d7cc-818e-4d6a-aa21-dbe273b5e112",
        "tags" : [
        ]
      },
      {
        "id" : "a91166a3-ea22-4caa-9d69-4cbaeee96b9f",
        "parentId" : "093128fc-d133-46d4-8c2b-f912b6556946",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can set it in each of the subclasses. I just don't think we actually need this. try doing this as a property first to see if it works.",
        "createdAt" : "2018-08-14T10:11:56Z",
        "updatedAt" : "2018-11-26T12:27:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9666bd59a6e2b0ac9ca6ba0f620cb559f7a4e26",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +962,966 @@        if self.float_format is not None and self.formatter is None:\n            # GH21625, GH22270\n            self.fixed_width = False\n            if callable(self.float_format):\n                self.formatter = self.float_format"
  },
  {
    "id" : "392633e5-eff7-44f0-9673-acc1dd2e2bba",
    "prId" : 23601,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23601#pullrequestreview-181244368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8aa9bc36-a481-4806-a9e4-78e4651cc3fc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we need a TODO here? this is until DatetimeArray is fully pushed?",
        "createdAt" : "2018-12-04T00:00:07Z",
        "updatedAt" : "2018-12-04T00:00:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "299b5328-dc3b-4194-8306-811651e31e03",
        "parentId" : "8aa9bc36-a481-4806-a9e4-78e4651cc3fc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "That depends on whether we're willing to change `__array__` for datetime-backed series / index (right now . I'm writing up an issue now to discuss that specific point.)",
        "createdAt" : "2018-12-04T12:36:51Z",
        "updatedAt" : "2018-12-04T12:37:22Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a7053515-5a8d-4e13-925d-3c61d1725fa4",
        "parentId" : "8aa9bc36-a481-4806-a9e4-78e4651cc3fc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/pandas-dev/pandas/issues/23569#issuecomment-444091967 for that.",
        "createdAt" : "2018-12-04T13:03:50Z",
        "updatedAt" : "2018-12-04T13:03:51Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad113b374641b6eb1f0cb7b28d7d38e24099902",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +1127,1131 @@\n        if is_categorical_dtype(values.dtype):\n            # Categorical is special for now, so that we can preserve tzinfo\n            array = values.get_values()\n        else:"
  },
  {
    "id" : "4f6d5cf3-2ab0-415d-8003-4dda07cf3967",
    "prId" : 23601,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23601#pullrequestreview-223514151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1eba9ab5-a33a-4571-b9b4-8384d2ff9973",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "@TomAugspurger : i'm struggling to resolve some formatting issues. what is the reason for calling `format_array` here. As far as I can tell is looping back round to create a `GenericArrayFormatter` instance with a `formatter` specified to pick up the display options.",
        "createdAt" : "2019-04-05T16:33:55Z",
        "updatedAt" : "2019-04-05T16:33:56Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "22e09fe1-9b18-4e95-95ee-1538d67ee64a",
        "parentId" : "1eba9ab5-a33a-4571-b9b4-8384d2ff9973",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "i guess, to be more succinct, why is `super()._format_strings()` not used?",
        "createdAt" : "2019-04-05T16:50:11Z",
        "updatedAt" : "2019-04-05T16:50:12Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "0b85af8c-c560-4022-8635-da9fb073e9c6",
        "parentId" : "1eba9ab5-a33a-4571-b9b4-8384d2ff9973",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I am not that familiar with this code, but from a quick look: calling `super()._format_strings()` would be different, as this would call `GenericArrayFormatter._format_strings`, while the generic `format_array` can still result in using custom formatters like `Datetime64(TZ)Formatter` or `Timedelta64Formatter`, depending on what the values of the underlying EA are.",
        "createdAt" : "2019-04-05T20:38:00Z",
        "updatedAt" : "2019-04-05T20:38:00Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0c740251-1a57-4539-8a3e-7121d12c5770",
        "parentId" : "1eba9ab5-a33a-4571-b9b4-8384d2ff9973",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Although that most of those custom Formatter classes don't do much special *if* formatter is specified. \r\n\r\nEg `Datetime64Formatter` has this in `_format_strings`:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/181f972d2f4e6bd5c8c33721175f68188cfa1a0d/pandas/io/formats/format.py#L1174-L1175",
        "createdAt" : "2019-04-05T20:40:50Z",
        "updatedAt" : "2019-04-05T20:40:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "738c9c70-4c30-494c-b929-6763a7a808b8",
        "parentId" : "1eba9ab5-a33a-4571-b9b4-8384d2ff9973",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "so if `ExtensionArrayFormatter` is not inheriting from `GenericArrayFormatter` but calling `format_array` to dispatch to another `...ArrayFormatter` class, why wouldn't the logic in `ExtensionArrayFormatter` be in `format_array`?",
        "createdAt" : "2019-04-05T23:43:02Z",
        "updatedAt" : "2019-04-05T23:43:03Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad113b374641b6eb1f0cb7b28d7d38e24099902",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +1132,1136 @@            array = np.asarray(values)\n\n        fmt_values = format_array(array,\n                                  formatter,\n                                  float_format=self.float_format,"
  },
  {
    "id" : "40d9ae33-88e8-4fee-8098-794466fb740d",
    "prId" : 24134,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24134#pullrequestreview-182980045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ad6e4a6-fcdc-499c-b6c3-fc2b67811688",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is so hacky, we should not be doing this",
        "createdAt" : "2018-12-09T14:11:53Z",
        "updatedAt" : "2018-12-10T18:18:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f95ae76ec24f3165f8b56ed33a92849099535e01",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +968,972 @@                fmt_values.append(float_format(v))\n            else:\n                if leading_space is False:\n                    # False specifically, so that the default is\n                    # to include a space if we get here."
  },
  {
    "id" : "4cfe0a8e-5087-45db-8a04-5b4719a07232",
    "prId" : 24134,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24134#pullrequestreview-183318502",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94d15f3c-a698-4057-8af8-a4f874b2ef59",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you document when this is set.",
        "createdAt" : "2018-12-10T17:57:17Z",
        "updatedAt" : "2018-12-10T18:18:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f95ae76ec24f3165f8b56ed33a92849099535e01",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +957,961 @@\n        is_float_type = lib.map_infer(vals, is_float) & notna(vals)\n        leading_space = self.leading_space\n        if leading_space is None:\n            leading_space = is_float_type.any()"
  },
  {
    "id" : "697b5286-4e94-4c15-9a72-3cb1e2e39e33",
    "prId" : 25202,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25202#pullrequestreview-201413558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "035c5199-1bb3-4b87-8a8c-8818716bcb1c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do\r\n``na_rep = self.na_rep`` here, then update (and use that value); so the value attached to self is not changed.",
        "createdAt" : "2019-02-08T02:38:28Z",
        "updatedAt" : "2019-02-09T03:21:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "88cbca912aba33088cee123280ce5e1c533a997d",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1060,1064 @@        def format_values_with(float_format):\n            formatter = self._value_formatter(float_format, threshold)\n\n            # default formatter leaves a space to the left when formatting\n            # floats, must be consistent for left-justifying NaNs (GH #25061)"
  },
  {
    "id" : "3abf4bf9-a580-468a-876c-aa054eea1d05",
    "prId" : 25445,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25445#pullrequestreview-220512963",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a40eb897-be62-488c-bc65-f8c4bb86249e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here on what is going on here",
        "createdAt" : "2019-03-29T12:29:40Z",
        "updatedAt" : "2019-03-29T17:14:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d8abd16a4f189b443045878b46121da935e5b8e",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +942,946 @@        def _format(x):\n            if self.na_rep is not None and is_scalar(x) and isna(x):\n                try:\n                    # try block for np.isnat specifically\n                    # determine na_rep if x is None or NaT-like"
  },
  {
    "id" : "b7c8f9c6-249e-40ca-b8ba-c27b2c08d623",
    "prId" : 25745,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25745#pullrequestreview-225302451",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd0891f3-0bb4-44b3-9069-7407d5b4cebc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can do the type check right here instead of above",
        "createdAt" : "2019-04-07T22:03:19Z",
        "updatedAt" : "2019-04-12T14:24:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "968c4403-ff10-4b77-acf2-ff54ba2824ca",
        "parentId" : "bd0891f3-0bb4-44b3-9069-7407d5b4cebc",
        "authorId" : "ef214f38-8bb9-43bf-9518-0abe37b71c11",
        "body" : "The problem with that is at that point the `values` object has been reassigned as `            values = np.array(values, dtype='object')` and is no longer a complex type but an array with the complex numbers (or floats) as strings.",
        "createdAt" : "2019-04-11T02:24:50Z",
        "updatedAt" : "2019-04-12T14:24:49Z",
        "lastEditedBy" : "ef214f38-8bb9-43bf-9518-0abe37b71c11",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fd69e9e4cd8e553470e3c5c6676ce5807cbf711",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1096,1100 @@\n            if self.fixed_width:\n                if is_complex:\n                    return _trim_zeros_complex(values, na_rep)\n                else:"
  },
  {
    "id" : "f39d91aa-49e3-4771-90eb-528e2f775cdb",
    "prId" : 26833,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26833#pullrequestreview-249546160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db600fb5-f65c-4f23-80fa-2c4f8a36eee1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why would we not have both of these in the below if/elif clause?",
        "createdAt" : "2019-06-13T18:24:14Z",
        "updatedAt" : "2019-06-13T18:24:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a59cb3c3-e079-4851-abec-329d0e282418",
        "parentId" : "db600fb5-f65c-4f23-80fa-2c4f8a36eee1",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "we're deciding which values to use here in the same way as ExtensionArrayFormatter did.\r\n\r\nthe following if/else clause is selecting the Formatter class to use based on those values.",
        "createdAt" : "2019-06-13T18:40:16Z",
        "updatedAt" : "2019-06-13T18:40:16Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "78222610-9f11-4203-9fb6-534498413027",
        "parentId" : "db600fb5-f65c-4f23-80fa-2c4f8a36eee1",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Seems like the idea is to extract the datetime64[ns] from the Categorical, and then reuse the Datetime64Formatter by going into the if / elif below.",
        "createdAt" : "2019-06-13T18:40:25Z",
        "updatedAt" : "2019-06-13T18:40:26Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2a854e58-a986-49bc-ba03-4e79cc3add4e",
        "parentId" : "db600fb5-f65c-4f23-80fa-2c4f8a36eee1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes i get the idea, trying to see if the logic can somehow be simpler",
        "createdAt" : "2019-06-13T18:45:51Z",
        "updatedAt" : "2019-06-13T18:45:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5ac2759f-d750-4f30-b3f6-4354d0adf1c1",
        "parentId" : "db600fb5-f65c-4f23-80fa-2c4f8a36eee1",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "We could potentially define `Categorical._formatter`, which would provide the appropriate scalar formatter based on it's `.dtype`?  Not sure if that'll work or not.",
        "createdAt" : "2019-06-13T18:54:03Z",
        "updatedAt" : "2019-06-13T18:54:06Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a401f562-c1b1-4912-b622-74a2254fbeb8",
        "parentId" : "db600fb5-f65c-4f23-80fa-2c4f8a36eee1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm we actually define this\r\n```\r\n    def _formatter(self, boxed=False):\r\n        # Defer to CategoricalFormatter's formatter.\r\n        return None\r\n```\r\n\r\n",
        "createdAt" : "2019-06-13T18:57:01Z",
        "updatedAt" : "2019-06-13T18:57:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a38c792f-515a-454c-82aa-b66bef35033d",
        "parentId" : "db600fb5-f65c-4f23-80fa-2c4f8a36eee1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe we are not really using this attribute fully?",
        "createdAt" : "2019-06-13T18:57:19Z",
        "updatedAt" : "2019-06-13T18:57:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e0898224-15c6-4201-8df4-9735a0d27318",
        "parentId" : "db600fb5-f65c-4f23-80fa-2c4f8a36eee1",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "format_array is used by `to_string`, `to_html`, `_repr_html`, `to_latex` and for the `repr` of many objects. \r\n\r\nit should in theory be simpler and more generic.\r\n\r\nit may be beneficial to move some logic out into the objects themselves so that `format_array` can work with any extension array and not require this special casing. (i think that is outside of the scope of this PR)\r\n\r\nThis PR is intended to remove the call to `format_array` from within `ExtensionArrayFormatter` so that the `formatter` parameter of `format_array` can be used for custom formatters wihout defaults being applied.\r\n\r\n`ExtensionArrayFormatter` was dispatching back to `format_array` to then dispatch to the appropriate (another) Formatter. \r\n\r\n\r\n> maybe we are not really using this attribute fully?\r\n\r\nagreed. many just return None to defer to the Formatters.",
        "createdAt" : "2019-06-13T19:01:45Z",
        "updatedAt" : "2019-06-13T19:01:45Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "a777fa4100a51be42f0c65fce1e60895cb624d0f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +884,888 @@            values = values._values\n\n        if is_categorical_dtype(values.dtype):\n            # Categorical is special for now, so that we can preserve tzinfo\n            values = values.get_values()"
  },
  {
    "id" : "e0853078-9fb4-4131-9145-bbac64c08fd5",
    "prId" : 26874,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26874#pullrequestreview-250213358",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fcfe849-46cd-4c80-8c10-64e4dcac749a",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "not a big deal, but this attribute should exist unconditionally",
        "createdAt" : "2019-06-16T02:46:47Z",
        "updatedAt" : "2019-06-16T02:46:47Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e854fa247adc4b27ae649ccc301eb3c1586a3337",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +193,197 @@            self.tr_row_num = row_num\n        else:\n            self.tr_row_num = None\n        self.tr_series = series\n        self.truncate_v = truncate_v"
  },
  {
    "id" : "04d1595c-4862-482d-b85f-f6a7bac28d84",
    "prId" : 27027,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27027#pullrequestreview-255461190",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "250d235c-948f-49f9-98e7-d244275f49df",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would even move it down one step further to `to_native_types` (there you don't need the if check, other part of the code there is already doing `ravel()` as well), but no strong feelings if you want to keep it here",
        "createdAt" : "2019-06-27T20:22:41Z",
        "updatedAt" : "2019-06-27T20:28:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a6c2254f-ec9f-497e-953b-85d44b8d06a1",
        "parentId" : "250d235c-948f-49f9-98e7-d244275f49df",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jbrockmendel ",
        "createdAt" : "2019-06-27T20:26:13Z",
        "updatedAt" : "2019-06-27T20:28:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f99a00a907f9bb114d6c1d7b5fda84e94671c00",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1331,1335 @@        # We don't actaully care about the order of values, and DatetimeIndex\n        #  only accepts 1D values\n        values = values.ravel()\n\n    is_dates_only = _is_dates_only(values)"
  },
  {
    "id" : "e85ca4bd-4054-4a63-a725-641cbbd53f13",
    "prId" : 27095,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27095#pullrequestreview-257246753",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cfd5857-c2a9-4f96-ac01-d6f7ade88227",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some comments on what the procedure is here",
        "createdAt" : "2019-06-28T14:47:32Z",
        "updatedAt" : "2019-07-03T20:44:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7cad921c-56d5-4d4b-ba97-0cb08321c946",
        "parentId" : "0cfd5857-c2a9-4f96-ac01-d6f7ade88227",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "done",
        "createdAt" : "2019-07-03T03:40:32Z",
        "updatedAt" : "2019-07-03T20:44:39Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "577c5cf6daaa47cec526fab78d7a61fadb4c13ee",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +184,188 @@    def _chk_truncate(self):\n        from pandas.core.reshape.concat import concat\n        min_rows = self.min_rows\n        max_rows = self.max_rows\n        # truncation determined by max_rows, actual truncated number of rows"
  },
  {
    "id" : "6669f18f-5ef8-43f4-a2bf-58edc53ca4c3",
    "prId" : 27095,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27095#pullrequestreview-257745956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "525dbe7a-a809-492c-bf0a-1cdb76f62b74",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2019-07-03T21:35:41Z",
        "updatedAt" : "2019-07-03T21:35:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "577c5cf6daaa47cec526fab78d7a61fadb4c13ee",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +80,84 @@        max_rows : int, optional\n            Maximum number of rows to display in the console.\n        min_rows : int, optional\n            The number of rows to display in the console in a truncated repr\n            (when number of rows is above `max_rows`)."
  },
  {
    "id" : "bd40a064-f931-4095-a34d-e61a13c4a553",
    "prId" : 27418,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27418#pullrequestreview-264516307",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8923fb4d-0205-4066-871a-0a361d47849b",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Is this required? Generally we try to avoid cast and I'm surprised MyPy can't narrow the type down here from None. \r\n\r\nIf it's fully required does making line 238 say `max_rows is not None and ...` get around that?",
        "createdAt" : "2019-07-20T21:52:19Z",
        "updatedAt" : "2019-07-20T22:13:22Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "8183b1a0-d4a7-4bf6-a249-5e10e89e7959",
        "parentId" : "8923fb4d-0205-4066-871a-0a361d47849b",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> If it's fully required does making line 238 say `max_rows is not None and ...` get around that?\r\n\r\nno. gives `pandas\\io\\formats\\format.py:249: error: Unsupported operand types for // (\"None\" and \"int\")` and there _might_ be risk in implementing this differently anyway?\r\n\r\n> Generally we try to avoid cast\r\n\r\nwell I would have agreed with you when I started this, but after this PR, I think that adding type annotations should be just that and any refactoring or code cleanup should be deferred to a follow on PR.\r\n\r\n> I'm surprised MyPy can't narrow the type down here from None.\r\n\r\nAgreed. hence the numerous iterations to try and avoid cast originally.",
        "createdAt" : "2019-07-20T22:09:22Z",
        "updatedAt" : "2019-07-20T22:13:22Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "b630c994-fe77-45bd-a6b6-cd7575025ed0",
        "parentId" : "8923fb4d-0205-4066-871a-0a361d47849b",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm OK yea seems like a bug / gap with mypy inference then. Can always come back to clean up",
        "createdAt" : "2019-07-21T01:06:18Z",
        "updatedAt" : "2019-07-21T01:06:19Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd3c46dde867b30f474b8ae805d73e4d6c2bd435",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +239,243 @@        series = self.series\n        if truncate_v:\n            max_rows = cast(int, max_rows)\n            if min_rows:\n                # if min_rows is set (not None or 0), set max_rows to minimum"
  },
  {
    "id" : "bff02d4c-6f63-45bd-b382-0bfae31fc2f2",
    "prId" : 27512,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27512#pullrequestreview-265712182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2815c26b-85f6-4431-8801-2987b0cafd83",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is a Union? why just ndarray?",
        "createdAt" : "2019-07-23T21:59:50Z",
        "updatedAt" : "2019-07-23T22:01:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "00e30fa0-ba21-4cf4-a81f-54dad1926dcf",
        "parentId" : "2815c26b-85f6-4431-8801-2987b0cafd83",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "it depends on `self.fixed_width` L1303\r\n\r\n`_trim_zeros_complex` L1688 returns List[str]\r\n\r\n`_trim_zeros_float` L1706 returns List[str]\r\n\r\notherwise L1309 returns ndarray\r\n\r\n\r\n\r\n",
        "createdAt" : "2019-07-23T22:15:37Z",
        "updatedAt" : "2019-07-23T22:15:37Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "6898f55c-eb0e-4a46-be62-5b542a869e18",
        "parentId" : "2815c26b-85f6-4431-8801-2987b0cafd83",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "grr really? this just sounds wrong, can you cahnge those 2 to return an ndarray(object) if needed; these should all have a consistent signature.",
        "createdAt" : "2019-07-23T22:21:16Z",
        "updatedAt" : "2019-07-23T22:21:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6c0580a9-4677-4ff1-b5a0-0694d7fd573a",
        "parentId" : "2815c26b-85f6-4431-8801-2987b0cafd83",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I really don't think we should be refactoring at the same time as adding type hints.\r\n\r\nit's ok when someone is adding new code or modifying existing code.\r\n\r\nbut to benefit from the network effect of typing, i want to get this merged and get on with typing call sites and typing the imported functions.\r\n\r\nrefactoring can be done in parallel.\r\n\r\n",
        "createdAt" : "2019-07-23T22:30:22Z",
        "updatedAt" : "2019-07-23T22:30:22Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "deeb59a5-a44d-4912-910b-3ca1862e275d",
        "parentId" : "2815c26b-85f6-4431-8801-2987b0cafd83",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok sure. its nice that the typing surfaces things like this. pls make an issue (or PR even better!)",
        "createdAt" : "2019-07-23T22:34:00Z",
        "updatedAt" : "2019-07-23T22:34:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "63aa725e1a80354aa26bdd1a210d7bee18ab424b",
    "line" : 427,
    "diffHunk" : "@@ -1,1 +1263,1267 @@        return formatter\n\n    def get_result_as_array(self) -> Union[ndarray, List[str]]:\n        \"\"\"\n        Returns the float values converted into strings using"
  },
  {
    "id" : "98b2551c-a333-4122-82eb-bc40d05428a2",
    "prId" : 27512,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27512#pullrequestreview-265700658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c82a5f5-fd7c-4562-9b68-c4898a56cd0d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "these are not just strings?",
        "createdAt" : "2019-07-23T22:00:42Z",
        "updatedAt" : "2019-07-23T22:01:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "63aa725e1a80354aa26bdd1a210d7bee18ab424b",
    "line" : 516,
    "diffHunk" : "@@ -1,1 +1516,1520 @@def _format_datetime64(\n    x: Union[NaTType, Timestamp],\n    tz: Optional[Union[tzfile, tzutc]] = None,\n    nat_rep: str = \"NaT\",\n) -> str:"
  },
  {
    "id" : "b1b34d03-0c96-4a6f-a2a3-13ae7a1f02ae",
    "prId" : 27512,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27512#pullrequestreview-266336858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6d40d45-062a-4368-aa05-c75005c320ed",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "really?",
        "createdAt" : "2019-07-23T22:00:53Z",
        "updatedAt" : "2019-07-23T22:01:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6167aac2-c9db-4525-aaf2-e09c6b5954ce",
        "parentId" : "e6d40d45-062a-4368-aa05-c75005c320ed",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "so due the fact that `_format_native_types` in `pandas/core/indexes/timedeltas.py` uses `Timedelta64Formatter` directly, this should account for the `TimedeltaIndex`. ",
        "createdAt" : "2019-07-24T23:33:06Z",
        "updatedAt" : "2019-07-24T23:33:06Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "63aa725e1a80354aa26bdd1a210d7bee18ab424b",
    "line" : 571,
    "diffHunk" : "@@ -1,1 +1591,1595 @@    def __init__(\n        self,\n        values: Union[ndarray, TimedeltaIndex],\n        nat_rep: str = \"NaT\",\n        box: bool = False,"
  },
  {
    "id" : "72d0c177-2164-4b1f-9af1-8befdb1008d6",
    "prId" : 27512,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27512#pullrequestreview-266336878",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aaf47874-f2bd-44fa-a93b-cb12e45f98db",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "really?",
        "createdAt" : "2019-07-23T22:01:11Z",
        "updatedAt" : "2019-07-23T22:01:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cd5e38d1-8820-41e4-9a34-10f70265765d",
        "parentId" : "aaf47874-f2bd-44fa-a93b-cb12e45f98db",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "similiarly, _get_format_timedelta64 is imported and used by `core\\arrays\\timedeltas.py` and `core\\indexes\\timedeltas.py`",
        "createdAt" : "2019-07-24T23:33:09Z",
        "updatedAt" : "2019-07-24T23:33:10Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "63aa725e1a80354aa26bdd1a210d7bee18ab424b",
    "line" : 591,
    "diffHunk" : "@@ -1,1 +1609,1613 @@\ndef _get_format_timedelta64(\n    values: Union[ndarray, TimedeltaIndex, TimedeltaArray],\n    nat_rep: str = \"NaT\",\n    box: bool = False,"
  },
  {
    "id" : "8ee42b46-ed67-441b-93e6-8b5b07c4592e",
    "prId" : 27577,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27577#pullrequestreview-266324601",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dfea7f60-3741-4d25-a090-bac205e0b44f",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "this is the most relevant change here.\r\n\r\nreturn type now consistent with parent class and other formatters.\r\n\r\nmypy should have picked this up. but since we don't have numpy stubs, all numpy types resolve to Any",
        "createdAt" : "2019-07-24T22:48:24Z",
        "updatedAt" : "2019-07-24T23:43:32Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "91ee50ab9118e9044f967f9eb0863ccc412c8bd3",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +1604,1608 @@            self.values, nat_rep=self.nat_rep, box=self.box\n        )\n        return [formatter(x) for x in self.values]\n\n"
  },
  {
    "id" : "1d1508b7-31ab-4411-a80c-df4779dcf053",
    "prId" : 27577,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27577#pullrequestreview-266764739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de9ac5d3-dfe6-4744-9524-f62992703814",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use copy=False here (or asarray)",
        "createdAt" : "2019-07-25T17:05:06Z",
        "updatedAt" : "2019-07-25T17:05:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1b34fdd5-200e-4508-81ea-f7d2d2d1e572",
        "parentId" : "de9ac5d3-dfe6-4744-9524-f62992703814",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "has been changed to asarray already?",
        "createdAt" : "2019-07-25T17:09:20Z",
        "updatedAt" : "2019-07-25T17:09:21Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "91ee50ab9118e9044f967f9eb0863ccc412c8bd3",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1303,1307 @@                else:\n                    result = _trim_zeros_float(values, na_rep)\n                return np.asarray(result, dtype=\"object\")\n\n            return values"
  },
  {
    "id" : "110988d6-5e5c-4e0a-814d-99fe107691d0",
    "prId" : 27598,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27598#pullrequestreview-270176680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa215a44-5ec4-4506-81ca-b251bd773b46",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you followup with some doc-strings for these",
        "createdAt" : "2019-08-02T13:23:08Z",
        "updatedAt" : "2019-08-02T13:23:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c5aefc31-e975-451f-8181-73392b35f2da",
        "parentId" : "aa215a44-5ec4-4506-81ca-b251bd773b46",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "sure",
        "createdAt" : "2019-08-02T13:27:27Z",
        "updatedAt" : "2019-08-02T13:27:28Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "171b03a0fe23673bb778acbe8652e3b2047b7179",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +493,497 @@    def get_result(\n        self,\n        buf: Optional[FilePathOrBuffer[str]] = None,\n        encoding: Optional[str] = None,\n    ) -> Optional[str]:"
  },
  {
    "id" : "f7cf2e82-479d-43d0-b547-1815fcfe1f0f",
    "prId" : 28342,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28342#pullrequestreview-285241962",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebaafd3f-7293-402b-8886-6ae3535c592c",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "OK, so your determined not to remove!\r\n\r\nin timestamps.pyx:\r\n\r\ntz_convert: tz : str, pytz.timezone, dateutil.tz.tzfile or None\r\n\r\ntz_localize: tz : str, pytz.timezone, dateutil.tz.tzfile or None\r\n\r\nin tz_convert, tz on used in Timestamp constructor:\r\n\r\nreturn Timestamp(self.value, tz=tz, freq=self.freq)\r\n\r\nTimestamp: tz : str, pytz.timezone, dateutil.tz.tzfile or None\r\n\r\nin tz_localize, tz used in Timestamp constructor and also:\r\n\r\nmaybe_get_tz(tz): (Maybe) Construct a timezone object from a string. If tz is a string, use\r\n    it to construct a timezone object. Otherwise, just return tz.\r\n\r\nit'll be alot easier once the libs are annotated, mypy will do the checks for you. \r\n\r\n",
        "createdAt" : "2019-09-08T23:33:24Z",
        "updatedAt" : "2019-09-08T23:33:25Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "34591ea8-888b-4bfa-9243-98af194c6716",
        "parentId" : "ebaafd3f-7293-402b-8886-6ae3535c592c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I looked at removing, but it seemed weird to have the function have everything _but_ that one thing annotated.  I'll defer to you if you think removing is better.",
        "createdAt" : "2019-09-08T23:42:49Z",
        "updatedAt" : "2019-09-08T23:42:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "aea77aae-b792-4529-9430-45fb83f76b62",
        "parentId" : "ebaafd3f-7293-402b-8886-6ae3535c592c",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "because in testing, MonkeyType only saw \"tzfile\", \"tzutc\", then tzinfo is probably fine. it depends how the lib gets annotated, otherwise mypy will raise errors here if/when we add the stub and add the types.\r\n\r\nstrictly speaking this function could also take a string, but as used internally MonkeyType didn't see this function being called with that type. \r\n\r\ni'm ok with tzinfo as it helps document the function for now. ",
        "createdAt" : "2019-09-08T23:50:40Z",
        "updatedAt" : "2019-09-08T23:50:40Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "a34564f67938a146779f4e57cb5597e1d25c4da4",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1552,1556 @@\ndef _format_datetime64(\n    x: Union[NaTType, Timestamp], tz: Optional[tzinfo] = None, nat_rep: str = \"NaT\"\n) -> str:\n    if x is None or (is_scalar(x) and isna(x)):"
  },
  {
    "id" : "bf1e5aeb-0dab-4a6c-b694-7ccf47a15a84",
    "prId" : 28632,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28632#pullrequestreview-297862756",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9aeef73-cd6d-4cb9-b72d-03edd10d8b60",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this logic is quite complicated, can you not do\r\n```\r\nif formaters is not None and not do_len_comparision:\r\n     raise....\r\nself.formatters = formatters or {}\r\n```\r\n\r\n?",
        "createdAt" : "2019-10-05T22:43:53Z",
        "updatedAt" : "2019-10-07T13:53:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "be6639e8-649b-4d15-8878-bbeb5d72be16",
        "parentId" : "b9aeef73-cd6d-4cb9-b72d-03edd10d8b60",
        "authorId" : "cd48b8d3-ce53-4d6e-b76e-9f70f342b157",
        "body" : "Is it better now?",
        "createdAt" : "2019-10-06T21:49:28Z",
        "updatedAt" : "2019-10-07T13:53:29Z",
        "lastEditedBy" : "cd48b8d3-ce53-4d6e-b76e-9f70f342b157",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb144ebfb329bb3b145f4a8f2cac60ad2589b83e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +572,576 @@                    \" DataFrame number of columns({dlen})\"\n                ).format(flen=len(formatters), dlen=len(frame.columns))\n            )\n        self.na_rep = na_rep\n        self.decimal = decimal"
  },
  {
    "id" : "edbc0375-1ee0-4810-8250-96f6a0eb61ea",
    "prId" : 28951,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28951#pullrequestreview-302941516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5cf9b50-520d-401b-9d5d-9677140d9069",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Should we be raising if both `buf` and `encoding` are `None`? I vaguely recall discussing that with @simonjayhawkins not sure where we landed",
        "createdAt" : "2019-10-14T16:07:53Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "8cc64d86-b29e-41eb-ba04-ee985f937941",
        "parentId" : "d5cf9b50-520d-401b-9d5d-9677140d9069",
        "authorId" : "145f6b25-3ffb-418f-8728-6f6e56eb7eca",
        "body" : "Should I use \r\n```python\r\nif (buf is None) and (encoding is None):\r\n         raise ValueErorr('Both buf and encoding parameter are None')\r\n```\r\nor create custom exception class.\r\n",
        "createdAt" : "2019-10-14T17:59:18Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "145f6b25-3ffb-418f-8728-6f6e56eb7eca",
        "tags" : [
        ]
      },
      {
        "id" : "9ea512eb-3345-45a7-a40a-a17661d9c067",
        "parentId" : "d5cf9b50-520d-401b-9d5d-9677140d9069",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> Should we be raising if both `buf` and `encoding` are `None`? I vaguely recall discussing that with @simonjayhawkins not sure where we landed\r\n\r\n@WillAyd once #28692 is merged we can combine the tests and add some validation. see https://github.com/pandas-dev/pandas/pull/28951#pullrequestreview-301044473\r\n",
        "createdAt" : "2019-10-15T18:57:41Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "763ff332-7a7f-45a8-824e-7d172053cac7",
        "parentId" : "d5cf9b50-520d-401b-9d5d-9677140d9069",
        "authorId" : "145f6b25-3ffb-418f-8728-6f6e56eb7eca",
        "body" : "@simonjayhawkins Should that be a part of this PR itself.",
        "createdAt" : "2019-10-15T19:35:49Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "145f6b25-3ffb-418f-8728-6f6e56eb7eca",
        "tags" : [
        ]
      },
      {
        "id" : "a0720053-ba07-40fa-9a73-aa685fbc8c09",
        "parentId" : "d5cf9b50-520d-401b-9d5d-9677140d9069",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "eventually.\r\n\r\nI think best to put this on hold until #28692 is merged to ensure consistency. see https://github.com/pandas-dev/pandas/pull/28951#pullrequestreview-301044473",
        "createdAt" : "2019-10-15T20:06:51Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "96927a6b-3b14-40c3-bc0f-2996eef8684d",
        "parentId" : "d5cf9b50-520d-401b-9d5d-9677140d9069",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Looks like the other PR is merged - should we address this now or were you thinking that as a separate exercise @simonjayhawkins ?",
        "createdAt" : "2019-10-16T23:58:43Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8917decc3adf7f7f4f40e6b2debaa820f9776f5",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +903,907 @@        encoding: Optional[str] = None,\n    ) -> Optional[str]:\n        return self.get_result(buf=buf, encoding=encoding)\n\n    def to_latex("
  },
  {
    "id" : "370d9a16-d92c-452a-9a3a-2c909050d439",
    "prId" : 28951,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28951#pullrequestreview-304229152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab17905f-f30f-4894-97bb-244299795beb",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I _think_ you could maybe add the check here instead.\r\n\r\nsomething like \r\n\r\n```\r\nelif not isinstance(buf, str):\r\n   raise ...\r\n```",
        "createdAt" : "2019-10-19T19:58:48Z",
        "updatedAt" : "2019-10-22T18:43:52Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8917decc3adf7f7f4f40e6b2debaa820f9776f5",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +485,489 @@\n        if encoding is None:\n            encoding = \"utf-8\"\n        elif not isinstance(buf, str):\n            raise ValueError(\"buf is not a file name and encoding is specified.\")"
  },
  {
    "id" : "23c7188c-a188-4849-9c29-c8dd3db1414e",
    "prId" : 30619,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30619#pullrequestreview-337725315",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb4d28a1-c3c6-4581-a864-37d59b5d9514",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "length takes 'truncate'. used by options but not part of public api",
        "createdAt" : "2020-01-02T15:59:43Z",
        "updatedAt" : "2020-01-02T16:11:33Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "264256e1d61ddd9fc9309388b821a60450af2b5e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +232,236 @@        series: \"Series\",\n        buf: Optional[IO[str]] = None,\n        length: Union[bool, str] = True,\n        header: bool = True,\n        index: bool = True,"
  },
  {
    "id" : "58febd28-b5e2-4cf9-a48d-779f1f03e80f",
    "prId" : 30619,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30619#pullrequestreview-337725687",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94ac6467-b6f5-49f9-89ca-6c70b1069650",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "show_dimensions can also accept \"truncate\" ",
        "createdAt" : "2020-01-02T16:00:27Z",
        "updatedAt" : "2020-01-02T16:11:33Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "264256e1d61ddd9fc9309388b821a60450af2b5e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +451,455 @@class TableFormatter:\n\n    show_dimensions: Union[bool, str]\n    is_truncated: bool\n    formatters: formatters_type"
  },
  {
    "id" : "6ef0025c-11e1-46c9-9bba-3359f353516f",
    "prId" : 30821,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30821#pullrequestreview-340760369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31d489d3-b42c-4ccd-8dc6-eae8a293370b",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This means that the `formatter` function needs to be able to handle NAs, which now is maybe not the case?",
        "createdAt" : "2020-01-09T19:21:56Z",
        "updatedAt" : "2020-01-09T19:21:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9454e355-6deb-4597-a5d1-8f7a544471ef",
        "parentId" : "31d489d3-b42c-4ccd-8dc6-eae8a293370b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Will do a PR for this, I think this breaks geopandas",
        "createdAt" : "2020-01-09T19:26:10Z",
        "updatedAt" : "2020-01-09T19:26:10Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c51c5d7304d82b511ca581c7712e6501f9900cb2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1231,1235 @@                        return \"None\"\n                    elif x is NA:\n                        return formatter(x)\n                    elif x is NaT or np.isnat(x):\n                        return \"NaT\""
  },
  {
    "id" : "41e235d4-21b8-482a-892d-da78f43240a7",
    "prId" : 31126,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31126#pullrequestreview-344980618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c3d7ad3-c893-4e2d-b7c1-785876d529be",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't we have a ABCDatetimelike ?",
        "createdAt" : "2020-01-18T18:59:07Z",
        "updatedAt" : "2020-01-22T21:38:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c46fbb5d-c6a8-495a-93f1-069f794ec4fe",
        "parentId" : "9c3d7ad3-c893-4e2d-b7c1-785876d529be",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "No, and I only found two instances of this pattern.",
        "createdAt" : "2020-01-19T06:47:05Z",
        "updatedAt" : "2020-01-22T21:38:22Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "745d7e1f4b60fa508e8ab755075b0319a45505ab",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +300,304 @@        if getattr(self.series.index, \"freq\", None) is not None:\n            assert isinstance(\n                self.series.index, (ABCDatetimeIndex, ABCPeriodIndex, ABCTimedeltaIndex)\n            )\n            footer += \"Freq: {freq}\".format(freq=self.series.index.freqstr)"
  },
  {
    "id" : "01724bc6-5432-4156-9dd5-60b3b5bf0c87",
    "prId" : 32034,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32034#pullrequestreview-361583660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7053a91a-d9f3-4a03-a7b7-c04fa1369f57",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I _think_ this may be equivalent to\r\n```suggestion\r\n            result = repr(result)\r\n```",
        "createdAt" : "2020-02-16T10:16:14Z",
        "updatedAt" : "2020-02-20T05:51:54Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "89df3aaf-2c83-4c72-a690-cfedcd4dc3e5",
        "parentId" : "7053a91a-d9f3-4a03-a7b7-c04fa1369f57",
        "authorId" : "90eca452-5b1d-4bd1-ba02-baf897ee8e18",
        "body" : "I think no because the extra single quotes are needed",
        "createdAt" : "2020-02-16T14:11:24Z",
        "updatedAt" : "2020-02-20T05:51:54Z",
        "lastEditedBy" : "90eca452-5b1d-4bd1-ba02-baf897ee8e18",
        "tags" : [
        ]
      },
      {
        "id" : "2cffa83e-9071-445a-ab27-e91c22158805",
        "parentId" : "7053a91a-d9f3-4a03-a7b7-c04fa1369f57",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "Oh that's okay, the default way ```repr``` works is to wrap the string in extra quotes for example:\r\n\r\n```python\r\ntxt = \"foo\"\r\n\r\nstr(txt) # foo\r\nrepr(txt) # 'foo'\r\n```",
        "createdAt" : "2020-02-16T14:21:05Z",
        "updatedAt" : "2020-02-20T05:51:54Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "01b15e63-f3be-49e2-bfa1-38debc3efefe",
        "parentId" : "7053a91a-d9f3-4a03-a7b7-c04fa1369f57",
        "authorId" : "90eca452-5b1d-4bd1-ba02-baf897ee8e18",
        "body" : "TIL",
        "createdAt" : "2020-02-17T03:08:30Z",
        "updatedAt" : "2020-02-20T05:51:54Z",
        "lastEditedBy" : "90eca452-5b1d-4bd1-ba02-baf897ee8e18",
        "tags" : [
        ]
      },
      {
        "id" : "8e92b2f5-e7b7-4704-82e6-bca1473d0078",
        "parentId" : "7053a91a-d9f3-4a03-a7b7-c04fa1369f57",
        "authorId" : "90eca452-5b1d-4bd1-ba02-baf897ee8e18",
        "body" : "@WillAyd this thread may explain the reasons of the change",
        "createdAt" : "2020-02-19T03:27:02Z",
        "updatedAt" : "2020-02-20T05:51:54Z",
        "lastEditedBy" : "90eca452-5b1d-4bd1-ba02-baf897ee8e18",
        "tags" : [
        ]
      },
      {
        "id" : "f6a2d1d5-4cd8-4228-aa51-38d197c7f101",
        "parentId" : "7053a91a-d9f3-4a03-a7b7-c04fa1369f57",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "We should use the quotes as done originally; this isn't immediately clear to other readers that we would choose `repr` just to have free quoting and is just confusing.",
        "createdAt" : "2020-02-20T01:43:20Z",
        "updatedAt" : "2020-02-20T05:51:54Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7bfe07c5d925298d25bb00108976a8dac70f5da",
    "line" : 162,
    "diffHunk" : "@@ -1,1 +1704,1708 @@        result = x._repr_base(format=format)\n        if box:\n            result = f\"'{result}'\"\n        return result\n"
  },
  {
    "id" : "8c2b8c2d-9306-4c34-9c32-7bcc0a8a1c62",
    "prId" : 32034,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32034#pullrequestreview-362296536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02202556-2bb3-4159-a54c-e3277c998723",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I don't think this is totally equivalent?\r\n\r\n```python\r\n>>> series_name = None\r\n>>> f\"Name: {series_name}\"\r\n'Name: None'\r\n```",
        "createdAt" : "2020-02-20T22:40:53Z",
        "updatedAt" : "2020-02-20T22:41:14Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "1bcf61a4-1cbe-4f0b-b485-51bcd1806697",
        "parentId" : "02202556-2bb3-4159-a54c-e3277c998723",
        "authorId" : "90eca452-5b1d-4bd1-ba02-baf897ee8e18",
        "body" : "Take a look to line 305",
        "createdAt" : "2020-02-20T23:00:45Z",
        "updatedAt" : "2020-02-20T23:00:45Z",
        "lastEditedBy" : "90eca452-5b1d-4bd1-ba02-baf897ee8e18",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7bfe07c5d925298d25bb00108976a8dac70f5da",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +308,312 @@\n            series_name = pprint_thing(name, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n            footer += f\"Name: {series_name}\"\n\n        if self.length is True or (self.length == \"truncate\" and self.truncate_v):"
  }
]