[
  {
    "id" : "4031bfa4-dad3-4312-8901-62c6c83669eb",
    "prId" : 17821,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17821#pullrequestreview-67892084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e08b38ac-a678-4615-9efd-755d09a5c6fe",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Not sure if this is overkill, but you can do `encoding = self.encoding or ('ascii' if compat.PY2 else 'utf-8')` to condense this whole block of if-else logic.",
        "createdAt" : "2017-10-09T05:31:03Z",
        "updatedAt" : "2017-10-11T00:09:12Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      },
      {
        "id" : "074e0642-d5a9-41cf-a50a-855f928a6602",
        "parentId" : "e08b38ac-a678-4615-9efd-755d09a5c6fe",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "IMO, matter of taste here.  I prefer the block-logic because its easier to read I find.",
        "createdAt" : "2017-10-09T06:04:37Z",
        "updatedAt" : "2017-10-11T00:09:12Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "c222ee82eb60cab4c35b89f5dd5cb6c23c3119b7",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1580,1584 @@                encoding = 'utf-8'\n        else:\n            encoding = self.encoding\n\n        if hasattr(self.path_or_buf, 'write'):"
  },
  {
    "id" : "4843997b-68a2-47e2-8ddc-87f217286b3f",
    "prId" : 18083,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18083#pullrequestreview-74764627",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d46e2ed2-ac47-426e-b4d4-936234ea743e",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@jorisvandenbossche Thoughts on this one? The multiline `{ options... }` format was giving warnings (block quotes I think?). I couldn't figure out the correct values in the formatting, so I just made a list.",
        "createdAt" : "2017-11-07T13:38:36Z",
        "updatedAt" : "2017-11-08T22:40:21Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "89d62ed3-e61b-4be9-926b-40d8822355ab",
        "parentId" : "d46e2ed2-ac47-426e-b4d4-936234ea743e",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "See https://github.com/numpy/numpydoc/issues/87. In the end I think the conclusion is that using `\\` is the best way to deal with multi-line type specifications. \r\n\r\nOn the other hand, if the list becomes too long of all options, I think it is good to not list them all in the type specification (but keep it there to simply 'string') but give more explanation in the description.",
        "createdAt" : "2017-11-07T14:28:14Z",
        "updatedAt" : "2017-11-08T22:40:21Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1b25e91d3636105b125b1aaa801f9e795c37fbb",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +90,94 @@        of the box. Valid values are\n\n        * left\n        * right\n        * center"
  },
  {
    "id" : "27152d7f-b1a1-474c-af74-d4ea44fcc09d",
    "prId" : 22308,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22308#pullrequestreview-145998633",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "093128fc-d133-46d4-8c2b-f912b6556946",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you see if u can change ``fixed_width`` to a cached property instead of setting it (need to remove from the signature as well)",
        "createdAt" : "2018-08-13T11:35:31Z",
        "updatedAt" : "2018-11-26T12:27:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "18679e2d-60c2-4132-b85a-807e2705e853",
        "parentId" : "093128fc-d133-46d4-8c2b-f912b6556946",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this possible?",
        "createdAt" : "2018-08-14T00:07:35Z",
        "updatedAt" : "2018-11-26T12:27:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "516d2bdb-f844-4c77-9030-bd416999902a",
        "parentId" : "093128fc-d133-46d4-8c2b-f912b6556946",
        "authorId" : "9d35d7cc-818e-4d6a-aa21-dbe273b5e112",
        "body" : "There is a good chance I'm not understanding the comment, but I'm not sure we can set this as a cached property (using the `cache_readonly` decorator?) since it is set in the base class. As I say I might be missing something...",
        "createdAt" : "2018-08-14T08:19:27Z",
        "updatedAt" : "2018-11-26T12:27:12Z",
        "lastEditedBy" : "9d35d7cc-818e-4d6a-aa21-dbe273b5e112",
        "tags" : [
        ]
      },
      {
        "id" : "a91166a3-ea22-4caa-9d69-4cbaeee96b9f",
        "parentId" : "093128fc-d133-46d4-8c2b-f912b6556946",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can set it in each of the subclasses. I just don't think we actually need this. try doing this as a property first to see if it works.",
        "createdAt" : "2018-08-14T10:11:56Z",
        "updatedAt" : "2018-11-26T12:27:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9666bd59a6e2b0ac9ca6ba0f620cb559f7a4e26",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +962,966 @@        if self.float_format is not None and self.formatter is None:\n            # GH21625, GH22270\n            self.fixed_width = False\n            if callable(self.float_format):\n                self.formatter = self.float_format"
  },
  {
    "id" : "392633e5-eff7-44f0-9673-acc1dd2e2bba",
    "prId" : 23601,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23601#pullrequestreview-181244368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8aa9bc36-a481-4806-a9e4-78e4651cc3fc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we need a TODO here? this is until DatetimeArray is fully pushed?",
        "createdAt" : "2018-12-04T00:00:07Z",
        "updatedAt" : "2018-12-04T00:00:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "299b5328-dc3b-4194-8306-811651e31e03",
        "parentId" : "8aa9bc36-a481-4806-a9e4-78e4651cc3fc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "That depends on whether we're willing to change `__array__` for datetime-backed series / index (right now . I'm writing up an issue now to discuss that specific point.)",
        "createdAt" : "2018-12-04T12:36:51Z",
        "updatedAt" : "2018-12-04T12:37:22Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "a7053515-5a8d-4e13-925d-3c61d1725fa4",
        "parentId" : "8aa9bc36-a481-4806-a9e4-78e4651cc3fc",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "https://github.com/pandas-dev/pandas/issues/23569#issuecomment-444091967 for that.",
        "createdAt" : "2018-12-04T13:03:50Z",
        "updatedAt" : "2018-12-04T13:03:51Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad113b374641b6eb1f0cb7b28d7d38e24099902",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +1127,1131 @@\n        if is_categorical_dtype(values.dtype):\n            # Categorical is special for now, so that we can preserve tzinfo\n            array = values.get_values()\n        else:"
  },
  {
    "id" : "4f6d5cf3-2ab0-415d-8003-4dda07cf3967",
    "prId" : 23601,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23601#pullrequestreview-223514151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1eba9ab5-a33a-4571-b9b4-8384d2ff9973",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "@TomAugspurger : i'm struggling to resolve some formatting issues. what is the reason for calling `format_array` here. As far as I can tell is looping back round to create a `GenericArrayFormatter` instance with a `formatter` specified to pick up the display options.",
        "createdAt" : "2019-04-05T16:33:55Z",
        "updatedAt" : "2019-04-05T16:33:56Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "22e09fe1-9b18-4e95-95ee-1538d67ee64a",
        "parentId" : "1eba9ab5-a33a-4571-b9b4-8384d2ff9973",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "i guess, to be more succinct, why is `super()._format_strings()` not used?",
        "createdAt" : "2019-04-05T16:50:11Z",
        "updatedAt" : "2019-04-05T16:50:12Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "0b85af8c-c560-4022-8635-da9fb073e9c6",
        "parentId" : "1eba9ab5-a33a-4571-b9b4-8384d2ff9973",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I am not that familiar with this code, but from a quick look: calling `super()._format_strings()` would be different, as this would call `GenericArrayFormatter._format_strings`, while the generic `format_array` can still result in using custom formatters like `Datetime64(TZ)Formatter` or `Timedelta64Formatter`, depending on what the values of the underlying EA are.",
        "createdAt" : "2019-04-05T20:38:00Z",
        "updatedAt" : "2019-04-05T20:38:00Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "0c740251-1a57-4539-8a3e-7121d12c5770",
        "parentId" : "1eba9ab5-a33a-4571-b9b4-8384d2ff9973",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Although that most of those custom Formatter classes don't do much special *if* formatter is specified. \r\n\r\nEg `Datetime64Formatter` has this in `_format_strings`:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/181f972d2f4e6bd5c8c33721175f68188cfa1a0d/pandas/io/formats/format.py#L1174-L1175",
        "createdAt" : "2019-04-05T20:40:50Z",
        "updatedAt" : "2019-04-05T20:40:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "738c9c70-4c30-494c-b929-6763a7a808b8",
        "parentId" : "1eba9ab5-a33a-4571-b9b4-8384d2ff9973",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "so if `ExtensionArrayFormatter` is not inheriting from `GenericArrayFormatter` but calling `format_array` to dispatch to another `...ArrayFormatter` class, why wouldn't the logic in `ExtensionArrayFormatter` be in `format_array`?",
        "createdAt" : "2019-04-05T23:43:02Z",
        "updatedAt" : "2019-04-05T23:43:03Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad113b374641b6eb1f0cb7b28d7d38e24099902",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +1132,1136 @@            array = np.asarray(values)\n\n        fmt_values = format_array(array,\n                                  formatter,\n                                  float_format=self.float_format,"
  },
  {
    "id" : "40d9ae33-88e8-4fee-8098-794466fb740d",
    "prId" : 24134,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24134#pullrequestreview-182980045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ad6e4a6-fcdc-499c-b6c3-fc2b67811688",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is so hacky, we should not be doing this",
        "createdAt" : "2018-12-09T14:11:53Z",
        "updatedAt" : "2018-12-10T18:18:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f95ae76ec24f3165f8b56ed33a92849099535e01",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +968,972 @@                fmt_values.append(float_format(v))\n            else:\n                if leading_space is False:\n                    # False specifically, so that the default is\n                    # to include a space if we get here."
  },
  {
    "id" : "4cfe0a8e-5087-45db-8a04-5b4719a07232",
    "prId" : 24134,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24134#pullrequestreview-183318502",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94d15f3c-a698-4057-8af8-a4f874b2ef59",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you document when this is set.",
        "createdAt" : "2018-12-10T17:57:17Z",
        "updatedAt" : "2018-12-10T18:18:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f95ae76ec24f3165f8b56ed33a92849099535e01",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +957,961 @@\n        is_float_type = lib.map_infer(vals, is_float) & notna(vals)\n        leading_space = self.leading_space\n        if leading_space is None:\n            leading_space = is_float_type.any()"
  },
  {
    "id" : "697b5286-4e94-4c15-9a72-3cb1e2e39e33",
    "prId" : 25202,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25202#pullrequestreview-201413558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "035c5199-1bb3-4b87-8a8c-8818716bcb1c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do\r\n``na_rep = self.na_rep`` here, then update (and use that value); so the value attached to self is not changed.",
        "createdAt" : "2019-02-08T02:38:28Z",
        "updatedAt" : "2019-02-09T03:21:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "88cbca912aba33088cee123280ce5e1c533a997d",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1060,1064 @@        def format_values_with(float_format):\n            formatter = self._value_formatter(float_format, threshold)\n\n            # default formatter leaves a space to the left when formatting\n            # floats, must be consistent for left-justifying NaNs (GH #25061)"
  }
]