[
  {
    "id" : "5d40fbfe-c634-4a55-9dee-18333503b3e5",
    "prId" : 4698,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62175b97-f110-4a1f-acbe-ff24263ae8a0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what I meant was that to the individual table appends, you can just simply pass `dropna=False` if `dropna=True` is passed to `append_to_multiple` will achieve the same effect.\n",
        "createdAt" : "2013-08-31T14:51:36Z",
        "updatedAt" : "2013-09-03T04:34:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e2bd1d91-36cf-4d8a-8c2a-a09395ad01a5",
        "parentId" : "62175b97-f110-4a1f-acbe-ff24263ae8a0",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "nvm....what you have is correct\n",
        "createdAt" : "2013-08-31T14:53:46Z",
        "updatedAt" : "2013-09-03T04:34:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e317087b0e97c0c6637ac0aac70299cdb2f64336",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +844,848 @@            data_columns = d[selector]\n\n        # ensure rows are synchronized across the tables\n        if dropna:\n            idxs = (value[cols].dropna(how='all').index for cols in d.values())"
  },
  {
    "id" : "81653f69-6b21-4a51-90fc-3928f96184e0",
    "prId" : 4822,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2847c528-0cb5-44fd-a8e6-af540f9a33ad",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "does it matter to compare to unicode? (I honestly don't know...)\n",
        "createdAt" : "2013-09-12T00:43:39Z",
        "updatedAt" : "2013-09-12T15:40:02Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "80700c97-0639-4f6c-94da-6e8e24bf07c9",
        "parentId" : "2847c528-0cb5-44fd-a8e6-af540f9a33ad",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually it does because the data is stored as bytes (and reconverted) in read back by pytables (I think)\nthese are comparing vs stored data\n",
        "createdAt" : "2013-09-12T00:53:10Z",
        "updatedAt" : "2013-09-12T15:40:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef2cfb1f9d4f89c27ca759687fc1e13a4c44f1d0",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +1738,1742 @@                    self.data = np.asarray(self.data, dtype='M8[ns]')\n\n            elif dtype == u('timedelta64'):\n                self.data = np.asarray(self.data, dtype='m8[ns]')\n            elif dtype == u('date'):"
  },
  {
    "id" : "9a94a90b-a61f-42bd-9451-a1d04f2ea3db",
    "prId" : 4822,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a150d55-86b4-46a3-ae3e-ee3037a4a6c9",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "?? why this change here too\n",
        "createdAt" : "2013-09-12T00:44:29Z",
        "updatedAt" : "2013-09-12T15:40:02Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "512a8cb7-9416-4551-b8c3-c953988100d8",
        "parentId" : "2a150d55-86b4-46a3-ae3e-ee3037a4a6c9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh just a more informative message\n",
        "createdAt" : "2013-09-12T00:53:44Z",
        "updatedAt" : "2013-09-12T15:40:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef2cfb1f9d4f89c27ca759687fc1e13a4c44f1d0",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +4034,4038 @@            raise ValueError(\"query term is not valid [{0}]\\n\"\n                             \"  all queries terms must include a reference to\\n\"\n                             \"  either an axis (e.g. index or column), or a data_columns\\n\".format(str(self)))\n\n        # convert values if we are in the table"
  },
  {
    "id" : "65da2572-8329-43b3-a0eb-3b5abf90c56e",
    "prId" : 5448,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df80cd92-b999-4f53-a0a3-9e474407eae0",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "So this branch works when you only have ascii letters/numbers in your output?  Otherwise always needs to be decoded, right?\n",
        "createdAt" : "2013-11-06T12:53:06Z",
        "updatedAt" : "2013-11-06T12:53:06Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "cbb75812-9f17-4e97-8e7a-d482fb8f4ba3",
        "parentId" : "df80cd92-b999-4f53-a0a3-9e474407eae0",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no it always works with an individual decoding, just slow. the astyping to str works when the input can be safely decoded by the `astype(str)` (which is prob just a UTF-8 decode on numpy side thats in c)\n",
        "createdAt" : "2013-11-06T13:19:16Z",
        "updatedAt" : "2013-11-06T13:19:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1b209780-5f7e-4fae-8ccc-42235a5a10b9",
        "parentId" : "df80cd92-b999-4f53-a0a3-9e474407eae0",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "Okay (I meant the astyping line) sounds good.\n",
        "createdAt" : "2013-11-06T13:25:50Z",
        "updatedAt" : "2013-11-06T13:25:50Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a6939fe2575c3d34502fb19a8596b7fa2d06f94",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +3974,3978 @@    if encoding is not None and len(data):\n        try:\n            data = data.astype(str).astype(object)\n        except:\n            f = np.vectorize(lambda x: x.decode(encoding), otypes=[np.object])"
  },
  {
    "id" : "395e8a67-8b21-463e-95b3-8900874c0bf9",
    "prId" : 7788,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1b59afb-10de-41f5-b915-a3e9fb8da5a6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "say, you can store this in table format, however.\n",
        "createdAt" : "2014-07-18T15:35:26Z",
        "updatedAt" : "2014-07-18T15:36:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1fcb20506664997ac095963e39ed759883d98c1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2683,2687 @@            if i == 0:\n                if not ax.is_unique:\n                    raise ValueError(\"Columns index has to be unique for fixed format\")\n            self.write_index('axis%d' % i, ax)\n"
  },
  {
    "id" : "fde65596-41b0-44cc-a16c-bc961b37e0a2",
    "prId" : 19413,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19413#pullrequestreview-92771050",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42aa282b-61f6-43c3-8d0e-fc17a438cb5c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this branch might not even be hit anymore\r\ncan u point to where it is exercised?",
        "createdAt" : "2018-01-28T18:23:42Z",
        "updatedAt" : "2018-01-31T10:58:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "76d158e7-7f01-4745-b1d0-99a5fc628edf",
        "parentId" : "42aa282b-61f6-43c3-8d0e-fc17a438cb5c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It'll be reached if IndexCol.convert is called with an IndexCol of kind == 'datetime'.",
        "createdAt" : "2018-01-29T05:47:50Z",
        "updatedAt" : "2018-01-31T10:58:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "842da821-f986-4f4e-90e9-9ea4a3aaafae",
        "parentId" : "42aa282b-61f6-43c3-8d0e-fc17a438cb5c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i can read what if says (i wrote this)\r\nwhat i am asking is which test hits this\r\nthis inference should not be true except for an object Index which infers to datetime which we rarely have (as they are always converts)",
        "createdAt" : "2018-01-29T11:47:30Z",
        "updatedAt" : "2018-01-31T10:58:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ae839d77-ce8c-4424-a54b-0c80780fed38",
        "parentId" : "42aa282b-61f6-43c3-8d0e-fc17a438cb5c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Then I have no idea.",
        "createdAt" : "2018-01-29T16:04:20Z",
        "updatedAt" : "2018-01-31T10:58:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "194455ac-758b-48f7-8811-e38b871329b3",
        "parentId" : "42aa282b-61f6-43c3-8d0e-fc17a438cb5c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can remove this kind == 'datetime' branch its not hit by anything",
        "createdAt" : "2018-01-31T00:23:52Z",
        "updatedAt" : "2018-01-31T10:58:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "16d3a57d4cd923cc1a95333678b73c64507aaeca",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +4622,4626 @@    if kind == 'datetime64':\n        return lambda x: np.asarray(x, dtype='M8[ns]')\n    elif kind == 'datetime':\n        return lambda x: to_datetime(x, cache=True).to_pydatetime()\n    elif kind == 'string':"
  },
  {
    "id" : "b128f9df-73f1-4bdb-9a6f-2ea3befde7ea",
    "prId" : 20537,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20537#pullrequestreview-108077422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "983b9154-1153-465e-9b6a-b7053b6c9ec5",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Are there any other cases we should exclude, or just Link?",
        "createdAt" : "2018-03-29T14:38:38Z",
        "updatedAt" : "2018-04-02T13:52:37Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "60118bf7-69dc-4dbf-9b5b-557a095d7596",
        "parentId" : "983b9154-1153-465e-9b6a-b7053b6c9ec5",
        "authorId" : "ede7dd6f-c41d-4c97-9692-2f7d5cb61cd0",
        "body" : "Link is the abstract base class for SoftLink and ExternalLink in pytables. These subclasses do not support attributes as of HDF5 (this appears to be a limitation of the HDF5 library but may change in the future, reference: http://www.pytables.org/usersguide/libref/link_classes.html). I believe all other node types support attributes. A quick search of NoAttrs in Pytables shows usage only in tables/link.py.",
        "createdAt" : "2018-03-29T14:46:31Z",
        "updatedAt" : "2018-04-02T13:52:37Z",
        "lastEditedBy" : "ede7dd6f-c41d-4c97-9692-2f7d5cb61cd0",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0a21d62ffcdf5db7b70c6227ec6633f22739213",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1074,1078 @@        return [\n            g for g in self._handle.walk_nodes()\n            if (not isinstance(g, _table_mod.link.Link) and\n                (getattr(g._v_attrs, 'pandas_type', None) or\n                 getattr(g, 'table', None) or"
  },
  {
    "id" : "1d29e783-d1f2-4fff-96e5-719cea56c0e2",
    "prId" : 20873,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20873#pullrequestreview-116536950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78a96cb2-3dd6-4d61-8018-a9a83f8bba61",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you show options and/or point to the python ref for these",
        "createdAt" : "2018-05-01T10:14:44Z",
        "updatedAt" : "2018-05-01T11:33:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a13234dc0882a41789ef5a4d9cde571727524f3",
    "line" : 342,
    "diffHunk" : "@@ -1,1 +4625,4629 @@    nan_rep : the storage repr of NaN, optional\n    encoding : the encoding of the data, optional\n    errors : handler for encoding errors, default 'strict'\n\n    Returns"
  },
  {
    "id" : "4912754f-bffa-4ff1-a353-5b4498675d46",
    "prId" : 23093,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23093#pullrequestreview-164481514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0ad70c8-5304-4f6c-bbd6-683ad9f57584",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Really these shouldn't be calling _simple_new at all.",
        "createdAt" : "2018-10-11T18:00:23Z",
        "updatedAt" : "2018-10-11T22:13:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "94fa04b8-e53a-4e7a-b6c6-5e8a1c63a135",
        "parentId" : "e0ad70c8-5304-4f6c-bbd6-683ad9f57584",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "agreed.",
        "createdAt" : "2018-10-12T01:43:31Z",
        "updatedAt" : "2018-10-12T01:44:14Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4c8213dc-2dfc-420c-acb2-9bccb090a43d",
        "parentId" : "e0ad70c8-5304-4f6c-bbd6-683ad9f57584",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "well, this is actually tricky. the period codes are actually stored. We in fact need to think about this for EA, potentially providing an easy way to have serialization code deal with this.\r\n\r\nWhy isn't this from_ordinals?",
        "createdAt" : "2018-10-12T12:45:17Z",
        "updatedAt" : "2018-10-12T12:45:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "89fcec6a-3c5f-457d-a8c7-ded3f0943938",
        "parentId" : "e0ad70c8-5304-4f6c-bbd6-683ad9f57584",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Turns out changing this to just call PeriodIndex(...) causes some test failures.  Tried it in #23140.",
        "createdAt" : "2018-10-14T01:41:14Z",
        "updatedAt" : "2018-10-14T01:41:14Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "04c75ca93ebaf693f9a60c7ff609806300083f88",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2485,2489 @@        elif klass == PeriodIndex:\n            def f(values, freq=None, tz=None):\n                return PeriodIndex._simple_new(values, name=None, freq=freq)\n            return f\n"
  },
  {
    "id" : "1f7941b2-002a-421b-a314-e5c8ef7eae49",
    "prId" : 24510,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24510#pullrequestreview-188516918",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8105604e-7686-4838-9ff2-8268956ea5fb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can just directly call this, no if is needed",
        "createdAt" : "2018-12-31T16:48:29Z",
        "updatedAt" : "2018-12-31T23:30:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5b4dbb74-3437-47f9-a902-b99e04383a08",
        "parentId" : "8105604e-7686-4838-9ff2-8268956ea5fb",
        "authorId" : "0e77b50c-b97e-4fcb-82f6-24674acb7de9",
        "body" : "Done ",
        "createdAt" : "2018-12-31T16:58:08Z",
        "updatedAt" : "2018-12-31T23:30:08Z",
        "lastEditedBy" : "0e77b50c-b97e-4fcb-82f6-24674acb7de9",
        "tags" : [
        ]
      }
    ],
    "commit" : "173265ccf9bf2c80a3ff2b2e864c742eb04a8a88",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2661,2665 @@\n        if 'name' in node._v_attrs:\n            name = _ensure_str(node._v_attrs.name)\n            name = _ensure_decoded(name)\n"
  },
  {
    "id" : "980ec3f4-6153-4cbe-a5ae-d9fbc9a03e91",
    "prId" : 24521,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24521#pullrequestreview-191944856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff298b4b-673d-4a57-a322-d6cb137b4001",
        "parentId" : null,
        "authorId" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "body" : "Again, on Master ``intersection`` does not generally sort by default so I have added ``sort=False`` here for compatibility",
        "createdAt" : "2019-01-12T17:11:33Z",
        "updatedAt" : "2019-01-19T18:22:04Z",
        "lastEditedBy" : "7ac4c9e7-abb0-4bee-8b35-0f2b9e19bd9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b15248d3b8169b3fbde53e91fb02ef091e5ee00",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4474,4478 @@    labels = ensure_index(labels.unique())\n    if other is not None:\n        labels = ensure_index(other.unique()).intersection(labels, sort=False)\n    if not labels.equals(ax):\n        slicer = [slice(None, None)] * obj.ndim"
  },
  {
    "id" : "f424220e-11f1-4445-81bb-ac785f026761",
    "prId" : 26818,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26818#pullrequestreview-250089947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0c4bb9b-ff2e-4d9a-8084-7dcf97d8550e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string here",
        "createdAt" : "2019-06-14T12:28:21Z",
        "updatedAt" : "2019-06-21T13:33:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e384d2cd-daeb-423a-8681-df0b12e7e115",
        "parentId" : "b0c4bb9b-ff2e-4d9a-8084-7dcf97d8550e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "types are a bonus",
        "createdAt" : "2019-06-14T12:28:29Z",
        "updatedAt" : "2019-06-21T13:33:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "70a51489-4d8d-4a8d-bb45-be4d071aab49",
        "parentId" : "b0c4bb9b-ff2e-4d9a-8084-7dcf97d8550e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would just add ``start=None`` and ``stop=None`` instead of kwargs",
        "createdAt" : "2019-06-14T12:29:27Z",
        "updatedAt" : "2019-06-21T13:33:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "075ba132-2a5e-49a1-864d-e6d819783f4c",
        "parentId" : "b0c4bb9b-ff2e-4d9a-8084-7dcf97d8550e",
        "authorId" : "bb8364bd-be76-45a1-a9bf-7a53ab9165ce",
        "body" : "> I would just add start=None and stop=None instead of kwargs\r\n\r\ndone, commit upcoming\r\n\r\n> can you add a doc-string here\r\n\r\nI would love to add one! I have difficulties understanding the general purpose of the `convert()` method though and documenting `values`, `nan_rep`, `encoding`, and `errors` is pretty challenging given my lack of understanding. As far as I see the `start` and `stop` arguments are not really meaningful arguments here (in `IndexCol.convert()`), so I am also a bit helpless with documenting them! :-) How would you document `start` and `stop` here?\r\n\r\n",
        "createdAt" : "2019-06-14T19:44:47Z",
        "updatedAt" : "2019-06-21T13:33:27Z",
        "lastEditedBy" : "bb8364bd-be76-45a1-a9bf-7a53ab9165ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ce1a7005d6d172eb7af9b7bd435da0312fd4dbe",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1627,1631 @@    def convert(self, values, nan_rep, encoding, errors, start=None,\n                stop=None):\n        \"\"\" set the values from this selection: take = take ownership \"\"\"\n\n        # values is a recarray"
  },
  {
    "id" : "00af0f75-dcc0-48da-b176-9714def05820",
    "prId" : 26818,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26818#pullrequestreview-249873129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0d0e429-f772-41d0-a763-372a108e17a2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2019-06-14T12:29:02Z",
        "updatedAt" : "2019-06-21T13:33:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ce1a7005d6d172eb7af9b7bd435da0312fd4dbe",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +2182,2186 @@    def convert(self, values, nan_rep, encoding, errors, start=None,\n                stop=None):\n        \"\"\"set the data from this selection (and convert to the correct dtype\n        if we can)\n        \"\"\""
  },
  {
    "id" : "8a7c5f03-3695-4601-ba76-6139c67ad0a1",
    "prId" : 26818,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26818#pullrequestreview-251644473",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98f5eb3b-e5c4-4315-9ab7-e84caa9c0234",
        "parentId" : null,
        "authorId" : "bb8364bd-be76-45a1-a9bf-7a53ab9165ce",
        "body" : "At least here I understand the meaning of `start` and `stop` and have tried to document it.",
        "createdAt" : "2019-06-14T20:32:25Z",
        "updatedAt" : "2019-06-21T13:33:27Z",
        "lastEditedBy" : "bb8364bd-be76-45a1-a9bf-7a53ab9165ce",
        "tags" : [
        ]
      },
      {
        "id" : "5e539949-bbad-483c-9023-53cff4bfe84f",
        "parentId" : "98f5eb3b-e5c4-4315-9ab7-e84caa9c0234",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right, can you add all the parameters. See if you can put something down for them, some doc-string is better than none.",
        "createdAt" : "2019-06-19T00:43:19Z",
        "updatedAt" : "2019-06-21T13:33:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "610652df-a2d8-4243-9212-2cb78cef51d7",
        "parentId" : "98f5eb3b-e5c4-4315-9ab7-e84caa9c0234",
        "authorId" : "bb8364bd-be76-45a1-a9bf-7a53ab9165ce",
        "body" : ":+1: \r\n\r\nAdding statements for `values`, `nan_rep`, `encoding`, and `errors`. \r\n\r\nThe biggest challenge for me still is that I do not feel like I understand the general purpose of the convert() method and its arguments.",
        "createdAt" : "2019-06-19T11:48:19Z",
        "updatedAt" : "2019-06-21T13:33:27Z",
        "lastEditedBy" : "bb8364bd-be76-45a1-a9bf-7a53ab9165ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ce1a7005d6d172eb7af9b7bd435da0312fd4dbe",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1830,1834 @@        stop : int, optional\n            Table row number: the end of the sub-selection. Values larger than\n            the underlying table's row count are normalized to that.\n        \"\"\"\n"
  },
  {
    "id" : "164226d6-6ffc-4ac4-8f09-f665ba775ef4",
    "prId" : 28096,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28096#pullrequestreview-278742232",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02fbfdae-2f75-4745-aea7-191cd8d72606",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can you remove this extra newline",
        "createdAt" : "2019-08-22T23:56:01Z",
        "updatedAt" : "2019-08-24T15:09:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0d3f6cf184d547189262a408d2d9bfa570c9dd1",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +430,434 @@\nclass HDFStore:\n\n    \"\"\"\n    Dict-like IO interface for storing pandas objects in PyTables."
  },
  {
    "id" : "245a2bd2-cb27-4d81-b94a-3d6d72449fe2",
    "prId" : 29692,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29692#pullrequestreview-319153297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e430925-b25c-426b-bd1b-f3fd2a601907",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@simonjayhawkins I expected the hasattr check above to be enough to make this `# type: ignore` unnecessary, but it wasn't.  any ideas?",
        "createdAt" : "2019-11-18T16:12:51Z",
        "updatedAt" : "2019-11-19T15:53:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "47cad761-987f-463d-b3d6-3aed9bbf018f",
        "parentId" : "1e430925-b25c-426b-bd1b-f3fd2a601907",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "see https://github.com/python/mypy/issues/1424\r\n\r\nbest to add the mypy error message as a comment and also a link to the mypy issue.\r\n\r\n_might_ also be best to split the return statement to isolate the ignore to the result of the getattr expression.\r\n\r\nthen casting as suggested in the mypy issue would still have the return type of is_indexed of the casted type checked against the return type of this method. \r\nThis could result in less clear code so will leave it to you to decide whether you think it warrants changing the code here.\r\n\r\nThis could also be done my error codes, see #29197, but needs more discussion",
        "createdAt" : "2019-11-18T16:31:35Z",
        "updatedAt" : "2019-11-19T15:53:39Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "9e3836fb-48e0-4754-a2ff-ed662a8558d3",
        "parentId" : "1e430925-b25c-426b-bd1b-f3fd2a601907",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "comment added",
        "createdAt" : "2019-11-18T20:39:03Z",
        "updatedAt" : "2019-11-19T15:53:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bd1d5cab-6fad-409b-b685-5021e43a5ee4",
        "parentId" : "1e430925-b25c-426b-bd1b-f3fd2a601907",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "sorry I couldn't look in detail yesterday and just gave a generic answer.\r\n\r\nthe error message is `error: \"None\" has no attribute \"cols\"`.  \r\n\r\n`reveal_type(self.table)` gives `note: Revealed type is 'None'`\r\n\r\nin `IndexCol.__init__`, `self.table = None`\r\n\r\nI _think_ if you add the type annotation for `self.table` and add `assert self.table is not None` before the return statement, we can avoid the ignore.\r\n\r\n(in general if you can include the exact mypy error message as a comment makes it easier/quicker to review. We do this in other places) ",
        "createdAt" : "2019-11-19T14:28:41Z",
        "updatedAt" : "2019-11-19T15:53:39Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "f6f2f263-d08b-454a-91f2-cf6058b4a488",
        "parentId" : "1e430925-b25c-426b-bd1b-f3fd2a601907",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> I think if you add the type annotation for self.table and add assert self.table is not None before the return statement, we can avoid the ignore.\r\n\r\nAFAICT this still doesnt work because the Table class still doesnt have a \"cols\" attr.\r\n\r\n> (in general if you can include the exact mypy error message as a comment makes it easier/quicker to review. We do this in other places)\r\n\r\nWill update.  Thanks for being patient with me",
        "createdAt" : "2019-11-19T15:51:41Z",
        "updatedAt" : "2019-11-19T15:53:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5c8cdfb1-c200-4e12-b156-e11e43dafd88",
        "parentId" : "1e430925-b25c-426b-bd1b-f3fd2a601907",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> AFAICT this still doesnt work because the Table class still doesnt have a \"cols\" attr.\r\n\r\nfair enough. the generic comment above is valid. a type ignore is likely required in many places where we are using hasattr.\r\n\r\nI thought that maybe the type of self.table would be a type with a \"cols\" attr. and that the hasattr was used to allow duck typing of other classes with a \"cols\" attr.\r\n\r\nIf this were the case mypy would only be checking the nominal type defined for self.table ( and None)",
        "createdAt" : "2019-11-19T16:01:27Z",
        "updatedAt" : "2019-11-19T16:01:27Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b25101f4b519c4adfbef545d53e2af0b41f55445",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +1787,1791 @@        # GH#29692 mypy doesn't recognize self.table as having a \"cols\" attribute\n        #  'error: \"None\" has no attribute \"cols\"'\n        return getattr(self.table.cols, self.cname).is_indexed  # type: ignore\n\n    def copy(self):"
  },
  {
    "id" : "9e0bebca-993c-4551-8020-b8be4be1d047",
    "prId" : 29692,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29692#pullrequestreview-318477727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4929e5f3-4af8-4624-a648-97cc971cb53d",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think had this discussion on another PR can't remember where we landed, but do these declarations need to be in the class scope? Not sure every reader would know why these are there and may in fact infer that they should be class variables.",
        "createdAt" : "2019-11-18T16:35:12Z",
        "updatedAt" : "2019-11-19T15:53:39Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "348ef936-4028-4af1-9959-0fa457d07196",
        "parentId" : "4929e5f3-4af8-4624-a648-97cc971cb53d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This topic has definitely come up and the conclusion may have just gone over my head.  When I see this, I read it as \"`self.name` is going to be defined in `__init__`, and is always going to be a `str`.  This is helpful to me, the reader, since this class seems to set its attributes all over the place\"",
        "createdAt" : "2019-11-18T16:44:40Z",
        "updatedAt" : "2019-11-19T15:53:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "63890fc7-51db-4db9-a0f7-3053d26545e1",
        "parentId" : "4929e5f3-4af8-4624-a648-97cc971cb53d",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Gotcha. Actually reading through PEP 526 this looks to be correct, so nice find\r\n\r\nhttps://www.python.org/dev/peps/pep-0526/#class-and-instance-variable-annotations\r\n\r\n@simonjayhawkins ",
        "createdAt" : "2019-11-18T16:49:11Z",
        "updatedAt" : "2019-11-19T15:53:39Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b25101f4b519c4adfbef545d53e2af0b41f55445",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1692,1696 @@    _info_fields = [\"freq\", \"tz\", \"index_name\"]\n\n    name: str\n    cname: str\n    kind_attr: str"
  },
  {
    "id" : "519f6c4e-7d38-4e39-8bd7-d3c8cef429aa",
    "prId" : 29692,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29692#pullrequestreview-318482588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ba18c26-97f8-47f3-981f-757e0ecdf167",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "encoding and errors are I believe str if wanted to add here; I assume `index` might be an instance of `Index` though if non-trivial to verify certainly leave out",
        "createdAt" : "2019-11-18T16:53:10Z",
        "updatedAt" : "2019-11-19T15:53:39Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "01cbbe4b-d885-4c63-b31e-63934cc16883",
        "parentId" : "5ba18c26-97f8-47f3-981f-757e0ecdf167",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ive got another branch going that i think gets these.  tried to keep this one pretty narrow since its not _just_ annotations",
        "createdAt" : "2019-11-18T16:56:02Z",
        "updatedAt" : "2019-11-19T15:53:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b25101f4b519c4adfbef545d53e2af0b41f55445",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +4664,4668 @@\n\ndef _convert_index(name: str, index, encoding=None, errors=\"strict\", format_type=None):\n    assert isinstance(name, str)\n"
  },
  {
    "id" : "49e6a82d-b024-4076-9a4f-3813afa92607",
    "prId" : 29692,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29692#pullrequestreview-319960783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00055840-7a02-4e25-8de8-aad77c31fb05",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this actually hit anywhere? I think this is by-definition not possible.",
        "createdAt" : "2019-11-20T12:42:59Z",
        "updatedAt" : "2019-11-20T12:43:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2118a31b-31e0-44e1-b8c6-cb071c359f54",
        "parentId" : "00055840-7a02-4e25-8de8-aad77c31fb05",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It is.  we have a test that gets here with an np.int64",
        "createdAt" : "2019-11-20T15:18:49Z",
        "updatedAt" : "2019-11-20T15:18:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b25101f4b519c4adfbef545d53e2af0b41f55445",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +3879,3883 @@                name = b_items[0]\n                if not (name is None or isinstance(name, str)):\n                    # TODO: should the message here be more specifically non-str?\n                    raise ValueError(\"cannot have non-object label DataIndexableCol\")\n                self.data_columns.append(name)"
  },
  {
    "id" : "d0255136-efae-40c8-9d64-33765ec656ff",
    "prId" : 29703,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29703#pullrequestreview-318781673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "087eae5a-dc92-42d1-a9cb-94ecbcab7701",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Any chance of adding a subtype here?",
        "createdAt" : "2019-11-19T03:44:18Z",
        "updatedAt" : "2019-11-19T03:45:29Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "26c8f78f-6611-4f0e-8f37-52af5531ece1",
        "parentId" : "087eae5a-dc92-42d1-a9cb-94ecbcab7701",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "same here and below: i'm pretty sure we'll be able to be more specific in these after #29692",
        "createdAt" : "2019-11-19T04:45:08Z",
        "updatedAt" : "2019-11-19T04:45:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "52191ddacf840f6fdd80d01d4a67450f6fbaab8b",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +1143,1147 @@        # figure out how to split the value\n        remain_key = None\n        remain_values: List = []\n        for k, v in d.items():\n            if v is None:"
  },
  {
    "id" : "6f39331f-6951-4b3b-9194-3e7ef5bfb6a1",
    "prId" : 29703,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29703#pullrequestreview-318769220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c64df493-86e3-4313-8362-5c01167f0420",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Same comment",
        "createdAt" : "2019-11-19T03:45:05Z",
        "updatedAt" : "2019-11-19T03:45:30Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "52191ddacf840f6fdd80d01d4a67450f6fbaab8b",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +1091,1095 @@    def append_to_multiple(\n        self,\n        d: Dict,\n        value,\n        selector,"
  },
  {
    "id" : "bb50d3ac-5ee5-4bba-afde-6ed9f5cd61ea",
    "prId" : 29757,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29757#pullrequestreview-320438850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10934dbf-7a97-4212-9f66-6ac16d791fe6",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "will this make sense now that _TYPE_MAP is inlined?",
        "createdAt" : "2019-11-20T22:40:17Z",
        "updatedAt" : "2019-11-24T01:01:24Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "e30c5a5d-8df2-4ac3-b0be-b0df16a446bc",
        "parentId" : "10934dbf-7a97-4212-9f66-6ac16d791fe6",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I guess we could inline the thing here too",
        "createdAt" : "2019-11-20T22:50:04Z",
        "updatedAt" : "2019-11-24T01:01:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4eeceaf2e06a85096584c216f0c36de72fba43c",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +1444,1448 @@                    pt = _TYPE_MAP[type(value)]\n                except KeyError:\n                    raise error(\"_TYPE_MAP\")\n\n                # we are actually a table"
  },
  {
    "id" : "e352fd8f-c360-4474-939b-f71b77b19aab",
    "prId" : 29757,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29757#pullrequestreview-321934079",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41c40771-a074-48db-b21c-78a67e9a7ead",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Does doing this solve a bug?",
        "createdAt" : "2019-11-23T23:12:52Z",
        "updatedAt" : "2019-11-24T01:01:24Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "1421c487-712c-4551-9ec3-1193d85457b1",
        "parentId" : "41c40771-a074-48db-b21c-78a67e9a7ead",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "mypy mostly.  get_storer can return two different types, and this method only works if we get a Table back",
        "createdAt" : "2019-11-23T23:36:22Z",
        "updatedAt" : "2019-11-24T01:01:24Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4eeceaf2e06a85096584c216f0c36de72fba43c",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +796,800 @@        where = _ensure_term(where, scope_level=1)\n        tbl = self.get_storer(key)\n        if not isinstance(tbl, Table):\n            raise TypeError(\"can only read_coordinates with a table\")\n        return tbl.read_coordinates(where=where, start=start, stop=stop, **kwargs)"
  },
  {
    "id" : "c03a8777-6000-4528-8acb-3fcdd6a8a7c5",
    "prId" : 29861,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29861#pullrequestreview-324841905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea8af05b-ccd0-4776-bd2d-89da9fba3f23",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Does this not have any impact on runtime? The global state management here is a little nuanced so just want to double check that it is valid to add to the constructor here, as on first glance it may not be set until methods are called by design",
        "createdAt" : "2019-11-29T17:59:25Z",
        "updatedAt" : "2019-11-29T17:59:28Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "799013e2-774f-4d3f-8b3e-cf1cc587bc9d",
        "parentId" : "ea8af05b-ccd0-4776-bd2d-89da9fba3f23",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It does not, we wouldn't get here if _table_mod were not initialized",
        "createdAt" : "2019-11-29T19:47:02Z",
        "updatedAt" : "2019-11-29T19:47:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb66c91e55b878a93f804782aa624cca865e7225",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +2516,2520 @@    ):\n        assert isinstance(parent, HDFStore), type(parent)\n        assert _table_mod is not None  # needed for mypy\n        assert isinstance(group, _table_mod.Node), type(group)\n        self.parent = parent"
  },
  {
    "id" : "2067bc47-91c8-4f84-b751-700249239397",
    "prId" : 29871,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29871#pullrequestreview-324971921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6110cad1-a1d5-4427-976c-725f2d36c2f5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would merge this with the line above",
        "createdAt" : "2019-11-29T23:04:28Z",
        "updatedAt" : "2019-11-29T23:04:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b68f250e-f8a2-4770-9cd3-117f73152ddf",
        "parentId" : "6110cad1-a1d5-4427-976c-725f2d36c2f5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i dont understand the suggestion",
        "createdAt" : "2019-11-29T23:31:37Z",
        "updatedAt" : "2019-11-29T23:31:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "349c48e6-de7d-4976-ac91-ea72c4b4b855",
        "parentId" : "6110cad1-a1d5-4427-976c-725f2d36c2f5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "put this\r\n\r\n```\r\nif values.ndim == 1 and isinstance(values, np.ndarray):\r\n                values = values.reshape((1, values.shape[0]))\t                \r\n```\r\ninside this if",
        "createdAt" : "2019-11-29T23:32:54Z",
        "updatedAt" : "2019-11-29T23:32:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b40486c0-903d-49d8-b4d3-8674f68a2755",
        "parentId" : "6110cad1-a1d5-4427-976c-725f2d36c2f5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "the purpose of that check is orthogonal to the purpose of this check.  4341-4348 are logically grouped together",
        "createdAt" : "2019-11-30T00:35:21Z",
        "updatedAt" : "2019-11-30T00:35:21Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "945b5c24-a66c-451a-84a3-8f48e5e273df",
        "parentId" : "6110cad1-a1d5-4427-976c-725f2d36c2f5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, I don't particularly like the fact that we have to construct things like this, but i guess ok",
        "createdAt" : "2019-12-01T23:27:23Z",
        "updatedAt" : "2019-12-01T23:27:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c14f4dadfe7426afdd8e6e31a36bdfb8255a4bf1",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +4339,4343 @@                values = values.reshape((1, values.shape[0]))\n\n            if isinstance(values, np.ndarray):\n                df = DataFrame(values.T, columns=cols_, index=index_)\n            elif isinstance(values, Index):"
  },
  {
    "id" : "efdb9d9f-2021-4c85-989e-8b05e50e1422",
    "prId" : 29871,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29871#pullrequestreview-324971921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e7be9bf-442c-4fd9-bb68-1ca4890cb9df",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i think it would be better to use a list comprehension here and make a function for the DataFrame creation (e.g. lines 3106-3110), but can be a followup",
        "createdAt" : "2019-12-01T23:26:02Z",
        "updatedAt" : "2019-12-01T23:27:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c14f4dadfe7426afdd8e6e31a36bdfb8255a4bf1",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +3101,3105 @@        items = axes[0]\n        dfs = []\n\n        for i in range(self.nblocks):\n"
  },
  {
    "id" : "b8855d9f-4a6f-4e97-8550-c0d1dfabb983",
    "prId" : 29871,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29871#pullrequestreview-325846588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1620d9e2-054e-44d4-8b69-fd7c0e83dc0e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i actually find this simpler as a chained operation",
        "createdAt" : "2019-12-01T23:26:40Z",
        "updatedAt" : "2019-12-01T23:27:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d321971e-ee7b-4d8f-8a03-a1cf3a6347b4",
        "parentId" : "1620d9e2-054e-44d4-8b69-fd7c0e83dc0e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ok.  will change in follow-up (since CI is failing for unrelated reasons right now)",
        "createdAt" : "2019-12-03T01:21:43Z",
        "updatedAt" : "2019-12-03T01:21:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c14f4dadfe7426afdd8e6e31a36bdfb8255a4bf1",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +3112,3116 @@\n        if len(dfs) > 0:\n            out = concat(dfs, axis=1)\n            out = out.reindex(columns=items, copy=False)\n            return out"
  },
  {
    "id" : "6200b90a-c448-4a58-8844-3ceb39232865",
    "prId" : 29936,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29936#pullrequestreview-324901954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a5f9530-c4a0-4e75-a104-958221dffedc",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Could probably ignore this if you don’t try to add the lists together and just update the Dict as required",
        "createdAt" : "2019-11-30T17:39:52Z",
        "updatedAt" : "2019-11-30T17:40:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d97274a2-aa66-44d5-9c09-5010f2bcabcf",
        "parentId" : "0a5f9530-c4a0-4e75-a104-958221dffedc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "will give this a shot",
        "createdAt" : "2019-11-30T17:42:55Z",
        "updatedAt" : "2019-11-30T17:42:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "03248132-3222-4419-a2ea-ba4aced86358",
        "parentId" : "0a5f9530-c4a0-4e75-a104-958221dffedc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "after a couple tries at this, its landing in \"more trouble than its worth\" territory",
        "createdAt" : "2019-11-30T17:50:52Z",
        "updatedAt" : "2019-11-30T17:50:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b285340c3063311401296910b4df395f3077366",
    "line" : 142,
    "diffHunk" : "@@ -1,1 +3317,3321 @@        ]\n\n        return dict(d1 + d2 + d3)  # type: ignore\n        # error: List comprehension has incompatible type\n        #  List[Tuple[Any, None]]; expected List[Tuple[str, IndexCol]]"
  },
  {
    "id" : "8caea4cf-13dc-4dd7-afa2-a03eff352061",
    "prId" : 29977,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29977#pullrequestreview-325817489",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7679152-1cba-4459-a870-e31c1df70644",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "a solution to this would be to remove kwargs and instead add a keyword ``backend_kwargs={}`` or ``driver_kwargs={}``",
        "createdAt" : "2019-12-02T23:23:01Z",
        "updatedAt" : "2019-12-02T23:23:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "add1c9f7-95a3-453c-86af-02754607f03a",
        "parentId" : "f7679152-1cba-4459-a870-e31c1df70644",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "that would work, will need deprecation cycle, and im all about _removing_ deprecations these days",
        "createdAt" : "2019-12-02T23:43:49Z",
        "updatedAt" : "2019-12-02T23:43:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "20086bb0-8a88-4926-b6f6-5524dfdfd60d",
        "parentId" : "f7679152-1cba-4459-a870-e31c1df70644",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "for now ill need to make a quick PR reverting the `assert not kwargs` this introduced",
        "createdAt" : "2019-12-02T23:44:09Z",
        "updatedAt" : "2019-12-02T23:44:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbe06725784ca0e07c374fcbe7c930cbc5aa474d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +296,300 @@    iterator=False,\n    chunksize: Optional[int] = None,\n    **kwargs,\n):\n    \"\"\""
  },
  {
    "id" : "50ef895d-98f6-467e-bc59-ef61ca01eb06",
    "prId" : 30018,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30018#pullrequestreview-327013210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74cb4be3-292f-494f-90c2-25fb4253d4eb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i wonder if we need the ravel any longer",
        "createdAt" : "2019-12-04T13:35:39Z",
        "updatedAt" : "2019-12-04T17:14:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c46a04d7-cba0-4d08-9d16-bfbcc3c96d75",
        "parentId" : "74cb4be3-292f-494f-90c2-25fb4253d4eb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i havent checked if we ever actually pass 2D ndarray, but the ravel is definitely needed in the case where we have a DTI (or we would have to replace it with DTI-specific code) (see the comment a few lines up)",
        "createdAt" : "2019-12-04T17:12:00Z",
        "updatedAt" : "2019-12-04T17:14:35Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4ca8589e89ed32d90acbb7c6c2d288df725fb04",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +4718,4722 @@    if tz is not None:\n        name = getattr(values, \"name\", None)\n        values = values.ravel()\n        tz = timezones.get_timezone(_ensure_decoded(tz))\n        values = DatetimeIndex(values, name=name)"
  },
  {
    "id" : "f0448a33-7299-409a-b130-fccf1e85438f",
    "prId" : 30058,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30058#pullrequestreview-327084181",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "654f6dee-16c7-428a-93d5-23f86834a19a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "just cut / paste?\r\n\r\nadd a doc-string / types at some point",
        "createdAt" : "2019-12-04T18:52:51Z",
        "updatedAt" : "2019-12-04T18:54:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0d1155cf-4b06-465b-88c9-104341438e29",
        "parentId" : "654f6dee-16c7-428a-93d5-23f86834a19a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Mostly cut/paste, but from a couple different places instead of one big chunk.  The `not block.is_object` check on 4782 is new, wasnt needed before because before we were doing things in a different order.\r\nThe only real change is the `reshape` on 4827 and assertion on 4828 are new.",
        "createdAt" : "2019-12-04T19:08:03Z",
        "updatedAt" : "2019-12-04T19:08:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1af0c8d394bc2584a72f4bd9562a38bd48766c8",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +4776,4780 @@\ndef _maybe_convert_for_string_atom(\n    name: str, block, existing_col, min_itemsize, nan_rep, encoding, errors\n):\n    use_str = False"
  },
  {
    "id" : "9d5f0efc-4374-49e2-8614-188dc12e63a2",
    "prId" : 30058,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30058#pullrequestreview-327081981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09be76e4-cf44-4125-97bf-306bf856f26f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't you already have this from above?",
        "createdAt" : "2019-12-04T18:54:15Z",
        "updatedAt" : "2019-12-04T18:54:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7531c466-50c7-4f1c-b697-d86146583b9e",
        "parentId" : "09be76e4-cf44-4125-97bf-306bf856f26f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : " no, because we did a fillna on 4802",
        "createdAt" : "2019-12-04T19:04:31Z",
        "updatedAt" : "2019-12-04T19:04:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1af0c8d394bc2584a72f4bd9562a38bd48766c8",
    "line" : 201,
    "diffHunk" : "@@ -1,1 +4808,4812 @@\n    # see if we have a valid string type\n    inferred_type = lib.infer_dtype(data.ravel(), skipna=False)\n    if inferred_type != \"string\":\n"
  },
  {
    "id" : "3a22582e-828e-4554-9c93-74464c03542d",
    "prId" : 30074,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30074#pullrequestreview-327341011",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55ea4d41-7726-44b5-a31e-3ad2b764dc35",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Not sure I follow the motivation for this.  Seems out of scope.",
        "createdAt" : "2019-12-05T06:41:43Z",
        "updatedAt" : "2019-12-05T19:58:32Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "cfa5ce34-7cb6-4fc4-9b46-f499148e7750",
        "parentId" : "55ea4d41-7726-44b5-a31e-3ad2b764dc35",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "making sure that i understand correctly that the codes is always signed-integer",
        "createdAt" : "2019-12-05T07:03:33Z",
        "updatedAt" : "2019-12-05T19:58:32Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c96b3aa77d3c3c56caf34870955a1efd16f762c",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +2398,2402 @@\n        assert codes.dtype.name.startswith(\"int\"), codes.dtype.name\n\n        # write the codes; must be in a block shape\n        self.ordered = values.ordered"
  },
  {
    "id" : "462353ef-bc86-4c57-9478-dfe590cc9397",
    "prId" : 30074,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30074#pullrequestreview-327806512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ee72f64-8551-4fb8-bfd9-cc5a3c1d6aab",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what are these from?",
        "createdAt" : "2019-12-05T15:28:44Z",
        "updatedAt" : "2019-12-05T19:58:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "db741e8c-1df7-4813-a4cf-804669aed923",
        "parentId" : "1ee72f64-8551-4fb8-bfd9-cc5a3c1d6aab",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "these are unrelated to most of the PR, but related to the couple-weeks-ago push to get rid of `except Exception`.  In cases where we can't (yet) get rid of `except Exception`, at least re-raising assertion errors is useful to debugginig",
        "createdAt" : "2019-12-05T16:05:49Z",
        "updatedAt" : "2019-12-05T19:58:32Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "cd9c9f13-b2e4-49c6-b82b-d4e79538faf5",
        "parentId" : "1ee72f64-8551-4fb8-bfd9-cc5a3c1d6aab",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "if this is a sticking point im happy to revert and do this elsewhere",
        "createdAt" : "2019-12-05T16:37:56Z",
        "updatedAt" : "2019-12-05T19:58:32Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "eb4c9324-1256-4ff4-bda6-aa1b7bbeca75",
        "parentId" : "1ee72f64-8551-4fb8-bfd9-cc5a3c1d6aab",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no its fine, if possible can you add a comment indicating where its raised from",
        "createdAt" : "2019-12-05T19:44:54Z",
        "updatedAt" : "2019-12-05T19:58:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c96b3aa77d3c3c56caf34870955a1efd16f762c",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1093,1097 @@            # the key is not a valid store, re-raising KeyError\n            raise\n        except AssertionError:\n            # surface any assertion errors for e.g. debugging\n            raise"
  },
  {
    "id" : "65ac09c7-d945-4a90-a39b-9fe7193f0bcc",
    "prId" : 30102,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30102#pullrequestreview-327967010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5be5dda-a433-46d4-8c88-b21d57667011",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why class methods? can we not use free functions?",
        "createdAt" : "2019-12-06T01:53:15Z",
        "updatedAt" : "2019-12-06T02:33:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3656dcd0-1460-450c-947a-f718be79b38d",
        "parentId" : "a5be5dda-a433-46d4-8c88-b21d57667011",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "because we have two classes that implement different versions of some of these functions",
        "createdAt" : "2019-12-06T02:25:04Z",
        "updatedAt" : "2019-12-06T02:33:43Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b0f79a8e6d74c4ef298642fa597741008c96685",
    "line" : 142,
    "diffHunk" : "@@ -1,1 +2593,2597 @@        return _tables().StringCol(itemsize=itemsize)\n\n    @classmethod\n    def get_atom_data(cls, shape, kind: str) -> \"Col\":\n        return cls.get_atom_coltype(kind=kind)()"
  },
  {
    "id" : "623047bf-dda7-4d07-85de-ac998e0c856b",
    "prId" : 30127,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30127#pullrequestreview-328532515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "027aaca5-02e5-4e9d-8f6c-446359efb6d7",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think/hope that something like this is the general case and data_columns can become a property",
        "createdAt" : "2019-12-07T02:09:04Z",
        "updatedAt" : "2019-12-07T02:09:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd74107c38ccf58da6f4f80530b4dc6e61ce5ad8",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +3912,3916 @@\n        self.nan_rep = nan_rep\n        self.data_columns = [col.name for col in vaxes if col.is_data_indexable]\n        self.values_axes = vaxes\n        self.index_axes = new_index_axes"
  },
  {
    "id" : "828ad63b-f965-433e-bf65-8582f119cff0",
    "prId" : 30143,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30143#pullrequestreview-328630562",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1d841dc-b579-4058-b773-1d79caecd400",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "wouldn't it be better to use a get_atom_categorical like you are doing for other dtypes",
        "createdAt" : "2019-12-08T20:22:07Z",
        "updatedAt" : "2019-12-08T20:35:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "be27c6df-3b3d-49c9-929d-7f6b44294a6a",
        "parentId" : "a1d841dc-b579-4058-b773-1d79caecd400",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The get_atom_* funcs are for getting the atom objects; these lines are for getting the meta+metadata+ordered attributes that are going to be pinned to the IndexCol.  Doing it this way just means we're doing it consistently.\r\n\r\nThat said, ideally I'd like to attach the dtype _object_ rather than attaching `dtype` as a string along with all these other attributes.  That might be an option down the road.",
        "createdAt" : "2019-12-08T20:33:07Z",
        "updatedAt" : "2019-12-08T20:35:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c68c45c57631de72e1a6485d31843dec3fad082d",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +3860,3864 @@\n            meta = metadata = ordered = None\n            if is_categorical_dtype(data_converted):\n                ordered = data_converted.ordered\n                meta = \"category\""
  },
  {
    "id" : "cec019ab-a3c0-453b-a7db-cfff48b3bc51",
    "prId" : 30144,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30144#pullrequestreview-328629703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77dabb38-70ce-473d-ade4-d87e851b3bcf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "we may have very little coverage for PeriodIndex FYI",
        "createdAt" : "2019-12-08T20:17:33Z",
        "updatedAt" : "2019-12-08T20:49:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c8313a524fa500dcfaa1792fa108e8b18ef945a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +2314,2318 @@            col_name = f\"UInt{k4}Col\"\n        elif kind.startswith(\"period\"):\n            # we store as integer\n            col_name = \"Int64Col\"\n        else:"
  },
  {
    "id" : "9bf589cd-19cd-4b2c-acb2-11dc0af5aa96",
    "prId" : 30144,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30144#pullrequestreview-328629703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12562032-78f5-49ca-926f-d8d371e26bce",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use needs_i8_conversion (followon ok)",
        "createdAt" : "2019-12-08T20:19:41Z",
        "updatedAt" : "2019-12-08T20:49:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c8313a524fa500dcfaa1792fa108e8b18ef945a",
    "line" : 160,
    "diffHunk" : "@@ -1,1 +4955,4959 @@    dtype_name = data.dtype.name.split(\"[\")[0]\n\n    if data.dtype.kind in [\"m\", \"M\"]:\n        data = np.asarray(data.view(\"i8\"))\n        # TODO: we used to reshape for the dt64tz case, but no longer"
  },
  {
    "id" : "cda472bc-ab31-4786-a527-329065cf68a6",
    "prId" : 30144,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30144#pullrequestreview-328631981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecde7616-a4e7-441b-a759-646294e971bc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can likely use extract_array here",
        "createdAt" : "2019-12-08T20:20:23Z",
        "updatedAt" : "2019-12-08T20:49:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6df140ac-de0c-4f98-ad5c-5b71f1e1662b",
        "parentId" : "ecde7616-a4e7-441b-a759-646294e971bc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "that would give PeriodArray, we need to get i8 back here",
        "createdAt" : "2019-12-08T20:43:02Z",
        "updatedAt" : "2019-12-08T20:49:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0891b965-e53a-4b3b-b30c-3df59349e205",
        "parentId" : "ecde7616-a4e7-441b-a759-646294e971bc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "right once you have the arrays, then you can simply .view('i8') and you are done (pretty generically)",
        "createdAt" : "2019-12-08T20:43:50Z",
        "updatedAt" : "2019-12-08T20:49:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "386a845c-b363-412f-a9db-16ee1bb2c8fc",
        "parentId" : "ecde7616-a4e7-441b-a759-646294e971bc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ok i see what you're saying now.  will do on next pass (along with needs_i8 mentioned above)",
        "createdAt" : "2019-12-08T21:00:22Z",
        "updatedAt" : "2019-12-08T21:00:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c8313a524fa500dcfaa1792fa108e8b18ef945a",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +4960,4964 @@        #  doing that doesnt seem to break anything.  why?\n\n    elif isinstance(data, PeriodIndex):\n        data = data.asi8\n"
  }
]