[
  {
    "id" : "d8ff93ac-17fa-4434-9a7f-82e04e1229d8",
    "prId" : 952,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b44d367-d464-4ade-980e-84b95ffa3ea2",
        "parentId" : null,
        "authorId" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "body" : "I'd be less strict with this first check - there might be situations where you want to pass a generator rather than a list. I'd do `self.colspecs = list(colspecs)`, and let it handle anything that can be turned into a list.\n",
        "createdAt" : "2012-03-22T15:20:30Z",
        "updatedAt" : "2012-03-24T22:50:19Z",
        "lastEditedBy" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "tags" : [
        ]
      },
      {
        "id" : "e750171b-737f-463a-a536-d761bdddfbc7",
        "parentId" : "4b44d367-d464-4ade-980e-84b95ffa3ea2",
        "authorId" : "b74e9201-b200-4bc3-b475-a572ab0ad62b",
        "body" : "Good idea. WIll do.\n",
        "createdAt" : "2012-03-22T16:07:00Z",
        "updatedAt" : "2012-03-24T22:50:19Z",
        "lastEditedBy" : "b74e9201-b200-4bc3-b475-a572ab0ad62b",
        "tags" : [
        ]
      },
      {
        "id" : "14d4ce79-4580-4613-984b-993fb7185b14",
        "parentId" : "4b44d367-d464-4ade-980e-84b95ffa3ea2",
        "authorId" : "b74e9201-b200-4bc3-b475-a572ab0ad62b",
        "body" : "Done.\n",
        "createdAt" : "2012-03-24T16:03:14Z",
        "updatedAt" : "2012-03-24T22:50:20Z",
        "lastEditedBy" : "b74e9201-b200-4bc3-b475-a572ab0ad62b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2e08b52e4eedba54b7c19f6078ac6ed1e0393a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +672,676 @@        self.filler = filler # Empty characters between fields.\n\n        assert isinstance(colspecs, (tuple, list))\n        for colspec in colspecs:\n            assert isinstance(colspec, (tuple, list))"
  },
  {
    "id" : "072cfbb8-2e7c-4a72-850e-cd84b7efe9dc",
    "prId" : 952,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "472d26a6-7fef-4a45-a758-45725f1615e1",
        "parentId" : null,
        "authorId" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "body" : "I'm not wild on the use of `locals()` for these, it seems like unnecessary magic.  But maybe I'm being overly picky.\n",
        "createdAt" : "2012-03-24T21:19:37Z",
        "updatedAt" : "2012-03-24T22:50:20Z",
        "lastEditedBy" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "tags" : [
        ]
      },
      {
        "id" : "50e1e589-a825-432c-b193-b6e7667a59c0",
        "parentId" : "472d26a6-7fef-4a45-a758-45725f1615e1",
        "authorId" : "55206695-bb42-4d72-886f-f5370a77363e",
        "body" : "Well, the alternative here is to either write out `kw=kw` for each keyword argument or to have `**kwds` which makes the signature in IPython less attractive. Not sure what's the best solution-- using locals doesn't strike me as so bad\n",
        "createdAt" : "2012-03-24T21:41:35Z",
        "updatedAt" : "2012-03-24T22:50:20Z",
        "lastEditedBy" : "55206695-bb42-4d72-886f-f5370a77363e",
        "tags" : [
        ]
      },
      {
        "id" : "2da9b9ad-fd5f-453c-9567-39ce3d75c4c7",
        "parentId" : "472d26a6-7fef-4a45-a758-45725f1615e1",
        "authorId" : "b74e9201-b200-4bc3-b475-a572ab0ad62b",
        "body" : "Having to enumerate all the paramters is both error-prone, makes it difficult to extend the other functions, and it hides the differences between the calls to _read(). I wish there was a method to get just the args, but there isn't. \n",
        "createdAt" : "2012-03-24T22:04:31Z",
        "updatedAt" : "2012-03-24T22:50:20Z",
        "lastEditedBy" : "b74e9201-b200-4bc3-b475-a572ab0ad62b",
        "tags" : [
        ]
      },
      {
        "id" : "c1b5ddfd-e95c-4c44-a656-e851e4ec39a9",
        "parentId" : "472d26a6-7fef-4a45-a758-45725f1615e1",
        "authorId" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "body" : "Indeed. I think PEP 362 is aimed at this sort of thing - you'd use `**kwargs`, and construct a more meaningful function signature for introspection - but that's still a work in progress.\n",
        "createdAt" : "2012-03-24T22:45:30Z",
        "updatedAt" : "2012-03-24T22:50:20Z",
        "lastEditedBy" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "tags" : [
        ]
      },
      {
        "id" : "871b25ec-37e0-4371-b768-8e95fd29bf3b",
        "parentId" : "472d26a6-7fef-4a45-a758-45725f1615e1",
        "authorId" : "b74e9201-b200-4bc3-b475-a572ab0ad62b",
        "body" : "Ideally it would be like LISP and a :as variable could be assigned to the set of kwargs. But it's Python. Whatever. We'll eventually end up with LISP again.\n",
        "createdAt" : "2012-03-24T22:53:28Z",
        "updatedAt" : "2012-03-24T22:53:28Z",
        "lastEditedBy" : "b74e9201-b200-4bc3-b475-a572ab0ad62b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2e08b52e4eedba54b7c19f6078ac6ed1e0393a7",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +149,153 @@             delimiter=None,\n             encoding=None):\n    kwds = locals()\n\n    # Alias sep -> delimiter."
  },
  {
    "id" : "6205e421-f862-42cc-9788-15cbc44fe4d4",
    "prId" : 2005,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8611afb5-1f94-4fcf-8ac4-be53205c7785",
        "parentId" : null,
        "authorId" : "55206695-bb42-4d72-886f-f5370a77363e",
        "body" : "This is the only slightly concerning thing I see as I don't know the impact should these unicode strings get passed to the relevant Cython parsing code (which expects byte strings currently)-- I guess that will just need to be fixed independently if it's a problem.\n",
        "createdAt" : "2012-10-10T15:13:15Z",
        "updatedAt" : "2012-10-11T20:48:01Z",
        "lastEditedBy" : "55206695-bb42-4d72-886f-f5370a77363e",
        "tags" : [
        ]
      },
      {
        "id" : "313849f2-192f-4ad5-8208-17dc1dd3819d",
        "parentId" : "8611afb5-1f94-4fcf-8ac4-be53205c7785",
        "authorId" : null,
        "body" : "[Cython docs](http://docs.cython.org/src/tutorial/strings.html) - you're right.\nbut if date_cols[0] is unicode with non-ascii codepoints then str() will blow up, \nso something needs to change.\n\nif you work with bytes. you are inevitably assuming an encoding, utf-8 most likely.\ncalling c should probably be considered an \"I/O point\" where encoding/decoding \ntakes place. of course that might hurt the performance benefits of using cython \nto begin with. but unless it's unconscionably terrible, I think that's the way to go.\n\nanother (not \"correct\") option is storing everything internally as utf-8, which can \nbe made consistent. but then you would get things like #1292 happening again,\nand I would guess Py3 support would become (even more) hellish.\n\nis the c_parser branch stable enough to look at from a unicode perspective?\n",
        "createdAt" : "2012-10-10T16:47:56Z",
        "updatedAt" : "2012-10-11T20:48:01Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "27f2e4dc-4dff-4414-9cfe-baaffc1d4ab7",
        "parentId" : "8611afb5-1f94-4fcf-8ac4-be53205c7785",
        "authorId" : null,
        "body" : "Cython docs - [Decoding bytes to text](http://docs.cython.org/src/tutorial/strings.html#decoding-bytes-to-text)\n\nThe initially presented way of passing and receiving C strings is sufficient if your code only deals with binary data in the strings. When we deal with encoded text, however, **it is best practice to decode the C byte strings to Python Unicode strings on reception, and to encode Python Unicode strings to C byte strings on the way out**.\n",
        "createdAt" : "2012-10-10T20:09:07Z",
        "updatedAt" : "2012-10-11T20:48:01Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "5fa2ae439f4e02e0d97ff05fbba16337685297f8",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1191,1195 @@    # stripped = [map(str.strip, x) for x in date_cols]\n    rs = np.array([' '.join([unicode(y) for y in x])\n                   for x in zip(*date_cols)], dtype=object)\n    return rs\n"
  },
  {
    "id" : "149dfbf0-b8fa-45c1-bbae-b802b7a784ac",
    "prId" : 7029,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98ec909d-0924-48a1-8d6b-f1f186216f37",
        "parentId" : null,
        "authorId" : "5bae3054-6bb1-4934-9daf-b10d33ef28ab",
        "body" : "This duplicates the previous behavior of ignoring the columns returned by _clean_index_names, except now we are not ignoring the columns returned by _get_index_name which may contain index columns (see \"case 0\")\n",
        "createdAt" : "2014-05-03T20:09:50Z",
        "updatedAt" : "2014-05-06T17:30:26Z",
        "lastEditedBy" : "5bae3054-6bb1-4934-9daf-b10d33ef28ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "8651a438d898f5e94b52f451e52039a721649acb",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1826,1830 @@        else:\n            # Case 2\n            (index_name, columns_,\n             self.index_col) = _clean_index_names(columns, self.index_col)\n"
  },
  {
    "id" : "a4717bbe-b737-451f-9c12-3e1f85074f6b",
    "prId" : 8548,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f56f22de-6a30-40b7-a1d8-b0acbc871d2f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is good\n",
        "createdAt" : "2014-11-15T17:11:34Z",
        "updatedAt" : "2014-11-15T17:11:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "89d48716906dd43c6e5aab919e513f6aec0248a5",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1280,1284 @@        input argument, the cell (not column) content, and return the\n        transformed content.\n    encoding : string, default None\n        Encoding to use for UTF when reading/writing (ex. 'utf-8')\n    squeeze : boolean, default False"
  },
  {
    "id" : "89fcd202-4846-4c0a-80db-f032e003c6bd",
    "prId" : 10249,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33db251e-c418-47e7-a1b8-1e0415b199db",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "techincally we should put the `to_datetime` around this too (though I don't know of anything that hits this line). Can you see if anything does? (e.g. put a halt and run the test suite for the parsers) and see.\n",
        "createdAt" : "2015-06-07T22:33:13Z",
        "updatedAt" : "2015-06-07T22:33:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b98adc89-c706-452b-9791-277441559858",
        "parentId" : "33db251e-c418-47e7-a1b8-1e0415b199db",
        "authorId" : "f70f9343-3987-4ba5-a3b7-d3a0e4f69b3a",
        "body" : "Are you sure? It fails if I do so:\n\n```\n$ py.test pandas/io/tests/test_date_converters.py\n============================= test session starts =============================\nplatform win32 -- Python 2.7.6 -- py-1.4.27 -- pytest-2.7.1\nrootdir: c:\\Users\\Christer\\code\\python\\pandas, inifile:\nplugins: cov, mock\ncollected 6 items\n\npandas\\io\\tests\\test_date_converters.py ...F..\n\n================================== FAILURES ===================================\n_________________________ TestConverters.test_generic _________________________\n\nself = <pandas.io.tests.test_date_converters.TestConverters testMethod=test_generic>\n\n    def test_generic(self):\n        data = \"year, month, day, a\\n 2001, 01, 10, 10.\\n 2001, 02, 1, 11.\"\n        datecols = {'ym': [0, 1]}\n        dateconverter = lambda y, m: date(year=int(y), month=int(m), day=1)\n        df = read_table(StringIO(data), sep=',', header=0,\n                        parse_dates=datecols,\n                        date_parser=dateconverter)\n        self.assertIn('ym', df)\n>       self.assertEqual(df.ym.ix[0], date(2001, 1, 1))\nE       AssertionError: Timestamp('2001-01-01 00:00:00') != datetime.date(2001, 1, 1)\n\npandas\\io\\tests\\test_date_converters.py:120: AssertionError\n===================== 1 failed, 5 passed in 0.63 seconds ======================\n```\n",
        "createdAt" : "2015-06-08T08:43:52Z",
        "updatedAt" : "2015-06-08T08:43:52Z",
        "lastEditedBy" : "f70f9343-3987-4ba5-a3b7-d3a0e4f69b3a",
        "tags" : [
        ]
      },
      {
        "id" : "9395f315-8af9-493c-a7fd-0d8663870d63",
        "parentId" : "33db251e-c418-47e7-a1b8-1e0415b199db",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, I guess that is some old behavior. `datetime.date` is generally not used / supported, so this is a very inefficient way of doing things.\n",
        "createdAt" : "2015-06-08T13:28:23Z",
        "updatedAt" : "2015-06-08T13:28:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f41f4d47688a1b4ea601383ab249075d4cff321b",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +2073,2077 @@                                            dayfirst=dayfirst))\n                except Exception:\n                    return generic_parser(date_parser, *date_cols)\n\n    return converter"
  },
  {
    "id" : "ff76ea77-8925-4d19-8b86-ec46aa033f66",
    "prId" : 10469,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9b1474a-2edc-4c08-96b2-6978eaa749af",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why does this need sorting? why not just pop them in order?\n\ne.g.\n`columns = columns - Index(index_col)`\n",
        "createdAt" : "2015-07-03T11:55:18Z",
        "updatedAt" : "2015-07-06T20:44:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "661bd64c-0c5c-451b-a67c-abb9e59c47b9",
        "parentId" : "a9b1474a-2edc-4c08-96b2-6978eaa749af",
        "authorId" : "79837505-09e9-4cf8-a3be-c31b5ad6ac22",
        "body" : "It needs sorting so that the calculated column index, i.e. `n-i` in the `pop`, evaluates to the correct value even for a multiindex that's specified with decrementing index columns. \n\nE.g. Without the sort and for `index_col=[1,0]`, the loop would try to `pop`  first column `1 - 0 = 0` and then `0 - 1 = -1`.\n\nI expect I'm missing something but  `columns = columns - Index(index_col)` raises an error for me (`*** TypeError: can only perform ops with scalar values`)\n",
        "createdAt" : "2015-07-03T22:18:32Z",
        "updatedAt" : "2015-07-06T20:44:19Z",
        "lastEditedBy" : "79837505-09e9-4cf8-a3be-c31b5ad6ac22",
        "tags" : [
        ]
      },
      {
        "id" : "5abbeb69-87ac-455d-a607-c1b85bcc6672",
        "parentId" : "a9b1474a-2edc-4c08-96b2-6978eaa749af",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sorry old syntax\n\ntry\n\ncolumns.difference(Index(index_col))\n",
        "createdAt" : "2015-07-03T22:32:52Z",
        "updatedAt" : "2015-07-06T20:44:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9b2871bf-207b-4e8b-a130-b1cb73388eda",
        "parentId" : "a9b1474a-2edc-4c08-96b2-6978eaa749af",
        "authorId" : "79837505-09e9-4cf8-a3be-c31b5ad6ac22",
        "body" : "`columns` is a list of strings and `index_col` is a list of integers. I don't think this will work either.\n",
        "createdAt" : "2015-07-03T22:39:02Z",
        "updatedAt" : "2015-07-06T20:44:19Z",
        "lastEditedBy" : "79837505-09e9-4cf8-a3be-c31b5ad6ac22",
        "tags" : [
        ]
      },
      {
        "id" : "223c3c59-dfaf-46ee-981f-720ff9668008",
        "parentId" : "a9b1474a-2edc-4c08-96b2-6978eaa749af",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think need some more tests then\nindex_col can also be a list of strings\n",
        "createdAt" : "2015-07-03T22:44:35Z",
        "updatedAt" : "2015-07-06T20:44:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5888a75d-4125-407b-a613-f3f7aa9e2bf0",
        "parentId" : "a9b1474a-2edc-4c08-96b2-6978eaa749af",
        "authorId" : "79837505-09e9-4cf8-a3be-c31b5ad6ac22",
        "body" : "In this PR we already have tests that specify a multiindex with either a list of strings or a list of ints (see `test_empty_with_multiindex` and `test_empty_with_reversed_multiindex`).\n\nI haven't completely stepped through the code but afaics, function `_clean_index_names` is called prior to `get_empty_meta` and converts `index_col` as a list of strings into a list of ints.\n",
        "createdAt" : "2015-07-03T22:57:39Z",
        "updatedAt" : "2015-07-06T20:44:19Z",
        "lastEditedBy" : "79837505-09e9-4cf8-a3be-c31b5ad6ac22",
        "tags" : [
        ]
      }
    ],
    "commit" : "85231050c7438425467a93686d1382000973efd8",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +2229,2233 @@        index_col = list(index_col)\n        index = MultiIndex.from_arrays([[]] * len(index_col), names=index_names)\n        index_col.sort()\n        for i, n in enumerate(index_col):\n            columns.pop(n-i)"
  },
  {
    "id" : "6e3633d5-ed45-4e35-971a-681354df37f8",
    "prId" : 14077,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "122486a6-5dc2-4152-860d-e8eb417118aa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "`is_list_like`? (I don't know if its coerced to a list before this), same below\n",
        "createdAt" : "2016-08-25T10:34:47Z",
        "updatedAt" : "2016-08-26T07:35:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "20d913fd-fa21-4d69-82b2-10a65cde21c7",
        "parentId" : "122486a6-5dc2-4152-860d-e8eb417118aa",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "We expect `parse_dates` to a be `bool`, `list`, or `dict` per the <a href=\"http://pandas.pydata.org/pandas-docs/version/0.18.1/generated/pandas.read_csv.html\">docs</a>.  This is explicitly validated as well (see <a href=\"https://github.com/pydata/pandas/blob/185fcbebd8c65706a9e3fea2d1ae28aa2d8baa93/pandas/io/parsers.py#L982\">here</a>), so `is_list_like` is unnecessary.\n",
        "createdAt" : "2016-08-26T04:37:28Z",
        "updatedAt" : "2016-08-26T07:35:12Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "258a51f4-fc13-48d8-9ab2-7d7835da8a87",
        "parentId" : "122486a6-5dc2-4152-860d-e8eb417118aa",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do you need to handle `dict` at this point? (or is that already transformed)\n",
        "createdAt" : "2016-08-26T10:21:37Z",
        "updatedAt" : "2016-08-26T10:21:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bf17168b-b454-4910-b95d-3232f73d113b",
        "parentId" : "122486a6-5dc2-4152-860d-e8eb417118aa",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "`index_col` can never be a `dict` per the <a href=\"http://pandas.pydata.org/pandas-docs/version/0.18.1/generated/pandas.read_csv.html\">docs</a>.\n\nIf you're referring to `parse_dates`, `parse_dates` being a `dict` has a completely different meaning that is independent of the `index_col`.\n",
        "createdAt" : "2016-08-27T01:02:24Z",
        "updatedAt" : "2016-08-27T01:02:24Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2ed33424765e7923db70e64ca2ca7b1c77c1be4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1476,1480 @@\n        elif self.parse_dates:\n            if isinstance(self.index_col, list):\n                for k in self.index_col:\n                    _set(k)"
  },
  {
    "id" : "d7f5120c-beaf-4f41-8597-b63f17563075",
    "prId" : 14234,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14234#pullrequestreview-437509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22c55022-4d01-4eb6-a947-10aeb01ffc34",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can just in-line `_evaluate_usecols` here, then change `_vaidate_usecols` to return the usecols and set it\n",
        "createdAt" : "2016-09-16T10:28:35Z",
        "updatedAt" : "2016-12-06T04:48:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6eb78220-5094-472e-bbe2-abe8d8a7b5ec",
        "parentId" : "22c55022-4d01-4eb6-a947-10aeb01ffc34",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Took a look but don't think that would work.  The problem seems to be the names argument that's a requirement for `_evaluate_usecols`.  \n\nUnless I'm missing something I think I'd have to modify `_validate_usecols` to accept names as an argument, but it's currently being called before the names are even set (unless explicitly passed as an argument to the `read` function)\n",
        "createdAt" : "2016-09-16T22:27:25Z",
        "updatedAt" : "2016-12-06T04:48:37Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b0d112b7c18c4f31b66a283cfde383f9fec21cc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1009,1013 @@    if usecols is not None:\n        if callable(usecols):\n            return usecols\n        usecols_dtype = lib.infer_dtype(usecols)\n        if usecols_dtype not in ('empty', 'integer',"
  },
  {
    "id" : "133a8ce6-6901-49b7-a3fd-403dc0011ff4",
    "prId" : 14234,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14234#pullrequestreview-10275843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c16bb2a-77db-4295-bc8a-19b34baa10e6",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add before the example some explanation how the callable is used? (I suppose it is called on each individual column name and should return True or False?)\r\n\r\nAnd maybe also use ``` `` ``` around the code example to better indicate that the \"in ['AAA', 'BBB', 'DDD']\" still belongs with the \"lambda x: x.upper()\"",
        "createdAt" : "2016-11-28T09:10:27Z",
        "updatedAt" : "2016-12-06T04:48:37Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b0d112b7c18c4f31b66a283cfde383f9fec21cc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +102,106 @@    example of a valid callable argument would be ``lambda x: x.upper() in\n    ['AAA', 'BBB', 'DDD']``. Using this parameter results in much faster\n    parsing time and lower memory usage.\nas_recarray : boolean, default False\n    DEPRECATED: this argument will be removed in a future version. Please call"
  },
  {
    "id" : "83d3cd10-ef7f-4725-929a-67331e3e0106",
    "prId" : 14234,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14234#pullrequestreview-11305746",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84eb32e1-cc02-482a-a6f8-9d914b7cda07",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you give a mini-doc string here",
        "createdAt" : "2016-12-04T23:47:58Z",
        "updatedAt" : "2016-12-06T04:48:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b0d112b7c18c4f31b66a283cfde383f9fec21cc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +991,995 @@    If not a callable, returns 'usecols'.\n    \"\"\"\n    if callable(usecols):\n        return set([i for i, name in enumerate(names)\n                    if usecols(name)])"
  },
  {
    "id" : "414e4615-52bc-4ede-b523-c7494d064d0b",
    "prId" : 14295,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14295#pullrequestreview-6068267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76471977-64c9-4d63-9cbd-d32197a0cfb8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "While you are at it, can you add a docstring here?\n",
        "createdAt" : "2016-10-27T14:20:36Z",
        "updatedAt" : "2016-11-25T20:36:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "3abb0bd6e46e78557c1fd480ac173881dc5d530b",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +1351,1355 @@        return result\n\n    def _infer_types(self, values, na_values, try_num_bool=True):\n        \"\"\"\n        Infer types of values, possibly casting"
  },
  {
    "id" : "022bbcc8-74d5-4527-92ae-e5606a72be68",
    "prId" : 14582,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14582#pullrequestreview-10126773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3018d36-847d-4013-a00e-3863b403a82f",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is the second part of the check needed (`self.quoting != csv.QUOTE_NONE`). Because AFAIU also when you do pass this, quotes are still be ignored by the regex expression to split the line, and you can still have this problem.",
        "createdAt" : "2016-11-25T08:44:53Z",
        "updatedAt" : "2016-11-25T08:44:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bfdb2be3-f414-4ab9-b2d8-70f2c5ff20c1",
        "parentId" : "d3018d36-847d-4013-a00e-3863b403a82f",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "@jorisvandenbossche : If `quoting=csv.QUOTE_NONE`, all quotation marks are treated as data, so that's the user's fault, not ours.  That's why the check is necessary.",
        "createdAt" : "2016-11-25T08:52:49Z",
        "updatedAt" : "2016-11-25T08:52:57Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "5b9a402d-9ca6-49a2-8bb7-8fbe41b42353",
        "parentId" : "d3018d36-847d-4013-a00e-3863b403a82f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Although it's a user error, you can still run into this problem so the message can still be useful I think. But I do see your point, so OK",
        "createdAt" : "2016-11-25T08:56:09Z",
        "updatedAt" : "2016-11-25T08:56:09Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "dda588b1d15df83f77f302282ec6f026a7e10591",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2516,2520 @@            msg = ('Expected %d fields in line %d, saw %d' %\n                   (col_len, row_num + 1, zip_len))\n            if len(self.delimiter) > 1 and self.quoting != csv.QUOTE_NONE:\n                # see gh-13374\n                reason = ('Error could possibly be due to quotes being '"
  },
  {
    "id" : "3911272d-a1ee-492f-b802-9c257c2cd197",
    "prId" : 15925,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15925#pullrequestreview-31546981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e326051d-d86c-40f6-8909-9c5f9e0f93f2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "tested?",
        "createdAt" : "2017-04-06T22:37:37Z",
        "updatedAt" : "2017-04-07T15:20:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "03dbdc2d-a866-4779-9040-5ae6f0895e88",
        "parentId" : "e326051d-d86c-40f6-8909-9c5f9e0f93f2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "also is this validated to be an integer? (and tested)?",
        "createdAt" : "2017-04-06T22:37:51Z",
        "updatedAt" : "2017-04-07T15:20:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9c7c43b1-5e42-4472-8a86-887c2c7b2a7e",
        "parentId" : "e326051d-d86c-40f6-8909-9c5f9e0f93f2",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "1) Negative numbers tested, yes.\r\n2) Verified as an integer, no.  Can do in a follow-up (refactored)",
        "createdAt" : "2017-04-07T03:15:30Z",
        "updatedAt" : "2017-04-07T15:20:51Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "06a92b6e-663c-4a0a-b97c-46ba8c109aaf",
        "parentId" : "e326051d-d86c-40f6-8909-9c5f9e0f93f2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure",
        "createdAt" : "2017-04-07T12:23:53Z",
        "updatedAt" : "2017-04-07T15:20:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3a8ccaf7371f9e17c8a55f58865eb8b96b6ff50",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +2685,2689 @@\n    def _rows_to_cols(self, content):\n        if self.skipfooter < 0:\n            raise ValueError('skip footer cannot be negative')\n"
  },
  {
    "id" : "a1fa58ad-9f5d-4364-8d3c-948283d03208",
    "prId" : 15925,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15925#pullrequestreview-31647781",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a333d5f6-c549-47b4-b9cd-60a9a9c65cb5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what is the difference between``_empty`` and ``_check_empty``? (I would prefer just the ``_check_empty`` as more meanigful name)",
        "createdAt" : "2017-04-07T12:23:31Z",
        "updatedAt" : "2017-04-07T15:20:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f89ba497-a2d4-422b-9a95-7e65f3fdd14c",
        "parentId" : "a333d5f6-c549-47b4-b9cd-60a9a9c65cb5",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yes, there are.  Admittedly, the naming is not clear.  `_check_empty` doesn't just check for empty lines (`_empty` does though).  It also removes them.  A renaming + documentation would be good as a (third!) follow-up.",
        "createdAt" : "2017-04-07T14:18:51Z",
        "updatedAt" : "2017-04-07T15:20:51Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "7558c10d-e9de-41c9-899b-6f6fa1456ba0",
        "parentId" : "a333d5f6-c549-47b4-b9cd-60a9a9c65cb5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, pls do so (in followup)",
        "createdAt" : "2017-04-07T19:45:01Z",
        "updatedAt" : "2017-04-07T19:45:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3a8ccaf7371f9e17c8a55f58865eb8b96b6ff50",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +2483,2487 @@                            line = ret[0]\n                            break\n                    elif self._empty(orig_line) or line:\n                        break\n"
  },
  {
    "id" : "e3e2431d-fd06-494c-8924-a8586176d056",
    "prId" : 16950,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16950#pullrequestreview-50193179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a97f533-6b49-4777-b0ab-1d614844f2b4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you *may* need to update ``docs/source/io.rst`` as well",
        "createdAt" : "2017-07-15T16:29:56Z",
        "updatedAt" : "2017-07-17T23:31:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8625c3b9-380a-45f2-a567-7817db1da6e3",
        "parentId" : "6a97f533-6b49-4777-b0ab-1d614844f2b4",
        "authorId" : "1b2f92c6-1f54-430a-b051-f1229eece4b2",
        "body" : "This is done now.",
        "createdAt" : "2017-07-15T17:04:57Z",
        "updatedAt" : "2017-07-17T23:31:01Z",
        "lastEditedBy" : "1b2f92c6-1f54-430a-b051-f1229eece4b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cce4728fe9d32da4b16b0e69d7a05a14510c77f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +315,319 @@    different from ``'\\s+'`` will be interpreted as regular expressions and\n    will also force the use of the Python parsing engine. Note that regex\n    delimiters are prone to ignoring quoted data. Regex example: ``'\\r\\t'``\ndelimiter : str, default ``None``\n    Alternative argument name for sep.\"\"\""
  },
  {
    "id" : "8e91b36b-6b20-4e9d-98b5-e37a92e04cb8",
    "prId" : 16950,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16950#pullrequestreview-50480007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a16e9877-41a3-45f5-a282-e284a1010441",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Why was this moved in the first place?",
        "createdAt" : "2017-07-16T08:15:50Z",
        "updatedAt" : "2017-07-17T23:31:01Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "f5a6e009-17ed-4bcb-9182-4992a179a39d",
        "parentId" : "a16e9877-41a3-45f5-a282-e284a1010441",
        "authorId" : "1b2f92c6-1f54-430a-b051-f1229eece4b2",
        "body" : "I'm not sure why this was originally moved out of `_sep_doc`, however I've put it back as this particular documentation of the `delimiter` parameter only applies to `read_csv` and `read_table`, both of which use `_sep_doc` in their documentation.",
        "createdAt" : "2017-07-17T23:52:58Z",
        "updatedAt" : "2017-07-17T23:52:58Z",
        "lastEditedBy" : "1b2f92c6-1f54-430a-b051-f1229eece4b2",
        "tags" : [
        ]
      },
      {
        "id" : "7f1f15ac-9076-4df4-aebe-d46eb9322ca1",
        "parentId" : "a16e9877-41a3-45f5-a282-e284a1010441",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Awesome.  Thanks!",
        "createdAt" : "2017-07-17T23:58:30Z",
        "updatedAt" : "2017-07-17T23:58:30Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cce4728fe9d32da4b16b0e69d7a05a14510c77f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +318,322 @@delimiter : str, default ``None``\n    Alternative argument name for sep.\"\"\"\n\n_read_csv_doc = \"\"\"\nRead CSV (comma-separated) file into DataFrame"
  },
  {
    "id" : "2290af54-19b9-42d7-884e-a672d0f8a9ee",
    "prId" : 17310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17310#pullrequestreview-67515034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e116462-a719-4a10-890b-57b666ad8b9a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "there is a validate_usecols_arg function, is there a reason you are creating a new one?",
        "createdAt" : "2017-10-05T10:32:26Z",
        "updatedAt" : "2017-12-02T16:00:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "42c2722d-676b-42da-8b35-3d4f73521d49",
        "parentId" : "1e116462-a719-4a10-890b-57b666ad8b9a",
        "authorId" : "997c4bf0-6f89-45c6-8eb6-0783741cce42",
        "body" : "Sure, was going from @gfyoung's suggestion.\r\nWe could extend the existing function, at the moment it's only taking `usecols` as an arg so would be extending it's arguments as well as logic.\r\nI've not checked if every call to `validate_usecols_arg` would have a `names` argument to pass through, so may need to default it? Although I would think we'd always have column names to check against, right?\r\n\r\nLet me know if this is a 'must-have' for you and I'll implement.",
        "createdAt" : "2017-10-05T10:56:40Z",
        "updatedAt" : "2017-12-02T16:00:43Z",
        "lastEditedBy" : "997c4bf0-6f89-45c6-8eb6-0783741cce42",
        "tags" : [
        ]
      },
      {
        "id" : "71131776-d41b-4726-ad1f-6d8929e252f3",
        "parentId" : "1e116462-a719-4a10-890b-57b666ad8b9a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "it certainly can be an optional argument\r\nhaving 2 functions do similar things is confusing",
        "createdAt" : "2017-10-05T21:09:23Z",
        "updatedAt" : "2017-12-02T16:00:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dfccdb6e617ec6596a1a9c34ff4e5d5b4e091cf",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1157,1161 @@    Returns\n    -------\n    usecols : iterable of usecols\n        The `usecols` parameter if the validation succeeds.\n"
  },
  {
    "id" : "be0e0788-45c0-4793-817e-a26136b4c144",
    "prId" : 17310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17310#pullrequestreview-79712019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0c9004f-5ca9-405b-9adc-bf027efd345f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you might need to ', '.join(missing) here, not sure.",
        "createdAt" : "2017-11-29T00:09:52Z",
        "updatedAt" : "2017-12-02T16:00:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0d6f40d7-ff2f-474a-9996-853085881ef2",
        "parentId" : "d0c9004f-5ca9-405b-9adc-bf027efd345f",
        "authorId" : "997c4bf0-6f89-45c6-8eb6-0783741cce42",
        "body" : "```python\r\nPython 3.6.3 |Anaconda, Inc.| (default, Nov  8 2017, 18:10:31) \r\n[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> l = [1, 'foo', [2,3]]\r\n>>> 'Formatted l: {}'.format(l)\r\n\"Formatted l: [1, 'foo', [2, 3]]\"\r\n```\r\n\r\nif you'd prefer a different error message, I'd be happy to use join though.",
        "createdAt" : "2017-11-29T01:09:53Z",
        "updatedAt" : "2017-12-02T16:00:43Z",
        "lastEditedBy" : "997c4bf0-6f89-45c6-8eb6-0783741cce42",
        "tags" : [
        ]
      },
      {
        "id" : "e3c60954-6f3a-4ecb-a893-98cd051f5c3c",
        "parentId" : "d0c9004f-5ca9-405b-9adc-bf027efd345f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that’s fine i guess format is pretty smart about this ok!",
        "createdAt" : "2017-11-29T01:19:13Z",
        "updatedAt" : "2017-12-02T16:00:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dfccdb6e617ec6596a1a9c34ff4e5d5b4e091cf",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1168,1172 @@        raise ValueError(\n            \"Usecols do not match columns, \"\n            \"columns expected but not found: {missing}\".format(missing=missing)\n        )\n"
  },
  {
    "id" : "7cf89608-8525-48e7-8975-bba6c190ea03",
    "prId" : 17351,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17351#pullrequestreview-59236184",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a63f304a-d6d1-4d4b-91e7-c6110376ee9d",
        "parentId" : null,
        "authorId" : "6ce9b37d-3c90-4ab0-b29b-fdf21b27a7d8",
        "body" : "self.usecols is a ``set`` of the original usecols. On PyPy ``set``s are not sorted so \"every single time\" requires a sort. \r\n```\r\n>>>> list(set([3, 0, 2]))\r\n[3, 0, 2]\r\n```\r\nRunning tests with this line replaces by ``usecols.reverse() will show the dependency on the list being sorted:",
        "createdAt" : "2017-08-28T23:55:03Z",
        "updatedAt" : "2017-09-06T18:50:08Z",
        "lastEditedBy" : "6ce9b37d-3c90-4ab0-b29b-fdf21b27a7d8",
        "tags" : [
        ]
      },
      {
        "id" : "b4bb0637-9d03-4f7b-a400-e49db7451e9c",
        "parentId" : "a63f304a-d6d1-4d4b-91e7-c6110376ee9d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no averse to this, but why does this matter?",
        "createdAt" : "2017-08-29T13:02:48Z",
        "updatedAt" : "2017-09-06T18:50:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "32f4f440-984b-4934-994d-79fa8921a288",
        "parentId" : "a63f304a-d6d1-4d4b-91e7-c6110376ee9d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a test that exercises the sortedness?",
        "createdAt" : "2017-08-29T13:03:25Z",
        "updatedAt" : "2017-09-06T18:50:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bf8914c4-50ca-4d29-a2cc-bdb50f37c653",
        "parentId" : "a63f304a-d6d1-4d4b-91e7-c6110376ee9d",
        "authorId" : "6ce9b37d-3c90-4ab0-b29b-fdf21b27a7d8",
        "body" : "there are tests, but they all pass on CPython since sets of ints are always sorted, ie pandas/tests/io/parsers/usecol.py, lines 199, 270, 296 which all failed on PyPy before this change. Not sure how I could construct a failing test for CPython",
        "createdAt" : "2017-08-29T13:17:49Z",
        "updatedAt" : "2017-09-06T18:50:08Z",
        "lastEditedBy" : "6ce9b37d-3c90-4ab0-b29b-fdf21b27a7d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb7ef636ad83700239615e10bc1810cbe2f99dcf",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1715,1719 @@            # the correct order every single time.\n            usecols = list(self.usecols)\n            usecols.sort()\n        elif (callable(self.usecols) or\n                self.usecols_dtype not in ('empty', None)):"
  },
  {
    "id" : "eb4493f4-ac5e-439f-8667-974ef1d0e6d3",
    "prId" : 18042,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18042#pullrequestreview-73756763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6090999e-0230-4fe6-847f-f5ed66c2f9b7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would also add a note in Handling Column Names, maybe a ``::note`` box would be nice.",
        "createdAt" : "2017-10-31T01:16:06Z",
        "updatedAt" : "2017-11-30T14:25:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "804231dd-1e08-47b2-900b-e903c248f92f",
        "parentId" : "6090999e-0230-4fe6-847f-f5ed66c2f9b7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make this note the same as above?",
        "createdAt" : "2017-11-02T11:29:18Z",
        "updatedAt" : "2017-11-30T14:25:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "04ee499e10a21518e7c4ebc66b5a212bfb72666b",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +80,84 @@    names are inferred from the first line of the file, if column\n    names are passed explicitly then the behavior is identical to\n    ``header=None``. Explicitly pass ``header=0`` to be able to\n    replace existing names. The header can be a list of integers that\n    specify row locations for a multi-index on the columns"
  },
  {
    "id" : "0899e02b-b7d9-4e2a-899a-89b7968c0aac",
    "prId" : 18094,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18094#pullrequestreview-74148351",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf3c3989-a467-49fc-b380-93391f53a25c",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Add a docstring to this function.",
        "createdAt" : "2017-11-03T17:01:44Z",
        "updatedAt" : "2017-11-04T17:39:17Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "41eea132838ed7c29de60c9d4d8764a6d52068c9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1107,1111 @@\n\ndef _is_potential_multi_index(columns):\n    \"\"\"\n    Check whether or not the `columns` parameter"
  },
  {
    "id" : "a5f73808-e314-4c68-b8a6-48e7b3abb767",
    "prId" : 18729,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18729#pullrequestreview-83971786",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a36d3cd7-c99e-4746-a4ce-5a0a8d09f5f5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you also add this note to io.rst",
        "createdAt" : "2017-12-12T01:09:59Z",
        "updatedAt" : "2017-12-16T10:24:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "171d122c-6485-4ce0-93be-8ab51f61e9f9",
        "parentId" : "a36d3cd7-c99e-4746-a4ce-5a0a8d09f5f5",
        "authorId" : "55a48ac5-5420-4de3-8f6f-c4a132aaafde",
        "body" : "Done.",
        "createdAt" : "2017-12-16T10:26:15Z",
        "updatedAt" : "2017-12-16T10:26:15Z",
        "lastEditedBy" : "55a48ac5-5420-4de3-8f6f-c4a132aaafde",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b3c0def50a882b779c1ad2f82feca820155532b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +102,106 @@    that correspond to column names provided either by the user in `names` or\n    inferred from the document header row(s). For example, a valid array-like\n    `usecols` parameter would be [0, 1, 2] or ['foo', 'bar', 'baz']. Element\n    order is ignored, so usecols=[1,0] is the same as [0,1].\n"
  },
  {
    "id" : "578bfe96-7512-4356-ba8f-ef36e195186d",
    "prId" : 19260,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19260#pullrequestreview-89326968",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8948346-b314-4ee3-9ea1-cb68ec486759",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is an anti-pattern to modify the dict that you are iterating. can you create you create a new one here?",
        "createdAt" : "2018-01-16T11:22:19Z",
        "updatedAt" : "2018-01-17T05:22:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "551772f5-7fe1-4db7-bceb-6b4a446f47cd",
        "parentId" : "b8948346-b314-4ee3-9ea1-cb68ec486759",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "@jreback : I realize that, but I think that's why up above, someone wrote `na_values = na_values.copy()`.  The reference to the original input is destroyed and created a \"new\" dictionary.  Do you just want me to change the assigned variable name?",
        "createdAt" : "2018-01-16T17:32:24Z",
        "updatedAt" : "2018-01-17T05:22:54Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "b66ba4a0-e798-414a-996d-fd0950c0fbc2",
        "parentId" : "b8948346-b314-4ee3-9ea1-cb68ec486759",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah you should create a new empty dict and then assign to it (it doesn't have to be a copy). iterating and modifying is a no-no.",
        "createdAt" : "2018-01-16T23:47:13Z",
        "updatedAt" : "2018-01-17T05:22:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "61549291-d026-4aff-acef-5959ff9bfca6",
        "parentId" : "b8948346-b314-4ee3-9ea1-cb68ec486759",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I've decided to create a copy because at the bottom, we return `na_values` and `na_fvalues` regardless of the logic branch.  However, I'll iterate over the `old_na_values` instead.",
        "createdAt" : "2018-01-17T04:40:25Z",
        "updatedAt" : "2018-01-17T05:22:54Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "63faf8d7c8096f3cb99f20106a2dfcba7dadf34e",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +3124,3128 @@                v = set(v) | _NA_VALUES\n\n            na_values[k] = v\n        na_fvalues = dict((k, _floatify_na_values(v))\n                          for k, v in na_values.items())"
  },
  {
    "id" : "2605f061-da00-4831-af19-abf056e2567a",
    "prId" : 20558,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20558#pullrequestreview-108447444",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "599dfabb-864c-4229-9d0b-ddc12547a0b5",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Leave this alone actually.  `array-like` will suffice.",
        "createdAt" : "2018-03-30T21:04:58Z",
        "updatedAt" : "2018-03-31T19:34:47Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "13d3e2a6-4175-4b04-bbb3-f895fe5d26b5",
        "parentId" : "599dfabb-864c-4229-9d0b-ddc12547a0b5",
        "authorId" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "body" : "sure. but below is_array_like will evaluate ['foo' ,'bar'] to False. so it's really a list-like IMHO. https://github.com/pandas-dev/pandas/blob/0a003651a67854b9776c46469a18e20ffd61f141/pandas/core/dtypes/inference.py#L287",
        "createdAt" : "2018-03-30T21:17:28Z",
        "updatedAt" : "2018-03-31T19:34:47Z",
        "lastEditedBy" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "tags" : [
        ]
      },
      {
        "id" : "62c96045-8c20-4814-b6ff-67d34b435ecf",
        "parentId" : "599dfabb-864c-4229-9d0b-ddc12547a0b5",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Hmmm...that's a fair point.  Actually, leave that alone then.",
        "createdAt" : "2018-03-30T21:31:09Z",
        "updatedAt" : "2018-03-31T19:34:47Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "a912f8a4-fabd-4983-8bae-9b6e882971af",
        "parentId" : "599dfabb-864c-4229-9d0b-ddc12547a0b5",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "But if you're going to change it here, make sure to do it in `io.rst` as well.",
        "createdAt" : "2018-03-30T21:31:29Z",
        "updatedAt" : "2018-03-31T19:34:47Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "ad3f7c5a-b7ec-4add-a455-6fb2fa784261",
        "parentId" : "599dfabb-864c-4229-9d0b-ddc12547a0b5",
        "authorId" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "body" : "sure. it's done.",
        "createdAt" : "2018-03-30T21:43:23Z",
        "updatedAt" : "2018-03-31T19:34:47Z",
        "lastEditedBy" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "tags" : [
        ]
      }
    ],
    "commit" : "dafc44290f8f8d7a06fa28cdca77fc0a6dea2792",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +98,102 @@    of each line, you might consider index_col=False to force pandas to _not_\n    use the first column as the index (row names)\nusecols : list-like or callable, default None\n    Return a subset of the columns. If list-like, all elements must either\n    be positional (i.e. integer indices into the document columns) or strings"
  },
  {
    "id" : "0eb3f8c3-e03c-44f9-b562-61b7c5b35e4e",
    "prId" : 20895,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20895#pullrequestreview-119767895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "566b2d91-bbb5-406a-acb3-049415347c9b",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Can we add a newline below this?",
        "createdAt" : "2018-05-08T14:43:38Z",
        "updatedAt" : "2018-05-14T09:58:46Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "bde5fbef-0661-47f9-add0-c9770586fac2",
        "parentId" : "566b2d91-bbb5-406a-acb3-049415347c9b",
        "authorId" : "97ba13cb-72b4-4868-a291-8e1981986026",
        "body" : "I agree that a newline would be good here but this is orthogonal to the issue addressed in this PR. I'd think the newline should be added in a separate PR. Can anybody please provide a second opinion?",
        "createdAt" : "2018-05-10T09:51:11Z",
        "updatedAt" : "2018-05-14T09:58:46Z",
        "lastEditedBy" : "97ba13cb-72b4-4868-a291-8e1981986026",
        "tags" : [
        ]
      },
      {
        "id" : "2fb5c55b-a6db-40ad-9cc8-20a10673562f",
        "parentId" : "566b2d91-bbb5-406a-acb3-049415347c9b",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "It's minor enough that I wouldn't consider that an issue.",
        "createdAt" : "2018-05-14T10:05:06Z",
        "updatedAt" : "2018-05-14T10:05:06Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "53dd911467b96c5e336b1fa0d0f94c55b406eb93",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +127,131 @@    Data type for data or columns. E.g. {'a': np.float64, 'b': np.int32}\n    Use `str` or `object` together with suitable `na_values` settings\n    to preserve and not interpret dtype.\n    If converters are specified, they will be applied INSTEAD\n    of dtype conversion."
  },
  {
    "id" : "f6c950b1-0386-4886-b8cf-1e6da2f8098a",
    "prId" : 20895,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20895#pullrequestreview-119034465",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e1261ca-3493-4844-9906-e44d9733a6c4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the same test in io.rst as well",
        "createdAt" : "2018-05-10T10:16:05Z",
        "updatedAt" : "2018-05-14T09:58:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "630e5e08-ab35-46e5-ac36-b72c67ba0768",
        "parentId" : "9e1261ca-3493-4844-9906-e44d9733a6c4",
        "authorId" : "97ba13cb-72b4-4868-a291-8e1981986026",
        "body" : "Of course. Done. (I previously assumed the doc is generated from .py.)",
        "createdAt" : "2018-05-10T14:19:13Z",
        "updatedAt" : "2018-05-14T09:58:46Z",
        "lastEditedBy" : "97ba13cb-72b4-4868-a291-8e1981986026",
        "tags" : [
        ]
      }
    ],
    "commit" : "53dd911467b96c5e336b1fa0d0f94c55b406eb93",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +127,131 @@    Data type for data or columns. E.g. {'a': np.float64, 'b': np.int32}\n    Use `str` or `object` together with suitable `na_values` settings\n    to preserve and not interpret dtype.\n    If converters are specified, they will be applied INSTEAD\n    of dtype conversion."
  },
  {
    "id" : "772707e8-98f4-43d9-9463-68dd7278efe9",
    "prId" : 21954,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21954#pullrequestreview-140056577",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "243fd552-8f12-4905-a6d7-d555d40da3b1",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Why do we need this `if` condition here?\r\n\r\n(yes, I see the other changes that you made for passing in `default_sep`.  This question is more asking why the overall change was needed for this deprecation).",
        "createdAt" : "2018-07-24T00:45:15Z",
        "updatedAt" : "2018-08-02T10:47:57Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "aaaa2d37-a327-4e5b-a424-4aec81fd4a82",
        "parentId" : "243fd552-8f12-4905-a6d7-d555d40da3b1",
        "authorId" : "afb6040e-4d88-4b84-baf3-5385ad75eea3",
        "body" : "If the user is setting `sep` or `delimiter`, I want to suggest using `read_csv`, but if neither is set, I also want to suggest passing `sep='\\t'`. This was the simplest solution I could come up with which handles the case correctly where the user is passing `sep=','` to `read_table`.\r\n\r\nMore generally, the `if` clause is needed because the definition of `read_table` is entangled with the definition of `read_csv`. The cleaner solution would be to just have two separate definitions, but that solution was deemed [not worth the effort](https://github.com/pandas-dev/pandas/pull/21954#issuecomment-406336310).",
        "createdAt" : "2018-07-24T17:53:48Z",
        "updatedAt" : "2018-08-02T10:47:57Z",
        "lastEditedBy" : "afb6040e-4d88-4b84-baf3-5385ad75eea3",
        "tags" : [
        ]
      },
      {
        "id" : "b520f523-25b2-48e7-a6ec-2e2cdca466be",
        "parentId" : "243fd552-8f12-4905-a6d7-d555d40da3b1",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Hmm...I see.  Okay, fair enough.",
        "createdAt" : "2018-07-24T20:03:55Z",
        "updatedAt" : "2018-08-02T10:47:57Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "90024604a75ff8aeea3b56a7a9329005d098a380",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +631,635 @@                              FutureWarning, stacklevel=2)\n            if sep is False:\n                sep = default_sep\n\n        # Alias sep -> delimiter."
  },
  {
    "id" : "db10de01-41b8-4981-9618-a084fb7e771d",
    "prId" : 23238,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23238#pullrequestreview-168017523",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "912e5982-f06c-40fe-9e3a-a1429e697608",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Same as above",
        "createdAt" : "2018-10-24T14:28:54Z",
        "updatedAt" : "2018-11-25T21:45:46Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b74ada66-ca21-431e-9a55-05298b646e3c",
        "parentId" : "912e5982-f06c-40fe-9e3a-a1429e697608",
        "authorId" : "b261a18f-c4bd-4975-802c-c59ed7392f82",
        "body" : "Oh, I actually see another problem here. I co-opted `n` because it was performing the intended function of `infer_nrows`, but that would also break previous code that relied on calling `n` explicitly. I'll return the code and tack on `infer_nrows` at the end, like you pointed out.",
        "createdAt" : "2018-10-24T17:01:10Z",
        "updatedAt" : "2018-11-25T21:45:46Z",
        "lastEditedBy" : "b261a18f-c4bd-4975-802c-c59ed7392f82",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecf35d6cf4f918005830488be242208d9d79fd37",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +3512,3516 @@        return detect_rows\n\n    def detect_colspecs(self, infer_nrows=100, skiprows=None):\n        # Regex escape the delimiters\n        delimiters = ''.join(r'\\%s' % x for x in self.delimiter)"
  },
  {
    "id" : "d6f0862a-f02d-44ca-8f3f-6235beffe26c",
    "prId" : 23255,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23255#pullrequestreview-188416921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d57033c-e4cd-4742-a6bf-f5f4809a1580",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add to the comment",
        "createdAt" : "2018-12-29T17:10:35Z",
        "updatedAt" : "2019-01-02T02:01:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f42235aad6aa0dcdb4d3324792001062a7242c43",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +1673,1677 @@\n                # type specified in dtype param or cast_type is an EA\n                if cast_type and (not is_dtype_equal(cvals, cast_type)\n                                  or is_extension_array_dtype(cast_type)):\n                    try:"
  },
  {
    "id" : "859caddf-efd9-4a06-92a8-726971ae07f4",
    "prId" : 23255,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23255#pullrequestreview-188416921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "490d09bc-1902-43e3-856c-ceddbad06dba",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you comment here",
        "createdAt" : "2018-12-29T17:10:46Z",
        "updatedAt" : "2019-01-02T02:01:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f42235aad6aa0dcdb4d3324792001062a7242c43",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +1772,1776 @@\n        # use the EA's implementation of casting\n        elif is_extension_array_dtype(cast_type):\n            # ensure cast_type is an actual dtype and not a string\n            cast_type = pandas_dtype(cast_type)"
  },
  {
    "id" : "73421fcd-9884-443b-97a1-f4ff0f43cfcd",
    "prId" : 23255,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23255#pullrequestreview-188447832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63b4ea2f-3a00-49b9-8d39-41909d4b7e4a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this shouldn't be done here, rather you can do this if needed inside the parser itself",
        "createdAt" : "2018-12-30T18:49:57Z",
        "updatedAt" : "2019-01-02T02:01:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f42235aad6aa0dcdb4d3324792001062a7242c43",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +2194,2198 @@        self.verbose = kwds['verbose']\n        self.converters = kwds['converters']\n\n        self.dtype = kwds['dtype']\n        self.thousands = kwds['thousands']"
  },
  {
    "id" : "db1e2405-64ea-4c8a-9db0-023959fceeb0",
    "prId" : 23484,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23484#pullrequestreview-171358481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a995758b-723d-4ee2-a9cf-852c3d6e0dd6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so we still need unnamed_count ?\r\ndoes unnamed_cols need to be a set or can it be a list? (you can always convert to a set later if needed)",
        "createdAt" : "2018-11-04T11:19:37Z",
        "updatedAt" : "2018-11-04T23:41:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "49c2b19f-ac59-49d3-a5a1-615d8066d059",
        "parentId" : "a995758b-723d-4ee2-a9cf-852c3d6e0dd6",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> so we still need unnamed_count ?\r\n\r\nGood question.  It's used in a couple places throughout the code, but we can derive `unnamed_count` from `unnamed_cols` (or at least those collected during the for-loop iteration over a header level), so that logic could be simplified.\r\n\r\n> does unnamed_cols need to be a set or can it be a list? (you can always convert to a set later if needed)\r\n\r\nIt's only used for membership checking in `_clean_index_names` for the time being.  Thus, using a `set` from the get-go is more amenable to that purpose.",
        "createdAt" : "2018-11-04T11:24:22Z",
        "updatedAt" : "2018-11-04T23:41:20Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "e18fef9b8e68d2afc18b018c16ba2c2e40131b6a",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +2430,2434 @@\n                        this_unnamed_cols.append(i)\n                        this_columns.append(col_name)\n                    else:\n                        this_columns.append(c)"
  },
  {
    "id" : "685a7786-764b-449d-abc4-412eac34749e",
    "prId" : 23517,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23517#pullrequestreview-171885193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ea6e30c-c8dc-4896-8cc6-965ab4057ceb",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think using raw strings is in general more readable: `sep=r'\\s+'`. Just a comment, you can leave it like this.",
        "createdAt" : "2018-11-05T20:43:05Z",
        "updatedAt" : "2018-11-21T07:21:05Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "61bca195-d268-4436-8baa-b2ae302348e2",
        "parentId" : "9ea6e30c-c8dc-4896-8cc6-965ab4057ceb",
        "authorId" : "770b29a6-c296-461f-ac13-3682f19402fb",
        "body" : "It was my first choice but it still gave me an error. Might be a bug in flake8. ",
        "createdAt" : "2018-11-06T06:51:47Z",
        "updatedAt" : "2018-11-21T07:21:05Z",
        "lastEditedBy" : "770b29a6-c296-461f-ac13-3682f19402fb",
        "tags" : [
        ]
      },
      {
        "id" : "412a0d16-3e22-4cf9-98a1-c08c80c61b2a",
        "parentId" : "9ea6e30c-c8dc-4896-8cc6-965ab4057ceb",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "ok, let's not waste time on this at this point then",
        "createdAt" : "2018-11-06T07:14:29Z",
        "updatedAt" : "2018-11-21T07:21:05Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "766d73f769d83198a1f1cbc778b5d3e2f28165d7",
    "line" : 300,
    "diffHunk" : "@@ -1,1 +298,302 @@delim_whitespace : bool, default False\n    Specifies whether or not whitespace (e.g. ``' '`` or ``'\\t'``) will be\n    used as the sep. Equivalent to setting ``sep='\\\\s+'``. If this option\n    is set to True, nothing should be passed in for the ``delimiter``\n    parameter."
  },
  {
    "id" : "6f3a213a-81e4-4a9d-8178-1bf8822ca5e0",
    "prId" : 23517,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23517#pullrequestreview-173678469",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e34305d-99e6-4ebb-ab45-442cdcb2869b",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Did you check if this renders well? If I remember correctly, this should have a blank line before.",
        "createdAt" : "2018-11-10T23:08:17Z",
        "updatedAt" : "2018-11-21T07:21:05Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "766d73f769d83198a1f1cbc778b5d3e2f28165d7",
    "line" : 282,
    "diffHunk" : "@@ -1,1 +285,289 @@    a MultiIndex on the columns).\n\n    .. deprecated:: 0.21.0\n       This argument will be removed and will always convert to MultiIndex\n"
  },
  {
    "id" : "e9dc3172-c34c-498c-9639-b5cc99c4b8bd",
    "prId" : 23517,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23517#pullrequestreview-173726688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc759bb9-837e-490f-8890-5818e386be00",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Can you add a description to the returns? Next line than the type, indented.",
        "createdAt" : "2018-11-11T22:26:11Z",
        "updatedAt" : "2018-11-21T07:21:06Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "e5584877-b2f2-491a-bd2d-b076b035c7d6",
        "parentId" : "bc759bb9-837e-490f-8890-5818e386be00",
        "authorId" : "770b29a6-c296-461f-ac13-3682f19402fb",
        "body" : "A description?? Could you elaborate more? Thanks.",
        "createdAt" : "2018-11-12T01:01:35Z",
        "updatedAt" : "2018-11-21T07:21:06Z",
        "lastEditedBy" : "770b29a6-c296-461f-ac13-3682f19402fb",
        "tags" : [
        ]
      },
      {
        "id" : "cbfb89bd-09b4-48f4-9dde-4a004ea37c5d",
        "parentId" : "bc759bb9-837e-490f-8890-5818e386be00",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "If you check other doctrings you'll see that after the type being returned we usually have a short text on what is being returned (e.g. The Series with the values converted to upper case.)",
        "createdAt" : "2018-11-12T01:06:15Z",
        "updatedAt" : "2018-11-21T07:21:06Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "766d73f769d83198a1f1cbc778b5d3e2f28165d7",
    "line" : 331,
    "diffHunk" : "@@ -1,1 +326,330 @@    A comma-separated values (csv) file is returned as two-dimensional\n    data structure with labeled axes.\n\nSee Also\n--------"
  },
  {
    "id" : "3724e48f-2f89-45ce-a457-571dd5e5385d",
    "prId" : 23775,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23775#pullrequestreview-176150461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6f550cb-9370-4f9e-b8ad-22e7fbf01d3e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there anyway to do this check here, but avoid having all of 'sep_override' stuff. I know this is a PITA.",
        "createdAt" : "2018-11-19T03:36:00Z",
        "updatedAt" : "2018-11-19T03:36:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "29d29190-59a0-4e5d-9265-4013ad8eeddd",
        "parentId" : "b6f550cb-9370-4f9e-b8ad-22e7fbf01d3e",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "PITA for sure.  Unfortunately, I couldn't come up with anything simpler.  The aliasing between `sep` and `delimiter` makes this difficult to simplify compared to other parameters.  Some sort of special casing has to come through.\r\n\r\nI did try modifying `_parser_defaults`, but multiple `read_*` functions rely on the defaults being as they are (i.e. there are test failures).  Thus, I found it more prudent to localize the change to just `read_csv` and not touch other read methods for just one parameter.\r\n\r\nAs the IO interface cleans up more, we probably will find a better way to do this (e.g. consider #23484, where we eventually de-hackified it and found a better way), but as it stands, I'm willing to stick by this for now.",
        "createdAt" : "2018-11-19T05:47:10Z",
        "updatedAt" : "2018-11-19T05:49:25Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab3cd03cdd50c4368968cd91c853e98bd42e3d22",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +804,808 @@\n                    # Annoying corner case for not warning about\n                    # conflicts between dialect and delimiter parameter.\n                    # Refer to the outer \"_read_\" function for more info.\n                    if not (param == \"delimiter\" and"
  },
  {
    "id" : "0f902aca-d7f1-4550-938c-14408728cd6b",
    "prId" : 24486,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24486#pullrequestreview-196838472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10ff35d6-2104-49b5-8d0b-598b345d9851",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do things break if you don't .to_numpy() ?",
        "createdAt" : "2019-01-19T21:50:38Z",
        "updatedAt" : "2019-03-12T15:22:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "02d3fd4b-2116-499b-9758-cbf3d428e777",
        "parentId" : "10ff35d6-2104-49b5-8d0b-598b345d9851",
        "authorId" : "0225e96c-0332-4963-b35c-6122e27e088f",
        "body" : "They do, in at least one place, though also in an internal function. `sanitize_objects` in _libs/parsers.pyx requires an ndarray in the first argument. Without `.numpy()` here it gets an Index.",
        "createdAt" : "2019-01-26T15:52:34Z",
        "updatedAt" : "2019-03-12T15:22:52Z",
        "lastEditedBy" : "0225e96c-0332-4963-b35c-6122e27e088f",
        "tags" : [
        ]
      },
      {
        "id" : "02733066-4d4f-445b-ba10-44f860d64fd2",
        "parentId" : "10ff35d6-2104-49b5-8d0b-598b345d9851",
        "authorId" : "0225e96c-0332-4963-b35c-6122e27e088f",
        "body" : "Actually, I'm not sure we can get away without this here.  The result eventually ends up as an argument to the initializer for `Block` which uses it for `self.values.  \r\n\r\nSo we can move the conversion of the index to `ndarray`, but it has to happen eventually.  If we really want to move it out of here, then perhaps we can move the conversion into `Block`. Check there for the type of the incoming `values` and convert to `ndarray` if necessary.",
        "createdAt" : "2019-01-27T18:03:06Z",
        "updatedAt" : "2019-03-12T15:22:52Z",
        "lastEditedBy" : "0225e96c-0332-4963-b35c-6122e27e088f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d6e0d3c48dd4896fc6f0d9b33e02448c6f4f033",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +3168,3172 @@                    errors='ignore',\n                    infer_datetime_format=infer_datetime_format\n                ).to_numpy()\n\n            except ValueError:"
  },
  {
    "id" : "41e6e99e-2bd0-400a-a5bb-780c294cb97b",
    "prId" : 24721,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24721#pullrequestreview-206059525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b7f3a0f-9f50-466a-8622-ef7da9cff5f9",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm does converting this to a raw string when it wasn't previously affect the behavior at all? Might also be the root cause of your issue, though we technically drop Py2 support with v0.25 anyway",
        "createdAt" : "2019-02-06T03:42:49Z",
        "updatedAt" : "2019-03-19T19:08:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "2926c68d-7a13-46cf-a07d-364719258793",
        "parentId" : "0b7f3a0f-9f50-466a-8622-ef7da9cff5f9",
        "authorId" : "5b466709-531d-4ecc-8c27-cbad06414b35",
        "body" : "Temporarily, I want to try to put that code back for clearing the problem from ci.\r\nAnd then I'll find out how can I solve the problem.",
        "createdAt" : "2019-02-09T14:56:24Z",
        "updatedAt" : "2019-03-19T19:08:18Z",
        "lastEditedBy" : "5b466709-531d-4ecc-8c27-cbad06414b35",
        "tags" : [
        ]
      },
      {
        "id" : "1caaf3d3-8497-4b01-825e-5197a762bb80",
        "parentId" : "0b7f3a0f-9f50-466a-8622-ef7da9cff5f9",
        "authorId" : "5b466709-531d-4ecc-8c27-cbad06414b35",
        "body" : "This change has no problem :)",
        "createdAt" : "2019-02-20T23:43:03Z",
        "updatedAt" : "2019-03-19T19:08:18Z",
        "lastEditedBy" : "5b466709-531d-4ecc-8c27-cbad06414b35",
        "tags" : [
        ]
      }
    ],
    "commit" : "59d20d8c4d57adc34f01148709d629945c99cab5",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +2283,2287 @@        if self.thousands is None:\n            self.nonnum = re.compile(\n                r'[^-^0-9^{decimal}]+'.format(decimal=self.decimal))\n        else:\n            self.nonnum = re.compile(r'[^-^0-9^{thousands}^{decimal}]+'.format("
  },
  {
    "id" : "50932bdc-e198-4ef6-ba7b-a3d2e836c8a5",
    "prId" : 24856,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24856#pullrequestreview-194461477",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2caa10b6-fdda-4f1d-a535-81981455c6e7",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm shouldn't we just use whatever coding is supplied to the higher level parsing function?",
        "createdAt" : "2019-01-21T03:56:38Z",
        "updatedAt" : "2019-01-21T06:57:25Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4c39e3f7-d110-4d13-9012-1dcb46c9dc36",
        "parentId" : "2caa10b6-fdda-4f1d-a535-81981455c6e7",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Good question, but no actually.  The `encoding` argument is used to properly load the data from file source into Python (more so in Python 3.x than in Python 2.x).\r\n\r\nThat being said, a more robust way to do this encoding is to prefer the `sys.getfilesytemencoding` before defaulting to `utf-8` in this situation.",
        "createdAt" : "2019-01-21T05:37:05Z",
        "updatedAt" : "2019-01-21T06:57:25Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "61241cf3-d35d-49d6-8c34-b4ec4613448c",
        "parentId" : "2caa10b6-fdda-4f1d-a535-81981455c6e7",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "https://dev.azure.com/pandas-dev/pandas/_build/results?buildId=7144\r\n\r\nActually, I take that back.  It looks `utf-8` is the away to go, at least to appease CI.",
        "createdAt" : "2019-01-21T06:51:37Z",
        "updatedAt" : "2019-01-21T06:57:25Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "987d5b08723aaf8dc8f38d51aabb5e1997f4f485",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1316,1320 @@            #\n            # Python 2.x compatibility\n            usecols = {col.encode(\"utf-8\") for col in usecols}\n\n        return usecols, usecols_dtype"
  },
  {
    "id" : "a3c5d1fd-0c23-4dd1-a9ec-d46fa8d9c49a",
    "prId" : 24856,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24856#pullrequestreview-194452119",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5e837ab-1a5c-417a-9b05-6b3788f92314",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Given this just returns here is the behavior different by chance when providing a callable argument?",
        "createdAt" : "2019-01-21T03:59:02Z",
        "updatedAt" : "2019-01-21T06:57:25Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0d6d49c5-745d-4f89-963c-f3097e22c1aa",
        "parentId" : "f5e837ab-1a5c-417a-9b05-6b3788f92314",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I'm not sure I understand your question here.",
        "createdAt" : "2019-01-21T05:29:47Z",
        "updatedAt" : "2019-01-21T06:57:25Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "adbd24e7-ace2-4f0d-a546-801fd2527cce",
        "parentId" : "f5e837ab-1a5c-417a-9b05-6b3788f92314",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "So extending the test case you added appending this to the parametrization still failed locally for me on Py2:\r\n\r\n```python\r\n lambda x: x in {u\"あああ\", u\"いい\"}\r\n```",
        "createdAt" : "2019-01-21T05:42:43Z",
        "updatedAt" : "2019-01-21T06:57:25Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "c8f90080-5318-40cd-8029-f1f4c6162ffb",
        "parentId" : "f5e837ab-1a5c-417a-9b05-6b3788f92314",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "The responsibility falls on the user to provide the correct `lambda`.  I'm not really sure what accommodation we can provide besides some painful introspection.",
        "createdAt" : "2019-01-21T05:51:36Z",
        "updatedAt" : "2019-01-21T06:57:25Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "987d5b08723aaf8dc8f38d51aabb5e1997f4f485",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1296,1300 @@    if usecols is not None:\n        if callable(usecols):\n            return usecols, None\n\n        if not is_list_like(usecols):"
  },
  {
    "id" : "0b761df5-0dad-448c-a173-80c0ee9dd54a",
    "prId" : 25686,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25686#pullrequestreview-218132110",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbe0b08d-54ff-4cbb-82df-8cef9481a5f6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a 1-line comment here on what you are validating ",
        "createdAt" : "2019-03-24T15:38:55Z",
        "updatedAt" : "2019-03-25T02:29:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d2201189-3e23-4ec9-84db-390277bac7ab",
        "parentId" : "cbe0b08d-54ff-4cbb-82df-8cef9481a5f6",
        "authorId" : null,
        "body" : "@jreback Added. does the comment make sense?",
        "createdAt" : "2019-03-25T03:19:52Z",
        "updatedAt" : "2019-03-25T03:19:52Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "bdea635f21663c5679c27c33b83230acf59dfd29",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1902,1906 @@                _validate_usecols_names(usecols, self.orig_names)\n\n            # GH 25623\n            # validate that column indices in usecols are not out of bounds\n            elif self.usecols_dtype == 'integer':"
  },
  {
    "id" : "a6159614-7794-4560-939c-9fef4581512e",
    "prId" : 25686,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25686#pullrequestreview-218087960",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e87c5f0b-e367-4c67-8bee-bb1b0e7ff04b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same here",
        "createdAt" : "2019-03-24T15:39:03Z",
        "updatedAt" : "2019-03-25T02:29:48Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdea635f21663c5679c27c33b83230acf59dfd29",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +2605,2609 @@                self._clear_buffer()\n\n            # GH 25623\n            # validate that column indices in usecols are not out of bounds\n            if self.usecols_dtype == 'integer':"
  },
  {
    "id" : "68ca2fbf-0a10-46cd-b630-47ffcf788556",
    "prId" : 25884,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25884#pullrequestreview-219803353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c785d66b-1c22-4259-8123-ad810c498125",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "It's mentioned in the comments but I changed the variable name here from `filepath_or_buffer` to `fp_or_buf` to intentionally NOT shadow the parameter from the signature. \r\n\r\nAs mentioned in the comment this local variable could potentially introduce new types for S3 and GCP and I don't think there is a great way with typing to statically analyze conditional imports like those just yet, so it's a clearer delimitation IMO to assign the return of this function to a separate variable",
        "createdAt" : "2019-03-28T01:58:50Z",
        "updatedAt" : "2019-03-29T16:44:45Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e31345eb573f51718047d131e820370b7a54355",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +416,420 @@    # though mypy handling of conditional imports is difficult.\n    # See https://github.com/python/mypy/issues/1297\n    fp_or_buf, _, compression, should_close = get_filepath_or_buffer(\n        filepath_or_buffer, encoding, compression)\n    kwds['compression'] = compression"
  },
  {
    "id" : "c05cfbdb-4d34-4562-94a0-3bc1d697413f",
    "prId" : 25990,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25990#pullrequestreview-223631323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ede2acff-4564-49fe-910e-5ea5b9150ef8",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "@anmyachev : How big is the performance increase with your benchmarks? I understand the usefulness of caching, but I'm hesitant to add yet another parameter to this already large signature.\r\n\r\nIs there a reason why we couldn't just always have it set to `True` ?\r\n\r\nAlso, you will need to add this docstring change `doc/source/user_guide/io.rst`.",
        "createdAt" : "2019-04-04T20:39:32Z",
        "updatedAt" : "2019-05-07T08:30:51Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "20853dfa-6e07-4eaa-9255-2a4f91a7ce50",
        "parentId" : "ede2acff-4564-49fe-910e-5ea5b9150ef8",
        "authorId" : "ac925cd1-7327-4d2a-a9fc-55fc5f720f67",
        "body" : "Yes, @gfyoung I see you question, but result of benchmark was not ready until that moment :)\r\nBut now:\r\n\r\nmaster|           patch|         ratio| test_name\r\n-|-|-|-\r\n45.4±0.4ms|      6.39±0.06ms|     0.14| io.csv.ReadCSVCachedParseDates.time_read_csv_cached(True)\r\n\r\nAs you see, we can great boost on parsing dates. The ratio of unique dates to a total number of them, that is, 1/10 is taken from practice, that is reachable on many dataset I think. For example, these ratio on mortgage dataset far less. If I remember correctly - 1/2000(something like that)\r\n> Is there a reason why we couldn't just always have it set to `True` ?\r\n\r\nAlthough the increase in productivity is very, very significant, you should not forget that this incurs additional costs and in some situations, users may simply not have enough memory (then they can simple set `cache_dates` to `False`)\r\n\r\n> Also, you will need to add this docstring change `doc/source/user_guide/io.rst`.\r\n\r\nI will add the stuff later\r\n",
        "createdAt" : "2019-04-04T21:10:15Z",
        "updatedAt" : "2019-05-07T08:30:51Z",
        "lastEditedBy" : "ac925cd1-7327-4d2a-a9fc-55fc5f720f67",
        "tags" : [
        ]
      },
      {
        "id" : "7d0aed86-9d47-4bf1-a03b-57aa63b6ab96",
        "parentId" : "ede2acff-4564-49fe-910e-5ea5b9150ef8",
        "authorId" : "be492700-7f0c-4e3f-b2b1-1392960f38a9",
        "body" : "> Is there a reason why we couldn't just always have it set to `True` ?\r\n\r\nAside from what @anmyachev says about memory note that there's also computing overhead as current cache implementation first finds unique date string indices, then parses said indices, then expands. So if there's not much duplicate dates it would be both memory- and compute-wise costly (though in most data I've seen so far typically unique dates to total dates ratio is pretty small, e.g. in aforementioned Mortgage dataset there are about 400 unique dates out of several milliion entries).",
        "createdAt" : "2019-04-08T03:30:22Z",
        "updatedAt" : "2019-05-07T08:30:51Z",
        "lastEditedBy" : "be492700-7f0c-4e3f-b2b1-1392960f38a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "687d0c4c738a876d962d2cad634c7d000e86c0dd",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +241,245 @@    date strings, especially ones with timezone offsets.\n\n    .. versionadded:: 0.25.0\niterator : bool, default False\n    Return TextFileReader object for iteration or getting chunks with"
  }
]