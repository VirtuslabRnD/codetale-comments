[
  {
    "id" : "d8ff93ac-17fa-4434-9a7f-82e04e1229d8",
    "prId" : 952,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b44d367-d464-4ade-980e-84b95ffa3ea2",
        "parentId" : null,
        "authorId" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "body" : "I'd be less strict with this first check - there might be situations where you want to pass a generator rather than a list. I'd do `self.colspecs = list(colspecs)`, and let it handle anything that can be turned into a list.\n",
        "createdAt" : "2012-03-22T15:20:30Z",
        "updatedAt" : "2012-03-24T22:50:19Z",
        "lastEditedBy" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "tags" : [
        ]
      },
      {
        "id" : "e750171b-737f-463a-a536-d761bdddfbc7",
        "parentId" : "4b44d367-d464-4ade-980e-84b95ffa3ea2",
        "authorId" : "b74e9201-b200-4bc3-b475-a572ab0ad62b",
        "body" : "Good idea. WIll do.\n",
        "createdAt" : "2012-03-22T16:07:00Z",
        "updatedAt" : "2012-03-24T22:50:19Z",
        "lastEditedBy" : "b74e9201-b200-4bc3-b475-a572ab0ad62b",
        "tags" : [
        ]
      },
      {
        "id" : "14d4ce79-4580-4613-984b-993fb7185b14",
        "parentId" : "4b44d367-d464-4ade-980e-84b95ffa3ea2",
        "authorId" : "b74e9201-b200-4bc3-b475-a572ab0ad62b",
        "body" : "Done.\n",
        "createdAt" : "2012-03-24T16:03:14Z",
        "updatedAt" : "2012-03-24T22:50:20Z",
        "lastEditedBy" : "b74e9201-b200-4bc3-b475-a572ab0ad62b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2e08b52e4eedba54b7c19f6078ac6ed1e0393a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +672,676 @@        self.filler = filler # Empty characters between fields.\n\n        assert isinstance(colspecs, (tuple, list))\n        for colspec in colspecs:\n            assert isinstance(colspec, (tuple, list))"
  },
  {
    "id" : "072cfbb8-2e7c-4a72-850e-cd84b7efe9dc",
    "prId" : 952,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "472d26a6-7fef-4a45-a758-45725f1615e1",
        "parentId" : null,
        "authorId" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "body" : "I'm not wild on the use of `locals()` for these, it seems like unnecessary magic.  But maybe I'm being overly picky.\n",
        "createdAt" : "2012-03-24T21:19:37Z",
        "updatedAt" : "2012-03-24T22:50:20Z",
        "lastEditedBy" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "tags" : [
        ]
      },
      {
        "id" : "50e1e589-a825-432c-b193-b6e7667a59c0",
        "parentId" : "472d26a6-7fef-4a45-a758-45725f1615e1",
        "authorId" : "55206695-bb42-4d72-886f-f5370a77363e",
        "body" : "Well, the alternative here is to either write out `kw=kw` for each keyword argument or to have `**kwds` which makes the signature in IPython less attractive. Not sure what's the best solution-- using locals doesn't strike me as so bad\n",
        "createdAt" : "2012-03-24T21:41:35Z",
        "updatedAt" : "2012-03-24T22:50:20Z",
        "lastEditedBy" : "55206695-bb42-4d72-886f-f5370a77363e",
        "tags" : [
        ]
      },
      {
        "id" : "2da9b9ad-fd5f-453c-9567-39ce3d75c4c7",
        "parentId" : "472d26a6-7fef-4a45-a758-45725f1615e1",
        "authorId" : "b74e9201-b200-4bc3-b475-a572ab0ad62b",
        "body" : "Having to enumerate all the paramters is both error-prone, makes it difficult to extend the other functions, and it hides the differences between the calls to _read(). I wish there was a method to get just the args, but there isn't. \n",
        "createdAt" : "2012-03-24T22:04:31Z",
        "updatedAt" : "2012-03-24T22:50:20Z",
        "lastEditedBy" : "b74e9201-b200-4bc3-b475-a572ab0ad62b",
        "tags" : [
        ]
      },
      {
        "id" : "c1b5ddfd-e95c-4c44-a656-e851e4ec39a9",
        "parentId" : "472d26a6-7fef-4a45-a758-45725f1615e1",
        "authorId" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "body" : "Indeed. I think PEP 362 is aimed at this sort of thing - you'd use `**kwargs`, and construct a more meaningful function signature for introspection - but that's still a work in progress.\n",
        "createdAt" : "2012-03-24T22:45:30Z",
        "updatedAt" : "2012-03-24T22:50:20Z",
        "lastEditedBy" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "tags" : [
        ]
      },
      {
        "id" : "871b25ec-37e0-4371-b768-8e95fd29bf3b",
        "parentId" : "472d26a6-7fef-4a45-a758-45725f1615e1",
        "authorId" : "b74e9201-b200-4bc3-b475-a572ab0ad62b",
        "body" : "Ideally it would be like LISP and a :as variable could be assigned to the set of kwargs. But it's Python. Whatever. We'll eventually end up with LISP again.\n",
        "createdAt" : "2012-03-24T22:53:28Z",
        "updatedAt" : "2012-03-24T22:53:28Z",
        "lastEditedBy" : "b74e9201-b200-4bc3-b475-a572ab0ad62b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2e08b52e4eedba54b7c19f6078ac6ed1e0393a7",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +149,153 @@             delimiter=None,\n             encoding=None):\n    kwds = locals()\n\n    # Alias sep -> delimiter."
  },
  {
    "id" : "6205e421-f862-42cc-9788-15cbc44fe4d4",
    "prId" : 2005,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8611afb5-1f94-4fcf-8ac4-be53205c7785",
        "parentId" : null,
        "authorId" : "55206695-bb42-4d72-886f-f5370a77363e",
        "body" : "This is the only slightly concerning thing I see as I don't know the impact should these unicode strings get passed to the relevant Cython parsing code (which expects byte strings currently)-- I guess that will just need to be fixed independently if it's a problem.\n",
        "createdAt" : "2012-10-10T15:13:15Z",
        "updatedAt" : "2012-10-11T20:48:01Z",
        "lastEditedBy" : "55206695-bb42-4d72-886f-f5370a77363e",
        "tags" : [
        ]
      },
      {
        "id" : "313849f2-192f-4ad5-8208-17dc1dd3819d",
        "parentId" : "8611afb5-1f94-4fcf-8ac4-be53205c7785",
        "authorId" : null,
        "body" : "[Cython docs](http://docs.cython.org/src/tutorial/strings.html) - you're right.\nbut if date_cols[0] is unicode with non-ascii codepoints then str() will blow up, \nso something needs to change.\n\nif you work with bytes. you are inevitably assuming an encoding, utf-8 most likely.\ncalling c should probably be considered an \"I/O point\" where encoding/decoding \ntakes place. of course that might hurt the performance benefits of using cython \nto begin with. but unless it's unconscionably terrible, I think that's the way to go.\n\nanother (not \"correct\") option is storing everything internally as utf-8, which can \nbe made consistent. but then you would get things like #1292 happening again,\nand I would guess Py3 support would become (even more) hellish.\n\nis the c_parser branch stable enough to look at from a unicode perspective?\n",
        "createdAt" : "2012-10-10T16:47:56Z",
        "updatedAt" : "2012-10-11T20:48:01Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "27f2e4dc-4dff-4414-9cfe-baaffc1d4ab7",
        "parentId" : "8611afb5-1f94-4fcf-8ac4-be53205c7785",
        "authorId" : null,
        "body" : "Cython docs - [Decoding bytes to text](http://docs.cython.org/src/tutorial/strings.html#decoding-bytes-to-text)\n\nThe initially presented way of passing and receiving C strings is sufficient if your code only deals with binary data in the strings. When we deal with encoded text, however, **it is best practice to decode the C byte strings to Python Unicode strings on reception, and to encode Python Unicode strings to C byte strings on the way out**.\n",
        "createdAt" : "2012-10-10T20:09:07Z",
        "updatedAt" : "2012-10-11T20:48:01Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "5fa2ae439f4e02e0d97ff05fbba16337685297f8",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1191,1195 @@    # stripped = [map(str.strip, x) for x in date_cols]\n    rs = np.array([' '.join([unicode(y) for y in x])\n                   for x in zip(*date_cols)], dtype=object)\n    return rs\n"
  },
  {
    "id" : "149dfbf0-b8fa-45c1-bbae-b802b7a784ac",
    "prId" : 7029,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98ec909d-0924-48a1-8d6b-f1f186216f37",
        "parentId" : null,
        "authorId" : "5bae3054-6bb1-4934-9daf-b10d33ef28ab",
        "body" : "This duplicates the previous behavior of ignoring the columns returned by _clean_index_names, except now we are not ignoring the columns returned by _get_index_name which may contain index columns (see \"case 0\")\n",
        "createdAt" : "2014-05-03T20:09:50Z",
        "updatedAt" : "2014-05-06T17:30:26Z",
        "lastEditedBy" : "5bae3054-6bb1-4934-9daf-b10d33ef28ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "8651a438d898f5e94b52f451e52039a721649acb",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1826,1830 @@        else:\n            # Case 2\n            (index_name, columns_,\n             self.index_col) = _clean_index_names(columns, self.index_col)\n"
  },
  {
    "id" : "a4717bbe-b737-451f-9c12-3e1f85074f6b",
    "prId" : 8548,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f56f22de-6a30-40b7-a1d8-b0acbc871d2f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is good\n",
        "createdAt" : "2014-11-15T17:11:34Z",
        "updatedAt" : "2014-11-15T17:11:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "89d48716906dd43c6e5aab919e513f6aec0248a5",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1280,1284 @@        input argument, the cell (not column) content, and return the\n        transformed content.\n    encoding : string, default None\n        Encoding to use for UTF when reading/writing (ex. 'utf-8')\n    squeeze : boolean, default False"
  },
  {
    "id" : "89fcd202-4846-4c0a-80db-f032e003c6bd",
    "prId" : 10249,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33db251e-c418-47e7-a1b8-1e0415b199db",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "techincally we should put the `to_datetime` around this too (though I don't know of anything that hits this line). Can you see if anything does? (e.g. put a halt and run the test suite for the parsers) and see.\n",
        "createdAt" : "2015-06-07T22:33:13Z",
        "updatedAt" : "2015-06-07T22:33:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b98adc89-c706-452b-9791-277441559858",
        "parentId" : "33db251e-c418-47e7-a1b8-1e0415b199db",
        "authorId" : "f70f9343-3987-4ba5-a3b7-d3a0e4f69b3a",
        "body" : "Are you sure? It fails if I do so:\n\n```\n$ py.test pandas/io/tests/test_date_converters.py\n============================= test session starts =============================\nplatform win32 -- Python 2.7.6 -- py-1.4.27 -- pytest-2.7.1\nrootdir: c:\\Users\\Christer\\code\\python\\pandas, inifile:\nplugins: cov, mock\ncollected 6 items\n\npandas\\io\\tests\\test_date_converters.py ...F..\n\n================================== FAILURES ===================================\n_________________________ TestConverters.test_generic _________________________\n\nself = <pandas.io.tests.test_date_converters.TestConverters testMethod=test_generic>\n\n    def test_generic(self):\n        data = \"year, month, day, a\\n 2001, 01, 10, 10.\\n 2001, 02, 1, 11.\"\n        datecols = {'ym': [0, 1]}\n        dateconverter = lambda y, m: date(year=int(y), month=int(m), day=1)\n        df = read_table(StringIO(data), sep=',', header=0,\n                        parse_dates=datecols,\n                        date_parser=dateconverter)\n        self.assertIn('ym', df)\n>       self.assertEqual(df.ym.ix[0], date(2001, 1, 1))\nE       AssertionError: Timestamp('2001-01-01 00:00:00') != datetime.date(2001, 1, 1)\n\npandas\\io\\tests\\test_date_converters.py:120: AssertionError\n===================== 1 failed, 5 passed in 0.63 seconds ======================\n```\n",
        "createdAt" : "2015-06-08T08:43:52Z",
        "updatedAt" : "2015-06-08T08:43:52Z",
        "lastEditedBy" : "f70f9343-3987-4ba5-a3b7-d3a0e4f69b3a",
        "tags" : [
        ]
      },
      {
        "id" : "9395f315-8af9-493c-a7fd-0d8663870d63",
        "parentId" : "33db251e-c418-47e7-a1b8-1e0415b199db",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, I guess that is some old behavior. `datetime.date` is generally not used / supported, so this is a very inefficient way of doing things.\n",
        "createdAt" : "2015-06-08T13:28:23Z",
        "updatedAt" : "2015-06-08T13:28:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f41f4d47688a1b4ea601383ab249075d4cff321b",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +2073,2077 @@                                            dayfirst=dayfirst))\n                except Exception:\n                    return generic_parser(date_parser, *date_cols)\n\n    return converter"
  },
  {
    "id" : "ff76ea77-8925-4d19-8b86-ec46aa033f66",
    "prId" : 10469,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9b1474a-2edc-4c08-96b2-6978eaa749af",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why does this need sorting? why not just pop them in order?\n\ne.g.\n`columns = columns - Index(index_col)`\n",
        "createdAt" : "2015-07-03T11:55:18Z",
        "updatedAt" : "2015-07-06T20:44:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "661bd64c-0c5c-451b-a67c-abb9e59c47b9",
        "parentId" : "a9b1474a-2edc-4c08-96b2-6978eaa749af",
        "authorId" : "79837505-09e9-4cf8-a3be-c31b5ad6ac22",
        "body" : "It needs sorting so that the calculated column index, i.e. `n-i` in the `pop`, evaluates to the correct value even for a multiindex that's specified with decrementing index columns. \n\nE.g. Without the sort and for `index_col=[1,0]`, the loop would try to `pop`  first column `1 - 0 = 0` and then `0 - 1 = -1`.\n\nI expect I'm missing something but  `columns = columns - Index(index_col)` raises an error for me (`*** TypeError: can only perform ops with scalar values`)\n",
        "createdAt" : "2015-07-03T22:18:32Z",
        "updatedAt" : "2015-07-06T20:44:19Z",
        "lastEditedBy" : "79837505-09e9-4cf8-a3be-c31b5ad6ac22",
        "tags" : [
        ]
      },
      {
        "id" : "5abbeb69-87ac-455d-a607-c1b85bcc6672",
        "parentId" : "a9b1474a-2edc-4c08-96b2-6978eaa749af",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sorry old syntax\n\ntry\n\ncolumns.difference(Index(index_col))\n",
        "createdAt" : "2015-07-03T22:32:52Z",
        "updatedAt" : "2015-07-06T20:44:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9b2871bf-207b-4e8b-a130-b1cb73388eda",
        "parentId" : "a9b1474a-2edc-4c08-96b2-6978eaa749af",
        "authorId" : "79837505-09e9-4cf8-a3be-c31b5ad6ac22",
        "body" : "`columns` is a list of strings and `index_col` is a list of integers. I don't think this will work either.\n",
        "createdAt" : "2015-07-03T22:39:02Z",
        "updatedAt" : "2015-07-06T20:44:19Z",
        "lastEditedBy" : "79837505-09e9-4cf8-a3be-c31b5ad6ac22",
        "tags" : [
        ]
      },
      {
        "id" : "223c3c59-dfaf-46ee-981f-720ff9668008",
        "parentId" : "a9b1474a-2edc-4c08-96b2-6978eaa749af",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think need some more tests then\nindex_col can also be a list of strings\n",
        "createdAt" : "2015-07-03T22:44:35Z",
        "updatedAt" : "2015-07-06T20:44:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5888a75d-4125-407b-a613-f3f7aa9e2bf0",
        "parentId" : "a9b1474a-2edc-4c08-96b2-6978eaa749af",
        "authorId" : "79837505-09e9-4cf8-a3be-c31b5ad6ac22",
        "body" : "In this PR we already have tests that specify a multiindex with either a list of strings or a list of ints (see `test_empty_with_multiindex` and `test_empty_with_reversed_multiindex`).\n\nI haven't completely stepped through the code but afaics, function `_clean_index_names` is called prior to `get_empty_meta` and converts `index_col` as a list of strings into a list of ints.\n",
        "createdAt" : "2015-07-03T22:57:39Z",
        "updatedAt" : "2015-07-06T20:44:19Z",
        "lastEditedBy" : "79837505-09e9-4cf8-a3be-c31b5ad6ac22",
        "tags" : [
        ]
      }
    ],
    "commit" : "85231050c7438425467a93686d1382000973efd8",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +2229,2233 @@        index_col = list(index_col)\n        index = MultiIndex.from_arrays([[]] * len(index_col), names=index_names)\n        index_col.sort()\n        for i, n in enumerate(index_col):\n            columns.pop(n-i)"
  },
  {
    "id" : "6e3633d5-ed45-4e35-971a-681354df37f8",
    "prId" : 14077,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "122486a6-5dc2-4152-860d-e8eb417118aa",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "`is_list_like`? (I don't know if its coerced to a list before this), same below\n",
        "createdAt" : "2016-08-25T10:34:47Z",
        "updatedAt" : "2016-08-26T07:35:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "20d913fd-fa21-4d69-82b2-10a65cde21c7",
        "parentId" : "122486a6-5dc2-4152-860d-e8eb417118aa",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "We expect `parse_dates` to a be `bool`, `list`, or `dict` per the <a href=\"http://pandas.pydata.org/pandas-docs/version/0.18.1/generated/pandas.read_csv.html\">docs</a>.  This is explicitly validated as well (see <a href=\"https://github.com/pydata/pandas/blob/185fcbebd8c65706a9e3fea2d1ae28aa2d8baa93/pandas/io/parsers.py#L982\">here</a>), so `is_list_like` is unnecessary.\n",
        "createdAt" : "2016-08-26T04:37:28Z",
        "updatedAt" : "2016-08-26T07:35:12Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "258a51f4-fc13-48d8-9ab2-7d7835da8a87",
        "parentId" : "122486a6-5dc2-4152-860d-e8eb417118aa",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do you need to handle `dict` at this point? (or is that already transformed)\n",
        "createdAt" : "2016-08-26T10:21:37Z",
        "updatedAt" : "2016-08-26T10:21:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bf17168b-b454-4910-b95d-3232f73d113b",
        "parentId" : "122486a6-5dc2-4152-860d-e8eb417118aa",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "`index_col` can never be a `dict` per the <a href=\"http://pandas.pydata.org/pandas-docs/version/0.18.1/generated/pandas.read_csv.html\">docs</a>.\n\nIf you're referring to `parse_dates`, `parse_dates` being a `dict` has a completely different meaning that is independent of the `index_col`.\n",
        "createdAt" : "2016-08-27T01:02:24Z",
        "updatedAt" : "2016-08-27T01:02:24Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2ed33424765e7923db70e64ca2ca7b1c77c1be4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1476,1480 @@\n        elif self.parse_dates:\n            if isinstance(self.index_col, list):\n                for k in self.index_col:\n                    _set(k)"
  },
  {
    "id" : "d7f5120c-beaf-4f41-8597-b63f17563075",
    "prId" : 14234,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14234#pullrequestreview-437509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22c55022-4d01-4eb6-a947-10aeb01ffc34",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can just in-line `_evaluate_usecols` here, then change `_vaidate_usecols` to return the usecols and set it\n",
        "createdAt" : "2016-09-16T10:28:35Z",
        "updatedAt" : "2016-12-06T04:48:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6eb78220-5094-472e-bbe2-abe8d8a7b5ec",
        "parentId" : "22c55022-4d01-4eb6-a947-10aeb01ffc34",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Took a look but don't think that would work.  The problem seems to be the names argument that's a requirement for `_evaluate_usecols`.  \n\nUnless I'm missing something I think I'd have to modify `_validate_usecols` to accept names as an argument, but it's currently being called before the names are even set (unless explicitly passed as an argument to the `read` function)\n",
        "createdAt" : "2016-09-16T22:27:25Z",
        "updatedAt" : "2016-12-06T04:48:37Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b0d112b7c18c4f31b66a283cfde383f9fec21cc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1009,1013 @@    if usecols is not None:\n        if callable(usecols):\n            return usecols\n        usecols_dtype = lib.infer_dtype(usecols)\n        if usecols_dtype not in ('empty', 'integer',"
  },
  {
    "id" : "133a8ce6-6901-49b7-a3fd-403dc0011ff4",
    "prId" : 14234,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14234#pullrequestreview-10275843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c16bb2a-77db-4295-bc8a-19b34baa10e6",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add before the example some explanation how the callable is used? (I suppose it is called on each individual column name and should return True or False?)\r\n\r\nAnd maybe also use ``` `` ``` around the code example to better indicate that the \"in ['AAA', 'BBB', 'DDD']\" still belongs with the \"lambda x: x.upper()\"",
        "createdAt" : "2016-11-28T09:10:27Z",
        "updatedAt" : "2016-12-06T04:48:37Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b0d112b7c18c4f31b66a283cfde383f9fec21cc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +102,106 @@    example of a valid callable argument would be ``lambda x: x.upper() in\n    ['AAA', 'BBB', 'DDD']``. Using this parameter results in much faster\n    parsing time and lower memory usage.\nas_recarray : boolean, default False\n    DEPRECATED: this argument will be removed in a future version. Please call"
  },
  {
    "id" : "83d3cd10-ef7f-4725-929a-67331e3e0106",
    "prId" : 14234,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14234#pullrequestreview-11305746",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84eb32e1-cc02-482a-a6f8-9d914b7cda07",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you give a mini-doc string here",
        "createdAt" : "2016-12-04T23:47:58Z",
        "updatedAt" : "2016-12-06T04:48:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b0d112b7c18c4f31b66a283cfde383f9fec21cc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +991,995 @@    If not a callable, returns 'usecols'.\n    \"\"\"\n    if callable(usecols):\n        return set([i for i, name in enumerate(names)\n                    if usecols(name)])"
  },
  {
    "id" : "414e4615-52bc-4ede-b523-c7494d064d0b",
    "prId" : 14295,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14295#pullrequestreview-6068267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76471977-64c9-4d63-9cbd-d32197a0cfb8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "While you are at it, can you add a docstring here?\n",
        "createdAt" : "2016-10-27T14:20:36Z",
        "updatedAt" : "2016-11-25T20:36:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "3abb0bd6e46e78557c1fd480ac173881dc5d530b",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +1351,1355 @@        return result\n\n    def _infer_types(self, values, na_values, try_num_bool=True):\n        \"\"\"\n        Infer types of values, possibly casting"
  },
  {
    "id" : "022bbcc8-74d5-4527-92ae-e5606a72be68",
    "prId" : 14582,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14582#pullrequestreview-10126773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3018d36-847d-4013-a00e-3863b403a82f",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is the second part of the check needed (`self.quoting != csv.QUOTE_NONE`). Because AFAIU also when you do pass this, quotes are still be ignored by the regex expression to split the line, and you can still have this problem.",
        "createdAt" : "2016-11-25T08:44:53Z",
        "updatedAt" : "2016-11-25T08:44:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "bfdb2be3-f414-4ab9-b2d8-70f2c5ff20c1",
        "parentId" : "d3018d36-847d-4013-a00e-3863b403a82f",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "@jorisvandenbossche : If `quoting=csv.QUOTE_NONE`, all quotation marks are treated as data, so that's the user's fault, not ours.  That's why the check is necessary.",
        "createdAt" : "2016-11-25T08:52:49Z",
        "updatedAt" : "2016-11-25T08:52:57Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "5b9a402d-9ca6-49a2-8bb7-8fbe41b42353",
        "parentId" : "d3018d36-847d-4013-a00e-3863b403a82f",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Although it's a user error, you can still run into this problem so the message can still be useful I think. But I do see your point, so OK",
        "createdAt" : "2016-11-25T08:56:09Z",
        "updatedAt" : "2016-11-25T08:56:09Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "dda588b1d15df83f77f302282ec6f026a7e10591",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2516,2520 @@            msg = ('Expected %d fields in line %d, saw %d' %\n                   (col_len, row_num + 1, zip_len))\n            if len(self.delimiter) > 1 and self.quoting != csv.QUOTE_NONE:\n                # see gh-13374\n                reason = ('Error could possibly be due to quotes being '"
  },
  {
    "id" : "3911272d-a1ee-492f-b802-9c257c2cd197",
    "prId" : 15925,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15925#pullrequestreview-31546981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e326051d-d86c-40f6-8909-9c5f9e0f93f2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "tested?",
        "createdAt" : "2017-04-06T22:37:37Z",
        "updatedAt" : "2017-04-07T15:20:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "03dbdc2d-a866-4779-9040-5ae6f0895e88",
        "parentId" : "e326051d-d86c-40f6-8909-9c5f9e0f93f2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "also is this validated to be an integer? (and tested)?",
        "createdAt" : "2017-04-06T22:37:51Z",
        "updatedAt" : "2017-04-07T15:20:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9c7c43b1-5e42-4472-8a86-887c2c7b2a7e",
        "parentId" : "e326051d-d86c-40f6-8909-9c5f9e0f93f2",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "1) Negative numbers tested, yes.\r\n2) Verified as an integer, no.  Can do in a follow-up (refactored)",
        "createdAt" : "2017-04-07T03:15:30Z",
        "updatedAt" : "2017-04-07T15:20:51Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "06a92b6e-663c-4a0a-b97c-46ba8c109aaf",
        "parentId" : "e326051d-d86c-40f6-8909-9c5f9e0f93f2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure",
        "createdAt" : "2017-04-07T12:23:53Z",
        "updatedAt" : "2017-04-07T15:20:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3a8ccaf7371f9e17c8a55f58865eb8b96b6ff50",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +2685,2689 @@\n    def _rows_to_cols(self, content):\n        if self.skipfooter < 0:\n            raise ValueError('skip footer cannot be negative')\n"
  },
  {
    "id" : "a1fa58ad-9f5d-4364-8d3c-948283d03208",
    "prId" : 15925,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15925#pullrequestreview-31647781",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a333d5f6-c549-47b4-b9cd-60a9a9c65cb5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what is the difference between``_empty`` and ``_check_empty``? (I would prefer just the ``_check_empty`` as more meanigful name)",
        "createdAt" : "2017-04-07T12:23:31Z",
        "updatedAt" : "2017-04-07T15:20:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f89ba497-a2d4-422b-9a95-7e65f3fdd14c",
        "parentId" : "a333d5f6-c549-47b4-b9cd-60a9a9c65cb5",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yes, there are.  Admittedly, the naming is not clear.  `_check_empty` doesn't just check for empty lines (`_empty` does though).  It also removes them.  A renaming + documentation would be good as a (third!) follow-up.",
        "createdAt" : "2017-04-07T14:18:51Z",
        "updatedAt" : "2017-04-07T15:20:51Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "7558c10d-e9de-41c9-899b-6f6fa1456ba0",
        "parentId" : "a333d5f6-c549-47b4-b9cd-60a9a9c65cb5",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, pls do so (in followup)",
        "createdAt" : "2017-04-07T19:45:01Z",
        "updatedAt" : "2017-04-07T19:45:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3a8ccaf7371f9e17c8a55f58865eb8b96b6ff50",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +2483,2487 @@                            line = ret[0]\n                            break\n                    elif self._empty(orig_line) or line:\n                        break\n"
  },
  {
    "id" : "e3e2431d-fd06-494c-8924-a8586176d056",
    "prId" : 16950,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16950#pullrequestreview-50193179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a97f533-6b49-4777-b0ab-1d614844f2b4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you *may* need to update ``docs/source/io.rst`` as well",
        "createdAt" : "2017-07-15T16:29:56Z",
        "updatedAt" : "2017-07-17T23:31:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8625c3b9-380a-45f2-a567-7817db1da6e3",
        "parentId" : "6a97f533-6b49-4777-b0ab-1d614844f2b4",
        "authorId" : "1b2f92c6-1f54-430a-b051-f1229eece4b2",
        "body" : "This is done now.",
        "createdAt" : "2017-07-15T17:04:57Z",
        "updatedAt" : "2017-07-17T23:31:01Z",
        "lastEditedBy" : "1b2f92c6-1f54-430a-b051-f1229eece4b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cce4728fe9d32da4b16b0e69d7a05a14510c77f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +315,319 @@    different from ``'\\s+'`` will be interpreted as regular expressions and\n    will also force the use of the Python parsing engine. Note that regex\n    delimiters are prone to ignoring quoted data. Regex example: ``'\\r\\t'``\ndelimiter : str, default ``None``\n    Alternative argument name for sep.\"\"\""
  },
  {
    "id" : "8e91b36b-6b20-4e9d-98b5-e37a92e04cb8",
    "prId" : 16950,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16950#pullrequestreview-50480007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a16e9877-41a3-45f5-a282-e284a1010441",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Why was this moved in the first place?",
        "createdAt" : "2017-07-16T08:15:50Z",
        "updatedAt" : "2017-07-17T23:31:01Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "f5a6e009-17ed-4bcb-9182-4992a179a39d",
        "parentId" : "a16e9877-41a3-45f5-a282-e284a1010441",
        "authorId" : "1b2f92c6-1f54-430a-b051-f1229eece4b2",
        "body" : "I'm not sure why this was originally moved out of `_sep_doc`, however I've put it back as this particular documentation of the `delimiter` parameter only applies to `read_csv` and `read_table`, both of which use `_sep_doc` in their documentation.",
        "createdAt" : "2017-07-17T23:52:58Z",
        "updatedAt" : "2017-07-17T23:52:58Z",
        "lastEditedBy" : "1b2f92c6-1f54-430a-b051-f1229eece4b2",
        "tags" : [
        ]
      },
      {
        "id" : "7f1f15ac-9076-4df4-aebe-d46eb9322ca1",
        "parentId" : "a16e9877-41a3-45f5-a282-e284a1010441",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Awesome.  Thanks!",
        "createdAt" : "2017-07-17T23:58:30Z",
        "updatedAt" : "2017-07-17T23:58:30Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cce4728fe9d32da4b16b0e69d7a05a14510c77f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +318,322 @@delimiter : str, default ``None``\n    Alternative argument name for sep.\"\"\"\n\n_read_csv_doc = \"\"\"\nRead CSV (comma-separated) file into DataFrame"
  },
  {
    "id" : "2290af54-19b9-42d7-884e-a672d0f8a9ee",
    "prId" : 17310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17310#pullrequestreview-67515034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e116462-a719-4a10-890b-57b666ad8b9a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "there is a validate_usecols_arg function, is there a reason you are creating a new one?",
        "createdAt" : "2017-10-05T10:32:26Z",
        "updatedAt" : "2017-12-02T16:00:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "42c2722d-676b-42da-8b35-3d4f73521d49",
        "parentId" : "1e116462-a719-4a10-890b-57b666ad8b9a",
        "authorId" : "997c4bf0-6f89-45c6-8eb6-0783741cce42",
        "body" : "Sure, was going from @gfyoung's suggestion.\r\nWe could extend the existing function, at the moment it's only taking `usecols` as an arg so would be extending it's arguments as well as logic.\r\nI've not checked if every call to `validate_usecols_arg` would have a `names` argument to pass through, so may need to default it? Although I would think we'd always have column names to check against, right?\r\n\r\nLet me know if this is a 'must-have' for you and I'll implement.",
        "createdAt" : "2017-10-05T10:56:40Z",
        "updatedAt" : "2017-12-02T16:00:43Z",
        "lastEditedBy" : "997c4bf0-6f89-45c6-8eb6-0783741cce42",
        "tags" : [
        ]
      },
      {
        "id" : "71131776-d41b-4726-ad1f-6d8929e252f3",
        "parentId" : "1e116462-a719-4a10-890b-57b666ad8b9a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "it certainly can be an optional argument\r\nhaving 2 functions do similar things is confusing",
        "createdAt" : "2017-10-05T21:09:23Z",
        "updatedAt" : "2017-12-02T16:00:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dfccdb6e617ec6596a1a9c34ff4e5d5b4e091cf",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1157,1161 @@    Returns\n    -------\n    usecols : iterable of usecols\n        The `usecols` parameter if the validation succeeds.\n"
  },
  {
    "id" : "be0e0788-45c0-4793-817e-a26136b4c144",
    "prId" : 17310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17310#pullrequestreview-79712019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0c9004f-5ca9-405b-9adc-bf027efd345f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you might need to ', '.join(missing) here, not sure.",
        "createdAt" : "2017-11-29T00:09:52Z",
        "updatedAt" : "2017-12-02T16:00:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0d6f40d7-ff2f-474a-9996-853085881ef2",
        "parentId" : "d0c9004f-5ca9-405b-9adc-bf027efd345f",
        "authorId" : "997c4bf0-6f89-45c6-8eb6-0783741cce42",
        "body" : "```python\r\nPython 3.6.3 |Anaconda, Inc.| (default, Nov  8 2017, 18:10:31) \r\n[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> l = [1, 'foo', [2,3]]\r\n>>> 'Formatted l: {}'.format(l)\r\n\"Formatted l: [1, 'foo', [2, 3]]\"\r\n```\r\n\r\nif you'd prefer a different error message, I'd be happy to use join though.",
        "createdAt" : "2017-11-29T01:09:53Z",
        "updatedAt" : "2017-12-02T16:00:43Z",
        "lastEditedBy" : "997c4bf0-6f89-45c6-8eb6-0783741cce42",
        "tags" : [
        ]
      },
      {
        "id" : "e3c60954-6f3a-4ecb-a893-98cd051f5c3c",
        "parentId" : "d0c9004f-5ca9-405b-9adc-bf027efd345f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that’s fine i guess format is pretty smart about this ok!",
        "createdAt" : "2017-11-29T01:19:13Z",
        "updatedAt" : "2017-12-02T16:00:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dfccdb6e617ec6596a1a9c34ff4e5d5b4e091cf",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1168,1172 @@        raise ValueError(\n            \"Usecols do not match columns, \"\n            \"columns expected but not found: {missing}\".format(missing=missing)\n        )\n"
  },
  {
    "id" : "7cf89608-8525-48e7-8975-bba6c190ea03",
    "prId" : 17351,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17351#pullrequestreview-59236184",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a63f304a-d6d1-4d4b-91e7-c6110376ee9d",
        "parentId" : null,
        "authorId" : "6ce9b37d-3c90-4ab0-b29b-fdf21b27a7d8",
        "body" : "self.usecols is a ``set`` of the original usecols. On PyPy ``set``s are not sorted so \"every single time\" requires a sort. \r\n```\r\n>>>> list(set([3, 0, 2]))\r\n[3, 0, 2]\r\n```\r\nRunning tests with this line replaces by ``usecols.reverse() will show the dependency on the list being sorted:",
        "createdAt" : "2017-08-28T23:55:03Z",
        "updatedAt" : "2017-09-06T18:50:08Z",
        "lastEditedBy" : "6ce9b37d-3c90-4ab0-b29b-fdf21b27a7d8",
        "tags" : [
        ]
      },
      {
        "id" : "b4bb0637-9d03-4f7b-a400-e49db7451e9c",
        "parentId" : "a63f304a-d6d1-4d4b-91e7-c6110376ee9d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no averse to this, but why does this matter?",
        "createdAt" : "2017-08-29T13:02:48Z",
        "updatedAt" : "2017-09-06T18:50:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "32f4f440-984b-4934-994d-79fa8921a288",
        "parentId" : "a63f304a-d6d1-4d4b-91e7-c6110376ee9d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a test that exercises the sortedness?",
        "createdAt" : "2017-08-29T13:03:25Z",
        "updatedAt" : "2017-09-06T18:50:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bf8914c4-50ca-4d29-a2cc-bdb50f37c653",
        "parentId" : "a63f304a-d6d1-4d4b-91e7-c6110376ee9d",
        "authorId" : "6ce9b37d-3c90-4ab0-b29b-fdf21b27a7d8",
        "body" : "there are tests, but they all pass on CPython since sets of ints are always sorted, ie pandas/tests/io/parsers/usecol.py, lines 199, 270, 296 which all failed on PyPy before this change. Not sure how I could construct a failing test for CPython",
        "createdAt" : "2017-08-29T13:17:49Z",
        "updatedAt" : "2017-09-06T18:50:08Z",
        "lastEditedBy" : "6ce9b37d-3c90-4ab0-b29b-fdf21b27a7d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb7ef636ad83700239615e10bc1810cbe2f99dcf",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1715,1719 @@            # the correct order every single time.\n            usecols = list(self.usecols)\n            usecols.sort()\n        elif (callable(self.usecols) or\n                self.usecols_dtype not in ('empty', None)):"
  }
]