[
  {
    "id" : "6f7c9ddf-4ca9-45fb-afea-86888582ed05",
    "prId" : 28130,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28130#pullrequestreview-281099558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7bfd33d-bdcd-422b-a717-2394fddc70c9",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think `obj` should be FrameOrSeries, but since it gets passed too pandas.core.generic I was getting errors like\r\n\r\n```sh\r\npandas/core/generic.py:2401: error: Value of type variable \"FrameOrSeries\" of \"to_json\" cannot be \"NDFrame\"\r\n```",
        "createdAt" : "2019-08-25T23:40:34Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "c7d485bf-3971-4004-8187-3773505638fe",
        "parentId" : "f7bfd33d-bdcd-422b-a717-2394fddc70c9",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I think FrameOrSeries in _typing should be changed to `FrameOrSeries = TypeVar(\"FrameOrSeries\", bound=\"NDFrame\")` as used in #27646",
        "createdAt" : "2019-08-26T10:30:29Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "cba97312-c130-49e6-9990-7fc07e1e360c",
        "parentId" : "f7bfd33d-bdcd-422b-a717-2394fddc70c9",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Interesting idea - I think worth exploring as a separate PR for sure",
        "createdAt" : "2019-08-26T14:33:26Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3eafaa84-68c8-40aa-8da6-af5fad9f1188",
        "parentId" : "f7bfd33d-bdcd-422b-a717-2394fddc70c9",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Took a look at this after merging master and still doesn't work because the SeriesWriter _write method seems to re-use this variable for a dict. I'm not sure if that's needed so should be able to refactor but probably better as a follow up to not cram too much in here",
        "createdAt" : "2019-08-28T20:58:58Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f376f121e20e25848a305e31c501500b8a205f2c",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +41,45 @@def to_json(\n    path_or_buf,\n    obj,\n    orient: Optional[str] = None,\n    date_format: str = \"epoch\","
  },
  {
    "id" : "af50d23b-5f48-4024-b71c-e1de68dfc4cf",
    "prId" : 28130,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28130#pullrequestreview-280180684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fe16d5a-db79-4ee6-adcc-94188966b53d",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "`orient` is probably better as an abstract property but I figure best to leave that refactor to a follow up",
        "createdAt" : "2019-08-25T23:41:05Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "691a5d84-919d-4383-a01b-e6afa1ed0756",
        "parentId" : "0fe16d5a-db79-4ee6-adcc-94188966b53d",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "add a comment?\r\n\r\nalthough adding an abstract property is straightforward,  if you add if TYPE-CHECKING it won't affect runtime behaviour.\r\n\r\n```\r\nif TYPE_CHECKING:\r\n   _default_orient = None  # type: <...>\r\n```",
        "createdAt" : "2019-08-27T09:13:19Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "fdef59b5-2034-47ab-9989-7c069b14a0c4",
        "parentId" : "0fe16d5a-db79-4ee6-adcc-94188966b53d",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "If it's cool I'd prefer to do this as a quick follow up. I find a lot of TYPE_CHECKING blocks to be distracting so like to avoid where possible. It won't be difficult just want to minimize diff in extension change",
        "createdAt" : "2019-08-27T12:59:36Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a8a3601e-4972-4eb9-9332-79a6044aa265",
        "parentId" : "0fe16d5a-db79-4ee6-adcc-94188966b53d",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "no problem.\r\n\r\nI don't think we should avoid these blocks as too beneficial.\r\n\r\nin a (hopefully not too distant) future PR, i'll be adding...\r\n\r\n```\r\n    if TYPE_CHECKING:  # attributes index and columns are created dynamically\r\n        index = None  # type: Index\r\n        columns = None  # type: Index\r\n```\r\n\r\nto frame.py so that i can get types for `self.fmt.tr_frame.index.format` and `self.frame.index.nlevels` etc.\r\n\r\nin this case all tests pass without the `if TYPE_CHECKING` but would rather not change runtime behaviour if avoidable.",
        "createdAt" : "2019-08-27T13:08:23Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f376f121e20e25848a305e31c501500b8a205f2c",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +117,121 @@\n        if orient is None:\n            orient = self._default_orient  # type: ignore\n\n        self.orient = orient"
  },
  {
    "id" : "ab6b263d-041d-4104-8c3d-54efd7d28b14",
    "prId" : 28130,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28130#pullrequestreview-279512681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e375bd3-f7a0-4634-acf4-e1d34dae9a78",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think this should be `FilePathOrBuffer` but was failing with\r\n\r\n```sh\r\npandas/io/json/_json.py:97: error: Item \"Path\" of \"Union[Path, IO[Any]]\" has no attribute \"write\"\r\n```\r\n\r\nI think this is actually a problem with the return of `_stringify_path` since it doesn't indicate that Path objects get converted to strings. Can open an issue as a follow up but @simonjayhawkins may already be working on that",
        "createdAt" : "2019-08-25T23:43:51Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "daea2d86-6408-4b43-8640-083e7998ddfb",
        "parentId" : "6e375bd3-f7a0-4634-acf4-e1d34dae9a78",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "yeah, should already be fixed with overloads in #27732. ",
        "createdAt" : "2019-08-26T10:19:20Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f376f121e20e25848a305e31c501500b8a205f2c",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +40,44 @@# interface to/from\ndef to_json(\n    path_or_buf,\n    obj,\n    orient: Optional[str] = None,"
  },
  {
    "id" : "5839693b-bac0-449b-bd75-e5f76e74ff81",
    "prId" : 28351,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28351#pullrequestreview-285852088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e18eca01-f499-4498-8d02-ab5f590b885c",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Actually should we be catching an `OutOfBoundsDatetime` exception here? Not sure if test coverage is hitting that but I think easy enough to trigger (just try a date like \"9999-01-01\")\r\n\r\nOut of curiosity what causes the OverflowError?",
        "createdAt" : "2019-09-10T00:04:01Z",
        "updatedAt" : "2019-09-10T00:04:05Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4bca94bb-653e-4a57-86f3-0a7a1772783d",
        "parentId" : "e18eca01-f499-4498-8d02-ab5f590b885c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think it is cast_to_unit being called inside array_to_datetime, but would have to check.\r\n\r\n`OutOfBoundsDatetime` subclasses `ValueError` so that is already caught.",
        "createdAt" : "2019-09-10T00:31:50Z",
        "updatedAt" : "2019-09-10T00:31:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "45ac614a5d3a3174ab0fb9eb937ec97079622875",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +973,977 @@            try:\n                new_data = to_datetime(new_data, errors=\"raise\", unit=date_unit)\n            except (ValueError, OverflowError):\n                continue\n            return new_data, True"
  }
]