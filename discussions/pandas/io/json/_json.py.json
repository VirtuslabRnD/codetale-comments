[
  {
    "id" : "6f7c9ddf-4ca9-45fb-afea-86888582ed05",
    "prId" : 28130,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28130#pullrequestreview-281099558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7bfd33d-bdcd-422b-a717-2394fddc70c9",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think `obj` should be FrameOrSeries, but since it gets passed too pandas.core.generic I was getting errors like\r\n\r\n```sh\r\npandas/core/generic.py:2401: error: Value of type variable \"FrameOrSeries\" of \"to_json\" cannot be \"NDFrame\"\r\n```",
        "createdAt" : "2019-08-25T23:40:34Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "c7d485bf-3971-4004-8187-3773505638fe",
        "parentId" : "f7bfd33d-bdcd-422b-a717-2394fddc70c9",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I think FrameOrSeries in _typing should be changed to `FrameOrSeries = TypeVar(\"FrameOrSeries\", bound=\"NDFrame\")` as used in #27646",
        "createdAt" : "2019-08-26T10:30:29Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "cba97312-c130-49e6-9990-7fc07e1e360c",
        "parentId" : "f7bfd33d-bdcd-422b-a717-2394fddc70c9",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Interesting idea - I think worth exploring as a separate PR for sure",
        "createdAt" : "2019-08-26T14:33:26Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3eafaa84-68c8-40aa-8da6-af5fad9f1188",
        "parentId" : "f7bfd33d-bdcd-422b-a717-2394fddc70c9",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Took a look at this after merging master and still doesn't work because the SeriesWriter _write method seems to re-use this variable for a dict. I'm not sure if that's needed so should be able to refactor but probably better as a follow up to not cram too much in here",
        "createdAt" : "2019-08-28T20:58:58Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f376f121e20e25848a305e31c501500b8a205f2c",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +41,45 @@def to_json(\n    path_or_buf,\n    obj,\n    orient: Optional[str] = None,\n    date_format: str = \"epoch\","
  },
  {
    "id" : "af50d23b-5f48-4024-b71c-e1de68dfc4cf",
    "prId" : 28130,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28130#pullrequestreview-280180684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fe16d5a-db79-4ee6-adcc-94188966b53d",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "`orient` is probably better as an abstract property but I figure best to leave that refactor to a follow up",
        "createdAt" : "2019-08-25T23:41:05Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "691a5d84-919d-4383-a01b-e6afa1ed0756",
        "parentId" : "0fe16d5a-db79-4ee6-adcc-94188966b53d",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "add a comment?\r\n\r\nalthough adding an abstract property is straightforward,  if you add if TYPE-CHECKING it won't affect runtime behaviour.\r\n\r\n```\r\nif TYPE_CHECKING:\r\n   _default_orient = None  # type: <...>\r\n```",
        "createdAt" : "2019-08-27T09:13:19Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "fdef59b5-2034-47ab-9989-7c069b14a0c4",
        "parentId" : "0fe16d5a-db79-4ee6-adcc-94188966b53d",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "If it's cool I'd prefer to do this as a quick follow up. I find a lot of TYPE_CHECKING blocks to be distracting so like to avoid where possible. It won't be difficult just want to minimize diff in extension change",
        "createdAt" : "2019-08-27T12:59:36Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a8a3601e-4972-4eb9-9332-79a6044aa265",
        "parentId" : "0fe16d5a-db79-4ee6-adcc-94188966b53d",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "no problem.\r\n\r\nI don't think we should avoid these blocks as too beneficial.\r\n\r\nin a (hopefully not too distant) future PR, i'll be adding...\r\n\r\n```\r\n    if TYPE_CHECKING:  # attributes index and columns are created dynamically\r\n        index = None  # type: Index\r\n        columns = None  # type: Index\r\n```\r\n\r\nto frame.py so that i can get types for `self.fmt.tr_frame.index.format` and `self.frame.index.nlevels` etc.\r\n\r\nin this case all tests pass without the `if TYPE_CHECKING` but would rather not change runtime behaviour if avoidable.",
        "createdAt" : "2019-08-27T13:08:23Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f376f121e20e25848a305e31c501500b8a205f2c",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +117,121 @@\n        if orient is None:\n            orient = self._default_orient  # type: ignore\n\n        self.orient = orient"
  },
  {
    "id" : "ab6b263d-041d-4104-8c3d-54efd7d28b14",
    "prId" : 28130,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28130#pullrequestreview-279512681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e375bd3-f7a0-4634-acf4-e1d34dae9a78",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think this should be `FilePathOrBuffer` but was failing with\r\n\r\n```sh\r\npandas/io/json/_json.py:97: error: Item \"Path\" of \"Union[Path, IO[Any]]\" has no attribute \"write\"\r\n```\r\n\r\nI think this is actually a problem with the return of `_stringify_path` since it doesn't indicate that Path objects get converted to strings. Can open an issue as a follow up but @simonjayhawkins may already be working on that",
        "createdAt" : "2019-08-25T23:43:51Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "daea2d86-6408-4b43-8640-083e7998ddfb",
        "parentId" : "6e375bd3-f7a0-4634-acf4-e1d34dae9a78",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "yeah, should already be fixed with overloads in #27732. ",
        "createdAt" : "2019-08-26T10:19:20Z",
        "updatedAt" : "2019-09-16T15:23:34Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f376f121e20e25848a305e31c501500b8a205f2c",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +40,44 @@# interface to/from\ndef to_json(\n    path_or_buf,\n    obj,\n    orient: Optional[str] = None,"
  },
  {
    "id" : "5839693b-bac0-449b-bd75-e5f76e74ff81",
    "prId" : 28351,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28351#pullrequestreview-285852088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e18eca01-f499-4498-8d02-ab5f590b885c",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Actually should we be catching an `OutOfBoundsDatetime` exception here? Not sure if test coverage is hitting that but I think easy enough to trigger (just try a date like \"9999-01-01\")\r\n\r\nOut of curiosity what causes the OverflowError?",
        "createdAt" : "2019-09-10T00:04:01Z",
        "updatedAt" : "2019-09-10T00:04:05Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4bca94bb-653e-4a57-86f3-0a7a1772783d",
        "parentId" : "e18eca01-f499-4498-8d02-ab5f590b885c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I think it is cast_to_unit being called inside array_to_datetime, but would have to check.\r\n\r\n`OutOfBoundsDatetime` subclasses `ValueError` so that is already caught.",
        "createdAt" : "2019-09-10T00:31:50Z",
        "updatedAt" : "2019-09-10T00:31:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "45ac614a5d3a3174ab0fb9eb937ec97079622875",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +973,977 @@            try:\n                new_data = to_datetime(new_data, errors=\"raise\", unit=date_unit)\n            except (ValueError, OverflowError):\n                continue\n            return new_data, True"
  },
  {
    "id" : "c97c41f3-07e3-45dc-91ce-e34da5001d16",
    "prId" : 33373,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33373#pullrequestreview-390171138",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a744dcfa-7007-4621-beef-6a2b3f8aa03d",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "@jbrockmendel any thoughts here?",
        "createdAt" : "2020-04-07T17:10:05Z",
        "updatedAt" : "2020-04-08T16:05:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "bcbd4ad1-6330-40ae-b43f-4914dde11f7c",
        "parentId" : "a744dcfa-7007-4621-beef-6a2b3f8aa03d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "the usual: if we can handle this case before the try/except that would be preferable",
        "createdAt" : "2020-04-07T18:19:57Z",
        "updatedAt" : "2020-04-08T16:05:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "fbdcf828-12ac-4b51-9b75-4af4457acbd0",
        "parentId" : "a744dcfa-7007-4621-beef-6a2b3f8aa03d",
        "authorId" : "43a2195e-817d-41e2-898d-0cf5a3b5b4b8",
        "body" : "@jbrockmendel I’ll give that approach a try.",
        "createdAt" : "2020-04-07T18:25:34Z",
        "updatedAt" : "2020-04-08T16:05:48Z",
        "lastEditedBy" : "43a2195e-817d-41e2-898d-0cf5a3b5b4b8",
        "tags" : [
        ]
      },
      {
        "id" : "2ecde876-5e39-4a3e-ab9d-ddb8f4fc6e83",
        "parentId" : "a744dcfa-7007-4621-beef-6a2b3f8aa03d",
        "authorId" : "43a2195e-817d-41e2-898d-0cf5a3b5b4b8",
        "body" : "@jbrockmendel Pushed an alternate approach that escapes from the _try_convert_to_date() method if the dtype is bool, avoiding the try/except but adding a conditional to the method (which I don't love, but at least the method already has dtype-based conditionals).",
        "createdAt" : "2020-04-07T19:53:16Z",
        "updatedAt" : "2020-04-08T16:05:48Z",
        "lastEditedBy" : "43a2195e-817d-41e2-898d-0cf5a3b5b4b8",
        "tags" : [
        ]
      },
      {
        "id" : "aa254acf-a70b-4200-9c50-830299698b34",
        "parentId" : "a744dcfa-7007-4621-beef-6a2b3f8aa03d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes this is ok. an alternative approach is to `infer_dtype` on this and then dispatch. If someone wants to try that (later PR) would be ok.",
        "createdAt" : "2020-04-08T17:12:08Z",
        "updatedAt" : "2020-04-08T17:12:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "19097a7613e2e80f2c0f26e643830d1673bbc1f8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +983,987 @@            try:\n                new_data = to_datetime(new_data, errors=\"raise\", unit=date_unit)\n            except (ValueError, OverflowError, TypeError):\n                continue\n            return new_data, True"
  },
  {
    "id" : "24b10606-dc99-4e33-abff-dfdb5aa9a5d0",
    "prId" : 33962,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33962#pullrequestreview-407461419",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f70d846f-083e-441d-b995-ce8a155e600d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this still reads in the entire string then splits it, the parser needs to be in the iterator",
        "createdAt" : "2020-05-07T13:20:51Z",
        "updatedAt" : "2020-06-04T19:13:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9a3ebd21537a176f177181d20021231ddbb9f67",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +745,749 @@                lines_json = self._combine_lines(lines)\n                obj = self._get_object_parser(lines_json)\n            else:\n                data = ensure_str(self.data)\n                data = data.split(\"\\n\")"
  },
  {
    "id" : "c9d100c8-cd83-4095-8420-27453b6906b1",
    "prId" : 33962,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33962#pullrequestreview-417534641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30be3c4a-e07b-4ab4-8387-fc66533c8739",
        "parentId" : null,
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "Thanks @hasnain2808 \r\n\r\nCould you add a test which hits this line, i.e. that checks that this ValueError is raised if `nrows` is set but `lines` isn't?",
        "createdAt" : "2020-05-24T18:44:12Z",
        "updatedAt" : "2020-06-04T19:13:17Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      },
      {
        "id" : "de9db267-f5e3-4695-b7f1-ee1088753e3f",
        "parentId" : "30be3c4a-e07b-4ab4-8387-fc66533c8739",
        "authorId" : "1baa11c8-5fc7-46d1-8dc4-9523c0e2d279",
        "body" : "Thanks @MarcoGorelli for the review.\r\nI added the test. Tested the test by commenting out the appropriate lines and pushed the commit",
        "createdAt" : "2020-05-24T19:12:47Z",
        "updatedAt" : "2020-06-04T19:13:17Z",
        "lastEditedBy" : "1baa11c8-5fc7-46d1-8dc4-9523c0e2d279",
        "tags" : [
        ]
      },
      {
        "id" : "b7670de6-f3bc-4e59-9e3c-c6a09ec316ad",
        "parentId" : "30be3c4a-e07b-4ab4-8387-fc66533c8739",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "Great, thanks - can you also add the github issue number as a comment at the top of each test you've added? Something like\r\n```python\r\ndef test_readjson_nrows(nrows):\r\n    # GH<issue number goes here>\r\n```\r\n?",
        "createdAt" : "2020-05-24T20:34:17Z",
        "updatedAt" : "2020-06-04T19:13:17Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      },
      {
        "id" : "02cd9032-d44e-440a-9b59-81b077c61d3c",
        "parentId" : "30be3c4a-e07b-4ab4-8387-fc66533c8739",
        "authorId" : "1baa11c8-5fc7-46d1-8dc4-9523c0e2d279",
        "body" : "Added",
        "createdAt" : "2020-05-25T08:09:35Z",
        "updatedAt" : "2020-06-04T19:13:17Z",
        "lastEditedBy" : "1baa11c8-5fc7-46d1-8dc4-9523c0e2d279",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9a3ebd21537a176f177181d20021231ddbb9f67",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +675,679 @@            self.nrows = _validate_integer(\"nrows\", self.nrows, 0)\n            if not self.lines:\n                raise ValueError(\"nrows can only be passed if lines=True\")\n\n        data = self._get_data_from_filepath(filepath_or_buffer)"
  },
  {
    "id" : "c64b4b52-bdc3-469f-aa10-831372bfe6dd",
    "prId" : 33962,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33962#pullrequestreview-419788414",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cff534ff-b165-4d5a-a972-7837ffc7373f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I *think* you need a blank line before this",
        "createdAt" : "2020-05-26T22:55:29Z",
        "updatedAt" : "2020-06-04T19:13:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "432a1878-6fb5-4234-b4dc-fa988ee1bbbd",
        "parentId" : "cff534ff-b165-4d5a-a972-7837ffc7373f",
        "authorId" : "1baa11c8-5fc7-46d1-8dc4-9523c0e2d279",
        "body" : "Okay",
        "createdAt" : "2020-05-28T05:33:05Z",
        "updatedAt" : "2020-06-04T19:13:17Z",
        "lastEditedBy" : "1baa11c8-5fc7-46d1-8dc4-9523c0e2d279",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9a3ebd21537a176f177181d20021231ddbb9f67",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +508,512 @@        If this is None, all the rows will be returned.\n\n        .. versionadded:: 1.1\n\n    Returns"
  },
  {
    "id" : "1732264c-8cb0-4133-b63a-61f50d910410",
    "prId" : 35645,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35645#pullrequestreview-467135167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5d52223-0f9a-4c75-9362-9b6630b5d4f4",
        "parentId" : null,
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "probably unrelated to the recent CI issues, but we should definitely close those handles.",
        "createdAt" : "2020-08-13T03:15:04Z",
        "updatedAt" : "2020-08-13T03:15:04Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      },
      {
        "id" : "086ec786-54ce-4945-9cc7-a6df878014fd",
        "parentId" : "b5d52223-0f9a-4c75-9362-9b6630b5d4f4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, is there a ResoucceWarning?",
        "createdAt" : "2020-08-13T16:19:27Z",
        "updatedAt" : "2020-08-13T16:19:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b0c23374-5be6-4bb3-ad62-61c200bb07ff",
        "parentId" : "b5d52223-0f9a-4c75-9362-9b6630b5d4f4",
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "I haven't seen any when reading/writing json files",
        "createdAt" : "2020-08-13T21:14:38Z",
        "updatedAt" : "2020-08-13T21:14:39Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8204c88f74da437326fc23d27c75dcddcce7135e",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +829,833 @@                pass\n        for file_handle in self.file_handles:\n            file_handle.close()\n\n    def __next__(self):"
  },
  {
    "id" : "255b5a99-7ff8-4922-871b-7317e973000b",
    "prId" : 35681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35681#pullrequestreview-476348666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "500dc8cf-ae2d-4d14-87f1-ce1f3a8b8b7c",
        "parentId" : null,
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "was there a reason not to close them?",
        "createdAt" : "2020-08-25T21:11:13Z",
        "updatedAt" : "2020-08-31T23:18:44Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      },
      {
        "id" : "24089b67-07f7-4ef2-b2e9-a4b9edc52046",
        "parentId" : "500dc8cf-ae2d-4d14-87f1-ce1f3a8b8b7c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could have been an oversight, did you have to change any tests?",
        "createdAt" : "2020-08-27T02:37:22Z",
        "updatedAt" : "2020-08-31T23:18:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9fb6144c-da89-481e-a0be-92337cc2e949",
        "parentId" : "500dc8cf-ae2d-4d14-87f1-ce1f3a8b8b7c",
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "I didn't change any tests",
        "createdAt" : "2020-08-27T02:48:25Z",
        "updatedAt" : "2020-08-31T23:18:44Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "475e8e8595370085d64a8c5e10a1f020f19f7ec7",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +105,109 @@        finally:\n            fh.close()\n        for handle in handles:\n            handle.close()\n    elif path_or_buf is None:"
  },
  {
    "id" : "1f720113-5a74-40e5-b8e2-5c688856bc4f",
    "prId" : 35973,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35973#pullrequestreview-481207785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ca79c35-0a27-4a51-96af-bb7b258658da",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Did this need to change or did black format this?",
        "createdAt" : "2020-09-02T17:14:08Z",
        "updatedAt" : "2020-10-31T19:15:27Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "0902aab3-9cda-438a-b9fe-90f1392864fb",
        "parentId" : "1ca79c35-0a27-4a51-96af-bb7b258658da",
        "authorId" : "00fd25ec-10ce-4da2-b282-338650c2fd94",
        "body" : "Orient=table supports MultiIndex Index but doesn't support MultiIndex on columns, I thought it was worth clarifying.",
        "createdAt" : "2020-09-02T19:13:06Z",
        "updatedAt" : "2020-10-31T19:15:27Z",
        "lastEditedBy" : "00fd25ec-10ce-4da2-b282-338650c2fd94",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b58d2f0f0982e80692fd1b4e6cc55314f98f3c3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +263,267 @@        # NotImplemented on a column MultiIndex\n        if obj.ndim == 2 and isinstance(obj.columns, MultiIndex):\n            raise NotImplementedError(\n                \"orient='table' is not supported for MultiIndex columns\"\n            )"
  },
  {
    "id" : "460c3ee0-ec4b-41fb-b230-84a5bbb44ec6",
    "prId" : 36218,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36218#pullrequestreview-512408849",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5469fd4-8c27-42af-8a23-b38321a81d2d",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "should this be FrameOrSeries?",
        "createdAt" : "2020-10-07T21:42:48Z",
        "updatedAt" : "2020-10-20T07:33:38Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "25b7a398-7965-4c75-b4d1-9159a875f7d2",
        "parentId" : "d5469fd4-8c27-42af-8a23-b38321a81d2d",
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "The problem with ``FrameOrSeries`` is that it does not allow changing the type of return value.\r\nInside the function ``to_json`` there is a statement, which changes object from series to frame, which is not allowed.\r\n```\r\n    if orient == \"table\" and isinstance(obj, Series):\r\n        obj = obj.to_frame(name=obj.name or \"values\")\r\n```\r\n\r\nmypy error:\r\n```\r\npandas/io/json/_json.py:78: error: Incompatible types in assignment (expression has type \"DataFrame\", variable has type \"FrameOrSeries\")  [assignment]\r\n```\r\n\r\nI tried to use ``FrameOrSeriesUnion``, which allows changing type from series to frame, but I get another mypy error.\r\nApparently for ``NDFrame`` only ``FrameOrSeries`` is a correct casting.\r\n\r\n```\r\npandas/core/generic.py:2159: error: The erased type of self \"Union[pandas.core.frame.DataFrame, pandas.core.series.Series]\" is not a supertype of its class \"pandas.core.generic.NDFrame\"  [misc]\r\n```\r\n\r\nSo, I have no clue how to deal with typing here.",
        "createdAt" : "2020-10-08T05:48:40Z",
        "updatedAt" : "2020-10-20T07:33:38Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      },
      {
        "id" : "af648fd0-3908-4615-a199-92d9439eddb5",
        "parentId" : "d5469fd4-8c27-42af-8a23-b38321a81d2d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@willayd i expected FrameOrSeriesUnion would work for this, am i missing something?",
        "createdAt" : "2020-10-18T00:15:40Z",
        "updatedAt" : "2020-10-20T07:33:38Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e3c62158-e10d-4b5c-b481-74f0f7fefe8a",
        "parentId" : "d5469fd4-8c27-42af-8a23-b38321a81d2d",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "@ivanovmg can you merge master and update the error message here? I don't think that line number is reflective of the latest code base\r\n\r\nI think the error message is stemming from a mixture of using a Union and a TypeVar (the latter being somewhere in generic). Ideally should be cleaned up but I don't think needs to hold up this PR",
        "createdAt" : "2020-10-19T21:21:58Z",
        "updatedAt" : "2020-10-20T07:33:38Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a8517a4a-d3ba-4bec-acd8-4bc5f4c02723",
        "parentId" : "d5469fd4-8c27-42af-8a23-b38321a81d2d",
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Here we go.\r\nI merged master, then modified ``pandas/core/generic.py``.\r\n\r\nline 2164:\r\n```\r\n    def to_json(\r\n        self: FrameOrSeriesUnion,\r\n        path_or_buf: Optional[FilePathOrBuffer] = None,\r\n```\r\n\r\nAnd replaced ``NDFrame`` with ``FrameOrSeriesUnion`` in ``_json.py``.\r\n\r\nThe error would be:\r\n```\r\npandas/core/generic.py:2164: error: The erased type of self \"Union[pandas.core.frame.DataFrame, pandas.core.series.Series]\" is not a supertype of its class \"pandas.core.generic.NDFrame\"  [misc]\r\n```\r\n\r\nHowever, if I do not touch ``generic.py``, then the following error with be thrown.\r\n```\r\npandas/core/generic.py:2437: error: Argument \"obj\" to \"to_json\" has incompatible type \"NDFrame\"; expected \"Union[DataFrame, Series]\"  [arg-type]\r\n```",
        "createdAt" : "2020-10-20T07:32:18Z",
        "updatedAt" : "2020-10-20T07:33:38Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2e3a3b4ad22e01e36b0eaec8285fe32d2b8ed2d",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +41,45 @@def to_json(\n    path_or_buf,\n    obj: NDFrame,\n    orient: Optional[str] = None,\n    date_format: str = \"epoch\","
  },
  {
    "id" : "70fe45c4-58c1-4f9c-a3ce-a3723914de93",
    "prId" : 36218,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36218#pullrequestreview-504452922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef98f99c-65d2-46c7-9f9a-30fd8687d597",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can you explicitly `pass` here\r\n\r\nare the keys in the Dict necessarily str, or can they be any Index entries?",
        "createdAt" : "2020-10-07T21:43:52Z",
        "updatedAt" : "2020-10-20T07:33:38Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e85c4dcf-ce1e-485c-bff0-643834f36d1d",
        "parentId" : "ef98f99c-65d2-46c7-9f9a-30fd8687d597",
        "authorId" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "body" : "Oh yes, actually the keys in the dictionary can be of ``IndexLabel`` type.\r\nIn ``FrameWriter`` the resulting dictionary keys can be tuples of strings in case of multicolumns.\r\nIn other cases the keys seem to be only strings.",
        "createdAt" : "2020-10-08T06:07:43Z",
        "updatedAt" : "2020-10-20T07:33:38Z",
        "lastEditedBy" : "6401b20f-26b1-4a7c-8433-dc789c15b9e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2e3a3b4ad22e01e36b0eaec8285fe32d2b8ed2d",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +171,175 @@        \"\"\"Object to write in JSON format.\"\"\"\n        pass\n\n\nclass SeriesWriter(Writer):"
  },
  {
    "id" : "3cb1f173-41ea-498a-9e46-083519a3163b",
    "prId" : 36903,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36903#pullrequestreview-503834956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55efb1d0-93ef-492f-8a1c-7d94af656355",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "can do it here or as follow-on, but we should do the same for Writer and remove the ignore there.",
        "createdAt" : "2020-10-07T12:54:06Z",
        "updatedAt" : "2020-10-08T18:57:25Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea541688eca6dd87b959fb6ed0da766318bdbee7",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +851,855 @@class Parser:\n    _split_keys: Tuple[str, ...]\n    _default_orient: str\n\n    _STAMP_UNITS = (\"s\", \"ms\", \"us\", \"ns\")"
  },
  {
    "id" : "c56a136b-e062-43c9-a7de-fd7e8e1b76e8",
    "prId" : 36903,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36903#pullrequestreview-505123245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5544a6e-3194-4bcb-a8e7-083484951d3a",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "the default for dtype_if_empty is object, so do we need to pass dtype_if_empty. \r\n\r\nif data has more than six items, this would indeed raise.\r\n\r\n```\r\n>>> def func(a=None, b=None, c=object):\r\n...     print(c)\r\n...\r\n>>> data = [1, 2]\r\n>>> func(*data, c=20)\r\n20\r\n>>>\r\n>>> data = [1, 2, 3]\r\n>>> func(*data, c=20)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: func() got multiple values for argument 'c'\r\n>>>\r\n```\r\n\r\ndo we know what data contains?\r\n",
        "createdAt" : "2020-10-07T13:29:56Z",
        "updatedAt" : "2020-10-08T18:57:25Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "c00773ba-72a3-4058-a09a-2702138824dc",
        "parentId" : "d5544a6e-3194-4bcb-a8e7-083484951d3a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "not off the top of my head.  @WillAyd any idea?",
        "createdAt" : "2020-10-07T14:47:58Z",
        "updatedAt" : "2020-10-08T18:57:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "824cb092-379a-49f9-9413-4fd3d734c674",
        "parentId" : "d5544a6e-3194-4bcb-a8e7-083484951d3a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Not sure. Assuming this path comes from the `numpy` keyword we've deprecated that anyway, so not worth investing a ton of time in #30636",
        "createdAt" : "2020-10-08T20:02:00Z",
        "updatedAt" : "2020-10-08T20:02:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea541688eca6dd87b959fb6ed0da766318bdbee7",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +1100,1104 @@            self.obj = create_series_with_explicit_dtype(\n                *data, dtype_if_empty=object\n            )  # type:ignore[misc]\n        else:\n            self.obj = create_series_with_explicit_dtype(data, dtype_if_empty=object)"
  },
  {
    "id" : "ef6e696c-c393-4a8c-bc7b-d84865070fa1",
    "prId" : 36997,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36997#pullrequestreview-522960155",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91afac9d-1c50-4f98-8e2c-159721bd0ded",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the comments like you did above (i think in the csv reader)",
        "createdAt" : "2020-11-04T00:06:40Z",
        "updatedAt" : "2020-11-04T02:11:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ce25d169b214d401add5d493352384e661c50a7",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +114,118 @@            handles.close()\n            # close any fsspec-like objects\n            ioargs.close()\n    else:\n        return s"
  }
]