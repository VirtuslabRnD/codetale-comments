[
  {
    "id" : "a7bbd81b-e762-4095-acd5-0d95fc85c053",
    "prId" : 30145,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30145#pullrequestreview-330532600",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98150cd8-18f3-49b2-bd10-503307a098f2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "adding type annotations here would go a *long* way towards clarifying what things are",
        "createdAt" : "2019-12-11T13:16:05Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a57ec20c-a5a6-4a4c-8f36-c8af6d869d85",
        "parentId" : "98150cd8-18f3-49b2-bd10-503307a098f2",
        "authorId" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "body" : "Will do.",
        "createdAt" : "2019-12-11T13:20:26Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4434b82df5f2909c47aa89beb2f5a0aab14e621c",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +236,240 @@            for field in spec:\n                result = result[field]\n        else:\n            result = result[spec]\n"
  },
  {
    "id" : "a76196a7-7a73-4319-9031-0a266a6ec488",
    "prId" : 30145,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30145#pullrequestreview-332572343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "113b54db-e44c-4d73-acee-19bf9ff77c8c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is even more strange",
        "createdAt" : "2019-12-15T21:33:44Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2e2698a9-108d-4bad-821f-da9035209a27",
        "parentId" : "113b54db-e44c-4d73-acee-19bf9ff77c8c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if the tests don't fail then I am puzzled what exactly you are changing here",
        "createdAt" : "2019-12-15T21:34:07Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e2412f0d-1581-4b52-a469-6b1c7857396c",
        "parentId" : "113b54db-e44c-4d73-acee-19bf9ff77c8c",
        "authorId" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "body" : "This test fails (or are you talking about other tests?) when e.g. the nulls_fixtures is used. It will be a float then (float('NaN')). As a 'str' I also iterable (And valid according to the tests), I'm testing for this. Note that as the cast is a no-op at runtime I need to do the check here in order to satisfy our agreement this function always should return a List (Iterable according to the existing tests) \r\n\r\nIt was how I could make the existing tests pass, having stronger typing and the new test pass. ",
        "createdAt" : "2019-12-16T07:13:27Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "tags" : [
        ]
      },
      {
        "id" : "1b31e4f9-fb4d-48fd-9cc3-64ec61e3729d",
        "parentId" : "113b54db-e44c-4d73-acee-19bf9ff77c8c",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "Should this be if not `isinstance(result, list)` or should the return type of _pull_field be typed as Iterable?",
        "createdAt" : "2019-12-16T13:12:20Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "cebea2af-0269-4e9e-ad55-06effe412415",
        "parentId" : "113b54db-e44c-4d73-acee-19bf9ff77c8c",
        "authorId" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "body" : "Iâ€™ll change the return type to `Iterable` (`str` is valid and is not a list)",
        "createdAt" : "2019-12-16T13:39:35Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4434b82df5f2909c47aa89beb2f5a0aab14e621c",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +239,243 @@            result = result[spec]\n\n        if not isinstance(result, Iterable):\n            if pd.isnull(result):\n                result = []  # type: ignore"
  },
  {
    "id" : "3ed647c1-b764-4e99-99a7-e64fd6412059",
    "prId" : 30145,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30145#pullrequestreview-332892639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83f2557c-8f3c-4c50-88b2-d51aa9c1a498",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Should this just be `pd.isnull(result)`? The consequence of this being an isinstance check would be that all scalar values would return nothing right? \r\n\r\nI know there was some conversation around this before but I think should disambiguate between missing values and scalar values; the former is fine whereas the latter should raise a `TypeError`",
        "createdAt" : "2019-12-16T21:08:07Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "356aa6ea-cb57-48fa-b439-253cfbc33958",
        "parentId" : "83f2557c-8f3c-4c50-88b2-d51aa9c1a498",
        "authorId" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "body" : "You have a point. But should the `TypeError` be raised here then to make it more user friendly? Because otherwise the `TypeError` will be raised from \r\n\r\n```\r\n                recs = [\r\n                    nested_to_record(r, sep=sep, max_level=max_level)\r\n                    if isinstance(r, dict)\r\n                    else r\r\n                    for r in recs\r\n                ]\r\n```\r\n\r\nWhich is not very indicative  of what is wrong and more importantly where. It took me quite some time to find out in my data what went wrong and why as it can just happen in the middle of a 100mb file.",
        "createdAt" : "2019-12-16T21:17:03Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "tags" : [
        ]
      },
      {
        "id" : "b58591eb-8f86-41a2-9b59-914a5ae3aac0",
        "parentId" : "83f2557c-8f3c-4c50-88b2-d51aa9c1a498",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea I think can raise a TypeError here if not missing or Dict/List",
        "createdAt" : "2019-12-16T21:19:06Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b28901a0-0576-4309-95d4-283791d93030",
        "parentId" : "83f2557c-8f3c-4c50-88b2-d51aa9c1a498",
        "authorId" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "body" : "so I will do a check with `pd.isnull` and will check with `is_scalar`.",
        "createdAt" : "2019-12-16T21:20:49Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "tags" : [
        ]
      },
      {
        "id" : "0bee8634-5622-4303-a056-fb3e380fdf5f",
        "parentId" : "83f2557c-8f3c-4c50-88b2-d51aa9c1a498",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea I think that would be better",
        "createdAt" : "2019-12-16T21:22:38Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "b981c820-1ba9-4434-8b20-5ebc22426346",
        "parentId" : "83f2557c-8f3c-4c50-88b2-d51aa9c1a498",
        "authorId" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "body" : "*sigh* `str` is defined as a scalar. I'm not seeing away around to do `is_scalar(result) and not isinstance(result, Iterable)`. Or is there a better way?",
        "createdAt" : "2019-12-16T21:47:08Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "tags" : [
        ]
      },
      {
        "id" : "696a7768-fc90-482d-8cb6-14cc52d2319c",
        "parentId" : "83f2557c-8f3c-4c50-88b2-d51aa9c1a498",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "`if is_scalar(result) and pd.isnull(result)`?",
        "createdAt" : "2019-12-16T21:50:23Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ccb5bdca-e5e2-4166-ac15-b5803d9f5a6f",
        "parentId" : "83f2557c-8f3c-4c50-88b2-d51aa9c1a498",
        "authorId" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "body" : "when `pd_isnull(result) == true` I need to `result = []`. `pd_isnull` doesn't deal with Iterables :-). I have updated the PR with a suggestion.",
        "createdAt" : "2019-12-16T21:54:29Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4434b82df5f2909c47aa89beb2f5a0aab14e621c",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +239,243 @@            result = result[spec]\n\n        if not isinstance(result, Iterable):\n            if pd.isnull(result):\n                result = []  # type: ignore"
  },
  {
    "id" : "cfa9daeb-dba3-4145-baaf-53cc8c93eb11",
    "prId" : 30145,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30145#pullrequestreview-332951428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8124967-adfc-44ed-ac37-18d2d20a1efe",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you add a test case that this would hit?",
        "createdAt" : "2019-12-17T00:16:10Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4434b82df5f2909c47aa89beb2f5a0aab14e621c",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +243,247 @@                result = []  # type: ignore\n            else:\n                raise TypeError(\n                    f\"{js} has non iterable value {result} for path {spec}. \"\n                    \"Must be iterable or null.\""
  },
  {
    "id" : "31247544-12c4-47e2-ad21-76da94f2f6f9",
    "prId" : 30145,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30145#pullrequestreview-337326690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ece14ca1-e922-4c11-a2d7-90db55ce11f7",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Why do you need the `type: ignore` here?",
        "createdAt" : "2019-12-30T17:00:57Z",
        "updatedAt" : "2019-12-31T08:54:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "cddfb0a1-7769-4e93-a036-42d5bea630d7",
        "parentId" : "ece14ca1-e922-4c11-a2d7-90db55ce11f7",
        "authorId" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "body" : "See: https://github.com/pandas-dev/pandas/pull/30145#discussion_r358483282 and the thread above",
        "createdAt" : "2019-12-31T08:59:01Z",
        "updatedAt" : "2019-12-31T08:59:01Z",
        "lastEditedBy" : "def5b4e3-e998-4493-b52e-770521a1d6e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4434b82df5f2909c47aa89beb2f5a0aab14e621c",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +232,236 @@\n    def _pull_field(js: Dict[str, Any], spec: Union[List, str]) -> Iterable:\n        result = js  # type: ignore\n        if isinstance(spec, list):\n            for field in spec:"
  }
]