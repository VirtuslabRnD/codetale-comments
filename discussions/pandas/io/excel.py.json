[
  {
    "id" : "dc275af9-8b65-4914-95ca-cea729172fc5",
    "prId" : 4857,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f321819b-663e-4fde-aefe-11962915f405",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "@jmcnamara just want to bring this up again: you had mentioned that you preferred to go by columns whereas the other writers went by rows (or maybe the reverse) in order to get better performance. Are you able to do that with the current setup?\n",
        "createdAt" : "2013-09-16T21:51:38Z",
        "updatedAt" : "2013-09-22T22:43:13Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "17ba0668-e3a6-4120-a8de-6cff3a47166a",
        "parentId" : "f321819b-663e-4fde-aefe-11962915f405",
        "authorId" : "56bacb42-5a21-41c7-bce7-c4ce57a99717",
        "body" : "@jtratner I think that I'll have to leave that for a separate PR. \n\nIt is probably something that you or @jtratner could sort out more efficiently. Basically the `get_formatted_cells()` method in `format.py` returns cells in column order. Converting that to row order via `DataFrame.iterrows()` would increase enable xlsxwriter to increase it's performance by 2 and flatten its memory use.\n\nHowever, I don't know if there would be an equivalent loss of performance due to using something like `iterrows()`.\n\nAlso, the current xlsxwriter implementation is already x5 times faster than openpyxl and equivalent to xlwt so maybe that is enough for now.\n\nEither way it probably merits a separate discussion/PR.\n",
        "createdAt" : "2013-09-16T23:22:18Z",
        "updatedAt" : "2013-09-22T22:43:13Z",
        "lastEditedBy" : "56bacb42-5a21-41c7-bce7-c4ce57a99717",
        "tags" : [
        ]
      },
      {
        "id" : "3d4f9063-5bf2-400d-bf59-66870d0d2411",
        "parentId" : "f321819b-663e-4fde-aefe-11962915f405",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "If Xlsxwriter is more performant, then it should be first in the rotation\n(if it's installed)... fine to leave that for a separate issue though.\n",
        "createdAt" : "2013-09-17T00:30:52Z",
        "updatedAt" : "2013-09-22T22:43:13Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "a90953c9-c2e1-41f6-a0b2-979c10f7e936",
        "parentId" : "f321819b-663e-4fde-aefe-11962915f405",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "Also, @jmcnamara I'm hoping you'll be around to help me tweak things to\nallow Xlsxwriter to operate on rows rather than columns. (but I definitely\nget wanting to get this into the code base first)\n",
        "createdAt" : "2013-09-17T00:38:24Z",
        "updatedAt" : "2013-09-22T22:43:13Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "73f65619-d75c-48ea-83fd-92075b5daae3",
        "parentId" : "f321819b-663e-4fde-aefe-11962915f405",
        "authorId" : "56bacb42-5a21-41c7-bce7-c4ce57a99717",
        "body" : "@jtratner I'll definitely stick around and try to do some more work. :-)\n",
        "createdAt" : "2013-09-17T10:44:40Z",
        "updatedAt" : "2013-09-22T22:43:13Z",
        "lastEditedBy" : "56bacb42-5a21-41c7-bce7-c4ce57a99717",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0c290f4879a542b027b4c36a922f5ae2216ed5a",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +632,636 @@        return self.book.close()\n\n    def write_cells(self, cells, sheet_name=None, startrow=0, startcol=0):\n        # Write the frame cells using xlsxwriter.\n"
  },
  {
    "id" : "6801dc91-da65-4927-bcd5-8c2dc73caad8",
    "prId" : 4962,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d724fb4f-2385-4739-a6aa-cec69c721a63",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "can you add an if clause here:\n\n``` python\nif engine is not None and engine != 'xlrd':\n    raise ValueError(\"Unknown engine: %s\" % engine)\n```\n",
        "createdAt" : "2013-09-27T04:15:13Z",
        "updatedAt" : "2013-09-27T04:26:58Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "12b8c502-fd49-4768-8c2f-2efdad8c0d3e",
        "parentId" : "d724fb4f-2385-4739-a6aa-cec69c721a63",
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "Does it make sense to add that check in the `__init__` for ExcelFile instead?\n",
        "createdAt" : "2013-09-27T04:17:02Z",
        "updatedAt" : "2013-09-27T04:26:58Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      },
      {
        "id" : "ff11d78e-3ba5-4997-9f04-b8ece4fac997",
        "parentId" : "d724fb4f-2385-4739-a6aa-cec69c721a63",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "sure, that's fine.\n",
        "createdAt" : "2013-09-27T04:19:23Z",
        "updatedAt" : "2013-09-27T04:26:58Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9103322afa82fd27b7d960529f6e1bfd2111424b",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +92,96 @@    \n    engine = kwds.pop('engine', None)   \n        \n    return ExcelFile(io, engine=engine).parse(sheetname=sheetname, **kwds)\n"
  },
  {
    "id" : "c0ffa5af-6ba6-48d3-95da-b5bfcb4306a8",
    "prId" : 6934,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d43b1ed-f848-40c6-acc6-06cc97208040",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so this works, just doesn't handle decimal seconds right? is it appropriate to raise if you detect that? (can you even)?\n",
        "createdAt" : "2014-04-24T00:25:14Z",
        "updatedAt" : "2014-04-24T01:05:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f21fb9c2-077d-4687-a8ef-84843080468a",
        "parentId" : "1d43b1ed-f848-40c6-acc6-06cc97208040",
        "authorId" : "56bacb42-5a21-41c7-bce7-c4ce57a99717",
        "body" : "Yes, correct. xlrd in previous versions rounded the milliseconds into the seconds. It isn't possible to detect (at least not easily) since all dates and times are stored as floats (with no distinction).\n",
        "createdAt" : "2014-04-24T01:07:35Z",
        "updatedAt" : "2014-04-24T01:07:35Z",
        "lastEditedBy" : "56bacb42-5a21-41c7-bce7-c4ce57a99717",
        "tags" : [
        ]
      }
    ],
    "commit" : "01b3399a017a3c608900e81813296593b2f396ab",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +296,300 @@                                                          value.microsecond)\n                        else:\n                            # Use the xlrd <= 0.9.2 date handling.\n                            dt = xldate.xldate_as_tuple(value, epoch1904)\n"
  },
  {
    "id" : "a0575714-2687-4508-85ce-e58040109805",
    "prId" : 7565,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fd28680-4722-4c97-9a4d-9012f8078366",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is `is_compat` ONLY used here? if so, then just roll it in as a contained function (rather than have a separate one)\n",
        "createdAt" : "2014-09-17T14:50:54Z",
        "updatedAt" : "2014-09-18T03:41:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "66cb2b42-c4ae-4ed6-84c1-4ae45f175cfd",
        "parentId" : "0fd28680-4722-4c97-9a4d-9012f8078366",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "never mind I see where you use it again\n",
        "createdAt" : "2014-09-17T14:52:46Z",
        "updatedAt" : "2014-09-18T03:41:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "99d8835020202dd5d2af8a97627f03dc0a3b9f67",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +548,552 @@\n    def __init__(self, path, engine=None, **engine_kwargs):\n        if not openpyxl_compat.is_compat(major_ver=self.openpyxl_majorver):\n            raise ValueError('Installed openpyxl is not supported at this '\n                             'time. Use {0}.x.y.'"
  },
  {
    "id" : "ba93dd75-0cf6-4450-b872-356b258ae43f",
    "prId" : 7565,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de593170-b405-4e85-8e21-8d4b1bbf2ba3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does this need some of the methods in Openpyxl1Writer to raise on certain method calls? (e.g. if the style is presented)?\n",
        "createdAt" : "2014-09-17T14:52:00Z",
        "updatedAt" : "2014-09-18T03:41:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dd3af184-d000-43a1-b8c5-34ab35a78afb",
        "parentId" : "de593170-b405-4e85-8e21-8d4b1bbf2ba3",
        "authorId" : "0adf5d1c-2746-4e21-b8dd-8359626522f5",
        "body" : "I'm not sure. Could you give me an example?\n",
        "createdAt" : "2014-09-18T01:16:22Z",
        "updatedAt" : "2014-09-18T03:41:27Z",
        "lastEditedBy" : "0adf5d1c-2746-4e21-b8dd-8359626522f5",
        "tags" : [
        ]
      },
      {
        "id" : "40fc8114-3682-48f2-af2e-879ffdb39200",
        "parentId" : "de593170-b405-4e85-8e21-8d4b1bbf2ba3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "well is their is a cell.style what happens?\n",
        "createdAt" : "2014-09-18T01:18:46Z",
        "updatedAt" : "2014-09-18T03:41:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dcfd9b42-f1ca-47a4-8c0b-3be96fa84f0c",
        "parentId" : "de593170-b405-4e85-8e21-8d4b1bbf2ba3",
        "authorId" : "0adf5d1c-2746-4e21-b8dd-8359626522f5",
        "body" : "You mean a `cell` that the `cells` argument to the `ExcelWriter.write_cells()` method would yield? All of the writers must handle `cell.style` conforming to a certain structure, which, though not documented in the `ExcelWriter.write_cells()` doc string, can be inferred from `core.format.header_style`, `core.format.ExcelCell`, and various methods of `core.format.ExcelFormatter`, not to mention direct inspection of the concrete implementations of `ExcelWriter.write_cells()`.\n\nAre you asking why `_OpenpyxlWriter` subclasses `_OpenpyxlWriter1`, and maybe suggesting that it shouldn't?\n\nI feel like I'm missing the point of your question.\n",
        "createdAt" : "2014-09-18T01:38:01Z",
        "updatedAt" : "2014-09-18T03:41:27Z",
        "lastEditedBy" : "0adf5d1c-2746-4e21-b8dd-8359626522f5",
        "tags" : [
        ]
      },
      {
        "id" : "cacb3dda-20ff-4c46-8fe4-61eee3bda01c",
        "parentId" : "de593170-b405-4e85-8e21-8d4b1bbf2ba3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no the subclassing is fine\nwhat I mean is their a situation where a user can try to write a style that openpyxl cannot handle except in version 2 ; so if they have a v 1 write then it should raise (that it's not implemented by openpyxl)\n",
        "createdAt" : "2014-09-18T01:48:39Z",
        "updatedAt" : "2014-09-18T03:41:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "458f986d-2874-45e7-95e9-3ac3abcc9cd9",
        "parentId" : "de593170-b405-4e85-8e21-8d4b1bbf2ba3",
        "authorId" : "0adf5d1c-2746-4e21-b8dd-8359626522f5",
        "body" : "Ah. Got it.\n\nYes, there are situations in which that could happen. For example, v2 recognizes `'size'` and `'sz'` for the font size parameter, but v1 only knows about `'size'`, so `{'font': {'sz': 16}}` would be a valid style specification for v2, not v1. Here's what happens in that case.\n\nFor v2:\n\n``` python\n>>> import pandas as pd\n>>> style_dict = {'font': {'sz': 16}}\n>>> w = pd.io.excel.ExcelWriter('openpyxl2.xlsx')\n>>> style_native = w._convert_to_style_kwargs(style_dict)\n>>> style_native\n{'font': Font(sz=16.0, u='none')}\n```\n\nFor v1:\n\n``` python\n>>> import pandas as pd\n>>> style_dict = {'font': {'sz': 16}}\n>>> w = pd.io.excel.ExcelWriter('openpyxl1.xlsx')\n>>> style_native = w._convert_to_style(style_dict)\n>>> style_native\n'Calibri':11:False:False:False:False:'none':False:'FF000000':'none':0:'FFFFFFFF':'FF000000':'none':'FF000000':'none':'FF000000':'none':'FF000000':'none':'FF000000':'none':'FF000000':0:'none':'FF000000':'none':'FF000000':'none':'FF000000':'none':'FF000000':'none':'FF000000':'general':'bottom':0:False:False:0:'General':0:'inherit':'inherit'\n```\n\nThe v1 writer silently ignores the `'sz'` specification. Should this raise instead?\n",
        "createdAt" : "2014-09-18T02:32:10Z",
        "updatedAt" : "2014-09-18T03:41:27Z",
        "lastEditedBy" : "0adf5d1c-2746-4e21-b8dd-8359626522f5",
        "tags" : [
        ]
      },
      {
        "id" : "c4860464-853d-43f9-9e69-6104a2e81201",
        "parentId" : "de593170-b405-4e85-8e21-8d4b1bbf2ba3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ideally u could raise or want to avoid confusion - if I can do it in a fairly generic way\n\nv1 should work the way it works now (and anything else is an error)\n\nno biggie if this is not possible - just maybe a doc warning \n\nand FYI / I would make the v2 support experimental (put in the doc string) - if haven't already - thT way a bit of license to change in the future if needed\n",
        "createdAt" : "2014-09-18T02:37:02Z",
        "updatedAt" : "2014-09-18T03:41:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "09eab46a-1d32-423e-b012-99f3f3e3f2a8",
        "parentId" : "de593170-b405-4e85-8e21-8d4b1bbf2ba3",
        "authorId" : "0adf5d1c-2746-4e21-b8dd-8359626522f5",
        "body" : "It looks like there are some changes even between minor versions of v1 (e.g. the border interface) that would make such an exercise quite tedious, and perhaps even futile. Let's leave it be for now with a doc warning. If it wants more development later, we might think about moving in the direction of accepting native style objects rather than building in more and more abstraction, validation, and mapping; make the compatibility layer thinner, not thicker.\n\nIn which doc string shall I place the \"experimental\" flag? `_Openpyxl2Writer`? doc/source/v0.15.0.txt? Other? All of the above?\n",
        "createdAt" : "2014-09-18T03:01:01Z",
        "updatedAt" : "2014-09-18T03:41:27Z",
        "lastEditedBy" : "0adf5d1c-2746-4e21-b8dd-8359626522f5",
        "tags" : [
        ]
      },
      {
        "id" : "d15eaf01-9781-4ffb-8a2f-18e94f982dea",
        "parentId" : "de593170-b405-4e85-8e21-8d4b1bbf2ba3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "doc string, release notes, and io.rst\n",
        "createdAt" : "2014-09-18T03:05:34Z",
        "updatedAt" : "2014-09-18T03:41:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "99d8835020202dd5d2af8a97627f03dc0a3b9f67",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +651,655 @@\nclass _OpenpyxlWriter(_Openpyxl1Writer):\n    engine = 'openpyxl'\n\nregister_writer(_OpenpyxlWriter)"
  },
  {
    "id" : "ebdb78e4-bfbb-4638-98e4-256d0d0f6afa",
    "prId" : 7565,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f579c463-511b-4591-bb7e-fd53406add17",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "@neirbowj took a look at this a second time and realized I'd missed this - `style` isn't defined here - what is it supposed to be?\n",
        "createdAt" : "2014-09-21T19:45:10Z",
        "updatedAt" : "2014-09-21T19:45:10Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "0e3f1161-7ece-4355-9236-b92d8443c70d",
        "parentId" : "f579c463-511b-4591-bb7e-fd53406add17",
        "authorId" : "0adf5d1c-2746-4e21-b8dd-8359626522f5",
        "body" : "Good catch. The logic in the v1 engine overlays the style information from the first cell in a merged set with the existing style in worksheet cells, and that test is effectively checking to see if the cell being written to the worksheet defines style information. In the v2 writer, we use `style_kwargs` instead of `style` for the in-loop style data, to make it clear that it isn't yet an OpenPyxl `Style` object. It looks like this is a case where I missed converting `style` to `style_kwargs`.\n",
        "createdAt" : "2014-09-22T01:40:54Z",
        "updatedAt" : "2014-09-22T01:40:54Z",
        "lastEditedBy" : "0adf5d1c-2746-4e21-b8dd-8359626522f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "99d8835020202dd5d2af8a97627f03dc0a3b9f67",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +707,711 @@                # Excel requires that the format of the first cell in a merged\n                # range is repeated in the rest of the merged range.\n                if style:\n                    first_row = startrow + cell.row + 1\n                    last_row = startrow + cell.mergestart + 1"
  },
  {
    "id" : "83808420-6ac8-442e-ab8d-3b8335ff92b3",
    "prId" : 9450,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4c75bf8-50f3-42a6-bcc0-d4f374ddf3d3",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "You should also update the `Returns` section of the docstring with this info\n",
        "createdAt" : "2015-02-22T19:19:27Z",
        "updatedAt" : "2015-02-22T21:35:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8a28938fab0ba53f300ee28c780b3d0a637ecf1",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +86,90 @@        \n        str|int -> DataFrame is returned.\n        list|None -> Dict of DataFrames is returned, with keys representing sheets.\n               \n        Available Cases"
  },
  {
    "id" : "460497e8-530a-47ed-9ef5-acd5fd792875",
    "prId" : 10376,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dde2dc27-985c-46ff-b085-d8a2a3a1c526",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what about `sheet.nrows==1` (and its the header)? do we construct an empty frame with the correct columns?\n",
        "createdAt" : "2015-06-18T13:01:06Z",
        "updatedAt" : "2015-06-20T16:11:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "01bfe489-f04c-46a7-8448-e19dc43eb95a",
        "parentId" : "dde2dc27-985c-46ff-b085-d8a2a3a1c526",
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "Yes, I added a test for this case and it works correctly already.\n",
        "createdAt" : "2015-06-18T13:09:00Z",
        "updatedAt" : "2015-06-20T16:11:04Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      },
      {
        "id" : "4540d820-3059-47f1-8d08-b8041008d5fe",
        "parentId" : "dde2dc27-985c-46ff-b085-d8a2a3a1c526",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yep, saw that below. thanks.\n",
        "createdAt" : "2015-06-18T13:15:14Z",
        "updatedAt" : "2015-06-20T16:11:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "92203096ceba0cfea72bb28d434f34f58e68bb0a",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +424,428 @@                return DataFrame()\n\n            if header is not None:\n                data[header] = _trim_excel_header(data[header])\n"
  },
  {
    "id" : "e47ad375-839c-425e-8086-99cba033ec20",
    "prId" : 16442,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16442#pullrequestreview-39728034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2383ccf6-b078-4cdb-b3ce-6a8149961f51",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add ``sheetname (DEPRECATED)`` as well",
        "createdAt" : "2017-05-23T10:38:53Z",
        "updatedAt" : "2017-05-23T16:35:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "05b9ce88-ac5b-43f3-8113-e752ff759c37",
        "parentId" : "2383ccf6-b078-4cdb-b3ce-6a8149961f51",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "There's also the `deprecated` sphinx directive. I don't see any uses of that, but we can give it a shot here. I think it'd be like\r\n\r\n```\r\nsheetname : string, int, mixed list of strings/ints, or None, default 0\r\n\r\n    .. deprecated:: 0.21.0\r\n       Use `sheet_name` instead\r\n\r\nsheet_name : string, int, mixed list of strings/ints, or None, default 0\r\n```",
        "createdAt" : "2017-05-23T12:40:08Z",
        "updatedAt" : "2017-05-23T16:35:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c6da132e9f0a1c4c42a03aa12effa167aeab218",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +50,54 @@    file could be file://localhost/path/to/workbook.xlsx\nsheet_name : string, int, mixed list of strings/ints, or None, default 0\n\n    Strings are used for sheet names, Integers are used in zero-indexed\n    sheet positions."
  },
  {
    "id" : "0984b56d-9811-4b2c-be35-bfc215cb988d",
    "prId" : 21251,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21251#pullrequestreview-126451191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d36af6f-dcab-4e6c-9162-f55b83e33123",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versionadded",
        "createdAt" : "2018-05-29T23:57:18Z",
        "updatedAt" : "2018-06-01T17:24:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "85693472-36a0-4f32-b9c7-990741507dd0",
        "parentId" : "8d36af6f-dcab-4e6c-9162-f55b83e33123",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Do you think it's worth adding this class to the API? Would be a little strange as its an ABCMeta but on the flip side may still be beneficial for those looking further at it",
        "createdAt" : "2018-05-30T00:05:07Z",
        "updatedAt" : "2018-06-01T17:24:06Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "867b81b0-e2d7-41b8-bef0-daf595ea1a71",
        "parentId" : "8d36af6f-dcab-4e6c-9162-f55b83e33123",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> Do you think it's worth adding this class to the API?\r\n\r\nCan't you just do `from pandas.io.excel import ExcelWriter` ?",
        "createdAt" : "2018-06-06T07:33:24Z",
        "updatedAt" : "2018-06-06T07:33:24Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "a29612a0-d1a0-42eb-9590-fd951529682d",
        "parentId" : "8d36af6f-dcab-4e6c-9162-f55b83e33123",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "It's not the import mechanism I was referring to as much as the documentation - this class is not part of the doc build",
        "createdAt" : "2018-06-06T15:49:21Z",
        "updatedAt" : "2018-06-06T15:49:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f7f53075-ff40-41e0-8ed0-753c7a3eb12b",
        "parentId" : "8d36af6f-dcab-4e6c-9162-f55b83e33123",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "@WillAyd : Ah, thanks for clarifying.  I don't see why not then, but let's see what @jreback has to say about that.",
        "createdAt" : "2018-06-06T16:18:17Z",
        "updatedAt" : "2018-06-06T16:18:17Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0c5b69bb70442295db06528a3719e4b532afbc0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +806,810 @@        (e.g. 'YYYY-MM-DD HH:MM:SS')\n    mode : {'w' or 'a'}, default 'w'\n        File mode to use (write or append).\n\n    .. versionadded:: 0.24.0"
  },
  {
    "id" : "ac4a814b-462d-49f2-83d5-2af4c1467474",
    "prId" : 23544,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23544#pullrequestreview-173069821",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62dc4487-9fda-4b49-bf40-dd503bbd1691",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "tested?",
        "createdAt" : "2018-11-08T13:16:06Z",
        "updatedAt" : "2018-11-11T10:39:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9ce5716f-4227-4022-9574-5dc6c7d512e7",
        "parentId" : "62dc4487-9fda-4b49-bf40-dd503bbd1691",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Yes, I added a test for this (`test_usecols_excel_range_str_invalid`).",
        "createdAt" : "2018-11-08T17:01:00Z",
        "updatedAt" : "2018-11-11T10:39:23Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "a36aa76e4cef63ca969b322591e0671a0f852664",
    "line" : 201,
    "diffHunk" : "@@ -1,1 +721,725 @@\n        if cp < ord(\"A\") or cp > ord(\"Z\"):\n            raise ValueError(\"Invalid column name: {x}\".format(x=x))\n\n        index = index * 26 + cp - ord(\"A\") + 1"
  },
  {
    "id" : "8760b1a7-849d-4944-9ed1-a95af2c9e159",
    "prId" : 23544,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23544#pullrequestreview-173702431",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c504dde-a597-4493-9dbd-ddc2d4d4b86d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have sufficient testing for ints\r\n\r\nthis last integer for a scalar seems a very odd thing to do\r\nis this tested?",
        "createdAt" : "2018-11-10T04:29:59Z",
        "updatedAt" : "2018-11-11T10:39:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8fec8bed-be3f-4c69-a20b-94c7175e78be",
        "parentId" : "0c504dde-a597-4493-9dbd-ddc2d4d4b86d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should deprecate this",
        "createdAt" : "2018-11-10T04:30:32Z",
        "updatedAt" : "2018-11-11T10:39:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c398fe55-b703-404a-a3b2-6016974ce286",
        "parentId" : "0c504dde-a597-4493-9dbd-ddc2d4d4b86d",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Coverage for `usecols` is quite robust and addresses all of the different inputs.\r\n\r\n> should deprecate this\r\n\r\nThat's fair.  It isn't something that is part of the `usecols` paradigm for `read_csv` and is a little more magical than Excel-specific.\r\n\r\nI can do that as a follow-up.",
        "createdAt" : "2018-11-10T10:23:21Z",
        "updatedAt" : "2018-11-11T10:39:23Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "4912a2d7-dfbe-43f9-86d0-c8cf7985b6bf",
        "parentId" : "0c504dde-a597-4493-9dbd-ddc2d4d4b86d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "great",
        "createdAt" : "2018-11-11T15:24:52Z",
        "updatedAt" : "2018-11-11T15:40:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a36aa76e4cef63ca969b322591e0671a0f852664",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +97,101 @@    * If int, then indicates last column to be parsed\n    * If string, then indicates comma separated list of Excel column letters\n      and column ranges (e.g. \"A:E\" or \"A,C,E:F\"). Ranges are inclusive of\n      both sides.\n    * If list of ints, then indicates list of column numbers to be parsed."
  },
  {
    "id" : "f1d63b47-cb39-42e2-a80f-3e339d466532",
    "prId" : 23661,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23661#pullrequestreview-174374718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14ef239a-1a39-45ea-9743-693af2c24f1c",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Do we have a test where `offset` is equal to `len(data)`? Just want to make sure we're not off by one, and it's not clear to be that we're not (without having read the code).",
        "createdAt" : "2018-11-13T12:33:58Z",
        "updatedAt" : "2018-11-13T12:34:23Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2e96cc35-289e-4af7-8ecd-8dab17ba1e04",
        "parentId" : "14ef239a-1a39-45ea-9743-693af2c24f1c",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> What are the changes to the excel file?\r\n\r\nTo add a test that addresses your question:\r\n\r\n> Do we have a test where offset is equal to len(data)?\r\n\r\nDon't worry, I accounted for the off-by-one 😉 ",
        "createdAt" : "2018-11-13T13:59:57Z",
        "updatedAt" : "2018-11-13T13:59:57Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "13abef88b59ded1f7ad58d8ae5600b724c7f99b5",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +637,641 @@                # Check if we have an empty dataset\n                # before trying to collect data.\n                if offset < len(data):\n                    for col in index_col:\n                        last = data[offset][col]"
  },
  {
    "id" : "ecef8f6d-acdd-45c8-8236-e6c05240cef1",
    "prId" : 24423,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24423#pullrequestreview-188134710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "560e688d-a7e1-4c99-90e1-5a47a5d81d95",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "were these just missing?",
        "createdAt" : "2018-12-27T16:48:18Z",
        "updatedAt" : "2018-12-27T16:48:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "96b2e1ec-973d-42c8-b111-10d31e1af2f0",
        "parentId" : "560e688d-a7e1-4c99-90e1-5a47a5d81d95",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Also somewhat of a misleading diff but the existing code base has different signatures for `parse` and `_parse_excel`. When I moved the latter to be part of the reader class and renamed to simply `parse` git picked it up the different signatures in the diff.\r\n\r\nI didn't bother to align the signatures here but certainly can as well",
        "createdAt" : "2018-12-27T16:56:00Z",
        "updatedAt" : "2018-12-27T16:56:00Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "5ec29179-919d-44eb-aa40-2891f4e3a2f0",
        "parentId" : "560e688d-a7e1-4c99-90e1-5a47a5d81d95",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Sorry if this is a duplicate (can't see my previous response?) but the diff here is somewhat misleading. Previously there was a `parse` and `_parse_excel` function. With the refactor, I moved `_parse_excel` to the private reader class but simply named it `parse`.\r\n\r\nGit is mixing up the two `parse` functions, basically assuming that the existing one for the `ExcelFile` class is brand new (which it wasn't) and is comparing the reader's implementation to the existing `ExcelFile` class function. The signatures weren't aligned hence this small diff.\r\n\r\nI just moved the code without any change but can look at aligning signatures if you'd like",
        "createdAt" : "2018-12-27T17:01:09Z",
        "updatedAt" : "2018-12-27T17:01:09Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "607dbe5aae975cc3f5f4b53a67759e0ba5d7d6b2",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +421,425 @@              usecols=None,\n              squeeze=False,\n              dtype=None,\n              true_values=None,\n              false_values=None,"
  },
  {
    "id" : "765fa43b-cd4e-45e7-a8a1-b282c555fa66",
    "prId" : 24423,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24423#pullrequestreview-188374490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41b6caa3-ed6d-417b-a19f-34c2a089cba0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we now renove the kwds?",
        "createdAt" : "2018-12-27T16:48:31Z",
        "updatedAt" : "2018-12-27T16:48:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3062912b-03b3-47c5-8411-637fa7ffbe5c",
        "parentId" : "41b6caa3-ed6d-417b-a19f-34c2a089cba0",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Will double check. There is one branch where these would get used and dispatched to the `TextParser`, though maybe that is dead code",
        "createdAt" : "2018-12-27T16:58:43Z",
        "updatedAt" : "2018-12-27T16:58:44Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "0242e83e-8d22-4853-9cf9-843ba27f077a",
        "parentId" : "41b6caa3-ed6d-417b-a19f-34c2a089cba0",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "`**kwds` is passed through `TextParser` to the Python parser in `parsers.py`.\r\n\r\nThis is definitely not dead code, so I am very wary of removing this.  I think some more work can be done to better align the signature `read_excel` with that of `read_csv` (in the interest of creating a more unified data IO API)\r\n\r\nIMO we should refrain from removing it (that would be an API IMO), especially as there is enough happening with the refactor.",
        "createdAt" : "2018-12-28T08:53:30Z",
        "updatedAt" : "2018-12-28T08:53:31Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "4c0db324-fba4-4622-86bb-5f7060b4f51e",
        "parentId" : "41b6caa3-ed6d-417b-a19f-34c2a089cba0",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea after taking another look agreed with @gfyoung here. I think it's worth aligning the signatures of the different parse calls within the module and potentially removing keyword args if possible (I'm not actually sure what keywords would be applicable here) but would prefer to do in a separate PR since it would be potentially API breaking",
        "createdAt" : "2018-12-28T21:48:11Z",
        "updatedAt" : "2018-12-28T21:48:11Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "607dbe5aae975cc3f5f4b53a67759e0ba5d7d6b2",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +435,439 @@              convert_float=True,\n              mangle_dupe_cols=True,\n              **kwds):\n\n        _validate_header_arg(header)"
  },
  {
    "id" : "fe1b5471-6bda-4e56-a661-6ddaeec72976",
    "prId" : 24829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24829#pullrequestreview-194217219",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca23b205-dc7f-4714-81a1-3a0bf23486e7",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Note that I changed this condition slightly to remove the `not isinstance(filepath_or_buffer, xlrd.Book)` as it was unnecessary given the preceding statement",
        "createdAt" : "2019-01-18T18:05:54Z",
        "updatedAt" : "2019-01-24T17:32:17Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "18dd6ea39712dff0a53822a3dfd5f2981deebebf",
    "line" : 192,
    "diffHunk" : "@@ -1,1 +569,573 @@        if isinstance(filepath_or_buffer, xlrd.Book):\n            self.book = filepath_or_buffer\n        elif hasattr(filepath_or_buffer, \"read\"):\n            # N.B. xlrd.Book has a read attribute too\n            if hasattr(filepath_or_buffer, 'seek'):"
  }
]