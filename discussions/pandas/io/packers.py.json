[
  {
    "id" : "78091a25-a1af-4f26-b869-49f71ba246c7",
    "prId" : 6745,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1f2ff93-5f87-4ba9-a77f-25eaddd54167",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "In theory this would fail if duplicate items (prob not tested nor likely though)\n",
        "createdAt" : "2014-04-18T23:34:44Z",
        "updatedAt" : "2014-04-25T13:50:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1da304a3-fb5c-4b86-88c9-886d96aa32e3",
        "parentId" : "f1f2ff93-5f87-4ba9-a77f-25eaddd54167",
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "There were several places like this, all of which were refactored to be functionally equivalent, whenever old code would fail, new code should fail too. I figured that fixing non-trivial duplicate columns issues is better done in separate PRs, this one is already huge.\n",
        "createdAt" : "2014-04-19T07:47:24Z",
        "updatedAt" : "2014-04-25T13:50:55Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "3a4b192d-41af-4b96-9b09-80b72f326709",
        "parentId" : "f1f2ff93-5f87-4ba9-a77f-25eaddd54167",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "agreed\n",
        "createdAt" : "2014-04-19T08:22:27Z",
        "updatedAt" : "2014-04-25T13:50:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f51235aef9bbb50632b569d9e0c104816e5e31a0",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +486,490 @@            return make_block(values=values,\n                              klass=getattr(internals, b['klass']),\n                              placement=axes[0].get_indexer(b['items']))\n\n        blocks = [create_block(b) for b in obj['blocks']]"
  },
  {
    "id" : "18a83647-d8b7-4ae7-a0fe-f33b22f8c283",
    "prId" : 9783,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21644c48-e3f2-4a80-a9f6-0737616093d4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, no longer need to encode? (honestly I don't remember why I did that in the first place).\n",
        "createdAt" : "2015-04-02T20:44:03Z",
        "updatedAt" : "2015-04-02T20:44:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9092ebcf-b762-4e60-bef9-ecc1eb6cfdf2",
        "parentId" : "21644c48-e3f2-4a80-a9f6-0737616093d4",
        "authorId" : "756724d5-7da1-49b1-b97c-5caab0c27186",
        "body" : "Actually, I moved the encode higher up to line 237.  For some reason, type(values) was unicode.  Both zlib.decompress and blosc.decompress do not take unicode and only accept encoded strings.\n",
        "createdAt" : "2015-04-03T01:37:41Z",
        "updatedAt" : "2015-04-03T01:37:41Z",
        "lastEditedBy" : "756724d5-7da1-49b1-b97c-5caab0c27186",
        "tags" : [
        ]
      }
    ],
    "commit" : "702be31ec71b2fe4ec40b72b9bc06804fd1a7373",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +248,252 @@\n    # from a string\n    return np.fromstring(values, dtype=dtype)\n\n"
  },
  {
    "id" : "71925dae-8f0e-4ce3-9a10-665b6db11b7f",
    "prId" : 10527,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7805fac0-fa1d-41f9-89f1-a833c3fcf050",
        "parentId" : null,
        "authorId" : "e2c9166e-93f5-4095-86da-e3b563dcaa2b",
        "body" : "@jreback Is it better to add `locs` (like it is right now) so that new `msgpack` can be decoded in older versions, or replace `items` with `locs` in `encode()` so that the encoded `msgpack` is smaller?\n",
        "createdAt" : "2015-07-17T13:22:17Z",
        "updatedAt" : "2015-07-18T05:02:49Z",
        "lastEditedBy" : "e2c9166e-93f5-4095-86da-e3b563dcaa2b",
        "tags" : [
        ]
      },
      {
        "id" : "b617099a-a273-4251-a79a-7bf55c9891f4",
        "parentId" : "7805fac0-fa1d-41f9-89f1-a833c3fcf050",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no, like you have it now is ok. for back-compat we can only add attributes (and can't change the meaning at all). So this is how I wanted it. The new code will decode using `.locs` as that avoids the duplicates problem, and can read the older msgpacks. This actually also is forward-compat in that a current version can be read by an older version (so this is the best case scenario). We don't have a tests for forward-compat, but you can manually verify (as would need the older code to run in the tests which is 'odd').\n",
        "createdAt" : "2015-07-17T13:33:22Z",
        "updatedAt" : "2015-07-18T05:02:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d4ad028d-01a7-457c-8cba-833ff9cc8545",
        "parentId" : "7805fac0-fa1d-41f9-89f1-a833c3fcf050",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, you were looking at size. Well that is a trivial addition to size (this is one array per block, almost negligble). All that said I think we should remove this in the future (e.g. remove the forward compat, e.g. just use `.items` and just use `.locs`). So pls create an issue and I'll it for the future to do this.\n",
        "createdAt" : "2015-07-17T13:35:10Z",
        "updatedAt" : "2015-07-18T05:02:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed775bc5dd6771c492bf0b3c918a768f60835cf9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +358,362 @@                    'axes': data.axes,\n                    'blocks': [{'items': data.items.take(b.mgr_locs),\n                                'locs': b.mgr_locs.as_array,\n                                'values': convert(b.values),\n                                'shape': b.values.shape,"
  },
  {
    "id" : "512f1baa-dee1-48a4-9a35-f0851db6dba9",
    "prId" : 10686,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1435a622-f60e-417b-bf40-92e930b30ee3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is `use_bin_type=1` here but 0 below?\n",
        "createdAt" : "2015-07-29T12:30:00Z",
        "updatedAt" : "2015-08-18T00:41:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4804f53e-ffe0-44ff-82c5-4494745a322c",
        "parentId" : "1435a622-f60e-417b-bf40-92e930b30ee3",
        "authorId" : "e2c9166e-93f5-4095-86da-e3b563dcaa2b",
        "body" : "Good catch.  I will change the other one to 1.\n",
        "createdAt" : "2015-07-30T03:28:44Z",
        "updatedAt" : "2015-08-18T00:41:06Z",
        "lastEditedBy" : "e2c9166e-93f5-4095-86da-e3b563dcaa2b",
        "tags" : [
        ]
      },
      {
        "id" : "969a5bd7-798c-4766-b55e-0492da2b4d75",
        "parentId" : "1435a622-f60e-417b-bf40-92e930b30ee3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what do these new args mean anyhow?\n",
        "createdAt" : "2015-07-30T15:15:32Z",
        "updatedAt" : "2015-08-18T00:41:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c055aeb1-ef5e-426f-8d79-7baa26dcf73e",
        "parentId" : "1435a622-f60e-417b-bf40-92e930b30ee3",
        "authorId" : "e2c9166e-93f5-4095-86da-e3b563dcaa2b",
        "body" : "`use_bin_type` is for a [new binary format](https://github.com/msgpack/msgpack/blob/master/spec.md#formats-bin); [str 8](https://github.com/msgpack/msgpack/blob/master/spec.md#formats-str) was introduced at the same time, so that arg enables both, though they needn't be linked.  I think it's good to differentiate binary and strings, since in python there is a distinction.  In PY2 you wouldn't be able to round-trip `str`--which is really bytes--using utf 16 or utf 32 encoding without that enabled.  `autoreset` is not new.  I don't know if the omission from `packers` was intentional or not.\n",
        "createdAt" : "2015-07-30T15:45:27Z",
        "updatedAt" : "2015-08-18T00:41:06Z",
        "lastEditedBy" : "e2c9166e-93f5-4095-86da-e3b563dcaa2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c3da7f0dc67727590b9bdccd40a56e10fc58341",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +566,570 @@def pack(o, default=encode,\n         encoding='latin1', unicode_errors='strict', use_single_float=False,\n         autoreset=1, use_bin_type=1):\n    \"\"\"\n    Pack an object and return the packed bytes."
  }
]