[
  {
    "id" : "e70342c3-bc85-4725-a201-bbb9997084b6",
    "prId" : 10649,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2882b8f1-09e6-4d94-b365-dc233a3126b6",
        "parentId" : null,
        "authorId" : "d0080aab-a8b1-4e6c-b4d4-d9cbccfb466e",
        "body" : "You can also do `compression = req.headers['Content-Encoding']` here, if it's being served as a gzip encoded.\n",
        "createdAt" : "2015-07-22T14:26:44Z",
        "updatedAt" : "2015-07-24T13:27:57Z",
        "lastEditedBy" : "d0080aab-a8b1-4e6c-b4d4-d9cbccfb466e",
        "tags" : [
        ]
      },
      {
        "id" : "ecbe037e-46c7-4056-9e30-5c060daf7611",
        "parentId" : "2882b8f1-09e6-4d94-b365-dc233a3126b6",
        "authorId" : "8905a4e5-fb85-4ec6-a2cc-f3d35a89a2ce",
        "body" : "Yeah, that's a great idea.  I couldn't set a Content-Encoding header on a file in github, but I can in s3, so I'll add that code in and a new test.\n",
        "createdAt" : "2015-07-22T15:45:56Z",
        "updatedAt" : "2015-07-24T13:27:57Z",
        "lastEditedBy" : "8905a4e5-fb85-4ec6-a2cc-f3d35a89a2ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "a92bd760797c2bb63041e46f7ab6ab74f9521869",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +142,146 @@\n    if _is_url(filepath_or_buffer):\n        req = _urlopen(str(filepath_or_buffer))\n        if compression == 'infer':\n            content_encoding = req.headers.get('Content-Encoding', None)"
  },
  {
    "id" : "06115a48-035a-4bc8-b375-29d0ad3faa40",
    "prId" : 20394,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20394#pullrequestreview-104791837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57952950-af48-4cba-a80d-be8579905c91",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I personally like this location.  I would keep it here.",
        "createdAt" : "2018-03-18T10:07:08Z",
        "updatedAt" : "2018-03-22T11:48:14Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd8e6f4cf63eb0b4cdd7255b9fbed9f35463b42",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +429,433 @@\n\nclass BytesZipFile(ZipFile, BytesIO):\n    \"\"\"\n    Wrapper for standard library class ZipFile and allow the returned file-like"
  },
  {
    "id" : "18cb037b-f896-44b9-94c2-eb8911800423",
    "prId" : 20394,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20394#pullrequestreview-105309154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30946382-1607-42c2-bc6e-26f3483451d0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a little bit more to this class doc-strings. e.g. why its needed.",
        "createdAt" : "2018-03-20T00:05:17Z",
        "updatedAt" : "2018-03-22T11:48:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "842e61f4-fb45-49b3-9c5b-71f585e1b3e2",
        "parentId" : "30946382-1607-42c2-bc6e-26f3483451d0",
        "authorId" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "body" : "added. we currently don't have ability to write zip compressed pickle, json, csv, only read them. standard library ZipFile isn't designed exactly to produce a writable file handle, hence the custom class.",
        "createdAt" : "2018-03-20T11:33:32Z",
        "updatedAt" : "2018-03-22T11:48:14Z",
        "lastEditedBy" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd8e6f4cf63eb0b4cdd7255b9fbed9f35463b42",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +429,433 @@\n\nclass BytesZipFile(ZipFile, BytesIO):\n    \"\"\"\n    Wrapper for standard library class ZipFile and allow the returned file-like"
  },
  {
    "id" : "5ff0bdbc-e141-4d43-9f6e-c2b789e0edb0",
    "prId" : 21144,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21144#pullrequestreview-123537481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "920b844f-f5ac-47d1-b1da-7c0b68fd5ad6",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Can we add tests and a `whatsnew` for this?",
        "createdAt" : "2018-05-21T06:50:13Z",
        "updatedAt" : "2018-05-29T10:40:24Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "08390fd8-86f3-441a-be0a-cf98e7dff0eb",
        "parentId" : "920b844f-f5ac-47d1-b1da-7c0b68fd5ad6",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Also, because you are modifying the default behavior, I'm not sure if we need a deprecation cycle for this (to be safe, we should I would imagine).",
        "createdAt" : "2018-05-21T06:51:21Z",
        "updatedAt" : "2018-05-29T10:40:24Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "ea93700e-4264-453e-bd6b-343c7c45ef47",
        "parentId" : "920b844f-f5ac-47d1-b1da-7c0b68fd5ad6",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no this is a bug",
        "createdAt" : "2018-05-21T10:49:13Z",
        "updatedAt" : "2018-05-29T10:40:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e14dad3f-0548-448d-9dfc-cf63c1c4ecdd",
        "parentId" : "920b844f-f5ac-47d1-b1da-7c0b68fd5ad6",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Fair enough, though tests and `whatsnew` are still needed (just to be clear).",
        "createdAt" : "2018-05-21T10:50:31Z",
        "updatedAt" : "2018-05-29T10:40:24Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "9494f2db-6e3e-48f7-9aa2-d565d82cfd9a",
        "parentId" : "920b844f-f5ac-47d1-b1da-7c0b68fd5ad6",
        "authorId" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "body" : "thanks. added whatsnew and tests.",
        "createdAt" : "2018-05-25T23:41:10Z",
        "updatedAt" : "2018-05-29T10:40:24Z",
        "lastEditedBy" : "34a86a6a-3d79-42bc-a1d1-8da4b8916a25",
        "tags" : [
        ]
      }
    ],
    "commit" : "974b063568b8cdebd20290dfb5ddbc0348ac3e68",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +441,445 @@        if mode in ['wb', 'rb']:\n            mode = mode.replace('b', '')\n        super(BytesZipFile, self).__init__(file, mode, compression, **kwargs)\n\n    def write(self, data):"
  },
  {
    "id" : "a3a31949-ad68-4362-8401-e01ff8267f74",
    "prId" : 25886,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25886#pullrequestreview-219410594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "261820a7-754b-4a08-a84d-fbb305551f9f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we remove the need for this class?",
        "createdAt" : "2019-03-26T21:48:03Z",
        "updatedAt" : "2019-03-28T18:57:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bcb240c5-b333-4495-b132-17dbc0022548",
        "parentId" : "261820a7-754b-4a08-a84d-fbb305551f9f",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "<strike>Nope, done.</strike>\r\n\r\nNot entirely (note how it drops the \"encoding\" kwarg, which doesn't happen if we pass it straight to `csv.reader`), and it seemed to cause some weird failures.\r\n\r\nWe could just move it elsewhere though since it isn't really that \"common\" in the IO directory.  Or just leave as is for now.",
        "createdAt" : "2019-03-26T23:10:10Z",
        "updatedAt" : "2019-03-28T18:57:31Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "8518fe0d-977e-4bbf-b9a0-ed1dbd619e31",
        "parentId" : "261820a7-754b-4a08-a84d-fbb305551f9f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment around why we need these",
        "createdAt" : "2019-03-27T11:48:24Z",
        "updatedAt" : "2019-03-28T18:57:31Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad97232d55650fff84d16417337664794ab736aa",
    "line" : 265,
    "diffHunk" : "@@ -1,1 +495,499 @@# for \"dropping\" the \"encoding\" argument from our I/O arguments when\n# creating a Unicode I/O object.\ndef UnicodeReader(f, dialect=csv.excel, encoding=\"utf-8\", **kwds):\n    return csv.reader(f, dialect=dialect, **kwds)\n"
  },
  {
    "id" : "afa4eed2-3774-4056-9bec-d27426a5c3c9",
    "prId" : 25886,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25886#pullrequestreview-219270946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e00d58ef-e29f-4872-82c0-1ae3df986cd0",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Do you know why these need noqa now but not previously?",
        "createdAt" : "2019-03-27T05:01:43Z",
        "updatedAt" : "2019-03-28T18:57:31Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "8b295e47-3a1a-4c7f-8c0f-2a59cae3a7f3",
        "parentId" : "e00d58ef-e29f-4872-82c0-1ae3df986cd0",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Probably because `flake8` got confused by the conditional importing we had before (notice how the `noqa` is on the last import of `URLError` before this change).",
        "createdAt" : "2019-03-27T05:12:59Z",
        "updatedAt" : "2019-03-28T18:57:31Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad97232d55650fff84d16417337664794ab736aa",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +9,13 @@import mmap\nimport os\nfrom urllib.error import URLError  # noqa\nfrom urllib.parse import (  # noqa\n    urlencode, urljoin, urlparse as parse_url, uses_netloc, uses_params,"
  },
  {
    "id" : "ab618d2a-fba0-45fc-8e82-f2fea1b8d0bd",
    "prId" : 26024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26024#pullrequestreview-233798282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "007451ba-9014-4a44-bba6-f8c4989d249c",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Any reason to return compression and compression_args here? The former will always match whatever is being passed to the function anyway so seems like we could move the `isinstance` check outside of this function and only call this method when `compression` is a dict",
        "createdAt" : "2019-05-05T21:22:52Z",
        "updatedAt" : "2019-08-25T20:17:53Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d1deeee79e5520279dfb169acaeac371b0afbd9",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +299,303 @@    else:\n        compression_args = {}\n    return compression, compression_args\n\n"
  },
  {
    "id" : "1178c0ef-fb42-492a-af5a-6ba7371d37d9",
    "prId" : 26024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26024#pullrequestreview-233798282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23baa184-33b6-4053-9365-5b8fb62a6d3f",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Related to comment above, I think it would make sense to do the isinstance check before calling this method, unless you think there is a reason why we would ever need this method to do anything with a `str` passed through as an argument",
        "createdAt" : "2019-05-05T21:24:01Z",
        "updatedAt" : "2019-08-25T20:17:53Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d1deeee79e5520279dfb169acaeac371b0afbd9",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +418,422 @@    is_path = isinstance(path_or_buf, str)\n\n    compression, compression_args = _get_compression_method(compression)\n    if is_path:\n        compression = _infer_compression(path_or_buf, compression)"
  },
  {
    "id" : "01966f8d-61fd-4b96-80ff-d2ba0629721c",
    "prId" : 26024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26024#pullrequestreview-279351532",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11fc9d29-259e-40f1-a778-329947b7e47d",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Couldn't annotate this particular argument due to a minor bug in typeshed. Fixed on master so maybe something we can come back to soon (typeshed updates are pretty quick)\r\n\r\nsee https://github.com/python/typeshed/pull/3125",
        "createdAt" : "2019-08-25T20:19:38Z",
        "updatedAt" : "2019-08-25T20:19:50Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d1deeee79e5520279dfb169acaeac371b0afbd9",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +360,364 @@    path_or_buf,\n    mode: str,\n    encoding=None,\n    compression: Optional[Union[str, Dict[str, Any]]] = None,\n    memory_map: bool = False,"
  },
  {
    "id" : "60ec8211-10ff-4df5-9bb2-9736022aacd8",
    "prId" : 27598,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27598#pullrequestreview-266984948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76442477-b315-4473-befe-3cde14af5988",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "When we drop 3.5 support do you think we can just do `isinstance(filepath_or_buffer, os.PathLike) here instead? ",
        "createdAt" : "2019-07-26T04:19:31Z",
        "updatedAt" : "2019-08-02T09:22:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "171b03a0fe23673bb778acbe8652e3b2047b7179",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +152,156 @@    \"\"\"\n    if hasattr(filepath_or_buffer, \"__fspath__\"):\n        # https://github.com/python/mypy/issues/1424\n        return filepath_or_buffer.__fspath__()  # type: ignore\n    elif isinstance(filepath_or_buffer, pathlib.Path):"
  },
  {
    "id" : "dfaa5a77-1f17-4ba9-b6dd-f300a5da0e29",
    "prId" : 27598,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27598#pullrequestreview-270296869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ac9c6c2-e458-410a-a0bc-a5765dd2b087",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What does subscripting with `AnyStr` do here? Add to Union?",
        "createdAt" : "2019-08-02T14:43:48Z",
        "updatedAt" : "2019-08-02T14:44:05Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "7f1bef8a-e98e-4f4f-a7c4-1bc75473b7a2",
        "parentId" : "2ac9c6c2-e458-410a-a0bc-a5765dd2b087",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "FilePathOrBuffer is a just a Union. FilePathOrBuffer[AnyStr] with subscription is effectively a TypeVar in IO. so IO[str] can't become IO[bytes].\r\n\r\ni think https://mypy.readthedocs.io/en/latest/generics.html#generic-type-aliases explains it. will send a different link if i come across a better explanation.",
        "createdAt" : "2019-08-02T15:09:26Z",
        "updatedAt" : "2019-08-02T15:09:26Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "0a94e25d-fbe4-4959-a105-c6b4e0526758",
        "parentId" : "2ac9c6c2-e458-410a-a0bc-a5765dd2b087",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "That's pretty cool - thanks for sharing! Does this really change anything though? We already have `IO[AnyStr]` in `FilePathOrBuffer` so this just restates that (?)\r\n\r\nUnrelated note - `IO[AnyStr]` might itself be wrong as `AnyStr` is a TypeVar and I think we need to parametrize `IO` with the actual type. I find the Python docs rather confusing on that so maybe we remove `AnyStr` altogether but can level that as a separate exercise (unless it helps simplify annotation here)\r\n",
        "createdAt" : "2019-08-02T16:13:35Z",
        "updatedAt" : "2019-08-02T16:13:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "09ec28ed-f946-4b69-b3be-425410755711",
        "parentId" : "2ac9c6c2-e458-410a-a0bc-a5765dd2b087",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> Unrelated note - `IO[AnyStr]` might itself be wrong as `AnyStr` is a TypeVar and I think we need to parametrize `IO` with the actual type.\r\n\r\nThe alias is a Union, the Union has one and only one Generic. so parametrising the alias is parametrising the only Generic in the Union, i.e. IO. \r\n\r\n\r\n> We already have `IO[AnyStr]` in `FilePathOrBuffer` so this just restates that (?)\r\n\r\nI don't think AnyStr is treated as a TypeVar inside the union when the alias is defined. so that's why it's needed in use\r\n\r\n\r\n> Does this really change anything though?\r\n\r\nyes. mypy will fail without it.\r\n\r\nin to_html etc only string buffers are supported. hence `Optional[FilePathOrBuffer[str]]` is used (note the parametrisation of FilePathOrBuffer here)  and the TypeVar then becomes necessary otherwise a bytes buffer could be returned.\r\n\r\n`buffer_put_lines(buf: IO[str], lines: List[str]) -> None` only supports string buffers. so mypy will raise if we don't use TypeVars to maintain the FilePathOrBuffer type in and out of the common functions.\r\n\r\n",
        "createdAt" : "2019-08-02T16:59:19Z",
        "updatedAt" : "2019-08-02T16:59:19Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "22a926d8-1a63-492b-8f88-0a38e70d82c5",
        "parentId" : "2ac9c6c2-e458-410a-a0bc-a5765dd2b087",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Right I think the std documentation isn't very clear but just defining `IO` creates a generic accepting a type of `AnyStr` which is str / bytes. This is in contrast to other generics that really accept type `T` (essentially anything). You can see this if you try to inject a non-str or bytes type\r\n\r\n```python\r\nfrom typing import IO\r\n\r\nfoo: IO[int]\r\n```\r\n\r\nyields\r\n\r\n```sh\r\nerror: Value of type variable \"AnyStr\" of \"IO\" cannot be \"int\"\r\n```\r\n\r\nSo I think an error to keep re-parametrizing IO with `AnyStr` in the _typing module and here. \r\n\r\nLet's leave to a follow up to clean up though",
        "createdAt" : "2019-08-02T17:13:30Z",
        "updatedAt" : "2019-08-02T17:13:30Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "171b03a0fe23673bb778acbe8652e3b2047b7179",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +98,102 @@\ndef _expand_user(\n    filepath_or_buffer: FilePathOrBuffer[AnyStr]\n) -> FilePathOrBuffer[AnyStr]:\n    \"\"\"Return the argument with an initial component of ~ or ~user"
  },
  {
    "id" : "62a21034-0511-4f0b-93f1-9c06078d6294",
    "prId" : 30370,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30370#pullrequestreview-336275529",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3ae4e42-ce18-4111-b022-033677c8e0bb",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "this should be failing ci on Check for non-standard imports\r\n\r\nlog shows\r\n```\r\n##[error]pandas/io/stata.py:12:from collections.abc import Iterator\r\n##[error]pandas/io/sas/sas7bdat.py:16:from collections.abc import Iterator\r\n##[error]pandas/io/sas/sas_xport.py:10:from collections.abc import Iterator\r\n##[error]pandas/io/common.py:5:from collections.abc import Iterator\r\n##[error]pandas/io/parsers.py:6:from collections.abc import Iterator\r\n##[error]pandas/io/json/_json.py:2:from collections.abc import Iterator\r\n```",
        "createdAt" : "2019-12-20T10:45:11Z",
        "updatedAt" : "2019-12-21T02:25:25Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "27551cd3-db3e-47e5-8174-b1b820efd6b3",
        "parentId" : "e3ae4e42-ce18-4111-b022-033677c8e0bb",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "changes to invgrep in #29915. maybe related. @datapythonista ",
        "createdAt" : "2019-12-20T11:31:19Z",
        "updatedAt" : "2019-12-21T02:25:25Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "cf97cb2b-f421-41d9-ac0f-2d891e820c33",
        "parentId" : "e3ae4e42-ce18-4111-b022-033677c8e0bb",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "It's strange, because I tested that the exit codes were correct in that PR, but I agree the problem is likely to be introduced in that PR.\r\n\r\nI'm travelling without my computer at the moment, and I can't test myself. But feel free to revert that PR if you identify it's the one causing the problem, and I'll redo it with the problem fixed later. ",
        "createdAt" : "2019-12-20T11:49:14Z",
        "updatedAt" : "2019-12-21T02:25:25Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "71ab87b8-2396-4d51-b5a8-f0b559d442b9",
        "parentId" : "e3ae4e42-ce18-4111-b022-033677c8e0bb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "what is the preferred way to do the import?",
        "createdAt" : "2019-12-20T16:06:40Z",
        "updatedAt" : "2019-12-21T02:25:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "cf27dbdd-2055-4153-acd5-9fdce0995168",
        "parentId" : "e3ae4e42-ce18-4111-b022-033677c8e0bb",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "What is the correct way to do the import? I'm getting this failure in my PR https://github.com/pandas-dev/pandas/pull/30151/checks?check_run_id=362567629",
        "createdAt" : "2019-12-24T18:54:53Z",
        "updatedAt" : "2019-12-24T18:54:53Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "d4fda706-ba0a-4f20-9978-d17c87116d6c",
        "parentId" : "e3ae4e42-ce18-4111-b022-033677c8e0bb",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think the import is correct. Must be something wrong with the invgrep as noted by @simonjayhawkins ",
        "createdAt" : "2019-12-24T19:09:18Z",
        "updatedAt" : "2019-12-24T19:09:18Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f9c34b63-5d38-4d59-8637-3e2fbe052411",
        "parentId" : "e3ae4e42-ce18-4111-b022-033677c8e0bb",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "@alimcmaster1 might have an idea here as well",
        "createdAt" : "2019-12-24T19:12:58Z",
        "updatedAt" : "2019-12-24T19:12:59Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "cbe585e6-9112-4943-9083-a499ee08df88",
        "parentId" : "e3ae4e42-ce18-4111-b022-033677c8e0bb",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "Sure from reading https://github.com/pandas-dev/pandas/pull/25957#pullrequestreview-221448898 where this check was implemented our preferred way to do the import is `from collections import abc`. Or `from collections import Iterator` \r\n\r\nI can update this now if helpful @mroeschke ?\r\n\r\nAgree - seems to be something flakey with the invgrep on github actions since fails for me locally.",
        "createdAt" : "2019-12-24T20:47:32Z",
        "updatedAt" : "2019-12-24T20:47:32Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      },
      {
        "id" : "5bb75d1e-82ad-494b-9f41-c943ef0fac8b",
        "parentId" : "e3ae4e42-ce18-4111-b022-033677c8e0bb",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "That'd be great @alimcmaster1, thanks!",
        "createdAt" : "2019-12-24T22:21:45Z",
        "updatedAt" : "2019-12-24T22:21:46Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ce13b5307d8470ccfcf7d25e67d6040981a8c70",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3,7 @@import bz2\nimport codecs\nfrom collections.abc import Iterator\nimport gzip\nfrom io import BufferedIOBase, BytesIO"
  },
  {
    "id" : "e569a358-8d3b-4ba2-a634-d046223c629f",
    "prId" : 33398,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33398#pullrequestreview-390366957",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e0169e2-68f4-457e-ad34-444a200e92c6",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What was the mypy error this was throwing? Not always possible to avoid, but type ignore is really a last resort",
        "createdAt" : "2020-04-08T20:55:50Z",
        "updatedAt" : "2020-04-10T20:39:25Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "87edc9db-11d9-45d8-acfd-0166ade1c510",
        "parentId" : "2e0169e2-68f4-457e-ad34-444a200e92c6",
        "authorId" : "43a2195e-817d-41e2-898d-0cf5a3b5b4b8",
        "body" : "Mypy was interpreting **compression_args as the next sequential arg in the function signature, i.e., \"pandas/io/common.py:409: error: Argument 2 to \"GzipFile\" has incompatible type \"**Dict[str, str]\"; expected \"int\".\" I discussed this more in this comment: https://github.com/pandas-dev/pandas/pull/33398#discussion_r405680262 \r\n\r\nCan you think of any other approaches? I don't like ignoring type errors either, and I'm definitely not a mypy expert so I may be missing something.",
        "createdAt" : "2020-04-08T21:15:59Z",
        "updatedAt" : "2020-04-10T20:39:25Z",
        "lastEditedBy" : "43a2195e-817d-41e2-898d-0cf5a3b5b4b8",
        "tags" : [
        ]
      },
      {
        "id" : "a2d5a80e-59f1-4430-8e30-2d90723fec93",
        "parentId" : "2e0169e2-68f4-457e-ad34-444a200e92c6",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Ah OK. I suppose this is related to https://github.com/python/mypy/issues/5382\r\n\r\nI don't know of a general solution at the moment. Can you just comment before all the type ignores that it is related to that mypy issue number? Will make easier to clean up if ever resolved",
        "createdAt" : "2020-04-08T21:22:24Z",
        "updatedAt" : "2020-04-10T20:39:25Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d0326c05-45b6-4de3-a0df-88ccb303548a",
        "parentId" : "2e0169e2-68f4-457e-ad34-444a200e92c6",
        "authorId" : "43a2195e-817d-41e2-898d-0cf5a3b5b4b8",
        "body" : "Good idea -- added comment.",
        "createdAt" : "2020-04-08T22:10:10Z",
        "updatedAt" : "2020-04-10T20:39:25Z",
        "lastEditedBy" : "43a2195e-817d-41e2-898d-0cf5a3b5b4b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "14ca83d9e9ebaa02b47437073e92559f7cbb5d87",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +408,412 @@            if is_path:\n                f = gzip.open(\n                    path_or_buf, mode, **compression_args  # type: ignore\n                )\n            else:"
  },
  {
    "id" : "f23ac8c8-a276-4116-a720-4053a045eb1a",
    "prId" : 34266,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34266#pullrequestreview-428091838",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8de3c2bb-d11d-4b69-9bf6-8497f87e410c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is this docstring still correct? I don't see any check of fsspec being installed?",
        "createdAt" : "2020-06-04T12:20:36Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e53b77a6-e06b-49a8-8c1f-a87abd53f17e",
        "parentId" : "8de3c2bb-d11d-4b69-9bf6-8497f87e410c",
        "authorId" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "body" : "Hence \"looks like\"; whether it can actually be handled will depend on fsspec and whichever backend being installed - but you'll get the error shortly after, when trying to use the URL.",
        "createdAt" : "2020-06-04T13:43:51Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "91bd3e12-470c-4417-ac08-5f387012a9be",
        "tags" : [
        ]
      },
      {
        "id" : "c8e2cc44-15a1-4388-96df-5040d5954433",
        "parentId" : "8de3c2bb-d11d-4b69-9bf6-8497f87e410c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "So the bit in the docstring about \"fsspec is installed\" on the preceding line should be removed.",
        "createdAt" : "2020-06-10T14:09:02Z",
        "updatedAt" : "2020-06-19T18:15:47Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b80a622035b3eaba3bdb790444b7d699822a28",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +141,145 @@    \"\"\"\n    Returns true if the given URL looks like\n    something fsspec can handle\n    \"\"\"\n    return ("
  },
  {
    "id" : "4d73f1c9-63f3-49c1-acf7-bb7f3a4016d4",
    "prId" : 34877,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34877#pullrequestreview-447612985",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "946b028f-3ef9-4520-9acb-e1c17b922b4f",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@alimcmaster1 what happens if we just catch PermissionError? Do you know which cases raise a NoCredentialsError or ClientError?",
        "createdAt" : "2020-07-13T19:43:12Z",
        "updatedAt" : "2020-07-15T12:22:09Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4fbff4e8-2f0e-45fa-8c42-458629e3090e",
        "parentId" : "946b028f-3ef9-4520-9acb-e1c17b922b4f",
        "authorId" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "body" : "A `ClientError` was raised by `test_read_without_creds_from_pub_bucket` in this 3.7 build - https://travis-ci.org/github/pandas-dev/pandas/jobs/706462160\r\n\r\nWe were catching `NoCredentialsError` before the fspec change - https://github.com/pandas-dev/pandas/pull/34266/files#diff-a37b395bed03f0404dec864a4529c97dL34 - so I decided to catch to be on the safe side. (But can't see a case that raises)\r\n\r\nThoughts?",
        "createdAt" : "2020-07-13T21:25:24Z",
        "updatedAt" : "2020-07-15T12:22:09Z",
        "lastEditedBy" : "ebd948a0-48ff-4dbe-a0c8-476953d697fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "edf3ed3e44a5d1a68021ed12ddbe3da748b0fec4",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +205,209 @@        # If botocore is installed we fallback to reading with anon=True\n        # to allow reads from public buckets\n        err_types_to_retry_with_anon: List[Any] = []\n        try:\n            import_optional_dependency(\"botocore\")"
  },
  {
    "id" : "fb0e22e3-10f7-4eaa-8d36-5edb9518b211",
    "prId" : 34877,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34877#pullrequestreview-448036448",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a64f0f11-dee9-4ac1-9e8b-f9a91533952c",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "```suggestion\r\n                # don't mutate user input.\r\n                storage_options = dict(storage_options)\r\n                storage_options[\"anon\"] = True\r\n```",
        "createdAt" : "2020-07-14T11:54:36Z",
        "updatedAt" : "2020-07-15T12:22:09Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "edf3ed3e44a5d1a68021ed12ddbe3da748b0fec4",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +229,233 @@                # don't mutate user input.\n                storage_options = dict(storage_options)\n                storage_options[\"anon\"] = True\n            file_obj = fsspec.open(\n                filepath_or_buffer, mode=mode or \"rb\", **(storage_options or {})"
  },
  {
    "id" : "2a772e0c-8671-4237-920a-b76dc476151c",
    "prId" : 35311,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35311#pullrequestreview-452332174",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e35980d-a851-48b3-872d-a4e423d84795",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What criteria are you using to include a comment or not?",
        "createdAt" : "2020-07-20T21:49:28Z",
        "updatedAt" : "2020-08-01T13:16:43Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "58c6368e-2942-4af5-945c-86f44b1e9c39",
        "parentId" : "9e35980d-a851-48b3-872d-a4e423d84795",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "Hopefully, always. it makes it much easier when browsing the code for type: ignores to remove. e.g. #35344\r\n\r\nWhile adding the error messages here, it was immediately apparent that those ignores removed in #35344 were masking another issue. If this was already merged to master, the error message would be in the diff (as deleted) for #35344 and make the intent of the changes more clear and hence easier to review imo.",
        "createdAt" : "2020-07-21T10:36:50Z",
        "updatedAt" : "2020-08-01T13:16:43Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "46dadcc7b0f465d028a4cca14e5e48679d118d77",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +122,126 @@    if hasattr(filepath_or_buffer, \"__fspath__\"):\n        # https://github.com/python/mypy/issues/1424\n        # error: Item \"str\" of \"Union[str, Path, IO[str]]\" has no attribute\n        # \"__fspath__\"  [union-attr]\n        # error: Item \"IO[str]\" of \"Union[str, Path, IO[str]]\" has no attribute"
  },
  {
    "id" : "afd1e179-e82f-49b0-aa43-9ebf60b9a744",
    "prId" : 35681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35681#pullrequestreview-465929462",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71aabff5-60b7-4ad3-a3d9-11f30349f0f7",
        "parentId" : null,
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "Needed for `df.to_csv(io.BytesIO(), compression=\"zip\", mode=\"wb\")`. This was not covered in [this test](https://github.com/pandas-dev/pandas/blob/59ffa251269ddb8b561d8d88f631a5db21f660dc/pandas/tests/io/test_compression.py#L117).",
        "createdAt" : "2020-08-12T13:44:04Z",
        "updatedAt" : "2020-08-31T23:18:44Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "475e8e8595370085d64a8c5e10a1f020f19f7ec7",
    "line" : 208,
    "diffHunk" : "@@ -1,1 +649,653 @@        if archive_name is None:\n            # ZipFile needs a non-empty string\n            archive_name = \"zip\"\n        super().writestr(archive_name, data)\n"
  },
  {
    "id" : "0bcd67c6-8cca-43dd-8e7e-437ec1e1b2b0",
    "prId" : 35681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35681#pullrequestreview-469705537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94e81a1e-1144-4cd9-94b8-e95f569cf827",
        "parentId" : null,
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "is there a good way in python/pytest to make `fsspec` inaccessible for a specific test to make sure that both branches are covered?",
        "createdAt" : "2020-08-18T18:11:07Z",
        "updatedAt" : "2020-08-31T23:18:44Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "475e8e8595370085d64a8c5e10a1f020f19f7ec7",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +509,513 @@        need_text_wrapping = (*need_text_wrapping, AbstractFileSystem)\n    except ImportError:\n        pass\n\n    handles: List[Union[IO, _MMapWrapper]] = list()"
  },
  {
    "id" : "3cec012e-364a-44a3-91dd-18cdd79776ef",
    "prId" : 35681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35681#pullrequestreview-470897590",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "190a1505-97ab-448f-847a-7e229b4f2dea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you move this below Returns section",
        "createdAt" : "2020-08-19T20:33:40Z",
        "updatedAt" : "2020-08-31T23:18:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "475e8e8595370085d64a8c5e10a1f020f19f7ec7",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +195,199 @@        .. versionadded:: 1.2.0\n\n    ..versionchange:: 1.2.0\n\n      Returns the dataclass IOargs."
  },
  {
    "id" : "0d20ff96-e1af-469e-a94a-6d791c32b023",
    "prId" : 35681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35681#pullrequestreview-470897590",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "383917cc-6cdf-4bc1-85ed-b376c14d6ce9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment on what this is doing?",
        "createdAt" : "2020-08-19T20:36:40Z",
        "updatedAt" : "2020-08-31T23:18:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "475e8e8595370085d64a8c5e10a1f020f19f7ec7",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +504,508 @@    # class to the list of classes that need text wrapping. If fsspec is too old and is\n    # needed, get_filepath_or_buffer would already have thrown an exception.\n    try:\n        from fsspec.spec import AbstractFileSystem\n"
  },
  {
    "id" : "8202360f-7007-45b5-a84a-cdaafc7d4c11",
    "prId" : 35681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35681#pullrequestreview-475121273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5089bd19-ba43-4221-87f2-b8a99eb0b4de",
        "parentId" : null,
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "my local mypy needs that for line 170 and 172 but the CI mypy needs it apparently at that line (`TypeVar`s cannot have default values, could be fixed with `@overload`)",
        "createdAt" : "2020-08-26T03:14:15Z",
        "updatedAt" : "2020-08-31T23:18:44Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "475e8e8595370085d64a8c5e10a1f020f19f7ec7",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +166,170 @@\n\ndef get_filepath_or_buffer(  # type: ignore[assignment]\n    filepath_or_buffer: FilePathOrBuffer,\n    encoding: EncodingVar = None,"
  },
  {
    "id" : "2741531b-9702-43dd-9d48-07ce2399783a",
    "prId" : 35681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35681#pullrequestreview-475122338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fafebb5d-0ca3-4856-afdd-5101a6a7a41c",
        "parentId" : null,
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "complains about `file` being `IOBase` but we cannot have an `assert not isisntance(file, IOBase)` since `io.StringIO` inherits from `IOBase`",
        "createdAt" : "2020-08-26T03:17:51Z",
        "updatedAt" : "2020-08-31T23:18:44Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "475e8e8595370085d64a8c5e10a1f020f19f7ec7",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +641,645 @@        kwargs_zip: Dict[str, Any] = {\"compression\": zipfile.ZIP_DEFLATED}\n        kwargs_zip.update(kwargs)\n        super().__init__(file, mode, **kwargs_zip)  # type: ignore[arg-type]\n\n    def write(self, data):"
  },
  {
    "id" : "de6ca172-34b1-456e-856f-7ca0812de6bc",
    "prId" : 35681,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35681#pullrequestreview-476349793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "febe3445-cae8-47f4-9a0e-70a42d4feabd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a test for this condition?",
        "createdAt" : "2020-08-27T02:35:40Z",
        "updatedAt" : "2020-08-31T23:18:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "26ea1a81-0c55-4a8a-bf48-41cab758cfc1",
        "parentId" : "febe3445-cae8-47f4-9a0e-70a42d4feabd",
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "yes `test_warning_missing_utf_bom` in `pandas/tests/io/test_common.py`",
        "createdAt" : "2020-08-27T02:51:59Z",
        "updatedAt" : "2020-08-31T23:18:44Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "475e8e8595370085d64a8c5e10a1f020f19f7ec7",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +213,217 @@    ):\n        warnings.warn(\n            f\"{compression} will not write the byte order mark for {encoding}\",\n            UnicodeWarning,\n        )"
  },
  {
    "id" : "0d6f8b66-0fa6-452e-96fd-c08e9267c2fe",
    "prId" : 37108,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37108#pullrequestreview-564776452",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86c2733f-21ed-42a1-bc42-6b25e582e77b",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "see https://github.com/pandas-dev/pandas/issues/37104#issuecomment-756673310",
        "createdAt" : "2021-01-09T11:17:06Z",
        "updatedAt" : "2021-01-10T03:12:50Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0727dbe33169c3658235cb2feb65f4e34bf4f26",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +181,185 @@\n    # Only @runtime_checkable protocols can be used with instance and class checks\n    if isinstance(filepath_or_buffer, os.PathLike):  # type: ignore[misc]\n        filepath_or_buffer = filepath_or_buffer.__fspath__()\n    return _expand_user(filepath_or_buffer)"
  },
  {
    "id" : "468c7270-14e3-444e-837e-16c8d9c7e212",
    "prId" : 37108,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37108#pullrequestreview-564776526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36708802-8a73-4408-aa1e-d011d83c46c2",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "see https://github.com/pandas-dev/pandas/issues/37104#issuecomment-709921704",
        "createdAt" : "2021-01-09T11:18:25Z",
        "updatedAt" : "2021-01-10T03:12:50Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0727dbe33169c3658235cb2feb65f4e34bf4f26",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +493,497 @@    valid = [\"infer\", None] + sorted(\n        _compression_to_extension\n    )  # type: ignore[operator]\n    msg = (\n        f\"Unrecognized compression type: {compression}\\n\""
  },
  {
    "id" : "70ca218b-3e8b-40a5-8393-8ce3d903db2f",
    "prId" : 37639,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37639#pullrequestreview-525392445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "886daa02-a897-40bf-9f1e-b818606511ce",
        "parentId" : null,
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "this is for consistency across `to/read_` functions: `read_fwf` uses `None` to infer the compression.\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/8b05fe3bd20965ba64477f6c96dbf674d9f155ff/pandas/tests/io/parser/test_read_fwf.py#L597",
        "createdAt" : "2020-11-06T18:24:05Z",
        "updatedAt" : "2020-11-13T06:00:02Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f1fad83f29ac6dd0055221678a9b727050efa81",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +470,474 @@    \"\"\"\n    # Infer compression\n    if compression in (\"infer\", None):\n        # Convert all path types (e.g. pathlib.Path) to strings\n        filepath_or_buffer = stringify_path(filepath_or_buffer)"
  },
  {
    "id" : "a9ed5f19-33d0-490f-8af1-b062e9040744",
    "prId" : 37966,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37966#pullrequestreview-551672233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bd4087e-e1b4-45e2-9614-18523c8143ff",
        "parentId" : null,
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "are there more (important) keyword arguments that `Request` takes? If yes, it might be more future-proof to do:\r\n`urllib.request.Request(filepath_or_buffer, **storage_options)`",
        "createdAt" : "2020-12-12T23:09:02Z",
        "updatedAt" : "2020-12-13T23:17:52Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      },
      {
        "id" : "a0f0c386-5307-4590-b784-1ca84b5038ae",
        "parentId" : "3bd4087e-e1b4-45e2-9614-18523c8143ff",
        "authorId" : "2eb9916b-3a00-4c47-87a5-76ca592eebf3",
        "body" : "I like that thought, though from reviewing the options I don't think there's much to be gained by exposing the other keyword arguments.  It looks like the other kwargs are there mainly to post data to a url, but that doesn't look to be possible inside the ``_get_filepath_or_buffer`` function due to what is available when that function is called.  Here's the documentation link in case anyone has a different take: [https://docs.python.org/3/library/urllib.request.html#urllib.request.Request](url)\r\n\r\nAnother less restrictive option might be to change it so that ``storage_options = {\"headers\": {\"User-Agent\": \"pandas\"}}`` leading to ``urllib.request.Request(filepath_or_buffer, headers=storage_options[\"headers\"])``.  This means the options could be used for other functions in ``_get_filepath_or_buffer``.\r\n\r\nBoth may be a little cumbersome on the user, since I see little benefit in this function in the http(s) case, but it may provide some flexibility that would be nice elsewhere.  Easy enough to do either option and change the docs, or leave it as is.  Got any particular preference among those options?  Thanks!",
        "createdAt" : "2020-12-13T05:21:12Z",
        "updatedAt" : "2020-12-13T23:17:52Z",
        "lastEditedBy" : "2eb9916b-3a00-4c47-87a5-76ca592eebf3",
        "tags" : [
        ]
      },
      {
        "id" : "8533a848-425c-453f-9913-3d46fe721fa6",
        "parentId" : "3bd4087e-e1b4-45e2-9614-18523c8143ff",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is it possible to construc storage_options that has other keys that are not accepted in headers? e.g. I think it IS worthile to be strict here (IOW to pass thru keywords that are only valid ones).",
        "createdAt" : "2020-12-14T13:58:20Z",
        "updatedAt" : "2020-12-14T14:00:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1717456b-fb59-42e5-ae3c-cb90c544e6f2",
        "parentId" : "3bd4087e-e1b4-45e2-9614-18523c8143ff",
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "`is_url` strings that are not `is_fsspec_url`, did not use any storage_options before this PR. All options could go into the header/to urllib.request.Request.\r\nIf we do something like `Request(filepath_or_buffer, headers=storage_options[\"headers\"])` then we could have other options that are not used but we don't raise about them (or urllib doesn't complain about the provided arguments).",
        "createdAt" : "2020-12-14T15:10:37Z",
        "updatedAt" : "2020-12-14T15:10:37Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      },
      {
        "id" : "fab294ac-c6c0-4c3f-bdb1-f169001cf936",
        "parentId" : "3bd4087e-e1b4-45e2-9614-18523c8143ff",
        "authorId" : "2eb9916b-3a00-4c47-87a5-76ca592eebf3",
        "body" : "As far as I know, there are common uses for some header keys but there's also not really a limit on what header keys can be used (ie. I think all keys are accepted in headers).  To back this up the ``urllib.request.Request`` documentation says that it will call the ``urllib.request.Request.add_header`` method on each key value pair, and from looking at that method and the ``__init__`` method, I don't see any restriction on keys allowed in the header dictionary either.\r\n\r\nI think once I am free later tonight I will go ahead and change it so that the usage and documentation lines up with ``Request(filepath_or_buffer, headers=storage_options[\"headers\"])``",
        "createdAt" : "2020-12-14T17:26:54Z",
        "updatedAt" : "2020-12-14T17:26:54Z",
        "lastEditedBy" : "2eb9916b-3a00-4c47-87a5-76ca592eebf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "7025abbd682b17fdb51af838a9a77695526a32c8",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +287,291 @@\n        # assuming storage_options is to be interpretted as headers\n        req_info = urllib.request.Request(filepath_or_buffer, headers=storage_options)\n        req = urlopen(req_info)\n        content_encoding = req.headers.get(\"Content-Encoding\", None)"
  },
  {
    "id" : "e2ead5ba-8039-447d-8b9b-62f4d9935b46",
    "prId" : 37966,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37966#pullrequestreview-551455972",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "071e3aa8-d12b-40e2-8ceb-95b4b424143a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm not sure why we do this anymore, I guess somethings were nto available in some older versions, it think we can move these to top-level imports (ok to leave here), pls open an issue for followup.\r\n\r\ncc @twoertwein ",
        "createdAt" : "2020-12-14T13:57:00Z",
        "updatedAt" : "2020-12-14T14:00:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0bb93806-9826-4b8c-a20e-c96bd57a6ea9",
        "parentId" : "071e3aa8-d12b-40e2-8ceb-95b4b424143a",
        "authorId" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "body" : "the other libraries that are imported in `_get_filehandle_or_buffer` are optional dependencies (fsspec and botocore). urllib is a standard library that should be available in all python versions supported by pandas 1.2. Would make sense to move it to the top.",
        "createdAt" : "2020-12-14T15:04:29Z",
        "updatedAt" : "2020-12-14T15:04:29Z",
        "lastEditedBy" : "42aa2e10-a5f0-418e-8919-5ec1443b7f2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7025abbd682b17fdb51af838a9a77695526a32c8",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +284,288 @@        # waiting until now for importing to match intended lazy logic of\n        # urlopen function defined elsewhere in this module\n        import urllib.request\n\n        # assuming storage_options is to be interpretted as headers"
  }
]