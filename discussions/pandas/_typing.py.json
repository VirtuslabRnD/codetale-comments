[
  {
    "id" : "81816e60-0a61-40cb-9efd-d768b9145231",
    "prId" : 25884,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25884#pullrequestreview-220833727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e73ef11-a2a0-4ee7-b76f-cb084fc69b6c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a test that asserts this in pandas/tests/types/test_api.py",
        "createdAt" : "2019-03-30T18:56:27Z",
        "updatedAt" : "2019-03-30T18:56:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "363b220f-3aa3-472b-b2ff-311adf39adca",
        "parentId" : "7e73ef11-a2a0-4ee7-b76f-cb084fc69b6c",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea no problem. So the existing test(s) exclude any privately named modules:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/27927056b368fa8c9501c4ec8729546dbe98068c/pandas/tests/api/test_api.py#L14\r\n\r\nAre you asking to revisit that logic or simply add a test with this as an exception to make sure it lives there?",
        "createdAt" : "2019-03-30T19:10:45Z",
        "updatedAt" : "2019-03-30T19:10:45Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4d1914b8-14de-4c1c-9748-2f30530aca7f",
        "parentId" : "7e73ef11-a2a0-4ee7-b76f-cb084fc69b6c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "oh i c. nvm then. though I think we should actually check and lock down all modules (so add back the private ones). in a new PR / issue though.",
        "createdAt" : "2019-03-30T19:12:20Z",
        "updatedAt" : "2019-03-30T19:12:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e31345eb573f51718047d131e820370b7a54355",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@from pathlib import Path\nfrom typing import IO, AnyStr, Union\n"
  },
  {
    "id" : "b8259535-1af4-462c-b995-fcc032aacd8a",
    "prId" : 26588,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26588#pullrequestreview-246726141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3af55e43-87d6-454d-8ed0-178cffb3cf1a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Have to think through impact of this some more. After looking at this my thought was we might need to mark this as covariant, but it doesn't look like that is supported in generic functions (which was one of the motivations here):\r\n\r\nhttps://www.python.org/dev/peps/pep-0484/#covariance-and-contravariance\r\n\r\nIf you have any thoughts yourself please let me know!",
        "createdAt" : "2019-05-31T13:11:06Z",
        "updatedAt" : "2019-06-06T18:39:31Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d83daeb4-4e61-432a-82db-d4dbfe69de9e",
        "parentId" : "3af55e43-87d6-454d-8ed0-178cffb3cf1a",
        "authorId" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "body" : "It's quite a read, I will look at it later today.",
        "createdAt" : "2019-06-03T05:16:39Z",
        "updatedAt" : "2019-06-06T18:39:31Z",
        "lastEditedBy" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "tags" : [
        ]
      },
      {
        "id" : "d265223d-b038-46f3-8b19-b0b93d7033ed",
        "parentId" : "3af55e43-87d6-454d-8ed0-178cffb3cf1a",
        "authorId" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "body" : "I don't think we need convariants here. Even after reading it a couple times I still don't get it very well, but it looks like it has something to do with sub/super class, which doesn't looks like the case here.\r\n",
        "createdAt" : "2019-06-06T09:32:55Z",
        "updatedAt" : "2019-06-06T18:39:31Z",
        "lastEditedBy" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "tags" : [
        ]
      },
      {
        "id" : "27ad4f03-1f5a-45c7-99c4-78e5a7045626",
        "parentId" : "3af55e43-87d6-454d-8ed0-178cffb3cf1a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "OK. I think this is passing without covariant because we might only be using in generic functions for now. I think it would be a problem when parametrizing containers since these by default are invariant (i.e. we could parametrize a container with ABCIndexClass but not Index) but can deal with that when that happens\r\n\r\nQuoting relevant part of PEP 484:\r\n\r\n> By default generic types are considered invariant in all type variables, which means that values for variables annotated with types like List[Employee] must exactly match the type annotation -- no subclasses or superclasses of the type parameter (in this example Employee) are allowed.",
        "createdAt" : "2019-06-06T17:49:21Z",
        "updatedAt" : "2019-06-06T18:39:31Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f579410f-85fd-4543-8d85-2006cd6af63b",
        "parentId" : "3af55e43-87d6-454d-8ed0-178cffb3cf1a",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "The end solution for parametrization may be to add a `AnyArrayLike_co` since that's a convention suggested by the PEP anyway",
        "createdAt" : "2019-06-06T17:50:42Z",
        "updatedAt" : "2019-06-06T18:39:31Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "173ac504-1c64-443b-8d0c-c67d87f18381",
        "parentId" : "3af55e43-87d6-454d-8ed0-178cffb3cf1a",
        "authorId" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "body" : "OK, Remaining types are:\r\n\r\n    DatetimeLikeScalar = Type[Union[Period, Timestamp, Timedelta]]\r\n    Dtype = Union[str, np.dtype, ExtensionDtype]\r\n    FilePathOrBuffer = Union[str, Path, IO[AnyStr]]\r\n\r\n- Union in `DatetimeLikeScalar` is nested don't know if it should be converted to `TypeVar`\r\n- Converting `Dtype` to TypeVar starts giving errors.",
        "createdAt" : "2019-06-06T17:58:36Z",
        "updatedAt" : "2019-06-06T18:39:31Z",
        "lastEditedBy" : "da5e950e-9d1c-4a15-b601-82b67f80b78f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d3376a07abc1dd443863d25109cf41c3923398b",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +12,16 @@    ABCExtensionArray, ABCIndexClass, ABCSeries, ABCSparseSeries)\n\nAnyArrayLike = TypeVar('AnyArrayLike',\n                       ABCExtensionArray,\n                       ABCIndexClass,"
  }
]