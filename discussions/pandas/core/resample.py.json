[
  {
    "id" : "dadfe8e9-470e-4684-8aa9-898bc8ca8f74",
    "prId" : 16153,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16153#pullrequestreview-39359532",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ead58e80-3d9c-49e0-b77c-4ee25ce2fcff",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this path tested sufficiently, e.g. 0, 1, 2 NaT?",
        "createdAt" : "2017-05-07T13:42:50Z",
        "updatedAt" : "2017-09-29T12:24:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c8d9b382-73c6-44c4-b84b-d64a49b02440",
        "parentId" : "ead58e80-3d9c-49e0-b77c-4ee25ce2fcff",
        "authorId" : "2e61423b-d84f-4837-bfd1-7b1f4486329c",
        "body" : "added a test case for consecutive NaTs in the index (1cad7fa)\r\n\r\nShould be sufficiently tested, cases covered:\r\n- 0 NaT: basically all other resampling tests\r\n- multiple single NaTs (at beginning, inside and end of index)\r\n- consecutive NaTs (at beginning, inside and end of index)\r\n\r\nAny ideas for more exhaustive test cases?",
        "createdAt" : "2017-05-21T15:54:50Z",
        "updatedAt" : "2017-09-29T12:24:16Z",
        "lastEditedBy" : "2e61423b-d84f-4837-bfd1-7b1f4486329c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6084e0ce24218056de5890d88a1def47b636e63e",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +1301,1305 @@\n        if nat_count > 0:\n            # NaT handling as in pandas._lib.lib.generate_bins_dt64()\n            # shift bins by the number of NaT\n            bins += nat_count"
  },
  {
    "id" : "576d51ca-2530-4109-9b2e-ca547d4478b5",
    "prId" : 16153,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16153#pullrequestreview-50795433",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e3b4646-4728-4189-b044-17054af91b60",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should we show a warning for this?",
        "createdAt" : "2017-07-13T19:46:43Z",
        "updatedAt" : "2017-09-29T12:24:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "12282550-1a06-48c7-8811-d5b3eee32e6e",
        "parentId" : "6e3b4646-4728-4189-b044-17054af91b60",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I think we should, given that we kind of did that before (it was `print` statement with a warning!?)",
        "createdAt" : "2017-07-19T03:16:06Z",
        "updatedAt" : "2017-09-29T12:24:16Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "6084e0ce24218056de5890d88a1def47b636e63e",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +852,856 @@        if self.loffset is not None:\n            # Cannot apply loffset/timedelta to PeriodIndex -> convert to\n            # timestamps\n            self.kind = 'timestamp'\n"
  },
  {
    "id" : "3fbed8dd-e100-4e5c-9d83-4c4ee1badfe0",
    "prId" : 16153,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16153#pullrequestreview-66134718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8eb0690d-72cf-4bbe-939e-bc79f0096815",
        "parentId" : null,
        "authorId" : "214b00be-e9f2-4883-878c-26eab43cc650",
        "body" : "You could use `_shallow_copy` here, but this is OK",
        "createdAt" : "2017-09-28T19:49:36Z",
        "updatedAt" : "2017-09-29T12:24:16Z",
        "lastEditedBy" : "214b00be-e9f2-4883-878c-26eab43cc650",
        "tags" : [
        ]
      },
      {
        "id" : "3a81b5a6-f7a8-4c19-b99a-3da9ce0131ae",
        "parentId" : "8eb0690d-72cf-4bbe-939e-bc79f0096815",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I left this, ok for now.",
        "createdAt" : "2017-09-29T12:17:34Z",
        "updatedAt" : "2017-09-29T12:25:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6084e0ce24218056de5890d88a1def47b636e63e",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +1280,1284 @@        # if index contains no valid (non-NaT) values, return empty index\n        if not len(memb):\n            binner = labels = PeriodIndex(\n                data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels"
  },
  {
    "id" : "064c0fed-35da-4061-b1bc-fd6f480f5bf3",
    "prId" : 17498,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17498#pullrequestreview-63001993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97f392f9-6ee7-421d-afea-bc062c48b705",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "versionadded tag",
        "createdAt" : "2017-09-15T10:19:37Z",
        "updatedAt" : "2017-09-16T14:01:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "82933d12f51403f4859336d164e79257370ca6cd",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +469,473 @@\n    def nearest(self, limit=None):\n        \"\"\"\n        Fill values with nearest neighbor starting from center\n"
  },
  {
    "id" : "a14e5938-7404-4144-8f82-cf1e7efdffa9",
    "prId" : 18085,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18085#pullrequestreview-75804079",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90a61381-ae4b-4d32-bd26-59bafd98377c",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "pandas.tseries.offsets is a public-ish module. In general I would not add non-underscored internal methods to that namespace like `delta_to_nanoseconds`",
        "createdAt" : "2017-11-10T08:57:43Z",
        "updatedAt" : "2017-11-10T08:57:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6e6b31db-0df8-483f-810c-078fde753d57",
        "parentId" : "90a61381-ae4b-4d32-bd26-59bafd98377c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, if nothing else `delta_to_nanoseconds` should be imported directly from tslibs.timedelta.  I'll put something together.",
        "createdAt" : "2017-11-10T15:55:25Z",
        "updatedAt" : "2017-11-10T15:55:26Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "241d2b47-f6fc-4aff-a600-d77e3ec77262",
        "parentId" : "90a61381-ae4b-4d32-bd26-59bafd98377c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "On second thought, do we need to obscure the name if it isn't in `__all__`?",
        "createdAt" : "2017-11-10T16:03:37Z",
        "updatedAt" : "2017-11-10T16:03:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5ce40561-c012-45b3-b4f5-9caf3bb9eb4e",
        "parentId" : "90a61381-ae4b-4d32-bd26-59bafd98377c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Well, tab completion (= for me my interaction with the API) does not take into account `__all__` I think. ",
        "createdAt" : "2017-11-10T16:10:18Z",
        "updatedAt" : "2017-11-10T16:10:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5e8fe0d04e3511aeafc16f0024538f9f2b7ef52",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +14,18 @@from pandas.core.indexes.datetimes import DatetimeIndex, date_range\nfrom pandas.core.indexes.timedeltas import TimedeltaIndex\nfrom pandas.tseries.offsets import DateOffset, Tick, Day, delta_to_nanoseconds\nfrom pandas.core.indexes.period import PeriodIndex\nimport pandas.core.common as com"
  },
  {
    "id" : "1b9c0ea2-ec04-439e-bfbd-a6c9f37a1239",
    "prId" : 20379,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20379#pullrequestreview-104645121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3211099-2d32-474c-9ecc-2318ffe9d8da",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would add such an example with a missing value above for Series as well (or instead of this example). \r\nI think using a Series will make it easier to understand and easier to focus on that specific behaviour. \r\n\r\nIn the end, we can limit the number of examples for DataFrame and basically say that for a DataFrame everything works similar as for Series column-by-column",
        "createdAt" : "2018-03-16T15:53:50Z",
        "updatedAt" : "2018-03-17T19:49:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b7c8f57c-3a45-435e-aabc-cb40a7480ccf",
        "parentId" : "e3211099-2d32-474c-9ecc-2318ffe9d8da",
        "authorId" : "d7915214-d795-47d2-bcbb-65205a9011e1",
        "body" : "Done",
        "createdAt" : "2018-03-16T17:02:20Z",
        "updatedAt" : "2018-03-17T19:49:25Z",
        "lastEditedBy" : "d7915214-d795-47d2-bcbb-65205a9011e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "39e69ba20f50892a1f85ba99f03c54a3523581d4",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +765,769 @@                               a  b\n        2018-01-01 00:00:00  2.0  1\n        2018-01-01 01:00:00  NaN  3\n        2018-01-01 02:00:00  6.0  5\n"
  },
  {
    "id" : "ca5bda9f-c71d-40c0-a6cb-1fbed2c5125f",
    "prId" : 20381,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20381#pullrequestreview-171342900",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c9d13fe-0106-40a7-b71d-c9e64f234af0",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@datapythonista do we have a convention for saying same-type-as-input?",
        "createdAt" : "2018-11-03T22:02:39Z",
        "updatedAt" : "2018-11-04T04:52:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ab559ac24d78e6724836c70b344a1f6b3776b78",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +439,443 @@        Returns\n        -------\n        Series or DataFrame\n            An upsampled Series or DataFrame with ``NaN`` values filled with\n            their nearest value."
  },
  {
    "id" : "797dcc70-3148-4351-8a97-91b70a0839bd",
    "prId" : 22304,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22304#pullrequestreview-145614579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd46204a-a613-43a8-b632-70a78ef5eb0e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versionadded tag",
        "createdAt" : "2018-08-13T11:37:48Z",
        "updatedAt" : "2018-08-22T10:44:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "92b5b2d7164ade76ff425831d763ce8b1c11cece",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +770,774 @@        \"\"\"\n        Return value at the given quantile.\n\n        .. versionadded:: 0.24.0\n"
  },
  {
    "id" : "08294554-5cf3-4beb-a2d9-94f3da568b75",
    "prId" : 22304,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22304#pullrequestreview-145880317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0ac96d7-88af-4564-b370-abd1334094ea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some See Also and point to the Series / groupby versions",
        "createdAt" : "2018-08-14T00:11:23Z",
        "updatedAt" : "2018-08-22T10:44:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "92b5b2d7164ade76ff425831d763ce8b1c11cece",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +776,780 @@        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n\n        See Also\n        --------"
  },
  {
    "id" : "696c61ae-80f2-42e6-a62b-0688e104a4ec",
    "prId" : 22365,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22365#pullrequestreview-146495262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c73445ac-fd90-4039-9a35-e6f536b61bfa",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Maybe a bit more explanation here. ",
        "createdAt" : "2018-08-15T11:30:58Z",
        "updatedAt" : "2018-08-17T07:52:38Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "fe6c00e1-ee73-4a09-b830-6bfdba46111e",
        "parentId" : "c73445ac-fd90-4039-9a35-e6f536b61bfa",
        "authorId" : "1e145159-7625-4657-b21d-e6691ae34a53",
        "body" : "Do we have any example? I found only for `GroupBy`?\r\nhttps://github.com/pandas-dev/pandas/blob/v0.23.4/pandas/core/groupby/groupby.py#L881-L890",
        "createdAt" : "2018-08-15T15:30:06Z",
        "updatedAt" : "2018-08-17T07:52:38Z",
        "lastEditedBy" : "1e145159-7625-4657-b21d-e6691ae34a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "475c74d2bbaddb6f8a3f4e8a4856ade571b35303",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +100,104 @@    def __iter__(self):\n        \"\"\"\n        Resampler iterator\n\n        Returns"
  },
  {
    "id" : "495b2864-87fe-42bf-8831-53be7f174478",
    "prId" : 22488,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22488#pullrequestreview-151696707",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "880cc9c9-112c-4177-aa25-bb4b90d3cbf4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here (and maybe refresh the comment in same method for DTI resampling)",
        "createdAt" : "2018-08-29T12:22:02Z",
        "updatedAt" : "2018-09-05T09:59:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "55621ee4-555d-4db9-aff1-3d697f1d92f8",
        "parentId" : "880cc9c9-112c-4177-aa25-bb4b90d3cbf4",
        "authorId" : "1e145159-7625-4657-b21d-e6691ae34a53",
        "body" : "@jreback \r\n\r\nCould you please clarify how I should refresh the comment for DTI? What should be instead of `adjust our binner when upsampling`?",
        "createdAt" : "2018-08-29T14:00:18Z",
        "updatedAt" : "2018-09-05T09:59:49Z",
        "lastEditedBy" : "1e145159-7625-4657-b21d-e6691ae34a53",
        "tags" : [
        ]
      },
      {
        "id" : "da833f3e-7544-4b18-9d20-90c77e67dfc1",
        "parentId" : "880cc9c9-112c-4177-aa25-bb4b90d3cbf4",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a comment on why we are NOT adjusting anything here for TDI (e.g. just returning it directly). basically explain why DTI but not TDI needs adjustment",
        "createdAt" : "2018-08-31T10:22:45Z",
        "updatedAt" : "2018-09-05T09:59:49Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "74dbe48f-3e50-401d-a90d-1d481b9d567c",
        "parentId" : "880cc9c9-112c-4177-aa25-bb4b90d3cbf4",
        "authorId" : "1e145159-7625-4657-b21d-e6691ae34a53",
        "body" : "Just a reminder: here is why we adjust a binner https://github.com/pandas-dev/pandas/issues/10885",
        "createdAt" : "2018-09-03T08:11:40Z",
        "updatedAt" : "2018-09-05T09:59:49Z",
        "lastEditedBy" : "1e145159-7625-4657-b21d-e6691ae34a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd8f31a92b1e03d1fd6141fd837969caafdf1a8f",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1159,1163 @@        return self.groupby._get_time_delta_bins(self.ax)\n\n    def _adjust_binner_for_upsample(self, binner):\n        \"\"\"\n        Adjust our binner when upsampling."
  },
  {
    "id" : "0fd77ffe-06aa-4a08-b14e-1fd398b927e0",
    "prId" : 23941,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23941#pullrequestreview-181080937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4725cf76-700c-4cc3-8f23-20c37f69e7a2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would move the PI creation into the if & the else blocks (as the else is almost a trivial creation then).",
        "createdAt" : "2018-12-04T02:48:59Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9863acc0-cf13-4f6e-873b-7aa50c7739ad",
        "parentId" : "4725cf76-700c-4cc3-8f23-20c37f69e7a2",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "agreed and done, despite the duplication of the PI creation I think it makes it just that much more obvious/readable.",
        "createdAt" : "2018-12-04T03:39:57Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      }
    ],
    "commit" : "c234cac9572f63161ea93645300cc53030a621d2",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1550,1554 @@        # GH 23882\n        if self.base:\n            # get base adjusted bin edge labels\n            p_start, end = _get_period_range_edges(start,\n                                                   end,"
  },
  {
    "id" : "52fd0085-0000-40af-a02f-8eb8041b9bf1",
    "prId" : 23941,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23941#pullrequestreview-184663604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7d6a3f5-e58c-4e85-881b-5b66683b077e",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Could you add a test that hits this?",
        "createdAt" : "2018-12-09T23:26:45Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "afa76e8f-e096-4d81-8b61-894ce08aa86a",
        "parentId" : "b7d6a3f5-e58c-4e85-881b-5b66683b077e",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "done. Not nearly exhaustive, but gets some of the more significant cases",
        "createdAt" : "2018-12-11T01:38:54Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      },
      {
        "id" : "5f614bfe-c2a2-4420-86c3-f1e10e7b0f99",
        "parentId" : "b7d6a3f5-e58c-4e85-881b-5b66683b077e",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Ah sorry, I meant a case that hits the error message. i.e mixing a Timestamp/Period and other scalar (same with the other case).",
        "createdAt" : "2018-12-11T03:47:43Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "e48cf50d-16ad-4e7b-ae35-72d5aa33622c",
        "parentId" : "b7d6a3f5-e58c-4e85-881b-5b66683b077e",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "done.",
        "createdAt" : "2018-12-12T01:37:33Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      },
      {
        "id" : "a75f1d9a-2fd5-43e1-9c9a-1ae65d02a808",
        "parentId" : "b7d6a3f5-e58c-4e85-881b-5b66683b077e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string",
        "createdAt" : "2018-12-12T12:51:17Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3ef7cb3c-b734-4517-9615-030703217687",
        "parentId" : "b7d6a3f5-e58c-4e85-881b-5b66683b077e",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "done.",
        "createdAt" : "2018-12-13T00:28:36Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      },
      {
        "id" : "69abbbed-6e7e-4286-bcd2-8ee2ee2327cb",
        "parentId" : "b7d6a3f5-e58c-4e85-881b-5b66683b077e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same as above, need Parmaters / Returns",
        "createdAt" : "2018-12-13T12:32:16Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d3259475-2b04-4e2e-b915-81501302e4d3",
        "parentId" : "b7d6a3f5-e58c-4e85-881b-5b66683b077e",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "done.",
        "createdAt" : "2018-12-13T13:39:29Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      }
    ],
    "commit" : "c234cac9572f63161ea93645300cc53030a621d2",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +1677,1681 @@    A tuple of length 2, containing the adjusted pd.Period objects.\n    \"\"\"\n    if not all(isinstance(obj, pd.Period) for obj in [first, last]):\n        raise TypeError(\"'first' and 'last' must be instances of type Period\")\n"
  },
  {
    "id" : "36cd795b-eaaa-49fe-831c-5fff187f5ea9",
    "prId" : 23941,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23941#pullrequestreview-184663559",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc72e9d7-3ba0-4867-bda9-11d6d324f023",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Could you add a test that hits this?",
        "createdAt" : "2018-12-09T23:26:52Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "da0426e8-d797-4184-bed1-04ad470e51d4",
        "parentId" : "dc72e9d7-3ba0-4867-bda9-11d6d324f023",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "done.",
        "createdAt" : "2018-12-11T01:39:07Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      },
      {
        "id" : "707f128a-8556-49e1-a182-10c839801a56",
        "parentId" : "dc72e9d7-3ba0-4867-bda9-11d6d324f023",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string",
        "createdAt" : "2018-12-12T12:51:11Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8e370be9-76b4-4cf7-a3f3-8e81c60a1229",
        "parentId" : "dc72e9d7-3ba0-4867-bda9-11d6d324f023",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "done.",
        "createdAt" : "2018-12-13T00:28:31Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      },
      {
        "id" : "60f579ab-8388-4761-8959-c0104de8565c",
        "parentId" : "dc72e9d7-3ba0-4867-bda9-11d6d324f023",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add Parameters / Returns",
        "createdAt" : "2018-12-13T12:32:01Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "53f60793-adda-4454-9ac0-7f2bf5d80f10",
        "parentId" : "dc72e9d7-3ba0-4867-bda9-11d6d324f023",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "done.",
        "createdAt" : "2018-12-13T13:39:24Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      }
    ],
    "commit" : "c234cac9572f63161ea93645300cc53030a621d2",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +1628,1632 @@    A tuple of length 2, containing the adjusted pd.Timestamp objects.\n    \"\"\"\n    if not all(isinstance(obj, pd.Timestamp) for obj in [first, last]):\n        raise TypeError(\"'first' and 'last' must be instances of type \"\n                        \"Timestamp\")"
  },
  {
    "id" : "3c47249a-194a-4fb9-a2c3-b22267cdbeee",
    "prId" : 23941,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23941#pullrequestreview-184251663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83abeb25-47da-4c42-9bb3-d1a9f9eebcc0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is this still needed? shouldn't this be in get_period_range_edges?",
        "createdAt" : "2018-12-12T12:50:45Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "004422d5-449c-4350-a250-5c83b03bad11",
        "parentId" : "83abeb25-47da-4c42-9bb3-d1a9f9eebcc0",
        "authorId" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "body" : "See the last paragraph of this comment. \r\nhttps://github.com/pandas-dev/pandas/pull/23941#discussion_r237332194\r\n\r\nEssentially, get_range_edges only accounts for the resultant labels, not the actual bins being aggregated. So the bins edges need to be shifted to reflect the base parameter.",
        "createdAt" : "2018-12-12T15:54:11Z",
        "updatedAt" : "2018-12-13T13:43:26Z",
        "lastEditedBy" : "e6997dda-cb4e-47c5-b0f9-6ed953879858",
        "tags" : [
        ]
      }
    ],
    "commit" : "c234cac9572f63161ea93645300cc53030a621d2",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1557,1561 @@                                                   base=self.base)\n\n            # Get offset for bin edge (not label edge) adjustment\n            start_offset = (pd.Period(start, self.freq)\n                            - pd.Period(p_start, self.freq))"
  },
  {
    "id" : "8348afe4-8f95-4c73-953f-b08acce35375",
    "prId" : 24604,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24604#pullrequestreview-189465482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de685955-83d2-47c7-9f18-9cf43fe77c17",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, maybe should have ``.asfreq()`` on the other indices?",
        "createdAt" : "2019-01-04T14:12:53Z",
        "updatedAt" : "2019-01-04T14:13:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a11f7796-fcfc-422b-817a-39aadbad722d",
        "parentId" : "de685955-83d2-47c7-9f18-9cf43fe77c17",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I briefly thought about that. I *think* it'll only be useful for going from a DTI without and `freq` to a DTI with a freq. Changing from one freq to another doesn't really make sense for DTI or TDI.",
        "createdAt" : "2019-01-04T14:15:18Z",
        "updatedAt" : "2019-01-04T14:15:18Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "2e305752-cb1b-491f-af50-03317b32ac0b",
        "parentId" : "de685955-83d2-47c7-9f18-9cf43fe77c17",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@jbrockmendel thoughts here?",
        "createdAt" : "2019-01-04T14:17:24Z",
        "updatedAt" : "2019-01-04T14:17:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "12ce00f8-e141-489e-a22a-a6e312c68949",
        "parentId" : "de685955-83d2-47c7-9f18-9cf43fe77c17",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It isn't immediately obvious what DTI.asfreq means.  Is the motivation just to avoid the need for checks like this?",
        "createdAt" : "2019-01-04T16:12:02Z",
        "updatedAt" : "2019-01-04T16:12:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "43bf7e38-b77c-4903-866f-ee82565ccc4a",
        "parentId" : "de685955-83d2-47c7-9f18-9cf43fe77c17",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes",
        "createdAt" : "2019-01-04T16:14:14Z",
        "updatedAt" : "2019-01-04T16:14:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5f04225d-0ef6-41b5-887c-7615bf14a4f4",
        "parentId" : "de685955-83d2-47c7-9f18-9cf43fe77c17",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Definitely skeptical of making a public method that is that ambiguous.  If this pattern is repeated a lot then a private method to this effect might be an easier sell.",
        "createdAt" : "2019-01-04T16:21:15Z",
        "updatedAt" : "2019-01-04T16:21:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "54ef6ae9-a474-4409-9db2-8a691087cae1",
        "parentId" : "de685955-83d2-47c7-9f18-9cf43fe77c17",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Given that there's only 1 place in pandas, (and 2 in the tests), I'd prefer to leave this as is rather than define a new method.",
        "createdAt" : "2019-01-04T17:52:29Z",
        "updatedAt" : "2019-01-04T17:52:29Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "88275336-4481-41ae-b0d7-c8748e0d5473",
        "parentId" : "de685955-83d2-47c7-9f18-9cf43fe77c17",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah ok, just trying to avoid special cases.",
        "createdAt" : "2019-01-04T17:56:06Z",
        "updatedAt" : "2019-01-04T17:56:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "776aa90010b568ff753905b92f0e648d6fcdff7f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +406,410 @@            obj = self.obj\n            if isinstance(obj.index, PeriodIndex):\n                result.index = obj.index.asfreq(self.freq)\n            else:\n                result.index = obj.index._shallow_copy(freq=self.freq)"
  },
  {
    "id" : "39cb9f96-1482-44bc-aefb-22a4b0ac1cc3",
    "prId" : 26398,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26398#pullrequestreview-238122677",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ced15af-5674-441a-8026-a9ba962cac4e",
        "parentId" : null,
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "This file has a set of mismatched signatures that's much more involved to bring into alignment that the ones we did in other PRs.\r\n\r\n# `_upsample`\r\n`DatetimeIndexResampler` and `Resampler` both define an `_upsample` method. The two signatures are only marginally different and could be harmonized easily. But `_GroupByMixin` defines an `_apply` method that is significantly different and then assigns that method to the class's `_upsample` variable (as well as `_downsample` and `_groupby_and_aggregate`).\r\n\r\n# `_downsample`\r\n`_downsample has similar relationships between `PeriodIndexResampler`, `DatetimeIndexResampler`, and `_GroupByMixin`.\r\n\r\n# `_groupby_and_aggregate`\r\n`_groupby_and_aggregate` has similar relationships between `Resampler` and `_GroupByMixin`.\r\n\r\nSome parts of the `_apply` signature appear to be unused in this file. I'm investigating how much mucking around I can do with them. It might be possible to bring them all in alignment.",
        "createdAt" : "2019-05-14T22:41:30Z",
        "updatedAt" : "2019-05-14T22:44:33Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      },
      {
        "id" : "a47de917-6d53-4261-bbb0-05c6b3d3c1a1",
        "parentId" : "1ced15af-5674-441a-8026-a9ba962cac4e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "@gwrome there is lots of magic to make grouby/resample/rolling play nicely. But can of course do this another time.",
        "createdAt" : "2019-05-15T23:46:33Z",
        "updatedAt" : "2019-05-15T23:46:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1abd09967397af331b51169e46a57f401d7b10cf",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +966,970 @@        self.groupby = copy.copy(parent.groupby)\n\n    @no_type_check\n    def _apply(self, f, grouper=None, *args, **kwargs):\n        \"\"\""
  },
  {
    "id" : "e9f88fb8-6a41-4351-8b5f-68a0cb48d188",
    "prId" : 28459,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28459#pullrequestreview-302525381",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85b1db7e-6e27-40b8-8c67-1b808431013e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so we already have count and size defined in groupby on the appropriate objects, see pandas/core/groupby/generic.py\r\n\r\nbut now we end up re-writing them here. Can you see if there is a way to combine these?",
        "createdAt" : "2019-09-17T22:19:35Z",
        "updatedAt" : "2019-11-19T08:36:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9a5fb1e3-6a8e-45a8-9b37-d41f0bc29364",
        "parentId" : "85b1db7e-6e27-40b8-8c67-1b808431013e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea agreed on this comment. This will add a third `count` implementation for classes that subclass `_GroupBy` (`SeriesGroupBy` and `DataFrameGroupBy` each have their own)\r\n\r\nDo you see any way to consolidate?",
        "createdAt" : "2019-09-19T16:05:36Z",
        "updatedAt" : "2019-11-19T08:36:10Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "506ce54a-adb0-4df4-a0fa-bbbfb2bf7028",
        "parentId" : "85b1db7e-6e27-40b8-8c67-1b808431013e",
        "authorId" : "be75e195-4820-4c8a-86f3-b3bbf6df9e90",
        "body" : "I'm not sure there's much to share between this implementation and the other ones.",
        "createdAt" : "2019-09-19T20:31:06Z",
        "updatedAt" : "2019-11-19T08:36:10Z",
        "lastEditedBy" : "be75e195-4820-4c8a-86f3-b3bbf6df9e90",
        "tags" : [
        ]
      },
      {
        "id" : "2b4b08ba-67a9-490c-bf37-c35cd8d8e6e8",
        "parentId" : "85b1db7e-6e27-40b8-8c67-1b808431013e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Hmm OK. Would definitely take this as a follow up to refactor - having three different implementations for objects deriving from the same base class is less than ideal",
        "createdAt" : "2019-09-20T14:37:08Z",
        "updatedAt" : "2019-11-19T08:36:10Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "77b69ac7-ea3d-4c75-bab2-c9b52958b0b0",
        "parentId" : "85b1db7e-6e27-40b8-8c67-1b808431013e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "pls combine these; we don't need both paths; these are the same. if some tests need changing because the behavior changed, then pls do this.",
        "createdAt" : "2019-10-16T12:13:40Z",
        "updatedAt" : "2019-11-19T08:36:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4e668e854f9fc304e0c2572a8772458bc55500",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +874,878 @@            from pandas import Series\n\n            if self._selected_obj.ndim == 1:\n                name = self._selected_obj.name\n            else:"
  },
  {
    "id" : "d7d39c78-f5fb-47cd-90ec-d1173c4dd4c8",
    "prId" : 28459,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28459#pullrequestreview-302465434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17c9f53a-0c13-4efe-932b-afb7f5d7d8d2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use self._selected_obj.__class__",
        "createdAt" : "2019-10-08T12:46:01Z",
        "updatedAt" : "2019-11-19T08:36:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a8328c76-16a2-4989-891f-863f32968cf5",
        "parentId" : "17c9f53a-0c13-4efe-932b-afb7f5d7d8d2",
        "authorId" : "be75e195-4820-4c8a-86f3-b3bbf6df9e90",
        "body" : "This changes does not work: it breaks unit tests where used with `DataFrame`:\r\n\r\n> TypeError: __init__() got an unexpected keyword argument 'name'\r\n\r\n",
        "createdAt" : "2019-10-09T19:07:08Z",
        "updatedAt" : "2019-11-19T08:36:10Z",
        "lastEditedBy" : "be75e195-4820-4c8a-86f3-b3bbf6df9e90",
        "tags" : [
        ]
      },
      {
        "id" : "e088ad27-0f0e-4805-9373-c4034cd365b8",
        "parentId" : "17c9f53a-0c13-4efe-932b-afb7f5d7d8d2",
        "authorId" : "be75e195-4820-4c8a-86f3-b3bbf6df9e90",
        "body" : "Is the idea is to be friendly with third party libraries which would ship alternative classes to `DataFrame`/`Series` (subclasses) in order to return the same type?\r\n\r\nThe proposed change would work OK when `self._selected_obj.ndim == 1` but it does not work for other `self._selected_obj.ndim > 1`: this is because this function is expected to return an object with `ndim == 1`. I'd need a way to get the related type where `ndim==1`. Is there a blessed way to do that?\r\n\r\n",
        "createdAt" : "2019-10-16T09:41:33Z",
        "updatedAt" : "2019-11-19T08:36:10Z",
        "lastEditedBy" : "be75e195-4820-4c8a-86f3-b3bbf6df9e90",
        "tags" : [
        ]
      },
      {
        "id" : "3779aa9a-32f2-4e7a-9fa2-51b6d25f33df",
        "parentId" : "17c9f53a-0c13-4efe-932b-afb7f5d7d8d2",
        "authorId" : "be75e195-4820-4c8a-86f3-b3bbf6df9e90",
        "body" : "I used `self._selected_obj.__class__ when `ndim==1`and `Series` otherwise.",
        "createdAt" : "2019-10-16T10:14:04Z",
        "updatedAt" : "2019-11-19T08:36:10Z",
        "lastEditedBy" : "be75e195-4820-4c8a-86f3-b3bbf6df9e90",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4e668e854f9fc304e0c2572a8772458bc55500",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +878,882 @@            else:\n                name = None\n            result = Series([], index=result.index, dtype=\"int64\", name=name)\n        return result\n"
  },
  {
    "id" : "19c289cf-609d-4f29-8498-306b065ee968",
    "prId" : 28459,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28459#pullrequestreview-302543080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9892009-2118-4b32-a65f-96bac56ba7a3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this should also be self._selected_obj.__class__ (use a temporary variable here to avoid repeating)",
        "createdAt" : "2019-10-16T12:15:09Z",
        "updatedAt" : "2019-11-19T08:36:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d2bf8ed2-13a7-49cb-b441-fc02d861662c",
        "parentId" : "b9892009-2118-4b32-a65f-96bac56ba7a3",
        "authorId" : "be75e195-4820-4c8a-86f3-b3bbf6df9e90",
        "body" : "OK for `count()`.\r\n\r\n> pls combine these; we don't need both paths; these are the same. if some tests need\r\n> changing because the behavior changed, then pls do this.\r\n\r\nThis comment is now displayed as revolved. Was it an error?\r\n\r\nAs for merging branches in `size()`, I don't think they can be significantly merged because:\r\n\r\n* in the `ndim==1` we should return `self._selected_obj.__class_` and pass the name;\r\n* in `ndim>1`, we should generate a type with `ndim==1` and we don't have a name to pass.\r\n\r\nThe only way to merge code between these paths would be to do something like:\r\n\r\n```pyhon\r\n@Appender(GroupBy.size.__doc__)\r\ndef size(self):\r\n    result = self._downsample(\"size\")\r\n    if not len(self.ax):        \r\n        from pandas import Series\r\n        if self._selected_obj.ndim == 1:\r\n            name = self._selected_obj.name\r\n            klass = self._selected_obj.__class__\r\n            kwargs = dict(name=name)\r\n        else:\r\n            klass = Series\r\n            kwargs = {}\r\n        result = klass([], index=result.index, dtype=\"int64\", **kwargs)\r\n    return result\r\n```\r\n\r\nWhich kind of behavior change would you expect?\r\n",
        "createdAt" : "2019-10-16T12:43:18Z",
        "updatedAt" : "2019-11-19T08:36:10Z",
        "lastEditedBy" : "be75e195-4820-4c8a-86f3-b3bbf6df9e90",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4e668e854f9fc304e0c2572a8772458bc55500",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +892,896 @@                from pandas import DataFrame\n\n                result = DataFrame(\n                    [], index=result.index, columns=result.columns, dtype=\"int64\"\n                )"
  },
  {
    "id" : "dfae8d49-2b73-431b-9351-17b1f69a63b4",
    "prId" : 28459,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28459#pullrequestreview-302591664",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a74aa518-0034-4dea-a149-c573245ab509",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is it possible to move this code change to make _downsample handle this better? I am harping on this because this is very duplicative (not your fault), but still want to avoid this if at all possible.",
        "createdAt" : "2019-10-16T12:50:25Z",
        "updatedAt" : "2019-11-19T08:36:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8aa4508e-de65-4543-a127-83b89bf703a7",
        "parentId" : "a74aa518-0034-4dea-a149-c573245ab509",
        "authorId" : "be75e195-4820-4c8a-86f3-b3bbf6df9e90",
        "body" : "The proper way do that, would be to remove all those \"empty length\" special cases. I tried to do that, removing this snippet of `DatetimeIndexResampler._downsample()`:\r\n\r\n```python\r\nif not len(ax):\r\n    # reset to the new freq\r\n    obj = obj.copy()\r\n    obj.index.freq = self.freq\r\n    return obj\r\n```\r\n\r\nbut this then triggers other empty-data problems down the stack (such as the block manager layer which I currently don't really understand).\r\n\r\nI'll try to look at it further.",
        "createdAt" : "2019-10-16T13:51:54Z",
        "updatedAt" : "2019-11-19T08:36:10Z",
        "lastEditedBy" : "be75e195-4820-4c8a-86f3-b3bbf6df9e90",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4e668e854f9fc304e0c2572a8772458bc55500",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +880,884 @@            result = Series([], index=result.index, dtype=\"int64\", name=name)\n        return result\n\n    @Appender(GroupBy.count.__doc__)\n    def count(self):"
  }
]