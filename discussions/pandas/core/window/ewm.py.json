[
  {
    "id" : "0853a71a-3d52-47b0-8fe9-307ada9d0f37",
    "prId" : 32212,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32212#pullrequestreview-365196365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef9485ed-b7d8-4f69-8490-2e3354d879df",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Is this change in the formula based on the code?",
        "createdAt" : "2020-02-26T19:23:20Z",
        "updatedAt" : "2020-03-07T18:39:03Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "bc5f9b9b-2db3-490e-a8c1-1855c89f1b61",
        "parentId" : "ef9485ed-b7d8-4f69-8490-2e3354d879df",
        "authorId" : "a8c84295-5321-4fae-9bd7-73e358b67c6f",
        "body" : "The code uses `1 - np.exp(np.log(0.5) / halflife)`.\r\nI just felt that `-ln(2)` is aesphetically more pleasing than `log(0.5)`.\r\nIt is typically presented like that: https://en.wikipedia.org/wiki/Exponential_decay",
        "createdAt" : "2020-02-26T19:47:26Z",
        "updatedAt" : "2020-03-07T18:39:03Z",
        "lastEditedBy" : "a8c84295-5321-4fae-9bd7-73e358b67c6f",
        "tags" : [
        ]
      },
      {
        "id" : "e31bb85f-d229-4290-a2b1-51d0647513da",
        "parentId" : "ef9485ed-b7d8-4f69-8490-2e3354d879df",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I don't have a preference, I was a bit confused about the change of the base of the logarithm. I think the original one can be misleading, I think it's possible to assume base 10.\r\n\r\nIn any case, your version looks good.",
        "createdAt" : "2020-02-26T19:53:48Z",
        "updatedAt" : "2020-03-07T18:39:03Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb5de6d451b00bab003d58ee0256478824602042",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +47,51 @@    halflife : float, optional\n        Specify decay in terms of half-life,\n        :math:`\\alpha = 1 - \\exp\\left(-\\ln(2) / halflife\\right)`, for\n        :math:`halflife > 0`.\n    alpha : float, optional"
  },
  {
    "id" : "7192b443-ea49-4169-95d3-96e8e8184568",
    "prId" : 34839,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34839#pullrequestreview-432776221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc87c2b1-5c24-4bd3-9a56-ffacf7d6a021",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add versionadded tag",
        "createdAt" : "2020-06-17T21:06:05Z",
        "updatedAt" : "2020-07-06T21:33:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1debd809d7b1406ed0ffd8711ad2957cc4e9a664",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +87,91 @@        If ``times`` is specified, the time unit (str or timedelta) over which an\n        observation decays to half its value. Only applicable to ``mean()``\n        and halflife value will not apply to the other functions.\n\n        .. versionadded:: 1.1.0"
  },
  {
    "id" : "8d31d294-a82c-41fb-ac37-6bcb543f3506",
    "prId" : 34839,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34839#pullrequestreview-432776221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "984d88e9-ead5-4423-b6b3-300f3e3e4575",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add versionadded ",
        "createdAt" : "2020-06-17T21:06:13Z",
        "updatedAt" : "2020-07-06T21:33:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1debd809d7b1406ed0ffd8711ad2957cc4e9a664",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +142,146 @@        ``datetime64[ns]`` dtype.\n\n        If str, the name of the column in the DataFrame representing the times.\n\n        If 1-D array like, a sequence with the same shape as the observations."
  },
  {
    "id" : "0a79d41f-7dfd-4c5d-b249-95b861889f64",
    "prId" : 34839,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34839#pullrequestreview-433830127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32dc4a24-56e2-4f72-885f-9f26be4f2818",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we need to do this?",
        "createdAt" : "2020-06-17T21:06:45Z",
        "updatedAt" : "2020-07-06T21:33:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9cdaefb1-cc44-46bd-b64c-686454364c0a",
        "parentId" : "32dc4a24-56e2-4f72-885f-9f26be4f2818",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "We want to avoid raising a ValueError in the center of mass calculation if the user only specifies half life which we want to disregard in this branch.",
        "createdAt" : "2020-06-19T06:23:53Z",
        "updatedAt" : "2020-07-06T21:33:06Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1debd809d7b1406ed0ffd8711ad2957cc4e9a664",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +232,236 @@            # Halflife is no longer applicable when calculating COM\n            # But allow COM to still be calculated if the user passes other decay args\n            if common.count_not_none(com, span, alpha) > 0:\n                self.com = get_center_of_mass(com, span, None, alpha)\n            else:"
  },
  {
    "id" : "cf746209-76ae-4780-b855-51ac1dd55d75",
    "prId" : 37091,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37091#pullrequestreview-509571190",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ec2556b-67e3-4ce7-b6e2-9ecd79dc4a28",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "for clarify should make this `wrap_result_1d`, but can be in the future",
        "createdAt" : "2020-10-15T16:40:17Z",
        "updatedAt" : "2020-10-15T16:40:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a68ab91bdebfeef070381a69acdf001dd9fe97c2",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +65,69 @@\n\ndef wrap_result(obj: \"Series\", result: np.ndarray) -> \"Series\":\n    \"\"\"\n    Wrap a single 1D result."
  },
  {
    "id" : "0d2419ae-4b08-4347-af82-b2a5b390787b",
    "prId" : 37878,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37878#pullrequestreview-532646147",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9e20b3c-e327-440a-9a8d-f4b0abf9e3e2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what is this added for?",
        "createdAt" : "2020-11-17T02:47:21Z",
        "updatedAt" : "2020-11-17T21:58:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "567305b6-b5aa-4ed3-8e55-cdfc710441f9",
        "parentId" : "a9e20b3c-e327-440a-9a8d-f4b0abf9e3e2",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "This is so `ExpandingMovingWindow` can accept the `groupby` object when a shallow copy is done on the object.\r\n\r\n`Rolling` and `Expanding` have similar need for **kwargs in the __init__.",
        "createdAt" : "2020-11-17T18:00:20Z",
        "updatedAt" : "2020-11-17T21:58:39Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3800f3f8c47ebdfac7c4e490e75b0ce87dcde78",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +232,236 @@        axis: int = 0,\n        times: Optional[Union[str, np.ndarray, FrameOrSeries]] = None,\n        **kwargs,\n    ):\n        self.obj = obj"
  },
  {
    "id" : "25231d67-d790-46df-ae7f-2f81c39cff91",
    "prId" : 38535,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38535#pullrequestreview-555142193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6faa356-d030-4643-bb64-76ec3eef8e57",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Could you add a test for this case? ",
        "createdAt" : "2020-12-17T17:38:06Z",
        "updatedAt" : "2020-12-18T04:12:58Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "f86f8ddb-be88-43a5-bbf2-c45ec4fd2de7",
        "parentId" : "f6faa356-d030-4643-bb64-76ec3eef8e57",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "double-checked and you're right we dont have any.  suggestions for what this might look like?",
        "createdAt" : "2020-12-17T23:56:18Z",
        "updatedAt" : "2020-12-18T04:12:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "152a09df-3dec-471c-9fca-657d5d32ca19",
        "parentId" : "f6faa356-d030-4643-bb64-76ec3eef8e57",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Something simple like\r\n\r\n```\r\nwith pytest.raises(ValueError, match=...):\r\n     Series(range(1)).ewm(com=0.1, times=to_datetime(['NaT'])))\r\n```\r\n\r\nworks.",
        "createdAt" : "2020-12-18T03:02:22Z",
        "updatedAt" : "2020-12-18T04:12:58Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "8322bc0bf6cdf7a12fef0e1b359e3baa4c462771",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +255,259 @@                )\n            if isna(times).any():\n                raise ValueError(\"Cannot convert NaT values to integer\")\n            self.times = np.asarray(times.view(np.int64))\n            self.halflife = Timedelta(halflife).value"
  },
  {
    "id" : "61e5ad2d-20d5-4c20-88ec-d41484e3f272",
    "prId" : 39219,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39219#pullrequestreview-571644756",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bfdc277-f144-4ff0-9dbd-6810696d5a05",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "we now have empty sections.\r\n\r\non master\r\n```\r\n>>> help(pd.core.window.ewm.ExponentialMovingWindow.mean)\r\nHelp on function mean in module pandas.core.window.ewm:\r\n\r\nmean(self, *args, **kwargs)\r\n    Exponential weighted moving average.\r\n\r\n    Parameters\r\n    ----------\r\n    *args, **kwargs\r\n        Arguments and keyword arguments to be passed into func.\r\n\r\n    Returns\r\n    -------\r\n    Series or DataFrame\r\n        Return type is determined by the caller.\r\n\r\n    See Also\r\n    --------\r\n    pandas.Series.ewm : Calling object with Series data.\r\n    pandas.DataFrame.ewm : Calling object with DataFrame data.\r\n    pandas.Series.mean : Similar method for Series.\r\n    pandas.DataFrame.mean : Similar method for DataFrame.\r\n\r\n>>>\r\n```\r\n\r\nin this PR\r\n```\r\n>>> help(pd.core.window.ewm.ExponentialMovingWindow.mean)\r\nHelp on function mean in module pandas.core.window.ewm:\r\n\r\nmean(self, *args, **kwargs)\r\n    Calculate the ewm (exponential weighted moment) mean.\r\n\r\n    Parameters\r\n    ----------\r\n\r\n    *args, **kwargs\r\n        For Numpy compatibility and has no effect on the computed value.\r\n\r\n    Returns\r\n    -------\r\n    Series or DataFrame\r\n        Return type is the same as the original object.\r\n\r\n    See Also\r\n    --------\r\n    pandas.Series.ewm : Calling ewm with Series data.\r\n    pandas.DataFrame.ewm : Calling ewm with DataFrames.\r\n    pandas.Series.mean : Aggregating mean for Series.\r\n    pandas.DataFrame.mean : Aggregating mean for DataFrame.\r\n\r\n    Notes\r\n    -----\r\n\r\n    Examples\r\n    --------\r\n\r\n>>>\r\n```",
        "createdAt" : "2021-01-19T16:58:31Z",
        "updatedAt" : "2021-01-28T07:33:18Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "d6417939-06b6-4a66-be03-a32142ce23fa",
        "parentId" : "7bfdc277-f144-4ff0-9dbd-6810696d5a05",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Right, but Sphinx _does_ correctly omit the empty sections\r\n\r\n<img width=\"1434\" alt=\"Screen Shot 2021-01-19 at 11 27 15 AM\" src=\"https://user-images.githubusercontent.com/10647082/105083131-5b8cd200-5a49-11eb-8440-64e9d671aaa0.png\">\r\n\r\nWould the empty sections be a dealbreaker? Otherwise, templating these doc strings does get a little trickier ",
        "createdAt" : "2021-01-19T19:29:31Z",
        "updatedAt" : "2021-01-28T07:33:18Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "689c5920-63f8-4fcc-a9f1-336034536d13",
        "parentId" : "7bfdc277-f144-4ff0-9dbd-6810696d5a05",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> Would the empty sections be a dealbreaker?\r\n\r\nnot at all. since the docstrings are dynamically generated, AFAIK ides generally cannot display the docstrings anyway.",
        "createdAt" : "2021-01-19T20:07:17Z",
        "updatedAt" : "2021-01-28T07:33:18Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "43de502d-6ae1-4ce0-9385-f4da41921c52",
        "parentId" : "7bfdc277-f144-4ff0-9dbd-6810696d5a05",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think it would be good to try to avoid those empty sections, though. Personally, I often look at docstrings in plain text (in ipython console, notebook, ..), so IMO the plain text look is also important.\r\n\r\nI think it should be possible to inject the title as well (and not have it in the base template)? Eg you can have a helper function to add the title to the actual content (if not empty) that can be called when passing in the content in the `@doc` decorator? ",
        "createdAt" : "2021-01-19T20:17:18Z",
        "updatedAt" : "2021-01-28T07:33:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "064b73a8-0e1b-4ea8-b6b6-6dae264d92a9",
        "parentId" : "7bfdc277-f144-4ff0-9dbd-6810696d5a05",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Eg something like `@doc(..., notes=_doc_notes(\"... note content...\")` where this function adds the header? (didn't try in practice, to be clear, so don't know how practical it is)",
        "createdAt" : "2021-01-19T20:19:19Z",
        "updatedAt" : "2021-01-28T07:33:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "82d368bd-7df1-42a3-ba73-9c9ab3e45ede",
        "parentId" : "7bfdc277-f144-4ff0-9dbd-6810696d5a05",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Okay sounds like I need to change my templating strategy overall then to omit these empty sections (which is fine)",
        "createdAt" : "2021-01-19T20:45:45Z",
        "updatedAt" : "2021-01-28T07:33:18Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c30c2669e493f293f47cc1eea16858c548d3a53",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +325,329 @@        aggregation_description=\"(exponential weighted moment) mean\",\n        agg_method=\"mean\",\n    )\n    def mean(self, *args, **kwargs):\n        nv.validate_window_func(\"mean\", args, kwargs)"
  },
  {
    "id" : "af42d056-ff1b-41fe-9631-38061a3a7e3c",
    "prId" : 39219,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39219#pullrequestreview-571645611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71eb3511-8b9d-46c2-af0e-56c6545529a7",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "no args here.\r\n\r\non master\r\n```\r\n    Parameters\r\n    ----------\r\n    other : Series, DataFrame, or ndarray, optional\r\n        If not supplied then will default to self and produce pairwise\r\n        output.\r\n    pairwise : bool, default None\r\n        If False then only matching columns between self and other will be\r\n        used and the output will be a DataFrame.\r\n        If True then all pairwise combinations will be calculated and the\r\n        output will be a MultiIndex DataFrame in the case of DataFrame\r\n        inputs. In the case of missing elements, only complete pairwise\r\n        observations will be used.\r\n    bias : bool, default False\r\n        Use a standard estimation bias correction.\r\n    **kwargs\r\n       Keyword arguments to be passed into func.\r\n```\r\n\r\nthis PR\r\n```\r\n    Parameters\r\n    ----------\r\n\r\n    other : Series, DataFrame, or ndarray, optional\r\n        If not supplied then will default to self and produce pairwise\r\n        output.\r\n    pairwise : bool, default None\r\n        If False then only matching columns between self and other will be\r\n        used and the output will be a DataFrame.\r\n        If True then all pairwise combinations will be calculated and the\r\n        output will be a MultiIndex DataFrame in the case of DataFrame\r\n        inputs. In the case of missing elements, only complete pairwise\r\n        observations will be used.\r\n    bias : bool, default False\r\n        Use a standard estimation bias correction.\r\n\r\n    *args, **kwargs\r\n        For Numpy compatibility and has no effect on the computed value.\r\n```",
        "createdAt" : "2021-01-19T17:40:47Z",
        "updatedAt" : "2021-01-28T07:33:18Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "6a20d858-cdcb-48ea-a823-eef1b4bcdf1b",
        "parentId" : "71eb3511-8b9d-46c2-af0e-56c6545529a7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "The explanation of `kwargs` is also quite different. The old \" Keyword arguments to be passed into func.\" was not correct I suppose?",
        "createdAt" : "2021-01-19T20:20:00Z",
        "updatedAt" : "2021-01-28T07:33:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e8b0cc32-d8ff-4486-8614-f0deac847b79",
        "parentId" : "71eb3511-8b9d-46c2-af0e-56c6545529a7",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Yeah `**kwargs` was supposed just exist for compatibility and didn't have an effect on how the result was calculated.",
        "createdAt" : "2021-01-19T20:46:56Z",
        "updatedAt" : "2021-01-28T07:33:18Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c30c2669e493f293f47cc1eea16858c548d3a53",
    "line" : 254,
    "diffHunk" : "@@ -1,1 +448,452 @@        bias: bool = False,\n        **kwargs,\n    ):\n        if other is None:\n            other = self._selected_obj"
  }
]