[
  {
    "id" : "a01fb8ef-bd10-4da7-ba96-fe710c46284e",
    "prId" : 27682,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27682#pullrequestreview-285595572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fbb670a-dd92-4017-bd01-abfc4ac0993c",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you add a `versionadded` for Window here? NDFrame.pipe and GroupBy.pipe should have an example.",
        "createdAt" : "2019-09-09T15:34:22Z",
        "updatedAt" : "2019-11-08T10:42:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c06f2b6c81e8682159b1a98fbd33271ca0dce28b",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +634,638 @@    _shared_docs[\"var\"] = dedent(\n        \"\"\"\n    Calculate unbiased %(name)s variance.\n    %(versionadded)s\n    Normalized by N-1 by default. This can be changed using the `ddof`"
  },
  {
    "id" : "29265202-b4d6-4e11-aa5e-61df012e7c80",
    "prId" : 28297,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28297#pullrequestreview-302168373",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d430802b-3380-4b17-a9d4-a6223ebe4aa6",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Surprised this doesn't match the previous definition of just `is_monotonic`. Would welcome that as a follow up to align the logic",
        "createdAt" : "2019-10-11T22:21:24Z",
        "updatedAt" : "2019-10-19T20:11:02Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "59c987d0-211b-46c7-8c74-5cd0dfead5fa",
        "parentId" : "d430802b-3380-4b17-a9d4-a6223ebe4aa6",
        "authorId" : "2c23abce-829f-478d-a108-e7b7cc34173c",
        "body" : "You mean updating `is_monotonic` to return True also for monotonic decreasing? I tried that, but some of its callers rely on the fact that the sequence is also increasing and many tests failed afterwards. So I would rather not do that, especially not in this PR.",
        "createdAt" : "2019-10-15T20:13:59Z",
        "updatedAt" : "2019-10-19T20:11:02Z",
        "lastEditedBy" : "2c23abce-829f-478d-a108-e7b7cc34173c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b46dc504c715ecc3ea7d81240eb0a8bb4e0c441",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +1710,1714 @@        Validate monotonic (increasing or decreasing).\n        \"\"\"\n        if not (self._on.is_monotonic_increasing or self._on.is_monotonic_decreasing):\n            formatted = self.on\n            if self.on is None:"
  },
  {
    "id" : "063cf35a-0b3f-4c6b-9073-c7eb889e36bb",
    "prId" : 28297,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28297#pullrequestreview-304036716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57928a5a-0d99-40f4-8195-917bdf3067dc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update the doc-string (and type annoation if its there) for on in Rolling",
        "createdAt" : "2019-10-18T17:36:31Z",
        "updatedAt" : "2019-10-19T20:11:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b46dc504c715ecc3ea7d81240eb0a8bb4e0c441",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +1664,1668 @@            raise ValueError(\n                \"invalid on specified as {0}, \"\n                \"must be a column (of DataFrame), an Index \"\n                \"or None\".format(self.on)\n            )"
  },
  {
    "id" : "1ca6ede0-8aad-4739-99ee-c60e80f1cf76",
    "prId" : 29428,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29428#pullrequestreview-320684208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22cf12eb-755c-41bc-ad03-ed130f3a87e5",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "what happens here if the user passes a weird value for require_min_periods?",
        "createdAt" : "2019-11-21T00:49:03Z",
        "updatedAt" : "2019-11-21T07:43:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "328ac7b7-41b1-4728-86af-1bef95fd2003",
        "parentId" : "22cf12eb-755c-41bc-ad03-ed130f3a87e5",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "`require_min_periods` is effectively an internal variable and shouldn't be expected from an external API. I need to pop here because of kwargs passed from other `super` calls.",
        "createdAt" : "2019-11-21T07:34:46Z",
        "updatedAt" : "2019-11-21T07:43:56Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "09ae25806962eee488499d12ffa5f76393bc041c",
    "line" : 407,
    "diffHunk" : "@@ -1,1 +1456,1460 @@    def kurt(self, **kwargs):\n        window_func = self._get_cython_func_type(\"roll_kurt\")\n        kwargs.pop(\"require_min_periods\", None)\n        return self._apply(\n            window_func,"
  },
  {
    "id" : "1bb0833e-e078-4582-960e-a3ecf9e68667",
    "prId" : 29428,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29428#pullrequestreview-323015928",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02b5627b-b9f1-47c9-879e-b0e32c65b1c3",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "mypy error: `\"partial\" gets multiple values for keyword argument \"func\"`",
        "createdAt" : "2019-11-25T11:23:23Z",
        "updatedAt" : "2019-11-25T11:23:23Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "96008d16-04f8-45c7-b596-60a2dd8eee7b",
        "parentId" : "02b5627b-b9f1-47c9-879e-b0e32c65b1c3",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "What version of mypy raises this? I get this with 0.740\r\n\r\n```\r\n(pandas-dev) matthewroeschke:pandas-mroeschke matthewroeschke$ mypy pandas\r\npandas/core/indexes/frozen.py:112: error: Incompatible types in assignment (expression has type \"Callable[[FrozenList, VarArg(Any), KwArg(Any)], Any]\", base class \"list\" defined the type as overloaded function)\r\npandas/core/indexes/frozen.py:112: error: Incompatible types in assignment (expression has type \"Callable[[FrozenList, VarArg(Any), KwArg(Any)], Any]\", base class \"list\" defined the type as \"Callable[[List[Any], Union[int, slice]], None]\")\r\npandas/core/indexes/frozen.py:113: error: Incompatible types in assignment (expression has type \"Callable[[FrozenList, VarArg(Any), KwArg(Any)], Any]\", base class \"list\" defined the type as \"Callable[[List[Any], int], Any]\")\r\npandas/core/indexes/frozen.py:113: error: Incompatible types in assignment (expression has type \"Callable[[FrozenList, VarArg(Any), KwArg(Any)], Any]\", base class \"list\" defined the type as \"Callable[[List[Any], Any], None]\")\r\npandas/core/indexes/frozen.py:113: error: Incompatible types in assignment (expression has type \"Callable[[FrozenList, VarArg(Any), KwArg(Any)], Any]\", base class \"list\" defined the type as \"Callable[[List[Any], Iterable[Any]], None]\")\r\npandas/core/indexes/frozen.py:113: error: Incompatible types in assignment (expression has type \"Callable[[FrozenList, VarArg(Any), KwArg(Any)], Any]\", base class \"list\" defined the type as \"Callable[[List[Any], DefaultNamedArg(Optional[Callable[[Any], Any]], 'key'), DefaultNamedArg(bool, 'reverse')], None]\")\r\nFound 6 errors in 1 file (checked 807 source files)\r\n```",
        "createdAt" : "2019-11-26T05:23:51Z",
        "updatedAt" : "2019-11-26T05:23:52Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "9e3b1dd7-dc0a-422d-a9fd-5ee83681aa2f",
        "parentId" : "02b5627b-b9f1-47c9-879e-b0e32c65b1c3",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "i'm getting that error on 0.740 with --check-untyped-defs (on https://github.com/pandas-dev/pandas/pull/28339)\r\n\r\nThe problem is that the required argument for partial is named func, so I assume you can't also pass func as a keyword argument.\r\n\r\n`functools.partial(func, /, *args, **keywords)`\r\n\r\nEDIT: 0.730 -> 0.740",
        "createdAt" : "2019-11-26T11:30:37Z",
        "updatedAt" : "2019-11-26T11:36:08Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "9ca22104-6239-44b8-9fb7-e2967b3fc4ff",
        "parentId" : "02b5627b-b9f1-47c9-879e-b0e32c65b1c3",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "looking into this further, I _think_ this is a false positive from mypy.\r\n\r\nthe `__new__` of class partial seems to be able to handle this use case. testing with a minimum examples doesn't seem to break. so it appears that it is a typeshed issue.",
        "createdAt" : "2019-11-26T14:22:18Z",
        "updatedAt" : "2019-11-26T14:22:18Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "09ae25806962eee488499d12ffa5f76393bc041c",
    "line" : 272,
    "diffHunk" : "@@ -1,1 +1243,1247 @@            raw=raw,\n            offset=offset,\n            func=func,\n        )\n"
  },
  {
    "id" : "9041b3cb-b913-4fe2-8dd5-a77565544e12",
    "prId" : 29829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29829#pullrequestreview-322524585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33e13b97-ed44-40a7-b3d1-2ffe50581def",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can this now be annotated?\r\n\r\nDoesnt have to be for this PR, but kwargs should be changed to not have a mutable default",
        "createdAt" : "2019-11-25T16:01:03Z",
        "updatedAt" : "2019-11-25T16:01:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7e6cb954-494d-4bdb-bb14-67a89f3e985c",
        "parentId" : "33e13b97-ed44-40a7-b3d1-2ffe50581def",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "I can do both in a follow up.\r\n\r\nAgreed that this should be `kwargs=None`. The docstring is misleading as well since it says apply takes `**kwargs` so reason enough for a cleanup + full change here.",
        "createdAt" : "2019-11-25T19:29:49Z",
        "updatedAt" : "2019-11-25T19:29:49Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "59b93e018372b61434d7c56cd06a6fdd09834405",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1210,1214 @@    )\n\n    def apply(self, func, raw=False, args=(), kwargs={}):\n        from pandas import Series\n"
  },
  {
    "id" : "d217dbbe-b99c-46fb-aa62-d18b7e9d65ea",
    "prId" : 29878,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29878#pullrequestreview-325912231",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fa86fbb-3522-4699-b31f-8ef2ad36d90f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do these outside of the function? (as they don't depend on anything inside) and makes logic simpler",
        "createdAt" : "2019-12-02T13:16:53Z",
        "updatedAt" : "2019-12-04T21:56:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b158147a-6134-4503-8a1e-d6c23e4ea8e9",
        "parentId" : "3fa86fbb-3522-4699-b31f-8ef2ad36d90f",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "These both depend on `x` after the `nan`s are appended from the `center` calculation.\r\n`x = np.concatenate((x, additional_nans))`",
        "createdAt" : "2019-12-03T06:09:34Z",
        "updatedAt" : "2019-12-04T21:56:53Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ce1967bf6298e53c5cb1483774aaa1e138d7d30",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +501,505 @@                    x = np.concatenate((x, additional_nans))\n                    if not isinstance(window, BaseIndexer):\n                        min_periods = calculate_min_periods(\n                            window, self.min_periods, len(x), require_min_periods, floor\n                        )"
  },
  {
    "id" : "064819fb-bba8-42c8-bfdd-a8297b340bba",
    "prId" : 29878,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29878#pullrequestreview-326882326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e90c96d-e79a-4bd5-9b47-bd05814cff00",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can just set is_monotonic_bounds=np.any(.......)\r\n\r\nand pass that in line 482",
        "createdAt" : "2019-12-02T13:17:47Z",
        "updatedAt" : "2019-12-04T21:56:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3b5088d4-9e6e-4206-a60d-13019a29104e",
        "parentId" : "5e90c96d-e79a-4bd5-9b47-bd05814cff00",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Will need to add `is_monotonic_bounds` as an argument to all the \"fixed\" functions in Cython (didn't include them originally since the \"fixed\" function doesn't need this argument), but I suppose that makes this cleaner.",
        "createdAt" : "2019-12-03T06:12:36Z",
        "updatedAt" : "2019-12-04T21:56:53Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "52e1520f-cdbd-4d43-895e-a21e4ffc10d4",
        "parentId" : "5e90c96d-e79a-4bd5-9b47-bd05814cff00",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Actually I cannot easily modify this yet without another refactor. `func` here isn't always a cython function that could accept `is_monotonic_bounds`; sometimes it's a python wrapped function like `apply_func` or `_zqrt`. I can look into this in another refactor.",
        "createdAt" : "2019-12-03T06:39:29Z",
        "updatedAt" : "2019-12-04T21:56:53Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "620b1a59-9c8e-4d38-9f20-6386f2cdcfe5",
        "parentId" : "5e90c96d-e79a-4bd5-9b47-bd05814cff00",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k, followup is ok",
        "createdAt" : "2019-12-04T14:23:52Z",
        "updatedAt" : "2019-12-04T21:56:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ce1967bf6298e53c5cb1483774aaa1e138d7d30",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +518,522 @@                        closed=self.closed,\n                    )\n                    if np.any(np.diff(start) < 0) or np.any(np.diff(end) < 0):\n                        # Our \"variable\" algorithms assume start/end are\n                        # monotonically increasing. A custom window indexer"
  },
  {
    "id" : "99e860c0-d297-42de-b71b-fd47ec7da1db",
    "prId" : 30137,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30137#pullrequestreview-328625640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37d1cc29-6b89-4441-bbfd-50f6bb96916e",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "If possible to add subtypes to `Callable` typically very helpful",
        "createdAt" : "2019-12-08T00:42:22Z",
        "updatedAt" : "2019-12-09T03:49:23Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "f860beab-d209-4e03-aa2d-963904ba5915",
        "parentId" : "37d1cc29-6b89-4441-bbfd-50f6bb96916e",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Unfortunately the arguments to the cython functions for rolling are still not entirely uniform so the argument list can't be typed consistently. ",
        "createdAt" : "2019-12-08T18:56:44Z",
        "updatedAt" : "2019-12-09T03:49:23Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "674894a68e9577a6f8d0e6bf5ba130ba19009876",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +413,417 @@        return window_func\n\n    def _get_cython_func_type(self, func: str) -> Callable:\n        \"\"\"\n        Return a variable or fixed cython function type."
  },
  {
    "id" : "98150b3b-bc5e-44fc-ae75-409afd672ada",
    "prId" : 30151,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30151#pullrequestreview-330333993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cecf82c-e70e-4530-ba74-d00d56030ed3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "test coverage for this?",
        "createdAt" : "2019-12-10T12:44:54Z",
        "updatedAt" : "2019-12-26T18:15:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "94fb3acb-f0a2-4d2d-8be3-fd02835c5f3d",
        "parentId" : "8cecf82c-e70e-4530-ba74-d00d56030ed3",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Yup here: https://github.com/pandas-dev/pandas/pull/30151/files#diff-ec0ad82c276c1d0caa9df6105adb8cd7R354",
        "createdAt" : "2019-12-11T07:11:42Z",
        "updatedAt" : "2019-12-26T18:15:50Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3da51eb3a301b8fdcf6991c5ea091d206ab21b8",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +1314,1318 @@        if engine == \"cython\":\n            if engine_kwargs is not None:\n                raise ValueError(\"cython engine does not accept engine_kwargs\")\n            apply_func = self._generate_cython_apply_func(\n                args, kwargs, raw, offset, func"
  },
  {
    "id" : "c1841d90-6e68-40ae-b641-07bbb734e803",
    "prId" : 30151,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30151#pullrequestreview-335854524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d156415-f952-4ec1-8c76-c12cfc3fa30e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versionchanged",
        "createdAt" : "2019-12-23T13:21:45Z",
        "updatedAt" : "2019-12-26T18:15:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3da51eb3a301b8fdcf6991c5ea091d206ab21b8",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +1241,1245 @@    func : function\n        Must produce a single value from an ndarray input if ``raw=True``\n        or a single value from a Series if ``raw=False``. Can also accept a\n        Numba JIT function with ``engine='numba'`` specified.\n"
  },
  {
    "id" : "7e5b98e1-d7be-49e7-8ff1-538a9c30807c",
    "prId" : 30151,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30151#pullrequestreview-335854524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea73cf58-bc1a-4b48-b715-58583e7038b9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add versionadded tags",
        "createdAt" : "2019-12-23T13:21:53Z",
        "updatedAt" : "2019-12-26T18:15:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3da51eb3a301b8fdcf6991c5ea091d206ab21b8",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +1253,1257 @@          If you are just applying a NumPy reduction function this will\n          achieve much better performance.\n    engine : str, default 'cython'\n        * ``'cython'`` : Runs rolling apply through C-extensions from cython.\n        * ``'numba'`` : Runs rolling apply through JIT compiled code from numba."
  },
  {
    "id" : "1e62bdc2-7fc3-4f9f-ae3b-0f9128aee1a6",
    "prId" : 30151,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30151#pullrequestreview-336052286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32ccf2ea-dff3-4eb7-b1be-adac0aaa72ca",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can these be in the signature?",
        "createdAt" : "2019-12-23T13:22:17Z",
        "updatedAt" : "2019-12-26T18:15:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bd99b0b5-9aab-4bcd-85ad-e3df95919def",
        "parentId" : "32ccf2ea-dff3-4eb7-b1be-adac0aaa72ca",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "I think it's not recommended to have mutable default kwargs (the empty dict in `kwargs`), so for symmetry it's nice to default them to `None`",
        "createdAt" : "2019-12-24T01:19:10Z",
        "updatedAt" : "2019-12-26T18:15:50Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3da51eb3a301b8fdcf6991c5ea091d206ab21b8",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +1301,1305 @@        kwargs: Optional[Dict] = None,\n    ):\n        if args is None:\n            args = ()\n        if kwargs is None:"
  },
  {
    "id" : "6995a2ac-4a8d-428b-a35c-d2394843c354",
    "prId" : 30151,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30151#pullrequestreview-336052504",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75656129-8034-45b2-bf0e-08faf4c6326b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "might be worth factoring this out to cython_? \r\n\r\nI know not much code, but conceptually",
        "createdAt" : "2019-12-23T13:34:25Z",
        "updatedAt" : "2019-12-26T18:15:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "970bc4cf-4a0c-4332-9dcb-deb2071b1068",
        "parentId" : "75656129-8034-45b2-bf0e-08faf4c6326b",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "There's some other cython specific routines (like `_get_cython_func_type`) on `Rolling` that I can look to move to a `cython_.py` file in a followup",
        "createdAt" : "2019-12-24T01:20:34Z",
        "updatedAt" : "2019-12-26T18:15:50Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3da51eb3a301b8fdcf6991c5ea091d206ab21b8",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +1341,1345 @@        )\n\n    def _generate_cython_apply_func(self, args, kwargs, raw, offset, func):\n        from pandas import Series\n"
  },
  {
    "id" : "8cbccec2-87fa-4717-bd30-12f55e03d469",
    "prId" : 30151,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30151#pullrequestreview-336279859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6f53bde-5d8f-48d4-9bfd-33dd928d51ab",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "does the TODO here need to get resolved before merging?  can the commented-out line be removed?",
        "createdAt" : "2019-12-25T00:16:43Z",
        "updatedAt" : "2019-12-26T18:15:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8da0d56c-ddd3-4ae8-9833-a75a72d01245",
        "parentId" : "f6f53bde-5d8f-48d4-9bfd-33dd928d51ab",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "oh i see this is just moved up from a few lines down, never mind",
        "createdAt" : "2019-12-25T00:17:13Z",
        "updatedAt" : "2019-12-26T18:15:50Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3da51eb3a301b8fdcf6991c5ea091d206ab21b8",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +1332,1336 @@\n        # TODO: Why do we always pass center=False?\n        # name=func for WindowGroupByMixin._apply\n        return self._apply(\n            apply_func,"
  },
  {
    "id" : "022735e9-3c0b-432b-bf10-75f99de2341e",
    "prId" : 30151,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30151#pullrequestreview-336583671",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eca44a06-ad51-4f1c-8408-0816f089ae4d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "In a followup (make an issue if you want), can you add some examples here",
        "createdAt" : "2019-12-26T13:15:31Z",
        "updatedAt" : "2019-12-26T18:15:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "36d336d5-5cfd-41e2-8b13-207662b41654",
        "parentId" : "eca44a06-ad51-4f1c-8408-0816f089ae4d",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Sure thing. The ``` :ref:`stats.rolling_apply` ``` has an example for the time being.",
        "createdAt" : "2019-12-26T18:14:37Z",
        "updatedAt" : "2019-12-26T18:15:50Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3da51eb3a301b8fdcf6991c5ea091d206ab21b8",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +1273,1277 @@        Positional arguments to be passed into func.\n    kwargs : dict, default None\n        Keyword arguments to be passed into func.\n\n    Returns"
  },
  {
    "id" : "be6bce58-1407-44eb-af1b-e7a27aefae86",
    "prId" : 33057,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33057#pullrequestreview-382940095",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d31cfcab-9a19-4570-ab3b-017adb8facfc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make this a common method, e.g.\r\n```self.validate_support_of_indexer()```",
        "createdAt" : "2020-03-27T15:03:22Z",
        "updatedAt" : "2020-03-28T20:52:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "71a5db1818500720664e78ec0b93b941d3432c32",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1176,1180 @@\n    def count(self):\n        if isinstance(self.window, BaseIndexer):\n            validate_baseindexer_support(\"count\")\n"
  },
  {
    "id" : "ab6caae6-3482-4e44-82b0-33131eb5417d",
    "prId" : 33605,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33605#pullrequestreview-395222371",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5d06708-71d9-4cd3-941a-a14fa36809c9",
        "parentId" : null,
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "This is the crux of the issue. Because we didn't check for `BaseIndexer` subclass here, the algorithm went down the default path, and the `BaseIndexer` implementation got completely ignored as blocks were created using `_Window.create_blocks`.",
        "createdAt" : "2020-04-17T07:29:57Z",
        "updatedAt" : "2020-04-17T15:20:28Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "12fc3b372b3a235c211a2506c7f744cf4ec535ed",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1943,1947 @@        # GH 32865. Use a custom count function implementation\n        # when using a BaseIndexer subclass as a window\n        if self.is_freq_type or isinstance(self.window, BaseIndexer):\n            window_func = self._get_roll_func(\"roll_count\")\n            return self._apply(window_func, center=self.center, name=\"count\")"
  },
  {
    "id" : "2ab0825c-1a89-4c92-91ce-57197743b48c",
    "prId" : 33804,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33804#pullrequestreview-400679347",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4122742-759b-40b9-9bbc-6e920fce72fd",
        "parentId" : null,
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "Fix for `corr`.",
        "createdAt" : "2020-04-26T13:37:33Z",
        "updatedAt" : "2020-04-27T09:40:34Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      },
      {
        "id" : "888debf9-03f8-4d79-be22-c035f8bf719d",
        "parentId" : "f4122742-759b-40b9-9bbc-6e920fce72fd",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here and on cov explaining what e are doing (generally not specific to BaseIndexer)",
        "createdAt" : "2020-04-26T20:51:15Z",
        "updatedAt" : "2020-04-27T09:40:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3f3cfcc9-74ef-4d91-8265-b7efb50d4460",
        "parentId" : "f4122742-759b-40b9-9bbc-6e920fce72fd",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "@jreback Done. Please take a look if it's what you had in mind.",
        "createdAt" : "2020-04-27T07:10:31Z",
        "updatedAt" : "2020-04-27T09:40:34Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "771c2bcc378f2c228c00ac1bc048a6bf834c2236",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +1792,1796 @@            window = self.window\n        else:\n            window = self._get_window(other) if not self.is_freq_type else self.win_freq\n\n        def _get_corr(a, b):"
  },
  {
    "id" : "a65e8597-9af0-424d-a07f-5ca344cf5d20",
    "prId" : 33804,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33804#pullrequestreview-400505513",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "392749b0-948b-440e-ae5a-b61fc2b44d0c",
        "parentId" : null,
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "Fix for `cov`.",
        "createdAt" : "2020-04-26T13:37:51Z",
        "updatedAt" : "2020-04-27T09:40:34Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "771c2bcc378f2c228c00ac1bc048a6bf834c2236",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +1641,1645 @@        # window width, frequency data, or a BaseIndexer subclass\n        if isinstance(self.window, BaseIndexer):\n            window = self.window\n        else:\n            # GH 16058: offset window"
  },
  {
    "id" : "f8e19151-fcd0-4815-ab6b-8f7ed029ecf8",
    "prId" : 33804,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33804#pullrequestreview-401122048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3d52e0f-3d54-48c0-bbe3-d64198f75721",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "I _think_ this is what `def _get_window` is trying to accomplish. Can the fix not be applied there?",
        "createdAt" : "2020-04-27T03:19:00Z",
        "updatedAt" : "2020-04-27T09:40:34Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "4eecadef-b8ab-4080-8884-62668432f869",
        "parentId" : "b3d52e0f-3d54-48c0-bbe3-d64198f75721",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "@mroeschke \r\nI did some digging, and it looks like that isn't the intention behind `_get_window`. For example, its output is unconditionally used as input to this function:\r\n```python\r\ndef calculate_center_offset(window):\r\n    if not is_integer(window):\r\n        window = len(window)\r\n    return int((window - 1) / 2.0)\r\n```\r\nI think it's meant to only return an int. This is the version that gets called in our code (there is another one in `class Window` that returns an array of window weights, but that's irrelevant for our case):\r\n```python\r\n    def _get_window(self, other=None, win_type: Optional[str] = None) -> int:\r\n        \"\"\"\r\n        Return window length.\r\n\r\n        Parameters\r\n        ----------\r\n        other :\r\n            ignored, exists for compatibility\r\n        win_type :\r\n            ignored, exists for compatibility\r\n\r\n        Returns\r\n        -------\r\n        window : int\r\n        \"\"\"\r\n        if isinstance(self.window, BaseIndexer):\r\n            return self.min_periods or 0\r\n        return self.window\r\n```\r\n\r\nIn addition, we have `_get_window_indexer`, which can a bit confusing if we allow `_get_window` to return a `BaseIndexer` subclass. Overall, I'd rather leave `_get_window` alone for now.\r\n\r\nDoes that make sense? I've also added some comments to the code as per @jreback 's suggestion, so hopefully that helps clear things up.",
        "createdAt" : "2020-04-27T07:04:41Z",
        "updatedAt" : "2020-04-27T09:40:34Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      },
      {
        "id" : "c0bd1938-50ab-41cb-9108-0e3bdddafca6",
        "parentId" : "b3d52e0f-3d54-48c0-bbe3-d64198f75721",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Ah okay. Yeah the names of these helper functions can be a little vague. Changes look good.",
        "createdAt" : "2020-04-27T16:28:34Z",
        "updatedAt" : "2020-04-27T16:28:35Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "771c2bcc378f2c228c00ac1bc048a6bf834c2236",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +1640,1644 @@        # to the rolling constructors the data used when constructing self:\n        # window width, frequency data, or a BaseIndexer subclass\n        if isinstance(self.window, BaseIndexer):\n            window = self.window\n        else:"
  },
  {
    "id" : "6c1a9a75-9b0b-4374-8efa-fadc2629518e",
    "prId" : 33804,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33804#pullrequestreview-400676085",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "127d9764-e233-459a-8e05-e57dd042f410",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Same comment",
        "createdAt" : "2020-04-27T03:19:07Z",
        "updatedAt" : "2020-04-27T09:40:34Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "7b8589ac-f24a-4968-b5e7-5d1eac07242b",
        "parentId" : "127d9764-e233-459a-8e05-e57dd042f410",
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "See above.",
        "createdAt" : "2020-04-27T07:04:51Z",
        "updatedAt" : "2020-04-27T09:40:34Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "771c2bcc378f2c228c00ac1bc048a6bf834c2236",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +1789,1793 @@        # to the rolling constructors the data used when constructing self:\n        # window width, frequency data, or a BaseIndexer subclass\n        if isinstance(self.window, BaseIndexer):\n            window = self.window\n        else:"
  },
  {
    "id" : "165dd4e7-9649-4bb0-9c8e-01a028e61bcf",
    "prId" : 34052,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34052#pullrequestreview-413574735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4881d2fc-5ee0-4843-ab71-8f35094a5536",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string (includes window)",
        "createdAt" : "2020-05-18T13:15:24Z",
        "updatedAt" : "2020-05-21T04:47:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "93772c04268dbe16073d27a0320a4b8261662882",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +2182,2186 @@        -------\n        GroupbyRollingIndexer\n        \"\"\"\n        rolling_indexer: Union[Type[FixedWindowIndexer], Type[VariableWindowIndexer]]\n        if self.is_freq_type:"
  },
  {
    "id" : "1f666156-8760-4aee-99ba-4551ed5fd7c8",
    "prId" : 34052,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34052#pullrequestreview-414101139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7a11ca0-6161-46f9-a7f4-bfd0d05b5e17",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, is it not possible to use self._groupby.grouper.result_index",
        "createdAt" : "2020-05-18T13:19:02Z",
        "updatedAt" : "2020-05-21T04:47:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5e1ee597-b9b8-4644-b05d-fda032e24767",
        "parentId" : "f7a11ca0-6161-46f9-a7f4-bfd0d05b5e17",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Unfortunately it's not exactly what I need. Since we always need to construct a MultiIndex, it's not entirely useful in this situation\r\n\r\n```\r\nIn [1]:         df = pd.DataFrame({\"A\": [\"foo\"] * 3 + [\"bar\"] * 3, \"B\": [1] * 6})\r\n   ...:         g = df.groupby(\"A\")\r\n\r\nIn [2]: g.rolling(window=2).sum()\r\n/pandas/core/window/rolling.py(2128)_apply()\r\n-> grouped_object_index = self._groupby._selected_obj.index\r\n(Pdb) c\r\n/pandas/core/window/rolling.py(2147)_apply()\r\n-> return result\r\n(Pdb) self._groupby.grouper.result_index\r\nIndex(['bar', 'foo'], dtype='object', name='A')\r\n(Pdb) result_index\r\nMultiIndex([('bar', 3),\r\n            ('bar', 4),\r\n            ('bar', 5),\r\n            ('foo', 0),\r\n            ('foo', 1),\r\n            ('foo', 2)],\r\n           names=['A', None])\r\n```",
        "createdAt" : "2020-05-19T04:55:46Z",
        "updatedAt" : "2020-05-21T04:47:37Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "93772c04268dbe16073d27a0320a4b8261662882",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +2127,2131 @@        # Compose MultiIndex result from grouping levels then rolling level\n        # Aggregate the MultiIndex data as tuples then the level names\n        grouped_object_index = self._groupby._selected_obj.index\n        grouped_index_name = [grouped_object_index.name]\n        groupby_keys = [grouping.name for grouping in self._groupby.grouper._groupings]"
  },
  {
    "id" : "8148858d-b214-4b00-a7bd-38b5b37a20bb",
    "prId" : 34052,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34052#pullrequestreview-415676455",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b90af09-d96c-4a27-abe3-5a3170c1dbac",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if you can add some commments here on what you are doing",
        "createdAt" : "2020-05-20T20:09:26Z",
        "updatedAt" : "2020-05-21T04:47:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "93772c04268dbe16073d27a0320a4b8261662882",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +2132,2136 @@        result_index_names = groupby_keys + grouped_index_name\n\n        result_index_data = []\n        for key, values in self._groupby.grouper.indices.items():\n            for value in values:"
  },
  {
    "id" : "156cfa41-4c85-4f31-9223-8f99c7ad179a",
    "prId" : 35730,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35730#pullrequestreview-472064819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b785d223-bdfa-437c-9889-353e8874333d",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Question: Did we want to move away from `.values`? Should we use `to_numpy()` instead?",
        "createdAt" : "2020-08-20T23:34:53Z",
        "updatedAt" : "2020-08-22T22:00:39Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "67b2029b-62a1-4d07-956e-4e54178c8963",
        "parentId" : "b785d223-bdfa-437c-9889-353e8874333d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "We do, but doing that separately.  This PR is intended to keep behavior unchanged",
        "createdAt" : "2020-08-21T00:14:11Z",
        "updatedAt" : "2020-08-22T22:00:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b93dab8562db050d0f31d069fe7a1403eac3f82",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +508,512 @@        \"\"\"\n        _, obj = self._create_blocks(self._selected_obj)\n        values = obj.values\n\n        try:"
  },
  {
    "id" : "6da4d4aa-a3c3-4231-88cd-11476ecda3c1",
    "prId" : 35746,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35746#pullrequestreview-471760027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d53784f2-15b0-4e7d-8608-8032bd41e665",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@mroeschke can you comment on why we do this?",
        "createdAt" : "2020-08-18T22:05:51Z",
        "updatedAt" : "2020-08-18T22:05:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "96deb993-212a-4f16-99e8-ab3a63a0293d",
        "parentId" : "d53784f2-15b0-4e7d-8608-8032bd41e665",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "I haven't really touched `_wrap_results` much so can't really speak to why we do this. What's an example where this is overwriting results?",
        "createdAt" : "2020-08-20T06:12:26Z",
        "updatedAt" : "2020-08-20T06:12:27Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "3b6800d5-b82b-45db-bdbb-0bac4acbbd60",
        "parentId" : "d53784f2-15b0-4e7d-8608-8032bd41e665",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i dont have an example on hand, but can find one bc i know this line is covered by tests.  ATM im inclined to not-worry about it",
        "createdAt" : "2020-08-20T15:56:41Z",
        "updatedAt" : "2020-08-20T15:56:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c90cc4b3acd1127619b150b4b370c64f57cfa71",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +421,425 @@                df.insert(new_loc, name, extra_col)\n            elif name in df.columns:\n                # TODO: sure we want to overwrite results?\n                df[name] = extra_col\n        return df"
  },
  {
    "id" : "7731f235-819d-4db2-8cb3-e88c524d5cbe",
    "prId" : 35883,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35883#pullrequestreview-476322318",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53646891-05eb-425a-95ca-f145a32a8498",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "I was actually hoping that count could be defined in terms of `self._apply` so we can have less custom logic\r\n\r\n```\r\ndef count(self):\r\n    window_func = self._get_cython_func_type(\"roll_count\")\r\n    return self._apply(window_func, center=self.center, floor=0, name=\"count\", **kwargs)\r\n```\r\n\r\nMight be not as straightforward (possibly) but just a heads up of where (hopefully) count should head.",
        "createdAt" : "2020-08-25T05:46:46Z",
        "updatedAt" : "2020-08-30T15:14:08Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "192b7f69-bf18-42bc-ae7f-169cd299cb5a",
        "parentId" : "53646891-05eb-425a-95ca-f145a32a8498",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is this something you're planning on doing in the forseeable future?  i agree thatd be a nicer solution",
        "createdAt" : "2020-08-25T15:16:21Z",
        "updatedAt" : "2020-08-30T15:14:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5b34603c-de87-4b58-9ed2-a8a5da4d8754",
        "parentId" : "53646891-05eb-425a-95ca-f145a32a8498",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "I'll experiment with this tonight and get a PR up if tests pass ",
        "createdAt" : "2020-08-25T16:39:48Z",
        "updatedAt" : "2020-08-30T15:14:08Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "982251e8-6577-4563-8af6-e876a3eaecc1",
        "parentId" : "53646891-05eb-425a-95ca-f145a32a8498",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Looks like this version allows (inconsistently with other rolling function) non-numeric data like datetimes and strings because of the ahead of time coercing with `notna().astype(int)`. Taking longer than expected to tie out tests with using the `roll_count` cython version",
        "createdAt" : "2020-08-26T07:15:06Z",
        "updatedAt" : "2020-08-30T15:14:08Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "bb1d8e1c-bc68-47eb-acb1-aed6b19fe613",
        "parentId" : "53646891-05eb-425a-95ca-f145a32a8498",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not sure if anything can be shared, but it looks like `DataFrameGroupBy.count` is doing things kludgily blockwise and should also use an apply pattern",
        "createdAt" : "2020-08-27T01:33:25Z",
        "updatedAt" : "2020-08-30T15:14:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "38b7f4077f3d5a7a3016dc2100f5d736076330b2",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +1293,1297 @@        assert not isinstance(self.window, BaseIndexer)\n\n        _, obj = self._create_blocks(self._selected_obj)\n\n        def hfunc(values: np.ndarray) -> np.ndarray:"
  },
  {
    "id" : "b16ee60d-884e-49c8-af52-85131096cd48",
    "prId" : 35982,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35982#pullrequestreview-478989733",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3f0235e-c642-4f18-83dc-b9e92a40c518",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ATM _prep_values prevents us from doing anything with EAs, but in principle is that something we'd like to support?",
        "createdAt" : "2020-08-31T20:43:30Z",
        "updatedAt" : "2020-08-31T20:43:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7f7334a4-6745-4825-be36-6880e5676866",
        "parentId" : "f3f0235e-c642-4f18-83dc-b9e92a40c518",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "In the future yes, but I think a major blocker/consideration is that today rolling agg functions only operate on float64 inputs, so that will need to be addressed in tandem. ",
        "createdAt" : "2020-08-31T22:11:34Z",
        "updatedAt" : "2020-08-31T22:11:34Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f27f1040f91d1f639885915b460ac28cc564dcad",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +445,449 @@                result[name] = extra_col\n\n    def _center_window(self, result: np.ndarray, window) -> np.ndarray:\n        \"\"\"\n        Center the result in the window."
  },
  {
    "id" : "ba3399b6-af01-4a48-817e-de661ed134af",
    "prId" : 36454,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36454#pullrequestreview-491813019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa2bd05d-8546-4d58-9fea-69ff417f5928",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some comments here (and ref this issue)",
        "createdAt" : "2020-09-18T22:03:06Z",
        "updatedAt" : "2020-10-26T12:59:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f4b92808-c431-4e09-bf8f-c52a9d3d8d6a",
        "parentId" : "aa2bd05d-8546-4d58-9fea-69ff417f5928",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "Done",
        "createdAt" : "2020-09-18T22:19:32Z",
        "updatedAt" : "2020-10-26T12:59:07Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd41c2904cbf377a1ebc3b898da1ef614208f712",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1910,1914 @@            # issues when the result of var is withing floating proint precision\n            # while std is not.\n            return a.cov(b, **kwargs) / (a.var(**kwargs) * b.var(**kwargs)) ** 0.5\n\n        return flex_binary_moment("
  },
  {
    "id" : "e3d4c250-805e-465c-98f2-4d5f7595429d",
    "prId" : 36458,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36458#pullrequestreview-491825675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "606b7c56-ce66-4f7b-a7a9-7c5b9a15f22f",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Could you add a comment with the issue number and a small explanation on why we are doing this?",
        "createdAt" : "2020-09-18T20:54:09Z",
        "updatedAt" : "2020-09-19T19:14:32Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "a5a3d2a3-3f62-4182-af90-9dec1dc1808e",
        "parentId" : "606b7c56-ce66-4f7b-a7a9-7c5b9a15f22f",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "Done",
        "createdAt" : "2020-09-18T21:49:51Z",
        "updatedAt" : "2020-09-19T19:14:32Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      },
      {
        "id" : "9de71d15-6c5e-4265-b24c-85cfed1096d3",
        "parentId" : "606b7c56-ce66-4f7b-a7a9-7c5b9a15f22f",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "cc @jbrockmendel FYI",
        "createdAt" : "2020-09-18T23:05:39Z",
        "updatedAt" : "2020-09-19T19:14:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb85045056fc9cd773e714287a7a88ac55e19023",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +249,253 @@            # dtypes.\n            obj = obj.select_dtypes(include=[\"integer\", \"float\"], exclude=[\"timedelta\"])\n            obj = obj.astype(\"float64\", copy=False)\n            obj._mgr = obj._mgr.consolidate()\n        return obj"
  },
  {
    "id" : "3e8a83d9-8df3-47b4-8209-3fe17483241f",
    "prId" : 36649,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36649#pullrequestreview-497024652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f2319c9-ccae-440c-818d-e368dea44873",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "why is this necessary?",
        "createdAt" : "2020-09-26T15:19:15Z",
        "updatedAt" : "2020-10-02T01:13:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2b41a0f7-4745-413d-ae3d-211b0901134b",
        "parentId" : "0f2319c9-ccae-440c-818d-e368dea44873",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Not 100% sure of best practice regarding consolidation, but I noticed that after this operations the blocks would be unconsolidated. Can remove this is you recommend so.\r\n\r\n```\r\nIn [7]: df\r\nOut[7]:\r\n           a           b    c\r\n0 2020-01-01  2020-01-01  1.0\r\n1 2020-01-02  2020-01-02  2.0\r\n2 2020-01-03  2020-01-03  3.0\r\n\r\nIn [8]: notna(df).astype(int)._mgr\r\nOut[8]:\r\nBlockManager\r\nItems: Index(['a', 'b', 'c'], dtype='object')\r\nAxis 1: RangeIndex(start=0, stop=3, step=1)\r\nIntBlock: slice(2, 3, 1), 1 x 3, dtype: int64\r\nIntBlock: slice(0, 1, 1), 1 x 3, dtype: int64\r\nIntBlock: slice(1, 2, 1), 1 x 3, dtype: int64\r\n```",
        "createdAt" : "2020-09-26T18:40:47Z",
        "updatedAt" : "2020-10-02T01:13:31Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "c520a282-91ae-4219-aab9-07f74fa1f801",
        "parentId" : "0f2319c9-ccae-440c-818d-e368dea44873",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It's harmless in this case since this object is never user-facing, just makes an unnecessary copy.  For some ops consolidating improves perf.",
        "createdAt" : "2020-09-26T19:01:22Z",
        "updatedAt" : "2020-10-02T01:13:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "03ce0554e69cbe08dd3139da697574fffabb7ea1",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +503,507 @@            # GH 12541: Special case for count where we support date-like types\n            obj = notna(obj).astype(int)\n            obj._mgr = obj._mgr.consolidate()\n        mgr = obj._mgr\n"
  },
  {
    "id" : "9f5b7d83-4022-4f93-ba73-124954f9a2d1",
    "prId" : 36822,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36822#pullrequestreview-501513870",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f3e013e-ce18-49c2-80d9-3622e5e9a369",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we just move the check on L1970 here ? (and then you can in-line L1973-1977",
        "createdAt" : "2020-10-03T00:57:13Z",
        "updatedAt" : "2020-10-14T19:57:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "72388561-1087-413b-b427-444b5eed21b4",
        "parentId" : "4f3e013e-ce18-49c2-80d9-3622e5e9a369",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "I am not sure, if I understand you correctly, but we can not check for monotonic here, because non-monotonic is allowed. We have to check explicitly for nans.",
        "createdAt" : "2020-10-03T02:23:24Z",
        "updatedAt" : "2020-10-14T19:57:05Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1418f6c7aa0901b44d3e97dcf296bdd37b100ac",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +2328,2332 @@        return window_indexer\n\n    def _validate_monotonic(self):\n        \"\"\"\n        Validate that on is monotonic;"
  },
  {
    "id" : "9e50a5d3-85ac-413f-9ad4-5a1e8f556e5c",
    "prId" : 37204,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37204#pullrequestreview-516397850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b7551a2-1007-4d53-a588-96c358495ce6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a test if you pass bogus kwargs to a real scipy function.",
        "createdAt" : "2020-10-23T20:09:48Z",
        "updatedAt" : "2020-10-30T19:32:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2a0f7514-10c3-4c2c-ba21-2041fd22a6f8",
        "parentId" : "7b7551a2-1007-4d53-a588-96c358495ce6",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Done",
        "createdAt" : "2020-10-25T21:18:05Z",
        "updatedAt" : "2020-10-30T19:32:30Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "126808e95954d6e2961d1ca20d78111efe865b0c",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +1045,1049 @@        )\n        assert self.win_type is not None  # for mypy\n        window = getattr(signal, self.win_type)(self.window, **kwargs)\n        offset = (len(window) - 1) // 2 if self.center else 0\n"
  },
  {
    "id" : "7bd8aea9-1371-4f57-9847-1253d70cd474",
    "prId" : 37207,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37207#pullrequestreview-512247738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21f959bb-5260-4207-b4f7-7ab875ff3d43",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I *think* you need a blank line here",
        "createdAt" : "2020-10-20T00:24:02Z",
        "updatedAt" : "2020-10-21T22:44:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "08002893b4df414c83144dc8a6a00e9e6d25e669",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +853,857 @@        'neither' endpoints. Defaults to 'right'.\n\n        .. versionchanged:: 1.2.0\n\n            The closed parameter with fixed windows is now supported."
  }
]