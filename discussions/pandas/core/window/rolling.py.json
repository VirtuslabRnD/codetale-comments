[
  {
    "id" : "a01fb8ef-bd10-4da7-ba96-fe710c46284e",
    "prId" : 27682,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27682#pullrequestreview-285595572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fbb670a-dd92-4017-bd01-abfc4ac0993c",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Can you add a `versionadded` for Window here? NDFrame.pipe and GroupBy.pipe should have an example.",
        "createdAt" : "2019-09-09T15:34:22Z",
        "updatedAt" : "2019-11-08T10:42:44Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c06f2b6c81e8682159b1a98fbd33271ca0dce28b",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +634,638 @@    _shared_docs[\"var\"] = dedent(\n        \"\"\"\n    Calculate unbiased %(name)s variance.\n    %(versionadded)s\n    Normalized by N-1 by default. This can be changed using the `ddof`"
  },
  {
    "id" : "29265202-b4d6-4e11-aa5e-61df012e7c80",
    "prId" : 28297,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28297#pullrequestreview-302168373",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d430802b-3380-4b17-a9d4-a6223ebe4aa6",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Surprised this doesn't match the previous definition of just `is_monotonic`. Would welcome that as a follow up to align the logic",
        "createdAt" : "2019-10-11T22:21:24Z",
        "updatedAt" : "2019-10-19T20:11:02Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "59c987d0-211b-46c7-8c74-5cd0dfead5fa",
        "parentId" : "d430802b-3380-4b17-a9d4-a6223ebe4aa6",
        "authorId" : "2c23abce-829f-478d-a108-e7b7cc34173c",
        "body" : "You mean updating `is_monotonic` to return True also for monotonic decreasing? I tried that, but some of its callers rely on the fact that the sequence is also increasing and many tests failed afterwards. So I would rather not do that, especially not in this PR.",
        "createdAt" : "2019-10-15T20:13:59Z",
        "updatedAt" : "2019-10-19T20:11:02Z",
        "lastEditedBy" : "2c23abce-829f-478d-a108-e7b7cc34173c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b46dc504c715ecc3ea7d81240eb0a8bb4e0c441",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +1710,1714 @@        Validate monotonic (increasing or decreasing).\n        \"\"\"\n        if not (self._on.is_monotonic_increasing or self._on.is_monotonic_decreasing):\n            formatted = self.on\n            if self.on is None:"
  },
  {
    "id" : "063cf35a-0b3f-4c6b-9073-c7eb889e36bb",
    "prId" : 28297,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28297#pullrequestreview-304036716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57928a5a-0d99-40f4-8195-917bdf3067dc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you update the doc-string (and type annoation if its there) for on in Rolling",
        "createdAt" : "2019-10-18T17:36:31Z",
        "updatedAt" : "2019-10-19T20:11:02Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b46dc504c715ecc3ea7d81240eb0a8bb4e0c441",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +1664,1668 @@            raise ValueError(\n                \"invalid on specified as {0}, \"\n                \"must be a column (of DataFrame), an Index \"\n                \"or None\".format(self.on)\n            )"
  },
  {
    "id" : "1ca6ede0-8aad-4739-99ee-c60e80f1cf76",
    "prId" : 29428,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29428#pullrequestreview-320684208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22cf12eb-755c-41bc-ad03-ed130f3a87e5",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "what happens here if the user passes a weird value for require_min_periods?",
        "createdAt" : "2019-11-21T00:49:03Z",
        "updatedAt" : "2019-11-21T07:43:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "328ac7b7-41b1-4728-86af-1bef95fd2003",
        "parentId" : "22cf12eb-755c-41bc-ad03-ed130f3a87e5",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "`require_min_periods` is effectively an internal variable and shouldn't be expected from an external API. I need to pop here because of kwargs passed from other `super` calls.",
        "createdAt" : "2019-11-21T07:34:46Z",
        "updatedAt" : "2019-11-21T07:43:56Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "09ae25806962eee488499d12ffa5f76393bc041c",
    "line" : 407,
    "diffHunk" : "@@ -1,1 +1456,1460 @@    def kurt(self, **kwargs):\n        window_func = self._get_cython_func_type(\"roll_kurt\")\n        kwargs.pop(\"require_min_periods\", None)\n        return self._apply(\n            window_func,"
  },
  {
    "id" : "1bb0833e-e078-4582-960e-a3ecf9e68667",
    "prId" : 29428,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29428#pullrequestreview-323015928",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02b5627b-b9f1-47c9-879e-b0e32c65b1c3",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "mypy error: `\"partial\" gets multiple values for keyword argument \"func\"`",
        "createdAt" : "2019-11-25T11:23:23Z",
        "updatedAt" : "2019-11-25T11:23:23Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "96008d16-04f8-45c7-b596-60a2dd8eee7b",
        "parentId" : "02b5627b-b9f1-47c9-879e-b0e32c65b1c3",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "What version of mypy raises this? I get this with 0.740\r\n\r\n```\r\n(pandas-dev) matthewroeschke:pandas-mroeschke matthewroeschke$ mypy pandas\r\npandas/core/indexes/frozen.py:112: error: Incompatible types in assignment (expression has type \"Callable[[FrozenList, VarArg(Any), KwArg(Any)], Any]\", base class \"list\" defined the type as overloaded function)\r\npandas/core/indexes/frozen.py:112: error: Incompatible types in assignment (expression has type \"Callable[[FrozenList, VarArg(Any), KwArg(Any)], Any]\", base class \"list\" defined the type as \"Callable[[List[Any], Union[int, slice]], None]\")\r\npandas/core/indexes/frozen.py:113: error: Incompatible types in assignment (expression has type \"Callable[[FrozenList, VarArg(Any), KwArg(Any)], Any]\", base class \"list\" defined the type as \"Callable[[List[Any], int], Any]\")\r\npandas/core/indexes/frozen.py:113: error: Incompatible types in assignment (expression has type \"Callable[[FrozenList, VarArg(Any), KwArg(Any)], Any]\", base class \"list\" defined the type as \"Callable[[List[Any], Any], None]\")\r\npandas/core/indexes/frozen.py:113: error: Incompatible types in assignment (expression has type \"Callable[[FrozenList, VarArg(Any), KwArg(Any)], Any]\", base class \"list\" defined the type as \"Callable[[List[Any], Iterable[Any]], None]\")\r\npandas/core/indexes/frozen.py:113: error: Incompatible types in assignment (expression has type \"Callable[[FrozenList, VarArg(Any), KwArg(Any)], Any]\", base class \"list\" defined the type as \"Callable[[List[Any], DefaultNamedArg(Optional[Callable[[Any], Any]], 'key'), DefaultNamedArg(bool, 'reverse')], None]\")\r\nFound 6 errors in 1 file (checked 807 source files)\r\n```",
        "createdAt" : "2019-11-26T05:23:51Z",
        "updatedAt" : "2019-11-26T05:23:52Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "9e3b1dd7-dc0a-422d-a9fd-5ee83681aa2f",
        "parentId" : "02b5627b-b9f1-47c9-879e-b0e32c65b1c3",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "i'm getting that error on 0.740 with --check-untyped-defs (on https://github.com/pandas-dev/pandas/pull/28339)\r\n\r\nThe problem is that the required argument for partial is named func, so I assume you can't also pass func as a keyword argument.\r\n\r\n`functools.partial(func, /, *args, **keywords)`\r\n\r\nEDIT: 0.730 -> 0.740",
        "createdAt" : "2019-11-26T11:30:37Z",
        "updatedAt" : "2019-11-26T11:36:08Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "9ca22104-6239-44b8-9fb7-e2967b3fc4ff",
        "parentId" : "02b5627b-b9f1-47c9-879e-b0e32c65b1c3",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "looking into this further, I _think_ this is a false positive from mypy.\r\n\r\nthe `__new__` of class partial seems to be able to handle this use case. testing with a minimum examples doesn't seem to break. so it appears that it is a typeshed issue.",
        "createdAt" : "2019-11-26T14:22:18Z",
        "updatedAt" : "2019-11-26T14:22:18Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "09ae25806962eee488499d12ffa5f76393bc041c",
    "line" : 272,
    "diffHunk" : "@@ -1,1 +1243,1247 @@            raw=raw,\n            offset=offset,\n            func=func,\n        )\n"
  },
  {
    "id" : "9041b3cb-b913-4fe2-8dd5-a77565544e12",
    "prId" : 29829,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29829#pullrequestreview-322524585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33e13b97-ed44-40a7-b3d1-2ffe50581def",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can this now be annotated?\r\n\r\nDoesnt have to be for this PR, but kwargs should be changed to not have a mutable default",
        "createdAt" : "2019-11-25T16:01:03Z",
        "updatedAt" : "2019-11-25T16:01:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7e6cb954-494d-4bdb-bb14-67a89f3e985c",
        "parentId" : "33e13b97-ed44-40a7-b3d1-2ffe50581def",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "I can do both in a follow up.\r\n\r\nAgreed that this should be `kwargs=None`. The docstring is misleading as well since it says apply takes `**kwargs` so reason enough for a cleanup + full change here.",
        "createdAt" : "2019-11-25T19:29:49Z",
        "updatedAt" : "2019-11-25T19:29:49Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "59b93e018372b61434d7c56cd06a6fdd09834405",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1210,1214 @@    )\n\n    def apply(self, func, raw=False, args=(), kwargs={}):\n        from pandas import Series\n"
  },
  {
    "id" : "d217dbbe-b99c-46fb-aa62-d18b7e9d65ea",
    "prId" : 29878,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29878#pullrequestreview-325912231",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fa86fbb-3522-4699-b31f-8ef2ad36d90f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you do these outside of the function? (as they don't depend on anything inside) and makes logic simpler",
        "createdAt" : "2019-12-02T13:16:53Z",
        "updatedAt" : "2019-12-04T21:56:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b158147a-6134-4503-8a1e-d6c23e4ea8e9",
        "parentId" : "3fa86fbb-3522-4699-b31f-8ef2ad36d90f",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "These both depend on `x` after the `nan`s are appended from the `center` calculation.\r\n`x = np.concatenate((x, additional_nans))`",
        "createdAt" : "2019-12-03T06:09:34Z",
        "updatedAt" : "2019-12-04T21:56:53Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ce1967bf6298e53c5cb1483774aaa1e138d7d30",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +501,505 @@                    x = np.concatenate((x, additional_nans))\n                    if not isinstance(window, BaseIndexer):\n                        min_periods = calculate_min_periods(\n                            window, self.min_periods, len(x), require_min_periods, floor\n                        )"
  },
  {
    "id" : "064819fb-bba8-42c8-bfdd-a8297b340bba",
    "prId" : 29878,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29878#pullrequestreview-326882326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e90c96d-e79a-4bd5-9b47-bd05814cff00",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can just set is_monotonic_bounds=np.any(.......)\r\n\r\nand pass that in line 482",
        "createdAt" : "2019-12-02T13:17:47Z",
        "updatedAt" : "2019-12-04T21:56:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3b5088d4-9e6e-4206-a60d-13019a29104e",
        "parentId" : "5e90c96d-e79a-4bd5-9b47-bd05814cff00",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Will need to add `is_monotonic_bounds` as an argument to all the \"fixed\" functions in Cython (didn't include them originally since the \"fixed\" function doesn't need this argument), but I suppose that makes this cleaner.",
        "createdAt" : "2019-12-03T06:12:36Z",
        "updatedAt" : "2019-12-04T21:56:53Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "52e1520f-cdbd-4d43-895e-a21e4ffc10d4",
        "parentId" : "5e90c96d-e79a-4bd5-9b47-bd05814cff00",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Actually I cannot easily modify this yet without another refactor. `func` here isn't always a cython function that could accept `is_monotonic_bounds`; sometimes it's a python wrapped function like `apply_func` or `_zqrt`. I can look into this in another refactor.",
        "createdAt" : "2019-12-03T06:39:29Z",
        "updatedAt" : "2019-12-04T21:56:53Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "620b1a59-9c8e-4d38-9f20-6386f2cdcfe5",
        "parentId" : "5e90c96d-e79a-4bd5-9b47-bd05814cff00",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "k, followup is ok",
        "createdAt" : "2019-12-04T14:23:52Z",
        "updatedAt" : "2019-12-04T21:56:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ce1967bf6298e53c5cb1483774aaa1e138d7d30",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +518,522 @@                        closed=self.closed,\n                    )\n                    if np.any(np.diff(start) < 0) or np.any(np.diff(end) < 0):\n                        # Our \"variable\" algorithms assume start/end are\n                        # monotonically increasing. A custom window indexer"
  }
]