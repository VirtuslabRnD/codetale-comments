[
  {
    "id" : "fb864d32-0fa5-4661-bfb4-f65b397d5f27",
    "prId" : 30151,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30151#pullrequestreview-335854524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26928713-c4cf-4158-94cc-f8c4995d7180",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a Parameters / Returns (you have most of the test already)",
        "createdAt" : "2019-12-23T13:16:42Z",
        "updatedAt" : "2019-12-26T18:15:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3da51eb3a301b8fdcf6991c5ea091d206ab21b8",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +94,98 @@\n    Configurations specified in engine_kwargs apply to both the user's\n    function _AND_ the rolling apply function.\n\n    Parameters"
  },
  {
    "id" : "492bc7d9-f0d4-41bc-9ecc-69d56465f82f",
    "prId" : 30151,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30151#pullrequestreview-336517587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2390098f-5c5a-4eef-909d-b76c345688c5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string that says what this function does (the parameters are already documented elsewhere, maybe just mention that)",
        "createdAt" : "2019-12-26T13:12:03Z",
        "updatedAt" : "2019-12-26T18:15:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3da51eb3a301b8fdcf6991c5ea091d206ab21b8",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +36,40 @@    Numba function\n    \"\"\"\n    numba = import_optional_dependency(\"numba\")\n\n    if parallel:"
  },
  {
    "id" : "669d5bb4-3537-406e-a1c8-3a37a7381513",
    "prId" : 30151,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30151#pullrequestreview-336583028",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca0ec61a-e9cf-4f1e-8ab0-9735eacb7df6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we have tests that hit all of these cases? ",
        "createdAt" : "2019-12-26T13:13:18Z",
        "updatedAt" : "2019-12-26T18:15:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b80775c2-87ee-44c4-876d-d4b254a49dc4",
        "parentId" : "ca0ec61a-e9cf-4f1e-8ab0-9735eacb7df6",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Yeah the tests in `test_apply.py` test a numpy and builtin function that gets hit here (`np.sum` and `len`)",
        "createdAt" : "2019-12-26T18:11:46Z",
        "updatedAt" : "2019-12-26T18:15:50Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3da51eb3a301b8fdcf6991c5ea091d206ab21b8",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +52,56 @@            if getattr(np, func.__name__, False) is func or isinstance(\n                func, types.BuiltinFunctionType\n            ):\n                jf = func\n            else:"
  },
  {
    "id" : "78079e80-c517-4346-9164-4fe39b7c55a8",
    "prId" : 38417,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38417#pullrequestreview-551767440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a532c7e0-64b2-4450-94c2-4e334d9f7b33",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "where are the expectations on the user callable here? (e.g. input / output shape)",
        "createdAt" : "2020-12-13T18:28:54Z",
        "updatedAt" : "2020-12-27T19:53:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "10d90d60-b4b6-463b-949f-01eb58512362",
        "parentId" : "a532c7e0-64b2-4450-94c2-4e334d9f7b33",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Good point. Added",
        "createdAt" : "2020-12-14T18:18:14Z",
        "updatedAt" : "2020-12-27T19:53:19Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "754d71e6b25aa2767da9a291513e60bed24e9039",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +172,176 @@    must return a 1 x N number of columns array. Func is intended to operate\n    row-wise, but the result will be transposed for axis=1.\n\n    1. jit the user's function\n    2. Return a rolling apply function with the jitted function inline"
  },
  {
    "id" : "3314e4f4-3691-4f1b-bcdf-abf895f9c029",
    "prId" : 38995,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38995#pullrequestreview-563229831",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9879d9ec-b2aa-45c7-981e-708025bc4646",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you need the import here?",
        "createdAt" : "2021-01-06T15:11:47Z",
        "updatedAt" : "2021-01-07T18:57:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f5029038-4757-46f0-9847-1d14ecd83a40",
        "parentId" : "9879d9ec-b2aa-45c7-981e-708025bc4646",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Yeah it's the pattern I've been using in other functions in this file since numba is an optional dependency",
        "createdAt" : "2021-01-07T06:02:48Z",
        "updatedAt" : "2021-01-07T18:57:30Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "86c692c722d36d02ba2ea8bcd9b6da2447f2cb4c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +229,233 @@@functools.lru_cache(maxsize=None)\ndef generate_manual_numpy_nan_agg_with_axis(nan_func):\n    numba = import_optional_dependency(\"numba\")\n\n    @numba.jit(nopython=True, nogil=True, parallel=True)"
  },
  {
    "id" : "6e01620d-40f0-47d4-8cb6-df40b9833637",
    "prId" : 40952,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40952#pullrequestreview-637858440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e84e5fda-5628-47f4-a9bf-d6b7633271e0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why -1?",
        "createdAt" : "2021-04-16T00:39:34Z",
        "updatedAt" : "2021-04-16T16:31:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "19120bea-c3f1-4a3b-a1a6-72171da92577",
        "parentId" : "e84e5fda-5628-47f4-a9bf-d6b7633271e0",
        "authorId" : "b82fb544-0402-40c6-af4e-3d063220afa4",
        "body" : "We want to use ``delta[i-1]`` with ``values[i]``. ``cur = window[j] = values[start + j]`` (and ``j`` starts at 1).\r\n\r\nI could introduce a new variable ``delta_window = deltas[start:stop-1]`` as in the cython implementation if you think that would make it clearer.",
        "createdAt" : "2021-04-16T14:21:39Z",
        "updatedAt" : "2021-04-16T16:31:25Z",
        "lastEditedBy" : "b82fb544-0402-40c6-af4e-3d063220afa4",
        "tags" : [
        ]
      },
      {
        "id" : "a39d44cb-40e9-4340-ab1b-9f7226fd123f",
        "parentId" : "e84e5fda-5628-47f4-a9bf-d6b7633271e0",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no its fine, if you'd just add some documentation to this effect for future readers",
        "createdAt" : "2021-04-16T15:58:46Z",
        "updatedAt" : "2021-04-16T16:31:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2dc7590817cb928d28d5391fe6e6ff7d0308997",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +146,150 @@                        # note that len(deltas) = len(vals) - 1 and deltas[i] is to be\n                        # used in conjunction with vals[i+1]\n                        old_wt *= old_wt_factor ** deltas[start + j - 1]\n                        if is_observation:\n"
  },
  {
    "id" : "063cde7e-447e-4893-9bd0-d05da89e6737",
    "prId" : 42273,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/42273#pullrequestreview-694589215",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27c49636-ec57-475c-9f33-1c7b30233e53",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "any way you can share the other ewma code here (the numba ewma code for single)",
        "createdAt" : "2021-06-28T13:25:45Z",
        "updatedAt" : "2021-06-28T13:26:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8cdd38ff-8d4a-4c1a-be7f-92315ce2b6ae",
        "parentId" : "27c49636-ec57-475c-9f33-1c7b30233e53",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "I might try this in a follow up. I think it will require refactoring some of the downstream code that all expect 1D outputs",
        "createdAt" : "2021-06-29T04:54:53Z",
        "updatedAt" : "2021-06-29T04:54:53Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b14ea969420f184459630508dea1cb100cb2b492",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +300,304 @@        result[0] = np.where(nobs >= minimum_periods, weighted_avg, np.nan)\n\n        for i in range(1, len(values)):\n            cur = values[i]\n            is_observations = ~np.isnan(cur)"
  },
  {
    "id" : "4b63f56a-2d8a-44f0-a4bc-8846222a54df",
    "prId" : 42273,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/42273#pullrequestreview-697944455",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "add0498a-4c3e-4bef-b8dc-0467abe15919",
        "parentId" : null,
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "@stuartarchibald if you have time, could you review if this function looks if I have any bad practices in this function. Some context:\r\n\r\n1. Generally this is run with `@numba.jit(nopython=True, nogil=False, parallel=False)`\r\n2. This function has variables from a global scope `com`, `adjust`, `ignore_na`, `deltas`\r\n3. I cache this function in a dictionary this first time it runs (in `NUMBA_FUNC_CACHE`) and later calls will return the cached fuction.\r\n\r\nWhen using this function, sometimes I get a segfault:\r\n\r\n```\r\n(pandas-dev) matthewroeschke@x86_64-apple-darwin13 pandas-mroeschke % ipython\r\nPython 3.8.6 | packaged by conda-forge | (default, Dec 26 2020, 04:50:20)\r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 7.25.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: df = DataFrame(np.random.rand(3, 30))\r\n\r\nIn [2]: ewm = df.ewm(com=1, method=\"table\")\r\n\r\nIn [3]: ewm.mean(engine=\"numba\")\r\nOut[3]:\r\n         0         1         2         3         4   ...        25        26        27        28        29\r\n0  0.770949  0.396205  0.728331  0.417464  0.715142  ...  0.237903  0.383182  0.021471  0.837933  0.590543\r\n1  0.417231  0.369916  0.793127  0.961175  0.531131  ...  0.145222  0.152615  0.714216  0.515145  0.238283\r\n2  0.441215  0.220925  0.868065  0.736689  0.858115  ...  0.165413  0.977209  0.549496  0.472534  0.555430\r\n\r\n[3 rows x 30 columns]\r\n\r\nIn [4]: ewm.mean(engine=\"numba\")\r\nOut[4]:\r\n         0         1         2         3         4   ...        25        26        27        28        29\r\n0  0.770949  0.396205  0.728331  0.417464  0.715142  ...  0.237903  0.383182  0.021471  0.837933  0.590543\r\n1  0.417231  0.369916  0.793127  0.417464  0.531131  ...  0.145222  0.152615  0.714216  0.515145  0.238283\r\n2  0.441215  0.220925  0.868065  0.417464  0.858115  ...  0.165413  0.977209  0.549496  0.472534  0.555430\r\n\r\n[3 rows x 30 columns]\r\n\r\nIn [5]: ewm.mean(engine=\"numba\")\r\nOut[5]:\r\n         0         1         2         3         4   ...        25        26        27        28        29\r\n0  0.770949  0.396205  0.728331  0.417464  0.715142  ...  0.237903  0.383182  0.021471  0.837933  0.590543\r\n1  0.417231  0.369916  0.793127  0.961175  0.531131  ...  0.145222  0.152615  0.714216  0.515145  0.238283\r\n2  0.441215  0.220925  0.868065  0.736689  0.858115  ...  0.165413  0.977209  0.549496  0.472534  0.555430\r\n\r\n[3 rows x 30 columns]\r\n\r\nIn [6]: ewm.mean(engine=\"numba\")\r\npython(3345,0x111f53dc0) malloc: Incorrect checksum for freed object 0x7fd3255c55a8: probably modified after being freed.\r\nCorrupt value: 0x3ff0000000000000\r\npython(3345,0x111f53dc0) malloc: *** set a breakpoint in malloc_error_break to debug\r\nzsh: abort      ipython\r\n```",
        "createdAt" : "2021-07-01T06:02:49Z",
        "updatedAt" : "2021-07-01T06:02:49Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "3732222e-ba85-44d7-94e8-0f60f9db7164",
        "parentId" : "add0498a-4c3e-4bef-b8dc-0467abe15919",
        "authorId" : "404dd6dc-70fe-4b06-95dd-0cb9f3611c53",
        "body" : "@mroeschke I'll take a look. Did you already try running it a) without the `@jit` decorator and b) with `@jit(boundscheck=True)` ?",
        "createdAt" : "2021-07-01T16:27:40Z",
        "updatedAt" : "2021-07-01T16:27:40Z",
        "lastEditedBy" : "404dd6dc-70fe-4b06-95dd-0cb9f3611c53",
        "tags" : [
        ]
      },
      {
        "id" : "993f743a-f270-4eae-8b3f-fc0e9799ad0d",
        "parentId" : "add0498a-4c3e-4bef-b8dc-0467abe15919",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "Sorry for the noise @stuartarchibald. I found a bug in my algorithm. I should have tested without the `@jit` decorator first. ",
        "createdAt" : "2021-07-02T04:57:55Z",
        "updatedAt" : "2021-07-02T04:57:55Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "e56b8623-eb97-4f5d-97c8-5275f148ccea",
        "parentId" : "add0498a-4c3e-4bef-b8dc-0467abe15919",
        "authorId" : "404dd6dc-70fe-4b06-95dd-0cb9f3611c53",
        "body" : "@mroeschke no worries. Numba also has this environment variable to switch off JIT compilation without needing to modify code: https://numba.readthedocs.io/en/stable/reference/envvars.html#envvar-NUMBA_DISABLE_JIT, it might be useful for helping with development/testing.",
        "createdAt" : "2021-07-02T08:21:58Z",
        "updatedAt" : "2021-07-02T08:21:58Z",
        "lastEditedBy" : "404dd6dc-70fe-4b06-95dd-0cb9f3611c53",
        "tags" : [
        ]
      }
    ],
    "commit" : "b14ea969420f184459630508dea1cb100cb2b492",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +284,288 @@\n    @numba.jit(nopython=nopython, nogil=nogil, parallel=parallel)\n    def ewma_table(\n        values: np.ndarray,\n        begin: np.ndarray,"
  }
]