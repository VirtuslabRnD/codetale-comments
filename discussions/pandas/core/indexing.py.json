[
  {
    "id" : "27211d1a-7293-4287-99db-b8feec1a910b",
    "prId" : 4515,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7e8ad3c-add9-4fd8-81b3-5dc88fd7b880",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "@jreback is this supposed to return `None`?\n",
        "createdAt" : "2013-09-06T01:20:19Z",
        "updatedAt" : "2013-09-06T01:20:19Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      },
      {
        "id" : "c1ace866-fb2f-4655-925c-d3e7bfad1197",
        "parentId" : "e7e8ad3c-add9-4fd8-81b3-5dc88fd7b880",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no...they will just raise if needed\n",
        "createdAt" : "2013-09-06T02:37:58Z",
        "updatedAt" : "2013-09-06T02:37:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "00b6c8990bbc906171f17148649a88717f12c930",
    "line" : 250,
    "diffHunk" : "@@ -1,1 +992,996 @@\n    def _has_valid_setitem_indexer(self, indexer):\n        self._has_valid_positional_setitem_indexer(indexer)\n\n    def _getitem_tuple(self, tup):"
  },
  {
    "id" : "74baa006-e215-4249-a4aa-a2e9ef5c0652",
    "prId" : 4515,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed92cd6a-ab43-410c-8d12-7c281def57a3",
        "parentId" : null,
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "I guess it's just inconsistent with this method. No big deal.\n",
        "createdAt" : "2013-09-06T03:22:11Z",
        "updatedAt" : "2013-09-06T03:22:11Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "00b6c8990bbc906171f17148649a88717f12c930",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +104,108 @@\n    def _has_valid_setitem_indexer(self, indexer):\n        return True\n\n    def _has_valid_positional_setitem_indexer(self, indexer):"
  },
  {
    "id" : "58c2748a-0d4b-42e7-ae7c-654e15ed1e25",
    "prId" : 9741,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "874ab920-5f83-43b5-953d-5d3f8e5b7bbf",
        "parentId" : null,
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "you have a lot in the `try` block here. Can you use an `else` clause to limit the amount of code the attribute error checks?\n",
        "createdAt" : "2015-04-09T00:51:01Z",
        "updatedAt" : "2015-04-20T11:19:36Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      },
      {
        "id" : "db968f0f-9b67-47e2-bea4-defcd63f3de9",
        "parentId" : "874ab920-5f83-43b5-953d-5d3f8e5b7bbf",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you realize all of this code was just moved from indexing it's not new\nbut will see what I can do\n",
        "createdAt" : "2015-04-09T00:55:14Z",
        "updatedAt" : "2015-04-20T11:19:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c468ca78-0f63-4e89-953a-f90c2289d2cd",
        "parentId" : "874ab920-5f83-43b5-953d-5d3f8e5b7bbf",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "OK, OK :)\n",
        "createdAt" : "2015-04-09T00:59:22Z",
        "updatedAt" : "2015-04-20T11:19:36Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecf8514cf14a12511368abf0e61373775cc65c6d",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +965,969 @@                    return result\n\n                except AttributeError:\n\n                    # Series"
  },
  {
    "id" : "cbb61b97-83d2-46aa-ac82-65d68bc7224c",
    "prId" : 10838,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/10838#pullrequestreview-273437412",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e653741b-d4db-4652-a86e-554f96ef4693",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@jreback looks like this is intended for Panel, but is still reached.  Any chance it is unnecessary?  Or more specifically, I'd like to rule out the possibility of `take_split_path = True` being set on 224 for `Series`.  Is that unreachable for some reason?",
        "createdAt" : "2019-07-11T19:43:12Z",
        "updatedAt" : "2019-07-11T19:43:12Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "06508ae4-3f39-483b-bd97-8b43c9389495",
        "parentId" : "e653741b-d4db-4652-a86e-554f96ef4693",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "umm maybe, the whole take_split_path is based on the notion that we have a block  of a single type and we are indexing into it for smaller number of columns than the whole block so we *might* need to split it before we index. fairly dense & complicated, but necessary in some way.\r\n\r\nto answer your question though, I agree you might be able to remove this entire clause.",
        "createdAt" : "2019-07-11T20:28:11Z",
        "updatedAt" : "2019-07-11T20:28:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bc260497-0a22-476c-b8eb-4ed73b89c180",
        "parentId" : "e653741b-d4db-4652-a86e-554f96ef4693",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Apparently there was still a use case: https://github.com/pandas-dev/pandas/pull/27855",
        "createdAt" : "2019-08-10T19:45:05Z",
        "updatedAt" : "2019-08-10T19:45:05Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "f07e582aef5a3ca6e3f406c56c38a8b26b6c69d9",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +224,228 @@                    take_split_path = True\n                    break\n\n        if isinstance(indexer, tuple):\n            nindexer = []"
  },
  {
    "id" : "252bbadd-4260-460c-9533-9b75ee1fc452",
    "prId" : 17956,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17956#pullrequestreview-71356884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11a109ee-80ac-4925-9c72-b43b4847248e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did you reverse these on purpose?",
        "createdAt" : "2017-10-23T17:33:52Z",
        "updatedAt" : "2017-10-27T11:09:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0d189361-c0fc-4265-b3c1-33ec0429a882",
        "parentId" : "11a109ee-80ac-4925-9c72-b43b4847248e",
        "authorId" : "7c84fc55-a848-4ca2-a014-28c856c6d6e2",
        "body" : "Yes, so that we can use `functools.partial(indexer, name)` to shave a few % more. If that's not important, I can revert to the original order.",
        "createdAt" : "2017-10-23T19:56:56Z",
        "updatedAt" : "2017-10-27T11:09:20Z",
        "lastEditedBy" : "7c84fc55-a848-4ca2-a014-28c856c6d6e2",
        "tags" : [
        ]
      },
      {
        "id" : "132d509a-4af0-413e-ac45-b6bee2aff275",
        "parentId" : "11a109ee-80ac-4925-9c72-b43b4847248e",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok this is not a big deal to reverse.",
        "createdAt" : "2017-10-23T23:09:46Z",
        "updatedAt" : "2017-10-27T11:09:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "efe021daebcca3d706aa8ced3eb90c2e12c41fb4",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +93,97 @@\n    def __call__(self, axis=None):\n        # we need to return a copy of ourselves\n        new_self = self.__class__(self.name, self.obj)\n"
  },
  {
    "id" : "c58a5fa9-2ded-4ca3-9f15-ecf9d4da85eb",
    "prId" : 20219,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20219#pullrequestreview-102865550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c342d3c-2d6f-4f77-a748-00a0fd4f11ec",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this also works on a Series, can you re-word to accomodate",
        "createdAt" : "2018-03-10T21:48:52Z",
        "updatedAt" : "2018-03-11T12:42:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8d690dae-0757-4ded-8aac-ae304d951edd",
        "parentId" : "2c342d3c-2d6f-4f77-a748-00a0fd4f11ec",
        "authorId" : "c11b0217-90c0-40f2-9f60-68651d6a0b9e",
        "body" : "Great point, I specified that `iat` works for both a `DataFrame` and a `Series` (below the comment, so Github isn't collapsing it here). Let me know if you want be to reword it any differently. I also added an example for using it on `Series`. ",
        "createdAt" : "2018-03-10T22:56:06Z",
        "updatedAt" : "2018-03-11T12:42:56Z",
        "lastEditedBy" : "c11b0217-90c0-40f2-9f60-68651d6a0b9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa387ad59a62562c94cce30a4737994b994a8396",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1924,1928 @@    Access a single value for a row/column pair by integer position.\n\n    Similar to ``iloc``, in that both provide integer-based lookups. Use\n    ``iat`` if you only need to get or set a single value in a DataFrame\n    or Series."
  },
  {
    "id" : "f6a0f8ff-e47b-4386-a5e9-9ccaf84f5fa6",
    "prId" : 20228,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20228#pullrequestreview-103206806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99758b10-d143-4ee5-a0a2-0f7443d1c51b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add Series.iloc",
        "createdAt" : "2018-03-11T14:30:01Z",
        "updatedAt" : "2018-07-07T19:56:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "645ced63-8393-49a4-a362-3942ce52c4fb",
        "parentId" : "99758b10-d143-4ee5-a0a2-0f7443d1c51b",
        "authorId" : "e489c7ff-5ce0-45ee-863e-a48295e6f249",
        "body" : "added Series.iloc",
        "createdAt" : "2018-03-11T18:29:21Z",
        "updatedAt" : "2018-07-07T19:56:36Z",
        "lastEditedBy" : "e489c7ff-5ce0-45ee-863e-a48295e6f249",
        "tags" : [
        ]
      },
      {
        "id" : "1bf05b2f-323b-4bac-a524-46210965aa50",
        "parentId" : "99758b10-d143-4ee5-a0a2-0f7443d1c51b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you look at other PRs for those accessors to have a consistent way to reference them? See eg https://github.com/pandas-dev/pandas/pull/20229/files, They use:\r\n\r\n```\r\n    DateFrame.at : Access a single value for a row/column label pair\r\n    DateFrame.iloc : Access group of rows and columns by integer position(s)\r\n    Series.loc : Access group of values using labels\r\n```",
        "createdAt" : "2018-03-12T17:06:42Z",
        "updatedAt" : "2018-07-07T19:56:36Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "33219c6e-4766-4dba-8518-06212306aeae",
        "parentId" : "99758b10-d143-4ee5-a0a2-0f7443d1c51b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@tuhinmahmud make sure to pull my changes before looking into this. ",
        "createdAt" : "2018-03-12T20:27:59Z",
        "updatedAt" : "2018-07-07T19:56:36Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "329b05b0c67587836e906f4592b1aaf285cbebf3",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1952,1956 @@    --------\n    DataFrame.iat : Fast integer location scalar accessor.\n    DataFrame.loc : Purely label-location based indexer for selection by label.\n    Series.iloc : Purely integer-location based indexing for\n                   selection by position."
  },
  {
    "id" : "1b41f0d3-7249-4c6e-9af9-fc743e1823a1",
    "prId" : 20770,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20770#pullrequestreview-115776946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84430e8b-8101-461e-9273-bf917f5e49cc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is hit in tests?",
        "createdAt" : "2018-04-26T20:29:53Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0d9f694e-1398-43ce-b140-0ae956151da7",
        "parentId" : "84430e8b-8101-461e-9273-bf917f5e49cc",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Sure: https://github.com/pandas-dev/pandas/blob/6cacdde5630c593999059833b516e1fec60aaf72/pandas/tests/frame/test_indexing.py#L1389\r\n\r\n(this is old code I just moved around)",
        "createdAt" : "2018-04-26T23:04:35Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "c62973b28b29f2884f27d335b0b93c0440928b82",
    "line" : 434,
    "diffHunk" : "@@ -1,1 +1960,1964 @@            # a tuple should already have been caught by this point\n            # so don't treat a tuple as a valid indexer\n            raise IndexingError('Too many indexers')\n        elif is_list_like_indexer(key):\n            # check that the key does not exceed the maximum size of the index"
  },
  {
    "id" : "1b09e4b9-ea96-4595-8da2-82a21770c077",
    "prId" : 20770,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20770#pullrequestreview-115777188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03eb39c0-d8b0-4aec-a8f6-9745f469c177",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is hit in tests?",
        "createdAt" : "2018-04-26T20:30:13Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "21dbe538-fbe5-4df1-ada8-f1ef007809da",
        "parentId" : "03eb39c0-d8b0-4aec-a8f6-9745f469c177",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Sure, moreover this is trivial refactoring.",
        "createdAt" : "2018-04-26T23:05:59Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "c62973b28b29f2884f27d335b0b93c0440928b82",
    "line" : 443,
    "diffHunk" : "@@ -1,1 +1967,1971 @@\n            if len(arr) and (arr.max() >= l or arr.min() < -l):\n                raise IndexError(\"positional indexers are out-of-bounds\")\n        else:\n            raise ValueError(\"Can only index by location with \""
  },
  {
    "id" : "e7eeb366-09e1-4302-bfc6-7dfca9ed341c",
    "prId" : 20770,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20770#pullrequestreview-115900586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5af3348c-9f82-4302-8277-90affe9e2d84",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can do w/o the else here",
        "createdAt" : "2018-04-26T20:30:23Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c59e5dce-58e7-486f-8d9c-b67bd39e7d33",
        "parentId" : "5af3348c-9f82-4302-8277-90affe9e2d84",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "No, I would have to add a\r\n\r\n```python\r\nelse:\r\n    return\r\n```\r\nbranch to the ``if`` just above, because when the indexer is valid it does not return/raise",
        "createdAt" : "2018-04-27T11:10:53Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "c62973b28b29f2884f27d335b0b93c0440928b82",
    "line" : 444,
    "diffHunk" : "@@ -1,1 +1968,1972 @@            if len(arr) and (arr.max() >= l or arr.min() < -l):\n                raise IndexError(\"positional indexers are out-of-bounds\")\n        else:\n            raise ValueError(\"Can only index by location with \"\n                             \"a [{types}]\".format(types=self._valid_types))"
  },
  {
    "id" : "10a267a2-994a-4ddf-9f7a-172c0c26dd54",
    "prId" : 20770,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20770#pullrequestreview-116544027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e173ab3f-a635-4da4-9b32-17c477a7ddc4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this is_iterator needed here?",
        "createdAt" : "2018-05-01T10:21:33Z",
        "updatedAt" : "2018-05-01T11:03:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bd10126b-d643-4c83-b2ad-a7d41e0cbe02",
        "parentId" : "e173ab3f-a635-4da4-9b32-17c477a7ddc4",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Didn't check this.",
        "createdAt" : "2018-05-01T11:04:38Z",
        "updatedAt" : "2018-05-01T11:04:38Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "0ddb39eb-6377-4b1c-b858-f121bba73f3e",
        "parentId" : "e173ab3f-a635-4da4-9b32-17c477a7ddc4",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "It could be moved at a later stage... but I would see it as a loss (more general argument in #20748)",
        "createdAt" : "2018-05-01T11:10:08Z",
        "updatedAt" : "2018-05-01T11:10:08Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "c62973b28b29f2884f27d335b0b93c0440928b82",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +1082,1086 @@            axis = self.axis or 0\n\n        if is_iterator(key):\n            key = list(key)\n        self._validate_key(key, axis)"
  },
  {
    "id" : "d40da993-4703-4fe6-8f44-7dcba6494267",
    "prId" : 20814,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20814#pullrequestreview-115898268",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f351554a-eb79-46ba-9e2d-b4ae8ec9a762",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There is similar functionality in this file (`_iLocIndexer._is_valid_integer/_is_valid_list_like`), but since that is for checking without the -1 specific behaviour, I don't think it is possible / easy to share the implementation (it would be two separate cases inside the function anyhow)",
        "createdAt" : "2018-04-26T15:17:12Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "00c6eb3c-bb24-4398-90f0-5806f50e1c8b",
        "parentId" : "f351554a-eb79-46ba-9e2d-b4ae8ec9a762",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is this needed, as opposed to maybe_convert_indices? (maybe refactor that a bit?)",
        "createdAt" : "2018-04-26T22:24:22Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8100ec37-57ba-4067-88a8-6f3c36a58997",
        "parentId" : "f351554a-eb79-46ba-9e2d-b4ae8ec9a762",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`maybe_convert_indices` *converts* indices, this one only checks bounds. For this use-case, it is not needed to convert negative into positive indices, as this is handles well by numpy (it's only when you want to use our own `take_1d` that you need to do such conversion)",
        "createdAt" : "2018-04-26T22:31:50Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "54d784ae-b0e1-4cab-acc1-256e3d34cc4e",
        "parentId" : "f351554a-eb79-46ba-9e2d-b4ae8ec9a762",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "then fix maybe_convert_indixes which duplicates this logic",
        "createdAt" : "2018-04-26T22:36:40Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a0a29ccd-a10e-428f-b12e-17993d94b63b",
        "parentId" : "f351554a-eb79-46ba-9e2d-b4ae8ec9a762",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "As I said, `maybe_convert_indices` *converts* the indices first and then checks bounds 0-1, this function only checks bounds but different bounds (-1 to n), so there is no real duplicate code. Combining both will only make the single function more complex to understand. Both serve a different purpose, and are used in different places in the code base. There is IMO really no reason to combine them",
        "createdAt" : "2018-04-26T22:45:10Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "93109a0c-3580-406c-9a17-00d467e75339",
        "parentId" : "f351554a-eb79-46ba-9e2d-b4ae8ec9a762",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "FWIW, I initially started by changing `maybe_convert_indices` to handle both. But it required two new keywords to toggle checking for invalid negative indexers and whether to allow an all `-1` take from an empty index. The only thing it ended up sharing was the integer too large check, which wasn't worthwhile.",
        "createdAt" : "2018-04-27T00:47:37Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "9cb3c9bb-5e4f-4119-b264-85b4142bf0a0",
        "parentId" : "f351554a-eb79-46ba-9e2d-b4ae8ec9a762",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so now we have 2 different code paths which do very similar type of validation, I would try to simplify ``Series._take`` and ``NDFrame._take`` to use these new helper functions, removing the need for ``maybe_convert_indices`` entirely.",
        "createdAt" : "2018-04-27T10:42:22Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c7d2b022-61ab-4999-a184-363fde874359",
        "parentId" : "f351554a-eb79-46ba-9e2d-b4ae8ec9a762",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "They have different behaviors.\r\n\r\n1. `maybe_convert_indices` allows for any negative numbers, while `validate_indices` allows for just `-1`\r\n2. `validate_indices` allows for an array of `-1` taken from an empty array, while `maybe_convert_indices` doesn't.\r\n\r\nYou'd need two keywords to control those behaviors, and the only thing that could be shared is a `max_idx > n`. Better to have two simpler functions here.",
        "createdAt" : "2018-04-27T11:01:13Z",
        "updatedAt" : "2018-04-27T11:02:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec0cecd292947aa4d8416991e9f8920a4cd9a831",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +2425,2429 @@\n\ndef validate_indices(indices, n):\n    \"\"\"Perform bounds-checking for an indexer.\n"
  },
  {
    "id" : "d5927e89-9fa2-4a43-847d-ed519dfae659",
    "prId" : 21558,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21558#pullrequestreview-131149068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcf5434f-9c58-4503-9d15-de370ada49d1",
        "parentId" : null,
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "In my last few commits this except clause hid the cause of the underlying exception. Cant it just be removed altogether and let exceptions raise as they occur onstead of goinc through error()?",
        "createdAt" : "2018-06-20T18:23:26Z",
        "updatedAt" : "2018-06-21T09:42:13Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "ace4e2ac-8560-4f4a-b431-eab1759c51a1",
        "parentId" : "fcf5434f-9c58-4503-9d15-de370ada49d1",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "> In my last few commits this except clause hid the cause of the underlying exception.\r\n\r\nWell, in principle this is its exact goal ;-) Can you provide an example? I guess we should just specify the exceptions it catches.",
        "createdAt" : "2018-06-20T23:21:41Z",
        "updatedAt" : "2018-06-21T09:42:13Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "485cb7a7-ba3f-4ef2-8414-250c20f41f3c",
        "parentId" : "fcf5434f-9c58-4503-9d15-de370ada49d1",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "> Cant it just be removed altogether and let exceptions raise as they occur onstead of goinc through error()?\r\n\r\n@topper-123 well, [maybe you're right](https://github.com/pandas-dev/pandas/pull/21594)!",
        "createdAt" : "2018-06-22T10:41:15Z",
        "updatedAt" : "2018-06-22T10:41:15Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e90b3005ad74d102ed85b9e3a785d03b1d6a90d",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1815,1819 @@                raise\n            except:\n                error()\n\n            if not ax.contains(key):"
  },
  {
    "id" : "9256d766-eceb-4816-8524-6ed876aa4b4a",
    "prId" : 21558,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21558#pullrequestreview-130658828",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "653a5f04-a4d2-483b-8991-76daf98cfe48",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is it possible to add a test for this (maybe compare the exception message)?",
        "createdAt" : "2018-06-21T00:11:53Z",
        "updatedAt" : "2018-06-21T09:42:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "877eb377-0c7b-4dd8-9a1e-32f0720cfd7a",
        "parentId" : "653a5f04-a4d2-483b-8991-76daf98cfe48",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Unfortunately comparing the message is not enough (it didn't change - and is already tested). We would have to check the traceback, and I have no idea of how to do it - and _if_ we want to do it.",
        "createdAt" : "2018-06-21T03:51:33Z",
        "updatedAt" : "2018-06-21T09:42:13Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e90b3005ad74d102ed85b9e3a785d03b1d6a90d",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1817,1821 @@                error()\n\n            if not ax.contains(key):\n                error()\n"
  },
  {
    "id" : "94b65213-e68d-4711-85e8-c3dd0676b87e",
    "prId" : 22913,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22913#pullrequestreview-160967280",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e98f18bc-9815-4df4-9e3d-67c4fe9114f4",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "+1 on all the changed names here; this is very clear",
        "createdAt" : "2018-10-02T23:59:38Z",
        "updatedAt" : "2018-10-08T18:51:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "04478f96143731450aef0844480a06ec0edba81c",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +2438,2442 @@            stop = target_len\n        elif stop < 0:\n            stop += target_len\n        if step is None:\n            step = 1"
  },
  {
    "id" : "dc279bb9-4cdf-453f-992e-3169113125b9",
    "prId" : 22913,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22913#pullrequestreview-162961682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6b9e842-3961-4e26-a0bf-621feecec44a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you remove this warning? The general problem with these warnings is that they are added, but never removed.",
        "createdAt" : "2018-10-09T11:42:04Z",
        "updatedAt" : "2018-10-09T11:42:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "709178f6-3bbb-4054-bbc0-c40db5abd588",
        "parentId" : "e6b9e842-3961-4e26-a0bf-621feecec44a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that's fine too",
        "createdAt" : "2018-10-09T15:42:42Z",
        "updatedAt" : "2018-10-09T15:42:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "04478f96143731450aef0844480a06ec0edba81c",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@# pylint: disable=W0223\nimport textwrap\nimport warnings"
  },
  {
    "id" : "2a6ef86b-8148-402d-807c-99fe8658bb1b",
    "prId" : 24596,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24596#pullrequestreview-189480685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3983b054-176e-4ed4-9dc7-ee95e12f2542",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hoping to clean up the type on `value` a bit to avoid this.",
        "createdAt" : "2019-01-03T17:59:18Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "bbcd5f6e-d9cc-4fc8-8722-535f48287c1c",
        "parentId" : "3983b054-176e-4ed4-9dc7-ee95e12f2542",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a TODO for any section that we should change later",
        "createdAt" : "2019-01-04T18:40:16Z",
        "updatedAt" : "2019-01-04T18:55:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f4fbde4472700525959dbb7255185e36155f21",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +584,588 @@                # hasattr first, to avoid coercing to ndarray without reason.\n                # But we may be relying on the ndarray coercion to check ndim.\n                # Why not just convert to an ndarray earlier on if needed?\n                elif ((hasattr(value, 'ndim') and value.ndim == 2)\n                      or (not hasattr(value, 'ndim') and"
  },
  {
    "id" : "a928118f-d5fd-468e-a299-a32a0304cad7",
    "prId" : 26155,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26155#pullrequestreview-228889942",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "270c5638-787b-4da2-8c21-96d0dd0077d2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is line 978 still needed / hit?",
        "createdAt" : "2019-04-20T18:11:44Z",
        "updatedAt" : "2019-04-24T14:31:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "75131d82-891a-4ef8-8ab0-e8ff2b55359a",
        "parentId" : "270c5638-787b-4da2-8c21-96d0dd0077d2",
        "authorId" : "1c02d215-c939-4a51-8b15-8d491f3a1210",
        "body" : "are you referring to this line?\r\n`if len(tup) > self.obj.ndim:\r\n            raise IndexingError(\"Too many indexers. handle elsewhere\")`\r\nI have updated the if statement and added the test case where it hits.",
        "createdAt" : "2019-04-20T20:30:12Z",
        "updatedAt" : "2019-04-24T14:31:55Z",
        "lastEditedBy" : "1c02d215-c939-4a51-8b15-8d491f3a1210",
        "tags" : [
        ]
      }
    ],
    "commit" : "2309e147592b6bd932fae40086b73d9e68aa60d4",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +953,957 @@        except Exception as e1:\n            if isinstance(tup[0], (slice, Index)):\n                raise IndexingError(\"Handle elsewhere\")\n\n            # raise the error if we are not sorted"
  },
  {
    "id" : "a24d6884-c6f6-405e-b629-e90c79fe0ace",
    "prId" : 26911,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26911#pullrequestreview-253523928",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee2064ba-c381-4fdc-8aa5-01728c4da075",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I'm pretty confused about this check. How is this solving the original issue? I may be missing something.",
        "createdAt" : "2019-06-21T13:35:26Z",
        "updatedAt" : "2019-06-26T13:12:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "967c0fab-9bd2-47c0-80f2-fcdfebfa1152",
        "parentId" : "ee2064ba-c381-4fdc-8aa5-01728c4da075",
        "authorId" : "5ec33cd8-8bdd-42d2-a9d1-54b49e8d1a7a",
        "body" : "The way I understood the issue is that the code is not doing what the documentation says, as linked by yourself in the issue description:\r\n\r\n> You may select rows from a DataFrame using a boolean vector the same length as the DataFrame’s index\r\n\r\nSo, if the lengths are different, an exception gets raised. Do you think it should be handled in a different way?",
        "createdAt" : "2019-06-21T14:25:28Z",
        "updatedAt" : "2019-06-26T13:12:16Z",
        "lastEditedBy" : "5ec33cd8-8bdd-42d2-a9d1-54b49e8d1a7a",
        "tags" : [
        ]
      },
      {
        "id" : "a6549e4c-6514-4a50-a55c-c18b5a3b52c1",
        "parentId" : "ee2064ba-c381-4fdc-8aa5-01728c4da075",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Sorry, I missed the `result = key` assignment at the start.",
        "createdAt" : "2019-06-24T16:31:45Z",
        "updatedAt" : "2019-06-26T13:12:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f819c38a726f90fde6d301d578d05ad2343a743",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +2451,2455 @@\n        # GH26658\n        if len(result) != len(index):\n            raise IndexError(\n                'Item wrong length {} instead of {}.'.format(len(result),"
  },
  {
    "id" : "7b21e243-1cfa-4fed-af3e-e9dd7811bb23",
    "prId" : 27229,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27229#pullrequestreview-258958391",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc7e3622-8219-427a-a9a1-6b249788f813",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should prob use isinstance here as this is an old idiom",
        "createdAt" : "2019-07-08T01:21:53Z",
        "updatedAt" : "2019-07-08T13:51:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "937b5f73-6520-420c-90bb-07c1ae2ce1fe",
        "parentId" : "bc7e3622-8219-427a-a9a1-6b249788f813",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "tried this, turns out this is intentional to get tuple but exclude NamedTuple.  Added a comment to that effect.  (green)",
        "createdAt" : "2019-07-08T14:52:55Z",
        "updatedAt" : "2019-07-08T14:52:56Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "39fa0141fb2a695fb47bac4a4895e3c6c8de41f5",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +1428,1432 @@\n    def __getitem__(self, key):\n        if type(key) is tuple:\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n            if self._is_scalar_access(key):"
  },
  {
    "id" : "d6da1051-9856-4db5-b21e-099618006778",
    "prId" : 27259,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27259#pullrequestreview-258635585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0698a6e-1b85-4c67-8c29-262aa3da58e9",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can you add a comment about why this is caught here",
        "createdAt" : "2019-07-06T03:27:31Z",
        "updatedAt" : "2019-07-06T20:21:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "966dbdd3-34ff-4c11-8f63-ab0493335462",
        "parentId" : "f0698a6e-1b85-4c67-8c29-262aa3da58e9",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Do we need to test this somehow as well?",
        "createdAt" : "2019-07-06T10:28:25Z",
        "updatedAt" : "2019-07-06T20:21:41Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "2ea15eea-6a17-4354-94af-9315d11c72f3",
        "parentId" : "f0698a6e-1b85-4c67-8c29-262aa3da58e9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "See https://github.com/pandas-dev/pandas/pull/27258 for a discussion on that. I can add a test with the code snippet I show there, but is a rather dummy example ..",
        "createdAt" : "2019-07-06T13:11:26Z",
        "updatedAt" : "2019-07-07T17:19:00Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8256b997-1aca-4154-9d6f-376c3b78a8b0",
        "parentId" : "f0698a6e-1b85-4c67-8c29-262aa3da58e9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I guess this is fine, though why are you not using ``.loc`` and *using* ``__getitem__``?",
        "createdAt" : "2019-07-06T22:13:25Z",
        "updatedAt" : "2019-07-06T22:13:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0875c0b4-ea25-48a7-b0b2-00d828c98f96",
        "parentId" : "f0698a6e-1b85-4c67-8c29-262aa3da58e9",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> why are you not using `.loc` and using `__getitem__`? \r\n\r\nThis is from a custom Indexer attribute in geopandas, so it is on purpose not using `.loc`. Now, I don't say it is the best implementation by using such pandas internals, opened an issue about that in geopandas https://github.com/geopandas/geopandas/issues/1042",
        "createdAt" : "2019-07-07T17:21:00Z",
        "updatedAt" : "2019-07-07T17:21:00Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4a12446b9d4029b84460aac97cc15b9d8841fc2",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +119,123 @@            try:\n                values = self.obj._get_value(*key)\n            except (KeyError, TypeError, InvalidIndexError):\n                # TypeError occurs here if the key has non-hashable entries,\n                #  generally slice or list."
  },
  {
    "id" : "0e8a4c26-40a6-4797-b0fa-900a3fdb4a09",
    "prId" : 27351,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27351#pullrequestreview-261006184",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee443a46-95b6-4272-8069-a8e606036daa",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can label be `Hashable`?",
        "createdAt" : "2019-07-11T23:53:30Z",
        "updatedAt" : "2019-07-12T15:10:37Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "437f8fed5a9754b26a5099f04d631c8ef39a0995",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +144,148 @@            return self._getitem_axis(key, axis=axis)\n\n    def _get_label(self, label, axis: int):\n        if self.ndim == 1:\n            # for perf reasons we want to try _xs first"
  },
  {
    "id" : "81d6866b-a403-4042-8dd6-d24a105888ab",
    "prId" : 27351,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27351#pullrequestreview-261007685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afc2b770-ce62-488b-8030-77d3fe58238a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you annotate this?",
        "createdAt" : "2019-07-11T23:56:07Z",
        "updatedAt" : "2019-07-12T15:10:37Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "75e53638-3926-4fd8-9a32-c8000c141a4f",
        "parentId" : "afc2b770-ce62-488b-8030-77d3fe58238a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "itd just be Any for both of em.  Is that materially better than leaving it blank?  In general I prefer to leave it blank rather than put a too-loose type that I'm not sure about",
        "createdAt" : "2019-07-12T00:00:15Z",
        "updatedAt" : "2019-07-12T15:10:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "437f8fed5a9754b26a5099f04d631c8ef39a0995",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +579,583 @@            self.obj._maybe_update_cacher(clear=True)\n\n    def _setitem_with_indexer_missing(self, indexer, value):\n        \"\"\"\n        Insert new row(s) or column(s) into the Series or DataFrame."
  },
  {
    "id" : "f98c5ad5-a323-4409-8792-97c8400bace9",
    "prId" : 27351,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27351#pullrequestreview-261284235",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d7d6c3e-97a3-4f15-98ad-e3b746c606dc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "kind=Optional[str]",
        "createdAt" : "2019-07-12T14:17:53Z",
        "updatedAt" : "2019-07-12T15:10:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "437f8fed5a9754b26a5099f04d631c8ef39a0995",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +159,163 @@        return self.obj._ixs(key, axis=axis)\n\n    def _slice(self, obj, axis: int, kind=None):\n        return self.obj._slice(obj, axis=axis, kind=kind)\n"
  },
  {
    "id" : "6003f488-079e-4070-be13-dc1dbb9d6f6b",
    "prId" : 27351,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27351#pullrequestreview-261346525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7e9888c-f32e-43b4-8d90-c1c4e1e43fc3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string though",
        "createdAt" : "2019-07-12T14:18:28Z",
        "updatedAt" : "2019-07-12T15:10:37Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3daac0ac-4f98-4e8b-a0ea-c5102ec6846c",
        "parentId" : "a7e9888c-f32e-43b4-8d90-c1c4e1e43fc3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'd rather not.  If I did, it would just say both parameters are `object`, which may be too loose.  I'd rather leave it open for someone to reason about and add a more-correct version.",
        "createdAt" : "2019-07-12T15:10:15Z",
        "updatedAt" : "2019-07-12T15:10:37Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "461808ac-7ffa-4bfe-8f86-2bd5f9ce8dfb",
        "parentId" : "a7e9888c-f32e-43b4-8d90-c1c4e1e43fc3",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "actually I think spitting this into a ndim==1 and a ndim==2 functions would be helpful (future PR ok)",
        "createdAt" : "2019-07-12T16:04:58Z",
        "updatedAt" : "2019-07-12T16:04:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "437f8fed5a9754b26a5099f04d631c8ef39a0995",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +580,584 @@\n    def _setitem_with_indexer_missing(self, indexer, value):\n        \"\"\"\n        Insert new row(s) or column(s) into the Series or DataFrame.\n        \"\"\""
  },
  {
    "id" : "7675e31e-2cff-4a4b-b4c8-0f9af9b13697",
    "prId" : 27376,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27376#pullrequestreview-261902955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f4d6626-30b1-46c4-95ac-b83e415cfbc3",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Length here is always indeterminate right? If it is predefined would be nice to subscript with the length of elements",
        "createdAt" : "2019-07-15T15:29:55Z",
        "updatedAt" : "2019-07-15T15:30:13Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "e2fb18c9-23fc-491f-b12d-96437631ca6d",
        "parentId" : "5f4d6626-30b1-46c4-95ac-b83e415cfbc3",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, in general we don't know the length.\r\n\r\nI'll be doing some more work in this file, will try to make types more specific as I figure them out",
        "createdAt" : "2019-07-15T15:33:09Z",
        "updatedAt" : "2019-07-15T15:33:10Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5327c646e378c8d98aaf8fafc27423176bdf350b",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1410,1414 @@            return self._getitem_axis(maybe_callable, axis=axis)\n\n    def _is_scalar_access(self, key: Tuple):\n        raise NotImplementedError()\n"
  },
  {
    "id" : "a65e657d-62c8-4f34-8a33-f15e514ec78b",
    "prId" : 27576,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27576#pullrequestreview-266925369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2727774-ef97-4a54-90ba-a995be888ecc",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@toobaz any thoughts on showing this is unreachable?  If we can confirm this is the case, then this chunk of the code can be shared with the other _getitem_tuple method above\r\n\r\n(pinging you since you wrote the wiki page on simplifying this code)",
        "createdAt" : "2019-07-25T00:02:38Z",
        "updatedAt" : "2019-07-25T19:42:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "292a863e-715d-41bc-9c78-37fbfc855a3a",
        "parentId" : "c2727774-ef97-4a54-90ba-a995be888ecc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "looks like this also wasnt hit in 0.24.2",
        "createdAt" : "2019-07-25T00:34:20Z",
        "updatedAt" : "2019-07-25T19:42:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "47ca6f89-7045-47f9-bcb2-d620d7a0c52e",
        "parentId" : "c2727774-ef97-4a54-90ba-a995be888ecc",
        "authorId" : null,
        "body" : "And for context, example case which triggers on that commit but not on master\r\n<details><summary>Code</summary>\r\n\r\n```python\r\nimport numpy as np\r\nfrom pandas import *\r\n\r\n\r\nmi_int = DataFrame(\r\n    np.random.randn(3, 3),\r\n    columns=[[2, 2, 4], [6, 8, 10]],\r\n    index=[[4, 4, 8], [8, 10, 12]],\r\n)\r\n\r\n# this triggers the code path when testing against 9f0dc3befb\r\nrs = mi_int.iloc[:, 2]  \r\n```\r\n\r\n\r\n</details>\r\n",
        "createdAt" : "2019-07-25T06:23:14Z",
        "updatedAt" : "2019-07-25T19:42:44Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "8352dcaa-10ab-4210-8d8c-f237f0ed395f",
        "parentId" : "c2727774-ef97-4a54-90ba-a995be888ecc",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "I don't think that path is ever reached. It should be reached by something like ``df.loc[1, [0, 1]]``, which however gets captured in the call above to ``self._getitem_lowerdim(tup)`` (which doesn't make sense, because it is named \"lowerdim\", but then it resorts to ``_is_nested_tuple_indexer``). So to sum up: I don't know exactly what the aim of that ``axis -= 1`` is, I don't think it is ever reached, but I think it _should_ be reached in principle.",
        "createdAt" : "2019-07-25T07:22:59Z",
        "updatedAt" : "2019-07-25T19:42:44Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "2b91768d-4f8a-42a2-bc40-34aaeb926409",
        "parentId" : "c2727774-ef97-4a54-90ba-a995be888ecc",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "(but no major objections to removing for now)",
        "createdAt" : "2019-07-25T07:27:24Z",
        "updatedAt" : "2019-07-25T19:42:44Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "446e0a1e-15cc-4593-bef8-1ff0f7a63404",
        "parentId" : "c2727774-ef97-4a54-90ba-a995be888ecc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@pilkibun thanks for tracking that down\r\n\r\n@toobaz how about we fix getitem_lowerdim to make sense before removing this check.  simplifying this code is going to take a few passes",
        "createdAt" : "2019-07-25T15:28:47Z",
        "updatedAt" : "2019-07-25T19:42:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "25bef903-580d-43d3-a39a-1d0d722a7958",
        "parentId" : "c2727774-ef97-4a54-90ba-a995be888ecc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@pilkibun there is another un-hit block on lines 440-450.  any idea what that was intended to catch?",
        "createdAt" : "2019-07-25T16:51:31Z",
        "updatedAt" : "2019-07-25T19:42:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8d46bab2-400e-4f73-818b-be75630df22c",
        "parentId" : "c2727774-ef97-4a54-90ba-a995be888ecc",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this was related to Panel indexing, can probably go.",
        "createdAt" : "2019-07-25T17:03:38Z",
        "updatedAt" : "2019-07-25T19:42:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b666c364-0053-421b-af55-03021a3f503f",
        "parentId" : "c2727774-ef97-4a54-90ba-a995be888ecc",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "> @toobaz how about we fix getitem_lowerdim to make sense before removing this check. simplifying this code is going to take a few passes\r\n\r\nNo objection",
        "createdAt" : "2019-07-25T23:00:06Z",
        "updatedAt" : "2019-07-25T23:00:07Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0559a17010318cbd1da18fce62cb78994663a9e",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +2074,2078 @@            if retval.ndim < self.ndim:\n                # TODO: this is never reached in tests; can we confirm that\n                #  it is impossible?\n                axis -= 1\n"
  },
  {
    "id" : "f65e2b64-0f63-4cb7-9248-2bc3754827d5",
    "prId" : 27576,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27576#pullrequestreview-266344666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da9cab66-3125-44e5-a443-6c4ede0c3942",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The only _NDFrameIndexer method these use is _tuplify, which is why this PR takes that out and makes it a function instead of a method.  Much easier to reason about these classes now",
        "createdAt" : "2019-07-25T00:05:30Z",
        "updatedAt" : "2019-07-25T19:42:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0559a17010318cbd1da18fce62cb78994663a9e",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +2150,2154 @@\n\nclass _ScalarAccessIndexer(_NDFrameIndexerBase):\n    \"\"\" access scalars quickly \"\"\"\n"
  },
  {
    "id" : "42f5d6c1-2305-4822-94d3-b6b5d44db786",
    "prId" : 27576,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27576#pullrequestreview-266899615",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "503628af-eb28-4840-9d99-b23f6db97a6f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string",
        "createdAt" : "2019-07-25T17:04:01Z",
        "updatedAt" : "2019-07-25T19:42:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "eb78fda4-f222-4734-b28f-35c5fe78b379",
        "parentId" : "503628af-eb28-4840-9d99-b23f6db97a6f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "sure",
        "createdAt" : "2019-07-25T17:09:44Z",
        "updatedAt" : "2019-07-25T19:42:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9be82252-eb67-415e-8950-082b4cbaaa08",
        "parentId" : "503628af-eb28-4840-9d99-b23f6db97a6f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "docstrings added.  will take another look at removing the discussed lines in the next pass",
        "createdAt" : "2019-07-25T21:39:01Z",
        "updatedAt" : "2019-07-25T21:39:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0559a17010318cbd1da18fce62cb78994663a9e",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +2329,2333 @@    tuple\n    \"\"\"\n    tup = [slice(None, None) for _ in range(ndim)]\n    tup[0] = loc\n    return tuple(tup)"
  },
  {
    "id" : "599afc9f-36e7-41f5-9c8f-8359a589a85b",
    "prId" : 27855,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27855#pullrequestreview-273442057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33279afa-70db-4033-b620-41c12af392a2",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can you add a comment here pointing back to this PR or the issue it closes",
        "createdAt" : "2019-08-10T23:11:56Z",
        "updatedAt" : "2019-08-12T21:11:33Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c522d3bb84b6ec4dc055c9e3a938922bdf52d97",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +326,330 @@        # GH 10360, GH 27841\n        if isinstance(indexer, tuple) and len(indexer) == len(self.obj.axes):\n            for i, ax in zip(indexer, self.obj.axes):\n                if isinstance(ax, MultiIndex) and not (\n                    is_integer(i) or com.is_null_slice(i)"
  },
  {
    "id" : "61e624e8-a609-469d-8d06-0e014db93eae",
    "prId" : 29334,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29334#pullrequestreview-370196695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb131b2b-ca8b-4561-aec3-219485497e06",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i dont think key being a _LocIndexer object makes sense",
        "createdAt" : "2020-03-04T03:27:32Z",
        "updatedAt" : "2020-03-14T19:40:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "200103be-4318-419c-9225-1bb8f7de9208",
        "parentId" : "fb131b2b-ca8b-4561-aec3-219485497e06",
        "authorId" : "918a1605-8583-422d-a500-13bfb42eee2b",
        "body" : "Why?  `_ensure_listlike_indexer` is called at https://github.com/pandas-dev/pandas/blob/d7184e72c9a6fcc3c565ce78dbc3e3030119a463/pandas/core/indexing.py#L586",
        "createdAt" : "2020-03-06T09:46:39Z",
        "updatedAt" : "2020-03-14T19:40:59Z",
        "lastEditedBy" : "918a1605-8583-422d-a500-13bfb42eee2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "26ba2a998f8d593f5dbc7d0b5a37905ec1e8f3f1",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +623,627 @@        Parameters\n        ----------\n        key : _LocIndexer key or list-like of column labels\n            Target labels.\n        axis : key axis if known"
  },
  {
    "id" : "2d44755f-cc6b-4045-af69-340748ea1725",
    "prId" : 29334,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29334#pullrequestreview-370198461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0073ca4a-3393-4581-a1dd-b9ed1f82eb1a",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "it looks like axis isnt used here, is it necessary?",
        "createdAt" : "2020-03-04T03:28:54Z",
        "updatedAt" : "2020-03-14T19:40:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "12db108a-dddd-4bb6-92ed-d9661bc1a8db",
        "parentId" : "0073ca4a-3393-4581-a1dd-b9ed1f82eb1a",
        "authorId" : "918a1605-8583-422d-a500-13bfb42eee2b",
        "body" : "Yes, it's used at https://github.com/pandas-dev/pandas/blob/d7184e72c9a6fcc3c565ce78dbc3e3030119a463/pandas/core/indexing.py#L642\r\nFor rationale of coding this way, see https://github.com/pandas-dev/pandas/pull/29334#issuecomment-586245280.",
        "createdAt" : "2020-03-06T09:49:24Z",
        "updatedAt" : "2020-03-14T19:40:59Z",
        "lastEditedBy" : "918a1605-8583-422d-a500-13bfb42eee2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "26ba2a998f8d593f5dbc7d0b5a37905ec1e8f3f1",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +625,629 @@        key : _LocIndexer key or list-like of column labels\n            Target labels.\n        axis : key axis if known\n        \"\"\"\n        column_axis = 1"
  },
  {
    "id" : "e81a901e-95ce-4de4-b93e-6cbe80ced944",
    "prId" : 29334,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29334#pullrequestreview-370577321",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "846f2432-7f91-42f6-9cf7-a3a13b85dbae",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think the hashable check you can skip and the calls below will take care of it",
        "createdAt" : "2020-03-04T03:32:30Z",
        "updatedAt" : "2020-03-14T19:40:59Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b9fc1b28-f443-4ba8-9923-414f5eae4eb2",
        "parentId" : "846f2432-7f91-42f6-9cf7-a3a13b85dbae",
        "authorId" : "918a1605-8583-422d-a500-13bfb42eee2b",
        "body" : "If no hashable check is performed here, some test cases fail , eg. https://github.com/pandas-dev/pandas/blob/d7184e72c9a6fcc3c565ce78dbc3e3030119a463/pandas/tests/indexing/test_indexing.py#L112 because different errors are raised compared to the original code when some keys are not hashable.",
        "createdAt" : "2020-03-06T19:36:53Z",
        "updatedAt" : "2020-03-14T19:40:59Z",
        "lastEditedBy" : "918a1605-8583-422d-a500-13bfb42eee2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "26ba2a998f8d593f5dbc7d0b5a37905ec1e8f3f1",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +644,648 @@            and is_list_like_indexer(key)\n            and not com.is_bool_indexer(key)\n            and all(is_hashable(k) for k in key)\n        ):\n            for k in key:"
  },
  {
    "id" : "8a856dbf-dc25-44dc-926c-9f16313d234a",
    "prId" : 29894,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29894#pullrequestreview-323994017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c4fbe8a-b66a-46e7-8ef2-c2d73a046ea4",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "might as well annotate while in the neighborhood",
        "createdAt" : "2019-11-27T23:19:08Z",
        "updatedAt" : "2019-11-27T23:30:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "9f2a93fb-033b-46b8-8f99-419afb4df3bd",
        "parentId" : "8c4fbe8a-b66a-46e7-8ef2-c2d73a046ea4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "never mind, for a second github was only showing me this one piece of the diff",
        "createdAt" : "2019-11-27T23:19:41Z",
        "updatedAt" : "2019-11-27T23:30:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a01c4c75-4287-46bf-893c-4edc7a3d9d94",
        "parentId" : "8c4fbe8a-b66a-46e7-8ef2-c2d73a046ea4",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "> might as well annotate while in the neighborhood\r\n\r\nI don't see it returning anything, annotate it as ```-> None```?\r\n\r\nWill open a new PR:)",
        "createdAt" : "2019-11-27T23:32:35Z",
        "updatedAt" : "2019-11-27T23:33:42Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "2d63317d-3f91-4571-b047-a8c8778b5d1c",
        "parentId" : "8c4fbe8a-b66a-46e7-8ef2-c2d73a046ea4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "pls ignore, i was looking at the wrong diff",
        "createdAt" : "2019-11-27T23:33:42Z",
        "updatedAt" : "2019-11-27T23:33:42Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "1cfbef25-0509-4144-8d8e-a78443237015",
        "parentId" : "8c4fbe8a-b66a-46e7-8ef2-c2d73a046ea4",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "I know, but I saw other functions that need to annotated.",
        "createdAt" : "2019-11-27T23:46:01Z",
        "updatedAt" : "2019-11-27T23:46:02Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "cffa9a31dd245a695545e66369ed4d91f20ef5ff",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +228,232 @@        raise AbstractMethodError(self)\n\n    def _has_valid_tuple(self, key: Tuple):\n        \"\"\"\n        Check the key for valid keys across my indexer."
  },
  {
    "id" : "8f3a132a-8a98-4169-b7cc-32a26f5aa0fa",
    "prId" : 29908,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29908#pullrequestreview-324057153",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2494271f-0efa-437d-b0ef-5018b78120db",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "it looks like this always either raises or returns True; is that accurate?  if so, maybe get rid of the return value altogether (might need to update usages)",
        "createdAt" : "2019-11-28T02:33:02Z",
        "updatedAt" : "2019-11-28T02:33:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f7481907-320d-40dc-a8f7-84dad5bb9bd9",
        "parentId" : "2494271f-0efa-437d-b0ef-5018b78120db",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "I don't feel confident enough in reformatting this function, I'll leave it for someone else who will probably won't break the package. ",
        "createdAt" : "2019-11-28T05:08:08Z",
        "updatedAt" : "2019-11-28T05:08:08Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      }
    ],
    "commit" : "41d6cbb9355c84fc51c89c23e93e49519a1c8f90",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +277,281 @@        return True\n\n    def _has_valid_positional_setitem_indexer(self, indexer) -> bool:\n        \"\"\" validate that an positional indexer cannot enlarge its target\n        will raise if needed, does not modify the indexer externally"
  },
  {
    "id" : "19877c28-9ae5-4c64-8668-a20694b09587",
    "prId" : 29908,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29908#pullrequestreview-324027915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b99357e-8710-4e54-9929-7c6c909f964f",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can any of the args here be typed?",
        "createdAt" : "2019-11-28T02:34:02Z",
        "updatedAt" : "2019-11-28T02:34:02Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "41d6cbb9355c84fc51c89c23e93e49519a1c8f90",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +2524,2528 @@\n\ndef _can_do_equal_len(labels, value, plane_indexer, lplane_indexer, obj) -> bool:\n    \"\"\" return True if we have an equal len settable \"\"\"\n    if not len(labels) == 1 or not np.iterable(value) or is_scalar(plane_indexer[0]):"
  },
  {
    "id" : "5a65e465-fbab-48c1-a3b5-779593476d95",
    "prId" : 29908,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29908#pullrequestreview-324028030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a24ce232-4e30-4401-ab21-cfbca1fa778b",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "seems like obj will be a slice?",
        "createdAt" : "2019-11-28T02:34:29Z",
        "updatedAt" : "2019-11-28T02:34:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "41d6cbb9355c84fc51c89c23e93e49519a1c8f90",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +2471,2475 @@\n\ndef need_slice(obj) -> bool:\n    return (\n        obj.start is not None"
  },
  {
    "id" : "1a65961f-f861-46a0-9b4b-d14e40400095",
    "prId" : 30515,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30515#pullrequestreview-366863775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c645e81-8016-4847-88f7-2e5551e1c4f5",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "this looks like it should affect a lot of code other than the particular cases this PR is about.  are those cases broken at the moment?",
        "createdAt" : "2020-02-27T02:18:00Z",
        "updatedAt" : "2020-05-03T15:17:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "80e7cd32-ac9e-4e83-80da-d29c2e20852f",
        "parentId" : "4c645e81-8016-4847-88f7-2e5551e1c4f5",
        "authorId" : "7627866b-49e8-48fc-9905-a5182558148d",
        "body" : "@jbrockmendel \r\nwhen i checked, there are no broken cases in my machine. ",
        "createdAt" : "2020-03-01T14:40:24Z",
        "updatedAt" : "2020-05-03T15:17:28Z",
        "lastEditedBy" : "7627866b-49e8-48fc-9905-a5182558148d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f2db9acb8764b7244c113f88ff4a1c7e30879fa",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1235,1239 @@\n        if ax.is_unique and not getattr(ax, \"is_overlapping\", False):\n            indexer = ax.get_indexer_for(keyarr)\n            keyarr = ax.reindex(keyarr)[0]\n        else:"
  },
  {
    "id" : "67268597-a3c2-4f91-bcd1-6543f5967c13",
    "prId" : 31304,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31304#pullrequestreview-348352698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cbff935-1360-4459-8ea9-23590649a35c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm this condition should likely be handled in ``_slice`` itself",
        "createdAt" : "2020-01-26T00:12:35Z",
        "updatedAt" : "2020-01-26T00:12:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e22e4f44-2ebd-454c-94d4-4736cc484b7e",
        "parentId" : "9cbff935-1360-4459-8ea9-23590649a35c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "yah, _slice is a one-liner that just calls self.obj._slice, so i plan to get rid of it.  for now this is just putting the methods in more reasonable place unchanged",
        "createdAt" : "2020-01-26T00:34:13Z",
        "updatedAt" : "2020-01-26T00:34:13Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "498f64d9-1e66-4196-86dd-d7530cac8f11",
        "parentId" : "9cbff935-1360-4459-8ea9-23590649a35c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "kk",
        "createdAt" : "2020-01-26T00:40:05Z",
        "updatedAt" : "2020-01-26T00:40:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "73a76fa5bb16d82cc2db07e7abd1710c182e4ff8",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +1867,1871 @@        if isinstance(indexer, slice):\n            return self._slice(indexer, axis=axis, kind=\"iloc\")\n        else:\n            # DatetimeIndex overrides Index.slice_indexer and may\n            #  return a DatetimeIndex instead of a slice object."
  },
  {
    "id" : "d4c451d4-487a-45c1-9453-c917645ea666",
    "prId" : 31591,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31591#pullrequestreview-359875909",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "049d236f-1c2a-45da-b8d8-1e0d5a7597d5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "might be able to simply to check_array_indexer right before returning (iow for all cases) here. (try in a followon)",
        "createdAt" : "2020-02-17T17:03:21Z",
        "updatedAt" : "2020-02-21T19:44:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "080d1d2129f101460af12b23d6f2b400e1a66e61",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +2196,2200 @@        result = check_array_indexer(index, result)\n    else:\n        result = check_array_indexer(index, result)\n\n    return result"
  },
  {
    "id" : "d4c855f4-a9eb-44ae-9c9a-ca001bb40ca2",
    "prId" : 31893,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31893#pullrequestreview-357060052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a09fc05-d2bb-4de6-abfd-a0ea6cf5daf8",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "do we have a policy on whether this should be one line or not?",
        "createdAt" : "2020-02-11T21:05:21Z",
        "updatedAt" : "2020-02-13T20:40:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "af7aeff0-5894-480a-b497-85ff2b358d80",
        "parentId" : "3a09fc05-d2bb-4de6-abfd-a0ea6cf5daf8",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "there is `D200 One-line docstring should fit on one line with quotes`, see http://www.pydocstyle.org/en/5.0.2/error_codes.html, but I think that would go against the code cleanups in #31162, #31462 and others.\r\n\r\nwe want consistency. so we need a policy.\r\n\r\n",
        "createdAt" : "2020-02-11T21:27:52Z",
        "updatedAt" : "2020-02-13T20:40:27Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "85d42b5f-5289-4bd6-9212-f2d10c77fc0f",
        "parentId" : "3a09fc05-d2bb-4de6-abfd-a0ea6cf5daf8",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "there are ~550 one-line docstrings split over 3 lines.",
        "createdAt" : "2020-02-11T23:00:42Z",
        "updatedAt" : "2020-02-13T20:40:27Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "63e1a9bfb307125c4979f076d9176a2336b53c5d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +88,92 @@    \"\"\"\n    Mixin for adding .loc/.iloc/.at/.iat to Datafames and Series.\n    \"\"\"\n\n    @property"
  },
  {
    "id" : "b9dfc0b5-1719-40e5-baca-c701e1824072",
    "prId" : 31911,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31911#pullrequestreview-357571470",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29e282fd-c407-4e9d-94fb-2b2f65727ad4",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Worth adding an assert here?",
        "createdAt" : "2020-02-12T15:56:47Z",
        "updatedAt" : "2020-02-12T16:09:28Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1ddf0e01f61e093f5c011446c2eb32c612eff8d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +733,737 @@            retval = getattr(retval, self.name)._getitem_axis(key, axis=i)\n            # We should never have retval.ndim < self.ndim, as that should\n            #  be handled by the _getitem_lowerdim call above.\n            assert retval.ndim == self.ndim\n"
  },
  {
    "id" : "95f03e66-08c0-492b-8063-0a5691b7a9da",
    "prId" : 32082,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32082#pullrequestreview-363040709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9020f18-6fd3-4fd1-bd85-9c2343d6a216",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add an assert",
        "createdAt" : "2020-02-22T15:53:26Z",
        "updatedAt" : "2020-02-22T17:32:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "52ca159e-2f8e-4bd5-addf-9d1ac05a4231",
        "parentId" : "a9020f18-6fd3-4fd1-bd85-9c2343d6a216",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "im ambivalent about this, since micro-optimization is a big part of the goal here",
        "createdAt" : "2020-02-22T17:31:49Z",
        "updatedAt" : "2020-02-22T17:32:21Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "eabf21165845b9b3bd79d058e852587bcd544553",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +733,737 @@\n        for i, key in enumerate(tup):\n            if is_label_like(key):\n                # We don't need to check for tuples here because those are\n                #  caught by the _is_nested_tuple_indexer check above."
  },
  {
    "id" : "4f55af03-470d-47a4-8672-540216fa3ffb",
    "prId" : 32477,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32477#pullrequestreview-370842823",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccb727b2-74fc-405c-85d6-cd63605f1adc",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use np.arange",
        "createdAt" : "2020-03-08T16:01:04Z",
        "updatedAt" : "2020-03-09T17:10:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c326234e-05c8-4f41-87f3-876e946026fe",
        "parentId" : "ccb727b2-74fc-405c-85d6-cd63605f1adc",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "np.arange will give us an Int64Index, whereas this will give us a RangeIndex",
        "createdAt" : "2020-03-08T16:37:32Z",
        "updatedAt" : "2020-03-09T17:10:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a17ba8b5ab148cee97e97d0f02ef27a24934af2",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1619,1623 @@            ilocs = info_idx\n            if isinstance(info_idx, slice):\n                ri = Index(range(len(self.obj.columns)))\n                ilocs = ri[info_idx]\n"
  },
  {
    "id" : "56bffb9e-3dea-4215-8ae1-4ba7673d49ef",
    "prId" : 32477,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32477#pullrequestreview-370840551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ff3abb8-dda9-460a-8045-fa9498651101",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you comment that this is not a positional setter",
        "createdAt" : "2020-03-08T16:01:32Z",
        "updatedAt" : "2020-03-09T17:10:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a17ba8b5ab148cee97e97d0f02ef27a24934af2",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1643,1647 @@            def isetter(loc, v):\n                # positional setting on column loc\n                ser = self.obj._ixs(loc, axis=1)\n\n                # perform the equivalent of a setitem on the info axis"
  },
  {
    "id" : "fbfd55af-c2b2-45c1-becc-6f4e869473da",
    "prId" : 32520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32520#pullrequestreview-382467682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc6f28f3-ab50-4db7-aff8-667e6cf45017",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can you add the GH reference to this comment\r\n\r\nFor the check below, can you use `self.ndim == 1` instead of `isinstance(self.obj, ABCSeries)`.  The ndim check is about 7x faster.",
        "createdAt" : "2020-03-26T22:34:38Z",
        "updatedAt" : "2020-05-18T20:00:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "89ee12804ba3ac2bb914cdb3a1c2ee6f1d9f75b6",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +2035,2039 @@        # GH 26989\n        # For series, unpacking key needs to result in the label.\n        # This is already the case for len(key) == 1; e.g. (1,)\n        if self.ndim == 1 and len(key) > 1:\n            key = (key,)"
  },
  {
    "id" : "d53e75d8-50e8-4b28-9f60-827b6bb06972",
    "prId" : 33047,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33047#pullrequestreview-384159318",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca5e6fbb-35c5-45ea-adc7-5cb615537c52",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I know this is not the behaviour of `Series.at`, but the other option is also to raise an error if the requested key is duplicated. This way we can ensure it is always a scalar that is being returned.",
        "createdAt" : "2020-03-26T20:11:38Z",
        "updatedAt" : "2020-04-14T01:06:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4747f749-16ae-4a4d-8638-417276e021b0",
        "parentId" : "ca5e6fbb-35c5-45ea-adc7-5cb615537c52",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I was leaning that way until I saw that Series.at explicitly handles duplicate indexes",
        "createdAt" : "2020-03-26T20:20:18Z",
        "updatedAt" : "2020-04-14T01:06:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e5b8568d-7296-437d-b662-7cc6778149ef",
        "parentId" : "ca5e6fbb-35c5-45ea-adc7-5cb615537c52",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I am personally in favor of raising, now we have the option to choose that.",
        "createdAt" : "2020-03-27T14:00:09Z",
        "updatedAt" : "2020-04-14T01:06:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "885701e9-8420-46d5-ad87-d8564e050f97",
        "parentId" : "ca5e6fbb-35c5-45ea-adc7-5cb615537c52",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I see the appeal, but we shouldn't have the DataFrame behavior differ from the Series behavior.  So we would need to deprecate the Series behavior, right?\r\n\r\nAlso, this currently _doesnt_ fail if we have non-unique index/columns but are doing a lookup on a key that only occurs once, so raising for all non-unique cases would be a breaking change (which again I'm OK with, but needs a deprecation cycle)",
        "createdAt" : "2020-03-27T16:12:41Z",
        "updatedAt" : "2020-04-14T01:06:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "8cacfc5d-2cd5-4bc3-8d2b-2bcc9f5413b7",
        "parentId" : "ca5e6fbb-35c5-45ea-adc7-5cb615537c52",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> Also, this currently doesnt fail if we have non-unique index/columns but are doing a lookup on a key that only occurs once\r\n\r\nCan you give an example? I was trying it on the example from the test with an extra column, and that still fails:\r\n\r\n```\r\narr = np.random.randn(9).reshape(3, 3) \r\ndf = DataFrame(arr, columns=[\"A\", \"A\", \"B\"])  \r\ndf.at[0, 'B']\r\n```\r\n\r\nNow, my proposal was actually also to only raise for a *duplicated key* (if that is possible to implement), so that would not be a breaking change then?",
        "createdAt" : "2020-03-27T16:20:21Z",
        "updatedAt" : "2020-04-14T01:06:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b645881a-3104-453e-b308-1108b0bad82f",
        "parentId" : "ca5e6fbb-35c5-45ea-adc7-5cb615537c52",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Now, my proposal was actually also to only raise for a duplicated key (if that is possible to implement), so that would not be a breaking change then?\r\n\r\nCorrect.  That would amount to a try/except in DataFrame._set_value and DataFrame._get_value with a better exception message re-raised on exception, pretty much at the exact places where #33052 adds assertions for self.columns.is_unique",
        "createdAt" : "2020-03-27T17:17:51Z",
        "updatedAt" : "2020-04-14T01:06:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "cb3dc725-c579-4f12-90dd-e0d9846b9ba9",
        "parentId" : "ca5e6fbb-35c5-45ea-adc7-5cb615537c52",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "-1 on changing this, IOW I prefer to handle the non-unique as we do now (and do in .loc). If we change this we would need to deprecate all uses of this and would take quite a while. Making .at behave *the same* for now is prefereable.",
        "createdAt" : "2020-03-29T15:39:55Z",
        "updatedAt" : "2020-04-14T01:06:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "189abf53-f19f-43a8-b16c-8745c9128e71",
        "parentId" : "ca5e6fbb-35c5-45ea-adc7-5cb615537c52",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would be fine with deprecating it for Series.at. \r\n(and I think it is fine to only consider `at` for now, as this is a more restricted indexer anyway compared to `.loc`, which needs to handle all kinds of different cases)",
        "createdAt" : "2020-03-30T07:41:13Z",
        "updatedAt" : "2020-04-14T01:06:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2ecd5dc6-eac8-442d-842e-84884a760223",
        "parentId" : "ca5e6fbb-35c5-45ea-adc7-5cb615537c52",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'm not wild about deprecating, would prefer to make that discussion separate.",
        "createdAt" : "2020-03-30T15:58:15Z",
        "updatedAt" : "2020-04-14T01:06:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "011bee08-6454-458a-990e-791e5683335e",
        "parentId" : "ca5e6fbb-35c5-45ea-adc7-5cb615537c52",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I opened https://github.com/pandas-dev/pandas/issues/33153 to have this discussion properly. ",
        "createdAt" : "2020-03-30T19:22:35Z",
        "updatedAt" : "2020-04-14T01:06:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "65aaa05196f8a9f679d18f03d33eaf1a4680e78d",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +2078,2082 @@            if not isinstance(key, tuple) or not all(is_scalar(x) for x in key):\n                raise ValueError(\"Invalid call for scalar access (getting)!\")\n            return self.obj.loc[key]\n\n        return super().__getitem__(key)"
  },
  {
    "id" : "e5f79f12-1a8e-4614-b8c4-77018cddc716",
    "prId" : 33047,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33047#pullrequestreview-382502292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce1f17a9-4df6-40f1-accd-bc757550a032",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add this assertion explicity",
        "createdAt" : "2020-03-26T22:36:49Z",
        "updatedAt" : "2020-04-14T01:06:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "10055c8b-6f5d-48da-ae22-a487b5ee44ab",
        "parentId" : "ce1f17a9-4df6-40f1-accd-bc757550a032",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "updated+green",
        "createdAt" : "2020-03-27T00:08:08Z",
        "updatedAt" : "2020-04-14T01:06:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "65aaa05196f8a9f679d18f03d33eaf1a4680e78d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +2070,2074 @@        # Only relevant for self.ndim == 2\n        assert self.ndim == 2\n        return self.obj.index.is_unique and self.obj.columns.is_unique\n\n    def __getitem__(self, key):"
  },
  {
    "id" : "c71cae31-8e38-424d-8425-3ab3450eeb55",
    "prId" : 33047,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33047#pullrequestreview-392548847",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83d59ff8-95b2-45d3-82e2-7b498da7a34f",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "One problem with this, though, is that it allows any kind of indexer for this case (not only scalar ones), and thus relaxing the requirements for `.at`",
        "createdAt" : "2020-04-13T18:56:21Z",
        "updatedAt" : "2020-04-14T01:06:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "219b7909-050e-4f0b-a126-314eb347e4e4",
        "parentId" : "83d59ff8-95b2-45d3-82e2-7b498da7a34f",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Updated to address this issue",
        "createdAt" : "2020-04-14T01:45:52Z",
        "updatedAt" : "2020-04-14T01:45:52Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "65aaa05196f8a9f679d18f03d33eaf1a4680e78d",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +2078,2082 @@            if not isinstance(key, tuple) or not all(is_scalar(x) for x in key):\n                raise ValueError(\"Invalid call for scalar access (getting)!\")\n            return self.obj.loc[key]\n\n        return super().__getitem__(key)"
  },
  {
    "id" : "ff4033d4-8768-4654-9120-1ebf6366d032",
    "prId" : 34199,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34199#pullrequestreview-417817606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce659422-bf34-4fe2-bdad-81d32deda17f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you make this a bit simpler here, pls do this:\r\n\r\nL2166, change that to: `return result.astype(bool)._values`\r\nL21067: elif -> if\r\nrm L2170\r\nrm L2174\r\nrm L2176-2177\r\n\r\nL2178: return check_array_indexer(indexer, result)\r\n\r\nbasically pulling the last 3 clauses together",
        "createdAt" : "2020-05-25T17:18:07Z",
        "updatedAt" : "2020-05-31T23:38:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ce27c8aebf30eeb1679b7cde09c9579d9b3cb3f",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +2177,2181 @@        # GH 33924\n        # key may contain nan elements, check_array_indexer needs bool array\n        result = pd_array(result, dtype=bool)\n    return check_array_indexer(index, result)\n"
  },
  {
    "id" : "396222ab-7497-4bd9-8a07-99ea5681af28",
    "prId" : 34450,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/34450#pullrequestreview-421213783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "def957de-e2d6-47be-aa04-e39a86ced9a5",
        "parentId" : null,
        "authorId" : "1d126022-9e3f-4647-81f3-dba5d079dd03",
        "body" : "> Does this not already raise a KeyError a few lines up?\r\n\r\nIt does, but the problem I tried to address was the default return value of None, as it is checked as a condition later in the _getitem_lowerdim function.\r\n\r\nI'm not quite acquainted with the code yet but it seems that for some cases the KeyError won't actually raise so it falls back to the default return of None, which causes the issue here.",
        "createdAt" : "2020-05-29T18:59:39Z",
        "updatedAt" : "2020-06-03T03:13:03Z",
        "lastEditedBy" : "1d126022-9e3f-4647-81f3-dba5d079dd03",
        "tags" : [
        ]
      },
      {
        "id" : "fee3f0be-3079-480a-8b37-14306071682b",
        "parentId" : "def957de-e2d6-47be-aa04-e39a86ced9a5",
        "authorId" : "1d126022-9e3f-4647-81f3-dba5d079dd03",
        "body" : "And I agree, raising just an `Exception` is not very useful, perhaps raising an `IndexingError` would be more appropriate?",
        "createdAt" : "2020-05-29T19:05:34Z",
        "updatedAt" : "2020-06-03T03:13:03Z",
        "lastEditedBy" : "1d126022-9e3f-4647-81f3-dba5d079dd03",
        "tags" : [
        ]
      }
    ],
    "commit" : "553a8798e54f4079a1e6f2a6910adb2100e50a7f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +769,773 @@            try:\n                result = self._handle_lowerdim_multi_index_axis0(tup)\n                return result\n            except IndexingError:\n                pass"
  },
  {
    "id" : "6aa48755-00bb-47c8-95ea-47834419f794",
    "prId" : 35140,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35140#pullrequestreview-443450624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6128fbe-9e06-4df5-aa4e-7bde5f9f96d3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here about why this is",
        "createdAt" : "2020-07-06T22:40:00Z",
        "updatedAt" : "2020-07-07T14:07:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a0b224924a97b813dfaea48bb5abf0da95c3593",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1166,1170 @@                        return {\"key\": key}\n                    raise\n            except InvalidIndexError:\n                # GH35015, using datetime as column indices raises exception\n                if not isinstance(labels, ABCMultiIndex):"
  },
  {
    "id" : "c3fb9413-290a-4bab-bfb7-3cba2fa9f44c",
    "prId" : 36315,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36315#pullrequestreview-487302718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d65ece92-56a6-46bb-a504-373430aba3a0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't need the quotes if you ``from future import __annotations__`` FYI",
        "createdAt" : "2020-09-13T12:28:05Z",
        "updatedAt" : "2020-09-13T12:28:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8dcad7b11ed90e98289bc496c24d363440082d76",
    "line" : 215,
    "diffHunk" : "@@ -1,1 +1887,1891 @@            self.obj._maybe_update_cacher(clear=True)\n\n    def _align_series(self, indexer, ser: \"Series\", multiindex_indexer: bool = False):\n        \"\"\"\n        Parameters"
  },
  {
    "id" : "4b33f987-c8dd-4b14-ad2a-5be8a5a9b17e",
    "prId" : 36337,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36337#pullrequestreview-487337968",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc726f6a-b905-4ff1-90b6-3f76b6cb7b6d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what is the end goal here?",
        "createdAt" : "2020-09-13T20:25:20Z",
        "updatedAt" : "2020-09-13T20:25:23Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "aff8f185-42b0-4c87-b3e0-2ec9aa0a79e8",
        "parentId" : "cc726f6a-b905-4ff1-90b6-3f76b6cb7b6d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i dont understand the question.  1718-1728 is just an indented version of what we have in the status quo",
        "createdAt" : "2020-09-13T20:27:51Z",
        "updatedAt" : "2020-09-13T20:27:51Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "144f49f3-4d54-4da9-9b8b-1e5f86f4fd3a",
        "parentId" : "cc726f6a-b905-4ff1-90b6-3f76b6cb7b6d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "it looks like you separated out the cases and duplicated the code. So is this making it easier to understand, later refactoring, ?",
        "createdAt" : "2020-09-13T20:30:49Z",
        "updatedAt" : "2020-09-13T20:30:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7a615491-4f82-4521-a71c-680286ad1c0f",
        "parentId" : "cc726f6a-b905-4ff1-90b6-3f76b6cb7b6d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "its similar but not identical.  this chunk is aligning by label while the chunk above is aligning positionally.\r\n\r\nyes, i do hope to refactor this method before too long",
        "createdAt" : "2020-09-13T20:33:22Z",
        "updatedAt" : "2020-09-13T20:33:22Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3dbeb704-e2db-4990-a7b0-64410f489f6a",
        "parentId" : "cc726f6a-b905-4ff1-90b6-3f76b6cb7b6d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok cool\r\n\r\n> yes, i do hope to refactor this method before too long\r\n\r\nyeah these indexing routines defintely need some TLC",
        "createdAt" : "2020-09-13T20:36:43Z",
        "updatedAt" : "2020-09-13T20:36:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "38f16724603975acd9d46d8ebe9b46ab26066395",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +1723,1727 @@                                    tuple(sub_indexer), value[item], multiindex_indexer\n                                )\n                            else:\n                                v = np.nan\n"
  },
  {
    "id" : "ca26b5ea-c484-406d-aff5-015e7cd9a2d8",
    "prId" : 36873,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36873#pullrequestreview-503490756",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "306dfe75-37d6-46f1-8476-823e75df28d4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "worth defining ```__len__``` BlockManager ?",
        "createdAt" : "2020-10-07T02:39:05Z",
        "updatedAt" : "2020-10-07T02:56:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e1244021-c76e-4897-91df-bdb016c77ccf",
        "parentId" : "306dfe75-37d6-46f1-8476-823e75df28d4",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "i think that would be ambiguous as to whether it was this or `len(mgr.items)`",
        "createdAt" : "2020-10-07T02:55:01Z",
        "updatedAt" : "2020-10-07T02:56:45Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "36756bfe6c64d484dec81a2d9a07ebf408a31071",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1548,1552 @@\n        # maybe partial set\n        take_split_path = len(self.obj._mgr.blocks) > 1\n\n        # if there is only one block/type, still have to take split path"
  },
  {
    "id" : "5bbab55e-1342-4aaa-ab73-d3f08f304b6a",
    "prId" : 37475,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37475#pullrequestreview-519254486",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0b650a3-957c-4bfc-bdea-eb956118bf2f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "typ at some point",
        "createdAt" : "2020-10-29T01:05:03Z",
        "updatedAt" : "2020-10-29T01:05:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb340a31a87151b8836692e4e360cd53fff1b6f6",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1898,1902 @@            self.obj._maybe_update_cacher(clear=True)\n\n    def _ensure_iterable_column_indexer(self, column_indexer):\n        \"\"\"\n        Ensure that our column indexer is something that can be iterated over."
  },
  {
    "id" : "d6e95c30-534f-45af-a60f-ff1b5cf27744",
    "prId" : 37728,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37728#pullrequestreview-533832066",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "341fb816-a2c9-428a-bb03-efe7c61666e1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so might be possible to create a _setitem_with_position_indexer and dispatch to it (just thought for future direction)",
        "createdAt" : "2020-11-18T00:59:37Z",
        "updatedAt" : "2020-11-18T20:26:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "356b6f9b-05e9-479e-984a-a13a38dc579c",
        "parentId" : "341fb816-a2c9-428a-bb03-efe7c61666e1",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "Okay, will look into this in the coming days",
        "createdAt" : "2020-11-18T20:07:02Z",
        "updatedAt" : "2020-11-18T20:26:40Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      }
    ],
    "commit" : "b965eeeebc8e6ead13c8bd4bb0c96f6593cf8e4e",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +1726,1730 @@\n        # We do not want to align the value in case of iloc GH#37728\n        if name == \"iloc\":\n            for i, loc in enumerate(ilocs):\n                val = value.iloc[:, i]"
  },
  {
    "id" : "fe001f56-e295-42d8-ad17-e3d3f21a5b8d",
    "prId" : 37728,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37728#pullrequestreview-533848340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f41111c5-e4b4-42cb-84ad-d9e96ce13509",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "can you add a comment pointing back to this PR explaining why we're doing things differently for iloc vs loc",
        "createdAt" : "2020-11-18T03:32:42Z",
        "updatedAt" : "2020-11-18T20:26:40Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "5858902c-0a13-439a-9092-8cdac560fc56",
        "parentId" : "f41111c5-e4b4-42cb-84ad-d9e96ce13509",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "Done",
        "createdAt" : "2020-11-18T20:27:45Z",
        "updatedAt" : "2020-11-18T20:27:46Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      }
    ],
    "commit" : "b965eeeebc8e6ead13c8bd4bb0c96f6593cf8e4e",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +1727,1731 @@        # We do not want to align the value in case of iloc GH#37728\n        if name == \"iloc\":\n            for i, loc in enumerate(ilocs):\n                val = value.iloc[:, i]\n                self._setitem_single_column(loc, val, pi)"
  },
  {
    "id" : "19e5d0af-be62-4017-898f-80bc361fe82d",
    "prId" : 37728,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37728#pullrequestreview-534801793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cf8b9e5-a942-46e8-86bf-c93a550f6f63",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "for follow-up, can you put parens where appropriate so i dont have to think about whether the \"and\" gets evaluated before the \"or\"",
        "createdAt" : "2020-11-19T19:58:08Z",
        "updatedAt" : "2020-11-19T19:58:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b965eeeebc8e6ead13c8bd4bb0c96f6593cf8e4e",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +1822,1826 @@\n            indexer = maybe_convert_ix(*indexer)\n        if isinstance(value, ABCSeries) and name != \"iloc\" or isinstance(value, dict):\n            # TODO(EA): ExtensionBlock.setitem this causes issues with\n            # setting for extensionarrays that store dicts. Need to decide"
  },
  {
    "id" : "28249295-5774-45fe-8fad-72e38ac73c81",
    "prId" : 37728,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37728#pullrequestreview-534802307",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d81e664e-4533-40d1-aea5-c76252862940",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "comment explaining that we only get here with name==\"loc\" and thats why its hardcoded (or assertion)",
        "createdAt" : "2020-11-19T19:58:48Z",
        "updatedAt" : "2020-11-19T19:58:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b965eeeebc8e6ead13c8bd4bb0c96f6593cf8e4e",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +1860,1864 @@                new_indexer = index.get_indexer([new_index[-1]])\n                if (new_indexer != -1).any():\n                    return self._setitem_with_indexer(new_indexer, value, \"loc\")\n\n            # this preserves dtype of the value"
  }
]