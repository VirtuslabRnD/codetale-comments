[
  {
    "id" : "fbcad0e9-41ef-47be-a1b3-500aa4b109da",
    "prId" : 11778,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13b0b8a1-ad8b-4155-81e3-fed8fc5dbff2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "let's call these: `display.latex.escapa/longtable`\n",
        "createdAt" : "2015-12-07T11:16:52Z",
        "updatedAt" : "2015-12-19T15:33:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4d820a7680021f31232fa28ea04b497894786c1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +221,225 @@\"\"\"\n\npc_latex_escape = \"\"\"\n: bool\n    This specifies if the to_latex method of a Dataframe uses escapes special "
  },
  {
    "id" : "cb3fd00b-003b-4dd6-bc57-841535d1ca02",
    "prId" : 16198,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/16198#pullrequestreview-35807005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea0391bd-bca4-4f77-af57-353fbc06e405",
        "parentId" : null,
        "authorId" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "body" : "I'm beginning to wonder if we should be calling this repr_data_resource, based on the mimetype we ended up at (which includes the schema inside)",
        "createdAt" : "2017-05-02T15:10:42Z",
        "updatedAt" : "2017-05-02T17:10:42Z",
        "lastEditedBy" : "c3430ddc-2e27-4721-8896-7d7bd8d81bc9",
        "tags" : [
        ]
      },
      {
        "id" : "710e8683-5cfa-4914-8968-f7e384580fa6",
        "parentId" : "ea0391bd-bca4-4f77-af57-353fbc06e405",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "The idea being \"table schema\" refers to *just* the schema? Makes sense to me.",
        "createdAt" : "2017-05-02T15:34:58Z",
        "updatedAt" : "2017-05-02T17:10:42Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "760892ab031f9e714d9ecad520c5d4c6f5b32eda",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +363,367 @@\n            class TableSchemaFormatter(BaseFormatter):\n                print_method = '_repr_table_schema_'\n                _return_type = (dict,)\n            # register it:"
  },
  {
    "id" : "6c796539-dd04-4538-ac72-9dc461e1e417",
    "prId" : 25916,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25916#pullrequestreview-220362863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d91ee8ed-b3c6-492b-9642-f04143e0195b",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I would expect flake8 to complain about this (F821 I think).  Any idea why it doesnâ€™t?\r\n\r\nLow priority: could make the docstring follow the standard format",
        "createdAt" : "2019-03-29T03:26:54Z",
        "updatedAt" : "2019-03-29T03:26:55Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "3afe551e-261a-429d-974c-27644a9f4732",
        "parentId" : "d91ee8ed-b3c6-492b-9642-f04143e0195b",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> I would expect flake8 to complain about this (F821 I think)\r\n\r\nUncertain.  I don't think it's because of the `try-except` block wrapping it?\r\n\r\n> Low priority: could make the docstring follow the standard format\r\n\r\nAgreed on priority.  Can always do after.",
        "createdAt" : "2019-03-29T03:31:43Z",
        "updatedAt" : "2019-03-29T03:31:43Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f3d078e90e7c632fa1e73ce6e10273771d51e31",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +293,297 @@    \"\"\"\n    try:\n        ip = get_ipython()\n    except NameError:  # assume standard Python interpreter in a terminal\n        return True"
  },
  {
    "id" : "d82364ac-e4ea-4ee0-a139-014ec1d97bb0",
    "prId" : 26753,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26753#pullrequestreview-247398685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e58088d-7927-42ae-9498-9ba6afd15b5c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "see how excel is done\r\nyou can and should validate here ",
        "createdAt" : "2019-06-09T11:45:55Z",
        "updatedAt" : "2019-06-21T08:40:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "984e7d82-b462-414b-9fad-712e409e5bcd",
        "parentId" : "0e58088d-7927-42ae-9498-9ba6afd15b5c",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "makes sense, thanks for the feedback",
        "createdAt" : "2019-06-09T11:47:42Z",
        "updatedAt" : "2019-06-21T08:40:11Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f4e1c0a1165e74e5cce2ca349bcba8ee89b1091",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +491,495 @@\nwith cf.config_prefix('plotting'):\n    cf.register_option('backend', defval='matplotlib',\n                       doc=plotting_backend_doc,\n                       validator=str,"
  },
  {
    "id" : "8e0ff1f6-6e44-4c68-9cbc-96d9d49ef07b",
    "prId" : 26753,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26753#pullrequestreview-247904963",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a93442d-7067-46b8-9148-a43307c3f371",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah I would just try to import it full-stop; if the backend doesn't support a specific plot then it can rely on our ABC and/or we show a not implemented error. But this regisration whould be a simple import hook.",
        "createdAt" : "2019-06-11T00:29:08Z",
        "updatedAt" : "2019-06-21T08:40:11Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f4e1c0a1165e74e5cce2ca349bcba8ee89b1091",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +482,486 @@            return\n\n    try:\n        importlib.import_module(backend_str)\n    except ImportError:"
  },
  {
    "id" : "6640ed12-a36b-4793-8241-886385bfd09e",
    "prId" : 26753,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26753#pullrequestreview-252303680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d24239d-ab19-471f-bc22-0a5e0b164b9c",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "One question: If I wanted to use the altar backend, I would be more like to use `.set_option('plotting.backend', 'altair')`  than `..., 'pdvega')`. @jakevdp what name would you prefer?\r\n\r\nI think hvplot will just be hvplot, so that's fine.\r\n\r\nAnyway, we might consider adding a dict here like `plotting_backend_alias` that maps the user-facing name like `altair` to the backend name like `pdvega`. When the backend library registers themselves, they can also register their aliases.",
        "createdAt" : "2019-06-20T11:55:22Z",
        "updatedAt" : "2019-06-21T08:40:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "cc007aaf-8727-4a37-987e-02c9e374be42",
        "parentId" : "0d24239d-ab19-471f-bc22-0a5e0b164b9c",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I see your point, and I think it'd add value to the users, but not sure if I'm in favor of adding the extra complexity it's needed to manage aliases in a dynamic way.\r\n\r\nI like the simplicity of the parameter being the name of the module. I guess in some cases will look nicer than others. May be `hvplot` will use `hvplot.pandas`, since hvplot contains other things besides our plugin, and the module to use may be `hvplot.pandas`.\r\n\r\nIn practice I guess backends will register themselves, and users will rarely switch backends manually. But I guess if they do, it'll be better if they know they need to use the name of the module:\r\n```python\r\nimport pandas\r\nimport hvplot.pandas\r\n\r\ndf.plot()\r\n\r\npandas.set_option('backend.plotting', 'matplotlib')\r\ndf.plot()\r\n\r\npandas.set_option('backend.plotting', 'hvplot.pandas')\r\ndf.plot()\r\n```\r\n\r\nI don't have a strong opinion, but I'd say let's start with the simplest option, and add aliases or something else if we think it's useful once we start using this.",
        "createdAt" : "2019-06-20T13:16:03Z",
        "updatedAt" : "2019-06-21T08:40:11Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "660baac8-2157-43f9-b346-883300ddf147",
        "parentId" : "0d24239d-ab19-471f-bc22-0a5e0b164b9c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is it especially complex? I was thinking something like\r\n\r\n```python\r\n_plotting_aliases = {}  # or define somewhere else\r\n\r\ndef register_plotting_backend_cb(key):\r\n    backend_str = cf.get_option(key)\r\n    backend_str = _plotting_aliases.get(backend_str, backend_str)\r\n    ...\r\n```\r\n\r\nIndeed, I think this simplifies things already, since we can use `'matplotlib'`  as `pandas.plotting._matplotlib`. Though we may continue to special case matplotlib to provide a nice error message. ",
        "createdAt" : "2019-06-20T13:23:30Z",
        "updatedAt" : "2019-06-21T08:40:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4a1d3bbe-5a60-4cd9-a2d7-ccdb8c9742d2",
        "parentId" : "0d24239d-ab19-471f-bc22-0a5e0b164b9c",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "What I wouldn't do is to have the aliases in pandas itself. May be I'm being too strict, but if feels wrong.\r\n\r\nBut you're right, it's probably not as complex as I was thinking anyway. An simple option `plotting.aliases` with a dictionary may not be ideal, but would allow backends create an alias by simply:\r\n```python\r\npandas.set_option('plotting.aliases', dict(pandas.get_option('plotting.aliases'), hvplot='hvplot.pandas'))\r\n```",
        "createdAt" : "2019-06-20T13:32:29Z",
        "updatedAt" : "2019-06-21T08:40:11Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "65440540-7c70-421f-a8a3-202bf131960d",
        "parentId" : "0d24239d-ab19-471f-bc22-0a5e0b164b9c",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "but better in a follow up PR I think, so we can focus there on the exact syntax and approach",
        "createdAt" : "2019-06-20T13:34:06Z",
        "updatedAt" : "2019-06-21T08:40:11Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "f2c48f02-b97c-4996-b798-071c0ff2652d",
        "parentId" : "0d24239d-ab19-471f-bc22-0a5e0b164b9c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Perfectly fine doing as a followup.\r\n\r\nAnd my thinking may have been a bit muddled here. I was thinking that the backend library would have already been imported, and so would have a chance to register their own aliases. But as you say, it would be pandas managing them, which doesn't feel quite right.",
        "createdAt" : "2019-06-20T13:37:48Z",
        "updatedAt" : "2019-06-21T08:40:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "be8b1566-d908-497f-a31a-ee274505b9a1",
        "parentId" : "0d24239d-ab19-471f-bc22-0a5e0b164b9c",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "another simple option is that backends add an optional attribute `alias = 'hvplot'`, and we simply do:\r\n```python\r\nif hasattr(backend_mod, 'alias'):\r\n    plotting_aliases[alias] = backend_mod.__name__\r\n```",
        "createdAt" : "2019-06-20T13:41:55Z",
        "updatedAt" : "2019-06-21T08:40:11Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "d9a9901f-bc9c-4ba1-ab7c-85f797f23efb",
        "parentId" : "0d24239d-ab19-471f-bc22-0a5e0b164b9c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Yes good idea. But still leaving this as a followup?",
        "createdAt" : "2019-06-20T13:47:25Z",
        "updatedAt" : "2019-06-21T08:40:11Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "ded0f322-c61c-494d-9f3f-4cc24c78881c",
        "parentId" : "0d24239d-ab19-471f-bc22-0a5e0b164b9c",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Yes, I prefer to keep the focus, the smaller the PRs, the better the content :)",
        "createdAt" : "2019-06-20T13:52:30Z",
        "updatedAt" : "2019-06-21T08:40:11Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f4e1c0a1165e74e5cce2ca349bcba8ee89b1091",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +463,467 @@# ---------\n\nplotting_backend_doc = \"\"\"\n: str\n    The plotting backend to use. The default value is \"matplotlib\", the"
  },
  {
    "id" : "d2d006c0-26fe-452f-8d42-7df8bcf6152d",
    "prId" : 39908,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/39908#pullrequestreview-672415356",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be34f4d2-0031-40a2-ba9d-cd567a7a9ece",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "mode.string.storage ?\r\nmode.dtype.string.storage ?",
        "createdAt" : "2021-05-31T14:45:06Z",
        "updatedAt" : "2021-05-31T14:47:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0a886c20-43e9-4866-969e-967eb370186b",
        "parentId" : "be34f4d2-0031-40a2-ba9d-cd567a7a9ece",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "This naming is from the original PR #36142 so not sure of the reasoning. which do you prefer?",
        "createdAt" : "2021-05-31T15:38:59Z",
        "updatedAt" : "2021-05-31T15:38:59Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef02a435ec481eeac62fe00ebc87d501489e13fc",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +533,537 @@\nwith cf.config_prefix(\"mode\"):\n    cf.register_option(\n        \"string_storage\",\n        \"python\","
  },
  {
    "id" : "51af9965-5ea9-4693-9457-8da0774389ba",
    "prId" : 40556,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40556#pullrequestreview-618970770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1de8d430-c0eb-40fc-85ea-0398dc3836ee",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add this to options.rst as well",
        "createdAt" : "2021-03-23T17:18:56Z",
        "updatedAt" : "2021-04-30T19:09:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "948f9364-fecb-4de2-90eb-b753540ff8ac",
        "parentId" : "1de8d430-c0eb-40fc-85ea-0398dc3836ee",
        "authorId" : "700858ee-28b2-49c3-b706-9a18315b5898",
        "body" : "fixed",
        "createdAt" : "2021-03-23T19:08:28Z",
        "updatedAt" : "2021-04-30T19:09:53Z",
        "lastEditedBy" : "700858ee-28b2-49c3-b706-9a18315b5898",
        "tags" : [
        ]
      }
    ],
    "commit" : "36adf43ccc03f1c5395a49581102ede9a485d432",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +661,665 @@\"\"\"\n\nwith cf.config_prefix(\"io.sql\"):\n    cf.register_option(\n        \"engine\","
  },
  {
    "id" : "c6cf496f-d61c-4bff-b56d-551ce94667b1",
    "prId" : 40556,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/40556#pullrequestreview-650560691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b72a133-7918-45ae-a117-31362176a287",
        "parentId" : null,
        "authorId" : "6bfa1922-c427-4971-9e7f-6e6257a1d5bb",
        "body" : "I already suggested using Python's `entrypoint` mechanism for registering additional engines. I think this would be a good place to leverage. The idea is that you can implement an engine without contributing anything to `pandas` making the development of that much more flexible / fast-paced.\r\n\r\nIn the library implementing the engine, you would add the following to the setup.py:\r\n\r\n```\r\nentry_points={\"pandas_sql_engine\": [\"turbodbc = turbodbc.TurbodbcPandasEngine\"]}\r\n```\r\n\r\nHere you can then load the engines using the entry points mechanism (without importing anything!):\r\n\r\n```suggestion\r\nimport pkg_resources\r\n\r\nEXTERNAL_SQL_ENGINES = [e.name for e in pkg_resources.iter_entry_points('pandas_sql_engine')]\r\nSQL_ENGINES = [\"sqlalchemy\"] + EXTERNAL_SQL_ENGINES\r\n\r\nwith cf.config_prefix(\"io.sql\"):\r\n    cf.register_option(\r\n        \"engine\",\r\n        \"auto\",\r\n        sql_engine_doc,\r\n        validator=is_one_of_factory([\"auto\"] + SQL_ENGINES),\r\n    )\r\n```",
        "createdAt" : "2021-04-27T14:58:03Z",
        "updatedAt" : "2021-04-30T19:09:53Z",
        "lastEditedBy" : "6bfa1922-c427-4971-9e7f-6e6257a1d5bb",
        "tags" : [
        ]
      },
      {
        "id" : "1f7d8f1d-51f2-4827-a5bd-c102d815f731",
        "parentId" : "5b72a133-7918-45ae-a117-31362176a287",
        "authorId" : "700858ee-28b2-49c3-b706-9a18315b5898",
        "body" : "I don't know... I've never used `entrypoint`s before, makes me a little uneasy to use them without understanding them, I'd need to learn some more about it... But we don't do this for any other I/O engines like Parquet or Excel, so why not keep the same here?\r\n\r\n@jreback what do you think?",
        "createdAt" : "2021-04-29T02:00:40Z",
        "updatedAt" : "2021-04-30T19:09:53Z",
        "lastEditedBy" : "700858ee-28b2-49c3-b706-9a18315b5898",
        "tags" : [
        ]
      },
      {
        "id" : "dea60cb1-526a-4b57-9e4d-7f17de5d5081",
        "parentId" : "5b72a133-7918-45ae-a117-31362176a287",
        "authorId" : "6bfa1922-c427-4971-9e7f-6e6257a1d5bb",
        "body" : "1. I would expect the number of engines to be larger in this case here. Personally, I would write at least an engine each for `snowflake`, `turbodbc` and `postgres`. \r\n2. Databases are harder to test than file formats as you need to start additional services. Integrating all of them into the `pandas` CI would probably be quite heavy at the end.\r\n3. I'm really excited about ExtensionArrays as this gives us a nice way to extend the `pandas` functionality with additions that are experimental and wouldn't be merged into core pandas. They don't need a technique like entrypoints as you instantiate them explicitly by using the class constructor of the ExtensionArray. This isn't the case for the database engines as you only specify the engine via a string.\r\n4. We can use a different mechanism but entrypoints have the nice effect of being very light-weight and discovery works without any Python code of the additional packages to be run before any `pandas` code, i.e. you don't need to ensure that you have imported the engine code before any other code uses `pandas`.",
        "createdAt" : "2021-04-30T19:47:59Z",
        "updatedAt" : "2021-04-30T19:47:59Z",
        "lastEditedBy" : "6bfa1922-c427-4971-9e7f-6e6257a1d5bb",
        "tags" : [
        ]
      },
      {
        "id" : "cc93efc3-1a10-469a-95e4-de319ca64532",
        "parentId" : "5b72a133-7918-45ae-a117-31362176a287",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think we could certainly add this (we already use entry points for plotting), but let's do as a followup (pls create an issue)",
        "createdAt" : "2021-05-03T17:29:40Z",
        "updatedAt" : "2021-05-03T17:30:36Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "36adf43ccc03f1c5395a49581102ede9a485d432",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +667,671 @@        sql_engine_doc,\n        validator=is_one_of_factory([\"auto\", \"sqlalchemy\"]),\n    )\n\n# --------"
  }
]