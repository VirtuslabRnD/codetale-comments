[
  {
    "id" : "1604cc12-6b50-49de-907b-910ff59d5734",
    "prId" : 11603,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d4b6a22-0c89-47f3-89e8-a0367464f2b8",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "minor issue: indentation has one space short (you used 3 here instead of 4 as for all others)\n",
        "createdAt" : "2015-11-26T10:46:40Z",
        "updatedAt" : "2015-12-19T13:51:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "aee1ee70-8f75-43b6-813d-be28ea5691c9",
        "parentId" : "5d4b6a22-0c89-47f3-89e8-a0367464f2b8",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "done\n",
        "createdAt" : "2015-11-27T14:00:57Z",
        "updatedAt" : "2015-12-19T13:51:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1890a88d4d1b2926e45f631330f6191642bef773",
    "line" : 262,
    "diffHunk" : "@@ -1,1 +260,264 @@    window : int\n       Size of the moving window. This is the number of observations used for\n       calculating the statistic.\n    min_periods : int, default None\n        Minimum number of observations in window required to have a value"
  },
  {
    "id" : "45a90dd7-04c9-4143-b837-9b1d3ac0a109",
    "prId" : 11603,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90d12789-8b97-489b-a8b6-6d1013cced57",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It would be nice if all these docstrings would start with a capital letter, but the problem is the same name is used in the See also part, where a capital letter is not OK of course\n",
        "createdAt" : "2015-11-26T10:55:32Z",
        "updatedAt" : "2015-12-19T13:51:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1890a88d4d1b2926e45f631330f6191642bef773",
    "line" : 475,
    "diffHunk" : "@@ -1,1 +473,477 @@class _Rolling_and_Expanding(_Rolling):\n\n    _shared_docs['count'] = \"\"\"%(name)s count of number of non-NaN observations inside provided window.\"\"\"\n    def count(self):\n        obj = self._convert_freq()"
  },
  {
    "id" : "93f33332-6c09-4140-8f4d-2e63df3343ab",
    "prId" : 11603,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77c3a344-3990-44c2-b377-29fd2cde3323",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think this gives errors in some optimized mode? (https://github.com/pydata/pandas/issues/8315)\n",
        "createdAt" : "2015-11-26T11:09:20Z",
        "updatedAt" : "2015-12-19T13:51:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "03bc0be8-f527-45e0-8d71-3eab6374c9b6",
        "parentId" : "77c3a344-3990-44c2-b377-29fd2cde3323",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "hmm, these are not `+=` though, rather direct assignments\n",
        "createdAt" : "2015-11-27T14:12:35Z",
        "updatedAt" : "2015-12-19T13:51:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "76b05f7d-b55c-465a-beaa-b1e129cbf02b",
        "parentId" : "77c3a344-3990-44c2-b377-29fd2cde3323",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "ah, yes, missed that!\n",
        "createdAt" : "2015-11-27T14:16:42Z",
        "updatedAt" : "2015-12-19T13:51:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "26685f16-1d83-4fb8-a97c-d61e4f72b079",
        "parentId" : "77c3a344-3990-44c2-b377-29fd2cde3323",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Something else, should this be `Rolling.__doc__` instead of `Window.__doc__`?\n",
        "createdAt" : "2015-12-15T10:11:22Z",
        "updatedAt" : "2015-12-19T13:51:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "08eea436-df6c-41e8-8df7-d33689bbb999",
        "parentId" : "77c3a344-3990-44c2-b377-29fd2cde3323",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this entry point generates a `Window` if `win_type` is specified, or `Rolling` by default. I didn't want to add _another_ top-level function (`.window`) for IMHO a narrow case of the `Window` stuff (could always in the future of course). So the doc string encompases both (and hence is `Window`).\n",
        "createdAt" : "2015-12-15T12:50:14Z",
        "updatedAt" : "2015-12-19T13:51:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e7d2ee14-23fe-43bc-90e4-6a496282da15",
        "parentId" : "77c3a344-3990-44c2-b377-29fd2cde3323",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "ah, yes, that is certainly fine! It was also because I noticed that the `DataFrame.rolling` had no mention of `freq` being deprecated (which came from Window.**doc**), but I already commented for that on the actual docstring\n",
        "createdAt" : "2015-12-15T13:23:32Z",
        "updatedAt" : "2015-12-19T13:51:47Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "1890a88d4d1b2926e45f631330f6191642bef773",
    "line" : 1348,
    "diffHunk" : "@@ -1,1 +1346,1350 @@\n    return Rolling(obj, **kwds)\nrolling.__doc__ = Window.__doc__\n\ndef expanding(obj, **kwds):"
  },
  {
    "id" : "612167ac-3b73-4f1f-b31a-04379a5c322c",
    "prId" : 15443,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15443#pullrequestreview-22601820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e98ed07f-3274-48aa-a037-80acb87e9ae4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't need pd.Timedelta here (its a sub-class of ``timedelta``).",
        "createdAt" : "2017-02-17T22:00:22Z",
        "updatedAt" : "2017-02-17T22:26:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "510ca45caabdbda0064ad7684ab0bf529f24ecb4",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1016,1020 @@        # we allow rolling on a datetimelike index\n        if (self.is_datetimelike and\n                isinstance(self.window, (compat.string_types, DateOffset,\n                                         timedelta))):\n"
  },
  {
    "id" : "aa19f699-6ebc-4c03-9f2f-919ead37b3fd",
    "prId" : 19999,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19999#pullrequestreview-102085502",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95b13113-cd00-49bd-881d-fd49404f1294",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I still think the \"matches input\" is confusing. What is the input? I would think of input what I passed to the function, but that is not the case here. \r\nPersonally I would just leave it out. Or we should find a better wording (maybe \"matches calling object\", although I think that is also not very clear). Or explain it in more words in the explanation on the line below.",
        "createdAt" : "2018-03-06T21:59:27Z",
        "updatedAt" : "2018-03-07T14:15:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d79f243d-4cfc-4d79-b863-487231b99a49",
        "parentId" : "95b13113-cd00-49bd-881d-fd49404f1294",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What do you think of \"Returned object type is determined by the caller of the %(name)s calculation\"",
        "createdAt" : "2018-03-07T17:34:53Z",
        "updatedAt" : "2018-03-07T17:34:53Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "ad90ab98-40ef-4293-b038-8eec5d7cc647",
        "parentId" : "95b13113-cd00-49bd-881d-fd49404f1294",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Yes, that sounds good",
        "createdAt" : "2018-03-07T20:29:44Z",
        "updatedAt" : "2018-03-07T20:29:45Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd618580bb8b70434570e3886bf046e1584da4ed",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +911,915 @@    Returns\n    -------\n    Series or DataFrame (matches input)\n        Like-indexed object containing the result of function application\n"
  },
  {
    "id" : "916f1652-6df1-44b4-a1d1-4a242f2f9427",
    "prId" : 19999,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19999#pullrequestreview-102120663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8aff76d4-a8b6-453c-8625-0c422a87d2cc",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is this to satisfy the doctests? \r\nIf so, we should try to find another solution, as I think this makes it more complex to read (compared to simply `scipy.stats.kurtosis(arr[:-1], bias=False)`)",
        "createdAt" : "2018-03-06T22:01:03Z",
        "updatedAt" : "2018-03-07T14:15:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1e413bdd-b6e4-4c38-b095-89660e1e86ef",
        "parentId" : "8aff76d4-a8b6-453c-8625-0c422a87d2cc",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Fair enough. Let me mess around with iPython - I think we can use the %precision directive here behind the scenes",
        "createdAt" : "2018-03-07T17:32:29Z",
        "updatedAt" : "2018-03-07T17:32:29Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "8c7ec94c-f693-4d9c-b7e0-d9eaf597598d",
        "parentId" : "8aff76d4-a8b6-453c-8625-0c422a87d2cc",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Hmm, the annoying thing here is that scipy prints 1.99999999999, as otherwise `1.200...` would have worked (using an ellipsis to match anything on that line)\r\n\r\nYeah, not sure there is a better solution in  this case",
        "createdAt" : "2018-03-07T20:29:30Z",
        "updatedAt" : "2018-03-07T20:29:30Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "e4959067-92e7-4029-a3d2-4321fa2edb73",
        "parentId" : "8aff76d4-a8b6-453c-8625-0c422a87d2cc",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea I was hoping that setting `np.print_options` would help for SciPy but no luck. I kind of wonder if globally it wouldn't be preferable to just set this to 6 across all docstrings for consistency ",
        "createdAt" : "2018-03-07T21:10:58Z",
        "updatedAt" : "2018-03-07T21:10:58Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d7d52f67-dd5e-4b99-9253-e8c0ad1a75bd",
        "parentId" : "8aff76d4-a8b6-453c-8625-0c422a87d2cc",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "+1 on setting it globally",
        "createdAt" : "2018-03-07T21:59:29Z",
        "updatedAt" : "2018-03-07T21:59:29Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "459fc679-107d-4898-aa62-b83fe61fcb93",
        "parentId" : "8aff76d4-a8b6-453c-8625-0c422a87d2cc",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Looked into it and I think that would unfortunately be pretty difficult for scalar values. `np.set_printoptions` may be worthwhile for arrays, but as far as this specific example is concerned the formatting of scalar values from what I can tell is left to interpreters like iPython. I looked at DocTests' documentation but didn't see anything there that would easily allow us to enforce that option during its testing",
        "createdAt" : "2018-03-07T22:20:48Z",
        "updatedAt" : "2018-03-07T22:20:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd618580bb8b70434570e3886bf046e1584da4ed",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +935,939 @@    >>> import scipy.stats\n    >>> print(\"{0:.6f}\".format(scipy.stats.kurtosis(arr[:-1], bias=False)))\n    -1.200000\n    >>> print(\"{0:.6f}\".format(scipy.stats.kurtosis(arr[1:], bias=False)))\n    3.999946"
  },
  {
    "id" : "93e40e2c-25e8-44b9-b2cb-4610b905ee54",
    "prId" : 19999,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19999#pullrequestreview-101733477",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc36bc1b-5ef0-498c-9543-92bbb01e42b9",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe a Series is more natural? (as you don't have a column name)",
        "createdAt" : "2018-03-06T22:01:51Z",
        "updatedAt" : "2018-03-07T14:15:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd618580bb8b70434570e3886bf046e1584da4ed",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +938,942 @@    >>> print(\"{0:.6f}\".format(scipy.stats.kurtosis(arr[1:], bias=False)))\n    3.999946\n    >>> df = pd.DataFrame(arr)\n    >>> df.rolling(4).kurt()\n              0"
  },
  {
    "id" : "5b604773-f2a2-4d78-9b6a-a2cc30f479bc",
    "prId" : 19999,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19999#pullrequestreview-102090477",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c56d0ab-d42f-4fe8-9ed1-531ff2e46056",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is the one with `%(name)s` substituted not the same as the two lines above? (below the substituted ones)",
        "createdAt" : "2018-03-06T22:04:08Z",
        "updatedAt" : "2018-03-07T14:15:58Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "2c30b633-6fcb-4da2-846e-941e704a4db1",
        "parentId" : "4c56d0ab-d42f-4fe8-9ed1-531ff2e46056",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "The substituted name in this case is either `rolling` or `expanding` - does that answer your question?",
        "createdAt" : "2018-03-07T17:21:48Z",
        "updatedAt" : "2018-03-07T17:21:48Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "93415be5-97b2-497c-b018-dc08652fe12b",
        "parentId" : "4c56d0ab-d42f-4fe8-9ed1-531ff2e46056",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, yes, that clarifies. \r\nAnother point, to avoid that the See also section becomes long, we could also put the related series/dataframe versions on a single line (like `Series.kurtosis, DataFrame.kurtosis`)",
        "createdAt" : "2018-03-07T20:15:04Z",
        "updatedAt" : "2018-03-07T20:15:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "cde34612-2cb8-4587-b315-5ee7fc3317f9",
        "parentId" : "4c56d0ab-d42f-4fe8-9ed1-531ff2e46056",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "When you are worried about it becoming to long is that purely within the source or on the web as well? I believe that the HTML output styles this to display it all inline",
        "createdAt" : "2018-03-07T20:30:57Z",
        "updatedAt" : "2018-03-07T20:30:57Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "c01656a9-1429-4a2e-8274-20f6ac0a1a6b",
        "parentId" : "4c56d0ab-d42f-4fe8-9ed1-531ff2e46056",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, didn't know the html output put them on a single line anyhow. Not ideal IMO, but that's numpydoc behaviour.",
        "createdAt" : "2018-03-07T20:45:55Z",
        "updatedAt" : "2018-03-07T20:45:55Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd618580bb8b70434570e3886bf046e1584da4ed",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +919,923 @@    pandas.DataFrame.%(name)s\n    pandas.Series.kurtosis\n    pandas.DataFrame.kurtosis\n    scipy.stats.skew\n    scipy.stats.kurtosis"
  },
  {
    "id" : "08378c58-772f-4b84-892c-50bac706d78f",
    "prId" : 20233,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20233#pullrequestreview-102872241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f664397-f19a-4651-8f96-01db9163541b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so in both this one and the std one, should put in the Notes that the ddof default is *different* than numpy. (we use 1, they use 0). This is in the Series.var/std strings already.",
        "createdAt" : "2018-03-10T21:34:15Z",
        "updatedAt" : "2018-03-11T15:02:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f2516e39-5d06-411a-ac10-32a9ef4e5cd8",
        "parentId" : "0f664397-f19a-4651-8f96-01db9163541b",
        "authorId" : "958ad07e-03b2-4146-9d52-69fc84923eb7",
        "body" : "👍 ",
        "createdAt" : "2018-03-11T06:25:26Z",
        "updatedAt" : "2018-03-11T15:02:51Z",
        "lastEditedBy" : "958ad07e-03b2-4146-9d52-69fc84923eb7",
        "tags" : [
        ]
      }
    ],
    "commit" : "8de2598848361e2dcfa97fe9570b2972a1803ef8",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +907,911 @@\n    Notes\n    -----\n    The default `ddof` of 1 used in :meth:`Series.var` is different than the\n    default `ddof` of 0 in :func:`numpy.var`."
  },
  {
    "id" : "b247eeb8-1b30-4d1a-87b9-d111061ad271",
    "prId" : 20584,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20584#pullrequestreview-110916392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7385162-9eb3-4b64-9887-0e3145ca99bb",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "can you indicate something about the deprecation / changing default?",
        "createdAt" : "2018-04-10T18:54:35Z",
        "updatedAt" : "2018-04-16T13:09:00Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab46058dc6b32d7da1533527f89e49dd043094f4",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +961,965 @@          function.\n        * ``True`` or ``None`` : the passed function will receive ndarray\n          objects instead.\n          If you are just applying a NumPy reduction function this will\n          achieve much better performance."
  },
  {
    "id" : "b60f9f07-a2de-411c-8b1c-348e54a783b6",
    "prId" : 20584,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20584#pullrequestreview-111185380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16755710-d085-4de8-8996-8d20c7a13871",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Will this have any consequences for the user? \r\n(but, on the other hand, I don't think it is worth to add a `raw` keyword just to be able to deprecate the behaviour and change it more slowly)",
        "createdAt" : "2018-04-10T19:45:57Z",
        "updatedAt" : "2018-04-16T13:09:00Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "fc856bfc-afa9-41c6-bcad-0d3e452868ec",
        "parentId" : "16755710-d085-4de8-8996-8d20c7a13871",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "no, this is a very special case",
        "createdAt" : "2018-04-11T10:20:15Z",
        "updatedAt" : "2018-04-16T13:09:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "92577afa-1b31-423a-940d-11fafebaa369",
        "parentId" : "16755710-d085-4de8-8996-8d20c7a13871",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "It's not that a special case, it happens when the user passes a custom function to `r.agg(..)`, which eg is done in the documentation about it: http://pandas.pydata.org/pandas-docs/stable/computation.html#aggregation\r\n\r\nSo just as with `apply`, if the user has a function that behaves differently for a Series than an array, this will break.",
        "createdAt" : "2018-04-11T11:19:18Z",
        "updatedAt" : "2018-04-16T13:09:00Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab46058dc6b32d7da1533527f89e49dd043094f4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +315,319 @@        result, how = self._aggregate(arg, *args, **kwargs)\n        if result is None:\n            return self.apply(arg, raw=False, args=args, kwargs=kwargs)\n        return result\n"
  },
  {
    "id" : "b3e758f6-b5b0-4825-a095-f78f69e4d75d",
    "prId" : 24184,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24184#pullrequestreview-183644798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a68ea3f-0146-417c-b4b2-8d88a6eb8733",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Since the backticks here cause an error with the validator I think it would be better just to remove unless @datapythonista feels otherwise",
        "createdAt" : "2018-12-11T05:55:53Z",
        "updatedAt" : "2019-01-07T11:30:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "1c820189-abd8-484c-aa8b-4bb748922da8",
        "parentId" : "0a68ea3f-0146-417c-b4b2-8d88a6eb8733",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "The problem are not the backticks, it's starting the description with a list. it happens in many cases, and we'll eventually fix the validation docstring, as this is correct.\r\n\r\nSame as the errors because having `*args, **kwargs` together. Changes are ok, we'll fix the validation script.",
        "createdAt" : "2018-12-11T12:13:08Z",
        "updatedAt" : "2019-01-07T11:30:34Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bedb9d591a9b1bf6b6264f1595ad38953b7aa33",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +956,960 @@        or a Series if ``raw=False``.\n    raw : bool, default None\n        * ``False`` : passes each row or column as a Series to the\n          function.\n        * ``True`` or ``None`` : the passed function will receive ndarray"
  },
  {
    "id" : "16d60e47-b495-469c-b01b-732c4825fad8",
    "prId" : 24184,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24184#pullrequestreview-184359829",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4eb469de-b634-47f6-997a-82814e487329",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Actually looking at this in more detail - why do this here instead of updating `_doc_template` with this?",
        "createdAt" : "2018-12-11T19:31:03Z",
        "updatedAt" : "2019-01-07T11:30:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "3155e97b-3ff9-4245-ac72-c40c37b3ce49",
        "parentId" : "4eb469de-b634-47f6-997a-82814e487329",
        "authorId" : "7cbd150c-7d7d-4d84-8035-9607ccc719da",
        "body" : "Hey @WillAyd, \r\nI did it in the ```_shared_docs['apply']``` because the ```@Appender(_doc_template)``` decorator on the window.Expanding/Rolling.apply methods is what _threw_ the original validation error ```No Returns section found```. I was also not sure whether my changes, for window.Expanding/Rolling.apply, are relevant for the other functions wrapped with ```@Appender(_doc_template)```. \r\n\r\nI see your point though, I am happy to update the ```_doc_template``` \r\nFrom:\r\n```\r\n_doc_template = \"\"\"\r\n        Returns\r\n        -------\r\n        same type as input\r\n\r\n        See Also\r\n        --------\r\n        Series.%(name)s\r\n        DataFrame.%(name)s\r\n\"\"\"\r\n```\r\nTo:\r\n```\r\n_doc_template = \"\"\"\r\n        Returns\r\n        -------\r\n        Series or DataFrame\r\n                Return type is determined by the caller.\r\n\r\n        See Also\r\n        --------\r\n        Series.%(name)s : Series %(name)s.\r\n        DataFrame.%(name)s : DataFrame %(name)s.\r\n\"\"\"\r\n```\r\n\r\n. . . if you agree with my modification to ```_doc_template ```?",
        "createdAt" : "2018-12-11T20:34:25Z",
        "updatedAt" : "2019-01-07T11:30:34Z",
        "lastEditedBy" : "7cbd150c-7d7d-4d84-8035-9607ccc719da",
        "tags" : [
        ]
      },
      {
        "id" : "44b7bb7f-4ded-4d64-b079-c2a9464270e5",
        "parentId" : "4eb469de-b634-47f6-997a-82814e487329",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "You should be able to remove this all now that you've made these changes to `_doc_template`",
        "createdAt" : "2018-12-12T19:38:46Z",
        "updatedAt" : "2019-01-07T11:30:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bedb9d591a9b1bf6b6264f1595ad38953b7aa33",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +970,974 @@        Arguments and keyword arguments to be passed into func.\n\n    Returns\n    -------\n    Series or DataFrame"
  },
  {
    "id" : "3a9c48be-a1b7-493a-9c99-1b76de542ab5",
    "prId" : 24184,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24184#pullrequestreview-186717697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ebb5922-bb0e-4dcf-9c27-6e31862fc5c2",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Sorry this took a while to review.\r\n\r\nI don't understand this. In `_doc_template` we already have this, and we were appending to the docstrings from there. Why repeat that code here again and have it duplicated? I think makes more sense what we had before.",
        "createdAt" : "2018-12-18T11:20:01Z",
        "updatedAt" : "2019-01-07T11:30:34Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "fdd315df-6328-43e4-984f-aed6cafde761",
        "parentId" : "1ebb5922-bb0e-4dcf-9c27-6e31862fc5c2",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "@LJArendse I suppose this is related to your question above. So IIUC correctly using the same template for all funcs here will incorrectly call out that *args are not documented for skew.\r\n\r\nIs that the only exception? If so seems like it would still be easiest to use doc_template in as many funcs as possible and simply replace for `skew` if that's the only one generating an error",
        "createdAt" : "2018-12-18T17:01:40Z",
        "updatedAt" : "2019-01-07T11:30:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "812a242f-861c-49c0-8449-d4d3a2f8ba90",
        "parentId" : "1ebb5922-bb0e-4dcf-9c27-6e31862fc5c2",
        "authorId" : "7cbd150c-7d7d-4d84-8035-9607ccc719da",
        "body" : "Hi @datapythonista\r\nI agree 100% with what you are saying, ideally the code should just be defined in ```_doc_template``` and then just appended to the _docstring_ using the ```@Appender(_doc_template)```. However the ```@Appender(_doc_template)``` applied to pandas.core.window.Expanding.apply and pandas.core.window.Rolling.apply is not appending to the docstring correctly, the indentation is one level deeper, which throws the 'no return found' error. \r\nModifying, i.e. fixing the ```_doc_template``` Expanding.apply and Rolling.apply, the ```_doc_template``` itself 'breaks' other methods' docstring (as we saw in the earlier commits). Hence the change to the actual ```_shared_docs['apply']``` (similarly to how the docstrings for the ```_shared_docs['sum']``` methods are constructed, i.e. it did not make use of an```@Appender```). \r\n\r\nI also modified the ```_doc_template``` with the same changes as in ```_shared_docs['apply']```, suggested by @WillAyd, to enrich the docstrings of the other methods using the ```_doc_template```.\r\nI hope this answers your question? Thanks :)",
        "createdAt" : "2018-12-19T18:38:45Z",
        "updatedAt" : "2019-01-07T11:30:34Z",
        "lastEditedBy" : "7cbd150c-7d7d-4d84-8035-9607ccc719da",
        "tags" : [
        ]
      },
      {
        "id" : "69521e71-d282-4068-beac-9d30fb564dd1",
        "parentId" : "1ebb5922-bb0e-4dcf-9c27-6e31862fc5c2",
        "authorId" : "7cbd150c-7d7d-4d84-8035-9607ccc719da",
        "body" : "Hey @WillAyd \r\nOne question: what does 'IIUC' mean?\r\n\r\nNo ```pandas.core.window.Expanding.skew``` is not the only exception. The following other methods will also be affected:\r\n- ```pandas.core.window.Rolling.skew```\r\n- ```pandas.core.window.Rolling.cov```\r\n- ```pandas.core.window.Expanding.cov```\r\n- ```pandas.core.window.EWN.cov```\r\n- ```pandas.core.window.EWN.corr```\r\n\r\nFor these methods the addition of ```*args, **kwargs``` to ```_doc_template``` makes sense:\r\n- ```pandas.core.window.Rolling.max```\r\n- ```pandas.core.window.Expanding.max```\r\n- ```pandas.core.window.EWN.mean```\r\n- ```pandas.core.window.EWN.std```\r\n- ```pandas.core.window.EWN.var```\r\n\r\nDo you suggest we add ```*args, **kwargs``` to ```_doc_template``` and then modify **skew**, **cov**, and **corr**?\r\n\r\n\r\n\r\n",
        "createdAt" : "2018-12-19T18:50:45Z",
        "updatedAt" : "2019-01-07T11:30:34Z",
        "lastEditedBy" : "7cbd150c-7d7d-4d84-8035-9607ccc719da",
        "tags" : [
        ]
      },
      {
        "id" : "d3ce1b64-f9c9-463c-a505-f87d4d895190",
        "parentId" : "1ebb5922-bb0e-4dcf-9c27-6e31862fc5c2",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Go with whichever route yields the least amount of changes / exceptions\r\n\r\n\r\n\r\n> One question: what does 'IIUC' mean?\r\n\r\nIf I understand correctly",
        "createdAt" : "2018-12-19T19:44:56Z",
        "updatedAt" : "2019-01-07T11:30:34Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bedb9d591a9b1bf6b6264f1595ad38953b7aa33",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +978,982 @@    --------\n    Series.%(name)s : Series %(name)s.\n    DataFrame.%(name)s : DataFrame %(name)s.\n    \"\"\")\n"
  },
  {
    "id" : "b8f28897-d0aa-417b-b1a1-984c830cf0ab",
    "prId" : 24288,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24288#pullrequestreview-185395721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cd03851-b723-486e-9519-b08fd0eab309",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "do you mind generating the docstrings of this with `./scripts/validate_docstrings.py pandas.core.window.Expanding.aggregate` to see the final result of this? I guess you did, but if you can copy the output in a comment, so I can understand better this change, that would be great.",
        "createdAt" : "2018-12-15T00:16:44Z",
        "updatedAt" : "2018-12-18T11:48:50Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "470cb270-f02d-42b0-884a-fc143b57a560",
        "parentId" : "8cd03851-b723-486e-9519-b08fd0eab309",
        "authorId" : "9e599f77-efe5-492e-8917-afbc5eb21b01",
        "body" : "I think these changes are a mistake on my behalf. \r\n\r\nI want to retain the order of _Parameters_, _Returns_, _See Also_, _Notes_, _Examples_, but _shared_docs['aggregate'] already has a _notes_ section directly following _Parameters_ and _Returns_. \r\n\r\nThis means I need to separate __agg_doc_ into two strings for _See Also_ and _Examples_, which can be inserted in the correct order with _shared_docs['aggregate']. i.e. the order and where the string comes from, would be as follows:\r\n\r\n_Parameters_ (_shared_docs['aggregate']), _Returns_ (_shared_docs['aggregate']), _See Also_ (__agg_doc),  _Notes_ (_shared_docs['aggregate']), _Examples_ (__agg_doc).\r\n\r\nI looked at creating a %(see_also)s in _shared_docs['aggregate'] to substitute in a separated _See Also_, but this leads to KeyErrors for other docstrings using _shared_docs['aggregate']. \r\n\r\nI am likely over complicating this, open to your suggestions!",
        "createdAt" : "2018-12-15T09:41:33Z",
        "updatedAt" : "2018-12-18T11:48:50Z",
        "lastEditedBy" : "9e599f77-efe5-492e-8917-afbc5eb21b01",
        "tags" : [
        ]
      },
      {
        "id" : "f95d4a2c-a86e-49b1-919f-5e368e5a4faf",
        "parentId" : "8cd03851-b723-486e-9519-b08fd0eab309",
        "authorId" : "9e599f77-efe5-492e-8917-afbc5eb21b01",
        "body" : "Here's the output of ./scripts/validate_docstrings.py pandas.core.window.Expanding.aggregate\r\n\r\nAs you can see, the order is almost correct but for any method docstring that uses @Appender(_shared_docs['aggregate']) - the Notes section will always appear before See Also - which is the incorrect order - this is the issue I was attempting to describe above.\r\n\r\n`################################################################################\r\n############## Docstring (pandas.core.window.Expanding.aggregate) ##############\r\n################################################################################\r\n\r\nAggregate using one or more operations over the specified axis.\r\n\r\n\r\n\r\nParameters\r\n----------\r\nfunc : function, str, list or dict\r\n    Function to use for aggregating the data. If a function, must either\r\n    work when passed a Series/DataFrame or when passed to Series/DataFrame.apply.\r\n\r\n    Accepted combinations are:\r\n\r\n    - function\r\n    - string function name\r\n    - list of functions and/or function names, e.g. ``[np.sum, 'mean']``\r\n    - dict of axis labels -> functions, function names or list of such.\r\n\r\n*args\r\n    Positional arguments to pass to `func`.\r\n**kwargs\r\n    Keyword arguments to pass to `func`.\r\n\r\nReturns\r\n-------\r\nDataFrame, Series or scalar\r\n    if DataFrame.agg is called with a single function, returns a Series\r\n    if DataFrame.agg is called with several functions, returns a DataFrame\r\n    if Series.agg is called with single function, returns a scalar\r\n    if Series.agg is called with several functions, returns a Series\r\n\r\nNotes\r\n-----\r\n`agg` is an alias for `aggregate`. Use the alias.\r\n\r\nA passed user-defined-function will be passed a Series for evaluation.\r\n\r\nSee Also\r\n--------\r\npandas.DataFrame.expanding.aggregate\r\npandas.DataFrame.rolling.aggregate\r\npandas.DataFrame.aggregate\r\n\r\nExamples\r\n--------\r\n\r\n>>> df = pd.DataFrame(np.random.randn(10, 3), columns=['A', 'B', 'C'])\r\n>>> df\r\n          A         B         C\r\n0 -2.385977 -0.102758  0.438822\r\n1 -1.004295  0.905829 -0.954544\r\n2  0.735167 -0.165272 -1.619346\r\n3 -0.702657 -1.340923 -0.706334\r\n4 -0.246845  0.211596 -0.901819\r\n5  2.463718  3.157577 -1.380906\r\n6 -1.142255  2.340594 -0.039875\r\n7  1.396598 -1.647453  1.677227\r\n8 -0.543425  1.761277 -0.220481\r\n9 -0.640505  0.289374 -1.550670\r\n\r\n>>> df.ewm(alpha=0.5).mean()\r\n          A         B         C\r\n0 -2.385977 -0.102758  0.438822\r\n1 -1.464856  0.569633 -0.490089\r\n2 -0.207700  0.149687 -1.135379\r\n3 -0.471677 -0.645305 -0.906555\r\n4 -0.355635 -0.203033 -0.904111\r\n5  1.076417  1.503943 -1.146293\r\n6 -0.041654  1.925562 -0.588728\r\n7  0.680292  0.132049  0.548693\r\n8  0.067236  0.948257  0.163353\r\n9 -0.286980  0.618493 -0.694496\r\n\r\n################################################################################\r\n################################## Validation ##################################\r\n################################################################################\r\n\r\n11 Errors found:\r\n\tDouble line break found; please use only one blank line to separate sections or paragraphs, and do not leave blank lines at the end of docstrings\r\n\tSections are in the wrong order. Correct order is: Parameters, Returns, See Also, Notes, Examples\r\n\tParameters {arg} not documented\r\n\tUnknown parameters {func}\r\n\tMissing description for See Also \"pandas.DataFrame.expanding.aggregate\" reference\r\n\tpandas.DataFrame.expanding.aggregate in `See Also` section does not need `pandas` prefix, use DataFrame.expanding.aggregate instead.\r\n\tMissing description for See Also \"pandas.DataFrame.rolling.aggregate\" reference\r\n\tpandas.DataFrame.rolling.aggregate in `See Also` section does not need `pandas` prefix, use DataFrame.rolling.aggregate instead.\r\n\tMissing description for See Also \"pandas.DataFrame.aggregate\" reference\r\n\tpandas.DataFrame.aggregate in `See Also` section does not need `pandas` prefix, use DataFrame.aggregate instead.\r\n\tExamples do not pass tests\r\n1 Warnings found:\r\n\tNo extended summary found\r\n\r\n################################################################################\r\n################################### Doctests ###################################\r\n################################################################################\r\n\r\n**********************************************************************\r\nLine 48, in pandas.core.window.Expanding.aggregate\r\nFailed example:\r\n    df\r\nExpected:\r\n              A         B         C\r\n    0 -2.385977 -0.102758  0.438822\r\n    1 -1.004295  0.905829 -0.954544\r\n    2  0.735167 -0.165272 -1.619346\r\n    3 -0.702657 -1.340923 -0.706334\r\n    4 -0.246845  0.211596 -0.901819\r\n    5  2.463718  3.157577 -1.380906\r\n    6 -1.142255  2.340594 -0.039875\r\n    7  1.396598 -1.647453  1.677227\r\n    8 -0.543425  1.761277 -0.220481\r\n    9 -0.640505  0.289374 -1.550670\r\nGot:\r\n              A         B         C\r\n    0 -0.248355 -0.790248  1.093674\r\n    1  1.639693 -0.920766  0.438297\r\n    2 -0.201612  0.528843 -0.659469\r\n    3 -1.613252 -0.498679  2.970533\r\n    4 -1.210187  0.109458  0.226834\r\n    5 -1.055925  0.232102 -0.212216\r\n    6  1.119070 -0.183378  0.222235\r\n    7 -0.043799 -0.486759 -1.448347\r\n    8  1.288434  0.889187  0.570584\r\n    9  0.346035  0.229559  0.595709\r\n**********************************************************************\r\nLine 61, in pandas.core.window.Expanding.aggregate\r\nFailed example:\r\n    df.ewm(alpha=0.5).mean()\r\nExpected:\r\n              A         B         C\r\n    0 -2.385977 -0.102758  0.438822\r\n    1 -1.464856  0.569633 -0.490089\r\n    2 -0.207700  0.149687 -1.135379\r\n    3 -0.471677 -0.645305 -0.906555\r\n    4 -0.355635 -0.203033 -0.904111\r\n    5  1.076417  1.503943 -1.146293\r\n    6 -0.041654  1.925562 -0.588728\r\n    7  0.680292  0.132049  0.548693\r\n    8  0.067236  0.948257  0.163353\r\n    9 -0.286980  0.618493 -0.694496\r\nGot:\r\n              A         B         C\r\n    0 -0.248355 -0.790248  1.093674\r\n    1  1.010343 -0.877260  0.656756\r\n    2  0.317798 -0.073773 -0.095373\r\n    3 -0.712096 -0.300389  1.539777\r\n    4 -0.969175 -0.088855  0.862129\r\n    5 -1.013238  0.074171  0.316430\r\n    6  0.061311 -0.055618  0.268962\r\n    7  0.008550 -0.272034 -0.593060\r\n    8  0.649744  0.309713 -0.010099\r\n    9  0.497741  0.269597  0.293101`\r\n\r\n",
        "createdAt" : "2018-12-16T17:04:36Z",
        "updatedAt" : "2018-12-18T11:48:50Z",
        "lastEditedBy" : "9e599f77-efe5-492e-8917-afbc5eb21b01",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc5fc692f5bb6b516653d2a83c46e6f86cb9687c",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +1935,1939 @@                  axis='')\n    @Appender(_shared_docs['aggregate'])\n    def aggregate(self, arg, *args, **kwargs):\n        return super(Expanding, self).aggregate(arg, *args, **kwargs)\n"
  },
  {
    "id" : "6ceecbeb-ecf8-4b79-afac-ccbbfde14d24",
    "prId" : 26243,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26243#pullrequestreview-233829860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44ad9a75-4fee-43f4-a59f-3ecafd86e246",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why are you changing the structure of passing args here? was there some reason the existing would not just work?",
        "createdAt" : "2019-04-30T10:27:35Z",
        "updatedAt" : "2019-05-07T05:30:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "708d48a4-f670-4338-a7c2-c12d423dd028",
        "parentId" : "44ad9a75-4fee-43f4-a59f-3ecafd86e246",
        "authorId" : "b9a39e58-d563-4cb8-addb-435ed46a6e12",
        "body" : "For exponential window kwargs contains ```{tau: 10}``` but I need to get back tuple ```(None, 10)```  (first ```None``` is the center parameter required for exponential window). So I pass the ```immutable_args``` to ```_pop_args``` function that is the second source of params (another than kwargs).\r\n\r\nAnother possible option can be add {\"center\": None} to kwargs for exponential window and let ```_pop_args``` without change.\r\nMore info about exponential window is in comments above.",
        "createdAt" : "2019-04-30T10:58:16Z",
        "updatedAt" : "2019-05-07T05:30:21Z",
        "lastEditedBy" : "b9a39e58-d563-4cb8-addb-435ed46a6e12",
        "tags" : [
        ]
      },
      {
        "id" : "29832336-f3c7-4f1a-9827-302ae5508273",
        "parentId" : "44ad9a75-4fee-43f4-a59f-3ecafd86e246",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes pls do this instead",
        "createdAt" : "2019-05-05T21:22:56Z",
        "updatedAt" : "2019-05-07T05:30:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ce6b1e79-c980-49b6-9030-121634bc8f1c",
        "parentId" : "44ad9a75-4fee-43f4-a59f-3ecafd86e246",
        "authorId" : "b9a39e58-d563-4cb8-addb-435ed46a6e12",
        "body" : "The code is now without `immutable_args`. As I wrote in another comment, I simplyfied my code even more because other window (that would be possibly implemented in future) in scipy will not need such handling like the exponential one. So please check the last code version. \r\nThanks.",
        "createdAt" : "2019-05-06T05:32:01Z",
        "updatedAt" : "2019-05-07T05:30:21Z",
        "lastEditedBy" : "b9a39e58-d563-4cb8-addb-435ed46a6e12",
        "tags" : [
        ]
      }
    ],
    "commit" : "af964937da247e6939268ea72fbd68266c55a2f7",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +629,633 @@                           }\n\n                if win_type in arg_map:\n                    win_args = _pop_args(win_type, arg_map[win_type], kwargs)\n                    if win_type == 'exponential':"
  },
  {
    "id" : "ee163ac7-9178-4ef1-91fc-b586ab7e7c57",
    "prId" : 26372,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26372#pullrequestreview-236892665",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62083b63-bda8-480f-8d7c-79a8d81a0e2e",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "This is nice - I did something similar here:\r\n\r\nhttps://github.com/pandas-dev/pandas/pull/26089/files#r275180397\r\n\r\nSimilarly I think we should add a whatsnew here though to be conservative from an API perspective",
        "createdAt" : "2019-05-13T20:13:54Z",
        "updatedAt" : "2019-05-16T13:06:14Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e42d72f6a70ea847cb9eab4b7432df8b08f6658",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +307,311 @@        return result\n\n    def aggregate(self, func, *args, **kwargs):\n        result, how = self._aggregate(func, *args, **kwargs)\n        if result is None:"
  }
]