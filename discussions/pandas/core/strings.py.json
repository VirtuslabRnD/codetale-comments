[
  {
    "id" : "3a5b8332-ea53-4f97-a5de-1b13afcf9309",
    "prId" : 5826,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ea8d332-26d9-4c10-b4e1-6c6e2dba6bee",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "You forgot to remove the old 'return'\n",
        "createdAt" : "2014-01-03T16:05:18Z",
        "updatedAt" : "2014-01-03T16:05:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "b23563aa1581bc9d7a008d65ea2f6679a03001bd",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +339,343 @@        if as_indexer=False, default but deprecated\n\n    Returns\n    -------\n    Series of boolean values"
  },
  {
    "id" : "b22b1876-e66d-4dba-9924-ea484d77fa16",
    "prId" : 5826,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12ff84f3-6294-4b59-872b-67024994b831",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Also add the output of the other examples?\n",
        "createdAt" : "2014-01-03T16:05:45Z",
        "updatedAt" : "2014-01-03T16:05:45Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "b23563aa1581bc9d7a008d65ea2f6679a03001bd",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +415,419 @@    \n    >>> Series(['a1', 'b2', 'c3']).str.extract('([ab])(\\d)')\n\n    A pattern may contain optional groups.\n    "
  },
  {
    "id" : "97f1d9eb-d0bc-433c-a055-7f6cfbe8d41c",
    "prId" : 6132,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5ebaa69-1928-4683-98fa-99a5e8b7cc5b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this needs to be `dtype=np.int64`..then all should be good\n",
        "createdAt" : "2014-01-28T01:17:47Z",
        "updatedAt" : "2014-01-28T01:17:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8f94e9c756e3c8f9b470945a18403fe9dd53217",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +493,497 @@    tags = sorted(tags - set([\"\"]))\n\n    dummies = np.empty((len(arr), len(tags)), dtype=int)\n\n    for i, t in enumerate(tags):"
  },
  {
    "id" : "ac156c44-4948-4bc8-9a7a-491c70b16af4",
    "prId" : 8843,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "038ac394-5f70-4b98-b066-aceb85a18129",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "maybe `int, default 1` instead? \nOr actually, the default could also be just None for `step`. That is the same as 1 and seems more consistent?\n",
        "createdAt" : "2014-11-17T23:40:58Z",
        "updatedAt" : "2014-11-18T00:12:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "943586b0-27a1-49d8-aa38-b48e969db563",
        "parentId" : "038ac394-5f70-4b98-b066-aceb85a18129",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "okay, that's done\n",
        "createdAt" : "2014-11-18T00:12:47Z",
        "updatedAt" : "2014-11-18T00:12:47Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "14199f5b909c3939e611174439096206ca54afbe",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +675,679 @@    start : int or None\n    stop : int or None\n    step : int or None\n\n    Returns"
  },
  {
    "id" : "e2a80b3f-3053-49d9-a854-1b1b70ecf89f",
    "prId" : 9352,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e1c03c9-39bf-451e-b373-b229401c98a5",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add here an explanation of the new kwarg fillchar as well?\n",
        "createdAt" : "2015-01-25T21:56:28Z",
        "updatedAt" : "2015-01-26T14:06:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "71c75b9f-5cd5-4442-8054-7f1e010b6440",
        "parentId" : "7e1c03c9-39bf-451e-b373-b229401c98a5",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Yes, added.\n",
        "createdAt" : "2015-01-26T21:55:59Z",
        "updatedAt" : "2015-01-26T21:55:59Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b679b470c4c5ed9b76a6df6e2b6a88bb89950ac",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +588,592 @@\n\ndef str_pad(arr, width, side='left', fillchar=' '):\n    \"\"\"\n    Pad strings with an additional character"
  },
  {
    "id" : "5552eb99-909d-4a4f-8b29-21256aff74cd",
    "prId" : 9386,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6974b036-a92d-4020-96f0-57589d22c152",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a \"See also\" here pointing to the other function (find <-> rfind) saying shortly what the difference is?\n",
        "createdAt" : "2015-02-02T20:42:58Z",
        "updatedAt" : "2015-02-15T03:33:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "15aca78813258f68cf644852ca974f77940d03d9",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +1129,1133 @@    Returns\n    -------\n    found : array\n\n    See Also"
  },
  {
    "id" : "a50c3661-c7fa-4b81-a4f7-35591f3c05e4",
    "prId" : 9667,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7aabc1a-6fbd-4efb-8b91-308e8d0da7d2",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe make this `{'series'/'index', 'frame'}` to make it more clear they are aliases?\n",
        "createdAt" : "2015-04-09T13:43:39Z",
        "updatedAt" : "2015-04-10T07:28:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "f98bcb8b0ccfbf1b494154b22e2d455c584a1026",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +633,637 @@        String or regular expression to split on. If None, splits on whitespace\n    n : int, default None (all)\n    return_type : {'series', 'index', 'frame'}, default 'series'\n        If frame, returns a DataFrame (elements are strings)\n        If series or index, returns the same type as the original object"
  },
  {
    "id" : "0bf05fb8-fe0a-4578-91ee-89eb1cbf301a",
    "prId" : 9773,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50414ead-783b-4dde-81ce-b9d2b6486aae",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do we want empty strings here, or NaNs? (which is more consistent with `split`)\n",
        "createdAt" : "2015-04-06T10:18:36Z",
        "updatedAt" : "2015-05-07T02:54:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "60875fb1-6bf0-4367-a1d8-d64dcddf9758",
        "parentId" : "50414ead-783b-4dde-81ce-b9d2b6486aae",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "no matter, that is of course the behaviour of the standard library `partition`\n",
        "createdAt" : "2015-04-06T10:19:23Z",
        "updatedAt" : "2015-05-07T02:54:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d046788f-b6a1-4057-bc92-3075edd31c8c",
        "parentId" : "50414ead-783b-4dde-81ce-b9d2b6486aae",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Yeah, it returns empty char based on standard `partition`.\n",
        "createdAt" : "2015-04-06T13:41:20Z",
        "updatedAt" : "2015-05-07T02:54:22Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "00c2408ac7837edd8d5d2098f8a95d666dd9857c",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +1087,1091 @@    0  A  _  B_C\n    1  D  _  E_F\n    2  X\n\n    >>> s.str.rpartition('_')"
  },
  {
    "id" : "af44b1bd-a672-46dc-a8a5-d2a760e58b5b",
    "prId" : 9843,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a63a77b9-5e88-46e3-98fe-b8cea36318f3",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In this wording it sounds as all the strings in the series are concatenated\n",
        "createdAt" : "2015-04-10T12:24:43Z",
        "updatedAt" : "2015-04-25T14:44:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d0c395c1-5e3f-4c96-a49f-6a0df6d614fc",
        "parentId" : "a63a77b9-5e88-46e3-98fe-b8cea36318f3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, but this is also the case .. \nThis is quite a different behaviour when having others or not. Maybe some more explanation or an example would be useful.\n",
        "createdAt" : "2015-04-10T12:26:23Z",
        "updatedAt" : "2015-04-25T14:44:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b030097a-92f5-4811-8403-a081f9e158cd",
        "parentId" : "a63a77b9-5e88-46e3-98fe-b8cea36318f3",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Yeah it is better. Added an example.\n",
        "createdAt" : "2015-04-24T14:34:17Z",
        "updatedAt" : "2015-04-25T14:44:57Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "08b1e25e0c99018d33833552b89af1fa7dd39fc5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +33,37 @@    ----------\n    others : list-like, or list of list-likes\n      If None, returns str concatenating strings of the Series\n    sep : string or None, default None\n    na_rep : string or None, default None"
  },
  {
    "id" : "0e336e0b-a2d0-4dc9-8bf3-ed7dfc4f0a7e",
    "prId" : 10031,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8573fc36-3fe4-44e3-b7a0-29bc35f01660",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe add something like: \"For more information on the forms, see the :func:`unicodedata.normalize` docs\" ?\n",
        "createdAt" : "2015-05-01T12:32:19Z",
        "updatedAt" : "2015-05-04T04:17:07Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "84afe26aa513c29f8511f82dc2dd1679cb3d9176",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1215,1219 @@        ----------\n        form : {'NFC', 'NFKC', 'NFD', 'NFKD'}\n            Unicode form\n\n        Returns"
  },
  {
    "id" : "4b4766b9-37a3-4567-8339-2bb99c898899",
    "prId" : 10303,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fa4e166-e73f-4d79-b126-d952fb0d31db",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "We're starting to use `versionadded` directive (#10215). Please add `.. versionadded:: 0.16.2`, like:\n- https://github.com/pydata/pandas/blob/master/pandas/core/generic.py#L2051\n",
        "createdAt" : "2015-06-06T21:12:47Z",
        "updatedAt" : "2015-06-08T17:13:46Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "13da959b-40f8-425b-b0dd-1aa2334daa10",
        "parentId" : "1fa4e166-e73f-4d79-b126-d952fb0d31db",
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "it's added\n",
        "createdAt" : "2015-06-08T17:29:42Z",
        "updatedAt" : "2015-06-08T17:29:42Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc66f436c94557c7ecabc8a8679aeed7801782f3",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +740,744 @@    string, starting at the end of the string and working to the front.\n    Equivalent to :meth:`str.rsplit`.\n\n    .. versionadded:: 0.16.2\n"
  },
  {
    "id" : "f0bc4a8e-a3af-42dd-b7b7-120fc1cce1b1",
    "prId" : 15456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15456#pullrequestreview-24567044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c165403-6543-4b13-8a95-18b8dd106557",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "the signature needs to change for ``case=None`` and ``flags=None`` (and then set them if not a is_compiled_re (and they are None)",
        "createdAt" : "2017-03-01T19:28:00Z",
        "updatedAt" : "2017-03-05T11:23:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "624637f67528fb9f85e2d26e5faa2ddcc0983f22",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +313,317 @@    Parameters\n    ----------\n    pat : string or compiled regex\n        String can be a character sequence or regular expression.\n"
  },
  {
    "id" : "7770f7ff-01aa-4a8b-b63d-2473c9ff8685",
    "prId" : 15456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15456#pullrequestreview-25121864",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c446aea3-b6f4-4970-aadd-7ecacb9dc9df",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "another possiblity here is to make ``case=object`` the default, this allows you to detect if anything is passed, with the nice propery that ``object`` is ``True`` (while ``None`` is ``False``). Its the same idea, but less error prone.",
        "createdAt" : "2017-03-03T23:00:36Z",
        "updatedAt" : "2017-03-05T11:23:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2d45c304-5315-437a-8678-a83b0c87efdb",
        "parentId" : "c446aea3-b6f4-4970-aadd-7ecacb9dc9df",
        "authorId" : "4bdd0fe8-ed1b-42c9-89ed-c4c5ca99cf82",
        "body" : "I like the idea, especially because of the `object` is `True` property. This would make it more portable to other search-pattern functions.\r\n\r\nThe code is much simpler:\r\n```python\r\n    if not case:\r\n        flags |= re.IGNORECASE\r\n\r\n    is_compiled_re = is_re(pat)\r\n    if is_compiled_re and flags:\r\n        raise ValueError(\"case and flags must be default values\"\r\n                         \" when pat is a compiled regex\")\r\n\r\n    use_re = is_compiled_re or len(pat) > 1 or flags or callable(repl)\r\n```\r\n\r\nHere's the documentation I'd imagine works well with that. @jreback, can you please let me know what you think before I run the whole thing through again with the other changes above?\r\n\r\n```python\r\n    case : boolean, default True (case sensitive)\r\n        Must be True if `pat` is a compiled regex\r\n```",
        "createdAt" : "2017-03-03T23:31:29Z",
        "updatedAt" : "2017-03-05T11:23:05Z",
        "lastEditedBy" : "4bdd0fe8-ed1b-42c9-89ed-c4c5ca99cf82",
        "tags" : [
        ]
      },
      {
        "id" : "fa8c3560-c5ed-4b76-ae5a-341d8b109880",
        "parentId" : "c446aea3-b6f4-4970-aadd-7ecacb9dc9df",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i'll let joris comment but i think it should work",
        "createdAt" : "2017-03-03T23:34:42Z",
        "updatedAt" : "2017-03-05T11:23:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0decf9ad-e59a-4a94-beb2-f03ffc858225",
        "parentId" : "c446aea3-b6f4-4970-aadd-7ecacb9dc9df",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I know using such a sentinel is a way to go when you want to be able to distinguish None (a passed None as a value for the arg you want to catch), but this is not the case here. We can use None to distinguish a passed True or the default None as True. We don't need to be able to catch an explicitly passed None. So I don't understand why using `object` is needed here? \r\nFurther it has the disadvantage that you get an ugly value in the signature.\r\n\r\nAs far as I see it, we just need to choose between those options:\r\n\r\n- keep default as True, and say that the argument is ignored if compiled regex is passed\r\n- default of None, which is set to True if no compiled regex is passed, and we can raise if something else as None is passed in case of compiled regex.\r\n\r\nCode-wise the first is the simplest. \r\nThe second we can give more information to the user.\r\n\r\n\r\n ",
        "createdAt" : "2017-03-04T11:28:44Z",
        "updatedAt" : "2017-03-05T11:23:05Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "624637f67528fb9f85e2d26e5faa2ddcc0983f22",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +329,333 @@    n : int, default -1 (all)\n        Number of replacements to make from start\n    case : boolean, default None\n        - If True, case sensitive (the default if `pat` is a string)\n        - Set to False for case insensitive"
  }
]