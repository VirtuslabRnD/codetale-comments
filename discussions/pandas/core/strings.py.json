[
  {
    "id" : "3a5b8332-ea53-4f97-a5de-1b13afcf9309",
    "prId" : 5826,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ea8d332-26d9-4c10-b4e1-6c6e2dba6bee",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "You forgot to remove the old 'return'\n",
        "createdAt" : "2014-01-03T16:05:18Z",
        "updatedAt" : "2014-01-03T16:05:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "b23563aa1581bc9d7a008d65ea2f6679a03001bd",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +339,343 @@        if as_indexer=False, default but deprecated\n\n    Returns\n    -------\n    Series of boolean values"
  },
  {
    "id" : "b22b1876-e66d-4dba-9924-ea484d77fa16",
    "prId" : 5826,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12ff84f3-6294-4b59-872b-67024994b831",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Also add the output of the other examples?\n",
        "createdAt" : "2014-01-03T16:05:45Z",
        "updatedAt" : "2014-01-03T16:05:45Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "b23563aa1581bc9d7a008d65ea2f6679a03001bd",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +415,419 @@    \n    >>> Series(['a1', 'b2', 'c3']).str.extract('([ab])(\\d)')\n\n    A pattern may contain optional groups.\n    "
  },
  {
    "id" : "97f1d9eb-d0bc-433c-a055-7f6cfbe8d41c",
    "prId" : 6132,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5ebaa69-1928-4683-98fa-99a5e8b7cc5b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this needs to be `dtype=np.int64`..then all should be good\n",
        "createdAt" : "2014-01-28T01:17:47Z",
        "updatedAt" : "2014-01-28T01:17:47Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8f94e9c756e3c8f9b470945a18403fe9dd53217",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +493,497 @@    tags = sorted(tags - set([\"\"]))\n\n    dummies = np.empty((len(arr), len(tags)), dtype=int)\n\n    for i, t in enumerate(tags):"
  },
  {
    "id" : "ac156c44-4948-4bc8-9a7a-491c70b16af4",
    "prId" : 8843,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "038ac394-5f70-4b98-b066-aceb85a18129",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "maybe `int, default 1` instead? \nOr actually, the default could also be just None for `step`. That is the same as 1 and seems more consistent?\n",
        "createdAt" : "2014-11-17T23:40:58Z",
        "updatedAt" : "2014-11-18T00:12:43Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "943586b0-27a1-49d8-aa38-b48e969db563",
        "parentId" : "038ac394-5f70-4b98-b066-aceb85a18129",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "okay, that's done\n",
        "createdAt" : "2014-11-18T00:12:47Z",
        "updatedAt" : "2014-11-18T00:12:47Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "14199f5b909c3939e611174439096206ca54afbe",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +675,679 @@    start : int or None\n    stop : int or None\n    step : int or None\n\n    Returns"
  },
  {
    "id" : "e2a80b3f-3053-49d9-a854-1b1b70ecf89f",
    "prId" : 9352,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e1c03c9-39bf-451e-b373-b229401c98a5",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add here an explanation of the new kwarg fillchar as well?\n",
        "createdAt" : "2015-01-25T21:56:28Z",
        "updatedAt" : "2015-01-26T14:06:54Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "71c75b9f-5cd5-4442-8054-7f1e010b6440",
        "parentId" : "7e1c03c9-39bf-451e-b373-b229401c98a5",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Yes, added.\n",
        "createdAt" : "2015-01-26T21:55:59Z",
        "updatedAt" : "2015-01-26T21:55:59Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b679b470c4c5ed9b76a6df6e2b6a88bb89950ac",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +588,592 @@\n\ndef str_pad(arr, width, side='left', fillchar=' '):\n    \"\"\"\n    Pad strings with an additional character"
  },
  {
    "id" : "5552eb99-909d-4a4f-8b29-21256aff74cd",
    "prId" : 9386,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6974b036-a92d-4020-96f0-57589d22c152",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you add a \"See also\" here pointing to the other function (find <-> rfind) saying shortly what the difference is?\n",
        "createdAt" : "2015-02-02T20:42:58Z",
        "updatedAt" : "2015-02-15T03:33:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "15aca78813258f68cf644852ca974f77940d03d9",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +1129,1133 @@    Returns\n    -------\n    found : array\n\n    See Also"
  },
  {
    "id" : "a50c3661-c7fa-4b81-a4f7-35591f3c05e4",
    "prId" : 9667,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7aabc1a-6fbd-4efb-8b91-308e8d0da7d2",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe make this `{'series'/'index', 'frame'}` to make it more clear they are aliases?\n",
        "createdAt" : "2015-04-09T13:43:39Z",
        "updatedAt" : "2015-04-10T07:28:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "f98bcb8b0ccfbf1b494154b22e2d455c584a1026",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +633,637 @@        String or regular expression to split on. If None, splits on whitespace\n    n : int, default None (all)\n    return_type : {'series', 'index', 'frame'}, default 'series'\n        If frame, returns a DataFrame (elements are strings)\n        If series or index, returns the same type as the original object"
  },
  {
    "id" : "0bf05fb8-fe0a-4578-91ee-89eb1cbf301a",
    "prId" : 9773,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50414ead-783b-4dde-81ce-b9d2b6486aae",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do we want empty strings here, or NaNs? (which is more consistent with `split`)\n",
        "createdAt" : "2015-04-06T10:18:36Z",
        "updatedAt" : "2015-05-07T02:54:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "60875fb1-6bf0-4367-a1d8-d64dcddf9758",
        "parentId" : "50414ead-783b-4dde-81ce-b9d2b6486aae",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "no matter, that is of course the behaviour of the standard library `partition`\n",
        "createdAt" : "2015-04-06T10:19:23Z",
        "updatedAt" : "2015-05-07T02:54:22Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d046788f-b6a1-4057-bc92-3075edd31c8c",
        "parentId" : "50414ead-783b-4dde-81ce-b9d2b6486aae",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Yeah, it returns empty char based on standard `partition`.\n",
        "createdAt" : "2015-04-06T13:41:20Z",
        "updatedAt" : "2015-05-07T02:54:22Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "00c2408ac7837edd8d5d2098f8a95d666dd9857c",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +1087,1091 @@    0  A  _  B_C\n    1  D  _  E_F\n    2  X\n\n    >>> s.str.rpartition('_')"
  },
  {
    "id" : "af44b1bd-a672-46dc-a8a5-d2a760e58b5b",
    "prId" : 9843,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a63a77b9-5e88-46e3-98fe-b8cea36318f3",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "In this wording it sounds as all the strings in the series are concatenated\n",
        "createdAt" : "2015-04-10T12:24:43Z",
        "updatedAt" : "2015-04-25T14:44:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "d0c395c1-5e3f-4c96-a49f-6a0df6d614fc",
        "parentId" : "a63a77b9-5e88-46e3-98fe-b8cea36318f3",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Ah, but this is also the case .. \nThis is quite a different behaviour when having others or not. Maybe some more explanation or an example would be useful.\n",
        "createdAt" : "2015-04-10T12:26:23Z",
        "updatedAt" : "2015-04-25T14:44:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b030097a-92f5-4811-8403-a081f9e158cd",
        "parentId" : "a63a77b9-5e88-46e3-98fe-b8cea36318f3",
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Yeah it is better. Added an example.\n",
        "createdAt" : "2015-04-24T14:34:17Z",
        "updatedAt" : "2015-04-25T14:44:57Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      }
    ],
    "commit" : "08b1e25e0c99018d33833552b89af1fa7dd39fc5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +33,37 @@    ----------\n    others : list-like, or list of list-likes\n      If None, returns str concatenating strings of the Series\n    sep : string or None, default None\n    na_rep : string or None, default None"
  },
  {
    "id" : "0e336e0b-a2d0-4dc9-8bf3-ed7dfc4f0a7e",
    "prId" : 10031,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8573fc36-3fe4-44e3-b7a0-29bc35f01660",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Maybe add something like: \"For more information on the forms, see the :func:`unicodedata.normalize` docs\" ?\n",
        "createdAt" : "2015-05-01T12:32:19Z",
        "updatedAt" : "2015-05-04T04:17:07Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "84afe26aa513c29f8511f82dc2dd1679cb3d9176",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1215,1219 @@        ----------\n        form : {'NFC', 'NFKC', 'NFD', 'NFKD'}\n            Unicode form\n\n        Returns"
  },
  {
    "id" : "4b4766b9-37a3-4567-8339-2bb99c898899",
    "prId" : 10303,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fa4e166-e73f-4d79-b126-d952fb0d31db",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "We're starting to use `versionadded` directive (#10215). Please add `.. versionadded:: 0.16.2`, like:\n- https://github.com/pydata/pandas/blob/master/pandas/core/generic.py#L2051\n",
        "createdAt" : "2015-06-06T21:12:47Z",
        "updatedAt" : "2015-06-08T17:13:46Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "13da959b-40f8-425b-b0dd-1aa2334daa10",
        "parentId" : "1fa4e166-e73f-4d79-b126-d952fb0d31db",
        "authorId" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "body" : "it's added\n",
        "createdAt" : "2015-06-08T17:29:42Z",
        "updatedAt" : "2015-06-08T17:29:42Z",
        "lastEditedBy" : "ad641c5e-8c19-4350-a77b-ef5d980aedc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc66f436c94557c7ecabc8a8679aeed7801782f3",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +740,744 @@    string, starting at the end of the string and working to the front.\n    Equivalent to :meth:`str.rsplit`.\n\n    .. versionadded:: 0.16.2\n"
  },
  {
    "id" : "f0bc4a8e-a3af-42dd-b7b7-120fc1cce1b1",
    "prId" : 15456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15456#pullrequestreview-24567044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c165403-6543-4b13-8a95-18b8dd106557",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "the signature needs to change for ``case=None`` and ``flags=None`` (and then set them if not a is_compiled_re (and they are None)",
        "createdAt" : "2017-03-01T19:28:00Z",
        "updatedAt" : "2017-03-05T11:23:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "624637f67528fb9f85e2d26e5faa2ddcc0983f22",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +313,317 @@    Parameters\n    ----------\n    pat : string or compiled regex\n        String can be a character sequence or regular expression.\n"
  },
  {
    "id" : "7770f7ff-01aa-4a8b-b63d-2473c9ff8685",
    "prId" : 15456,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15456#pullrequestreview-25121864",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c446aea3-b6f4-4970-aadd-7ecacb9dc9df",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "another possiblity here is to make ``case=object`` the default, this allows you to detect if anything is passed, with the nice propery that ``object`` is ``True`` (while ``None`` is ``False``). Its the same idea, but less error prone.",
        "createdAt" : "2017-03-03T23:00:36Z",
        "updatedAt" : "2017-03-05T11:23:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2d45c304-5315-437a-8678-a83b0c87efdb",
        "parentId" : "c446aea3-b6f4-4970-aadd-7ecacb9dc9df",
        "authorId" : "4bdd0fe8-ed1b-42c9-89ed-c4c5ca99cf82",
        "body" : "I like the idea, especially because of the `object` is `True` property. This would make it more portable to other search-pattern functions.\r\n\r\nThe code is much simpler:\r\n```python\r\n    if not case:\r\n        flags |= re.IGNORECASE\r\n\r\n    is_compiled_re = is_re(pat)\r\n    if is_compiled_re and flags:\r\n        raise ValueError(\"case and flags must be default values\"\r\n                         \" when pat is a compiled regex\")\r\n\r\n    use_re = is_compiled_re or len(pat) > 1 or flags or callable(repl)\r\n```\r\n\r\nHere's the documentation I'd imagine works well with that. @jreback, can you please let me know what you think before I run the whole thing through again with the other changes above?\r\n\r\n```python\r\n    case : boolean, default True (case sensitive)\r\n        Must be True if `pat` is a compiled regex\r\n```",
        "createdAt" : "2017-03-03T23:31:29Z",
        "updatedAt" : "2017-03-05T11:23:05Z",
        "lastEditedBy" : "4bdd0fe8-ed1b-42c9-89ed-c4c5ca99cf82",
        "tags" : [
        ]
      },
      {
        "id" : "fa8c3560-c5ed-4b76-ae5a-341d8b109880",
        "parentId" : "c446aea3-b6f4-4970-aadd-7ecacb9dc9df",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i'll let joris comment but i think it should work",
        "createdAt" : "2017-03-03T23:34:42Z",
        "updatedAt" : "2017-03-05T11:23:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0decf9ad-e59a-4a94-beb2-f03ffc858225",
        "parentId" : "c446aea3-b6f4-4970-aadd-7ecacb9dc9df",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I know using such a sentinel is a way to go when you want to be able to distinguish None (a passed None as a value for the arg you want to catch), but this is not the case here. We can use None to distinguish a passed True or the default None as True. We don't need to be able to catch an explicitly passed None. So I don't understand why using `object` is needed here? \r\nFurther it has the disadvantage that you get an ugly value in the signature.\r\n\r\nAs far as I see it, we just need to choose between those options:\r\n\r\n- keep default as True, and say that the argument is ignored if compiled regex is passed\r\n- default of None, which is set to True if no compiled regex is passed, and we can raise if something else as None is passed in case of compiled regex.\r\n\r\nCode-wise the first is the simplest. \r\nThe second we can give more information to the user.\r\n\r\n\r\n ",
        "createdAt" : "2017-03-04T11:28:44Z",
        "updatedAt" : "2017-03-05T11:23:05Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "624637f67528fb9f85e2d26e5faa2ddcc0983f22",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +329,333 @@    n : int, default -1 (all)\n        Number of replacements to make from start\n    case : boolean, default None\n        - If True, case sensitive (the default if `pat` is a string)\n        - Set to False for case insensitive"
  },
  {
    "id" : "10e430ec-a5bb-402a-94ce-7f6806858311",
    "prId" : 17236,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17236#pullrequestreview-58629708",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a149207b-a0cb-40ec-9a43-b3be17d03bc2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "a comment on why this is needed",
        "createdAt" : "2017-08-25T11:34:10Z",
        "updatedAt" : "2017-08-30T16:34:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c8205c0681b486ed73bdcb816b3728bee1a5f78",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1454,1458 @@                result = list(result)\n                out = MultiIndex.from_tuples(result, names=name)\n                if out.nlevels == 1:\n                    # We had all tuples of length-one, which are\n                    # better represented as a regular Index."
  },
  {
    "id" : "1881d11f-6caa-4fc2-990f-d69c0046f3a5",
    "prId" : 19584,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19584#pullrequestreview-94933495",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11af0079-21d0-407f-bc1b-5f584aaa59da",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a version added tag here",
        "createdAt" : "2018-02-08T01:39:07Z",
        "updatedAt" : "2018-02-28T11:13:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1371cef1dd883fdac4f4574f52c3be5ccac3346c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +341,345 @@        - If True, assumes the passed-in pattern is a regular expression.\n        - If False, treats the pattern as a literal string\n        - Cannot be set to False if `pat` is a compiled regex or `repl` is\n          a callable.\n"
  },
  {
    "id" : "ac7ff6af-0630-43de-bbfa-15e5d12fb284",
    "prId" : 19584,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19584#pullrequestreview-96825025",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d419b0a4-acc4-4046-b3e8-b759c5a6590b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a Raises section.  (ValuesError if compiled with case/flags)",
        "createdAt" : "2018-02-15T12:13:05Z",
        "updatedAt" : "2018-02-28T11:13:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1371cef1dd883fdac4f4574f52c3be5ccac3346c",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +343,347 @@        - Cannot be set to False if `pat` is a compiled regex or `repl` is\n          a callable.\n\n        .. versionadded:: 0.23.0\n"
  },
  {
    "id" : "5bf96283-c72c-4b2d-8318-81f4d5768aa5",
    "prId" : 20141,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20141#pullrequestreview-104761468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f57a610-cc49-4b63-9953-2f8e96c2a852",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Add a llink to https://docs.python.org/3/library/re.html#contents-of-module-re ?",
        "createdAt" : "2018-03-16T13:01:11Z",
        "updatedAt" : "2018-07-07T15:21:53Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c98367ad-51e9-4e4b-8fed-641664fbd855",
        "parentId" : "1f57a610-cc49-4b63-9953-2f8e96c2a852",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think this can be done by using `` :mod:`re` ``",
        "createdAt" : "2018-03-17T09:30:03Z",
        "updatedAt" : "2018-07-07T15:21:53Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec8bd444625645386a94387fb8dad94b3b1ddf6b",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +851,855 @@        Regular expression pattern with capturing groups.\n    flags : int, default 0 (no flags)\n        ``re`` module flags, e.g. ``re.IGNORECASE``.\n        See :mod:`re`\n    expand : bool, default True"
  },
  {
    "id" : "5738c943-3a78-4714-9c0c-1b0c9829ff69",
    "prId" : 20154,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20154#pullrequestreview-103927313",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49e30645-c3cf-491f-8a6d-349be9246234",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Add an examle with special characters like `$`?",
        "createdAt" : "2018-03-10T14:35:26Z",
        "updatedAt" : "2018-03-14T18:29:02Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "3b8a69ea-c6d8-4a2e-8f8a-463ac88d41c6",
        "parentId" : "49e30645-c3cf-491f-8a6d-349be9246234",
        "authorId" : "c09503e7-ec5f-4bd8-96f3-1b8c2babc302",
        "body" : "should I remove the note in the doc?",
        "createdAt" : "2018-03-14T17:43:15Z",
        "updatedAt" : "2018-03-14T18:29:02Z",
        "lastEditedBy" : "c09503e7-ec5f-4bd8-96f3-1b8c2babc302",
        "tags" : [
        ]
      }
    ],
    "commit" : "93d2257837c893c9b21ea5e964f8b1b660da4049",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +244,248 @@    5    0.0\n    6    1.0\n    dtype: float64\n\n    Escape ``'$'`` to find the literal dollar sign."
  },
  {
    "id" : "7c41e024-a1ae-45c1-a39b-f8c5dfa21369",
    "prId" : 20347,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20347#pullrequestreview-115898082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcaf0be9-af90-402f-af87-7dc4124eab25",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you should be able to \r\n``Index(data).inferred_type`` here (as if its not an Index then it will be for inference, otherwise it will just work)",
        "createdAt" : "2018-04-24T19:35:33Z",
        "updatedAt" : "2018-05-02T05:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "40e04403-3fdf-42bd-b0a1-1d305f375336",
        "parentId" : "fcaf0be9-af90-402f-af87-7dc4124eab25",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "after ``isinstance(data, Index)``, data is already an Index. The previous ``if``-check was failing for categorical data (which isn't in the list of allowed types). But maybe I misunderstand something?",
        "createdAt" : "2018-04-24T21:37:44Z",
        "updatedAt" : "2018-05-02T05:33:55Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "c091ebf3-fe72-4e80-b9cd-80bbfe468bc1",
        "parentId" : "fcaf0be9-af90-402f-af87-7dc4124eab25",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I see, ok then",
        "createdAt" : "2018-04-27T11:02:52Z",
        "updatedAt" : "2018-05-02T05:33:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f77b80b4ca7c8b04894b00bc08e980b62b97b97",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +1829,1833 @@            # see src/inference.pyx which can contain string values\n            allowed_types = ('string', 'unicode', 'mixed', 'mixed-integer')\n            if is_categorical_dtype(data.dtype):\n                inf_type = data.categories.inferred_type\n            else:"
  },
  {
    "id" : "d9cfff76-eedd-4483-8188-7fcce3cd64c5",
    "prId" : 20347,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20347#pullrequestreview-116859044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cc4bd36-3b2d-4b21-9423-3524cec8cd38",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is wrong\r\n\r\ni don’t think we can align a ndarray at all like this\r\nlet’s can ndarray a that are > 1 dim",
        "createdAt" : "2018-05-02T10:55:12Z",
        "updatedAt" : "2018-05-02T11:03:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "634cd2da-f603-47ff-be96-335ab487f84d",
        "parentId" : "4cc4bd36-3b2d-4b21-9423-3524cec8cd38",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "The DF-constructor works as expected for a 2-dim ndarray, but I haven't checked if this is tested behaviour. (essentially, `df == DataFrame(df.values, columns=df.columns, index=df.index)`)\r\n\r\nI would suggest not to can 2-dim ndarrays, because they are necessary to avoid alignment on the deprecation path for `join`:\r\n> [...] To disable alignment (the behavior before v.0.23) and  silence this warning, use `.values` on any Series/Index/DataFrame in `others`. [...]",
        "createdAt" : "2018-05-02T11:32:03Z",
        "updatedAt" : "2018-05-02T11:32:03Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f77b80b4ca7c8b04894b00bc08e980b62b97b97",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +1985,1989 @@                others.index = idx\n            return ([others[x] for x in others], fu_wrn)\n        elif isinstance(others, np.ndarray) and others.ndim == 2:\n            others = DataFrame(others, index=idx)\n            return ([others[x] for x in others], False)"
  },
  {
    "id" : "15a514dd-c264-4528-85c3-837774baf3bd",
    "prId" : 20347,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20347#pullrequestreview-116849961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c253fe84-6c65-4710-b3e9-882dde4f53e7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can make this simpler by just checking for all is not list like (eg strings) \r\n\r\nanything else will fail thru to the TypeError",
        "createdAt" : "2018-05-02T10:58:10Z",
        "updatedAt" : "2018-05-02T11:03:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f77b80b4ca7c8b04894b00bc08e980b62b97b97",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +2024,2028 @@            # test if there is a mix of list-like and non-list-like (e.g. str)\n            elif (any(is_list_like(x) for x in others)\n                  and any(not is_list_like(x) for x in others)):\n                raise TypeError(err_msg)\n            else:  # all elements in others are _not_ list-like"
  },
  {
    "id" : "df6bd64e-1e7c-4dc2-9cb3-378aa8862e2b",
    "prId" : 20347,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20347#pullrequestreview-116849961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f1523d8-2dbe-43b2-82d1-b5f7bf6a020f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can u name this parameter just warn",
        "createdAt" : "2018-05-02T10:59:52Z",
        "updatedAt" : "2018-05-02T11:03:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f77b80b4ca7c8b04894b00bc08e980b62b97b97",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +1992,1996 @@            if all(is_list_like(x) for x in others):\n                los = []\n                fu_wrn = False\n                while others:\n                    nxt = others.pop(0)  # list-like as per check above"
  },
  {
    "id" : "e7f207df-5f35-415f-a21f-b50d55508620",
    "prId" : 20347,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20347#pullrequestreview-116849961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12a5b483-3c27-4058-b7de-3cf053f49ff9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this whole section needs some work it’s way too hard to read and follow ",
        "createdAt" : "2018-05-02T11:01:38Z",
        "updatedAt" : "2018-05-02T11:03:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f77b80b4ca7c8b04894b00bc08e980b62b97b97",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +1995,1999 @@                while others:\n                    nxt = others.pop(0)  # list-like as per check above\n                    # safety for iterators and other non-persistent list-likes\n                    # do not map indexed/typed objects; would lose information\n                    if not isinstance(nxt, (DataFrame, Series,"
  },
  {
    "id" : "07a7aabc-5eee-43fc-aea5-e89a407617f7",
    "prId" : 20347,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20347#pullrequestreview-116849961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34bf0fb7-925a-4217-b70e-13cad87a72a1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "isnull already checks for None\r\nonly 1d objects are valid here (or all scalars)\r\n\r\ndo this check up front",
        "createdAt" : "2018-05-02T11:03:23Z",
        "updatedAt" : "2018-05-02T11:03:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f77b80b4ca7c8b04894b00bc08e980b62b97b97",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +2010,2014 @@                                or all((isinstance(x, compat.string_types)\n                                        or (not is_list_like(x) and isnull(x))\n                                        or x is None)\n                                       for x in nxt))\n                    # DataFrame is false positive of is_legal"
  },
  {
    "id" : "bf685a75-cadb-41fa-8381-92160c610978",
    "prId" : 20458,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20458#pullrequestreview-106703224",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5563bb90-36ff-4971-857c-9482fac8f830",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think in more cases we show `>>> s` after defining it, and we leave a blank line between the different examples, so they are in different boxes in the html. Also, for the last example a short explanation of what you are doing could be useful for users.\r\n\r\nYou can see an example of what I mean here: https://github.com/dcreekp/pandas/blob/39f76413374109d8c34021a6b61d121d3d05c9a0/pandas/core/strings.py#L1347 probably we don't need many explanations in this case, as the example is quite obvious, but a short sentence for the last case could help users see what's going on faster.",
        "createdAt" : "2018-03-24T16:15:32Z",
        "updatedAt" : "2018-03-25T21:13:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a6d0183818e9aa1142d7e68a3e3be8fb5867eb7",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +376,380 @@    2    False\n    3    False\n    dtype: bool\n    \"\"\"\n    f = lambda x: x.startswith(pat)"
  },
  {
    "id" : "8758f1b7-b537-47a0-a56e-3ccf5faf5e60",
    "prId" : 20870,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20870#pullrequestreview-116191088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56d56392-acf8-4349-825d-a4048875e811",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you add examples for the `case` and `flags` parameters?",
        "createdAt" : "2018-04-30T03:10:22Z",
        "updatedAt" : "2018-05-01T20:18:40Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "99eb01577f9566e51053276cd2cef0c6f59694f2",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +327,331 @@    match : analogous, but stricter, relying on re.match instead of re.search\n\n    Examples\n    --------\n"
  },
  {
    "id" : "5c8365ab-ae9d-48de-8633-58b2460a1470",
    "prId" : 20923,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20923#pullrequestreview-117198392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9eafb49d-692e-42ce-a400-b962d0dc877b",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "@jreback :\r\n> this is wrong\r\ni don’t think we can align a ndarray at all like this\r\nlet’s can ndarray a that are > 1 dim\r\n\r\nMy response: \r\nThe DF-constructor works as expected for a 2-dim ndarray, but I haven't checked if this is tested behaviour. (essentially, `df == DataFrame(df.values, columns=df.columns, index=df.index)`)\r\n\r\nI would suggest not to can 2-dim ndarrays, because they are necessary to avoid alignment on the deprecation path for `join`:\r\n> [...] To disable alignment (the behavior before v.0.23) and  silence this warning, use `.values` on any Series/Index/DataFrame in `others`. [...]",
        "createdAt" : "2018-05-02T12:31:30Z",
        "updatedAt" : "2018-05-03T05:11:52Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "65f260a2-2d89-4e9f-8bc6-5500049dffaa",
        "parentId" : "9eafb49d-692e-42ce-a400-b962d0dc877b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a test for this, basically see what happens when I have a non-default index with the Series (e.g. 2,3, 4) or something and it gets aligned with the 0,1,2 of the ndarray-converted-to-DataFrame. It will 'work' but is wrong.",
        "createdAt" : "2018-05-03T00:38:04Z",
        "updatedAt" : "2018-05-03T05:11:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "dbf59237-bf17-4a42-8ed3-c4c470450c7c",
        "parentId" : "9eafb49d-692e-42ce-a400-b962d0dc877b",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "I added a general comment before all the cases for `others` because it seems this point wasn't clear:\r\n```\r\n# Generally speaking, all objects without an index inherit the index\r\n# `idx` of the calling Series/Index - i.e. must have matching length.\r\n# Objects with an index (i.e. Series/Index/DataFrame) keep their own\r\n# index, *unless* ignore_index is set to True.\r\n```\r\n\r\nSo, the case you mention does not happen, because an ndarray is always automatically aligned with the calling Series (of course, the lengths must match for this to work).\r\n\r\nThere are several tests with objects with different indexes, both with `join is None` (so with force-realign; successful but raising a warning), as well as with the different `join`-types.",
        "createdAt" : "2018-05-03T05:08:48Z",
        "updatedAt" : "2018-05-03T05:13:22Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "c34367d3-f19e-4b4e-aba9-b34e34e104ff",
        "parentId" : "9eafb49d-692e-42ce-a400-b962d0dc877b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "i c, ok then",
        "createdAt" : "2018-05-03T09:57:56Z",
        "updatedAt" : "2018-05-03T09:58:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bf38a0a8011aab30d9f0565223f59c6858d6a13",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +1990,1994 @@                others.index = idx\n            return ([others[x] for x in others], warn)\n        elif isinstance(others, np.ndarray) and others.ndim == 2:\n            others = DataFrame(others, index=idx)\n            return ([others[x] for x in others], False)"
  },
  {
    "id" : "0b2a1472-a9cf-446f-b62c-66effbb38e20",
    "prId" : 22187,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22187#pullrequestreview-143677768",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bdc4fd7-b006-458f-9421-ad39e013f248",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "What do you think about adding `Series.size` here? I think some users could come by mistake to this page looking how to check the length of the Series. And it'd be nice to help them find it.",
        "createdAt" : "2018-08-03T13:23:55Z",
        "updatedAt" : "2018-08-06T16:56:14Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "2894a486-c3c4-420e-a98f-2587bfb665a0",
        "parentId" : "1bdc4fd7-b006-458f-9421-ad39e013f248",
        "authorId" : "890abb6c-2d6d-4300-95d4-d352998724d8",
        "body" : "Good idea! Included in new commit. ",
        "createdAt" : "2018-08-06T16:57:38Z",
        "updatedAt" : "2018-08-06T16:57:38Z",
        "lastEditedBy" : "890abb6c-2d6d-4300-95d4-d352998724d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f395314e72c41bd72b841578fdcb4c8cbb99bca5",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +2814,2818 @@    See Also\n    --------\n    str.len : Python built-in function returning the length of an object.\n    Series.size : Returns the length of the Series.\n"
  },
  {
    "id" : "c9407145-70ff-482e-b8d3-c98f16b298ca",
    "prId" : 22565,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22565#pullrequestreview-151626195",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2878ee4d-d949-4822-b9fe-615dc1146e9f",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Can you remove this blank line at the end before the quotes.",
        "createdAt" : "2018-09-02T16:24:49Z",
        "updatedAt" : "2018-09-02T16:25:52Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "c96440708fc3ef176cc014f1a16a0d4c7e2e31b2",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1005,1009 @@    B 0          b     1\n    C 0        NaN     1\n    \"\"\"\n\n    regex = re.compile(pat, flags=flags)"
  },
  {
    "id" : "66cc061c-ed55-45ab-b773-e124b4d6938d",
    "prId" : 22565,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22565#pullrequestreview-151747573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83be0e6c-9094-453f-97c5-adfa1df72252",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think in `DataFrame`... is better to use backticks, as they are more \"links to other pages\" than \"code\" in my opinion.",
        "createdAt" : "2018-09-02T16:25:36Z",
        "updatedAt" : "2018-09-02T16:25:52Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "565d3e21-0db6-4493-894f-a18110311495",
        "parentId" : "83be0e6c-9094-453f-97c5-adfa1df72252",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I meant single backticks in the previous comment, instead of double backticks.",
        "createdAt" : "2018-09-03T10:47:56Z",
        "updatedAt" : "2018-09-03T10:47:56Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "c96440708fc3ef176cc014f1a16a0d4c7e2e31b2",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +957,961 @@        group. Its rows have a ``MultiIndex`` with first levels that come from\n        the subject ``Series``. The last level is named 'match' and indexes the\n        matches in each item of the ``Series``. Any capture group names in\n        regular expression pat will be used for column names; otherwise capture\n        group numbers will be used."
  },
  {
    "id" : "1389c1b4-78a1-4e75-b3f1-b2c7b50a42f8",
    "prId" : 22569,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22569#pullrequestreview-151625338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59dd1d4d-323c-40aa-95c0-eddf8220094e",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Can you add a `See Also` section with `Series.str.slice_replace` and `Series.str.get`? Or the methods that make more sense to you.",
        "createdAt" : "2018-09-02T15:56:36Z",
        "updatedAt" : "2018-10-03T21:27:18Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "d49a2e7dc2cd257a3e16055d313c60dff61b2fd9",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1460,1464 @@        Equivalent to `Series.str.slice(start=i, stop=i+1)` with `i`\n        being the position.\n\n    Examples\n    --------"
  },
  {
    "id" : "3c765d1c-dbeb-4018-b60d-fe8e8ed0eab3",
    "prId" : 22569,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22569#pullrequestreview-151625338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "624f0775-d777-4f29-98ec-0e7b403116a3",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Not sure if it'd be better of worse, but what do you think about using both `start` and `stop` together? May be it's just me, but I feel like users could mistakenly thing that only one of the parameters can be provided at a time. Probably you'll need longer strings for the examples.",
        "createdAt" : "2018-09-02T15:59:28Z",
        "updatedAt" : "2018-10-03T21:27:18Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "d49a2e7dc2cd257a3e16055d313c60dff61b2fd9",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +1476,1480 @@    dtype: object\n\n    >>> s.str.slice(stop=2)\n    0    ko\n    1    fo"
  },
  {
    "id" : "e56af0e6-3bd2-4209-82af-24aac1f0362c",
    "prId" : 22569,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22569#pullrequestreview-160212261",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7ee643b-dd19-4def-b1f1-96975f0a7e91",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "An empty line is needed between the explanation and the code line starting with `>>>`",
        "createdAt" : "2018-10-01T09:18:28Z",
        "updatedAt" : "2018-10-03T21:27:18Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "d49a2e7dc2cd257a3e16055d313c60dff61b2fd9",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +1496,1500 @@    Equivalent behaviour to:\n\n    >>> s.str[0:5:3]\n    0    kl\n    1     f"
  },
  {
    "id" : "2bdabf28-f96b-4c31-a230-e41fd55df7a3",
    "prId" : 22570,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22570#pullrequestreview-152055208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "045bbb82-b008-48e6-a5cf-75583cf58f0a",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think in this case we could have a extended summary, providing a bit more information on what pad means, and when it can be useful.",
        "createdAt" : "2018-09-04T13:13:43Z",
        "updatedAt" : "2018-09-25T16:46:23Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "c78531116c15e35130178b87a19869f67d8c5e1d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1316,1320 @@    \"\"\"\n    Pad strings in the Series/Index up to width.\n\n    Parameters\n    ----------"
  },
  {
    "id" : "05baebde-68d7-4287-80ad-798ef1341349",
    "prId" : 22571,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22571#pullrequestreview-151882469",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60d4fe01-e842-4548-a62a-8baf95ef933c",
        "parentId" : null,
        "authorId" : "95fbcc81-e4b3-4f9b-b55d-0bf647a46e66",
        "body" : "I don't know that it is necessary, be I do see that elsewhere in our examples the `dtype: object` is included beneath the series printout.",
        "createdAt" : "2018-09-03T23:49:04Z",
        "updatedAt" : "2018-09-03T23:54:03Z",
        "lastEditedBy" : "95fbcc81-e4b3-4f9b-b55d-0bf647a46e66",
        "tags" : [
        ]
      }
    ],
    "commit" : "a252aa75ebef8bfab1cf2f38e0098d101b99c408",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +695,699 @@    0    a\n    1    b\n    2    c\n\n    Single int repeats string in Series"
  },
  {
    "id" : "1cf2dd95-8bf3-470d-9a79-0392456ed356",
    "prId" : 22571,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22571#pullrequestreview-151882469",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2e762fd-aba9-40ff-98fb-6c4726822c5d",
        "parentId" : null,
        "authorId" : "95fbcc81-e4b3-4f9b-b55d-0bf647a46e66",
        "body" : "`sequence of int` might be fine, and maybe 'sequence' is a term that has a clear definition in the pandas community, but I often see `array_like` used in the numpy documentation. Not really recommending anything, just curious is `sequence` is used similarly here, or you were just using to to indicate a list/array/tuple/etc of integers.",
        "createdAt" : "2018-09-03T23:53:14Z",
        "updatedAt" : "2018-09-03T23:54:03Z",
        "lastEditedBy" : "95fbcc81-e4b3-4f9b-b55d-0bf647a46e66",
        "tags" : [
        ]
      }
    ],
    "commit" : "a252aa75ebef8bfab1cf2f38e0098d101b99c408",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +680,684 @@    Parameters\n    ----------\n    repeats : int or sequence of int\n        Same value for all (int) or different value per (sequence).\n"
  },
  {
    "id" : "6f6af531-16a6-4b0b-b44b-5178941f2b3f",
    "prId" : 22725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22725#pullrequestreview-157945575",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13865221-f8fb-4d2c-8e50-d5d86f49d7a2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we do a single sep.join, and just have the branches mask the data as needed",
        "createdAt" : "2018-09-23T16:48:00Z",
        "updatedAt" : "2018-10-12T06:46:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "77be629e-a2ef-45fa-97cf-eb6a8bc9a89e",
        "parentId" : "13865221-f8fb-4d2c-8e50-d5d86f49d7a2",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Done",
        "createdAt" : "2018-09-23T17:15:46Z",
        "updatedAt" : "2018-10-12T06:46:01Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "e58ec9dfa82a459d9b316b678b77d50fc4901e9e",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +2213,2217 @@            elif na_rep is not None and na_mask.any():\n                data = np.where(na_mask, na_rep, data)\n            return sep.join(data)\n\n        try:"
  },
  {
    "id" : "bf99d00a-247e-44e8-9d9f-97e60475b8fd",
    "prId" : 22725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22725#pullrequestreview-157945575",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ed38ca1-4905-4961-89c6-85612a96c53a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "comment on these cases",
        "createdAt" : "2018-09-23T16:49:18Z",
        "updatedAt" : "2018-10-12T06:46:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "953ad7e5-72f3-49ba-9a78-b704d5fc9325",
        "parentId" : "4ed38ca1-4905-4961-89c6-85612a96c53a",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Added comments",
        "createdAt" : "2018-09-23T17:16:01Z",
        "updatedAt" : "2018-10-12T06:46:01Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "e58ec9dfa82a459d9b316b678b77d50fc4901e9e",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +2256,2260 @@        union_mask = np.logical_or.reduce(na_masks, axis=0)\n\n        if na_rep is None and union_mask.any():\n            # no na_rep means NaNs for all rows where any column has a NaN\n            # only necessary if there are actually any NaNs"
  },
  {
    "id" : "d28ea06d-62ed-4df3-8dd2-36d5572381ce",
    "prId" : 22725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22725#pullrequestreview-162558817",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b51393b-805e-4fbc-a3f3-754663c7629c",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "What is with this documented limitation? Believe in master that `NaN` is valid and returns `NaN` when passed in",
        "createdAt" : "2018-10-08T04:04:46Z",
        "updatedAt" : "2018-10-12T06:46:01Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "4f201530-81dd-4986-a233-d2c498dfa29b",
        "parentId" : "5b51393b-805e-4fbc-a3f3-754663c7629c",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "@WillAyd \r\nthe new helper function `cat_core` has nothing to do with the existing (essentially fully-fledged up to index-handling) `str_cat`. It's an internal function to avoid lots of copied code, and (as it just wraps `np.sum`) is not nan-safe for string values.",
        "createdAt" : "2018-10-08T05:41:18Z",
        "updatedAt" : "2018-10-12T06:46:01Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "f08086e6-2b60-428f-af75-ef3d160b28f1",
        "parentId" : "5b51393b-805e-4fbc-a3f3-754663c7629c",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "@WillAyd \r\nDoes that answer your question? what would you like to see for this docstring?",
        "createdAt" : "2018-10-08T16:55:43Z",
        "updatedAt" : "2018-10-12T06:46:01Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "e58ec9dfa82a459d9b316b678b77d50fc4901e9e",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +46,50 @@    list_of_columns : list of numpy arrays\n        List of arrays to be concatenated with sep;\n        these arrays may not contain NaNs!\n    sep : string\n        The separator string for concatenating the columns"
  },
  {
    "id" : "14e690e4-7959-42c8-93b4-37cf87219307",
    "prId" : 22725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22725#pullrequestreview-162723228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "954fc032-92be-43a4-b2f0-da2ce09386f0",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Not anything you need to change in this PR but if we just overwrite `None` here it would probably make more sense to change the default function signature to simply be `''`",
        "createdAt" : "2018-10-08T23:41:09Z",
        "updatedAt" : "2018-10-12T06:46:01Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "5a6e1d0c-297c-433e-a61d-ea8cf3a67a81",
        "parentId" : "954fc032-92be-43a4-b2f0-da2ce09386f0",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Agreed - thought about that as well, but didn't know if that's considered an API change.",
        "createdAt" : "2018-10-09T05:49:01Z",
        "updatedAt" : "2018-10-12T06:46:01Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "e58ec9dfa82a459d9b316b678b77d50fc4901e9e",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +2197,2201 @@        if isinstance(others, compat.string_types):\n            raise ValueError(\"Did you mean to supply a `sep` keyword?\")\n        if sep is None:\n            sep = ''\n"
  },
  {
    "id" : "2a4ba170-7e8b-446f-a1f5-4a8c174f991b",
    "prId" : 22725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22725#pullrequestreview-162674732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2e0ce0b-206e-4f16-b65b-f775665b57f3",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Assuming the index is aligned here can we alternately just concat the columns together and call `ensure_object` on the entire frame instead of using a list comprehension?",
        "createdAt" : "2018-10-08T23:47:54Z",
        "updatedAt" : "2018-10-12T06:46:01Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e58ec9dfa82a459d9b316b678b77d50fc4901e9e",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +2252,2256 @@            others = [others[x] for x in others]  # again list of Series\n\n        all_cols = [ensure_object(x) for x in [data] + others]\n        na_masks = np.array([isna(x) for x in all_cols])\n        union_mask = np.logical_or.reduce(na_masks, axis=0)"
  },
  {
    "id" : "5061f27d-9b15-4a83-8f3a-660e89ba2880",
    "prId" : 22725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22725#pullrequestreview-162674732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0230673-51e7-4c8b-8057-3b512d633f8a",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Similar comment above but should be able to use `pd.isnull` instead of a list comp with `isna`",
        "createdAt" : "2018-10-08T23:48:19Z",
        "updatedAt" : "2018-10-12T06:46:01Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e58ec9dfa82a459d9b316b678b77d50fc4901e9e",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +2253,2257 @@\n        all_cols = [ensure_object(x) for x in [data] + others]\n        na_masks = np.array([isna(x) for x in all_cols])\n        union_mask = np.logical_or.reduce(na_masks, axis=0)\n"
  },
  {
    "id" : "a81e09a1-7e74-4ad2-aebd-acdc4e9daba0",
    "prId" : 22725,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22725#pullrequestreview-162674732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12cd00a1-3cce-4b29-8ae9-c372f2386277",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Readability nit but can you change `nm` to `na_mask`? Makes it clearer what is going on (on initial glance misread `nm` to be something `name` related)",
        "createdAt" : "2018-10-08T23:52:08Z",
        "updatedAt" : "2018-10-12T06:46:01Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e58ec9dfa82a459d9b316b678b77d50fc4901e9e",
    "line" : 198,
    "diffHunk" : "@@ -1,1 +2267,2271 @@        elif na_rep is not None and union_mask.any():\n            # fill NaNs with na_rep in case there are actually any NaNs\n            all_cols = [np.where(nm, na_rep, col)\n                        for nm, col in zip(na_masks, all_cols)]\n            result = cat_core(all_cols, sep)"
  },
  {
    "id" : "fd56a796-9c26-4604-93bc-1bc7c74864b6",
    "prId" : 23167,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23167#pullrequestreview-165468417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f407f86d-d24f-4967-bd73-ccaca320323a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use ``ABCIndex`` (which is distinct from ``ABCIndexClass``, this specifically will not include any other index types as well. Though may need to allow ``CategoricalIndex`` that is inferred to be of the correct type as well.",
        "createdAt" : "2018-10-17T01:21:34Z",
        "updatedAt" : "2019-05-30T15:17:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4288370f-b50b-4180-8b7b-cefe586f0381",
        "parentId" : "f407f86d-d24f-4967-bd73-ccaca320323a",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "I don't understand - this check is only for `MultiIndex` (the diff wrongly suggests that it replaces the `Series`-branch)",
        "createdAt" : "2018-10-17T06:16:54Z",
        "updatedAt" : "2019-05-30T15:17:45Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f62e344f49dfe5df95a4d7caf26585e387de5386",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +1884,1888 @@        dtype : inferred dtype of data\n        \"\"\"\n        if isinstance(data, ABCMultiIndex):\n            raise AttributeError('Can only use .str accessor with Index, '\n                                 'not MultiIndex')"
  },
  {
    "id" : "238df486-0b6f-4c9e-984f-751a0ef730b8",
    "prId" : 23167,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23167#pullrequestreview-173773159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94414b3f-89de-441b-aad9-ada0b0552850",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "I thought about this a bit, and think that this is the cleanest solution - allow construction of the `StringMethods` object for the types that *may* be needed in a method (can't see an easy way around this without adding arguments to `.str` itself), and then further restrict on a per-method level.",
        "createdAt" : "2018-11-07T00:07:04Z",
        "updatedAt" : "2019-05-30T15:17:45Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "fe4444e9-5bbd-45e3-866b-f55fc4c4712d",
        "parentId" : "94414b3f-89de-441b-aad9-ada0b0552850",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so maybe a better way to do this (though slightly more breaking). is to have a ``.bytes`` accessor instead.",
        "createdAt" : "2018-11-11T17:17:48Z",
        "updatedAt" : "2019-05-30T15:17:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "208b9150-8f6b-4b75-b9e8-ffdd8e2d0261",
        "parentId" : "94414b3f-89de-441b-aad9-ada0b0552850",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "A `.bytes` (or `.byte`) accessor would be something that definitely should be done IMO to preserve the functionality for `bytes`, but that just means removing `'bytes'` from the allowed-types in the constructor. The decorator would still be necessary to forbid types like `'mixed'` or `'mixed-integer'` where necessary (e.g. `.str.cat`)",
        "createdAt" : "2018-11-12T07:23:01Z",
        "updatedAt" : "2019-05-30T15:17:45Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f62e344f49dfe5df95a4d7caf26585e387de5386",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1726,1730 @@    Decorator to forbid specific types for a method of StringMethods.\n\n    For calling `.str.{method}` on a Series or Index, it is necessary to first\n    initialize the :class:`StringMethods` object, and then call the method.\n    However, different methods allow different input types, and so this can not"
  },
  {
    "id" : "9254257a-d1f6-4e91-8eb6-68ae5c15cf31",
    "prId" : 23167,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23167#pullrequestreview-172762244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fe770f8-ac16-44eb-aa8d-b74ce106c617",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "These names were wrong (just showing as `<lambda>`), and were causing test fails, because the error message of `forbid_nonstring_types` is method-specific.",
        "createdAt" : "2018-11-07T00:07:54Z",
        "updatedAt" : "2019-05-30T15:17:45Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "1848b44f-78e2-4a8e-b940-afd844314d85",
        "parentId" : "8fe770f8-ac16-44eb-aa8d-b74ce106c617",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Now added an issue reference: #23551. I thought I could split this off relatively easily, but then I'd have to rebuild the whole parametrized method-fixture just for checking the names.",
        "createdAt" : "2018-11-08T00:29:06Z",
        "updatedAt" : "2019-05-30T15:17:45Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f62e344f49dfe5df95a4d7caf26585e387de5386",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +1793,1797 @@        return self._wrap_result(result)\n\n    wrapper.__name__ = f.__name__ if name is None else name\n    if docstring is not None:\n        wrapper.__doc__ = docstring"
  },
  {
    "id" : "2d6451bc-c14d-4346-b156-8e357b50a3fb",
    "prId" : 23167,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23167#pullrequestreview-172762244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "110cc73b-fe2d-4934-b088-ca69d421fe6f",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Same thing with the names here (these were shown as `str_count` instead of `count`, for example)",
        "createdAt" : "2018-11-07T00:08:28Z",
        "updatedAt" : "2019-05-30T15:17:45Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "8e7f1c32-6a69-4959-8b25-07e5095d9c22",
        "parentId" : "110cc73b-fe2d-4934-b088-ca69d421fe6f",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "As above. xref #23551; hard to split off form this PR",
        "createdAt" : "2018-11-08T00:29:41Z",
        "updatedAt" : "2019-05-30T15:17:45Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f62e344f49dfe5df95a4d7caf26585e387de5386",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +1821,1825 @@    wrapper = wrapper3 if na else wrapper2 if flags else wrapper1\n\n    wrapper.__name__ = f.__name__ if name is None else name\n    if f.__doc__:\n        wrapper.__doc__ = f.__doc__"
  },
  {
    "id" : "b02be308-a04f-487b-91de-de490b69f8f8",
    "prId" : 23167,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23167#pullrequestreview-172292346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a92dcfe-29cd-4c8f-91a0-fd3ef4c7c4cb",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Had to increase the stacklevel due to adding the wrapper",
        "createdAt" : "2018-11-07T00:08:53Z",
        "updatedAt" : "2019-05-30T15:17:45Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f62e344f49dfe5df95a4d7caf26585e387de5386",
    "line" : 217,
    "diffHunk" : "@@ -1,1 +2103,2107 @@                                  'np.ndarray WITHIN another list-like are '\n                                  'deprecated and will be removed in a future '\n                                  'version.', FutureWarning, stacklevel=4)\n                return (los, join_warn)\n            elif all(not is_list_like(x) for x in others):"
  },
  {
    "id" : "3303caab-64f7-46c3-8623-f4613cd9e07d",
    "prId" : 23167,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23167#pullrequestreview-172292346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "015f0dec-c607-44d6-9604-e01955b1c226",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "I'm thinking that `len` should still be allowed for `bytes` to preserve a sort of minimal functionality compared to what is working as of v.0.23.4",
        "createdAt" : "2018-11-07T00:10:09Z",
        "updatedAt" : "2019-05-30T15:17:45Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f62e344f49dfe5df95a4d7caf26585e387de5386",
    "line" : 456,
    "diffHunk" : "@@ -1,1 +3018,3022 @@    \"\"\")\n    len = _noarg_wrapper(len, docstring=_shared_docs['len'],\n                         forbidden_types=None, dtype=int)\n\n    _shared_docs['casemethods'] = (\"\"\""
  },
  {
    "id" : "0c256f3b-657a-4192-b66a-0549238768ae",
    "prId" : 23167,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23167#pullrequestreview-172762244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5665a29c-6760-4496-9002-0f1653067ad7",
        "parentId" : null,
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "Previously, these methods would end up with the name `'str_count'`, instead of `'count'`, for example. xref #23551",
        "createdAt" : "2018-11-08T00:31:29Z",
        "updatedAt" : "2019-05-30T15:17:45Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f62e344f49dfe5df95a4d7caf26585e387de5386",
    "line" : 400,
    "diffHunk" : "@@ -1,1 +2858,2862 @@    startswith = _pat_wrapper(str_startswith, na=True, name='startswith')\n    endswith = _pat_wrapper(str_endswith, na=True, name='endswith')\n    findall = _pat_wrapper(str_findall, flags=True, name='findall')\n\n    @copy(str_extract)"
  },
  {
    "id" : "19395dbc-075d-4241-970e-2ce09ec78ccd",
    "prId" : 23167,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23167#pullrequestreview-219296539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1753383b-44b8-4fed-9a74-433edff19fce",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "would it make sense rather than have a forbid decorator have an include decorator that accepts string, unicode? (e.g. wouldn't this happen to accept object dtypes that are non-strings but not in the included that you have written)?",
        "createdAt" : "2019-03-10T16:57:53Z",
        "updatedAt" : "2019-05-30T15:17:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "61465d14-7b21-4c1f-ada9-29e4d63e8c0f",
        "parentId" : "1753383b-44b8-4fed-9a74-433edff19fce",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "> @jreback: e.g. wouldn't this happen to accept object dtypes that are non-strings but not in the included that you have written\r\n\r\nYou're right, but this would be a very hard breaking change that I do not want to author like that. I responded similarly [here](https://github.com/pandas-dev/pandas/pull/23167#discussion_r225793121):\r\n___________________________________\r\n\r\nOk in principle, but it's definitely necessary to allow `'mixed'`:\r\n```\r\n>>> lib.infer_dtype(pd.Series(['a', np.nan]))\r\n'mixed'\r\n```\r\n\r\nDisallowing `'mixed-integer'` would also break existing code, but I mentioned in the OP:\r\n> Finally, it would be possible to partially close #13877 by also excluding `'mixed-integer'` from the allowed inferred types.\r\n\r\nCheck out the example in #13877 - currently the `.str`-methods are generally permissive about just returning `NaN` if they can't compute individual values. Arguably, that's also the most desirable behaviour for things like `.str.startswith`. Could introduce an `'errors'`-kwarg where necessary, but all of that needs to happen on method level - the `.str`-constructor must allow these to pass.\r\n",
        "createdAt" : "2019-03-27T07:17:06Z",
        "updatedAt" : "2019-05-30T15:17:45Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      },
      {
        "id" : "a56343a4-5310-405b-8e08-9d333fc6751f",
        "parentId" : "1753383b-44b8-4fed-9a74-433edff19fce",
        "authorId" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "body" : "You also mentioned somewhere further up that the removal of the capabilities for bytes means that we should add a `.bytes` accessor (which was why I didn't try to push this PR through before 0.24).",
        "createdAt" : "2019-03-27T07:17:45Z",
        "updatedAt" : "2019-05-30T15:17:45Z",
        "lastEditedBy" : "5f34c5f9-b309-4032-bd6e-1f14b864aae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f62e344f49dfe5df95a4d7caf26585e387de5386",
    "line" : 223,
    "diffHunk" : "@@ -1,1 +2109,2113 @@        raise TypeError(err_msg)\n\n    @forbid_nonstring_types(['bytes', 'mixed', 'mixed-integer'])\n    def cat(self, others=None, sep=None, na_rep=None, join=None):\n        \"\"\""
  },
  {
    "id" : "fe9db0cc-b56d-49a7-9cb5-894121f7dbee",
    "prId" : 23167,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/23167#pullrequestreview-238142154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "470b640c-6b0f-4f1a-93dc-f75950bf960e",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string here (mainly that it returns the string inferred_dtype).\r\n\r\nAlso happy to have annotations where makes sense.",
        "createdAt" : "2019-05-16T01:31:31Z",
        "updatedAt" : "2019-05-30T15:17:45Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "f62e344f49dfe5df95a4d7caf26585e387de5386",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +1884,1888 @@        dtype : inferred dtype of data\n        \"\"\"\n        if isinstance(data, ABCMultiIndex):\n            raise AttributeError('Can only use .str accessor with Index, '\n                                 'not MultiIndex')"
  }
]