[
  {
    "id" : "d78cc099-690d-4825-bac7-94b01c5a53d1",
    "prId" : 1084,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "587d744e-d05a-4ca7-82c3-34dfb7062bad",
        "parentId" : null,
        "authorId" : "55206695-bb42-4d72-886f-f5370a77363e",
        "body" : "If I choose to continue support for Python 2.5 will need to work around next being >= 2.6\n",
        "createdAt" : "2012-04-24T00:29:17Z",
        "updatedAt" : "2012-04-25T15:55:20Z",
        "lastEditedBy" : "55206695-bb42-4d72-886f-f5370a77363e",
        "tags" : [
        ]
      },
      {
        "id" : "79b4d4ad-cdec-4ee6-afd2-c1f634d60c17",
        "parentId" : "587d744e-d05a-4ca7-82c3-34dfb7062bad",
        "authorId" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "body" : "Oh yes. Do you want me to do that in this PR? It should be easy enough.\n",
        "createdAt" : "2012-04-24T09:56:20Z",
        "updatedAt" : "2012-04-25T15:55:20Z",
        "lastEditedBy" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "tags" : [
        ]
      },
      {
        "id" : "7639e2ca-502f-4d58-aed3-eeffb92f7b73",
        "parentId" : "587d744e-d05a-4ca7-82c3-34dfb7062bad",
        "authorId" : "55206695-bb42-4d72-886f-f5370a77363e",
        "body" : "Be my guest\n",
        "createdAt" : "2012-04-25T02:55:14Z",
        "updatedAt" : "2012-04-25T15:55:20Z",
        "lastEditedBy" : "55206695-bb42-4d72-886f-f5370a77363e",
        "tags" : [
        ]
      },
      {
        "id" : "c3efd8f1-da16-4e00-98c4-b2b60b8df287",
        "parentId" : "587d744e-d05a-4ca7-82c3-34dfb7062bad",
        "authorId" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "body" : "Done, although I don't have 2.5 handy to test.\n",
        "createdAt" : "2012-04-25T15:55:46Z",
        "updatedAt" : "2012-04-25T15:55:46Z",
        "lastEditedBy" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e1838d508c01f4f4507f3888509e05ab22d5756",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +527,531 @@    seq_it = iter(seq)\n    seq_it_next = iter(seq)\n    _ = next(seq_it_next)\n\n    return itertools.izip(seq_it, seq_it_next)"
  },
  {
    "id" : "5385873e-2418-4074-a829-be6c02f7a249",
    "prId" : 4684,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20e8c2b0-8cbc-4110-ad44-0d5f8e25fe77",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "this is so insane :smile: \n",
        "createdAt" : "2013-09-08T01:47:18Z",
        "updatedAt" : "2013-09-08T16:56:22Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "7845a207-9a60-484c-9c7e-8e5f5b846118",
        "parentId" : "20e8c2b0-8cbc-4110-ad44-0d5f8e25fe77",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "Just a suggestion - it might be easier to read if you separated the under 1.7 handling, like this: (I'm pretty sure this does the same thing as the current function).  To me, this also makes it easier to see that under 1.7 it returns a timedelta and above 1.7 it returns a timedelta64 type.\n\n``` python\ndef _coerce_scalar_to_timedelta_type(r):\n    # kludgy here until we have a timedelta scalar\n    # handle the numpy < 1.7 case\n\n    if is_integer(r):\n        r = timedelta(microseconds=r/1000)\n\n    if _np_version_under1p7:\n        if not isinstance(r, timedelta):\n            raise AssertionError(\"Invalid type for timedelta scalar: %s\" % type(r))\n        return r\n\n    if isinstance(r, timedelta):\n        r = np.timedelta64(r)\n    elif not isinstance(r, np.timedelta64):\n        raise AssertionError(\"Invalid type for timedelta scalar: %s\" % type(r))\n    return r.astype('timedelta64[ns]')\n\n```\n",
        "createdAt" : "2013-09-08T02:28:07Z",
        "updatedAt" : "2013-09-08T16:56:22Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3f2444b24af412c51d79525dbc67c9b29ede0ad",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +706,710 @@\n\ndef _coerce_scalar_to_timedelta_type(r):\n    # kludgy here until we have a timedelta scalar\n    # handle the numpy < 1.7 case"
  },
  {
    "id" : "6c6e998a-18d8-4084-86b9-80f8703c24f1",
    "prId" : 5283,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "154e4918-4d13-41f6-889e-5c9b48fbaf99",
        "parentId" : null,
        "authorId" : "49cb7e4b-934a-4329-961e-4089057c4185",
        "body" : "`NDFrame.equals` is now implemented (in internals.py) without using `array_equivalent`. Should `array_equivalent` be moved to `pandas/util/testing.py`?\n",
        "createdAt" : "2014-01-21T15:27:18Z",
        "updatedAt" : "2014-01-24T21:01:32Z",
        "lastEditedBy" : "49cb7e4b-934a-4329-961e-4089057c4185",
        "tags" : [
        ]
      },
      {
        "id" : "2a1e22d9-c98c-4643-a635-f9d1f25cd66b",
        "parentId" : "154e4918-4d13-41f6-889e-5c9b48fbaf99",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think the goal was to use this (eventually?) in Index comparisons as well IIRC. (I believe their were some perf issues in that regards to not doing that now?) In any event let's defer using it in index for now. @jtratner ?\n\n`array_equivalent` is defacto `np.array_equal` but handles nan comparisons,  yes?\n",
        "createdAt" : "2014-01-21T19:19:08Z",
        "updatedAt" : "2014-01-24T21:01:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f26fbc915e2759e0bcadaa93cb00610297e6a7e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +278,282 @@\n\ndef array_equivalent(left, right):\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs in"
  },
  {
    "id" : "fc432fd3-0072-4253-8448-103e3221ff0d",
    "prId" : 7434,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c91edfe6-c76a-4bd1-8dc0-bb484ce01f1a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "never knew that was a method like this!\n",
        "createdAt" : "2014-06-27T19:54:24Z",
        "updatedAt" : "2014-07-07T16:13:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cb452712-4e0b-4123-94ae-d5f7947736af",
        "parentId" : "c91edfe6-c76a-4bd1-8dc0-bb484ce01f1a",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "yeah only thing is that the second tuple element is `num` which is used only internall in numpy AFAICT, it seems to always be 1 when used in python but i _think_ it's used to do conversions between different units.\n",
        "createdAt" : "2014-07-02T15:44:21Z",
        "updatedAt" : "2014-07-07T16:13:42Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "90a09964-e8ca-4cc6-9c8d-b1e73d49734f",
        "parentId" : "c91edfe6-c76a-4bd1-8dc0-bb484ce01f1a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can also just test the kind as M right? (\n",
        "createdAt" : "2014-07-02T15:46:50Z",
        "updatedAt" : "2014-07-07T16:13:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "41af480a-e994-44e5-8a7e-4dc5e5c41bd5",
        "parentId" : "c91edfe6-c76a-4bd1-8dc0-bb484ce01f1a",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "no i'm checking that the unit is either `generic` (this occurs when a user passes in `np.datetime64`; `'datetime64[generic]'` shouldn't really be passed in by a user, tho it will work) or `ns`, i _could_ write something simple that parses out the unit for us, but not sure that's necessary\n",
        "createdAt" : "2014-07-02T15:50:41Z",
        "updatedAt" : "2014-07-07T16:13:42Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fc5ae79ed741d1f17e70301fd7d0d6fcb7f8475",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1606,1610 @@def _validate_date_like_dtype(dtype):\n    try:\n        typ = np.datetime_data(dtype)[0]\n    except ValueError as e:\n        raise TypeError('%s' % e)"
  },
  {
    "id" : "c0841c6b-0e5f-4bbb-a806-6717820e6939",
    "prId" : 7941,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7e0377d-c8e7-4c64-8123-58b34e3e6dd9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is good\n",
        "createdAt" : "2014-08-18T15:23:38Z",
        "updatedAt" : "2014-08-19T14:52:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "644fab600f8b186be9e4d71106badd9f9a611186",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +400,404 @@    # Object arrays can contain None, NaN and NaT.\n    if issubclass(left.dtype.type, np.object_):\n\n        if not strict_nan:\n            # pd.isnull considers NaN and None to be equivalent."
  }
]