[
  {
    "id" : "d78cc099-690d-4825-bac7-94b01c5a53d1",
    "prId" : 1084,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "587d744e-d05a-4ca7-82c3-34dfb7062bad",
        "parentId" : null,
        "authorId" : "55206695-bb42-4d72-886f-f5370a77363e",
        "body" : "If I choose to continue support for Python 2.5 will need to work around next being >= 2.6\n",
        "createdAt" : "2012-04-24T00:29:17Z",
        "updatedAt" : "2012-04-25T15:55:20Z",
        "lastEditedBy" : "55206695-bb42-4d72-886f-f5370a77363e",
        "tags" : [
        ]
      },
      {
        "id" : "79b4d4ad-cdec-4ee6-afd2-c1f634d60c17",
        "parentId" : "587d744e-d05a-4ca7-82c3-34dfb7062bad",
        "authorId" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "body" : "Oh yes. Do you want me to do that in this PR? It should be easy enough.\n",
        "createdAt" : "2012-04-24T09:56:20Z",
        "updatedAt" : "2012-04-25T15:55:20Z",
        "lastEditedBy" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "tags" : [
        ]
      },
      {
        "id" : "7639e2ca-502f-4d58-aed3-eeffb92f7b73",
        "parentId" : "587d744e-d05a-4ca7-82c3-34dfb7062bad",
        "authorId" : "55206695-bb42-4d72-886f-f5370a77363e",
        "body" : "Be my guest\n",
        "createdAt" : "2012-04-25T02:55:14Z",
        "updatedAt" : "2012-04-25T15:55:20Z",
        "lastEditedBy" : "55206695-bb42-4d72-886f-f5370a77363e",
        "tags" : [
        ]
      },
      {
        "id" : "c3efd8f1-da16-4e00-98c4-b2b60b8df287",
        "parentId" : "587d744e-d05a-4ca7-82c3-34dfb7062bad",
        "authorId" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "body" : "Done, although I don't have 2.5 handy to test.\n",
        "createdAt" : "2012-04-25T15:55:46Z",
        "updatedAt" : "2012-04-25T15:55:46Z",
        "lastEditedBy" : "c1e22f62-b6a4-49af-9e65-1ac7ae69e3bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e1838d508c01f4f4507f3888509e05ab22d5756",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +527,531 @@    seq_it = iter(seq)\n    seq_it_next = iter(seq)\n    _ = next(seq_it_next)\n\n    return itertools.izip(seq_it, seq_it_next)"
  },
  {
    "id" : "5385873e-2418-4074-a829-be6c02f7a249",
    "prId" : 4684,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20e8c2b0-8cbc-4110-ad44-0d5f8e25fe77",
        "parentId" : null,
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "this is so insane :smile: \n",
        "createdAt" : "2013-09-08T01:47:18Z",
        "updatedAt" : "2013-09-08T16:56:22Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "7845a207-9a60-484c-9c7e-8e5f5b846118",
        "parentId" : "20e8c2b0-8cbc-4110-ad44-0d5f8e25fe77",
        "authorId" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "body" : "Just a suggestion - it might be easier to read if you separated the under 1.7 handling, like this: (I'm pretty sure this does the same thing as the current function).  To me, this also makes it easier to see that under 1.7 it returns a timedelta and above 1.7 it returns a timedelta64 type.\n\n``` python\ndef _coerce_scalar_to_timedelta_type(r):\n    # kludgy here until we have a timedelta scalar\n    # handle the numpy < 1.7 case\n\n    if is_integer(r):\n        r = timedelta(microseconds=r/1000)\n\n    if _np_version_under1p7:\n        if not isinstance(r, timedelta):\n            raise AssertionError(\"Invalid type for timedelta scalar: %s\" % type(r))\n        return r\n\n    if isinstance(r, timedelta):\n        r = np.timedelta64(r)\n    elif not isinstance(r, np.timedelta64):\n        raise AssertionError(\"Invalid type for timedelta scalar: %s\" % type(r))\n    return r.astype('timedelta64[ns]')\n\n```\n",
        "createdAt" : "2013-09-08T02:28:07Z",
        "updatedAt" : "2013-09-08T16:56:22Z",
        "lastEditedBy" : "6f890fbc-4bdf-4397-95eb-a8225d4af04f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3f2444b24af412c51d79525dbc67c9b29ede0ad",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +706,710 @@\n\ndef _coerce_scalar_to_timedelta_type(r):\n    # kludgy here until we have a timedelta scalar\n    # handle the numpy < 1.7 case"
  },
  {
    "id" : "6c6e998a-18d8-4084-86b9-80f8703c24f1",
    "prId" : 5283,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "154e4918-4d13-41f6-889e-5c9b48fbaf99",
        "parentId" : null,
        "authorId" : "49cb7e4b-934a-4329-961e-4089057c4185",
        "body" : "`NDFrame.equals` is now implemented (in internals.py) without using `array_equivalent`. Should `array_equivalent` be moved to `pandas/util/testing.py`?\n",
        "createdAt" : "2014-01-21T15:27:18Z",
        "updatedAt" : "2014-01-24T21:01:32Z",
        "lastEditedBy" : "49cb7e4b-934a-4329-961e-4089057c4185",
        "tags" : [
        ]
      },
      {
        "id" : "2a1e22d9-c98c-4643-a635-f9d1f25cd66b",
        "parentId" : "154e4918-4d13-41f6-889e-5c9b48fbaf99",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think the goal was to use this (eventually?) in Index comparisons as well IIRC. (I believe their were some perf issues in that regards to not doing that now?) In any event let's defer using it in index for now. @jtratner ?\n\n`array_equivalent` is defacto `np.array_equal` but handles nan comparisons,  yes?\n",
        "createdAt" : "2014-01-21T19:19:08Z",
        "updatedAt" : "2014-01-24T21:01:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f26fbc915e2759e0bcadaa93cb00610297e6a7e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +278,282 @@\n\ndef array_equivalent(left, right):\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs in"
  },
  {
    "id" : "fc432fd3-0072-4253-8448-103e3221ff0d",
    "prId" : 7434,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c91edfe6-c76a-4bd1-8dc0-bb484ce01f1a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "never knew that was a method like this!\n",
        "createdAt" : "2014-06-27T19:54:24Z",
        "updatedAt" : "2014-07-07T16:13:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cb452712-4e0b-4123-94ae-d5f7947736af",
        "parentId" : "c91edfe6-c76a-4bd1-8dc0-bb484ce01f1a",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "yeah only thing is that the second tuple element is `num` which is used only internall in numpy AFAICT, it seems to always be 1 when used in python but i _think_ it's used to do conversions between different units.\n",
        "createdAt" : "2014-07-02T15:44:21Z",
        "updatedAt" : "2014-07-07T16:13:42Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      },
      {
        "id" : "90a09964-e8ca-4cc6-9c8d-b1e73d49734f",
        "parentId" : "c91edfe6-c76a-4bd1-8dc0-bb484ce01f1a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you can also just test the kind as M right? (\n",
        "createdAt" : "2014-07-02T15:46:50Z",
        "updatedAt" : "2014-07-07T16:13:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "41af480a-e994-44e5-8a7e-4dc5e5c41bd5",
        "parentId" : "c91edfe6-c76a-4bd1-8dc0-bb484ce01f1a",
        "authorId" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "body" : "no i'm checking that the unit is either `generic` (this occurs when a user passes in `np.datetime64`; `'datetime64[generic]'` shouldn't really be passed in by a user, tho it will work) or `ns`, i _could_ write something simple that parses out the unit for us, but not sure that's necessary\n",
        "createdAt" : "2014-07-02T15:50:41Z",
        "updatedAt" : "2014-07-07T16:13:42Z",
        "lastEditedBy" : "5c239b83-5a68-467b-a3f8-113a0fc494dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fc5ae79ed741d1f17e70301fd7d0d6fcb7f8475",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1606,1610 @@def _validate_date_like_dtype(dtype):\n    try:\n        typ = np.datetime_data(dtype)[0]\n    except ValueError as e:\n        raise TypeError('%s' % e)"
  },
  {
    "id" : "c0841c6b-0e5f-4bbb-a806-6717820e6939",
    "prId" : 7941,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7e0377d-c8e7-4c64-8123-58b34e3e6dd9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is good\n",
        "createdAt" : "2014-08-18T15:23:38Z",
        "updatedAt" : "2014-08-19T14:52:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "644fab600f8b186be9e4d71106badd9f9a611186",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +400,404 @@    # Object arrays can contain None, NaN and NaT.\n    if issubclass(left.dtype.type, np.object_):\n\n        if not strict_nan:\n            # pd.isnull considers NaN and None to be equivalent."
  },
  {
    "id" : "f6f837a8-d038-4b25-9147-7728b2c1cb95",
    "prId" : 8512,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91527aa4-9e69-4dac-bb27-adf5891fd048",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "here, I think you need to do:\n\n`lib.array_equivalent_object(_values_from_object(left).ravel(),_values_from_object(right).ravel())`\n",
        "createdAt" : "2014-10-09T19:06:04Z",
        "updatedAt" : "2014-10-09T23:44:51Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a662c6ea4700420c4af0d6b3992f57d172ee9e4",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +417,421 @@            # pd.isnull considers NaN and None to be equivalent.\n            return lib.array_equivalent_object(left.ravel(), right.ravel())\n        \n        for left_value, right_value in zip(left, right):\n            if left_value is tslib.NaT and right_value is not tslib.NaT:"
  },
  {
    "id" : "8d48b8f7-7077-4325-8b98-2473515d4747",
    "prId" : 9258,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02ffb080-6955-4f9e-b26a-aaafda4eac98",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this seems kind of hacky, why don't we just always allow nearest (I know its not quite supported by fillna). Or will you just fix this then?\n",
        "createdAt" : "2015-02-11T22:16:40Z",
        "updatedAt" : "2015-02-18T03:00:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "756333eb-24e0-45ef-8cb2-3cdf492f8859",
        "parentId" : "02ffb080-6955-4f9e-b26a-aaafda4eac98",
        "authorId" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "body" : "yes, when nearest is valid for fillna we should remove this option.\n\nI was considering adding nearest for fillna in this PR but I'd rather save it for another just to minimize the scope here.\n",
        "createdAt" : "2015-02-11T22:27:13Z",
        "updatedAt" : "2015-02-18T03:00:42Z",
        "lastEditedBy" : "40104112-cdcf-4812-8f95-b502b40e346d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1164210248e6be262cfbf08bf899f1d1781c0fc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2683,2687 @@\n\ndef _clean_fill_method(method, allow_nearest=False):\n    if method is None:\n        return None"
  },
  {
    "id" : "da350981-f788-4a5a-a665-2d0d32e290ff",
    "prId" : 9308,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/9308#pullrequestreview-90325326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea459e2d-89e8-4a25-adfa-36bbee8c4b24",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Working on #19322 it looks like the problem would be solved by making this condition include other \"div\" operations.  Was there a specific reason to only include floordiv here?",
        "createdAt" : "2018-01-20T18:32:47Z",
        "updatedAt" : "2018-01-20T18:32:48Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "6b39e43a-eca1-4efd-850c-4633fe917a53",
        "parentId" : "ea459e2d-89e8-4a25-adfa-36bbee8c4b24",
        "authorId" : "552e8c79-6864-4f55-9c44-7067918380f7",
        "body" : "I'm afraid I don't remember why only floordiv is here, but I do tend to comment non-obvious, intentional choices, so I'm guessing it was not intended that only floordiv be here.",
        "createdAt" : "2018-01-21T09:03:00Z",
        "updatedAt" : "2018-01-21T09:03:00Z",
        "lastEditedBy" : "552e8c79-6864-4f55-9c44-7067918380f7",
        "tags" : [
        ]
      }
    ],
    "commit" : "85342ee3b814fdc6e9c6382a1cd6798e91297f17",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +1425,1429 @@                np.putmask(result, negative_inf_mask, -fill)\n\n            if \"floordiv\" in name:  # (PR 9308)\n                nan_mask = ((y == 0) & (x == 0)).ravel()\n                np.putmask(result, nan_mask, np.nan)"
  },
  {
    "id" : "93cac189-3c61-4721-9673-071d059c300b",
    "prId" : 10265,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2368fb61-c691-4e8a-b922-fa125552a7f9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think that `maybe_convert_numeric` should just do this (maybe need to make it an option though if its not necessary all over)\n",
        "createdAt" : "2015-06-23T21:23:36Z",
        "updatedAt" : "2015-07-13T13:24:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "810f8bf5-f7d7-4d42-a36b-e6e61ae3c188",
        "parentId" : "2368fb61-c691-4e8a-b922-fa125552a7f9",
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "The issue here is that if it isn't numeric and coerce=False, it will raise and do nothing, but if it is not numeric but is a timestamp then it will get nan-filled.  This is why this logic is here.\n",
        "createdAt" : "2015-06-24T02:29:20Z",
        "updatedAt" : "2015-07-13T13:24:59Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9d6678ac98c56ac057baa1a7be2e32a8aed5896",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +1946,1950 @@                                                   coerce_numeric=True)\n            # If all NaNs, then do not-alter\n            values = converted if not isnull(converted).all() else values\n            values = values.copy() if copy else values\n        except:"
  },
  {
    "id" : "4a4e61f8-cdd7-4e67-89da-c30cf3d2b060",
    "prId" : 10265,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd3ce8c6-8da3-46f0-b543-4f41f977db0d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "need to handle the `copy` arg here. All of the other conversions copy I think. (need a test for this as well)\n",
        "createdAt" : "2015-07-07T16:19:15Z",
        "updatedAt" : "2015-07-13T13:24:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "122523e2-ea5a-485f-9e83-059fd9376db0",
        "parentId" : "dd3ce8c6-8da3-46f0-b543-4f41f977db0d",
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "This function doesn't have a copy keyword - this is handled by the caller.\n\n```\n_possibly_convert_objects(values,datetime=True,numeric=True,\n                              timedelta=True,coerce=False)\n```\n",
        "createdAt" : "2015-07-08T17:36:03Z",
        "updatedAt" : "2015-07-13T13:24:59Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      },
      {
        "id" : "12680b21-1669-40fd-ae54-5eec72ee4876",
        "parentId" : "dd3ce8c6-8da3-46f0-b543-4f41f977db0d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is a bug. This needs handling either IN `_possibly_convert_objects` or, handle [here](https://github.com/pydata/pandas/blob/master/pandas/core/internals.py#L1458). IOW, fall thru on the if/else, then copy if indicated. Though if some conversion is done then it is a new object. So this needs to be copied is if you don't pass ANY options (and the copy flag is True) OR it is all nan after conversion (and so you don't actually convert anything), e.g. L1944 (below)\n",
        "createdAt" : "2015-07-09T13:43:24Z",
        "updatedAt" : "2015-07-13T13:24:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5c94c819-a611-46c6-8075-a9b78451e94c",
        "parentId" : "dd3ce8c6-8da3-46f0-b543-4f41f977db0d",
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "I think the bug is in `convert` -- it is the last function to see `copy=?` but doesn't do anything with it.\n\nMaybe copy needs to go down a level for this edge case.  I don't really understand what `copy=False` is supposed to do in `convert_objects`.  Is it acting like an `inplace` on a numpy array so that the same DataFrame is returned?\n",
        "createdAt" : "2015-07-09T14:07:10Z",
        "updatedAt" : "2015-07-13T13:24:59Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      },
      {
        "id" : "e09e45c8-b7e1-4a30-b380-5090f4a63294",
        "parentId" : "dd3ce8c6-8da3-46f0-b543-4f41f977db0d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yep could be \n",
        "createdAt" : "2015-07-09T14:09:00Z",
        "updatedAt" : "2015-07-13T13:24:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "70fedc33-c2cc-4b4e-b262-981a67ebf56f",
        "parentId" : "dd3ce8c6-8da3-46f0-b543-4f41f977db0d",
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "Pushed copy one level deeper so I can trap these.\n",
        "createdAt" : "2015-07-09T18:44:17Z",
        "updatedAt" : "2015-07-13T13:24:59Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9d6678ac98c56ac057baa1a7be2e32a8aed5896",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +1912,1916 @@        values = np.array([values], dtype=np.object_)\n    elif not is_object_dtype(values.dtype):\n        # If not object, do not attempt conversion\n        values = values.copy() if copy else values\n        return values"
  },
  {
    "id" : "e85bf226-ec77-4afb-b0c3-981d1a8bc21a",
    "prId" : 10265,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2efce14-d92c-4a18-ba36-3ca38dd23bc9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "nice. I added this to the deprecation issue so can remove this at some point.\n",
        "createdAt" : "2015-07-12T14:38:31Z",
        "updatedAt" : "2015-07-13T13:24:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9d6678ac98c56ac057baa1a7be2e32a8aed5896",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1901,1905 @@        import warnings\n        warnings.warn('Must explicitly pass type for conversion. Defaulting to '\n                      'pre-0.17 behavior where datetime=True, numeric=True, '\n                      'timedelta=True and coerce=False', DeprecationWarning)\n        datetime = numeric = timedelta = True"
  },
  {
    "id" : "ecc18262-dc58-4830-8a62-68ff588c4c92",
    "prId" : 10383,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f5d9288-27e9-4097-925f-b0bc514f24af",
        "parentId" : null,
        "authorId" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "body" : "Should pass `**kwargs`, or  only support `UnivariateSpline`? (Also 1749th line)\n",
        "createdAt" : "2015-06-19T20:59:43Z",
        "updatedAt" : "2015-06-24T17:42:20Z",
        "lastEditedBy" : "2bab095f-50fb-401e-ab9e-c09e00e2b00c",
        "tags" : [
        ]
      },
      {
        "id" : "c9b3864c-c774-47d7-8702-3943285f914b",
        "parentId" : "8f5d9288-27e9-4097-925f-b0bc514f24af",
        "authorId" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "body" : "It should support more types. I only wrote one so far.\n",
        "createdAt" : "2015-06-19T21:02:02Z",
        "updatedAt" : "2015-06-24T17:42:20Z",
        "lastEditedBy" : "a29d5616-bdfa-4811-b650-6808742d3435",
        "tags" : [
        ]
      }
    ],
    "commit" : "55d07c0c0849a0f2ff75400c25b2b40ce75a2575",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +1732,1736 @@            method = order\n        terp = interpolate.interp1d(x, y, kind=method, fill_value=fill_value,\n                                    bounds_error=bounds_error)\n        new_y = terp(new_x)\n    elif method == 'spline':"
  },
  {
    "id" : "e5f4513d-d24e-47a9-98d8-fb22fce73ba3",
    "prId" : 10464,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a52fab14-5c0b-4409-8427-d1b6697701d7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "exactly!\n",
        "createdAt" : "2015-07-01T13:28:57Z",
        "updatedAt" : "2015-07-01T13:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "762d6807e04c1290d76d77602f9b83a8f98a9b57",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +786,790 @@    if is_categorical(arr):\n        return arr.take_nd(indexer, fill_value=fill_value,\n                           allow_fill=allow_fill)\n\n    if indexer is None:"
  },
  {
    "id" : "f3704c27-f170-46ae-94ea-472ddaa0d2fa",
    "prId" : 11102,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5591cfc-c299-4fdc-b6b6-8832516c4bb0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "e.g. grab the strlen function here\n",
        "createdAt" : "2015-09-27T14:24:25Z",
        "updatedAt" : "2015-10-03T02:10:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a96074b1311b33d3ef8f3b3d8e3029b02f9d2b7",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +2171,2175 @@    out_lines = []\n    newLists = []\n    lengths = [max(map(strlen, x)) + space for x in lists[:-1]]\n    # not the last one\n    lengths.append(max(map(len, lists[-1])))"
  },
  {
    "id" : "07b12d4d-a2f1-4072-9064-dae41e2b7bac",
    "prId" : 11219,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a0ee029-af8a-4aea-aa74-db789f16fb61",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this defaults to `rb` or `wb` as appropriate, but _should_ this be passed by the caller?\n",
        "createdAt" : "2015-10-09T13:39:44Z",
        "updatedAt" : "2015-10-12T04:56:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f6043e64-a6e9-465f-a3dc-9874e567c5f1",
        "parentId" : "3a0ee029-af8a-4aea-aa74-db789f16fb61",
        "authorId" : "d6b53aad-6fef-42cb-b46c-05c55cfab466",
        "body" : "[as far as I cant tell](https://docs.python.org/2/library/gzip.html), if we don't pass `mode` then it will default to `rb` and then `to_csv` will fail.\n",
        "createdAt" : "2015-10-09T17:56:01Z",
        "updatedAt" : "2015-10-12T04:56:39Z",
        "lastEditedBy" : "d6b53aad-6fef-42cb-b46c-05c55cfab466",
        "tags" : [
        ]
      }
    ],
    "commit" : "5889f4ee9b14f0650c23cc64e78ddbddef2afa4d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2847,2851 @@        if compression == 'gzip':\n            import gzip\n            f = gzip.GzipFile(path, mode)\n        elif compression == 'bz2':\n            import bz2"
  },
  {
    "id" : "c1fcc6b2-4048-4c95-8353-785d0d24911b",
    "prId" : 11416,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "827d6a9e-05e9-4505-8dd5-1bdab317c77a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "let's import `namedtupled` at the top and just check isinstance here?\n",
        "createdAt" : "2015-10-23T15:58:19Z",
        "updatedAt" : "2015-10-23T19:35:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5b57ee39-ec43-42f8-9959-48286b3b3bc8",
        "parentId" : "827d6a9e-05e9-4505-8dd5-1bdab317c77a",
        "authorId" : "214b00be-e9f2-4883-878c-26eab43cc650",
        "body" : "`namedtuple` is not a type, so that wouldn't work, unfortunately\n\nFYI: it's an factory function which builds and `eval`s a string to create a class inherited from `tuple`. Example code here: https://docs.python.org/2/library/collections.html#collections.namedtuple\n",
        "createdAt" : "2015-10-23T16:07:49Z",
        "updatedAt" : "2015-10-23T19:35:05Z",
        "lastEditedBy" : "214b00be-e9f2-4883-878c-26eab43cc650",
        "tags" : [
        ]
      },
      {
        "id" : "54426db9-c98f-4df7-ba27-3ca968bf87de",
        "parentId" : "827d6a9e-05e9-4505-8dd5-1bdab317c77a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "https://bugs.python.org/issue7796\n\nok!\n\n```\nIt seems a perfect case for \"duck typing\" style of programming:\nAll namedtuple classes:\n- inherit from tuple\n- have a \"_fields\" class attribute\nThese two properties could be the \"duck test\" for namedtuples, regardless of the actual implementation.\n```\n",
        "createdAt" : "2015-10-23T16:15:12Z",
        "updatedAt" : "2015-10-23T19:35:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d16dfa5a-554f-4ac9-939f-d527e326a697",
        "parentId" : "827d6a9e-05e9-4505-8dd5-1bdab317c77a",
        "authorId" : "214b00be-e9f2-4883-878c-26eab43cc650",
        "body" : "Ah cool!\nLots of discussion on those boards about a better way of doing `namedtuple`. It's not perfect at the moment, but it's very functional (we use them a lot)\n",
        "createdAt" : "2015-10-23T16:28:22Z",
        "updatedAt" : "2015-10-23T19:35:05Z",
        "lastEditedBy" : "214b00be-e9f2-4883-878c-26eab43cc650",
        "tags" : [
        ]
      },
      {
        "id" : "dc822362-dcc3-46d2-9b04-cf4dfb311a4a",
        "parentId" : "827d6a9e-05e9-4505-8dd5-1bdab317c77a",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "cool\n\nwe might have named tuples elsewhere that could use he is_ function can u give a check\n",
        "createdAt" : "2015-10-23T16:30:16Z",
        "updatedAt" : "2015-10-23T19:35:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "51d8699b-00ca-4642-ba0f-73faa3eb46eb",
        "parentId" : "827d6a9e-05e9-4505-8dd5-1bdab317c77a",
        "authorId" : "214b00be-e9f2-4883-878c-26eab43cc650",
        "body" : "I had a look - while `namedtuple` is in half a dozen places, there's nowhere that checks its type.\n",
        "createdAt" : "2015-10-23T18:04:08Z",
        "updatedAt" : "2015-10-23T19:35:05Z",
        "lastEditedBy" : "214b00be-e9f2-4883-878c-26eab43cc650",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e1da54249e265e6439f8733e6ce8066f37b40f9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2678,2682 @@\ndef is_named_tuple(arg):\n    return isinstance(arg, tuple) and hasattr(arg, '_fields')\n\ndef is_null_slice(obj):"
  },
  {
    "id" : "fce26c7b-091d-481b-8a03-3142dcb2cb43",
    "prId" : 14762,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14762#pullrequestreview-11012771",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d158ac66-0a31-4483-8d2e-9f5a7cc03936",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string",
        "createdAt" : "2016-12-01T15:26:44Z",
        "updatedAt" : "2016-12-09T14:58:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6d81d2cf-a962-4cc1-a450-4dda4a738736",
        "parentId" : "d158ac66-0a31-4483-8d2e-9f5a7cc03936",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "done",
        "createdAt" : "2016-12-01T17:17:37Z",
        "updatedAt" : "2016-12-09T14:58:32Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "76b6434e0fd60a60a0536f2e207f5d03d6552349",
    "line" : null,
    "diffHunk" : "@@ -1,1 +105,109 @@\n    \"\"\"\n    pass\n\n"
  },
  {
    "id" : "dd67f856-7814-4b63-a187-d1662fd66149",
    "prId" : 14762,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/14762#pullrequestreview-11619944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0761f73-1c3c-493a-b8df-4555ba166cb6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a versiononadded tag here",
        "createdAt" : "2016-12-04T19:34:06Z",
        "updatedAt" : "2016-12-09T14:58:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9b1fc6ad-1ced-4e53-8684-40f1f149b0ab",
        "parentId" : "b0761f73-1c3c-493a-b8df-4555ba166cb6",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "\"This error is raised when\" -> \"Error raised when\"\r\n\r\nCan you also add that it is a subclass of a KeyError?",
        "createdAt" : "2016-12-04T20:46:21Z",
        "updatedAt" : "2016-12-09T14:58:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "492d0cfc-8517-4456-befb-c2f999684c18",
        "parentId" : "b0761f73-1c3c-493a-b8df-4555ba166cb6",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "done\r\n",
        "createdAt" : "2016-12-06T16:08:30Z",
        "updatedAt" : "2016-12-09T14:58:32Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "76b6434e0fd60a60a0536f2e207f5d03d6552349",
    "line" : null,
    "diffHunk" : "@@ -1,1 +104,108 @@    .. versionadded:: 0.20.0\n\n    \"\"\"\n    pass\n"
  },
  {
    "id" : "68095ada-7bc7-4a34-920d-9d5a1d8b29f5",
    "prId" : 18309,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18309#pullrequestreview-77122101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe7f28bc-af22-490e-96ca-aad486f65897",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "doc-string here would be nice; in theory some unit tests if you can.",
        "createdAt" : "2017-11-16T00:05:33Z",
        "updatedAt" : "2017-12-28T15:57:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a039062e-c5e1-4498-8eeb-132d1672f65c",
        "parentId" : "fe7f28bc-af22-490e-96ca-aad486f65897",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "docstring added; this is tested in my new test and, in old tests, whenever ``Index(dtype='object').drop()`` is called.",
        "createdAt" : "2017-11-16T10:47:32Z",
        "updatedAt" : "2017-12-28T15:57:58Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "c0ca5707-ec00-46ce-a737-3c1abe9d44e0",
        "parentId" : "fe7f28bc-af22-490e-96ca-aad486f65897",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I am asking for some unit-tests for this routine itself. all of these helper routines should ideally have tests.",
        "createdAt" : "2017-11-16T11:05:18Z",
        "updatedAt" : "2017-12-28T15:57:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1d6ab499-891f-4684-bc03-1c52fe37660f",
        "parentId" : "fe7f28bc-af22-490e-96ca-aad486f65897",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "Uhm... unless there are specific coverage (lines of code) issues, I personally don't see this as an efficient use of my time, considering how many and how frequently changed are pandas internal routines.",
        "createdAt" : "2017-11-16T13:57:25Z",
        "updatedAt" : "2017-12-28T15:57:58Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fea97a4678e2c788b2e6f03c6dabd7846a5891f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +399,403 @@\n\ndef _index_labels_to_array(labels, dtype=None):\n    \"\"\"\n    Transform label or iterable of labels to array, for use in Index."
  },
  {
    "id" : "df9afabf-cd51-41f9-b557-89e2db006170",
    "prId" : 18769,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18769#pullrequestreview-84166964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8e8e11d-6536-4e19-b1a1-513244d0f8f1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there an asv that hits this case?",
        "createdAt" : "2017-12-15T23:48:43Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "7c1f382b-72d9-4480-84e1-d5c3c713dcc5",
        "parentId" : "d8e8e11d-6536-4e19-b1a1-513244d0f8f1",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "I don't even think there is any valid code path that hits this case... which indeed should be suppressed in #18626",
        "createdAt" : "2017-12-18T08:38:21Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "2fe83003-00e2-4218-a89e-01f82aad9cf8",
        "parentId" : "d8e8e11d-6536-4e19-b1a1-513244d0f8f1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if there is not valid code, then let's remove it. or make a new issue. *inside* a PR doesn't help.",
        "createdAt" : "2017-12-18T12:53:16Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "420e2840-60b8-4b8b-acf1-322f37c049d5",
        "parentId" : "d8e8e11d-6536-4e19-b1a1-513244d0f8f1",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "#18819",
        "createdAt" : "2017-12-18T13:22:05Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      },
      {
        "id" : "9f395837-cac0-430c-a00f-496e60454e34",
        "parentId" : "d8e8e11d-6536-4e19-b1a1-513244d0f8f1",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the issue number here with a TODO",
        "createdAt" : "2017-12-18T14:04:58Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "568452c8-ebf4-4d7e-ac2c-9a60cd79de11",
        "parentId" : "d8e8e11d-6536-4e19-b1a1-513244d0f8f1",
        "authorId" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "body" : "(done)",
        "createdAt" : "2017-12-18T15:23:14Z",
        "updatedAt" : "2017-12-19T13:39:19Z",
        "lastEditedBy" : "69a015bc-2b58-45dd-83cb-2c2f6d80b128",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a6e48a703db106e7ca7caf5620390debff3080",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +391,395 @@\n    if result.ndim == 2:\n        # Avoid building an array of arrays:\n        # TODO: verify whether any path hits this except #18819 (invalid)\n        values = [tuple(x) for x in values]"
  },
  {
    "id" : "25bfa9c7-c042-4389-9b90-97d92916cfba",
    "prId" : 20046,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20046#pullrequestreview-168463483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aaacf4d2-2c9a-4b60-acc7-ce981c2f922b",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is this if / else equivalent to `dict.get(x, x)`?",
        "createdAt" : "2018-10-25T12:19:07Z",
        "updatedAt" : "2018-10-29T14:28:51Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "4177708d-9501-4bc9-b91c-edb935e92bd2",
        "parentId" : "aaacf4d2-2c9a-4b60-acc7-ce981c2f922b",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "Maybe so, but I was preserving existing code.  That particular snippet is from a commit on October 21, 2011 (https://github.com/pandas-dev/pandas/commit/cb819780b598cbfe885a8040a2db32fa103bdcfb#diff-150fd3c5a732ae915ec47bc54a933c41 if you care to look)\r\n\r\nSo the question is whether I make that change now, or leave working code alone.",
        "createdAt" : "2018-10-25T16:03:26Z",
        "updatedAt" : "2018-10-29T14:28:51Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "1263a47adf89836920a56c0b28412b78c0b58780",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +466,470 @@        def f(x):\n            if x in mapper:\n                return mapper[x]\n            else:\n                return x"
  },
  {
    "id" : "d662c992-32d8-43e2-a69f-ddcc51f50a9e",
    "prId" : 22001,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22001#pullrequestreview-139179921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04719b82-8059-48a1-89be-3d73eddcac87",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "prob should move all of the indexing ones to a new indexing module\r\n\r\nmaybe pandas.core.indexing.utils\r\n(and obviously move indexing.py itself)",
        "createdAt" : "2018-07-20T19:16:21Z",
        "updatedAt" : "2018-07-24T20:29:27Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e5a1bd52ef4fbe565ef39a4034811739cbe40dc",
    "line" : 279,
    "diffHunk" : "@@ -1,1 +277,281 @@\n\ndef apply_if_callable(maybe_callable, obj, **kwargs):\n    \"\"\"\n    Evaluate possibly callable input using obj and kwargs if it is callable,"
  }
]