[
  {
    "id" : "bb85392f-205a-4b11-a5f3-01b6d33550b7",
    "prId" : 4502,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6ec70f7-0d98-4aac-8c6e-a59b908b7743",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe? add `raise_on_error=False`, which you could automatically just exclude non-numeric\n\nor just do it by definition; I think we do this is for example describe (it should just work); \n",
        "createdAt" : "2013-08-26T12:41:42Z",
        "updatedAt" : "2013-08-26T12:41:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bd8e2dde-5c5d-4e67-a0e7-af02f098ebf5",
        "parentId" : "a6ec70f7-0d98-4aac-8c6e-a59b908b7743",
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "I think Categorical was the thing that throws.\n\nIs there a neat way to just include only numerics from a Series?\n\nMaybe call `numeric_only` like groupby: https://github.com/pydata/pandas/commit/dda23636354136f753561ead07bdbe88b21fa5ae. Not sure it should be default though.\n",
        "createdAt" : "2013-08-26T12:49:16Z",
        "updatedAt" : "2013-08-26T12:49:16Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      },
      {
        "id" : "aceb43ca-7daf-4aea-9a41-3f46fbf030c4",
        "parentId" : "a6ec70f7-0d98-4aac-8c6e-a59b908b7743",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "going to push somethign to enable `_get_numeric_data/_get_bool_data` in all NDFrame shortly\n",
        "createdAt" : "2013-08-26T13:11:57Z",
        "updatedAt" : "2013-08-26T13:11:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "85f191cbdca7f1d83aab05e226cb921b03e9b638",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +149,153 @@\n\ndef value_counts(values, sort=True, ascending=False, normalize=False, bins=None):\n    \"\"\"\n    Compute a histogram of the counts of non-null values"
  },
  {
    "id" : "02b847af-cd96-4bb2-9f09-311b4bccc738",
    "prId" : 7424,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df762937-e2dc-4843-9d48-ecc999cdb075",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think this should be `True`?\n",
        "createdAt" : "2014-06-17T12:51:17Z",
        "updatedAt" : "2014-06-17T12:51:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "26139f3804cdc25d29325972a24c55e10cd2567f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +185,189 @@        Rather than count values, group them into half-open bins,\n        convenience for pd.cut, only works with numeric data\n    dropna : boolean, default False\n        Don't include counts of NaN\n"
  },
  {
    "id" : "7a0329c2-c1e3-4f4c-933d-3bc0c14cde58",
    "prId" : 15929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15929#pullrequestreview-31449836",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c06416c-b949-4b43-b55e-4f84787fca28",
        "parentId" : null,
        "authorId" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "body" : "Not a big deal, but seems a little strange that `value_counts_...` and `duplicated_...` are free functions and not based on hashtable classes? Would unify the the dispatch.",
        "createdAt" : "2017-04-06T22:33:19Z",
        "updatedAt" : "2017-04-06T23:06:38Z",
        "lastEditedBy" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "tags" : [
        ]
      },
      {
        "id" : "df70e4d9-88e9-41f7-891c-b0d5337dd04b",
        "parentId" : "7c06416c-b949-4b43-b55e-4f84787fca28",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not sure what you mean. These are cython functions.",
        "createdAt" : "2017-04-06T22:55:32Z",
        "updatedAt" : "2017-04-06T23:06:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "76653eb6e4a63152c5a6ceaad2d8d4af6a667415",
    "line" : 576,
    "diffHunk" : "@@ -1,1 +585,589 @@\n        # TODO: handle uint8\n        f = getattr(htable, \"value_count_{dtype}\".format(dtype=ndtype))\n        keys, counts = f(values, dropna)\n"
  },
  {
    "id" : "67b5588a-122a-48e9-8ca0-456e3d34c574",
    "prId" : 15929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15929#pullrequestreview-31551694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d4a94f4-6876-4cb7-973f-0591ed125504",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is exposed at the top-level, so can you keep the docstring of `unique` ? (put it in `unique1D`)",
        "createdAt" : "2017-04-07T12:40:33Z",
        "updatedAt" : "2017-04-07T12:47:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b688e0d9-7291-472c-91f9-47a355e18e83",
        "parentId" : "9d4a94f4-6876-4cb7-973f-0591ed125504",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes, i'll push it.",
        "createdAt" : "2017-04-07T12:49:42Z",
        "updatedAt" : "2017-04-07T12:49:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "76653eb6e4a63152c5a6ceaad2d8d4af6a667415",
    "line" : 360,
    "diffHunk" : "@@ -1,1 +279,283 @@\n\nunique = unique1d\n\n"
  },
  {
    "id" : "6d8a9628-06fd-4d24-97e5-1b4a59dcd49a",
    "prId" : 15929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15929#pullrequestreview-34527475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7817fc9c-7b5b-489c-9ccd-ab52dd997656",
        "parentId" : null,
        "authorId" : "e415801c-69ed-4339-9d12-a31599b4bb41",
        "body" : "EDIT: The better way seems to be returning `f, values` here",
        "createdAt" : "2017-04-25T05:38:42Z",
        "updatedAt" : "2017-04-25T05:38:42Z",
        "lastEditedBy" : "e415801c-69ed-4339-9d12-a31599b4bb41",
        "tags" : [
        ]
      },
      {
        "id" : "391a4da5-94fb-45bd-9d32-b68c77085876",
        "parentId" : "7817fc9c-7b5b-489c-9ccd-ab52dd997656",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "thanks\r\nhttps://github.com/pandas-dev/pandas/pull/16128",
        "createdAt" : "2017-04-25T10:47:05Z",
        "updatedAt" : "2017-04-25T10:47:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "76653eb6e4a63152c5a6ceaad2d8d4af6a667415",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +213,217 @@        if lib.infer_dtype(values) in ['string']:\n            try:\n                f = func_map['string']\n            except KeyError:\n                pass"
  },
  {
    "id" : "8d4b4c72-1b5f-4788-9a9a-939e10efadf6",
    "prId" : 17006,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17006#pullrequestreview-50779661",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "951a8f83-78fb-40e8-ab7d-5a7fd013a0ea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "check perf on some of the algos\r\nesp isin\r\n",
        "createdAt" : "2017-07-18T09:17:32Z",
        "updatedAt" : "2017-07-18T09:17:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "13b4c5b0-d404-4a86-a8e8-512924d25d2a",
        "parentId" : "951a8f83-78fb-40e8-ab7d-5a7fd013a0ea",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I didn't see any noticeable perf degradations on my machine.",
        "createdAt" : "2017-07-18T14:53:34Z",
        "updatedAt" : "2017-07-18T14:53:35Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "a653d9cc-beda-462e-9663-9ed69945c08b",
        "parentId" : "951a8f83-78fb-40e8-ab7d-5a7fd013a0ea",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did you run the asv? this can degrade as its in a critical path. notice there is *already* a check for object type later on. This function  receives LOTS of input.",
        "createdAt" : "2017-07-18T23:30:46Z",
        "updatedAt" : "2017-07-18T23:30:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9f257dfa-1742-4bbb-8b71-be5987a55358",
        "parentId" : "951a8f83-78fb-40e8-ab7d-5a7fd013a0ea",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Not quite: the existing check is for the `values`.  This is for the `dtype` specified.  This is essentially an `O(1)` operation.\r\n\r\nAnd yes, I did check performance (see my comment above), and I didn't see any issues on my machine.",
        "createdAt" : "2017-07-19T00:35:51Z",
        "updatedAt" : "2017-07-19T00:36:03Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2cec7774896545169f39b36d7c13a42a69c1a35",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +66,70 @@    # we check some simple dtypes first\n    try:\n        if is_object_dtype(dtype):\n            return _ensure_object(np.asarray(values)), 'object', 'object'\n        if is_bool_dtype(values) or is_bool_dtype(dtype):"
  },
  {
    "id" : "cdbe6413-f0b7-4306-923b-d164c6a68b3b",
    "prId" : 19751,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19751#pullrequestreview-97689500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c32694af-6618-421c-99ae-7c971070524f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ca you add a test which catches this, AND see if we have any existing cases of actually passing this arg",
        "createdAt" : "2018-02-19T15:51:39Z",
        "updatedAt" : "2018-02-21T11:37:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "aa230eb8-d771-4873-a30d-9401bfd3a0d1",
        "parentId" : "c32694af-6618-421c-99ae-7c971070524f",
        "authorId" : "da19b543-f846-4415-b573-9ab03a8005fd",
        "body" : "Sure thing.  I added two additional tests.  Please refer to ab47916b0ab54203e4ba5677bdc4da815f5b4280.\r\n\r\nI did not find any cases in the Repo where ``factorize()`` is called with an ``order`` parameter.",
        "createdAt" : "2018-02-20T01:43:40Z",
        "updatedAt" : "2018-02-21T11:37:12Z",
        "lastEditedBy" : "da19b543-f846-4415-b573-9ab03a8005fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7ed3c41b6d0e63a08aa5b847a8c1c0565d13e6b",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +438,442 @@\n\n@deprecate_kwarg(old_arg_name='order', new_arg_name=None)\ndef factorize(values, sort=False, order=None, na_sentinel=-1, size_hint=None):\n    \"\"\""
  },
  {
    "id" : "828d495c-e028-45bf-a846-e0ce95803320",
    "prId" : 19938,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19938#pullrequestreview-102788172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c58fb921-778f-4a80-b74d-b3dd62f06370",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Removed all the sorting from Categorical.factorize. All that logic is here.\r\n\r\nI don't think we want to just call `safe_sort` for two reasons\r\n\r\n1. that function does a lot of unnescessary work when we know that `uniques` is an ndarray or EA.\r\n2. It coerces categoricals to object ndarrays.\r\n2. EAs (like Categorical) may have special sorting rules.\r\n\r\nOn some small bencharks (10,000 elements) this is about 25-40% faster. The only slow case, for which we still need safe_sort, is when the array is mixed. In that case things are about 10% slower.",
        "createdAt" : "2018-03-09T21:03:17Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e006d1a187b35941da3a548415f097160e5bb92",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +516,520 @@    if sort and len(uniques) > 0:\n        from pandas.core.sorting import safe_sort\n        try:\n            order = uniques.argsort()\n            order2 = order.argsort()"
  },
  {
    "id" : "bdf9d033-f95e-4db1-b8b3-f2324eeecfef",
    "prId" : 19938,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19938#pullrequestreview-103399393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5630d5c9-c326-4947-ad70-46896e338c93",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could move to the except (but no big deal)",
        "createdAt" : "2018-03-13T12:04:59Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e006d1a187b35941da3a548415f097160e5bb92",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +515,519 @@\n    if sort and len(uniques) > 0:\n        from pandas.core.sorting import safe_sort\n        try:\n            order = uniques.argsort()"
  },
  {
    "id" : "a73692bc-0a0c-48a6-a931-336ffa07f8a3",
    "prId" : 19938,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19938#pullrequestreview-103403152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdee7ac5-4342-455e-b76c-5e5ac11b76ca",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this actually be a check on the values if they have a ``.factorize()`` method (or check ``is_extension_array``)? instead of specifically checking for categorical? (of course categorical will pass these checks). as this will then make ``pd.factorize(an_extension_array)`` work?",
        "createdAt" : "2018-03-13T12:06:31Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e9da8347-3c36-4df1-98be-4a29ce513b17",
        "parentId" : "fdee7ac5-4342-455e-b76c-5e5ac11b76ca",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This PR is just a bugfix for categorical. But the structure will be very similar (I'll just change `is_categorical_dtype` to `is_extension_array_dtype`.)\r\n\r\nI'll implement EA.factorize today hopefully, but have to get things like unique and argsort working first.",
        "createdAt" : "2018-03-13T12:18:19Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e006d1a187b35941da3a548415f097160e5bb92",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +507,511 @@        labels, uniques = values.factorize()\n        dtype = original.dtype\n    else:\n        values, dtype, _ = _ensure_data(values)\n        check_nulls = not is_integer_dtype(original)"
  },
  {
    "id" : "af477bc7-38ef-4622-987f-6f8e445f421e",
    "prId" : 20361,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20361#pullrequestreview-104580917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b0388a9-170e-4391-9424-935765750d97",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Note: this was a bug in #19938 where I forgot to pass this through. It's covered by our extension tests.",
        "createdAt" : "2018-03-16T14:14:47Z",
        "updatedAt" : "2018-03-27T11:18:03Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c06da3a7cc52240159cda296649627d49b5f4bb4",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +606,610 @@    if is_extension_array_dtype(values):\n        values = getattr(values, '_values', values)\n        labels, uniques = values.factorize(na_sentinel=na_sentinel)\n        dtype = original.dtype\n    else:"
  },
  {
    "id" : "49e600a8-c9e9-4d22-8525-c794c329c8f5",
    "prId" : 20361,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20361#pullrequestreview-104727390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc2097c3-05b3-495d-b65a-e2bdd475ab68",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add ``pandas.unique`` here",
        "createdAt" : "2018-03-16T21:48:32Z",
        "updatedAt" : "2018-03-27T11:18:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c06da3a7cc52240159cda296649627d49b5f4bb4",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +506,510 @@    See Also\n    --------\n    pandas.cut : Discretize continuous-valued array.\n    pandas.unique : Find the unique valuse in an array.\n"
  },
  {
    "id" : "fd230809-694f-49dc-b4b4-0f46283d939f",
    "prId" : 20361,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20361#pullrequestreview-104764933",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69bf25a0-5c48-430f-8044-4b31689df068",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "If it is only a single entry, can we make this a variable (eg `_shared_docstring_factorize`) ?",
        "createdAt" : "2018-03-16T21:56:46Z",
        "updatedAt" : "2018-03-27T11:18:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f9b6f07a-1b2c-4e6b-8b97-7e338f60d024",
        "parentId" : "69bf25a0-5c48-430f-8044-4b31689df068",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I have a slight preference for keeping it as a dictionary, since it looks like the docstrings for `unique` and `value_counts` can be shared between ops and base. https://github.com/pandas-dev/pandas/issues/20390",
        "createdAt" : "2018-03-17T12:23:29Z",
        "updatedAt" : "2018-03-27T11:18:03Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c06da3a7cc52240159cda296649627d49b5f4bb4",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +474,478 @@\n\n_shared_docs['factorize'] = \"\"\"\n    Encode the object as an enumerated type or categorical variable.\n"
  },
  {
    "id" : "a0a77823-55fb-4c85-963c-db9c921b0bb3",
    "prId" : 20473,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20473#pullrequestreview-106864442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62ac83d2-b648-4c88-8d84-94159fe2364d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use ``pandas.core.dtypes.missing.na_value_for_dtype`` (or maybe add a kwarg to return the underlying value). just want to try to keep this logic in 1 place.",
        "createdAt" : "2018-03-25T13:47:28Z",
        "updatedAt" : "2018-03-26T12:15:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5fceed61-17b8-4090-98ef-ffa4d8c76ab5",
        "parentId" : "62ac83d2-b648-4c88-8d84-94159fe2364d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Do you know why `na_value_for_dtype(PeriodDtype)` is nan? It should be NaT, right?",
        "createdAt" : "2018-03-26T11:32:33Z",
        "updatedAt" : "2018-03-26T12:15:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "465d458573c99ee218299c2713c2e5abd305907c",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +514,518 @@    else:\n        values, dtype, _ = _ensure_data(values)\n\n        if (is_datetime64_any_dtype(original) or\n                is_timedelta64_dtype(original) or"
  },
  {
    "id" : "8e8c84bd-9747-4581-a00f-8d4f6a3a5915",
    "prId" : 20522,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20522#pullrequestreview-110498750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e08a6450-c488-4a25-9e0f-70c32c0f1f6c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if u change this to is_extension_type does everything still work?",
        "createdAt" : "2018-04-07T22:40:30Z",
        "updatedAt" : "2018-04-25T10:01:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0d5d30da-de44-4ef6-ad85-976b90965fe7",
        "parentId" : "e08a6450-c488-4a25-9e0f-70c32c0f1f6c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, can you add a note: TODO(extension) here",
        "createdAt" : "2018-04-09T15:21:37Z",
        "updatedAt" : "2018-04-25T10:01:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b680cd239a6150b42b7cf8554f38c5c3beec368",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +408,412 @@        values = construct_1d_object_array_from_listlike(list(values))\n\n    if is_categorical_dtype(comps):\n        # TODO(extension)\n        # handle categoricals"
  },
  {
    "id" : "9a47846f-32b0-4afb-8f26-b05adb0d7fe3",
    "prId" : 22034,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22034#pullrequestreview-197307639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92181751-5a98-4bdf-a637-cbec76dcfeb0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this can interactive with Nullable int types, is there testing on this?",
        "createdAt" : "2019-01-28T12:31:36Z",
        "updatedAt" : "2019-02-23T20:27:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fc903caa-0583-4c4a-ab84-ec9b89e3b7a2",
        "parentId" : "92181751-5a98-4bdf-a637-cbec76dcfeb0",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "It really should only let integer ndarrays reach this clause, else things get needlessly complex. I added a guard for this.\r\n",
        "createdAt" : "2019-01-28T23:12:35Z",
        "updatedAt" : "2019-02-23T20:27:26Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbe22624b6d815f9d946e21d1d4e00c282dc96d",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +1783,1787 @@        # Before searching below, we therefore try to give `value` the\n        # same dtype as `arr`, while guarding against integer overflows.\n        iinfo = np.iinfo(arr.dtype.type)\n        value_arr = np.array([value]) if is_scalar(value) else np.array(value)\n        if (value_arr >= iinfo.min).all() and (value_arr <= iinfo.max).all():"
  },
  {
    "id" : "a8f77af7-90a3-46e5-aa76-ee2dbd7ea56a",
    "prId" : 22161,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22161#pullrequestreview-143067789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4668e78-c3aa-43c8-9f49-e17762a4e134",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so we actually should prob use ``pandas.core.dtypes.cast.construct_1d_array_preserving_na`` which is even better here. further pls run the performance suite for things like factorize, value_counts, isin, this a very performance sensitive section.",
        "createdAt" : "2018-08-01T21:47:35Z",
        "updatedAt" : "2018-08-09T22:41:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1f023c3c-16a3-4125-83bd-cf208f9c8e52",
        "parentId" : "a4668e78-c3aa-43c8-9f49-e17762a4e134",
        "authorId" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "body" : "@jreback Actually, [pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na](https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/cast.py#L1245) would not work for two reasons:\r\n\r\n 1. For  `[42, 's']`  it returns `array(['42', 's'], dtype='<U11')` and not the wanted `array([42, 's'], dtype=object))`, not sure this is the intended behavior of the function though\r\n 2. For `[np.nan]` it returns `array([nan], dtype=float64)` which leads to `result[0] is np.nan` being False, but we would like to keep the id of the object.",
        "createdAt" : "2018-08-03T06:34:59Z",
        "updatedAt" : "2018-08-09T22:41:18Z",
        "lastEditedBy" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab06c38fc23614275f3a6c317508fb27715db203",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +135,139 @@\n    # we have failed, return object\n    values = np.asarray(values, dtype=np.object)\n    return ensure_object(values), 'object', 'object'\n"
  },
  {
    "id" : "088008c9-d760-4f45-9c8e-57d43af46023",
    "prId" : 25592,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25592#pullrequestreview-211850051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "588698cd-7205-49a6-82e9-5ed65c7c3c45",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Adding this if/else check to keep the usage of `take_1d` when possible. It was added some time ago to improve performance compared to `safe_sort`, but thus does not handle non-default na_sentinels. \r\nIf we want to keep the code simpler, I can also remove the `take_1d` alltogether, but that would give a performance degradation compared to the last release.",
        "createdAt" : "2019-03-07T15:17:47Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "835b8ff6-89e0-4ee2-8934-980917225f69",
        "parentId" : "588698cd-7205-49a6-82e9-5ed65c7c3c45",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This seems reasonable. Alternatively, `safe_sort` could do this try / except?",
        "createdAt" : "2019-03-07T15:23:44Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "11deb3ee-14d6-4814-a416-522212375a64",
        "parentId" : "588698cd-7205-49a6-82e9-5ed65c7c3c45",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "You mean the if / else? (as it would also have to deal with the non-default na_sentinels) \r\n",
        "createdAt" : "2019-03-07T15:25:24Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ed6d0560-05c0-4f32-82a1-bed371b296cc",
        "parentId" : "588698cd-7205-49a6-82e9-5ed65c7c3c45",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hmm yeah, it would need that as well. But I think it's probably fine here, unless we see this pattern coming up often when using safe_sort.",
        "createdAt" : "2019-03-07T15:32:33Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9c880e0d547d28d594c07057705e3350ae942af",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +621,625 @@        from pandas.core.sorting import safe_sort\n        if na_sentinel == -1:\n            # GH-25409 take_1d only works for na_sentinels of -1\n            try:\n                order = uniques.argsort()"
  },
  {
    "id" : "b68bb3ea-ccc7-411d-89dd-5a72aaafd08b",
    "prId" : 25592,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25592#pullrequestreview-213032473",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "woa? this is way repetitive. why is what you have in the try not enough here?",
        "createdAt" : "2019-03-07T22:07:12Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "92dbeb6c-3781-4dc3-9151-93470385c693",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`take_1d` cannot handle custom na_sentinels. See the discussion in the issue.",
        "createdAt" : "2019-03-07T22:11:01Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "311ec469-51f5-48b5-a7f4-d9eb6b1a68ad",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I read the issue. this is fix is way too hacky. A custom sentinel is not a blocking issue for 0.24.2",
        "createdAt" : "2019-03-07T22:56:10Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e0f413df-64e6-4463-8d63-97c39348fdd8",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Well, as I said above, I can also simply remove the if/else and try/except completely, by not using `take_1d` if that is preferred. A small performance gain is not worth introducing (now knowingly) a regression in behaviour.\r\n\r\nBut personally, I also have no problem with just merging this PR as is.",
        "createdAt" : "2019-03-07T23:09:21Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "74e9cb6c-9ff9-4ed7-819d-0113c500345a",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is just adding technical debt and am -1 in merging as is ",
        "createdAt" : "2019-03-08T00:12:53Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "afd4edd4-bbd8-4cc6-85d7-5a43e37a85b3",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you then give an indication with what you would be OK, instead of just saying -1? \r\nEg I already mentioned that I can remove the usage of take_1d all together (so how it was before 0.23)",
        "createdAt" : "2019-03-08T11:10:45Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "25cce35b-eab2-456d-93ee-ab3ddcfd4e65",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> Eg I already mentioned that I can remove the usage of take_1d all together (so how it was before 0.23)\r\n\r\nthis sounds fine,  though don't remember why this was changed.",
        "createdAt" : "2019-03-08T14:51:28Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f368ab18-7963-4d8d-a2a7-8bdf00b6af5a",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Some reasoning is explained here: https://github.com/pandas-dev/pandas/pull/19938#discussion_r173567099 (mainly performance I think)",
        "createdAt" : "2019-03-08T16:54:47Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a2965fe0-33bc-469e-9d4f-8794987fa82f",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, then let's just defer this change to 0.25.0 and do this w/o the multiple repetitive try/excepts. ",
        "createdAt" : "2019-03-10T22:24:46Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b7cf3f5b-56fe-4d32-b70f-7423aa393e0d",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "If you don't like the extra if/else, but are OK with reverting to only `safe_sort` bu only for 0.25.0: would you be OK with the current PR for 0.24.2, if I directly do a follow-up PR to remove the if/else try/except on master / for 0.25.0 ?",
        "createdAt" : "2019-03-11T10:17:25Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9ef3df4f-d667-496b-ac1e-080ab22ad426",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback OK?",
        "createdAt" : "2019-03-11T16:21:40Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "06da5511-afc5-4cc6-a396-0d47094b6bd8",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This would be good for 0.24.2.\r\n\r\nWhat's the duplicate code / tech debt here? The call to `safe_sort`?",
        "createdAt" : "2019-03-11T19:12:48Z",
        "updatedAt" : "2019-03-11T19:12:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9c880e0d547d28d594c07057705e3350ae942af",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +627,631 @@                labels = take_1d(order2, labels, fill_value=na_sentinel)\n                uniques = uniques.take(order)\n            except TypeError:\n                # Mixed types, where uniques.argsort fails.\n                uniques, labels = safe_sort(uniques, labels,"
  },
  {
    "id" : "1b9da7a6-423f-40f3-9eac-06ec1f886d19",
    "prId" : 25592,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25592#pullrequestreview-213626653",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97b6a8da-bd50-49fd-99fb-58350a6309e8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I don't like the way this is written because it repeats the call to safe_sort. if you can avoid that (easy enough, just use a pass in the except), *then* call safe_sort if needed (assign to uniques, lables as NOne, None initially), then this would be better",
        "createdAt" : "2019-03-12T14:24:46Z",
        "updatedAt" : "2019-03-12T14:24:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a3a89187-9de4-49b5-8b12-79fd40c0fc8d",
        "parentId" : "97b6a8da-bd50-49fd-99fb-58350a6309e8",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@jorisvandenbossche do you find this clearer? Personally, I find these dummy variables just for flow control a bit confusing (you have to verify that things are eventually set somewhere). With the way things are written, it's clear that each of the three branches has a `uniques` and `labels`, and it's clear how things are achieved.\r\n\r\nIf we're really concerned about repeating the call to safe_sort, you can make a closer with the values\r\n\r\n```\r\nget_uniques_labels = lambda: safe_sort(uniques, labels, na_sentinel, assume_unique=True)`\r\n```\r\n\r\nand call the lambda, but again, that's just unnecessary indirection IMO.\r\n\r\nIn this case I think just do whatever.",
        "createdAt" : "2019-03-12T14:43:49Z",
        "updatedAt" : "2019-03-12T14:43:49Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c1e220b0-bc2a-4d16-b74e-bb407938d9b4",
        "parentId" : "97b6a8da-bd50-49fd-99fb-58350a6309e8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I agree with Tom that this is not necessarily clearer as what it is now.",
        "createdAt" : "2019-03-12T20:16:31Z",
        "updatedAt" : "2019-03-12T20:16:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9c880e0d547d28d594c07057705e3350ae942af",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +629,633 @@            except TypeError:\n                # Mixed types, where uniques.argsort fails.\n                uniques, labels = safe_sort(uniques, labels,\n                                            na_sentinel=na_sentinel,\n                                            assume_unique=True)"
  },
  {
    "id" : "7c232788-2e4e-42aa-abb2-f4751614b901",
    "prId" : 27027,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27027#pullrequestreview-255458518",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "374a22ca-1d3b-4f5a-816c-808d50f6f823",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I believe that ensure_data should only take 1d input at all times. Is there a case where it does not? (nb we shoul dprob document / type this)",
        "createdAt" : "2019-06-27T02:54:44Z",
        "updatedAt" : "2019-06-27T20:28:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0480194d-0d79-4a07-b069-ba0a8e82d888",
        "parentId" : "374a22ca-1d3b-4f5a-816c-808d50f6f823",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes, this gets called with 2D values from `DataFrame.rank`.",
        "createdAt" : "2019-06-27T14:39:53Z",
        "updatedAt" : "2019-06-27T20:28:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "34065fec-544e-4f55-9213-410c2081c042",
        "parentId" : "374a22ca-1d3b-4f5a-816c-808d50f6f823",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do you know if it is only rank? Because if so, it might be useful to add that as a comment for somebody later reading the code and wondering the same question where 2D things are passed to this.",
        "createdAt" : "2019-06-27T20:20:35Z",
        "updatedAt" : "2019-06-27T20:28:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f99a00a907f9bb114d6c1d7b5fda84e94671c00",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +108,112 @@                # Avoid calling the DatetimeIndex constructor as it is 1D only\n                # Note: this is reached by DataFrame.rank calls GH#27027\n                asi8 = values.view('i8')\n                dtype = values.dtype\n                return asi8, dtype, 'int64'"
  },
  {
    "id" : "df40d59c-f2b7-4396-8aa8-c31b659abd44",
    "prId" : 27027,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27027#pullrequestreview-255408940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75f24659-4487-49ae-b599-324fa3beb083",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we *just* use the new added code you have (w/o) the ndim check and remove lines 113-115?",
        "createdAt" : "2019-06-27T15:47:05Z",
        "updatedAt" : "2019-06-27T20:28:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fe3e8567-8459-46c0-94b7-2689e8925829",
        "parentId" : "75f24659-4487-49ae-b599-324fa3beb083",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Just tried it, this fails in test cases with e.g. datetime64[D] data",
        "createdAt" : "2019-06-27T18:37:47Z",
        "updatedAt" : "2019-06-27T20:28:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f99a00a907f9bb114d6c1d7b5fda84e94671c00",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +112,116 @@                return asi8, dtype, 'int64'\n\n            from pandas import DatetimeIndex\n            values = DatetimeIndex(values)\n            dtype = values.dtype"
  },
  {
    "id" : "74c537f2-4064-4159-b8ce-fcd01f953206",
    "prId" : 27874,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27874#pullrequestreview-275431578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9db4def3-7bff-46cb-b243-909d180fbeba",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in _reconstruct_data can you change this\r\n```\r\nvalues = values.astype(dtype)\r\n```\r\nto pass ```copy=False``` ",
        "createdAt" : "2019-08-15T13:38:09Z",
        "updatedAt" : "2019-10-06T23:59:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1aec96090d3f8641d994e0e0393ad4ddd592cf9e",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +397,401 @@    table = htable(len(values))\n    uniques = table.unique(values)\n    uniques = _reconstruct_data(uniques, original.dtype, original)\n    return uniques\n"
  }
]