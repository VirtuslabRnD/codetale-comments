[
  {
    "id" : "bb85392f-205a-4b11-a5f3-01b6d33550b7",
    "prId" : 4502,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6ec70f7-0d98-4aac-8c6e-a59b908b7743",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe? add `raise_on_error=False`, which you could automatically just exclude non-numeric\n\nor just do it by definition; I think we do this is for example describe (it should just work); \n",
        "createdAt" : "2013-08-26T12:41:42Z",
        "updatedAt" : "2013-08-26T12:41:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bd8e2dde-5c5d-4e67-a0e7-af02f098ebf5",
        "parentId" : "a6ec70f7-0d98-4aac-8c6e-a59b908b7743",
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "I think Categorical was the thing that throws.\n\nIs there a neat way to just include only numerics from a Series?\n\nMaybe call `numeric_only` like groupby: https://github.com/pydata/pandas/commit/dda23636354136f753561ead07bdbe88b21fa5ae. Not sure it should be default though.\n",
        "createdAt" : "2013-08-26T12:49:16Z",
        "updatedAt" : "2013-08-26T12:49:16Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      },
      {
        "id" : "aceb43ca-7daf-4aea-9a41-3f46fbf030c4",
        "parentId" : "a6ec70f7-0d98-4aac-8c6e-a59b908b7743",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "going to push somethign to enable `_get_numeric_data/_get_bool_data` in all NDFrame shortly\n",
        "createdAt" : "2013-08-26T13:11:57Z",
        "updatedAt" : "2013-08-26T13:11:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "85f191cbdca7f1d83aab05e226cb921b03e9b638",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +149,153 @@\n\ndef value_counts(values, sort=True, ascending=False, normalize=False, bins=None):\n    \"\"\"\n    Compute a histogram of the counts of non-null values"
  },
  {
    "id" : "02b847af-cd96-4bb2-9f09-311b4bccc738",
    "prId" : 7424,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df762937-e2dc-4843-9d48-ecc999cdb075",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think this should be `True`?\n",
        "createdAt" : "2014-06-17T12:51:17Z",
        "updatedAt" : "2014-06-17T12:51:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "26139f3804cdc25d29325972a24c55e10cd2567f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +185,189 @@        Rather than count values, group them into half-open bins,\n        convenience for pd.cut, only works with numeric data\n    dropna : boolean, default False\n        Don't include counts of NaN\n"
  },
  {
    "id" : "7a0329c2-c1e3-4f4c-933d-3bc0c14cde58",
    "prId" : 15929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15929#pullrequestreview-31449836",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c06416c-b949-4b43-b55e-4f84787fca28",
        "parentId" : null,
        "authorId" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "body" : "Not a big deal, but seems a little strange that `value_counts_...` and `duplicated_...` are free functions and not based on hashtable classes? Would unify the the dispatch.",
        "createdAt" : "2017-04-06T22:33:19Z",
        "updatedAt" : "2017-04-06T23:06:38Z",
        "lastEditedBy" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "tags" : [
        ]
      },
      {
        "id" : "df70e4d9-88e9-41f7-891c-b0d5337dd04b",
        "parentId" : "7c06416c-b949-4b43-b55e-4f84787fca28",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not sure what you mean. These are cython functions.",
        "createdAt" : "2017-04-06T22:55:32Z",
        "updatedAt" : "2017-04-06T23:06:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "76653eb6e4a63152c5a6ceaad2d8d4af6a667415",
    "line" : 576,
    "diffHunk" : "@@ -1,1 +585,589 @@\n        # TODO: handle uint8\n        f = getattr(htable, \"value_count_{dtype}\".format(dtype=ndtype))\n        keys, counts = f(values, dropna)\n"
  },
  {
    "id" : "67b5588a-122a-48e9-8ca0-456e3d34c574",
    "prId" : 15929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15929#pullrequestreview-31551694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d4a94f4-6876-4cb7-973f-0591ed125504",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is exposed at the top-level, so can you keep the docstring of `unique` ? (put it in `unique1D`)",
        "createdAt" : "2017-04-07T12:40:33Z",
        "updatedAt" : "2017-04-07T12:47:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b688e0d9-7291-472c-91f9-47a355e18e83",
        "parentId" : "9d4a94f4-6876-4cb7-973f-0591ed125504",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes, i'll push it.",
        "createdAt" : "2017-04-07T12:49:42Z",
        "updatedAt" : "2017-04-07T12:49:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "76653eb6e4a63152c5a6ceaad2d8d4af6a667415",
    "line" : 360,
    "diffHunk" : "@@ -1,1 +279,283 @@\n\nunique = unique1d\n\n"
  },
  {
    "id" : "6d8a9628-06fd-4d24-97e5-1b4a59dcd49a",
    "prId" : 15929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15929#pullrequestreview-34527475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7817fc9c-7b5b-489c-9ccd-ab52dd997656",
        "parentId" : null,
        "authorId" : "e415801c-69ed-4339-9d12-a31599b4bb41",
        "body" : "EDIT: The better way seems to be returning `f, values` here",
        "createdAt" : "2017-04-25T05:38:42Z",
        "updatedAt" : "2017-04-25T05:38:42Z",
        "lastEditedBy" : "e415801c-69ed-4339-9d12-a31599b4bb41",
        "tags" : [
        ]
      },
      {
        "id" : "391a4da5-94fb-45bd-9d32-b68c77085876",
        "parentId" : "7817fc9c-7b5b-489c-9ccd-ab52dd997656",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "thanks\r\nhttps://github.com/pandas-dev/pandas/pull/16128",
        "createdAt" : "2017-04-25T10:47:05Z",
        "updatedAt" : "2017-04-25T10:47:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "76653eb6e4a63152c5a6ceaad2d8d4af6a667415",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +213,217 @@        if lib.infer_dtype(values) in ['string']:\n            try:\n                f = func_map['string']\n            except KeyError:\n                pass"
  },
  {
    "id" : "8d4b4c72-1b5f-4788-9a9a-939e10efadf6",
    "prId" : 17006,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17006#pullrequestreview-50779661",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "951a8f83-78fb-40e8-ab7d-5a7fd013a0ea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "check perf on some of the algos\r\nesp isin\r\n",
        "createdAt" : "2017-07-18T09:17:32Z",
        "updatedAt" : "2017-07-18T09:17:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "13b4c5b0-d404-4a86-a8e8-512924d25d2a",
        "parentId" : "951a8f83-78fb-40e8-ab7d-5a7fd013a0ea",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I didn't see any noticeable perf degradations on my machine.",
        "createdAt" : "2017-07-18T14:53:34Z",
        "updatedAt" : "2017-07-18T14:53:35Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "a653d9cc-beda-462e-9663-9ed69945c08b",
        "parentId" : "951a8f83-78fb-40e8-ab7d-5a7fd013a0ea",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did you run the asv? this can degrade as its in a critical path. notice there is *already* a check for object type later on. This function  receives LOTS of input.",
        "createdAt" : "2017-07-18T23:30:46Z",
        "updatedAt" : "2017-07-18T23:30:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9f257dfa-1742-4bbb-8b71-be5987a55358",
        "parentId" : "951a8f83-78fb-40e8-ab7d-5a7fd013a0ea",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Not quite: the existing check is for the `values`.  This is for the `dtype` specified.  This is essentially an `O(1)` operation.\r\n\r\nAnd yes, I did check performance (see my comment above), and I didn't see any issues on my machine.",
        "createdAt" : "2017-07-19T00:35:51Z",
        "updatedAt" : "2017-07-19T00:36:03Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2cec7774896545169f39b36d7c13a42a69c1a35",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +66,70 @@    # we check some simple dtypes first\n    try:\n        if is_object_dtype(dtype):\n            return _ensure_object(np.asarray(values)), 'object', 'object'\n        if is_bool_dtype(values) or is_bool_dtype(dtype):"
  },
  {
    "id" : "cdbe6413-f0b7-4306-923b-d164c6a68b3b",
    "prId" : 19751,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19751#pullrequestreview-97689500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c32694af-6618-421c-99ae-7c971070524f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ca you add a test which catches this, AND see if we have any existing cases of actually passing this arg",
        "createdAt" : "2018-02-19T15:51:39Z",
        "updatedAt" : "2018-02-21T11:37:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "aa230eb8-d771-4873-a30d-9401bfd3a0d1",
        "parentId" : "c32694af-6618-421c-99ae-7c971070524f",
        "authorId" : "da19b543-f846-4415-b573-9ab03a8005fd",
        "body" : "Sure thing.  I added two additional tests.  Please refer to ab47916b0ab54203e4ba5677bdc4da815f5b4280.\r\n\r\nI did not find any cases in the Repo where ``factorize()`` is called with an ``order`` parameter.",
        "createdAt" : "2018-02-20T01:43:40Z",
        "updatedAt" : "2018-02-21T11:37:12Z",
        "lastEditedBy" : "da19b543-f846-4415-b573-9ab03a8005fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7ed3c41b6d0e63a08aa5b847a8c1c0565d13e6b",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +438,442 @@\n\n@deprecate_kwarg(old_arg_name='order', new_arg_name=None)\ndef factorize(values, sort=False, order=None, na_sentinel=-1, size_hint=None):\n    \"\"\""
  },
  {
    "id" : "828d495c-e028-45bf-a846-e0ce95803320",
    "prId" : 19938,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19938#pullrequestreview-102788172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c58fb921-778f-4a80-b74d-b3dd62f06370",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Removed all the sorting from Categorical.factorize. All that logic is here.\r\n\r\nI don't think we want to just call `safe_sort` for two reasons\r\n\r\n1. that function does a lot of unnescessary work when we know that `uniques` is an ndarray or EA.\r\n2. It coerces categoricals to object ndarrays.\r\n2. EAs (like Categorical) may have special sorting rules.\r\n\r\nOn some small bencharks (10,000 elements) this is about 25-40% faster. The only slow case, for which we still need safe_sort, is when the array is mixed. In that case things are about 10% slower.",
        "createdAt" : "2018-03-09T21:03:17Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e006d1a187b35941da3a548415f097160e5bb92",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +516,520 @@    if sort and len(uniques) > 0:\n        from pandas.core.sorting import safe_sort\n        try:\n            order = uniques.argsort()\n            order2 = order.argsort()"
  },
  {
    "id" : "bdf9d033-f95e-4db1-b8b3-f2324eeecfef",
    "prId" : 19938,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19938#pullrequestreview-103399393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5630d5c9-c326-4947-ad70-46896e338c93",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could move to the except (but no big deal)",
        "createdAt" : "2018-03-13T12:04:59Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e006d1a187b35941da3a548415f097160e5bb92",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +515,519 @@\n    if sort and len(uniques) > 0:\n        from pandas.core.sorting import safe_sort\n        try:\n            order = uniques.argsort()"
  },
  {
    "id" : "a73692bc-0a0c-48a6-a931-336ffa07f8a3",
    "prId" : 19938,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19938#pullrequestreview-103403152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdee7ac5-4342-455e-b76c-5e5ac11b76ca",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this actually be a check on the values if they have a ``.factorize()`` method (or check ``is_extension_array``)? instead of specifically checking for categorical? (of course categorical will pass these checks). as this will then make ``pd.factorize(an_extension_array)`` work?",
        "createdAt" : "2018-03-13T12:06:31Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e9da8347-3c36-4df1-98be-4a29ce513b17",
        "parentId" : "fdee7ac5-4342-455e-b76c-5e5ac11b76ca",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This PR is just a bugfix for categorical. But the structure will be very similar (I'll just change `is_categorical_dtype` to `is_extension_array_dtype`.)\r\n\r\nI'll implement EA.factorize today hopefully, but have to get things like unique and argsort working first.",
        "createdAt" : "2018-03-13T12:18:19Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e006d1a187b35941da3a548415f097160e5bb92",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +507,511 @@        labels, uniques = values.factorize()\n        dtype = original.dtype\n    else:\n        values, dtype, _ = _ensure_data(values)\n        check_nulls = not is_integer_dtype(original)"
  },
  {
    "id" : "af477bc7-38ef-4622-987f-6f8e445f421e",
    "prId" : 20361,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20361#pullrequestreview-104580917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b0388a9-170e-4391-9424-935765750d97",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Note: this was a bug in #19938 where I forgot to pass this through. It's covered by our extension tests.",
        "createdAt" : "2018-03-16T14:14:47Z",
        "updatedAt" : "2018-03-27T11:18:03Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c06da3a7cc52240159cda296649627d49b5f4bb4",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +606,610 @@    if is_extension_array_dtype(values):\n        values = getattr(values, '_values', values)\n        labels, uniques = values.factorize(na_sentinel=na_sentinel)\n        dtype = original.dtype\n    else:"
  },
  {
    "id" : "49e600a8-c9e9-4d22-8525-c794c329c8f5",
    "prId" : 20361,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20361#pullrequestreview-104727390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc2097c3-05b3-495d-b65a-e2bdd475ab68",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add ``pandas.unique`` here",
        "createdAt" : "2018-03-16T21:48:32Z",
        "updatedAt" : "2018-03-27T11:18:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c06da3a7cc52240159cda296649627d49b5f4bb4",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +506,510 @@    See Also\n    --------\n    pandas.cut : Discretize continuous-valued array.\n    pandas.unique : Find the unique valuse in an array.\n"
  },
  {
    "id" : "fd230809-694f-49dc-b4b4-0f46283d939f",
    "prId" : 20361,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20361#pullrequestreview-104764933",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69bf25a0-5c48-430f-8044-4b31689df068",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "If it is only a single entry, can we make this a variable (eg `_shared_docstring_factorize`) ?",
        "createdAt" : "2018-03-16T21:56:46Z",
        "updatedAt" : "2018-03-27T11:18:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f9b6f07a-1b2c-4e6b-8b97-7e338f60d024",
        "parentId" : "69bf25a0-5c48-430f-8044-4b31689df068",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I have a slight preference for keeping it as a dictionary, since it looks like the docstrings for `unique` and `value_counts` can be shared between ops and base. https://github.com/pandas-dev/pandas/issues/20390",
        "createdAt" : "2018-03-17T12:23:29Z",
        "updatedAt" : "2018-03-27T11:18:03Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c06da3a7cc52240159cda296649627d49b5f4bb4",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +474,478 @@\n\n_shared_docs['factorize'] = \"\"\"\n    Encode the object as an enumerated type or categorical variable.\n"
  }
]