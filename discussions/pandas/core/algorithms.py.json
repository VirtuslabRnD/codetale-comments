[
  {
    "id" : "bb85392f-205a-4b11-a5f3-01b6d33550b7",
    "prId" : 4502,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6ec70f7-0d98-4aac-8c6e-a59b908b7743",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "maybe? add `raise_on_error=False`, which you could automatically just exclude non-numeric\n\nor just do it by definition; I think we do this is for example describe (it should just work); \n",
        "createdAt" : "2013-08-26T12:41:42Z",
        "updatedAt" : "2013-08-26T12:41:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "bd8e2dde-5c5d-4e67-a0e7-af02f098ebf5",
        "parentId" : "a6ec70f7-0d98-4aac-8c6e-a59b908b7743",
        "authorId" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "body" : "I think Categorical was the thing that throws.\n\nIs there a neat way to just include only numerics from a Series?\n\nMaybe call `numeric_only` like groupby: https://github.com/pydata/pandas/commit/dda23636354136f753561ead07bdbe88b21fa5ae. Not sure it should be default though.\n",
        "createdAt" : "2013-08-26T12:49:16Z",
        "updatedAt" : "2013-08-26T12:49:16Z",
        "lastEditedBy" : "aeb7e171-52e2-4faa-8a7c-32d6a9d2c2be",
        "tags" : [
        ]
      },
      {
        "id" : "aceb43ca-7daf-4aea-9a41-3f46fbf030c4",
        "parentId" : "a6ec70f7-0d98-4aac-8c6e-a59b908b7743",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "going to push somethign to enable `_get_numeric_data/_get_bool_data` in all NDFrame shortly\n",
        "createdAt" : "2013-08-26T13:11:57Z",
        "updatedAt" : "2013-08-26T13:11:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "85f191cbdca7f1d83aab05e226cb921b03e9b638",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +149,153 @@\n\ndef value_counts(values, sort=True, ascending=False, normalize=False, bins=None):\n    \"\"\"\n    Compute a histogram of the counts of non-null values"
  },
  {
    "id" : "02b847af-cd96-4bb2-9f09-311b4bccc738",
    "prId" : 7424,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df762937-e2dc-4843-9d48-ecc999cdb075",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I think this should be `True`?\n",
        "createdAt" : "2014-06-17T12:51:17Z",
        "updatedAt" : "2014-06-17T12:51:17Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "26139f3804cdc25d29325972a24c55e10cd2567f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +185,189 @@        Rather than count values, group them into half-open bins,\n        convenience for pd.cut, only works with numeric data\n    dropna : boolean, default False\n        Don't include counts of NaN\n"
  },
  {
    "id" : "7a0329c2-c1e3-4f4c-933d-3bc0c14cde58",
    "prId" : 15929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15929#pullrequestreview-31449836",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c06416c-b949-4b43-b55e-4f84787fca28",
        "parentId" : null,
        "authorId" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "body" : "Not a big deal, but seems a little strange that `value_counts_...` and `duplicated_...` are free functions and not based on hashtable classes? Would unify the the dispatch.",
        "createdAt" : "2017-04-06T22:33:19Z",
        "updatedAt" : "2017-04-06T23:06:38Z",
        "lastEditedBy" : "aa76ca2b-2c97-45f3-bb6a-3e0ee670395b",
        "tags" : [
        ]
      },
      {
        "id" : "df70e4d9-88e9-41f7-891c-b0d5337dd04b",
        "parentId" : "7c06416c-b949-4b43-b55e-4f84787fca28",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not sure what you mean. These are cython functions.",
        "createdAt" : "2017-04-06T22:55:32Z",
        "updatedAt" : "2017-04-06T23:06:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "76653eb6e4a63152c5a6ceaad2d8d4af6a667415",
    "line" : 576,
    "diffHunk" : "@@ -1,1 +585,589 @@\n        # TODO: handle uint8\n        f = getattr(htable, \"value_count_{dtype}\".format(dtype=ndtype))\n        keys, counts = f(values, dropna)\n"
  },
  {
    "id" : "67b5588a-122a-48e9-8ca0-456e3d34c574",
    "prId" : 15929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15929#pullrequestreview-31551694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d4a94f4-6876-4cb7-973f-0591ed125504",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This is exposed at the top-level, so can you keep the docstring of `unique` ? (put it in `unique1D`)",
        "createdAt" : "2017-04-07T12:40:33Z",
        "updatedAt" : "2017-04-07T12:47:26Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b688e0d9-7291-472c-91f9-47a355e18e83",
        "parentId" : "9d4a94f4-6876-4cb7-973f-0591ed125504",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes, i'll push it.",
        "createdAt" : "2017-04-07T12:49:42Z",
        "updatedAt" : "2017-04-07T12:49:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "76653eb6e4a63152c5a6ceaad2d8d4af6a667415",
    "line" : 360,
    "diffHunk" : "@@ -1,1 +279,283 @@\n\nunique = unique1d\n\n"
  },
  {
    "id" : "6d8a9628-06fd-4d24-97e5-1b4a59dcd49a",
    "prId" : 15929,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/15929#pullrequestreview-34527475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7817fc9c-7b5b-489c-9ccd-ab52dd997656",
        "parentId" : null,
        "authorId" : "e415801c-69ed-4339-9d12-a31599b4bb41",
        "body" : "EDIT: The better way seems to be returning `f, values` here",
        "createdAt" : "2017-04-25T05:38:42Z",
        "updatedAt" : "2017-04-25T05:38:42Z",
        "lastEditedBy" : "e415801c-69ed-4339-9d12-a31599b4bb41",
        "tags" : [
        ]
      },
      {
        "id" : "391a4da5-94fb-45bd-9d32-b68c77085876",
        "parentId" : "7817fc9c-7b5b-489c-9ccd-ab52dd997656",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "thanks\r\nhttps://github.com/pandas-dev/pandas/pull/16128",
        "createdAt" : "2017-04-25T10:47:05Z",
        "updatedAt" : "2017-04-25T10:47:05Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "76653eb6e4a63152c5a6ceaad2d8d4af6a667415",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +213,217 @@        if lib.infer_dtype(values) in ['string']:\n            try:\n                f = func_map['string']\n            except KeyError:\n                pass"
  },
  {
    "id" : "8d4b4c72-1b5f-4788-9a9a-939e10efadf6",
    "prId" : 17006,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17006#pullrequestreview-50779661",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "951a8f83-78fb-40e8-ab7d-5a7fd013a0ea",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "check perf on some of the algos\r\nesp isin\r\n",
        "createdAt" : "2017-07-18T09:17:32Z",
        "updatedAt" : "2017-07-18T09:17:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "13b4c5b0-d404-4a86-a8e8-512924d25d2a",
        "parentId" : "951a8f83-78fb-40e8-ab7d-5a7fd013a0ea",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "I didn't see any noticeable perf degradations on my machine.",
        "createdAt" : "2017-07-18T14:53:34Z",
        "updatedAt" : "2017-07-18T14:53:35Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "a653d9cc-beda-462e-9663-9ed69945c08b",
        "parentId" : "951a8f83-78fb-40e8-ab7d-5a7fd013a0ea",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "did you run the asv? this can degrade as its in a critical path. notice there is *already* a check for object type later on. This function  receives LOTS of input.",
        "createdAt" : "2017-07-18T23:30:46Z",
        "updatedAt" : "2017-07-18T23:30:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "9f257dfa-1742-4bbb-8b71-be5987a55358",
        "parentId" : "951a8f83-78fb-40e8-ab7d-5a7fd013a0ea",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Not quite: the existing check is for the `values`.  This is for the `dtype` specified.  This is essentially an `O(1)` operation.\r\n\r\nAnd yes, I did check performance (see my comment above), and I didn't see any issues on my machine.",
        "createdAt" : "2017-07-19T00:35:51Z",
        "updatedAt" : "2017-07-19T00:36:03Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2cec7774896545169f39b36d7c13a42a69c1a35",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +66,70 @@    # we check some simple dtypes first\n    try:\n        if is_object_dtype(dtype):\n            return _ensure_object(np.asarray(values)), 'object', 'object'\n        if is_bool_dtype(values) or is_bool_dtype(dtype):"
  },
  {
    "id" : "cdbe6413-f0b7-4306-923b-d164c6a68b3b",
    "prId" : 19751,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19751#pullrequestreview-97689500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c32694af-6618-421c-99ae-7c971070524f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ca you add a test which catches this, AND see if we have any existing cases of actually passing this arg",
        "createdAt" : "2018-02-19T15:51:39Z",
        "updatedAt" : "2018-02-21T11:37:12Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "aa230eb8-d771-4873-a30d-9401bfd3a0d1",
        "parentId" : "c32694af-6618-421c-99ae-7c971070524f",
        "authorId" : "da19b543-f846-4415-b573-9ab03a8005fd",
        "body" : "Sure thing.  I added two additional tests.  Please refer to ab47916b0ab54203e4ba5677bdc4da815f5b4280.\r\n\r\nI did not find any cases in the Repo where ``factorize()`` is called with an ``order`` parameter.",
        "createdAt" : "2018-02-20T01:43:40Z",
        "updatedAt" : "2018-02-21T11:37:12Z",
        "lastEditedBy" : "da19b543-f846-4415-b573-9ab03a8005fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7ed3c41b6d0e63a08aa5b847a8c1c0565d13e6b",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +438,442 @@\n\n@deprecate_kwarg(old_arg_name='order', new_arg_name=None)\ndef factorize(values, sort=False, order=None, na_sentinel=-1, size_hint=None):\n    \"\"\""
  },
  {
    "id" : "828d495c-e028-45bf-a846-e0ce95803320",
    "prId" : 19938,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19938#pullrequestreview-102788172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c58fb921-778f-4a80-b74d-b3dd62f06370",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Removed all the sorting from Categorical.factorize. All that logic is here.\r\n\r\nI don't think we want to just call `safe_sort` for two reasons\r\n\r\n1. that function does a lot of unnescessary work when we know that `uniques` is an ndarray or EA.\r\n2. It coerces categoricals to object ndarrays.\r\n2. EAs (like Categorical) may have special sorting rules.\r\n\r\nOn some small bencharks (10,000 elements) this is about 25-40% faster. The only slow case, for which we still need safe_sort, is when the array is mixed. In that case things are about 10% slower.",
        "createdAt" : "2018-03-09T21:03:17Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e006d1a187b35941da3a548415f097160e5bb92",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +516,520 @@    if sort and len(uniques) > 0:\n        from pandas.core.sorting import safe_sort\n        try:\n            order = uniques.argsort()\n            order2 = order.argsort()"
  },
  {
    "id" : "bdf9d033-f95e-4db1-b8b3-f2324eeecfef",
    "prId" : 19938,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19938#pullrequestreview-103399393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5630d5c9-c326-4947-ad70-46896e338c93",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could move to the except (but no big deal)",
        "createdAt" : "2018-03-13T12:04:59Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e006d1a187b35941da3a548415f097160e5bb92",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +515,519 @@\n    if sort and len(uniques) > 0:\n        from pandas.core.sorting import safe_sort\n        try:\n            order = uniques.argsort()"
  },
  {
    "id" : "a73692bc-0a0c-48a6-a931-336ffa07f8a3",
    "prId" : 19938,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19938#pullrequestreview-103403152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdee7ac5-4342-455e-b76c-5e5ac11b76ca",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "shouldn't this actually be a check on the values if they have a ``.factorize()`` method (or check ``is_extension_array``)? instead of specifically checking for categorical? (of course categorical will pass these checks). as this will then make ``pd.factorize(an_extension_array)`` work?",
        "createdAt" : "2018-03-13T12:06:31Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e9da8347-3c36-4df1-98be-4a29ce513b17",
        "parentId" : "fdee7ac5-4342-455e-b76c-5e5ac11b76ca",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This PR is just a bugfix for categorical. But the structure will be very similar (I'll just change `is_categorical_dtype` to `is_extension_array_dtype`.)\r\n\r\nI'll implement EA.factorize today hopefully, but have to get things like unique and argsort working first.",
        "createdAt" : "2018-03-13T12:18:19Z",
        "updatedAt" : "2018-03-14T11:29:35Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e006d1a187b35941da3a548415f097160e5bb92",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +507,511 @@        labels, uniques = values.factorize()\n        dtype = original.dtype\n    else:\n        values, dtype, _ = _ensure_data(values)\n        check_nulls = not is_integer_dtype(original)"
  },
  {
    "id" : "af477bc7-38ef-4622-987f-6f8e445f421e",
    "prId" : 20361,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20361#pullrequestreview-104580917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b0388a9-170e-4391-9424-935765750d97",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Note: this was a bug in #19938 where I forgot to pass this through. It's covered by our extension tests.",
        "createdAt" : "2018-03-16T14:14:47Z",
        "updatedAt" : "2018-03-27T11:18:03Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c06da3a7cc52240159cda296649627d49b5f4bb4",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +606,610 @@    if is_extension_array_dtype(values):\n        values = getattr(values, '_values', values)\n        labels, uniques = values.factorize(na_sentinel=na_sentinel)\n        dtype = original.dtype\n    else:"
  },
  {
    "id" : "49e600a8-c9e9-4d22-8525-c794c329c8f5",
    "prId" : 20361,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20361#pullrequestreview-104727390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc2097c3-05b3-495d-b65a-e2bdd475ab68",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add ``pandas.unique`` here",
        "createdAt" : "2018-03-16T21:48:32Z",
        "updatedAt" : "2018-03-27T11:18:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c06da3a7cc52240159cda296649627d49b5f4bb4",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +506,510 @@    See Also\n    --------\n    pandas.cut : Discretize continuous-valued array.\n    pandas.unique : Find the unique valuse in an array.\n"
  },
  {
    "id" : "fd230809-694f-49dc-b4b4-0f46283d939f",
    "prId" : 20361,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20361#pullrequestreview-104764933",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69bf25a0-5c48-430f-8044-4b31689df068",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "If it is only a single entry, can we make this a variable (eg `_shared_docstring_factorize`) ?",
        "createdAt" : "2018-03-16T21:56:46Z",
        "updatedAt" : "2018-03-27T11:18:03Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "f9b6f07a-1b2c-4e6b-8b97-7e338f60d024",
        "parentId" : "69bf25a0-5c48-430f-8044-4b31689df068",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I have a slight preference for keeping it as a dictionary, since it looks like the docstrings for `unique` and `value_counts` can be shared between ops and base. https://github.com/pandas-dev/pandas/issues/20390",
        "createdAt" : "2018-03-17T12:23:29Z",
        "updatedAt" : "2018-03-27T11:18:03Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c06da3a7cc52240159cda296649627d49b5f4bb4",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +474,478 @@\n\n_shared_docs['factorize'] = \"\"\"\n    Encode the object as an enumerated type or categorical variable.\n"
  },
  {
    "id" : "a0a77823-55fb-4c85-963c-db9c921b0bb3",
    "prId" : 20473,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20473#pullrequestreview-106864442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62ac83d2-b648-4c88-8d84-94159fe2364d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use ``pandas.core.dtypes.missing.na_value_for_dtype`` (or maybe add a kwarg to return the underlying value). just want to try to keep this logic in 1 place.",
        "createdAt" : "2018-03-25T13:47:28Z",
        "updatedAt" : "2018-03-26T12:15:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5fceed61-17b8-4090-98ef-ffa4d8c76ab5",
        "parentId" : "62ac83d2-b648-4c88-8d84-94159fe2364d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Do you know why `na_value_for_dtype(PeriodDtype)` is nan? It should be NaT, right?",
        "createdAt" : "2018-03-26T11:32:33Z",
        "updatedAt" : "2018-03-26T12:15:20Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "465d458573c99ee218299c2713c2e5abd305907c",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +514,518 @@    else:\n        values, dtype, _ = _ensure_data(values)\n\n        if (is_datetime64_any_dtype(original) or\n                is_timedelta64_dtype(original) or"
  },
  {
    "id" : "8e8c84bd-9747-4581-a00f-8d4f6a3a5915",
    "prId" : 20522,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20522#pullrequestreview-110498750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e08a6450-c488-4a25-9e0f-70c32c0f1f6c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if u change this to is_extension_type does everything still work?",
        "createdAt" : "2018-04-07T22:40:30Z",
        "updatedAt" : "2018-04-25T10:01:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0d5d30da-de44-4ef6-ad85-976b90965fe7",
        "parentId" : "e08a6450-c488-4a25-9e0f-70c32c0f1f6c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, can you add a note: TODO(extension) here",
        "createdAt" : "2018-04-09T15:21:37Z",
        "updatedAt" : "2018-04-25T10:01:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b680cd239a6150b42b7cf8554f38c5c3beec368",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +408,412 @@        values = construct_1d_object_array_from_listlike(list(values))\n\n    if is_categorical_dtype(comps):\n        # TODO(extension)\n        # handle categoricals"
  },
  {
    "id" : "9a47846f-32b0-4afb-8f26-b05adb0d7fe3",
    "prId" : 22034,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22034#pullrequestreview-197307639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92181751-5a98-4bdf-a637-cbec76dcfeb0",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this can interactive with Nullable int types, is there testing on this?",
        "createdAt" : "2019-01-28T12:31:36Z",
        "updatedAt" : "2019-02-23T20:27:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fc903caa-0583-4c4a-ab84-ec9b89e3b7a2",
        "parentId" : "92181751-5a98-4bdf-a637-cbec76dcfeb0",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "It really should only let integer ndarrays reach this clause, else things get needlessly complex. I added a guard for this.\r\n",
        "createdAt" : "2019-01-28T23:12:35Z",
        "updatedAt" : "2019-02-23T20:27:26Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbe22624b6d815f9d946e21d1d4e00c282dc96d",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +1783,1787 @@        # Before searching below, we therefore try to give `value` the\n        # same dtype as `arr`, while guarding against integer overflows.\n        iinfo = np.iinfo(arr.dtype.type)\n        value_arr = np.array([value]) if is_scalar(value) else np.array(value)\n        if (value_arr >= iinfo.min).all() and (value_arr <= iinfo.max).all():"
  },
  {
    "id" : "a8f77af7-90a3-46e5-aa76-ee2dbd7ea56a",
    "prId" : 22161,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22161#pullrequestreview-143067789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4668e78-c3aa-43c8-9f49-e17762a4e134",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so we actually should prob use ``pandas.core.dtypes.cast.construct_1d_array_preserving_na`` which is even better here. further pls run the performance suite for things like factorize, value_counts, isin, this a very performance sensitive section.",
        "createdAt" : "2018-08-01T21:47:35Z",
        "updatedAt" : "2018-08-09T22:41:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1f023c3c-16a3-4125-83bd-cf208f9c8e52",
        "parentId" : "a4668e78-c3aa-43c8-9f49-e17762a4e134",
        "authorId" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "body" : "@jreback Actually, [pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na](https://github.com/pandas-dev/pandas/blob/master/pandas/core/dtypes/cast.py#L1245) would not work for two reasons:\r\n\r\n 1. For  `[42, 's']`  it returns `array(['42', 's'], dtype='<U11')` and not the wanted `array([42, 's'], dtype=object))`, not sure this is the intended behavior of the function though\r\n 2. For `[np.nan]` it returns `array([nan], dtype=float64)` which leads to `result[0] is np.nan` being False, but we would like to keep the id of the object.",
        "createdAt" : "2018-08-03T06:34:59Z",
        "updatedAt" : "2018-08-09T22:41:18Z",
        "lastEditedBy" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab06c38fc23614275f3a6c317508fb27715db203",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +135,139 @@\n    # we have failed, return object\n    values = np.asarray(values, dtype=np.object)\n    return ensure_object(values), 'object', 'object'\n"
  },
  {
    "id" : "088008c9-d760-4f45-9c8e-57d43af46023",
    "prId" : 25592,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25592#pullrequestreview-211850051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "588698cd-7205-49a6-82e9-5ed65c7c3c45",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Adding this if/else check to keep the usage of `take_1d` when possible. It was added some time ago to improve performance compared to `safe_sort`, but thus does not handle non-default na_sentinels. \r\nIf we want to keep the code simpler, I can also remove the `take_1d` alltogether, but that would give a performance degradation compared to the last release.",
        "createdAt" : "2019-03-07T15:17:47Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "835b8ff6-89e0-4ee2-8934-980917225f69",
        "parentId" : "588698cd-7205-49a6-82e9-5ed65c7c3c45",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This seems reasonable. Alternatively, `safe_sort` could do this try / except?",
        "createdAt" : "2019-03-07T15:23:44Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "11deb3ee-14d6-4814-a416-522212375a64",
        "parentId" : "588698cd-7205-49a6-82e9-5ed65c7c3c45",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "You mean the if / else? (as it would also have to deal with the non-default na_sentinels) \r\n",
        "createdAt" : "2019-03-07T15:25:24Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ed6d0560-05c0-4f32-82a1-bed371b296cc",
        "parentId" : "588698cd-7205-49a6-82e9-5ed65c7c3c45",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Hmm yeah, it would need that as well. But I think it's probably fine here, unless we see this pattern coming up often when using safe_sort.",
        "createdAt" : "2019-03-07T15:32:33Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9c880e0d547d28d594c07057705e3350ae942af",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +621,625 @@        from pandas.core.sorting import safe_sort\n        if na_sentinel == -1:\n            # GH-25409 take_1d only works for na_sentinels of -1\n            try:\n                order = uniques.argsort()"
  },
  {
    "id" : "b68bb3ea-ccc7-411d-89dd-5a72aaafd08b",
    "prId" : 25592,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25592#pullrequestreview-213032473",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "woa? this is way repetitive. why is what you have in the try not enough here?",
        "createdAt" : "2019-03-07T22:07:12Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "92dbeb6c-3781-4dc3-9151-93470385c693",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "`take_1d` cannot handle custom na_sentinels. See the discussion in the issue.",
        "createdAt" : "2019-03-07T22:11:01Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "311ec469-51f5-48b5-a7f4-d9eb6b1a68ad",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I read the issue. this is fix is way too hacky. A custom sentinel is not a blocking issue for 0.24.2",
        "createdAt" : "2019-03-07T22:56:10Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e0f413df-64e6-4463-8d63-97c39348fdd8",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Well, as I said above, I can also simply remove the if/else and try/except completely, by not using `take_1d` if that is preferred. A small performance gain is not worth introducing (now knowingly) a regression in behaviour.\r\n\r\nBut personally, I also have no problem with just merging this PR as is.",
        "createdAt" : "2019-03-07T23:09:21Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "74e9cb6c-9ff9-4ed7-819d-0113c500345a",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is just adding technical debt and am -1 in merging as is ",
        "createdAt" : "2019-03-08T00:12:53Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "afd4edd4-bbd8-4cc6-85d7-5a43e37a85b3",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you then give an indication with what you would be OK, instead of just saying -1? \r\nEg I already mentioned that I can remove the usage of take_1d all together (so how it was before 0.23)",
        "createdAt" : "2019-03-08T11:10:45Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "25cce35b-eab2-456d-93ee-ab3ddcfd4e65",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "> Eg I already mentioned that I can remove the usage of take_1d all together (so how it was before 0.23)\r\n\r\nthis sounds fine,  though don't remember why this was changed.",
        "createdAt" : "2019-03-08T14:51:28Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f368ab18-7963-4d8d-a2a7-8bdf00b6af5a",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Some reasoning is explained here: https://github.com/pandas-dev/pandas/pull/19938#discussion_r173567099 (mainly performance I think)",
        "createdAt" : "2019-03-08T16:54:47Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a2965fe0-33bc-469e-9d4f-8794987fa82f",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, then let's just defer this change to 0.25.0 and do this w/o the multiple repetitive try/excepts. ",
        "createdAt" : "2019-03-10T22:24:46Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b7cf3f5b-56fe-4d32-b70f-7423aa393e0d",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "If you don't like the extra if/else, but are OK with reverting to only `safe_sort` bu only for 0.25.0: would you be OK with the current PR for 0.24.2, if I directly do a follow-up PR to remove the if/else try/except on master / for 0.25.0 ?",
        "createdAt" : "2019-03-11T10:17:25Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "9ef3df4f-d667-496b-ac1e-080ab22ad426",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@jreback OK?",
        "createdAt" : "2019-03-11T16:21:40Z",
        "updatedAt" : "2019-03-11T17:21:01Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "06da5511-afc5-4cc6-a396-0d47094b6bd8",
        "parentId" : "2e2d62dd-d614-4ee9-be65-244c12503d8c",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This would be good for 0.24.2.\r\n\r\nWhat's the duplicate code / tech debt here? The call to `safe_sort`?",
        "createdAt" : "2019-03-11T19:12:48Z",
        "updatedAt" : "2019-03-11T19:12:56Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9c880e0d547d28d594c07057705e3350ae942af",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +627,631 @@                labels = take_1d(order2, labels, fill_value=na_sentinel)\n                uniques = uniques.take(order)\n            except TypeError:\n                # Mixed types, where uniques.argsort fails.\n                uniques, labels = safe_sort(uniques, labels,"
  },
  {
    "id" : "1b9da7a6-423f-40f3-9eac-06ec1f886d19",
    "prId" : 25592,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/25592#pullrequestreview-213626653",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97b6a8da-bd50-49fd-99fb-58350a6309e8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I don't like the way this is written because it repeats the call to safe_sort. if you can avoid that (easy enough, just use a pass in the except), *then* call safe_sort if needed (assign to uniques, lables as NOne, None initially), then this would be better",
        "createdAt" : "2019-03-12T14:24:46Z",
        "updatedAt" : "2019-03-12T14:24:46Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a3a89187-9de4-49b5-8b12-79fd40c0fc8d",
        "parentId" : "97b6a8da-bd50-49fd-99fb-58350a6309e8",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "@jorisvandenbossche do you find this clearer? Personally, I find these dummy variables just for flow control a bit confusing (you have to verify that things are eventually set somewhere). With the way things are written, it's clear that each of the three branches has a `uniques` and `labels`, and it's clear how things are achieved.\r\n\r\nIf we're really concerned about repeating the call to safe_sort, you can make a closer with the values\r\n\r\n```\r\nget_uniques_labels = lambda: safe_sort(uniques, labels, na_sentinel, assume_unique=True)`\r\n```\r\n\r\nand call the lambda, but again, that's just unnecessary indirection IMO.\r\n\r\nIn this case I think just do whatever.",
        "createdAt" : "2019-03-12T14:43:49Z",
        "updatedAt" : "2019-03-12T14:43:49Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "c1e220b0-bc2a-4d16-b74e-bb407938d9b4",
        "parentId" : "97b6a8da-bd50-49fd-99fb-58350a6309e8",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I agree with Tom that this is not necessarily clearer as what it is now.",
        "createdAt" : "2019-03-12T20:16:31Z",
        "updatedAt" : "2019-03-12T20:16:31Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9c880e0d547d28d594c07057705e3350ae942af",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +629,633 @@            except TypeError:\n                # Mixed types, where uniques.argsort fails.\n                uniques, labels = safe_sort(uniques, labels,\n                                            na_sentinel=na_sentinel,\n                                            assume_unique=True)"
  },
  {
    "id" : "7c232788-2e4e-42aa-abb2-f4751614b901",
    "prId" : 27027,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27027#pullrequestreview-255458518",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "374a22ca-1d3b-4f5a-816c-808d50f6f823",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I believe that ensure_data should only take 1d input at all times. Is there a case where it does not? (nb we shoul dprob document / type this)",
        "createdAt" : "2019-06-27T02:54:44Z",
        "updatedAt" : "2019-06-27T20:28:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "0480194d-0d79-4a07-b069-ba0a8e82d888",
        "parentId" : "374a22ca-1d3b-4f5a-816c-808d50f6f823",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes, this gets called with 2D values from `DataFrame.rank`.",
        "createdAt" : "2019-06-27T14:39:53Z",
        "updatedAt" : "2019-06-27T20:28:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "34065fec-544e-4f55-9213-410c2081c042",
        "parentId" : "374a22ca-1d3b-4f5a-816c-808d50f6f823",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Do you know if it is only rank? Because if so, it might be useful to add that as a comment for somebody later reading the code and wondering the same question where 2D things are passed to this.",
        "createdAt" : "2019-06-27T20:20:35Z",
        "updatedAt" : "2019-06-27T20:28:04Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f99a00a907f9bb114d6c1d7b5fda84e94671c00",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +108,112 @@                # Avoid calling the DatetimeIndex constructor as it is 1D only\n                # Note: this is reached by DataFrame.rank calls GH#27027\n                asi8 = values.view('i8')\n                dtype = values.dtype\n                return asi8, dtype, 'int64'"
  },
  {
    "id" : "df40d59c-f2b7-4396-8aa8-c31b659abd44",
    "prId" : 27027,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27027#pullrequestreview-255408940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75f24659-4487-49ae-b599-324fa3beb083",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we *just* use the new added code you have (w/o) the ndim check and remove lines 113-115?",
        "createdAt" : "2019-06-27T15:47:05Z",
        "updatedAt" : "2019-06-27T20:28:04Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fe3e8567-8459-46c0-94b7-2689e8925829",
        "parentId" : "75f24659-4487-49ae-b599-324fa3beb083",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Just tried it, this fails in test cases with e.g. datetime64[D] data",
        "createdAt" : "2019-06-27T18:37:47Z",
        "updatedAt" : "2019-06-27T20:28:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f99a00a907f9bb114d6c1d7b5fda84e94671c00",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +112,116 @@                return asi8, dtype, 'int64'\n\n            from pandas import DatetimeIndex\n            values = DatetimeIndex(values)\n            dtype = values.dtype"
  },
  {
    "id" : "74c537f2-4064-4159-b8ce-fcd01f953206",
    "prId" : 27874,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/27874#pullrequestreview-275431578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9db4def3-7bff-46cb-b243-909d180fbeba",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in _reconstruct_data can you change this\r\n```\r\nvalues = values.astype(dtype)\r\n```\r\nto pass ```copy=False``` ",
        "createdAt" : "2019-08-15T13:38:09Z",
        "updatedAt" : "2019-10-06T23:59:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "1aec96090d3f8641d994e0e0393ad4ddd592cf9e",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +397,401 @@    table = htable(len(values))\n    uniques = table.unique(values)\n    uniques = _reconstruct_data(uniques, original.dtype, original)\n    return uniques\n"
  },
  {
    "id" : "479d35a8-48a8-4e7b-ac32-ff416d4aba37",
    "prId" : 28563,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28563#pullrequestreview-291511816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8aacca1-64f5-4998-bbe5-1f44da6ba432",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "For everyone's edification: why can we remove this check?",
        "createdAt" : "2019-09-22T10:12:56Z",
        "updatedAt" : "2019-09-22T10:12:56Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "0eb37256-c885-41a5-9a13-069633b45106",
        "parentId" : "b8aacca1-64f5-4998-bbe5-1f44da6ba432",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is_sparse is a subset of is_extension_array_dtype",
        "createdAt" : "2019-09-22T14:36:03Z",
        "updatedAt" : "2019-09-22T14:36:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "81b9dbf6d4d0786c665ef8b44167272a53902ac6",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +743,747 @@    else:\n\n        if is_extension_array_dtype(values):\n\n            # handle Categorical and sparse,"
  },
  {
    "id" : "ceae76b1-6cea-4d18-b6c8-c30029011cfe",
    "prId" : 29178,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29178#pullrequestreview-306054953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b20768ca-a5ed-4d7e-b7db-7f52d37319b0",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can type this as ndarray I think",
        "createdAt" : "2019-10-23T15:04:02Z",
        "updatedAt" : "2019-10-25T02:03:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "96d74750-7989-44f1-ba6b-5783add9f0d0",
        "parentId" : "b20768ca-a5ed-4d7e-b7db-7f52d37319b0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "the `name = getattr(values, \"name\", None)` suggests that it could be a Series or Index",
        "createdAt" : "2019-10-23T16:09:53Z",
        "updatedAt" : "2019-10-25T02:03:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "47fed375-826c-43a6-99fe-891a3aafa392",
        "parentId" : "b20768ca-a5ed-4d7e-b7db-7f52d37319b0",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Do you think `AnyArrayLike` from pandas._typing is applicable here?",
        "createdAt" : "2019-10-23T16:11:30Z",
        "updatedAt" : "2019-10-25T02:03:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "8e22427a-8bea-4b4a-9329-083d3a25ea49",
        "parentId" : "b20768ca-a5ed-4d7e-b7db-7f52d37319b0",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "im hoping to refactor such that this function (as many as possible in this module, really) doesn't handle Series or Index so prefer not to make this official",
        "createdAt" : "2019-10-23T17:14:54Z",
        "updatedAt" : "2019-10-25T02:03:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d95eb035-b848-4dbc-b5bc-3a08d6cea44c",
        "parentId" : "b20768ca-a5ed-4d7e-b7db-7f52d37319b0",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Sounds good",
        "createdAt" : "2019-10-23T17:15:41Z",
        "updatedAt" : "2019-10-25T02:03:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "633c583a4d14fb56e60a542664ded82cdb0504a4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +693,697 @@\ndef value_counts(\n    values,\n    sort: bool = True,\n    ascending: bool = False,"
  },
  {
    "id" : "0902375d-9e93-44cb-a440-b261088db2f3",
    "prId" : 29178,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29178#pullrequestreview-306258807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f19caeb6-dbaa-4a0e-9f4c-e9319a0c8e8e",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "```suggestion\r\n    bins: Optional[bool] = None,\r\n```\r\n\r\n(unless docstring is wrong)",
        "createdAt" : "2019-10-23T15:04:23Z",
        "updatedAt" : "2019-10-25T02:03:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "c646c910-7116-405a-9a67-923975ecb2ac",
        "parentId" : "f19caeb6-dbaa-4a0e-9f4c-e9319a0c8e8e",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "docstring says int.  should it be bool?",
        "createdAt" : "2019-10-23T16:09:04Z",
        "updatedAt" : "2019-10-25T02:03:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "4e86696b-46bf-41b9-9448-ccfa94a10367",
        "parentId" : "f19caeb6-dbaa-4a0e-9f4c-e9319a0c8e8e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "No this is a typo on my end",
        "createdAt" : "2019-10-23T16:09:45Z",
        "updatedAt" : "2019-10-25T02:03:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "a32216af-3ec4-4f79-b068-2fe6aa4d23de",
        "parentId" : "f19caeb6-dbaa-4a0e-9f4c-e9319a0c8e8e",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Meant Optional[int] though? Can do in a follow up",
        "createdAt" : "2019-10-24T00:10:50Z",
        "updatedAt" : "2019-10-25T02:03:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "633c583a4d14fb56e60a542664ded82cdb0504a4",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +697,701 @@    ascending: bool = False,\n    normalize: bool = False,\n    bins=None,\n    dropna: bool = True,\n):"
  },
  {
    "id" : "d9bf7867-7ba0-4144-8c35-31e80a84c481",
    "prId" : 29178,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29178#pullrequestreview-305966002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adc78756-5684-4144-9f42-b957a08d2844",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "You can annotate return as \"Series\". Not sure it will type check but still helpful I think",
        "createdAt" : "2019-10-23T15:05:22Z",
        "updatedAt" : "2019-10-25T02:03:49Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "633c583a4d14fb56e60a542664ded82cdb0504a4",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +699,703 @@    bins=None,\n    dropna: bool = True,\n):\n    \"\"\"\n    Compute a histogram of the counts of non-null values."
  },
  {
    "id" : "af4dbd7b-0511-49dd-9ba7-4f30f9bce32d",
    "prId" : 29199,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29199#pullrequestreview-307239355",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b45459dd-4ba0-410b-9c3e-1157664d35c7",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Perhaps a silly question but wouldn't the datetimelike arrays pass through the `is_extension_array_dtype` branch here?",
        "createdAt" : "2019-10-24T16:51:08Z",
        "updatedAt" : "2019-10-24T20:47:07Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "d3ad945a-51f5-4dee-8f64-1dfa65132c97",
        "parentId" : "b45459dd-4ba0-410b-9c3e-1157664d35c7",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "the period and dt64tz go through that EA branch above, td64 and dt64-naive go through here",
        "createdAt" : "2019-10-24T16:58:07Z",
        "updatedAt" : "2019-10-24T20:47:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "19814eaf-4d79-425e-88a8-4603a22d0bdd",
        "parentId" : "b45459dd-4ba0-410b-9c3e-1157664d35c7",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment to that effect. (can also merge this and do that later)",
        "createdAt" : "2019-10-25T12:45:42Z",
        "updatedAt" : "2019-10-25T12:45:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5359a0ec-4001-4a88-a18c-07737828e1be",
        "parentId" : "b45459dd-4ba0-410b-9c3e-1157664d35c7",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "will comment in next pass",
        "createdAt" : "2019-10-25T14:23:25Z",
        "updatedAt" : "2019-10-25T14:23:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "21c08eec18e594c8b4048b83ea13c976dc74addd",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +658,662 @@        values, dtype, _ = _ensure_data(values)\n\n        if original.dtype.kind in [\"m\", \"M\"]:\n            na_value = na_value_for_dtype(original.dtype)\n        else:"
  },
  {
    "id" : "a40110fc-2268-4ed5-b233-168ca1d966ad",
    "prId" : 29509,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29509#pullrequestreview-314930824",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63dd24e4-9f17-45b1-8bdc-e60c9f8439b2",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I think this should remain labels",
        "createdAt" : "2019-11-09T19:45:57Z",
        "updatedAt" : "2019-11-09T19:47:21Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "fd314914-635b-4a90-aaf6-a0958ebada8d",
        "parentId" : "63dd24e4-9f17-45b1-8bdc-e60c9f8439b2",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "We're factorizing the values into codes and uniques, so should be ``codes``?\r\n\r\nMaybe the sentence should actually be worded as \"2) factorizing values into codes and uniques\" (more explicit?",
        "createdAt" : "2019-11-09T20:00:00Z",
        "updatedAt" : "2019-11-09T20:00:01Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "5d04d568-7d4b-4310-9bd2-b8a3100486c1",
        "parentId" : "63dd24e4-9f17-45b1-8bdc-e60c9f8439b2",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "``codes`` is correct; we are changing on purpose to conform with other usages in the codebase",
        "createdAt" : "2019-11-11T14:29:05Z",
        "updatedAt" : "2019-11-11T14:31:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f50cd67948e6cb16e5d8e0d9c29d9dde1eb9612",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +619,623 @@    # Implementation notes: This method is responsible for 3 things\n    # 1.) coercing data to array-like (ndarray, Index, extension array)\n    # 2.) factorizing codes and uniques\n    # 3.) Maybe boxing the uniques in an Index\n    #"
  },
  {
    "id" : "33b6c2c2-d8ad-4190-a1cc-b620e00d2f93",
    "prId" : 29552,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29552#pullrequestreview-315203025",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42b58a64-57be-4645-8b12-d0022e2056bd",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "do we necessarily know the dtype?  e.g. could this be `ndarray[int64]`?",
        "createdAt" : "2019-11-11T22:40:42Z",
        "updatedAt" : "2019-11-11T22:40:42Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "fde00593-03c9-4aa1-8c8e-aec6f0276587",
        "parentId" : "42b58a64-57be-4645-8b12-d0022e2056bd",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "As it's implemented, codes will always be of type ``ndarray[int64]``. I've got a suspicion taht there are cases where would like it to return arrays of fewer bits, but yes, as it is now, it always is an int64 array.",
        "createdAt" : "2019-11-11T22:49:11Z",
        "updatedAt" : "2019-11-11T22:49:11Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "05f829368ecd742690ff2496b82772be85dfa8e6",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +471,475 @@    Returns\n    -------\n    codes : ndarray\n    uniques : ndarray\n    \"\"\""
  },
  {
    "id" : "3cd5a5b3-11ea-44e2-a7b3-f5bef12e0fee",
    "prId" : 29552,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29552#pullrequestreview-315910801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdd4156e-c069-4331-8419-c91aae46d3af",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "followup to type this would be great",
        "createdAt" : "2019-11-12T23:19:14Z",
        "updatedAt" : "2019-11-12T23:19:14Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "05f829368ecd742690ff2496b82772be85dfa8e6",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +1925,1929 @@def safe_sort(\n    values,\n    codes=None,\n    na_sentinel: int = -1,\n    assume_unique: bool = False,"
  },
  {
    "id" : "48d4c164-9043-4eba-88d3-f2d0d4eac574",
    "prId" : 30582,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30582#pullrequestreview-337378533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a123cce-d3b8-4ec0-a04b-6a486e88ca7c",
        "parentId" : null,
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "ABCSeries doesn't work as a return type, AFAIS: Doing a ``x = pd.value_counts(x); reveal_type(x)`` returns Any, if the return type is ABCSeries.",
        "createdAt" : "2019-12-31T13:34:29Z",
        "updatedAt" : "2020-01-05T12:20:10Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      },
      {
        "id" : "789dcf5a-6e35-4ffe-ad82-2118ba183974",
        "parentId" : "0a123cce-d3b8-4ec0-a04b-6a486e88ca7c",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "yes, all ABCs used for type annotations need to be replaced. we need a custom script/clever regex to avoid this in future.",
        "createdAt" : "2019-12-31T13:46:22Z",
        "updatedAt" : "2020-01-05T12:20:10Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "84d1c37a3cba6434eeb0610207942f8170ccf55f",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +655,659 @@    bins=None,\n    dropna: bool = True,\n) -> \"Series\":\n    \"\"\"\n    Compute a histogram of the counts of non-null values."
  },
  {
    "id" : "00f5d327-ba37-47ee-a2e5-483fed824d56",
    "prId" : 31025,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31025#pullrequestreview-345488692",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97bedaff-8197-48cc-938a-85462c2034a5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "should you not be able to remove the timedelta / datetime stuff from below?",
        "createdAt" : "2020-01-20T16:32:54Z",
        "updatedAt" : "2020-01-23T14:53:34Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "839665e7-192a-4779-a8cd-3ec17c8e2523",
        "parentId" : "97bedaff-8197-48cc-938a-85462c2034a5",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Timedelta still goes through the same code path as master since `TimedeltaArray.dtype` isn't an extension dtype, it's a NumPy dtype. And you can also have 2D datetime / timedelta arrays passed here.",
        "createdAt" : "2020-01-20T18:58:27Z",
        "updatedAt" : "2020-01-23T14:53:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d34ffe31e8368b46f8cee395c0f4ead3db461633",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +1849,1853 @@        dtype = arr.dtype\n\n    if is_extension_array_dtype(dtype):\n        if hasattr(arr, f\"__{op.__name__}__\"):\n            return op(arr, arr.shift(n))"
  },
  {
    "id" : "c841de12-92fa-4cc4-9c03-8bddc4e6f524",
    "prId" : 31025,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31025#pullrequestreview-345746340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddd929e5-fff2-477a-8789-f9c4b5770f59",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "would it be more idiomatic to do extract_array up front?",
        "createdAt" : "2020-01-21T00:28:41Z",
        "updatedAt" : "2020-01-23T14:53:34Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "950e8eb8-d272-4c02-85f4-c1d9ed027423",
        "parentId" : "ddd929e5-fff2-477a-8789-f9c4b5770f59",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "I would say not because we don't need to \"extract\" the array, since arrays are already passed (this doesn't get passed Series or Index objects). You can of course use `extract_array` to get rid of PandasArrays, but I think the above is more explicit.",
        "createdAt" : "2020-01-21T09:47:53Z",
        "updatedAt" : "2020-01-23T14:53:34Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "d34ffe31e8368b46f8cee395c0f4ead3db461633",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +1847,1851 @@        # PandasArray cannot necessarily hold shifted versions of itself.\n        arr = np.asarray(arr)\n        dtype = arr.dtype\n\n    if is_extension_array_dtype(dtype):"
  },
  {
    "id" : "f65ba2f3-a9f7-48e9-b3a2-3d23c68147ee",
    "prId" : 31025,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31025#pullrequestreview-345965971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57c75a26-9eab-4373-820e-9105339c2ca0",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "This is private, so I think OK to accept an internal keyword here.\r\n\r\nWe need this to get the right stacklevel for the deprecation method since both Series.diff and DataFrame.diff call in here, but with diffferent levels of indirection.",
        "createdAt" : "2020-01-21T15:28:32Z",
        "updatedAt" : "2020-01-23T14:53:34Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d34ffe31e8368b46f8cee395c0f4ead3db461633",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1826,1830 @@    axis : int\n        axis to shift on\n    stacklevel : int\n        The stacklevel for the lost dtype warning.\n"
  },
  {
    "id" : "2d384caa-6fe2-4e42-8d9a-6ed3dda768ff",
    "prId" : 31060,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31060#pullrequestreview-344970131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb208d6f-3895-4b9f-b5b5-29c806a3fbc7",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Would it be possible to get rid of the need for those `dedent` calls ? (thinking about how to make this even easier)\r\n\r\nI suppose one option is *writing* those dedented. Something like \r\n\r\n``` \r\n@doc(\r\n    values=(\r\n        \"\"\"\\\r\nvalues : sequence\r\n    A 1-D sequence. Sequences that aren't pandas objects are\r\n    coerced to ndarrays before factorization.\r\n        \"\"\"), \r\n...\r\n)\r\ndef factorize(...\r\n```\r\n\r\nbut we might consider this ugly? (and does Black allow it?)\r\n\r\nAnd in another this dedent could be handled by the decorator? ",
        "createdAt" : "2020-01-16T19:48:24Z",
        "updatedAt" : "2020-02-08T04:23:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "564a49c5-0964-470d-8c53-de3f04ecafe6",
        "parentId" : "cb208d6f-3895-4b9f-b5b5-29c806a3fbc7",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "+1 on adding indentation \"magic\" to the decorator. Not a big fan of automatic things, but I think making the docstring injection as simple as possible, so the important code is more readable, makes it worth.",
        "createdAt" : "2020-01-16T19:53:58Z",
        "updatedAt" : "2020-02-08T04:23:51Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "091b40bb-824d-439b-a7b3-916393217ba8",
        "parentId" : "cb208d6f-3895-4b9f-b5b5-29c806a3fbc7",
        "authorId" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "body" : "I think it is a good idea to add this \"magic\" to decorator so we can keep doc simple.\r\n\r\nI am considering change from\r\n```python\r\nwrapper.__doc__ = wrapper._docstr_template.format(**kwargs)  # type: ignore\r\n```\r\nto add `dedent`to all kwargs like this\r\n```python\r\nwrapper.__doc__ = wrapper._docstr_template.format(**{k: dedent(v) for k, v in kwargs.items()})  # type: ignore\r\n```\r\n\r\nAny thoughts? Comments? Please.",
        "createdAt" : "2020-01-17T03:59:33Z",
        "updatedAt" : "2020-02-08T04:23:51Z",
        "lastEditedBy" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "tags" : [
        ]
      },
      {
        "id" : "ca11438f-448a-4503-8632-ce9c0caef029",
        "parentId" : "cb208d6f-3895-4b9f-b5b5-29c806a3fbc7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "That sounds good. I am only wondering if there are some cases where the to-be-inserted string starts with a space that we want to keep (to let it fit in the docstring)",
        "createdAt" : "2020-01-17T13:41:27Z",
        "updatedAt" : "2020-02-08T04:23:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "c8e18a8c-357f-4d11-96c0-c8e4727e60a9",
        "parentId" : "cb208d6f-3895-4b9f-b5b5-29c806a3fbc7",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "There are some cases where we don't do a `dedent` call, like in https://github.com/pandas-dev/pandas/blob/master/pandas/core/groupby/groupby.py#L66. So you might need to ensure something automatic works there as well.",
        "createdAt" : "2020-01-17T13:47:38Z",
        "updatedAt" : "2020-02-08T04:23:51Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "6cad90ce-5a7f-4c57-85fd-2cb0ca6cf897",
        "parentId" : "cb208d6f-3895-4b9f-b5b5-29c806a3fbc7",
        "authorId" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "body" : "> That sounds good. I am only wondering if there are some cases where the to-be-inserted string starts with a space that we want to keep (to let it fit in the docstring)\r\n\r\nGood point. The changes we made here should not change the actual docstring. Since there are mixed cases of usage, it seems hard for me to get a good solution for all of them. At least nothing comes out in my mind now.\r\n\r\nI like the \"magic\", but for now, maybe it is better to keep it without a `dedent` call. Then, we can manually control what shows there. Also, if we do not add `dedent` we can change the use of `Appender` and `Substitution` to `doc` easily and straightforward, because the `doc`'s behave is very close to simply combine `Appender` and `Substitution` together. \r\n\r\nHow about we just keep this unchanged now, and we can come back later when we have converted most decorator usages to `doc`? At that time, we might have more information to decided what could be the best way of solving that.\r\n\r\n",
        "createdAt" : "2020-01-19T01:00:52Z",
        "updatedAt" : "2020-02-08T04:23:51Z",
        "lastEditedBy" : "a4f1b7e8-eff6-4cf3-a1b5-7627eaa0f198",
        "tags" : [
        ]
      },
      {
        "id" : "da12942e-d2c9-4725-8a13-1054e0e7108e",
        "parentId" : "cb208d6f-3895-4b9f-b5b5-29c806a3fbc7",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Sounds good, I also think it's better to start simple, see how things work, and add more features later.\r\n\r\nI think adding the automatic indentation will be worth, since it'll make things much simpler when documenting, and it's not so complex to implement in the decorator. But let's forget about it for now, this is already a nice improvement.\r\n\r\nThanks! ",
        "createdAt" : "2020-01-19T01:09:23Z",
        "updatedAt" : "2020-02-08T04:23:51Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a7b36c621832d95919d95ea082b82079f823340",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +489,493 @@\n@doc(\n    values=dedent(\n        \"\"\"\\\n    values : sequence"
  },
  {
    "id" : "6e728f76-6b23-494b-80e6-90ce1abdbab9",
    "prId" : 31520,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/31520#pullrequestreview-351886811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "663d8886-98bc-4185-96cc-d643eb4a1f09",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is period an issue here? (just comments, can target master)",
        "createdAt" : "2020-02-01T14:27:59Z",
        "updatedAt" : "2020-02-01T14:29:24Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a794c24e9ee77c09a13bc16e578e35d66f77e455",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +192,196 @@        if isinstance(original, ABCIndexClass):\n            values = values.astype(object, copy=False)\n    elif dtype is not None:\n        if is_datetime64_dtype(dtype):\n            dtype = \"datetime64[ns]\""
  },
  {
    "id" : "c1052907-6540-467f-a386-9abbc7bb34bf",
    "prId" : 32420,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32420#pullrequestreview-374738991",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "458ecc9a-3dab-4f85-854c-7e8a6f2327af",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is this type ignore?",
        "createdAt" : "2020-03-08T15:57:32Z",
        "updatedAt" : "2020-03-08T15:59:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6b536359-c082-40ae-9634-eacf8e35c73e",
        "parentId" : "458ecc9a-3dab-4f85-854c-7e8a6f2327af",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "bc mypy doesnt know enough to rule out ndarray (or even non-Categorical EA) here",
        "createdAt" : "2020-03-08T16:46:15Z",
        "updatedAt" : "2020-03-08T16:46:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d32563a5-8ed6-4af7-a5d6-699468a787b3",
        "parentId" : "458ecc9a-3dab-4f85-854c-7e8a6f2327af",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "not sure i understand. shouldn't you just add\r\n\r\n```\r\nresult = comps.isin(values)\r\nassert isinstance(result, np.ndarray)\r\nreturn result\r\n``` \r\n\r\nprefer this to a type ignore",
        "createdAt" : "2020-03-11T02:41:53Z",
        "updatedAt" : "2020-03-11T02:41:53Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "49d035df-30b5-4fcb-86fc-3f24c7330ade",
        "parentId" : "458ecc9a-3dab-4f85-854c-7e8a6f2327af",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "the issue isnt `type(result)`, its `type(comps)`.  `Categorical` has a `isin` method, but general ExtensionArray does not",
        "createdAt" : "2020-03-11T02:45:40Z",
        "updatedAt" : "2020-03-11T02:45:40Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bd671d1f-d379-4b5c-a801-2c9462ff55dd",
        "parentId" : "458ecc9a-3dab-4f85-854c-7e8a6f2327af",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, is there a way to avoid the type ignore, i hate these things because we never remove them",
        "createdAt" : "2020-03-11T02:56:16Z",
        "updatedAt" : "2020-03-11T02:56:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "36dd9d12-695a-4a59-a636-9c3165bbc5ee",
        "parentId" : "458ecc9a-3dab-4f85-854c-7e8a6f2327af",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> i hate these things because we never remove them\r\n\r\nyah, i keep a list of patterns to regularly grep for and try to get rid of.\r\n\r\n> is there a way to avoid the type ignore\r\n\r\nAFAIK the only way to do that would be to do a runtime import of Categorical and `assert isinstance(comps, Categorical)` which I think is more code-smelly than the \"type: ignore\".  eventually numpy will have stubs so mypy wont resolve np.ndarray to Any, at which point we'll have an opportunity to improve this",
        "createdAt" : "2020-03-11T03:06:27Z",
        "updatedAt" : "2020-03-11T03:06:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "753545ff-8d10-482a-bd04-8035692b087c",
        "parentId" : "458ecc9a-3dab-4f85-854c-7e8a6f2327af",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "what about an `isinstance(ABCCategorical) ` ?",
        "createdAt" : "2020-03-11T03:14:44Z",
        "updatedAt" : "2020-03-11T03:14:44Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "f0b1a133-dc7c-4165-a0f0-d36d8f2fce77",
        "parentId" : "458ecc9a-3dab-4f85-854c-7e8a6f2327af",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "or ok with a run-time import of Categorical if the above doesn't work; ",
        "createdAt" : "2020-03-11T03:15:03Z",
        "updatedAt" : "2020-03-11T03:15:03Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "8e7fd6a8-4d69-45bb-9188-4d559f0d9220",
        "parentId" : "458ecc9a-3dab-4f85-854c-7e8a6f2327af",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "mypy doesnt recognize any of our ABCFoos",
        "createdAt" : "2020-03-11T03:16:04Z",
        "updatedAt" : "2020-03-11T03:16:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0db52fb8-1bc5-4334-9ee2-28e47c0108d4",
        "parentId" : "458ecc9a-3dab-4f85-854c-7e8a6f2327af",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "so you have an aversion to \"# type: ignore\" and i have an aversion to a runtime import just for mypy.  is there a middle ground somewhere?  maybe revisit in a few months to see if the type ignore can be removed?",
        "createdAt" : "2020-03-11T16:00:42Z",
        "updatedAt" : "2020-03-11T16:00:42Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "1ed6c2cc-8327-4245-8ede-ff19c3aea8bc",
        "parentId" : "458ecc9a-3dab-4f85-854c-7e8a6f2327af",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, let's do that, also let's create an issue to see if we can fix the ABC's and mypy",
        "createdAt" : "2020-03-14T16:46:58Z",
        "updatedAt" : "2020-03-14T16:46:58Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "12e4c2afc6112ba79189cbaab78f0703c99751f2",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +422,426 @@        # TODO(extension)\n        # handle categoricals\n        return comps.isin(values)  # type: ignore\n\n    comps, dtype = _ensure_data(comps)"
  },
  {
    "id" : "a00c6f90-edff-4fdc-8f58-be9672c0c52f",
    "prId" : 33944,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33944#pullrequestreview-406872239",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a1f71bf-8e03-4c3d-8d22-edd2097694a9",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "ArrayLike is a typevar. is the return type here always the same as the type of values? or dependant on dtype. \r\n\r\nmaybe just expand on the prose in the docstring till this bites us.",
        "createdAt" : "2020-05-06T09:24:35Z",
        "updatedAt" : "2020-05-06T09:36:09Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "0c88b5b8-ffee-4156-bcec-4eb4ab9a1e67",
        "parentId" : "0a1f71bf-8e03-4c3d-8d22-edd2097694a9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> ArrayLike is a typevar. is the return type here always the same as the type of values? or dependant on dtype.\r\n\r\nYikes, I think I've been using it incorrectly in a lot of places then.  Ive been using it as a synonym for `Union[np.ndarray, ExtensionArray]`.  I guess I'll do a dedicated pass through the code to weed out those mis-usages",
        "createdAt" : "2020-05-06T17:55:30Z",
        "updatedAt" : "2020-05-06T17:55:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7ca9e5c8-35b9-46d3-865c-60aef3e50946",
        "parentId" : "0a1f71bf-8e03-4c3d-8d22-edd2097694a9",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "> Ive been using it as a synonym for `Union[np.ndarray, ExtensionArray]`\r\n\r\nThis is OK if the alias only appears once in the function signature/return.\r\n\r\nonce it appears twice, then they are bound.",
        "createdAt" : "2020-05-06T18:19:55Z",
        "updatedAt" : "2020-05-06T18:19:55Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e8643e487530f04d3e012899520890b6959c361",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +179,183 @@def _reconstruct_data(\n    values: ArrayLike, dtype: DtypeObj, original: AnyArrayLike\n) -> ArrayLike:\n    \"\"\"\n    reverse of _ensure_data"
  },
  {
    "id" : "02f7e3b8-3304-4584-8a4c-a7a240c07bc8",
    "prId" : 33944,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33944#pullrequestreview-406852513",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82ebe219-7f58-45e5-a76c-7099876a748d",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "nitpick, values and dtype are 'expanded' aliases, do the same for AnyArrayLike?  \r\n\r\nagain maybe more prose, is Index only allowed with bool_dtype? what about Series? ",
        "createdAt" : "2020-05-06T09:29:07Z",
        "updatedAt" : "2020-05-06T09:36:09Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "d87136a3-67d4-44be-b09d-5bdb493de4ab",
        "parentId" : "82ebe219-7f58-45e5-a76c-7099876a748d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "AFAICT it can be Index or Series regardless of dtype, whatever was passed to the top-level fucntion",
        "createdAt" : "2020-05-06T17:53:27Z",
        "updatedAt" : "2020-05-06T17:53:27Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e8643e487530f04d3e012899520890b6959c361",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +187,191 @@    values : np.ndarray or ExtensionArray\n    dtype : np.ndtype or ExtensionDtype\n    original : AnyArrayLike\n\n    Returns"
  },
  {
    "id" : "ee8195b9-d215-42bd-9736-d7a1c9014066",
    "prId" : 35852,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35852#pullrequestreview-477476928",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2640c284-847e-45fa-ab72-b37a7ec1c59c",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "could also add a versionchanged tag ",
        "createdAt" : "2020-08-28T07:55:19Z",
        "updatedAt" : "2020-09-02T14:12:13Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "983fb3c9-87fd-401c-87bb-179d956b6028",
        "parentId" : "2640c284-847e-45fa-ab72-b37a7ec1c59c",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "added!",
        "createdAt" : "2020-08-28T08:12:21Z",
        "updatedAt" : "2020-09-02T14:12:13Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf8641aec20d62705e55ec6f658d257be477e64b",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +543,547 @@    na_sentinel : int or None, default -1\n        Value to mark \"not found\". If None, will not drop the NaN\n        from the uniques of the values.\n\n        .. versionchanged:: 1.1.2"
  },
  {
    "id" : "ea3bd4ee-e577-4cbc-b22d-59b3ebf8633f",
    "prId" : 35852,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35852#pullrequestreview-478576836",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0e7e075-3965-4968-bd9f-ec30f86621f6",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add the *same* example above this as well but w/o setting `na_sentinel`",
        "createdAt" : "2020-08-31T12:38:38Z",
        "updatedAt" : "2020-09-02T14:12:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf8641aec20d62705e55ec6f658d257be477e64b",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +627,631 @@    values, it can be achieved by setting ``na_sentinel=None``.\n\n    >>> values = np.array([1, 2, 1, np.nan])\n    >>> codes, uniques = pd.factorize(values)  # default: na_sentinel=-1\n    >>> codes"
  },
  {
    "id" : "90f1c965-69a6-4dee-bb45-cc672de5ec6d",
    "prId" : 35852,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35852#pullrequestreview-480911546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd319062-856b-445f-a370-616a002b0381",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ideally put a blank line as othewise this is very hard to read",
        "createdAt" : "2020-09-02T12:22:10Z",
        "updatedAt" : "2020-09-02T14:12:13Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "3c7d0244-05b4-49dc-b974-025ad672ae22",
        "parentId" : "fd319062-856b-445f-a370-616a002b0381",
        "authorId" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "body" : "done!",
        "createdAt" : "2020-09-02T15:00:25Z",
        "updatedAt" : "2020-09-02T15:00:26Z",
        "lastEditedBy" : "826346de-4250-468b-bca4-1f6bdaf861b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf8641aec20d62705e55ec6f658d257be477e64b",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +634,638 @@    array([1., 2.])\n\n    >>> codes, uniques = pd.factorize(values, na_sentinel=None)\n    >>> codes\n    array([0, 1, 0, 2])"
  },
  {
    "id" : "5b6f28df-e43d-47aa-aba7-2ba52b1228a7",
    "prId" : 35933,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/35933#pullrequestreview-477008422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bba0c4d2-8610-4dcb-aae6-d7582cab4fb8",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "if you make SelectN generic and use `FrameOrSeries` typevar you can also get the return types for nlargest and nsmallest sorted. follow-on OK ",
        "createdAt" : "2020-08-27T19:14:03Z",
        "updatedAt" : "2020-08-27T21:49:29Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9e411c1af312b71ad4d69279c9dc1c7f1db8b69",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1102,1106 @@            raise ValueError('keep must be either \"first\", \"last\" or \"all\"')\n\n    def compute(self, method: str) -> FrameOrSeriesUnion:\n        raise NotImplementedError\n"
  },
  {
    "id" : "b6e86cb0-c1e3-42b6-83d0-23d3e4c9b893",
    "prId" : 36266,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36266#pullrequestreview-495921200",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3c09df1-4ac6-4426-8813-2e84bf7f998b",
        "parentId" : null,
        "authorId" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "body" : "Sorry a little bit too late. The whole point of doing this for len(comps) > 1_000_000, was that numpy was deemed to be faster (which is probably no loner the case btw, see https://github.com/pandas-dev/pandas/issues/22205#issuecomment-410519409), adding `any`, `isnan`, `logical_or` on top  (with all the cache misses and temporary objects) will make this branch much slower. So probably it is best just to drop the whole branch and always keep `f = htable.ismember_object ` (unless it is `is_integer_dtype` of cause).",
        "createdAt" : "2020-09-21T07:25:46Z",
        "updatedAt" : "2020-09-21T07:25:46Z",
        "lastEditedBy" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "tags" : [
        ]
      },
      {
        "id" : "36edecea-7855-44ff-a7b2-674e40950590",
        "parentId" : "c3c09df1-4ac6-4426-8813-2e84bf7f998b",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can u run the asvs and check here?",
        "createdAt" : "2020-09-21T10:57:54Z",
        "updatedAt" : "2020-09-21T10:57:55Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "460311b3-f710-4f5f-9ccc-c05855660655",
        "parentId" : "c3c09df1-4ac6-4426-8813-2e84bf7f998b",
        "authorId" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "body" : "@jreback I have opened RP #36611 with my suggestion and some benchmarks, which show that numpy's `in1d` is only faster when here are very few  unique `values`.",
        "createdAt" : "2020-09-24T20:20:06Z",
        "updatedAt" : "2020-09-24T20:20:07Z",
        "lastEditedBy" : "6eb079e0-c034-4a01-ba36-2456ab252d59",
        "tags" : [
        ]
      }
    ],
    "commit" : "53ab2406479e7eda198f788de669294f277d4ba7",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +440,444 @@    # GH16012\n    # Ensure np.in1d doesn't get object types or it *may* throw an exception\n    if len(comps) > 1_000_000 and not is_object_dtype(comps):\n        # If the the values include nan we need to check for nan explicitly\n        # since np.nan it not equal to np.nan"
  },
  {
    "id" : "26750df9-f5f7-4dfd-9de2-c1aef51dc967",
    "prId" : 36290,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36290#pullrequestreview-533859500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e60cb39c-5d69-40f6-bd22-a8202deaf57e",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "dtypes unrestricted?",
        "createdAt" : "2020-11-18T19:09:28Z",
        "updatedAt" : "2020-11-18T20:51:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e0168eb3-2a2c-4b7b-ba19-6d73f8ddd34d",
        "parentId" : "e60cb39c-5d69-40f6-bd22-a8202deaf57e",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "Could not think of anything, why they should be restricted.",
        "createdAt" : "2020-11-18T20:43:25Z",
        "updatedAt" : "2020-11-18T20:51:17Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fd368d3d871aa4ac5db9ee3002242ba81cdd62e",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2164,2168 @@    ----------\n    left: ndarray\n    right: ndarray\n\n    Returns"
  },
  {
    "id" : "3b92a1b1-620f-41c0-9ef5-83ab8fb4f642",
    "prId" : 36290,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36290#pullrequestreview-533864592",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fac63e51-ae06-4cc9-af59-cf0f23127414",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "is this related to or useful for the index.union-with-duplicates stuff?",
        "createdAt" : "2020-11-18T19:24:43Z",
        "updatedAt" : "2020-11-18T20:51:17Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7f2dc132-9b32-4468-86ba-ef9f2aa3f905",
        "parentId" : "fac63e51-ae06-4cc9-af59-cf0f23127414",
        "authorId" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "body" : "If you pass in the union as left and right, you would get the distinct result. Have to take a look if we can use this.",
        "createdAt" : "2020-11-18T20:50:41Z",
        "updatedAt" : "2020-11-18T20:51:17Z",
        "lastEditedBy" : "f3e7d5fe-a112-47db-9178-8be42b4a8eab",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fd368d3d871aa4ac5db9ee3002242ba81cdd62e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2153,2157 @@\n\ndef make_duplicates_of_left_unique_in_right(\n    left: np.ndarray, right: np.ndarray\n) -> np.ndarray:"
  },
  {
    "id" : "9eb4c6b3-30dd-4059-8b47-d272805ac967",
    "prId" : 37096,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37096#pullrequestreview-525814618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5dde34b-7680-4826-9110-a575574ce825",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@simonjayhawkins i just noticed this `np.ndarray[tuple]` annotation.  are we ready to start making our ndarray annotations more specific?",
        "createdAt" : "2020-11-07T19:58:57Z",
        "updatedAt" : "2020-11-07T19:58:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "83af354f-9d3b-478b-90d4-5062f1790afc",
        "parentId" : "c5dde34b-7680-4826-9110-a575574ce825",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "this is picked up by #36092 `pandas\\core\\algorithms.py:2217: error: \"ndarray\" expects no type arguments, but 1 given  [type-arg]`\r\n\r\nso will need to be corrected at some point.",
        "createdAt" : "2020-11-08T14:45:25Z",
        "updatedAt" : "2020-11-08T14:45:26Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d03dc35fcc631784c795695809d7538ebaad7ff",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +2137,2141 @@\n\ndef _sort_tuples(values: np.ndarray[tuple]):\n    \"\"\"\n    Convert array of tuples (1d) to array or array (2d)."
  },
  {
    "id" : "f15f3039-8b00-45c7-ba1d-97b1ec412f3a",
    "prId" : 37096,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37096#pullrequestreview-667913713",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "488d91d8-078e-4a57-9522-1258e8f24212",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "@ssche two completely contradictory questions/requests\r\n\r\n1) is there a reasonable way to do this without relying on core.internals?\r\n2) could pd.MultiIndex.from_tuples de-duplicate some code by using to_arrays?",
        "createdAt" : "2021-05-22T05:38:32Z",
        "updatedAt" : "2021-05-22T05:38:32Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "17f8e054-79ad-49da-bdb4-f3f1f6a940d3",
        "parentId" : "488d91d8-078e-4a57-9522-1258e8f24212",
        "authorId" : "8963a7c2-5781-495d-a7e0-e051883f4fe7",
        "body" : "> is there a reasonable way to do this without relying on core.internals?\r\n\r\nMy first attempt (https://github.com/pandas-dev/pandas/pull/37096/commits/1320ff12ce4f7d58dab43396df7f3d2e9e1c4792) wasn't using core.internals, as far as I recall, but it was deemed too complex.\r\n\r\n> could pd.MultiIndex.from_tuples de-duplicate some code by using to_arrays?\r\n\r\nMaybe, what are you trying to achieve?",
        "createdAt" : "2021-05-24T11:07:52Z",
        "updatedAt" : "2021-05-24T11:07:52Z",
        "lastEditedBy" : "8963a7c2-5781-495d-a7e0-e051883f4fe7",
        "tags" : [
        ]
      },
      {
        "id" : "bd14eba8-d61b-4b33-8f0b-6697e73f77ed",
        "parentId" : "488d91d8-078e-4a57-9522-1258e8f24212",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Maybe, what are you trying to achieve?\r\n\r\nJust simplification/de-duplication",
        "createdAt" : "2021-05-25T14:36:58Z",
        "updatedAt" : "2021-05-25T14:36:58Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d03dc35fcc631784c795695809d7538ebaad7ff",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +2144,2148 @@    column as types cannot be compared).\n    \"\"\"\n    from pandas.core.internals.construction import to_arrays\n    from pandas.core.sorting import lexsort_indexer\n"
  },
  {
    "id" : "c5a150bd-3b85-4e0e-9499-1dcf24537d82",
    "prId" : 37140,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37140#pullrequestreview-510786497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30e7ef3d-57df-403b-b224-3fef23203fe7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "does this have a test that hits?",
        "createdAt" : "2020-10-16T19:26:30Z",
        "updatedAt" : "2020-10-16T20:43:40Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "345e7fdb-650a-4462-bf7b-2a6e737d51d1",
        "parentId" : "30e7ef3d-57df-403b-b224-3fef23203fe7",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "no, will add one",
        "createdAt" : "2020-10-16T20:42:55Z",
        "updatedAt" : "2020-10-16T20:43:40Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2429660a99a94b71514a114caf5957d813b12df6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1910,1914 @@        if hasattr(arr, f\"__{op.__name__}__\"):\n            if axis != 0:\n                raise ValueError(f\"cannot diff {type(arr).__name__} on axis={axis}\")\n            return op(arr, arr.shift(n))\n        else:"
  },
  {
    "id" : "bfd24fc0-37fe-4064-b441-771538761bfc",
    "prId" : 37310,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37310#pullrequestreview-515641500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2a9ac90-fe3e-4451-9360-902c1052151d",
        "parentId" : null,
        "authorId" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "body" : "Now that `sort_values` is stable, we don't need this extra reversal stuff for `nlargest` (it was used to stabilize the sort).",
        "createdAt" : "2020-10-23T12:58:36Z",
        "updatedAt" : "2020-10-31T04:50:04Z",
        "lastEditedBy" : "e496530e-9aa4-46e2-8b9b-b0ec14a6093d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d09da99cfa410193989195d29fd3833efa8cb9a1",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1183,1187 @@        if n >= len(self.obj):\n            ascending = method == \"nsmallest\"\n            return dropped.sort_values(ascending=ascending).head(n)\n\n        # fast method"
  },
  {
    "id" : "3ea18dd4-0242-44f5-93b6-3ea11e23154d",
    "prId" : 37499,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37499#pullrequestreview-520471462",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c586626-f5e3-4472-a702-524917abaa40",
        "parentId" : null,
        "authorId" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "body" : "How bad is it if you skip the check and always use the logical_or?  Is it possible that the isna is more expensive than the logical_or and isnan?",
        "createdAt" : "2020-10-30T08:37:59Z",
        "updatedAt" : "2020-10-30T08:37:59Z",
        "lastEditedBy" : "99f74c82-c3ba-477d-8b70-f12c41bd8ded",
        "tags" : [
        ]
      },
      {
        "id" : "4b4e5ea3-73cb-4b2e-9f9a-d585b994cee9",
        "parentId" : "1c586626-f5e3-4472-a702-524917abaa40",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "From a quick check with the simple example from the test I don't really see much difference. \r\nBut, for backporting this, I would personally prefer to keep the change as minimal as possible. For master / 1.2, we should maybe re-evaluate this full branch, but see also https://github.com/pandas-dev/pandas/pull/36611 which is basically already doing this (but more drastically, by potentially removing the use of np.in1d entirely)\r\n\r\nNote that in the `if` clause here it is `isna(values)` (so on the values passed to the `isin()` method), which avoids `isnan(comps)` (the values of the Series), where `values` is typically much smaller than `comps`.",
        "createdAt" : "2020-10-30T08:50:32Z",
        "updatedAt" : "2020-10-30T08:50:32Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "93c79cce89badfcefcd1da7330d5f4b7a0ec04f8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +442,446 @@        # If the the values include nan we need to check for nan explicitly\n        # since np.nan it not equal to np.nan\n        if isna(values).any():\n            f = lambda c, v: np.logical_or(np.in1d(c, v), np.isnan(c))\n        else:"
  },
  {
    "id" : "100059e1-294a-44a2-9385-b10df86669f2",
    "prId" : 37528,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37528#pullrequestreview-521148850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3c21bb6-1a0d-44bb-9747-d0ffb2aa06de",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are you sure?\n\nensure_data and below does this",
        "createdAt" : "2020-10-30T23:38:34Z",
        "updatedAt" : "2020-11-21T18:04:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c8bac8ec-da51-4355-b458-573266f1ecec",
        "parentId" : "d3c21bb6-1a0d-44bb-9747-d0ffb2aa06de",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "the way we call ensure_data ends up casting dt64 to int64",
        "createdAt" : "2020-10-31T00:24:39Z",
        "updatedAt" : "2020-11-21T18:04:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bf30f08f-df85-4a12-a904-6b5e1e4bfb2c",
        "parentId" : "d3c21bb6-1a0d-44bb-9747-d0ffb2aa06de",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why can't you fix it in _ensure_data then, I am not averse to dispatching to the EA itself, which is what we are already doing for Categorical, or is that the plan. If that is the plan, then I would think you could actually remove all off this and simply dispatch (e.g. most of this logic then would actually be handled by PandasArray or the EA as appropriate).",
        "createdAt" : "2020-10-31T14:57:07Z",
        "updatedAt" : "2020-11-21T18:04:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "acb1ebe3-6dc1-4895-98dd-9857ce2a0509",
        "parentId" : "d3c21bb6-1a0d-44bb-9747-d0ffb2aa06de",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "There are a bunch of GH issues about isin (added a new label yesterday), many of which are about unwanted casting.  I haven't looked at them all closely tet.\r\n\r\n> why can't you fix it in _ensure_data then\r\n\r\nEven if we fix that (which yes, i'll take a look, but probably in a separate PR), we still need to dispatch to the `(Period|Timedelta|Datetime)Index` to get correct casting of the `other` (assuming we want `algos.isin(dtlike, other)` to match `dtlike.isin(other)`, which I for one do)\r\n\r\n>  am not averse to dispatching to the EA itself, which is what we are already doing for Categorical, or is that the plan\r\n\r\nATM Categorical has `isin` but thats it.  #20617 suggests adding isin to EA, but thats definitely outside the scope of this PR.\r\n",
        "createdAt" : "2020-10-31T15:50:02Z",
        "updatedAt" : "2020-11-21T18:04:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca75491e5c4c5abd96c3cfd9df1f73ea89285a4d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +435,439 @@        from pandas import Index\n\n        return Index(comps).isin(values)\n\n    comps, dtype = _ensure_data(comps)"
  },
  {
    "id" : "b8ef08c9-934c-4e30-9109-cc462d274992",
    "prId" : 38020,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38020#pullrequestreview-537051442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8e52a71-2fea-4094-8d5c-b702723231be",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a test that hits this?",
        "createdAt" : "2020-11-24T02:33:52Z",
        "updatedAt" : "2020-11-24T03:32:16Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d52a9dc7-4bef-4700-8849-aceca7c5afc3",
        "parentId" : "b8e52a71-2fea-4094-8d5c-b702723231be",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes.  ATM we're checking ABCIndex instead of ABCIndexClass so it gets converted above, but that also is converting e.g. datetimelike to object dtype",
        "createdAt" : "2020-11-24T03:29:52Z",
        "updatedAt" : "2020-11-24T03:32:16Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0034797700bd1cc7dd6fa803746ee85c69dc4df",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +431,435 @@        values = construct_1d_object_array_from_listlike(list(values))\n        # TODO: could use ensure_arraylike here\n    elif isinstance(values, ABCMultiIndex):\n        # Avoid raising in extract_array\n        values = np.array(values)"
  },
  {
    "id" : "3f34fac5-3265-4152-a9ef-fd41c9b65e71",
    "prId" : 38034,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/38034#pullrequestreview-539440485",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75c6f2fc-d1b0-49dc-95ac-edbaa7045656",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "elif",
        "createdAt" : "2020-11-26T16:15:38Z",
        "updatedAt" : "2020-11-26T19:02:10Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb2ffc0592369d8e73591b566f380f4b0e280248",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +685,689 @@\n    if isinstance(values, ABCRangeIndex):\n        return values.factorize(sort=sort)\n    elif is_extension_array_dtype(values.dtype):\n        values = extract_array(values)"
  }
]