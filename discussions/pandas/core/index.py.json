[
  {
    "id" : "e90a46a9-872f-4eea-89b3-7637804d1554",
    "prId" : 4850,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44273d8a-04cd-4354-ada6-3b48e7b80350",
        "parentId" : null,
        "authorId" : "5362e572-ef9a-4b5d-8aa4-ca6f8ee7f944",
        "body" : "Why does this take a dtype argument?\n",
        "createdAt" : "2013-09-19T20:36:25Z",
        "updatedAt" : "2013-09-25T16:21:17Z",
        "lastEditedBy" : "5362e572-ef9a-4b5d-8aa4-ca6f8ee7f944",
        "tags" : [
        ]
      },
      {
        "id" : "a17192ac-e594-4fc1-817b-9b2e772a4faf",
        "parentId" : "44273d8a-04cd-4354-ada6-3b48e7b80350",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "all of the **new** take the dtype argument (as well as the same argument set), could be kwargs, but its consistent with other. Its not used, nor do we care about it. This matters because sometimes internally you don't  know what class you are constructing, but want to be explicit (and so ppass in args)\n",
        "createdAt" : "2013-09-19T20:46:37Z",
        "updatedAt" : "2013-09-25T16:21:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "60efe85bc2ce9578e8f5e0c88907c5cc6b6b7b31",
    "line" : 298,
    "diffHunk" : "@@ -1,1 +1755,1759 @@    #_engine_type = _index.Float64Engine\n\n    def __new__(cls, data, dtype=None, copy=False, name=None, fastpath=False):\n\n        if fastpath:"
  },
  {
    "id" : "69617981-bb27-4cd0-baad-e810ce21baa9",
    "prId" : 7891,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "156b4cd3-ab5c-4069-b482-952bb49e8e08",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "docstring (maybe append from Index.repeat?)\n",
        "createdAt" : "2014-08-06T08:40:05Z",
        "updatedAt" : "2014-08-06T18:45:59Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d3cb3f36e2f7b415531e3b910f490c01657ecca",
    "line" : 1039,
    "diffHunk" : "@@ -1,1 +3339,3343 @@\n    def repeat(self, n):\n        return MultiIndex(levels=self.levels,\n                          labels=[label.view(np.ndarray).repeat(n) for label in self.labels],\n                          names=self.names,"
  },
  {
    "id" : "5f985b86-8d7d-40f3-8310-41d634a8a701",
    "prId" : 7891,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4caadd22-57d1-4d7d-ac86-0ea12a292992",
        "parentId" : null,
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "I wonder if `_add_numeric_methods_disabled` and `_add_numeric_methods` could be put into `pandas.core.ops` module to reuse/be reused from such methods implemented for other containers.\n",
        "createdAt" : "2014-08-06T09:32:46Z",
        "updatedAt" : "2014-08-06T18:45:59Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "36c25dbb-f2cf-4ea7-b2a2-d9d535e78314",
        "parentId" : "4caadd22-57d1-4d7d-ac86-0ea12a292992",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I started doing this, but the `ops.py` was a bit too specific. It could/should be fixed I think. but would require some dedicated effort. Feel free!\n",
        "createdAt" : "2014-08-06T12:10:59Z",
        "updatedAt" : "2014-08-06T18:45:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d3cb3f36e2f7b415531e3b910f490c01657ecca",
    "line" : 580,
    "diffHunk" : "@@ -1,1 +2012,2016 @@\n    @classmethod\n    def _add_numeric_methods_disabled(cls):\n        \"\"\" add in numeric methods to disable \"\"\"\n"
  },
  {
    "id" : "70a061dc-bee8-43a5-a066-6ff6fbbcfe78",
    "prId" : 7891,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95c359c5-a308-4caf-9624-9dc9f55294e0",
        "parentId" : null,
        "authorId" : "413be534-cedb-4df7-abda-cde26db33acd",
        "body" : "Will sortorder survive `repeat`-ing?\n",
        "createdAt" : "2014-08-06T09:51:12Z",
        "updatedAt" : "2014-08-06T18:45:59Z",
        "lastEditedBy" : "413be534-cedb-4df7-abda-cde26db33acd",
        "tags" : [
        ]
      },
      {
        "id" : "2dd78ce3-f3a2-48ab-a825-48f39d08ea9b",
        "parentId" : "95c359c5-a308-4caf-9624-9dc9f55294e0",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "`sortorder` is a bug in itself. not sure how/when its used at all. So I have no idea. will add to the todo to figure out. (or if you want to take a stab go ahead!)\n",
        "createdAt" : "2014-08-06T12:17:45Z",
        "updatedAt" : "2014-08-06T18:45:59Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d3cb3f36e2f7b415531e3b910f490c01657ecca",
    "line" : 1042,
    "diffHunk" : "@@ -1,1 +3342,3346 @@                          labels=[label.view(np.ndarray).repeat(n) for label in self.labels],\n                          names=self.names,\n                          sortorder=self.sortorder,\n                          verify_integrity=False)\n"
  },
  {
    "id" : "639287b6-5621-4a5a-9c4e-d4b1a4e3bb7f",
    "prId" : 7892,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20a94e19-dff6-449e-9884-d52eb736048b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "his already exists as _get_level_number (oh I see you are extending it), ok then\n",
        "createdAt" : "2014-07-31T20:14:10Z",
        "updatedAt" : "2014-08-04T08:18:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "770859012996b91e182fd22013c4d12b7268adfd",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +690,694 @@    def _validate_index_level(self, level):\n        \"\"\"\n        Validate index level.\n\n        For single-level Index getting level number is a no-op, but some"
  }
]