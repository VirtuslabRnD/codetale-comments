[
  {
    "id" : "6d1a19f9-d02a-4cab-8069-24867db12d41",
    "prId" : 24955,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24955#pullrequestreview-212625424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f0c6564-a09e-46dc-985b-325e93660ef3",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some comments here on what you are doing",
        "createdAt" : "2019-03-10T16:21:00Z",
        "updatedAt" : "2019-03-20T08:09:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5becb793-4f98-4035-8908-7e90679c3b2b",
        "parentId" : "6f0c6564-a09e-46dc-985b-325e93660ef3",
        "authorId" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "body" : "Done. ",
        "createdAt" : "2019-03-10T22:20:59Z",
        "updatedAt" : "2019-03-20T08:09:00Z",
        "lastEditedBy" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "tags" : [
        ]
      }
    ],
    "commit" : "192c09353cf6167b49f8d19ec90ef5a4545263af",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +36,40 @@    \"\"\"\n    line_reader = StringIO(source).readline\n    token_generator = tokenize.generate_tokens(line_reader)\n\n    # Loop over all tokens till a backtick (`) is found."
  },
  {
    "id" : "999b7770-b4c1-4f1b-bae7-9da404f1bf59",
    "prId" : 24955,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24955#pullrequestreview-212626252",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d44f4f20-38ff-4c2e-afd6-9f32df85ebef",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if you are using the uuid3 string, then do you still need the BACKTICK token? and if you still need that, then how is the uuid3 helping?",
        "createdAt" : "2019-03-10T21:57:51Z",
        "updatedAt" : "2019-03-20T08:09:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "921a4e58-ae3a-4000-a4d2-ac8f6f866d26",
        "parentId" : "d44f4f20-38ff-4c2e-afd6-9f32df85ebef",
        "authorId" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "body" : "After tokenization of the backtick quoted string, the name of the backtick quoted string needs to be changed to get rid of the spaces. This happens in `def _clean_spaces_backtick_quoted_names(tok)` of `pandas/core/computation/expr.py`. In that function _remove_spaces_column_names(tokval) is called which then uses the uuid3 method to create a unique string. The uuid3 method was just to make sure \"column name\" and \"column_name\" are never mixed up. Since the spaces are replaced by underscore, but when this replacement happens the uuid3 string is appended to the string. Before I had just a simple string \"_BACKTICK_QUOTED_STRING\" appended to it. \r\n\r\nThis has nothing to do with the tokenization. The tokenization and the string clean up method are two different things, differently implemented. Which one needs improvement?",
        "createdAt" : "2019-03-10T22:19:35Z",
        "updatedAt" : "2019-03-20T08:09:00Z",
        "lastEditedBy" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "tags" : [
        ]
      },
      {
        "id" : "8ebb8855-c3e3-4310-9bec-56ad6f22a802",
        "parentId" : "d44f4f20-38ff-4c2e-afd6-9f32df85ebef",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "so my original question was whether you could simply substitue a uuid string for the original string (rather than replace spaces and append with a special string). conceptually I like the former, it is unclear i this is possible. that is what I was asking. ",
        "createdAt" : "2019-03-10T22:22:41Z",
        "updatedAt" : "2019-03-20T08:09:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6f02d66a-0bcf-48d4-91ee-3607bbb370b8",
        "parentId" : "d44f4f20-38ff-4c2e-afd6-9f32df85ebef",
        "authorId" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "body" : "Yes, that is possible. But if the query has errors, I am afraid the error will be less clear, since the original name is gone. ",
        "createdAt" : "2019-03-10T22:30:30Z",
        "updatedAt" : "2019-03-20T08:09:00Z",
        "lastEditedBy" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "tags" : [
        ]
      },
      {
        "id" : "fe9642f9-d1f4-450a-b7d5-e31a983597c1",
        "parentId" : "d44f4f20-38ff-4c2e-afd6-9f32df85ebef",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, fair enough. let's revert the uuid stuff then; your original way seemed reasonable.",
        "createdAt" : "2019-03-10T22:31:29Z",
        "updatedAt" : "2019-03-20T08:09:00Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1514aa31-35ad-4f07-8598-cefe2f2b5807",
        "parentId" : "d44f4f20-38ff-4c2e-afd6-9f32df85ebef",
        "authorId" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "body" : "Reverted, also removed from compat. ",
        "createdAt" : "2019-03-10T22:39:20Z",
        "updatedAt" : "2019-03-20T08:09:00Z",
        "lastEditedBy" : "d4b4f9ca-b436-4124-a7fb-909146d22e2c",
        "tags" : [
        ]
      }
    ],
    "commit" : "192c09353cf6167b49f8d19ec90ef5a4545263af",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +40,44 @@    # Loop over all tokens till a backtick (`) is found.\n    # Then, take all tokens till the next backtick to form a backtick quoted\n    # string.\n    for toknum, tokval, _, _, _ in token_generator:\n        if tokval == '`':"
  },
  {
    "id" : "0ff472f6-8c18-48ef-b4e9-3759b3ea3106",
    "prId" : 26295,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26295#pullrequestreview-234161663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1713ff22-54ff-4f15-8e15-648ba29affba",
        "parentId" : null,
        "authorId" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "body" : "I'm a little unsatisfied with this approach. Both pandas.core.computation.ops and pandas.core.computation.pytables define a `Constant` class inheriting from pandas.core.computation.ops.Term. \r\n\r\nHere in expr.py, the `BaseExprVisitor` class assigns the ops `Constant` to its `const_type` variable. Pytables.py defines an `ExprVisitor` class, which inherits from `BaseExprVisitor` and then assigns its own version of `Constant` to `const_type`.\r\n\r\nThis throws the mypy error: `pandas/core/computation/pytables.py:384: error: Incompatible types in assignment (expression has type \"Type[pandas.core.computation.pytables.Constant]\", base class \"BaseExprVisitor\" defined the type as \"Type[pandas.core.computation.ops.Constant]\")`.\r\n\r\nThis approach works because we're saying \"`const_type` is always a subclass of `Term`.\" As far as I can tell, nothing else inherits from `Term`, so there's no problem with that.\r\n\r\nAnother solution would be to import the pandas.core.computation.pytables version of Constant as Pytables_Constant and replace this type hint with `# type: Type[Union[Constant, Pytables_Constant]]`. But that feels a bit verbose and inelegant when this approach works. I also don't love adding a somewhat confusing import solely for that purpose.",
        "createdAt" : "2019-05-06T19:38:04Z",
        "updatedAt" : "2019-05-07T23:43:36Z",
        "lastEditedBy" : "729b5bd5-29e4-4ff9-b28d-9ac2dcb7df19",
        "tags" : [
        ]
      }
    ],
    "commit" : "2061229cd2b17c52e79e936460e43fb844269e89",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +329,333 @@    preparser : callable\n    \"\"\"\n    const_type = Constant  # type: Type[Term]\n    term_type = Term\n"
  },
  {
    "id" : "59bf2373-76b2-45cb-846a-898727ad639d",
    "prId" : 32408,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32408#pullrequestreview-374953038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c4ea01e-75bc-42c9-bfe0-ec0b8200bdba",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is this raise needed?",
        "createdAt" : "2020-03-16T01:40:51Z",
        "updatedAt" : "2020-04-08T10:12:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ee6f590c-95d9-4ba7-8344-59afc23aa343",
        "parentId" : "4c4ea01e-75bc-42c9-bfe0-ec0b8200bdba",
        "authorId" : "8e2e8dae-b2c1-4c8d-924b-94faef9bbbc3",
        "body" : "That's the main change and the real point of the PR. The actual error from getting an invalid attribute should be shown, e.g. \"AttributeError: module 'pandas' has no attribute 'thing'\". Without it it will say \"ValueError: Invalid Attribute context Load\" which isn't true, Load is the only valid context.",
        "createdAt" : "2020-03-16T06:51:46Z",
        "updatedAt" : "2020-04-08T10:12:41Z",
        "lastEditedBy" : "8e2e8dae-b2c1-4c8d-924b-94faef9bbbc3",
        "tags" : [
        ]
      }
    ],
    "commit" : "33d55e463ae7d1b0cf15c6edb1dfe0ed483ac446",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +636,640 @@                if isinstance(value, ast.Name) and value.id == attr:\n                    return resolved\n                raise\n\n        raise ValueError(f\"Invalid Attribute context {type(ctx).__name__}\")"
  },
  {
    "id" : "3eab0599-cd14-4e5c-88ce-d99cfe0889b1",
    "prId" : 36012,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36012#pullrequestreview-478726562",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ee42659-865c-4606-bf3b-7e56d1c6550d",
        "parentId" : null,
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "mypy giving \r\n\r\nerror: Need type annotation for 'unary_op_nodes_map' (hint: \"unary_op_nodes_map: Dict[<type>, <type>] = ...\")  [var-annotated]\r\n\r\nmypy is ok with a dictcomp, or could add Dict[str, str] as variable type annotation instead",
        "createdAt" : "2020-08-31T15:39:36Z",
        "updatedAt" : "2020-09-01T11:48:21Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "709c2fc9ca9b052f490ec4578f9c185182034774",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +365,369 @@    unary_ops = _unary_ops_syms\n    unary_op_nodes = \"UAdd\", \"USub\", \"Invert\", \"Not\"\n    unary_op_nodes_map = {k: v for k, v in zip(unary_ops, unary_op_nodes)}\n\n    rewrite_map = {"
  }
]