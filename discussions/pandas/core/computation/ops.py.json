[
  {
    "id" : "6656cb1c-4336-4e9d-8d8e-50ea2bdec57a",
    "prId" : 29677,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29677#pullrequestreview-318059765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "812da4c4-f499-45cc-ac93-cc6581b66c56",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this a typo?",
        "createdAt" : "2019-11-17T22:49:13Z",
        "updatedAt" : "2019-11-17T22:49:54Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a4acad70-478a-4ed4-8bf8-ec9033e3461e",
        "parentId" : "812da4c4-f499-45cc-ac93-cc6581b66c56",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "no, there is a `op` attribute that is a str",
        "createdAt" : "2019-11-17T23:21:30Z",
        "updatedAt" : "2019-11-17T23:21:31Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "bcc2d406-0554-477e-b02a-88d916f7e95e",
        "parentId" : "812da4c4-f499-45cc-ac93-cc6581b66c56",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "is it necessary?\r\n\r\n```\r\nreveal_type(_bool_op_map)\r\nreveal_type(_bool_op_map.get(\"not\", \"not\"))\r\n```\r\n```\r\npandas\\core\\computation\\ops.py:193: note: Revealed type is 'builtins.dict[builtins.str*, builtins.str*]'\r\npandas\\core\\computation\\ops.py:194: note: Revealed type is 'builtins.str'\r\n```",
        "createdAt" : "2019-11-18T00:20:32Z",
        "updatedAt" : "2019-11-18T00:20:33Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      },
      {
        "id" : "88d9765a-f1ee-4406-bcab-9effdceba676",
        "parentId" : "812da4c4-f499-45cc-ac93-cc6581b66c56",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> is it necessary?\r\n\r\ni guess im not clear on the policy.  i thought it was a \"more is better\" kind of thing",
        "createdAt" : "2019-11-18T00:29:49Z",
        "updatedAt" : "2019-11-18T00:29:49Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e048de51-2fba-495d-ae73-09cb9d52ec08",
        "parentId" : "812da4c4-f499-45cc-ac93-cc6581b66c56",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "I'm just suspicious when I see unnecessary variable annotations since they could be casts in disguise. \r\n\r\nIn this case, it _could_ have been (but wasn't) hiding that the return type of _bool_op_map.get(op,op) might be Any. \r\n\r\nIf the return type of some_function is Any and we do `some variable: some_type  = some_function()` it is effectively a cast.\r\n\r\n```python\r\ndef some_function():\r\n    return \"foo\"\r\n\r\nx: int = some_function()\r\nreveal_type(x)\r\n```\r\n```\r\ntest.py:5: note: Revealed type is 'builtins.int'\r\n```\r\nI think we should just allow mypy to use the return type of the initialization unless needed.\r\n\r\n",
        "createdAt" : "2019-11-18T00:46:41Z",
        "updatedAt" : "2019-11-18T00:46:42Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "042303c45edf30cf62823b2dd2204e74d83151b6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +198,202 @@    \"\"\"\n\n    op: str\n\n    def __init__(self, op: str, operands, *args, **kwargs):"
  }
]