[
  {
    "id" : "caba6837-c5f3-4e0e-8181-c579632666d9",
    "prId" : 10744,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e18de7e3-ceed-4d9c-b3e3-2c4c1f91986f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "in theory one could provide a series of offsets that are all the same (and equal to each other), but that is prob a special case. \n",
        "createdAt" : "2015-08-11T16:15:09Z",
        "updatedAt" : "2015-08-13T12:16:17Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac975417636ae37eaa14dc3d5c23db80ceaf0a97",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +414,418 @@            # in DatetimeIndex; otherwise elementwise apply\n            if self.is_offset_lhs:\n                if len(lvalues) == 1:\n                    rvalues = pd.DatetimeIndex(rvalues)\n                    lvalues = lvalues[0]"
  },
  {
    "id" : "cf649ca8-7518-4ac5-8329-f3a4034c976c",
    "prId" : 17589,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17589#pullrequestreview-64346374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b327f8aa-ff19-4557-88ce-bd7f7d3b7af8",
        "parentId" : null,
        "authorId" : "4ee5f553-8d63-479a-9a30-2a1431ca36e8",
        "body" : "it does not make sense for arith_method to be an optional argument because _create_methods will try to call it without checking if it is None",
        "createdAt" : "2017-09-21T16:34:16Z",
        "updatedAt" : "2017-09-24T22:09:56Z",
        "lastEditedBy" : "4ee5f553-8d63-479a-9a30-2a1431ca36e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a92688be132d19675536fdd73e230f993b36440",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +184,188 @@    Parameters\n    ----------\n    arith_method : function (optional)\n        factory for special arithmetic methods, with op string:\n        f(op, name, str_rep, default_axis=None, fill_zeros=None, **eval_kwargs)"
  },
  {
    "id" : "68520df7-3345-409a-ae11-5611602b2e07",
    "prId" : 17710,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/17710#pullrequestreview-66313844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "623d4bbe-e679-44ac-9b4e-156df4e5afc9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if these imports become an issue i can do a global check (like u do with matplotlib) ",
        "createdAt" : "2017-09-30T14:00:41Z",
        "updatedAt" : "2017-10-02T11:37:52Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d0f74a73aa26f8ba7a6e59e797dfa3638272eb5",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +669,673 @@    \"\"\"\n    def na_op(x, y):\n        import pandas.core.computation.expressions as expressions\n\n        try:"
  },
  {
    "id" : "11f8d791-8d79-41a6-b6b3-6f01810f02af",
    "prId" : 18832,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18832#pullrequestreview-85429659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6523f9e7-8cb9-4911-80ea-a7e98d30146f",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I guess this is ok for now. Maybe should make 3 sub-classes here (or I think ultimately refactoring to have *all* this logic in the index methods as it already duplicates some of this).",
        "createdAt" : "2017-12-23T20:49:39Z",
        "updatedAt" : "2017-12-23T20:49:39Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3cab61d442f67ba5628194c078031929449ca75",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +468,472 @@        elif self.is_timedelta_lhs:\n            return self._validate_timedelta(name)\n        elif self.is_offset_lhs:\n            return self._validate_offset(name)\n"
  },
  {
    "id" : "aafca139-27e2-424f-8718-e6637110d152",
    "prId" : 19024,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19024#pullrequestreview-86066620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26f274a0-60ec-42ac-8161-c780ff4100bd",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "and until / unless you want to limit / remove _TimeOp (which is actually ok with me). then this doesn't belong here as I have commented before.\r\n\r\nYou are welcome to put it *in* _TimeOp for now or rip out TimeOp.",
        "createdAt" : "2018-01-01T17:54:52Z",
        "updatedAt" : "2018-01-02T21:11:21Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4efb27af76cbb48e0b6ad7ff419acfcc3e1a1c46",
    "line" : 195,
    "diffHunk" : "@@ -1,1 +664,668 @@\n        left, right = _align_method_SERIES(left, right)\n        if is_datetime64_dtype(left) or is_datetime64tz_dtype(left):\n            result = op(pd.DatetimeIndex(left), right)\n            res_name = _get_series_op_result_name(left, right)"
  },
  {
    "id" : "fc0b3951-302e-4959-b11e-c1df237bb7ea",
    "prId" : 19396,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19396#pullrequestreview-91614555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c8a6985-7a2b-45f6-be3d-da95bc614249",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Pretty sure \"special\" here was a copy/paste mistake.  Please correct me if I'm wrong.",
        "createdAt" : "2018-01-25T17:59:32Z",
        "updatedAt" : "2018-01-26T16:57:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "89692f74b95d03df5b07b6af3669089fb59c92f1",
    "line" : 215,
    "diffHunk" : "@@ -1,1 +526,530 @@    ----------\n    flex_arith_method : function\n        factory for flex arithmetic methods, with op string:\n        f(op, name, str_rep)\n    flex_comp_method : function, optional,"
  },
  {
    "id" : "bb0c80d8-85e6-4c1f-9382-50f3f990d34e",
    "prId" : 19396,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19396#pullrequestreview-91615333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fefbd5a5-4f57-44e1-94f4-1f7a8fb64f78",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Cut/pasted from Panel, with small re-workings to _agg_doc_PANEL.",
        "createdAt" : "2018-01-25T18:01:53Z",
        "updatedAt" : "2018-01-26T16:57:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "89692f74b95d03df5b07b6af3669089fb59c92f1",
    "line" : 325,
    "diffHunk" : "@@ -1,1 +1219,1223 @@\n\ndef _flex_method_PANEL(op, name, str_rep=None):\n    eval_kwargs = _gen_eval_kwargs(name)\n    fill_zeros = _gen_fill_zeros(name)"
  },
  {
    "id" : "c1669848-0f7c-4c5c-8008-bb240ce62636",
    "prId" : 19396,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19396#pullrequestreview-91900718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3b53684-8fd5-4c76-af2f-d906af5c2747",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is this other correct?",
        "createdAt" : "2018-01-26T12:26:38Z",
        "updatedAt" : "2018-01-26T16:57:09Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "31ad1b24-7410-416f-8f94-7cf84d56e892",
        "parentId" : "f3b53684-8fd5-4c76-af2f-d906af5c2747",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It matches the existing docstring",
        "createdAt" : "2018-01-26T16:56:15Z",
        "updatedAt" : "2018-01-26T16:57:09Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "89692f74b95d03df5b07b6af3669089fb59c92f1",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +312,316 @@Parameters\n----------\nother : DataFrame or Panel\naxis : {{items, major_axis, minor_axis}}\n    Axis to broadcast over"
  },
  {
    "id" : "773ef2e6-fc76-49c6-8aa4-1f469e8b02d1",
    "prId" : 19448,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19448#pullrequestreview-92776898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6fc84b6-5f43-410a-9202-7bc3cf60df95",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "tests that hit this",
        "createdAt" : "2018-01-30T11:28:41Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d1258247-5b06-4c0a-b552-e16e4f005880",
        "parentId" : "b6fc84b6-5f43-410a-9202-7bc3cf60df95",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Is the request for comments in the code for what tests hit this path?  Or confirmation here that such tests exist?",
        "createdAt" : "2018-01-30T15:54:36Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "947988b3-2421-432a-bc34-e342aa885a27",
        "parentId" : "b6fc84b6-5f43-410a-9202-7bc3cf60df95",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "tests.categorical.test_operators.TestCategoricalOps.test_numeric_like_ops hits this path.  The change here is catching this case early (and explicitly) instead of in the `else:` clause within the na_op above (see point where this PR changes `elif isinstance(x, np.ndarray)` to `else: assert isinstance(x, np.ndarray)`",
        "createdAt" : "2018-01-30T15:58:45Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "af9a62c2-fea5-439e-a2f1-a7bd9606a1b9",
        "parentId" : "b6fc84b6-5f43-410a-9202-7bc3cf60df95",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "my requests are about things that are being added. e.g. if its just refactoing then existing tests are ok, but some things look like they are catching additional cases, so should have tests for these. a coverage analysis can test you (compare before and after)",
        "createdAt" : "2018-01-31T00:09:44Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e8fbc495-534c-4507-947a-f6fea01e3004",
        "parentId" : "b6fc84b6-5f43-410a-9202-7bc3cf60df95",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> if its just refactoing then existing tests are ok\r\n\r\nThis is very nearly pure refactoring to catch things earlier, more explicitly, and with fewer levels of indentation.  I'll go through the diff and annotate any exceptions to this rule.  The `is_categorical_dtype` check on 652 replaces the `else` previously on 621 (i.e. not an exception to the rule).",
        "createdAt" : "2018-01-31T00:56:59Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "399fcd5aa4340f4b317ddb74f0addcd69ecb9ddb",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +653,657 @@                                    dtype=result.dtype)\n\n        elif is_categorical_dtype(left):\n            raise TypeError(\"{typ} cannot perform the operation \"\n                            \"{op}\".format(typ=type(left).__name__, op=str_rep))"
  },
  {
    "id" : "eb22ae88-fff1-49ee-9d0b-2c4c1fad499e",
    "prId" : 19448,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19448#pullrequestreview-92768311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "899eb286-5779-4da9-8209-c16d79b27f37",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "tests that hit this",
        "createdAt" : "2018-01-30T11:28:56Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4a37cc0e-0670-4e37-b01d-c7783388f169",
        "parentId" : "899eb286-5779-4da9-8209-c16d79b27f37",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "tests.series.test_operators.TestSeriesComparisons.test_comparison_invalid.  This is just moved up a few lines and down one level of indentation.",
        "createdAt" : "2018-01-30T16:00:32Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "7beb33ad-3157-40f1-9eee-d1840d9db1ea",
        "parentId" : "899eb286-5779-4da9-8209-c16d79b27f37",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok",
        "createdAt" : "2018-01-31T00:09:45Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "399fcd5aa4340f4b317ddb74f0addcd69ecb9ddb",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +747,751 @@            result = _comp_method_OBJECT_ARRAY(op, x, y)\n\n        elif is_datetimelike_v_numeric(x, y):\n            raise TypeError(\"invalid type comparison\")\n"
  },
  {
    "id" : "4fce934b-260b-4fe1-828b-8d93af3a01bc",
    "prId" : 19448,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19448#pullrequestreview-92615359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c8495ae-1f70-4e69-90e8-e59b498d1032",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "comment no longer relevant?",
        "createdAt" : "2018-01-30T11:29:10Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "77be2507-6013-45ac-a499-da0fa003b180",
        "parentId" : "7c8495ae-1f70-4e69-90e8-e59b498d1032",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "The comment may be more verbose than it needs to be, but is still relevant.  Once #19301 goes in we can dispatch to DTI and TDI and the needs_i8_conversion block below can be simplified quite a bit.",
        "createdAt" : "2018-01-30T16:01:46Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "399fcd5aa4340f4b317ddb74f0addcd69ecb9ddb",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +754,758 @@            # we want to compare like types\n            # we only want to convert to integer like if\n            # we are not NotImplemented, otherwise\n            # we would allow datetime64 (but viewed as i8) against\n            # integer comparisons"
  },
  {
    "id" : "a38d03ca-06b6-4d40-b53d-cf7ae98efafa",
    "prId" : 19448,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19448#pullrequestreview-92616866",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af6fd10f-973e-453b-863f-b33281a9f88b",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "tests that hit this",
        "createdAt" : "2018-01-30T11:29:50Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b5c074d1-acca-4944-b71a-563a32126f7f",
        "parentId" : "af6fd10f-973e-453b-863f-b33281a9f88b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "tests.categorical.test_operators.TestCategoricalOpsWithFactor.test_comparisons",
        "createdAt" : "2018-01-30T16:05:01Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "399fcd5aa4340f4b317ddb74f0addcd69ecb9ddb",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +813,817 @@\n        elif (isinstance(other, pd.Categorical) and\n              not is_categorical_dtype(self)):\n            raise TypeError(\"Cannot compare a Categorical for op {op} with \"\n                            \"Series of dtype {typ}.\\nIf you want to compare \""
  },
  {
    "id" : "80e8f4ea-cae1-4ab4-855d-60342e41acbd",
    "prId" : 19448,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19448#pullrequestreview-92618085",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50da09ea-809f-4b24-b536-1080ddaf6624",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "test that hit this",
        "createdAt" : "2018-01-30T11:29:55Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cde30e2e-6302-4f77-9f67-800946889438",
        "parentId" : "50da09ea-809f-4b24-b536-1080ddaf6624",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "tests.series.test_operators.TestSeriesComparisons.test_nat_comparisons_scalar, tests.series.test_operators.TestSeriesComparisons.test_more_na_comparisons, tests.series.test_arithmetic.TestTimestampSeriesComparison.test_timestamp_equality, tests.series.test_arithmetic.TestTimestampSeriesComparison.test_timestamp_compare_series\r\n\r\ntotal of 10 cases between these with parametrization",
        "createdAt" : "2018-01-30T16:07:28Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "27712239-4668-4ae3-9196-5b8d7097cbf9",
        "parentId" : "50da09ea-809f-4b24-b536-1080ddaf6624",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "(This is moved down from `na_op`)",
        "createdAt" : "2018-01-30T16:07:57Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "399fcd5aa4340f4b317ddb74f0addcd69ecb9ddb",
    "line" : 193,
    "diffHunk" : "@@ -1,1 +820,824 @@\n        elif is_scalar(other) and isna(other):\n            # numpy does not like comparisons vs None\n            if op is operator.ne:\n                res_values = np.ones(len(self), dtype=bool)"
  },
  {
    "id" : "ea9a03fb-e0ff-4fe3-a289-42120d9e76a9",
    "prId" : 19448,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19448#pullrequestreview-92777890",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afa9d582-f0a3-4a14-b42f-3018c73b5373",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "tests that hit this",
        "createdAt" : "2018-01-30T11:30:18Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "64e6929c-bfb5-4bc1-a853-0facbdc040ce",
        "parentId" : "afa9d582-f0a3-4a14-b42f-3018c73b5373",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "See #19421.  Only one test hits this, and only in py3:\r\n\r\n```\r\ns = Series([2, 3, 4, 5, 6, 7, 8, 9, datetime(2005, 1, 1)])\r\ns[::2] = np.nan\r\nd = DataFrame({'A': s})\r\n\r\nwith pytest.raises(ValueError):\r\n    d.__and__(s, axis='columns')\r\n```",
        "createdAt" : "2018-01-30T16:08:55Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "147b85ba-8de7-4495-ba51-e39d4d94cbaf",
        "parentId" : "afa9d582-f0a3-4a14-b42f-3018c73b5373",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is a change and not just a refactor.  As per the comments, it is horribly broken, and better to raise intentionally than accidentally have the `yrav.item()` raise a ValueError.",
        "createdAt" : "2018-01-31T01:02:49Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "399fcd5aa4340f4b317ddb74f0addcd69ecb9ddb",
    "line" : 267,
    "diffHunk" : "@@ -1,1 +1027,1031 @@\n                if yrav.shape != mask.shape:\n                    # FIXME: GH#5284, GH#5035, GH#19448\n                    # Without specifically raising here we get mismatched\n                    # errors in Py3 (TypeError) vs Py2 (ValueError)"
  },
  {
    "id" : "a23cff7a-2605-454d-9ecf-e6b426341502",
    "prId" : 19448,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19448#pullrequestreview-92777374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afa96be3-3e59-469b-b754-527414897096",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Everything in this part of the diff (788-799) is pure refactor, moving the ABCDataFrame check to the top spot for consistency",
        "createdAt" : "2018-01-31T00:59:47Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "399fcd5aa4340f4b317ddb74f0addcd69ecb9ddb",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +799,803 @@                raise ValueError(msg)\n            res_values = na_op(self.values, other.values)\n            return self._constructor(res_values, index=self.index, name=name)\n\n        elif isinstance(other, (np.ndarray, pd.Index)):"
  },
  {
    "id" : "edc7979e-57f0-40b1-afd2-8a2164cdfe56",
    "prId" : 19448,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19448#pullrequestreview-92777730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14081b84-6bc6-4172-8676-6d2cf04190c0",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "All the edits to this function (895-918) are cleanup/refactor.",
        "createdAt" : "2018-01-31T01:01:50Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "399fcd5aa4340f4b317ddb74f0addcd69ecb9ddb",
    "line" : 254,
    "diffHunk" : "@@ -1,1 +921,925 @@            res_values = na_op(self.values, other)\n            unfilled = self._constructor(res_values, index=self.index)\n            return filler(unfilled).__finalize__(self)\n\n    return wrapper"
  },
  {
    "id" : "65d77624-19fb-4b44-a089-ba72905ec819",
    "prId" : 19448,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19448#pullrequestreview-92778102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ce0fe08-1f16-4df1-a438-c3e334334483",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Using `xrav.size` instead of `np.prod(xrav.shape)` here and above is to move towards joining this case with the case above it.  This masking logic is done _almost_ identically in Series/DataFrame/Panel methods and one of the next steps will be to de-duplicate these.",
        "createdAt" : "2018-01-31T01:04:13Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "399fcd5aa4340f4b317ddb74f0addcd69ecb9ddb",
    "line" : 285,
    "diffHunk" : "@@ -1,1 +1042,1046 @@                mask = notna(xrav)\n                xrav = xrav[mask]\n                if xrav.size:\n                    with np.errstate(all='ignore'):\n                        result[mask] = op(xrav, y)"
  },
  {
    "id" : "3317d2b5-7f9f-4474-a40f-224e44b46a16",
    "prId" : 19448,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19448#pullrequestreview-92888105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5c46e47-dc94-4805-8b4d-6245df3c9cac",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "`isinstance(x, np.ndarray)` instead of `hasattr(x, 'size')` to be more explicit.  The other case that otherwise gets to this point in tests is Categorical, but that raises shortly after this anyway.",
        "createdAt" : "2018-01-31T01:05:08Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "26a729f5-a8a1-4b5b-b7fd-d755b666e96b",
        "parentId" : "f5c46e47-dc94-4805-8b4d-6245df3c9cac",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a comment here",
        "createdAt" : "2018-01-31T11:26:31Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "399fcd5aa4340f4b317ddb74f0addcd69ecb9ddb",
    "line" : 279,
    "diffHunk" : "@@ -1,1 +1037,1041 @@                        result[mask] = op(xrav, yrav)\n\n            elif isinstance(x, np.ndarray):\n                # mask is only meaningful for x\n                result = np.empty(x.size, dtype=x.dtype)"
  },
  {
    "id" : "ab495265-3f0e-492c-8579-63d9ec7e5d64",
    "prId" : 19448,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19448#pullrequestreview-92888105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87449ad3-7373-4533-bc9a-e3f5f76fd6f4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "add a comment here about early failing",
        "createdAt" : "2018-01-31T11:24:35Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "399fcd5aa4340f4b317ddb74f0addcd69ecb9ddb",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +789,793 @@            self._get_axis_number(axis)\n\n        if isinstance(other, ABCDataFrame):  # pragma: no cover\n            # Defer to DataFrame implementation; fail early\n            return NotImplemented"
  },
  {
    "id" : "4fd28f71-8a3e-4752-86f8-a0372d2806ff",
    "prId" : 19448,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19448#pullrequestreview-93592858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6854082-cebd-4286-a8fb-42ee790324eb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "use ``is_categorical_dtype(other)``",
        "createdAt" : "2018-01-31T11:25:56Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d640dc82-9642-4f8b-882a-19ae366f5949",
        "parentId" : "f6854082-cebd-4286-a8fb-42ee790324eb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is catching pd.Categorical specifically (as opposed to CategoricalIndex or Series[Categorical])",
        "createdAt" : "2018-01-31T16:20:13Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f43dca31-2461-4f82-b414-c58f237f452b",
        "parentId" : "f6854082-cebd-4286-a8fb-42ee790324eb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "that's totally not obvious, is this tested or needed? that seems oddly specific",
        "createdAt" : "2018-02-01T11:24:26Z",
        "updatedAt" : "2018-02-01T11:24:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1c4dec8a-ce42-49d1-a04e-956946b61499",
        "parentId" : "f6854082-cebd-4286-a8fb-42ee790324eb",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Well the two branches preceeding this handle ABCSeries and pd.Index cases, and the (existing) error message specifically refers to a Categorical",
        "createdAt" : "2018-02-01T16:03:44Z",
        "updatedAt" : "2018-02-01T16:03:44Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0270db4c-bbcc-4399-8cf7-89f144bab1f5",
        "parentId" : "f6854082-cebd-4286-a8fb-42ee790324eb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, pls revist at some point, this should prob be less specific and more about a non-ndarray like (e.g. an ExtensionArray check)",
        "createdAt" : "2018-02-02T11:28:57Z",
        "updatedAt" : "2018-02-02T11:29:29Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "399fcd5aa4340f4b317ddb74f0addcd69ecb9ddb",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +812,816 @@                                     index=self.index).__finalize__(self)\n\n        elif (isinstance(other, pd.Categorical) and\n              not is_categorical_dtype(self)):\n            raise TypeError(\"Cannot compare a Categorical for op {op} with \""
  },
  {
    "id" : "34a68361-bf2e-4ce1-8a17-fb415c400c98",
    "prId" : 19448,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19448#pullrequestreview-92888105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6dc61bf2-5200-4972-aa79-23c74ec59f50",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "comment here",
        "createdAt" : "2018-01-31T11:26:17Z",
        "updatedAt" : "2018-02-01T00:37:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "399fcd5aa4340f4b317ddb74f0addcd69ecb9ddb",
    "line" : 223,
    "diffHunk" : "@@ -1,1 +897,901 @@        self, other = _align_method_SERIES(self, other, align_asobject=True)\n\n        if isinstance(other, ABCDataFrame):\n            # Defer to DataFrame implementation; fail early\n            return NotImplemented"
  },
  {
    "id" : "72e84ad0-eab4-4c95-92b4-21c42c25984b",
    "prId" : 19611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19611#pullrequestreview-95663845",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba271224-d647-49ed-8a86-f49cd0b65cf7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-string",
        "createdAt" : "2018-02-11T17:57:12Z",
        "updatedAt" : "2018-02-16T23:34:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "118cd5d47ea025aad5e5759ea0a34cf86e0a390a",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +1093,1097 @@\ndef _combine_series_frame(self, other, func, fill_value=None, axis=None,\n                          level=None, try_cast=True):\n    \"\"\"\n    Apply binary operator `func` to self, other using alignment and fill"
  },
  {
    "id" : "0b73c062-8379-4f7b-b827-9d338704e7c0",
    "prId" : 19611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19611#pullrequestreview-97306930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d29f3b89-2ca8-4b30-95d3-ba613359dcaf",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you might need to parameterize this on the work 'index' but not sure (IOW can it be a Series)? or maybe just remove the word index ?",
        "createdAt" : "2018-02-16T18:36:07Z",
        "updatedAt" : "2018-02-16T23:34:20Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "749880f7-7653-46e7-82aa-1187ef321cf6",
        "parentId" : "d29f3b89-2ca8-4b30-95d3-ba613359dcaf",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ATM it is only used for indexes.  I could add an assertion that self is an Index so that we know to change it if/when the wording ceases to be accurate.",
        "createdAt" : "2018-02-16T20:28:16Z",
        "updatedAt" : "2018-02-16T23:34:20Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "118cd5d47ea025aad5e5759ea0a34cf86e0a390a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +110,114 @@    \"\"\"\n    def invalid_op(self, other=None):\n        raise TypeError(\"cannot perform {name} with this index type: \"\n                        \"{typ}\".format(name=name, typ=type(self).__name__))\n"
  },
  {
    "id" : "853ae894-b25e-43fa-a4bc-dff03fa9b1ee",
    "prId" : 19613,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19613#pullrequestreview-95584786",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c008b872-310d-4b3f-86da-88e0133ba92b",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Do you know why we build the intermediate `list` here?",
        "createdAt" : "2018-02-09T19:44:32Z",
        "updatedAt" : "2018-02-10T18:46:08Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "5341e189-6107-42de-8d93-36e534a68721",
        "parentId" : "c008b872-310d-4b3f-86da-88e0133ba92b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "No idea.  I can try removing it and see if that affects any tests.",
        "createdAt" : "2018-02-09T20:40:13Z",
        "updatedAt" : "2018-02-10T18:46:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "50c57efe-12bb-4503-a58b-9d8981304ebe",
        "parentId" : "c008b872-310d-4b3f-86da-88e0133ba92b",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Looks like a complex-dtype test would be affected.",
        "createdAt" : "2018-02-09T22:38:41Z",
        "updatedAt" : "2018-02-10T18:46:08Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "221f8a63d74445a160e03c77c78e21374a8c3a61",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +458,462 @@        yrav = y.ravel()\n        mask = notna(xrav) & notna(yrav)\n        result[mask] = op(np.array(list(xrav[mask])),\n                          np.array(list(yrav[mask])))\n    else:"
  },
  {
    "id" : "5078736f-0f5d-4ddd-9911-8e06f93bc1d2",
    "prId" : 19649,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19649#pullrequestreview-95820014",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "283b6600-c10a-447e-b3e6-ac94222687b9",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are you adding support for this?",
        "createdAt" : "2018-02-12T11:22:45Z",
        "updatedAt" : "2018-02-19T17:07:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "fda89ebe-34d2-4209-a60a-10f0838febb4",
        "parentId" : "283b6600-c10a-447e-b3e6-ac94222687b9",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This changes zero logic, just puts a dict here instead of passing these directly in panel.",
        "createdAt" : "2018-02-12T15:06:19Z",
        "updatedAt" : "2018-02-19T17:07:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9355ce2c5e160a8e50021e40623828d2bdcac591",
    "line" : 357,
    "diffHunk" : "@@ -1,1 +1501,1505 @@                           bool_method=_arith_method_PANEL)\n\npanel_flex_funcs = dict(flex_arith_method=_flex_method_PANEL,\n                        flex_comp_method=_comp_method_PANEL)\n"
  },
  {
    "id" : "c3690b03-cfb2-48b9-b28c-fcb0a4216f3c",
    "prId" : 19649,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19649#pullrequestreview-95819971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5490370f-e549-4e44-b931-07f89b38781d",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "are these new?",
        "createdAt" : "2018-02-12T11:23:00Z",
        "updatedAt" : "2018-02-19T17:07:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "17a6531a-3736-4f8b-a2bc-82a96eda561a",
        "parentId" : "5490370f-e549-4e44-b931-07f89b38781d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This changes zero logic, just puts a dict here instead of passing these directly in sparse.array.",
        "createdAt" : "2018-02-12T15:06:11Z",
        "updatedAt" : "2018-02-19T17:07:30Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9355ce2c5e160a8e50021e40623828d2bdcac591",
    "line" : 396,
    "diffHunk" : "@@ -1,1 +1586,1590 @@\n\nsparse_array_special_funcs = dict(arith_method=_arith_method_SPARSE_ARRAY,\n                                  comp_method=_arith_method_SPARSE_ARRAY,\n                                  bool_method=_arith_method_SPARSE_ARRAY)"
  },
  {
    "id" : "a6237a5a-801f-4100-843f-29efbbf288d3",
    "prId" : 19675,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19675#pullrequestreview-97413384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1783e3dd-d530-43cc-b32f-4c5ad1e32beb",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I would remove the 'and any new elemnt needed for successful array alignment', this is redundant with your last sentence.",
        "createdAt" : "2018-02-15T12:21:21Z",
        "updatedAt" : "2018-02-21T06:55:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "597d2dd1-3a68-4683-87f2-0554bd70dd35",
        "parentId" : "1783e3dd-d530-43cc-b32f-4c5ad1e32beb",
        "authorId" : "63ee66b6-1766-42e5-a157-fd09e51eaf64",
        "body" : "I'm not sure which sentence are you referring to. The \"and any new element needed\" sentence refers to the alignment process. The last sentence (\"If data in both corresponding...\") only deals with a \"corner case\" of two NaNs, without any direct reference to the data alignment process.",
        "createdAt" : "2018-02-18T07:16:44Z",
        "updatedAt" : "2018-02-21T06:55:01Z",
        "lastEditedBy" : "63ee66b6-1766-42e5-a157-fd09e51eaf64",
        "tags" : [
        ]
      },
      {
        "id" : "4a437a47-bd4c-4be8-a74c-fd3d6c2437dd",
        "parentId" : "1783e3dd-d530-43cc-b32f-4c5ad1e32beb",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "don't use the word 'array' as these are not arrays. this is still not very clear.",
        "createdAt" : "2018-02-18T17:31:08Z",
        "updatedAt" : "2018-02-21T06:55:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "5e088f18-442a-45c2-b317-e455c21a93ed",
        "parentId" : "1783e3dd-d530-43cc-b32f-4c5ad1e32beb",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I like this phrasing much better. Could you change \"new element\" to \"new missing values\"\r\n\r\nYou can remove the commas around the \"and any new element... \" clause.",
        "createdAt" : "2018-02-18T19:26:55Z",
        "updatedAt" : "2018-02-21T06:55:01Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "3192301df1957d1165ae25feaa51165e95aa0096",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +256,260 @@other : Series or scalar value\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing"
  },
  {
    "id" : "113854b8-752f-45b7-a59f-01b8d51a45f6",
    "prId" : 19675,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19675#pullrequestreview-97413384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd68cbe1-8322-43ae-98e2-f7324667f0f2",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "show a and b as well",
        "createdAt" : "2018-02-15T12:21:40Z",
        "updatedAt" : "2018-02-21T06:55:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "2d03b98a-ad8e-419a-84bc-500462cec39f",
        "parentId" : "dd68cbe1-8322-43ae-98e2-f7324667f0f2",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "You need to have a line with just `>>> a` on it before showing the Series. Likewise for `b`.",
        "createdAt" : "2018-02-18T19:28:21Z",
        "updatedAt" : "2018-02-21T06:55:01Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "3192301df1957d1165ae25feaa51165e95aa0096",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +270,274 @@Examples\n--------\n>>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n>>> a\na    1.0"
  },
  {
    "id" : "5b923131-863c-4cd5-8e9b-f852d9009d35",
    "prId" : 19675,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19675#pullrequestreview-96827290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46f228b2-f6cf-4f3a-9ddb-3e46338bcfbe",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "same",
        "createdAt" : "2018-02-15T12:21:49Z",
        "updatedAt" : "2018-02-21T06:55:01Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "3192301df1957d1165ae25feaa51165e95aa0096",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +307,311 @@    For Series input, axis to match Series index on\nfill_value : None or float value, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing"
  },
  {
    "id" : "e5468f6a-9904-4e8a-989f-401c68d14f71",
    "prId" : 19744,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19744#pullrequestreview-98405395",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c970781-60c3-4782-91ef-bf1d66a4494c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we need this as a standalone? (IOW can you replace the current usage with get_op_result_name)?",
        "createdAt" : "2018-02-20T01:54:07Z",
        "updatedAt" : "2018-02-20T16:09:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "19ab5f3a-66ca-4f93-b060-b57db12da03f",
        "parentId" : "7c970781-60c3-4782-91ef-bf1d66a4494c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "if not can you doc-string this",
        "createdAt" : "2018-02-20T01:54:22Z",
        "updatedAt" : "2018-02-20T16:09:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a9b3f417-928b-4cbd-8842-13611f5ab231",
        "parentId" : "7c970781-60c3-4782-91ef-bf1d66a4494c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "A lot of the uses can be replaced without affecting any existing behavior.  I'll see if I can get them all in a way that doesn't necessitate new tests.  If not I'll kill it off in the next pass.",
        "createdAt" : "2018-02-20T03:25:20Z",
        "updatedAt" : "2018-02-20T16:09:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "0acb0e09-eb0e-43fa-a18f-3a05ef4d959f",
        "parentId" : "7c970781-60c3-4782-91ef-bf1d66a4494c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yep, all non-test usages can be replaced.  I've done that and then also added a docstring.  Getting rid of it and updating the tests to test get_op_result_name directly will wait for another round with narrower scope.",
        "createdAt" : "2018-02-20T03:34:37Z",
        "updatedAt" : "2018-02-20T16:09:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e81a6929-1144-4262-b187-205539f65330",
        "parentId" : "7c970781-60c3-4782-91ef-bf1d66a4494c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok looks good. next pass let's try to remove this (I think you did, just need to transfer the tests)",
        "createdAt" : "2018-02-21T23:51:54Z",
        "updatedAt" : "2018-02-21T23:52:50Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "249b7ba8c4767c487abf73e2ab10cb6c85616b51",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +69,73 @@\n\ndef _maybe_match_name(a, b):\n    \"\"\"\n    Try to find a name to attach to the result of an operation between"
  },
  {
    "id" : "791d8bff-c990-46bf-92b9-6ad5077f58aa",
    "prId" : 19782,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19782#pullrequestreview-97932920",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9a4d018-5ebe-45f7-a2ff-868a33d0d948",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this whole sparse interaction is pretty hacky (I know not addressing this now), but....",
        "createdAt" : "2018-02-20T11:13:43Z",
        "updatedAt" : "2018-02-20T11:14:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4b22c0ee-0b30-4d97-9749-0fdf0141a80d",
        "parentId" : "d9a4d018-5ebe-45f7-a2ff-868a33d0d948",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, there are a couple of improvements in store for the pass after next (which is just implementing the single-call `ops.add_whatever_methods(cls)`)",
        "createdAt" : "2018-02-20T18:15:39Z",
        "updatedAt" : "2018-02-20T18:15:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b81a5cf509845840fc3b8cbad7545ca377e5d76",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +1563,1567 @@                other = SparseArray(other, fill_value=self.fill_value,\n                                    dtype=dtype)\n            return _sparse_array_op(self, other, op, name, series=False)\n        elif is_scalar(other):\n            with np.errstate(all='ignore'):"
  },
  {
    "id" : "c0a5ee48-6e3a-4da4-9a79-8acabab1ae3c",
    "prId" : 19782,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19782#pullrequestreview-97881493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64dc801f-326f-47f1-9d15-940dd4066740",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we hold off adding till then",
        "createdAt" : "2018-02-20T11:14:00Z",
        "updatedAt" : "2018-02-20T11:14:08Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "b1d8d67f-0a45-49b5-9c41-5dab4d796f8a",
        "parentId" : "64dc801f-326f-47f1-9d15-940dd4066740",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "This is necessary to get rid of the double-call in sparse.series.",
        "createdAt" : "2018-02-20T16:00:25Z",
        "updatedAt" : "2018-02-20T16:00:25Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b81a5cf509845840fc3b8cbad7545ca377e5d76",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +1584,1588 @@sparse_series_special_funcs = dict(arith_method=_arith_method_SPARSE_SERIES,\n                                   comp_method=_arith_method_SPARSE_SERIES,\n                                   bool_method=_bool_method_SERIES)\n# TODO: I don't think the functions defined by bool_method are tested"
  },
  {
    "id" : "83234a66-7d9a-409f-a647-3fc735190f0f",
    "prId" : 19800,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19800#pullrequestreview-98270824",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de769062-e142-4192-a33e-138d6201cc16",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Is this comment still correct? Or is it only for `y` now?",
        "createdAt" : "2018-02-21T15:44:31Z",
        "updatedAt" : "2018-03-01T04:04:32Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "19129c64-f929-43ce-bf17-4bf7215e539f",
        "parentId" : "de769062-e142-4192-a33e-138d6201cc16",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It's only for `y` now.",
        "createdAt" : "2018-02-21T16:44:45Z",
        "updatedAt" : "2018-03-01T04:04:32Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff516344f83bea946c2743810bea459f3182a265",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1126,1130 @@            # integer comparisons\n\n            # we have a datetime/timedelta and may need to convert\n            assert not needs_i8_conversion(x)\n            mask = None"
  },
  {
    "id" : "25cb9902-97a7-42e4-9e99-51b90493a4f9",
    "prId" : 19800,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19800#pullrequestreview-99114323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c0392fe-3c70-423e-871c-62057132d72a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some comments at various places",
        "createdAt" : "2018-02-24T14:50:23Z",
        "updatedAt" : "2018-03-01T04:04:32Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff516344f83bea946c2743810bea459f3182a265",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +1169,1173 @@            return self._constructor(res_values, index=self.index,\n                                     name=res_name)\n\n        if is_datetime64_dtype(self) or is_datetime64tz_dtype(self):\n            # Dispatch to DatetimeIndex to ensure identical"
  },
  {
    "id" : "9fc2e649-b545-4593-adb1-8060ca661c60",
    "prId" : 19828,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19828#pullrequestreview-99267363",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38300f5e-7a90-45c3-9114-317985160831",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this should go thru the fill_zeros path.",
        "createdAt" : "2018-02-25T16:13:11Z",
        "updatedAt" : "2018-02-26T00:17:18Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "75d3422a-e38d-4e9e-b129-1712630d1f28",
        "parentId" : "38300f5e-7a90-45c3-9114-317985160831",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Is this obvious?  I don't know the sparse code all that well, have been assuming that the do-it-upfront approach taken here was for a reason.",
        "createdAt" : "2018-02-25T18:30:27Z",
        "updatedAt" : "2018-02-26T00:17:18Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e48a3edf-25fb-4adb-a939-c7e4efaab360",
        "parentId" : "38300f5e-7a90-45c3-9114-317985160831",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "There will need to be a pass soon to make Series division handle division by zero the way that Index division now does.  That might be a reasonable time to take a close look at this.",
        "createdAt" : "2018-02-26T03:36:07Z",
        "updatedAt" : "2018-02-26T03:36:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "60af3624-d3b2-4d7d-8f01-9dc1c1c3ebea",
        "parentId" : "38300f5e-7a90-45c3-9114-317985160831",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok pls add it to the list. ",
        "createdAt" : "2018-02-26T11:37:20Z",
        "updatedAt" : "2018-02-26T11:37:33Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "45467f18f9687a69d90fc523fe52fef6f343a6c1",
    "line" : 241,
    "diffHunk" : "@@ -1,1 +1687,1691 @@    if is_integer_dtype(left) and is_integer_dtype(right):\n        # series coerces to float64 if result should have NaN/inf\n        if opname in ('floordiv', 'mod') and (right.values == 0).any():\n            left = left.astype(np.float64)\n            right = right.astype(np.float64)"
  },
  {
    "id" : "6572aba5-4065-4ad8-974b-07673a57afc5",
    "prId" : 20077,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20077#pullrequestreview-102718069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e1be9e6-294e-4648-a025-ef2d4d1c674b",
        "parentId" : null,
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "I think `level : int or str`, though we're inconsistent here.\r\n\r\n@jorisvandenbossche what should our policy be on index positions or labels? In principle, `int or str` isn't quite right since index labels needn't be strings. It'd be `int or object`, which isn't that informative. `int or label`?",
        "createdAt" : "2018-03-09T15:52:25Z",
        "updatedAt" : "2018-03-15T13:47:12Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "e6a55ef0-9cb0-4409-a689-eea125f389c8",
        "parentId" : "6e1be9e6-294e-4648-a025-ef2d4d1c674b",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Hmm, yes, this is a dubious one. \"name\" is technically not a 'type', but \"str\" would not be correct as you say. So maybe better to keep it that way. \r\n\r\nIf we keep the 'name' or 'label', wouldn't 'name' be better because it is here a index level name, not a label inside the index ?",
        "createdAt" : "2018-03-09T16:09:46Z",
        "updatedAt" : "2018-03-15T13:47:12Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "1d316186-e9e5-4c8c-8eb0-58a3c7c24b6f",
        "parentId" : "6e1be9e6-294e-4648-a025-ef2d4d1c674b",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Ah, yes you're right I was mistaken.\r\n\r\nAnd we can declare that \"name\" means anything that can go in `{.index,.columns}{.name,.names}`.",
        "createdAt" : "2018-03-09T17:05:26Z",
        "updatedAt" : "2018-03-15T13:47:12Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca3e5f9ca8e73f43dc71be260412e7cbf7d2d644",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +557,561 @@axis : {{0, 1, 'index', 'columns'}}\n    For Series input, axis to match Series index on\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level"
  },
  {
    "id" : "ddee5576-d6bd-4468-9c77-6552e915580a",
    "prId" : 20246,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20246#pullrequestreview-104115313",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba64280d-0b73-4b72-9fa0-49761277a932",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "blank line between ases",
        "createdAt" : "2018-03-11T13:48:40Z",
        "updatedAt" : "2018-03-11T13:50:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "ed6897e7-5a0b-41ef-a591-b5bf4e09faee",
        "parentId" : "ba64280d-0b73-4b72-9fa0-49761277a932",
        "authorId" : "b5d48d4a-885c-40fc-90d8-3bbdc71cbc18",
        "body" : "@jreback I am about to put in a PR for one of the examples.  Where should there be a blank line? Between what would be \"cell\" executions?",
        "createdAt" : "2018-03-15T03:55:14Z",
        "updatedAt" : "2018-03-15T03:55:14Z",
        "lastEditedBy" : "b5d48d4a-885c-40fc-90d8-3bbdc71cbc18",
        "tags" : [
        ]
      },
      {
        "id" : "9c269037-384d-4e46-8052-3e7e8621d151",
        "parentId" : "ba64280d-0b73-4b72-9fa0-49761277a932",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@kurtiskerstein I think there should be only blank lines around \"blocks\" of code that you want to have appear together in one code block",
        "createdAt" : "2018-03-15T08:53:44Z",
        "updatedAt" : "2018-03-15T08:53:45Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e3f1ce62e9af4f62681da82a652f0e2b63ea92b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +353,357 @@c  1.0\nd  NaN\n>>> b = pd.DataFrame(dict(one=[1, np.nan, 1, np.nan],\n                          two=[np.nan, 2, np.nan, 2]),\n                     index=['a', 'b', 'd', 'e'])"
  },
  {
    "id" : "621d354a-de36-493a-9bd6-85d7c0b8549c",
    "prId" : 20246,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20246#pullrequestreview-102882621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63630414-f667-4b48-96c2-84efb5fcbaf8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "could add some text here to indicate what the filling is doing",
        "createdAt" : "2018-03-11T13:49:06Z",
        "updatedAt" : "2018-03-11T13:50:42Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e3f1ce62e9af4f62681da82a652f0e2b63ea92b",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +362,366 @@d  1.0  NaN\ne  NaN  2.0\n>>> a.add(b, fill_value=0)\n   one  two\na  2.0  NaN"
  },
  {
    "id" : "6cadecf6-23d3-44f7-b309-2287698a9ec7",
    "prId" : 20415,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20415#pullrequestreview-145582014",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f23ea3e-9239-4efe-9ae1-5360412fa818",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I found `equivalent` a bit confusing. Would it make sense to say that they return the same results?",
        "createdAt" : "2018-08-13T09:48:36Z",
        "updatedAt" : "2018-12-02T01:36:06Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "6879e896995faaea48f604437d45c3797ddfdbc9",
    "line" : 396,
    "diffHunk" : "@@ -1,1 +734,738 @@\nCompare to a scalar and operator version which return the same\nresults.\n\n>>> df == 100"
  },
  {
    "id" : "d0f3f645-513e-44c2-af85-584f064839eb",
    "prId" : 20415,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20415#pullrequestreview-164800078",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fdc1ac5-abd1-48bd-bfa8-d228b7144b2d",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think we need to explain what's going on here. And I'd probably set `company` as the index when creating the `DataFrame`, to avoid adding extra complexity here. I don't think it's a problem for other examples.\r\n\r\nThe blank line after the docstring is not required.",
        "createdAt" : "2018-08-13T09:55:38Z",
        "updatedAt" : "2018-12-02T01:36:06Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "a3cc831a-56af-481d-afc5-b82b8626ef6c",
        "parentId" : "0fdc1ac5-abd1-48bd-bfa8-d228b7144b2d",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Has this been resolved?",
        "createdAt" : "2018-10-13T16:43:42Z",
        "updatedAt" : "2018-12-02T01:36:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "c35de086-0834-4049-a9a6-dc5415135082",
        "parentId" : "0fdc1ac5-abd1-48bd-bfa8-d228b7144b2d",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Can you also add this explanation? So users can understand in an easier way what we are showing here.",
        "createdAt" : "2018-10-15T16:57:54Z",
        "updatedAt" : "2018-12-02T01:36:06Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "6879e896995faaea48f604437d45c3797ddfdbc9",
    "line" : 480,
    "diffHunk" : "@@ -1,1 +818,822 @@   C   True    False\n\"\"\"\n\n_flex_doc_PANEL = \"\"\"\n{desc} of series and other, element-wise (binary operator `{op_name}`)."
  },
  {
    "id" : "d1d4fc83-b00b-48a8-a7f6-ffe89356dd1e",
    "prId" : 20415,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20415#pullrequestreview-164800078",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78c40a0d-fffc-48a2-b7d9-3fa9fa7441c7",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think there is an extra pair of `{}`, which creates a set of the dictionary, which would raise an exception. Also, the indentation is not right.",
        "createdAt" : "2018-08-16T08:11:37Z",
        "updatedAt" : "2018-12-02T01:36:06Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "0be69f1e-50a4-499c-8f7a-f5d3b200a877",
        "parentId" : "78c40a0d-fffc-48a2-b7d9-3fa9fa7441c7",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Has this been resolved?",
        "createdAt" : "2018-10-13T16:42:10Z",
        "updatedAt" : "2018-12-02T01:36:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "89a51c2b-b056-4215-8091-d1c3838be12c",
        "parentId" : "78c40a0d-fffc-48a2-b7d9-3fa9fa7441c7",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "the extra pair of brackets is needed, as single curly brackets are interpreted as a variable like in `'{foo}'.format(foo=123)`\r\n\r\n@ParfaitG did you check that the indentation is correct in the resulting docstring?",
        "createdAt" : "2018-10-15T16:54:57Z",
        "updatedAt" : "2018-12-02T01:36:06Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "6879e896995faaea48f604437d45c3797ddfdbc9",
    "line" : 387,
    "diffHunk" : "@@ -1,1 +725,729 @@--------\n>>> df = pd.DataFrame({{'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]}},\n...                   index=['A', 'B', 'C'])\n>>> df"
  },
  {
    "id" : "ec5ddf23-d6cf-4c36-ab06-7273b7758fd5",
    "prId" : 20415,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20415#pullrequestreview-146738459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "564dbea1-1957-4af3-8468-64c5ead1356d",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I still think that when comparing two DataFrame objects, the `axis` keyword shouldn't be used. IMO it's not that in both cases it returns the same results. It's that the keyword does not apply (pandas could even raise a exception about it).\r\n\r\nCan you just use `df.gt()` once without `axis` please?",
        "createdAt" : "2018-08-16T08:17:52Z",
        "updatedAt" : "2018-12-02T01:36:06Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "6879e896995faaea48f604437d45c3797ddfdbc9",
    "line" : 454,
    "diffHunk" : "@@ -1,1 +792,796 @@B  False    False\nC  False     True\nD  False    False\n\nCompare to a MultiIndex by level."
  },
  {
    "id" : "02e87fc1-bd37-491b-a5ef-8c62c8f0b381",
    "prId" : 20415,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20415#pullrequestreview-146738459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63f83ee6-f90e-434c-8460-e8196be84587",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Do you mind adding a note letting the users know that two `NaN` values are considered different (i.e. `NaN != NaN`). I think it can be helpful for beginners.",
        "createdAt" : "2018-08-16T08:19:34Z",
        "updatedAt" : "2018-12-02T01:36:06Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "6879e896995faaea48f604437d45c3797ddfdbc9",
    "line" : 381,
    "diffHunk" : "@@ -1,1 +719,723 @@Notes\n--------\nMismatched indices will be unioned together.\n`NaN` values are considered different (i.e. `NaN` != `NaN`).\n"
  },
  {
    "id" : "520bbd49-1f5e-4840-98fc-8376ed96d032",
    "prId" : 20415,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20415#pullrequestreview-147440220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab347f91-098a-4b17-b72f-9ee0412673f3",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "You also have an extra pair of brackets here. With this change and the pending ones from the previous review, lgtm",
        "createdAt" : "2018-08-18T20:13:41Z",
        "updatedAt" : "2018-12-02T01:36:06Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "6879e896995faaea48f604437d45c3797ddfdbc9",
    "line" : 353,
    "diffHunk" : "@@ -1,1 +692,696 @@other : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis :  {{0 or 'index', 1 or 'columns'}}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns')."
  },
  {
    "id" : "4855be1d-b979-45d0-9c74-044270a6af41",
    "prId" : 20415,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20415#pullrequestreview-148050603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72134fbe-99e0-454a-90ec-2241547432a5",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I was taking a look before merging, and there is no case when `op_name` is not in `_op_descriptions`. Any reason why this if was added?\r\n\r\nCan we simply have?\r\n\r\n```\r\n@Appender(_flex_comp_doc_FRAME.format(op_name=op_name,\r\n                                      desc=_op_descriptions[op_name]['desc'])\r\n```\r\n\r\nOr add an assert `op_name in _op_descriptions` if you think its useful, but I don't see this `if` adding value.",
        "createdAt" : "2018-08-21T13:11:02Z",
        "updatedAt" : "2018-12-02T01:36:06Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "6879e896995faaea48f604437d45c3797ddfdbc9",
    "line" : 501,
    "diffHunk" : "@@ -1,1 +2046,2050 @@                                      desc=_op_descriptions[op_name]['desc'])\n\n    @Appender(doc)\n    def f(self, other, axis=default_axis, level=None):\n"
  },
  {
    "id" : "4fdc2464-8604-4d63-8cdd-c5fc792e5119",
    "prId" : 20415,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20415#pullrequestreview-148417853",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b39a3854-4542-4e92-adcb-57ef27b308b4",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can we turn on doc-tests for this?",
        "createdAt" : "2018-08-22T10:15:33Z",
        "updatedAt" : "2018-12-02T01:36:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "6879e896995faaea48f604437d45c3797ddfdbc9",
    "line" : 390,
    "diffHunk" : "@@ -1,1 +728,732 @@...                   index=['A', 'B', 'C'])\n>>> df\n   cost  revenue\nA   250      100\nB   150      250"
  },
  {
    "id" : "35fd84d6-5215-4a8a-a594-dca7ffc87275",
    "prId" : 20415,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20415#pullrequestreview-164468884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a48cf1a-f8c2-43db-ac35-05dd927ed76a",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "put a blank line between cases",
        "createdAt" : "2018-08-22T10:15:46Z",
        "updatedAt" : "2018-12-02T01:36:06Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "6fc1b26c-963a-44b1-b2c8-27f89399f732",
        "parentId" : "0a48cf1a-f8c2-43db-ac35-05dd927ed76a",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Also, when you separate these two blocks of examples (list vs Series), can you a short comment explaining that for Series `axis` is by default 'columns', but for list is `index`, as the example shows?",
        "createdAt" : "2018-08-22T14:38:56Z",
        "updatedAt" : "2018-12-02T01:36:06Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "34b346a5-7714-41a2-9d9f-f2d2ad145502",
        "parentId" : "0a48cf1a-f8c2-43db-ac35-05dd927ed76a",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Has this been resolved?",
        "createdAt" : "2018-10-13T16:42:32Z",
        "updatedAt" : "2018-12-02T01:36:06Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6879e896995faaea48f604437d45c3797ddfdbc9",
    "line" : 426,
    "diffHunk" : "@@ -1,1 +764,768 @@C  True    False\n\n>>> df != pd.Series([100, 250, 300])\n   cost  revenue     0     1     2\nA  True     True  True  True  True"
  },
  {
    "id" : "2d44b1c7-96c7-46f2-bd1e-70c77b4ef1c8",
    "prId" : 20415,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20415#pullrequestreview-180583580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "476c9467-caf7-47ae-810a-488c3f843387",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "one more space here?",
        "createdAt" : "2018-12-02T23:17:02Z",
        "updatedAt" : "2018-12-02T23:17:03Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "b9442393-401a-4e39-8d77-411151c4683e",
        "parentId" : "476c9467-caf7-47ae-810a-488c3f843387",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "nope, my mistake",
        "createdAt" : "2018-12-02T23:17:56Z",
        "updatedAt" : "2018-12-02T23:17:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6879e896995faaea48f604437d45c3797ddfdbc9",
    "line" : 234,
    "diffHunk" : "@@ -1,1 +573,577 @@--------\n>>> df = pd.DataFrame({{'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]}},\n...                   index=['circle', 'triangle', 'rectangle'])\n>>> df"
  },
  {
    "id" : "66343c59-96cb-423e-a342-f8da590183a2",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-135886462",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2dd3097c-97f3-4260-beaa-dcdefa80bd2c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "cc @jbrockmendel \r\n\r\nnot real happy here because ndarrays take over the ops, but not sure what else to do",
        "createdAt" : "2018-07-04T15:41:53Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "760102f4-0a3a-4c94-bad3-c6a5222bacf7",
        "parentId" : "2dd3097c-97f3-4260-beaa-dcdefa80bd2c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah definitely not my favorite part of this diff.  Making sure I grok: this is to make it dispatched to reversed ops correctly?\r\n\r\nInstead of trying to \"trick\" it into calling the reversed ops via `NotImplemented`, what if we defined `reversed_ops = {operator.add: radd, operator.sub: rsub, ...}` and then made the calls directly?  We'd have to be careful about `RecursionError`s, but it _might_ be cleaner.",
        "createdAt" : "2018-07-04T16:30:17Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "a3f909f4-ee75-4852-841e-5d5fa768516c",
        "parentId" : "2dd3097c-97f3-4260-beaa-dcdefa80bd2c",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yeah this prob could use some refactoring, but left for after everything works",
        "createdAt" : "2018-07-04T19:16:39Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "1e6d9ba5-4515-4744-9dde-7266a32f9278",
        "parentId" : "2dd3097c-97f3-4260-beaa-dcdefa80bd2c",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "@jreback I put this in there to get things to work right when I did the EA ops stuff, and agree some refactoring would be useful.  The issues with reverse ops and other EA types are subtle.\r\n\r\nWith respect to your comment \"or non-same-type extension array dispatching\", I think we're OK here, because if the EA is the left argument, it goes to the EA op, and it is up to the EA to decide how to handle the right argument if it was an EA of a different type.",
        "createdAt" : "2018-07-05T14:24:51Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "f76dd37d-78ec-4662-957e-b4a3e6a0811f",
        "parentId" : "2dd3097c-97f3-4260-beaa-dcdefa80bd2c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is this difference intended:\r\n\r\n```\r\nIn [55]: s = pd.Series([1, 2, np.nan], dtype='Int64')\r\n\r\nIn [56]: a = s.values\r\n\r\nIn [57]: np.array([1, 2, 3]) + a\r\nOut[57]: array([2, 4, nan], dtype=object)\r\n\r\nIn [58]: a + np.array([1, 2, 3]) \r\nOut[58]: IntegerArray([2, 4, nan], dtype='Int64')\r\n```\r\n\r\n(I thought the code here tried to avoid this difference, although I am not fully sure if that is needed)",
        "createdAt" : "2018-07-10T04:19:52Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "8890fc50-dcb0-47b5-8949-42f54c44d606",
        "parentId" : "2dd3097c-97f3-4260-beaa-dcdefa80bd2c",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "@Dr-Irv said (putting it in the right place):\r\n\r\n@jorisvandenbossche On your example above where you ask \"Is this difference intended:\", there is no way to avoid this.  If you do `np.array([1, 2, 3]) + a`, then the numpy `__add__()` method is called. If you did `pd.Series([1,2,3]) + a` in your example, it works, because then the `Series` method sees that the right operand is an EA, and dispatches to the reverse operator of the EA.",
        "createdAt" : "2018-07-10T15:39:55Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +1061,1065 @@\n    if is_extension_array_dtype(left):\n\n        new_left = left.values\n        if isinstance(right, np.ndarray):"
  },
  {
    "id" : "337a3b5f-09a7-4810-bed1-9bb3afe52314",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-134457451",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34a1288f-1a57-4de4-b4bc-0945b6f8ed82",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Ideally I'd like to get rid of this altogether to de-nest the closures, catch a more specific exception, and do this directly in `na_op`",
        "createdAt" : "2018-07-04T16:34:28Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "abd93f9e-95e1-4322-ab51-024962239505",
        "parentId" : "34a1288f-1a57-4de4-b4bc-0945b6f8ed82",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "sure, separate PR :>",
        "createdAt" : "2018-07-04T19:09:01Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +1124,1128 @@        return result\n\n    def safe_na_op(lvalues, rvalues):\n        \"\"\"\n        return the result of evaluating na_op on the passed in values"
  },
  {
    "id" : "5b736710-4756-419e-9c3d-9ad66ea0dab9",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-134457413",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19cf0609-af2b-4e78-bd14-08622e56eb53",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not necessarily part of this PR, but this could just dispatch to the `Categorical` and it would raise `TypeError` correctly.  The exception message would be slightly changed.",
        "createdAt" : "2018-07-04T16:35:50Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "2a6f8643-668e-4bfb-ba3e-e97a23b026e9",
        "parentId" : "19cf0609-af2b-4e78-bd14-08622e56eb53",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I think that dispatch_to_extension_op should subsume any is_categorial dispatching directly (but for later)",
        "createdAt" : "2018-07-04T19:08:46Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +1157,1161 @@        if is_categorical_dtype(left):\n            raise TypeError(\"{typ} cannot perform the operation \"\n                            \"{op}\".format(typ=type(left).__name__, op=str_rep))\n\n        elif (is_extension_array_dtype(left) or"
  },
  {
    "id" : "4632a40e-b72c-4c76-85e7-d5b04569fc6b",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-134436913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e13c62a5-37a7-40b6-bfcb-490c401737be",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah, ideally we'll do that below in `wrapper` and de-nest this closure too",
        "createdAt" : "2018-07-04T16:39:32Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 162,
    "diffHunk" : "@@ -1,1 +1248,1252 @@        # TODO:\n        # should have guarantess on what x, y can be type-wise\n        # Extension Dtypes are not called here\n\n        # dispatch to the categorical if we have a categorical"
  },
  {
    "id" : "56e84d76-d217-4a71-802e-95b8bafb4cb3",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-139192389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83b64a97-4b48-483a-a248-5498259f4097",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Why is this needed?",
        "createdAt" : "2018-07-07T19:18:11Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ee8c3846-3b60-4bcf-adb4-d3433220c8f3",
        "parentId" : "83b64a97-4b48-483a-a248-5498259f4097",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "because ``%`` is the string operator, so if you do something like\r\n\r\n``'foo' % np.array([...])`` (or whatever is on the rhs and the rmod operator gets called, then it actually works (and doesn't raise)\r\n\r\n```\r\nIn [1]: 'foo' % np.array([0])\r\nOut[1]: 'foo'\r\n\r\nIn [2]: np.array([0]) % 'foo'\r\nTypeError: ufunc 'remainder' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\r\n\r\n```",
        "createdAt" : "2018-07-07T20:26:22Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d65547e9-4258-40e1-b083-b13e73061d0b",
        "parentId" : "83b64a97-4b48-483a-a248-5498259f4097",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "OK, I agree that the above is not the best error message (as I assume the catching above is only for a better error message?)\r\n\r\nCan you add to the message \"... with a string\" at the end?",
        "createdAt" : "2018-07-07T22:11:37Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "08a82461-1220-4c98-86b9-771581a974d2",
        "parentId" : "83b64a97-4b48-483a-a248-5498259f4097",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you do this one?",
        "createdAt" : "2018-07-10T04:12:11Z",
        "updatedAt" : "2018-07-17T12:28:57Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "26582c65-aa0f-4e13-b297-b4ed3f44266a",
        "parentId" : "83b64a97-4b48-483a-a248-5498259f4097",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This one",
        "createdAt" : "2018-07-20T20:44:45Z",
        "updatedAt" : "2018-07-20T20:49:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +141,145 @@    if isinstance(right, compat.string_types):\n        raise TypeError(\"{typ} cannot perform the operation mod\".format(\n            typ=type(left).__name__))\n\n    return right % left"
  },
  {
    "id" : "ae0a39b9-729f-41f6-bae8-6f61d8581f36",
    "prId" : 21160,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21160#pullrequestreview-139192389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a29272ef-2f56-4df9-a2d3-225c431d8312",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Can you clarify this to do comment?",
        "createdAt" : "2018-07-20T20:46:14Z",
        "updatedAt" : "2018-07-20T20:49:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f04f90449b9b605c0a12956a91f538aa6db91ae",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +1066,1070 @@\n            # handle numpy scalars, this is a PITA\n            # TODO(jreback)\n            new_right = lib.item_from_zerodim(right)\n            if is_scalar(new_right):"
  },
  {
    "id" : "f94eb620-4052-413c-ac13-c79f54bb63bb",
    "prId" : 21261,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21261#pullrequestreview-133653077",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a7a58c3-fd40-4c27-8f42-d4d1ade5b2ef",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "was this needed to fix failing tests? (this was not here in a previous version I think? and eg the dispatch to index is only dealing with the left case)",
        "createdAt" : "2018-06-06T07:12:07Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "46189618-9a4d-433f-9671-30378f9fc592",
        "parentId" : "3a7a58c3-fd40-4c27-8f42-d4d1ade5b2ef",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "This was added a few commits ago. I discovered that the tests were not properly testing the reverse operators. So there were a couple of changes related to that:\r\n1. Changed `pandas/tests/extension/base/ops.py:BaseOpsUtil` to properly test the reverse operator.\r\n2. Changed the tests in `pandas/core/ops.py:_arith_method_SERIES.wrapper()` `pandas/core/ops.py:_comp_method_SERIES.wrapper()` to check if the \"right\" argument is an extension array\r\n3. The change you quoted above to detect when the reverse operator is called.\r\n\r\nWithout these changes, an operator such as `pd.Series([1,2,3]) + pd.Series(ExtensionArray(data))` would return an `object` dtype rather than the ExtensionArray dtype.\r\n\r\nAs best as I can tell, `dispatch_to_index_op` is only used on datetime, timedelta and Categorical objects. In those cases, if the index is on the right and some other type is on the left, the other type returns `NotImplemented`, which causes python to then call the reverse operator on the right argument.  With extension types, I think we should allow a Series of any object to be on the left, and then have the extension operator figure out if the operation is valid.\r\n\r\nAnother possible implementation might be  to add a test in the wrappers that says that if is_extension_dtype(right) return NotImplemented, which will then make python call the reverse operator.\r\n",
        "createdAt" : "2018-06-06T14:24:44Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "9bce5d72-760f-4dc0-8454-2f9b72d420f7",
        "parentId" : "3a7a58c3-fd40-4c27-8f42-d4d1ade5b2ef",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "> Another possible implementation might be to add a test in the wrappers that says that if is_extension_dtype(right) return NotImplemented\r\n\r\nThis is much closer to what we've had in mind with the recent refactoring in `ops`.  Would this look something like splitting up the conditions on 1082-1085?  We might need to up-cast `right` to be a `Series` in order for the deference chain to go through; I'll need to double-check.\r\n\r\nWhy is the `list(left.values)` necessary?  I would have thought `left.values` would get the job done.",
        "createdAt" : "2018-06-06T20:24:38Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e49567c8-13e7-47ce-96cc-cb96a010760e",
        "parentId" : "3a7a58c3-fd40-4c27-8f42-d4d1ade5b2ef",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "@jbrockmendel Wrote:\r\n> >  Another possible implementation might be to add a test in the wrappers that says that if is_extension_dtype(right) return NotImplemented\r\n\r\n>This is much closer to what we've had in mind with the recent refactoring in ops. Would this look something like splitting up the conditions on 1082-1085? We might need to up-cast right to be a Series in order for the deference chain to go through; I'll need to double-check.\r\n\r\nYes, I think it would be something like:\r\n```\r\n       elif is_extension_array_dtype(left):\r\n           return dispatch_to_extension_op(op, left, right)\r\n       elif (is_extension_array_dtype(right) and                 \r\n              not is_categorical_dtype(right)):\r\n           return NotImplemented\r\n```\r\nBut I would have to test the concept.  I don't think the upcast is necessary. We know that left is a Series. So python would then see that `op(left, right)` returns `NotImplemented`, and then try to call `reverse_op(right, left)`, so that the reverse operator is called, but using the implementation of `right`.  \r\n\r\nI'm not going to try making that change without feedback from others.\r\n\r\n> Why is the list(left.values) necessary? I would have thought left.values would get the job done.\r\n\r\nBecause `left.values` could be any type (numpy.ndarray, pd.Categorical, etc.), and we don't want the version of op to be called that is associated with the class of left.values . So by making it a list, we are forcing the reverse operator to be called on right.values, which is the EA implementation.\r\n",
        "createdAt" : "2018-06-06T20:51:22Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "e12951bf-ce50-4310-858a-0c3ff500af95",
        "parentId" : "3a7a58c3-fd40-4c27-8f42-d4d1ade5b2ef",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> Another possible implementation might be to add a test in the wrappers that says that if is_extension_dtype(right) return NotImplemented, which will then make python call the reverse operator.\r\n\r\nI think this is the better way to go. \r\n\r\nFor me it is fine to not yet do this in this PR, but then I would also not include the above change (and live with that the first iteration in this PR is not yet ideal for cases where the ExtensionArray is the right variable)",
        "createdAt" : "2018-06-22T14:26:56Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "b66756a7-6edc-4290-bee7-3111e73c6873",
        "parentId" : "3a7a58c3-fd40-4c27-8f42-d4d1ade5b2ef",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "@jorisvandenbossche If I don't handle the  case where ExtensionArray is the right variable now, then my tests will fail.  So I either implement it the other way (as you quoted above), or leave it as I have it now.  Should I make that change (using `NotImplemented`)?",
        "createdAt" : "2018-06-22T21:01:26Z",
        "updatedAt" : "2018-06-29T00:18:42Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "4b40061f-20f9-4c98-a215-8b80a56bb792",
        "parentId" : "3a7a58c3-fd40-4c27-8f42-d4d1ade5b2ef",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> Should I make that change (using NotImplemented)?\r\n\r\nI would at least try this",
        "createdAt" : "2018-06-29T10:00:44Z",
        "updatedAt" : "2018-06-29T10:00:44Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "06d2d518-ecbd-430a-aff0-f4abeeb5b4ef",
        "parentId" : "3a7a58c3-fd40-4c27-8f42-d4d1ade5b2ef",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "@jorisvandenbossche Yes, I will try this in a new PR.",
        "createdAt" : "2018-06-29T13:51:41Z",
        "updatedAt" : "2018-06-29T13:51:41Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "924e96b0-6ea1-44e3-9cac-df2b5088e5a2",
        "parentId" : "3a7a58c3-fd40-4c27-8f42-d4d1ade5b2ef",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "@jorisvandenbossche (and @jbrockmendel) I tried the `NotImplemented` idea and it doesn't work.  I think the reason is as follows.  Let's say that we have one `Series` called `s1` that has a normal (`int` or `double`) dtype. And `s2` has a dtype of the EA.  Let's say you write the expression `s1 + s2`.  Python sees that you are adding two `Series` objects.  So internally, if we return `NotImplemented` because `s2` is an EA, then Python will say \"Well, you don't know how to add a Series to a Series, so I'm not going to bother calling the reverse operator.\"  In other words, the reverse operator is only called when the two types passed to the operator are different, and `NotImplemented` is returned when applying the operator to the first argument.",
        "createdAt" : "2018-06-29T22:12:04Z",
        "updatedAt" : "2018-06-29T22:12:04Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      },
      {
        "id" : "8f0cab3d-3139-4a1c-aed5-b93e10ee6111",
        "parentId" : "3a7a58c3-fd40-4c27-8f42-d4d1ade5b2ef",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I'm not entirely sure I follow.  Are you saying that both `s1.__add__(s2)` and `s2.__add__(s1)` return `NotImplemented`?\r\n\r\nThe dispatch logic should do something like\r\n```\r\nout = s1.values + s2\r\nreturn Series(out, name=...)\r\n```\r\n\r\nIt is `s1.values.__add__` that should return `NotImplemented` in this case.  Is this not an option for some reason?",
        "createdAt" : "2018-07-01T02:17:23Z",
        "updatedAt" : "2018-07-01T02:17:23Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e24a568d-cf6d-4e05-bc08-1ea47f0c1085",
        "parentId" : "3a7a58c3-fd40-4c27-8f42-d4d1ade5b2ef",
        "authorId" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "body" : "@jbrockmendel I've tried two different alternatives (regarding replacing this code\r\n```python\r\nelse:\r\n        # We know that left is not ExtensionArray and is Series and right is\r\n        # ExtensionArray.  Want to force ExtensionArray op to get called\r\n        res_values = op(list(left.values), right.values)\r\n```\r\nthat this discussion refers to). Note the section of code is hit when `left.values` is *not* an EA, but `right.values` is an EA.\r\n1. Use\r\n```python\r\nelse:\r\n    return NotImplemented\r\n```\r\n2. Use\r\n```python\r\nelse:\r\n    res_values = op(left.values, right.values)\r\n```\r\n\r\nIn the first case, python sees that `s1.__add__(s2)` is `NotImplemented`, and because `s1` and `s2` are both of type `Series`, then `s2.__radd__(s1)` is never called.\r\n\r\nIn the second case, `left.values` is a `numpy` array, so then the `numpy` `__add__` method is called, and it is perfectly happy to return an array of `dtype` that is set to `object` rather than the dtype of the EA.  `numpy` ends up calling the `__add__` method for each of the elements.\r\n",
        "createdAt" : "2018-07-02T14:39:19Z",
        "updatedAt" : "2018-07-02T14:39:19Z",
        "lastEditedBy" : "d9d08f2d-b33c-4c2c-9969-32795418a9da",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fc93e49a28eccc4c66294e7238ba63f0e7bda29",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1008,1012 @@        # We know that left is not ExtensionArray and is Series and right is\n        # ExtensionArray.  Want to force ExtensionArray op to get called\n        res_values = op(list(left.values), right.values)\n\n    res_name = get_op_result_name(left, right)"
  },
  {
    "id" : "eea1876c-9254-4171-aaa9-3cffd4eab405",
    "prId" : 21361,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/21361#pullrequestreview-127230515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f223bb30-b676-4bcd-93c5-06928897592d",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "is this check needed? (I would not expect it ever to be true if it is a datetime.date ?",
        "createdAt" : "2018-06-07T22:16:58Z",
        "updatedAt" : "2018-06-08T12:36:19Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "a53b7c07-2dd5-4074-90d6-5151508fc239",
        "parentId" : "f223bb30-b676-4bcd-93c5-06928897592d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "Apparently datetime.datetime subclasses datetime.date\r\n\r\nhttps://bugs.python.org/issue28878\r\n",
        "createdAt" : "2018-06-07T22:29:37Z",
        "updatedAt" : "2018-06-08T12:36:19Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "08e38918-9333-4273-beea-22abdb7e9b8c",
        "parentId" : "f223bb30-b676-4bcd-93c5-06928897592d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "rather than inlineing this, I think would be better to move to a module level function, maybe\r\n``other = maybe_coerce_other(other, op)``",
        "createdAt" : "2018-06-08T11:20:33Z",
        "updatedAt" : "2018-06-08T12:36:19Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "df0df057-67cb-41ce-90af-fc0bfaf88030",
        "parentId" : "f223bb30-b676-4bcd-93c5-06928897592d",
        "authorId" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "body" : "You mean just the new bit I added, right?\r\n\r\nI'm inclined to leave it here since we'll just be deleting it soon (is 0.24.0 too soon?).",
        "createdAt" : "2018-06-08T12:39:15Z",
        "updatedAt" : "2018-06-08T12:39:16Z",
        "lastEditedBy" : "21b82015-4bfc-4f74-bfca-586973dad2cd",
        "tags" : [
        ]
      },
      {
        "id" : "cf74c3fb-eeb9-4c03-a394-f8e7de7e711b",
        "parentId" : "f223bb30-b676-4bcd-93c5-06928897592d",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "> Apparently datetime.datetime subclasses datetime.date\r\n\r\nAh, only checked the other way around :-)\r\n\r\nYeah, if this is only temporary code I would just leave it here",
        "createdAt" : "2018-06-08T15:45:41Z",
        "updatedAt" : "2018-06-08T15:45:41Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "04400c0a-e04a-468f-abd3-277c8386eab3",
        "parentId" : "f223bb30-b676-4bcd-93c5-06928897592d",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, is there an issue to fix this for 0.24.0? (can you add a TODO mention here)",
        "createdAt" : "2018-06-08T16:29:30Z",
        "updatedAt" : "2018-06-08T16:29:30Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "174c458e6405ff6cec36dc3f4b33ef8c277857cd",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1202,1206 @@            # Series/Index behavior\n            if (isinstance(other, datetime.date) and\n                    not isinstance(other, datetime.datetime)):\n                # https://github.com/pandas-dev/pandas/issues/21152\n                # Compatibility for difference between Series comparison w/"
  },
  {
    "id" : "29458186-d0b0-4411-9625-d7c5ae17fe5b",
    "prId" : 22019,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22019#pullrequestreview-154700248",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f31a1411-28e5-4872-824a-089f3e7efd54",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this is pretty janky, can you make simpler?",
        "createdAt" : "2018-09-12T11:36:11Z",
        "updatedAt" : "2018-10-02T22:17:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "794eafa9-f217-4c8b-9963-c85d9e268600",
        "parentId" : "f31a1411-28e5-4872-824a-089f3e7efd54",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Not really, this needs to be `op` iff we end up calling `_combine_match_columns`.\r\n\r\nA few PRs down the road I expect to get rid of `na_op` and always pass `op`, so hopefully this will be gone before long.",
        "createdAt" : "2018-09-12T15:11:20Z",
        "updatedAt" : "2018-10-02T22:17:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5832c2b81bc7999877f3fc83ddc29484fe6e5da6",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +1857,1861 @@            # For these values of `axis`, we end up dispatching to Series op,\n            # so do not want the masked op.\n            pass_op = op if axis in [0, \"columns\", None] else na_op\n            return _combine_series_frame(self, other, pass_op,\n                                         fill_value=fill_value, axis=axis,"
  },
  {
    "id" : "6e23b47e-e8ed-4cb5-9159-67d987355936",
    "prId" : 22019,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22019#pullrequestreview-156360121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ced5c95b-0a95-4f3b-8818-b3f088804ff8",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add a doc-comment here (and below) to disambiguate the elifs",
        "createdAt" : "2018-09-18T13:17:17Z",
        "updatedAt" : "2018-10-02T22:17:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5832c2b81bc7999877f3fc83ddc29484fe6e5da6",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1705,1709 @@        # We only get here if called via left._combine_match_columns,\n        # in which case we specifically want to operate row-by-row\n        assert right.index.equals(left.columns)\n\n        def column_op(a, b):"
  },
  {
    "id" : "e9b1dc06-c2e8-41b2-8ff7-6c0d8783c161",
    "prId" : 22068,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22068#pullrequestreview-141320782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80d86652-71ca-4d16-adaa-6eb5120edb84",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "the issue here is we need to be able to distinguish between an actual dtype comparison and a real comparison, e.g.\r\n``df.dtypes == 'category' `` (or ``df.dtypes == 'Int8' ``.\r\n\r\nthis is pretty thorny, e.g. how do you know when to convert a scalar string in a comparison op to an actual dtype for comparisons",
        "createdAt" : "2018-07-28T13:09:50Z",
        "updatedAt" : "2018-08-02T01:54:15Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a5a5539f-d21b-414c-9812-79855abb6e04",
        "parentId" : "80d86652-71ca-4d16-adaa-6eb5120edb84",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yah.  A while ago there was a check `is_categorical_dtype(y) and not is_scalar(y)` and it took me a while to figure out that the `is_scalar` part was specifically to avoid letting \"category\" through, so I've gotten in the habit of adding this comment for future readers.",
        "createdAt" : "2018-07-28T16:10:12Z",
        "updatedAt" : "2018-08-02T01:54:15Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c36e6729b1df61559e29e5e9b2dbe0678c0795a6",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +1387,1391 @@              (is_extension_array_dtype(other) and not is_scalar(other))):\n            # Note: the `not is_scalar(other)` condition rules out\n            # e.g. other == \"category\"\n            return dispatch_to_extension_op(op, self, other)\n"
  },
  {
    "id" : "8ed0ba4b-f475-4439-93d4-65df29fc5bbf",
    "prId" : 22163,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22163#pullrequestreview-144529046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "660f711c-27a2-411a-bc8a-23fd16485666",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why is ``is_list_like`` (maybe after some other comparisons) enough here?",
        "createdAt" : "2018-08-08T10:11:18Z",
        "updatedAt" : "2018-08-10T14:11:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "c5873d4a-a39a-4c9b-9eef-787a5236ca39",
        "parentId" : "660f711c-27a2-411a-bc8a-23fd16485666",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "ATM the `isinstance(other, list)` check is done below the `isinstance(other, (np.ndarray, pd.Index))` check.  Wrapping lists earlier let us send lists through that same ndarray/Index block.  Ideally the catchall `else:` block can be reduced to only-scalars, but we're not there yet.",
        "createdAt" : "2018-08-08T17:36:47Z",
        "updatedAt" : "2018-08-10T14:11:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b62135b945ea015ef5531af8dc9502f6c018511",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1367,1371 @@        res_name = get_op_result_name(self, other)\n\n        if isinstance(other, list):\n            # TODO: same for tuples?\n            other = np.asarray(other)"
  },
  {
    "id" : "023a66af-3092-4621-8b05-5eb187cf3af4",
    "prId" : 22163,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22163#pullrequestreview-144529710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01645f46-6752-4a83-8216-d35956d0ed8c",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "you are checking for a scalar here and above?",
        "createdAt" : "2018-08-08T10:11:44Z",
        "updatedAt" : "2018-08-10T14:11:41Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "4c89aab8-f138-4525-9a4d-6d9e58ac9a74",
        "parentId" : "01645f46-6752-4a83-8216-d35956d0ed8c",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "It's kind of annoying.  If `lib.is_scalar(other)` then we will be dispatching to the `Series` op, in which case we want to pass the \"raw\" op (e.g.` operator.add`) and not the wrapped op `na_op`.\r\n\r\nThis PR handles only scalars since that is a relatively easy case.  A few PRs down the road we'll have all these ops dispatch to series, at which point this won't be necessary.",
        "createdAt" : "2018-08-08T17:38:27Z",
        "updatedAt" : "2018-08-10T14:11:41Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b62135b945ea015ef5531af8dc9502f6c018511",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1744,1748 @@                self = self.fillna(fill_value)\n\n            pass_op = op if lib.is_scalar(other) else na_op\n            return self._combine_const(other, pass_op, try_cast=True)\n"
  },
  {
    "id" : "652a6461-5b39-4622-8bf7-de9794f76b86",
    "prId" : 22173,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22173#pullrequestreview-143039042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79e57b9a-fffd-4f07-a849-c735c10fac23",
        "parentId" : null,
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "From an error reporting perspective, I might go for:\r\n\r\n~~~python\r\nif isinstance(y, (list, ABCSeries, ABCIndexClass)):\r\n   raise\r\n~~~\r\n\r\nA bare assert statement would unfortunately not provide much info to the end-user (admittedly, my proposed change assumes that the `TypeError` raised has some kind of message).  At the very least, adding an error message on the `assert` would be useful.",
        "createdAt" : "2018-08-03T02:45:57Z",
        "updatedAt" : "2018-09-20T00:46:19Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "03d574c3-a8e7-4c9d-9fbd-8152a7198024",
        "parentId" : "79e57b9a-fffd-4f07-a849-c735c10fac23",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "This comment BTW applies to any of your other `assert` statements.",
        "createdAt" : "2018-08-03T02:47:29Z",
        "updatedAt" : "2018-09-20T00:46:19Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "44aa551cffc26f2f1fdd5728f2064ad77215345c",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1532,1536 @@            result = op(x, y)\n        except TypeError:\n            assert not isinstance(y, (list, ABCSeries, ABCIndexClass))\n            if isinstance(y, np.ndarray):\n                # bool-bool dtype operations should be OK, should not get here"
  },
  {
    "id" : "fcd31748-2d5f-4ad9-a787-d386f2d74512",
    "prId" : 22378,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22378#pullrequestreview-146850873",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "380b16d5-c3b8-44e1-9754-c418e24aa0d5",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "Is checking that it is a string a bit more logical?",
        "createdAt" : "2018-08-16T07:35:27Z",
        "updatedAt" : "2018-08-16T07:37:21Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "4679102b-d653-4766-ba42-998a22d9a7d6",
        "parentId" : "380b16d5-c3b8-44e1-9754-c418e24aa0d5",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "I guess that would work.  Elsewhere the same check is done with `not is_scalar`",
        "createdAt" : "2018-08-16T13:43:04Z",
        "updatedAt" : "2018-08-16T13:43:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "d7ac4c9a-dd22-4c05-bc12-1f9723b2ff6e",
        "parentId" : "380b16d5-c3b8-44e1-9754-c418e24aa0d5",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "then ignore my comment and go for consistency",
        "createdAt" : "2018-08-16T13:48:25Z",
        "updatedAt" : "2018-08-16T13:48:25Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1e20429bcfe98bf7a628d11969fe05a8eca0676",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1229,1233 @@\n        elif (is_extension_array_dtype(left) or\n                (is_extension_array_dtype(right) and not is_scalar(right))):\n            # GH#22378 disallow scalar to exclude e.g. \"category\", \"Int64\"\n            return dispatch_to_extension_op(op, left, right)"
  },
  {
    "id" : "a3cd7226-4ab9-4d49-bb9b-d50e6ec8c7d5",
    "prId" : 22572,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22572#pullrequestreview-152449323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9469ba47-d127-4d68-a5a0-d133b31b1b98",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "is there a reason you needed to add this? (e.g. do we actually hit this in the new code path and not in the original)? ",
        "createdAt" : "2018-09-04T11:12:03Z",
        "updatedAt" : "2018-09-04T11:12:25Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "a8325bc1-01b1-496f-b7df-e860499c8205",
        "parentId" : "9469ba47-d127-4d68-a5a0-d133b31b1b98",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "Yes.  This PR has `DataFrame._combine_const` send zero-dim arrays down this path, which without this line don't get handled correctly.",
        "createdAt" : "2018-09-04T13:57:39Z",
        "updatedAt" : "2018-09-04T13:57:39Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "e0769612-413f-47b3-bbe3-d45df5fb5ad8",
        "parentId" : "9469ba47-d127-4d68-a5a0-d133b31b1b98",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok great",
        "createdAt" : "2018-09-05T11:29:22Z",
        "updatedAt" : "2018-09-05T11:29:22Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "26239046890cec697d1917f63d5f826d7117c1bf",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1639,1643 @@    # Note: we use iloc to access columns for compat with cases\n    #       with non-unique columns.\n    right = lib.item_from_zerodim(right)\n    if lib.is_scalar(right):\n        new_data = {i: func(left.iloc[:, i], right)"
  },
  {
    "id" : "6d2e4e25-b42b-43e9-a8f3-bb5094e47a6b",
    "prId" : 22696,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22696#pullrequestreview-160045962",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43cb9d19-dce3-41c1-af9d-5319c2a71fe1",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "There are a handful of dispatch functions scattered about this module.  In a follow-up I'd like to collect them in one place.",
        "createdAt" : "2018-09-28T22:49:43Z",
        "updatedAt" : "2018-10-02T01:38:36Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6f7fbf261e7528e32721b6707c303bd8d71ef7d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +904,908 @@# Dispatch logic\n\ndef should_series_dispatch(left, right, op):\n    \"\"\"\n    Identify cases where a DataFrame operation should dispatch to its"
  }
]